# NOTE:
# When we build kotekan on the Github VM we need to take into account a few
# limitations: first we can't lock very much memory so we need to disable
# mlock the buffers. Second, the VMs run across a range of CPU
# architectures (from Haswell to Skylake-AVX512 as of 2020/03). Because our
# use of ccache shares compiled objects we must target our build for the
# lowest architecture available or we will occasionally crash with SIGILL
# when a newer instruction is called than is available.  


name: kotekan-ci-test
on:
  pull_request:
    branches:
    - develop
    - master
  push:
    branches:
    - develop
    - master

env:
  REGISTRY: docker.pkg.github.com
  IMG_2204: "docker.pkg.github.com/${{ github.repository }}/kotekan-2204"
  PYTEST_TIMEOUT: 60

jobs:

  # Ubuntu 22.04 docker image build and push
  build-docker-2204:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Check for file changes
      uses: tj-actions/changed-files@v37
      id: changed-files

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get branch name
      id: get-branch-name
      run: >
        if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
          echo "branch_name=$(echo ${GITHUB_REF_NAME} | tr / .)" >> $GITHUB_OUTPUT;
        else
          echo "branch_name=$(echo ${GITHUB_HEAD_REF} | tr / .)" >> $GITHUB_OUTPUT;
        fi

    - name: Output environment variable details
      run: |
        echo "The job_id is: $GITHUB_JOB"
        echo "The id of this action is: $GITHUB_ACTION"
        echo "The run id is: $GITHUB_RUN_ID"
        echo "The repository is: $GITHUB_REPOSITORY"
        echo "The GitHub Actor's username is: $GITHUB_ACTOR"
        echo "GitHub SHA: $GITHUB_SHA"
        echo "GitHub event name: $GITHUB_EVENT_NAME"
        echo "GitHub Ref: $GITHUB_REF"
        echo "GitHub Head Ref: $GITHUB_HEAD_REF"
        echo "GitHub Ref Name: $GITHUB_REF_NAME"
        echo "Docker 2204 image: $IMG_2204"
        echo "Docker 1804 image: $IMG_1804"
        echo "Docker IWYU image: $IMG_IWYU"
        echo "Branch: ${{ steps.get-branch-name.outputs.branch_name }}"

    - name: Build and Push Docker Image
      if: contains(steps.changed-files.outputs.all_modified_files, 'tools/docker/22.04/Dockerfile') || env.DOCKER_BUILD
      run: |
        docker build --cache-from=${IMG_2204} -t "${IMG_2204}:${{ steps.get-branch-name.outputs.branch_name }}" - < tools/docker/22.04/Dockerfile
        docker push "${IMG_2204}:${{ steps.get-branch-name.outputs.branch_name }}"

    outputs:
      branch_name: "${{ steps.get-branch-name.outputs.branch_name }}"

  # Build kotekan documentation
  build-docs:
    runs-on: ubuntu-latest
    needs: build-docker-2204

    steps:
    - uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build kotekan docs
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ "${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }}")
        docker run "${OPTS[@]}" \
          cmake \
            -Wdev -Werror=dev -Wdeprecated -Werror=deprecated \
            -DDOXYGEN_EXECUTABLE=/usr/local/bin/doxygen \
            -DWERROR=ON \
            -DCOMPILE_DOCS=ON \
            -DWITH_TESTS=OFF ..
        docker run "${OPTS[@]}" make doc
        docker run "${OPTS[@]}" make sphinx

  # Linting
  lint:
    runs-on: ubuntu-latest
    needs: build-docker-2204

    steps:
    - uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run clang-format
      run: |
        mkdir -p build-check-format
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build-check-format/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" cmake -Wdev -Werror=dev -Wdeprecated -Werror=deprecated ..
        docker run "${OPTS[@]}" make clang-format
        git diff --exit-code

    - name: Run black
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" black --exclude docs --check .

    - name: Run cmakelint
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" tools/cmakelint.sh /code/kotekan

  # Build a basic version of kotekan
  build-base-2204:
    runs-on: ubuntu-latest
    needs: build-docker-2204

    steps:
    - uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache ccache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-base-build-${{ github.sha }}
        restore-keys: |
          ccache-base-build
          ccache-full-build

    - name: Build kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" \
          cmake -Wdev -Werror=dev -Wdeprecated -Werror=deprecated \
            -DWERROR=ON \
            -DCMAKE_LINK_WHAT_YOU_USE=ON \
            -DCMAKE_BUILD_TYPE=Test \
            -DARCH=haswell \
            -DCCACHE=ON \
            -DWITH_TESTS=ON ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" ccache -s

  # Build a full version of kotekan and run the unit tests
  build-full-test-2204:
    runs-on: ubuntu-latest
    needs: build-docker-2204

    steps:
    - uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache ccache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-base-build-${{ github.sha }}
        restore-keys: |
          ccache-base-build
          ccache-full-build

    - name: Free disk space
      if: ${{ !env.ACT }} # Don't free up if running locally
      run: |
          df -h
          docker rmi $(docker image ls -aq)
          df -h
          sudo apt-get clean
          sudo apt-get autoclean
          df -h

    - name: Build kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" \
          cmake -Wdev -Werror=dev -Wdeprecated -Werror=deprecated \
            -DWERROR=ON \
            -DCMAKE_LINK_WHAT_YOU_USE=ON \
            -DCMAKE_BUILD_TYPE=Test \
            -DUSE_HDF5=ON -DHIGHFIVE_PATH=/code/build/HighFive \
            -DUSE_LAPACK=ON -DBLAZE_PATH=/code/build/blaze \
            -DARCH=haswell \
            -DNO_MEMLOCK=ON \
            -DUSE_OMP=ON \
            -DWITH_TESTS=ON \
            -DCCACHE=ON ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" rm -r lib
        docker run "${OPTS[@]}" ccache -s
        df -h

    - name: Run parallel python tests
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" pytest -v -n auto --dist=loadfile --timeout=${PYTEST_TIMEOUT} -x -m 'not serial'

    - name: Run serial python tests
      if: env.RUN_2204_SERIAL_TESTS # These aren't working, so for now only run them upon request.
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" bash -c "redis-server --daemonize yes; pytest -v -x --timeout=${PYTEST_TIMEOUT} -m serial"

    - name: Run boost tests
      if: env.RUN_2204_BOOST_TESTS # These aren't working, so for now only run them upon request.
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_2204}:${{ needs.build-docker-2204.outputs.branch_name }})
        docker run "${OPTS[@]}" pytest -v -x --timeout=${PYTEST_TIMEOUT}
