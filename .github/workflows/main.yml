# NOTE:
# When we build kotekan on the Github VM we need to take into account a few
# limitations: first we can't lock very much memory so we need to disable
# mlock the buffers. Second, the VMs run across a range of CPU
# architectures (from Haswell to Skylake-AVX512 as of 2020/03). Because our
# use of ccache shares compiled objects we must target our build for the
# lowest architecture available or we will occasionally crash with SIGILL
# when a newer instruction is called than is available.

name: kotekan-ci-test
on:
  pull_request:
    branches:
    - develop
    - master
  push:
    branches:
    - develop
    - master

env:
  IMG_CORE: docker.pkg.github.com/kotekan/kotekan/kotekan-core:latest
  IMG_IWYU: docker.pkg.github.com/kotekan/kotekan/kotekan-iwyu:latest

jobs:

  # Build the docker images
  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Pull docker images
      run: |
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker pull --disable-content-trust ${IMG_CORE}
        docker pull --disable-content-trust ${IMG_IWYU}
    - name: Build core docker image
      run: |
        docker build --cache-from=rocm/dev-ubuntu-18.04,${IMG_CORE} -t ${IMG_CORE} - < tools/docker/Dockerfile
    - name: Build iwyu docker image
      run: |
        docker build --cache-from=rocm/dev-ubuntu-18.04,${IMG_CORE},${IMG_IWYU} -t ${IMG_IWYU} - < tools/iwyu/docker/Dockerfile
    - name: Push docker images
      run: |
        docker push ${IMG_CORE}
        docker push ${IMG_IWYU}


  # Build a basic version of kotekan
  build-base:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Cache ccache files
      uses: actions/cache@v1
      with:
        path: .ccache
        key: ccache-base-build-${{ github.sha }}
        restore-keys: |
          ccache-base-build
          ccache-full-build

    - name: Build kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" \
          cmake -DCMAKE_BUILD_TYPE=Test \
            -DARCH=haswell \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" ccache -s


  # Build a full version of kotekan and run the unit tests
  build-full-test:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Free disk space
      run: |
          df -h
          docker rmi $(docker image ls -aq)
          df -h
          sudo apt-get clean
          sudo apt-get autoclean
          df -h

    - name: Cache ccache files
      uses: actions/cache@v1
      with:
        path: .ccache
        key: ccache-full-build-${{ github.sha }}
        restore-keys: |
          ccache-full-build
          ccache-base-build

    - name: Build kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" \
          cmake -DCMAKE_BUILD_TYPE=Test \
            -DUSE_HDF5=ON -DHIGHFIVE_PATH=/code/build/HighFive \
            -DUSE_LAPACK=ON -DBLAZE_PATH=/code/build/blaze \
            -DARCH=haswell \
            -DNO_MEMLOCK=ON \
            -DUSE_OMP=ON \
            -DBOOST_TESTS=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" rm -r lib
        docker run "${OPTS[@]}" ccache -s
        df -h

    - name: Run parallel python tests
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_CORE})
        docker run "${OPTS[@]}" pytest -v -n auto --dist=loadfile -x -m 'not serial'

    - name: Run serial python tests
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_CORE})
        docker run "${OPTS[@]}" bash -c "redis-server --daemonize yes; pytest -v -x -m serial"

    - name: Run boost tests
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/tests/ -e PYTHONPATH=/code/kotekan/python/ ${IMG_CORE})
        docker run "${OPTS[@]}" pytest -v -x


  # Build a full CHIME version of kotekan
  build-chime:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Cache ccache files
      uses: actions/cache@v1
      with:
        path: .ccache
        key: ccache-chime-build-${{ github.sha }}
        restore-keys: |
          ccache-chime-build
          ccache-full-build

    - name: Build kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" \
          cmake -DCMAKE_BUILD_TYPE=Test \
            -DUSE_DPDK=ON \
            -DUSE_HDF5=ON -DHIGHFIVE_PATH=/code/build/HighFive \
            -DUSE_LAPACK=ON -DBLAZE_PATH=/code/build/blaze \
            -DARCH=haswell \
            -DNO_MEMLOCK=ON \
            -DUSE_OMP=ON \
            -DBOOST_TESTS=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" ccache -s


  # Build a full CHIME version with clang
  build-clang:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Cache ccache files
      uses: actions/cache@v1
      with:
        path: .ccache
        key: ccache-clang-build-${{ github.sha }}
        restore-keys: |
          ccache-clang-build

    - name: Build kotekan
      env:
        CC: clang
        CXX: clang++
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" ccache -s
        docker run "${OPTS[@]}" cmake \
        -DUSE_DPDK=ON \
        -DCMAKE_BUILD_TYPE=Test \
        -DUSE_HDF5=ON \
        -DHIGHFIVE_PATH=/code/build/HighFive \
        -DUSE_LAPACK=ON \
        -DBLAZE_PATH=/code/build/blaze \
        -DARCH=haswell \
        -DNO_MEMLOCK=ON \
        -DUSE_OMP=ON \
        -DBOOST_TESTS=ON \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache ..
        docker run "${OPTS[@]}" make -j 2
        docker run "${OPTS[@]}" ccache -s


  # Build MacOS kotekan
  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Cache ccache files
      uses: actions/cache@v1
      with:
        path: .ccache
        key: ccache-macos-build-${{ github.sha }}
        restore-keys: |
          ccache-macos-build

    - name: Install ccache and libraries
      run: |
        brew install hdf5@1.10 boost libevent ccache airspy fftw

    - name: Build h5py from source
      run: |
        git clone https://github.com/h5py/h5py.git h5py && cd h5py
        python3.7 setup.py configure --hdf5=/usr/local/opt/hdf5@1.10/
        python3.7 setup.py build

    - name: Install bitshuffle
      env:
        HDF5_DIR: /usr/local/opt/hdf5@1.10/
      run: |
        git clone https://github.com/kiyo-masui/bitshuffle.git bitshuffle && cd bitshuffle
        python3.7 setup.py install --h5plugin --h5plugin-dir=/usr/local/opt/hdf5@1.10/lib/plugin

    - name: Clone Blaze and HighFive
      run: |
        git clone https://bitbucket.org/blaze-lib/blaze.git blaze
        git clone --single-branch --branch extensible-datasets https://github.com/jrs65/HighFive.git

    - name: Install OpenBLAS and LAPACK
      run: brew install openblas lapack

    - name: Build kotekan
      env:
        CCACHE_NOHASHDIR: 1
        CCACHE_BASEDIR: $GITHUB_WORKSPACE
        CCACHE_DIR: $GITHUB_WORKSPACE/.ccache/
        CCACHE_COMPRESS: 1
        CCACHE_MAXSIZE: 1G
      run: |
        # adding this to the above env block breaks and results in sh not finding cmake etc
        export PATH="/usr/local/opt/hdf5@1.10/bin:$PATH"
        cd build
        cmake \
        -DUSE_HDF5=ON \
        -DUSE_OPENCL=ON \
        -DUSE_FFTW=ON \
        -DUSE_AIRSPY=ON \
        -DUSE_LAPACK=ON \
        -DCMAKE_PREFIX_PATH=/usr/local/opt/openblas/ \
        -DLAPACKE_DIR=/usr/local/opt/openblas/ \
        -DBLAZE_PATH=$GITHUB_WORKSPACE/blaze \
        -DHIGHFIVE_PATH=$GITHUB_WORKSPACE/HighFive \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache ..
        make -j 2

  # Build kotekan documentation
  build-docs:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Build kotekan docs
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" \
          cmake -DCOMPILE_DOCS=ON \
            -DPLANTUML_PATH=/code/build/plantuml \
            -DBOOST_TESTS=OFF ..
        docker run "${OPTS[@]}" make doc
        docker run "${OPTS[@]}" make sphinx


  iwyu:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.base_ref == 'master'

    steps:
    - uses: actions/checkout@v2

    - name: Configure kotekan
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_IWYU})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" \
          cmake -DCMAKE_BUILD_TYPE=Test \
            -DUSE_DPDK=ON \
            -DUSE_HDF5=ON -DHIGHFIVE_PATH=/code/build/HighFive \
            -DUSE_LAPACK=ON -DBLAZE_PATH=/code/build/blaze \
            -DARCH=haswell \
            -DNO_MEMLOCK=ON \
            -DUSE_OMP=ON \
            -DBOOST_TESTS=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..

    - name: Run iwyu
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build/ ${IMG_IWYU})
        docker run "${OPTS[@]}" /code/kotekan/tools/iwyu/docker/iwyu.sh


  lint:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - uses: actions/checkout@v2

    - name: Run clang-format
      run: |
        mkdir -p build-check-format
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/build-check-format/ ${IMG_CORE})
        docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p "${{ secrets.GITHUB_TOKEN }}"
        docker run "${OPTS[@]}" cmake ..
        docker run "${OPTS[@]}" make clang-format
        git diff --exit-code

    - name: Run black
      run: |
        OPTS=(--rm --mount type=bind,src=$(pwd),target=/code/kotekan -w /code/kotekan/ ${IMG_CORE})
        docker run "${OPTS[@]}" black --exclude docs --check .
