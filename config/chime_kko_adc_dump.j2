##########################################
#
# chime_kko_adc_dump.yaml
#
# Config to dump a burst capture of ADC data
#
# Author: Andre Renard
#
##########################################
---
type: config
# Logging level can be one of:
# OFF, ERROR, WARN, INFO, DEBUG, DEBUG2 (case insensitive)
# Note DEBUG and DEBUG2 require a build with (-DCMAKE_BUILD_TYPE=Debug)
log_level: debug

# Change this value to set the length of the dump required
# For samples_per_data_set = 32768 * 2, this is ~167ms * buffer_depth
# So for 60 seconds set to 358
buffer_depth: 358

samples_per_data_set: 32768 * 2
num_local_freq: 16
num_freq_in_frame: num_local_freq
num_elements: 128
num_blocks: (num_elements / block_size) * (num_elements / block_size + 1) / 2
sizeof_int: 4
num_gpus: 2
block_size: 32
num_data_sets: 1
data_format: "4+4b"
# The number of FPGA links per NUMA domain
num_links: 16
instrument_name: princeton

cpu_affinity: [8, 9, 10, 11, 12, 13, 14, 15, 16, 32, 33, 34, 35, 36, 37, 38, 39]

### Change this value to adjust which links are recorded
{% set selected_links = [29] %}

###################
#### telescope ####
###################

telescope:
  name: ICETelescope
  require_gps: false
  query_gps: true
  gps_host: 10.40.1.1 # `gw`
  allow_default_frequency_map: true # Don't fall back on default map

###############
#### comet ####
###############

dataset_manager:
  use_dataset_broker: True
  ds_broker_host: 10.40.1.5 # aux
  ds_broker_port: 12050

##################
#### Metadata ####
##################

main_pool:
    kotekan_metadata_pool: chimeMetadata
    num_metadata_objects: 4 * buffer_depth

#################
#### Buffers ####
#################

gpu_input_buffers:
    num_frames: buffer_depth
    frame_size: samples_per_data_set * num_elements * num_local_freq
    metadata_pool: main_pool
{%- for id in range(16) %}
{%- if id in selected_links %}
    gpu_input_buffer_{{ id }}:
        numa_node: 0
        kotekan_buffer: standard
{%- endif %}
{%- endfor %}
{%- for id in range(16,32) %}
{%- if id in selected_links %}
    gpu_input_buffer_{{ id }}:
        numa_node: 1
        kotekan_buffer: standard
{%- endif %}
{%- endfor %}

lost_samples_buffers:
    num_frames: buffer_depth
    frame_size: samples_per_data_set
    metadata_pool: main_pool
{%- for id in range(16) %}
{%- if id in selected_links %}
    lost_samples_buffer_{{ id }}:
        numa_node: 0
        zeroing_thread_affinity: [8]
        kotekan_buffer: standard
{%- endif %}
{%- endfor %}
{%- for id in range(16,32) %}
{%- if id in selected_links %}
    lost_samples_buffer_{{ id }}:
        numa_node: 1
        zeroing_thread_affinity: [32]
        kotekan_buffer: standard
{%- endif %}
{%- endfor %}

################
#### Stages ####
################

### Data Capture ###

# DPDK packet capture from FPGA
dpdk:
    kotekan_stage: dpdkCore
    # Format is index = lcore, value = cpu core
    lcore_cpu_map: [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31]
    master_lcore_cpu: 9
    fpga_packet_size: 4160
    num_mem_channels: 8
    alignment: samples_per_data_set * 32
    mbuf_cache_size: 250
    init_mem_alloc: 1024,1024
    capture_n_frames: buffer_depth
    # Format is index = lcore, value = array of port IDs
    # so [[0,1],[2,3]] maps lcore 0 to service ports 0 and 1,
    # and lcore 1 to service ports 2 and 3.
    lcore_port_map:
        - [0,1]
        - [2,3]
        - [4,5]
        - [6,7]
        - [8,9]
        - [10,11]
        - [12,13]
        - [14,15]
        - [16,17]
        - [18,19]
        - [20,21]
        - [22,23]
        - [24,25]
        - [26,27]
        - [28,29]
        - [30,31]

    # One handler must be given per port on the system.
    handlers:
{%- for id in range(32) %}
{%- if id in selected_links %}
        - dpdk_handler: iceBoardStandard
          out_buf: gpu_input_buffer_{{ id }}
          lost_samples_buf: lost_samples_buffer_{{ id }}
{%- else %}
        - dpdk_handler: none
{%- endif %}
{%- endfor %}

zero_samples:
{%- for id in range(32) %}
{%- if id in selected_links %}
    zero_{{ id }}:
        kotekan_stage: zeroSamples
        zero_value: 0
        out_buf: gpu_input_buffer_{{ id }}
        lost_samples_buf: lost_samples_buffer_{{ id }}
{%- endif %}
{%- endfor %}


### Output to disk ###

# Later this should be changed to a remote kotekan recv
raw_file_write:
{%- for id in range(32) %}
{%- if id in selected_links %}
    file_write_{{ id }}:
        kotekan_stage: rawFileWrite
        in_buf: gpu_input_buffer_{{ id }}
        # *** Change this value for each run ***
        base_dir: /data/adc/20220608_raw_adc_00/
        file_name: adc_data_{{ id }}
        file_ext: raw
        # Only include this line if there is one link being used.
        exit_after_n_files: buffer_depth
{%- endif %}
{%- endfor %}
