########################################################################
# Test of connecting GPU ring-buffers to multiple upchannelizer kernels
# (with different upchannelization factors)
########################################################################
---
type: config
log_level: debug2   # info
cpu_affinity: [0,1,2,3,4,5,6,7]
buffer_depth: 4

frame_arrival_period: 2.56e-6 * num_times

sizeof_int16: 2
sizeof_int32: 4
sizeof_float16: 2

# Basic constants
num_components: 2
num_polarizations: 2

# # F-Engine simulator: Dishes
# num_dish_locations_ew: 12        # east-west
# num_dish_locations_ns: 8         # north-south
# num_dish_locations: num_dish_locations_ns * num_dish_locations_ew
# dish_separation_ew: 6.3          # [m] east-west
# dish_separation_ns: 8.5          # [m] north-south
# # The actual dishes live on an 11x6 grid.
# dish_indices: [
#     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
#     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
#     -1,-1,-1, 0, 1, 2, 3, 4, 5, 6, 7, 8,
#     -1, 9,10,11,12,13,14,15,16,17,18,19,
#     -1,20,21,22,23,24,25,26,27,28,29,30,
#     -1,31,32,33,34,35,36,37,38,39,40,41,
#     -1,42,43,44,45,46,47,48,49,50,51,52,
#     -1,53,54,55,56,57,58,59,60,61,62,63,
# ]

# # F-Engine simulator: ADC
# num_samples_per_frame: 2048
# 
# # F-Engine simulator: FT (PFB)

num_dishes: 64
num_frequencies: 128
num_times: 2048   #TODO 32768

# Upchannelizer setup
# MUST match the actual name of the Upchannelizer used in the GPU stage definitions below!
# ALSO need to set the "testDatGen" array_shape
upchannelization_factor_A: 16
upchannelization_factor_B: 32
upchannelization_factor_C: 8

# # FRB beamformer setup
# frb_downsampling_factor: 40
# frb_num_output_times: num_times / frb_downsampling_factor # rounding down
# frb_num_beams_P: 2 * num_dish_locations_ns
# frb_num_beams_Q: 2 * num_dish_locations_ew

# Pool:
main_pool:
    kotekan_metadata_pool: chordMetadata
    num_metadata_objects: 10 * buffer_depth

# host_bb_phase_buffer:
#     kotekan_buffer: standard
#     num_frames: buffer_depth
#     frame_size: num_components * num_dishes * bb_num_beams * num_polarizations * num_frequencies
#     metadata_pool: main_pool
# 
# host_bb_shift_buffer:
#     kotekan_buffer: standard
#     num_frames: buffer_depth
#     frame_size: sizeof_int32 * bb_num_beams * num_polarizations * num_frequencies
#     metadata_pool: main_pool

host_upchan_gain_buffer_A:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: sizeof_float16 * num_frequencies * upchannelization_factor_A
    metadata_pool: main_pool

host_upchan_gain_buffer_B:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: sizeof_float16 * num_frequencies * upchannelization_factor_B
    metadata_pool: main_pool

host_upchan_gain_buffer_C:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: sizeof_float16 * num_frequencies * upchannelization_factor_C
    metadata_pool: main_pool

# host_frb_phase_buffer:
#     kotekan_buffer: standard
#     num_frames: buffer_depth
#     frame_size: sizeof_float16 * num_components * num_dish_locations_M * num_dish_locations_N * num_frequencies * num_polarizations
#     metadata_pool: main_pool

host_voltage_buffer:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: num_dishes * num_polarizations * num_frequencies * num_times
    metadata_pool: main_pool

host_upchan_voltage_buffer_A:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_A) * (num_times / upchannelization_factor_A)
    metadata_pool: main_pool

host_upchan_voltage_buffer_B:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_B) * (num_times / upchannelization_factor_B)
    metadata_pool: main_pool

host_upchan_voltage_buffer_C:
    kotekan_buffer: standard
    num_frames: buffer_depth
    frame_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_C) * (num_times / upchannelization_factor_C)
    metadata_pool: main_pool

gen_data:
    kotekan_stage: testDataGen
    type: const
    values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] #, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    #frame_size: num_dishes * num_polarizations * num_frequencies * num_times

    # Opposite order from the way Erik writes it!
    #array_shape: [ 64, 2, 128, 32768 ]
    #dim_name: ["D", "P", "F", "T"]
    #array_shape: [ 32768, 128, 2, 64 ]
    array_shape: [ 2048, 128, 2, 64 ]
    dim_name: ["T", "F", "P", "D" ]
    out_buf: host_voltage_buffer

gen_data_A:
    kotekan_stage: testDataGen
    type: constf16
    value: 1
    out_buf: host_upchan_gain_buffer_A
    #num_frequencies * upchannelization_factor_A
    array_shape: [ 2048 ]
    dim_name: ["Fbar"]
gen_data_B:
    kotekan_stage: testDataGen
    type: constf16
    value: 1
    out_buf: host_upchan_gain_buffer_B
    #num_frequencies * upchannelization_factor_B
    array_shape: [ 4096 ]
    dim_name: ["Fbar"]
gen_data_C:
    kotekan_stage: testDataGen
    type: constf16
    value: 1
    out_buf: host_upchan_gain_buffer_C
    array_shape: [ 1024 ]
    dim_name: ["Fbar"]

# # Stages
# gen_voltage:
#     kotekan_stage: FEngine
#     num_frames: 10
#     E_buffer: host_voltage_buffer
#     A_buffer: host_bb_phase_buffer
#     J_buffer: host_expected_bb_beams_buffer
#     S_buffer: host_dish_locations_buffer
#     G_buffer: host_upchan_gain_buffer
#     W_buffer: host_frb_phase_buffer

e_chunk_size: num_dishes * num_polarizations * num_frequencies * num_times

upA_chunk_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_A) * (num_times / upchannelization_factor_A)
upB_chunk_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_B) * (num_times / upchannelization_factor_B)
upC_chunk_size: num_dishes * num_polarizations * (num_frequencies * upchannelization_factor_C) * (num_times / upchannelization_factor_C)

# This *4 is hard-coded in the upchannelizer code!
e_ringbuffer_size: e_chunk_size * 4
upA_ringbuffer_size: upA_chunk_size * 4
upB_ringbuffer_size: upB_chunk_size * 4
upC_ringbuffer_size: upC_chunk_size * 4

# Buffer used for signalling only, between the two GPU pipelines.
E_ringbuffer:
    kotekan_buffer: ring
    ring_buffer_size: e_ringbuffer_size
    metadata_pool: main_pool

upchan_A_ringbuffer:
    kotekan_buffer: ring
    ring_buffer_size: upA_ringbuffer_size
    metadata_pool: main_pool
upchan_B_ringbuffer:
    kotekan_buffer: ring
    ring_buffer_size: upB_ringbuffer_size
    metadata_pool: main_pool
upchan_C_ringbuffer:
    kotekan_buffer: ring
    ring_buffer_size: upC_ringbuffer_size
    metadata_pool: main_pool

gpuReadE:
    #profiling: true
    #log_profiling: true
    kernel_path: "../../lib/cuda/kernels/"
    commands: &command_list
    - name: cudaCopyToRingbuffer
      input_size: e_chunk_size
      ring_buffer_size: e_ringbuffer_size
      in_buf: host_in
      signal_buf: host_sig
      gpu_mem_output: e_ringbuf
    - name: cudaSyncInput
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        buffer_depth: 2
        commands: *command_list
        in_buffers:
            host_in: host_voltage_buffer
        out_buffers:
            host_sig: E_ringbuffer

gpuUpA:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        ### buffer_depth must match a x4 factor baked into the upchan # time samples
        buffer_depth: 4
        in_buffers:
            host_e_sig: E_ringbuffer
            host_upchan_gain: host_upchan_gain_buffer_A
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_A
            host_up_sig: upchan_A_ringbuffer
        commands:
        - name: cudaInputData
          in_buf: host_upchan_gain
          gpu_mem: upchan_gain_A
        - name: cudaSyncInput
        - name: cudaUpchannelizer_pathfinder_U16
          in_signal: host_e_sig
          out_signal: host_up_sig
          gpu_mem_input_voltage: e_ringbuf
          gpu_mem_gain: upchan_gain_A
          gpu_mem_output_voltage: upchan_ringbuf_A
        - name: cudaSyncOutput

gpuCopyA:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        buffer_depth: 2
        in_buffers:
            host_sig: upchan_A_ringbuffer
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_A
        commands:
        - name: cudaCopyFromRingbuffer
          host_signal: host_sig
          gpu_mem_input: upchan_ringbuf_A
          output_size: upA_chunk_size
          ring_buffer_size: upA_ringbuffer_size
          out_buf: host_upchan_voltage


gpuUpB:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        ### buffer_depth must match a x4 factor baked into the upchan # time samples
        buffer_depth: 4
        in_buffers:
            host_e_sig: E_ringbuffer
            host_upchan_gain: host_upchan_gain_buffer_B
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_B
            host_up_sig: upchan_B_ringbuffer
        commands:
        - name: cudaInputData
          in_buf: host_upchan_gain
          gpu_mem: upchan_gain_B
        - name: cudaSyncInput
        - name: cudaUpchannelizer_pathfinder_U32
          in_signal: host_e_sig
          out_signal: host_up_sig
          gpu_mem_input_voltage: e_ringbuf
          gpu_mem_gain: upchan_gain_B
          gpu_mem_output_voltage: upchan_ringbuf_B
        - name: cudaSyncOutput

gpuCopyB:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        buffer_depth: 2
        in_buffers:
            host_sig: upchan_B_ringbuffer
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_B
        commands:
        - name: cudaCopyFromRingbuffer
          host_signal: host_sig
          gpu_mem_input: upchan_ringbuf_B
          output_size: upB_chunk_size
          ring_buffer_size: upB_ringbuffer_size
          out_buf: host_upchan_voltage


gpuUpC:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        ### buffer_depth must match a x4 factor baked into the upchan # time samples
        buffer_depth: 4
        in_buffers:
            host_e_sig: E_ringbuffer
            host_upchan_gain: host_upchan_gain_buffer_C
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_C
            host_up_sig: upchan_C_ringbuffer
        commands:
        - name: cudaInputData
          in_buf: host_upchan_gain
          gpu_mem: upchan_gain_C
        - name: cudaSyncInput
        - name: cudaUpchannelizer_pathfinder_U8
          in_signal: host_e_sig
          out_signal: host_up_sig
          gpu_mem_input_voltage: e_ringbuf
          gpu_mem_gain: upchan_gain_C
          gpu_mem_output_voltage: upchan_ringbuf_C
        - name: cudaSyncOutput

gpuCopyC:
    kernel_path: "lib/cuda/kernels"
    gpu_0:
        kotekan_stage: cudaProcess
        gpu_id: 0
        buffer_depth: 2
        in_buffers:
            host_sig: upchan_C_ringbuffer
        out_buffers:
            host_upchan_voltage: host_upchan_voltage_buffer_C
        commands:
        - name: cudaCopyFromRingbuffer
          host_signal: host_sig
          gpu_mem_input: upchan_ringbuf_C
          output_size: upC_chunk_size
          ring_buffer_size: upC_ringbuffer_size
          out_buf: host_upchan_voltage


write_data:
    base_dir: /tmp/ringbuf_upchan
    exit_after_n_frames: 30
    exit_with_n_writers: 3
    write_voltage:
        #kotekan_stage: asdfFileWrite
        kotekan_stage: hdf5FileWrite
        in_buf: host_voltage_buffer
        file_name: voltage
    write_gain:
        #kotekan_stage: asdfFileWrite
        kotekan_stage: hdf5FileWrite
        in_buf: host_upchan_gain_buffer_A
        file_name: upchan_gain
    write_upchan_voltage:
        #kotekan_stage: asdfFileWrite
        kotekan_stage: hdf5FileWrite
        in_buf: host_upchan_voltage_buffer_A
        file_name: upchan_voltage
...
