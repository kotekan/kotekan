// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4066[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4114[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<302>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3417>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<326>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd82, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r257, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r257, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd83, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 9;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r258, %r4, %r5;
	or.b32  	%r259, %r258, %r2;
	mul.wide.u32 	%rd90, %r259, 4;
	add.s64 	%rd6, %rd83, %rd90;
	mov.u32 	%r260, 1;
	st.global.u32 	[%rd6], %r260;
	setp.gt.u32 	%p3, %r249, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r250, %r249;
	setp.gt.s32 	%p5, %r250, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r250, %r249;
	and.b32  	%r261, %r6, 63;
	setp.ne.s32 	%p7, %r261, 0;
	setp.gt.u32 	%p8, %r251, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r252, %r251;
	setp.lt.s32 	%p11, %r252, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r262, %r252, %r251;
	mul.hi.s32 	%r263, %r6, 715827883;
	shr.u32 	%r264, %r263, 31;
	shr.s32 	%r265, %r263, 5;
	add.s32 	%r266, %r265, %r264;
	setp.eq.s32 	%p13, %r262, %r266;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r253, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r254, %r253;
	setp.gt.s32 	%p16, %r254, 2;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r254, %r253;
	and.b32  	%r267, %r7, 1;
	setp.eq.b32 	%p18, %r267, 1;
	setp.lt.s32 	%p19, %r255, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r256, %r255;
	setp.gt.s32 	%p22, %r256, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r268, %r256, %r255;
	and.b32  	%r269, %r268, 1;
	setp.eq.b32 	%p24, %r269, 1;
	not.pred 	%p25, %p24;
	setp.eq.s32 	%p26, %r268, %r7;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_13;
$L__BB0_160:                            // %pass162
	and.b32  	%r146, %r5, 3;
	shr.u32 	%r147, %r5, 2;
	mul.lo.s32 	%r270, %r146, %r147;
	and.b32  	%r271, %r270, 7;
	cvt.rn.f32.s32 	%f185, %r271;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p28, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p297, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p28 bra 	$L__BB0_172;
// %bb.161:
	@%p297 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r149, %f750;
	and.b32  	%r272, %r149, 8388607;
	or.b32  	%r3412, %r272, 1065353216;
	mov.b32 	%f745, %r3412;
	add.s32 	%r273, %r149, -1073741824;
	and.b32  	%r3413, %r273, -8388608;
	setp.eq.s32 	%p35, %r3413, 0;
	@%p35 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r274, %r3413, 192937984;
	add.s32 	%r275, %r3412, %r274;
	mov.b32 	%f197, %r275;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3413, %r3413, %r274;
	mov.b32 	%r3412, %f745;
	setp.ne.s32 	%p36, %r3413, 0;
	setp.ne.s32 	%p37, %r3412, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p30, %r148, 1073741824;
	@%p30 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p31, %r148, -2147483647;
	@%p31 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p34, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p34;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p32, %f154, 0f40800000;
	@%p32 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p33, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p33;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p40, %f206, 0f7F800000;
	mov.b32 	%r276, %f151;
	and.b32  	%r156, %r276, -2147483648;
	@%p40 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r277, %f746;
	or.b32  	%r278, %r156, %r277;
	mov.b32 	%f746, %r278;
$L__BB0_174:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r5, 1;
	and.b32  	%r293, %r159, 2;
	mul.lo.s32 	%r160, %r293, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p48, %f726, 0f40000000;
	setp.gtu.f32 	%p298, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p48 bra 	$L__BB0_25;
// %bb.14:
	@%p298 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r294, %r9, 8388607;
	or.b32  	%r3378, %r294, 1065353216;
	mov.b32 	%f705, %r3378;
	add.s32 	%r295, %r9, -1073741824;
	and.b32  	%r3379, %r295, -8388608;
	setp.eq.s32 	%p55, %r3379, 0;
	@%p55 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r3379, 192937984;
	add.s32 	%r297, %r3378, %r296;
	mov.b32 	%f251, %r297;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3379, %r3379, %r296;
	mov.b32 	%r3378, %f705;
	setp.ne.s32 	%p56, %r3379, 0;
	setp.ne.s32 	%p57, %r3378, 0;
	and.pred  	%p58, %p56, %p57;
	@%p58 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p59, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p59;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p50, %r8, 1073741824;
	@%p50 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p51, %r8, -2147483647;
	@%p51 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p54, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p54;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p52, %f2, 0f40800000;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p53, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p53;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p60, %f260, 0f7F800000;
	mov.b32 	%r298, %f168;
	and.b32  	%r16, %r298, -2147483648;
	@%p60 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r299, %f706;
	or.b32  	%r300, %r16, %r299;
	mov.b32 	%f706, %r300;
$L__BB0_27:                             // %__nv_fmodf.exit2369
	add.s32 	%r309, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r309;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p68, %f730, 0f40000000;
	setp.gtu.f32 	%p299, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p68 bra 	$L__BB0_39;
// %bb.28:
	@%p299 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r310, %r18, 8388607;
	or.b32  	%r3380, %r310, 1065353216;
	mov.b32 	%f709, %r3380;
	add.s32 	%r311, %r18, -1073741824;
	and.b32  	%r3381, %r311, -8388608;
	setp.eq.s32 	%p75, %r3381, 0;
	@%p75 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r3381, 192937984;
	add.s32 	%r313, %r3380, %r312;
	mov.b32 	%f303, %r313;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3381, %r3381, %r312;
	mov.b32 	%r3380, %f709;
	setp.ne.s32 	%p76, %r3381, 0;
	setp.ne.s32 	%p77, %r3380, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p79, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p70, %r17, 1073741824;
	@%p70 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p71, %r17, -2147483647;
	@%p71 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p74, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p74;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p72, %f21, 0f40800000;
	@%p72 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p73, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p73;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p80, %f312, 0f7F800000;
	mov.b32 	%r314, %f18;
	and.b32  	%r25, %r314, -2147483648;
	@%p80 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r315, %f710;
	or.b32  	%r316, %r25, %r315;
	mov.b32 	%f710, %r316;
$L__BB0_41:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r331, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r331;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p88, %f734, 0f40000000;
	setp.gtu.f32 	%p300, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p88 bra 	$L__BB0_53;
// %bb.42:
	@%p300 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r332, %r30, 8388607;
	or.b32  	%r3382, %r332, 1065353216;
	mov.b32 	%f713, %r3382;
	add.s32 	%r333, %r30, -1073741824;
	and.b32  	%r3383, %r333, -8388608;
	setp.eq.s32 	%p95, %r3383, 0;
	@%p95 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r334, %r3383, 192937984;
	add.s32 	%r335, %r3382, %r334;
	mov.b32 	%f357, %r335;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3383, %r3383, %r334;
	mov.b32 	%r3382, %f713;
	setp.ne.s32 	%p96, %r3383, 0;
	setp.ne.s32 	%p97, %r3382, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p99, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p90, %r29, 1073741824;
	@%p90 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p91, %r29, -2147483647;
	@%p91 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p94, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p94;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p92, %f38, 0f40800000;
	@%p92 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p93, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p93;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p100, %f366, 0f7F800000;
	mov.b32 	%r336, %f35;
	and.b32  	%r37, %r336, -2147483648;
	@%p100 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r337, %f714;
	or.b32  	%r338, %r37, %r337;
	mov.b32 	%f714, %r338;
$L__BB0_55:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r339, %f367;
	and.b32  	%r340, %r339, -2147483648;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%f368, %r341;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p101, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p101;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p102, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p102;
	cvt.rzi.s32.f32 	%r342, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r343, %r342, 1;
	setp.eq.b32 	%p103, %r343, 1;
	selp.f32 	%f386, %f384, %f385, %p103;
	selp.f32 	%f387, %f385, %f384, %p103;
	and.b32  	%r344, %r342, 2;
	setp.eq.s32 	%p104, %r344, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p104;
	add.s32 	%r345, %r342, 1;
	and.b32  	%r346, %r345, 2;
	setp.eq.s32 	%p105, %r346, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p106, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p106;
	abs.f32 	%f395, %f714;
	add.s32 	%r347, %r28, %r147;
	and.b32  	%r348, %r347, 3;
	cvt.rn.f32.s32 	%f397, %r348;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p108, %f738, 0f40000000;
	setp.gtu.f32 	%p301, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p108 bra 	$L__BB0_67;
// %bb.56:
	@%p301 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r349, %r39, 8388607;
	or.b32  	%r3384, %r349, 1065353216;
	mov.b32 	%f717, %r3384;
	add.s32 	%r350, %r39, -1073741824;
	and.b32  	%r3385, %r350, -8388608;
	setp.eq.s32 	%p115, %r3385, 0;
	@%p115 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r3385, 192937984;
	add.s32 	%r352, %r3384, %r351;
	mov.b32 	%f409, %r352;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3385, %r3385, %r351;
	mov.b32 	%r3384, %f717;
	setp.ne.s32 	%p116, %r3385, 0;
	setp.ne.s32 	%p117, %r3384, 0;
	and.pred  	%p118, %p116, %p117;
	@%p118 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p119, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p119;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p110, %r38, 1073741824;
	@%p110 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p111, %r38, -2147483647;
	@%p111 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p114, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p114;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p112, %f57, 0f40800000;
	@%p112 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p113, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p113;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p105;
	setp.gt.f32 	%p107, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p120, %f418, 0f7F800000;
	mov.b32 	%r353, %f54;
	and.b32  	%r46, %r353, -2147483648;
	@%p120 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r354, %f718;
	or.b32  	%r355, %r46, %r354;
	mov.b32 	%f718, %r355;
$L__BB0_69:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p107;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r356, %f419;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f420, %r358;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p121, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p121;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p122, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p122;
	cvt.rzi.s32.f32 	%r359, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r360, %r359, 1;
	setp.eq.b32 	%p123, %r360, 1;
	selp.f32 	%f438, %f436, %f437, %p123;
	selp.f32 	%f439, %f437, %f436, %p123;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p124, %r361, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p124;
	add.s32 	%r362, %r359, 1;
	and.b32  	%r363, %r362, 2;
	setp.eq.s32 	%p125, %r363, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p125;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p126, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p126;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p127, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p127;
	and.b32  	%r47, %r5, 2;
	setp.eq.s32 	%p128, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p128 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p28 bra 	$L__BB0_182;
// %bb.72:
	@%p297 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_73;
$L__BB0_178:
	mov.b32 	%r162, %f750;
	and.b32  	%r370, %r162, 8388607;
	or.b32  	%r3414, %r370, 1065353216;
	mov.b32 	%f749, %r3414;
	add.s32 	%r371, %r162, -1073741824;
	and.b32  	%r3415, %r371, -8388608;
	setp.eq.s32 	%p136, %r3415, 0;
	@%p136 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3415, 192937984;
	add.s32 	%r373, %r3414, %r372;
	mov.b32 	%f459, %r373;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3415, %r3415, %r372;
	mov.b32 	%r3414, %f749;
	setp.ne.s32 	%p137, %r3415, 0;
	setp.ne.s32 	%p138, %r3414, 0;
	and.pred  	%p139, %p137, %p138;
	@%p139 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p140, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p140;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_182;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p131, %r161, 1073741824;
	@%p131 bra 	$L__BB0_177;
// %bb.74:
	setp.lt.u32 	%p132, %r161, -2147483647;
	@%p132 bra 	$L__BB0_175;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p135, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p135;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p133, %f171, 0f40800000;
	@%p133 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p134, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p134;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p141, %f468, 0f7F800000;
	@%p141 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r374, %f750;
	or.b32  	%r375, %r156, %r374;
	mov.b32 	%f750, %r375;
$L__BB0_184:                            // %__nv_fmodf.exit2493
	@%p48 bra 	$L__BB0_87;
// %bb.76:
	@%p298 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r390, %r51, 8388607;
	or.b32  	%r3386, %r390, 1065353216;
	mov.b32 	%f725, %r3386;
	add.s32 	%r391, %r51, -1073741824;
	and.b32  	%r3387, %r391, -8388608;
	setp.eq.s32 	%p156, %r3387, 0;
	@%p156 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3387, 192937984;
	add.s32 	%r393, %r3386, %r392;
	mov.b32 	%f511, %r393;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3387, %r3387, %r392;
	mov.b32 	%r3386, %f725;
	setp.ne.s32 	%p157, %r3387, 0;
	setp.ne.s32 	%p158, %r3386, 0;
	and.pred  	%p159, %p157, %p158;
	@%p159 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p160, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p160;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p151, %r50, 1073741824;
	@%p151 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p152, %r50, -2147483647;
	@%p152 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p155, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p155;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p153, %f80, 0f40800000;
	@%p153 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p154, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p154;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p161, %f520, 0f7F800000;
	@%p161 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r394, %f726;
	or.b32  	%r395, %r16, %r394;
	mov.b32 	%f726, %r395;
$L__BB0_89:                             // %__nv_fmodf.exit2524
	@%p68 bra 	$L__BB0_101;
// %bb.90:
	@%p299 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r404, %r59, 8388607;
	or.b32  	%r3388, %r404, 1065353216;
	mov.b32 	%f729, %r3388;
	add.s32 	%r405, %r59, -1073741824;
	and.b32  	%r3389, %r405, -8388608;
	setp.eq.s32 	%p176, %r3389, 0;
	@%p176 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3389, 192937984;
	add.s32 	%r407, %r3388, %r406;
	mov.b32 	%f561, %r407;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3389, %r3389, %r406;
	mov.b32 	%r3388, %f729;
	setp.ne.s32 	%p177, %r3389, 0;
	setp.ne.s32 	%p178, %r3388, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p180, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p171, %r58, 1073741824;
	@%p171 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p172, %r58, -2147483647;
	@%p172 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p175, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p175;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p173, %f97, 0f40800000;
	@%p173 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p174, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p174;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p181, %f570, 0f7F800000;
	@%p181 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r408, %f730;
	or.b32  	%r409, %r25, %r408;
	mov.b32 	%f730, %r409;
$L__BB0_103:                            // %__nv_fmodf.exit2555
	@%p88 bra 	$L__BB0_115;
// %bb.104:
	@%p300 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r424, %r69, 8388607;
	or.b32  	%r3390, %r424, 1065353216;
	mov.b32 	%f733, %r3390;
	add.s32 	%r425, %r69, -1073741824;
	and.b32  	%r3391, %r425, -8388608;
	setp.eq.s32 	%p196, %r3391, 0;
	@%p196 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r426, %r3391, 192937984;
	add.s32 	%r427, %r3390, %r426;
	mov.b32 	%f613, %r427;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3391, %r3391, %r426;
	mov.b32 	%r3390, %f733;
	setp.ne.s32 	%p197, %r3391, 0;
	setp.ne.s32 	%p198, %r3390, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p200, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p191, %r68, 1073741824;
	@%p191 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p192, %r68, -2147483647;
	@%p192 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p195, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p195;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p193, %f112, 0f40800000;
	@%p193 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p194, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p194;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p201, %f622, 0f7F800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r428, %f734;
	or.b32  	%r429, %r37, %r428;
	mov.b32 	%f734, %r429;
$L__BB0_117:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r430, %f623;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f624, %r432;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p203, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p203;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p204, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p204;
	cvt.rzi.s32.f32 	%r433, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p205, %r434, 1;
	selp.f32 	%f642, %f640, %f641, %p205;
	selp.f32 	%f643, %f641, %f640, %p205;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p206, %r435, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p206;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p207, %r437, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p208, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p208;
	abs.f32 	%f651, %f734;
	@%p108 bra 	$L__BB0_129;
// %bb.118:
	@%p301 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r438, %r77, 8388607;
	or.b32  	%r3392, %r438, 1065353216;
	mov.b32 	%f737, %r3392;
	add.s32 	%r439, %r77, -1073741824;
	and.b32  	%r3393, %r439, -8388608;
	setp.eq.s32 	%p216, %r3393, 0;
	@%p216 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3393, 192937984;
	add.s32 	%r441, %r3392, %r440;
	mov.b32 	%f663, %r441;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3393, %r3393, %r440;
	mov.b32 	%r3392, %f737;
	setp.ne.s32 	%p217, %r3393, 0;
	setp.ne.s32 	%p218, %r3392, 0;
	and.pred  	%p219, %p217, %p218;
	@%p219 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p220, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p220;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p211, %r76, 1073741824;
	@%p211 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p212, %r76, -2147483647;
	@%p212 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p215, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p215;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p213, %f129, 0f40800000;
	@%p213 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p214, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p214;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p207;
	setp.gt.f32 	%p209, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p221, %f672, 0f7F800000;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r442, %f738;
	or.b32  	%r443, %r46, %r442;
	mov.b32 	%f738, %r443;
$L__BB0_131:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p209;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r444, %f673;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f674, %r446;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p223, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p223;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p224, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p224;
	cvt.rzi.s32.f32 	%r447, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p225, %r448, 1;
	selp.f32 	%f692, %f690, %f691, %p225;
	selp.f32 	%f693, %f691, %f690, %p225;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p226, %r449, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p226;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p227, %r451, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p227;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p228, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p228;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p229, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p229;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p128 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p230, %r5, 15;
	mov.u32 	%r171, 999999999;
	@%p230 bra 	$L__BB0_186;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r459, %r5, 4;
	and.b32  	%r460, %r459, 240;
	or.b32  	%r461, %r460, %r1;
	mul.wide.u32 	%rd91, %r461, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r462, [%rd92];
	shl.b32 	%r463, %r462, 16;
	cvt.s32.s16 	%r86, %r462;
	shr.s32 	%r87, %r462, 16;
	or.b32  	%r464, %r463, 65535;
	setp.lt.u32 	%p231, %r464, 1114111;
	setp.lt.u32 	%p232, %r462, 1048576;
	and.pred  	%p233, %p231, %p232;
	@%p233 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_135;
$L__BB0_185:                            // %L1247
	mul.lo.s32 	%r468, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r468;
$L__BB0_186:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r285, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r286, %r285, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r382, %f469;
	or.b32  	%r287, %r286, 1056964608;
	mov.b32 	%r301, %f261;
	mov.b32 	%r323, %f313;
	and.b32  	%r383, %r382, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r287;
	and.b32  	%r302, %r301, -2147483648;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%r396, %f521;
	mov.b32 	%r416, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r303, %r302, 1056964608;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f470, %r384;
	and.b32  	%r397, %r396, -2147483648;
	and.b32  	%r417, %r416, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p41, %f211, 0f4B000000;
	mov.b32 	%f262, %r303;
	mov.b32 	%f314, %r325;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r398, %r397, 1056964608;
	or.b32  	%r418, %r417, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p41;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p42, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p143, %f473, 0f4B000000;
	mov.b32 	%f522, %r398;
	mov.b32 	%f572, %r418;
	selp.f32 	%f214, %f213, %f212, %p42;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p61, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p81, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p143;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p144, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p61;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p62, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p81;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p82, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p144;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p163, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p183, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p62;
	selp.f32 	%f320, %f319, %f318, %p82;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p163;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p164, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p183;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p184, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p164;
	selp.f32 	%f578, %f577, %f576, %p184;
	cvt.rzi.s32.f32 	%r288, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r385, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p43, %r289, 1;
	cvt.rzi.s32.f32 	%r304, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r326, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r386, %r385, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p43;
	and.b32  	%r290, %r288, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r305, %r304, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r327, %r326, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p145, %r386, 1;
	cvt.rzi.s32.f32 	%r399, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r419, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p44, %r290, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p63, %r305, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p83, %r327, 1;
	selp.f32 	%f488, %f486, %f487, %p145;
	and.b32  	%r387, %r385, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r400, %r399, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r420, %r419, 1;
	selp.f32 	%f227, %f225, %f224, %p43;
	selp.f32 	%f229, %f226, %f228, %p44;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p46, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p63;
	and.b32  	%r306, %r304, 2;
	selp.f32 	%f332, %f330, %f331, %p83;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p146, %r387, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p165, %r400, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p185, %r420, 1;
	setp.eq.s32 	%p45, %r292, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p46;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p64, %r306, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r307, %r304, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p84, %r328, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r329, %r326, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p145;
	selp.f32 	%f491, %f488, %f490, %p146;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p148, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p165;
	and.b32  	%r401, %r399, 2;
	selp.f32 	%f590, %f588, %f589, %p185;
	and.b32  	%r421, %r419, 2;
	selp.f32 	%f232, %f227, %f231, %p45;
	setp.gt.f32 	%p47, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p63;
	selp.f32 	%f283, %f280, %f282, %p64;
	and.b32  	%r308, %r307, 2;
	setp.eq.f32 	%p66, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p83;
	selp.f32 	%f335, %f332, %f334, %p84;
	and.b32  	%r330, %r329, 2;
	setp.eq.f32 	%p86, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p147, %r389, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p148;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p166, %r401, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r402, %r399, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p186, %r421, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r422, %r419, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p47;
	setp.eq.s32 	%p65, %r308, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p66;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p85, %r330, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p86;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p147;
	setp.gt.f32 	%p149, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p165;
	selp.f32 	%f543, %f540, %f542, %p166;
	and.b32  	%r403, %r402, 2;
	setp.eq.f32 	%p168, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p185;
	selp.f32 	%f593, %f590, %f592, %p186;
	and.b32  	%r423, %r422, 2;
	setp.eq.f32 	%p188, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r281, %f238;
	mov.b32 	%r284, %f235;
	selp.f32 	%f286, %f281, %f285, %p65;
	setp.gt.f32 	%p67, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p85;
	setp.gt.f32 	%p87, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p149;
	setp.eq.s32 	%p167, %r403, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p168;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p187, %r423, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p188;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r280, %r284, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p67;
	selp.f32 	%f344, %f343, %f338, %p87;
	mov.b32 	%r378, %f500;
	mov.b32 	%r381, %f497;
	selp.f32 	%f546, %f541, %f545, %p167;
	setp.gt.f32 	%p169, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p187;
	setp.gt.f32 	%p189, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r281;
	// end inline asm
	mov.b32 	%r319, %f344;
	mov.b32 	%r318, %f17;
	mov.b32 	%r322, %f341;
	mov.b32 	%r321, %f16;
	mov.b32 	%r365, %f75;
	mov.b32 	%r366, %f77;
	mov.b32 	%r368, %f76;
	mov.b32 	%r369, %f78;
	xor.b32  	%r377, %r381, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p169;
	selp.f32 	%f602, %f601, %f596, %p189;
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r378;
	// end inline asm
	mov.b32 	%r412, %f602;
	mov.b32 	%r411, %f95;
	mov.b32 	%r415, %f599;
	mov.b32 	%r414, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	mov.b32 	%r453, %f147;
	mov.b32 	%r454, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	mov.b32 	%r456, %f148;
	mov.b32 	%r457, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r455, %r457, %r456;
	// end inline asm
	shl.b32 	%r470, %r5, 6;
	and.b32  	%r471, %r470, 192;
	and.b32  	%r472, %r147, 1;
	shr.u32 	%r473, %r5, 3;
	and.b32  	%r474, %r473, 2;
	or.b32  	%r475, %r472, %r474;
	shl.b32 	%r476, %r475, 4;
	bfe.u32 	%r477, %r5, 3, 1;
	shl.b32 	%r478, %r1, 1;
	and.b32  	%r479, %r478, 14;
	or.b32  	%r480, %r477, %r479;
	or.b32  	%r481, %r476, %r471;
	or.b32  	%r482, %r481, %r480;
	or.b32  	%r483, %r482, %r4;
	mul.wide.u32 	%rd98, %r483, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.u32 	%r172, [%rd99];
	ld.global.u32 	%r173, [%rd99+1024];
	shl.b32 	%r484, %r249, 8;
	shl.b32 	%r485, %r253, 7;
	add.s32 	%r174, %r485, %r484;
	shl.b32 	%r175, %r5, 2;
	shl.b32 	%r176, %r3, 7;
	and.b32  	%r177, %r5, 16;
	shr.u32 	%r486, %r5, 4;
	and.b32  	%r487, %r159, 30;
	or.b32  	%r488, %r487, %r486;
	mul.lo.s32 	%r489, %r488, 257;
	and.b32  	%r490, %r2, 224;
	shr.u32 	%r491, %r1, 3;
	mad.lo.s32 	%r492, %r491, 257, %r490;
	or.b32  	%r493, %r491, 2;
	mad.lo.s32 	%r494, %r493, 257, %r490;
	or.b32  	%r495, %r491, 4;
	mad.lo.s32 	%r496, %r495, 257, %r490;
	or.b32  	%r497, %r491, 6;
	mad.lo.s32 	%r498, %r497, 257, %r490;
	or.b32  	%r499, %r491, 8;
	mad.lo.s32 	%r500, %r499, 257, %r490;
	or.b32  	%r501, %r491, 10;
	mad.lo.s32 	%r502, %r501, 257, %r490;
	or.b32  	%r503, %r491, 12;
	mad.lo.s32 	%r504, %r503, 257, %r490;
	or.b32  	%r505, %r491, 14;
	mad.lo.s32 	%r506, %r505, 257, %r490;
	or.b32  	%r507, %r491, 16;
	mad.lo.s32 	%r508, %r507, 257, %r490;
	or.b32  	%r509, %r491, 18;
	mad.lo.s32 	%r510, %r509, 257, %r490;
	or.b32  	%r511, %r491, 20;
	mad.lo.s32 	%r512, %r511, 257, %r490;
	or.b32  	%r513, %r491, 22;
	mad.lo.s32 	%r514, %r513, 257, %r490;
	or.b32  	%r515, %r491, 24;
	mad.lo.s32 	%r516, %r515, 257, %r490;
	or.b32  	%r517, %r491, 26;
	mad.lo.s32 	%r518, %r517, 257, %r490;
	or.b32  	%r519, %r491, 28;
	mad.lo.s32 	%r520, %r519, 257, %r490;
	or.b32  	%r521, %r491, 30;
	mad.lo.s32 	%r522, %r521, 257, %r490;
	mul.lo.s32 	%r523, %r146, 2184;
	mad.lo.s32 	%r524, %r475, 546, %r523;
	mad.lo.s32 	%r525, %r480, 33, %r524;
	setp.lt.u32 	%p235, %r5, 4;
	setp.eq.s32 	%p236, %r147, 4;
	setp.eq.s32 	%p237, %r147, 5;
	and.b32  	%r526, %r5, 1;
	neg.s32 	%r527, %r526;
	and.b32  	%r528, %r527, 2064;
	bfe.s32 	%r529, %r5, 3, 1;
	and.b32  	%r530, %r5, 8;
	setp.eq.s32 	%p238, %r530, 0;
	and.b32  	%r531, %r529, 258;
	selp.b32 	%r532, 0, 1032, %p128;
	bfe.s32 	%r533, %r5, 2, 1;
	and.b32  	%r534, %r533, 516;
	or.b32  	%r535, %r479, %r486;
	or.b32  	%r536, %r531, %r528;
	or.b32  	%r537, %r536, %r532;
	or.b32  	%r538, %r537, %r534;
	add.s32 	%r178, %r538, %r535;
	and.b32  	%r539, %r1, 1;
	neg.s32 	%r540, %r539;
	and.b32  	%r541, %r540, 2064;
	and.b32  	%r542, %r175, 12;
	mul.lo.s32 	%r543, %r491, 258;
	bfe.s32 	%r544, %r1, 1, 1;
	and.b32  	%r545, %r1, 2;
	setp.eq.s32 	%p239, %r545, 0;
	and.b32  	%r546, %r544, 1032;
	bfe.s32 	%r547, %r1, 2, 1;
	and.b32  	%r548, %r1, 4;
	setp.eq.s32 	%p240, %r548, 0;
	and.b32  	%r549, %r547, 516;
	and.b32  	%r550, %r529, 4144;
	or.b32  	%r551, %r541, %r475;
	add.s32 	%r552, %r543, %r542;
	add.s32 	%r553, %r552, %r546;
	add.s32 	%r554, %r553, %r549;
	add.s32 	%r555, %r554, %r550;
	add.s32 	%r556, %r555, %r551;
	mul.wide.u32 	%rd100, %r556, 4;
	mov.u64 	%rd101, shmem;
	add.s64 	%rd16, %rd101, %rd100;
	cvt.u64.u32 	%rd102, %r551;
	selp.b64 	%rd103, 0, 4144, %p238;
	selp.b64 	%rd104, 0, 516, %p240;
	selp.b64 	%rd105, 0, 1032, %p239;
	cvt.u64.u32 	%rd106, %r543;
	cvt.u64.u32 	%rd107, %r542;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	add.s64 	%rd110, %rd109, %rd104;
	add.s64 	%rd111, %rd110, %rd103;
	add.s64 	%rd112, %rd111, %rd102;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd17, %rd101, %rd113;
	add.s32 	%r557, %r552, %r541;
	add.s32 	%r558, %r557, %r475;
	add.s32 	%r559, %r558, %r546;
	add.s32 	%r560, %r559, %r549;
	add.s32 	%r561, %r560, %r550;
	shl.b32 	%r562, %r251, 20;
	shl.b32 	%r563, %r255, 9;
	add.s32 	%r564, %r563, %r562;
	and.b32  	%r565, %r5, 15;
	or.b32  	%r566, %r2, %r177;
	or.b32  	%r567, %r565, %r4;
	or.b32  	%r179, %r567, %r566;
	cvt.s64.s32 	%rd18, %r564;
	add.s32 	%r568, %r1, %r489;
	mul.wide.u32 	%rd114, %r568, 4;
	add.s64 	%rd19, %rd101, %rd114;
	cvt.u64.u32 	%rd115, %r1;
	cvt.u64.u32 	%rd20, %r489;
	add.s64 	%rd116, %rd20, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd21, %rd101, %rd117;
	add.s32 	%r569, %r492, %r5;
	mul.wide.u32 	%rd118, %r569, 4;
	add.s64 	%rd22, %rd101, %rd118;
	add.s32 	%r570, %r494, %r5;
	mul.wide.u32 	%rd119, %r570, 4;
	add.s64 	%rd23, %rd101, %rd119;
	add.s32 	%r571, %r496, %r5;
	mul.wide.u32 	%rd120, %r571, 4;
	add.s64 	%rd24, %rd101, %rd120;
	add.s32 	%r572, %r498, %r5;
	mul.wide.u32 	%rd121, %r572, 4;
	add.s64 	%rd25, %rd101, %rd121;
	add.s32 	%r573, %r500, %r5;
	mul.wide.u32 	%rd122, %r573, 4;
	add.s64 	%rd26, %rd101, %rd122;
	add.s32 	%r574, %r502, %r5;
	mul.wide.u32 	%rd123, %r574, 4;
	add.s64 	%rd27, %rd101, %rd123;
	add.s32 	%r575, %r504, %r5;
	mul.wide.u32 	%rd124, %r575, 4;
	add.s64 	%rd28, %rd101, %rd124;
	add.s32 	%r576, %r506, %r5;
	mul.wide.u32 	%rd125, %r576, 4;
	add.s64 	%rd29, %rd101, %rd125;
	add.s32 	%r577, %r508, %r5;
	mul.wide.u32 	%rd126, %r577, 4;
	add.s64 	%rd30, %rd101, %rd126;
	add.s32 	%r578, %r510, %r5;
	mul.wide.u32 	%rd127, %r578, 4;
	add.s64 	%rd31, %rd101, %rd127;
	add.s32 	%r579, %r512, %r5;
	mul.wide.u32 	%rd128, %r579, 4;
	add.s64 	%rd32, %rd101, %rd128;
	add.s32 	%r580, %r514, %r5;
	mul.wide.u32 	%rd129, %r580, 4;
	add.s64 	%rd33, %rd101, %rd129;
	add.s32 	%r581, %r516, %r5;
	mul.wide.u32 	%rd130, %r581, 4;
	add.s64 	%rd34, %rd101, %rd130;
	add.s32 	%r582, %r518, %r5;
	mul.wide.u32 	%rd131, %r582, 4;
	add.s64 	%rd35, %rd101, %rd131;
	add.s32 	%r583, %r520, %r5;
	mul.wide.u32 	%rd132, %r583, 4;
	add.s64 	%rd36, %rd101, %rd132;
	add.s32 	%r584, %r522, %r5;
	mul.wide.u32 	%rd133, %r584, 4;
	add.s64 	%rd37, %rd101, %rd133;
	add.s32 	%r585, %r525, %r491;
	mul.wide.u32 	%rd134, %r585, 4;
	add.s64 	%rd38, %rd101, %rd134;
	add.s32 	%r586, %r525, %r493;
	mul.wide.u32 	%rd135, %r586, 4;
	add.s64 	%rd39, %rd101, %rd135;
	add.s32 	%r587, %r525, %r495;
	mul.wide.u32 	%rd136, %r587, 4;
	add.s64 	%rd40, %rd101, %rd136;
	add.s32 	%r588, %r525, %r497;
	mul.wide.u32 	%rd137, %r588, 4;
	add.s64 	%rd41, %rd101, %rd137;
	add.s32 	%r589, %r525, %r499;
	mul.wide.u32 	%rd138, %r589, 4;
	add.s64 	%rd42, %rd101, %rd138;
	add.s32 	%r590, %r525, %r501;
	mul.wide.u32 	%rd139, %r590, 4;
	add.s64 	%rd43, %rd101, %rd139;
	add.s32 	%r591, %r525, %r503;
	mul.wide.u32 	%rd140, %r591, 4;
	add.s64 	%rd44, %rd101, %rd140;
	add.s32 	%r592, %r525, %r505;
	mul.wide.u32 	%rd141, %r592, 4;
	add.s64 	%rd45, %rd101, %rd141;
	add.s32 	%r593, %r525, %r507;
	mul.wide.u32 	%rd142, %r593, 4;
	add.s64 	%rd46, %rd101, %rd142;
	add.s32 	%r594, %r525, %r509;
	mul.wide.u32 	%rd143, %r594, 4;
	add.s64 	%rd47, %rd101, %rd143;
	add.s32 	%r595, %r525, %r511;
	mul.wide.u32 	%rd144, %r595, 4;
	add.s64 	%rd48, %rd101, %rd144;
	add.s32 	%r596, %r525, %r513;
	mul.wide.u32 	%rd145, %r596, 4;
	add.s64 	%rd49, %rd101, %rd145;
	add.s32 	%r597, %r525, %r515;
	mul.wide.u32 	%rd146, %r597, 4;
	add.s64 	%rd50, %rd101, %rd146;
	add.s32 	%r598, %r525, %r517;
	mul.wide.u32 	%rd147, %r598, 4;
	add.s64 	%rd51, %rd101, %rd147;
	add.s32 	%r599, %r525, %r519;
	mul.wide.u32 	%rd148, %r599, 4;
	add.s64 	%rd52, %rd101, %rd148;
	add.s32 	%r600, %r525, %r521;
	mul.wide.u32 	%rd149, %r600, 4;
	add.s64 	%rd53, %rd101, %rd149;
	add.s32 	%r601, %r147, -1;
	setp.lt.u32 	%p241, %r601, 3;
	or.pred  	%p242, %p235, %p241;
	or.pred  	%p243, %p242, %p236;
	and.b32  	%r602, %r5, 24;
	setp.eq.s32 	%p244, %r602, 24;
	or.pred  	%p245, %p237, %p244;
	selp.b32 	%r180, 1145324612, -286331154, %p242;
	or.pred  	%p1, %p243, %p245;
	shl.b32 	%r181, %r491, 5;
	add.s32 	%r603, %r178, %r181;
	mul.wide.u32 	%rd150, %r603, 4;
	add.s64 	%rd54, %rd101, %rd150;
	cvt.u64.u32 	%rd151, %r181;
	cvt.u64.u32 	%rd152, %r535;
	cvt.u64.u32 	%rd153, %r538;
	add.s64 	%rd55, %rd153, %rd152;
	add.s64 	%rd154, %rd55, %rd151;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd58, %rd101, %rd155;
	shl.b32 	%r604, %r493, 5;
	add.s32 	%r605, %r178, %r604;
	mul.wide.u32 	%rd156, %r605, 4;
	add.s64 	%rd59, %rd101, %rd156;
	cvt.u64.u32 	%rd157, %r604;
	add.s64 	%rd158, %rd55, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd61, %rd101, %rd159;
	shl.b32 	%r606, %r495, 5;
	add.s32 	%r607, %r178, %r606;
	mul.wide.u32 	%rd160, %r607, 4;
	add.s64 	%rd62, %rd101, %rd160;
	cvt.u64.u32 	%rd161, %r606;
	add.s64 	%rd162, %rd55, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd64, %rd101, %rd163;
	shl.b32 	%r608, %r497, 5;
	add.s32 	%r609, %r178, %r608;
	mul.wide.u32 	%rd164, %r609, 4;
	add.s64 	%rd65, %rd101, %rd164;
	cvt.u64.u32 	%rd165, %r608;
	add.s64 	%rd166, %rd55, %rd165;
	shl.b64 	%rd167, %rd166, 2;
	add.s64 	%rd67, %rd101, %rd167;
	add.s32 	%r610, %r561, 32;
	mul.wide.u32 	%rd168, %r610, 4;
	add.s64 	%rd68, %rd101, %rd168;
	add.s32 	%r611, %r561, 48;
	mul.wide.u32 	%rd169, %r611, 4;
	add.s64 	%rd69, %rd101, %rd169;
	add.s32 	%r612, %r561, 64;
	mul.wide.u32 	%rd170, %r612, 4;
	add.s64 	%rd70, %rd101, %rd170;
	add.s32 	%r613, %r561, 80;
	mul.wide.u32 	%rd171, %r613, 4;
	add.s64 	%rd71, %rd101, %rd171;
	add.s32 	%r614, %r561, 96;
	mul.wide.u32 	%rd172, %r614, 4;
	add.s64 	%rd72, %rd101, %rd172;
	add.s32 	%r615, %r561, 112;
	mul.wide.u32 	%rd173, %r615, 4;
	add.s64 	%rd73, %rd101, %rd173;
	add.s32 	%r616, %r561, 128;
	mul.wide.u32 	%rd174, %r616, 4;
	add.s64 	%rd74, %rd101, %rd174;
	add.s32 	%r617, %r561, 144;
	mul.wide.u32 	%rd175, %r617, 4;
	add.s64 	%rd75, %rd101, %rd175;
	add.s32 	%r618, %r561, 160;
	mul.wide.u32 	%rd176, %r618, 4;
	add.s64 	%rd76, %rd101, %rd176;
	add.s32 	%r619, %r561, 176;
	mul.wide.u32 	%rd177, %r619, 4;
	add.s64 	%rd77, %rd101, %rd177;
	add.s32 	%r620, %r561, 192;
	mul.wide.u32 	%rd178, %r620, 4;
	add.s64 	%rd78, %rd101, %rd178;
	add.s32 	%r621, %r561, 208;
	mul.wide.u32 	%rd179, %r621, 4;
	add.s64 	%rd79, %rd101, %rd179;
	add.s32 	%r622, %r561, 224;
	mul.wide.u32 	%rd180, %r622, 4;
	add.s64 	%rd80, %rd101, %rd180;
	add.s32 	%r623, %r561, 240;
	mul.wide.u32 	%rd181, %r623, 4;
	add.s64 	%rd81, %rd101, %rd181;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p247, %r177, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3406, %r89;
	mov.u32 	%r3407, %r89;
	mov.u32 	%r3408, %r89;
	bra.uni 	$L__BB0_187;
$L__BB0_158:                            // %L46133
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p296, %r89, 32704;
	mov.u32 	%r89, %r145;
	@%p296 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_159;
$L__BB0_187:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_205 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r624, %r89, %r249;
	setp.lt.s32 	%p246, %r624, %r250;
	@%p246 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_159;
$L__BB0_188:                            // %pass780
                                        //   in Loop: Header=BB0_187 Depth=1
	cvt.u32.u64 	%r817, %rd20;
	or.b32  	%r818, %r89, %r1;
	shl.b32 	%r819, %r818, 8;
	and.b32  	%r820, %r819, 8376064;
	or.b32  	%r821, %r820, %r175;
	or.b32  	%r822, %r821, %r176;
	add.s32 	%r823, %r174, %r822;
	shr.s32 	%r824, %r823, 31;
	shr.u32 	%r825, %r824, 9;
	add.s32 	%r826, %r823, %r825;
	shr.s32 	%r827, %r826, 23;
	setp.lt.s32 	%p248, %r823, 0;
	and.b32  	%r828, %r826, -8388608;
	setp.ne.s32 	%p249, %r828, %r823;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r829, 1, 0, %p250;
	sub.s32 	%r830, %r829, %r827;
	shl.b32 	%r831, %r830, 23;
	add.s32 	%r832, %r831, %r823;
	mul.wide.s32 	%rd182, %r832, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r833, %r834, %r835, %r836}, [%rd183];
	or.b32  	%r837, %r818, 16;
	shl.b32 	%r838, %r837, 8;
	and.b32  	%r839, %r838, 8380160;
	or.b32  	%r840, %r839, %r175;
	or.b32  	%r841, %r840, %r176;
	add.s32 	%r842, %r174, %r841;
	shr.s32 	%r843, %r842, 31;
	shr.u32 	%r844, %r843, 9;
	add.s32 	%r845, %r842, %r844;
	shr.s32 	%r846, %r845, 23;
	setp.lt.s32 	%p251, %r842, 0;
	and.b32  	%r847, %r845, -8388608;
	setp.ne.s32 	%p252, %r847, %r842;
	and.pred  	%p253, %p251, %p252;
	selp.u32 	%r848, 1, 0, %p253;
	sub.s32 	%r849, %r848, %r846;
	shl.b32 	%r850, %r849, 23;
	add.s32 	%r851, %r850, %r842;
	mul.wide.s32 	%rd184, %r851, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r852, %r853, %r854, %r855}, [%rd185];
	and.b32  	%r856, %r89, 32704;
	or.b32  	%r857, %r1, %r856;
	shl.b32 	%r858, %r857, 8;
	or.b32  	%r859, %r858, %r175;
	or.b32  	%r860, %r859, %r176;
	or.b32  	%r861, %r860, 8192;
	add.s32 	%r862, %r174, %r861;
	shr.s32 	%r863, %r862, 31;
	shr.u32 	%r864, %r863, 9;
	add.s32 	%r865, %r862, %r864;
	shr.s32 	%r866, %r865, 23;
	setp.lt.s32 	%p254, %r862, 0;
	and.b32  	%r867, %r865, -8388608;
	setp.ne.s32 	%p255, %r867, %r862;
	and.pred  	%p256, %p254, %p255;
	selp.u32 	%r868, 1, 0, %p256;
	sub.s32 	%r869, %r868, %r866;
	shl.b32 	%r870, %r869, 23;
	add.s32 	%r871, %r870, %r862;
	mul.wide.s32 	%rd186, %r871, 4;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.v4.u32 	{%r872, %r873, %r874, %r875}, [%rd187];
	or.b32  	%r876, %r860, 12288;
	add.s32 	%r877, %r174, %r876;
	shr.s32 	%r878, %r877, 31;
	shr.u32 	%r879, %r878, 9;
	add.s32 	%r880, %r877, %r879;
	shr.s32 	%r881, %r880, 23;
	setp.lt.s32 	%p257, %r877, 0;
	and.b32  	%r882, %r880, -8388608;
	setp.ne.s32 	%p258, %r882, %r877;
	and.pred  	%p259, %p257, %p258;
	selp.u32 	%r883, 1, 0, %p259;
	sub.s32 	%r884, %r883, %r881;
	shl.b32 	%r885, %r884, 23;
	add.s32 	%r886, %r885, %r877;
	mul.wide.s32 	%rd188, %r886, 4;
	add.s64 	%rd189, %rd3, %rd188;
	ld.global.v4.u32 	{%r887, %r888, %r889, %r890}, [%rd189];
	selp.b32 	%r891, %r835, %r833, %p247;
	shfl.sync.bfly.b32	%r892, %r891, 16, 31, -1;
	selp.b32 	%r627, %r833, %r892, %p247;
	selp.b32 	%r632, %r892, %r835, %p247;
	selp.b32 	%r893, %r836, %r834, %p247;
	shfl.sync.bfly.b32	%r894, %r893, 16, 31, -1;
	selp.b32 	%r635, %r834, %r894, %p247;
	selp.b32 	%r640, %r894, %r836, %p247;
	selp.b32 	%r895, %r854, %r852, %p247;
	shfl.sync.bfly.b32	%r896, %r895, 16, 31, -1;
	selp.b32 	%r643, %r852, %r896, %p247;
	selp.b32 	%r648, %r896, %r854, %p247;
	selp.b32 	%r897, %r855, %r853, %p247;
	shfl.sync.bfly.b32	%r898, %r897, 16, 31, -1;
	selp.b32 	%r651, %r853, %r898, %p247;
	selp.b32 	%r656, %r898, %r855, %p247;
	selp.b32 	%r899, %r874, %r872, %p247;
	shfl.sync.bfly.b32	%r900, %r899, 16, 31, -1;
	selp.b32 	%r659, %r872, %r900, %p247;
	selp.b32 	%r664, %r900, %r874, %p247;
	selp.b32 	%r901, %r875, %r873, %p247;
	shfl.sync.bfly.b32	%r902, %r901, 16, 31, -1;
	selp.b32 	%r667, %r873, %r902, %p247;
	selp.b32 	%r672, %r902, %r875, %p247;
	selp.b32 	%r903, %r889, %r887, %p247;
	shfl.sync.bfly.b32	%r904, %r903, 16, 31, -1;
	selp.b32 	%r675, %r887, %r904, %p247;
	selp.b32 	%r680, %r904, %r889, %p247;
	selp.b32 	%r905, %r890, %r888, %p247;
	shfl.sync.bfly.b32	%r906, %r905, 16, 31, -1;
	selp.b32 	%r683, %r888, %r906, %p247;
	selp.b32 	%r688, %r906, %r890, %p247;
	shl.b32 	%r628, %r632, 4;
	mov.u32 	%r626, 252645135;
	// begin inline asm
	lop3.b32 %r690, %r626, %r627, %r628, 202;
	// end inline asm
	shr.u32 	%r631, %r627, 4;
	// begin inline asm
	lop3.b32 %r706, %r626, %r631, %r632, 202;
	// end inline asm
	shl.b32 	%r636, %r640, 4;
	// begin inline asm
	lop3.b32 %r698, %r626, %r635, %r636, 202;
	// end inline asm
	shr.u32 	%r639, %r635, 4;
	// begin inline asm
	lop3.b32 %r714, %r626, %r639, %r640, 202;
	// end inline asm
	shl.b32 	%r644, %r648, 4;
	// begin inline asm
	lop3.b32 %r722, %r626, %r643, %r644, 202;
	// end inline asm
	shr.u32 	%r647, %r643, 4;
	// begin inline asm
	lop3.b32 %r738, %r626, %r647, %r648, 202;
	// end inline asm
	shl.b32 	%r652, %r656, 4;
	// begin inline asm
	lop3.b32 %r730, %r626, %r651, %r652, 202;
	// end inline asm
	shr.u32 	%r655, %r651, 4;
	// begin inline asm
	lop3.b32 %r746, %r626, %r655, %r656, 202;
	// end inline asm
	shl.b32 	%r660, %r664, 4;
	// begin inline asm
	lop3.b32 %r691, %r626, %r659, %r660, 202;
	// end inline asm
	shr.u32 	%r663, %r659, 4;
	// begin inline asm
	lop3.b32 %r707, %r626, %r663, %r664, 202;
	// end inline asm
	shl.b32 	%r668, %r672, 4;
	// begin inline asm
	lop3.b32 %r699, %r626, %r667, %r668, 202;
	// end inline asm
	shr.u32 	%r671, %r667, 4;
	// begin inline asm
	lop3.b32 %r715, %r626, %r671, %r672, 202;
	// end inline asm
	shl.b32 	%r676, %r680, 4;
	// begin inline asm
	lop3.b32 %r723, %r626, %r675, %r676, 202;
	// end inline asm
	shr.u32 	%r679, %r675, 4;
	// begin inline asm
	lop3.b32 %r739, %r626, %r679, %r680, 202;
	// end inline asm
	shl.b32 	%r684, %r688, 4;
	// begin inline asm
	lop3.b32 %r731, %r626, %r683, %r684, 202;
	// end inline asm
	shr.u32 	%r687, %r683, 4;
	// begin inline asm
	lop3.b32 %r747, %r626, %r687, %r688, 202;
	// end inline asm
	mov.u32 	%r692, 25152;
	// begin inline asm
	prmt.b32 %r754, %r690, %r691, %r692;
	// end inline asm
	mov.u32 	%r696, 29521;
	// begin inline asm
	prmt.b32 %r786, %r690, %r691, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r762, %r698, %r699, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r698, %r699, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r755, %r706, %r707, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r706, %r707, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r714, %r715, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r714, %r715, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r770, %r722, %r723, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r722, %r723, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r778, %r730, %r731, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r730, %r731, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r738, %r739, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r738, %r739, %r696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r746, %r747, %r692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r746, %r747, %r696;
	// end inline asm
	mov.u32 	%r812, 21520;
	// begin inline asm
	prmt.b32 %r753, %r754, %r755, %r812;
	// end inline asm
	mov.u32 	%r816, 30258;
	// begin inline asm
	prmt.b32 %r757, %r754, %r755, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r762, %r763, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r765, %r762, %r763, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r770, %r771, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r773, %r770, %r771, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r778, %r779, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r778, %r779, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r786, %r787, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r786, %r787, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r794, %r795, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r794, %r795, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r802, %r803, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r802, %r803, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r810, %r811, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r810, %r811, %r816;
	// end inline asm
	st.shared.u32 	[%rd19], %r753;
	st.shared.u32 	[%rd21+512], %r761;
	st.shared.u32 	[%rd21+256], %r757;
	st.shared.u32 	[%rd21+768], %r765;
	and.b32  	%r907, %r837, 31;
	add.s32 	%r908, %r907, %r817;
	mul.wide.u32 	%rd190, %r908, 4;
	add.s64 	%rd192, %rd101, %rd190;
	st.shared.u32 	[%rd192], %r769;
	cvt.u64.u32 	%rd193, %r907;
	add.s64 	%rd194, %rd20, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd101, %rd195;
	st.shared.u32 	[%rd196+512], %r777;
	st.shared.u32 	[%rd196+256], %r773;
	st.shared.u32 	[%rd196+768], %r781;
	st.shared.u32 	[%rd21+128], %r785;
	st.shared.u32 	[%rd21+640], %r793;
	st.shared.u32 	[%rd21+384], %r789;
	st.shared.u32 	[%rd21+896], %r797;
	st.shared.u32 	[%rd196+128], %r801;
	st.shared.u32 	[%rd196+640], %r809;
	st.shared.u32 	[%rd196+384], %r805;
	st.shared.u32 	[%rd196+896], %r813;
	bar.sync 	0;
	ld.shared.u32 	%r182, [%rd22];
	ld.shared.u32 	%r183, [%rd23];
	ld.shared.u32 	%r184, [%rd24];
	ld.shared.u32 	%r185, [%rd25];
	ld.shared.u32 	%r186, [%rd26];
	ld.shared.u32 	%r187, [%rd27];
	ld.shared.u32 	%r188, [%rd28];
	ld.shared.u32 	%r189, [%rd29];
	ld.shared.u32 	%r190, [%rd30];
	ld.shared.u32 	%r191, [%rd31];
	ld.shared.u32 	%r192, [%rd32];
	ld.shared.u32 	%r193, [%rd33];
	ld.shared.u32 	%r194, [%rd34];
	ld.shared.u32 	%r195, [%rd35];
	ld.shared.u32 	%r196, [%rd36];
	ld.shared.u32 	%r197, [%rd37];
	bar.sync 	0;
	shfl.sync.idx.b32	%r198, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r213, %r171, 15, 31, -1;
	setp.eq.s32 	%p260, %r198, 999999999;
	@%p260 bra 	$L__BB0_136;
// %bb.189:                             // %pass3083
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r909, %r198, %r5;
	mul.wide.s32 	%rd197, %r909, 4;
	add.s64 	%rd199, %rd101, %rd197;
	st.shared.u32 	[%rd199], %r182;
	setp.eq.s32 	%p261, %r199, 999999999;
	@%p261 bra 	$L__BB0_137;
// %bb.190:                             // %pass3151
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r910, %r199, %r5;
	mul.wide.s32 	%rd200, %r910, 4;
	add.s64 	%rd202, %rd101, %rd200;
	st.shared.u32 	[%rd202], %r183;
	setp.eq.s32 	%p262, %r200, 999999999;
	@%p262 bra 	$L__BB0_138;
// %bb.191:                             // %pass3219
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r911, %r200, %r5;
	mul.wide.s32 	%rd203, %r911, 4;
	add.s64 	%rd205, %rd101, %rd203;
	st.shared.u32 	[%rd205], %r184;
	setp.eq.s32 	%p263, %r201, 999999999;
	@%p263 bra 	$L__BB0_139;
// %bb.192:                             // %pass3287
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r912, %r201, %r5;
	mul.wide.s32 	%rd206, %r912, 4;
	add.s64 	%rd208, %rd101, %rd206;
	st.shared.u32 	[%rd208], %r185;
	setp.eq.s32 	%p264, %r202, 999999999;
	@%p264 bra 	$L__BB0_140;
// %bb.193:                             // %pass3355
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r913, %r202, %r5;
	mul.wide.s32 	%rd209, %r913, 4;
	add.s64 	%rd211, %rd101, %rd209;
	st.shared.u32 	[%rd211], %r186;
	setp.eq.s32 	%p265, %r203, 999999999;
	@%p265 bra 	$L__BB0_141;
// %bb.194:                             // %pass3423
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r914, %r203, %r5;
	mul.wide.s32 	%rd212, %r914, 4;
	add.s64 	%rd214, %rd101, %rd212;
	st.shared.u32 	[%rd214], %r187;
	setp.eq.s32 	%p266, %r204, 999999999;
	@%p266 bra 	$L__BB0_142;
// %bb.195:                             // %pass3491
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r915, %r204, %r5;
	mul.wide.s32 	%rd215, %r915, 4;
	add.s64 	%rd217, %rd101, %rd215;
	st.shared.u32 	[%rd217], %r188;
	setp.eq.s32 	%p267, %r205, 999999999;
	@%p267 bra 	$L__BB0_143;
// %bb.196:                             // %pass3559
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r916, %r205, %r5;
	mul.wide.s32 	%rd218, %r916, 4;
	add.s64 	%rd220, %rd101, %rd218;
	st.shared.u32 	[%rd220], %r189;
	setp.eq.s32 	%p268, %r206, 999999999;
	@%p268 bra 	$L__BB0_144;
// %bb.197:                             // %pass3627
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r917, %r206, %r5;
	mul.wide.s32 	%rd221, %r917, 4;
	add.s64 	%rd223, %rd101, %rd221;
	st.shared.u32 	[%rd223], %r190;
	setp.eq.s32 	%p269, %r207, 999999999;
	@%p269 bra 	$L__BB0_145;
// %bb.198:                             // %pass3695
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r918, %r207, %r5;
	mul.wide.s32 	%rd224, %r918, 4;
	add.s64 	%rd226, %rd101, %rd224;
	st.shared.u32 	[%rd226], %r191;
	setp.eq.s32 	%p270, %r208, 999999999;
	@%p270 bra 	$L__BB0_146;
// %bb.199:                             // %pass3763
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r919, %r208, %r5;
	mul.wide.s32 	%rd227, %r919, 4;
	add.s64 	%rd229, %rd101, %rd227;
	st.shared.u32 	[%rd229], %r192;
	setp.eq.s32 	%p271, %r209, 999999999;
	@%p271 bra 	$L__BB0_147;
// %bb.200:                             // %pass3831
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r920, %r209, %r5;
	mul.wide.s32 	%rd230, %r920, 4;
	add.s64 	%rd232, %rd101, %rd230;
	st.shared.u32 	[%rd232], %r193;
	setp.eq.s32 	%p272, %r210, 999999999;
	@%p272 bra 	$L__BB0_148;
// %bb.201:                             // %pass3899
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r921, %r210, %r5;
	mul.wide.s32 	%rd233, %r921, 4;
	add.s64 	%rd235, %rd101, %rd233;
	st.shared.u32 	[%rd235], %r194;
	setp.eq.s32 	%p273, %r211, 999999999;
	@%p273 bra 	$L__BB0_149;
// %bb.202:                             // %pass3967
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r922, %r211, %r5;
	mul.wide.s32 	%rd236, %r922, 4;
	add.s64 	%rd238, %rd101, %rd236;
	st.shared.u32 	[%rd238], %r195;
	setp.eq.s32 	%p274, %r212, 999999999;
	@%p274 bra 	$L__BB0_150;
// %bb.203:                             // %pass4035
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r923, %r212, %r5;
	mul.wide.s32 	%rd239, %r923, 4;
	add.s64 	%rd241, %rd101, %rd239;
	st.shared.u32 	[%rd241], %r196;
	setp.eq.s32 	%p275, %r213, 999999999;
	@%p275 bra 	$L__BB0_151;
// %bb.204:                             // %pass4103
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r925, %r213, %r5;
	mul.wide.s32 	%rd242, %r925, 4;
	add.s64 	%rd244, %rd101, %rd242;
	st.shared.u32 	[%rd244], %r197;
	bar.sync 	0;
	ld.shared.u32 	%r214, [%rd38];
	ld.shared.u32 	%r215, [%rd39];
	ld.shared.u32 	%r216, [%rd40];
	ld.shared.u32 	%r217, [%rd41];
	ld.shared.u32 	%r218, [%rd42];
	ld.shared.u32 	%r219, [%rd43];
	ld.shared.u32 	%r220, [%rd44];
	ld.shared.u32 	%r221, [%rd45];
	ld.shared.u32 	%r222, [%rd46];
	ld.shared.u32 	%r223, [%rd47];
	ld.shared.u32 	%r224, [%rd48];
	ld.shared.u32 	%r225, [%rd49];
	ld.shared.u32 	%r226, [%rd50];
	ld.shared.u32 	%r227, [%rd51];
	ld.shared.u32 	%r228, [%rd52];
	ld.shared.u32 	%r229, [%rd53];
	bar.sync 	0;
	mov.u32 	%r3398, 16;
	bra.uni 	$L__BB0_205;
$L__BB0_152:                            // %L21619
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1474, [%rd16];
	ld.shared.u32 	%r1481, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1491, %r1488}, {%r376, %r379}, {%r1474}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1500, %r1497}, {%r376, %r379}, {%r1481}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1484, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r1484, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r410, %r1491, %r1486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1493, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r1493, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r410, %r1500, %r1495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1502, %r413, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1505, %r410, %r1488, %r1502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1509, %r413, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r410, %r1497, %r1509;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1535, %r1538}, {%r452, %r455}, {%r1489, %r1505}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1542, %r1546}, {%r452, %r455}, {%r1498, %r1512}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1534, %r1535, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r1538, %r1538, %r1534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r1542, %r1542, %r1537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1545, %r1546, %r1546, %r1541;
	// end inline asm
	mov.u32 	%r2131, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1549, %r2131, %r1545, %r3408;
	// end inline asm
	ld.shared.u32 	%r1557, [%rd68];
	ld.shared.u32 	%r1564, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1574, %r1571}, {%r376, %r379}, {%r1557}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1583, %r1580}, {%r376, %r379}, {%r1564}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1567, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r1567, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r410, %r1574, %r1569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1576, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1578, %r1576, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r410, %r1583, %r1578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1585, %r413, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1588, %r410, %r1571, %r1585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1592, %r413, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1595, %r410, %r1580, %r1592;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1618, %r1621}, {%r452, %r455}, {%r1572, %r1588}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1625, %r1629}, {%r452, %r455}, {%r1581, %r1595}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1617, %r1618, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1620, %r1621, %r1621, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r1625, %r1625, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r1629, %r1629, %r1624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r2131, %r1628, %r1549;
	// end inline asm
	ld.shared.u32 	%r1640, [%rd70];
	ld.shared.u32 	%r1647, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1657, %r1654}, {%r376, %r379}, {%r1640}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1666, %r1663}, {%r376, %r379}, {%r1647}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1650, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r410, %r1657, %r1652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1659, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1661, %r1659, %r1663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r410, %r1666, %r1661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r413, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r410, %r1654, %r1668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1675, %r413, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r410, %r1663, %r1675;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1704}, {%r452, %r455}, {%r1655, %r1671}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1708, %r1712}, {%r452, %r455}, {%r1664, %r1678}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1701, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r1704, %r1704, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r1708, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r1712, %r1712, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r2131, %r1711, %r1632;
	// end inline asm
	ld.shared.u32 	%r1723, [%rd72];
	ld.shared.u32 	%r1730, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1740, %r1737}, {%r376, %r379}, {%r1723}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1749, %r1746}, {%r376, %r379}, {%r1730}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r1733, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r410, %r1740, %r1735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1742, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r1742, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r410, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r413, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r410, %r1737, %r1751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r413, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r410, %r1746, %r1758;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1787}, {%r452, %r455}, {%r1738, %r1754}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1791, %r1795}, {%r452, %r455}, {%r1747, %r1761}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r1784, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r2131, %r1794, %r1715;
	// end inline asm
	ld.shared.u32 	%r1806, [%rd74];
	ld.shared.u32 	%r1813, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1823, %r1820}, {%r376, %r379}, {%r1806}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1832, %r1829}, {%r376, %r379}, {%r1813}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r1816, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r410, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r410, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r413, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r410, %r1820, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r413, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r410, %r1829, %r1841;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1867, %r1870}, {%r452, %r455}, {%r1821, %r1837}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1874, %r1878}, {%r452, %r455}, {%r1830, %r1844}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1867, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1870, %r1870, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1874, %r1874, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1878, %r1878, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r2131, %r1877, %r1798;
	// end inline asm
	ld.shared.u32 	%r1889, [%rd76];
	ld.shared.u32 	%r1896, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1906, %r1903}, {%r376, %r379}, {%r1889}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1915, %r1912}, {%r376, %r379}, {%r1896}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1899, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r410, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1908, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r1908, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r410, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r413, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r410, %r1903, %r1917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r413, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r410, %r1912, %r1924;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1950, %r1953}, {%r452, %r455}, {%r1904, %r1920}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1957, %r1961}, {%r452, %r455}, {%r1913, %r1927}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1950, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r1953, %r1953, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r1957, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r1961, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r2131, %r1960, %r1881;
	// end inline asm
	ld.shared.u32 	%r1972, [%rd78];
	ld.shared.u32 	%r1979, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1989, %r1986}, {%r376, %r379}, {%r1972}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1998, %r1995}, {%r376, %r379}, {%r1979}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1982, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r1982, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r410, %r1989, %r1984;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1991, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r1991, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r410, %r1998, %r1993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2000, %r413, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r410, %r1986, %r2000;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r413, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r410, %r1995, %r2007;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2033, %r2036}, {%r452, %r455}, {%r1987, %r2003}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2040, %r2044}, {%r452, %r455}, {%r1996, %r2010}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r2033, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r2036, %r2036, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r2040, %r2040, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r2044, %r2044, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r2131, %r2043, %r1964;
	// end inline asm
	ld.shared.u32 	%r2055, [%rd80];
	ld.shared.u32 	%r2062, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2072, %r2069}, {%r376, %r379}, {%r2055}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2081, %r2078}, {%r376, %r379}, {%r2062}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2065, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r2065, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r410, %r2072, %r2067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2074, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r2074, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r410, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r413, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r410, %r2069, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r413, %r2081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r410, %r2078, %r2090;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2116, %r2119}, {%r452, %r455}, {%r2070, %r2086}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2123, %r2127}, {%r452, %r455}, {%r2079, %r2093}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r2116, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r2119, %r2119, %r2115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r2123, %r2123, %r2118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r2127, %r2127, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r2131, %r2126, %r2047;
	// end inline asm
	add.s32 	%r3406, %r3406, 8;
	setp.eq.s32 	%p281, %r3406, 192;
	@%p281 bra 	$L__BB0_209;
$L__BB0_153:                            // %L29179
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	add.s32 	%r3398, %r3398, -8;
	setp.ne.s32 	%p285, %r3398, -16;
	@%p285 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_154;
$L__BB0_205:                            // %L12262
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p276, %r3398, 16;
	selp.b32 	%r1318, %r214, 0, %p276;
	setp.eq.s32 	%p277, %r3398, 8;
	selp.b32 	%r1319, %r218, %r1318, %p277;
	setp.eq.s32 	%p278, %r3398, 0;
	selp.b32 	%r1320, %r222, %r1319, %p278;
	setp.eq.s32 	%p279, %r3398, -8;
	selp.b32 	%r1321, %r226, %r1320, %p279;
	selp.b32 	%r1322, %r215, 0, %p276;
	selp.b32 	%r1323, %r219, %r1322, %p277;
	selp.b32 	%r1324, %r223, %r1323, %p278;
	selp.b32 	%r1325, %r227, %r1324, %p279;
	selp.b32 	%r1326, %r216, 0, %p276;
	selp.b32 	%r1327, %r220, %r1326, %p277;
	selp.b32 	%r1328, %r224, %r1327, %p278;
	selp.b32 	%r1329, %r228, %r1328, %p279;
	selp.b32 	%r1330, %r217, 0, %p276;
	selp.b32 	%r1331, %r221, %r1330, %p277;
	selp.b32 	%r1332, %r225, %r1331, %p278;
	selp.b32 	%r1333, %r229, %r1332, %p279;
	// begin inline asm
	mov.b32 %r931, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r930, %r1321, -2004318072;
	mov.u32 	%r1067, 983055;
	// begin inline asm
	lop3.b32 %r928, %r1067, %r930, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r931, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	mov.u32 	%r1078, 15728880;
	// begin inline asm
	lop3.b32 %r939, %r1078, %r930, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r976, %r1325, -2004318072;
	// begin inline asm
	lop3.b32 %r974, %r1067, %r976, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r985, %r1078, %r976, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1022, %r1329, -2004318072;
	// begin inline asm
	lop3.b32 %r1020, %r1067, %r1022, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1031, %r1078, %r1022, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1068, %r1333, -2004318072;
	// begin inline asm
	lop3.b32 %r1066, %r1067, %r1068, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1077, %r1078, %r1068, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r936;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r993;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1028;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1122, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1039;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1125, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1074;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1128, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1085;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1131, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1189, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1134, %r1135}, {%r279, %r282}, {%r1110}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1141, %r1142}, {%r279, %r282}, {%r1113}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1148, %r1149}, {%r279, %r282}, {%r1116}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1155, %r1156}, {%r279, %r282}, {%r1119}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1162, %r1163}, {%r279, %r282}, {%r1122}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1170}, {%r279, %r282}, {%r1125}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r279, %r282}, {%r1128}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r279, %r282}, {%r1131}, {%r1189, %r1189};
	// end inline asm
	@%p1 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;
$L__BB0_207:                            // %pass5517
                                        //   in Loop: Header=BB0_205 Depth=2
	// begin inline asm
	neg.f16x2 %r1190, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r1190, %r1135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r317, %r1134, %r1192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r1199, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r317, %r1141, %r1201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1208, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r1208, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r317, %r1148, %r1210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1217, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r1217, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r317, %r1155, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1226, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r1226, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r317, %r1162, %r1228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1235, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r1235, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r317, %r1169, %r1237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1244, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1246, %r1244, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1249, %r317, %r1176, %r1246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1253, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1255, %r1253, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1258, %r317, %r1183, %r1255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1262, %r320, %r1134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r317, %r1135, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1269, %r320, %r1141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1272, %r317, %r1142, %r1269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r320, %r1148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r317, %r1149, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r320, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r317, %r1156, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r320, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r317, %r1163, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r320, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r317, %r1170, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r320, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r317, %r1177, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r320, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r317, %r1184, %r1311;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1407, %r1408}, {%r364, %r367}, {%r1195, %r1265}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1415, %r1416}, {%r364, %r367}, {%r1204, %r1272}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1423, %r1424}, {%r364, %r367}, {%r1213, %r1279}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1431, %r1432}, {%r364, %r367}, {%r1222, %r1286}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1439, %r1440}, {%r364, %r367}, {%r1231, %r1293}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1447, %r1448}, {%r364, %r367}, {%r1240, %r1300}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1455, %r1456}, {%r364, %r367}, {%r1249, %r1307}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1463, %r1464}, {%r364, %r367}, {%r1258, %r1314}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1407, %r1408, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1407, %r1408, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1415, %r1416, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1415, %r1416, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1423, %r1424, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1423, %r1424, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1431, %r1432, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1431, %r1432, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1439, %r1440, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1439, %r1440, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1447, %r1448, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1447, %r1448, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1455, %r1456, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1455, %r1456, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1463, %r1464, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r1463, %r1464, %r816;
	// end inline asm
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
	@%p230 bra 	$L__BB0_152;
// %bb.208:                             // %pass7905
                                        //   in Loop: Header=BB0_205 Depth=2
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
	bra.uni 	$L__BB0_152;
$L__BB0_209:                            // %pass13190
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r2135, %r3407, 20;
	or.b32  	%r2136, %r179, %r2135;
	cvt.u64.u32 	%rd247, %r2136;
	add.s64 	%rd248, %rd247, %rd18;
	shr.u64 	%rd249, %rd248, 34;
	add.s64 	%rd250, %rd248, %rd249;
	shr.s64 	%rd251, %rd250, 30;
	setp.lt.s64 	%p282, %rd248, 0;
	and.b64  	%rd252, %rd250, -1073741824;
	setp.ne.s64 	%p283, %rd252, %rd248;
	and.pred  	%p284, %p282, %p283;
	selp.u64 	%rd253, 1, 0, %p284;
	sub.s64 	%rd254, %rd253, %rd251;
	shl.b64 	%rd255, %rd254, 30;
	add.s64 	%rd256, %rd255, %rd248;
	shl.b64 	%rd257, %rd256, 2;
	add.s64 	%rd258, %rd4, %rd257;
	st.global.u32 	[%rd258], %r3408;
	add.s32 	%r3407, %r3407, 1;
	mov.u32 	%r3406, 0;
	mov.u32 	%r3408, %r3406;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29200.preheader
                                        //   in Loop: Header=BB0_187 Depth=1
	or.b32  	%r2138, %r181, 64;
	add.s32 	%r2139, %r178, %r2138;
	mul.wide.u32 	%rd259, %r2139, 4;
	add.s64 	%rd7, %rd101, %rd259;
	cvt.u64.u32 	%rd261, %r2138;
	add.s64 	%rd262, %rd55, %rd261;
	shl.b64 	%rd263, %rd262, 2;
	add.s64 	%rd8, %rd101, %rd263;
	or.b32  	%r2140, %r181, 128;
	add.s32 	%r2141, %r178, %r2140;
	mul.wide.u32 	%rd266, %r2141, 4;
	add.s64 	%rd10, %rd101, %rd266;
	cvt.u64.u32 	%rd267, %r2140;
	add.s64 	%rd268, %rd55, %rd267;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd11, %rd101, %rd269;
	or.b32  	%r2142, %r181, 192;
	add.s32 	%r2143, %r178, %r2142;
	mul.wide.u32 	%rd272, %r2143, 4;
	add.s64 	%rd13, %rd101, %rd272;
	cvt.u64.u32 	%rd273, %r2142;
	add.s64 	%rd274, %rd55, %rd273;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd14, %rd101, %rd275;
	mov.u32 	%r3405, 16;
	bra.uni 	$L__BB0_155;
$L__BB0_156:                            // %L38557
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2696, [%rd16];
	ld.shared.u32 	%r2703, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2713, %r2710}, {%r376, %r379}, {%r2696}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2722, %r2719}, {%r376, %r379}, {%r2703}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2706, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2706, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r410, %r2713, %r2708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2715, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2715, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r410, %r2722, %r2717;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r413, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r410, %r2710, %r2724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r413, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r410, %r2719, %r2731;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2757, %r2760}, {%r452, %r455}, {%r2711, %r2727}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2764, %r2768}, {%r452, %r455}, {%r2720, %r2734}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2757, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r2760, %r2760, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r2764, %r2764, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r2768, %r2768, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r2131, %r2767, %r3408;
	// end inline asm
	ld.shared.u32 	%r2779, [%rd68];
	ld.shared.u32 	%r2786, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2796, %r2793}, {%r376, %r379}, {%r2779}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2805, %r2802}, {%r376, %r379}, {%r2786}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2789, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r2789, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r410, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2798, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2798, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r410, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r413, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r410, %r2793, %r2807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2814, %r413, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r410, %r2802, %r2814;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2840, %r2843}, {%r452, %r455}, {%r2794, %r2810}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2847, %r2851}, {%r452, %r455}, {%r2803, %r2817}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2839, %r2840, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r2843, %r2843, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2846, %r2847, %r2847, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r2851, %r2851, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r2131, %r2850, %r2771;
	// end inline asm
	ld.shared.u32 	%r2862, [%rd70];
	ld.shared.u32 	%r2869, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2879, %r2876}, {%r376, %r379}, {%r2862}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2888, %r2885}, {%r376, %r379}, {%r2869}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2872, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r2872, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r410, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2881, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2883, %r2881, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r410, %r2888, %r2883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r413, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r410, %r2876, %r2890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2897, %r413, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r410, %r2885, %r2897;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2923, %r2926}, {%r452, %r455}, {%r2877, %r2893}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2934}, {%r452, %r455}, {%r2886, %r2900}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r2923, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r2926, %r2926, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r2930, %r2930, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r2934, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r2131, %r2933, %r2854;
	// end inline asm
	ld.shared.u32 	%r2945, [%rd72];
	ld.shared.u32 	%r2952, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2962, %r2959}, {%r376, %r379}, {%r2945}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2971, %r2968}, {%r376, %r379}, {%r2952}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2955, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r2955, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r410, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2964, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2964, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r410, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2973, %r413, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r410, %r2959, %r2973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r413, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r410, %r2968, %r2980;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3006, %r3009}, {%r452, %r455}, {%r2960, %r2976}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3013, %r3017}, {%r452, %r455}, {%r2969, %r2983}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3005, %r3006, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3008, %r3009, %r3009, %r3005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3012, %r3013, %r3013, %r3008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3016, %r3017, %r3017, %r3012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3020, %r2131, %r3016, %r2937;
	// end inline asm
	ld.shared.u32 	%r3028, [%rd74];
	ld.shared.u32 	%r3035, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3045, %r3042}, {%r376, %r379}, {%r3028}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3054, %r3051}, {%r376, %r379}, {%r3035}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3038, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3040, %r3038, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r410, %r3045, %r3040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3047, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r3047, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r410, %r3054, %r3049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r413, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r410, %r3042, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r413, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r410, %r3051, %r3063;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3089, %r3092}, {%r452, %r455}, {%r3043, %r3059}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3096, %r3100}, {%r452, %r455}, {%r3052, %r3066}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3088, %r3089, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3091, %r3092, %r3092, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r3096, %r3096, %r3091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3099, %r3100, %r3100, %r3095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3103, %r2131, %r3099, %r3020;
	// end inline asm
	ld.shared.u32 	%r3111, [%rd76];
	ld.shared.u32 	%r3118, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3128, %r3125}, {%r376, %r379}, {%r3111}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3137, %r3134}, {%r376, %r379}, {%r3118}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3121, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3123, %r3121, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3126, %r410, %r3128, %r3123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3130, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3130, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r410, %r3137, %r3132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3139, %r413, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r410, %r3125, %r3139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r413, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r410, %r3134, %r3146;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3172, %r3175}, {%r452, %r455}, {%r3126, %r3142}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3179, %r3183}, {%r452, %r455}, {%r3135, %r3149}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3171, %r3172, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r3175, %r3175, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r3179, %r3179, %r3174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r3183, %r3183, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3186, %r2131, %r3182, %r3103;
	// end inline asm
	ld.shared.u32 	%r3194, [%rd78];
	ld.shared.u32 	%r3201, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3211, %r3208}, {%r376, %r379}, {%r3194}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3220, %r3217}, {%r376, %r379}, {%r3201}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3206, %r3204, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r410, %r3211, %r3206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3215, %r3213, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r410, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3222, %r413, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r410, %r3208, %r3222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r413, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r410, %r3217, %r3229;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3255, %r3258}, {%r452, %r455}, {%r3209, %r3225}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3262, %r3266}, {%r452, %r455}, {%r3218, %r3232}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3254, %r3255, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r3258, %r3258, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r3262, %r3262, %r3257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3265, %r3266, %r3266, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3269, %r2131, %r3265, %r3186;
	// end inline asm
	ld.shared.u32 	%r3277, [%rd80];
	ld.shared.u32 	%r3284, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3294, %r3291}, {%r376, %r379}, {%r3277}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3303, %r3300}, {%r376, %r379}, {%r3284}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3287, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3289, %r3287, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3292, %r410, %r3294, %r3289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3296, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3298, %r3296, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r410, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3305, %r413, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r410, %r3291, %r3305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r413, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r410, %r3300, %r3312;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3338, %r3341}, {%r452, %r455}, {%r3292, %r3308}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3345, %r3349}, {%r452, %r455}, {%r3301, %r3315}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3337, %r3338, %r3338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3340, %r3341, %r3341, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r3345, %r3345, %r3340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r3349, %r3349, %r3344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r2131, %r3348, %r3269;
	// end inline asm
	add.s32 	%r3406, %r3406, 8;
	setp.eq.s32 	%p291, %r3406, 192;
	@%p291 bra 	$L__BB0_211;
$L__BB0_157:                            // %L46117
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3405, %r3405, -8;
	setp.ne.s32 	%p295, %r3405, -16;
	@%p295 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_158;
$L__BB0_155:                            // %L29200
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p286, %r5, 16;
	setp.eq.s32 	%p287, %r3405, 16;
	selp.b32 	%r2672, %r214, 0, %p287;
	setp.eq.s32 	%p288, %r3405, 8;
	selp.b32 	%r2673, %r218, %r2672, %p288;
	setp.eq.s32 	%p289, %r3405, 0;
	selp.b32 	%r2674, %r222, %r2673, %p289;
	setp.eq.s32 	%p290, %r3405, -8;
	selp.b32 	%r2675, %r226, %r2674, %p290;
	selp.b32 	%r2676, %r215, 0, %p287;
	selp.b32 	%r2677, %r219, %r2676, %p288;
	selp.b32 	%r2678, %r223, %r2677, %p289;
	selp.b32 	%r2679, %r227, %r2678, %p290;
	selp.b32 	%r2680, %r216, 0, %p287;
	selp.b32 	%r2681, %r220, %r2680, %p288;
	selp.b32 	%r2682, %r224, %r2681, %p289;
	selp.b32 	%r2683, %r228, %r2682, %p290;
	selp.b32 	%r2684, %r217, 0, %p287;
	selp.b32 	%r2685, %r221, %r2684, %p288;
	selp.b32 	%r2686, %r225, %r2685, %p289;
	selp.b32 	%r2687, %r229, %r2686, %p290;
	// begin inline asm
	mov.b32 %r2171, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2688, %r2675, 8;
	xor.b32  	%r2181, %r2688, 8947848;
	// begin inline asm
	lop3.b32 %r2168, %r1067, %r2181, %r2171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2173, %r2171, %r2172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2176, %r2168, %r2173;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2179, %r1078, %r2181, %r2182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2183, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2184, %r2182, %r2183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2187, %r2179, %r2184;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2689, %r2679, 8;
	xor.b32  	%r2227, %r2689, 8947848;
	// begin inline asm
	lop3.b32 %r2214, %r1067, %r2227, %r2217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2219, %r2217, %r2218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2222, %r2214, %r2219;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2225, %r1078, %r2227, %r2228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2230, %r2228, %r2229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2233, %r2225, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2690, %r2683, 8;
	xor.b32  	%r2273, %r2690, 8947848;
	// begin inline asm
	lop3.b32 %r2260, %r1067, %r2273, %r2263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2263, %r2264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2268, %r2260, %r2265;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2271, %r1078, %r2273, %r2274, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2276, %r2274, %r2275;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2279, %r2271, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2691, %r2687, 8;
	xor.b32  	%r2319, %r2691, 8947848;
	// begin inline asm
	lop3.b32 %r2306, %r1067, %r2319, %r2309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2309, %r2310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2314, %r2306, %r2311;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2317, %r1078, %r2319, %r2320, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2322, %r2320, %r2321;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2325, %r2317, %r2322;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2176;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2328, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2187;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2331, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2334, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2233;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2337, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2340, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2279;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2343, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2314;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2346, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2325;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2349, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2415, %r2412}, {%r279, %r282}, {%r2328}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2424, %r2421}, {%r279, %r282}, {%r2331}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2433, %r2430}, {%r279, %r282}, {%r2334}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2442, %r2439}, {%r279, %r282}, {%r2337}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2451, %r2448}, {%r279, %r282}, {%r2340}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2460, %r2457}, {%r279, %r282}, {%r2343}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2469, %r2466}, {%r279, %r282}, {%r2346}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2478, %r2475}, {%r279, %r282}, {%r2349}, {%r1189, %r1189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2408, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2410, %r2408, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2413, %r317, %r2415, %r2410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2417, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r2417, %r2421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r317, %r2424, %r2419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2426, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r2426, %r2430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r317, %r2433, %r2428;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2435, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2437, %r2435, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2440, %r317, %r2442, %r2437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2444, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r2444, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r317, %r2451, %r2446;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2453, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r2453, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r317, %r2460, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2462, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r2462, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r317, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2471, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2473, %r2471, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r317, %r2478, %r2473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r320, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r317, %r2412, %r2480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r320, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r317, %r2421, %r2487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2494, %r320, %r2433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r317, %r2430, %r2494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2501, %r320, %r2442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2504, %r317, %r2439, %r2501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r320, %r2451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r317, %r2448, %r2508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r320, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r317, %r2457, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r320, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r317, %r2466, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r320, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r317, %r2475, %r2529;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2609, %r2610}, {%r364, %r367}, {%r2413, %r2483}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2617, %r2618}, {%r364, %r367}, {%r2422, %r2490}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2625, %r2626}, {%r364, %r367}, {%r2431, %r2497}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r364, %r367}, {%r2440, %r2504}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2641, %r2642}, {%r364, %r367}, {%r2449, %r2511}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2649, %r2650}, {%r364, %r367}, {%r2458, %r2518}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2657, %r2658}, {%r364, %r367}, {%r2467, %r2525}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2665, %r2666}, {%r364, %r367}, {%r2476, %r2532}, {%r1189, %r1189}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2608, %r2609, %r2610, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2612, %r2609, %r2610, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2616, %r2617, %r2618, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2620, %r2617, %r2618, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2624, %r2625, %r2626, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2628, %r2625, %r2626, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2632, %r2633, %r2634, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2636, %r2633, %r2634, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2640, %r2641, %r2642, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2644, %r2641, %r2642, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2648, %r2649, %r2650, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2649, %r2650, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2657, %r2658, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2657, %r2658, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2664, %r2665, %r2666, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2668, %r2665, %r2666, %r816;
	// end inline asm
	st.shared.u32 	[%rd54], %r2608;
	st.shared.u32 	[%rd58+16576], %r2612;
	st.shared.u32 	[%rd58+64], %r2616;
	st.shared.u32 	[%rd58+16640], %r2620;
	st.shared.u32 	[%rd7], %r2624;
	st.shared.u32 	[%rd8+16576], %r2628;
	st.shared.u32 	[%rd8+64], %r2632;
	st.shared.u32 	[%rd8+16640], %r2636;
	st.shared.u32 	[%rd10], %r2640;
	st.shared.u32 	[%rd11+16576], %r2644;
	st.shared.u32 	[%rd11+64], %r2648;
	st.shared.u32 	[%rd11+16640], %r2652;
	st.shared.u32 	[%rd13], %r2656;
	st.shared.u32 	[%rd14+16576], %r2660;
	st.shared.u32 	[%rd14+64], %r2664;
	st.shared.u32 	[%rd14+16640], %r2668;
	@%p286 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_156;
$L__BB0_210:                            // %pass15715
                                        //   in Loop: Header=BB0_155 Depth=2
	st.shared.u32 	[%rd54], %r2608;
	st.shared.u32 	[%rd58+16576], %r2612;
	st.shared.u32 	[%rd58+64], %r2616;
	st.shared.u32 	[%rd58+16640], %r2620;
	st.shared.u32 	[%rd7], %r2624;
	st.shared.u32 	[%rd8+16576], %r2628;
	st.shared.u32 	[%rd8+64], %r2632;
	st.shared.u32 	[%rd8+16640], %r2636;
	st.shared.u32 	[%rd10], %r2640;
	st.shared.u32 	[%rd11+16576], %r2644;
	st.shared.u32 	[%rd11+64], %r2648;
	st.shared.u32 	[%rd11+16640], %r2652;
	st.shared.u32 	[%rd13], %r2656;
	st.shared.u32 	[%rd14+16576], %r2660;
	st.shared.u32 	[%rd14+64], %r2664;
	st.shared.u32 	[%rd14+16640], %r2668;
	bra.uni 	$L__BB0_156;
$L__BB0_211:                            // %pass21000
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3357, %r3407, 20;
	or.b32  	%r3358, %r179, %r3357;
	cvt.u64.u32 	%rd278, %r3358;
	add.s64 	%rd279, %rd278, %rd18;
	shr.u64 	%rd280, %rd279, 34;
	add.s64 	%rd281, %rd279, %rd280;
	shr.s64 	%rd282, %rd281, 30;
	setp.lt.s64 	%p292, %rd279, 0;
	and.b64  	%rd283, %rd281, -1073741824;
	setp.ne.s64 	%p293, %rd283, %rd279;
	and.pred  	%p294, %p292, %p293;
	selp.u64 	%rd284, 1, 0, %p294;
	sub.s64 	%rd285, %rd284, %rd282;
	shl.b64 	%rd286, %rd285, 30;
	add.s64 	%rd287, %rd286, %rd279;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3408;
	add.s32 	%r3407, %r3407, 1;
	mov.u32 	%r3406, %r1189;
	mov.u32 	%r3408, %r1189;
	bra.uni 	$L__BB0_157;
$L__BB0_159:                            // %L46148
	mov.u32 	%r3359, 0;
	st.global.u32 	[%rd6], %r3359;
	ret;
$L__BB0_206:                            // %post_box_union
	mov.u64 	%rd245, exception4114;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3375, 5;
	st.global.u32 	[%rd6], %r3375;
	mov.u64 	%rd320, exception4066;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3374, 5;
	st.global.u32 	[%rd6], %r3374;
	mov.u64 	%rd318, exception4066;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3373, 5;
	st.global.u32 	[%rd6], %r3373;
	mov.u64 	%rd316, exception4066;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3372, 5;
	st.global.u32 	[%rd6], %r3372;
	mov.u64 	%rd314, exception4066;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3371, 5;
	st.global.u32 	[%rd6], %r3371;
	mov.u64 	%rd312, exception4066;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3370, 5;
	st.global.u32 	[%rd6], %r3370;
	mov.u64 	%rd310, exception4066;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3369, 5;
	st.global.u32 	[%rd6], %r3369;
	mov.u64 	%rd308, exception4066;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3368, 5;
	st.global.u32 	[%rd6], %r3368;
	mov.u64 	%rd306, exception4066;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3367, 5;
	st.global.u32 	[%rd6], %r3367;
	mov.u64 	%rd304, exception4066;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3366, 5;
	st.global.u32 	[%rd6], %r3366;
	mov.u64 	%rd302, exception4066;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3365, 5;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd300, exception4066;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3364, 5;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd298, exception4066;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd296, exception4066;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd294, exception4066;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd292, exception4066;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd290, exception4066;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3377, 2;
	st.global.u32 	[%rd6], %r3377;
	mov.u64 	%rd324, exception4066;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3376, 3;
	st.global.u32 	[%rd6], %r3376;
	mov.u64 	%rd322, exception4066;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd88, exception1;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd87, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r5, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd93, __unnamed_1;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd87;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r465, [retval0+0];
	} // callseq 47
	mov.u32 	%r467, 4;
	st.global.u32 	[%rd6], %r467;
	mov.u64 	%rd96, exception4066;
	cvta.global.u64 	%rd97, %rd96;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd97;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
