// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2603[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<353>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3522>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<423>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r306, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r306, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 9;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r307, %r4, %r5;
	or.b32  	%r308, %r307, %r2;
	mul.wide.u32 	%rd67, %r308, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r309, 1;
	st.global.u32 	[%rd6], %r309;
	setp.gt.u32 	%p3, %r298, 16383;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r299, %r298;
	setp.gt.s32 	%p5, %r299, 32767;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r299, %r298;
	and.b32  	%r310, %r6, 63;
	setp.ne.s32 	%p7, %r310, 0;
	setp.gt.u32 	%p8, %r300, 2047;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r301, %r300;
	setp.lt.s32 	%p11, %r301, 4096;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r311, %r301, %r300;
	mul.hi.s32 	%r312, %r6, 1374389535;
	shr.u32 	%r313, %r312, 31;
	shr.s32 	%r314, %r312, 3;
	add.s32 	%r315, %r314, %r313;
	setp.eq.s32 	%p13, %r311, %r315;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r302, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r303, %r302;
	setp.gt.s32 	%p16, %r303, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r303, %r302;
	and.b32  	%r316, %r7, 1;
	setp.eq.b32 	%p18, %r316, 1;
	setp.lt.s32 	%p19, %r304, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r305, %r304;
	setp.gt.s32 	%p22, %r305, 128;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r317, %r305, %r304;
	and.b32  	%r318, %r317, 1;
	setp.eq.b32 	%p24, %r318, 1;
	not.pred 	%p25, %p24;
	setp.eq.s32 	%p26, %r317, %r7;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_13;
$L__BB0_172:                            // %pass162
	and.b32  	%r128, %r5, 3;
	shr.u32 	%r129, %r5, 2;
	mul.lo.s32 	%r319, %r128, %r129;
	and.b32  	%r320, %r319, 7;
	cvt.rn.f32.s32 	%f185, %r320;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p28, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p348, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p28 bra 	$L__BB0_184;
// %bb.173:
	@%p348 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r131, %f750;
	and.b32  	%r321, %r131, 8388607;
	or.b32  	%r3475, %r321, 1065353216;
	mov.b32 	%f745, %r3475;
	add.s32 	%r322, %r131, -1073741824;
	and.b32  	%r3476, %r322, -8388608;
	setp.eq.s32 	%p35, %r3476, 0;
	@%p35 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3476, 192937984;
	add.s32 	%r324, %r3475, %r323;
	mov.b32 	%f197, %r324;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3476, %r3476, %r323;
	mov.b32 	%r3475, %f745;
	setp.ne.s32 	%p36, %r3476, 0;
	setp.ne.s32 	%p37, %r3475, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p30, %r130, 1073741824;
	@%p30 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p31, %r130, -2147483647;
	@%p31 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p34, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p34;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p32, %f154, 0f40800000;
	@%p32 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p33, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p33;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p40, %f206, 0f7F800000;
	mov.b32 	%r325, %f151;
	and.b32  	%r138, %r325, -2147483648;
	@%p40 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r326, %f746;
	or.b32  	%r327, %r138, %r326;
	mov.b32 	%f746, %r327;
$L__BB0_186:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r5, 1;
	and.b32  	%r342, %r141, 2;
	mul.lo.s32 	%r142, %r342, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p48, %f726, 0f40000000;
	setp.gtu.f32 	%p349, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p48 bra 	$L__BB0_25;
// %bb.14:
	@%p349 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r343, %r9, 8388607;
	or.b32  	%r3441, %r343, 1065353216;
	mov.b32 	%f705, %r3441;
	add.s32 	%r344, %r9, -1073741824;
	and.b32  	%r3442, %r344, -8388608;
	setp.eq.s32 	%p55, %r3442, 0;
	@%p55 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r3442, 192937984;
	add.s32 	%r346, %r3441, %r345;
	mov.b32 	%f251, %r346;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3442, %r3442, %r345;
	mov.b32 	%r3441, %f705;
	setp.ne.s32 	%p56, %r3442, 0;
	setp.ne.s32 	%p57, %r3441, 0;
	and.pred  	%p58, %p56, %p57;
	@%p58 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p59, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p59;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p50, %r8, 1073741824;
	@%p50 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p51, %r8, -2147483647;
	@%p51 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p54, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p54;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p52, %f2, 0f40800000;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p53, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p53;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p60, %f260, 0f7F800000;
	mov.b32 	%r347, %f168;
	and.b32  	%r16, %r347, -2147483648;
	@%p60 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r348, %f706;
	or.b32  	%r349, %r16, %r348;
	mov.b32 	%f706, %r349;
$L__BB0_27:                             // %__nv_fmodf.exit2334
	add.s32 	%r358, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r358;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p68, %f730, 0f40000000;
	setp.gtu.f32 	%p350, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p68 bra 	$L__BB0_39;
// %bb.28:
	@%p350 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r359, %r18, 8388607;
	or.b32  	%r3443, %r359, 1065353216;
	mov.b32 	%f709, %r3443;
	add.s32 	%r360, %r18, -1073741824;
	and.b32  	%r3444, %r360, -8388608;
	setp.eq.s32 	%p75, %r3444, 0;
	@%p75 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r3444, 192937984;
	add.s32 	%r362, %r3443, %r361;
	mov.b32 	%f303, %r362;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3444, %r3444, %r361;
	mov.b32 	%r3443, %f709;
	setp.ne.s32 	%p76, %r3444, 0;
	setp.ne.s32 	%p77, %r3443, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p79, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p70, %r17, 1073741824;
	@%p70 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p71, %r17, -2147483647;
	@%p71 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p74, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p74;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p72, %f21, 0f40800000;
	@%p72 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p73, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p73;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p80, %f312, 0f7F800000;
	mov.b32 	%r363, %f18;
	and.b32  	%r25, %r363, -2147483648;
	@%p80 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r364, %f710;
	or.b32  	%r365, %r25, %r364;
	mov.b32 	%f710, %r365;
$L__BB0_41:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r380, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r380;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p88, %f734, 0f40000000;
	setp.gtu.f32 	%p351, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p88 bra 	$L__BB0_53;
// %bb.42:
	@%p351 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r381, %r30, 8388607;
	or.b32  	%r3445, %r381, 1065353216;
	mov.b32 	%f713, %r3445;
	add.s32 	%r382, %r30, -1073741824;
	and.b32  	%r3446, %r382, -8388608;
	setp.eq.s32 	%p95, %r3446, 0;
	@%p95 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r383, %r3446, 192937984;
	add.s32 	%r384, %r3445, %r383;
	mov.b32 	%f357, %r384;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3446, %r3446, %r383;
	mov.b32 	%r3445, %f713;
	setp.ne.s32 	%p96, %r3446, 0;
	setp.ne.s32 	%p97, %r3445, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p99, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p90, %r29, 1073741824;
	@%p90 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p91, %r29, -2147483647;
	@%p91 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p94, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p94;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p92, %f38, 0f40800000;
	@%p92 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p93, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p93;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p100, %f366, 0f7F800000;
	mov.b32 	%r385, %f35;
	and.b32  	%r37, %r385, -2147483648;
	@%p100 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r386, %f714;
	or.b32  	%r387, %r37, %r386;
	mov.b32 	%f714, %r387;
$L__BB0_55:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r388, %f367;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f368, %r390;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p101, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p101;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p102, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p102;
	cvt.rzi.s32.f32 	%r391, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r392, %r391, 1;
	setp.eq.b32 	%p103, %r392, 1;
	selp.f32 	%f386, %f384, %f385, %p103;
	selp.f32 	%f387, %f385, %f384, %p103;
	and.b32  	%r393, %r391, 2;
	setp.eq.s32 	%p104, %r393, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p104;
	add.s32 	%r394, %r391, 1;
	and.b32  	%r395, %r394, 2;
	setp.eq.s32 	%p105, %r395, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p106, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p106;
	abs.f32 	%f395, %f714;
	add.s32 	%r396, %r28, %r129;
	and.b32  	%r397, %r396, 3;
	cvt.rn.f32.s32 	%f397, %r397;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p108, %f738, 0f40000000;
	setp.gtu.f32 	%p352, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p108 bra 	$L__BB0_67;
// %bb.56:
	@%p352 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r398, %r39, 8388607;
	or.b32  	%r3447, %r398, 1065353216;
	mov.b32 	%f717, %r3447;
	add.s32 	%r399, %r39, -1073741824;
	and.b32  	%r3448, %r399, -8388608;
	setp.eq.s32 	%p115, %r3448, 0;
	@%p115 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3448, 192937984;
	add.s32 	%r401, %r3447, %r400;
	mov.b32 	%f409, %r401;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3448, %r3448, %r400;
	mov.b32 	%r3447, %f717;
	setp.ne.s32 	%p116, %r3448, 0;
	setp.ne.s32 	%p117, %r3447, 0;
	and.pred  	%p118, %p116, %p117;
	@%p118 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p119, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p119;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p110, %r38, 1073741824;
	@%p110 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p111, %r38, -2147483647;
	@%p111 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p114, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p114;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p112, %f57, 0f40800000;
	@%p112 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p113, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p113;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p105;
	setp.gt.f32 	%p107, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p120, %f418, 0f7F800000;
	mov.b32 	%r402, %f54;
	and.b32  	%r46, %r402, -2147483648;
	@%p120 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r403, %f718;
	or.b32  	%r404, %r46, %r403;
	mov.b32 	%f718, %r404;
$L__BB0_69:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p107;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r405, %f419;
	and.b32  	%r406, %r405, -2147483648;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%f420, %r407;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p121, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p121;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p122, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p122;
	cvt.rzi.s32.f32 	%r408, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r409, %r408, 1;
	setp.eq.b32 	%p123, %r409, 1;
	selp.f32 	%f438, %f436, %f437, %p123;
	selp.f32 	%f439, %f437, %f436, %p123;
	and.b32  	%r410, %r408, 2;
	setp.eq.s32 	%p124, %r410, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p124;
	add.s32 	%r411, %r408, 1;
	and.b32  	%r412, %r411, 2;
	setp.eq.s32 	%p125, %r412, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p125;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p126, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p126;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p127, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p127;
	and.b32  	%r47, %r5, 2;
	setp.eq.s32 	%p128, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p128 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p28 bra 	$L__BB0_194;
// %bb.72:
	@%p348 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_73;
$L__BB0_190:
	mov.b32 	%r144, %f750;
	and.b32  	%r419, %r144, 8388607;
	or.b32  	%r3477, %r419, 1065353216;
	mov.b32 	%f749, %r3477;
	add.s32 	%r420, %r144, -1073741824;
	and.b32  	%r3478, %r420, -8388608;
	setp.eq.s32 	%p136, %r3478, 0;
	@%p136 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r421, %r3478, 192937984;
	add.s32 	%r422, %r3477, %r421;
	mov.b32 	%f459, %r422;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3478, %r3478, %r421;
	mov.b32 	%r3477, %f749;
	setp.ne.s32 	%p137, %r3478, 0;
	setp.ne.s32 	%p138, %r3477, 0;
	and.pred  	%p139, %p137, %p138;
	@%p139 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p140, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p140;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_194;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p131, %r143, 1073741824;
	@%p131 bra 	$L__BB0_189;
// %bb.74:
	setp.lt.u32 	%p132, %r143, -2147483647;
	@%p132 bra 	$L__BB0_187;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p135, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p135;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p133, %f171, 0f40800000;
	@%p133 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p134, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p134;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p141, %f468, 0f7F800000;
	@%p141 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r423, %f750;
	or.b32  	%r424, %r138, %r423;
	mov.b32 	%f750, %r424;
$L__BB0_196:                            // %__nv_fmodf.exit2458
	@%p48 bra 	$L__BB0_87;
// %bb.76:
	@%p349 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r439, %r51, 8388607;
	or.b32  	%r3449, %r439, 1065353216;
	mov.b32 	%f725, %r3449;
	add.s32 	%r440, %r51, -1073741824;
	and.b32  	%r3450, %r440, -8388608;
	setp.eq.s32 	%p156, %r3450, 0;
	@%p156 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r441, %r3450, 192937984;
	add.s32 	%r442, %r3449, %r441;
	mov.b32 	%f511, %r442;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3450, %r3450, %r441;
	mov.b32 	%r3449, %f725;
	setp.ne.s32 	%p157, %r3450, 0;
	setp.ne.s32 	%p158, %r3449, 0;
	and.pred  	%p159, %p157, %p158;
	@%p159 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p160, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p160;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p151, %r50, 1073741824;
	@%p151 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p152, %r50, -2147483647;
	@%p152 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p155, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p155;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p153, %f80, 0f40800000;
	@%p153 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p154, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p154;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p161, %f520, 0f7F800000;
	@%p161 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r443, %f726;
	or.b32  	%r444, %r16, %r443;
	mov.b32 	%f726, %r444;
$L__BB0_89:                             // %__nv_fmodf.exit2489
	@%p68 bra 	$L__BB0_101;
// %bb.90:
	@%p350 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r453, %r59, 8388607;
	or.b32  	%r3451, %r453, 1065353216;
	mov.b32 	%f729, %r3451;
	add.s32 	%r454, %r59, -1073741824;
	and.b32  	%r3452, %r454, -8388608;
	setp.eq.s32 	%p176, %r3452, 0;
	@%p176 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3452, 192937984;
	add.s32 	%r456, %r3451, %r455;
	mov.b32 	%f561, %r456;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3452, %r3452, %r455;
	mov.b32 	%r3451, %f729;
	setp.ne.s32 	%p177, %r3452, 0;
	setp.ne.s32 	%p178, %r3451, 0;
	and.pred  	%p179, %p177, %p178;
	@%p179 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p180, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p180;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p171, %r58, 1073741824;
	@%p171 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p172, %r58, -2147483647;
	@%p172 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p175, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p175;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p173, %f97, 0f40800000;
	@%p173 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p174, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p174;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p181, %f570, 0f7F800000;
	@%p181 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r457, %f730;
	or.b32  	%r458, %r25, %r457;
	mov.b32 	%f730, %r458;
$L__BB0_103:                            // %__nv_fmodf.exit2520
	@%p88 bra 	$L__BB0_115;
// %bb.104:
	@%p351 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r473, %r69, 8388607;
	or.b32  	%r3453, %r473, 1065353216;
	mov.b32 	%f733, %r3453;
	add.s32 	%r474, %r69, -1073741824;
	and.b32  	%r3454, %r474, -8388608;
	setp.eq.s32 	%p196, %r3454, 0;
	@%p196 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3454, 192937984;
	add.s32 	%r476, %r3453, %r475;
	mov.b32 	%f613, %r476;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3454, %r3454, %r475;
	mov.b32 	%r3453, %f733;
	setp.ne.s32 	%p197, %r3454, 0;
	setp.ne.s32 	%p198, %r3453, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p200, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p191, %r68, 1073741824;
	@%p191 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p192, %r68, -2147483647;
	@%p192 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p195, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p195;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p193, %f112, 0f40800000;
	@%p193 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p194, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p194;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p201, %f622, 0f7F800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r477, %f734;
	or.b32  	%r478, %r37, %r477;
	mov.b32 	%f734, %r478;
$L__BB0_117:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r479, %f623;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f624, %r481;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p203, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p203;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p204, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p204;
	cvt.rzi.s32.f32 	%r482, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p205, %r483, 1;
	selp.f32 	%f642, %f640, %f641, %p205;
	selp.f32 	%f643, %f641, %f640, %p205;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p206, %r484, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p206;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p207, %r486, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p208, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p208;
	abs.f32 	%f651, %f734;
	@%p108 bra 	$L__BB0_129;
// %bb.118:
	@%p352 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r487, %r77, 8388607;
	or.b32  	%r3455, %r487, 1065353216;
	mov.b32 	%f737, %r3455;
	add.s32 	%r488, %r77, -1073741824;
	and.b32  	%r3456, %r488, -8388608;
	setp.eq.s32 	%p216, %r3456, 0;
	@%p216 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3456, 192937984;
	add.s32 	%r490, %r3455, %r489;
	mov.b32 	%f663, %r490;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3456, %r3456, %r489;
	mov.b32 	%r3455, %f737;
	setp.ne.s32 	%p217, %r3456, 0;
	setp.ne.s32 	%p218, %r3455, 0;
	and.pred  	%p219, %p217, %p218;
	@%p219 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p220, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p220;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p211, %r76, 1073741824;
	@%p211 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p212, %r76, -2147483647;
	@%p212 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p215, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p215;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p213, %f129, 0f40800000;
	@%p213 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p214, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p214;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p207;
	setp.gt.f32 	%p209, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p221, %f672, 0f7F800000;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r491, %f738;
	or.b32  	%r492, %r46, %r491;
	mov.b32 	%f738, %r492;
$L__BB0_131:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p209;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r493, %f673;
	and.b32  	%r494, %r493, -2147483648;
	or.b32  	%r495, %r494, 1056964608;
	mov.b32 	%f674, %r495;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p223, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p223;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p224, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p224;
	cvt.rzi.s32.f32 	%r496, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r497, %r496, 1;
	setp.eq.b32 	%p225, %r497, 1;
	selp.f32 	%f692, %f690, %f691, %p225;
	selp.f32 	%f693, %f691, %f690, %p225;
	and.b32  	%r498, %r496, 2;
	setp.eq.s32 	%p226, %r498, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p226;
	add.s32 	%r499, %r496, 1;
	and.b32  	%r500, %r499, 2;
	setp.eq.s32 	%p227, %r500, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p227;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p228, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p228;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p229, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p229;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p128 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p230, %r5, 15;
	mov.u32 	%r153, 999999999;
	@%p230 bra 	$L__BB0_198;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r508, %r5, 4;
	and.b32  	%r509, %r508, 240;
	or.b32  	%r510, %r509, %r1;
	mul.wide.u32 	%rd68, %r510, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r511, [%rd69];
	shl.b32 	%r512, %r511, 16;
	cvt.s32.s16 	%r86, %r511;
	shr.s32 	%r87, %r511, 16;
	or.b32  	%r513, %r512, 65535;
	setp.lt.u32 	%p231, %r513, 1114111;
	setp.lt.u32 	%p232, %r511, 1048576;
	and.pred  	%p233, %p231, %p232;
	@%p233 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_135;
$L__BB0_197:                            // %L1255
	mul.lo.s32 	%r517, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r517;
$L__BB0_198:                            // %pass537
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r334, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r335, %r334, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r431, %f469;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%r350, %f261;
	mov.b32 	%r372, %f313;
	and.b32  	%r432, %r431, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r336;
	and.b32  	%r351, %r350, -2147483648;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r433, %r432, 1056964608;
	mov.b32 	%r445, %f521;
	mov.b32 	%r465, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r352, %r351, 1056964608;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f470, %r433;
	and.b32  	%r446, %r445, -2147483648;
	and.b32  	%r466, %r465, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p41, %f211, 0f4B000000;
	mov.b32 	%f262, %r352;
	mov.b32 	%f314, %r374;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r447, %r446, 1056964608;
	or.b32  	%r467, %r466, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p41;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p42, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p143, %f473, 0f4B000000;
	mov.b32 	%f522, %r447;
	mov.b32 	%f572, %r467;
	selp.f32 	%f214, %f213, %f212, %p42;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p61, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p81, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p143;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p144, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p61;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p62, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p81;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p82, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p144;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p163, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p183, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p62;
	selp.f32 	%f320, %f319, %f318, %p82;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p163;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p164, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p183;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p184, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p164;
	selp.f32 	%f578, %f577, %f576, %p184;
	cvt.rzi.s32.f32 	%r337, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r434, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p43, %r338, 1;
	cvt.rzi.s32.f32 	%r353, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r375, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r435, %r434, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p43;
	and.b32  	%r339, %r337, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r354, %r353, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r376, %r375, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p145, %r435, 1;
	cvt.rzi.s32.f32 	%r448, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r468, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p44, %r339, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p63, %r354, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p83, %r376, 1;
	selp.f32 	%f488, %f486, %f487, %p145;
	and.b32  	%r436, %r434, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r449, %r448, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r469, %r468, 1;
	selp.f32 	%f227, %f225, %f224, %p43;
	selp.f32 	%f229, %f226, %f228, %p44;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p46, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p63;
	and.b32  	%r355, %r353, 2;
	selp.f32 	%f332, %f330, %f331, %p83;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p146, %r436, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r437, %r434, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p165, %r449, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p185, %r469, 1;
	setp.eq.s32 	%p45, %r341, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p46;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p64, %r355, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r356, %r353, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p84, %r377, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r378, %r375, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p145;
	selp.f32 	%f491, %f488, %f490, %p146;
	and.b32  	%r438, %r437, 2;
	setp.eq.f32 	%p148, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p165;
	and.b32  	%r450, %r448, 2;
	selp.f32 	%f590, %f588, %f589, %p185;
	and.b32  	%r470, %r468, 2;
	selp.f32 	%f232, %f227, %f231, %p45;
	setp.gt.f32 	%p47, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p63;
	selp.f32 	%f283, %f280, %f282, %p64;
	and.b32  	%r357, %r356, 2;
	setp.eq.f32 	%p66, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p83;
	selp.f32 	%f335, %f332, %f334, %p84;
	and.b32  	%r379, %r378, 2;
	setp.eq.f32 	%p86, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p147, %r438, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p148;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p166, %r450, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r451, %r448, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p186, %r470, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p47;
	setp.eq.s32 	%p65, %r357, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p66;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p85, %r379, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p86;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p147;
	setp.gt.f32 	%p149, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p165;
	selp.f32 	%f543, %f540, %f542, %p166;
	and.b32  	%r452, %r451, 2;
	setp.eq.f32 	%p168, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p185;
	selp.f32 	%f593, %f590, %f592, %p186;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p188, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r330, %f238;
	mov.b32 	%r333, %f235;
	selp.f32 	%f286, %f281, %f285, %p65;
	setp.gt.f32 	%p67, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p85;
	setp.gt.f32 	%p87, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p149;
	setp.eq.s32 	%p167, %r452, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p168;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p187, %r472, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p188;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r329, %r333, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p67;
	selp.f32 	%f344, %f343, %f338, %p87;
	mov.b32 	%r427, %f500;
	mov.b32 	%r430, %f497;
	selp.f32 	%f546, %f541, %f545, %p167;
	setp.gt.f32 	%p169, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p187;
	setp.gt.f32 	%p189, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r330;
	// end inline asm
	mov.b32 	%r368, %f344;
	mov.b32 	%r367, %f17;
	mov.b32 	%r371, %f341;
	mov.b32 	%r370, %f16;
	mov.b32 	%r414, %f75;
	mov.b32 	%r415, %f77;
	mov.b32 	%r417, %f76;
	mov.b32 	%r418, %f78;
	xor.b32  	%r426, %r430, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p169;
	selp.f32 	%f602, %f601, %f596, %p189;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r427;
	// end inline asm
	mov.b32 	%r461, %f602;
	mov.b32 	%r460, %f95;
	mov.b32 	%r464, %f599;
	mov.b32 	%r463, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	mov.b32 	%r502, %f147;
	mov.b32 	%r503, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r501, %r503, %r502;
	// end inline asm
	mov.b32 	%r505, %f148;
	mov.b32 	%r506, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	shl.b32 	%r519, %r1, 1;
	shr.u32 	%r520, %r5, 3;
	bfe.u32 	%r521, %r5, 3, 1;
	and.b32  	%r522, %r519, 14;
	or.b32  	%r523, %r522, %r521;
	and.b32  	%r524, %r520, 2;
	and.b32  	%r525, %r129, 1;
	or.b32  	%r526, %r524, %r525;
	shl.b32 	%r527, %r526, 4;
	shl.b32 	%r528, %r5, 6;
	and.b32  	%r529, %r528, 192;
	or.b32  	%r530, %r527, %r523;
	or.b32  	%r531, %r530, %r4;
	or.b32  	%r532, %r531, %r529;
	mul.wide.u32 	%rd75, %r532, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r533, %r298, 14;
	shl.b32 	%r534, %r302, 7;
	add.s32 	%r156, %r534, %r533;
	shl.b32 	%r535, %r5, 2;
	shl.b32 	%r536, %r3, 7;
	or.b32  	%r157, %r535, %r536;
	and.b32  	%r158, %r5, 16;
	shr.u32 	%r537, %r5, 4;
	and.b32  	%r538, %r141, 30;
	or.b32  	%r539, %r538, %r537;
	mul.lo.s32 	%r540, %r539, 257;
	and.b32  	%r541, %r2, 224;
	shr.u32 	%r542, %r1, 3;
	mad.lo.s32 	%r543, %r542, 257, %r541;
	or.b32  	%r544, %r542, 2;
	mad.lo.s32 	%r545, %r544, 257, %r541;
	or.b32  	%r546, %r542, 4;
	mad.lo.s32 	%r547, %r546, 257, %r541;
	or.b32  	%r548, %r542, 6;
	mad.lo.s32 	%r549, %r548, 257, %r541;
	or.b32  	%r550, %r542, 8;
	mad.lo.s32 	%r551, %r550, 257, %r541;
	or.b32  	%r552, %r542, 10;
	mad.lo.s32 	%r553, %r552, 257, %r541;
	or.b32  	%r554, %r542, 12;
	mad.lo.s32 	%r555, %r554, 257, %r541;
	or.b32  	%r556, %r542, 14;
	mad.lo.s32 	%r557, %r556, 257, %r541;
	or.b32  	%r558, %r542, 16;
	mad.lo.s32 	%r559, %r558, 257, %r541;
	or.b32  	%r560, %r542, 18;
	mad.lo.s32 	%r561, %r560, 257, %r541;
	or.b32  	%r562, %r542, 20;
	mad.lo.s32 	%r563, %r562, 257, %r541;
	or.b32  	%r564, %r542, 22;
	mad.lo.s32 	%r565, %r564, 257, %r541;
	or.b32  	%r566, %r542, 24;
	mad.lo.s32 	%r567, %r566, 257, %r541;
	or.b32  	%r568, %r542, 26;
	mad.lo.s32 	%r569, %r568, 257, %r541;
	or.b32  	%r570, %r542, 28;
	mad.lo.s32 	%r571, %r570, 257, %r541;
	or.b32  	%r572, %r542, 30;
	mad.lo.s32 	%r573, %r572, 257, %r541;
	mul.lo.s32 	%r574, %r128, 2184;
	mad.lo.s32 	%r575, %r523, 33, %r574;
	mad.lo.s32 	%r576, %r526, 546, %r575;
	setp.lt.u32 	%p234, %r5, 4;
	setp.eq.s32 	%p235, %r129, 4;
	setp.eq.s32 	%p236, %r129, 5;
	bfe.s32 	%r577, %r5, 3, 1;
	and.b32  	%r578, %r5, 8;
	setp.eq.s32 	%p237, %r578, 0;
	and.b32  	%r579, %r577, 4144;
	and.b32  	%r580, %r1, 1;
	neg.s32 	%r581, %r580;
	and.b32  	%r582, %r581, 2064;
	bfe.s32 	%r583, %r1, 1, 1;
	and.b32  	%r584, %r583, 1032;
	bfe.s32 	%r585, %r1, 2, 1;
	and.b32  	%r586, %r585, 516;
	and.b32  	%r587, %r535, 12;
	mad.lo.s32 	%r588, %r542, 258, %r587;
	add.s32 	%r589, %r588, %r582;
	add.s32 	%r590, %r589, %r579;
	add.s32 	%r591, %r590, %r526;
	add.s32 	%r592, %r591, %r584;
	add.s32 	%r593, %r592, %r586;
	mul.wide.u32 	%rd77, %r593, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b32 	%r594, 16, 4160, %p237;
	add.s32 	%r595, %r589, %r594;
	add.s32 	%r596, %r595, %r526;
	add.s32 	%r597, %r596, %r584;
	add.s32 	%r598, %r597, %r586;
	mul.wide.u32 	%rd79, %r598, 4;
	add.s64 	%rd8, %rd78, %rd79;
	shl.b32 	%r599, %r300, 16;
	shl.b32 	%r600, %r304, 9;
	add.s32 	%r601, %r600, %r599;
	or.b32  	%r602, %r2, %r158;
	and.b32  	%r603, %r5, 15;
	or.b32  	%r604, %r603, %r4;
	or.b32  	%r159, %r604, %r602;
	cvt.s64.s32 	%rd9, %r601;
	add.s32 	%r605, %r1, %r540;
	mul.wide.u32 	%rd80, %r605, 4;
	add.s64 	%rd10, %rd78, %rd80;
	cvt.u64.u32 	%rd81, %r1;
	cvt.u64.u32 	%rd11, %r540;
	add.s64 	%rd82, %rd11, %rd81;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd12, %rd78, %rd83;
	add.s32 	%r606, %r543, %r5;
	mul.wide.u32 	%rd84, %r606, 4;
	add.s64 	%rd13, %rd78, %rd84;
	add.s32 	%r607, %r545, %r5;
	mul.wide.u32 	%rd85, %r607, 4;
	add.s64 	%rd14, %rd78, %rd85;
	add.s32 	%r608, %r547, %r5;
	mul.wide.u32 	%rd86, %r608, 4;
	add.s64 	%rd15, %rd78, %rd86;
	add.s32 	%r609, %r549, %r5;
	mul.wide.u32 	%rd87, %r609, 4;
	add.s64 	%rd16, %rd78, %rd87;
	add.s32 	%r610, %r551, %r5;
	mul.wide.u32 	%rd88, %r610, 4;
	add.s64 	%rd17, %rd78, %rd88;
	add.s32 	%r611, %r553, %r5;
	mul.wide.u32 	%rd89, %r611, 4;
	add.s64 	%rd18, %rd78, %rd89;
	add.s32 	%r612, %r555, %r5;
	mul.wide.u32 	%rd90, %r612, 4;
	add.s64 	%rd19, %rd78, %rd90;
	add.s32 	%r613, %r557, %r5;
	mul.wide.u32 	%rd91, %r613, 4;
	add.s64 	%rd20, %rd78, %rd91;
	add.s32 	%r614, %r559, %r5;
	mul.wide.u32 	%rd92, %r614, 4;
	add.s64 	%rd21, %rd78, %rd92;
	add.s32 	%r615, %r561, %r5;
	mul.wide.u32 	%rd93, %r615, 4;
	add.s64 	%rd22, %rd78, %rd93;
	add.s32 	%r616, %r563, %r5;
	mul.wide.u32 	%rd94, %r616, 4;
	add.s64 	%rd23, %rd78, %rd94;
	add.s32 	%r617, %r565, %r5;
	mul.wide.u32 	%rd95, %r617, 4;
	add.s64 	%rd24, %rd78, %rd95;
	add.s32 	%r618, %r567, %r5;
	mul.wide.u32 	%rd96, %r618, 4;
	add.s64 	%rd25, %rd78, %rd96;
	add.s32 	%r619, %r569, %r5;
	mul.wide.u32 	%rd97, %r619, 4;
	add.s64 	%rd26, %rd78, %rd97;
	add.s32 	%r620, %r571, %r5;
	mul.wide.u32 	%rd98, %r620, 4;
	add.s64 	%rd27, %rd78, %rd98;
	add.s32 	%r621, %r573, %r5;
	mul.wide.u32 	%rd99, %r621, 4;
	add.s64 	%rd28, %rd78, %rd99;
	add.s32 	%r622, %r576, %r542;
	mul.wide.u32 	%rd100, %r622, 4;
	add.s64 	%rd29, %rd78, %rd100;
	add.s32 	%r623, %r576, %r544;
	mul.wide.u32 	%rd101, %r623, 4;
	add.s64 	%rd30, %rd78, %rd101;
	add.s32 	%r624, %r576, %r546;
	mul.wide.u32 	%rd102, %r624, 4;
	add.s64 	%rd31, %rd78, %rd102;
	add.s32 	%r625, %r576, %r548;
	mul.wide.u32 	%rd103, %r625, 4;
	add.s64 	%rd32, %rd78, %rd103;
	add.s32 	%r626, %r576, %r550;
	mul.wide.u32 	%rd104, %r626, 4;
	add.s64 	%rd33, %rd78, %rd104;
	add.s32 	%r627, %r576, %r552;
	mul.wide.u32 	%rd105, %r627, 4;
	add.s64 	%rd34, %rd78, %rd105;
	add.s32 	%r628, %r576, %r554;
	mul.wide.u32 	%rd106, %r628, 4;
	add.s64 	%rd35, %rd78, %rd106;
	add.s32 	%r629, %r576, %r556;
	mul.wide.u32 	%rd107, %r629, 4;
	add.s64 	%rd36, %rd78, %rd107;
	add.s32 	%r630, %r576, %r558;
	mul.wide.u32 	%rd108, %r630, 4;
	add.s64 	%rd37, %rd78, %rd108;
	add.s32 	%r631, %r576, %r560;
	mul.wide.u32 	%rd109, %r631, 4;
	add.s64 	%rd38, %rd78, %rd109;
	add.s32 	%r632, %r576, %r562;
	mul.wide.u32 	%rd110, %r632, 4;
	add.s64 	%rd39, %rd78, %rd110;
	add.s32 	%r633, %r576, %r564;
	mul.wide.u32 	%rd111, %r633, 4;
	add.s64 	%rd40, %rd78, %rd111;
	add.s32 	%r634, %r576, %r566;
	mul.wide.u32 	%rd112, %r634, 4;
	add.s64 	%rd41, %rd78, %rd112;
	add.s32 	%r635, %r576, %r568;
	mul.wide.u32 	%rd113, %r635, 4;
	add.s64 	%rd42, %rd78, %rd113;
	add.s32 	%r636, %r576, %r570;
	mul.wide.u32 	%rd114, %r636, 4;
	add.s64 	%rd43, %rd78, %rd114;
	add.s32 	%r637, %r576, %r572;
	mul.wide.u32 	%rd115, %r637, 4;
	add.s64 	%rd44, %rd78, %rd115;
	add.s32 	%r638, %r129, -1;
	setp.lt.u32 	%p238, %r638, 3;
	or.pred  	%p239, %p234, %p238;
	or.pred  	%p240, %p239, %p235;
	and.b32  	%r639, %r5, 24;
	setp.eq.s32 	%p241, %r639, 24;
	or.pred  	%p242, %p236, %p241;
	selp.b32 	%r160, 1145324612, -286331154, %p239;
	or.pred  	%p1, %p240, %p242;
	add.s32 	%r640, %r593, 32;
	mul.wide.u32 	%rd116, %r640, 4;
	add.s64 	%rd45, %rd78, %rd116;
	add.s32 	%r641, %r593, 48;
	mul.wide.u32 	%rd117, %r641, 4;
	add.s64 	%rd46, %rd78, %rd117;
	add.s32 	%r642, %r593, 64;
	mul.wide.u32 	%rd118, %r642, 4;
	add.s64 	%rd47, %rd78, %rd118;
	add.s32 	%r643, %r593, 80;
	mul.wide.u32 	%rd119, %r643, 4;
	add.s64 	%rd48, %rd78, %rd119;
	add.s32 	%r644, %r593, 96;
	mul.wide.u32 	%rd120, %r644, 4;
	add.s64 	%rd49, %rd78, %rd120;
	add.s32 	%r645, %r593, 112;
	mul.wide.u32 	%rd121, %r645, 4;
	add.s64 	%rd50, %rd78, %rd121;
	add.s32 	%r646, %r593, 128;
	mul.wide.u32 	%rd122, %r646, 4;
	add.s64 	%rd51, %rd78, %rd122;
	add.s32 	%r647, %r593, 144;
	mul.wide.u32 	%rd123, %r647, 4;
	add.s64 	%rd52, %rd78, %rd123;
	add.s32 	%r648, %r593, 160;
	mul.wide.u32 	%rd124, %r648, 4;
	add.s64 	%rd53, %rd78, %rd124;
	add.s32 	%r649, %r593, 176;
	mul.wide.u32 	%rd125, %r649, 4;
	add.s64 	%rd54, %rd78, %rd125;
	add.s32 	%r650, %r593, 192;
	mul.wide.u32 	%rd126, %r650, 4;
	add.s64 	%rd55, %rd78, %rd126;
	add.s32 	%r651, %r593, 208;
	mul.wide.u32 	%rd127, %r651, 4;
	add.s64 	%rd56, %rd78, %rd127;
	add.s32 	%r652, %r593, 224;
	mul.wide.u32 	%rd128, %r652, 4;
	add.s64 	%rd57, %rd78, %rd128;
	add.s32 	%r653, %r593, 240;
	mul.wide.u32 	%rd129, %r653, 4;
	add.s64 	%rd58, %rd78, %rd129;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p244, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3469, %r89;
	mov.u32 	%r3470, %r89;
	mov.u32 	%r3471, %r89;
	bra.uni 	$L__BB0_199;
$L__BB0_170:                            // %L32713
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p347, %r89, 16320;
	mov.u32 	%r89, %r127;
	@%p347 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_171;
$L__BB0_199:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_217 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r654, %r89, %r298;
	setp.lt.s32 	%p243, %r654, %r299;
	@%p243 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_171;
$L__BB0_200:                            // %pass780
                                        //   in Loop: Header=BB0_199 Depth=1
	cvt.u32.u64 	%r847, %rd11;
	or.b32  	%r848, %r89, %r1;
	shl.b32 	%r849, %r848, 14;
	and.b32  	%r850, %r849, 267632640;
	or.b32  	%r851, %r157, %r850;
	add.s32 	%r852, %r156, %r851;
	shr.s32 	%r853, %r852, 31;
	shr.u32 	%r854, %r853, 4;
	add.s32 	%r855, %r852, %r854;
	shr.s32 	%r856, %r855, 28;
	setp.lt.s32 	%p245, %r852, 0;
	and.b32  	%r857, %r855, -268435456;
	setp.ne.s32 	%p246, %r857, %r852;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r858, 1, 0, %p247;
	sub.s32 	%r859, %r858, %r856;
	shl.b32 	%r860, %r859, 28;
	add.s32 	%r861, %r860, %r852;
	mul.wide.s32 	%rd130, %r861, 4;
	add.s64 	%rd131, %rd3, %rd130;
	ld.global.v4.u32 	{%r862, %r863, %r864, %r865}, [%rd131];
	or.b32  	%r866, %r848, 16;
	shl.b32 	%r867, %r866, 14;
	and.b32  	%r868, %r867, 267894784;
	or.b32  	%r869, %r157, %r868;
	add.s32 	%r870, %r156, %r869;
	shr.s32 	%r871, %r870, 31;
	shr.u32 	%r872, %r871, 4;
	add.s32 	%r873, %r870, %r872;
	shr.s32 	%r874, %r873, 28;
	setp.lt.s32 	%p248, %r870, 0;
	and.b32  	%r875, %r873, -268435456;
	setp.ne.s32 	%p249, %r875, %r870;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r876, 1, 0, %p250;
	sub.s32 	%r877, %r876, %r874;
	shl.b32 	%r878, %r877, 28;
	add.s32 	%r879, %r878, %r870;
	mul.wide.s32 	%rd132, %r879, 4;
	add.s64 	%rd133, %rd3, %rd132;
	ld.global.v4.u32 	{%r880, %r881, %r882, %r883}, [%rd133];
	and.b32  	%r884, %r89, 16320;
	or.b32  	%r885, %r1, %r884;
	shl.b32 	%r886, %r885, 14;
	or.b32  	%r887, %r886, %r157;
	or.b32  	%r888, %r887, 524288;
	add.s32 	%r889, %r156, %r888;
	shr.s32 	%r890, %r889, 31;
	shr.u32 	%r891, %r890, 4;
	add.s32 	%r892, %r889, %r891;
	shr.s32 	%r893, %r892, 28;
	setp.lt.s32 	%p251, %r889, 0;
	and.b32  	%r894, %r892, -268435456;
	setp.ne.s32 	%p252, %r894, %r889;
	and.pred  	%p253, %p251, %p252;
	selp.u32 	%r895, 1, 0, %p253;
	sub.s32 	%r896, %r895, %r893;
	shl.b32 	%r897, %r896, 28;
	add.s32 	%r898, %r897, %r889;
	mul.wide.s32 	%rd134, %r898, 4;
	add.s64 	%rd135, %rd3, %rd134;
	ld.global.v4.u32 	{%r899, %r900, %r901, %r902}, [%rd135];
	or.b32  	%r903, %r887, 786432;
	add.s32 	%r904, %r156, %r903;
	shr.s32 	%r905, %r904, 31;
	shr.u32 	%r906, %r905, 4;
	add.s32 	%r907, %r904, %r906;
	shr.s32 	%r908, %r907, 28;
	setp.lt.s32 	%p254, %r904, 0;
	and.b32  	%r909, %r907, -268435456;
	setp.ne.s32 	%p255, %r909, %r904;
	and.pred  	%p256, %p254, %p255;
	selp.u32 	%r910, 1, 0, %p256;
	sub.s32 	%r911, %r910, %r908;
	shl.b32 	%r912, %r911, 28;
	add.s32 	%r913, %r912, %r904;
	mul.wide.s32 	%rd136, %r913, 4;
	add.s64 	%rd137, %rd3, %rd136;
	ld.global.v4.u32 	{%r914, %r915, %r916, %r917}, [%rd137];
	selp.b32 	%r918, %r864, %r862, %p244;
	shfl.sync.bfly.b32	%r919, %r918, 16, 31, -1;
	selp.b32 	%r657, %r862, %r919, %p244;
	selp.b32 	%r662, %r919, %r864, %p244;
	selp.b32 	%r920, %r865, %r863, %p244;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r665, %r863, %r921, %p244;
	selp.b32 	%r670, %r921, %r865, %p244;
	selp.b32 	%r922, %r882, %r880, %p244;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r673, %r880, %r923, %p244;
	selp.b32 	%r678, %r923, %r882, %p244;
	selp.b32 	%r924, %r883, %r881, %p244;
	shfl.sync.bfly.b32	%r925, %r924, 16, 31, -1;
	selp.b32 	%r681, %r881, %r925, %p244;
	selp.b32 	%r686, %r925, %r883, %p244;
	selp.b32 	%r926, %r901, %r899, %p244;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r689, %r899, %r927, %p244;
	selp.b32 	%r694, %r927, %r901, %p244;
	selp.b32 	%r928, %r902, %r900, %p244;
	shfl.sync.bfly.b32	%r929, %r928, 16, 31, -1;
	selp.b32 	%r697, %r900, %r929, %p244;
	selp.b32 	%r702, %r929, %r902, %p244;
	selp.b32 	%r930, %r916, %r914, %p244;
	shfl.sync.bfly.b32	%r931, %r930, 16, 31, -1;
	selp.b32 	%r705, %r914, %r931, %p244;
	selp.b32 	%r710, %r931, %r916, %p244;
	selp.b32 	%r932, %r917, %r915, %p244;
	shfl.sync.bfly.b32	%r933, %r932, 16, 31, -1;
	selp.b32 	%r713, %r915, %r933, %p244;
	selp.b32 	%r718, %r933, %r917, %p244;
	shl.b32 	%r658, %r662, 4;
	mov.u32 	%r656, 252645135;
	// begin inline asm
	lop3.b32 %r720, %r656, %r657, %r658, 202;
	// end inline asm
	shr.u32 	%r661, %r657, 4;
	// begin inline asm
	lop3.b32 %r736, %r656, %r661, %r662, 202;
	// end inline asm
	shl.b32 	%r666, %r670, 4;
	// begin inline asm
	lop3.b32 %r728, %r656, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r744, %r656, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r752, %r656, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r768, %r656, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r760, %r656, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r776, %r656, %r685, %r686, 202;
	// end inline asm
	shl.b32 	%r690, %r694, 4;
	// begin inline asm
	lop3.b32 %r721, %r656, %r689, %r690, 202;
	// end inline asm
	shr.u32 	%r693, %r689, 4;
	// begin inline asm
	lop3.b32 %r737, %r656, %r693, %r694, 202;
	// end inline asm
	shl.b32 	%r698, %r702, 4;
	// begin inline asm
	lop3.b32 %r729, %r656, %r697, %r698, 202;
	// end inline asm
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r745, %r656, %r701, %r702, 202;
	// end inline asm
	shl.b32 	%r706, %r710, 4;
	// begin inline asm
	lop3.b32 %r753, %r656, %r705, %r706, 202;
	// end inline asm
	shr.u32 	%r709, %r705, 4;
	// begin inline asm
	lop3.b32 %r769, %r656, %r709, %r710, 202;
	// end inline asm
	shl.b32 	%r714, %r718, 4;
	// begin inline asm
	lop3.b32 %r761, %r656, %r713, %r714, 202;
	// end inline asm
	shr.u32 	%r717, %r713, 4;
	// begin inline asm
	lop3.b32 %r777, %r656, %r717, %r718, 202;
	// end inline asm
	mov.u32 	%r722, 25152;
	// begin inline asm
	prmt.b32 %r784, %r720, %r721, %r722;
	// end inline asm
	mov.u32 	%r726, 29521;
	// begin inline asm
	prmt.b32 %r816, %r720, %r721, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r728, %r729, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r728, %r729, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r736, %r737, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r736, %r737, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r744, %r745, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r744, %r745, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r752, %r753, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r752, %r753, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r760, %r761, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r840, %r760, %r761, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r768, %r769, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r768, %r769, %r726;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r776, %r777, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r776, %r777, %r726;
	// end inline asm
	mov.u32 	%r786, 21520;
	// begin inline asm
	prmt.b32 %r783, %r784, %r785, %r786;
	// end inline asm
	mov.u32 	%r790, 30258;
	// begin inline asm
	prmt.b32 %r787, %r784, %r785, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r816, %r817, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r816, %r817, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r824, %r825, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r824, %r825, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r832, %r833, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r832, %r833, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r840, %r841, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r843, %r840, %r841, %r790;
	// end inline asm
	st.shared.u32 	[%rd10], %r783;
	st.shared.u32 	[%rd12+512], %r791;
	st.shared.u32 	[%rd12+256], %r787;
	st.shared.u32 	[%rd12+768], %r795;
	and.b32  	%r934, %r866, 31;
	add.s32 	%r935, %r934, %r847;
	mul.wide.u32 	%rd138, %r935, 4;
	add.s64 	%rd140, %rd78, %rd138;
	st.shared.u32 	[%rd140], %r799;
	cvt.u64.u32 	%rd141, %r934;
	add.s64 	%rd142, %rd11, %rd141;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd78, %rd143;
	st.shared.u32 	[%rd144+512], %r807;
	st.shared.u32 	[%rd144+256], %r803;
	st.shared.u32 	[%rd144+768], %r811;
	st.shared.u32 	[%rd12+128], %r815;
	st.shared.u32 	[%rd12+640], %r823;
	st.shared.u32 	[%rd12+384], %r819;
	st.shared.u32 	[%rd12+896], %r827;
	st.shared.u32 	[%rd144+128], %r831;
	st.shared.u32 	[%rd144+640], %r839;
	st.shared.u32 	[%rd144+384], %r835;
	st.shared.u32 	[%rd144+896], %r843;
	bar.sync 	0;
	ld.shared.u32 	%r161, [%rd13];
	ld.shared.u32 	%r162, [%rd14];
	ld.shared.u32 	%r163, [%rd15];
	ld.shared.u32 	%r164, [%rd16];
	ld.shared.u32 	%r165, [%rd17];
	ld.shared.u32 	%r166, [%rd18];
	ld.shared.u32 	%r167, [%rd19];
	ld.shared.u32 	%r168, [%rd20];
	ld.shared.u32 	%r169, [%rd21];
	ld.shared.u32 	%r170, [%rd22];
	ld.shared.u32 	%r171, [%rd23];
	ld.shared.u32 	%r172, [%rd24];
	ld.shared.u32 	%r173, [%rd25];
	ld.shared.u32 	%r174, [%rd26];
	ld.shared.u32 	%r175, [%rd27];
	ld.shared.u32 	%r176, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r177, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r178, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 15, 31, -1;
	setp.eq.s32 	%p257, %r177, 999999999;
	@%p257 bra 	$L__BB0_136;
// %bb.201:                             // %pass3077
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r936, %r177, %r5;
	mul.wide.s32 	%rd145, %r936, 4;
	add.s64 	%rd147, %rd78, %rd145;
	st.shared.u32 	[%rd147], %r161;
	setp.eq.s32 	%p258, %r178, 999999999;
	@%p258 bra 	$L__BB0_137;
// %bb.202:                             // %pass3145
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r937, %r178, %r5;
	mul.wide.s32 	%rd148, %r937, 4;
	add.s64 	%rd150, %rd78, %rd148;
	st.shared.u32 	[%rd150], %r162;
	setp.eq.s32 	%p259, %r179, 999999999;
	@%p259 bra 	$L__BB0_138;
// %bb.203:                             // %pass3213
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r938, %r179, %r5;
	mul.wide.s32 	%rd151, %r938, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r163;
	setp.eq.s32 	%p260, %r180, 999999999;
	@%p260 bra 	$L__BB0_139;
// %bb.204:                             // %pass3281
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r939, %r180, %r5;
	mul.wide.s32 	%rd154, %r939, 4;
	add.s64 	%rd156, %rd78, %rd154;
	st.shared.u32 	[%rd156], %r164;
	setp.eq.s32 	%p261, %r181, 999999999;
	@%p261 bra 	$L__BB0_140;
// %bb.205:                             // %pass3349
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r940, %r181, %r5;
	mul.wide.s32 	%rd157, %r940, 4;
	add.s64 	%rd159, %rd78, %rd157;
	st.shared.u32 	[%rd159], %r165;
	setp.eq.s32 	%p262, %r182, 999999999;
	@%p262 bra 	$L__BB0_141;
// %bb.206:                             // %pass3417
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r941, %r182, %r5;
	mul.wide.s32 	%rd160, %r941, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r166;
	setp.eq.s32 	%p263, %r183, 999999999;
	@%p263 bra 	$L__BB0_142;
// %bb.207:                             // %pass3485
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r942, %r183, %r5;
	mul.wide.s32 	%rd163, %r942, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r167;
	setp.eq.s32 	%p264, %r184, 999999999;
	@%p264 bra 	$L__BB0_143;
// %bb.208:                             // %pass3553
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r943, %r184, %r5;
	mul.wide.s32 	%rd166, %r943, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r168;
	setp.eq.s32 	%p265, %r185, 999999999;
	@%p265 bra 	$L__BB0_144;
// %bb.209:                             // %pass3621
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r944, %r185, %r5;
	mul.wide.s32 	%rd169, %r944, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r169;
	setp.eq.s32 	%p266, %r186, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.210:                             // %pass3689
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r945, %r186, %r5;
	mul.wide.s32 	%rd172, %r945, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r170;
	setp.eq.s32 	%p267, %r187, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.211:                             // %pass3757
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r946, %r187, %r5;
	mul.wide.s32 	%rd175, %r946, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r171;
	setp.eq.s32 	%p268, %r188, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.212:                             // %pass3825
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r947, %r188, %r5;
	mul.wide.s32 	%rd178, %r947, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r172;
	setp.eq.s32 	%p269, %r189, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.213:                             // %pass3893
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r948, %r189, %r5;
	mul.wide.s32 	%rd181, %r948, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r173;
	setp.eq.s32 	%p270, %r190, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.214:                             // %pass3961
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r949, %r190, %r5;
	mul.wide.s32 	%rd184, %r949, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r174;
	setp.eq.s32 	%p271, %r191, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.215:                             // %pass4029
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r950, %r191, %r5;
	mul.wide.s32 	%rd187, %r950, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r175;
	setp.eq.s32 	%p272, %r192, 999999999;
	@%p272 bra 	$L__BB0_151;
// %bb.216:                             // %pass4097
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r952, %r192, %r5;
	mul.wide.s32 	%rd190, %r952, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r176;
	bar.sync 	0;
	ld.shared.u32 	%r193, [%rd29];
	ld.shared.u32 	%r194, [%rd30];
	ld.shared.u32 	%r195, [%rd31];
	ld.shared.u32 	%r196, [%rd32];
	ld.shared.u32 	%r197, [%rd33];
	ld.shared.u32 	%r198, [%rd34];
	ld.shared.u32 	%r199, [%rd35];
	ld.shared.u32 	%r200, [%rd36];
	ld.shared.u32 	%r201, [%rd37];
	ld.shared.u32 	%r202, [%rd38];
	ld.shared.u32 	%r203, [%rd39];
	ld.shared.u32 	%r204, [%rd40];
	ld.shared.u32 	%r205, [%rd41];
	ld.shared.u32 	%r206, [%rd42];
	ld.shared.u32 	%r207, [%rd43];
	ld.shared.u32 	%r208, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3461, 16;
	bra.uni 	$L__BB0_217;
$L__BB0_152:                            // %L22489
                                        //   in Loop: Header=BB0_217 Depth=2
	bar.sync 	0;
	add.s32 	%r3461, %r3461, -8;
	setp.ne.s32 	%p309, %r3461, -16;
	@%p309 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_153;
$L__BB0_217:                            // %L12302
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p273, %r3461, 16;
	selp.b32 	%r1345, %r193, 0, %p273;
	setp.eq.s32 	%p274, %r3461, 8;
	selp.b32 	%r1346, %r197, %r1345, %p274;
	setp.eq.s32 	%p275, %r3461, 0;
	selp.b32 	%r1347, %r201, %r1346, %p275;
	setp.eq.s32 	%p276, %r3461, -8;
	selp.b32 	%r1348, %r205, %r1347, %p276;
	selp.b32 	%r1349, %r194, 0, %p273;
	selp.b32 	%r1350, %r198, %r1349, %p274;
	selp.b32 	%r1351, %r202, %r1350, %p275;
	selp.b32 	%r1352, %r206, %r1351, %p276;
	selp.b32 	%r1353, %r195, 0, %p273;
	selp.b32 	%r1354, %r199, %r1353, %p274;
	selp.b32 	%r1355, %r203, %r1354, %p275;
	selp.b32 	%r1356, %r207, %r1355, %p276;
	selp.b32 	%r1357, %r196, 0, %p273;
	selp.b32 	%r1358, %r200, %r1357, %p274;
	selp.b32 	%r1359, %r204, %r1358, %p275;
	selp.b32 	%r1360, %r208, %r1359, %p276;
	// begin inline asm
	mov.b32 %r958, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r957, %r1348, -2004318072;
	mov.u32 	%r1094, 983055;
	// begin inline asm
	lop3.b32 %r955, %r1094, %r957, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r958, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	mov.u32 	%r1105, 15728880;
	// begin inline asm
	lop3.b32 %r966, %r1105, %r957, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1003, %r1352, -2004318072;
	// begin inline asm
	lop3.b32 %r1001, %r1094, %r1003, %r1004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r1004, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r1105, %r1003, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	mov.b32 %r1050, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1049, %r1356, -2004318072;
	// begin inline asm
	lop3.b32 %r1047, %r1094, %r1049, %r1050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1052, %r1050, %r1051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1055, %r1047, %r1052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1058, %r1105, %r1049, %r1061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1061, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	mov.b32 %r1096, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1095, %r1360, -2004318072;
	// begin inline asm
	lop3.b32 %r1093, %r1094, %r1095, %r1096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1098, %r1096, %r1097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1101, %r1093, %r1098;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1104, %r1105, %r1095, %r1107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1108, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1109, %r1107, %r1108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1112, %r1104, %r1109;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r963;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1137, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1009;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1143, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1055;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1066;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1152, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1101;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1155, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1112;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1158, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1216, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1161, %r1162}, {%r328, %r331}, {%r1137}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1168, %r1169}, {%r328, %r331}, {%r1140}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1175, %r1176}, {%r328, %r331}, {%r1143}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1182, %r1183}, {%r328, %r331}, {%r1146}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1189, %r1190}, {%r328, %r331}, {%r1149}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1196, %r1197}, {%r328, %r331}, {%r1152}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1203, %r1204}, {%r328, %r331}, {%r1155}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1210, %r1211}, {%r328, %r331}, {%r1158}, {%r1216, %r1216};
	// end inline asm
	@%p1 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;
$L__BB0_219:                            // %pass5517
                                        //   in Loop: Header=BB0_217 Depth=2
	// begin inline asm
	neg.f16x2 %r1217, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r1217, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r366, %r1161, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1226, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r1226, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r366, %r1168, %r1228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1235, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r1235, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r366, %r1175, %r1237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1244, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1246, %r1244, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1249, %r366, %r1182, %r1246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1253, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1255, %r1253, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1258, %r366, %r1189, %r1255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1262, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1264, %r1262, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1267, %r366, %r1196, %r1264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1271, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r1271, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r366, %r1203, %r1273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1280, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1282, %r1280, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r366, %r1210, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1289, %r369, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1292, %r366, %r1162, %r1289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1296, %r369, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1299, %r366, %r1169, %r1296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1303, %r369, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r366, %r1176, %r1303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1310, %r369, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1313, %r366, %r1183, %r1310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r369, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1320, %r366, %r1190, %r1317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1324, %r369, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1327, %r366, %r1197, %r1324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1331, %r369, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1334, %r366, %r1204, %r1331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1338, %r369, %r1210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1341, %r366, %r1211, %r1338;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1362}, {%r413, %r416}, {%r1222, %r1292}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1370, %r1371}, {%r413, %r416}, {%r1231, %r1299}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1380}, {%r413, %r416}, {%r1240, %r1306}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1388, %r1389}, {%r413, %r416}, {%r1249, %r1313}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1397, %r1398}, {%r413, %r416}, {%r1258, %r1320}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1406, %r1407}, {%r413, %r416}, {%r1267, %r1327}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1415, %r1416}, {%r413, %r416}, {%r1276, %r1334}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1424, %r1425}, {%r413, %r416}, {%r1285, %r1341}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1501, [%rd7];
	ld.shared.u32 	%r1508, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r425, %r428}, {%r1501}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1527, %r1524}, {%r425, %r428}, {%r1508}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r459, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1520, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1520, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r459, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r462, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r459, %r1515, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r462, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r459, %r1524, %r1536;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1562, %r1565}, {%r501, %r504}, {%r1516, %r1532}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1569, %r1573}, {%r501, %r504}, {%r1525, %r1539}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1561, %r1562, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1565, %r1565, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r1569, %r1569, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r1573, %r1573, %r1568;
	// end inline asm
	mov.u32 	%r1577, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3482, %r1577, %r1572, %r3471;
	// end inline asm
	add.s32 	%r3480, %r3469, 1;
	setp.ne.s32 	%p277, %r3480, 25;
	@%p277 bra 	$L__BB0_221;
// %bb.220:                             // %pass6121
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1581, %r3470, 16;
	or.b32  	%r1582, %r159, %r1581;
	cvt.u64.u32 	%rd195, %r1582;
	add.s64 	%rd196, %rd195, %rd9;
	shr.u64 	%rd197, %rd196, 37;
	add.s64 	%rd198, %rd196, %rd197;
	shr.s64 	%rd199, %rd198, 27;
	setp.lt.s64 	%p278, %rd196, 0;
	and.b64  	%rd200, %rd198, -134217728;
	setp.ne.s64 	%p279, %rd200, %rd196;
	and.pred  	%p280, %p278, %p279;
	selp.u64 	%rd201, 1, 0, %p280;
	sub.s64 	%rd202, %rd201, %rd199;
	shl.b64 	%rd203, %rd202, 27;
	add.s64 	%rd204, %rd203, %rd196;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd4, %rd205;
	st.global.u32 	[%rd206], %r3482;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3480, 0;
	mov.u32 	%r3482, %r3480;
$L__BB0_221:                            // %pass6320
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1587, [%rd45];
	ld.shared.u32 	%r1594, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r425, %r428}, {%r1587}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1613, %r1610}, {%r425, %r428}, {%r1594}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r459, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1606, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r1606, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r459, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r462, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r459, %r1601, %r1615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r462, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r459, %r1610, %r1622;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1648, %r1651}, {%r501, %r504}, {%r1602, %r1618}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1655, %r1659}, {%r501, %r504}, {%r1611, %r1625}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1648, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1651, %r1651, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r1577, %r1658, %r3482;
	// end inline asm
	add.s32 	%r3483, %r3480, 1;
	setp.ne.s32 	%p281, %r3483, 25;
	@%p281 bra 	$L__BB0_223;
// %bb.222:                             // %pass6631
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1667, %r3470, 16;
	or.b32  	%r1668, %r159, %r1667;
	cvt.u64.u32 	%rd207, %r1668;
	add.s64 	%rd208, %rd207, %rd9;
	shr.u64 	%rd209, %rd208, 37;
	add.s64 	%rd210, %rd208, %rd209;
	shr.s64 	%rd211, %rd210, 27;
	setp.lt.s64 	%p282, %rd208, 0;
	and.b64  	%rd212, %rd210, -134217728;
	setp.ne.s64 	%p283, %rd212, %rd208;
	and.pred  	%p284, %p282, %p283;
	selp.u64 	%rd213, 1, 0, %p284;
	sub.s64 	%rd214, %rd213, %rd211;
	shl.b64 	%rd215, %rd214, 27;
	add.s64 	%rd216, %rd215, %rd208;
	shl.b64 	%rd217, %rd216, 2;
	add.s64 	%rd218, %rd4, %rd217;
	st.global.u32 	[%rd218], %r3485;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3483, 0;
	mov.u32 	%r3485, %r3483;
$L__BB0_223:                            // %pass6830
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1673, [%rd47];
	ld.shared.u32 	%r1680, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1690, %r1687}, {%r425, %r428}, {%r1673}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1699, %r1696}, {%r425, %r428}, {%r1680}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1683, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r1683, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r459, %r1690, %r1685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r459, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r462, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r459, %r1687, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r462, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r459, %r1696, %r1708;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1734, %r1737}, {%r501, %r504}, {%r1688, %r1704}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1741, %r1745}, {%r501, %r504}, {%r1697, %r1711}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1734, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r1737, %r1737, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r1741, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r1745, %r1745, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r1577, %r1744, %r3485;
	// end inline asm
	add.s32 	%r3486, %r3483, 1;
	setp.ne.s32 	%p285, %r3486, 25;
	@%p285 bra 	$L__BB0_225;
// %bb.224:                             // %pass7141
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1753, %r3470, 16;
	or.b32  	%r1754, %r159, %r1753;
	cvt.u64.u32 	%rd219, %r1754;
	add.s64 	%rd220, %rd219, %rd9;
	shr.u64 	%rd221, %rd220, 37;
	add.s64 	%rd222, %rd220, %rd221;
	shr.s64 	%rd223, %rd222, 27;
	setp.lt.s64 	%p286, %rd220, 0;
	and.b64  	%rd224, %rd222, -134217728;
	setp.ne.s64 	%p287, %rd224, %rd220;
	and.pred  	%p288, %p286, %p287;
	selp.u64 	%rd225, 1, 0, %p288;
	sub.s64 	%rd226, %rd225, %rd223;
	shl.b64 	%rd227, %rd226, 27;
	add.s64 	%rd228, %rd227, %rd220;
	shl.b64 	%rd229, %rd228, 2;
	add.s64 	%rd230, %rd4, %rd229;
	st.global.u32 	[%rd230], %r3488;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3486, 0;
	mov.u32 	%r3488, %r3486;
$L__BB0_225:                            // %pass7340
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1759, [%rd49];
	ld.shared.u32 	%r1766, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1776, %r1773}, {%r425, %r428}, {%r1759}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1785, %r1782}, {%r425, %r428}, {%r1766}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1769, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r1769, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r459, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1778, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r1778, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r459, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r462, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r459, %r1773, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r462, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r459, %r1782, %r1794;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1820, %r1823}, {%r501, %r504}, {%r1774, %r1790}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1827, %r1831}, {%r501, %r504}, {%r1783, %r1797}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r1820, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r1577, %r1830, %r3488;
	// end inline asm
	add.s32 	%r3489, %r3486, 1;
	setp.ne.s32 	%p289, %r3489, 25;
	@%p289 bra 	$L__BB0_227;
// %bb.226:                             // %pass7651
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1839, %r3470, 16;
	or.b32  	%r1840, %r159, %r1839;
	cvt.u64.u32 	%rd231, %r1840;
	add.s64 	%rd232, %rd231, %rd9;
	shr.u64 	%rd233, %rd232, 37;
	add.s64 	%rd234, %rd232, %rd233;
	shr.s64 	%rd235, %rd234, 27;
	setp.lt.s64 	%p290, %rd232, 0;
	and.b64  	%rd236, %rd234, -134217728;
	setp.ne.s64 	%p291, %rd236, %rd232;
	and.pred  	%p292, %p290, %p291;
	selp.u64 	%rd237, 1, 0, %p292;
	sub.s64 	%rd238, %rd237, %rd235;
	shl.b64 	%rd239, %rd238, 27;
	add.s64 	%rd240, %rd239, %rd232;
	shl.b64 	%rd241, %rd240, 2;
	add.s64 	%rd242, %rd4, %rd241;
	st.global.u32 	[%rd242], %r3491;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3489, 0;
	mov.u32 	%r3491, %r3489;
$L__BB0_227:                            // %pass7850
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1845, [%rd51];
	ld.shared.u32 	%r1852, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r425, %r428}, {%r1845}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r425, %r428}, {%r1852}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r459, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r459, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r462, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r459, %r1859, %r1873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r462, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r459, %r1868, %r1880;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1906, %r1909}, {%r501, %r504}, {%r1860, %r1876}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1917}, {%r501, %r504}, {%r1869, %r1883}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1906, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1909, %r1909, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r1913, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r1917, %r1917, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r1577, %r1916, %r3491;
	// end inline asm
	add.s32 	%r3492, %r3489, 1;
	setp.ne.s32 	%p293, %r3492, 25;
	@%p293 bra 	$L__BB0_229;
// %bb.228:                             // %pass8161
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1925, %r3470, 16;
	or.b32  	%r1926, %r159, %r1925;
	cvt.u64.u32 	%rd243, %r1926;
	add.s64 	%rd244, %rd243, %rd9;
	shr.u64 	%rd245, %rd244, 37;
	add.s64 	%rd246, %rd244, %rd245;
	shr.s64 	%rd247, %rd246, 27;
	setp.lt.s64 	%p294, %rd244, 0;
	and.b64  	%rd248, %rd246, -134217728;
	setp.ne.s64 	%p295, %rd248, %rd244;
	and.pred  	%p296, %p294, %p295;
	selp.u64 	%rd249, 1, 0, %p296;
	sub.s64 	%rd250, %rd249, %rd247;
	shl.b64 	%rd251, %rd250, 27;
	add.s64 	%rd252, %rd251, %rd244;
	shl.b64 	%rd253, %rd252, 2;
	add.s64 	%rd254, %rd4, %rd253;
	st.global.u32 	[%rd254], %r3494;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3492, 0;
	mov.u32 	%r3494, %r3492;
$L__BB0_229:                            // %pass8360
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1931, [%rd53];
	ld.shared.u32 	%r1938, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1948, %r1945}, {%r425, %r428}, {%r1931}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1957, %r1954}, {%r425, %r428}, {%r1938}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1941, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1943, %r1941, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1946, %r459, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1950, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1952, %r1950, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r459, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r462, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r459, %r1945, %r1959;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r462, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r459, %r1954, %r1966;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1992, %r1995}, {%r501, %r504}, {%r1946, %r1962}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1999, %r2003}, {%r501, %r504}, {%r1955, %r1969}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1991, %r1992, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r1995, %r1995, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r1577, %r2002, %r3494;
	// end inline asm
	add.s32 	%r3495, %r3492, 1;
	setp.ne.s32 	%p297, %r3495, 25;
	@%p297 bra 	$L__BB0_231;
// %bb.230:                             // %pass8671
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2011, %r3470, 16;
	or.b32  	%r2012, %r159, %r2011;
	cvt.u64.u32 	%rd255, %r2012;
	add.s64 	%rd256, %rd255, %rd9;
	shr.u64 	%rd257, %rd256, 37;
	add.s64 	%rd258, %rd256, %rd257;
	shr.s64 	%rd259, %rd258, 27;
	setp.lt.s64 	%p298, %rd256, 0;
	and.b64  	%rd260, %rd258, -134217728;
	setp.ne.s64 	%p299, %rd260, %rd256;
	and.pred  	%p300, %p298, %p299;
	selp.u64 	%rd261, 1, 0, %p300;
	sub.s64 	%rd262, %rd261, %rd259;
	shl.b64 	%rd263, %rd262, 27;
	add.s64 	%rd264, %rd263, %rd256;
	shl.b64 	%rd265, %rd264, 2;
	add.s64 	%rd266, %rd4, %rd265;
	st.global.u32 	[%rd266], %r3497;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3495, 0;
	mov.u32 	%r3497, %r3495;
$L__BB0_231:                            // %pass8870
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r2017, [%rd55];
	ld.shared.u32 	%r2024, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2034, %r2031}, {%r425, %r428}, {%r2017}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2043, %r2040}, {%r425, %r428}, {%r2024}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2027, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r2027, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r459, %r2034, %r2029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2036, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r2036, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r459, %r2043, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r462, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r459, %r2031, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r462, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r459, %r2040, %r2052;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2081}, {%r501, %r504}, {%r2032, %r2048}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2085, %r2089}, {%r501, %r504}, {%r2041, %r2055}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r2078, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r2081, %r2081, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r2085, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r2089, %r2089, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r1577, %r2088, %r3497;
	// end inline asm
	add.s32 	%r3498, %r3495, 1;
	setp.ne.s32 	%p301, %r3498, 25;
	@%p301 bra 	$L__BB0_233;
// %bb.232:                             // %pass9181
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2097, %r3470, 16;
	or.b32  	%r2098, %r159, %r2097;
	cvt.u64.u32 	%rd267, %r2098;
	add.s64 	%rd268, %rd267, %rd9;
	shr.u64 	%rd269, %rd268, 37;
	add.s64 	%rd270, %rd268, %rd269;
	shr.s64 	%rd271, %rd270, 27;
	setp.lt.s64 	%p302, %rd268, 0;
	and.b64  	%rd272, %rd270, -134217728;
	setp.ne.s64 	%p303, %rd272, %rd268;
	and.pred  	%p304, %p302, %p303;
	selp.u64 	%rd273, 1, 0, %p304;
	sub.s64 	%rd274, %rd273, %rd271;
	shl.b64 	%rd275, %rd274, 27;
	add.s64 	%rd276, %rd275, %rd268;
	shl.b64 	%rd277, %rd276, 2;
	add.s64 	%rd278, %rd4, %rd277;
	st.global.u32 	[%rd278], %r3500;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3498, 0;
	mov.u32 	%r3500, %r3498;
$L__BB0_233:                            // %pass9380
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r2103, [%rd57];
	ld.shared.u32 	%r2110, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2120, %r2117}, {%r425, %r428}, {%r2103}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2129, %r2126}, {%r425, %r428}, {%r2110}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2113, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r2113, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r459, %r2120, %r2115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2122, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r2122, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r459, %r2129, %r2124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r462, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r459, %r2117, %r2131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r462, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r459, %r2126, %r2138;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2167}, {%r501, %r504}, {%r2118, %r2134}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2171, %r2175}, {%r501, %r504}, {%r2127, %r2141}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2164, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r2167, %r2167, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r1577, %r2174, %r3500;
	// end inline asm
	add.s32 	%r3469, %r3498, 1;
	setp.ne.s32 	%p305, %r3469, 25;
	@%p305 bra 	$L__BB0_152;
// %bb.234:                             // %pass9691
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2183, %r3470, 16;
	or.b32  	%r2184, %r159, %r2183;
	cvt.u64.u32 	%rd279, %r2184;
	add.s64 	%rd280, %rd279, %rd9;
	shr.u64 	%rd281, %rd280, 37;
	add.s64 	%rd282, %rd280, %rd281;
	shr.s64 	%rd283, %rd282, 27;
	setp.lt.s64 	%p306, %rd280, 0;
	and.b64  	%rd284, %rd282, -134217728;
	setp.ne.s64 	%p307, %rd284, %rd280;
	and.pred  	%p308, %p306, %p307;
	selp.u64 	%rd285, 1, 0, %p308;
	sub.s64 	%rd286, %rd285, %rd283;
	shl.b64 	%rd287, %rd286, 27;
	add.s64 	%rd288, %rd287, %rd280;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3471;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3469, 0;
	mov.u32 	%r3471, %r3469;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L22510.preheader
                                        //   in Loop: Header=BB0_199 Depth=1
	mov.u32 	%r3468, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_169:                            // %L32697
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3468, %r3468, -8;
	setp.ne.s32 	%p346, %r3468, -16;
	@%p346 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_170;
$L__BB0_154:                            // %L22510
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p310, %r3468, 16;
	selp.b32 	%r2797, %r193, 0, %p310;
	setp.eq.s32 	%p311, %r3468, 8;
	selp.b32 	%r2798, %r197, %r2797, %p311;
	setp.eq.s32 	%p312, %r3468, 0;
	selp.b32 	%r2799, %r201, %r2798, %p312;
	setp.eq.s32 	%p313, %r3468, -8;
	selp.b32 	%r2800, %r205, %r2799, %p313;
	selp.b32 	%r2801, %r194, 0, %p310;
	selp.b32 	%r2802, %r198, %r2801, %p311;
	selp.b32 	%r2803, %r202, %r2802, %p312;
	selp.b32 	%r2804, %r206, %r2803, %p313;
	selp.b32 	%r2805, %r195, 0, %p310;
	selp.b32 	%r2806, %r199, %r2805, %p311;
	selp.b32 	%r2807, %r203, %r2806, %p312;
	selp.b32 	%r2808, %r207, %r2807, %p313;
	selp.b32 	%r2809, %r196, 0, %p310;
	selp.b32 	%r2810, %r200, %r2809, %p311;
	selp.b32 	%r2811, %r204, %r2810, %p312;
	selp.b32 	%r2812, %r208, %r2811, %p313;
	// begin inline asm
	mov.b32 %r2213, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2813, %r2800, 8;
	xor.b32  	%r2223, %r2813, 8947848;
	// begin inline asm
	lop3.b32 %r2210, %r1094, %r2223, %r2213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2215, %r2213, %r2214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2218, %r2210, %r2215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2221, %r1105, %r2223, %r2224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2226, %r2224, %r2225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2229, %r2221, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2814, %r2804, 8;
	xor.b32  	%r2269, %r2814, 8947848;
	// begin inline asm
	lop3.b32 %r2256, %r1094, %r2269, %r2259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2261, %r2259, %r2260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2264, %r2256, %r2261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2267, %r1105, %r2269, %r2270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2272, %r2270, %r2271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2275, %r2267, %r2272;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2815, %r2808, 8;
	xor.b32  	%r2315, %r2815, 8947848;
	// begin inline asm
	lop3.b32 %r2302, %r1094, %r2315, %r2305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2306, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2305, %r2306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2310, %r2302, %r2307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2313, %r1105, %r2315, %r2316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2316, %r2317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2321, %r2313, %r2318;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2816, %r2812, 8;
	xor.b32  	%r2361, %r2816, 8947848;
	// begin inline asm
	lop3.b32 %r2348, %r1094, %r2361, %r2351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2351, %r2352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2356, %r2348, %r2353;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2359, %r1105, %r2361, %r2362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2362, %r2363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2367, %r2359, %r2364;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2218;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2370, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2229;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2373, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2264;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2376, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2275;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2379, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2310;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2382, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2321;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2385, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2356;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2388, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2367;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2391, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2457, %r2454}, {%r328, %r331}, {%r2370}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2466, %r2463}, {%r328, %r331}, {%r2373}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2475, %r2472}, {%r328, %r331}, {%r2376}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2484, %r2481}, {%r328, %r331}, {%r2379}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2493, %r2490}, {%r328, %r331}, {%r2382}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2502, %r2499}, {%r328, %r331}, {%r2385}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r328, %r331}, {%r2388}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r328, %r331}, {%r2391}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2450, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2452, %r2450, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2455, %r366, %r2457, %r2452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2459, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2461, %r2459, %r2463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r366, %r2466, %r2461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2468, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2470, %r2468, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2473, %r366, %r2475, %r2470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2477, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r2477, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r366, %r2484, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2486, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2488, %r2486, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2491, %r366, %r2493, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2495, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r2495, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r366, %r2502, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r366, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r366, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r369, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r366, %r2454, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r369, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r366, %r2463, %r2529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r369, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r366, %r2472, %r2536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r369, %r2484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r366, %r2481, %r2543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2550, %r369, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r366, %r2490, %r2550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2557, %r369, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2560, %r366, %r2499, %r2557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2564, %r369, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2567, %r366, %r2508, %r2564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2571, %r369, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2574, %r366, %r2517, %r2571;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2578, %r2579}, {%r413, %r416}, {%r2455, %r2525}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2587, %r2588}, {%r413, %r416}, {%r2464, %r2532}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2596, %r2597}, {%r413, %r416}, {%r2473, %r2539}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2605, %r2606}, {%r413, %r416}, {%r2482, %r2546}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2614, %r2615}, {%r413, %r416}, {%r2491, %r2553}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2624}, {%r413, %r416}, {%r2500, %r2560}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2633}, {%r413, %r416}, {%r2509, %r2567}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2641, %r2642}, {%r413, %r416}, {%r2518, %r2574}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2718, [%rd7];
	ld.shared.u32 	%r2725, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2735, %r2732}, {%r425, %r428}, {%r2718}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2744, %r2741}, {%r425, %r428}, {%r2725}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2728, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2728, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r459, %r2735, %r2730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2737, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r2737, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r459, %r2744, %r2739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r462, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r459, %r2732, %r2746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r462, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r459, %r2741, %r2753;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2779, %r2782}, {%r501, %r504}, {%r2733, %r2749}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2786, %r2790}, {%r501, %r504}, {%r2742, %r2756}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r2779, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r2790, %r2790, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1577, %r2789, %r3471;
	// end inline asm
	add.s32 	%r3501, %r3469, 1;
	setp.eq.s32 	%p314, %r3501, 25;
	@%p314 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_156;
$L__BB0_155:                            // %pass10386
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2818, %r3470, 16;
	or.b32  	%r2819, %r159, %r2818;
	cvt.u64.u32 	%rd291, %r2819;
	add.s64 	%rd292, %rd291, %rd9;
	shr.u64 	%rd293, %rd292, 37;
	add.s64 	%rd294, %rd292, %rd293;
	shr.s64 	%rd295, %rd294, 27;
	setp.lt.s64 	%p315, %rd292, 0;
	and.b64  	%rd296, %rd294, -134217728;
	setp.ne.s64 	%p316, %rd296, %rd292;
	and.pred  	%p317, %p315, %p316;
	selp.u64 	%rd297, 1, 0, %p317;
	sub.s64 	%rd298, %rd297, %rd295;
	shl.b64 	%rd299, %rd298, 27;
	add.s64 	%rd300, %rd299, %rd292;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r3503;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
$L__BB0_156:                            // %pass10585
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2824, [%rd45];
	ld.shared.u32 	%r2831, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2841, %r2838}, {%r425, %r428}, {%r2824}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2850, %r2847}, {%r425, %r428}, {%r2831}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2834, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2836, %r2834, %r2838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r459, %r2841, %r2836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2843, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2845, %r2843, %r2847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r459, %r2850, %r2845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r462, %r2841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r459, %r2838, %r2852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2859, %r462, %r2850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r459, %r2847, %r2859;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2885, %r2888}, {%r501, %r504}, {%r2839, %r2855}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2892, %r2896}, {%r501, %r504}, {%r2848, %r2862}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r2885, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r2888, %r2888, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r2892, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r2896, %r2896, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r1577, %r2895, %r3503;
	// end inline asm
	add.s32 	%r3504, %r3501, 1;
	setp.ne.s32 	%p318, %r3504, 25;
	@%p318 bra 	$L__BB0_158;
// %bb.157:                             // %pass10896
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2904, %r3470, 16;
	or.b32  	%r2905, %r159, %r2904;
	cvt.u64.u32 	%rd303, %r2905;
	add.s64 	%rd304, %rd303, %rd9;
	shr.u64 	%rd305, %rd304, 37;
	add.s64 	%rd306, %rd304, %rd305;
	shr.s64 	%rd307, %rd306, 27;
	setp.lt.s64 	%p319, %rd304, 0;
	and.b64  	%rd308, %rd306, -134217728;
	setp.ne.s64 	%p320, %rd308, %rd304;
	and.pred  	%p321, %p319, %p320;
	selp.u64 	%rd309, 1, 0, %p321;
	sub.s64 	%rd310, %rd309, %rd307;
	shl.b64 	%rd311, %rd310, 27;
	add.s64 	%rd312, %rd311, %rd304;
	shl.b64 	%rd313, %rd312, 2;
	add.s64 	%rd314, %rd4, %rd313;
	st.global.u32 	[%rd314], %r3506;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3504, 0;
	mov.u32 	%r3506, %r3504;
$L__BB0_158:                            // %pass11095
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2910, [%rd47];
	ld.shared.u32 	%r2917, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2927, %r2924}, {%r425, %r428}, {%r2910}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2936, %r2933}, {%r425, %r428}, {%r2917}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2920, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r2920, %r2924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r459, %r2927, %r2922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2929, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2931, %r2929, %r2933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r459, %r2936, %r2931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r462, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r459, %r2924, %r2938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2945, %r462, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r459, %r2933, %r2945;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2971, %r2974}, {%r501, %r504}, {%r2925, %r2941}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2978, %r2982}, {%r501, %r504}, {%r2934, %r2948}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r2971, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r2982, %r2982, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r1577, %r2981, %r3506;
	// end inline asm
	add.s32 	%r3507, %r3504, 1;
	setp.ne.s32 	%p322, %r3507, 25;
	@%p322 bra 	$L__BB0_160;
// %bb.159:                             // %pass11406
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2990, %r3470, 16;
	or.b32  	%r2991, %r159, %r2990;
	cvt.u64.u32 	%rd315, %r2991;
	add.s64 	%rd316, %rd315, %rd9;
	shr.u64 	%rd317, %rd316, 37;
	add.s64 	%rd318, %rd316, %rd317;
	shr.s64 	%rd319, %rd318, 27;
	setp.lt.s64 	%p323, %rd316, 0;
	and.b64  	%rd320, %rd318, -134217728;
	setp.ne.s64 	%p324, %rd320, %rd316;
	and.pred  	%p325, %p323, %p324;
	selp.u64 	%rd321, 1, 0, %p325;
	sub.s64 	%rd322, %rd321, %rd319;
	shl.b64 	%rd323, %rd322, 27;
	add.s64 	%rd324, %rd323, %rd316;
	shl.b64 	%rd325, %rd324, 2;
	add.s64 	%rd326, %rd4, %rd325;
	st.global.u32 	[%rd326], %r3509;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3507, 0;
	mov.u32 	%r3509, %r3507;
$L__BB0_160:                            // %pass11605
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2996, [%rd49];
	ld.shared.u32 	%r3003, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3013, %r3010}, {%r425, %r428}, {%r2996}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3022, %r3019}, {%r425, %r428}, {%r3003}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3006, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r3006, %r3010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r459, %r3013, %r3008;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3015, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3017, %r3015, %r3019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3020, %r459, %r3022, %r3017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r462, %r3013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r459, %r3010, %r3024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3031, %r462, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r459, %r3019, %r3031;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3057, %r3060}, {%r501, %r504}, {%r3011, %r3027}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3064, %r3068}, {%r501, %r504}, {%r3020, %r3034}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r3057, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r3060, %r3060, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r3068, %r3068, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r1577, %r3067, %r3509;
	// end inline asm
	add.s32 	%r3510, %r3507, 1;
	setp.ne.s32 	%p326, %r3510, 25;
	@%p326 bra 	$L__BB0_162;
// %bb.161:                             // %pass11916
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3076, %r3470, 16;
	or.b32  	%r3077, %r159, %r3076;
	cvt.u64.u32 	%rd327, %r3077;
	add.s64 	%rd328, %rd327, %rd9;
	shr.u64 	%rd329, %rd328, 37;
	add.s64 	%rd330, %rd328, %rd329;
	shr.s64 	%rd331, %rd330, 27;
	setp.lt.s64 	%p327, %rd328, 0;
	and.b64  	%rd332, %rd330, -134217728;
	setp.ne.s64 	%p328, %rd332, %rd328;
	and.pred  	%p329, %p327, %p328;
	selp.u64 	%rd333, 1, 0, %p329;
	sub.s64 	%rd334, %rd333, %rd331;
	shl.b64 	%rd335, %rd334, 27;
	add.s64 	%rd336, %rd335, %rd328;
	shl.b64 	%rd337, %rd336, 2;
	add.s64 	%rd338, %rd4, %rd337;
	st.global.u32 	[%rd338], %r3512;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3510, 0;
	mov.u32 	%r3512, %r3510;
$L__BB0_162:                            // %pass12115
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3082, [%rd51];
	ld.shared.u32 	%r3089, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3099, %r3096}, {%r425, %r428}, {%r3082}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3108, %r3105}, {%r425, %r428}, {%r3089}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3092, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3094, %r3092, %r3096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r459, %r3099, %r3094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3101, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r3101, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r459, %r3108, %r3103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r462, %r3099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r459, %r3096, %r3110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r462, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r459, %r3105, %r3117;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3143, %r3146}, {%r501, %r504}, {%r3097, %r3113}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3150, %r3154}, {%r501, %r504}, {%r3106, %r3120}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r3143, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3146, %r3146, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3150, %r3150, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r3154, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r1577, %r3153, %r3512;
	// end inline asm
	add.s32 	%r3513, %r3510, 1;
	setp.ne.s32 	%p330, %r3513, 25;
	@%p330 bra 	$L__BB0_164;
// %bb.163:                             // %pass12426
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3162, %r3470, 16;
	or.b32  	%r3163, %r159, %r3162;
	cvt.u64.u32 	%rd339, %r3163;
	add.s64 	%rd340, %rd339, %rd9;
	shr.u64 	%rd341, %rd340, 37;
	add.s64 	%rd342, %rd340, %rd341;
	shr.s64 	%rd343, %rd342, 27;
	setp.lt.s64 	%p331, %rd340, 0;
	and.b64  	%rd344, %rd342, -134217728;
	setp.ne.s64 	%p332, %rd344, %rd340;
	and.pred  	%p333, %p331, %p332;
	selp.u64 	%rd345, 1, 0, %p333;
	sub.s64 	%rd346, %rd345, %rd343;
	shl.b64 	%rd347, %rd346, 27;
	add.s64 	%rd348, %rd347, %rd340;
	shl.b64 	%rd349, %rd348, 2;
	add.s64 	%rd350, %rd4, %rd349;
	st.global.u32 	[%rd350], %r3515;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3513, 0;
	mov.u32 	%r3515, %r3513;
$L__BB0_164:                            // %pass12625
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3168, [%rd53];
	ld.shared.u32 	%r3175, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3185, %r3182}, {%r425, %r428}, {%r3168}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3194, %r3191}, {%r425, %r428}, {%r3175}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3178, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3180, %r3178, %r3182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r459, %r3185, %r3180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3187, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3189, %r3187, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r459, %r3194, %r3189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r462, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r459, %r3182, %r3196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3203, %r462, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r459, %r3191, %r3203;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3229, %r3232}, {%r501, %r504}, {%r3183, %r3199}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3236, %r3240}, {%r501, %r504}, {%r3192, %r3206}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3228, %r3229, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r3232, %r3232, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r3236, %r3236, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3240, %r3240, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r1577, %r3239, %r3515;
	// end inline asm
	add.s32 	%r3516, %r3513, 1;
	setp.ne.s32 	%p334, %r3516, 25;
	@%p334 bra 	$L__BB0_166;
// %bb.165:                             // %pass12936
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3248, %r3470, 16;
	or.b32  	%r3249, %r159, %r3248;
	cvt.u64.u32 	%rd351, %r3249;
	add.s64 	%rd352, %rd351, %rd9;
	shr.u64 	%rd353, %rd352, 37;
	add.s64 	%rd354, %rd352, %rd353;
	shr.s64 	%rd355, %rd354, 27;
	setp.lt.s64 	%p335, %rd352, 0;
	and.b64  	%rd356, %rd354, -134217728;
	setp.ne.s64 	%p336, %rd356, %rd352;
	and.pred  	%p337, %p335, %p336;
	selp.u64 	%rd357, 1, 0, %p337;
	sub.s64 	%rd358, %rd357, %rd355;
	shl.b64 	%rd359, %rd358, 27;
	add.s64 	%rd360, %rd359, %rd352;
	shl.b64 	%rd361, %rd360, 2;
	add.s64 	%rd362, %rd4, %rd361;
	st.global.u32 	[%rd362], %r3518;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3516, 0;
	mov.u32 	%r3518, %r3516;
$L__BB0_166:                            // %pass13135
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3254, [%rd55];
	ld.shared.u32 	%r3261, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3271, %r3268}, {%r425, %r428}, {%r3254}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3280, %r3277}, {%r425, %r428}, {%r3261}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3264, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3266, %r3264, %r3268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3269, %r459, %r3271, %r3266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3273, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3275, %r3273, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3278, %r459, %r3280, %r3275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3282, %r462, %r3271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3285, %r459, %r3268, %r3282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3289, %r462, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3292, %r459, %r3277, %r3289;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3315, %r3318}, {%r501, %r504}, {%r3269, %r3285}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3322, %r3326}, {%r501, %r504}, {%r3278, %r3292}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r3315, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r3318, %r3318, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r3322, %r3322, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r3326, %r3326, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r1577, %r3325, %r3518;
	// end inline asm
	add.s32 	%r3519, %r3516, 1;
	setp.ne.s32 	%p338, %r3519, 25;
	@%p338 bra 	$L__BB0_168;
// %bb.167:                             // %pass13446
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3334, %r3470, 16;
	or.b32  	%r3335, %r159, %r3334;
	cvt.u64.u32 	%rd363, %r3335;
	add.s64 	%rd364, %rd363, %rd9;
	shr.u64 	%rd365, %rd364, 37;
	add.s64 	%rd366, %rd364, %rd365;
	shr.s64 	%rd367, %rd366, 27;
	setp.lt.s64 	%p339, %rd364, 0;
	and.b64  	%rd368, %rd366, -134217728;
	setp.ne.s64 	%p340, %rd368, %rd364;
	and.pred  	%p341, %p339, %p340;
	selp.u64 	%rd369, 1, 0, %p341;
	sub.s64 	%rd370, %rd369, %rd367;
	shl.b64 	%rd371, %rd370, 27;
	add.s64 	%rd372, %rd371, %rd364;
	shl.b64 	%rd373, %rd372, 2;
	add.s64 	%rd374, %rd4, %rd373;
	st.global.u32 	[%rd374], %r3521;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3519, 0;
	mov.u32 	%r3521, %r3519;
$L__BB0_168:                            // %pass13645
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3340, [%rd57];
	ld.shared.u32 	%r3347, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3357, %r3354}, {%r425, %r428}, {%r3340}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3366, %r3363}, {%r425, %r428}, {%r3347}, {%r1216, %r1216};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3350, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3352, %r3350, %r3354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3355, %r459, %r3357, %r3352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3359, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r3359, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r459, %r3366, %r3361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3368, %r462, %r3357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r459, %r3354, %r3368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3375, %r462, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r459, %r3363, %r3375;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3401, %r3404}, {%r501, %r504}, {%r3355, %r3371}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3408, %r3412}, {%r501, %r504}, {%r3364, %r3378}, {%r1216, %r1216}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r3401, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r3404, %r3404, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r3408, %r3408, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r3412, %r3412, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r1577, %r3411, %r3521;
	// end inline asm
	add.s32 	%r3469, %r3519, 1;
	setp.ne.s32 	%p342, %r3469, 25;
	@%p342 bra 	$L__BB0_169;
// %bb.235:                             // %pass13956
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3420, %r3470, 16;
	or.b32  	%r3421, %r159, %r3420;
	cvt.u64.u32 	%rd375, %r3421;
	add.s64 	%rd376, %rd375, %rd9;
	shr.u64 	%rd377, %rd376, 37;
	add.s64 	%rd378, %rd376, %rd377;
	shr.s64 	%rd379, %rd378, 27;
	setp.lt.s64 	%p343, %rd376, 0;
	and.b64  	%rd380, %rd378, -134217728;
	setp.ne.s64 	%p344, %rd380, %rd376;
	and.pred  	%p345, %p343, %p344;
	selp.u64 	%rd381, 1, 0, %p345;
	sub.s64 	%rd382, %rd381, %rd379;
	shl.b64 	%rd383, %rd382, 27;
	add.s64 	%rd384, %rd383, %rd376;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3471;
	add.s32 	%r3470, %r3470, 1;
	mov.u32 	%r3469, %r1216;
	mov.u32 	%r3471, %r1216;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L32728
	mov.u32 	%r3422, 0;
	st.global.u32 	[%rd6], %r3422;
	ret;
$L__BB0_218:                            // %post_box_union
	mov.u64 	%rd193, exception2651;
	cvta.global.u64 	%rd194, %rd193;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd194;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6833
	mov.u32 	%r3438, 5;
	st.global.u32 	[%rd6], %r3438;
	mov.u64 	%rd417, exception2603;
	cvta.global.u64 	%rd418, %rd417;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd418;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L6993
	mov.u32 	%r3437, 5;
	st.global.u32 	[%rd6], %r3437;
	mov.u64 	%rd415, exception2603;
	cvta.global.u64 	%rd416, %rd415;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd416;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7153
	mov.u32 	%r3436, 5;
	st.global.u32 	[%rd6], %r3436;
	mov.u64 	%rd413, exception2603;
	cvta.global.u64 	%rd414, %rd413;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd414;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7313
	mov.u32 	%r3435, 5;
	st.global.u32 	[%rd6], %r3435;
	mov.u64 	%rd411, exception2603;
	cvta.global.u64 	%rd412, %rd411;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd412;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7473
	mov.u32 	%r3434, 5;
	st.global.u32 	[%rd6], %r3434;
	mov.u64 	%rd409, exception2603;
	cvta.global.u64 	%rd410, %rd409;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd410;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7633
	mov.u32 	%r3433, 5;
	st.global.u32 	[%rd6], %r3433;
	mov.u64 	%rd407, exception2603;
	cvta.global.u64 	%rd408, %rd407;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd408;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7793
	mov.u32 	%r3432, 5;
	st.global.u32 	[%rd6], %r3432;
	mov.u64 	%rd405, exception2603;
	cvta.global.u64 	%rd406, %rd405;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd406;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7953
	mov.u32 	%r3431, 5;
	st.global.u32 	[%rd6], %r3431;
	mov.u64 	%rd403, exception2603;
	cvta.global.u64 	%rd404, %rd403;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd404;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8113
	mov.u32 	%r3430, 5;
	st.global.u32 	[%rd6], %r3430;
	mov.u64 	%rd401, exception2603;
	cvta.global.u64 	%rd402, %rd401;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd402;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8273
	mov.u32 	%r3429, 5;
	st.global.u32 	[%rd6], %r3429;
	mov.u64 	%rd399, exception2603;
	cvta.global.u64 	%rd400, %rd399;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd400;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8433
	mov.u32 	%r3428, 5;
	st.global.u32 	[%rd6], %r3428;
	mov.u64 	%rd397, exception2603;
	cvta.global.u64 	%rd398, %rd397;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd398;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8593
	mov.u32 	%r3427, 5;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd395, exception2603;
	cvta.global.u64 	%rd396, %rd395;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd396;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8753
	mov.u32 	%r3426, 5;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd393, exception2603;
	cvta.global.u64 	%rd394, %rd393;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd394;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8913
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd391, exception2603;
	cvta.global.u64 	%rd392, %rd391;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd392;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9073
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd389, exception2603;
	cvta.global.u64 	%rd390, %rd389;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd390;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9233
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd387, exception2603;
	cvta.global.u64 	%rd388, %rd387;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd388;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3440, 2;
	st.global.u32 	[%rd6], %r3440;
	mov.u64 	%rd421, exception2603;
	cvta.global.u64 	%rd422, %rd421;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd422;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3439, 3;
	st.global.u32 	[%rd6], %r3439;
	mov.u64 	%rd419, exception2603;
	cvta.global.u64 	%rd420, %rd419;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd420;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r5, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r514, [retval0+0];
	} // callseq 47
	mov.u32 	%r516, 4;
	st.global.u32 	[%rd6], %r516;
	mov.u64 	%rd73, exception2603;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r297;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
