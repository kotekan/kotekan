// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4036[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception14048[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<367>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3904>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<530>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r428, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r437, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r437, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r429, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r438, %r2, %r3;
	mad.lo.s32 	%r439, %r4, 768, %r438;
	mul.wide.u32 	%rd49, %r439, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r440, 1;
	st.global.u32 	[%rd6], %r440;
	setp.gt.u32 	%p4, %r429, 511;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r430, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r430, %r429;
	setp.gt.s32 	%p6, %r430, 1023;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r431, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r430, %r429;
	mad.lo.s32 	%r441, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r442, %r441, %r441, 4;
	setp.gt.u32 	%p8, %r442, 89478484;
	setp.gt.u32 	%p9, %r431, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r432, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r432, %r431;
	setp.lt.s32 	%p12, %r432, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r443, %r432, %r431;
	mul.hi.s32 	%r444, %r5, 1431655766;
	shr.u32 	%r445, %r444, 31;
	add.s32 	%r446, %r444, %r445;
	setp.eq.s32 	%p14, %r443, %r446;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r433, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r433, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r434, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r434, %r433;
	setp.gt.s32 	%p17, %r434, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r435, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r434, %r433;
	and.b32  	%r447, %r6, 63;
	setp.ne.s32 	%p19, %r447, 0;
	setp.lt.s32 	%p20, %r435, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r436, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r436, %r435;
	setp.gt.s32 	%p23, %r436, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r448, %r436, %r435;
	and.b32  	%r449, %r448, 63;
	setp.eq.s32 	%p25, %r449, 0;
	setp.eq.s32 	%p26, %r448, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_13;
$L__BB0_200:                            // %pass162
	and.b32  	%r267, %r3, 3;
	shr.u32 	%r268, %r3, 2;
	mul.lo.s32 	%r450, %r267, %r268;
	and.b32  	%r451, %r450, 7;
	cvt.rn.f32.s32 	%f201, %r451;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p366, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_212;
// %bb.201:
	@%p366 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_202;
$L__BB0_208:
	mov.b32 	%r270, %f785;
	and.b32  	%r452, %r270, 8388607;
	or.b32  	%r3875, %r452, 1065353216;
	mov.b32 	%f780, %r3875;
	add.s32 	%r453, %r270, -1073741824;
	and.b32  	%r3876, %r453, -8388608;
	setp.eq.s32 	%p35, %r3876, 0;
	@%p35 bra 	$L__BB0_211;
// %bb.209:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_210:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3876, 192937984;
	add.s32 	%r455, %r3875, %r454;
	mov.b32 	%f213, %r455;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3876, %r3876, %r454;
	mov.b32 	%r3875, %f780;
	setp.ne.s32 	%p36, %r3876, 0;
	setp.ne.s32 	%p37, %r3875, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_210;
$L__BB0_211:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r270, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_212;
$L__BB0_202:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r269, %f172;
	setp.lt.u32 	%p30, %r269, 1073741824;
	@%p30 bra 	$L__BB0_207;
// %bb.203:
	setp.lt.u32 	%p31, %r269, -2147483647;
	@%p31 bra 	$L__BB0_205;
// %bb.204:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_207;
$L__BB0_205:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_207;
// %bb.206:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_207:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_212:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r456, %f169;
	and.b32  	%r277, %r456, -2147483648;
	@%p40 bra 	$L__BB0_214;
// %bb.213:
	mov.b32 	%r457, %f781;
	or.b32  	%r458, %r277, %r457;
	mov.b32 	%f781, %r458;
$L__BB0_214:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r280, %r3, 1;
	and.b32  	%r281, %r280, 6;
	or.b32  	%r282, %r281, 1;
	setp.eq.s32 	%p48, %r281, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3772, %r281, %r268;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3772;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r474, %r8, 8388607;
	or.b32  	%r3776, %r474, 1065353216;
	mov.b32 	%f732, %r3776;
	add.s32 	%r475, %r8, -1073741824;
	and.b32  	%r3777, %r475, -8388608;
	setp.eq.s32 	%p56, %r3777, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1017.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1017
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r476, %r3777, 192937984;
	add.s32 	%r477, %r3776, %r476;
	mov.b32 	%f267, %r477;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3777, %r3777, %r476;
	mov.b32 	%r3776, %f732;
	setp.ne.s32 	%p57, %r3777, 0;
	setp.ne.s32 	%p58, %r3776, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1019
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i996
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1000
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1003
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1022
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r478, %f1;
	and.b32  	%r479, %r478, -2147483648;
	mov.b32 	%r480, %f733;
	or.b32  	%r481, %r479, %r480;
	mov.b32 	%f733, %r481;
$L__BB0_28:                             // %__nv_fmodf.exit1023
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r482, %f277;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f278, %r484;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r485, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p64, %r486, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p65, %r487, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p66, %r489, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r282, 5;
	mul.lo.s32 	%r3773, %r282, %r268;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r491, %r3773, -1431655765;
	shr.u32 	%r492, %r491, 5;
	mul.lo.s32 	%r493, %r492, 48;
	sub.s32 	%r494, %r3773, %r493;
	cvt.rn.f32.s32 	%f308, %r494;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r495, %r16, 8388607;
	or.b32  	%r3778, %r495, 1065353216;
	mov.b32 	%f738, %r3778;
	add.s32 	%r496, %r16, -1073741824;
	and.b32  	%r3779, %r496, -8388608;
	setp.eq.s32 	%p77, %r3779, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1048.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1048
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r497, %r3779, 192937984;
	add.s32 	%r498, %r3778, %r497;
	mov.b32 	%f320, %r498;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3779, %r3779, %r497;
	mov.b32 	%r3778, %f738;
	setp.ne.s32 	%p78, %r3779, 0;
	setp.ne.s32 	%p79, %r3778, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1050
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1027
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1031
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1034
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1053
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r499, %f22;
	and.b32  	%r500, %r499, -2147483648;
	mov.b32 	%r501, %f739;
	or.b32  	%r502, %r500, %r501;
	mov.b32 	%f739, %r502;
$L__BB0_44:                             // %__nv_fmodf.exit1054
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r503, %f330;
	and.b32  	%r504, %r503, -2147483648;
	or.b32  	%r505, %r504, 1056964608;
	mov.b32 	%f331, %r505;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r506, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r507, %r506, 1;
	setp.eq.b32 	%p85, %r507, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r508, %r506, 2;
	setp.eq.s32 	%p86, %r508, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r509, %r506, 1;
	and.b32  	%r510, %r509, 2;
	setp.eq.s32 	%p87, %r510, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r3, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3772;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r518, %r26, 8388607;
	or.b32  	%r3780, %r518, 1065353216;
	mov.b32 	%f744, %r3780;
	add.s32 	%r519, %r26, -1073741824;
	and.b32  	%r3781, %r519, -8388608;
	setp.eq.s32 	%p99, %r3781, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1079.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1079
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r520, %r3781, 192937984;
	add.s32 	%r521, %r3780, %r520;
	mov.b32 	%f373, %r521;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3781, %r3781, %r520;
	mov.b32 	%r3780, %f744;
	setp.ne.s32 	%p100, %r3781, 0;
	setp.ne.s32 	%p101, %r3780, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1081
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1058
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1062
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1065
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1084
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r522, %f43;
	and.b32  	%r523, %r522, -2147483648;
	mov.b32 	%r524, %f745;
	or.b32  	%r525, %r523, %r524;
	mov.b32 	%f745, %r525;
$L__BB0_60:                             // %__nv_fmodf.exit1085
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r526, %f383;
	and.b32  	%r527, %r526, -2147483648;
	or.b32  	%r528, %r527, 1056964608;
	mov.b32 	%f384, %r528;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r529, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r530, %r529, 1;
	setp.eq.b32 	%p107, %r530, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r531, %r529, 2;
	setp.eq.s32 	%p108, %r531, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r532, %r529, 1;
	and.b32  	%r533, %r532, 2;
	setp.eq.s32 	%p109, %r533, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r535, %r3773, -1431655765;
	shr.u32 	%r536, %r535, 2;
	mul.lo.s32 	%r537, %r536, 6;
	sub.s32 	%r538, %r3773, %r537;
	cvt.rn.f32.s32 	%f414, %r538;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r539, %r34, 8388607;
	or.b32  	%r3782, %r539, 1065353216;
	mov.b32 	%f750, %r3782;
	add.s32 	%r540, %r34, -1073741824;
	and.b32  	%r3783, %r540, -8388608;
	setp.eq.s32 	%p121, %r3783, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1110.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1110
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r541, %r3783, 192937984;
	add.s32 	%r542, %r3782, %r541;
	mov.b32 	%f426, %r542;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3783, %r3783, %r541;
	mov.b32 	%r3782, %f750;
	setp.ne.s32 	%p122, %r3783, 0;
	setp.ne.s32 	%p123, %r3782, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1112
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1089
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1093
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1096
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1115
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r543, %f64;
	and.b32  	%r544, %r543, -2147483648;
	mov.b32 	%r545, %f751;
	or.b32  	%r546, %r544, %r545;
	mov.b32 	%f751, %r546;
$L__BB0_76:                             // %__nv_fmodf.exit1116
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r547, %f436;
	and.b32  	%r548, %r547, -2147483648;
	or.b32  	%r549, %r548, 1056964608;
	mov.b32 	%f437, %r549;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r550, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r551, %r550, 1;
	setp.eq.b32 	%p129, %r551, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r552, %r550, 2;
	setp.eq.s32 	%p130, %r552, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r553, %r550, 1;
	and.b32  	%r554, %r553, 2;
	setp.eq.s32 	%p131, %r554, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_222;
// %bb.78:
	@%p366 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_79;
$L__BB0_218:
	mov.b32 	%r284, %f785;
	and.b32  	%r567, %r284, 8388607;
	or.b32  	%r3877, %r567, 1065353216;
	mov.b32 	%f784, %r3877;
	add.s32 	%r568, %r284, -1073741824;
	and.b32  	%r3878, %r568, -8388608;
	setp.eq.s32 	%p141, %r3878, 0;
	@%p141 bra 	$L__BB0_221;
// %bb.219:                             // %__nv_fmaf_rn.exit4.i.i.i1141.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_220:                            // %__nv_fmaf_rn.exit4.i.i.i1141
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r569, %r3878, 192937984;
	add.s32 	%r570, %r3877, %r569;
	mov.b32 	%f476, %r570;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3878, %r3878, %r569;
	mov.b32 	%r3877, %f784;
	setp.ne.s32 	%p142, %r3878, 0;
	setp.ne.s32 	%p143, %r3877, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_220;
$L__BB0_221:                            // %__internal_fmodf_slowpath_mod.exit.i.i1143
	setp.gt.u32 	%p145, %r284, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_222;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r283, %f187;
	setp.lt.u32 	%p136, %r283, 1073741824;
	@%p136 bra 	$L__BB0_217;
// %bb.80:
	setp.lt.u32 	%p137, %r283, -2147483647;
	@%p137 bra 	$L__BB0_215;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_217;
$L__BB0_215:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_217;
// %bb.216:                             // %__nv_fmaf_rn.exit.i.i.i1124
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_217:                            // %__internal_fmodf_fastpath_quot.exit.i.i1127
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_222:                            // %__internal_fmodf_kernel.exit.i1146
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_224;
// %bb.223:
	mov.b32 	%r571, %f785;
	or.b32  	%r572, %r277, %r571;
	mov.b32 	%f785, %r572;
$L__BB0_224:                            // %__nv_fmodf.exit1147
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3772;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r588, %r46, 8388607;
	or.b32  	%r3784, %r588, 1065353216;
	mov.b32 	%f756, %r3784;
	add.s32 	%r589, %r46, -1073741824;
	and.b32  	%r3785, %r589, -8388608;
	setp.eq.s32 	%p162, %r3785, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1172.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1172
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r590, %r3785, 192937984;
	add.s32 	%r591, %r3784, %r590;
	mov.b32 	%f530, %r591;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3785, %r3785, %r590;
	mov.b32 	%r3784, %f756;
	setp.ne.s32 	%p163, %r3785, 0;
	setp.ne.s32 	%p164, %r3784, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1174
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1151
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1155
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1158
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1177
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r592, %f85;
	and.b32  	%r593, %r592, -2147483648;
	mov.b32 	%r594, %f757;
	or.b32  	%r595, %r593, %r594;
	mov.b32 	%f757, %r595;
$L__BB0_96:                             // %__nv_fmodf.exit1178
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r596, %f540;
	and.b32  	%r597, %r596, -2147483648;
	or.b32  	%r598, %r597, 1056964608;
	mov.b32 	%f541, %r598;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r599, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r600, %r599, 1;
	setp.eq.b32 	%p170, %r600, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r601, %r599, 2;
	setp.eq.s32 	%p171, %r601, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r602, %r599, 1;
	and.b32  	%r603, %r602, 2;
	setp.eq.s32 	%p172, %r603, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r605, %r3773, -1431655765;
	shr.u32 	%r606, %r605, 5;
	mul.lo.s32 	%r607, %r606, 48;
	sub.s32 	%r608, %r3773, %r607;
	cvt.rn.f32.s32 	%f571, %r608;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r609, %r54, 8388607;
	or.b32  	%r3786, %r609, 1065353216;
	mov.b32 	%f762, %r3786;
	add.s32 	%r610, %r54, -1073741824;
	and.b32  	%r3787, %r610, -8388608;
	setp.eq.s32 	%p183, %r3787, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1203.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1203
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r611, %r3787, 192937984;
	add.s32 	%r612, %r3786, %r611;
	mov.b32 	%f583, %r612;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3787, %r3787, %r611;
	mov.b32 	%r3786, %f762;
	setp.ne.s32 	%p184, %r3787, 0;
	setp.ne.s32 	%p185, %r3786, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1205
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1182
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1186
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1189
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1208
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r613, %f106;
	and.b32  	%r614, %r613, -2147483648;
	mov.b32 	%r615, %f763;
	or.b32  	%r616, %r614, %r615;
	mov.b32 	%f763, %r616;
$L__BB0_112:                            // %__nv_fmodf.exit1209
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r617, %f593;
	and.b32  	%r618, %r617, -2147483648;
	or.b32  	%r619, %r618, 1056964608;
	mov.b32 	%f594, %r619;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r620, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r621, %r620, 1;
	setp.eq.b32 	%p191, %r621, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r622, %r620, 2;
	setp.eq.s32 	%p192, %r622, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r623, %r620, 1;
	and.b32  	%r624, %r623, 2;
	setp.eq.s32 	%p193, %r624, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3772;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r632, %r64, 8388607;
	or.b32  	%r3788, %r632, 1065353216;
	mov.b32 	%f768, %r3788;
	add.s32 	%r633, %r64, -1073741824;
	and.b32  	%r3789, %r633, -8388608;
	setp.eq.s32 	%p203, %r3789, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1234.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1234
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r634, %r3789, 192937984;
	add.s32 	%r635, %r3788, %r634;
	mov.b32 	%f636, %r635;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3789, %r3789, %r634;
	mov.b32 	%r3788, %f768;
	setp.ne.s32 	%p204, %r3789, 0;
	setp.ne.s32 	%p205, %r3788, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1236
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1213
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1220
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1239
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r636, %f127;
	and.b32  	%r637, %r636, -2147483648;
	mov.b32 	%r638, %f769;
	or.b32  	%r639, %r637, %r638;
	mov.b32 	%f769, %r639;
$L__BB0_128:                            // %__nv_fmodf.exit1240
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r640, %f646;
	and.b32  	%r641, %r640, -2147483648;
	or.b32  	%r642, %r641, 1056964608;
	mov.b32 	%f647, %r642;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r643, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r644, %r643, 1;
	setp.eq.b32 	%p211, %r644, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r645, %r643, 2;
	setp.eq.s32 	%p212, %r645, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r646, %r643, 1;
	and.b32  	%r647, %r646, 2;
	setp.eq.s32 	%p213, %r647, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r649, %r3773, -1431655765;
	shr.u32 	%r650, %r649, 2;
	mul.lo.s32 	%r651, %r650, 6;
	sub.s32 	%r652, %r3773, %r651;
	cvt.rn.f32.s32 	%f677, %r652;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r653, %r72, 8388607;
	or.b32  	%r3790, %r653, 1065353216;
	mov.b32 	%f774, %r3790;
	add.s32 	%r654, %r72, -1073741824;
	and.b32  	%r3791, %r654, -8388608;
	setp.eq.s32 	%p223, %r3791, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1265.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1265
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r655, %r3791, 192937984;
	add.s32 	%r656, %r3790, %r655;
	mov.b32 	%f689, %r656;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3791, %r3791, %r655;
	mov.b32 	%r3790, %f774;
	setp.ne.s32 	%p224, %r3791, 0;
	setp.ne.s32 	%p225, %r3790, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1267
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1244
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1248
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1251
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1270
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r657, %f148;
	and.b32  	%r658, %r657, -2147483648;
	mov.b32 	%r659, %f775;
	or.b32  	%r660, %r658, %r659;
	mov.b32 	%f775, %r660;
$L__BB0_144:                            // %__nv_fmodf.exit1271
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r661, %f699;
	and.b32  	%r662, %r661, -2147483648;
	or.b32  	%r663, %r662, 1056964608;
	mov.b32 	%f700, %r663;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r664, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r665, %r664, 1;
	setp.eq.b32 	%p231, %r665, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r666, %r664, 2;
	setp.eq.s32 	%p232, %r666, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r667, %r664, 1;
	and.b32  	%r668, %r667, 2;
	setp.eq.s32 	%p233, %r668, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r293, 999999999;
	cvt.u16.u32 	%rs247, %r3;
	@%p91 bra 	$L__BB0_226;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r682, %rs34;
	and.b32  	%r683, %r682, 255;
	mad.lo.s32 	%r684, %r683, 24, %r1;
	cvt.u16.u32 	%rs35, %r684;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r685, %rs39;
	mul.wide.u32 	%rd50, %r685, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r686, [%rd51];
	shl.b32 	%r687, %r686, 16;
	cvt.s32.s16 	%r83, %r686;
	shr.s32 	%r84, %r686, 16;
	or.b32  	%r688, %r687, 65535;
	setp.lt.u32 	%p237, %r688, 1638399;
	setp.lt.u32 	%p238, %r686, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_147;
$L__BB0_225:                            // %L1237
	mul.lo.s32 	%r692, %r84, 801;
	mad.lo.s32 	%r293, %r83, 33, %r692;
$L__BB0_226:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r465, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r466, %r465, -2147483648;
	mov.b32 	%r579, %f487;
	or.b32  	%r467, %r466, 1056964608;
	and.b32  	%r580, %r579, -2147483648;
	mov.b32 	%f225, %r467;
	or.b32  	%r581, %r580, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r581;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r468, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r469, %r468, 1;
	cvt.rzi.s32.f32 	%r582, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r469, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r583, %r582, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r470, %r468, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r583, 1;
	setp.eq.s32 	%p44, %r470, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r584, %r582, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r584, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r585, %r582, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r472, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r586, %r585, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r586, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r461, %f254;
	mov.b32 	%r464, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r460, %r464, -2147483648;
	mov.b32 	%r556, %f62;
	mov.b32 	%r557, %f83;
	mov.b32 	%r562, %f63;
	mov.b32 	%r563, %f84;
	mov.b32 	%r575, %f517;
	mov.b32 	%r578, %f514;
	mov.b32 	%r512, %f20;
	mov.b32 	%r513, %f41;
	mov.b32 	%r515, %f21;
	mov.b32 	%r516, %f42;
	xor.b32  	%r559, %r562, -2147483648;
	xor.b32  	%r560, %r563, -2147483648;
	xor.b32  	%r574, %r578, -2147483648;
	mov.b32 	%r626, %f104;
	mov.b32 	%r627, %f125;
	mov.b32 	%r629, %f105;
	mov.b32 	%r630, %f126;
	mov.b32 	%r670, %f146;
	mov.b32 	%r671, %f167;
	mov.b32 	%r676, %f147;
	xor.b32  	%r673, %r676, -2147483648;
	mov.b32 	%r677, %f168;
	xor.b32  	%r674, %r677, -2147483648;
	and.b32  	%r693, %r3, 24;
	setp.ne.s32 	%p240, %r693, 24;
	cvt.u16.u32 	%rs248, %r268;
	mul.lo.s32 	%r3792, %r4, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.227:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r705, %rs50;
	and.b32  	%r3793, %r705, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r694, %r267, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r695, %rs44;
	and.b32  	%r3793, %r695, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r696, %rs45, 24;
	or.b32  	%r697, %r3792, %r1;
	add.s32 	%r698, %r697, %r694;
	add.s32 	%r699, %r698, %r696;
	mul.wide.u32 	%rd57, %r699, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r88, [%rd58];
	or.b32  	%r700, %r1, 576;
	add.s32 	%r701, %r700, %r3792;
	add.s32 	%r702, %r701, %r694;
	add.s32 	%r703, %r702, %r696;
	mul.wide.u32 	%rd59, %r703, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r89, [%rd60];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r461;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r511, %r513, %r512;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r514, %r516, %r515;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r557, %r556;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r558, %r560, %r559;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r561, %r563, %r562;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r564, %r557, %r556;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r573, %r575, %r574;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r576, %r578, %r575;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r625, %r627, %r626;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r628, %r630, %r629;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r669, %r671, %r670;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r672, %r674, %r673;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r675, %r677, %r676;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r678, %r671, %r670;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r707, %r429, 16;
	shl.b32 	%r708, %r433, 8;
	add.s32 	%r90, %r708, %r707;
	shl.b32 	%r709, %r4, 8;
	shl.b32 	%r710, %r3, 2;
	and.b32  	%r711, %r710, 60;
	shl.b32 	%r712, %r3, 3;
	and.b32  	%r713, %r712, 128;
	or.b32  	%r714, %r711, %r709;
	or.b32  	%r91, %r714, %r713;
	or.b32  	%r715, %r710, %r709;
	or.b32  	%r716, %r715, %r713;
	or.b32  	%r92, %r716, 64;
	add.s32 	%r93, %r1, 24;
	shr.u32 	%r717, %r3, 4;
	and.b32  	%r718, %r280, 30;
	or.b32  	%r719, %r718, %r717;
	mul.lo.s32 	%r94, %r719, 257;
	or.b32  	%r720, %r280, %r717;
	or.b32  	%r721, %r720, 32;
	mul.lo.s32 	%r95, %r721, 257;
	and.b32  	%r722, %r2, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r723, %rs56;
	and.b32  	%r96, %r723, 255;
	shr.u32 	%r724, %r1, 3;
	mad.lo.s32 	%r97, %r724, 257, %r722;
	shr.u32 	%r725, %r93, 3;
	mad.lo.s32 	%r98, %r725, 257, %r722;
	add.s32 	%r726, %r1, 48;
	shr.u32 	%r727, %r726, 3;
	mad.lo.s32 	%r99, %r727, 257, %r722;
	add.s32 	%r728, %r1, 72;
	shr.u32 	%r729, %r728, 3;
	mad.lo.s32 	%r100, %r729, 257, %r722;
	or.b32  	%r730, %r724, 12;
	mad.lo.s32 	%r101, %r730, 257, %r722;
	add.s32 	%r731, %r1, 120;
	shr.u32 	%r732, %r731, 3;
	mad.lo.s32 	%r102, %r732, 257, %r722;
	add.s32 	%r733, %r1, 144;
	shr.u32 	%r734, %r733, 3;
	mad.lo.s32 	%r103, %r734, 257, %r722;
	add.s32 	%r735, %r1, 168;
	shr.u32 	%r736, %r735, 3;
	mad.lo.s32 	%r104, %r736, 257, %r722;
	or.b32  	%r737, %r724, 24;
	mad.lo.s32 	%r105, %r737, 257, %r722;
	add.s32 	%r738, %r1, 216;
	shr.u32 	%r739, %r738, 3;
	mad.lo.s32 	%r106, %r739, 257, %r722;
	add.s32 	%r740, %r1, 240;
	shr.u32 	%r741, %r740, 3;
	mad.lo.s32 	%r107, %r741, 257, %r722;
	add.s32 	%r742, %r1, 264;
	shr.u32 	%r743, %r742, 3;
	mad.lo.s32 	%r108, %r743, 257, %r722;
	or.b32  	%r744, %r724, 36;
	mad.lo.s32 	%r109, %r744, 257, %r722;
	add.s32 	%r745, %r1, 312;
	shr.u32 	%r746, %r745, 3;
	mad.lo.s32 	%r110, %r746, 257, %r722;
	add.s32 	%r747, %r1, 336;
	shr.u32 	%r748, %r747, 3;
	mad.lo.s32 	%r111, %r748, 257, %r722;
	add.s32 	%r749, %r1, 360;
	shr.u32 	%r750, %r749, 3;
	mad.lo.s32 	%r112, %r750, 257, %r722;
	or.b32  	%r751, %r724, 48;
	mad.lo.s32 	%r113, %r751, 257, %r722;
	add.s32 	%r752, %r1, 408;
	shr.u32 	%r753, %r752, 3;
	mad.lo.s32 	%r114, %r753, 257, %r722;
	add.s32 	%r754, %r1, 432;
	shr.u32 	%r755, %r754, 3;
	mad.lo.s32 	%r115, %r755, 257, %r722;
	add.s32 	%r756, %r1, 456;
	shr.u32 	%r757, %r756, 3;
	mad.lo.s32 	%r116, %r757, 257, %r722;
	or.b32  	%r758, %r724, 60;
	mad.lo.s32 	%r117, %r758, 257, %r722;
	add.s32 	%r759, %r1, 504;
	bfe.u32 	%r760, %r759, 3, 6;
	mad.lo.s32 	%r118, %r760, 257, %r722;
	mul.lo.s32 	%r761, %r1, 33;
	mad.lo.s32 	%r762, %r267, 4806, %r761;
	mad.lo.s32 	%r763, %r3793, 801, %r762;
	bfe.s32 	%r764, %r3, 2, 1;
	and.b32  	%r765, %r3, 4;
	setp.eq.s32 	%p241, %r765, 0;
	and.b32  	%r766, %r764, 1028;
	bfe.s32 	%r767, %r3, 3, 1;
	and.b32  	%r768, %r767, 514;
	bfe.s32 	%r769, %r3, 1, 1;
	and.b32  	%r770, %r769, 2056;
	and.b32  	%r771, %r3, 1;
	neg.s32 	%r772, %r771;
	and.b32  	%r773, %r772, 4112;
	mul.lo.s32 	%r774, %r717, 257;
	add.s32 	%r775, %r774, %r1;
	add.s32 	%r776, %r775, %r768;
	add.s32 	%r777, %r776, %r766;
	add.s32 	%r778, %r777, %r770;
	add.s32 	%r779, %r778, %r773;
	mul.wide.u32 	%rd61, %r779, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	selp.b32 	%r780, 8256, 9284, %p241;
	add.s32 	%r781, %r776, %r780;
	add.s32 	%r782, %r781, %r770;
	add.s32 	%r783, %r782, %r773;
	mul.wide.u32 	%rd63, %r783, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r784, %r1, 32;
	add.s32 	%r785, %r784, %r774;
	add.s32 	%r786, %r785, %r768;
	add.s32 	%r787, %r786, %r766;
	add.s32 	%r788, %r787, %r770;
	add.s32 	%r789, %r788, %r773;
	mul.wide.u32 	%rd64, %r789, 4;
	add.s64 	%rd9, %rd62, %rd64;
	add.s32 	%r790, %r786, %r780;
	add.s32 	%r791, %r790, %r770;
	add.s32 	%r792, %r791, %r773;
	mul.wide.u32 	%rd65, %r792, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r793, %r1, 3, 1;
	and.b32  	%r794, %r1, 8;
	setp.eq.s32 	%p242, %r794, 0;
	and.b32  	%r795, %r793, 1028;
	mul.lo.s32 	%r796, %r267, 6;
	and.b32  	%r797, %r1, 1;
	neg.s32 	%r798, %r797;
	and.b32  	%r799, %r798, 8256;
	shr.u32 	%r800, %r1, 4;
	mul.lo.s32 	%r801, %r800, 514;
	bfe.s32 	%r802, %r1, 2, 1;
	and.b32  	%r803, %r802, 2056;
	bfe.s32 	%r804, %r1, 1, 1;
	and.b32  	%r805, %r804, 4112;
	add.s32 	%r806, %r801, %r796;
	add.s32 	%r807, %r806, %r795;
	add.s32 	%r808, %r807, %r799;
	add.s32 	%r809, %r808, %r803;
	add.s32 	%r810, %r809, %r805;
	add.s32 	%r811, %r810, %r3793;
	mul.wide.u32 	%rd66, %r811, 4;
	add.s64 	%rd11, %rd62, %rd66;
	selp.b32 	%r812, 1028, 0, %p242;
	bfe.s32 	%r813, %r93, 4, 1;
	and.b32  	%r814, %r813, 514;
	shr.u32 	%r815, %r93, 5;
	mul.lo.s32 	%r816, %r815, 257;
	add.s32 	%r817, %r812, %r796;
	or.b32  	%r818, %r817, %r799;
	add.s32 	%r819, %r818, %r803;
	add.s32 	%r820, %r819, %r805;
	add.s32 	%r821, %r820, %r816;
	add.s32 	%r822, %r821, %r814;
	add.s32 	%r823, %r822, %r3793;
	mul.wide.u32 	%rd67, %r823, 4;
	add.s64 	%rd12, %rd62, %rd67;
	or.b32  	%r824, %r796, 32;
	add.s32 	%r825, %r824, %r801;
	add.s32 	%r826, %r825, %r795;
	add.s32 	%r827, %r826, %r799;
	add.s32 	%r828, %r827, %r803;
	add.s32 	%r829, %r828, %r805;
	add.s32 	%r830, %r829, %r3793;
	mul.wide.u32 	%rd68, %r830, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r831, %r824, %r812;
	add.s32 	%r832, %r831, %r799;
	add.s32 	%r833, %r832, %r803;
	add.s32 	%r834, %r833, %r805;
	add.s32 	%r835, %r834, %r816;
	add.s32 	%r836, %r835, %r814;
	add.s32 	%r837, %r836, %r3793;
	mul.wide.u32 	%rd69, %r837, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r838, %r431, 589824;
	mad.lo.s32 	%r839, %r435, 1152, %r838;
	mad.lo.s32 	%r840, %r1, 24, %r3792;
	add.s32 	%r119, %r840, %r96;
	cvt.s64.s32 	%rd15, %r839;
	cvt.u16.u32 	%rs57, %r93;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r841, %rs62;
	and.b32  	%r842, %r841, 255;
	or.b32  	%r843, %r3792, %r96;
	mad.lo.s32 	%r120, %r842, 24, %r843;
	mul.wide.u32 	%rd70, %r763, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r844, %r779, 64;
	mul.wide.u32 	%rd71, %r844, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r845, %r783, 64;
	mul.wide.u32 	%rd72, %r845, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r846, %r789, 64;
	mul.wide.u32 	%rd73, %r846, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r847, %r792, 64;
	mul.wide.u32 	%rd74, %r847, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r848, %r779, 128;
	mul.wide.u32 	%rd75, %r848, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r849, %r783, 128;
	mul.wide.u32 	%rd76, %r849, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r850, %r789, 128;
	mul.wide.u32 	%rd77, %r850, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r851, %r792, 128;
	mul.wide.u32 	%rd78, %r851, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r852, %r779, 192;
	mul.wide.u32 	%rd79, %r852, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r853, %r783, 192;
	mul.wide.u32 	%rd80, %r853, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r854, %r789, 192;
	mul.wide.u32 	%rd81, %r854, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r855, %r792, 192;
	mul.wide.u32 	%rd82, %r855, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r856, %r811, 64;
	mul.wide.u32 	%rd83, %r856, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r857, %r823, 64;
	mul.wide.u32 	%rd84, %r857, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r858, %r830, 64;
	mul.wide.u32 	%rd85, %r858, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r859, %r837, 64;
	mul.wide.u32 	%rd86, %r859, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r860, %r811, 128;
	mul.wide.u32 	%rd87, %r860, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r861, %r823, 128;
	mul.wide.u32 	%rd88, %r861, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r862, %r830, 128;
	mul.wide.u32 	%rd89, %r862, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r863, %r837, 128;
	mul.wide.u32 	%rd90, %r863, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r864, %r811, 192;
	mul.wide.u32 	%rd91, %r864, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r865, %r823, 192;
	mul.wide.u32 	%rd92, %r865, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r866, %r830, 192;
	mul.wide.u32 	%rd93, %r866, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r867, %r837, 192;
	mul.wide.u32 	%rd94, %r867, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p244, %r3, 16;
	setp.gt.u32 	%p273, %r1, 7;
	setp.lt.u32 	%p277, %r3, 24;
	mov.u32 	%r3826, %r121;
	mov.u32 	%r3827, %r121;
	mov.u32 	%r3828, %r121;
	mov.u32 	%r3829, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_198:                            // %L43605
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r266, %r121, 48;
	setp.ne.s32 	%p365, %r121, 432;
	mov.u32 	%r121, %r266;
	@%p365 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_199;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_188 Depth 2
	add.s32 	%r868, %r121, %r429;
	setp.lt.s32 	%p243, %r868, %r430;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_199;
$L__BB0_151:                            // %oksrem676
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1061, %r121, -1431655765;
	shr.u32 	%r1062, %r1061, 5;
	mul.lo.s32 	%r300, %r1062, 48;
	add.s32 	%r1063, %r300, %r1;
	cvt.u16.u32 	%rs63, %r1063;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 7;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -512;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r1064, %rs68;
	shl.b32 	%r1065, %r1064, 16;
	or.b32  	%r1066, %r91, %r1065;
	add.s32 	%r1067, %r90, %r1066;
	shr.s32 	%r1068, %r1067, 31;
	shr.u32 	%r1069, %r1068, 7;
	add.s32 	%r1070, %r1067, %r1069;
	shr.s32 	%r1071, %r1070, 25;
	setp.lt.s32 	%p245, %r1067, 0;
	and.b32  	%r1072, %r1070, -33554432;
	setp.ne.s32 	%p246, %r1072, %r1067;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r1073, 1, 0, %p247;
	sub.s32 	%r1074, %r1073, %r1071;
	shl.b32 	%r1075, %r1074, 25;
	add.s32 	%r1076, %r1075, %r1067;
	mul.wide.s32 	%rd95, %r1076, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1077, %r1078, %r1079, %r1080}, [%rd96];
	or.b32  	%r1081, %r92, %r1065;
	add.s32 	%r1082, %r90, %r1081;
	shr.s32 	%r1083, %r1082, 31;
	shr.u32 	%r1084, %r1083, 7;
	add.s32 	%r1085, %r1082, %r1084;
	shr.u32 	%r1086, %r1085, 25;
	shr.u32 	%r1087, %r1082, 31;
	sub.s32 	%r1088, %r1087, %r1086;
	shl.b32 	%r1089, %r1088, 25;
	add.s32 	%r1090, %r1089, %r1082;
	mul.wide.s32 	%rd97, %r1090, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1091, %r1092, %r1093, %r1094}, [%rd98];
	add.s32 	%r1095, %r93, %r300;
	cvt.u16.u32 	%rs69, %r1095;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 7;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -512;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.u32.u16 	%r1096, %rs74;
	shl.b32 	%r1097, %r1096, 16;
	or.b32  	%r1098, %r91, %r1097;
	add.s32 	%r1099, %r90, %r1098;
	shr.s32 	%r1100, %r1099, 31;
	shr.u32 	%r1101, %r1100, 7;
	add.s32 	%r1102, %r1099, %r1101;
	shr.s32 	%r1103, %r1102, 25;
	setp.lt.s32 	%p248, %r1099, 0;
	and.b32  	%r1104, %r1102, -33554432;
	setp.ne.s32 	%p249, %r1104, %r1099;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r1105, 1, 0, %p250;
	sub.s32 	%r1106, %r1105, %r1103;
	shl.b32 	%r1107, %r1106, 25;
	add.s32 	%r1108, %r1107, %r1099;
	mul.wide.s32 	%rd99, %r1108, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1109, %r1110, %r1111, %r1112}, [%rd100];
	or.b32  	%r1113, %r92, %r1097;
	add.s32 	%r1114, %r90, %r1113;
	shr.s32 	%r1115, %r1114, 31;
	shr.u32 	%r1116, %r1115, 7;
	add.s32 	%r1117, %r1114, %r1116;
	shr.u32 	%r1118, %r1117, 25;
	shr.u32 	%r1119, %r1114, 31;
	sub.s32 	%r1120, %r1119, %r1118;
	shl.b32 	%r1121, %r1120, 25;
	add.s32 	%r1122, %r1121, %r1114;
	mul.wide.s32 	%rd101, %r1122, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1123, %r1124, %r1125, %r1126}, [%rd102];
	selp.b32 	%r1127, %r1079, %r1077, %p244;
	shfl.sync.bfly.b32	%r1128, %r1127, 16, 31, -1;
	selp.b32 	%r871, %r1077, %r1128, %p244;
	selp.b32 	%r876, %r1128, %r1079, %p244;
	selp.b32 	%r1129, %r1080, %r1078, %p244;
	shfl.sync.bfly.b32	%r1130, %r1129, 16, 31, -1;
	selp.b32 	%r879, %r1078, %r1130, %p244;
	selp.b32 	%r884, %r1130, %r1080, %p244;
	selp.b32 	%r1131, %r1093, %r1091, %p244;
	shfl.sync.bfly.b32	%r1132, %r1131, 16, 31, -1;
	selp.b32 	%r887, %r1091, %r1132, %p244;
	selp.b32 	%r892, %r1132, %r1093, %p244;
	selp.b32 	%r1133, %r1094, %r1092, %p244;
	shfl.sync.bfly.b32	%r1134, %r1133, 16, 31, -1;
	selp.b32 	%r895, %r1092, %r1134, %p244;
	selp.b32 	%r900, %r1134, %r1094, %p244;
	selp.b32 	%r1135, %r1111, %r1109, %p244;
	shfl.sync.bfly.b32	%r1136, %r1135, 16, 31, -1;
	selp.b32 	%r903, %r1109, %r1136, %p244;
	selp.b32 	%r908, %r1136, %r1111, %p244;
	selp.b32 	%r1137, %r1112, %r1110, %p244;
	shfl.sync.bfly.b32	%r1138, %r1137, 16, 31, -1;
	selp.b32 	%r911, %r1110, %r1138, %p244;
	selp.b32 	%r916, %r1138, %r1112, %p244;
	selp.b32 	%r1139, %r1125, %r1123, %p244;
	shfl.sync.bfly.b32	%r1140, %r1139, 16, 31, -1;
	selp.b32 	%r919, %r1123, %r1140, %p244;
	selp.b32 	%r924, %r1140, %r1125, %p244;
	selp.b32 	%r1141, %r1126, %r1124, %p244;
	shfl.sync.bfly.b32	%r1142, %r1141, 16, 31, -1;
	selp.b32 	%r927, %r1124, %r1142, %p244;
	selp.b32 	%r932, %r1142, %r1126, %p244;
	shl.b32 	%r872, %r876, 4;
	mov.u32 	%r870, 252645135;
	// begin inline asm
	lop3.b32 %r934, %r870, %r871, %r872, 202;
	// end inline asm
	shr.u32 	%r875, %r871, 4;
	// begin inline asm
	lop3.b32 %r950, %r870, %r875, %r876, 202;
	// end inline asm
	shl.b32 	%r880, %r884, 4;
	// begin inline asm
	lop3.b32 %r942, %r870, %r879, %r880, 202;
	// end inline asm
	shr.u32 	%r883, %r879, 4;
	// begin inline asm
	lop3.b32 %r958, %r870, %r883, %r884, 202;
	// end inline asm
	shl.b32 	%r888, %r892, 4;
	// begin inline asm
	lop3.b32 %r966, %r870, %r887, %r888, 202;
	// end inline asm
	shr.u32 	%r891, %r887, 4;
	// begin inline asm
	lop3.b32 %r982, %r870, %r891, %r892, 202;
	// end inline asm
	shl.b32 	%r896, %r900, 4;
	// begin inline asm
	lop3.b32 %r974, %r870, %r895, %r896, 202;
	// end inline asm
	shr.u32 	%r899, %r895, 4;
	// begin inline asm
	lop3.b32 %r990, %r870, %r899, %r900, 202;
	// end inline asm
	shl.b32 	%r904, %r908, 4;
	// begin inline asm
	lop3.b32 %r935, %r870, %r903, %r904, 202;
	// end inline asm
	shr.u32 	%r907, %r903, 4;
	// begin inline asm
	lop3.b32 %r951, %r870, %r907, %r908, 202;
	// end inline asm
	shl.b32 	%r912, %r916, 4;
	// begin inline asm
	lop3.b32 %r943, %r870, %r911, %r912, 202;
	// end inline asm
	shr.u32 	%r915, %r911, 4;
	// begin inline asm
	lop3.b32 %r959, %r870, %r915, %r916, 202;
	// end inline asm
	shl.b32 	%r920, %r924, 4;
	// begin inline asm
	lop3.b32 %r967, %r870, %r919, %r920, 202;
	// end inline asm
	shr.u32 	%r923, %r919, 4;
	// begin inline asm
	lop3.b32 %r983, %r870, %r923, %r924, 202;
	// end inline asm
	shl.b32 	%r928, %r932, 4;
	// begin inline asm
	lop3.b32 %r975, %r870, %r927, %r928, 202;
	// end inline asm
	shr.u32 	%r931, %r927, 4;
	// begin inline asm
	lop3.b32 %r991, %r870, %r931, %r932, 202;
	// end inline asm
	mov.u32 	%r936, 25152;
	// begin inline asm
	prmt.b32 %r998, %r934, %r935, %r936;
	// end inline asm
	mov.u32 	%r940, 29521;
	// begin inline asm
	prmt.b32 %r1030, %r934, %r935, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1006, %r942, %r943, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1038, %r942, %r943, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r950, %r951, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1031, %r950, %r951, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r958, %r959, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1039, %r958, %r959, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1014, %r966, %r967, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1046, %r966, %r967, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1022, %r974, %r975, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1054, %r974, %r975, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r982, %r983, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1047, %r982, %r983, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1023, %r990, %r991, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1055, %r990, %r991, %r940;
	// end inline asm
	mov.u32 	%r1056, 21520;
	// begin inline asm
	prmt.b32 %r997, %r998, %r999, %r1056;
	// end inline asm
	mov.u32 	%r1060, 30258;
	// begin inline asm
	prmt.b32 %r1001, %r998, %r999, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r1006, %r1007, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r1006, %r1007, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r1014, %r1015, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1017, %r1014, %r1015, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1021, %r1022, %r1023, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1025, %r1022, %r1023, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1029, %r1030, %r1031, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1033, %r1030, %r1031, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1037, %r1038, %r1039, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1041, %r1038, %r1039, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1045, %r1046, %r1047, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1049, %r1046, %r1047, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1053, %r1054, %r1055, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1057, %r1054, %r1055, %r1060;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1143, %rs80;
	add.s32 	%r1144, %r94, %r1143;
	mul.wide.s32 	%rd103, %r1144, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r997;
	add.s32 	%r1145, %r1144, 128;
	mul.wide.u32 	%rd106, %r1145, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r1005;
	add.s32 	%r1146, %r1144, 64;
	mul.wide.u32 	%rd108, %r1146, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r1001;
	add.s32 	%r1147, %r1144, 192;
	mul.wide.u32 	%rd110, %r1147, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r1009;
	add.s32 	%r1148, %r95, %r1143;
	mul.wide.u32 	%rd112, %r1148, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r1013;
	add.s32 	%r1149, %r1148, 128;
	mul.wide.u32 	%rd114, %r1149, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r1021;
	add.s32 	%r1150, %r1148, 64;
	mul.wide.u32 	%rd116, %r1150, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r1017;
	add.s32 	%r1151, %r1148, 192;
	mul.wide.u32 	%rd118, %r1151, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r1025;
	add.s32 	%r1152, %r1144, 32;
	mul.wide.u32 	%rd120, %r1152, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r1029;
	add.s32 	%r1153, %r1144, 160;
	mul.wide.u32 	%rd122, %r1153, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r1037;
	add.s32 	%r1154, %r1144, 96;
	mul.wide.u32 	%rd124, %r1154, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r1033;
	add.s32 	%r1155, %r1144, 224;
	mul.wide.u32 	%rd126, %r1155, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r1041;
	add.s32 	%r1156, %r1148, 32;
	mul.wide.u32 	%rd128, %r1156, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1045;
	add.s32 	%r1157, %r1148, 160;
	mul.wide.u32 	%rd130, %r1157, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1053;
	add.s32 	%r1158, %r1148, 96;
	mul.wide.u32 	%rd132, %r1158, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1049;
	add.s32 	%r1159, %r1148, 224;
	mul.wide.u32 	%rd134, %r1159, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1057;
	bar.sync 	0;
	add.s32 	%r1160, %r300, %r96;
	cvt.u16.u32 	%rs81, %r1160;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r301, %rs87;
	add.s32 	%r1161, %r97, %r301;
	mul.wide.s32 	%rd136, %r1161, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r302, [%rd137];
	add.s32 	%r1162, %r98, %r301;
	mul.wide.u32 	%rd138, %r1162, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r303, [%rd139];
	add.s32 	%r1163, %r99, %r301;
	mul.wide.u32 	%rd140, %r1163, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r304, [%rd141];
	add.s32 	%r1164, %r100, %r301;
	mul.wide.u32 	%rd142, %r1164, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r305, [%rd143];
	add.s32 	%r1165, %r101, %r301;
	mul.wide.u32 	%rd144, %r1165, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r306, [%rd145];
	add.s32 	%r1166, %r102, %r301;
	mul.wide.u32 	%rd146, %r1166, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r307, [%rd147];
	add.s32 	%r1167, %r103, %r301;
	mul.wide.u32 	%rd148, %r1167, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r308, [%rd149];
	add.s32 	%r1168, %r104, %r301;
	mul.wide.u32 	%rd150, %r1168, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r309, [%rd151];
	add.s32 	%r1169, %r105, %r301;
	mul.wide.u32 	%rd152, %r1169, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r310, [%rd153];
	add.s32 	%r1170, %r106, %r301;
	mul.wide.u32 	%rd154, %r1170, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r311, [%rd155];
	add.s32 	%r1171, %r107, %r301;
	mul.wide.u32 	%rd156, %r1171, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r312, [%rd157];
	add.s32 	%r1172, %r108, %r301;
	mul.wide.u32 	%rd158, %r1172, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r313, [%rd159];
	add.s32 	%r1173, %r109, %r301;
	mul.wide.u32 	%rd160, %r1173, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r314, [%rd161];
	add.s32 	%r1174, %r110, %r301;
	mul.wide.u32 	%rd162, %r1174, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r315, [%rd163];
	add.s32 	%r1175, %r111, %r301;
	mul.wide.u32 	%rd164, %r1175, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r316, [%rd165];
	add.s32 	%r1176, %r112, %r301;
	mul.wide.u32 	%rd166, %r1176, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r317, [%rd167];
	add.s32 	%r1177, %r113, %r301;
	mul.wide.u32 	%rd168, %r1177, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r318, [%rd169];
	add.s32 	%r1178, %r114, %r301;
	mul.wide.u32 	%rd170, %r1178, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r319, [%rd171];
	add.s32 	%r1179, %r115, %r301;
	mul.wide.u32 	%rd172, %r1179, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r320, [%rd173];
	add.s32 	%r1180, %r116, %r301;
	mul.wide.u32 	%rd174, %r1180, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r321, [%rd175];
	add.s32 	%r1181, %r117, %r301;
	mul.wide.u32 	%rd176, %r1181, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r322, [%rd177];
	add.s32 	%r1182, %r118, %r301;
	mul.wide.s32 	%rd178, %r1182, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r323, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r324, %r293, 0, 31, -1;
	shfl.sync.idx.b32	%r325, %r293, 1, 31, -1;
	shfl.sync.idx.b32	%r326, %r293, 2, 31, -1;
	shfl.sync.idx.b32	%r327, %r293, 3, 31, -1;
	shfl.sync.idx.b32	%r328, %r293, 4, 31, -1;
	shfl.sync.idx.b32	%r329, %r293, 5, 31, -1;
	shfl.sync.idx.b32	%r330, %r293, 6, 31, -1;
	shfl.sync.idx.b32	%r331, %r293, 7, 31, -1;
	shfl.sync.idx.b32	%r332, %r293, 8, 31, -1;
	shfl.sync.idx.b32	%r333, %r293, 9, 31, -1;
	shfl.sync.idx.b32	%r334, %r293, 10, 31, -1;
	shfl.sync.idx.b32	%r335, %r293, 11, 31, -1;
	shfl.sync.idx.b32	%r336, %r293, 12, 31, -1;
	shfl.sync.idx.b32	%r337, %r293, 13, 31, -1;
	shfl.sync.idx.b32	%r338, %r293, 14, 31, -1;
	shfl.sync.idx.b32	%r339, %r293, 15, 31, -1;
	shfl.sync.idx.b32	%r340, %r293, 16, 31, -1;
	shfl.sync.idx.b32	%r341, %r293, 17, 31, -1;
	shfl.sync.idx.b32	%r342, %r293, 18, 31, -1;
	shfl.sync.idx.b32	%r343, %r293, 19, 31, -1;
	shfl.sync.idx.b32	%r344, %r293, 20, 31, -1;
	shfl.sync.idx.b32	%r345, %r293, 21, 31, -1;
	shfl.sync.idx.b32	%r346, %r293, 22, 31, -1;
	shfl.sync.idx.b32	%r347, %r293, 23, 31, -1;
	setp.eq.s32 	%p251, %r324, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.228:                             // %oksrem3326
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1183, %r324, %r301;
	mul.wide.s32 	%rd180, %r1183, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r302;
	setp.eq.s32 	%p252, %r325, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.229:                             // %oksrem3394
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1184, %r325, %r301;
	mul.wide.s32 	%rd183, %r1184, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r303;
	setp.eq.s32 	%p253, %r326, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.230:                             // %oksrem3462
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1185, %r326, %r301;
	mul.wide.s32 	%rd186, %r1185, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r304;
	setp.eq.s32 	%p254, %r327, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.231:                             // %oksrem3530
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1186, %r327, %r301;
	mul.wide.s32 	%rd189, %r1186, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r305;
	setp.eq.s32 	%p255, %r328, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.232:                             // %oksrem3598
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1187, %r328, %r301;
	mul.wide.s32 	%rd192, %r1187, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r306;
	setp.eq.s32 	%p256, %r329, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.233:                             // %oksrem3666
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1188, %r329, %r301;
	mul.wide.s32 	%rd195, %r1188, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r307;
	setp.eq.s32 	%p257, %r330, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.234:                             // %oksrem3734
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1189, %r330, %r301;
	mul.wide.s32 	%rd198, %r1189, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r308;
	setp.eq.s32 	%p258, %r331, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.235:                             // %oksrem3802
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1190, %r331, %r301;
	mul.wide.s32 	%rd201, %r1190, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r309;
	setp.eq.s32 	%p259, %r332, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.236:                             // %oksrem3870
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1191, %r332, %r301;
	mul.wide.s32 	%rd204, %r1191, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r310;
	setp.eq.s32 	%p260, %r333, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.237:                             // %oksrem3938
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1192, %r333, %r301;
	mul.wide.s32 	%rd207, %r1192, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r311;
	setp.eq.s32 	%p261, %r334, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.238:                             // %oksrem4006
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1193, %r334, %r301;
	mul.wide.s32 	%rd210, %r1193, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r312;
	setp.eq.s32 	%p262, %r335, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.239:                             // %oksrem4074
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1194, %r335, %r301;
	mul.wide.s32 	%rd213, %r1194, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r313;
	setp.eq.s32 	%p263, %r336, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.240:                             // %oksrem4142
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1195, %r336, %r301;
	mul.wide.s32 	%rd216, %r1195, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r314;
	setp.eq.s32 	%p264, %r337, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.241:                             // %oksrem4210
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1196, %r337, %r301;
	mul.wide.s32 	%rd219, %r1196, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r315;
	setp.eq.s32 	%p265, %r338, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.242:                             // %oksrem4278
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1197, %r338, %r301;
	mul.wide.s32 	%rd222, %r1197, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r316;
	setp.eq.s32 	%p266, %r339, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.243:                             // %oksrem4346
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1198, %r339, %r301;
	mul.wide.s32 	%rd225, %r1198, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r317;
	setp.eq.s32 	%p267, %r340, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.244:                             // %oksrem4414
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1199, %r340, %r301;
	mul.wide.s32 	%rd228, %r1199, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r318;
	setp.eq.s32 	%p268, %r341, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.245:                             // %oksrem4482
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1200, %r341, %r301;
	mul.wide.s32 	%rd231, %r1200, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r319;
	setp.eq.s32 	%p269, %r342, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.246:                             // %oksrem4550
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1201, %r342, %r301;
	mul.wide.s32 	%rd234, %r1201, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r320;
	setp.eq.s32 	%p270, %r343, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.247:                             // %oksrem4618
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1202, %r343, %r301;
	mul.wide.s32 	%rd237, %r1202, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r321;
	setp.eq.s32 	%p271, %r344, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.248:                             // %oksrem4686
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1203, %r344, %r301;
	mul.wide.s32 	%rd240, %r1203, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r322;
	setp.eq.s32 	%p272, %r345, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.249:                             // %oksrem4755
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1204, 0, %r323, %p273;
	add.s32 	%r1205, %r345, %r301;
	mul.wide.s32 	%rd243, %r1205, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1204;
	setp.eq.s32 	%p274, %r346, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.250:                             // %oksrem4823
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1206, %r346, %r301;
	mul.wide.s32 	%rd246, %r1206, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3801, 0;
	st.shared.u32 	[%rd248], %r3801;
	setp.eq.s32 	%p275, %r347, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.251:                             // %oksrem4890
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1209, %r347, %r301;
	mul.wide.s32 	%rd249, %r1209, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3801;
	bar.sync 	0;
	mov.u32 	%r3802, %r3801;
	mov.u32 	%r3803, %r3801;
	mov.u32 	%r3804, %r3801;
	mov.u32 	%r3805, %r3801;
	mov.u32 	%r3806, %r3801;
	mov.u32 	%r3807, %r3801;
	mov.u32 	%r3808, %r3801;
	mov.u32 	%r3809, %r3801;
	mov.u32 	%r3810, %r3801;
	mov.u32 	%r3811, %r3801;
	mov.u32 	%r3812, %r3801;
	mov.u32 	%r3813, %r3801;
	mov.u32 	%r3814, %r3801;
	mov.u32 	%r3815, %r3801;
	mov.u32 	%r3816, %r3801;
	mov.u32 	%r3817, %r3801;
	mov.u32 	%r3818, %r3801;
	mov.u32 	%r3819, %r3801;
	mov.u32 	%r3820, %r3801;
	mov.u32 	%r3821, %r3801;
	mov.u32 	%r3822, %r3801;
	mov.u32 	%r3823, %r3801;
	mov.u32 	%r3824, %r3801;
	@%p91 bra 	$L__BB0_176;
// %bb.252:                             // %oksrem4934
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r300;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1210, %rs94;
	mul.wide.s32 	%rd252, %r1210, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3801, [%rd253];
	ld.shared.u32 	%r3802, [%rd16+4];
	ld.shared.u32 	%r3803, [%rd16+8];
	ld.shared.u32 	%r3804, [%rd16+12];
	ld.shared.u32 	%r3805, [%rd16+16];
	ld.shared.u32 	%r3806, [%rd16+20];
	ld.shared.u32 	%r3807, [%rd16+24];
	ld.shared.u32 	%r3808, [%rd16+28];
	ld.shared.u32 	%r3809, [%rd16+32];
	ld.shared.u32 	%r3810, [%rd16+36];
	ld.shared.u32 	%r3811, [%rd16+40];
	ld.shared.u32 	%r3812, [%rd16+44];
	ld.shared.u32 	%r3813, [%rd16+48];
	ld.shared.u32 	%r3814, [%rd16+52];
	ld.shared.u32 	%r3815, [%rd16+56];
	ld.shared.u32 	%r3816, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1211, %rs101;
	mul.wide.s32 	%rd254, %r1211, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3817, [%rd255];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1212, %rs108;
	mul.wide.s32 	%rd256, %r1212, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3818, [%rd257];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1213, %rs115;
	mul.wide.s32 	%rd258, %r1213, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3819, [%rd259];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1214, %rs122;
	mul.wide.s32 	%rd260, %r1214, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3820, [%rd261];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1215, %rs129;
	mul.wide.s32 	%rd262, %r1215, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3821, [%rd263];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1216, %rs136;
	mul.wide.s32 	%rd264, %r1216, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3822, [%rd265];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1217, %rs143;
	mul.wide.s32 	%rd266, %r1217, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3823, [%rd267];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1218, %rs150;
	mul.wide.s32 	%rd268, %r1218, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3824, [%rd269];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3825, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_185:                            // %L28746
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3826, 0;
	mov.u32 	%r3828, %r3826;
	mov.u32 	%r3829, %r3826;
$L__BB0_186:                            // %L28747
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3825, %r3825, -4;
	setp.ne.s32 	%p320, %r3825, -12;
	@%p320 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_187;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3825, 12;
	selp.b32 	%r1756, %r3801, 0, %p278;
	setp.eq.s32 	%p279, %r3825, 8;
	selp.b32 	%r1757, %r3805, %r1756, %p279;
	setp.eq.s32 	%p280, %r3825, 4;
	selp.b32 	%r1758, %r3809, %r1757, %p280;
	setp.eq.s32 	%p281, %r3825, 0;
	selp.b32 	%r1759, %r3813, %r1758, %p281;
	setp.eq.s32 	%p282, %r3825, -4;
	selp.b32 	%r1760, %r3817, %r1759, %p282;
	setp.eq.s32 	%p283, %r3825, -8;
	selp.b32 	%r1761, %r3821, %r1760, %p283;
	selp.b32 	%r1762, %r3802, 0, %p278;
	selp.b32 	%r1763, %r3806, %r1762, %p279;
	selp.b32 	%r1764, %r3810, %r1763, %p280;
	selp.b32 	%r1765, %r3814, %r1764, %p281;
	selp.b32 	%r1766, %r3818, %r1765, %p282;
	selp.b32 	%r1767, %r3822, %r1766, %p283;
	selp.b32 	%r1768, %r3803, 0, %p278;
	selp.b32 	%r1769, %r3807, %r1768, %p279;
	selp.b32 	%r1770, %r3811, %r1769, %p280;
	selp.b32 	%r1771, %r3815, %r1770, %p281;
	selp.b32 	%r1772, %r3819, %r1771, %p282;
	selp.b32 	%r1773, %r3823, %r1772, %p283;
	selp.b32 	%r1774, %r3804, 0, %p278;
	selp.b32 	%r1775, %r3808, %r1774, %p279;
	selp.b32 	%r1776, %r3812, %r1775, %p280;
	selp.b32 	%r1777, %r3816, %r1776, %p281;
	selp.b32 	%r1778, %r3820, %r1777, %p282;
	selp.b32 	%r1779, %r3824, %r1778, %p283;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1225, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1236, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1224, %r1761, -2004318072;
	mov.u32 	%r1361, 983055;
	// begin inline asm
	lop3.b32 %r1222, %r1361, %r1224, %r1225, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1226, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1225, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	mov.u32 	%r1372, 15728880;
	// begin inline asm
	lop3.b32 %r1233, %r1372, %r1224, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1270, %r1767, -2004318072;
	// begin inline asm
	lop3.b32 %r1268, %r1361, %r1270, %r1271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1271, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1279, %r1372, %r1270, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	mov.b32 %r1317, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1328, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1316, %r1773, -2004318072;
	// begin inline asm
	lop3.b32 %r1314, %r1361, %r1316, %r1317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1318, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1319, %r1317, %r1318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1322, %r1314, %r1319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1325, %r1372, %r1316, %r1328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1330, %r1328, %r1329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1333, %r1325, %r1330;
	// end inline asm
	// begin inline asm
	mov.b32 %r1363, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1374, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1362, %r1779, -2004318072;
	// begin inline asm
	lop3.b32 %r1360, %r1361, %r1362, %r1363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1364, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1365, %r1363, %r1364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1368, %r1360, %r1365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1371, %r1372, %r1362, %r1374, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1375, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1376, %r1374, %r1375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1379, %r1371, %r1376;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1230;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1404, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1241;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1407, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1276;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1410, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1287;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1413, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1322;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1416, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1333;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1419, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1368;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1422, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1379;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1425, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1691, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1491, %r1488}, {%r459, %r462}, {%r1404}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1500, %r1497}, {%r459, %r462}, {%r1407}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r459, %r462}, {%r1410}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r459, %r462}, {%r1413}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1527, %r1524}, {%r459, %r462}, {%r1416}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1536, %r1533}, {%r459, %r462}, {%r1419}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1545, %r1542}, {%r459, %r462}, {%r1422}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1554, %r1551}, {%r459, %r462}, {%r1425}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1484, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r1484, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r511, %r1491, %r1486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1493, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r1493, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r511, %r1500, %r1495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r511, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r511, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1520, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1520, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r511, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1529, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r1529, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r511, %r1536, %r1531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1538, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r1538, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r511, %r1545, %r1540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1547, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1547, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r511, %r1554, %r1549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r514, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r511, %r1488, %r1556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1563, %r514, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r511, %r1497, %r1563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1570, %r514, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1573, %r511, %r1506, %r1570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1577, %r514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r511, %r1515, %r1577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r514, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r511, %r1524, %r1584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1591, %r514, %r1536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1594, %r511, %r1533, %r1591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1598, %r514, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r511, %r1542, %r1598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1605, %r514, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r511, %r1551, %r1605;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1693, %r1694}, {%r555, %r561, %r558, %r564}, {%r1489, %r1559}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1702}, {%r555, %r561, %r558, %r564}, {%r1498, %r1566}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1709, %r1710}, {%r555, %r561, %r558, %r564}, {%r1507, %r1573}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1717, %r1718}, {%r555, %r561, %r558, %r564}, {%r1516, %r1580}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1726}, {%r555, %r561, %r558, %r564}, {%r1525, %r1587}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1733, %r1734}, {%r555, %r561, %r558, %r564}, {%r1534, %r1594}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1741, %r1742}, {%r555, %r561, %r558, %r564}, {%r1543, %r1601}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1749, %r1750}, {%r555, %r561, %r558, %r564}, {%r1552, %r1608}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1692, %r1693, %r1694, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1696, %r1693, %r1694, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1700, %r1701, %r1702, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1704, %r1701, %r1702, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1708, %r1709, %r1710, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1712, %r1709, %r1710, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1716, %r1717, %r1718, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1720, %r1717, %r1718, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1724, %r1725, %r1726, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1728, %r1725, %r1726, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1732, %r1733, %r1734, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1736, %r1733, %r1734, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1740, %r1741, %r1742, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1744, %r1741, %r1742, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1748, %r1749, %r1750, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1752, %r1749, %r1750, %r1060;
	// end inline asm
	st.shared.u32 	[%rd7], %r1692;
	st.shared.u32 	[%rd8], %r1696;
	st.shared.u32 	[%rd9], %r1700;
	st.shared.u32 	[%rd10], %r1704;
	st.shared.u32 	[%rd17], %r1708;
	st.shared.u32 	[%rd18], %r1712;
	st.shared.u32 	[%rd19], %r1716;
	st.shared.u32 	[%rd20], %r1720;
	st.shared.u32 	[%rd21], %r1724;
	st.shared.u32 	[%rd22], %r1728;
	st.shared.u32 	[%rd23], %r1732;
	st.shared.u32 	[%rd24], %r1736;
	st.shared.u32 	[%rd25], %r1740;
	st.shared.u32 	[%rd26], %r1744;
	st.shared.u32 	[%rd27], %r1748;
	st.shared.u32 	[%rd28], %r1752;
	@%p277 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_178;
$L__BB0_253:                            // %pass8545
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1692;
	st.shared.u32 	[%rd8], %r1696;
	st.shared.u32 	[%rd9], %r1700;
	st.shared.u32 	[%rd10], %r1704;
	st.shared.u32 	[%rd17], %r1708;
	st.shared.u32 	[%rd18], %r1712;
	st.shared.u32 	[%rd19], %r1716;
	st.shared.u32 	[%rd20], %r1720;
	st.shared.u32 	[%rd21], %r1724;
	st.shared.u32 	[%rd22], %r1728;
	st.shared.u32 	[%rd23], %r1732;
	st.shared.u32 	[%rd24], %r1736;
	st.shared.u32 	[%rd25], %r1740;
	st.shared.u32 	[%rd26], %r1744;
	st.shared.u32 	[%rd27], %r1748;
	st.shared.u32 	[%rd28], %r1752;
$L__BB0_178:                            // %L22306
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3830, %r1691;
	mov.u32 	%r3831, %r1691;
	mov.u32 	%r3832, %r1691;
	mov.u32 	%r3833, %r1691;
	@%p277 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_179;
$L__BB0_254:                            // %pass10640
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3830, [%rd11];
	ld.shared.u32 	%r3831, [%rd12];
	ld.shared.u32 	%r3832, [%rd13];
	ld.shared.u32 	%r3833, [%rd14];
$L__BB0_179:                            // %L23381
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1816, %r1813}, {%r573, %r576}, {%r3830}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1825, %r1822}, {%r573, %r576}, {%r3831}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1834, %r1831}, {%r573, %r576}, {%r3832}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1843, %r1840}, {%r573, %r576}, {%r3833}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1809, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1811, %r1809, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r625, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1818, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1820, %r1818, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r625, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1827, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r1827, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r625, %r1834, %r1829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1836, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1838, %r1836, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r625, %r1843, %r1838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r628, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r625, %r1813, %r1845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1852, %r628, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r625, %r1822, %r1852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r628, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r625, %r1831, %r1859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r628, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r625, %r1840, %r1866;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1914, %r1917}, {%r669, %r675, %r672, %r678}, {%r1814, %r1848}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1933, %r1936}, {%r669, %r675, %r672, %r678}, {%r1823, %r1855}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1921, %r1925}, {%r669, %r675, %r672, %r678}, {%r1832, %r1862}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1944}, {%r669, %r675, %r672, %r678}, {%r1841, %r1869}, {%r1691, %r1691};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1914, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r1917, %r1917, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r1921, %r1921, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r1925, %r1925, %r1920;
	// end inline asm
	mov.u32 	%r1948, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3883, %r1948, %r1924, %r3829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1933, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r1936, %r1936, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r1940, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3882, %r1948, %r1943, %r3828;
	// end inline asm
	add.s32 	%r3880, %r3826, 1;
	setp.eq.s32 	%p285, %r3880, 3;
	@%p285 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_183;
$L__BB0_180:                            // %pass11103
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_182;
// %bb.181:                             // %pass11113
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r1951, %r3827, 589824;
	add.s32 	%r1952, %r119, %r1951;
	cvt.s64.s32 	%rd270, %r1952;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p287, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p288, %rd276, %rd271;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd277, -1, 0, %p289;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3883;
	add.s32 	%r1953, %r120, %r1951;
	cvt.s64.s32 	%rd283, %r1953;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p290, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p291, %rd289, %rd284;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd290, -1, 0, %p292;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3882;
$L__BB0_182:                            // %L23913
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3880, 0;
	mov.u32 	%r3882, %r3880;
	mov.u32 	%r3883, %r3880;
$L__BB0_183:                            // %pass11279
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r1955, 0;
	mov.u32 	%r3834, %r1955;
	mov.u32 	%r3835, %r1955;
	mov.u32 	%r3836, %r1955;
	mov.u32 	%r3837, %r1955;
	@%p91 bra 	$L__BB0_255;
// %bb.184:                             // %pass11415
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3834, [%rd29];
	ld.shared.u32 	%r3835, [%rd30];
	ld.shared.u32 	%r3836, [%rd31];
	ld.shared.u32 	%r3837, [%rd32];
$L__BB0_255:                            // %L24992
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1991, %r1988}, {%r573, %r576}, {%r3834}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2000, %r1997}, {%r573, %r576}, {%r3835}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2009, %r2006}, {%r573, %r576}, {%r3836}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r573, %r576}, {%r3837}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1984, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1986, %r1984, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r625, %r1991, %r1986;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1993, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r1993, %r1997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r625, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2002, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2002, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r625, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r625, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r628, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r625, %r1988, %r2020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r628, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r625, %r1997, %r2027;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2034, %r628, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r625, %r2006, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r628, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r625, %r2015, %r2041;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2089, %r2092}, {%r669, %r675, %r672, %r678}, {%r1989, %r2023}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2108, %r2111}, {%r669, %r675, %r672, %r678}, {%r1998, %r2030}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2096, %r2100}, {%r669, %r675, %r672, %r678}, {%r2007, %r2037}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2115, %r2119}, {%r669, %r675, %r672, %r678}, {%r2016, %r2044}, {%r1955, %r1955};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r2089, %r2089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r2092, %r2092, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r2096, %r2096, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r2100, %r2100, %r2095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3887, %r1948, %r2099, %r3883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r2108, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r2111, %r2111, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r2115, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r2119, %r2119, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3886, %r1948, %r2118, %r3882;
	// end inline asm
	add.s32 	%r3884, %r3880, 1;
	setp.eq.s32 	%p294, %r3884, 3;
	@%p294 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_259;
$L__BB0_256:                            // %pass11878
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_258;
// %bb.257:                             // %pass11888
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2126, %r3827, 589824;
	add.s32 	%r2127, %r119, %r2126;
	cvt.s64.s32 	%rd296, %r2127;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p296, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p297, %rd302, %rd297;
	and.pred  	%p298, %p296, %p297;
	selp.s64 	%rd303, -1, 0, %p298;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3887;
	add.s32 	%r2128, %r120, %r2126;
	cvt.s64.s32 	%rd309, %r2128;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p299, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p300, %rd315, %rd310;
	and.pred  	%p301, %p299, %p300;
	selp.s64 	%rd316, -1, 0, %p301;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3886;
$L__BB0_258:                            // %L25524
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3884, 0;
	mov.u32 	%r3886, %r3884;
	mov.u32 	%r3887, %r3884;
$L__BB0_259:                            // %pass12054
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2130, 0;
	mov.u32 	%r3838, %r2130;
	mov.u32 	%r3839, %r2130;
	mov.u32 	%r3840, %r2130;
	mov.u32 	%r3841, %r2130;
	@%p91 bra 	$L__BB0_261;
// %bb.260:                             // %pass12190
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3838, [%rd33];
	ld.shared.u32 	%r3839, [%rd34];
	ld.shared.u32 	%r3840, [%rd35];
	ld.shared.u32 	%r3841, [%rd36];
$L__BB0_261:                            // %L26603
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2166, %r2163}, {%r573, %r576}, {%r3838}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2175, %r2172}, {%r573, %r576}, {%r3839}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2184, %r2181}, {%r573, %r576}, {%r3840}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2193, %r2190}, {%r573, %r576}, {%r3841}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2159, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r2159, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r625, %r2166, %r2161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2168, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2168, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r625, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2177, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r2177, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r625, %r2184, %r2179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2186, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r2186, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r625, %r2193, %r2188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r628, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r625, %r2163, %r2195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r628, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r625, %r2172, %r2202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r628, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r625, %r2181, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r628, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r625, %r2190, %r2216;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2264, %r2267}, {%r669, %r675, %r672, %r678}, {%r2164, %r2198}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2283, %r2286}, {%r669, %r675, %r672, %r678}, {%r2173, %r2205}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2271, %r2275}, {%r669, %r675, %r672, %r678}, {%r2182, %r2212}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2290, %r2294}, {%r669, %r675, %r672, %r678}, {%r2191, %r2219}, {%r2130, %r2130};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r2264, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r2267, %r2267, %r2263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r2271, %r2271, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r2275, %r2275, %r2270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3891, %r1948, %r2274, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r2283, %r2283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r2286, %r2286, %r2282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r2290, %r2290, %r2285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2293, %r2294, %r2294, %r2289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3890, %r1948, %r2293, %r3886;
	// end inline asm
	add.s32 	%r3888, %r3884, 1;
	setp.eq.s32 	%p303, %r3888, 3;
	@%p303 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_265;
$L__BB0_262:                            // %pass12653
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_264;
// %bb.263:                             // %pass12663
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2301, %r3827, 589824;
	add.s32 	%r2302, %r119, %r2301;
	cvt.s64.s32 	%rd322, %r2302;
	add.s64 	%rd323, %rd322, %rd15;
	mul.hi.s64 	%rd324, %rd323, 1024819115206086201;
	shr.u64 	%rd325, %rd324, 63;
	shr.s64 	%rd326, %rd324, 25;
	add.s64 	%rd327, %rd326, %rd325;
	setp.lt.s64 	%p305, %rd323, 0;
	mul.lo.s64 	%rd328, %rd327, 603979776;
	setp.ne.s64 	%p306, %rd328, %rd323;
	and.pred  	%p307, %p305, %p306;
	selp.s64 	%rd329, -1, 0, %p307;
	add.s64 	%rd330, %rd327, %rd329;
	mul.lo.s64 	%rd331, %rd330, -603979776;
	add.s64 	%rd332, %rd331, %rd323;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r3891;
	add.s32 	%r2303, %r120, %r2301;
	cvt.s64.s32 	%rd335, %r2303;
	add.s64 	%rd336, %rd335, %rd15;
	mul.hi.s64 	%rd337, %rd336, 1024819115206086201;
	shr.u64 	%rd338, %rd337, 63;
	shr.s64 	%rd339, %rd337, 25;
	add.s64 	%rd340, %rd339, %rd338;
	setp.lt.s64 	%p308, %rd336, 0;
	mul.lo.s64 	%rd341, %rd340, 603979776;
	setp.ne.s64 	%p309, %rd341, %rd336;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd342, -1, 0, %p310;
	add.s64 	%rd343, %rd340, %rd342;
	mul.lo.s64 	%rd344, %rd343, -603979776;
	add.s64 	%rd345, %rd344, %rd336;
	shl.b64 	%rd346, %rd345, 2;
	add.s64 	%rd347, %rd4, %rd346;
	st.global.u32 	[%rd347], %r3890;
$L__BB0_264:                            // %L27135
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3888, 0;
	mov.u32 	%r3890, %r3888;
	mov.u32 	%r3891, %r3888;
$L__BB0_265:                            // %pass12829
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2305, 0;
	mov.u32 	%r3842, %r2305;
	mov.u32 	%r3843, %r2305;
	mov.u32 	%r3844, %r2305;
	mov.u32 	%r3845, %r2305;
	@%p91 bra 	$L__BB0_267;
// %bb.266:                             // %pass12965
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3842, [%rd37];
	ld.shared.u32 	%r3843, [%rd38];
	ld.shared.u32 	%r3844, [%rd39];
	ld.shared.u32 	%r3845, [%rd40];
$L__BB0_267:                            // %L28214
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2341, %r2338}, {%r573, %r576}, {%r3842}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2350, %r2347}, {%r573, %r576}, {%r3843}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2359, %r2356}, {%r573, %r576}, {%r3844}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2368, %r2365}, {%r573, %r576}, {%r3845}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2334, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2336, %r2334, %r2338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2339, %r625, %r2341, %r2336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2343, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2345, %r2343, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r625, %r2350, %r2345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2352, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2354, %r2352, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2357, %r625, %r2359, %r2354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2361, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2363, %r2361, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2366, %r625, %r2368, %r2363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2370, %r628, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2373, %r625, %r2338, %r2370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2377, %r628, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r625, %r2347, %r2377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2384, %r628, %r2359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r625, %r2356, %r2384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2391, %r628, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2394, %r625, %r2365, %r2391;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2439, %r2442}, {%r669, %r675, %r672, %r678}, {%r2339, %r2373}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2458, %r2461}, {%r669, %r675, %r672, %r678}, {%r2348, %r2380}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2446, %r2450}, {%r669, %r675, %r672, %r678}, {%r2357, %r2387}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2465, %r2469}, {%r669, %r675, %r672, %r678}, {%r2366, %r2394}, {%r2305, %r2305};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2438, %r2439, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2441, %r2442, %r2442, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r2446, %r2446, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r2450, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3829, %r1948, %r2449, %r3891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2458, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r2461, %r2461, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r2465, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2468, %r2469, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3828, %r1948, %r2468, %r3890;
	// end inline asm
	add.s32 	%r3826, %r3888, 1;
	setp.eq.s32 	%p312, %r3826, 3;
	@%p312 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_186;
$L__BB0_268:                            // %pass13428
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_185;
// %bb.269:                             // %pass13438
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2476, %r3827, 589824;
	add.s32 	%r2477, %r119, %r2476;
	cvt.s64.s32 	%rd348, %r2477;
	add.s64 	%rd349, %rd348, %rd15;
	mul.hi.s64 	%rd350, %rd349, 1024819115206086201;
	shr.u64 	%rd351, %rd350, 63;
	shr.s64 	%rd352, %rd350, 25;
	add.s64 	%rd353, %rd352, %rd351;
	setp.lt.s64 	%p314, %rd349, 0;
	mul.lo.s64 	%rd354, %rd353, 603979776;
	setp.ne.s64 	%p315, %rd354, %rd349;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd355, -1, 0, %p316;
	add.s64 	%rd356, %rd353, %rd355;
	mul.lo.s64 	%rd357, %rd356, -603979776;
	add.s64 	%rd358, %rd357, %rd349;
	shl.b64 	%rd359, %rd358, 2;
	add.s64 	%rd360, %rd4, %rd359;
	st.global.u32 	[%rd360], %r3829;
	add.s32 	%r2478, %r120, %r2476;
	cvt.s64.s32 	%rd361, %r2478;
	add.s64 	%rd362, %rd361, %rd15;
	mul.hi.s64 	%rd363, %rd362, 1024819115206086201;
	shr.u64 	%rd364, %rd363, 63;
	shr.s64 	%rd365, %rd363, 25;
	add.s64 	%rd366, %rd365, %rd364;
	setp.lt.s64 	%p317, %rd362, 0;
	mul.lo.s64 	%rd367, %rd366, 603979776;
	setp.ne.s64 	%p318, %rd367, %rd362;
	and.pred  	%p319, %p317, %p318;
	selp.s64 	%rd368, -1, 0, %p319;
	add.s64 	%rd369, %rd366, %rd368;
	mul.lo.s64 	%rd370, %rd369, -603979776;
	add.s64 	%rd371, %rd370, %rd362;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r3828;
	bra.uni 	$L__BB0_185;
$L__BB0_187:                            // %L28772.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3850, 12;
	bra.uni 	$L__BB0_188;
$L__BB0_196:                            // %L43586
                                        //   in Loop: Header=BB0_188 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3826, 0;
	mov.u32 	%r3828, %r3826;
	mov.u32 	%r3829, %r3826;
$L__BB0_197:                            // %L43587
                                        //   in Loop: Header=BB0_188 Depth=2
	bar.sync 	0;
	add.s32 	%r3850, %r3850, -4;
	setp.ne.s32 	%p364, %r3850, -12;
	@%p364 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_198;
$L__BB0_188:                            // %L28772
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p322, %r3850, 12;
	selp.b32 	%r3017, %r3801, 0, %p322;
	setp.eq.s32 	%p323, %r3850, 8;
	selp.b32 	%r3018, %r3805, %r3017, %p323;
	setp.eq.s32 	%p324, %r3850, 4;
	selp.b32 	%r3019, %r3809, %r3018, %p324;
	setp.eq.s32 	%p325, %r3850, 0;
	selp.b32 	%r3020, %r3813, %r3019, %p325;
	setp.eq.s32 	%p326, %r3850, -4;
	selp.b32 	%r3021, %r3817, %r3020, %p326;
	setp.eq.s32 	%p327, %r3850, -8;
	selp.b32 	%r3022, %r3821, %r3021, %p327;
	selp.b32 	%r3023, %r3802, 0, %p322;
	selp.b32 	%r3024, %r3806, %r3023, %p323;
	selp.b32 	%r3025, %r3810, %r3024, %p324;
	selp.b32 	%r3026, %r3814, %r3025, %p325;
	selp.b32 	%r3027, %r3818, %r3026, %p326;
	selp.b32 	%r3028, %r3822, %r3027, %p327;
	selp.b32 	%r3029, %r3803, 0, %p322;
	selp.b32 	%r3030, %r3807, %r3029, %p323;
	selp.b32 	%r3031, %r3811, %r3030, %p324;
	selp.b32 	%r3032, %r3815, %r3031, %p325;
	selp.b32 	%r3033, %r3819, %r3032, %p326;
	selp.b32 	%r3034, %r3823, %r3033, %p327;
	selp.b32 	%r3035, %r3804, 0, %p322;
	selp.b32 	%r3036, %r3808, %r3035, %p323;
	selp.b32 	%r3037, %r3812, %r3036, %p324;
	selp.b32 	%r3038, %r3816, %r3037, %p325;
	selp.b32 	%r3039, %r3820, %r3038, %p326;
	selp.b32 	%r3040, %r3824, %r3039, %p327;
	// begin inline asm
	mov.b32 %r2508, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3041, %r3022, 8;
	xor.b32  	%r2518, %r3041, 8947848;
	// begin inline asm
	lop3.b32 %r2505, %r1361, %r2518, %r2508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2510, %r2508, %r2509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2513, %r2505, %r2510;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2516, %r1372, %r2518, %r2519, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2521, %r2519, %r2520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2524, %r2516, %r2521;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3042, %r3028, 8;
	xor.b32  	%r2564, %r3042, 8947848;
	// begin inline asm
	lop3.b32 %r2551, %r1361, %r2564, %r2554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2556, %r2554, %r2555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2559, %r2551, %r2556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2562, %r1372, %r2564, %r2565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2567, %r2565, %r2566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2570, %r2562, %r2567;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3043, %r3034, 8;
	xor.b32  	%r2610, %r3043, 8947848;
	// begin inline asm
	lop3.b32 %r2597, %r1361, %r2610, %r2600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2601, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2602, %r2600, %r2601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2605, %r2597, %r2602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2608, %r1372, %r2610, %r2611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2613, %r2611, %r2612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2616, %r2608, %r2613;
	// end inline asm
	// begin inline asm
	mov.b32 %r2646, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2657, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3044, %r3040, 8;
	xor.b32  	%r2656, %r3044, 8947848;
	// begin inline asm
	lop3.b32 %r2643, %r1361, %r2656, %r2646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2647, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2648, %r2646, %r2647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2651, %r2643, %r2648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2654, %r1372, %r2656, %r2657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2658, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2659, %r2657, %r2658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2662, %r2654, %r2659;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2513;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2665, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2524;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2668, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2559;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2671, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2570;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2674, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2605;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2677, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2616;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2680, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2651;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2683, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2662;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2686, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2952, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2752, %r2749}, {%r459, %r462}, {%r2665}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2761, %r2758}, {%r459, %r462}, {%r2668}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2770, %r2767}, {%r459, %r462}, {%r2671}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2779, %r2776}, {%r459, %r462}, {%r2674}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2788, %r2785}, {%r459, %r462}, {%r2677}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2797, %r2794}, {%r459, %r462}, {%r2680}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2806, %r2803}, {%r459, %r462}, {%r2683}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2815, %r2812}, {%r459, %r462}, {%r2686}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2745, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r2745, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r511, %r2752, %r2747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r511, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r511, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2772, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2772, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r511, %r2779, %r2774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2781, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r2781, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r511, %r2788, %r2783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2790, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r2790, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r511, %r2797, %r2792;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2799, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r2799, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r511, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2808, %r514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2810, %r2808, %r2812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r511, %r2815, %r2810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2817, %r514, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r511, %r2749, %r2817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2824, %r514, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2827, %r511, %r2758, %r2824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2831, %r514, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r511, %r2767, %r2831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r514, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r511, %r2776, %r2838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2845, %r514, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r511, %r2785, %r2845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r514, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r511, %r2794, %r2852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2859, %r514, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r511, %r2803, %r2859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2866, %r514, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r511, %r2812, %r2866;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2955}, {%r555, %r561, %r558, %r564}, {%r2750, %r2820}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2963}, {%r555, %r561, %r558, %r564}, {%r2759, %r2827}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2970, %r2971}, {%r555, %r561, %r558, %r564}, {%r2768, %r2834}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2978, %r2979}, {%r555, %r561, %r558, %r564}, {%r2777, %r2841}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2986, %r2987}, {%r555, %r561, %r558, %r564}, {%r2786, %r2848}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2994, %r2995}, {%r555, %r561, %r558, %r564}, {%r2795, %r2855}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3002, %r3003}, {%r555, %r561, %r558, %r564}, {%r2804, %r2862}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3010, %r3011}, {%r555, %r561, %r558, %r564}, {%r2813, %r2869}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2953, %r2954, %r2955, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2957, %r2954, %r2955, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2961, %r2962, %r2963, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2965, %r2962, %r2963, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2969, %r2970, %r2971, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2973, %r2970, %r2971, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2977, %r2978, %r2979, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2981, %r2978, %r2979, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2985, %r2986, %r2987, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2989, %r2986, %r2987, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2993, %r2994, %r2995, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2997, %r2994, %r2995, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r3001, %r3002, %r3003, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r3005, %r3002, %r3003, %r1060;
	// end inline asm
	// begin inline asm
	prmt.b32 %r3009, %r3010, %r3011, %r1056;
	// end inline asm
	// begin inline asm
	prmt.b32 %r3013, %r3010, %r3011, %r1060;
	// end inline asm
	st.shared.u32 	[%rd7], %r2953;
	st.shared.u32 	[%rd8], %r2957;
	st.shared.u32 	[%rd9], %r2961;
	st.shared.u32 	[%rd10], %r2965;
	st.shared.u32 	[%rd17], %r2969;
	st.shared.u32 	[%rd18], %r2973;
	st.shared.u32 	[%rd19], %r2977;
	st.shared.u32 	[%rd20], %r2981;
	st.shared.u32 	[%rd21], %r2985;
	st.shared.u32 	[%rd22], %r2989;
	st.shared.u32 	[%rd23], %r2993;
	st.shared.u32 	[%rd24], %r2997;
	st.shared.u32 	[%rd25], %r3001;
	st.shared.u32 	[%rd26], %r3005;
	st.shared.u32 	[%rd27], %r3009;
	st.shared.u32 	[%rd28], %r3013;
	@%p277 bra 	$L__BB0_270;
	bra.uni 	$L__BB0_189;
$L__BB0_270:                            // %pass15851
                                        //   in Loop: Header=BB0_188 Depth=2
	st.shared.u32 	[%rd7], %r2953;
	st.shared.u32 	[%rd8], %r2957;
	st.shared.u32 	[%rd9], %r2961;
	st.shared.u32 	[%rd10], %r2965;
	st.shared.u32 	[%rd17], %r2969;
	st.shared.u32 	[%rd18], %r2973;
	st.shared.u32 	[%rd19], %r2977;
	st.shared.u32 	[%rd20], %r2981;
	st.shared.u32 	[%rd21], %r2985;
	st.shared.u32 	[%rd22], %r2989;
	st.shared.u32 	[%rd23], %r2993;
	st.shared.u32 	[%rd24], %r2997;
	st.shared.u32 	[%rd25], %r3001;
	st.shared.u32 	[%rd26], %r3005;
	st.shared.u32 	[%rd27], %r3009;
	st.shared.u32 	[%rd28], %r3013;
$L__BB0_189:                            // %L37146
                                        //   in Loop: Header=BB0_188 Depth=2
	bar.sync 	0;
	mov.u32 	%r3855, %r2952;
	mov.u32 	%r3856, %r2952;
	mov.u32 	%r3857, %r2952;
	mov.u32 	%r3858, %r2952;
	@%p277 bra 	$L__BB0_271;
	bra.uni 	$L__BB0_190;
$L__BB0_271:                            // %pass17946
                                        //   in Loop: Header=BB0_188 Depth=2
	ld.shared.u32 	%r3858, [%rd11];
	ld.shared.u32 	%r3857, [%rd12];
	ld.shared.u32 	%r3856, [%rd13];
	ld.shared.u32 	%r3855, [%rd14];
$L__BB0_190:                            // %L38221
                                        //   in Loop: Header=BB0_188 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3081, %r3078}, {%r573, %r576}, {%r3858}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3090, %r3087}, {%r573, %r576}, {%r3857}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3099, %r3096}, {%r573, %r576}, {%r3856}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3108, %r3105}, {%r573, %r576}, {%r3855}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3074, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3076, %r3074, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r625, %r3081, %r3076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3083, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r3083, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r625, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3092, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3094, %r3092, %r3096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r625, %r3099, %r3094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3101, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r3101, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r625, %r3108, %r3103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r628, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r625, %r3078, %r3110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r628, %r3090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r625, %r3087, %r3117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r628, %r3099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r625, %r3096, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r628, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r625, %r3105, %r3131;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3179, %r3182}, {%r669, %r675, %r672, %r678}, {%r3079, %r3113}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3198, %r3201}, {%r669, %r675, %r672, %r678}, {%r3088, %r3120}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3186, %r3190}, {%r669, %r675, %r672, %r678}, {%r3097, %r3127}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3205, %r3209}, {%r669, %r675, %r672, %r678}, {%r3106, %r3134}, {%r2952, %r2952};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3178, %r3179, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3182, %r3182, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3186, %r3186, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r3190, %r3190, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3895, %r1948, %r3189, %r3829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3197, %r3198, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3201, %r3201, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r3205, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3209, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3894, %r1948, %r3208, %r3828;
	// end inline asm
	add.s32 	%r3892, %r3826, 1;
	setp.eq.s32 	%p329, %r3892, 3;
	@%p329 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_194;
$L__BB0_191:                            // %pass18409
                                        //   in Loop: Header=BB0_188 Depth=2
	@%p91 bra 	$L__BB0_193;
// %bb.192:                             // %pass18419
                                        //   in Loop: Header=BB0_188 Depth=2
	mul.lo.s32 	%r3216, %r3827, 589824;
	add.s32 	%r3217, %r119, %r3216;
	cvt.s64.s32 	%rd374, %r3217;
	add.s64 	%rd375, %rd374, %rd15;
	mul.hi.s64 	%rd376, %rd375, 1024819115206086201;
	shr.u64 	%rd377, %rd376, 63;
	shr.s64 	%rd378, %rd376, 25;
	add.s64 	%rd379, %rd378, %rd377;
	setp.lt.s64 	%p331, %rd375, 0;
	mul.lo.s64 	%rd380, %rd379, 603979776;
	setp.ne.s64 	%p332, %rd380, %rd375;
	and.pred  	%p333, %p331, %p332;
	selp.s64 	%rd381, -1, 0, %p333;
	add.s64 	%rd382, %rd379, %rd381;
	mul.lo.s64 	%rd383, %rd382, -603979776;
	add.s64 	%rd384, %rd383, %rd375;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3895;
	add.s32 	%r3218, %r120, %r3216;
	cvt.s64.s32 	%rd387, %r3218;
	add.s64 	%rd388, %rd387, %rd15;
	mul.hi.s64 	%rd389, %rd388, 1024819115206086201;
	shr.u64 	%rd390, %rd389, 63;
	shr.s64 	%rd391, %rd389, 25;
	add.s64 	%rd392, %rd391, %rd390;
	setp.lt.s64 	%p334, %rd388, 0;
	mul.lo.s64 	%rd393, %rd392, 603979776;
	setp.ne.s64 	%p335, %rd393, %rd388;
	and.pred  	%p336, %p334, %p335;
	selp.s64 	%rd394, -1, 0, %p336;
	add.s64 	%rd395, %rd392, %rd394;
	mul.lo.s64 	%rd396, %rd395, -603979776;
	add.s64 	%rd397, %rd396, %rd388;
	shl.b64 	%rd398, %rd397, 2;
	add.s64 	%rd399, %rd4, %rd398;
	st.global.u32 	[%rd399], %r3894;
$L__BB0_193:                            // %L38753
                                        //   in Loop: Header=BB0_188 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3892, 0;
	mov.u32 	%r3894, %r3892;
	mov.u32 	%r3895, %r3892;
$L__BB0_194:                            // %pass18585
                                        //   in Loop: Header=BB0_188 Depth=2
	mov.u32 	%r3220, 0;
	mov.u32 	%r3859, %r3220;
	mov.u32 	%r3860, %r3220;
	mov.u32 	%r3861, %r3220;
	mov.u32 	%r3862, %r3220;
	@%p91 bra 	$L__BB0_272;
// %bb.195:                             // %pass18721
                                        //   in Loop: Header=BB0_188 Depth=2
	ld.shared.u32 	%r3862, [%rd29];
	ld.shared.u32 	%r3861, [%rd30];
	ld.shared.u32 	%r3860, [%rd31];
	ld.shared.u32 	%r3859, [%rd32];
$L__BB0_272:                            // %L39832
                                        //   in Loop: Header=BB0_188 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3256, %r3253}, {%r573, %r576}, {%r3862}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3265, %r3262}, {%r573, %r576}, {%r3861}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3274, %r3271}, {%r573, %r576}, {%r3860}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3283, %r3280}, {%r573, %r576}, {%r3859}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3249, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r3249, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r625, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3258, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3260, %r3258, %r3262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r625, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3267, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3269, %r3267, %r3271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3272, %r625, %r3274, %r3269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3276, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3278, %r3276, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3281, %r625, %r3283, %r3278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3285, %r628, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r625, %r3253, %r3285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3292, %r628, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r625, %r3262, %r3292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3299, %r628, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r625, %r3271, %r3299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r628, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r625, %r3280, %r3306;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3354, %r3357}, {%r669, %r675, %r672, %r678}, {%r3254, %r3288}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3373, %r3376}, {%r669, %r675, %r672, %r678}, {%r3263, %r3295}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3361, %r3365}, {%r669, %r675, %r672, %r678}, {%r3272, %r3302}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3380, %r3384}, {%r669, %r675, %r672, %r678}, {%r3281, %r3309}, {%r3220, %r3220};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3353, %r3354, %r3354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3356, %r3357, %r3357, %r3353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3360, %r3361, %r3361, %r3356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r3365, %r3365, %r3360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3899, %r1948, %r3364, %r3895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3372, %r3373, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r3376, %r3376, %r3372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r3380, %r3380, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r3384, %r3384, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3898, %r1948, %r3383, %r3894;
	// end inline asm
	add.s32 	%r3896, %r3892, 1;
	setp.eq.s32 	%p338, %r3896, 3;
	@%p338 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_276;
$L__BB0_273:                            // %pass19184
                                        //   in Loop: Header=BB0_188 Depth=2
	@%p91 bra 	$L__BB0_275;
// %bb.274:                             // %pass19194
                                        //   in Loop: Header=BB0_188 Depth=2
	mul.lo.s32 	%r3391, %r3827, 589824;
	add.s32 	%r3392, %r119, %r3391;
	cvt.s64.s32 	%rd400, %r3392;
	add.s64 	%rd401, %rd400, %rd15;
	mul.hi.s64 	%rd402, %rd401, 1024819115206086201;
	shr.u64 	%rd403, %rd402, 63;
	shr.s64 	%rd404, %rd402, 25;
	add.s64 	%rd405, %rd404, %rd403;
	setp.lt.s64 	%p340, %rd401, 0;
	mul.lo.s64 	%rd406, %rd405, 603979776;
	setp.ne.s64 	%p341, %rd406, %rd401;
	and.pred  	%p342, %p340, %p341;
	selp.s64 	%rd407, -1, 0, %p342;
	add.s64 	%rd408, %rd405, %rd407;
	mul.lo.s64 	%rd409, %rd408, -603979776;
	add.s64 	%rd410, %rd409, %rd401;
	shl.b64 	%rd411, %rd410, 2;
	add.s64 	%rd412, %rd4, %rd411;
	st.global.u32 	[%rd412], %r3899;
	add.s32 	%r3393, %r120, %r3391;
	cvt.s64.s32 	%rd413, %r3393;
	add.s64 	%rd414, %rd413, %rd15;
	mul.hi.s64 	%rd415, %rd414, 1024819115206086201;
	shr.u64 	%rd416, %rd415, 63;
	shr.s64 	%rd417, %rd415, 25;
	add.s64 	%rd418, %rd417, %rd416;
	setp.lt.s64 	%p343, %rd414, 0;
	mul.lo.s64 	%rd419, %rd418, 603979776;
	setp.ne.s64 	%p344, %rd419, %rd414;
	and.pred  	%p345, %p343, %p344;
	selp.s64 	%rd420, -1, 0, %p345;
	add.s64 	%rd421, %rd418, %rd420;
	mul.lo.s64 	%rd422, %rd421, -603979776;
	add.s64 	%rd423, %rd422, %rd414;
	shl.b64 	%rd424, %rd423, 2;
	add.s64 	%rd425, %rd4, %rd424;
	st.global.u32 	[%rd425], %r3898;
$L__BB0_275:                            // %L40364
                                        //   in Loop: Header=BB0_188 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3896, 0;
	mov.u32 	%r3898, %r3896;
	mov.u32 	%r3899, %r3896;
$L__BB0_276:                            // %pass19360
                                        //   in Loop: Header=BB0_188 Depth=2
	mov.u32 	%r3395, 0;
	mov.u32 	%r3863, %r3395;
	mov.u32 	%r3864, %r3395;
	mov.u32 	%r3865, %r3395;
	mov.u32 	%r3866, %r3395;
	@%p91 bra 	$L__BB0_278;
// %bb.277:                             // %pass19496
                                        //   in Loop: Header=BB0_188 Depth=2
	ld.shared.u32 	%r3866, [%rd33];
	ld.shared.u32 	%r3865, [%rd34];
	ld.shared.u32 	%r3864, [%rd35];
	ld.shared.u32 	%r3863, [%rd36];
$L__BB0_278:                            // %L41443
                                        //   in Loop: Header=BB0_188 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3431, %r3428}, {%r573, %r576}, {%r3866}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3440, %r3437}, {%r573, %r576}, {%r3865}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3449, %r3446}, {%r573, %r576}, {%r3864}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3458, %r3455}, {%r573, %r576}, {%r3863}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3424, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3426, %r3424, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3429, %r625, %r3431, %r3426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3433, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3435, %r3433, %r3437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r625, %r3440, %r3435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3442, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3444, %r3442, %r3446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3447, %r625, %r3449, %r3444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3451, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3453, %r3451, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r625, %r3458, %r3453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3460, %r628, %r3431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3463, %r625, %r3428, %r3460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3467, %r628, %r3440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r625, %r3437, %r3467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3474, %r628, %r3449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r625, %r3446, %r3474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3481, %r628, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r625, %r3455, %r3481;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3529, %r3532}, {%r669, %r675, %r672, %r678}, {%r3429, %r3463}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3548, %r3551}, {%r669, %r675, %r672, %r678}, {%r3438, %r3470}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3536, %r3540}, {%r669, %r675, %r672, %r678}, {%r3447, %r3477}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3555, %r3559}, {%r669, %r675, %r672, %r678}, {%r3456, %r3484}, {%r3395, %r3395};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3528, %r3529, %r3529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r3532, %r3532, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r3536, %r3536, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r3540, %r3540, %r3535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3903, %r1948, %r3539, %r3899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3547, %r3548, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r3551, %r3551, %r3547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r3555, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r3559, %r3559, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3902, %r1948, %r3558, %r3898;
	// end inline asm
	add.s32 	%r3900, %r3896, 1;
	setp.eq.s32 	%p347, %r3900, 3;
	@%p347 bra 	$L__BB0_279;
	bra.uni 	$L__BB0_282;
$L__BB0_279:                            // %pass19959
                                        //   in Loop: Header=BB0_188 Depth=2
	@%p91 bra 	$L__BB0_281;
// %bb.280:                             // %pass19969
                                        //   in Loop: Header=BB0_188 Depth=2
	mul.lo.s32 	%r3566, %r3827, 589824;
	add.s32 	%r3567, %r119, %r3566;
	cvt.s64.s32 	%rd426, %r3567;
	add.s64 	%rd427, %rd426, %rd15;
	mul.hi.s64 	%rd428, %rd427, 1024819115206086201;
	shr.u64 	%rd429, %rd428, 63;
	shr.s64 	%rd430, %rd428, 25;
	add.s64 	%rd431, %rd430, %rd429;
	setp.lt.s64 	%p349, %rd427, 0;
	mul.lo.s64 	%rd432, %rd431, 603979776;
	setp.ne.s64 	%p350, %rd432, %rd427;
	and.pred  	%p351, %p349, %p350;
	selp.s64 	%rd433, -1, 0, %p351;
	add.s64 	%rd434, %rd431, %rd433;
	mul.lo.s64 	%rd435, %rd434, -603979776;
	add.s64 	%rd436, %rd435, %rd427;
	shl.b64 	%rd437, %rd436, 2;
	add.s64 	%rd438, %rd4, %rd437;
	st.global.u32 	[%rd438], %r3903;
	add.s32 	%r3568, %r120, %r3566;
	cvt.s64.s32 	%rd439, %r3568;
	add.s64 	%rd440, %rd439, %rd15;
	mul.hi.s64 	%rd441, %rd440, 1024819115206086201;
	shr.u64 	%rd442, %rd441, 63;
	shr.s64 	%rd443, %rd441, 25;
	add.s64 	%rd444, %rd443, %rd442;
	setp.lt.s64 	%p352, %rd440, 0;
	mul.lo.s64 	%rd445, %rd444, 603979776;
	setp.ne.s64 	%p353, %rd445, %rd440;
	and.pred  	%p354, %p352, %p353;
	selp.s64 	%rd446, -1, 0, %p354;
	add.s64 	%rd447, %rd444, %rd446;
	mul.lo.s64 	%rd448, %rd447, -603979776;
	add.s64 	%rd449, %rd448, %rd440;
	shl.b64 	%rd450, %rd449, 2;
	add.s64 	%rd451, %rd4, %rd450;
	st.global.u32 	[%rd451], %r3902;
$L__BB0_281:                            // %L41975
                                        //   in Loop: Header=BB0_188 Depth=2
	add.s32 	%r3827, %r3827, 1;
	mov.u32 	%r3900, 0;
	mov.u32 	%r3902, %r3900;
	mov.u32 	%r3903, %r3900;
$L__BB0_282:                            // %pass20135
                                        //   in Loop: Header=BB0_188 Depth=2
	mov.u32 	%r3570, 0;
	mov.u32 	%r3867, %r3570;
	mov.u32 	%r3868, %r3570;
	mov.u32 	%r3869, %r3570;
	mov.u32 	%r3870, %r3570;
	@%p91 bra 	$L__BB0_284;
// %bb.283:                             // %pass20271
                                        //   in Loop: Header=BB0_188 Depth=2
	ld.shared.u32 	%r3870, [%rd37];
	ld.shared.u32 	%r3869, [%rd38];
	ld.shared.u32 	%r3868, [%rd39];
	ld.shared.u32 	%r3867, [%rd40];
$L__BB0_284:                            // %L43054
                                        //   in Loop: Header=BB0_188 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3606, %r3603}, {%r573, %r576}, {%r3870}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3615, %r3612}, {%r573, %r576}, {%r3869}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3624, %r3621}, {%r573, %r576}, {%r3868}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3633, %r3630}, {%r573, %r576}, {%r3867}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3599, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3601, %r3599, %r3603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3604, %r625, %r3606, %r3601;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3608, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3610, %r3608, %r3612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r625, %r3615, %r3610;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3617, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3619, %r3617, %r3621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3622, %r625, %r3624, %r3619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3626, %r628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3628, %r3626, %r3630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3631, %r625, %r3633, %r3628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3635, %r628, %r3606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3638, %r625, %r3603, %r3635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3642, %r628, %r3615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3645, %r625, %r3612, %r3642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3649, %r628, %r3624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r625, %r3621, %r3649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3656, %r628, %r3633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3659, %r625, %r3630, %r3656;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3704, %r3707}, {%r669, %r675, %r672, %r678}, {%r3604, %r3638}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3723, %r3726}, {%r669, %r675, %r672, %r678}, {%r3613, %r3645}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3711, %r3715}, {%r669, %r675, %r672, %r678}, {%r3622, %r3652}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3730, %r3734}, {%r669, %r675, %r672, %r678}, {%r3631, %r3659}, {%r3570, %r3570};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3703, %r3704, %r3704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3706, %r3707, %r3707, %r3703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3710, %r3711, %r3711, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3714, %r3715, %r3715, %r3710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3829, %r1948, %r3714, %r3903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3723, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r3726, %r3726, %r3722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3729, %r3730, %r3730, %r3725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3733, %r3734, %r3734, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3828, %r1948, %r3733, %r3902;
	// end inline asm
	add.s32 	%r3826, %r3900, 1;
	setp.eq.s32 	%p356, %r3826, 3;
	@%p356 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_197;
$L__BB0_285:                            // %pass20734
                                        //   in Loop: Header=BB0_188 Depth=2
	@%p91 bra 	$L__BB0_196;
// %bb.286:                             // %pass20744
                                        //   in Loop: Header=BB0_188 Depth=2
	mul.lo.s32 	%r3741, %r3827, 589824;
	add.s32 	%r3742, %r119, %r3741;
	cvt.s64.s32 	%rd452, %r3742;
	add.s64 	%rd453, %rd452, %rd15;
	mul.hi.s64 	%rd454, %rd453, 1024819115206086201;
	shr.u64 	%rd455, %rd454, 63;
	shr.s64 	%rd456, %rd454, 25;
	add.s64 	%rd457, %rd456, %rd455;
	setp.lt.s64 	%p358, %rd453, 0;
	mul.lo.s64 	%rd458, %rd457, 603979776;
	setp.ne.s64 	%p359, %rd458, %rd453;
	and.pred  	%p360, %p358, %p359;
	selp.s64 	%rd459, -1, 0, %p360;
	add.s64 	%rd460, %rd457, %rd459;
	mul.lo.s64 	%rd461, %rd460, -603979776;
	add.s64 	%rd462, %rd461, %rd453;
	shl.b64 	%rd463, %rd462, 2;
	add.s64 	%rd464, %rd4, %rd463;
	st.global.u32 	[%rd464], %r3829;
	add.s32 	%r3743, %r120, %r3741;
	cvt.s64.s32 	%rd465, %r3743;
	add.s64 	%rd466, %rd465, %rd15;
	mul.hi.s64 	%rd467, %rd466, 1024819115206086201;
	shr.u64 	%rd468, %rd467, 63;
	shr.s64 	%rd469, %rd467, 25;
	add.s64 	%rd470, %rd469, %rd468;
	setp.lt.s64 	%p361, %rd466, 0;
	mul.lo.s64 	%rd471, %rd470, 603979776;
	setp.ne.s64 	%p362, %rd471, %rd466;
	and.pred  	%p363, %p361, %p362;
	selp.s64 	%rd472, -1, 0, %p363;
	add.s64 	%rd473, %rd470, %rd472;
	mul.lo.s64 	%rd474, %rd473, -603979776;
	add.s64 	%rd475, %rd474, %rd466;
	shl.b64 	%rd476, %rd475, 2;
	add.s64 	%rd477, %rd4, %rd476;
	st.global.u32 	[%rd477], %r3828;
	bra.uni 	$L__BB0_196;
$L__BB0_199:                            // %L43622
	mov.u32 	%r3745, 0;
	st.global.u32 	[%rd6], %r3745;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3769, 5;
	st.global.u32 	[%rd6], %r3769;
	mov.u64 	%rd524, exception4036;
	cvta.global.u64 	%rd525, %rd524;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd525;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3768, 5;
	st.global.u32 	[%rd6], %r3768;
	mov.u64 	%rd522, exception4036;
	cvta.global.u64 	%rd523, %rd522;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd523;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3767, 5;
	st.global.u32 	[%rd6], %r3767;
	mov.u64 	%rd520, exception4036;
	cvta.global.u64 	%rd521, %rd520;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd521;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3766, 5;
	st.global.u32 	[%rd6], %r3766;
	mov.u64 	%rd518, exception4036;
	cvta.global.u64 	%rd519, %rd518;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd519;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3765, 5;
	st.global.u32 	[%rd6], %r3765;
	mov.u64 	%rd516, exception4036;
	cvta.global.u64 	%rd517, %rd516;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd517;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3764, 5;
	st.global.u32 	[%rd6], %r3764;
	mov.u64 	%rd514, exception4036;
	cvta.global.u64 	%rd515, %rd514;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd515;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3763, 5;
	st.global.u32 	[%rd6], %r3763;
	mov.u64 	%rd512, exception4036;
	cvta.global.u64 	%rd513, %rd512;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd513;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3762, 5;
	st.global.u32 	[%rd6], %r3762;
	mov.u64 	%rd510, exception4036;
	cvta.global.u64 	%rd511, %rd510;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd511;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3761, 5;
	st.global.u32 	[%rd6], %r3761;
	mov.u64 	%rd508, exception4036;
	cvta.global.u64 	%rd509, %rd508;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd509;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3760, 5;
	st.global.u32 	[%rd6], %r3760;
	mov.u64 	%rd506, exception4036;
	cvta.global.u64 	%rd507, %rd506;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd507;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3759, 5;
	st.global.u32 	[%rd6], %r3759;
	mov.u64 	%rd504, exception4036;
	cvta.global.u64 	%rd505, %rd504;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd505;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3758, 5;
	st.global.u32 	[%rd6], %r3758;
	mov.u64 	%rd502, exception4036;
	cvta.global.u64 	%rd503, %rd502;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd503;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3757, 5;
	st.global.u32 	[%rd6], %r3757;
	mov.u64 	%rd500, exception4036;
	cvta.global.u64 	%rd501, %rd500;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd501;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3756, 5;
	st.global.u32 	[%rd6], %r3756;
	mov.u64 	%rd498, exception4036;
	cvta.global.u64 	%rd499, %rd498;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd499;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3755, 5;
	st.global.u32 	[%rd6], %r3755;
	mov.u64 	%rd496, exception4036;
	cvta.global.u64 	%rd497, %rd496;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd497;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3754, 5;
	st.global.u32 	[%rd6], %r3754;
	mov.u64 	%rd494, exception4036;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3753, 5;
	st.global.u32 	[%rd6], %r3753;
	mov.u64 	%rd492, exception4036;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3752, 5;
	st.global.u32 	[%rd6], %r3752;
	mov.u64 	%rd490, exception4036;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3751, 5;
	st.global.u32 	[%rd6], %r3751;
	mov.u64 	%rd488, exception4036;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3750, 5;
	st.global.u32 	[%rd6], %r3750;
	mov.u64 	%rd486, exception4036;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3749, 5;
	st.global.u32 	[%rd6], %r3749;
	mov.u64 	%rd484, exception4036;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3748, 5;
	st.global.u32 	[%rd6], %r3748;
	mov.u64 	%rd482, exception4036;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3747, 5;
	st.global.u32 	[%rd6], %r3747;
	mov.u64 	%rd480, exception4036;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3746, 5;
	st.global.u32 	[%rd6], %r3746;
	mov.u64 	%rd478, exception4036;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3771, 2;
	st.global.u32 	[%rd6], %r3771;
	mov.u64 	%rd528, exception4036;
	cvta.global.u64 	%rd529, %rd528;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd529;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3770, 3;
	st.global.u32 	[%rd6], %r3770;
	mov.u64 	%rd526, exception4036;
	cvta.global.u64 	%rd527, %rd526;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd527;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception14048;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r689, [retval0+0];
	} // callseq 61
	mov.u32 	%r691, 4;
	st.global.u32 	[%rd6], %r691;
	mov.u64 	%rd55, exception4036;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r428;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
