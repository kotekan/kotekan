// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1335>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r77, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r78, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r78, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r79, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r79, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r80, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r81, %r80, %r1;
	add.s32 	%r82, %r81, %r4;
	mul.wide.u32 	%rd24, %r82, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r83, 1;
	st.global.u32 	[%rd6], %r83;
	shr.u32 	%r5, %r1, 3;
	shl.b32 	%r84, %r3, 2;
	or.b32  	%r85, %r5, %r84;
	mul.hi.u32 	%r86, %r85, -1431655765;
	shr.u32 	%r87, %r86, 6;
	mul.lo.s32 	%r88, %r87, 96;
	sub.s32 	%r6, %r85, %r88;
	shr.u32 	%r7, %r2, 5;
	bfe.u32 	%r8, %r2, 4, 1;
	mad.lo.s32 	%r89, %r7, 192, %r6;
	mad.lo.s32 	%r90, %r8, 96, %r89;
	mul.wide.u32 	%rd25, %r90, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L345
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r349, %r9, -3;
	shl.b32 	%r350, %r3, 6;
	shl.b32 	%r351, %r1, 1;
	or.b32  	%r352, %r350, %r351;
	shl.b32 	%r353, %r1, 4;
	and.b32  	%r354, %r353, 16;
	and.b32  	%r355, %r352, 204;
	or.b32  	%r356, %r354, %r355;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r357, %r11, 6;
	shr.u32 	%r358, %r3, 2;
	cvt.u16.u32 	%rs4, %r358;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r359, %rs9;
	and.b32  	%r360, %r359, 240;
	or.b32  	%r361, %r357, %r360;
	cvt.u16.u32 	%rs10, %r361;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r362, %rs15, 256;
	mul.lo.s32 	%r363, %r7, 49152;
	mul.lo.s32 	%r364, %r8, 24576;
	add.s32 	%r365, %r364, %r363;
	or.b32  	%r366, %r365, %r356;
	add.s32 	%r367, %r366, %r362;
	shl.b32 	%r368, %r367, 2;
	cvt.u64.u32 	%rd29, %r368;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r93, %r94, %r109, %r110}, [%rd30];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r369, %rs21, 256;
	add.s32 	%r370, %r366, %r369;
	shl.b32 	%r371, %r370, 2;
	cvt.u64.u32 	%rd31, %r371;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r101, %r102, %r117, %r118}, [%rd32];
	and.b32  	%r372, %r350, 192;
	and.b32  	%r373, %r351, 12;
	or.b32  	%r374, %r354, %r363;
	or.b32  	%r375, %r374, %r373;
	or.b32  	%r376, %r375, %r372;
	add.s32 	%r377, %r364, %r376;
	or.b32  	%r378, %r377, 33;
	add.s32 	%r379, %r378, %r362;
	mul.wide.u32 	%rd33, %r379, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r125, %r126, %r141, %r142}, [%rd34+-4];
	add.s32 	%r380, %r378, %r369;
	mul.wide.u32 	%rd35, %r380, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r133, %r134, %r149, %r150}, [%rd36+-4];
	or.b32  	%r381, %r11, %r360;
	or.b32  	%r382, %r381, 1;
	mul.hi.u32 	%r383, %r382, -1431655765;
	shr.u32 	%r384, %r383, 6;
	mul.lo.s32 	%r385, %r384, 96;
	sub.s32 	%r386, %r382, %r385;
	shl.b32 	%r387, %r386, 8;
	add.s32 	%r388, %r366, %r387;
	shl.b32 	%r389, %r388, 2;
	cvt.u64.u32 	%rd37, %r389;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r157, %r158, %r173, %r174}, [%rd38];
	or.b32  	%r390, %r381, 9;
	mul.hi.u32 	%r391, %r390, -1431655765;
	shr.u32 	%r392, %r391, 6;
	mul.lo.s32 	%r393, %r392, 96;
	sub.s32 	%r394, %r390, %r393;
	shl.b32 	%r395, %r394, 8;
	add.s32 	%r396, %r366, %r395;
	shl.b32 	%r397, %r396, 2;
	cvt.u64.u32 	%rd39, %r397;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r165, %r166, %r181, %r182}, [%rd40];
	add.s32 	%r398, %r378, %r387;
	mul.wide.u32 	%rd41, %r398, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r189, %r190, %r205, %r206}, [%rd42+-4];
	add.s32 	%r399, %r378, %r395;
	mul.wide.u32 	%rd43, %r399, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r197, %r198, %r213, %r214}, [%rd44+-4];
	mov.u32 	%r95, 21520;
	// begin inline asm
	prmt.b32 %r221, %r93, %r94, %r95;
	// end inline asm
	mov.u32 	%r99, 30258;
	// begin inline asm
	prmt.b32 %r222, %r93, %r94, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r101, %r102, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r101, %r102, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r109, %r110, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r109, %r110, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r117, %r118, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r117, %r118, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r125, %r126, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r125, %r126, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r133, %r134, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r133, %r134, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r141, %r142, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r141, %r142, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r149, %r150, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r149, %r150, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r157, %r158, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r157, %r158, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r165, %r166, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r165, %r166, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r173, %r174, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r173, %r174, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r181, %r182, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r181, %r182, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r189, %r190, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r189, %r190, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r197, %r198, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r197, %r198, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r205, %r206, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r205, %r206, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r213, %r214, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r213, %r214, %r99;
	// end inline asm
	mov.u32 	%r223, 25152;
	// begin inline asm
	prmt.b32 %r220, %r221, %r222, %r223;
	// end inline asm
	mov.u32 	%r227, 29521;
	// begin inline asm
	prmt.b32 %r224, %r221, %r222, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r229, %r230, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r229, %r230, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r237, %r238, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r237, %r238, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r245, %r246, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r245, %r246, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r253, %r254, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r253, %r254, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r261, %r262, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r261, %r262, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r269, %r270, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r269, %r270, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r277, %r278, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r277, %r278, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r285, %r286, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r285, %r286, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r293, %r294, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r293, %r294, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r301, %r302, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r301, %r302, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r309, %r310, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r309, %r310, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r317, %r318, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r317, %r318, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r325, %r326, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r325, %r326, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r333, %r334, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r333, %r334, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r341, %r342, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r341, %r342, %r227;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r400, %r252, %r220, %p4;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r220, %r401, %p4;
	selp.b32 	%r403, %r401, %r252, %p4;
	selp.b32 	%r404, %r260, %r228, %p4;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r228, %r405, %p4;
	selp.b32 	%r407, %r405, %r260, %p4;
	selp.b32 	%r408, %r256, %r224, %p4;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r224, %r409, %p4;
	selp.b32 	%r411, %r409, %r256, %p4;
	selp.b32 	%r412, %r264, %r232, %p4;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r232, %r413, %p4;
	selp.b32 	%r415, %r413, %r264, %p4;
	selp.b32 	%r416, %r268, %r236, %p4;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r236, %r417, %p4;
	selp.b32 	%r419, %r417, %r268, %p4;
	selp.b32 	%r420, %r276, %r244, %p4;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r244, %r421, %p4;
	selp.b32 	%r423, %r421, %r276, %p4;
	selp.b32 	%r424, %r272, %r240, %p4;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r240, %r425, %p4;
	selp.b32 	%r427, %r425, %r272, %p4;
	selp.b32 	%r428, %r280, %r248, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r248, %r429, %p4;
	selp.b32 	%r431, %r429, %r280, %p4;
	selp.b32 	%r432, %r316, %r284, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r284, %r433, %p4;
	selp.b32 	%r435, %r433, %r316, %p4;
	selp.b32 	%r436, %r324, %r292, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r292, %r437, %p4;
	selp.b32 	%r439, %r437, %r324, %p4;
	selp.b32 	%r440, %r320, %r288, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r288, %r441, %p4;
	selp.b32 	%r443, %r441, %r320, %p4;
	selp.b32 	%r444, %r328, %r296, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r296, %r445, %p4;
	selp.b32 	%r447, %r445, %r328, %p4;
	selp.b32 	%r448, %r332, %r300, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r300, %r449, %p4;
	selp.b32 	%r451, %r449, %r332, %p4;
	selp.b32 	%r452, %r340, %r308, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r308, %r453, %p4;
	selp.b32 	%r455, %r453, %r340, %p4;
	selp.b32 	%r456, %r336, %r304, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r304, %r457, %p4;
	selp.b32 	%r459, %r457, %r336, %p4;
	selp.b32 	%r460, %r344, %r312, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r312, %r461, %p4;
	selp.b32 	%r463, %r461, %r344, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r464, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r568, %r402, %r465, %p5;
	selp.b32 	%r696, %r465, %r434, %p5;
	selp.b32 	%r466, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r830, %r406, %r467, %p5;
	selp.b32 	%r958, %r467, %r438, %p5;
	selp.b32 	%r468, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r574, %r410, %r469, %p5;
	selp.b32 	%r702, %r469, %r442, %p5;
	selp.b32 	%r470, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r836, %r414, %r471, %p5;
	selp.b32 	%r964, %r471, %r446, %p5;
	selp.b32 	%r472, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r600, %r418, %r473, %p5;
	selp.b32 	%r728, %r473, %r450, %p5;
	selp.b32 	%r474, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r862, %r422, %r475, %p5;
	selp.b32 	%r990, %r475, %r454, %p5;
	selp.b32 	%r476, %r458, %r426, %p5;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r606, %r426, %r477, %p5;
	selp.b32 	%r734, %r477, %r458, %p5;
	selp.b32 	%r478, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r868, %r430, %r479, %p5;
	selp.b32 	%r996, %r479, %r462, %p5;
	selp.b32 	%r480, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r632, %r403, %r481, %p5;
	selp.b32 	%r760, %r481, %r435, %p5;
	selp.b32 	%r482, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r894, %r407, %r483, %p5;
	selp.b32 	%r1022, %r483, %r439, %p5;
	selp.b32 	%r484, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r638, %r411, %r485, %p5;
	selp.b32 	%r766, %r485, %r443, %p5;
	selp.b32 	%r486, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r487, %r486, 4, 31, -1;
	selp.b32 	%r900, %r415, %r487, %p5;
	selp.b32 	%r1028, %r487, %r447, %p5;
	selp.b32 	%r488, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r489, %r488, 4, 31, -1;
	selp.b32 	%r664, %r419, %r489, %p5;
	selp.b32 	%r792, %r489, %r451, %p5;
	selp.b32 	%r490, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r491, %r490, 4, 31, -1;
	selp.b32 	%r926, %r423, %r491, %p5;
	selp.b32 	%r1054, %r491, %r455, %p5;
	selp.b32 	%r492, %r459, %r427, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r670, %r427, %r493, %p5;
	selp.b32 	%r798, %r493, %r459, %p5;
	selp.b32 	%r494, %r463, %r431, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r932, %r431, %r495, %p5;
	selp.b32 	%r1060, %r495, %r463, %p5;
	shl.b32 	%r496, %r2, 11;
	and.b32  	%r44, %r496, 30720;
	and.b32  	%r45, %r3, 12;
	shl.b32 	%r497, %r2, 3;
	and.b32  	%r46, %r497, 3840;
	shl.b32 	%r498, %r1, 2;
	and.b32  	%r499, %r498, 28;
	and.b32  	%r500, %r4, 96;
	or.b32  	%r47, %r499, %r500;
	and.b32  	%r48, %r497, 128;
	or.b32  	%r501, %r5, %r45;
	mul.lo.s32 	%r502, %r501, 129;
	add.s32 	%r503, %r47, %r502;
	mul.wide.u32 	%rd45, %r503, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r502;
	cvt.u64.u32 	%rd48, %r47;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r504, %r501, 16;
	mul.lo.s32 	%r505, %r504, 129;
	add.s32 	%r506, %r47, %r505;
	mul.wide.u32 	%rd51, %r506, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r505;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r507, %r1, 3;
	and.b32  	%r508, %r507, 24;
	or.b32  	%r49, %r508, %r500;
	and.b32  	%r509, %r3, 3;
	mul.lo.s32 	%r510, %r509, 3200;
	and.b32  	%r50, %r351, 6;
	mul.hi.u32 	%r511, %r381, -1431655765;
	shr.u32 	%r512, %r511, 6;
	mul.lo.s32 	%r513, %r512, 96;
	sub.s32 	%r514, %r381, %r513;
	or.b32  	%r51, %r514, %r510;
	or.b32  	%r515, %r381, 8;
	mul.hi.u32 	%r516, %r515, -1431655765;
	shr.u32 	%r517, %r516, 6;
	mul.lo.s32 	%r518, %r517, 96;
	sub.s32 	%r519, %r515, %r518;
	or.b32  	%r52, %r519, %r510;
	and.b32  	%r520, %r1, 7;
	mul.lo.s32 	%r521, %r520, 100;
	add.s32 	%r522, %r6, %r521;
	mul.wide.u32 	%rd55, %r522, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r6;
	cvt.u64.u32 	%rd58, %r521;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r523, %r521, 800;
	add.s32 	%r524, %r523, %r6;
	mul.wide.u32 	%rd61, %r524, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r523;
	add.s64 	%rd63, %rd62, %rd57;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r525, %r521, 1600;
	add.s32 	%r526, %r525, %r6;
	mul.wide.u32 	%rd65, %r526, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r525;
	add.s64 	%rd67, %rd66, %rd57;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r527, %r1, 24;
	mul.lo.s32 	%r528, %r527, 100;
	add.s32 	%r529, %r6, %r528;
	mul.wide.u32 	%rd69, %r529, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r528;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r53, %r83, %r10;
	min.u32 	%r54, %r349, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r531, %r1, 5;
	and.b32  	%r532, %r531, 64;
	shl.b32 	%r533, %r2, 9;
	and.b32  	%r55, %r533, 245760;
	shl.b32 	%r534, %r6, 18;
	and.b32  	%r535, %r533, 8192;
	or.b32  	%r56, %r534, %r535;
	and.b32  	%r536, %r507, 32;
	or.b32  	%r537, %r536, %r44;
	or.b32  	%r538, %r537, %r354;
	or.b32  	%r57, %r538, %r532;
	mov.u32 	%r348, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1326, %r348;
LBB0_7:                                 // %L2388
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1327, %r348;
	mov.u32 	%r1328, %r348;
	mov.u32 	%r1329, %r348;
	mov.u32 	%r1330, %r348;
	mov.u32 	%r1331, %r348;
	mov.u32 	%r1332, %r348;
	mov.u32 	%r1333, %r348;
LBB0_8:                                 // %L2391
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2411
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r540, %r1327, %r1326;
	or.b32  	%r541, %r540, %r5;
	or.b32  	%r542, %r541, %r45;
	or.b32  	%r543, %r542, %r44;
	shl.b32 	%r544, %r543, 12;
	or.b32  	%r545, %r544, %r46;
	or.b32  	%r546, %r545, %r47;
	or.b32  	%r547, %r546, %r48;
	mul.wide.s32 	%rd73, %r547, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r548, %r549, %r550, %r551}, [%rd74];
	or.b32  	%r552, %r547, 65536;
	mul.wide.s32 	%rd75, %r552, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r553, %r554, %r555, %r556}, [%rd76];
	st.shared.u32 	[%rd7], %r548;
	st.shared.u32 	[%rd8+4], %r549;
	st.shared.u32 	[%rd8+8], %r550;
	st.shared.u32 	[%rd8+12], %r551;
	st.shared.u32 	[%rd9], %r553;
	st.shared.u32 	[%rd10+4], %r554;
	st.shared.u32 	[%rd10+8], %r555;
	st.shared.u32 	[%rd10+12], %r556;
LBB0_10:                                // %L4289
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r570, 0;
	mov.u32 	%r1334, %r570;
LBB0_11:                                // %L4291
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1082, %r1334, %r11;
	mad.lo.s32 	%r1083, %r1082, 129, %r49;
	mul.wide.u32 	%rd77, %r1083, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r559, [%rd79];
	mov.u32 	%r560, 134744072;
	mov.u32 	%r561, 252645135;
	// begin inline asm
	lop3.b32 %r558, %r559, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1084, %r558, 2021161080;
	xor.b32  	%r569, %r1084, -2139062144;
	shr.u32 	%r563, %r559, 4;
	// begin inline asm
	lop3.b32 %r562, %r563, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1085, %r562, 2021161080;
	xor.b32  	%r575, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r568}, {%r569}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r574}, {%r575}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r568}, {%r575}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r574}, {%r569}, {%r578, %r579};
	// end inline asm
	ld.shared.u32 	%r591, [%rd79+4];
	// begin inline asm
	lop3.b32 %r590, %r591, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1086, %r590, 2021161080;
	xor.b32  	%r601, %r1086, -2139062144;
	shr.u32 	%r595, %r591, 4;
	// begin inline asm
	lop3.b32 %r594, %r595, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1087, %r594, 2021161080;
	xor.b32  	%r607, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r600}, {%r601}, {%r566, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r606}, {%r607}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r600}, {%r607}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r606}, {%r601}, {%r610, %r611};
	// end inline asm
	ld.shared.u32 	%r623, [%rd79+8];
	// begin inline asm
	lop3.b32 %r622, %r623, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1088, %r622, 2021161080;
	xor.b32  	%r633, %r1088, -2139062144;
	shr.u32 	%r627, %r623, 4;
	// begin inline asm
	lop3.b32 %r626, %r627, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1089, %r626, 2021161080;
	xor.b32  	%r639, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r632}, {%r633}, {%r598, %r599};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r638}, {%r639}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r632}, {%r639}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r638}, {%r633}, {%r642, %r643};
	// end inline asm
	ld.shared.u32 	%r655, [%rd79+12];
	// begin inline asm
	lop3.b32 %r654, %r655, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1090, %r654, 2021161080;
	xor.b32  	%r665, %r1090, -2139062144;
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r658, %r659, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1091, %r658, 2021161080;
	xor.b32  	%r671, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r664}, {%r665}, {%r630, %r631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r670}, {%r671}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r664}, {%r671}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r670}, {%r665}, {%r674, %r675};
	// end inline asm
	ld.shared.u32 	%r687, [%rd79+16];
	// begin inline asm
	lop3.b32 %r686, %r687, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1092, %r686, 2021161080;
	xor.b32  	%r697, %r1092, -2139062144;
	shr.u32 	%r691, %r687, 4;
	// begin inline asm
	lop3.b32 %r690, %r691, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1093, %r690, 2021161080;
	xor.b32  	%r703, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r696}, {%r697}, {%r662, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r702}, {%r703}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r696}, {%r703}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r702}, {%r697}, {%r706, %r707};
	// end inline asm
	ld.shared.u32 	%r719, [%rd79+20];
	// begin inline asm
	lop3.b32 %r718, %r719, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1094, %r718, 2021161080;
	xor.b32  	%r729, %r1094, -2139062144;
	shr.u32 	%r723, %r719, 4;
	// begin inline asm
	lop3.b32 %r722, %r723, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1095, %r722, 2021161080;
	xor.b32  	%r735, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r728}, {%r729}, {%r694, %r695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r734}, {%r735}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r728}, {%r735}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r734}, {%r729}, {%r738, %r739};
	// end inline asm
	ld.shared.u32 	%r751, [%rd79+24];
	// begin inline asm
	lop3.b32 %r750, %r751, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1096, %r750, 2021161080;
	xor.b32  	%r761, %r1096, -2139062144;
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r754, %r755, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1097, %r754, 2021161080;
	xor.b32  	%r767, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r760}, {%r761}, {%r726, %r727};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r766}, {%r767}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r760}, {%r767}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r766}, {%r761}, {%r770, %r771};
	// end inline asm
	ld.shared.u32 	%r783, [%rd79+28];
	// begin inline asm
	lop3.b32 %r782, %r783, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1098, %r782, 2021161080;
	xor.b32  	%r793, %r1098, -2139062144;
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r786, %r787, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1099, %r786, 2021161080;
	xor.b32  	%r799, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r792}, {%r793}, {%r758, %r759};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r798}, {%r799}, {%r764, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r792}, {%r799}, {%r776, %r777};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r798}, {%r793}, {%r802, %r803};
	// end inline asm
	sub.s32 	%r1100, %r790, %r796;
	add.s32 	%r1101, %r1100, 4;
	shr.s32 	%r816, %r1101, 3;
	add.s32 	%r1102, %r808, 4;
	shr.s32 	%r815, %r1102, 3;
	sub.s32 	%r1103, %r791, %r797;
	add.s32 	%r1104, %r1103, 4;
	shr.s32 	%r819, %r1104, 3;
	add.s32 	%r1105, %r809, 4;
	shr.s32 	%r818, %r1105, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r814, %r815, %r816;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r817, %r818, %r819;
	// end inline asm
	or.b32  	%r1106, %r1334, %r50;
	mul.lo.s32 	%r1107, %r1106, 100;
	add.s32 	%r1108, %r51, %r1107;
	mul.wide.u32 	%rd80, %r1108, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r814;
	add.s32 	%r1109, %r1107, 100;
	add.s32 	%r1110, %r51, %r1109;
	mul.wide.u32 	%rd83, %r1110, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r817;
	ld.shared.u32 	%r821, [%rd79];
	// begin inline asm
	lop3.b32 %r820, %r821, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1111, %r820, 2021161080;
	xor.b32  	%r831, %r1111, -2139062144;
	shr.u32 	%r825, %r821, 4;
	// begin inline asm
	lop3.b32 %r824, %r825, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1112, %r824, 2021161080;
	xor.b32  	%r837, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r830}, {%r831}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r836}, {%r837}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r830}, {%r837}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r836}, {%r831}, {%r840, %r841};
	// end inline asm
	ld.shared.u32 	%r853, [%rd79+4];
	// begin inline asm
	lop3.b32 %r852, %r853, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1113, %r852, 2021161080;
	xor.b32  	%r863, %r1113, -2139062144;
	shr.u32 	%r857, %r853, 4;
	// begin inline asm
	lop3.b32 %r856, %r857, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1114, %r856, 2021161080;
	xor.b32  	%r869, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r862}, {%r863}, {%r828, %r829};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r868}, {%r869}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r862}, {%r869}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r868}, {%r863}, {%r872, %r873};
	// end inline asm
	ld.shared.u32 	%r885, [%rd79+8];
	// begin inline asm
	lop3.b32 %r884, %r885, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1115, %r884, 2021161080;
	xor.b32  	%r895, %r1115, -2139062144;
	shr.u32 	%r889, %r885, 4;
	// begin inline asm
	lop3.b32 %r888, %r889, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1116, %r888, 2021161080;
	xor.b32  	%r901, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r894}, {%r895}, {%r860, %r861};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r900}, {%r901}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r894}, {%r901}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r900}, {%r895}, {%r904, %r905};
	// end inline asm
	ld.shared.u32 	%r917, [%rd79+12];
	// begin inline asm
	lop3.b32 %r916, %r917, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1117, %r916, 2021161080;
	xor.b32  	%r927, %r1117, -2139062144;
	shr.u32 	%r921, %r917, 4;
	// begin inline asm
	lop3.b32 %r920, %r921, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1118, %r920, 2021161080;
	xor.b32  	%r933, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r926}, {%r927}, {%r892, %r893};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r932}, {%r933}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r926}, {%r933}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r932}, {%r927}, {%r936, %r937};
	// end inline asm
	ld.shared.u32 	%r949, [%rd79+16];
	// begin inline asm
	lop3.b32 %r948, %r949, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1119, %r948, 2021161080;
	xor.b32  	%r959, %r1119, -2139062144;
	shr.u32 	%r953, %r949, 4;
	// begin inline asm
	lop3.b32 %r952, %r953, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1120, %r952, 2021161080;
	xor.b32  	%r965, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r958}, {%r959}, {%r924, %r925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r964}, {%r965}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r958}, {%r965}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r964}, {%r959}, {%r968, %r969};
	// end inline asm
	ld.shared.u32 	%r981, [%rd79+20];
	// begin inline asm
	lop3.b32 %r980, %r981, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1121, %r980, 2021161080;
	xor.b32  	%r991, %r1121, -2139062144;
	shr.u32 	%r985, %r981, 4;
	// begin inline asm
	lop3.b32 %r984, %r985, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1122, %r984, 2021161080;
	xor.b32  	%r997, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r990}, {%r991}, {%r956, %r957};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r996}, {%r997}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r990}, {%r997}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r996}, {%r991}, {%r1000, %r1001};
	// end inline asm
	ld.shared.u32 	%r1013, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1123, %r1012, 2021161080;
	xor.b32  	%r1023, %r1123, -2139062144;
	shr.u32 	%r1017, %r1013, 4;
	// begin inline asm
	lop3.b32 %r1016, %r1017, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1124, %r1016, 2021161080;
	xor.b32  	%r1029, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r1022}, {%r1023}, {%r988, %r989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r1028}, {%r1029}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r1022}, {%r1029}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r1028}, {%r1023}, {%r1032, %r1033};
	// end inline asm
	ld.shared.u32 	%r1045, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1044, %r1045, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1125, %r1044, 2021161080;
	xor.b32  	%r1055, %r1125, -2139062144;
	shr.u32 	%r1049, %r1045, 4;
	// begin inline asm
	lop3.b32 %r1048, %r1049, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1126, %r1048, 2021161080;
	xor.b32  	%r1061, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1052, %r1053}, {%r1054}, {%r1055}, {%r1020, %r1021};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1058, %r1059}, {%r1060}, {%r1061}, {%r1026, %r1027};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1064, %r1065}, {%r1054}, {%r1061}, {%r1038, %r1039};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1070, %r1071}, {%r1060}, {%r1055}, {%r1064, %r1065};
	// end inline asm
	sub.s32 	%r1127, %r1052, %r1058;
	add.s32 	%r1128, %r1127, 4;
	shr.s32 	%r1078, %r1128, 3;
	add.s32 	%r1129, %r1070, 4;
	shr.s32 	%r1077, %r1129, 3;
	sub.s32 	%r1130, %r1053, %r1059;
	add.s32 	%r1131, %r1130, 4;
	shr.s32 	%r1081, %r1131, 3;
	add.s32 	%r1132, %r1071, 4;
	shr.s32 	%r1080, %r1132, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1076, %r1077, %r1078;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1079, %r1080, %r1081;
	// end inline asm
	add.s32 	%r1133, %r52, %r1107;
	mul.wide.u32 	%rd85, %r1133, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1076;
	add.s32 	%r1134, %r52, %r1109;
	mul.wide.u32 	%rd87, %r1134, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1079;
	add.s32 	%r1334, %r1334, 8;
	setp.ne.s32 	%p7, %r1334, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8454
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1153, [%rd11];
	ld.shared.u32 	%r1154, [%rd12+12800];
	ld.shared.u32 	%r1155, [%rd12+25600];
	ld.shared.u32 	%r1156, [%rd12+38400];
	ld.shared.u32 	%r1157, [%rd13];
	ld.shared.u32 	%r1158, [%rd14+12800];
	ld.shared.u32 	%r1159, [%rd14+25600];
	ld.shared.u32 	%r1160, [%rd14+38400];
	ld.shared.u32 	%r1161, [%rd15];
	ld.shared.u32 	%r1162, [%rd16+12800];
	ld.shared.u32 	%r1163, [%rd16+25600];
	ld.shared.u32 	%r1164, [%rd16+38400];
	ld.shared.u32 	%r1165, [%rd17];
	ld.shared.u32 	%r1166, [%rd18+12800];
	ld.shared.u32 	%r1167, [%rd18+25600];
	ld.shared.u32 	%r1168, [%rd18+38400];
	cvt.s32.s16 	%r1169, %r1153;
	shr.s32 	%r1170, %r1153, 16;
	cvt.s32.s16 	%r1171, %r1154;
	shr.s32 	%r1172, %r1154, 16;
	cvt.s32.s16 	%r1173, %r1155;
	shr.s32 	%r1174, %r1155, 16;
	cvt.s32.s16 	%r1175, %r1156;
	shr.s32 	%r1176, %r1156, 16;
	cvt.s32.s16 	%r1177, %r1157;
	shr.s32 	%r1178, %r1157, 16;
	cvt.s32.s16 	%r1179, %r1158;
	shr.s32 	%r1180, %r1158, 16;
	cvt.s32.s16 	%r1181, %r1159;
	shr.s32 	%r1182, %r1159, 16;
	cvt.s32.s16 	%r1183, %r1160;
	shr.s32 	%r1184, %r1160, 16;
	cvt.s32.s16 	%r1185, %r1161;
	shr.s32 	%r1186, %r1161, 16;
	cvt.s32.s16 	%r1187, %r1162;
	shr.s32 	%r1188, %r1162, 16;
	cvt.s32.s16 	%r1189, %r1163;
	shr.s32 	%r1190, %r1163, 16;
	cvt.s32.s16 	%r1191, %r1164;
	shr.s32 	%r1192, %r1164, 16;
	cvt.s32.s16 	%r1193, %r1165;
	shr.s32 	%r1194, %r1165, 16;
	cvt.s32.s16 	%r1195, %r1166;
	shr.s32 	%r1196, %r1166, 16;
	cvt.s32.s16 	%r1197, %r1167;
	shr.s32 	%r1198, %r1167, 16;
	cvt.s32.s16 	%r1199, %r1168;
	shr.s32 	%r1200, %r1168, 16;
	add.s32 	%r1201, %r1169, %r53;
	add.s32 	%r1202, %r1201, %r1171;
	add.s32 	%r1203, %r1202, %r1173;
	add.s32 	%r1204, %r1203, %r1175;
	shr.s32 	%r1205, %r1204, %r54;
	add.s32 	%r1206, %r1170, %r53;
	add.s32 	%r1207, %r1206, %r1172;
	add.s32 	%r1208, %r1207, %r1174;
	add.s32 	%r1209, %r1208, %r1176;
	shr.s32 	%r1210, %r1209, %r54;
	add.s32 	%r1211, %r1177, %r53;
	add.s32 	%r1212, %r1211, %r1179;
	add.s32 	%r1213, %r1212, %r1181;
	add.s32 	%r1214, %r1213, %r1183;
	shr.s32 	%r1215, %r1214, %r54;
	add.s32 	%r1216, %r1178, %r53;
	add.s32 	%r1217, %r1216, %r1180;
	add.s32 	%r1218, %r1217, %r1182;
	add.s32 	%r1219, %r1218, %r1184;
	shr.s32 	%r1220, %r1219, %r54;
	add.s32 	%r1221, %r1185, %r53;
	add.s32 	%r1222, %r1221, %r1187;
	add.s32 	%r1223, %r1222, %r1189;
	add.s32 	%r1224, %r1223, %r1191;
	shr.s32 	%r1225, %r1224, %r54;
	add.s32 	%r1226, %r1186, %r53;
	add.s32 	%r1227, %r1226, %r1188;
	add.s32 	%r1228, %r1227, %r1190;
	add.s32 	%r1229, %r1228, %r1192;
	shr.s32 	%r1230, %r1229, %r54;
	add.s32 	%r1231, %r1193, %r53;
	add.s32 	%r1232, %r1231, %r1195;
	add.s32 	%r1233, %r1232, %r1197;
	add.s32 	%r1234, %r1233, %r1199;
	shr.s32 	%r1235, %r1234, %r54;
	add.s32 	%r1236, %r1194, %r53;
	add.s32 	%r1237, %r1236, %r1196;
	add.s32 	%r1238, %r1237, %r1198;
	add.s32 	%r1239, %r1238, %r1200;
	shr.s32 	%r1240, %r1239, %r54;
	max.s32 	%r1241, %r1205, -7;
	min.s32 	%r1140, %r1241, 7;
	max.s32 	%r1242, %r1210, -7;
	min.s32 	%r1147, %r1242, 7;
	max.s32 	%r1243, %r1215, -7;
	min.s32 	%r1139, %r1243, 7;
	max.s32 	%r1244, %r1220, -7;
	min.s32 	%r1146, %r1244, 7;
	max.s32 	%r1245, %r1225, -7;
	min.s32 	%r1137, %r1245, 7;
	max.s32 	%r1246, %r1230, -7;
	min.s32 	%r1144, %r1246, 7;
	max.s32 	%r1247, %r1235, -7;
	min.s32 	%r1136, %r1247, 7;
	max.s32 	%r1248, %r1240, -7;
	min.s32 	%r1143, %r1248, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1135, %r1136, %r1137, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1138, %r1139, %r1140, %r1135;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1142, %r1143, %r1144, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, %r1142;
	// end inline asm
	shl.b32 	%r1152, %r1145, 4;
	// begin inline asm
	lop3.b32 %r1259, %r561, %r1138, %r1152, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1327, 0;
	selp.b32 	%r1332, %r1259, %r1332, %p8;
	selp.b32 	%r1333, %r1259, %r1333, %p8;
	setp.eq.s32 	%p9, %r1327, 32;
	selp.b32 	%r1328, %r1259, %r1328, %p9;
	selp.b32 	%r1329, %r1259, %r1329, %p9;
	setp.eq.s32 	%p10, %r1327, 64;
	selp.b32 	%r1330, %r1259, %r1330, %p10;
	selp.b32 	%r1331, %r1259, %r1331, %p10;
	add.s32 	%r75, %r1327, 32;
	setp.ne.s32 	%p11, %r1327, 96;
	mov.u32 	%r1327, %r75;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11190
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1249, %r1332, %r1328, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1253, %r1333, %r1329, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1257, %r1330, %r1259, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1261, %r1331, %r1259, %r227;
	// end inline asm
	selp.b32 	%r1297, %r1253, %r1249, %p12;
	shfl.sync.bfly.b32	%r1298, %r1297, 1, 31, -1;
	selp.b32 	%r1266, %r1249, %r1298, %p12;
	selp.b32 	%r1267, %r1298, %r1253, %p12;
	selp.b32 	%r1299, %r1261, %r1257, %p12;
	shfl.sync.bfly.b32	%r1300, %r1299, 1, 31, -1;
	selp.b32 	%r1274, %r1257, %r1300, %p12;
	selp.b32 	%r1275, %r1300, %r1261, %p12;
	// begin inline asm
	prmt.b32 %r1265, %r1266, %r1267, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1266, %r1267, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1274, %r1275, %r223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1274, %r1275, %r227;
	// end inline asm
	selp.b32 	%r1301, %r1273, %r1265, %p4;
	shfl.sync.bfly.b32	%r1302, %r1301, 2, 31, -1;
	selp.b32 	%r1282, %r1265, %r1302, %p4;
	selp.b32 	%r1283, %r1302, %r1273, %p4;
	selp.b32 	%r1303, %r1277, %r1269, %p4;
	shfl.sync.bfly.b32	%r1304, %r1303, 2, 31, -1;
	selp.b32 	%r1290, %r1269, %r1304, %p4;
	selp.b32 	%r1291, %r1304, %r1277, %p4;
	// begin inline asm
	prmt.b32 %r1281, %r1282, %r1283, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1282, %r1283, %r99;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1290, %r1291, %r95;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1290, %r1291, %r99;
	// end inline asm
	selp.b32 	%r1305, %r1289, %r1281, %p5;
	shfl.sync.bfly.b32	%r1306, %r1305, 4, 31, -1;
	selp.b32 	%r1307, %r1281, %r1306, %p5;
	selp.b32 	%r1308, %r1306, %r1289, %p5;
	selp.b32 	%r1309, %r1293, %r1285, %p5;
	shfl.sync.bfly.b32	%r1310, %r1309, 4, 31, -1;
	selp.b32 	%r1311, %r1285, %r1310, %p5;
	selp.b32 	%r1312, %r1310, %r1293, %p5;
	selp.b32 	%r1313, %r1311, %r1307, %p12;
	shfl.sync.bfly.b32	%r1314, %r1313, 1, 31, -1;
	selp.b32 	%r1315, %r1307, %r1314, %p12;
	selp.b32 	%r1316, %r1314, %r1311, %p12;
	selp.b32 	%r1317, %r1312, %r1308, %p12;
	shfl.sync.bfly.b32	%r1318, %r1317, 1, 31, -1;
	selp.b32 	%r1319, %r1308, %r1318, %p12;
	selp.b32 	%r1320, %r1318, %r1312, %p12;
	or.b32  	%r1321, %r57, %r1326;
	shr.u32 	%r1322, %r1321, 2;
	or.b32  	%r1323, %r1322, %r55;
	add.s32 	%r1324, %r56, %r1323;
	mul.wide.u32 	%rd89, %r1324, 4;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1315, %r1319, %r1316, %r1320};
	add.s32 	%r76, %r1326, 128;
	setp.ne.s32 	%p15, %r1326, 1920;
	mov.u32 	%r1326, %r76;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11593
	mov.u32 	%r1325, 0;
	st.global.u32 	[%rd6], %r1325;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r91, 2;
	st.global.u32 	[%rd6], %r91;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r77;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
