// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1326>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r75, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r76, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r77, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r77, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r78, %r3, %r1;
	mad.lo.s32 	%r79, %r4, 768, %r78;
	mul.wide.u32 	%rd24, %r79, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r80, 1;
	st.global.u32 	[%rd6], %r80;
	bfe.u32 	%r5, %r4, 4, 1;
	shr.u32 	%r6, %r1, 3;
	shl.b32 	%r81, %r2, 2;
	or.b32  	%r82, %r6, %r81;
	mul.hi.u32 	%r83, %r82, -1431655765;
	shr.u32 	%r84, %r83, 6;
	mul.lo.s32 	%r85, %r84, 96;
	sub.s32 	%r7, %r82, %r85;
	shr.u32 	%r8, %r4, 5;
	mad.lo.s32 	%r86, %r8, 192, %r7;
	mad.lo.s32 	%r87, %r5, 96, %r86;
	mul.wide.u32 	%rd25, %r87, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L349
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r346, %r9, -3;
	shl.b32 	%r347, %r2, 6;
	shl.b32 	%r348, %r1, 4;
	and.b32  	%r349, %r348, 16;
	shl.b32 	%r350, %r1, 1;
	and.b32  	%r351, %r350, 12;
	and.b32  	%r352, %r347, 192;
	shr.u32 	%r353, %r2, 2;
	cvt.u16.u32 	%rs4, %r353;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r354, %rs9;
	and.b32  	%r355, %r354, 240;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r356, %r11, 6;
	or.b32  	%r357, %r356, %r355;
	cvt.u16.u32 	%rs10, %r357;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r358, %rs15, 256;
	mul.lo.s32 	%r359, %r8, 49152;
	or.b32  	%r360, %r352, %r349;
	or.b32  	%r361, %r360, %r351;
	or.b32  	%r362, %r361, %r359;
	mad.lo.s32 	%r363, %r5, 24576, %r362;
	add.s32 	%r364, %r363, %r358;
	shl.b32 	%r365, %r364, 2;
	cvt.u64.u32 	%rd29, %r365;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r90, %r91, %r106, %r107}, [%rd30];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r366, %rs21, 256;
	add.s32 	%r367, %r363, %r366;
	shl.b32 	%r368, %r367, 2;
	cvt.u64.u32 	%rd31, %r368;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r98, %r99, %r114, %r115}, [%rd32];
	or.b32  	%r369, %r363, 33;
	add.s32 	%r370, %r369, %r358;
	mul.wide.u32 	%rd33, %r370, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r122, %r123, %r138, %r139}, [%rd34+-4];
	add.s32 	%r371, %r369, %r366;
	mul.wide.u32 	%rd35, %r371, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r130, %r131, %r146, %r147}, [%rd36+-4];
	or.b32  	%r372, %r11, %r355;
	or.b32  	%r373, %r372, 1;
	mul.hi.u32 	%r374, %r373, -1431655765;
	shr.u32 	%r375, %r374, 6;
	mul.lo.s32 	%r376, %r375, 96;
	sub.s32 	%r377, %r373, %r376;
	shl.b32 	%r378, %r377, 8;
	add.s32 	%r379, %r363, %r378;
	shl.b32 	%r380, %r379, 2;
	cvt.u64.u32 	%rd37, %r380;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r154, %r155, %r170, %r171}, [%rd38];
	or.b32  	%r381, %r372, 9;
	mul.hi.u32 	%r382, %r381, -1431655765;
	shr.u32 	%r383, %r382, 6;
	mul.lo.s32 	%r384, %r383, 96;
	sub.s32 	%r385, %r381, %r384;
	shl.b32 	%r386, %r385, 8;
	add.s32 	%r387, %r363, %r386;
	shl.b32 	%r388, %r387, 2;
	cvt.u64.u32 	%rd39, %r388;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r162, %r163, %r178, %r179}, [%rd40];
	add.s32 	%r389, %r369, %r378;
	mul.wide.u32 	%rd41, %r389, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r186, %r187, %r202, %r203}, [%rd42+-4];
	add.s32 	%r390, %r369, %r386;
	mul.wide.u32 	%rd43, %r390, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r194, %r195, %r210, %r211}, [%rd44+-4];
	mov.u32 	%r92, 21520;
	// begin inline asm
	prmt.b32 %r218, %r90, %r91, %r92;
	// end inline asm
	mov.u32 	%r96, 30258;
	// begin inline asm
	prmt.b32 %r219, %r90, %r91, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r98, %r99, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r98, %r99, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r96;
	// end inline asm
	mov.u32 	%r220, 25152;
	// begin inline asm
	prmt.b32 %r217, %r218, %r219, %r220;
	// end inline asm
	mov.u32 	%r224, 29521;
	// begin inline asm
	prmt.b32 %r221, %r218, %r219, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r225, %r226, %r227, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r226, %r227, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r224;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r391, %r249, %r217, %p4;
	shfl.sync.bfly.b32	%r392, %r391, 2, 31, -1;
	selp.b32 	%r393, %r217, %r392, %p4;
	selp.b32 	%r394, %r392, %r249, %p4;
	selp.b32 	%r395, %r257, %r225, %p4;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r225, %r396, %p4;
	selp.b32 	%r398, %r396, %r257, %p4;
	selp.b32 	%r399, %r253, %r221, %p4;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r221, %r400, %p4;
	selp.b32 	%r402, %r400, %r253, %p4;
	selp.b32 	%r403, %r261, %r229, %p4;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r229, %r404, %p4;
	selp.b32 	%r406, %r404, %r261, %p4;
	selp.b32 	%r407, %r265, %r233, %p4;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r233, %r408, %p4;
	selp.b32 	%r410, %r408, %r265, %p4;
	selp.b32 	%r411, %r273, %r241, %p4;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r241, %r412, %p4;
	selp.b32 	%r414, %r412, %r273, %p4;
	selp.b32 	%r415, %r269, %r237, %p4;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r237, %r416, %p4;
	selp.b32 	%r418, %r416, %r269, %p4;
	selp.b32 	%r419, %r277, %r245, %p4;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r245, %r420, %p4;
	selp.b32 	%r422, %r420, %r277, %p4;
	selp.b32 	%r423, %r313, %r281, %p4;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r281, %r424, %p4;
	selp.b32 	%r426, %r424, %r313, %p4;
	selp.b32 	%r427, %r321, %r289, %p4;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r289, %r428, %p4;
	selp.b32 	%r430, %r428, %r321, %p4;
	selp.b32 	%r431, %r317, %r285, %p4;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r285, %r432, %p4;
	selp.b32 	%r434, %r432, %r317, %p4;
	selp.b32 	%r435, %r325, %r293, %p4;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r293, %r436, %p4;
	selp.b32 	%r438, %r436, %r325, %p4;
	selp.b32 	%r439, %r329, %r297, %p4;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r297, %r440, %p4;
	selp.b32 	%r442, %r440, %r329, %p4;
	selp.b32 	%r443, %r337, %r305, %p4;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r305, %r444, %p4;
	selp.b32 	%r446, %r444, %r337, %p4;
	selp.b32 	%r447, %r333, %r301, %p4;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r301, %r448, %p4;
	selp.b32 	%r450, %r448, %r333, %p4;
	selp.b32 	%r451, %r341, %r309, %p4;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r309, %r452, %p4;
	selp.b32 	%r454, %r452, %r341, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r455, %r425, %r393, %p5;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r562, %r393, %r456, %p5;
	selp.b32 	%r690, %r456, %r425, %p5;
	selp.b32 	%r457, %r429, %r397, %p5;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r824, %r397, %r458, %p5;
	selp.b32 	%r952, %r458, %r429, %p5;
	selp.b32 	%r459, %r433, %r401, %p5;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r568, %r401, %r460, %p5;
	selp.b32 	%r696, %r460, %r433, %p5;
	selp.b32 	%r461, %r437, %r405, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r830, %r405, %r462, %p5;
	selp.b32 	%r958, %r462, %r437, %p5;
	selp.b32 	%r463, %r441, %r409, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r594, %r409, %r464, %p5;
	selp.b32 	%r722, %r464, %r441, %p5;
	selp.b32 	%r465, %r445, %r413, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r856, %r413, %r466, %p5;
	selp.b32 	%r984, %r466, %r445, %p5;
	selp.b32 	%r467, %r449, %r417, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r600, %r417, %r468, %p5;
	selp.b32 	%r728, %r468, %r449, %p5;
	selp.b32 	%r469, %r453, %r421, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r862, %r421, %r470, %p5;
	selp.b32 	%r990, %r470, %r453, %p5;
	selp.b32 	%r471, %r426, %r394, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r626, %r394, %r472, %p5;
	selp.b32 	%r754, %r472, %r426, %p5;
	selp.b32 	%r473, %r430, %r398, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r888, %r398, %r474, %p5;
	selp.b32 	%r1016, %r474, %r430, %p5;
	selp.b32 	%r475, %r434, %r402, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r632, %r402, %r476, %p5;
	selp.b32 	%r760, %r476, %r434, %p5;
	selp.b32 	%r477, %r438, %r406, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r894, %r406, %r478, %p5;
	selp.b32 	%r1022, %r478, %r438, %p5;
	selp.b32 	%r479, %r442, %r410, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r658, %r410, %r480, %p5;
	selp.b32 	%r786, %r480, %r442, %p5;
	selp.b32 	%r481, %r446, %r414, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r920, %r414, %r482, %p5;
	selp.b32 	%r1048, %r482, %r446, %p5;
	selp.b32 	%r483, %r450, %r418, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r664, %r418, %r484, %p5;
	selp.b32 	%r792, %r484, %r450, %p5;
	selp.b32 	%r485, %r454, %r422, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r926, %r422, %r486, %p5;
	selp.b32 	%r1054, %r486, %r454, %p5;
	and.b32  	%r44, %r2, 12;
	shl.b32 	%r487, %r4, 11;
	and.b32  	%r45, %r487, 30720;
	shl.b32 	%r488, %r4, 3;
	and.b32  	%r46, %r488, 128;
	shl.b32 	%r489, %r1, 2;
	and.b32  	%r490, %r489, 28;
	and.b32  	%r491, %r3, 96;
	or.b32  	%r47, %r491, %r490;
	and.b32  	%r48, %r488, 3840;
	or.b32  	%r492, %r44, %r6;
	mul.lo.s32 	%r493, %r492, 129;
	add.s32 	%r494, %r47, %r493;
	mul.wide.u32 	%rd45, %r494, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r493;
	cvt.u64.u32 	%rd48, %r47;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r495, %r492, 16;
	mul.lo.s32 	%r496, %r495, 129;
	add.s32 	%r497, %r47, %r496;
	mul.wide.u32 	%rd51, %r497, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r496;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r498, %r1, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r49, %r491, %r499;
	and.b32  	%r50, %r350, 6;
	and.b32  	%r500, %r2, 3;
	mul.lo.s32 	%r501, %r500, 3200;
	mul.hi.u32 	%r502, %r372, -1431655765;
	shr.u32 	%r503, %r502, 6;
	mul.lo.s32 	%r504, %r503, 96;
	sub.s32 	%r505, %r372, %r504;
	or.b32  	%r51, %r505, %r501;
	or.b32  	%r506, %r372, 8;
	mul.hi.u32 	%r507, %r506, -1431655765;
	shr.u32 	%r508, %r507, 6;
	mul.lo.s32 	%r509, %r508, 96;
	sub.s32 	%r510, %r506, %r509;
	or.b32  	%r52, %r510, %r501;
	and.b32  	%r511, %r1, 7;
	mul.lo.s32 	%r512, %r511, 100;
	add.s32 	%r513, %r7, %r512;
	mul.wide.u32 	%rd55, %r513, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r7;
	cvt.u64.u32 	%rd58, %r512;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r514, %r512, 800;
	add.s32 	%r515, %r514, %r7;
	mul.wide.u32 	%rd61, %r515, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r514;
	add.s64 	%rd63, %rd62, %rd57;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r516, %r512, 1600;
	add.s32 	%r517, %r516, %r7;
	mul.wide.u32 	%rd65, %r517, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r516;
	add.s64 	%rd67, %rd66, %rd57;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r518, %r1, 24;
	mul.lo.s32 	%r519, %r518, 100;
	add.s32 	%r520, %r7, %r519;
	mul.wide.u32 	%rd69, %r520, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r519;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r53, %r80, %r10;
	min.u32 	%r54, %r346, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r522, %r1, 5;
	and.b32  	%r523, %r522, 64;
	and.b32  	%r524, %r487, 32768;
	and.b32  	%r525, %r487, 983040;
	shl.b32 	%r526, %r7, 20;
	and.b32  	%r527, %r498, 32;
	or.b32  	%r528, %r523, %r527;
	or.b32  	%r529, %r528, %r45;
	or.b32  	%r530, %r529, %r349;
	or.b32  	%r531, %r530, %r524;
	or.b32  	%r532, %r531, %r525;
	or.b32  	%r55, %r532, %r526;
	mov.u32 	%r345, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1317, %r345;
LBB0_7:                                 // %L2392
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1318, %r345;
	mov.u32 	%r1319, %r345;
	mov.u32 	%r1320, %r345;
	mov.u32 	%r1321, %r345;
	mov.u32 	%r1322, %r345;
	mov.u32 	%r1323, %r345;
	mov.u32 	%r1324, %r345;
LBB0_8:                                 // %L2395
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2415
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r534, %r1318, %r1317;
	or.b32  	%r535, %r534, %r44;
	or.b32  	%r536, %r535, %r6;
	or.b32  	%r537, %r536, %r45;
	shl.b32 	%r538, %r537, 12;
	or.b32  	%r539, %r538, %r46;
	or.b32  	%r540, %r539, %r47;
	or.b32  	%r541, %r540, %r48;
	mul.wide.s32 	%rd73, %r541, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r542, %r543, %r544, %r545}, [%rd74];
	or.b32  	%r546, %r541, 65536;
	mul.wide.s32 	%rd75, %r546, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r547, %r548, %r549, %r550}, [%rd76];
	st.shared.u32 	[%rd7], %r542;
	st.shared.u32 	[%rd8+4], %r543;
	st.shared.u32 	[%rd8+8], %r544;
	st.shared.u32 	[%rd8+12], %r545;
	st.shared.u32 	[%rd9], %r547;
	st.shared.u32 	[%rd10+4], %r548;
	st.shared.u32 	[%rd10+8], %r549;
	st.shared.u32 	[%rd10+12], %r550;
LBB0_10:                                // %L4308
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r564, 0;
	mov.u32 	%r1325, %r564;
LBB0_11:                                // %L4310
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1076, %r1325, %r11;
	mad.lo.s32 	%r1077, %r1076, 129, %r49;
	mul.wide.u32 	%rd77, %r1077, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r553, [%rd79];
	mov.u32 	%r554, 134744072;
	mov.u32 	%r555, 252645135;
	// begin inline asm
	lop3.b32 %r552, %r553, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1078, %r552, 2021161080;
	xor.b32  	%r563, %r1078, -2139062144;
	shr.u32 	%r557, %r553, 4;
	// begin inline asm
	lop3.b32 %r556, %r557, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1079, %r556, 2021161080;
	xor.b32  	%r569, %r1079, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r562}, {%r563}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r568}, {%r569}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r562}, {%r569}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r568}, {%r563}, {%r572, %r573};
	// end inline asm
	ld.shared.u32 	%r585, [%rd79+4];
	// begin inline asm
	lop3.b32 %r584, %r585, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1080, %r584, 2021161080;
	xor.b32  	%r595, %r1080, -2139062144;
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r588, %r589, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1081, %r588, 2021161080;
	xor.b32  	%r601, %r1081, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r594}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r600}, {%r601}, {%r566, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r594}, {%r601}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r600}, {%r595}, {%r604, %r605};
	// end inline asm
	ld.shared.u32 	%r617, [%rd79+8];
	// begin inline asm
	lop3.b32 %r616, %r617, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1082, %r616, 2021161080;
	xor.b32  	%r627, %r1082, -2139062144;
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r620, %r621, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1083, %r620, 2021161080;
	xor.b32  	%r633, %r1083, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r626}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r632}, {%r633}, {%r598, %r599};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r626}, {%r633}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r632}, {%r627}, {%r636, %r637};
	// end inline asm
	ld.shared.u32 	%r649, [%rd79+12];
	// begin inline asm
	lop3.b32 %r648, %r649, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1084, %r648, 2021161080;
	xor.b32  	%r659, %r1084, -2139062144;
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r652, %r653, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1085, %r652, 2021161080;
	xor.b32  	%r665, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r658}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r664}, {%r665}, {%r630, %r631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r658}, {%r665}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r664}, {%r659}, {%r668, %r669};
	// end inline asm
	ld.shared.u32 	%r681, [%rd79+16];
	// begin inline asm
	lop3.b32 %r680, %r681, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1086, %r680, 2021161080;
	xor.b32  	%r691, %r1086, -2139062144;
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r684, %r685, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1087, %r684, 2021161080;
	xor.b32  	%r697, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r690}, {%r691}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r696}, {%r697}, {%r662, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r690}, {%r697}, {%r674, %r675};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r696}, {%r691}, {%r700, %r701};
	// end inline asm
	ld.shared.u32 	%r713, [%rd79+20];
	// begin inline asm
	lop3.b32 %r712, %r713, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1088, %r712, 2021161080;
	xor.b32  	%r723, %r1088, -2139062144;
	shr.u32 	%r717, %r713, 4;
	// begin inline asm
	lop3.b32 %r716, %r717, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1089, %r716, 2021161080;
	xor.b32  	%r729, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r722}, {%r723}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r728}, {%r729}, {%r694, %r695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r722}, {%r729}, {%r706, %r707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r728}, {%r723}, {%r732, %r733};
	// end inline asm
	ld.shared.u32 	%r745, [%rd79+24];
	// begin inline asm
	lop3.b32 %r744, %r745, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1090, %r744, 2021161080;
	xor.b32  	%r755, %r1090, -2139062144;
	shr.u32 	%r749, %r745, 4;
	// begin inline asm
	lop3.b32 %r748, %r749, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1091, %r748, 2021161080;
	xor.b32  	%r761, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r754}, {%r755}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r760}, {%r761}, {%r726, %r727};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r754}, {%r761}, {%r738, %r739};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r760}, {%r755}, {%r764, %r765};
	// end inline asm
	ld.shared.u32 	%r777, [%rd79+28];
	// begin inline asm
	lop3.b32 %r776, %r777, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1092, %r776, 2021161080;
	xor.b32  	%r787, %r1092, -2139062144;
	shr.u32 	%r781, %r777, 4;
	// begin inline asm
	lop3.b32 %r780, %r781, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1093, %r780, 2021161080;
	xor.b32  	%r793, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r786}, {%r787}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r792}, {%r793}, {%r758, %r759};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r786}, {%r793}, {%r770, %r771};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r792}, {%r787}, {%r796, %r797};
	// end inline asm
	sub.s32 	%r1094, %r784, %r790;
	add.s32 	%r1095, %r1094, 4;
	shr.s32 	%r810, %r1095, 3;
	add.s32 	%r1096, %r802, 4;
	shr.s32 	%r809, %r1096, 3;
	sub.s32 	%r1097, %r785, %r791;
	add.s32 	%r1098, %r1097, 4;
	shr.s32 	%r813, %r1098, 3;
	add.s32 	%r1099, %r803, 4;
	shr.s32 	%r812, %r1099, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r808, %r809, %r810;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r811, %r812, %r813;
	// end inline asm
	or.b32  	%r1100, %r1325, %r50;
	mul.lo.s32 	%r1101, %r1100, 100;
	add.s32 	%r1102, %r51, %r1101;
	mul.wide.u32 	%rd80, %r1102, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r808;
	add.s32 	%r1103, %r1101, 100;
	add.s32 	%r1104, %r51, %r1103;
	mul.wide.u32 	%rd83, %r1104, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r811;
	ld.shared.u32 	%r815, [%rd79];
	// begin inline asm
	lop3.b32 %r814, %r815, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1105, %r814, 2021161080;
	xor.b32  	%r825, %r1105, -2139062144;
	shr.u32 	%r819, %r815, 4;
	// begin inline asm
	lop3.b32 %r818, %r819, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1106, %r818, 2021161080;
	xor.b32  	%r831, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r822, %r823}, {%r824}, {%r825}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r830}, {%r831}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r824}, {%r831}, {%r564, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r830}, {%r825}, {%r834, %r835};
	// end inline asm
	ld.shared.u32 	%r847, [%rd79+4];
	// begin inline asm
	lop3.b32 %r846, %r847, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1107, %r846, 2021161080;
	xor.b32  	%r857, %r1107, -2139062144;
	shr.u32 	%r851, %r847, 4;
	// begin inline asm
	lop3.b32 %r850, %r851, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1108, %r850, 2021161080;
	xor.b32  	%r863, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r856}, {%r857}, {%r822, %r823};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r862}, {%r863}, {%r828, %r829};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r856}, {%r863}, {%r840, %r841};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r862}, {%r857}, {%r866, %r867};
	// end inline asm
	ld.shared.u32 	%r879, [%rd79+8];
	// begin inline asm
	lop3.b32 %r878, %r879, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1109, %r878, 2021161080;
	xor.b32  	%r889, %r1109, -2139062144;
	shr.u32 	%r883, %r879, 4;
	// begin inline asm
	lop3.b32 %r882, %r883, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1110, %r882, 2021161080;
	xor.b32  	%r895, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r888}, {%r889}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r894}, {%r895}, {%r860, %r861};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r888}, {%r895}, {%r872, %r873};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r894}, {%r889}, {%r898, %r899};
	// end inline asm
	ld.shared.u32 	%r911, [%rd79+12];
	// begin inline asm
	lop3.b32 %r910, %r911, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1111, %r910, 2021161080;
	xor.b32  	%r921, %r1111, -2139062144;
	shr.u32 	%r915, %r911, 4;
	// begin inline asm
	lop3.b32 %r914, %r915, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1112, %r914, 2021161080;
	xor.b32  	%r927, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r920}, {%r921}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r926}, {%r927}, {%r892, %r893};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r920}, {%r927}, {%r904, %r905};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r926}, {%r921}, {%r930, %r931};
	// end inline asm
	ld.shared.u32 	%r943, [%rd79+16];
	// begin inline asm
	lop3.b32 %r942, %r943, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1113, %r942, 2021161080;
	xor.b32  	%r953, %r1113, -2139062144;
	shr.u32 	%r947, %r943, 4;
	// begin inline asm
	lop3.b32 %r946, %r947, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1114, %r946, 2021161080;
	xor.b32  	%r959, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r952}, {%r953}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r958}, {%r959}, {%r924, %r925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r952}, {%r959}, {%r936, %r937};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r958}, {%r953}, {%r962, %r963};
	// end inline asm
	ld.shared.u32 	%r975, [%rd79+20];
	// begin inline asm
	lop3.b32 %r974, %r975, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1115, %r974, 2021161080;
	xor.b32  	%r985, %r1115, -2139062144;
	shr.u32 	%r979, %r975, 4;
	// begin inline asm
	lop3.b32 %r978, %r979, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1116, %r978, 2021161080;
	xor.b32  	%r991, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r984}, {%r985}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r990}, {%r991}, {%r956, %r957};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r984}, {%r991}, {%r968, %r969};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r990}, {%r985}, {%r994, %r995};
	// end inline asm
	ld.shared.u32 	%r1007, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1006, %r1007, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1117, %r1006, 2021161080;
	xor.b32  	%r1017, %r1117, -2139062144;
	shr.u32 	%r1011, %r1007, 4;
	// begin inline asm
	lop3.b32 %r1010, %r1011, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1118, %r1010, 2021161080;
	xor.b32  	%r1023, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r1016}, {%r1017}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r1022}, {%r1023}, {%r988, %r989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r1016}, {%r1023}, {%r1000, %r1001};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r1022}, {%r1017}, {%r1026, %r1027};
	// end inline asm
	ld.shared.u32 	%r1039, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1038, %r1039, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1119, %r1038, 2021161080;
	xor.b32  	%r1049, %r1119, -2139062144;
	shr.u32 	%r1043, %r1039, 4;
	// begin inline asm
	lop3.b32 %r1042, %r1043, %r554, %r555, 40;
	// end inline asm
	add.s32 	%r1120, %r1042, 2021161080;
	xor.b32  	%r1055, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r1048}, {%r1049}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1052, %r1053}, {%r1054}, {%r1055}, {%r1020, %r1021};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1058, %r1059}, {%r1048}, {%r1055}, {%r1032, %r1033};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1064, %r1065}, {%r1054}, {%r1049}, {%r1058, %r1059};
	// end inline asm
	sub.s32 	%r1121, %r1046, %r1052;
	add.s32 	%r1122, %r1121, 4;
	shr.s32 	%r1072, %r1122, 3;
	add.s32 	%r1123, %r1064, 4;
	shr.s32 	%r1071, %r1123, 3;
	sub.s32 	%r1124, %r1047, %r1053;
	add.s32 	%r1125, %r1124, 4;
	shr.s32 	%r1075, %r1125, 3;
	add.s32 	%r1126, %r1065, 4;
	shr.s32 	%r1074, %r1126, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1070, %r1071, %r1072;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1073, %r1074, %r1075;
	// end inline asm
	add.s32 	%r1127, %r52, %r1101;
	mul.wide.u32 	%rd85, %r1127, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1070;
	add.s32 	%r1128, %r52, %r1103;
	mul.wide.u32 	%rd87, %r1128, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1073;
	add.s32 	%r1325, %r1325, 8;
	setp.ne.s32 	%p7, %r1325, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8481
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1147, [%rd11];
	ld.shared.u32 	%r1148, [%rd12+12800];
	ld.shared.u32 	%r1149, [%rd12+25600];
	ld.shared.u32 	%r1150, [%rd12+38400];
	ld.shared.u32 	%r1151, [%rd13];
	ld.shared.u32 	%r1152, [%rd14+12800];
	ld.shared.u32 	%r1153, [%rd14+25600];
	ld.shared.u32 	%r1154, [%rd14+38400];
	ld.shared.u32 	%r1155, [%rd15];
	ld.shared.u32 	%r1156, [%rd16+12800];
	ld.shared.u32 	%r1157, [%rd16+25600];
	ld.shared.u32 	%r1158, [%rd16+38400];
	ld.shared.u32 	%r1159, [%rd17];
	ld.shared.u32 	%r1160, [%rd18+12800];
	ld.shared.u32 	%r1161, [%rd18+25600];
	ld.shared.u32 	%r1162, [%rd18+38400];
	cvt.s32.s16 	%r1163, %r1147;
	shr.s32 	%r1164, %r1147, 16;
	cvt.s32.s16 	%r1165, %r1148;
	shr.s32 	%r1166, %r1148, 16;
	cvt.s32.s16 	%r1167, %r1149;
	shr.s32 	%r1168, %r1149, 16;
	cvt.s32.s16 	%r1169, %r1150;
	shr.s32 	%r1170, %r1150, 16;
	cvt.s32.s16 	%r1171, %r1151;
	shr.s32 	%r1172, %r1151, 16;
	cvt.s32.s16 	%r1173, %r1152;
	shr.s32 	%r1174, %r1152, 16;
	cvt.s32.s16 	%r1175, %r1153;
	shr.s32 	%r1176, %r1153, 16;
	cvt.s32.s16 	%r1177, %r1154;
	shr.s32 	%r1178, %r1154, 16;
	cvt.s32.s16 	%r1179, %r1155;
	shr.s32 	%r1180, %r1155, 16;
	cvt.s32.s16 	%r1181, %r1156;
	shr.s32 	%r1182, %r1156, 16;
	cvt.s32.s16 	%r1183, %r1157;
	shr.s32 	%r1184, %r1157, 16;
	cvt.s32.s16 	%r1185, %r1158;
	shr.s32 	%r1186, %r1158, 16;
	cvt.s32.s16 	%r1187, %r1159;
	shr.s32 	%r1188, %r1159, 16;
	cvt.s32.s16 	%r1189, %r1160;
	shr.s32 	%r1190, %r1160, 16;
	cvt.s32.s16 	%r1191, %r1161;
	shr.s32 	%r1192, %r1161, 16;
	cvt.s32.s16 	%r1193, %r1162;
	shr.s32 	%r1194, %r1162, 16;
	add.s32 	%r1195, %r1163, %r53;
	add.s32 	%r1196, %r1195, %r1165;
	add.s32 	%r1197, %r1196, %r1167;
	add.s32 	%r1198, %r1197, %r1169;
	shr.s32 	%r1199, %r1198, %r54;
	add.s32 	%r1200, %r1164, %r53;
	add.s32 	%r1201, %r1200, %r1166;
	add.s32 	%r1202, %r1201, %r1168;
	add.s32 	%r1203, %r1202, %r1170;
	shr.s32 	%r1204, %r1203, %r54;
	add.s32 	%r1205, %r1171, %r53;
	add.s32 	%r1206, %r1205, %r1173;
	add.s32 	%r1207, %r1206, %r1175;
	add.s32 	%r1208, %r1207, %r1177;
	shr.s32 	%r1209, %r1208, %r54;
	add.s32 	%r1210, %r1172, %r53;
	add.s32 	%r1211, %r1210, %r1174;
	add.s32 	%r1212, %r1211, %r1176;
	add.s32 	%r1213, %r1212, %r1178;
	shr.s32 	%r1214, %r1213, %r54;
	add.s32 	%r1215, %r1179, %r53;
	add.s32 	%r1216, %r1215, %r1181;
	add.s32 	%r1217, %r1216, %r1183;
	add.s32 	%r1218, %r1217, %r1185;
	shr.s32 	%r1219, %r1218, %r54;
	add.s32 	%r1220, %r1180, %r53;
	add.s32 	%r1221, %r1220, %r1182;
	add.s32 	%r1222, %r1221, %r1184;
	add.s32 	%r1223, %r1222, %r1186;
	shr.s32 	%r1224, %r1223, %r54;
	add.s32 	%r1225, %r1187, %r53;
	add.s32 	%r1226, %r1225, %r1189;
	add.s32 	%r1227, %r1226, %r1191;
	add.s32 	%r1228, %r1227, %r1193;
	shr.s32 	%r1229, %r1228, %r54;
	add.s32 	%r1230, %r1188, %r53;
	add.s32 	%r1231, %r1230, %r1190;
	add.s32 	%r1232, %r1231, %r1192;
	add.s32 	%r1233, %r1232, %r1194;
	shr.s32 	%r1234, %r1233, %r54;
	max.s32 	%r1235, %r1199, -7;
	min.s32 	%r1134, %r1235, 7;
	max.s32 	%r1236, %r1204, -7;
	min.s32 	%r1141, %r1236, 7;
	max.s32 	%r1237, %r1209, -7;
	min.s32 	%r1133, %r1237, 7;
	max.s32 	%r1238, %r1214, -7;
	min.s32 	%r1140, %r1238, 7;
	max.s32 	%r1239, %r1219, -7;
	min.s32 	%r1131, %r1239, 7;
	max.s32 	%r1240, %r1224, -7;
	min.s32 	%r1138, %r1240, 7;
	max.s32 	%r1241, %r1229, -7;
	min.s32 	%r1130, %r1241, 7;
	max.s32 	%r1242, %r1234, -7;
	min.s32 	%r1137, %r1242, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1129, %r1130, %r1131, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1132, %r1133, %r1134, %r1129;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1136, %r1137, %r1138, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1139, %r1140, %r1141, %r1136;
	// end inline asm
	shl.b32 	%r1146, %r1139, 4;
	// begin inline asm
	lop3.b32 %r1253, %r555, %r1132, %r1146, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1318, 0;
	selp.b32 	%r1323, %r1253, %r1323, %p8;
	selp.b32 	%r1324, %r1253, %r1324, %p8;
	setp.eq.s32 	%p9, %r1318, 32;
	selp.b32 	%r1319, %r1253, %r1319, %p9;
	selp.b32 	%r1320, %r1253, %r1320, %p9;
	setp.eq.s32 	%p10, %r1318, 64;
	selp.b32 	%r1321, %r1253, %r1321, %p10;
	selp.b32 	%r1322, %r1253, %r1322, %p10;
	add.s32 	%r73, %r1318, 32;
	setp.ne.s32 	%p11, %r1318, 96;
	mov.u32 	%r1318, %r73;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11217
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1243, %r1323, %r1319, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1247, %r1324, %r1320, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1251, %r1321, %r1253, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1255, %r1322, %r1253, %r224;
	// end inline asm
	selp.b32 	%r1291, %r1247, %r1243, %p12;
	shfl.sync.bfly.b32	%r1292, %r1291, 1, 31, -1;
	selp.b32 	%r1260, %r1243, %r1292, %p12;
	selp.b32 	%r1261, %r1292, %r1247, %p12;
	selp.b32 	%r1293, %r1255, %r1251, %p12;
	shfl.sync.bfly.b32	%r1294, %r1293, 1, 31, -1;
	selp.b32 	%r1268, %r1251, %r1294, %p12;
	selp.b32 	%r1269, %r1294, %r1255, %p12;
	// begin inline asm
	prmt.b32 %r1259, %r1260, %r1261, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1260, %r1261, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1268, %r1269, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1268, %r1269, %r224;
	// end inline asm
	selp.b32 	%r1295, %r1267, %r1259, %p4;
	shfl.sync.bfly.b32	%r1296, %r1295, 2, 31, -1;
	selp.b32 	%r1276, %r1259, %r1296, %p4;
	selp.b32 	%r1277, %r1296, %r1267, %p4;
	selp.b32 	%r1297, %r1271, %r1263, %p4;
	shfl.sync.bfly.b32	%r1298, %r1297, 2, 31, -1;
	selp.b32 	%r1284, %r1263, %r1298, %p4;
	selp.b32 	%r1285, %r1298, %r1271, %p4;
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r96;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r92;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r96;
	// end inline asm
	selp.b32 	%r1299, %r1283, %r1275, %p5;
	shfl.sync.bfly.b32	%r1300, %r1299, 4, 31, -1;
	selp.b32 	%r1301, %r1275, %r1300, %p5;
	selp.b32 	%r1302, %r1300, %r1283, %p5;
	selp.b32 	%r1303, %r1287, %r1279, %p5;
	shfl.sync.bfly.b32	%r1304, %r1303, 4, 31, -1;
	selp.b32 	%r1305, %r1279, %r1304, %p5;
	selp.b32 	%r1306, %r1304, %r1287, %p5;
	selp.b32 	%r1307, %r1305, %r1301, %p12;
	shfl.sync.bfly.b32	%r1308, %r1307, 1, 31, -1;
	selp.b32 	%r1309, %r1301, %r1308, %p12;
	selp.b32 	%r1310, %r1308, %r1305, %p12;
	selp.b32 	%r1311, %r1306, %r1302, %p12;
	shfl.sync.bfly.b32	%r1312, %r1311, 1, 31, -1;
	selp.b32 	%r1313, %r1302, %r1312, %p12;
	selp.b32 	%r1314, %r1312, %r1306, %p12;
	or.b32  	%r1315, %r55, %r1317;
	cvt.u64.u32 	%rd89, %r1315;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1309, %r1313, %r1310, %r1314};
	add.s32 	%r74, %r1317, 128;
	setp.ne.s32 	%p15, %r1317, 1920;
	mov.u32 	%r1317, %r74;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11621
	mov.u32 	%r1316, 0;
	st.global.u32 	[%rd6], %r1316;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L255
	mov.u32 	%r88, 2;
	st.global.u32 	[%rd6], %r88;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
