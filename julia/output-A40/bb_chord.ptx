// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<23>;
	.reg .b32 	%r<1331>;
	.reg .b64 	%rd<91>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r75, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r76, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r77, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r77, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r78, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r79, %r78, %r1;
	add.s32 	%r80, %r79, %r4;
	mul.wide.u32 	%rd24, %r80, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r81, 1;
	st.global.u32 	[%rd6], %r81;
	shr.u32 	%r5, %r2, 5;
	mul.lo.s32 	%r82, %r5, 192;
	bfe.u32 	%r6, %r2, 4, 1;
	shr.u32 	%r7, %r1, 3;
	shl.b32 	%r83, %r3, 2;
	or.b32  	%r84, %r7, %r83;
	mul.hi.u32 	%r85, %r84, -1431655765;
	shr.u32 	%r86, %r85, 6;
	mul.lo.s32 	%r87, %r86, 96;
	sub.s32 	%r8, %r84, %r87;
	mad.lo.s32 	%r88, %r6, 96, %r82;
	add.s32 	%r89, %r88, %r8;
	mul.wide.u32 	%rd25, %r89, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass112
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r348, %r9, -3;
	shl.b32 	%r349, %r1, 1;
	and.b32  	%r350, %r349, 12;
	shl.b32 	%r351, %r1, 4;
	and.b32  	%r352, %r351, 16;
	shl.b32 	%r353, %r3, 6;
	and.b32  	%r354, %r353, 192;
	mul.lo.s32 	%r355, %r5, 49152;
	shr.u32 	%r356, %r3, 2;
	cvt.u16.u32 	%rs4, %r356;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 10;
	mul.lo.s16 	%rs7, %rs6, 6;
	sub.s16 	%rs8, %rs4, %rs7;
	shl.b16 	%rs9, %rs8, 4;
	cvt.u32.u16 	%r357, %rs9;
	and.b32  	%r358, %r357, 240;
	shr.u32 	%r30, %r1, 2;
	and.b32  	%r359, %r30, 6;
	or.b32  	%r360, %r359, %r358;
	cvt.u16.u32 	%rs10, %r360;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 14;
	mul.lo.s16 	%rs13, %rs12, 96;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 246;
	mul.wide.u16 	%r361, %rs15, 256;
	or.b32  	%r362, %r350, %r352;
	or.b32  	%r363, %r362, %r354;
	or.b32  	%r364, %r363, %r355;
	mad.lo.s32 	%r365, %r6, 24576, %r364;
	add.s32 	%r366, %r365, %r361;
	shl.b32 	%r367, %r366, 2;
	cvt.u64.u32 	%rd29, %r367;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r92, %r93, %r108, %r109}, [%rd30];
	or.b16  	%rs16, %rs10, 8;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs16, %rs19;
	and.b16  	%rs21, %rs20, 254;
	mul.wide.u16 	%r368, %rs21, 256;
	add.s32 	%r369, %r365, %r368;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd31, %r370;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r100, %r101, %r116, %r117}, [%rd32];
	or.b32  	%r371, %r365, 33;
	add.s32 	%r372, %r371, %r361;
	mul.wide.u32 	%rd33, %r372, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r124, %r125, %r140, %r141}, [%rd34+-4];
	add.s32 	%r373, %r371, %r368;
	mul.wide.u32 	%rd35, %r373, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r132, %r133, %r148, %r149}, [%rd36+-4];
	or.b32  	%r374, %r30, %r358;
	or.b32  	%r375, %r374, 1;
	mul.hi.u32 	%r376, %r375, -1431655765;
	shr.u32 	%r377, %r376, 6;
	mul.lo.s32 	%r378, %r377, 96;
	sub.s32 	%r379, %r375, %r378;
	shl.b32 	%r380, %r379, 8;
	add.s32 	%r381, %r365, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd37, %r382;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r156, %r157, %r172, %r173}, [%rd38];
	or.b32  	%r383, %r374, 9;
	mul.hi.u32 	%r384, %r383, -1431655765;
	shr.u32 	%r385, %r384, 6;
	mul.lo.s32 	%r386, %r385, 96;
	sub.s32 	%r387, %r383, %r386;
	shl.b32 	%r388, %r387, 8;
	add.s32 	%r389, %r365, %r388;
	shl.b32 	%r390, %r389, 2;
	cvt.u64.u32 	%rd39, %r390;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r164, %r165, %r180, %r181}, [%rd40];
	add.s32 	%r391, %r371, %r380;
	mul.wide.u32 	%rd41, %r391, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r188, %r189, %r204, %r205}, [%rd42+-4];
	add.s32 	%r392, %r371, %r388;
	mul.wide.u32 	%rd43, %r392, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r196, %r197, %r212, %r213}, [%rd44+-4];
	mov.u32 	%r214, 21520;
	// begin inline asm
	prmt.b32 %r220, %r92, %r93, %r214;
	// end inline asm
	mov.u32 	%r218, 30258;
	// begin inline asm
	prmt.b32 %r221, %r92, %r93, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r100, %r101, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r100, %r101, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r108, %r109, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r108, %r109, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r116, %r117, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r116, %r117, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r124, %r125, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r124, %r125, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r132, %r133, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r132, %r133, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r140, %r141, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r140, %r141, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r148, %r149, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r148, %r149, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r156, %r157, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r156, %r157, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r164, %r165, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r164, %r165, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r172, %r173, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r172, %r173, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r180, %r181, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r180, %r181, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r188, %r189, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r188, %r189, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r196, %r197, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r196, %r197, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r204, %r205, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r204, %r205, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r212, %r213, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r212, %r213, %r218;
	// end inline asm
	mov.u32 	%r342, 25152;
	// begin inline asm
	prmt.b32 %r219, %r220, %r221, %r342;
	// end inline asm
	mov.u32 	%r346, 29521;
	// begin inline asm
	prmt.b32 %r223, %r220, %r221, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r228, %r229, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r228, %r229, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r236, %r237, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r236, %r237, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r244, %r245, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r244, %r245, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r252, %r253, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r252, %r253, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r260, %r261, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r260, %r261, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r268, %r269, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r268, %r269, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r276, %r277, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r276, %r277, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r284, %r285, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r284, %r285, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r292, %r293, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r292, %r293, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r300, %r301, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r300, %r301, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r308, %r309, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r308, %r309, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r316, %r317, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r316, %r317, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r324, %r325, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r324, %r325, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r332, %r333, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r332, %r333, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r340, %r341, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r340, %r341, %r346;
	// end inline asm
	cvt.u16.u32 	%rs22, %r1;
	and.b16  	%rs1, %rs22, 2;
	setp.eq.s16 	%p4, %rs1, 0;
	selp.b32 	%r393, %r251, %r219, %p4;
	shfl.sync.bfly.b32	%r394, %r393, 2, 31, -1;
	selp.b32 	%r395, %r219, %r394, %p4;
	selp.b32 	%r396, %r394, %r251, %p4;
	selp.b32 	%r397, %r259, %r227, %p4;
	shfl.sync.bfly.b32	%r398, %r397, 2, 31, -1;
	selp.b32 	%r399, %r227, %r398, %p4;
	selp.b32 	%r400, %r398, %r259, %p4;
	selp.b32 	%r401, %r255, %r223, %p4;
	shfl.sync.bfly.b32	%r402, %r401, 2, 31, -1;
	selp.b32 	%r403, %r223, %r402, %p4;
	selp.b32 	%r404, %r402, %r255, %p4;
	selp.b32 	%r405, %r263, %r231, %p4;
	shfl.sync.bfly.b32	%r406, %r405, 2, 31, -1;
	selp.b32 	%r407, %r231, %r406, %p4;
	selp.b32 	%r408, %r406, %r263, %p4;
	selp.b32 	%r409, %r267, %r235, %p4;
	shfl.sync.bfly.b32	%r410, %r409, 2, 31, -1;
	selp.b32 	%r411, %r235, %r410, %p4;
	selp.b32 	%r412, %r410, %r267, %p4;
	selp.b32 	%r413, %r275, %r243, %p4;
	shfl.sync.bfly.b32	%r414, %r413, 2, 31, -1;
	selp.b32 	%r415, %r243, %r414, %p4;
	selp.b32 	%r416, %r414, %r275, %p4;
	selp.b32 	%r417, %r271, %r239, %p4;
	shfl.sync.bfly.b32	%r418, %r417, 2, 31, -1;
	selp.b32 	%r419, %r239, %r418, %p4;
	selp.b32 	%r420, %r418, %r271, %p4;
	selp.b32 	%r421, %r279, %r247, %p4;
	shfl.sync.bfly.b32	%r422, %r421, 2, 31, -1;
	selp.b32 	%r423, %r247, %r422, %p4;
	selp.b32 	%r424, %r422, %r279, %p4;
	selp.b32 	%r425, %r315, %r283, %p4;
	shfl.sync.bfly.b32	%r426, %r425, 2, 31, -1;
	selp.b32 	%r427, %r283, %r426, %p4;
	selp.b32 	%r428, %r426, %r315, %p4;
	selp.b32 	%r429, %r323, %r291, %p4;
	shfl.sync.bfly.b32	%r430, %r429, 2, 31, -1;
	selp.b32 	%r431, %r291, %r430, %p4;
	selp.b32 	%r432, %r430, %r323, %p4;
	selp.b32 	%r433, %r319, %r287, %p4;
	shfl.sync.bfly.b32	%r434, %r433, 2, 31, -1;
	selp.b32 	%r435, %r287, %r434, %p4;
	selp.b32 	%r436, %r434, %r319, %p4;
	selp.b32 	%r437, %r327, %r295, %p4;
	shfl.sync.bfly.b32	%r438, %r437, 2, 31, -1;
	selp.b32 	%r439, %r295, %r438, %p4;
	selp.b32 	%r440, %r438, %r327, %p4;
	selp.b32 	%r441, %r331, %r299, %p4;
	shfl.sync.bfly.b32	%r442, %r441, 2, 31, -1;
	selp.b32 	%r443, %r299, %r442, %p4;
	selp.b32 	%r444, %r442, %r331, %p4;
	selp.b32 	%r445, %r339, %r307, %p4;
	shfl.sync.bfly.b32	%r446, %r445, 2, 31, -1;
	selp.b32 	%r447, %r307, %r446, %p4;
	selp.b32 	%r448, %r446, %r339, %p4;
	selp.b32 	%r449, %r335, %r303, %p4;
	shfl.sync.bfly.b32	%r450, %r449, 2, 31, -1;
	selp.b32 	%r451, %r303, %r450, %p4;
	selp.b32 	%r452, %r450, %r335, %p4;
	selp.b32 	%r453, %r343, %r311, %p4;
	shfl.sync.bfly.b32	%r454, %r453, 2, 31, -1;
	selp.b32 	%r455, %r311, %r454, %p4;
	selp.b32 	%r456, %r454, %r343, %p4;
	and.b16  	%rs2, %rs22, 4;
	setp.eq.s16 	%p5, %rs2, 0;
	selp.b32 	%r457, %r427, %r395, %p5;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r31, %r395, %r458, %p5;
	selp.b32 	%r32, %r458, %r427, %p5;
	selp.b32 	%r459, %r431, %r399, %p5;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r33, %r399, %r460, %p5;
	selp.b32 	%r34, %r460, %r431, %p5;
	selp.b32 	%r461, %r435, %r403, %p5;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r35, %r403, %r462, %p5;
	selp.b32 	%r36, %r462, %r435, %p5;
	selp.b32 	%r463, %r439, %r407, %p5;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r37, %r407, %r464, %p5;
	selp.b32 	%r38, %r464, %r439, %p5;
	selp.b32 	%r465, %r443, %r411, %p5;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r39, %r411, %r466, %p5;
	selp.b32 	%r40, %r466, %r443, %p5;
	selp.b32 	%r467, %r447, %r415, %p5;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r41, %r415, %r468, %p5;
	selp.b32 	%r42, %r468, %r447, %p5;
	selp.b32 	%r469, %r451, %r419, %p5;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r43, %r419, %r470, %p5;
	selp.b32 	%r44, %r470, %r451, %p5;
	selp.b32 	%r471, %r455, %r423, %p5;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r45, %r423, %r472, %p5;
	selp.b32 	%r46, %r472, %r455, %p5;
	selp.b32 	%r473, %r428, %r396, %p5;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r47, %r396, %r474, %p5;
	selp.b32 	%r48, %r474, %r428, %p5;
	selp.b32 	%r475, %r432, %r400, %p5;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r49, %r400, %r476, %p5;
	selp.b32 	%r50, %r476, %r432, %p5;
	selp.b32 	%r477, %r436, %r404, %p5;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r51, %r404, %r478, %p5;
	selp.b32 	%r52, %r478, %r436, %p5;
	selp.b32 	%r479, %r440, %r408, %p5;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r53, %r408, %r480, %p5;
	selp.b32 	%r54, %r480, %r440, %p5;
	selp.b32 	%r481, %r444, %r412, %p5;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r55, %r412, %r482, %p5;
	selp.b32 	%r56, %r482, %r444, %p5;
	selp.b32 	%r483, %r448, %r416, %p5;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r57, %r416, %r484, %p5;
	selp.b32 	%r58, %r484, %r448, %p5;
	selp.b32 	%r485, %r452, %r420, %p5;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r59, %r420, %r486, %p5;
	selp.b32 	%r60, %r486, %r452, %p5;
	selp.b32 	%r487, %r456, %r424, %p5;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r61, %r424, %r488, %p5;
	selp.b32 	%r62, %r488, %r456, %p5;
	shl.b32 	%r489, %r2, 3;
	and.b32  	%r490, %r489, 3840;
	and.b32  	%r491, %r489, 128;
	and.b32  	%r63, %r3, 12;
	shl.b32 	%r492, %r1, 2;
	and.b32  	%r493, %r492, 28;
	shl.b32 	%r494, %r2, 11;
	and.b32  	%r64, %r494, 30720;
	and.b32  	%r495, %r4, 96;
	or.b32  	%r65, %r495, %r493;
	and.b32  	%r66, %r489, 3968;
	or.b32  	%r496, %r65, %r491;
	or.b32  	%r67, %r496, %r490;
	or.b32  	%r497, %r63, %r7;
	mul.lo.s32 	%r498, %r497, 129;
	add.s32 	%r499, %r65, %r498;
	mul.wide.u32 	%rd45, %r499, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r498;
	cvt.u64.u32 	%rd48, %r65;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r500, %r497, 16;
	mul.lo.s32 	%r501, %r500, 129;
	add.s32 	%r502, %r65, %r501;
	mul.wide.u32 	%rd51, %r502, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r501;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r503, %r1, 3;
	and.b32  	%r504, %r503, 24;
	or.b32  	%r68, %r504, %r495;
	mul.hi.u32 	%r505, %r374, -1431655765;
	shr.u32 	%r506, %r505, 6;
	mul.lo.s32 	%r507, %r506, 96;
	sub.s32 	%r508, %r374, %r507;
	and.b32  	%r509, %r3, 3;
	and.b32  	%r69, %r349, 6;
	mul.lo.s32 	%r510, %r509, 3200;
	or.b32  	%r70, %r508, %r510;
	or.b32  	%r511, %r374, 8;
	mul.hi.u32 	%r512, %r511, -1431655765;
	shr.u32 	%r513, %r512, 6;
	mul.lo.s32 	%r514, %r513, 96;
	sub.s32 	%r515, %r511, %r514;
	or.b32  	%r71, %r515, %r510;
	and.b32  	%r516, %r1, 7;
	mul.lo.s32 	%r517, %r516, 100;
	add.s32 	%r518, %r8, %r517;
	mul.wide.u32 	%rd55, %r518, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r8;
	cvt.u64.u32 	%rd58, %r517;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r519, %r517, 800;
	add.s32 	%r520, %r8, %r519;
	mul.wide.u32 	%rd61, %r520, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r519;
	add.s64 	%rd63, %rd62, %rd57;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r521, %r517, 1600;
	add.s32 	%r522, %r8, %r521;
	mul.wide.u32 	%rd65, %r522, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r521;
	add.s64 	%rd67, %rd66, %rd57;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r523, %r1, 24;
	mul.lo.s32 	%r524, %r523, 100;
	add.s32 	%r525, %r8, %r524;
	mul.wide.u32 	%rd69, %r525, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r524;
	add.s64 	%rd71, %rd70, %rd57;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r72, %r81, %r10;
	min.u32 	%r73, %r348, 31;
	and.b16  	%rs3, %rs22, 1;
	shl.b32 	%r527, %r1, 5;
	and.b32  	%r528, %r527, 64;
	and.b32  	%r529, %r494, 983040;
	and.b32  	%r530, %r494, 32768;
	shl.b32 	%r531, %r8, 20;
	and.b32  	%r532, %r503, 32;
	or.b32  	%r533, %r532, %r352;
	or.b32  	%r534, %r533, %r528;
	or.b32  	%r535, %r534, %r64;
	or.b32  	%r536, %r535, %r529;
	or.b32  	%r537, %r536, %r530;
	or.b32  	%r74, %r537, %r531;
	mov.u32 	%r347, 0;
	setp.gt.u32 	%p6, %r3, 15;
	mov.u32 	%r1322, %r347;
LBB0_7:                                 // %L2388
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1323, %r347;
	mov.u32 	%r1324, %r347;
	mov.u32 	%r1325, %r347;
	mov.u32 	%r1326, %r347;
	mov.u32 	%r1327, %r347;
	mov.u32 	%r1328, %r347;
	mov.u32 	%r1329, %r347;
LBB0_8:                                 // %L2391
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2411
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r539, %r1323, %r1322;
	or.b32  	%r540, %r539, %r63;
	or.b32  	%r541, %r540, %r7;
	or.b32  	%r542, %r541, %r64;
	shl.b32 	%r543, %r542, 12;
	or.b32  	%r544, %r543, %r66;
	or.b32  	%r545, %r544, %r65;
	mul.wide.s32 	%rd73, %r545, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r546, %r547, %r548, %r549}, [%rd74];
	or.b32  	%r550, %r67, %r543;
	or.b32  	%r551, %r550, 65536;
	mul.wide.s32 	%rd75, %r551, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r552, %r553, %r554, %r555}, [%rd76];
	st.shared.u32 	[%rd7], %r546;
	st.shared.u32 	[%rd8+4], %r547;
	st.shared.u32 	[%rd8+8], %r548;
	st.shared.u32 	[%rd8+12], %r549;
	st.shared.u32 	[%rd9], %r552;
	st.shared.u32 	[%rd10+4], %r553;
	st.shared.u32 	[%rd10+8], %r554;
	st.shared.u32 	[%rd10+12], %r555;
LBB0_10:                                // %L4289
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r569, 0;
	mov.u32 	%r1330, %r569;
LBB0_11:                                // %L4291
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1081, %r1330, %r30;
	mad.lo.s32 	%r1082, %r1081, 129, %r68;
	mul.wide.u32 	%rd77, %r1082, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r558, [%rd79];
	mov.u32 	%r559, 134744072;
	mov.u32 	%r560, 252645135;
	// begin inline asm
	lop3.b32 %r557, %r558, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1083, %r557, 2021161080;
	xor.b32  	%r568, %r1083, -2139062144;
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r561, %r562, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1084, %r561, 2021161080;
	xor.b32  	%r574, %r1084, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r565, %r566}, {%r31}, {%r568}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r571, %r572}, {%r35}, {%r574}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r577, %r578}, {%r31}, {%r574}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r583, %r584}, {%r35}, {%r568}, {%r577, %r578};
	// end inline asm
	ld.shared.u32 	%r590, [%rd79+4];
	// begin inline asm
	lop3.b32 %r589, %r590, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1085, %r589, 2021161080;
	xor.b32  	%r600, %r1085, -2139062144;
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r593, %r594, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1086, %r593, 2021161080;
	xor.b32  	%r606, %r1086, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r39}, {%r600}, {%r565, %r566};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r43}, {%r606}, {%r571, %r572};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r39}, {%r606}, {%r583, %r584};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r43}, {%r600}, {%r609, %r610};
	// end inline asm
	ld.shared.u32 	%r622, [%rd79+8];
	// begin inline asm
	lop3.b32 %r621, %r622, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1087, %r621, 2021161080;
	xor.b32  	%r632, %r1087, -2139062144;
	shr.u32 	%r626, %r622, 4;
	// begin inline asm
	lop3.b32 %r625, %r626, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1088, %r625, 2021161080;
	xor.b32  	%r638, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r629, %r630}, {%r47}, {%r632}, {%r597, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r635, %r636}, {%r51}, {%r638}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r641, %r642}, {%r47}, {%r638}, {%r615, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r647, %r648}, {%r51}, {%r632}, {%r641, %r642};
	// end inline asm
	ld.shared.u32 	%r654, [%rd79+12];
	// begin inline asm
	lop3.b32 %r653, %r654, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1089, %r653, 2021161080;
	xor.b32  	%r664, %r1089, -2139062144;
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r657, %r658, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1090, %r657, 2021161080;
	xor.b32  	%r670, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r661, %r662}, {%r55}, {%r664}, {%r629, %r630};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r667, %r668}, {%r59}, {%r670}, {%r635, %r636};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r673, %r674}, {%r55}, {%r670}, {%r647, %r648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r679, %r680}, {%r59}, {%r664}, {%r673, %r674};
	// end inline asm
	ld.shared.u32 	%r686, [%rd79+16];
	// begin inline asm
	lop3.b32 %r685, %r686, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1091, %r685, 2021161080;
	xor.b32  	%r696, %r1091, -2139062144;
	shr.u32 	%r690, %r686, 4;
	// begin inline asm
	lop3.b32 %r689, %r690, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1092, %r689, 2021161080;
	xor.b32  	%r702, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r693, %r694}, {%r32}, {%r696}, {%r661, %r662};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r36}, {%r702}, {%r667, %r668};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r32}, {%r702}, {%r679, %r680};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r711, %r712}, {%r36}, {%r696}, {%r705, %r706};
	// end inline asm
	ld.shared.u32 	%r718, [%rd79+20];
	// begin inline asm
	lop3.b32 %r717, %r718, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1093, %r717, 2021161080;
	xor.b32  	%r728, %r1093, -2139062144;
	shr.u32 	%r722, %r718, 4;
	// begin inline asm
	lop3.b32 %r721, %r722, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1094, %r721, 2021161080;
	xor.b32  	%r734, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r725, %r726}, {%r40}, {%r728}, {%r693, %r694};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r731, %r732}, {%r44}, {%r734}, {%r699, %r700};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r737, %r738}, {%r40}, {%r734}, {%r711, %r712};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r743, %r744}, {%r44}, {%r728}, {%r737, %r738};
	// end inline asm
	ld.shared.u32 	%r750, [%rd79+24];
	// begin inline asm
	lop3.b32 %r749, %r750, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1095, %r749, 2021161080;
	xor.b32  	%r760, %r1095, -2139062144;
	shr.u32 	%r754, %r750, 4;
	// begin inline asm
	lop3.b32 %r753, %r754, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1096, %r753, 2021161080;
	xor.b32  	%r766, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r757, %r758}, {%r48}, {%r760}, {%r725, %r726};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r763, %r764}, {%r52}, {%r766}, {%r731, %r732};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r769, %r770}, {%r48}, {%r766}, {%r743, %r744};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r775, %r776}, {%r52}, {%r760}, {%r769, %r770};
	// end inline asm
	ld.shared.u32 	%r782, [%rd79+28];
	// begin inline asm
	lop3.b32 %r781, %r782, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1097, %r781, 2021161080;
	xor.b32  	%r792, %r1097, -2139062144;
	shr.u32 	%r786, %r782, 4;
	// begin inline asm
	lop3.b32 %r785, %r786, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1098, %r785, 2021161080;
	xor.b32  	%r798, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r789, %r790}, {%r56}, {%r792}, {%r757, %r758};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r60}, {%r798}, {%r763, %r764};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r56}, {%r798}, {%r775, %r776};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r807, %r808}, {%r60}, {%r792}, {%r801, %r802};
	// end inline asm
	sub.s32 	%r1099, %r789, %r795;
	add.s32 	%r1100, %r1099, 4;
	shr.s32 	%r815, %r1100, 3;
	add.s32 	%r1101, %r807, 4;
	shr.s32 	%r814, %r1101, 3;
	sub.s32 	%r1102, %r790, %r796;
	add.s32 	%r1103, %r1102, 4;
	shr.s32 	%r818, %r1103, 3;
	add.s32 	%r1104, %r808, 4;
	shr.s32 	%r817, %r1104, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r813, %r814, %r815;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r816, %r817, %r818;
	// end inline asm
	or.b32  	%r1105, %r1330, %r69;
	mul.lo.s32 	%r1106, %r1105, 100;
	add.s32 	%r1107, %r70, %r1106;
	mul.wide.u32 	%rd80, %r1107, 4;
	add.s64 	%rd82, %rd56, %rd80;
	st.shared.u32 	[%rd82], %r813;
	add.s32 	%r1108, %r1106, 100;
	add.s32 	%r1109, %r70, %r1108;
	mul.wide.u32 	%rd83, %r1109, 4;
	add.s64 	%rd84, %rd56, %rd83;
	st.shared.u32 	[%rd84], %r816;
	ld.shared.u32 	%r820, [%rd79];
	// begin inline asm
	lop3.b32 %r819, %r820, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1110, %r819, 2021161080;
	xor.b32  	%r830, %r1110, -2139062144;
	shr.u32 	%r824, %r820, 4;
	// begin inline asm
	lop3.b32 %r823, %r824, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1111, %r823, 2021161080;
	xor.b32  	%r836, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r827, %r828}, {%r33}, {%r830}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r833, %r834}, {%r37}, {%r836}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r839, %r840}, {%r33}, {%r836}, {%r569, %r569};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r845, %r846}, {%r37}, {%r830}, {%r839, %r840};
	// end inline asm
	ld.shared.u32 	%r852, [%rd79+4];
	// begin inline asm
	lop3.b32 %r851, %r852, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1112, %r851, 2021161080;
	xor.b32  	%r862, %r1112, -2139062144;
	shr.u32 	%r856, %r852, 4;
	// begin inline asm
	lop3.b32 %r855, %r856, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1113, %r855, 2021161080;
	xor.b32  	%r868, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r859, %r860}, {%r41}, {%r862}, {%r827, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r865, %r866}, {%r45}, {%r868}, {%r833, %r834};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r871, %r872}, {%r41}, {%r868}, {%r845, %r846};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r877, %r878}, {%r45}, {%r862}, {%r871, %r872};
	// end inline asm
	ld.shared.u32 	%r884, [%rd79+8];
	// begin inline asm
	lop3.b32 %r883, %r884, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1114, %r883, 2021161080;
	xor.b32  	%r894, %r1114, -2139062144;
	shr.u32 	%r888, %r884, 4;
	// begin inline asm
	lop3.b32 %r887, %r888, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1115, %r887, 2021161080;
	xor.b32  	%r900, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r891, %r892}, {%r49}, {%r894}, {%r859, %r860};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r53}, {%r900}, {%r865, %r866};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r49}, {%r900}, {%r877, %r878};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r909, %r910}, {%r53}, {%r894}, {%r903, %r904};
	// end inline asm
	ld.shared.u32 	%r916, [%rd79+12];
	// begin inline asm
	lop3.b32 %r915, %r916, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1116, %r915, 2021161080;
	xor.b32  	%r926, %r1116, -2139062144;
	shr.u32 	%r920, %r916, 4;
	// begin inline asm
	lop3.b32 %r919, %r920, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1117, %r919, 2021161080;
	xor.b32  	%r932, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r923, %r924}, {%r57}, {%r926}, {%r891, %r892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r929, %r930}, {%r61}, {%r932}, {%r897, %r898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r935, %r936}, {%r57}, {%r932}, {%r909, %r910};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r941, %r942}, {%r61}, {%r926}, {%r935, %r936};
	// end inline asm
	ld.shared.u32 	%r948, [%rd79+16];
	// begin inline asm
	lop3.b32 %r947, %r948, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1118, %r947, 2021161080;
	xor.b32  	%r958, %r1118, -2139062144;
	shr.u32 	%r952, %r948, 4;
	// begin inline asm
	lop3.b32 %r951, %r952, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1119, %r951, 2021161080;
	xor.b32  	%r964, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r955, %r956}, {%r34}, {%r958}, {%r923, %r924};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r961, %r962}, {%r38}, {%r964}, {%r929, %r930};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r967, %r968}, {%r34}, {%r964}, {%r941, %r942};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r973, %r974}, {%r38}, {%r958}, {%r967, %r968};
	// end inline asm
	ld.shared.u32 	%r980, [%rd79+20];
	// begin inline asm
	lop3.b32 %r979, %r980, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1120, %r979, 2021161080;
	xor.b32  	%r990, %r1120, -2139062144;
	shr.u32 	%r984, %r980, 4;
	// begin inline asm
	lop3.b32 %r983, %r984, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1121, %r983, 2021161080;
	xor.b32  	%r996, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r987, %r988}, {%r42}, {%r990}, {%r955, %r956};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r993, %r994}, {%r46}, {%r996}, {%r961, %r962};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r999, %r1000}, {%r42}, {%r996}, {%r973, %r974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1005, %r1006}, {%r46}, {%r990}, {%r999, %r1000};
	// end inline asm
	ld.shared.u32 	%r1012, [%rd79+24];
	// begin inline asm
	lop3.b32 %r1011, %r1012, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1122, %r1011, 2021161080;
	xor.b32  	%r1022, %r1122, -2139062144;
	shr.u32 	%r1016, %r1012, 4;
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1123, %r1015, 2021161080;
	xor.b32  	%r1028, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1019, %r1020}, {%r50}, {%r1022}, {%r987, %r988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1025, %r1026}, {%r54}, {%r1028}, {%r993, %r994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1031, %r1032}, {%r50}, {%r1028}, {%r1005, %r1006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1037, %r1038}, {%r54}, {%r1022}, {%r1031, %r1032};
	// end inline asm
	ld.shared.u32 	%r1044, [%rd79+28];
	// begin inline asm
	lop3.b32 %r1043, %r1044, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1124, %r1043, 2021161080;
	xor.b32  	%r1054, %r1124, -2139062144;
	shr.u32 	%r1048, %r1044, 4;
	// begin inline asm
	lop3.b32 %r1047, %r1048, %r559, %r560, 40;
	// end inline asm
	add.s32 	%r1125, %r1047, 2021161080;
	xor.b32  	%r1060, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1051, %r1052}, {%r58}, {%r1054}, {%r1019, %r1020};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1057, %r1058}, {%r62}, {%r1060}, {%r1025, %r1026};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1063, %r1064}, {%r58}, {%r1060}, {%r1037, %r1038};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1069, %r1070}, {%r62}, {%r1054}, {%r1063, %r1064};
	// end inline asm
	sub.s32 	%r1126, %r1051, %r1057;
	add.s32 	%r1127, %r1126, 4;
	shr.s32 	%r1077, %r1127, 3;
	add.s32 	%r1128, %r1069, 4;
	shr.s32 	%r1076, %r1128, 3;
	sub.s32 	%r1129, %r1052, %r1058;
	add.s32 	%r1130, %r1129, 4;
	shr.s32 	%r1080, %r1130, 3;
	add.s32 	%r1131, %r1070, 4;
	shr.s32 	%r1079, %r1131, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1075, %r1076, %r1077;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1078, %r1079, %r1080;
	// end inline asm
	add.s32 	%r1132, %r71, %r1106;
	mul.wide.u32 	%rd85, %r1132, 4;
	add.s64 	%rd86, %rd56, %rd85;
	st.shared.u32 	[%rd86], %r1075;
	add.s32 	%r1133, %r71, %r1108;
	mul.wide.u32 	%rd87, %r1133, 4;
	add.s64 	%rd88, %rd56, %rd87;
	st.shared.u32 	[%rd88], %r1078;
	add.s32 	%r1330, %r1330, 8;
	setp.ne.s32 	%p7, %r1330, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L8454
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1152, [%rd11];
	ld.shared.u32 	%r1153, [%rd12+12800];
	ld.shared.u32 	%r1154, [%rd12+25600];
	ld.shared.u32 	%r1155, [%rd12+38400];
	ld.shared.u32 	%r1156, [%rd13];
	ld.shared.u32 	%r1157, [%rd14+12800];
	ld.shared.u32 	%r1158, [%rd14+25600];
	ld.shared.u32 	%r1159, [%rd14+38400];
	ld.shared.u32 	%r1160, [%rd15];
	ld.shared.u32 	%r1161, [%rd16+12800];
	ld.shared.u32 	%r1162, [%rd16+25600];
	ld.shared.u32 	%r1163, [%rd16+38400];
	ld.shared.u32 	%r1164, [%rd17];
	ld.shared.u32 	%r1165, [%rd18+12800];
	ld.shared.u32 	%r1166, [%rd18+25600];
	ld.shared.u32 	%r1167, [%rd18+38400];
	cvt.s32.s16 	%r1168, %r1152;
	shr.s32 	%r1169, %r1152, 16;
	cvt.s32.s16 	%r1170, %r1153;
	shr.s32 	%r1171, %r1153, 16;
	cvt.s32.s16 	%r1172, %r1154;
	shr.s32 	%r1173, %r1154, 16;
	cvt.s32.s16 	%r1174, %r1155;
	shr.s32 	%r1175, %r1155, 16;
	cvt.s32.s16 	%r1176, %r1156;
	shr.s32 	%r1177, %r1156, 16;
	cvt.s32.s16 	%r1178, %r1157;
	shr.s32 	%r1179, %r1157, 16;
	cvt.s32.s16 	%r1180, %r1158;
	shr.s32 	%r1181, %r1158, 16;
	cvt.s32.s16 	%r1182, %r1159;
	shr.s32 	%r1183, %r1159, 16;
	cvt.s32.s16 	%r1184, %r1160;
	shr.s32 	%r1185, %r1160, 16;
	cvt.s32.s16 	%r1186, %r1161;
	shr.s32 	%r1187, %r1161, 16;
	cvt.s32.s16 	%r1188, %r1162;
	shr.s32 	%r1189, %r1162, 16;
	cvt.s32.s16 	%r1190, %r1163;
	shr.s32 	%r1191, %r1163, 16;
	cvt.s32.s16 	%r1192, %r1164;
	shr.s32 	%r1193, %r1164, 16;
	cvt.s32.s16 	%r1194, %r1165;
	shr.s32 	%r1195, %r1165, 16;
	cvt.s32.s16 	%r1196, %r1166;
	shr.s32 	%r1197, %r1166, 16;
	cvt.s32.s16 	%r1198, %r1167;
	shr.s32 	%r1199, %r1167, 16;
	add.s32 	%r1200, %r1168, %r72;
	add.s32 	%r1201, %r1200, %r1170;
	add.s32 	%r1202, %r1201, %r1172;
	add.s32 	%r1203, %r1202, %r1174;
	shr.s32 	%r1204, %r1203, %r73;
	add.s32 	%r1205, %r1169, %r72;
	add.s32 	%r1206, %r1205, %r1171;
	add.s32 	%r1207, %r1206, %r1173;
	add.s32 	%r1208, %r1207, %r1175;
	shr.s32 	%r1209, %r1208, %r73;
	add.s32 	%r1210, %r1176, %r72;
	add.s32 	%r1211, %r1210, %r1178;
	add.s32 	%r1212, %r1211, %r1180;
	add.s32 	%r1213, %r1212, %r1182;
	shr.s32 	%r1214, %r1213, %r73;
	add.s32 	%r1215, %r1177, %r72;
	add.s32 	%r1216, %r1215, %r1179;
	add.s32 	%r1217, %r1216, %r1181;
	add.s32 	%r1218, %r1217, %r1183;
	shr.s32 	%r1219, %r1218, %r73;
	add.s32 	%r1220, %r1184, %r72;
	add.s32 	%r1221, %r1220, %r1186;
	add.s32 	%r1222, %r1221, %r1188;
	add.s32 	%r1223, %r1222, %r1190;
	shr.s32 	%r1224, %r1223, %r73;
	add.s32 	%r1225, %r1185, %r72;
	add.s32 	%r1226, %r1225, %r1187;
	add.s32 	%r1227, %r1226, %r1189;
	add.s32 	%r1228, %r1227, %r1191;
	shr.s32 	%r1229, %r1228, %r73;
	add.s32 	%r1230, %r1192, %r72;
	add.s32 	%r1231, %r1230, %r1194;
	add.s32 	%r1232, %r1231, %r1196;
	add.s32 	%r1233, %r1232, %r1198;
	shr.s32 	%r1234, %r1233, %r73;
	add.s32 	%r1235, %r1193, %r72;
	add.s32 	%r1236, %r1235, %r1195;
	add.s32 	%r1237, %r1236, %r1197;
	add.s32 	%r1238, %r1237, %r1199;
	shr.s32 	%r1239, %r1238, %r73;
	max.s32 	%r1240, %r1204, -7;
	min.s32 	%r1139, %r1240, 7;
	max.s32 	%r1241, %r1209, -7;
	min.s32 	%r1146, %r1241, 7;
	max.s32 	%r1242, %r1214, -7;
	min.s32 	%r1138, %r1242, 7;
	max.s32 	%r1243, %r1219, -7;
	min.s32 	%r1145, %r1243, 7;
	max.s32 	%r1244, %r1224, -7;
	min.s32 	%r1136, %r1244, 7;
	max.s32 	%r1245, %r1229, -7;
	min.s32 	%r1143, %r1245, 7;
	max.s32 	%r1246, %r1234, -7;
	min.s32 	%r1135, %r1246, 7;
	max.s32 	%r1247, %r1239, -7;
	min.s32 	%r1142, %r1247, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1134, %r1135, %r1136, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1137, %r1138, %r1139, %r1134;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1141, %r1142, %r1143, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1144, %r1145, %r1146, %r1141;
	// end inline asm
	shl.b32 	%r1151, %r1144, 4;
	// begin inline asm
	lop3.b32 %r1258, %r560, %r1137, %r1151, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1323, 0;
	selp.b32 	%r1328, %r1258, %r1328, %p8;
	selp.b32 	%r1329, %r1258, %r1329, %p8;
	setp.eq.s32 	%p9, %r1323, 32;
	selp.b32 	%r1324, %r1258, %r1324, %p9;
	selp.b32 	%r1325, %r1258, %r1325, %p9;
	setp.eq.s32 	%p10, %r1323, 64;
	selp.b32 	%r1326, %r1258, %r1326, %p10;
	selp.b32 	%r1327, %r1258, %r1327, %p10;
	add.s32 	%r28, %r1323, 32;
	setp.ne.s32 	%p11, %r1323, 96;
	mov.u32 	%r1323, %r28;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L11190
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	// begin inline asm
	prmt.b32 %r1248, %r1328, %r1324, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1252, %r1329, %r1325, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1326, %r1258, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1327, %r1258, %r346;
	// end inline asm
	selp.b32 	%r1296, %r1252, %r1248, %p12;
	shfl.sync.bfly.b32	%r1297, %r1296, 1, 31, -1;
	selp.b32 	%r1265, %r1248, %r1297, %p12;
	selp.b32 	%r1266, %r1297, %r1252, %p12;
	selp.b32 	%r1298, %r1260, %r1256, %p12;
	shfl.sync.bfly.b32	%r1299, %r1298, 1, 31, -1;
	selp.b32 	%r1273, %r1256, %r1299, %p12;
	selp.b32 	%r1274, %r1299, %r1260, %p12;
	// begin inline asm
	prmt.b32 %r1264, %r1265, %r1266, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1265, %r1266, %r346;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1273, %r1274, %r342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1273, %r1274, %r346;
	// end inline asm
	selp.b32 	%r1300, %r1272, %r1264, %p4;
	shfl.sync.bfly.b32	%r1301, %r1300, 2, 31, -1;
	selp.b32 	%r1281, %r1264, %r1301, %p4;
	selp.b32 	%r1282, %r1301, %r1272, %p4;
	selp.b32 	%r1302, %r1276, %r1268, %p4;
	shfl.sync.bfly.b32	%r1303, %r1302, 2, 31, -1;
	selp.b32 	%r1289, %r1268, %r1303, %p4;
	selp.b32 	%r1290, %r1303, %r1276, %p4;
	// begin inline asm
	prmt.b32 %r1280, %r1281, %r1282, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1281, %r1282, %r218;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1289, %r1290, %r214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1289, %r1290, %r218;
	// end inline asm
	selp.b32 	%r1304, %r1288, %r1280, %p5;
	shfl.sync.bfly.b32	%r1305, %r1304, 4, 31, -1;
	selp.b32 	%r1306, %r1280, %r1305, %p5;
	selp.b32 	%r1307, %r1305, %r1288, %p5;
	selp.b32 	%r1308, %r1292, %r1284, %p5;
	shfl.sync.bfly.b32	%r1309, %r1308, 4, 31, -1;
	selp.b32 	%r1310, %r1284, %r1309, %p5;
	selp.b32 	%r1311, %r1309, %r1292, %p5;
	selp.b32 	%r1312, %r1310, %r1306, %p12;
	shfl.sync.bfly.b32	%r1313, %r1312, 1, 31, -1;
	selp.b32 	%r1314, %r1306, %r1313, %p12;
	selp.b32 	%r1315, %r1313, %r1310, %p12;
	selp.b32 	%r1316, %r1311, %r1307, %p12;
	shfl.sync.bfly.b32	%r1317, %r1316, 1, 31, -1;
	selp.b32 	%r1318, %r1307, %r1317, %p12;
	selp.b32 	%r1319, %r1317, %r1311, %p12;
	or.b32  	%r1320, %r74, %r1322;
	cvt.u64.u32 	%rd89, %r1320;
	add.s64 	%rd90, %rd4, %rd89;
	st.global.v4.u32 	[%rd90], {%r1314, %r1318, %r1315, %r1319};
	add.s32 	%r29, %r1322, 128;
	setp.ne.s32 	%p15, %r1322, 1920;
	mov.u32 	%r1322, %r29;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L11593
	mov.u32 	%r1321, 0;
	st.global.u32 	[%rd6], %r1321;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L252
	mov.u32 	%r90, 2;
	st.global.u32 	[%rd6], %r90;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r75;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
