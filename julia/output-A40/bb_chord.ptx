// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<55>;
	.reg .b32 	%r<1320>;
	.reg .b64 	%rd<88>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r82, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r83, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r84, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r85, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r86, %r85, %r1;
	add.s32 	%r87, %r86, %r4;
	mul.wide.u32 	%rd22, %r87, 4;
	add.s64 	%rd6, %rd5, %rd22;
	mov.u32 	%r88, 1;
	st.global.u32 	[%rd6], %r88;
	bfe.s32 	%r89, %r2, 4, 1;
	and.b32  	%r90, %r89, 96;
	shr.u32 	%r6, %r1, 3;
	shl.b32 	%r91, %r3, 2;
	or.b32  	%r92, %r6, %r91;
	cvt.u16.u32 	%rs1, %r92;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r93, %rs6;
	and.b32  	%r7, %r93, 255;
	shr.u32 	%r8, %r2, 5;
	mad.lo.s32 	%r94, %r8, 192, %r90;
	add.s32 	%r95, %r94, %r7;
	mul.wide.u32 	%rd23, %r95, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r9, [%rd24];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;
$L__BB0_6:                              // %pass137
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	and.b32  	%r5, %r2, 16;
	setp.eq.s32 	%p4, %r5, 0;
	add.s32 	%r354, %r9, -3;
	selp.b32 	%r355, 0, 24576, %p4;
	mul.lo.s32 	%r356, %r8, 49152;
	shr.u32 	%r357, %r3, 2;
	cvt.u16.u32 	%rs7, %r357;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 10;
	mul.lo.s16 	%rs10, %rs9, 6;
	sub.s16 	%rs11, %rs7, %rs10;
	shl.b16 	%rs12, %rs11, 4;
	shr.u32 	%r32, %r1, 2;
	cvt.u16.u32 	%rs13, %r32;
	and.b16  	%rs14, %rs13, 6;
	or.b16  	%rs15, %rs14, %rs12;
	and.b16  	%rs16, %rs15, 246;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 246;
	mul.wide.u16 	%r358, %rs21, 256;
	shl.b32 	%r359, %r3, 6;
	shl.b32 	%r360, %r1, 4;
	and.b32  	%r361, %r360, 16;
	shl.b32 	%r362, %r1, 1;
	and.b32  	%r363, %r362, 12;
	and.b32  	%r364, %r359, 192;
	or.b32  	%r365, %r361, %r364;
	or.b32  	%r366, %r365, %r363;
	or.b32  	%r367, %r366, %r356;
	add.s32 	%r368, %r355, %r367;
	or.b32  	%r369, %r368, 1;
	add.s32 	%r370, %r369, %r358;
	mul.wide.u32 	%rd27, %r370, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r98, %r99, %r114, %r115}, [%rd28+-4];
	or.b16  	%rs22, %rs15, 8;
	and.b16  	%rs23, %rs22, 254;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 14;
	mul.lo.s16 	%rs26, %rs25, 96;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 254;
	mul.wide.u16 	%r371, %rs28, 256;
	add.s32 	%r372, %r369, %r371;
	mul.wide.u32 	%rd29, %r372, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r106, %r107, %r122, %r123}, [%rd30+-4];
	or.b32  	%r373, %r368, 33;
	add.s32 	%r374, %r373, %r358;
	mul.wide.u32 	%rd31, %r374, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r130, %r131, %r146, %r147}, [%rd32+-4];
	add.s32 	%r375, %r373, %r371;
	mul.wide.u32 	%rd33, %r375, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r138, %r139, %r154, %r155}, [%rd34+-4];
	or.b16  	%rs29, %rs12, %rs13;
	or.b16  	%rs30, %rs29, 1;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 14;
	mul.lo.s16 	%rs34, %rs33, 96;
	sub.s16 	%rs35, %rs30, %rs34;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r376, %rs36, 256;
	add.s32 	%r377, %r369, %r376;
	mul.wide.u32 	%rd35, %r377, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r162, %r163, %r178, %r179}, [%rd36+-4];
	or.b16  	%rs37, %rs29, 9;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 14;
	mul.lo.s16 	%rs41, %rs40, 96;
	sub.s16 	%rs42, %rs37, %rs41;
	and.b16  	%rs43, %rs42, 255;
	mul.wide.u16 	%r378, %rs43, 256;
	add.s32 	%r379, %r369, %r378;
	mul.wide.u32 	%rd37, %r379, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r170, %r171, %r186, %r187}, [%rd38+-4];
	add.s32 	%r380, %r373, %r376;
	mul.wide.u32 	%rd39, %r380, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r194, %r195, %r210, %r211}, [%rd40+-4];
	add.s32 	%r381, %r373, %r378;
	mul.wide.u32 	%rd41, %r381, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r202, %r203, %r218, %r219}, [%rd42+-4];
	mov.u32 	%r220, 21520;
	// begin inline asm
	prmt.b32 %r226, %r98, %r99, %r220;
	// end inline asm
	mov.u32 	%r224, 30258;
	// begin inline asm
	prmt.b32 %r227, %r98, %r99, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r106, %r107, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r106, %r107, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r114, %r115, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r114, %r115, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r122, %r123, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r122, %r123, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r130, %r131, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r130, %r131, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r138, %r139, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r138, %r139, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r146, %r147, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r146, %r147, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r154, %r155, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r154, %r155, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r162, %r163, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r162, %r163, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r170, %r171, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r170, %r171, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r178, %r179, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r178, %r179, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r186, %r187, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r186, %r187, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r194, %r195, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r194, %r195, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r202, %r203, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r202, %r203, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r210, %r211, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r210, %r211, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r218, %r219, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r218, %r219, %r224;
	// end inline asm
	mov.u32 	%r348, 25152;
	// begin inline asm
	prmt.b32 %r225, %r226, %r227, %r348;
	// end inline asm
	mov.u32 	%r352, 29521;
	// begin inline asm
	prmt.b32 %r229, %r226, %r227, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r234, %r235, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r234, %r235, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r242, %r243, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r242, %r243, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r250, %r251, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r250, %r251, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r258, %r259, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r258, %r259, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r266, %r267, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r266, %r267, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r274, %r275, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r274, %r275, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r282, %r283, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r282, %r283, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r290, %r291, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r290, %r291, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r298, %r299, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r298, %r299, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r306, %r307, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r306, %r307, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r314, %r315, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r314, %r315, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r322, %r323, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r322, %r323, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r330, %r331, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r330, %r331, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r338, %r339, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r338, %r339, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r346, %r347, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r346, %r347, %r352;
	// end inline asm
	and.b32  	%r33, %r1, 2;
	setp.eq.s32 	%p5, %r33, 0;
	selp.b32 	%r382, %r257, %r225, %p5;
	shfl.sync.bfly.b32	%r383, %r382, 2, 31, -1;
	selp.b32 	%r384, %r225, %r383, %p5;
	selp.b32 	%r385, %r383, %r257, %p5;
	selp.b32 	%r386, %r265, %r233, %p5;
	shfl.sync.bfly.b32	%r387, %r386, 2, 31, -1;
	selp.b32 	%r388, %r233, %r387, %p5;
	selp.b32 	%r389, %r387, %r265, %p5;
	selp.b32 	%r390, %r261, %r229, %p5;
	shfl.sync.bfly.b32	%r391, %r390, 2, 31, -1;
	selp.b32 	%r392, %r229, %r391, %p5;
	selp.b32 	%r393, %r391, %r261, %p5;
	selp.b32 	%r394, %r269, %r237, %p5;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r237, %r395, %p5;
	selp.b32 	%r397, %r395, %r269, %p5;
	selp.b32 	%r398, %r273, %r241, %p5;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r241, %r399, %p5;
	selp.b32 	%r401, %r399, %r273, %p5;
	selp.b32 	%r402, %r281, %r249, %p5;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r249, %r403, %p5;
	selp.b32 	%r405, %r403, %r281, %p5;
	selp.b32 	%r406, %r277, %r245, %p5;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r245, %r407, %p5;
	selp.b32 	%r409, %r407, %r277, %p5;
	selp.b32 	%r410, %r285, %r253, %p5;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r253, %r411, %p5;
	selp.b32 	%r413, %r411, %r285, %p5;
	selp.b32 	%r414, %r321, %r289, %p5;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r289, %r415, %p5;
	selp.b32 	%r417, %r415, %r321, %p5;
	selp.b32 	%r418, %r329, %r297, %p5;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r297, %r419, %p5;
	selp.b32 	%r421, %r419, %r329, %p5;
	selp.b32 	%r422, %r325, %r293, %p5;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r293, %r423, %p5;
	selp.b32 	%r425, %r423, %r325, %p5;
	selp.b32 	%r426, %r333, %r301, %p5;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r301, %r427, %p5;
	selp.b32 	%r429, %r427, %r333, %p5;
	selp.b32 	%r430, %r337, %r305, %p5;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r305, %r431, %p5;
	selp.b32 	%r433, %r431, %r337, %p5;
	selp.b32 	%r434, %r345, %r313, %p5;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r313, %r435, %p5;
	selp.b32 	%r437, %r435, %r345, %p5;
	selp.b32 	%r438, %r341, %r309, %p5;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r309, %r439, %p5;
	selp.b32 	%r441, %r439, %r341, %p5;
	selp.b32 	%r442, %r349, %r317, %p5;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r317, %r443, %p5;
	selp.b32 	%r445, %r443, %r349, %p5;
	and.b32  	%r34, %r1, 4;
	setp.eq.s32 	%p6, %r34, 0;
	selp.b32 	%r446, %r416, %r384, %p6;
	shfl.sync.bfly.b32	%r447, %r446, 4, 31, -1;
	selp.b32 	%r35, %r384, %r447, %p6;
	selp.b32 	%r36, %r447, %r416, %p6;
	selp.b32 	%r448, %r420, %r388, %p6;
	shfl.sync.bfly.b32	%r449, %r448, 4, 31, -1;
	selp.b32 	%r37, %r388, %r449, %p6;
	selp.b32 	%r38, %r449, %r420, %p6;
	selp.b32 	%r450, %r424, %r392, %p6;
	shfl.sync.bfly.b32	%r451, %r450, 4, 31, -1;
	selp.b32 	%r39, %r392, %r451, %p6;
	selp.b32 	%r40, %r451, %r424, %p6;
	selp.b32 	%r452, %r428, %r396, %p6;
	shfl.sync.bfly.b32	%r453, %r452, 4, 31, -1;
	selp.b32 	%r41, %r396, %r453, %p6;
	selp.b32 	%r42, %r453, %r428, %p6;
	selp.b32 	%r454, %r432, %r400, %p6;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r43, %r400, %r455, %p6;
	selp.b32 	%r44, %r455, %r432, %p6;
	selp.b32 	%r456, %r436, %r404, %p6;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r45, %r404, %r457, %p6;
	selp.b32 	%r46, %r457, %r436, %p6;
	selp.b32 	%r458, %r440, %r408, %p6;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r47, %r408, %r459, %p6;
	selp.b32 	%r48, %r459, %r440, %p6;
	selp.b32 	%r460, %r444, %r412, %p6;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r49, %r412, %r461, %p6;
	selp.b32 	%r50, %r461, %r444, %p6;
	selp.b32 	%r462, %r417, %r385, %p6;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r51, %r385, %r463, %p6;
	selp.b32 	%r52, %r463, %r417, %p6;
	selp.b32 	%r464, %r421, %r389, %p6;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r53, %r389, %r465, %p6;
	selp.b32 	%r54, %r465, %r421, %p6;
	selp.b32 	%r466, %r425, %r393, %p6;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r55, %r393, %r467, %p6;
	selp.b32 	%r56, %r467, %r425, %p6;
	selp.b32 	%r468, %r429, %r397, %p6;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r57, %r397, %r469, %p6;
	selp.b32 	%r58, %r469, %r429, %p6;
	selp.b32 	%r470, %r433, %r401, %p6;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r59, %r401, %r471, %p6;
	selp.b32 	%r60, %r471, %r433, %p6;
	selp.b32 	%r472, %r437, %r405, %p6;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r61, %r405, %r473, %p6;
	selp.b32 	%r62, %r473, %r437, %p6;
	selp.b32 	%r474, %r441, %r409, %p6;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r63, %r409, %r475, %p6;
	selp.b32 	%r64, %r475, %r441, %p6;
	selp.b32 	%r476, %r445, %r413, %p6;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r65, %r413, %r477, %p6;
	selp.b32 	%r66, %r477, %r445, %p6;
	shl.b32 	%r478, %r2, 3;
	and.b32  	%r479, %r478, 128;
	shl.b32 	%r480, %r1, 2;
	and.b32  	%r481, %r480, 28;
	and.b32  	%r482, %r4, 96;
	or.b32  	%r67, %r481, %r482;
	and.b32  	%r483, %r3, 12;
	or.b32  	%r68, %r6, %r483;
	shl.b32 	%r484, %r2, 11;
	and.b32  	%r69, %r484, 30720;
	or.b32  	%r70, %r69, %r68;
	and.b32  	%r71, %r478, 3840;
	or.b32  	%r72, %r479, %r67;
	shl.b32 	%r485, %r1, 3;
	and.b32  	%r486, %r485, 24;
	or.b32  	%r73, %r486, %r482;
	and.b16  	%rs44, %rs29, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs29, %rs47;
	cvt.u32.u16 	%r487, %rs48;
	and.b32  	%r488, %r487, 255;
	and.b32  	%r74, %r362, 6;
	and.b32  	%r489, %r3, 3;
	mul.lo.s32 	%r490, %r489, 3200;
	or.b32  	%r75, %r490, %r488;
	or.b16  	%rs49, %rs29, 8;
	and.b16  	%rs50, %rs49, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs49, %rs53;
	cvt.u32.u16 	%r491, %rs54;
	and.b32  	%r492, %r491, 255;
	or.b32  	%r76, %r490, %r492;
	and.b32  	%r493, %r1, 7;
	shl.b32 	%r77, %r88, %r10;
	min.u32 	%r78, %r354, 31;
	and.b32  	%r79, %r1, 1;
	shl.b32 	%r495, %r2, 9;
	shl.b32 	%r496, %r7, 18;
	shl.b32 	%r497, %r1, 5;
	and.b32  	%r498, %r497, 64;
	or.b32  	%r499, %r361, %r498;
	and.b32  	%r500, %r495, 253952;
	or.b32  	%r80, %r500, %r496;
	or.b32  	%r501, %r1, 24;
	and.b32  	%r502, %r485, 32;
	or.b32  	%r503, %r499, %r502;
	or.b32  	%r81, %r503, %r69;
	mul.lo.s32 	%r504, %r501, 100;
	cvt.u64.u32 	%rd43, %r504;
	cvt.u64.u32 	%rd44, %r7;
	add.s64 	%rd45, %rd44, %rd43;
	shl.b64 	%rd46, %rd45, 2;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd48, %rd47, 16512;
	add.s64 	%rd7, %rd48, %rd46;
	mul.lo.s32 	%r505, %r68, 129;
	add.s32 	%r506, %r67, %r505;
	mul.wide.u32 	%rd49, %r506, 4;
	add.s64 	%rd8, %rd47, %rd49;
	cvt.u64.u32 	%rd50, %r505;
	cvt.u64.u32 	%rd51, %r67;
	add.s64 	%rd52, %rd51, %rd50;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd47, %rd53;
	mul.lo.s32 	%r507, %r493, 100;
	add.s32 	%r508, %r507, %r7;
	mul.wide.u32 	%rd54, %r508, 4;
	add.s64 	%rd10, %rd48, %rd54;
	cvt.u64.u32 	%rd55, %r507;
	add.s64 	%rd56, %rd44, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd11, %rd48, %rd57;
	add.s32 	%r509, %r507, 800;
	add.s32 	%r510, %r509, %r7;
	mul.wide.u32 	%rd58, %r510, 4;
	add.s64 	%rd12, %rd48, %rd58;
	cvt.u64.u32 	%rd59, %r509;
	add.s64 	%rd60, %rd44, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd13, %rd48, %rd61;
	add.s32 	%r511, %r507, 1600;
	add.s32 	%r512, %r511, %r7;
	mul.wide.u32 	%rd62, %r512, 4;
	add.s64 	%rd14, %rd48, %rd62;
	cvt.u64.u32 	%rd63, %r511;
	add.s64 	%rd64, %rd44, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd15, %rd48, %rd65;
	add.s32 	%r513, %r504, %r7;
	mul.wide.u32 	%rd66, %r513, 4;
	add.s64 	%rd16, %rd48, %rd66;
	mov.u32 	%r353, 0;
	setp.lt.u32 	%p7, %r3, 16;
	mov.u32 	%r1311, %r353;
$L__BB0_7:                              // %L2390
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_10 Depth 3
	add.s32 	%r12, %r70, %r1311;
	or.b32  	%r515, %r1311, %r68;
	or.b32  	%r516, %r515, 16;
	add.s32 	%r13, %r516, %r69;
	mov.u32 	%r1312, %r353;
	mov.u32 	%r1313, %r353;
	mov.u32 	%r1314, %r353;
	mov.u32 	%r1315, %r353;
	mov.u32 	%r1316, %r353;
	mov.u32 	%r1317, %r353;
	mov.u32 	%r1318, %r353;
$L__BB0_8:                              // %L2393
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_10 Depth 3
	@%p7 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_9;
$L__BB0_14:                             // %pass1129
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r517, %r12, %r1312;
	shl.b32 	%r518, %r517, 12;
	or.b32  	%r519, %r518, %r72;
	or.b32  	%r520, %r519, %r71;
	mul.wide.s32 	%rd67, %r520, 4;
	add.s64 	%rd68, %rd2, %rd67;
	ld.global.v4.u32 	{%r521, %r522, %r523, %r524}, [%rd68];
	add.s32 	%r525, %r13, %r1312;
	shr.s32 	%r526, %r525, 31;
	shr.u32 	%r527, %r526, 17;
	add.s32 	%r528, %r525, %r527;
	and.b32  	%r529, %r528, 1015808;
	sub.s32 	%r530, %r525, %r529;
	shl.b32 	%r531, %r530, 12;
	or.b32  	%r532, %r531, %r72;
	or.b32  	%r533, %r532, %r71;
	mul.wide.s32 	%rd69, %r533, 4;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.v4.u32 	{%r534, %r535, %r536, %r537}, [%rd70];
	st.shared.u32 	[%rd8], %r521;
	st.shared.u32 	[%rd9+4], %r522;
	st.shared.u32 	[%rd9+8], %r523;
	st.shared.u32 	[%rd9+12], %r524;
	shr.u32 	%r538, %r526, 27;
	add.s32 	%r539, %r525, %r538;
	and.b32  	%r540, %r539, -32;
	sub.s32 	%r541, %r525, %r540;
	mad.lo.s32 	%r542, %r541, 129, %r67;
	mul.wide.s32 	%rd71, %r542, 4;
	add.s64 	%rd73, %rd47, %rd71;
	st.shared.u32 	[%rd73], %r534;
	st.shared.u32 	[%rd73+4], %r535;
	st.shared.u32 	[%rd73+8], %r536;
	st.shared.u32 	[%rd73+12], %r537;
$L__BB0_9:                              // %L4306
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r556, 0;
	mov.u32 	%r1319, %r556;
$L__BB0_10:                             // %L4308
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1068, %r1319, %r32;
	mad.lo.s32 	%r1069, %r1068, 129, %r73;
	mul.wide.u32 	%rd74, %r1069, 4;
	add.s64 	%rd76, %rd47, %rd74;
	ld.shared.u32 	%r545, [%rd76];
	mov.u32 	%r546, 134744072;
	mov.u32 	%r547, 252645135;
	// begin inline asm
	lop3.b32 %r544, %r545, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1070, %r544, 2021161080;
	xor.b32  	%r555, %r1070, -2139062144;
	shr.u32 	%r549, %r545, 4;
	// begin inline asm
	lop3.b32 %r548, %r549, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1071, %r548, 2021161080;
	xor.b32  	%r561, %r1071, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r35}, {%r555}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r39}, {%r561}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r35}, {%r561}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r39}, {%r555}, {%r564, %r565};
	// end inline asm
	ld.shared.u32 	%r577, [%rd76+4];
	// begin inline asm
	lop3.b32 %r576, %r577, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1072, %r576, 2021161080;
	xor.b32  	%r587, %r1072, -2139062144;
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r580, %r581, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1073, %r580, 2021161080;
	xor.b32  	%r593, %r1073, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r43}, {%r587}, {%r552, %r553};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r47}, {%r593}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r43}, {%r593}, {%r570, %r571};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r47}, {%r587}, {%r596, %r597};
	// end inline asm
	ld.shared.u32 	%r609, [%rd76+8];
	// begin inline asm
	lop3.b32 %r608, %r609, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1074, %r608, 2021161080;
	xor.b32  	%r619, %r1074, -2139062144;
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r612, %r613, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1075, %r612, 2021161080;
	xor.b32  	%r625, %r1075, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r51}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r55}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r51}, {%r625}, {%r602, %r603};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r55}, {%r619}, {%r628, %r629};
	// end inline asm
	ld.shared.u32 	%r641, [%rd76+12];
	// begin inline asm
	lop3.b32 %r640, %r641, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1076, %r640, 2021161080;
	xor.b32  	%r651, %r1076, -2139062144;
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r644, %r645, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1077, %r644, 2021161080;
	xor.b32  	%r657, %r1077, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r59}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r63}, {%r657}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r59}, {%r657}, {%r634, %r635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r63}, {%r651}, {%r660, %r661};
	// end inline asm
	ld.shared.u32 	%r673, [%rd76+16];
	// begin inline asm
	lop3.b32 %r672, %r673, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1078, %r672, 2021161080;
	xor.b32  	%r683, %r1078, -2139062144;
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r676, %r677, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1079, %r676, 2021161080;
	xor.b32  	%r689, %r1079, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r36}, {%r683}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r40}, {%r689}, {%r654, %r655};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r36}, {%r689}, {%r666, %r667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r40}, {%r683}, {%r692, %r693};
	// end inline asm
	ld.shared.u32 	%r705, [%rd76+20];
	// begin inline asm
	lop3.b32 %r704, %r705, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1080, %r704, 2021161080;
	xor.b32  	%r715, %r1080, -2139062144;
	shr.u32 	%r709, %r705, 4;
	// begin inline asm
	lop3.b32 %r708, %r709, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1081, %r708, 2021161080;
	xor.b32  	%r721, %r1081, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r44}, {%r715}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r48}, {%r721}, {%r686, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r44}, {%r721}, {%r698, %r699};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r48}, {%r715}, {%r724, %r725};
	// end inline asm
	ld.shared.u32 	%r737, [%rd76+24];
	// begin inline asm
	lop3.b32 %r736, %r737, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1082, %r736, 2021161080;
	xor.b32  	%r747, %r1082, -2139062144;
	shr.u32 	%r741, %r737, 4;
	// begin inline asm
	lop3.b32 %r740, %r741, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1083, %r740, 2021161080;
	xor.b32  	%r753, %r1083, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r52}, {%r747}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r56}, {%r753}, {%r718, %r719};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r52}, {%r753}, {%r730, %r731};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r56}, {%r747}, {%r756, %r757};
	// end inline asm
	ld.shared.u32 	%r769, [%rd76+28];
	// begin inline asm
	lop3.b32 %r768, %r769, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1084, %r768, 2021161080;
	xor.b32  	%r779, %r1084, -2139062144;
	shr.u32 	%r773, %r769, 4;
	// begin inline asm
	lop3.b32 %r772, %r773, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1085, %r772, 2021161080;
	xor.b32  	%r785, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r60}, {%r779}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r64}, {%r785}, {%r750, %r751};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r60}, {%r785}, {%r762, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r64}, {%r779}, {%r788, %r789};
	// end inline asm
	sub.s32 	%r1086, %r776, %r782;
	add.s32 	%r1087, %r1086, 4;
	shr.s32 	%r802, %r1087, 3;
	add.s32 	%r1088, %r794, 4;
	shr.s32 	%r801, %r1088, 3;
	sub.s32 	%r1089, %r777, %r783;
	add.s32 	%r1090, %r1089, 4;
	shr.s32 	%r805, %r1090, 3;
	add.s32 	%r1091, %r795, 4;
	shr.s32 	%r804, %r1091, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r800, %r801, %r802;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r803, %r804, %r805;
	// end inline asm
	or.b32  	%r1092, %r74, %r1319;
	mul.lo.s32 	%r1093, %r1092, 100;
	add.s32 	%r1094, %r75, %r1093;
	mul.wide.u32 	%rd77, %r1094, 4;
	add.s64 	%rd79, %rd48, %rd77;
	st.shared.u32 	[%rd79], %r800;
	add.s32 	%r1095, %r1093, 100;
	add.s32 	%r1096, %r75, %r1095;
	mul.wide.u32 	%rd80, %r1096, 4;
	add.s64 	%rd81, %rd48, %rd80;
	st.shared.u32 	[%rd81], %r803;
	ld.shared.u32 	%r807, [%rd76];
	// begin inline asm
	lop3.b32 %r806, %r807, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1097, %r806, 2021161080;
	xor.b32  	%r817, %r1097, -2139062144;
	shr.u32 	%r811, %r807, 4;
	// begin inline asm
	lop3.b32 %r810, %r811, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1098, %r810, 2021161080;
	xor.b32  	%r823, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r37}, {%r817}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r41}, {%r823}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r826, %r827}, {%r37}, {%r823}, {%r556, %r556};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r832, %r833}, {%r41}, {%r817}, {%r826, %r827};
	// end inline asm
	ld.shared.u32 	%r839, [%rd76+4];
	// begin inline asm
	lop3.b32 %r838, %r839, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1099, %r838, 2021161080;
	xor.b32  	%r849, %r1099, -2139062144;
	shr.u32 	%r843, %r839, 4;
	// begin inline asm
	lop3.b32 %r842, %r843, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1100, %r842, 2021161080;
	xor.b32  	%r855, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r45}, {%r849}, {%r814, %r815};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r49}, {%r855}, {%r820, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r45}, {%r855}, {%r832, %r833};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r49}, {%r849}, {%r858, %r859};
	// end inline asm
	ld.shared.u32 	%r871, [%rd76+8];
	// begin inline asm
	lop3.b32 %r870, %r871, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1101, %r870, 2021161080;
	xor.b32  	%r881, %r1101, -2139062144;
	shr.u32 	%r875, %r871, 4;
	// begin inline asm
	lop3.b32 %r874, %r875, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1102, %r874, 2021161080;
	xor.b32  	%r887, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r53}, {%r881}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r57}, {%r887}, {%r852, %r853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r53}, {%r887}, {%r864, %r865};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r57}, {%r881}, {%r890, %r891};
	// end inline asm
	ld.shared.u32 	%r903, [%rd76+12];
	// begin inline asm
	lop3.b32 %r902, %r903, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1103, %r902, 2021161080;
	xor.b32  	%r913, %r1103, -2139062144;
	shr.u32 	%r907, %r903, 4;
	// begin inline asm
	lop3.b32 %r906, %r907, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1104, %r906, 2021161080;
	xor.b32  	%r919, %r1104, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r61}, {%r913}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r65}, {%r919}, {%r884, %r885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r61}, {%r919}, {%r896, %r897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r65}, {%r913}, {%r922, %r923};
	// end inline asm
	ld.shared.u32 	%r935, [%rd76+16];
	// begin inline asm
	lop3.b32 %r934, %r935, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1105, %r934, 2021161080;
	xor.b32  	%r945, %r1105, -2139062144;
	shr.u32 	%r939, %r935, 4;
	// begin inline asm
	lop3.b32 %r938, %r939, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1106, %r938, 2021161080;
	xor.b32  	%r951, %r1106, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r38}, {%r945}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r42}, {%r951}, {%r916, %r917};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r38}, {%r951}, {%r928, %r929};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r42}, {%r945}, {%r954, %r955};
	// end inline asm
	ld.shared.u32 	%r967, [%rd76+20];
	// begin inline asm
	lop3.b32 %r966, %r967, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1107, %r966, 2021161080;
	xor.b32  	%r977, %r1107, -2139062144;
	shr.u32 	%r971, %r967, 4;
	// begin inline asm
	lop3.b32 %r970, %r971, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1108, %r970, 2021161080;
	xor.b32  	%r983, %r1108, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r46}, {%r977}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r50}, {%r983}, {%r948, %r949};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r46}, {%r983}, {%r960, %r961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r50}, {%r977}, {%r986, %r987};
	// end inline asm
	ld.shared.u32 	%r999, [%rd76+24];
	// begin inline asm
	lop3.b32 %r998, %r999, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1109, %r998, 2021161080;
	xor.b32  	%r1009, %r1109, -2139062144;
	shr.u32 	%r1003, %r999, 4;
	// begin inline asm
	lop3.b32 %r1002, %r1003, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1110, %r1002, 2021161080;
	xor.b32  	%r1015, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r54}, {%r1009}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r58}, {%r1015}, {%r980, %r981};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r54}, {%r1015}, {%r992, %r993};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r58}, {%r1009}, {%r1018, %r1019};
	// end inline asm
	ld.shared.u32 	%r1031, [%rd76+28];
	// begin inline asm
	lop3.b32 %r1030, %r1031, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1111, %r1030, 2021161080;
	xor.b32  	%r1041, %r1111, -2139062144;
	shr.u32 	%r1035, %r1031, 4;
	// begin inline asm
	lop3.b32 %r1034, %r1035, %r546, %r547, 40;
	// end inline asm
	add.s32 	%r1112, %r1034, 2021161080;
	xor.b32  	%r1047, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r62}, {%r1041}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r66}, {%r1047}, {%r1012, %r1013};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r62}, {%r1047}, {%r1024, %r1025};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r66}, {%r1041}, {%r1050, %r1051};
	// end inline asm
	sub.s32 	%r1113, %r1038, %r1044;
	add.s32 	%r1114, %r1113, 4;
	shr.s32 	%r1064, %r1114, 3;
	add.s32 	%r1115, %r1056, 4;
	shr.s32 	%r1063, %r1115, 3;
	sub.s32 	%r1116, %r1039, %r1045;
	add.s32 	%r1117, %r1116, 4;
	shr.s32 	%r1067, %r1117, 3;
	add.s32 	%r1118, %r1057, 4;
	shr.s32 	%r1066, %r1118, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1062, %r1063, %r1064;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1065, %r1066, %r1067;
	// end inline asm
	add.s32 	%r1119, %r76, %r1093;
	mul.wide.u32 	%rd82, %r1119, 4;
	add.s64 	%rd83, %rd48, %rd82;
	st.shared.u32 	[%rd83], %r1062;
	add.s32 	%r1120, %r76, %r1095;
	mul.wide.u32 	%rd84, %r1120, 4;
	add.s64 	%rd85, %rd48, %rd84;
	st.shared.u32 	[%rd85], %r1065;
	add.s32 	%r1319, %r1319, 8;
	setp.ne.s32 	%p8, %r1319, 32;
	@%p8 bra 	$L__BB0_10;
// %bb.11:                              // %L8479
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1139, [%rd10];
	ld.shared.u32 	%r1140, [%rd11+12800];
	ld.shared.u32 	%r1141, [%rd11+25600];
	ld.shared.u32 	%r1142, [%rd11+38400];
	ld.shared.u32 	%r1143, [%rd12];
	ld.shared.u32 	%r1144, [%rd13+12800];
	ld.shared.u32 	%r1145, [%rd13+25600];
	ld.shared.u32 	%r1146, [%rd13+38400];
	ld.shared.u32 	%r1147, [%rd14];
	ld.shared.u32 	%r1148, [%rd15+12800];
	ld.shared.u32 	%r1149, [%rd15+25600];
	ld.shared.u32 	%r1150, [%rd15+38400];
	ld.shared.u32 	%r1151, [%rd16];
	ld.shared.u32 	%r1152, [%rd7+12800];
	ld.shared.u32 	%r1153, [%rd7+25600];
	ld.shared.u32 	%r1154, [%rd7+38400];
	cvt.s32.s16 	%r1155, %r1139;
	shr.s32 	%r1156, %r1139, 16;
	cvt.s32.s16 	%r1157, %r1140;
	shr.s32 	%r1158, %r1140, 16;
	cvt.s32.s16 	%r1159, %r1141;
	shr.s32 	%r1160, %r1141, 16;
	cvt.s32.s16 	%r1161, %r1142;
	shr.s32 	%r1162, %r1142, 16;
	cvt.s32.s16 	%r1163, %r1143;
	shr.s32 	%r1164, %r1143, 16;
	cvt.s32.s16 	%r1165, %r1144;
	shr.s32 	%r1166, %r1144, 16;
	cvt.s32.s16 	%r1167, %r1145;
	shr.s32 	%r1168, %r1145, 16;
	cvt.s32.s16 	%r1169, %r1146;
	shr.s32 	%r1170, %r1146, 16;
	cvt.s32.s16 	%r1171, %r1147;
	shr.s32 	%r1172, %r1147, 16;
	cvt.s32.s16 	%r1173, %r1148;
	shr.s32 	%r1174, %r1148, 16;
	cvt.s32.s16 	%r1175, %r1149;
	shr.s32 	%r1176, %r1149, 16;
	cvt.s32.s16 	%r1177, %r1150;
	shr.s32 	%r1178, %r1150, 16;
	cvt.s32.s16 	%r1179, %r1151;
	shr.s32 	%r1180, %r1151, 16;
	cvt.s32.s16 	%r1181, %r1152;
	shr.s32 	%r1182, %r1152, 16;
	cvt.s32.s16 	%r1183, %r1153;
	shr.s32 	%r1184, %r1153, 16;
	cvt.s32.s16 	%r1185, %r1154;
	shr.s32 	%r1186, %r1154, 16;
	add.s32 	%r1187, %r1155, %r77;
	add.s32 	%r1188, %r1187, %r1157;
	add.s32 	%r1189, %r1188, %r1159;
	add.s32 	%r1190, %r1189, %r1161;
	shr.s32 	%r1191, %r1190, %r78;
	add.s32 	%r1192, %r1156, %r77;
	add.s32 	%r1193, %r1192, %r1158;
	add.s32 	%r1194, %r1193, %r1160;
	add.s32 	%r1195, %r1194, %r1162;
	shr.s32 	%r1196, %r1195, %r78;
	add.s32 	%r1197, %r1163, %r77;
	add.s32 	%r1198, %r1197, %r1165;
	add.s32 	%r1199, %r1198, %r1167;
	add.s32 	%r1200, %r1199, %r1169;
	shr.s32 	%r1201, %r1200, %r78;
	add.s32 	%r1202, %r1164, %r77;
	add.s32 	%r1203, %r1202, %r1166;
	add.s32 	%r1204, %r1203, %r1168;
	add.s32 	%r1205, %r1204, %r1170;
	shr.s32 	%r1206, %r1205, %r78;
	add.s32 	%r1207, %r1171, %r77;
	add.s32 	%r1208, %r1207, %r1173;
	add.s32 	%r1209, %r1208, %r1175;
	add.s32 	%r1210, %r1209, %r1177;
	shr.s32 	%r1211, %r1210, %r78;
	add.s32 	%r1212, %r1172, %r77;
	add.s32 	%r1213, %r1212, %r1174;
	add.s32 	%r1214, %r1213, %r1176;
	add.s32 	%r1215, %r1214, %r1178;
	shr.s32 	%r1216, %r1215, %r78;
	add.s32 	%r1217, %r1179, %r77;
	add.s32 	%r1218, %r1217, %r1181;
	add.s32 	%r1219, %r1218, %r1183;
	add.s32 	%r1220, %r1219, %r1185;
	shr.s32 	%r1221, %r1220, %r78;
	add.s32 	%r1222, %r1180, %r77;
	add.s32 	%r1223, %r1222, %r1182;
	add.s32 	%r1224, %r1223, %r1184;
	add.s32 	%r1225, %r1224, %r1186;
	shr.s32 	%r1226, %r1225, %r78;
	max.s32 	%r1227, %r1191, -7;
	min.s32 	%r1126, %r1227, 7;
	max.s32 	%r1228, %r1196, -7;
	min.s32 	%r1133, %r1228, 7;
	max.s32 	%r1229, %r1201, -7;
	min.s32 	%r1125, %r1229, 7;
	max.s32 	%r1230, %r1206, -7;
	min.s32 	%r1132, %r1230, 7;
	max.s32 	%r1231, %r1211, -7;
	min.s32 	%r1123, %r1231, 7;
	max.s32 	%r1232, %r1216, -7;
	min.s32 	%r1130, %r1232, 7;
	max.s32 	%r1233, %r1221, -7;
	min.s32 	%r1122, %r1233, 7;
	max.s32 	%r1234, %r1226, -7;
	min.s32 	%r1129, %r1234, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1121, %r1122, %r1123, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1124, %r1125, %r1126, %r1121;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1128, %r1129, %r1130, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1131, %r1132, %r1133, %r1128;
	// end inline asm
	shl.b32 	%r1138, %r1131, 4;
	// begin inline asm
	lop3.b32 %r1245, %r547, %r1124, %r1138, 202;
	// end inline asm
	setp.eq.s32 	%p9, %r1312, 0;
	selp.b32 	%r1317, %r1245, %r1317, %p9;
	selp.b32 	%r1318, %r1245, %r1318, %p9;
	setp.eq.s32 	%p10, %r1312, 32;
	selp.b32 	%r1313, %r1245, %r1313, %p10;
	selp.b32 	%r1314, %r1245, %r1314, %p10;
	setp.eq.s32 	%p11, %r1312, 64;
	selp.b32 	%r1315, %r1245, %r1315, %p11;
	selp.b32 	%r1316, %r1245, %r1316, %p11;
	add.s32 	%r30, %r1312, 32;
	setp.ne.s32 	%p12, %r1312, 96;
	mov.u32 	%r1312, %r30;
	@%p12 bra 	$L__BB0_8;
// %bb.12:                              // %L11215
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p13, %r79, 0;
	// begin inline asm
	prmt.b32 %r1235, %r1317, %r1313, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1239, %r1318, %r1314, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1243, %r1315, %r1245, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1247, %r1316, %r1245, %r352;
	// end inline asm
	selp.b32 	%r1283, %r1239, %r1235, %p13;
	shfl.sync.bfly.b32	%r1284, %r1283, 1, 31, -1;
	selp.b32 	%r1252, %r1235, %r1284, %p13;
	selp.b32 	%r1253, %r1284, %r1239, %p13;
	selp.b32 	%r1285, %r1247, %r1243, %p13;
	shfl.sync.bfly.b32	%r1286, %r1285, 1, 31, -1;
	selp.b32 	%r1260, %r1243, %r1286, %p13;
	selp.b32 	%r1261, %r1286, %r1247, %p13;
	// begin inline asm
	prmt.b32 %r1251, %r1252, %r1253, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1255, %r1252, %r1253, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1259, %r1260, %r1261, %r348;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1263, %r1260, %r1261, %r352;
	// end inline asm
	selp.b32 	%r1287, %r1259, %r1251, %p5;
	shfl.sync.bfly.b32	%r1288, %r1287, 2, 31, -1;
	selp.b32 	%r1268, %r1251, %r1288, %p5;
	selp.b32 	%r1269, %r1288, %r1259, %p5;
	selp.b32 	%r1289, %r1263, %r1255, %p5;
	shfl.sync.bfly.b32	%r1290, %r1289, 2, 31, -1;
	selp.b32 	%r1276, %r1255, %r1290, %p5;
	selp.b32 	%r1277, %r1290, %r1263, %p5;
	// begin inline asm
	prmt.b32 %r1267, %r1268, %r1269, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1268, %r1269, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1276, %r1277, %r220;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1276, %r1277, %r224;
	// end inline asm
	selp.b32 	%r1291, %r1275, %r1267, %p6;
	shfl.sync.bfly.b32	%r1292, %r1291, 4, 31, -1;
	selp.b32 	%r1293, %r1267, %r1292, %p6;
	selp.b32 	%r1294, %r1292, %r1275, %p6;
	selp.b32 	%r1295, %r1279, %r1271, %p6;
	shfl.sync.bfly.b32	%r1296, %r1295, 4, 31, -1;
	selp.b32 	%r1297, %r1271, %r1296, %p6;
	selp.b32 	%r1298, %r1296, %r1279, %p6;
	selp.b32 	%r1299, %r1297, %r1293, %p13;
	shfl.sync.bfly.b32	%r1300, %r1299, 1, 31, -1;
	selp.b32 	%r1301, %r1293, %r1300, %p13;
	selp.b32 	%r1302, %r1300, %r1297, %p13;
	selp.b32 	%r1303, %r1298, %r1294, %p13;
	shfl.sync.bfly.b32	%r1304, %r1303, 1, 31, -1;
	selp.b32 	%r1305, %r1294, %r1304, %p13;
	selp.b32 	%r1306, %r1304, %r1298, %p13;
	add.s32 	%r1307, %r81, %r1311;
	shr.u32 	%r1308, %r1307, 2;
	add.s32 	%r1309, %r80, %r1308;
	mul.wide.u32 	%rd86, %r1309, 4;
	add.s64 	%rd87, %rd4, %rd86;
	st.global.v4.u32 	[%rd87], {%r1301, %r1305, %r1302, %r1306};
	add.s32 	%r31, %r1311, 128;
	setp.ne.s32 	%p16, %r1311, 1920;
	mov.u32 	%r1311, %r31;
	@%p16 bra 	$L__BB0_7;
// %bb.13:                              // %L11619
	mov.u32 	%r1310, 0;
	st.global.u32 	[%rd6], %r1310;
	ret;
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r82;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L25
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r82;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_5:                              // %L254
	mov.u32 	%r96, 2;
	st.global.u32 	[%rd6], %r96;
	mov.u64 	%rd25, exception925;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r82;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
