// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1344>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r83, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r84, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r85, %r1, 768, %r3;
	or.b32  	%r86, %r85, %r4;
	mul.wide.u32 	%rd22, %r86, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r87, 1;
	st.global.u32 	[%rd7], %r87;
	setp.gt.u32 	%p8, %r81, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r82, %r81;
	setp.gt.s32 	%p10, %r82, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r88, %r82, %r81;
	and.b32  	%r89, %r88, 127;
	setp.eq.s32 	%p12, %r89, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass109
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r74, %r4, 3;
	shl.b32 	%r90, %r2, 2;
	or.b32  	%r91, %r74, %r90;
	cvt.u16.u32 	%rs1, %r91;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r92, %rs6;
	and.b32  	%r75, %r92, 255;
	shr.u32 	%r93, %r1, 1;
	cvt.u16.u32 	%rs7, %r93;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r94, %rs12;
	and.b32  	%r76, %r94, 255;
	and.b32  	%r77, %r1, 1;
	neg.s32 	%r95, %r77;
	and.b32  	%r96, %r95, 96;
	mad.lo.s32 	%r97, %r76, 192, %r96;
	add.s32 	%r98, %r97, %r75;
	mul.wide.u32 	%rd23, %r98, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r99, [%rd24];
	add.s32 	%r79, %r99, -4;
	setp.lt.u32 	%p13, %r79, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r78, %r99, -3;
	or.b32  	%r101, %r4, %r2;
	setp.ne.s32 	%p1, %r101, 0;
	mul.wide.u32 	%rd27, %r1, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1335, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r1335;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r77, 0;
	bar.sync 	0;
	shr.u32 	%r5, %r4, 2;
	shr.u32 	%r360, %r2, 2;
	cvt.u16.u32 	%rs13, %r360;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r5;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r361, %rs27, 256;
	shl.b32 	%r362, %r4, 1;
	and.b32  	%r363, %r362, 12;
	shl.b32 	%r364, %r4, 4;
	and.b32  	%r6, %r364, 16;
	shl.b32 	%r365, %r2, 6;
	and.b32  	%r366, %r365, 192;
	or.b32  	%r367, %r366, %r6;
	or.b32  	%r368, %r367, %r363;
	selp.b32 	%r369, 0, 24576, %p15;
	or.b32  	%r370, %r368, %r369;
	mad.lo.s32 	%r371, %r76, 49152, %r370;
	add.s32 	%r372, %r371, %r361;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd28, %r373;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r104, %r105, %r120, %r121}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r374, %rs34, 256;
	add.s32 	%r375, %r371, %r374;
	shl.b32 	%r376, %r375, 2;
	cvt.u64.u32 	%rd30, %r376;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r112, %r113, %r128, %r129}, [%rd31];
	or.b32  	%r377, %r371, 33;
	add.s32 	%r378, %r377, %r361;
	mul.wide.u32 	%rd32, %r378, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r136, %r137, %r152, %r153}, [%rd33+-4];
	add.s32 	%r379, %r377, %r374;
	mul.wide.u32 	%rd34, %r379, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r144, %r145, %r160, %r161}, [%rd35+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r380, %rs42, 256;
	add.s32 	%r381, %r371, %r380;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd36, %r382;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r168, %r169, %r184, %r185}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r383, %rs49, 256;
	add.s32 	%r384, %r371, %r383;
	shl.b32 	%r385, %r384, 2;
	cvt.u64.u32 	%rd38, %r385;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r176, %r177, %r192, %r193}, [%rd39];
	add.s32 	%r386, %r377, %r380;
	mul.wide.u32 	%rd40, %r386, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r200, %r201, %r216, %r217}, [%rd41+-4];
	add.s32 	%r387, %r377, %r383;
	mul.wide.u32 	%rd42, %r387, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r208, %r209, %r224, %r225}, [%rd43+-4];
	mov.u32 	%r226, 21520;
	// begin inline asm
	prmt.b32 %r232, %r104, %r105, %r226;
	// end inline asm
	mov.u32 	%r230, 30258;
	// begin inline asm
	prmt.b32 %r233, %r104, %r105, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r112, %r113, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r112, %r113, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r120, %r121, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r120, %r121, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r128, %r129, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r128, %r129, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r136, %r137, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r136, %r137, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r144, %r145, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r144, %r145, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r152, %r153, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r152, %r153, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r160, %r161, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r160, %r161, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r168, %r169, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r168, %r169, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r176, %r177, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r176, %r177, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r184, %r185, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r184, %r185, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r192, %r193, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r192, %r193, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r200, %r201, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r200, %r201, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r208, %r209, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r208, %r209, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r216, %r217, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r216, %r217, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r224, %r225, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r224, %r225, %r230;
	// end inline asm
	mov.u32 	%r354, 25152;
	// begin inline asm
	prmt.b32 %r231, %r232, %r233, %r354;
	// end inline asm
	mov.u32 	%r358, 29521;
	// begin inline asm
	prmt.b32 %r235, %r232, %r233, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r240, %r241, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r240, %r241, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r248, %r249, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r248, %r249, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r256, %r257, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r256, %r257, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r264, %r265, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r264, %r265, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r272, %r273, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r272, %r273, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r280, %r281, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r280, %r281, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r288, %r289, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r288, %r289, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r296, %r297, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r296, %r297, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r304, %r305, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r304, %r305, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r312, %r313, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r312, %r313, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r320, %r321, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r320, %r321, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r328, %r329, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r328, %r329, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r336, %r337, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r336, %r337, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r344, %r345, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r344, %r345, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r352, %r353, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r355, %r352, %r353, %r358;
	// end inline asm
	and.b32  	%r7, %r4, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r388, %r263, %r231, %p16;
	shfl.sync.bfly.b32	%r389, %r388, 2, 31, -1;
	selp.b32 	%r390, %r231, %r389, %p16;
	selp.b32 	%r391, %r389, %r263, %p16;
	selp.b32 	%r392, %r271, %r239, %p16;
	shfl.sync.bfly.b32	%r393, %r392, 2, 31, -1;
	selp.b32 	%r394, %r239, %r393, %p16;
	selp.b32 	%r395, %r393, %r271, %p16;
	selp.b32 	%r396, %r267, %r235, %p16;
	shfl.sync.bfly.b32	%r397, %r396, 2, 31, -1;
	selp.b32 	%r398, %r235, %r397, %p16;
	selp.b32 	%r399, %r397, %r267, %p16;
	selp.b32 	%r400, %r275, %r243, %p16;
	shfl.sync.bfly.b32	%r401, %r400, 2, 31, -1;
	selp.b32 	%r402, %r243, %r401, %p16;
	selp.b32 	%r403, %r401, %r275, %p16;
	selp.b32 	%r404, %r279, %r247, %p16;
	shfl.sync.bfly.b32	%r405, %r404, 2, 31, -1;
	selp.b32 	%r406, %r247, %r405, %p16;
	selp.b32 	%r407, %r405, %r279, %p16;
	selp.b32 	%r408, %r287, %r255, %p16;
	shfl.sync.bfly.b32	%r409, %r408, 2, 31, -1;
	selp.b32 	%r410, %r255, %r409, %p16;
	selp.b32 	%r411, %r409, %r287, %p16;
	selp.b32 	%r412, %r283, %r251, %p16;
	shfl.sync.bfly.b32	%r413, %r412, 2, 31, -1;
	selp.b32 	%r414, %r251, %r413, %p16;
	selp.b32 	%r415, %r413, %r283, %p16;
	selp.b32 	%r416, %r291, %r259, %p16;
	shfl.sync.bfly.b32	%r417, %r416, 2, 31, -1;
	selp.b32 	%r418, %r259, %r417, %p16;
	selp.b32 	%r419, %r417, %r291, %p16;
	selp.b32 	%r420, %r327, %r295, %p16;
	shfl.sync.bfly.b32	%r421, %r420, 2, 31, -1;
	selp.b32 	%r422, %r295, %r421, %p16;
	selp.b32 	%r423, %r421, %r327, %p16;
	selp.b32 	%r424, %r335, %r303, %p16;
	shfl.sync.bfly.b32	%r425, %r424, 2, 31, -1;
	selp.b32 	%r426, %r303, %r425, %p16;
	selp.b32 	%r427, %r425, %r335, %p16;
	selp.b32 	%r428, %r331, %r299, %p16;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r299, %r429, %p16;
	selp.b32 	%r431, %r429, %r331, %p16;
	selp.b32 	%r432, %r339, %r307, %p16;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r307, %r433, %p16;
	selp.b32 	%r435, %r433, %r339, %p16;
	selp.b32 	%r436, %r343, %r311, %p16;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r311, %r437, %p16;
	selp.b32 	%r439, %r437, %r343, %p16;
	selp.b32 	%r440, %r351, %r319, %p16;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r319, %r441, %p16;
	selp.b32 	%r443, %r441, %r351, %p16;
	selp.b32 	%r444, %r347, %r315, %p16;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r315, %r445, %p16;
	selp.b32 	%r447, %r445, %r347, %p16;
	selp.b32 	%r448, %r355, %r323, %p16;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r323, %r449, %p16;
	selp.b32 	%r451, %r449, %r355, %p16;
	and.b32  	%r8, %r4, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r452, %r422, %r390, %p17;
	shfl.sync.bfly.b32	%r453, %r452, 4, 31, -1;
	selp.b32 	%r9, %r390, %r453, %p17;
	selp.b32 	%r10, %r453, %r422, %p17;
	selp.b32 	%r454, %r426, %r394, %p17;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r11, %r394, %r455, %p17;
	selp.b32 	%r12, %r455, %r426, %p17;
	selp.b32 	%r456, %r430, %r398, %p17;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r13, %r398, %r457, %p17;
	selp.b32 	%r14, %r457, %r430, %p17;
	selp.b32 	%r458, %r434, %r402, %p17;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r15, %r402, %r459, %p17;
	selp.b32 	%r16, %r459, %r434, %p17;
	selp.b32 	%r460, %r438, %r406, %p17;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r17, %r406, %r461, %p17;
	selp.b32 	%r18, %r461, %r438, %p17;
	selp.b32 	%r462, %r442, %r410, %p17;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r19, %r410, %r463, %p17;
	selp.b32 	%r20, %r463, %r442, %p17;
	selp.b32 	%r464, %r446, %r414, %p17;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r21, %r414, %r465, %p17;
	selp.b32 	%r22, %r465, %r446, %p17;
	selp.b32 	%r466, %r450, %r418, %p17;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r23, %r418, %r467, %p17;
	selp.b32 	%r24, %r467, %r450, %p17;
	selp.b32 	%r468, %r423, %r391, %p17;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r25, %r391, %r469, %p17;
	selp.b32 	%r26, %r469, %r423, %p17;
	selp.b32 	%r470, %r427, %r395, %p17;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r27, %r395, %r471, %p17;
	selp.b32 	%r28, %r471, %r427, %p17;
	selp.b32 	%r472, %r431, %r399, %p17;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r29, %r399, %r473, %p17;
	selp.b32 	%r30, %r473, %r431, %p17;
	selp.b32 	%r474, %r435, %r403, %p17;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r31, %r403, %r475, %p17;
	selp.b32 	%r32, %r475, %r435, %p17;
	selp.b32 	%r476, %r439, %r407, %p17;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r33, %r407, %r477, %p17;
	selp.b32 	%r34, %r477, %r439, %p17;
	selp.b32 	%r478, %r443, %r411, %p17;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r35, %r411, %r479, %p17;
	selp.b32 	%r36, %r479, %r443, %p17;
	selp.b32 	%r480, %r447, %r415, %p17;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r37, %r415, %r481, %p17;
	selp.b32 	%r38, %r481, %r447, %p17;
	selp.b32 	%r482, %r451, %r419, %p17;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r39, %r419, %r483, %p17;
	selp.b32 	%r40, %r483, %r451, %p17;
	shl.b32 	%r484, %r4, 2;
	and.b32  	%r485, %r484, 28;
	and.b32  	%r486, %r3, 96;
	or.b32  	%r41, %r486, %r485;
	shl.b32 	%r487, %r76, 8;
	and.b32  	%r42, %r2, 12;
	shl.b32 	%r488, %r1, 7;
	and.b32  	%r489, %r488, 128;
	or.b32  	%r490, %r41, %r489;
	or.b32  	%r43, %r490, %r487;
	shl.b32 	%r491, %r4, 3;
	and.b32  	%r492, %r491, 24;
	or.b32  	%r44, %r486, %r492;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r493, %rs54;
	and.b32  	%r494, %r493, 255;
	and.b32  	%r45, %r362, 6;
	and.b32  	%r495, %r2, 3;
	mul.lo.s32 	%r496, %r495, 3200;
	or.b32  	%r46, %r496, %r494;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r497, %rs60;
	and.b32  	%r498, %r497, 255;
	or.b32  	%r47, %r496, %r498;
	and.b32  	%r499, %r4, 7;
	shl.b32 	%r501, %r87, %r79;
	setp.gt.u32 	%p18, %r79, 31;
	selp.b32 	%r48, 0, %r501, %p18;
	min.u32 	%r49, %r78, 31;
	and.b32  	%r50, %r4, 1;
	shl.b32 	%r502, %r4, 5;
	and.b32  	%r51, %r502, 64;
	shl.b32 	%r503, %r76, 12;
	shl.b32 	%r504, %r1, 11;
	and.b32  	%r505, %r504, 2048;
	or.b32  	%r506, %r503, %r505;
	mad.lo.s32 	%r507, %r75, 196608, %r506;
	mul.lo.s32 	%r508, %r499, 100;
	add.s32 	%r509, %r508, %r75;
	mul.wide.u32 	%rd44, %r509, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd9, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r508;
	cvt.u64.u32 	%rd48, %r75;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd46, %rd50;
	add.s32 	%r510, %r508, 800;
	add.s32 	%r511, %r510, %r75;
	mul.wide.u32 	%rd51, %r511, 4;
	add.s64 	%rd11, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r510;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd46, %rd54;
	add.s32 	%r512, %r508, 1600;
	add.s32 	%r513, %r512, %r75;
	mul.wide.u32 	%rd55, %r513, 4;
	add.s64 	%rd13, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r512;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd14, %rd46, %rd58;
	or.b32  	%r514, %r4, 24;
	mul.lo.s32 	%r515, %r514, 100;
	add.s32 	%r516, %r515, %r75;
	mul.wide.u32 	%rd59, %r516, 4;
	add.s64 	%rd15, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r515;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd16, %rd46, %rd62;
	and.b32  	%r52, %r491, 32;
	shl.b32 	%r53, %r507, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2581
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r517, %r1335, %r81;
	setp.ge.s32 	%p19, %r517, %r82;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2589.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r55, %r1335, %r42;
	mov.u32 	%r1336, 0;
	mov.u32 	%r1337, %r1336;
	mov.u32 	%r1338, %r1336;
	mov.u32 	%r1339, %r1336;
	mov.u32 	%r1340, %r1336;
	mov.u32 	%r1341, %r1336;
	mov.u32 	%r1342, %r1336;
$L__BB0_13:                             // %L2589
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r2, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_13 Depth=2
	add.s32 	%r519, %r55, %r1336;
	or.b32  	%r520, %r519, %r74;
	and.b32  	%r521, %r520, 32751;
	add.s32 	%r522, %r521, %r81;
	mad.lo.s32 	%r523, %r522, 12288, %r43;
	mul.hi.s32 	%r524, %r523, 715827883;
	shr.u32 	%r525, %r524, 31;
	shr.s32 	%r526, %r524, 26;
	add.s32 	%r527, %r526, %r525;
	setp.lt.s32 	%p21, %r523, 0;
	mul.lo.s32 	%r528, %r527, 402653184;
	setp.ne.s32 	%p22, %r528, %r523;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r529, -1, 0, %p23;
	add.s32 	%r530, %r527, %r529;
	or.b32  	%r531, %r523, 1;
	mad.lo.s32 	%r532, %r530, -402653184, %r531;
	mul.wide.s32 	%rd63, %r532, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r533, %r534, %r535, %r536}, [%rd64+-4];
	or.b32  	%r537, %r520, 16;
	and.b32  	%r538, %r537, 32767;
	add.s32 	%r539, %r538, %r81;
	mad.lo.s32 	%r540, %r539, 12288, %r43;
	mul.hi.s32 	%r541, %r540, 715827883;
	shr.u32 	%r542, %r541, 31;
	shr.s32 	%r543, %r541, 26;
	add.s32 	%r544, %r543, %r542;
	setp.lt.s32 	%p24, %r540, 0;
	mul.lo.s32 	%r545, %r544, 402653184;
	setp.ne.s32 	%p25, %r545, %r540;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r546, -1, 0, %p26;
	add.s32 	%r547, %r544, %r546;
	or.b32  	%r548, %r540, 1;
	mad.lo.s32 	%r549, %r547, -402653184, %r548;
	mul.wide.s32 	%rd65, %r549, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r550, %r551, %r552, %r553}, [%rd66+-4];
	and.b32  	%r554, %r520, 15;
	mul.lo.s32 	%r555, %r554, 129;
	add.s32 	%r556, %r41, %r555;
	mul.wide.u32 	%rd67, %r556, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r533;
	cvt.u64.u32 	%rd70, %r555;
	cvt.u64.u32 	%rd71, %r41;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r534;
	st.shared.u32 	[%rd74+8], %r535;
	st.shared.u32 	[%rd74+12], %r536;
	and.b32  	%r557, %r537, 31;
	mul.lo.s32 	%r558, %r557, 129;
	add.s32 	%r559, %r41, %r558;
	mul.wide.u32 	%rd75, %r559, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r550;
	cvt.u64.u32 	%rd77, %r558;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r551;
	st.shared.u32 	[%rd80+8], %r552;
	st.shared.u32 	[%rd80+12], %r553;
$L__BB0_14:                             // %L4316
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r573, 0;
	mov.u32 	%r1343, %r573;
$L__BB0_15:                             // %L4318
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1085, %r1343, %r5;
	mad.lo.s32 	%r1086, %r1085, 129, %r44;
	mul.wide.u32 	%rd81, %r1086, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r562, [%rd83];
	mov.u32 	%r563, 134744072;
	mov.u32 	%r564, 252645135;
	// begin inline asm
	lop3.b32 %r561, %r562, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1087, %r561, 2021161080;
	xor.b32  	%r572, %r1087, -2139062144;
	shr.u32 	%r566, %r562, 4;
	// begin inline asm
	lop3.b32 %r565, %r566, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1088, %r565, 2021161080;
	xor.b32  	%r578, %r1088, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r569, %r570}, {%r9}, {%r572}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r575, %r576}, {%r13}, {%r578}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r581, %r582}, {%r9}, {%r578}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r587, %r588}, {%r13}, {%r572}, {%r581, %r582};
	// end inline asm
	ld.shared.u32 	%r594, [%rd83+4];
	// begin inline asm
	lop3.b32 %r593, %r594, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1089, %r593, 2021161080;
	xor.b32  	%r604, %r1089, -2139062144;
	shr.u32 	%r598, %r594, 4;
	// begin inline asm
	lop3.b32 %r597, %r598, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1090, %r597, 2021161080;
	xor.b32  	%r610, %r1090, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r601, %r602}, {%r17}, {%r604}, {%r569, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r607, %r608}, {%r21}, {%r610}, {%r575, %r576};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r613, %r614}, {%r17}, {%r610}, {%r587, %r588};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r619, %r620}, {%r21}, {%r604}, {%r613, %r614};
	// end inline asm
	ld.shared.u32 	%r626, [%rd83+8];
	// begin inline asm
	lop3.b32 %r625, %r626, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1091, %r625, 2021161080;
	xor.b32  	%r636, %r1091, -2139062144;
	shr.u32 	%r630, %r626, 4;
	// begin inline asm
	lop3.b32 %r629, %r630, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1092, %r629, 2021161080;
	xor.b32  	%r642, %r1092, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r25}, {%r636}, {%r601, %r602};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r29}, {%r642}, {%r607, %r608};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r25}, {%r642}, {%r619, %r620};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r651, %r652}, {%r29}, {%r636}, {%r645, %r646};
	// end inline asm
	ld.shared.u32 	%r658, [%rd83+12];
	// begin inline asm
	lop3.b32 %r657, %r658, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1093, %r657, 2021161080;
	xor.b32  	%r668, %r1093, -2139062144;
	shr.u32 	%r662, %r658, 4;
	// begin inline asm
	lop3.b32 %r661, %r662, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1094, %r661, 2021161080;
	xor.b32  	%r674, %r1094, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r665, %r666}, {%r33}, {%r668}, {%r633, %r634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r671, %r672}, {%r37}, {%r674}, {%r639, %r640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r677, %r678}, {%r33}, {%r674}, {%r651, %r652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r683, %r684}, {%r37}, {%r668}, {%r677, %r678};
	// end inline asm
	ld.shared.u32 	%r690, [%rd83+16];
	// begin inline asm
	lop3.b32 %r689, %r690, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1095, %r689, 2021161080;
	xor.b32  	%r700, %r1095, -2139062144;
	shr.u32 	%r694, %r690, 4;
	// begin inline asm
	lop3.b32 %r693, %r694, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1096, %r693, 2021161080;
	xor.b32  	%r706, %r1096, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r697, %r698}, {%r10}, {%r700}, {%r665, %r666};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r703, %r704}, {%r14}, {%r706}, {%r671, %r672};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r709, %r710}, {%r10}, {%r706}, {%r683, %r684};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r715, %r716}, {%r14}, {%r700}, {%r709, %r710};
	// end inline asm
	ld.shared.u32 	%r722, [%rd83+20];
	// begin inline asm
	lop3.b32 %r721, %r722, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1097, %r721, 2021161080;
	xor.b32  	%r732, %r1097, -2139062144;
	shr.u32 	%r726, %r722, 4;
	// begin inline asm
	lop3.b32 %r725, %r726, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1098, %r725, 2021161080;
	xor.b32  	%r738, %r1098, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r729, %r730}, {%r18}, {%r732}, {%r697, %r698};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r735, %r736}, {%r22}, {%r738}, {%r703, %r704};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r741, %r742}, {%r18}, {%r738}, {%r715, %r716};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r747, %r748}, {%r22}, {%r732}, {%r741, %r742};
	// end inline asm
	ld.shared.u32 	%r754, [%rd83+24];
	// begin inline asm
	lop3.b32 %r753, %r754, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1099, %r753, 2021161080;
	xor.b32  	%r764, %r1099, -2139062144;
	shr.u32 	%r758, %r754, 4;
	// begin inline asm
	lop3.b32 %r757, %r758, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1100, %r757, 2021161080;
	xor.b32  	%r770, %r1100, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r761, %r762}, {%r26}, {%r764}, {%r729, %r730};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r767, %r768}, {%r30}, {%r770}, {%r735, %r736};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r773, %r774}, {%r26}, {%r770}, {%r747, %r748};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r779, %r780}, {%r30}, {%r764}, {%r773, %r774};
	// end inline asm
	ld.shared.u32 	%r786, [%rd83+28];
	// begin inline asm
	lop3.b32 %r785, %r786, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1101, %r785, 2021161080;
	xor.b32  	%r796, %r1101, -2139062144;
	shr.u32 	%r790, %r786, 4;
	// begin inline asm
	lop3.b32 %r789, %r790, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1102, %r789, 2021161080;
	xor.b32  	%r802, %r1102, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r793, %r794}, {%r34}, {%r796}, {%r761, %r762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r799, %r800}, {%r38}, {%r802}, {%r767, %r768};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r805, %r806}, {%r34}, {%r802}, {%r779, %r780};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r811, %r812}, {%r38}, {%r796}, {%r805, %r806};
	// end inline asm
	sub.s32 	%r1103, %r793, %r799;
	add.s32 	%r1104, %r1103, 4;
	shr.s32 	%r819, %r1104, 3;
	add.s32 	%r1105, %r811, 4;
	shr.s32 	%r818, %r1105, 3;
	sub.s32 	%r1106, %r794, %r800;
	add.s32 	%r1107, %r1106, 4;
	shr.s32 	%r822, %r1107, 3;
	add.s32 	%r1108, %r812, 4;
	shr.s32 	%r821, %r1108, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r817, %r818, %r819;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r820, %r821, %r822;
	// end inline asm
	or.b32  	%r1109, %r45, %r1343;
	mul.lo.s32 	%r1110, %r1109, 100;
	add.s32 	%r1111, %r46, %r1110;
	mul.wide.u32 	%rd84, %r1111, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r817;
	add.s32 	%r1112, %r1110, 100;
	add.s32 	%r1113, %r46, %r1112;
	mul.wide.u32 	%rd87, %r1113, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r820;
	ld.shared.u32 	%r824, [%rd83];
	// begin inline asm
	lop3.b32 %r823, %r824, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1114, %r823, 2021161080;
	xor.b32  	%r834, %r1114, -2139062144;
	shr.u32 	%r828, %r824, 4;
	// begin inline asm
	lop3.b32 %r827, %r828, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1115, %r827, 2021161080;
	xor.b32  	%r840, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r831, %r832}, {%r11}, {%r834}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r837, %r838}, {%r15}, {%r840}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r843, %r844}, {%r11}, {%r840}, {%r573, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r849, %r850}, {%r15}, {%r834}, {%r843, %r844};
	// end inline asm
	ld.shared.u32 	%r856, [%rd83+4];
	// begin inline asm
	lop3.b32 %r855, %r856, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1116, %r855, 2021161080;
	xor.b32  	%r866, %r1116, -2139062144;
	shr.u32 	%r860, %r856, 4;
	// begin inline asm
	lop3.b32 %r859, %r860, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1117, %r859, 2021161080;
	xor.b32  	%r872, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r863, %r864}, {%r19}, {%r866}, {%r831, %r832};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r869, %r870}, {%r23}, {%r872}, {%r837, %r838};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r875, %r876}, {%r19}, {%r872}, {%r849, %r850};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r881, %r882}, {%r23}, {%r866}, {%r875, %r876};
	// end inline asm
	ld.shared.u32 	%r888, [%rd83+8];
	// begin inline asm
	lop3.b32 %r887, %r888, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1118, %r887, 2021161080;
	xor.b32  	%r898, %r1118, -2139062144;
	shr.u32 	%r892, %r888, 4;
	// begin inline asm
	lop3.b32 %r891, %r892, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1119, %r891, 2021161080;
	xor.b32  	%r904, %r1119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r895, %r896}, {%r27}, {%r898}, {%r863, %r864};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r901, %r902}, {%r31}, {%r904}, {%r869, %r870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r907, %r908}, {%r27}, {%r904}, {%r881, %r882};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r913, %r914}, {%r31}, {%r898}, {%r907, %r908};
	// end inline asm
	ld.shared.u32 	%r920, [%rd83+12];
	// begin inline asm
	lop3.b32 %r919, %r920, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1120, %r919, 2021161080;
	xor.b32  	%r930, %r1120, -2139062144;
	shr.u32 	%r924, %r920, 4;
	// begin inline asm
	lop3.b32 %r923, %r924, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1121, %r923, 2021161080;
	xor.b32  	%r936, %r1121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r927, %r928}, {%r35}, {%r930}, {%r895, %r896};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r933, %r934}, {%r39}, {%r936}, {%r901, %r902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r939, %r940}, {%r35}, {%r936}, {%r913, %r914};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r945, %r946}, {%r39}, {%r930}, {%r939, %r940};
	// end inline asm
	ld.shared.u32 	%r952, [%rd83+16];
	// begin inline asm
	lop3.b32 %r951, %r952, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1122, %r951, 2021161080;
	xor.b32  	%r962, %r1122, -2139062144;
	shr.u32 	%r956, %r952, 4;
	// begin inline asm
	lop3.b32 %r955, %r956, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1123, %r955, 2021161080;
	xor.b32  	%r968, %r1123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r959, %r960}, {%r12}, {%r962}, {%r927, %r928};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r965, %r966}, {%r16}, {%r968}, {%r933, %r934};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r971, %r972}, {%r12}, {%r968}, {%r945, %r946};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r977, %r978}, {%r16}, {%r962}, {%r971, %r972};
	// end inline asm
	ld.shared.u32 	%r984, [%rd83+20];
	// begin inline asm
	lop3.b32 %r983, %r984, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1124, %r983, 2021161080;
	xor.b32  	%r994, %r1124, -2139062144;
	shr.u32 	%r988, %r984, 4;
	// begin inline asm
	lop3.b32 %r987, %r988, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1125, %r987, 2021161080;
	xor.b32  	%r1000, %r1125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r991, %r992}, {%r20}, {%r994}, {%r959, %r960};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r997, %r998}, {%r24}, {%r1000}, {%r965, %r966};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1003, %r1004}, {%r20}, {%r1000}, {%r977, %r978};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1009, %r1010}, {%r24}, {%r994}, {%r1003, %r1004};
	// end inline asm
	ld.shared.u32 	%r1016, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1126, %r1015, 2021161080;
	xor.b32  	%r1026, %r1126, -2139062144;
	shr.u32 	%r1020, %r1016, 4;
	// begin inline asm
	lop3.b32 %r1019, %r1020, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1127, %r1019, 2021161080;
	xor.b32  	%r1032, %r1127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1023, %r1024}, {%r28}, {%r1026}, {%r991, %r992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1029, %r1030}, {%r32}, {%r1032}, {%r997, %r998};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1035, %r1036}, {%r28}, {%r1032}, {%r1009, %r1010};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1041, %r1042}, {%r32}, {%r1026}, {%r1035, %r1036};
	// end inline asm
	ld.shared.u32 	%r1048, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1047, %r1048, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1128, %r1047, 2021161080;
	xor.b32  	%r1058, %r1128, -2139062144;
	shr.u32 	%r1052, %r1048, 4;
	// begin inline asm
	lop3.b32 %r1051, %r1052, %r563, %r564, 40;
	// end inline asm
	add.s32 	%r1129, %r1051, 2021161080;
	xor.b32  	%r1064, %r1129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1055, %r1056}, {%r36}, {%r1058}, {%r1023, %r1024};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1061, %r1062}, {%r40}, {%r1064}, {%r1029, %r1030};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1067, %r1068}, {%r36}, {%r1064}, {%r1041, %r1042};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1073, %r1074}, {%r40}, {%r1058}, {%r1067, %r1068};
	// end inline asm
	sub.s32 	%r1130, %r1055, %r1061;
	add.s32 	%r1131, %r1130, 4;
	shr.s32 	%r1081, %r1131, 3;
	add.s32 	%r1132, %r1073, 4;
	shr.s32 	%r1080, %r1132, 3;
	sub.s32 	%r1133, %r1056, %r1062;
	add.s32 	%r1134, %r1133, 4;
	shr.s32 	%r1084, %r1134, 3;
	add.s32 	%r1135, %r1074, 4;
	shr.s32 	%r1083, %r1135, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1079, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1082, %r1083, %r1084;
	// end inline asm
	add.s32 	%r1136, %r47, %r1110;
	mul.wide.u32 	%rd89, %r1136, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1079;
	add.s32 	%r1137, %r47, %r1112;
	mul.wide.u32 	%rd91, %r1137, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1082;
	add.s32 	%r1343, %r1343, 8;
	setp.ne.s32 	%p27, %r1343, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L8051
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1156, [%rd9];
	ld.shared.u32 	%r1157, [%rd10+12800];
	ld.shared.u32 	%r1158, [%rd10+25600];
	ld.shared.u32 	%r1159, [%rd10+38400];
	ld.shared.u32 	%r1160, [%rd11];
	ld.shared.u32 	%r1161, [%rd12+12800];
	ld.shared.u32 	%r1162, [%rd12+25600];
	ld.shared.u32 	%r1163, [%rd12+38400];
	ld.shared.u32 	%r1164, [%rd13];
	ld.shared.u32 	%r1165, [%rd14+12800];
	ld.shared.u32 	%r1166, [%rd14+25600];
	ld.shared.u32 	%r1167, [%rd14+38400];
	ld.shared.u32 	%r1168, [%rd15];
	ld.shared.u32 	%r1169, [%rd16+12800];
	ld.shared.u32 	%r1170, [%rd16+25600];
	ld.shared.u32 	%r1171, [%rd16+38400];
	cvt.s32.s16 	%r1172, %r1156;
	shr.s32 	%r1173, %r1156, 16;
	cvt.s32.s16 	%r1174, %r1157;
	shr.s32 	%r1175, %r1157, 16;
	cvt.s32.s16 	%r1176, %r1158;
	shr.s32 	%r1177, %r1158, 16;
	cvt.s32.s16 	%r1178, %r1159;
	shr.s32 	%r1179, %r1159, 16;
	cvt.s32.s16 	%r1180, %r1160;
	shr.s32 	%r1181, %r1160, 16;
	cvt.s32.s16 	%r1182, %r1161;
	shr.s32 	%r1183, %r1161, 16;
	cvt.s32.s16 	%r1184, %r1162;
	shr.s32 	%r1185, %r1162, 16;
	cvt.s32.s16 	%r1186, %r1163;
	shr.s32 	%r1187, %r1163, 16;
	cvt.s32.s16 	%r1188, %r1164;
	shr.s32 	%r1189, %r1164, 16;
	cvt.s32.s16 	%r1190, %r1165;
	shr.s32 	%r1191, %r1165, 16;
	cvt.s32.s16 	%r1192, %r1166;
	shr.s32 	%r1193, %r1166, 16;
	cvt.s32.s16 	%r1194, %r1167;
	shr.s32 	%r1195, %r1167, 16;
	cvt.s32.s16 	%r1196, %r1168;
	shr.s32 	%r1197, %r1168, 16;
	cvt.s32.s16 	%r1198, %r1169;
	shr.s32 	%r1199, %r1169, 16;
	cvt.s32.s16 	%r1200, %r1170;
	shr.s32 	%r1201, %r1170, 16;
	cvt.s32.s16 	%r1202, %r1171;
	shr.s32 	%r1203, %r1171, 16;
	add.s32 	%r1204, %r1172, %r48;
	add.s32 	%r1205, %r1204, %r1174;
	add.s32 	%r1206, %r1205, %r1176;
	add.s32 	%r1207, %r1206, %r1178;
	shr.s32 	%r1208, %r1207, %r49;
	add.s32 	%r1209, %r1173, %r48;
	add.s32 	%r1210, %r1209, %r1175;
	add.s32 	%r1211, %r1210, %r1177;
	add.s32 	%r1212, %r1211, %r1179;
	shr.s32 	%r1213, %r1212, %r49;
	add.s32 	%r1214, %r1180, %r48;
	add.s32 	%r1215, %r1214, %r1182;
	add.s32 	%r1216, %r1215, %r1184;
	add.s32 	%r1217, %r1216, %r1186;
	shr.s32 	%r1218, %r1217, %r49;
	add.s32 	%r1219, %r1181, %r48;
	add.s32 	%r1220, %r1219, %r1183;
	add.s32 	%r1221, %r1220, %r1185;
	add.s32 	%r1222, %r1221, %r1187;
	shr.s32 	%r1223, %r1222, %r49;
	add.s32 	%r1224, %r1188, %r48;
	add.s32 	%r1225, %r1224, %r1190;
	add.s32 	%r1226, %r1225, %r1192;
	add.s32 	%r1227, %r1226, %r1194;
	shr.s32 	%r1228, %r1227, %r49;
	add.s32 	%r1229, %r1189, %r48;
	add.s32 	%r1230, %r1229, %r1191;
	add.s32 	%r1231, %r1230, %r1193;
	add.s32 	%r1232, %r1231, %r1195;
	shr.s32 	%r1233, %r1232, %r49;
	add.s32 	%r1234, %r1196, %r48;
	add.s32 	%r1235, %r1234, %r1198;
	add.s32 	%r1236, %r1235, %r1200;
	add.s32 	%r1237, %r1236, %r1202;
	shr.s32 	%r1238, %r1237, %r49;
	add.s32 	%r1239, %r1197, %r48;
	add.s32 	%r1240, %r1239, %r1199;
	add.s32 	%r1241, %r1240, %r1201;
	add.s32 	%r1242, %r1241, %r1203;
	shr.s32 	%r1243, %r1242, %r49;
	max.s32 	%r1244, %r1208, -7;
	min.s32 	%r1143, %r1244, 7;
	setp.ne.s32 	%p28, %r1143, %r1208;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1245, %r1213, -7;
	min.s32 	%r1150, %r1245, 7;
	setp.ne.s32 	%p30, %r1150, %r1213;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1246, %r1218, -7;
	min.s32 	%r1142, %r1246, 7;
	setp.ne.s32 	%p32, %r1142, %r1218;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1247, %r1223, -7;
	min.s32 	%r1149, %r1247, 7;
	setp.ne.s32 	%p34, %r1149, %r1223;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1248, %r1228, -7;
	min.s32 	%r1140, %r1248, 7;
	setp.ne.s32 	%p36, %r1140, %r1228;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1249, %r1233, -7;
	min.s32 	%r1147, %r1249, 7;
	setp.ne.s32 	%p38, %r1147, %r1233;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1250, %r1238, -7;
	min.s32 	%r1139, %r1250, 7;
	setp.ne.s32 	%p40, %r1139, %r1238;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1251, %r1243, -7;
	min.s32 	%r1146, %r1251, 7;
	setp.ne.s32 	%p42, %r1146, %r1243;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1138, %r1139, %r1140, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1141, %r1142, %r1143, %r1138;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1148, %r1149, %r1150, %r1145;
	// end inline asm
	shl.b32 	%r1155, %r1148, 4;
	// begin inline asm
	lop3.b32 %r1262, %r564, %r1141, %r1155, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1336, 0;
	selp.b32 	%r1341, %r1262, %r1341, %p43;
	selp.b32 	%r1342, %r1262, %r1342, %p43;
	setp.eq.s32 	%p44, %r1336, 32;
	selp.b32 	%r1337, %r1262, %r1337, %p44;
	selp.b32 	%r1338, %r1262, %r1338, %p44;
	setp.eq.s32 	%p45, %r1336, 64;
	selp.b32 	%r1339, %r1262, %r1339, %p45;
	selp.b32 	%r1340, %r1262, %r1340, %p45;
	add.s32 	%r72, %r1336, 32;
	setp.ne.s32 	%p46, %r1336, 96;
	mov.u32 	%r1336, %r72;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10457.L10463_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r50, 0;
	// begin inline asm
	prmt.b32 %r1252, %r1341, %r1337, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1256, %r1342, %r1338, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1339, %r1262, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1340, %r1262, %r358;
	// end inline asm
	selp.b32 	%r1300, %r1256, %r1252, %p47;
	shfl.sync.bfly.b32	%r1301, %r1300, 1, 31, -1;
	selp.b32 	%r1269, %r1252, %r1301, %p47;
	selp.b32 	%r1270, %r1301, %r1256, %p47;
	selp.b32 	%r1302, %r1264, %r1260, %p47;
	shfl.sync.bfly.b32	%r1303, %r1302, 1, 31, -1;
	selp.b32 	%r1277, %r1260, %r1303, %p47;
	selp.b32 	%r1278, %r1303, %r1264, %p47;
	// begin inline asm
	prmt.b32 %r1268, %r1269, %r1270, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1269, %r1270, %r358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r354;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r358;
	// end inline asm
	selp.b32 	%r1304, %r1276, %r1268, %p16;
	shfl.sync.bfly.b32	%r1305, %r1304, 2, 31, -1;
	selp.b32 	%r1285, %r1268, %r1305, %p16;
	selp.b32 	%r1286, %r1305, %r1276, %p16;
	selp.b32 	%r1306, %r1280, %r1272, %p16;
	shfl.sync.bfly.b32	%r1307, %r1306, 2, 31, -1;
	selp.b32 	%r1293, %r1272, %r1307, %p16;
	selp.b32 	%r1294, %r1307, %r1280, %p16;
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1293, %r1294, %r226;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1293, %r1294, %r230;
	// end inline asm
	selp.b32 	%r1308, %r1292, %r1284, %p17;
	shfl.sync.bfly.b32	%r1309, %r1308, 4, 31, -1;
	selp.b32 	%r1310, %r1284, %r1309, %p17;
	selp.b32 	%r1311, %r1309, %r1292, %p17;
	selp.b32 	%r1312, %r1296, %r1288, %p17;
	shfl.sync.bfly.b32	%r1313, %r1312, 4, 31, -1;
	selp.b32 	%r1314, %r1288, %r1313, %p17;
	selp.b32 	%r1315, %r1313, %r1296, %p17;
	selp.b32 	%r1316, %r1314, %r1310, %p47;
	shfl.sync.bfly.b32	%r1317, %r1316, 1, 31, -1;
	selp.b32 	%r1318, %r1310, %r1317, %p47;
	selp.b32 	%r1319, %r1317, %r1314, %p47;
	selp.b32 	%r1320, %r1315, %r1311, %p47;
	shfl.sync.bfly.b32	%r1321, %r1320, 1, 31, -1;
	selp.b32 	%r1322, %r1311, %r1321, %p47;
	selp.b32 	%r1323, %r1321, %r1315, %p47;
	and.b32  	%r1324, %r1335, 8064;
	or.b32  	%r1325, %r1324, %r52;
	or.b32  	%r1326, %r1325, %r6;
	or.b32  	%r1327, %r1326, %r51;
	or.b32  	%r1328, %r1327, %r53;
	cvt.u64.u32 	%rd93, %r1328;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1318, %r1322, %r1319, %r1323};
	add.s32 	%r73, %r1335, 128;
	setp.ne.s32 	%p50, %r1335, 32640;
	mov.u32 	%r1335, %r73;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10844
	selp.u32 	%r1329, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1329, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1330, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1330, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10875
	st.global.u32 	[%rd8], %r87;
$L__BB0_20:                             // %L10921
	mov.u32 	%r1332, 0;
	st.global.u32 	[%rd7], %r1332;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1333, 2;
	st.global.u32 	[%rd7], %r1333;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L370
	mov.u32 	%r100, 3;
	st.global.u32 	[%rd7], %r100;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
