// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception871[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1337>;
	.reg .b64 	%rd<94>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r84, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L17
	// begin inline asm
	mov.u32 %r85, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r85, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L32
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r86, %r3, %r1;
	mad.lo.s32 	%r87, %r4, 768, %r86;
	mul.wide.u32 	%rd20, %r87, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r88, 1;
	st.global.u32 	[%rd6], %r88;
	setp.gt.u32 	%p3, %r82, 32767;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L132
	ld.param.u32 	%r83, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r83, %r82;
	setp.gt.s32 	%p5, %r83, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L139
	sub.s32 	%r89, %r83, %r82;
	and.b32  	%r90, %r89, 127;
	setp.eq.s32 	%p7, %r90, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass101
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r26, %r1, 3;
	shl.b32 	%r91, %r2, 2;
	or.b32  	%r92, %r26, %r91;
	cvt.u16.u32 	%rs1, %r92;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r93, %rs6;
	and.b32  	%r27, %r93, 255;
	shr.u32 	%r94, %r4, 1;
	cvt.u16.u32 	%rs7, %r94;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r95, %rs12;
	and.b32  	%r28, %r95, 255;
	and.b32  	%r29, %r4, 1;
	neg.s32 	%r96, %r29;
	and.b32  	%r97, %r96, 96;
	mad.lo.s32 	%r98, %r28, 192, %r97;
	add.s32 	%r99, %r98, %r27;
	mul.wide.u32 	%rd21, %r99, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r30, [%rd22];
	add.s32 	%r31, %r30, -4;
	setp.gt.u32 	%p8, %r31, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass179
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p9, %r29, 0;
	add.s32 	%r358, %r30, -3;
	shr.u32 	%r32, %r1, 2;
	shr.u32 	%r359, %r2, 2;
	cvt.u16.u32 	%rs13, %r359;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r32;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r360, %rs27, 256;
	shl.b32 	%r361, %r1, 1;
	and.b32  	%r362, %r361, 12;
	shl.b32 	%r363, %r1, 4;
	and.b32  	%r33, %r363, 16;
	shl.b32 	%r364, %r2, 6;
	and.b32  	%r365, %r364, 192;
	or.b32  	%r366, %r365, %r33;
	or.b32  	%r367, %r366, %r362;
	selp.b32 	%r368, 0, 24576, %p9;
	or.b32  	%r369, %r367, %r368;
	mad.lo.s32 	%r370, %r28, 49152, %r369;
	add.s32 	%r371, %r370, %r360;
	shl.b32 	%r372, %r371, 2;
	cvt.u64.u32 	%rd25, %r372;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r102, %r103, %r118, %r119}, [%rd26];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r373, %rs34, 256;
	add.s32 	%r374, %r370, %r373;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd27, %r375;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r110, %r111, %r126, %r127}, [%rd28];
	or.b32  	%r376, %r370, 33;
	add.s32 	%r377, %r376, %r360;
	mul.wide.u32 	%rd29, %r377, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r134, %r135, %r150, %r151}, [%rd30+-4];
	add.s32 	%r378, %r376, %r373;
	mul.wide.u32 	%rd31, %r378, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r142, %r143, %r158, %r159}, [%rd32+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r379, %rs42, 256;
	add.s32 	%r380, %r370, %r379;
	shl.b32 	%r381, %r380, 2;
	cvt.u64.u32 	%rd33, %r381;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r166, %r167, %r182, %r183}, [%rd34];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r382, %rs49, 256;
	add.s32 	%r383, %r370, %r382;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd35, %r384;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r174, %r175, %r190, %r191}, [%rd36];
	add.s32 	%r385, %r376, %r379;
	mul.wide.u32 	%rd37, %r385, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r198, %r199, %r214, %r215}, [%rd38+-4];
	add.s32 	%r386, %r376, %r382;
	mul.wide.u32 	%rd39, %r386, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.v4.u32 	{%r206, %r207, %r222, %r223}, [%rd40+-4];
	mov.u32 	%r224, 21520;
	// begin inline asm
	prmt.b32 %r230, %r102, %r103, %r224;
	// end inline asm
	mov.u32 	%r228, 30258;
	// begin inline asm
	prmt.b32 %r231, %r102, %r103, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r110, %r111, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r110, %r111, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r118, %r119, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r118, %r119, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r126, %r127, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r126, %r127, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r134, %r135, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r134, %r135, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r142, %r143, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r142, %r143, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r150, %r151, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r150, %r151, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r158, %r159, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r158, %r159, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r166, %r167, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r166, %r167, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r174, %r175, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r174, %r175, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r182, %r183, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r182, %r183, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r190, %r191, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r190, %r191, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r198, %r199, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r198, %r199, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r206, %r207, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r206, %r207, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r214, %r215, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r214, %r215, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r222, %r223, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r222, %r223, %r228;
	// end inline asm
	mov.u32 	%r352, 25152;
	// begin inline asm
	prmt.b32 %r229, %r230, %r231, %r352;
	// end inline asm
	mov.u32 	%r356, 29521;
	// begin inline asm
	prmt.b32 %r233, %r230, %r231, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r238, %r239, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r238, %r239, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r246, %r247, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r246, %r247, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r253, %r254, %r255, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r254, %r255, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r261, %r262, %r263, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r262, %r263, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r270, %r271, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r270, %r271, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r278, %r279, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r278, %r279, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r286, %r287, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r286, %r287, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r294, %r295, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r294, %r295, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r302, %r303, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r302, %r303, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r309, %r310, %r311, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r310, %r311, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r317, %r318, %r319, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r318, %r319, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r325, %r326, %r327, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r326, %r327, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r333, %r334, %r335, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r334, %r335, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r341, %r342, %r343, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r342, %r343, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r349, %r350, %r351, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r350, %r351, %r356;
	// end inline asm
	and.b32  	%r34, %r1, 2;
	setp.eq.s32 	%p10, %r34, 0;
	selp.b32 	%r387, %r261, %r229, %p10;
	shfl.sync.bfly.b32	%r388, %r387, 2, 31, -1;
	selp.b32 	%r389, %r229, %r388, %p10;
	selp.b32 	%r390, %r388, %r261, %p10;
	selp.b32 	%r391, %r269, %r237, %p10;
	shfl.sync.bfly.b32	%r392, %r391, 2, 31, -1;
	selp.b32 	%r393, %r237, %r392, %p10;
	selp.b32 	%r394, %r392, %r269, %p10;
	selp.b32 	%r395, %r265, %r233, %p10;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r233, %r396, %p10;
	selp.b32 	%r398, %r396, %r265, %p10;
	selp.b32 	%r399, %r273, %r241, %p10;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r241, %r400, %p10;
	selp.b32 	%r402, %r400, %r273, %p10;
	selp.b32 	%r403, %r277, %r245, %p10;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r245, %r404, %p10;
	selp.b32 	%r406, %r404, %r277, %p10;
	selp.b32 	%r407, %r285, %r253, %p10;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r253, %r408, %p10;
	selp.b32 	%r410, %r408, %r285, %p10;
	selp.b32 	%r411, %r281, %r249, %p10;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r249, %r412, %p10;
	selp.b32 	%r414, %r412, %r281, %p10;
	selp.b32 	%r415, %r289, %r257, %p10;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r257, %r416, %p10;
	selp.b32 	%r418, %r416, %r289, %p10;
	selp.b32 	%r419, %r325, %r293, %p10;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r293, %r420, %p10;
	selp.b32 	%r422, %r420, %r325, %p10;
	selp.b32 	%r423, %r333, %r301, %p10;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r301, %r424, %p10;
	selp.b32 	%r426, %r424, %r333, %p10;
	selp.b32 	%r427, %r329, %r297, %p10;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r297, %r428, %p10;
	selp.b32 	%r430, %r428, %r329, %p10;
	selp.b32 	%r431, %r337, %r305, %p10;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r305, %r432, %p10;
	selp.b32 	%r434, %r432, %r337, %p10;
	selp.b32 	%r435, %r341, %r309, %p10;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r309, %r436, %p10;
	selp.b32 	%r438, %r436, %r341, %p10;
	selp.b32 	%r439, %r349, %r317, %p10;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r317, %r440, %p10;
	selp.b32 	%r442, %r440, %r349, %p10;
	selp.b32 	%r443, %r345, %r313, %p10;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r313, %r444, %p10;
	selp.b32 	%r446, %r444, %r345, %p10;
	selp.b32 	%r447, %r353, %r321, %p10;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r321, %r448, %p10;
	selp.b32 	%r450, %r448, %r353, %p10;
	and.b32  	%r35, %r1, 4;
	setp.eq.s32 	%p11, %r35, 0;
	selp.b32 	%r451, %r421, %r389, %p11;
	shfl.sync.bfly.b32	%r452, %r451, 4, 31, -1;
	selp.b32 	%r36, %r389, %r452, %p11;
	selp.b32 	%r37, %r452, %r421, %p11;
	selp.b32 	%r453, %r425, %r393, %p11;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r38, %r393, %r454, %p11;
	selp.b32 	%r39, %r454, %r425, %p11;
	selp.b32 	%r455, %r429, %r397, %p11;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r40, %r397, %r456, %p11;
	selp.b32 	%r41, %r456, %r429, %p11;
	selp.b32 	%r457, %r433, %r401, %p11;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r42, %r401, %r458, %p11;
	selp.b32 	%r43, %r458, %r433, %p11;
	selp.b32 	%r459, %r437, %r405, %p11;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r44, %r405, %r460, %p11;
	selp.b32 	%r45, %r460, %r437, %p11;
	selp.b32 	%r461, %r441, %r409, %p11;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r46, %r409, %r462, %p11;
	selp.b32 	%r47, %r462, %r441, %p11;
	selp.b32 	%r463, %r445, %r413, %p11;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r48, %r413, %r464, %p11;
	selp.b32 	%r49, %r464, %r445, %p11;
	selp.b32 	%r465, %r449, %r417, %p11;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r50, %r417, %r466, %p11;
	selp.b32 	%r51, %r466, %r449, %p11;
	selp.b32 	%r467, %r422, %r390, %p11;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r52, %r390, %r468, %p11;
	selp.b32 	%r53, %r468, %r422, %p11;
	selp.b32 	%r469, %r426, %r394, %p11;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r54, %r394, %r470, %p11;
	selp.b32 	%r55, %r470, %r426, %p11;
	selp.b32 	%r471, %r430, %r398, %p11;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r56, %r398, %r472, %p11;
	selp.b32 	%r57, %r472, %r430, %p11;
	selp.b32 	%r473, %r434, %r402, %p11;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r58, %r402, %r474, %p11;
	selp.b32 	%r59, %r474, %r434, %p11;
	selp.b32 	%r475, %r438, %r406, %p11;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r60, %r406, %r476, %p11;
	selp.b32 	%r61, %r476, %r438, %p11;
	selp.b32 	%r477, %r442, %r410, %p11;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r62, %r410, %r478, %p11;
	selp.b32 	%r63, %r478, %r442, %p11;
	selp.b32 	%r479, %r446, %r414, %p11;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r64, %r414, %r480, %p11;
	selp.b32 	%r65, %r480, %r446, %p11;
	selp.b32 	%r481, %r450, %r418, %p11;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r66, %r418, %r482, %p11;
	selp.b32 	%r67, %r482, %r450, %p11;
	and.b32  	%r68, %r2, 12;
	shl.b32 	%r483, %r28, 8;
	shl.b32 	%r484, %r4, 7;
	and.b32  	%r485, %r484, 128;
	and.b32  	%r486, %r3, 96;
	shl.b32 	%r487, %r1, 2;
	and.b32  	%r488, %r487, 28;
	or.b32  	%r69, %r486, %r488;
	or.b32  	%r489, %r69, %r485;
	or.b32  	%r70, %r489, %r483;
	shl.b32 	%r490, %r1, 3;
	and.b32  	%r491, %r490, 24;
	or.b32  	%r71, %r486, %r491;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r492, %rs54;
	and.b32  	%r493, %r492, 255;
	and.b32  	%r494, %r2, 3;
	mul.lo.s32 	%r495, %r494, 3200;
	and.b32  	%r72, %r361, 6;
	or.b32  	%r73, %r495, %r493;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r496, %rs60;
	and.b32  	%r497, %r496, 255;
	or.b32  	%r74, %r495, %r497;
	and.b32  	%r498, %r1, 7;
	shl.b32 	%r75, %r88, %r31;
	min.u32 	%r76, %r358, 31;
	and.b32  	%r77, %r1, 1;
	shl.b32 	%r500, %r1, 5;
	and.b32  	%r78, %r500, 64;
	shl.b32 	%r501, %r28, 12;
	shl.b32 	%r502, %r4, 11;
	and.b32  	%r503, %r502, 2048;
	or.b32  	%r504, %r501, %r503;
	mad.lo.s32 	%r505, %r27, 196608, %r504;
	mul.lo.s32 	%r506, %r498, 100;
	add.s32 	%r507, %r506, %r27;
	mul.wide.u32 	%rd41, %r507, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r506;
	cvt.u64.u32 	%rd45, %r27;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r508, %r506, 800;
	add.s32 	%r509, %r508, %r27;
	mul.wide.u32 	%rd48, %r509, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r508;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r510, %r506, 1600;
	add.s32 	%r511, %r510, %r27;
	mul.wide.u32 	%rd52, %r511, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r510;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r512, %r1, 24;
	mul.lo.s32 	%r513, %r512, 100;
	add.s32 	%r514, %r513, %r27;
	mul.wide.u32 	%rd56, %r514, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r513;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r79, %r490, 32;
	shl.b32 	%r80, %r505, 2;
	mov.u32 	%r1328, 0;
	setp.lt.u32 	%p13, %r2, 16;
$L__BB0_9:                              // %L2484
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r515, %r1328, %r82;
	setp.ge.s32 	%p12, %r515, %r83;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2491.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	or.b32  	%r6, %r1328, %r26;
	or.b32  	%r7, %r6, 16;
	mov.u32 	%r1329, 0;
	mov.u32 	%r1330, %r1329;
	mov.u32 	%r1331, %r1329;
	mov.u32 	%r1332, %r1329;
	mov.u32 	%r1333, %r1329;
	mov.u32 	%r1334, %r1329;
	mov.u32 	%r1335, %r1329;
$L__BB0_11:                             // %L2491
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1106
                                        //   in Loop: Header=BB0_11 Depth=2
	add.s32 	%r517, %r6, %r1329;
	or.b32  	%r518, %r517, %r68;
	and.b32  	%r519, %r518, 32751;
	add.s32 	%r520, %r519, %r82;
	mad.lo.s32 	%r521, %r520, 12288, %r70;
	mul.hi.s32 	%r522, %r521, 715827883;
	shr.u32 	%r523, %r522, 31;
	shr.s32 	%r524, %r522, 26;
	add.s32 	%r525, %r524, %r523;
	setp.lt.s32 	%p14, %r521, 0;
	mul.lo.s32 	%r526, %r525, 402653184;
	setp.ne.s32 	%p15, %r526, %r521;
	and.pred  	%p16, %p14, %p15;
	selp.s32 	%r527, -1, 0, %p16;
	add.s32 	%r528, %r525, %r527;
	mad.lo.s32 	%r529, %r528, -402653184, %r521;
	mul.wide.s32 	%rd60, %r529, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r530, %r531, %r532, %r533}, [%rd61];
	add.s32 	%r534, %r1329, %r7;
	or.b32  	%r535, %r534, %r68;
	and.b32  	%r536, %r535, 32767;
	add.s32 	%r537, %r536, %r82;
	mad.lo.s32 	%r538, %r537, 12288, %r70;
	mul.hi.s32 	%r539, %r538, 715827883;
	shr.u32 	%r540, %r539, 31;
	shr.s32 	%r541, %r539, 26;
	add.s32 	%r542, %r541, %r540;
	setp.lt.s32 	%p17, %r538, 0;
	mul.lo.s32 	%r543, %r542, 402653184;
	setp.ne.s32 	%p18, %r543, %r538;
	and.pred  	%p19, %p17, %p18;
	selp.s32 	%r544, -1, 0, %p19;
	add.s32 	%r545, %r542, %r544;
	mad.lo.s32 	%r546, %r545, -402653184, %r538;
	mul.wide.s32 	%rd62, %r546, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r547, %r548, %r549, %r550}, [%rd63];
	and.b32  	%r551, %r518, 15;
	mul.lo.s32 	%r552, %r551, 129;
	add.s32 	%r553, %r69, %r552;
	mul.wide.u32 	%rd64, %r553, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r530;
	cvt.u64.u32 	%rd67, %r552;
	cvt.u64.u32 	%rd68, %r69;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r531;
	st.shared.u32 	[%rd71+8], %r532;
	st.shared.u32 	[%rd71+12], %r533;
	and.b32  	%r554, %r535, 31;
	mul.lo.s32 	%r555, %r554, 129;
	add.s32 	%r556, %r69, %r555;
	mul.wide.u32 	%rd72, %r556, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r547;
	cvt.u64.u32 	%rd74, %r555;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r548;
	st.shared.u32 	[%rd77+8], %r549;
	st.shared.u32 	[%rd77+12], %r550;
$L__BB0_12:                             // %L4216
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	mov.u32 	%r570, 0;
	mov.u32 	%r1336, %r570;
$L__BB0_13:                             // %L4218
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1082, %r32, %r1336;
	mad.lo.s32 	%r1083, %r1082, 129, %r71;
	mul.wide.u32 	%rd78, %r1083, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r559, [%rd80];
	mov.u32 	%r560, 134744072;
	mov.u32 	%r561, 252645135;
	// begin inline asm
	lop3.b32 %r558, %r559, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1084, %r558, 2021161080;
	xor.b32  	%r569, %r1084, -2139062144;
	shr.u32 	%r563, %r559, 4;
	// begin inline asm
	lop3.b32 %r562, %r563, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1085, %r562, 2021161080;
	xor.b32  	%r575, %r1085, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r36}, {%r569}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r40}, {%r575}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r36}, {%r575}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r40}, {%r569}, {%r578, %r579};
	// end inline asm
	ld.shared.u32 	%r591, [%rd80+4];
	// begin inline asm
	lop3.b32 %r590, %r591, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1086, %r590, 2021161080;
	xor.b32  	%r601, %r1086, -2139062144;
	shr.u32 	%r595, %r591, 4;
	// begin inline asm
	lop3.b32 %r594, %r595, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1087, %r594, 2021161080;
	xor.b32  	%r607, %r1087, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r44}, {%r601}, {%r566, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r48}, {%r607}, {%r572, %r573};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r44}, {%r607}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r48}, {%r601}, {%r610, %r611};
	// end inline asm
	ld.shared.u32 	%r623, [%rd80+8];
	// begin inline asm
	lop3.b32 %r622, %r623, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1088, %r622, 2021161080;
	xor.b32  	%r633, %r1088, -2139062144;
	shr.u32 	%r627, %r623, 4;
	// begin inline asm
	lop3.b32 %r626, %r627, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1089, %r626, 2021161080;
	xor.b32  	%r639, %r1089, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r52}, {%r633}, {%r598, %r599};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r56}, {%r639}, {%r604, %r605};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r52}, {%r639}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r56}, {%r633}, {%r642, %r643};
	// end inline asm
	ld.shared.u32 	%r655, [%rd80+12];
	// begin inline asm
	lop3.b32 %r654, %r655, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1090, %r654, 2021161080;
	xor.b32  	%r665, %r1090, -2139062144;
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r658, %r659, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1091, %r658, 2021161080;
	xor.b32  	%r671, %r1091, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r60}, {%r665}, {%r630, %r631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r64}, {%r671}, {%r636, %r637};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r60}, {%r671}, {%r648, %r649};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r680, %r681}, {%r64}, {%r665}, {%r674, %r675};
	// end inline asm
	ld.shared.u32 	%r687, [%rd80+16];
	// begin inline asm
	lop3.b32 %r686, %r687, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1092, %r686, 2021161080;
	xor.b32  	%r697, %r1092, -2139062144;
	shr.u32 	%r691, %r687, 4;
	// begin inline asm
	lop3.b32 %r690, %r691, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1093, %r690, 2021161080;
	xor.b32  	%r703, %r1093, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r694, %r695}, {%r37}, {%r697}, {%r662, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r700, %r701}, {%r41}, {%r703}, {%r668, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r706, %r707}, {%r37}, {%r703}, {%r680, %r681};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r712, %r713}, {%r41}, {%r697}, {%r706, %r707};
	// end inline asm
	ld.shared.u32 	%r719, [%rd80+20];
	// begin inline asm
	lop3.b32 %r718, %r719, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1094, %r718, 2021161080;
	xor.b32  	%r729, %r1094, -2139062144;
	shr.u32 	%r723, %r719, 4;
	// begin inline asm
	lop3.b32 %r722, %r723, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1095, %r722, 2021161080;
	xor.b32  	%r735, %r1095, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r726, %r727}, {%r45}, {%r729}, {%r694, %r695};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r732, %r733}, {%r49}, {%r735}, {%r700, %r701};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r738, %r739}, {%r45}, {%r735}, {%r712, %r713};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r744, %r745}, {%r49}, {%r729}, {%r738, %r739};
	// end inline asm
	ld.shared.u32 	%r751, [%rd80+24];
	// begin inline asm
	lop3.b32 %r750, %r751, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1096, %r750, 2021161080;
	xor.b32  	%r761, %r1096, -2139062144;
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r754, %r755, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1097, %r754, 2021161080;
	xor.b32  	%r767, %r1097, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r758, %r759}, {%r53}, {%r761}, {%r726, %r727};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r764, %r765}, {%r57}, {%r767}, {%r732, %r733};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r770, %r771}, {%r53}, {%r767}, {%r744, %r745};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r776, %r777}, {%r57}, {%r761}, {%r770, %r771};
	// end inline asm
	ld.shared.u32 	%r783, [%rd80+28];
	// begin inline asm
	lop3.b32 %r782, %r783, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1098, %r782, 2021161080;
	xor.b32  	%r793, %r1098, -2139062144;
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r786, %r787, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1099, %r786, 2021161080;
	xor.b32  	%r799, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r790, %r791}, {%r61}, {%r793}, {%r758, %r759};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r796, %r797}, {%r65}, {%r799}, {%r764, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r802, %r803}, {%r61}, {%r799}, {%r776, %r777};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r808, %r809}, {%r65}, {%r793}, {%r802, %r803};
	// end inline asm
	sub.s32 	%r1100, %r790, %r796;
	add.s32 	%r1101, %r1100, 4;
	shr.s32 	%r816, %r1101, 3;
	add.s32 	%r1102, %r808, 4;
	shr.s32 	%r815, %r1102, 3;
	sub.s32 	%r1103, %r791, %r797;
	add.s32 	%r1104, %r1103, 4;
	shr.s32 	%r819, %r1104, 3;
	add.s32 	%r1105, %r809, 4;
	shr.s32 	%r818, %r1105, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r814, %r815, %r816;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r817, %r818, %r819;
	// end inline asm
	or.b32  	%r1106, %r72, %r1336;
	mul.lo.s32 	%r1107, %r1106, 100;
	add.s32 	%r1108, %r73, %r1107;
	mul.wide.u32 	%rd81, %r1108, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r814;
	add.s32 	%r1109, %r1107, 100;
	add.s32 	%r1110, %r73, %r1109;
	mul.wide.u32 	%rd84, %r1110, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r817;
	ld.shared.u32 	%r821, [%rd80];
	// begin inline asm
	lop3.b32 %r820, %r821, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1111, %r820, 2021161080;
	xor.b32  	%r831, %r1111, -2139062144;
	shr.u32 	%r825, %r821, 4;
	// begin inline asm
	lop3.b32 %r824, %r825, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1112, %r824, 2021161080;
	xor.b32  	%r837, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r828, %r829}, {%r38}, {%r831}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r834, %r835}, {%r42}, {%r837}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r840, %r841}, {%r38}, {%r837}, {%r570, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r846, %r847}, {%r42}, {%r831}, {%r840, %r841};
	// end inline asm
	ld.shared.u32 	%r853, [%rd80+4];
	// begin inline asm
	lop3.b32 %r852, %r853, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1113, %r852, 2021161080;
	xor.b32  	%r863, %r1113, -2139062144;
	shr.u32 	%r857, %r853, 4;
	// begin inline asm
	lop3.b32 %r856, %r857, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1114, %r856, 2021161080;
	xor.b32  	%r869, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r860, %r861}, {%r46}, {%r863}, {%r828, %r829};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r866, %r867}, {%r50}, {%r869}, {%r834, %r835};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r872, %r873}, {%r46}, {%r869}, {%r846, %r847};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r878, %r879}, {%r50}, {%r863}, {%r872, %r873};
	// end inline asm
	ld.shared.u32 	%r885, [%rd80+8];
	// begin inline asm
	lop3.b32 %r884, %r885, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1115, %r884, 2021161080;
	xor.b32  	%r895, %r1115, -2139062144;
	shr.u32 	%r889, %r885, 4;
	// begin inline asm
	lop3.b32 %r888, %r889, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1116, %r888, 2021161080;
	xor.b32  	%r901, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r892, %r893}, {%r54}, {%r895}, {%r860, %r861};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r898, %r899}, {%r58}, {%r901}, {%r866, %r867};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r904, %r905}, {%r54}, {%r901}, {%r878, %r879};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r910, %r911}, {%r58}, {%r895}, {%r904, %r905};
	// end inline asm
	ld.shared.u32 	%r917, [%rd80+12];
	// begin inline asm
	lop3.b32 %r916, %r917, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1117, %r916, 2021161080;
	xor.b32  	%r927, %r1117, -2139062144;
	shr.u32 	%r921, %r917, 4;
	// begin inline asm
	lop3.b32 %r920, %r921, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1118, %r920, 2021161080;
	xor.b32  	%r933, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r924, %r925}, {%r62}, {%r927}, {%r892, %r893};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r930, %r931}, {%r66}, {%r933}, {%r898, %r899};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r936, %r937}, {%r62}, {%r933}, {%r910, %r911};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r942, %r943}, {%r66}, {%r927}, {%r936, %r937};
	// end inline asm
	ld.shared.u32 	%r949, [%rd80+16];
	// begin inline asm
	lop3.b32 %r948, %r949, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1119, %r948, 2021161080;
	xor.b32  	%r959, %r1119, -2139062144;
	shr.u32 	%r953, %r949, 4;
	// begin inline asm
	lop3.b32 %r952, %r953, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1120, %r952, 2021161080;
	xor.b32  	%r965, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r956, %r957}, {%r39}, {%r959}, {%r924, %r925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r962, %r963}, {%r43}, {%r965}, {%r930, %r931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r968, %r969}, {%r39}, {%r965}, {%r942, %r943};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r974, %r975}, {%r43}, {%r959}, {%r968, %r969};
	// end inline asm
	ld.shared.u32 	%r981, [%rd80+20];
	// begin inline asm
	lop3.b32 %r980, %r981, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1121, %r980, 2021161080;
	xor.b32  	%r991, %r1121, -2139062144;
	shr.u32 	%r985, %r981, 4;
	// begin inline asm
	lop3.b32 %r984, %r985, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1122, %r984, 2021161080;
	xor.b32  	%r997, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r988, %r989}, {%r47}, {%r991}, {%r956, %r957};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r994, %r995}, {%r51}, {%r997}, {%r962, %r963};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1000, %r1001}, {%r47}, {%r997}, {%r974, %r975};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1006, %r1007}, {%r51}, {%r991}, {%r1000, %r1001};
	// end inline asm
	ld.shared.u32 	%r1013, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1123, %r1012, 2021161080;
	xor.b32  	%r1023, %r1123, -2139062144;
	shr.u32 	%r1017, %r1013, 4;
	// begin inline asm
	lop3.b32 %r1016, %r1017, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1124, %r1016, 2021161080;
	xor.b32  	%r1029, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1020, %r1021}, {%r55}, {%r1023}, {%r988, %r989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1026, %r1027}, {%r59}, {%r1029}, {%r994, %r995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1032, %r1033}, {%r55}, {%r1029}, {%r1006, %r1007};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1038, %r1039}, {%r59}, {%r1023}, {%r1032, %r1033};
	// end inline asm
	ld.shared.u32 	%r1045, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1044, %r1045, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1125, %r1044, 2021161080;
	xor.b32  	%r1055, %r1125, -2139062144;
	shr.u32 	%r1049, %r1045, 4;
	// begin inline asm
	lop3.b32 %r1048, %r1049, %r560, %r561, 40;
	// end inline asm
	add.s32 	%r1126, %r1048, 2021161080;
	xor.b32  	%r1061, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1052, %r1053}, {%r63}, {%r1055}, {%r1020, %r1021};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1058, %r1059}, {%r67}, {%r1061}, {%r1026, %r1027};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1064, %r1065}, {%r63}, {%r1061}, {%r1038, %r1039};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1070, %r1071}, {%r67}, {%r1055}, {%r1064, %r1065};
	// end inline asm
	sub.s32 	%r1127, %r1052, %r1058;
	add.s32 	%r1128, %r1127, 4;
	shr.s32 	%r1078, %r1128, 3;
	add.s32 	%r1129, %r1070, 4;
	shr.s32 	%r1077, %r1129, 3;
	sub.s32 	%r1130, %r1053, %r1059;
	add.s32 	%r1131, %r1130, 4;
	shr.s32 	%r1081, %r1131, 3;
	add.s32 	%r1132, %r1071, 4;
	shr.s32 	%r1080, %r1132, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1076, %r1077, %r1078;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1079, %r1080, %r1081;
	// end inline asm
	add.s32 	%r1133, %r74, %r1107;
	mul.wide.u32 	%rd86, %r1133, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1076;
	add.s32 	%r1134, %r74, %r1109;
	mul.wide.u32 	%rd88, %r1134, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1079;
	add.s32 	%r1336, %r1336, 8;
	setp.ne.s32 	%p20, %r1336, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L7969
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1153, [%rd7];
	ld.shared.u32 	%r1154, [%rd8+12800];
	ld.shared.u32 	%r1155, [%rd8+25600];
	ld.shared.u32 	%r1156, [%rd8+38400];
	ld.shared.u32 	%r1157, [%rd9];
	ld.shared.u32 	%r1158, [%rd10+12800];
	ld.shared.u32 	%r1159, [%rd10+25600];
	ld.shared.u32 	%r1160, [%rd10+38400];
	ld.shared.u32 	%r1161, [%rd11];
	ld.shared.u32 	%r1162, [%rd12+12800];
	ld.shared.u32 	%r1163, [%rd12+25600];
	ld.shared.u32 	%r1164, [%rd12+38400];
	ld.shared.u32 	%r1165, [%rd13];
	ld.shared.u32 	%r1166, [%rd14+12800];
	ld.shared.u32 	%r1167, [%rd14+25600];
	ld.shared.u32 	%r1168, [%rd14+38400];
	cvt.s32.s16 	%r1169, %r1153;
	shr.s32 	%r1170, %r1153, 16;
	cvt.s32.s16 	%r1171, %r1154;
	shr.s32 	%r1172, %r1154, 16;
	cvt.s32.s16 	%r1173, %r1155;
	shr.s32 	%r1174, %r1155, 16;
	cvt.s32.s16 	%r1175, %r1156;
	shr.s32 	%r1176, %r1156, 16;
	cvt.s32.s16 	%r1177, %r1157;
	shr.s32 	%r1178, %r1157, 16;
	cvt.s32.s16 	%r1179, %r1158;
	shr.s32 	%r1180, %r1158, 16;
	cvt.s32.s16 	%r1181, %r1159;
	shr.s32 	%r1182, %r1159, 16;
	cvt.s32.s16 	%r1183, %r1160;
	shr.s32 	%r1184, %r1160, 16;
	cvt.s32.s16 	%r1185, %r1161;
	shr.s32 	%r1186, %r1161, 16;
	cvt.s32.s16 	%r1187, %r1162;
	shr.s32 	%r1188, %r1162, 16;
	cvt.s32.s16 	%r1189, %r1163;
	shr.s32 	%r1190, %r1163, 16;
	cvt.s32.s16 	%r1191, %r1164;
	shr.s32 	%r1192, %r1164, 16;
	cvt.s32.s16 	%r1193, %r1165;
	shr.s32 	%r1194, %r1165, 16;
	cvt.s32.s16 	%r1195, %r1166;
	shr.s32 	%r1196, %r1166, 16;
	cvt.s32.s16 	%r1197, %r1167;
	shr.s32 	%r1198, %r1167, 16;
	cvt.s32.s16 	%r1199, %r1168;
	shr.s32 	%r1200, %r1168, 16;
	add.s32 	%r1201, %r1169, %r75;
	add.s32 	%r1202, %r1201, %r1171;
	add.s32 	%r1203, %r1202, %r1173;
	add.s32 	%r1204, %r1203, %r1175;
	shr.s32 	%r1205, %r1204, %r76;
	add.s32 	%r1206, %r1170, %r75;
	add.s32 	%r1207, %r1206, %r1172;
	add.s32 	%r1208, %r1207, %r1174;
	add.s32 	%r1209, %r1208, %r1176;
	shr.s32 	%r1210, %r1209, %r76;
	add.s32 	%r1211, %r1177, %r75;
	add.s32 	%r1212, %r1211, %r1179;
	add.s32 	%r1213, %r1212, %r1181;
	add.s32 	%r1214, %r1213, %r1183;
	shr.s32 	%r1215, %r1214, %r76;
	add.s32 	%r1216, %r1178, %r75;
	add.s32 	%r1217, %r1216, %r1180;
	add.s32 	%r1218, %r1217, %r1182;
	add.s32 	%r1219, %r1218, %r1184;
	shr.s32 	%r1220, %r1219, %r76;
	add.s32 	%r1221, %r1185, %r75;
	add.s32 	%r1222, %r1221, %r1187;
	add.s32 	%r1223, %r1222, %r1189;
	add.s32 	%r1224, %r1223, %r1191;
	shr.s32 	%r1225, %r1224, %r76;
	add.s32 	%r1226, %r1186, %r75;
	add.s32 	%r1227, %r1226, %r1188;
	add.s32 	%r1228, %r1227, %r1190;
	add.s32 	%r1229, %r1228, %r1192;
	shr.s32 	%r1230, %r1229, %r76;
	add.s32 	%r1231, %r1193, %r75;
	add.s32 	%r1232, %r1231, %r1195;
	add.s32 	%r1233, %r1232, %r1197;
	add.s32 	%r1234, %r1233, %r1199;
	shr.s32 	%r1235, %r1234, %r76;
	add.s32 	%r1236, %r1194, %r75;
	add.s32 	%r1237, %r1236, %r1196;
	add.s32 	%r1238, %r1237, %r1198;
	add.s32 	%r1239, %r1238, %r1200;
	shr.s32 	%r1240, %r1239, %r76;
	max.s32 	%r1241, %r1205, -7;
	min.s32 	%r1140, %r1241, 7;
	max.s32 	%r1242, %r1210, -7;
	min.s32 	%r1147, %r1242, 7;
	max.s32 	%r1243, %r1215, -7;
	min.s32 	%r1139, %r1243, 7;
	max.s32 	%r1244, %r1220, -7;
	min.s32 	%r1146, %r1244, 7;
	max.s32 	%r1245, %r1225, -7;
	min.s32 	%r1137, %r1245, 7;
	max.s32 	%r1246, %r1230, -7;
	min.s32 	%r1144, %r1246, 7;
	max.s32 	%r1247, %r1235, -7;
	min.s32 	%r1136, %r1247, 7;
	max.s32 	%r1248, %r1240, -7;
	min.s32 	%r1143, %r1248, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1135, %r1136, %r1137, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1138, %r1139, %r1140, %r1135;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1142, %r1143, %r1144, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1145, %r1146, %r1147, %r1142;
	// end inline asm
	shl.b32 	%r1152, %r1145, 4;
	// begin inline asm
	lop3.b32 %r1259, %r561, %r1138, %r1152, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1329, 0;
	selp.b32 	%r1334, %r1259, %r1334, %p21;
	selp.b32 	%r1335, %r1259, %r1335, %p21;
	setp.eq.s32 	%p22, %r1329, 32;
	selp.b32 	%r1330, %r1259, %r1330, %p22;
	selp.b32 	%r1331, %r1259, %r1331, %p22;
	setp.eq.s32 	%p23, %r1329, 64;
	selp.b32 	%r1332, %r1259, %r1332, %p23;
	selp.b32 	%r1333, %r1259, %r1333, %p23;
	add.s32 	%r24, %r1329, 32;
	setp.ne.s32 	%p24, %r1329, 96;
	mov.u32 	%r1329, %r24;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L10369
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r77, 0;
	// begin inline asm
	prmt.b32 %r1249, %r1334, %r1330, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1253, %r1335, %r1331, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1257, %r1332, %r1259, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1261, %r1333, %r1259, %r356;
	// end inline asm
	selp.b32 	%r1297, %r1253, %r1249, %p25;
	shfl.sync.bfly.b32	%r1298, %r1297, 1, 31, -1;
	selp.b32 	%r1266, %r1249, %r1298, %p25;
	selp.b32 	%r1267, %r1298, %r1253, %p25;
	selp.b32 	%r1299, %r1261, %r1257, %p25;
	shfl.sync.bfly.b32	%r1300, %r1299, 1, 31, -1;
	selp.b32 	%r1274, %r1257, %r1300, %p25;
	selp.b32 	%r1275, %r1300, %r1261, %p25;
	// begin inline asm
	prmt.b32 %r1265, %r1266, %r1267, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r1266, %r1267, %r356;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1273, %r1274, %r1275, %r352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1277, %r1274, %r1275, %r356;
	// end inline asm
	selp.b32 	%r1301, %r1273, %r1265, %p10;
	shfl.sync.bfly.b32	%r1302, %r1301, 2, 31, -1;
	selp.b32 	%r1282, %r1265, %r1302, %p10;
	selp.b32 	%r1283, %r1302, %r1273, %p10;
	selp.b32 	%r1303, %r1277, %r1269, %p10;
	shfl.sync.bfly.b32	%r1304, %r1303, 2, 31, -1;
	selp.b32 	%r1290, %r1269, %r1304, %p10;
	selp.b32 	%r1291, %r1304, %r1277, %p10;
	// begin inline asm
	prmt.b32 %r1281, %r1282, %r1283, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1285, %r1282, %r1283, %r228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1289, %r1290, %r1291, %r224;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1293, %r1290, %r1291, %r228;
	// end inline asm
	selp.b32 	%r1305, %r1289, %r1281, %p11;
	shfl.sync.bfly.b32	%r1306, %r1305, 4, 31, -1;
	selp.b32 	%r1307, %r1281, %r1306, %p11;
	selp.b32 	%r1308, %r1306, %r1289, %p11;
	selp.b32 	%r1309, %r1293, %r1285, %p11;
	shfl.sync.bfly.b32	%r1310, %r1309, 4, 31, -1;
	selp.b32 	%r1311, %r1285, %r1310, %p11;
	selp.b32 	%r1312, %r1310, %r1293, %p11;
	selp.b32 	%r1313, %r1311, %r1307, %p25;
	shfl.sync.bfly.b32	%r1314, %r1313, 1, 31, -1;
	selp.b32 	%r1315, %r1307, %r1314, %p25;
	selp.b32 	%r1316, %r1314, %r1311, %p25;
	selp.b32 	%r1317, %r1312, %r1308, %p25;
	shfl.sync.bfly.b32	%r1318, %r1317, 1, 31, -1;
	selp.b32 	%r1319, %r1308, %r1318, %p25;
	selp.b32 	%r1320, %r1318, %r1312, %p25;
	and.b32  	%r1321, %r1328, 8064;
	or.b32  	%r1322, %r1321, %r78;
	or.b32  	%r1323, %r1322, %r79;
	or.b32  	%r1324, %r1323, %r33;
	or.b32  	%r1325, %r1324, %r80;
	cvt.u64.u32 	%rd90, %r1325;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1315, %r1319, %r1316, %r1320};
	add.s32 	%r25, %r1328, 128;
	setp.ne.s32 	%p28, %r1328, 32640;
	mov.u32 	%r1328, %r25;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L10748
	mov.u32 	%r1326, 0;
	st.global.u32 	[%rd6], %r1326;
	ret;
$L__BB0_7:                              // %L151
	mov.u32 	%r1327, 2;
	st.global.u32 	[%rd6], %r1327;
	mov.u64 	%rd92, exception871;
	cvta.global.u64 	%rd93, %rd92;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd93;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L23
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L371
	mov.u32 	%r100, 2;
	st.global.u32 	[%rd6], %r100;
	mov.u64 	%rd23, exception871;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r81;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
