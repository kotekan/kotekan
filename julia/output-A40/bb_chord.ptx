// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception925[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<1361>;
	.reg .b64 	%rd<96>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r80, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r81, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r81, 16511;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r82, 67711;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L31
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r83, %r3, %r1;
	mad.lo.s32 	%r84, %r4, 768, %r83;
	mul.wide.u32 	%rd24, %r84, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r85, 1;
	st.global.u32 	[%rd6], %r85;
	shr.u32 	%r5, %r1, 3;
	shl.b32 	%r86, %r2, 2;
	or.b32  	%r87, %r86, %r5;
	mul.hi.u32 	%r88, %r87, -1431655765;
	shr.u32 	%r89, %r88, 6;
	mul.lo.s32 	%r90, %r89, 96;
	sub.s32 	%r6, %r87, %r90;
	bfe.u32 	%r7, %r4, 4, 1;
	shr.u32 	%r8, %r4, 5;
	mad.lo.s32 	%r91, %r7, 96, %r6;
	mad.lo.s32 	%r92, %r8, 192, %r91;
	mul.wide.u32 	%rd25, %r92, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r9, [%rd26];
	add.s32 	%r10, %r9, -4;
	setp.lt.u32 	%p3, %r10, 31;
	@%p3 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L393
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r351, %r9, -3;
	shr.u32 	%r352, %r2, 2;
	cvt.u16.u32 	%rs1, %r352;
	mul.lo.s16 	%rs2, %rs1, 171;
	shr.u16 	%rs3, %rs2, 10;
	mul.lo.s16 	%rs4, %rs3, 6;
	sub.s16 	%rs5, %rs1, %rs4;
	shl.b16 	%rs6, %rs5, 4;
	cvt.u32.u16 	%r353, %rs6;
	and.b32  	%r354, %r353, 240;
	shr.u32 	%r11, %r1, 2;
	and.b32  	%r355, %r11, 6;
	or.b32  	%r356, %r355, %r354;
	cvt.u16.u32 	%rs7, %r356;
	mul.lo.s16 	%rs8, %rs7, 171;
	shr.u16 	%rs9, %rs8, 14;
	mul.lo.s16 	%rs10, %rs9, 96;
	sub.s16 	%rs11, %rs7, %rs10;
	and.b16  	%rs12, %rs11, 246;
	mul.wide.u16 	%r357, %rs12, 256;
	mul.lo.s32 	%r358, %r7, 24576;
	shl.b32 	%r359, %r2, 6;
	shl.b32 	%r360, %r1, 1;
	and.b32  	%r361, %r360, 12;
	shl.b32 	%r362, %r1, 4;
	and.b32  	%r12, %r362, 16;
	and.b32  	%r363, %r359, 192;
	mul.lo.s32 	%r364, %r8, 49152;
	add.s32 	%r365, %r357, %r358;
	or.b32  	%r366, %r365, %r361;
	or.b32  	%r367, %r366, %r12;
	or.b32  	%r368, %r367, %r363;
	add.s32 	%r369, %r368, %r364;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd29, %r370;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r95, %r96, %r111, %r112}, [%rd30];
	or.b16  	%rs13, %rs7, 8;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs13, %rs16;
	and.b16  	%rs18, %rs17, 254;
	mul.wide.u16 	%r371, %rs18, 256;
	or.b32  	%r372, %r361, %r358;
	add.s32 	%r373, %r372, %r371;
	or.b32  	%r374, %r373, %r12;
	or.b32  	%r375, %r374, %r363;
	add.s32 	%r376, %r375, %r364;
	shl.b32 	%r377, %r376, 2;
	cvt.u64.u32 	%rd31, %r377;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r103, %r104, %r119, %r120}, [%rd32];
	or.b32  	%r378, %r358, 32;
	add.s32 	%r379, %r378, %r357;
	or.b32  	%r380, %r379, %r361;
	or.b32  	%r381, %r380, %r12;
	or.b32  	%r382, %r381, %r363;
	add.s32 	%r383, %r382, %r364;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd33, %r384;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r127, %r128, %r143, %r144}, [%rd34];
	or.b32  	%r385, %r378, %r361;
	add.s32 	%r386, %r385, %r371;
	or.b32  	%r387, %r386, %r12;
	or.b32  	%r388, %r387, %r363;
	add.s32 	%r389, %r388, %r364;
	shl.b32 	%r390, %r389, 2;
	cvt.u64.u32 	%rd35, %r390;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r135, %r136, %r151, %r152}, [%rd36];
	or.b32  	%r391, %r11, %r354;
	or.b32  	%r392, %r391, 1;
	mul.hi.u32 	%r393, %r392, -1431655765;
	shr.u32 	%r394, %r393, 6;
	mul.lo.s32 	%r395, %r394, 96;
	sub.s32 	%r396, %r392, %r395;
	shl.b32 	%r397, %r396, 8;
	add.s32 	%r398, %r397, %r358;
	or.b32  	%r399, %r398, %r361;
	or.b32  	%r400, %r399, %r12;
	or.b32  	%r401, %r400, %r363;
	add.s32 	%r402, %r401, %r364;
	shl.b32 	%r403, %r402, 2;
	cvt.u64.u32 	%rd37, %r403;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r159, %r160, %r175, %r176}, [%rd38];
	or.b32  	%r404, %r391, 9;
	mul.hi.u32 	%r405, %r404, -1431655765;
	shr.u32 	%r406, %r405, 6;
	mul.lo.s32 	%r407, %r406, 96;
	sub.s32 	%r408, %r404, %r407;
	shl.b32 	%r409, %r408, 8;
	add.s32 	%r410, %r409, %r358;
	or.b32  	%r411, %r410, %r361;
	or.b32  	%r412, %r411, %r12;
	or.b32  	%r413, %r412, %r363;
	add.s32 	%r414, %r413, %r364;
	shl.b32 	%r415, %r414, 2;
	cvt.u64.u32 	%rd39, %r415;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r167, %r168, %r183, %r184}, [%rd40];
	add.s32 	%r416, %r378, %r397;
	or.b32  	%r417, %r416, %r361;
	or.b32  	%r418, %r417, %r12;
	or.b32  	%r419, %r418, %r363;
	add.s32 	%r420, %r419, %r364;
	shl.b32 	%r421, %r420, 2;
	cvt.u64.u32 	%rd41, %r421;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.v4.u32 	{%r191, %r192, %r207, %r208}, [%rd42];
	add.s32 	%r422, %r378, %r409;
	or.b32  	%r423, %r422, %r361;
	or.b32  	%r424, %r423, %r12;
	or.b32  	%r425, %r424, %r363;
	add.s32 	%r426, %r425, %r364;
	shl.b32 	%r427, %r426, 2;
	cvt.u64.u32 	%rd43, %r427;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.v4.u32 	{%r199, %r200, %r215, %r216}, [%rd44];
	mov.u32 	%r97, 21520;
	// begin inline asm
	prmt.b32 %r223, %r95, %r96, %r97;
	// end inline asm
	mov.u32 	%r101, 30258;
	// begin inline asm
	prmt.b32 %r224, %r95, %r96, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r103, %r104, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r103, %r104, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r111, %r112, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r111, %r112, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r119, %r120, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r119, %r120, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r127, %r128, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r127, %r128, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r135, %r136, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r135, %r136, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r143, %r144, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r143, %r144, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r151, %r152, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r151, %r152, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r159, %r160, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r159, %r160, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r167, %r168, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r167, %r168, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r175, %r176, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r175, %r176, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r183, %r184, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r183, %r184, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r191, %r192, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r191, %r192, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r199, %r200, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r199, %r200, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r207, %r208, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r207, %r208, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r215, %r216, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r215, %r216, %r101;
	// end inline asm
	mov.u32 	%r225, 25152;
	// begin inline asm
	prmt.b32 %r222, %r223, %r224, %r225;
	// end inline asm
	mov.u32 	%r229, 29521;
	// begin inline asm
	prmt.b32 %r226, %r223, %r224, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r231, %r232, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r231, %r232, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r239, %r240, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r239, %r240, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r247, %r248, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r247, %r248, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r255, %r256, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r255, %r256, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r263, %r264, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r263, %r264, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r271, %r272, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r271, %r272, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r279, %r280, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r279, %r280, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r287, %r288, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r287, %r288, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r295, %r296, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r295, %r296, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r303, %r304, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r303, %r304, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r311, %r312, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r311, %r312, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r319, %r320, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r319, %r320, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r327, %r328, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r327, %r328, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r335, %r336, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r335, %r336, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r343, %r344, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r343, %r344, %r229;
	// end inline asm
	and.b32  	%r13, %r1, 2;
	setp.eq.s32 	%p4, %r13, 0;
	selp.b32 	%r428, %r254, %r222, %p4;
	shfl.sync.bfly.b32	%r429, %r428, 2, 31, -1;
	selp.b32 	%r430, %r222, %r429, %p4;
	selp.b32 	%r431, %r429, %r254, %p4;
	selp.b32 	%r432, %r262, %r230, %p4;
	shfl.sync.bfly.b32	%r433, %r432, 2, 31, -1;
	selp.b32 	%r434, %r230, %r433, %p4;
	selp.b32 	%r435, %r433, %r262, %p4;
	selp.b32 	%r436, %r258, %r226, %p4;
	shfl.sync.bfly.b32	%r437, %r436, 2, 31, -1;
	selp.b32 	%r438, %r226, %r437, %p4;
	selp.b32 	%r439, %r437, %r258, %p4;
	selp.b32 	%r440, %r266, %r234, %p4;
	shfl.sync.bfly.b32	%r441, %r440, 2, 31, -1;
	selp.b32 	%r442, %r234, %r441, %p4;
	selp.b32 	%r443, %r441, %r266, %p4;
	selp.b32 	%r444, %r270, %r238, %p4;
	shfl.sync.bfly.b32	%r445, %r444, 2, 31, -1;
	selp.b32 	%r446, %r238, %r445, %p4;
	selp.b32 	%r447, %r445, %r270, %p4;
	selp.b32 	%r448, %r278, %r246, %p4;
	shfl.sync.bfly.b32	%r449, %r448, 2, 31, -1;
	selp.b32 	%r450, %r246, %r449, %p4;
	selp.b32 	%r451, %r449, %r278, %p4;
	selp.b32 	%r452, %r274, %r242, %p4;
	shfl.sync.bfly.b32	%r453, %r452, 2, 31, -1;
	selp.b32 	%r454, %r242, %r453, %p4;
	selp.b32 	%r455, %r453, %r274, %p4;
	selp.b32 	%r456, %r282, %r250, %p4;
	shfl.sync.bfly.b32	%r457, %r456, 2, 31, -1;
	selp.b32 	%r458, %r250, %r457, %p4;
	selp.b32 	%r459, %r457, %r282, %p4;
	selp.b32 	%r460, %r318, %r286, %p4;
	shfl.sync.bfly.b32	%r461, %r460, 2, 31, -1;
	selp.b32 	%r462, %r286, %r461, %p4;
	selp.b32 	%r463, %r461, %r318, %p4;
	selp.b32 	%r464, %r326, %r294, %p4;
	shfl.sync.bfly.b32	%r465, %r464, 2, 31, -1;
	selp.b32 	%r466, %r294, %r465, %p4;
	selp.b32 	%r467, %r465, %r326, %p4;
	selp.b32 	%r468, %r322, %r290, %p4;
	shfl.sync.bfly.b32	%r469, %r468, 2, 31, -1;
	selp.b32 	%r470, %r290, %r469, %p4;
	selp.b32 	%r471, %r469, %r322, %p4;
	selp.b32 	%r472, %r330, %r298, %p4;
	shfl.sync.bfly.b32	%r473, %r472, 2, 31, -1;
	selp.b32 	%r474, %r298, %r473, %p4;
	selp.b32 	%r475, %r473, %r330, %p4;
	selp.b32 	%r476, %r334, %r302, %p4;
	shfl.sync.bfly.b32	%r477, %r476, 2, 31, -1;
	selp.b32 	%r478, %r302, %r477, %p4;
	selp.b32 	%r479, %r477, %r334, %p4;
	selp.b32 	%r480, %r342, %r310, %p4;
	shfl.sync.bfly.b32	%r481, %r480, 2, 31, -1;
	selp.b32 	%r482, %r310, %r481, %p4;
	selp.b32 	%r483, %r481, %r342, %p4;
	selp.b32 	%r484, %r338, %r306, %p4;
	shfl.sync.bfly.b32	%r485, %r484, 2, 31, -1;
	selp.b32 	%r486, %r306, %r485, %p4;
	selp.b32 	%r487, %r485, %r338, %p4;
	selp.b32 	%r488, %r346, %r314, %p4;
	shfl.sync.bfly.b32	%r489, %r488, 2, 31, -1;
	selp.b32 	%r490, %r314, %r489, %p4;
	selp.b32 	%r491, %r489, %r346, %p4;
	and.b32  	%r14, %r1, 4;
	setp.eq.s32 	%p5, %r14, 0;
	selp.b32 	%r492, %r462, %r430, %p5;
	shfl.sync.bfly.b32	%r493, %r492, 4, 31, -1;
	selp.b32 	%r592, %r430, %r493, %p5;
	selp.b32 	%r720, %r493, %r462, %p5;
	selp.b32 	%r494, %r466, %r434, %p5;
	shfl.sync.bfly.b32	%r495, %r494, 4, 31, -1;
	selp.b32 	%r854, %r434, %r495, %p5;
	selp.b32 	%r982, %r495, %r466, %p5;
	selp.b32 	%r496, %r470, %r438, %p5;
	shfl.sync.bfly.b32	%r497, %r496, 4, 31, -1;
	selp.b32 	%r598, %r438, %r497, %p5;
	selp.b32 	%r726, %r497, %r470, %p5;
	selp.b32 	%r498, %r474, %r442, %p5;
	shfl.sync.bfly.b32	%r499, %r498, 4, 31, -1;
	selp.b32 	%r860, %r442, %r499, %p5;
	selp.b32 	%r988, %r499, %r474, %p5;
	selp.b32 	%r500, %r478, %r446, %p5;
	shfl.sync.bfly.b32	%r501, %r500, 4, 31, -1;
	selp.b32 	%r624, %r446, %r501, %p5;
	selp.b32 	%r752, %r501, %r478, %p5;
	selp.b32 	%r502, %r482, %r450, %p5;
	shfl.sync.bfly.b32	%r503, %r502, 4, 31, -1;
	selp.b32 	%r886, %r450, %r503, %p5;
	selp.b32 	%r1014, %r503, %r482, %p5;
	selp.b32 	%r504, %r486, %r454, %p5;
	shfl.sync.bfly.b32	%r505, %r504, 4, 31, -1;
	selp.b32 	%r630, %r454, %r505, %p5;
	selp.b32 	%r758, %r505, %r486, %p5;
	selp.b32 	%r506, %r490, %r458, %p5;
	shfl.sync.bfly.b32	%r507, %r506, 4, 31, -1;
	selp.b32 	%r892, %r458, %r507, %p5;
	selp.b32 	%r1020, %r507, %r490, %p5;
	selp.b32 	%r508, %r463, %r431, %p5;
	shfl.sync.bfly.b32	%r509, %r508, 4, 31, -1;
	selp.b32 	%r656, %r431, %r509, %p5;
	selp.b32 	%r784, %r509, %r463, %p5;
	selp.b32 	%r510, %r467, %r435, %p5;
	shfl.sync.bfly.b32	%r511, %r510, 4, 31, -1;
	selp.b32 	%r918, %r435, %r511, %p5;
	selp.b32 	%r1046, %r511, %r467, %p5;
	selp.b32 	%r512, %r471, %r439, %p5;
	shfl.sync.bfly.b32	%r513, %r512, 4, 31, -1;
	selp.b32 	%r662, %r439, %r513, %p5;
	selp.b32 	%r790, %r513, %r471, %p5;
	selp.b32 	%r514, %r475, %r443, %p5;
	shfl.sync.bfly.b32	%r515, %r514, 4, 31, -1;
	selp.b32 	%r924, %r443, %r515, %p5;
	selp.b32 	%r1052, %r515, %r475, %p5;
	selp.b32 	%r516, %r479, %r447, %p5;
	shfl.sync.bfly.b32	%r517, %r516, 4, 31, -1;
	selp.b32 	%r688, %r447, %r517, %p5;
	selp.b32 	%r816, %r517, %r479, %p5;
	selp.b32 	%r518, %r483, %r451, %p5;
	shfl.sync.bfly.b32	%r519, %r518, 4, 31, -1;
	selp.b32 	%r950, %r451, %r519, %p5;
	selp.b32 	%r1078, %r519, %r483, %p5;
	selp.b32 	%r520, %r487, %r455, %p5;
	shfl.sync.bfly.b32	%r521, %r520, 4, 31, -1;
	selp.b32 	%r694, %r455, %r521, %p5;
	selp.b32 	%r822, %r521, %r487, %p5;
	selp.b32 	%r522, %r491, %r459, %p5;
	shfl.sync.bfly.b32	%r523, %r522, 4, 31, -1;
	selp.b32 	%r956, %r459, %r523, %p5;
	selp.b32 	%r1084, %r523, %r491, %p5;
	shl.b32 	%r524, %r1, 2;
	and.b32  	%r525, %r524, 28;
	and.b32  	%r526, %r3, 96;
	or.b32  	%r527, %r525, %r526;
	shl.b32 	%r528, %r4, 3;
	and.b32  	%r529, %r528, 128;
	shl.b32 	%r530, %r4, 11;
	and.b32  	%r47, %r530, 30720;
	and.b32  	%r48, %r2, 12;
	and.b32  	%r49, %r528, 3840;
	or.b32  	%r50, %r527, %r529;
	or.b32  	%r531, %r5, %r48;
	mul.lo.s32 	%r532, %r531, 129;
	add.s32 	%r533, %r527, %r532;
	mul.wide.u32 	%rd45, %r533, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r532;
	cvt.u64.u32 	%rd48, %r527;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd8, %rd46, %rd50;
	or.b32  	%r534, %r531, 16;
	mul.lo.s32 	%r535, %r534, 129;
	add.s32 	%r536, %r527, %r535;
	mul.wide.u32 	%rd51, %r536, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r535;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd10, %rd46, %rd54;
	shl.b32 	%r537, %r1, 3;
	and.b32  	%r538, %r537, 24;
	or.b32  	%r51, %r526, %r538;
	mul.hi.u32 	%r539, %r391, -1431655765;
	shr.u32 	%r540, %r539, 6;
	mul.lo.s32 	%r541, %r540, 96;
	sub.s32 	%r542, %r391, %r541;
	and.b32  	%r543, %r2, 3;
	mul.lo.s32 	%r544, %r543, 3200;
	and.b32  	%r52, %r360, 6;
	or.b32  	%r53, %r542, %r544;
	or.b32  	%r545, %r391, 8;
	mul.hi.u32 	%r546, %r545, -1431655765;
	shr.u32 	%r547, %r546, 6;
	mul.lo.s32 	%r548, %r547, 96;
	sub.s32 	%r549, %r545, %r548;
	or.b32  	%r54, %r549, %r544;
	and.b32  	%r550, %r1, 7;
	mul.lo.s32 	%r551, %r550, 100;
	add.s32 	%r552, %r551, %r6;
	mul.wide.u32 	%rd55, %r552, 4;
	add.s64 	%rd56, %rd46, 16512;
	add.s64 	%rd11, %rd56, %rd55;
	cvt.u64.u32 	%rd57, %r551;
	cvt.u64.u32 	%rd58, %r6;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd12, %rd56, %rd60;
	add.s32 	%r553, %r551, 800;
	add.s32 	%r554, %r553, %r6;
	mul.wide.u32 	%rd61, %r554, 4;
	add.s64 	%rd13, %rd56, %rd61;
	cvt.u64.u32 	%rd62, %r553;
	add.s64 	%rd63, %rd58, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd14, %rd56, %rd64;
	add.s32 	%r555, %r551, 1600;
	add.s32 	%r556, %r555, %r6;
	mul.wide.u32 	%rd65, %r556, 4;
	add.s64 	%rd15, %rd56, %rd65;
	cvt.u64.u32 	%rd66, %r555;
	add.s64 	%rd67, %rd58, %rd66;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd16, %rd56, %rd68;
	or.b32  	%r557, %r1, 24;
	mul.lo.s32 	%r558, %r557, 100;
	add.s32 	%r559, %r558, %r6;
	mul.wide.u32 	%rd69, %r559, 4;
	add.s64 	%rd17, %rd56, %rd69;
	cvt.u64.u32 	%rd70, %r558;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd18, %rd56, %rd72;
	shl.b32 	%r55, %r85, %r10;
	min.u32 	%r56, %r351, 31;
	and.b32  	%r57, %r1, 1;
	shl.b32 	%r561, %r6, 20;
	shl.b32 	%r562, %r1, 5;
	and.b32  	%r58, %r562, 64;
	and.b32  	%r563, %r530, 1015808;
	or.b32  	%r59, %r561, %r563;
	and.b32  	%r60, %r537, 32;
	mov.u32 	%r350, 0;
	setp.gt.u32 	%p6, %r2, 15;
	mov.u32 	%r1352, %r350;
LBB0_7:                                 // %L2690
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r1353, %r350;
	mov.u32 	%r1354, %r350;
	mov.u32 	%r1355, %r350;
	mov.u32 	%r1356, %r350;
	mov.u32 	%r1357, %r350;
	mov.u32 	%r1358, %r350;
	mov.u32 	%r1359, %r350;
LBB0_8:                                 // %L2693
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	@%p6 bra 	LBB0_10;
// %bb.9:                               // %L2716
                                        //   in Loop: Header=BB0_8 Depth=2
	or.b32  	%r565, %r1353, %r1352;
	or.b32  	%r566, %r565, %r47;
	or.b32  	%r567, %r566, %r48;
	or.b32  	%r568, %r567, %r5;
	shl.b32 	%r569, %r568, 12;
	or.b32  	%r570, %r50, %r569;
	or.b32  	%r571, %r570, %r49;
	mul.wide.s32 	%rd73, %r571, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r572, %r573, %r574, %r575}, [%rd74];
	or.b32  	%r576, %r571, 65536;
	mul.wide.s32 	%rd75, %r576, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r577, %r578, %r579, %r580}, [%rd76];
	st.shared.u32 	[%rd7], %r572;
	st.shared.u32 	[%rd8+4], %r573;
	st.shared.u32 	[%rd8+8], %r574;
	st.shared.u32 	[%rd8+12], %r575;
	st.shared.u32 	[%rd9], %r577;
	st.shared.u32 	[%rd10+4], %r578;
	st.shared.u32 	[%rd10+8], %r579;
	st.shared.u32 	[%rd10+12], %r580;
LBB0_10:                                // %L4815
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	mov.u32 	%r594, 0;
	mov.u32 	%r1360, %r594;
LBB0_11:                                // %L4817
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1106, %r11, %r1360;
	mul.lo.s32 	%r1107, %r1106, 129;
	add.s32 	%r1108, %r51, %r1107;
	mul.wide.u32 	%rd77, %r1108, 4;
	add.s64 	%rd79, %rd46, %rd77;
	ld.shared.u32 	%r583, [%rd79];
	mov.u32 	%r584, 134744072;
	mov.u32 	%r585, 252645135;
	// begin inline asm
	lop3.b32 %r582, %r583, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1109, %r582, 2021161080;
	xor.b32  	%r593, %r1109, -2139062144;
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r586, %r587, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1110, %r586, 2021161080;
	xor.b32  	%r599, %r1110, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r592}, {%r593}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r598}, {%r599}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r592}, {%r599}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r598}, {%r593}, {%r602, %r603};
	// end inline asm
	cvt.u64.u32 	%rd80, %r1107;
	cvt.u64.u32 	%rd81, %r51;
	add.s64 	%rd82, %rd81, %rd80;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd84, %rd46, %rd83;
	ld.shared.u32 	%r615, [%rd84+4];
	// begin inline asm
	lop3.b32 %r614, %r615, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1111, %r614, 2021161080;
	xor.b32  	%r625, %r1111, -2139062144;
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r618, %r619, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1112, %r618, 2021161080;
	xor.b32  	%r631, %r1112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r624}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r630}, {%r631}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r624}, {%r631}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r630}, {%r625}, {%r634, %r635};
	// end inline asm
	ld.shared.u32 	%r647, [%rd84+8];
	// begin inline asm
	lop3.b32 %r646, %r647, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1113, %r646, 2021161080;
	xor.b32  	%r657, %r1113, -2139062144;
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r650, %r651, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1114, %r650, 2021161080;
	xor.b32  	%r663, %r1114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r656}, {%r657}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r662}, {%r663}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r656}, {%r663}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r662}, {%r657}, {%r666, %r667};
	// end inline asm
	ld.shared.u32 	%r679, [%rd84+12];
	// begin inline asm
	lop3.b32 %r678, %r679, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1115, %r678, 2021161080;
	xor.b32  	%r689, %r1115, -2139062144;
	shr.u32 	%r683, %r679, 4;
	// begin inline asm
	lop3.b32 %r682, %r683, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1116, %r682, 2021161080;
	xor.b32  	%r695, %r1116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r686, %r687}, {%r688}, {%r689}, {%r654, %r655};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r692, %r693}, {%r694}, {%r695}, {%r660, %r661};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r698, %r699}, {%r688}, {%r695}, {%r672, %r673};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r704, %r705}, {%r694}, {%r689}, {%r698, %r699};
	// end inline asm
	ld.shared.u32 	%r711, [%rd84+16];
	// begin inline asm
	lop3.b32 %r710, %r711, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1117, %r710, 2021161080;
	xor.b32  	%r721, %r1117, -2139062144;
	shr.u32 	%r715, %r711, 4;
	// begin inline asm
	lop3.b32 %r714, %r715, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1118, %r714, 2021161080;
	xor.b32  	%r727, %r1118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r718, %r719}, {%r720}, {%r721}, {%r686, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r724, %r725}, {%r726}, {%r727}, {%r692, %r693};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r730, %r731}, {%r720}, {%r727}, {%r704, %r705};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r736, %r737}, {%r726}, {%r721}, {%r730, %r731};
	// end inline asm
	ld.shared.u32 	%r743, [%rd84+20];
	// begin inline asm
	lop3.b32 %r742, %r743, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1119, %r742, 2021161080;
	xor.b32  	%r753, %r1119, -2139062144;
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r746, %r747, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1120, %r746, 2021161080;
	xor.b32  	%r759, %r1120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r750, %r751}, {%r752}, {%r753}, {%r718, %r719};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r756, %r757}, {%r758}, {%r759}, {%r724, %r725};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r762, %r763}, {%r752}, {%r759}, {%r736, %r737};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r768, %r769}, {%r758}, {%r753}, {%r762, %r763};
	// end inline asm
	ld.shared.u32 	%r775, [%rd84+24];
	// begin inline asm
	lop3.b32 %r774, %r775, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1121, %r774, 2021161080;
	xor.b32  	%r785, %r1121, -2139062144;
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r778, %r779, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1122, %r778, 2021161080;
	xor.b32  	%r791, %r1122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r782, %r783}, {%r784}, {%r785}, {%r750, %r751};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r788, %r789}, {%r790}, {%r791}, {%r756, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r794, %r795}, {%r784}, {%r791}, {%r768, %r769};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r800, %r801}, {%r790}, {%r785}, {%r794, %r795};
	// end inline asm
	ld.shared.u32 	%r807, [%rd84+28];
	// begin inline asm
	lop3.b32 %r806, %r807, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1123, %r806, 2021161080;
	xor.b32  	%r817, %r1123, -2139062144;
	shr.u32 	%r811, %r807, 4;
	// begin inline asm
	lop3.b32 %r810, %r811, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1124, %r810, 2021161080;
	xor.b32  	%r823, %r1124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r814, %r815}, {%r816}, {%r817}, {%r782, %r783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r820, %r821}, {%r822}, {%r823}, {%r788, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r826, %r827}, {%r816}, {%r823}, {%r800, %r801};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r832, %r833}, {%r822}, {%r817}, {%r826, %r827};
	// end inline asm
	sub.s32 	%r1125, %r814, %r820;
	add.s32 	%r1126, %r1125, 4;
	shr.s32 	%r840, %r1126, 3;
	add.s32 	%r1127, %r832, 4;
	shr.s32 	%r839, %r1127, 3;
	sub.s32 	%r1128, %r815, %r821;
	add.s32 	%r1129, %r1128, 4;
	shr.s32 	%r843, %r1129, 3;
	add.s32 	%r1130, %r833, 4;
	shr.s32 	%r842, %r1130, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r838, %r839, %r840;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r841, %r842, %r843;
	// end inline asm
	or.b32  	%r1131, %r52, %r1360;
	mul.lo.s32 	%r1132, %r1131, 100;
	add.s32 	%r1133, %r53, %r1132;
	mul.wide.u32 	%rd85, %r1133, 4;
	add.s64 	%rd87, %rd56, %rd85;
	st.shared.u32 	[%rd87], %r838;
	add.s32 	%r1134, %r1132, 100;
	add.s32 	%r1135, %r53, %r1134;
	mul.wide.u32 	%rd88, %r1135, 4;
	add.s64 	%rd89, %rd56, %rd88;
	st.shared.u32 	[%rd89], %r841;
	ld.shared.u32 	%r845, [%rd79];
	// begin inline asm
	lop3.b32 %r844, %r845, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1136, %r844, 2021161080;
	xor.b32  	%r855, %r1136, -2139062144;
	shr.u32 	%r849, %r845, 4;
	// begin inline asm
	lop3.b32 %r848, %r849, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1137, %r848, 2021161080;
	xor.b32  	%r861, %r1137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r852, %r853}, {%r854}, {%r855}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r858, %r859}, {%r860}, {%r861}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r864, %r865}, {%r854}, {%r861}, {%r594, %r594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r870, %r871}, {%r860}, {%r855}, {%r864, %r865};
	// end inline asm
	ld.shared.u32 	%r877, [%rd84+4];
	// begin inline asm
	lop3.b32 %r876, %r877, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1138, %r876, 2021161080;
	xor.b32  	%r887, %r1138, -2139062144;
	shr.u32 	%r881, %r877, 4;
	// begin inline asm
	lop3.b32 %r880, %r881, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1139, %r880, 2021161080;
	xor.b32  	%r893, %r1139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r884, %r885}, {%r886}, {%r887}, {%r852, %r853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r890, %r891}, {%r892}, {%r893}, {%r858, %r859};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r896, %r897}, {%r886}, {%r893}, {%r870, %r871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r902, %r903}, {%r892}, {%r887}, {%r896, %r897};
	// end inline asm
	ld.shared.u32 	%r909, [%rd84+8];
	// begin inline asm
	lop3.b32 %r908, %r909, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1140, %r908, 2021161080;
	xor.b32  	%r919, %r1140, -2139062144;
	shr.u32 	%r913, %r909, 4;
	// begin inline asm
	lop3.b32 %r912, %r913, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1141, %r912, 2021161080;
	xor.b32  	%r925, %r1141, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r916, %r917}, {%r918}, {%r919}, {%r884, %r885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r922, %r923}, {%r924}, {%r925}, {%r890, %r891};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r928, %r929}, {%r918}, {%r925}, {%r902, %r903};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r934, %r935}, {%r924}, {%r919}, {%r928, %r929};
	// end inline asm
	ld.shared.u32 	%r941, [%rd84+12];
	// begin inline asm
	lop3.b32 %r940, %r941, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1142, %r940, 2021161080;
	xor.b32  	%r951, %r1142, -2139062144;
	shr.u32 	%r945, %r941, 4;
	// begin inline asm
	lop3.b32 %r944, %r945, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1143, %r944, 2021161080;
	xor.b32  	%r957, %r1143, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r948, %r949}, {%r950}, {%r951}, {%r916, %r917};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r954, %r955}, {%r956}, {%r957}, {%r922, %r923};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r960, %r961}, {%r950}, {%r957}, {%r934, %r935};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r966, %r967}, {%r956}, {%r951}, {%r960, %r961};
	// end inline asm
	ld.shared.u32 	%r973, [%rd84+16];
	// begin inline asm
	lop3.b32 %r972, %r973, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1144, %r972, 2021161080;
	xor.b32  	%r983, %r1144, -2139062144;
	shr.u32 	%r977, %r973, 4;
	// begin inline asm
	lop3.b32 %r976, %r977, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1145, %r976, 2021161080;
	xor.b32  	%r989, %r1145, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r980, %r981}, {%r982}, {%r983}, {%r948, %r949};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r986, %r987}, {%r988}, {%r989}, {%r954, %r955};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r992, %r993}, {%r982}, {%r989}, {%r966, %r967};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r998, %r999}, {%r988}, {%r983}, {%r992, %r993};
	// end inline asm
	ld.shared.u32 	%r1005, [%rd84+20];
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1146, %r1004, 2021161080;
	xor.b32  	%r1015, %r1146, -2139062144;
	shr.u32 	%r1009, %r1005, 4;
	// begin inline asm
	lop3.b32 %r1008, %r1009, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1147, %r1008, 2021161080;
	xor.b32  	%r1021, %r1147, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1012, %r1013}, {%r1014}, {%r1015}, {%r980, %r981};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1018, %r1019}, {%r1020}, {%r1021}, {%r986, %r987};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1024, %r1025}, {%r1014}, {%r1021}, {%r998, %r999};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1030, %r1031}, {%r1020}, {%r1015}, {%r1024, %r1025};
	// end inline asm
	ld.shared.u32 	%r1037, [%rd84+24];
	// begin inline asm
	lop3.b32 %r1036, %r1037, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1148, %r1036, 2021161080;
	xor.b32  	%r1047, %r1148, -2139062144;
	shr.u32 	%r1041, %r1037, 4;
	// begin inline asm
	lop3.b32 %r1040, %r1041, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1149, %r1040, 2021161080;
	xor.b32  	%r1053, %r1149, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1044, %r1045}, {%r1046}, {%r1047}, {%r1012, %r1013};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1050, %r1051}, {%r1052}, {%r1053}, {%r1018, %r1019};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1056, %r1057}, {%r1046}, {%r1053}, {%r1030, %r1031};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1062, %r1063}, {%r1052}, {%r1047}, {%r1056, %r1057};
	// end inline asm
	ld.shared.u32 	%r1069, [%rd84+28];
	// begin inline asm
	lop3.b32 %r1068, %r1069, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1150, %r1068, 2021161080;
	xor.b32  	%r1079, %r1150, -2139062144;
	shr.u32 	%r1073, %r1069, 4;
	// begin inline asm
	lop3.b32 %r1072, %r1073, %r584, %r585, 40;
	// end inline asm
	add.s32 	%r1151, %r1072, 2021161080;
	xor.b32  	%r1085, %r1151, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1076, %r1077}, {%r1078}, {%r1079}, {%r1044, %r1045};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1082, %r1083}, {%r1084}, {%r1085}, {%r1050, %r1051};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1088, %r1089}, {%r1078}, {%r1085}, {%r1062, %r1063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1094, %r1095}, {%r1084}, {%r1079}, {%r1088, %r1089};
	// end inline asm
	sub.s32 	%r1152, %r1076, %r1082;
	add.s32 	%r1153, %r1152, 4;
	shr.s32 	%r1102, %r1153, 3;
	add.s32 	%r1154, %r1094, 4;
	shr.s32 	%r1101, %r1154, 3;
	sub.s32 	%r1155, %r1077, %r1083;
	add.s32 	%r1156, %r1155, 4;
	shr.s32 	%r1105, %r1156, 3;
	add.s32 	%r1157, %r1095, 4;
	shr.s32 	%r1104, %r1157, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1100, %r1101, %r1102;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1103, %r1104, %r1105;
	// end inline asm
	add.s32 	%r1158, %r54, %r1132;
	mul.wide.u32 	%rd90, %r1158, 4;
	add.s64 	%rd91, %rd56, %rd90;
	st.shared.u32 	[%rd91], %r1100;
	add.s32 	%r1159, %r54, %r1134;
	mul.wide.u32 	%rd92, %r1159, 4;
	add.s64 	%rd93, %rd56, %rd92;
	st.shared.u32 	[%rd93], %r1103;
	add.s32 	%r1360, %r1360, 8;
	setp.ne.s32 	%p7, %r1360, 32;
	@%p7 bra 	LBB0_11;
// %bb.12:                              // %L9442
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1178, [%rd11];
	ld.shared.u32 	%r1179, [%rd12+12800];
	ld.shared.u32 	%r1180, [%rd12+25600];
	ld.shared.u32 	%r1181, [%rd12+38400];
	ld.shared.u32 	%r1182, [%rd13];
	ld.shared.u32 	%r1183, [%rd14+12800];
	ld.shared.u32 	%r1184, [%rd14+25600];
	ld.shared.u32 	%r1185, [%rd14+38400];
	ld.shared.u32 	%r1186, [%rd15];
	ld.shared.u32 	%r1187, [%rd16+12800];
	ld.shared.u32 	%r1188, [%rd16+25600];
	ld.shared.u32 	%r1189, [%rd16+38400];
	ld.shared.u32 	%r1190, [%rd17];
	ld.shared.u32 	%r1191, [%rd18+12800];
	ld.shared.u32 	%r1192, [%rd18+25600];
	ld.shared.u32 	%r1193, [%rd18+38400];
	cvt.s32.s16 	%r1194, %r1178;
	shr.s32 	%r1195, %r1178, 16;
	cvt.s32.s16 	%r1196, %r1179;
	shr.s32 	%r1197, %r1179, 16;
	cvt.s32.s16 	%r1198, %r1180;
	shr.s32 	%r1199, %r1180, 16;
	cvt.s32.s16 	%r1200, %r1181;
	shr.s32 	%r1201, %r1181, 16;
	cvt.s32.s16 	%r1202, %r1182;
	shr.s32 	%r1203, %r1182, 16;
	cvt.s32.s16 	%r1204, %r1183;
	shr.s32 	%r1205, %r1183, 16;
	cvt.s32.s16 	%r1206, %r1184;
	shr.s32 	%r1207, %r1184, 16;
	cvt.s32.s16 	%r1208, %r1185;
	shr.s32 	%r1209, %r1185, 16;
	cvt.s32.s16 	%r1210, %r1186;
	shr.s32 	%r1211, %r1186, 16;
	cvt.s32.s16 	%r1212, %r1187;
	shr.s32 	%r1213, %r1187, 16;
	cvt.s32.s16 	%r1214, %r1188;
	shr.s32 	%r1215, %r1188, 16;
	cvt.s32.s16 	%r1216, %r1189;
	shr.s32 	%r1217, %r1189, 16;
	cvt.s32.s16 	%r1218, %r1190;
	shr.s32 	%r1219, %r1190, 16;
	cvt.s32.s16 	%r1220, %r1191;
	shr.s32 	%r1221, %r1191, 16;
	cvt.s32.s16 	%r1222, %r1192;
	shr.s32 	%r1223, %r1192, 16;
	cvt.s32.s16 	%r1224, %r1193;
	shr.s32 	%r1225, %r1193, 16;
	add.s32 	%r1226, %r1194, %r55;
	add.s32 	%r1227, %r1226, %r1196;
	add.s32 	%r1228, %r1227, %r1198;
	add.s32 	%r1229, %r1228, %r1200;
	shr.s32 	%r1230, %r1229, %r56;
	add.s32 	%r1231, %r1195, %r55;
	add.s32 	%r1232, %r1231, %r1197;
	add.s32 	%r1233, %r1232, %r1199;
	add.s32 	%r1234, %r1233, %r1201;
	shr.s32 	%r1235, %r1234, %r56;
	add.s32 	%r1236, %r1202, %r55;
	add.s32 	%r1237, %r1236, %r1204;
	add.s32 	%r1238, %r1237, %r1206;
	add.s32 	%r1239, %r1238, %r1208;
	shr.s32 	%r1240, %r1239, %r56;
	add.s32 	%r1241, %r1203, %r55;
	add.s32 	%r1242, %r1241, %r1205;
	add.s32 	%r1243, %r1242, %r1207;
	add.s32 	%r1244, %r1243, %r1209;
	shr.s32 	%r1245, %r1244, %r56;
	add.s32 	%r1246, %r1210, %r55;
	add.s32 	%r1247, %r1246, %r1212;
	add.s32 	%r1248, %r1247, %r1214;
	add.s32 	%r1249, %r1248, %r1216;
	shr.s32 	%r1250, %r1249, %r56;
	add.s32 	%r1251, %r1211, %r55;
	add.s32 	%r1252, %r1251, %r1213;
	add.s32 	%r1253, %r1252, %r1215;
	add.s32 	%r1254, %r1253, %r1217;
	shr.s32 	%r1255, %r1254, %r56;
	add.s32 	%r1256, %r1218, %r55;
	add.s32 	%r1257, %r1256, %r1220;
	add.s32 	%r1258, %r1257, %r1222;
	add.s32 	%r1259, %r1258, %r1224;
	shr.s32 	%r1260, %r1259, %r56;
	add.s32 	%r1261, %r1219, %r55;
	add.s32 	%r1262, %r1261, %r1221;
	add.s32 	%r1263, %r1262, %r1223;
	add.s32 	%r1264, %r1263, %r1225;
	shr.s32 	%r1265, %r1264, %r56;
	max.s32 	%r1266, %r1230, -7;
	min.s32 	%r1165, %r1266, 7;
	max.s32 	%r1267, %r1235, -7;
	min.s32 	%r1172, %r1267, 7;
	max.s32 	%r1268, %r1240, -7;
	min.s32 	%r1164, %r1268, 7;
	max.s32 	%r1269, %r1245, -7;
	min.s32 	%r1171, %r1269, 7;
	max.s32 	%r1270, %r1250, -7;
	min.s32 	%r1162, %r1270, 7;
	max.s32 	%r1271, %r1255, -7;
	min.s32 	%r1169, %r1271, 7;
	max.s32 	%r1272, %r1260, -7;
	min.s32 	%r1161, %r1272, 7;
	max.s32 	%r1273, %r1265, -7;
	min.s32 	%r1168, %r1273, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1160, %r1161, %r1162, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1163, %r1164, %r1165, %r1160;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1167, %r1168, %r1169, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1170, %r1171, %r1172, %r1167;
	// end inline asm
	shl.b32 	%r1177, %r1170, 4;
	// begin inline asm
	lop3.b32 %r1284, %r585, %r1163, %r1177, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r1353, 0;
	selp.b32 	%r1358, %r1284, %r1358, %p8;
	selp.b32 	%r1359, %r1284, %r1359, %p8;
	setp.eq.s32 	%p9, %r1353, 32;
	selp.b32 	%r1354, %r1284, %r1354, %p9;
	selp.b32 	%r1355, %r1284, %r1355, %p9;
	setp.eq.s32 	%p10, %r1353, 64;
	selp.b32 	%r1356, %r1284, %r1356, %p10;
	selp.b32 	%r1357, %r1284, %r1357, %p10;
	add.s32 	%r78, %r1353, 32;
	setp.ne.s32 	%p11, %r1353, 96;
	mov.u32 	%r1353, %r78;
	@%p11 bra 	LBB0_8;
// %bb.13:                              // %L12473
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r57, 0;
	// begin inline asm
	prmt.b32 %r1274, %r1358, %r1354, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1359, %r1355, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1356, %r1284, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1357, %r1284, %r229;
	// end inline asm
	selp.b32 	%r1322, %r1278, %r1274, %p12;
	shfl.sync.bfly.b32	%r1323, %r1322, 1, 31, -1;
	selp.b32 	%r1291, %r1274, %r1323, %p12;
	selp.b32 	%r1292, %r1323, %r1278, %p12;
	selp.b32 	%r1324, %r1286, %r1282, %p12;
	shfl.sync.bfly.b32	%r1325, %r1324, 1, 31, -1;
	selp.b32 	%r1299, %r1282, %r1325, %p12;
	selp.b32 	%r1300, %r1325, %r1286, %p12;
	// begin inline asm
	prmt.b32 %r1290, %r1291, %r1292, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1291, %r1292, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1299, %r1300, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1299, %r1300, %r229;
	// end inline asm
	selp.b32 	%r1326, %r1298, %r1290, %p4;
	shfl.sync.bfly.b32	%r1327, %r1326, 2, 31, -1;
	selp.b32 	%r1307, %r1290, %r1327, %p4;
	selp.b32 	%r1308, %r1327, %r1298, %p4;
	selp.b32 	%r1328, %r1302, %r1294, %p4;
	shfl.sync.bfly.b32	%r1329, %r1328, 2, 31, -1;
	selp.b32 	%r1315, %r1294, %r1329, %p4;
	selp.b32 	%r1316, %r1329, %r1302, %p4;
	// begin inline asm
	prmt.b32 %r1306, %r1307, %r1308, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1307, %r1308, %r101;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r101;
	// end inline asm
	selp.b32 	%r1330, %r1314, %r1306, %p5;
	shfl.sync.bfly.b32	%r1331, %r1330, 4, 31, -1;
	selp.b32 	%r1332, %r1306, %r1331, %p5;
	selp.b32 	%r1333, %r1331, %r1314, %p5;
	selp.b32 	%r1334, %r1318, %r1310, %p5;
	shfl.sync.bfly.b32	%r1335, %r1334, 4, 31, -1;
	selp.b32 	%r1336, %r1310, %r1335, %p5;
	selp.b32 	%r1337, %r1335, %r1318, %p5;
	selp.b32 	%r1338, %r1336, %r1332, %p12;
	shfl.sync.bfly.b32	%r1339, %r1338, 1, 31, -1;
	selp.b32 	%r1340, %r1332, %r1339, %p12;
	selp.b32 	%r1341, %r1339, %r1336, %p12;
	selp.b32 	%r1342, %r1337, %r1333, %p12;
	shfl.sync.bfly.b32	%r1343, %r1342, 1, 31, -1;
	selp.b32 	%r1344, %r1333, %r1343, %p12;
	selp.b32 	%r1345, %r1343, %r1337, %p12;
	or.b32  	%r1346, %r58, %r1352;
	or.b32  	%r1347, %r1346, %r59;
	or.b32  	%r1348, %r1347, %r12;
	or.b32  	%r1349, %r1348, %r47;
	or.b32  	%r1350, %r1349, %r60;
	cvt.u64.u32 	%rd94, %r1350;
	add.s64 	%rd95, %rd4, %rd94;
	st.global.v4.u32 	[%rd95], {%r1340, %r1344, %r1341, %r1345};
	add.s32 	%r79, %r1352, 128;
	setp.ne.s32 	%p15, %r1352, 1920;
	mov.u32 	%r1352, %r79;
	@%p15 bra 	LBB0_7;
// %bb.14:                              // %L12929
	mov.u32 	%r1351, 0;
	st.global.u32 	[%rd6], %r1351;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L29
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L287
	mov.u32 	%r93, 2;
	st.global.u32 	[%rd6], %r93;
	mov.u64 	%rd27, exception925;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
