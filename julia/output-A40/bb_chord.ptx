// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1886[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1280>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r82, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r83, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r84, %r2, %r3;
	mad.lo.s32 	%r85, %r4, 768, %r84;
	mul.wide.u32 	%rd22, %r85, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r86, 1;
	st.global.u32 	[%rd7], %r86;
	setp.gt.u32 	%p8, %r80, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r81, %r80;
	setp.gt.s32 	%p10, %r81, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r87, %r81, %r80;
	and.b32  	%r88, %r87, 127;
	setp.eq.s32 	%p12, %r88, 0;
	@%p12 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_7;
$L__BB0_21:                             // %pass109
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r89, %r1, 2;
	shr.u32 	%r90, %r4, 1;
	cvt.u16.u32 	%rs1, %r90;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r91, %rs6;
	and.b32  	%r73, %r91, 255;
	shr.u32 	%r74, %r3, 3;
	or.b32  	%r92, %r89, %r74;
	cvt.u16.u32 	%rs7, %r92;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 14;
	mul.lo.s16 	%rs11, %rs10, 96;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r93, %rs12;
	and.b32  	%r75, %r93, 255;
	and.b32  	%r76, %r4, 1;
	neg.s32 	%r94, %r76;
	and.b32  	%r95, %r94, 96;
	add.s32 	%r96, %r95, %r75;
	mad.lo.s32 	%r97, %r73, 192, %r96;
	mul.wide.u32 	%rd23, %r97, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r98, [%rd24];
	add.s32 	%r78, %r98, -4;
	setp.lt.u32 	%p13, %r78, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_22;
$L__BB0_8:                              // %L457
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r77, %r98, -3;
	or.b32  	%r100, %r3, %r1;
	setp.ne.s32 	%p1, %r100, 0;
	mul.wide.u32 	%rd27, %r4, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1271, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L480
	st.global.u32 	[%rd8], %r1271;
$L__BB0_10:                             // %L526
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r76, 0;
	bar.sync 	0;
	shl.b32 	%r359, %r1, 6;
	shl.b32 	%r360, %r3, 4;
	and.b32  	%r5, %r360, 16;
	shl.b32 	%r361, %r3, 1;
	and.b32  	%r362, %r361, 12;
	and.b32  	%r363, %r359, 192;
	or.b32  	%r364, %r363, %r5;
	or.b32  	%r365, %r362, %r364;
	shr.u32 	%r6, %r3, 2;
	shr.u32 	%r366, %r1, 2;
	cvt.u16.u32 	%rs13, %r366;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r6;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r367, %rs27, 256;
	selp.b32 	%r368, 0, 24576, %p15;
	or.b32  	%r369, %r365, %r368;
	mad.lo.s32 	%r370, %r73, 49152, %r369;
	add.s32 	%r371, %r370, %r367;
	shl.b32 	%r372, %r371, 2;
	cvt.u64.u32 	%rd28, %r372;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r103, %r104, %r119, %r120}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r373, %rs34, 256;
	add.s32 	%r374, %r370, %r373;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd30, %r375;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r111, %r112, %r127, %r128}, [%rd31];
	or.b32  	%r376, %r370, 33;
	add.s32 	%r377, %r376, %r367;
	mul.wide.u32 	%rd32, %r377, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r135, %r136, %r151, %r152}, [%rd33+-4];
	add.s32 	%r378, %r376, %r373;
	mul.wide.u32 	%rd34, %r378, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r143, %r144, %r159, %r160}, [%rd35+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r379, %rs42, 256;
	add.s32 	%r380, %r370, %r379;
	shl.b32 	%r381, %r380, 2;
	cvt.u64.u32 	%rd36, %r381;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r167, %r168, %r183, %r184}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r382, %rs49, 256;
	add.s32 	%r383, %r370, %r382;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd38, %r384;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r175, %r176, %r191, %r192}, [%rd39];
	add.s32 	%r385, %r376, %r379;
	mul.wide.u32 	%rd40, %r385, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r199, %r200, %r215, %r216}, [%rd41+-4];
	add.s32 	%r386, %r376, %r382;
	mul.wide.u32 	%rd42, %r386, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r207, %r208, %r223, %r224}, [%rd43+-4];
	mov.u32 	%r225, 21520;
	// begin inline asm
	prmt.b32 %r231, %r103, %r104, %r225;
	// end inline asm
	mov.u32 	%r229, 30258;
	// begin inline asm
	prmt.b32 %r232, %r103, %r104, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r111, %r112, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r111, %r112, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r247, %r119, %r120, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r119, %r120, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r255, %r127, %r128, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r127, %r128, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r263, %r135, %r136, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r135, %r136, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r143, %r144, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r143, %r144, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r151, %r152, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r151, %r152, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r159, %r160, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r159, %r160, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r167, %r168, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r167, %r168, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r175, %r176, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r175, %r176, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r311, %r183, %r184, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r183, %r184, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r319, %r191, %r192, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r191, %r192, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r327, %r199, %r200, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r199, %r200, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r335, %r207, %r208, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r207, %r208, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r343, %r215, %r216, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r215, %r216, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r351, %r223, %r224, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r223, %r224, %r229;
	// end inline asm
	mov.u32 	%r353, 25152;
	// begin inline asm
	prmt.b32 %r230, %r231, %r232, %r353;
	// end inline asm
	mov.u32 	%r357, 29521;
	// begin inline asm
	prmt.b32 %r234, %r231, %r232, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r239, %r240, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r239, %r240, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r247, %r248, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r247, %r248, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r255, %r256, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r255, %r256, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r263, %r264, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r263, %r264, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r271, %r272, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r271, %r272, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r279, %r280, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r279, %r280, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r287, %r288, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r287, %r288, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r295, %r296, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r295, %r296, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r303, %r304, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r303, %r304, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r311, %r312, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r311, %r312, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r319, %r320, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r319, %r320, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r327, %r328, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r327, %r328, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r335, %r336, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r335, %r336, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r343, %r344, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r343, %r344, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r351, %r352, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r351, %r352, %r357;
	// end inline asm
	and.b32  	%r7, %r3, 2;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r387, %r262, %r230, %p16;
	shfl.sync.bfly.b32	%r388, %r387, 2, 31, -1;
	selp.b32 	%r389, %r230, %r388, %p16;
	selp.b32 	%r390, %r388, %r262, %p16;
	selp.b32 	%r391, %r270, %r238, %p16;
	shfl.sync.bfly.b32	%r392, %r391, 2, 31, -1;
	selp.b32 	%r393, %r238, %r392, %p16;
	selp.b32 	%r394, %r392, %r270, %p16;
	selp.b32 	%r395, %r266, %r234, %p16;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r234, %r396, %p16;
	selp.b32 	%r398, %r396, %r266, %p16;
	selp.b32 	%r399, %r274, %r242, %p16;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r242, %r400, %p16;
	selp.b32 	%r402, %r400, %r274, %p16;
	selp.b32 	%r403, %r278, %r246, %p16;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r246, %r404, %p16;
	selp.b32 	%r406, %r404, %r278, %p16;
	selp.b32 	%r407, %r286, %r254, %p16;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r254, %r408, %p16;
	selp.b32 	%r410, %r408, %r286, %p16;
	selp.b32 	%r411, %r282, %r250, %p16;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r250, %r412, %p16;
	selp.b32 	%r414, %r412, %r282, %p16;
	selp.b32 	%r415, %r290, %r258, %p16;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r258, %r416, %p16;
	selp.b32 	%r418, %r416, %r290, %p16;
	selp.b32 	%r419, %r326, %r294, %p16;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r294, %r420, %p16;
	selp.b32 	%r422, %r420, %r326, %p16;
	selp.b32 	%r423, %r334, %r302, %p16;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r302, %r424, %p16;
	selp.b32 	%r426, %r424, %r334, %p16;
	selp.b32 	%r427, %r330, %r298, %p16;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r298, %r428, %p16;
	selp.b32 	%r430, %r428, %r330, %p16;
	selp.b32 	%r431, %r338, %r306, %p16;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r306, %r432, %p16;
	selp.b32 	%r434, %r432, %r338, %p16;
	selp.b32 	%r435, %r342, %r310, %p16;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r310, %r436, %p16;
	selp.b32 	%r438, %r436, %r342, %p16;
	selp.b32 	%r439, %r350, %r318, %p16;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r318, %r440, %p16;
	selp.b32 	%r442, %r440, %r350, %p16;
	selp.b32 	%r443, %r346, %r314, %p16;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r314, %r444, %p16;
	selp.b32 	%r446, %r444, %r346, %p16;
	selp.b32 	%r447, %r354, %r322, %p16;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r322, %r448, %p16;
	selp.b32 	%r450, %r448, %r354, %p16;
	and.b32  	%r8, %r3, 4;
	setp.eq.s32 	%p17, %r8, 0;
	selp.b32 	%r451, %r421, %r389, %p17;
	shfl.sync.bfly.b32	%r452, %r451, 4, 31, -1;
	selp.b32 	%r9, %r389, %r452, %p17;
	selp.b32 	%r10, %r452, %r421, %p17;
	selp.b32 	%r453, %r425, %r393, %p17;
	shfl.sync.bfly.b32	%r454, %r453, 4, 31, -1;
	selp.b32 	%r11, %r393, %r454, %p17;
	selp.b32 	%r12, %r454, %r425, %p17;
	selp.b32 	%r455, %r429, %r397, %p17;
	shfl.sync.bfly.b32	%r456, %r455, 4, 31, -1;
	selp.b32 	%r13, %r397, %r456, %p17;
	selp.b32 	%r14, %r456, %r429, %p17;
	selp.b32 	%r457, %r433, %r401, %p17;
	shfl.sync.bfly.b32	%r458, %r457, 4, 31, -1;
	selp.b32 	%r15, %r401, %r458, %p17;
	selp.b32 	%r16, %r458, %r433, %p17;
	selp.b32 	%r459, %r437, %r405, %p17;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r17, %r405, %r460, %p17;
	selp.b32 	%r18, %r460, %r437, %p17;
	selp.b32 	%r461, %r441, %r409, %p17;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r19, %r409, %r462, %p17;
	selp.b32 	%r20, %r462, %r441, %p17;
	selp.b32 	%r463, %r445, %r413, %p17;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r21, %r413, %r464, %p17;
	selp.b32 	%r22, %r464, %r445, %p17;
	selp.b32 	%r465, %r449, %r417, %p17;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r23, %r417, %r466, %p17;
	selp.b32 	%r24, %r466, %r449, %p17;
	selp.b32 	%r467, %r422, %r390, %p17;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r25, %r390, %r468, %p17;
	selp.b32 	%r26, %r468, %r422, %p17;
	selp.b32 	%r469, %r426, %r394, %p17;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r27, %r394, %r470, %p17;
	selp.b32 	%r28, %r470, %r426, %p17;
	selp.b32 	%r471, %r430, %r398, %p17;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r29, %r398, %r472, %p17;
	selp.b32 	%r30, %r472, %r430, %p17;
	selp.b32 	%r473, %r434, %r402, %p17;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r31, %r402, %r474, %p17;
	selp.b32 	%r32, %r474, %r434, %p17;
	selp.b32 	%r475, %r438, %r406, %p17;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r33, %r406, %r476, %p17;
	selp.b32 	%r34, %r476, %r438, %p17;
	selp.b32 	%r477, %r442, %r410, %p17;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r35, %r410, %r478, %p17;
	selp.b32 	%r36, %r478, %r442, %p17;
	selp.b32 	%r479, %r446, %r414, %p17;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r37, %r414, %r480, %p17;
	selp.b32 	%r38, %r480, %r446, %p17;
	selp.b32 	%r481, %r450, %r418, %p17;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r39, %r418, %r482, %p17;
	selp.b32 	%r40, %r482, %r450, %p17;
	shl.b32 	%r483, %r3, 2;
	and.b32  	%r484, %r483, 28;
	and.b32  	%r485, %r2, 96;
	or.b32  	%r41, %r485, %r484;
	shl.b32 	%r486, %r73, 8;
	and.b32  	%r42, %r1, 12;
	shl.b32 	%r487, %r4, 7;
	and.b32  	%r488, %r487, 128;
	or.b32  	%r489, %r41, %r488;
	or.b32  	%r43, %r489, %r486;
	shl.b32 	%r490, %r3, 3;
	and.b32  	%r491, %r490, 24;
	or.b32  	%r44, %r485, %r491;
	and.b32  	%r45, %r361, 6;
	and.b32  	%r492, %r1, 3;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r493, %rs54;
	and.b32  	%r494, %r493, 255;
	mul.lo.s32 	%r495, %r492, 3200;
	or.b32  	%r46, %r495, %r494;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r496, %rs60;
	and.b32  	%r497, %r496, 255;
	or.b32  	%r47, %r495, %r497;
	and.b32  	%r498, %r3, 7;
	shl.b32 	%r500, %r86, %r78;
	setp.gt.u32 	%p18, %r78, 31;
	selp.b32 	%r48, 0, %r500, %p18;
	min.u32 	%r49, %r77, 31;
	and.b32  	%r50, %r3, 1;
	shl.b32 	%r501, %r73, 12;
	shl.b32 	%r502, %r4, 11;
	and.b32  	%r503, %r502, 2048;
	shl.b32 	%r504, %r3, 5;
	and.b32  	%r51, %r504, 64;
	or.b32  	%r505, %r501, %r503;
	mad.lo.s32 	%r506, %r75, 196608, %r505;
	or.b32  	%r507, %r3, 24;
	mul.lo.s32 	%r508, %r507, 100;
	cvt.u64.u32 	%rd44, %r508;
	cvt.u64.u32 	%rd45, %r75;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	mov.u64 	%rd48, shmem;
	add.s64 	%rd49, %rd48, 16512;
	add.s64 	%rd9, %rd49, %rd47;
	mul.lo.s32 	%r509, %r498, 100;
	add.s32 	%r510, %r509, %r75;
	mul.wide.u32 	%rd50, %r510, 4;
	add.s64 	%rd10, %rd49, %rd50;
	cvt.u64.u32 	%rd51, %r509;
	add.s64 	%rd52, %rd45, %rd51;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd11, %rd49, %rd53;
	add.s32 	%r511, %r509, 800;
	add.s32 	%r512, %r511, %r75;
	mul.wide.u32 	%rd54, %r512, 4;
	add.s64 	%rd12, %rd49, %rd54;
	cvt.u64.u32 	%rd55, %r511;
	add.s64 	%rd56, %rd45, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd13, %rd49, %rd57;
	add.s32 	%r513, %r509, 1600;
	add.s32 	%r514, %r513, %r75;
	mul.wide.u32 	%rd58, %r514, 4;
	add.s64 	%rd14, %rd49, %rd58;
	cvt.u64.u32 	%rd59, %r513;
	add.s64 	%rd60, %rd45, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd15, %rd49, %rd61;
	add.s32 	%r515, %r508, %r75;
	mul.wide.u32 	%rd62, %r515, 4;
	add.s64 	%rd16, %rd49, %rd62;
	and.b32  	%r52, %r490, 32;
	shl.b32 	%r53, %r506, 2;
	mov.pred 	%p55, 0;
$L__BB0_11:                             // %L2574
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_15 Depth 3
	add.s32 	%r516, %r1271, %r80;
	setp.ge.s32 	%p19, %r516, %r81;
	@%p19 bra 	$L__BB0_18;
// %bb.12:                              // %L2582.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	mov.u32 	%r1272, 0;
	mov.u32 	%r1273, %r1272;
	mov.u32 	%r1274, %r1272;
	mov.u32 	%r1275, %r1272;
	mov.u32 	%r1276, %r1272;
	mov.u32 	%r1277, %r1272;
	mov.u32 	%r1278, %r1272;
$L__BB0_13:                             // %L2582
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_15 Depth 3
	setp.lt.u32 	%p20, %r1, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_14;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_13 Depth=2
	add.s32 	%r518, %r1272, %r1271;
	or.b32  	%r519, %r518, %r42;
	or.b32  	%r520, %r519, %r74;
	and.b32  	%r521, %r520, 32751;
	add.s32 	%r522, %r521, %r80;
	mad.lo.s32 	%r523, %r522, 12288, %r43;
	mul.hi.s32 	%r524, %r523, 715827883;
	shr.u32 	%r525, %r524, 31;
	shr.s32 	%r526, %r524, 26;
	add.s32 	%r527, %r526, %r525;
	setp.lt.s32 	%p21, %r523, 0;
	mul.lo.s32 	%r528, %r527, 402653184;
	setp.ne.s32 	%p22, %r528, %r523;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r529, -1, 0, %p23;
	add.s32 	%r530, %r527, %r529;
	or.b32  	%r531, %r523, 1;
	mad.lo.s32 	%r532, %r530, -402653184, %r531;
	mul.wide.s32 	%rd63, %r532, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r533, %r534, %r535, %r536}, [%rd64+-4];
	or.b32  	%r537, %r520, 16;
	and.b32  	%r538, %r537, 32767;
	add.s32 	%r539, %r538, %r80;
	mad.lo.s32 	%r540, %r539, 12288, %r43;
	mul.hi.s32 	%r541, %r540, 715827883;
	shr.u32 	%r542, %r541, 31;
	shr.s32 	%r543, %r541, 26;
	add.s32 	%r544, %r543, %r542;
	setp.lt.s32 	%p24, %r540, 0;
	mul.lo.s32 	%r545, %r544, 402653184;
	setp.ne.s32 	%p25, %r545, %r540;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r546, -1, 0, %p26;
	add.s32 	%r547, %r544, %r546;
	or.b32  	%r548, %r540, 1;
	mad.lo.s32 	%r549, %r547, -402653184, %r548;
	mul.wide.s32 	%rd65, %r549, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r550, %r551, %r552, %r553}, [%rd66+-4];
	and.b32  	%r554, %r520, 15;
	mul.lo.s32 	%r555, %r554, 129;
	add.s32 	%r556, %r41, %r555;
	mul.wide.u32 	%rd67, %r556, 4;
	add.s64 	%rd69, %rd48, %rd67;
	st.shared.u32 	[%rd69], %r533;
	cvt.u64.u32 	%rd70, %r555;
	cvt.u64.u32 	%rd71, %r41;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd48, %rd73;
	st.shared.u32 	[%rd74+4], %r534;
	st.shared.u32 	[%rd74+8], %r535;
	st.shared.u32 	[%rd74+12], %r536;
	and.b32  	%r557, %r537, 31;
	mul.lo.s32 	%r558, %r557, 129;
	add.s32 	%r559, %r41, %r558;
	mul.wide.u32 	%rd75, %r559, 4;
	add.s64 	%rd76, %rd48, %rd75;
	st.shared.u32 	[%rd76], %r550;
	cvt.u64.u32 	%rd77, %r558;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd48, %rd79;
	st.shared.u32 	[%rd80+4], %r551;
	st.shared.u32 	[%rd80+8], %r552;
	st.shared.u32 	[%rd80+12], %r553;
$L__BB0_14:                             // %L4294
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	mov.u32 	%r565, 0;
	mov.u32 	%r1279, %r565;
$L__BB0_15:                             // %L4296
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r957, %r6, %r1279;
	mad.lo.s32 	%r958, %r957, 129, %r44;
	mul.wide.u32 	%rd81, %r958, 4;
	add.s64 	%rd83, %rd48, %rd81;
	ld.shared.u32 	%r959, [%rd83];
	and.b32  	%r960, %r959, 252645135;
	add.s32 	%r961, %r960, 2021161080;
	xor.b32  	%r570, %r961, -2139062144;
	shr.u32 	%r962, %r959, 4;
	and.b32  	%r963, %r962, 252645135;
	add.s32 	%r964, %r963, 2021161080;
	xor.b32  	%r564, %r964, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r561, %r562}, {%r9}, {%r564}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r567, %r568}, {%r13}, {%r570}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r573, %r574}, {%r9}, {%r570}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r579, %r580}, {%r13}, {%r564}, {%r573, %r574};
	// end inline asm
	ld.shared.u32 	%r965, [%rd83+4];
	and.b32  	%r966, %r965, 252645135;
	add.s32 	%r967, %r966, 2021161080;
	xor.b32  	%r594, %r967, -2139062144;
	shr.u32 	%r968, %r965, 4;
	and.b32  	%r969, %r968, 252645135;
	add.s32 	%r970, %r969, 2021161080;
	xor.b32  	%r588, %r970, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r585, %r586}, {%r17}, {%r588}, {%r561, %r562};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r591, %r592}, {%r21}, {%r594}, {%r567, %r568};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r17}, {%r594}, {%r579, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r603, %r604}, {%r21}, {%r588}, {%r597, %r598};
	// end inline asm
	ld.shared.u32 	%r971, [%rd83+8];
	and.b32  	%r972, %r971, 252645135;
	add.s32 	%r973, %r972, 2021161080;
	xor.b32  	%r618, %r973, -2139062144;
	shr.u32 	%r974, %r971, 4;
	and.b32  	%r975, %r974, 252645135;
	add.s32 	%r976, %r975, 2021161080;
	xor.b32  	%r612, %r976, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r609, %r610}, {%r25}, {%r612}, {%r585, %r586};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r615, %r616}, {%r29}, {%r618}, {%r591, %r592};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r621, %r622}, {%r25}, {%r618}, {%r603, %r604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r627, %r628}, {%r29}, {%r612}, {%r621, %r622};
	// end inline asm
	ld.shared.u32 	%r977, [%rd83+12];
	and.b32  	%r978, %r977, 252645135;
	add.s32 	%r979, %r978, 2021161080;
	xor.b32  	%r642, %r979, -2139062144;
	shr.u32 	%r980, %r977, 4;
	and.b32  	%r981, %r980, 252645135;
	add.s32 	%r982, %r981, 2021161080;
	xor.b32  	%r636, %r982, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r33}, {%r636}, {%r609, %r610};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r37}, {%r642}, {%r615, %r616};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r33}, {%r642}, {%r627, %r628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r651, %r652}, {%r37}, {%r636}, {%r645, %r646};
	// end inline asm
	ld.shared.u32 	%r983, [%rd83+16];
	and.b32  	%r984, %r983, 252645135;
	add.s32 	%r985, %r984, 2021161080;
	xor.b32  	%r666, %r985, -2139062144;
	shr.u32 	%r986, %r983, 4;
	and.b32  	%r987, %r986, 252645135;
	add.s32 	%r988, %r987, 2021161080;
	xor.b32  	%r660, %r988, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r657, %r658}, {%r10}, {%r660}, {%r633, %r634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r663, %r664}, {%r14}, {%r666}, {%r639, %r640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r669, %r670}, {%r10}, {%r666}, {%r651, %r652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r675, %r676}, {%r14}, {%r660}, {%r669, %r670};
	// end inline asm
	ld.shared.u32 	%r989, [%rd83+20];
	and.b32  	%r990, %r989, 252645135;
	add.s32 	%r991, %r990, 2021161080;
	xor.b32  	%r690, %r991, -2139062144;
	shr.u32 	%r992, %r989, 4;
	and.b32  	%r993, %r992, 252645135;
	add.s32 	%r994, %r993, 2021161080;
	xor.b32  	%r684, %r994, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r681, %r682}, {%r18}, {%r684}, {%r657, %r658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r687, %r688}, {%r22}, {%r690}, {%r663, %r664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r693, %r694}, {%r18}, {%r690}, {%r675, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r699, %r700}, {%r22}, {%r684}, {%r693, %r694};
	// end inline asm
	ld.shared.u32 	%r995, [%rd83+24];
	and.b32  	%r996, %r995, 252645135;
	add.s32 	%r997, %r996, 2021161080;
	xor.b32  	%r714, %r997, -2139062144;
	shr.u32 	%r998, %r995, 4;
	and.b32  	%r999, %r998, 252645135;
	add.s32 	%r1000, %r999, 2021161080;
	xor.b32  	%r708, %r1000, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r705, %r706}, {%r26}, {%r708}, {%r681, %r682};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r711, %r712}, {%r30}, {%r714}, {%r687, %r688};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r717, %r718}, {%r26}, {%r714}, {%r699, %r700};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r723, %r724}, {%r30}, {%r708}, {%r717, %r718};
	// end inline asm
	ld.shared.u32 	%r1001, [%rd83+28];
	and.b32  	%r1002, %r1001, 252645135;
	add.s32 	%r1003, %r1002, 2021161080;
	xor.b32  	%r738, %r1003, -2139062144;
	shr.u32 	%r1004, %r1001, 4;
	and.b32  	%r1005, %r1004, 252645135;
	add.s32 	%r1006, %r1005, 2021161080;
	xor.b32  	%r732, %r1006, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r729, %r730}, {%r34}, {%r732}, {%r705, %r706};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r735, %r736}, {%r38}, {%r738}, {%r711, %r712};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r741, %r742}, {%r34}, {%r738}, {%r723, %r724};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r747, %r748}, {%r38}, {%r732}, {%r741, %r742};
	// end inline asm
	sub.s32 	%r1007, %r729, %r735;
	add.s32 	%r1008, %r1007, 4;
	shr.s32 	%r755, %r1008, 3;
	add.s32 	%r1009, %r747, 4;
	shr.s32 	%r754, %r1009, 3;
	sub.s32 	%r1010, %r730, %r736;
	add.s32 	%r1011, %r1010, 4;
	shr.s32 	%r758, %r1011, 3;
	add.s32 	%r1012, %r748, 4;
	shr.s32 	%r757, %r1012, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r753, %r754, %r755;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r756, %r757, %r758;
	// end inline asm
	or.b32  	%r1013, %r45, %r1279;
	mul.lo.s32 	%r1014, %r1013, 100;
	add.s32 	%r1015, %r46, %r1014;
	mul.wide.u32 	%rd84, %r1015, 4;
	add.s64 	%rd86, %rd49, %rd84;
	st.shared.u32 	[%rd86], %r753;
	add.s32 	%r1016, %r1014, 100;
	add.s32 	%r1017, %r46, %r1016;
	mul.wide.u32 	%rd87, %r1017, 4;
	add.s64 	%rd88, %rd49, %rd87;
	st.shared.u32 	[%rd88], %r756;
	ld.shared.u32 	%r1018, [%rd83];
	and.b32  	%r1019, %r1018, 252645135;
	add.s32 	%r1020, %r1019, 2021161080;
	xor.b32  	%r768, %r1020, -2139062144;
	shr.u32 	%r1021, %r1018, 4;
	and.b32  	%r1022, %r1021, 252645135;
	add.s32 	%r1023, %r1022, 2021161080;
	xor.b32  	%r762, %r1023, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r759, %r760}, {%r11}, {%r762}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r765, %r766}, {%r15}, {%r768}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r771, %r772}, {%r11}, {%r768}, {%r565, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r777, %r778}, {%r15}, {%r762}, {%r771, %r772};
	// end inline asm
	ld.shared.u32 	%r1024, [%rd83+4];
	and.b32  	%r1025, %r1024, 252645135;
	add.s32 	%r1026, %r1025, 2021161080;
	xor.b32  	%r792, %r1026, -2139062144;
	shr.u32 	%r1027, %r1024, 4;
	and.b32  	%r1028, %r1027, 252645135;
	add.s32 	%r1029, %r1028, 2021161080;
	xor.b32  	%r786, %r1029, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r783, %r784}, {%r19}, {%r786}, {%r759, %r760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r789, %r790}, {%r23}, {%r792}, {%r765, %r766};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r795, %r796}, {%r19}, {%r792}, {%r777, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r801, %r802}, {%r23}, {%r786}, {%r795, %r796};
	// end inline asm
	ld.shared.u32 	%r1030, [%rd83+8];
	and.b32  	%r1031, %r1030, 252645135;
	add.s32 	%r1032, %r1031, 2021161080;
	xor.b32  	%r816, %r1032, -2139062144;
	shr.u32 	%r1033, %r1030, 4;
	and.b32  	%r1034, %r1033, 252645135;
	add.s32 	%r1035, %r1034, 2021161080;
	xor.b32  	%r810, %r1035, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r807, %r808}, {%r27}, {%r810}, {%r783, %r784};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r813, %r814}, {%r31}, {%r816}, {%r789, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r819, %r820}, {%r27}, {%r816}, {%r801, %r802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r825, %r826}, {%r31}, {%r810}, {%r819, %r820};
	// end inline asm
	ld.shared.u32 	%r1036, [%rd83+12];
	and.b32  	%r1037, %r1036, 252645135;
	add.s32 	%r1038, %r1037, 2021161080;
	xor.b32  	%r840, %r1038, -2139062144;
	shr.u32 	%r1039, %r1036, 4;
	and.b32  	%r1040, %r1039, 252645135;
	add.s32 	%r1041, %r1040, 2021161080;
	xor.b32  	%r834, %r1041, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r831, %r832}, {%r35}, {%r834}, {%r807, %r808};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r837, %r838}, {%r39}, {%r840}, {%r813, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r843, %r844}, {%r35}, {%r840}, {%r825, %r826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r849, %r850}, {%r39}, {%r834}, {%r843, %r844};
	// end inline asm
	ld.shared.u32 	%r1042, [%rd83+16];
	and.b32  	%r1043, %r1042, 252645135;
	add.s32 	%r1044, %r1043, 2021161080;
	xor.b32  	%r864, %r1044, -2139062144;
	shr.u32 	%r1045, %r1042, 4;
	and.b32  	%r1046, %r1045, 252645135;
	add.s32 	%r1047, %r1046, 2021161080;
	xor.b32  	%r858, %r1047, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r855, %r856}, {%r12}, {%r858}, {%r831, %r832};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r861, %r862}, {%r16}, {%r864}, {%r837, %r838};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r867, %r868}, {%r12}, {%r864}, {%r849, %r850};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r873, %r874}, {%r16}, {%r858}, {%r867, %r868};
	// end inline asm
	ld.shared.u32 	%r1048, [%rd83+20];
	and.b32  	%r1049, %r1048, 252645135;
	add.s32 	%r1050, %r1049, 2021161080;
	xor.b32  	%r888, %r1050, -2139062144;
	shr.u32 	%r1051, %r1048, 4;
	and.b32  	%r1052, %r1051, 252645135;
	add.s32 	%r1053, %r1052, 2021161080;
	xor.b32  	%r882, %r1053, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r879, %r880}, {%r20}, {%r882}, {%r855, %r856};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r885, %r886}, {%r24}, {%r888}, {%r861, %r862};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r891, %r892}, {%r20}, {%r888}, {%r873, %r874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r897, %r898}, {%r24}, {%r882}, {%r891, %r892};
	// end inline asm
	ld.shared.u32 	%r1054, [%rd83+24];
	and.b32  	%r1055, %r1054, 252645135;
	add.s32 	%r1056, %r1055, 2021161080;
	xor.b32  	%r912, %r1056, -2139062144;
	shr.u32 	%r1057, %r1054, 4;
	and.b32  	%r1058, %r1057, 252645135;
	add.s32 	%r1059, %r1058, 2021161080;
	xor.b32  	%r906, %r1059, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r903, %r904}, {%r28}, {%r906}, {%r879, %r880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r909, %r910}, {%r32}, {%r912}, {%r885, %r886};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r915, %r916}, {%r28}, {%r912}, {%r897, %r898};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r921, %r922}, {%r32}, {%r906}, {%r915, %r916};
	// end inline asm
	ld.shared.u32 	%r1060, [%rd83+28];
	and.b32  	%r1061, %r1060, 252645135;
	add.s32 	%r1062, %r1061, 2021161080;
	xor.b32  	%r936, %r1062, -2139062144;
	shr.u32 	%r1063, %r1060, 4;
	and.b32  	%r1064, %r1063, 252645135;
	add.s32 	%r1065, %r1064, 2021161080;
	xor.b32  	%r930, %r1065, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r927, %r928}, {%r36}, {%r930}, {%r903, %r904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r933, %r934}, {%r40}, {%r936}, {%r909, %r910};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r939, %r940}, {%r36}, {%r936}, {%r921, %r922};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r945, %r946}, {%r40}, {%r930}, {%r939, %r940};
	// end inline asm
	sub.s32 	%r1066, %r927, %r933;
	add.s32 	%r1067, %r1066, 4;
	shr.s32 	%r953, %r1067, 3;
	add.s32 	%r1068, %r945, 4;
	shr.s32 	%r952, %r1068, 3;
	sub.s32 	%r1069, %r928, %r934;
	add.s32 	%r1070, %r1069, 4;
	shr.s32 	%r956, %r1070, 3;
	add.s32 	%r1071, %r946, 4;
	shr.s32 	%r955, %r1071, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r951, %r952, %r953;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r954, %r955, %r956;
	// end inline asm
	add.s32 	%r1072, %r47, %r1014;
	mul.wide.u32 	%rd89, %r1072, 4;
	add.s64 	%rd90, %rd49, %rd89;
	st.shared.u32 	[%rd90], %r951;
	add.s32 	%r1073, %r47, %r1016;
	mul.wide.u32 	%rd91, %r1073, 4;
	add.s64 	%rd92, %rd49, %rd91;
	st.shared.u32 	[%rd92], %r954;
	add.s32 	%r1279, %r1279, 8;
	setp.ne.s32 	%p27, %r1279, 32;
	@%p27 bra 	$L__BB0_15;
// %bb.16:                              // %L7973
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1092, [%rd10];
	ld.shared.u32 	%r1093, [%rd11+12800];
	ld.shared.u32 	%r1094, [%rd11+25600];
	ld.shared.u32 	%r1095, [%rd11+38400];
	ld.shared.u32 	%r1096, [%rd12];
	ld.shared.u32 	%r1097, [%rd13+12800];
	ld.shared.u32 	%r1098, [%rd13+25600];
	ld.shared.u32 	%r1099, [%rd13+38400];
	ld.shared.u32 	%r1100, [%rd14];
	ld.shared.u32 	%r1101, [%rd15+12800];
	ld.shared.u32 	%r1102, [%rd15+25600];
	ld.shared.u32 	%r1103, [%rd15+38400];
	ld.shared.u32 	%r1104, [%rd16];
	ld.shared.u32 	%r1105, [%rd9+12800];
	ld.shared.u32 	%r1106, [%rd9+25600];
	ld.shared.u32 	%r1107, [%rd9+38400];
	cvt.s32.s16 	%r1108, %r1092;
	shr.s32 	%r1109, %r1092, 16;
	cvt.s32.s16 	%r1110, %r1093;
	shr.s32 	%r1111, %r1093, 16;
	cvt.s32.s16 	%r1112, %r1094;
	shr.s32 	%r1113, %r1094, 16;
	cvt.s32.s16 	%r1114, %r1095;
	shr.s32 	%r1115, %r1095, 16;
	cvt.s32.s16 	%r1116, %r1096;
	shr.s32 	%r1117, %r1096, 16;
	cvt.s32.s16 	%r1118, %r1097;
	shr.s32 	%r1119, %r1097, 16;
	cvt.s32.s16 	%r1120, %r1098;
	shr.s32 	%r1121, %r1098, 16;
	cvt.s32.s16 	%r1122, %r1099;
	shr.s32 	%r1123, %r1099, 16;
	cvt.s32.s16 	%r1124, %r1100;
	shr.s32 	%r1125, %r1100, 16;
	cvt.s32.s16 	%r1126, %r1101;
	shr.s32 	%r1127, %r1101, 16;
	cvt.s32.s16 	%r1128, %r1102;
	shr.s32 	%r1129, %r1102, 16;
	cvt.s32.s16 	%r1130, %r1103;
	shr.s32 	%r1131, %r1103, 16;
	cvt.s32.s16 	%r1132, %r1104;
	shr.s32 	%r1133, %r1104, 16;
	cvt.s32.s16 	%r1134, %r1105;
	shr.s32 	%r1135, %r1105, 16;
	cvt.s32.s16 	%r1136, %r1106;
	shr.s32 	%r1137, %r1106, 16;
	cvt.s32.s16 	%r1138, %r1107;
	shr.s32 	%r1139, %r1107, 16;
	add.s32 	%r1140, %r1108, %r48;
	add.s32 	%r1141, %r1140, %r1110;
	add.s32 	%r1142, %r1141, %r1112;
	add.s32 	%r1143, %r1142, %r1114;
	shr.s32 	%r1144, %r1143, %r49;
	add.s32 	%r1145, %r1109, %r48;
	add.s32 	%r1146, %r1145, %r1111;
	add.s32 	%r1147, %r1146, %r1113;
	add.s32 	%r1148, %r1147, %r1115;
	shr.s32 	%r1149, %r1148, %r49;
	add.s32 	%r1150, %r1116, %r48;
	add.s32 	%r1151, %r1150, %r1118;
	add.s32 	%r1152, %r1151, %r1120;
	add.s32 	%r1153, %r1152, %r1122;
	shr.s32 	%r1154, %r1153, %r49;
	add.s32 	%r1155, %r1117, %r48;
	add.s32 	%r1156, %r1155, %r1119;
	add.s32 	%r1157, %r1156, %r1121;
	add.s32 	%r1158, %r1157, %r1123;
	shr.s32 	%r1159, %r1158, %r49;
	add.s32 	%r1160, %r1124, %r48;
	add.s32 	%r1161, %r1160, %r1126;
	add.s32 	%r1162, %r1161, %r1128;
	add.s32 	%r1163, %r1162, %r1130;
	shr.s32 	%r1164, %r1163, %r49;
	add.s32 	%r1165, %r1125, %r48;
	add.s32 	%r1166, %r1165, %r1127;
	add.s32 	%r1167, %r1166, %r1129;
	add.s32 	%r1168, %r1167, %r1131;
	shr.s32 	%r1169, %r1168, %r49;
	add.s32 	%r1170, %r1132, %r48;
	add.s32 	%r1171, %r1170, %r1134;
	add.s32 	%r1172, %r1171, %r1136;
	add.s32 	%r1173, %r1172, %r1138;
	shr.s32 	%r1174, %r1173, %r49;
	add.s32 	%r1175, %r1133, %r48;
	add.s32 	%r1176, %r1175, %r1135;
	add.s32 	%r1177, %r1176, %r1137;
	add.s32 	%r1178, %r1177, %r1139;
	shr.s32 	%r1179, %r1178, %r49;
	max.s32 	%r1180, %r1144, -7;
	min.s32 	%r1079, %r1180, 7;
	setp.ne.s32 	%p28, %r1079, %r1144;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1181, %r1149, -7;
	min.s32 	%r1086, %r1181, 7;
	setp.ne.s32 	%p30, %r1086, %r1149;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1182, %r1154, -7;
	min.s32 	%r1078, %r1182, 7;
	setp.ne.s32 	%p32, %r1078, %r1154;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1183, %r1159, -7;
	min.s32 	%r1085, %r1183, 7;
	setp.ne.s32 	%p34, %r1085, %r1159;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1184, %r1164, -7;
	min.s32 	%r1076, %r1184, 7;
	setp.ne.s32 	%p36, %r1076, %r1164;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1185, %r1169, -7;
	min.s32 	%r1083, %r1185, 7;
	setp.ne.s32 	%p38, %r1083, %r1169;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1186, %r1174, -7;
	min.s32 	%r1075, %r1186, 7;
	setp.ne.s32 	%p40, %r1075, %r1174;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1187, %r1179, -7;
	min.s32 	%r1082, %r1187, 7;
	setp.ne.s32 	%p42, %r1082, %r1179;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1074, %r1075, %r1076, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1077, %r1078, %r1079, %r1074;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1081, %r1082, %r1083, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1084, %r1085, %r1086, %r1081;
	// end inline asm
	shl.b32 	%r1091, %r1084, 4;
	mov.u32 	%r1089, 252645135;
	// begin inline asm
	lop3.b32 %r1198, %r1089, %r1077, %r1091, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1272, 0;
	selp.b32 	%r1277, %r1198, %r1277, %p43;
	selp.b32 	%r1278, %r1198, %r1278, %p43;
	setp.eq.s32 	%p44, %r1272, 32;
	selp.b32 	%r1273, %r1198, %r1273, %p44;
	selp.b32 	%r1274, %r1198, %r1274, %p44;
	setp.eq.s32 	%p45, %r1272, 64;
	selp.b32 	%r1275, %r1198, %r1275, %p45;
	selp.b32 	%r1276, %r1198, %r1276, %p45;
	add.s32 	%r71, %r1272, 32;
	setp.ne.s32 	%p46, %r1272, 96;
	mov.u32 	%r1272, %r71;
	@%p46 bra 	$L__BB0_13;
// %bb.17:                              // %L10379.L10385_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p47, %r50, 0;
	// begin inline asm
	prmt.b32 %r1188, %r1277, %r1273, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1192, %r1278, %r1274, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1196, %r1275, %r1198, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1200, %r1276, %r1198, %r357;
	// end inline asm
	selp.b32 	%r1236, %r1192, %r1188, %p47;
	shfl.sync.bfly.b32	%r1237, %r1236, 1, 31, -1;
	selp.b32 	%r1205, %r1188, %r1237, %p47;
	selp.b32 	%r1206, %r1237, %r1192, %p47;
	selp.b32 	%r1238, %r1200, %r1196, %p47;
	shfl.sync.bfly.b32	%r1239, %r1238, 1, 31, -1;
	selp.b32 	%r1213, %r1196, %r1239, %p47;
	selp.b32 	%r1214, %r1239, %r1200, %p47;
	// begin inline asm
	prmt.b32 %r1204, %r1205, %r1206, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1208, %r1205, %r1206, %r357;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1212, %r1213, %r1214, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1216, %r1213, %r1214, %r357;
	// end inline asm
	selp.b32 	%r1240, %r1212, %r1204, %p16;
	shfl.sync.bfly.b32	%r1241, %r1240, 2, 31, -1;
	selp.b32 	%r1221, %r1204, %r1241, %p16;
	selp.b32 	%r1222, %r1241, %r1212, %p16;
	selp.b32 	%r1242, %r1216, %r1208, %p16;
	shfl.sync.bfly.b32	%r1243, %r1242, 2, 31, -1;
	selp.b32 	%r1229, %r1208, %r1243, %p16;
	selp.b32 	%r1230, %r1243, %r1216, %p16;
	// begin inline asm
	prmt.b32 %r1220, %r1221, %r1222, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1224, %r1221, %r1222, %r229;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1228, %r1229, %r1230, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1232, %r1229, %r1230, %r229;
	// end inline asm
	selp.b32 	%r1244, %r1228, %r1220, %p17;
	shfl.sync.bfly.b32	%r1245, %r1244, 4, 31, -1;
	selp.b32 	%r1246, %r1220, %r1245, %p17;
	selp.b32 	%r1247, %r1245, %r1228, %p17;
	selp.b32 	%r1248, %r1232, %r1224, %p17;
	shfl.sync.bfly.b32	%r1249, %r1248, 4, 31, -1;
	selp.b32 	%r1250, %r1224, %r1249, %p17;
	selp.b32 	%r1251, %r1249, %r1232, %p17;
	selp.b32 	%r1252, %r1250, %r1246, %p47;
	shfl.sync.bfly.b32	%r1253, %r1252, 1, 31, -1;
	selp.b32 	%r1254, %r1246, %r1253, %p47;
	selp.b32 	%r1255, %r1253, %r1250, %p47;
	selp.b32 	%r1256, %r1251, %r1247, %p47;
	shfl.sync.bfly.b32	%r1257, %r1256, 1, 31, -1;
	selp.b32 	%r1258, %r1247, %r1257, %p47;
	selp.b32 	%r1259, %r1257, %r1251, %p47;
	and.b32  	%r1260, %r1271, 8064;
	or.b32  	%r1261, %r1260, %r51;
	or.b32  	%r1262, %r1261, %r5;
	or.b32  	%r1263, %r1262, %r52;
	or.b32  	%r1264, %r1263, %r53;
	cvt.u64.u32 	%rd93, %r1264;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1254, %r1258, %r1255, %r1259};
	add.s32 	%r72, %r1271, 128;
	setp.ne.s32 	%p50, %r1271, 32640;
	mov.u32 	%r1271, %r72;
	@%p50 bra 	$L__BB0_11;
$L__BB0_18:                             // %L10765
	selp.u32 	%r1265, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1265, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1266, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1266, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_20;
// %bb.19:                              // %L10795
	st.global.u32 	[%rd8], %r86;
$L__BB0_20:                             // %L10841
	mov.u32 	%r1268, 0;
	st.global.u32 	[%rd7], %r1268;
	ret;
$L__BB0_7:                              // %L149
	mov.u32 	%r1269, 2;
	st.global.u32 	[%rd7], %r1269;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1886;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1886;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_22:                             // %L365
	mov.u32 	%r99, 3;
	st.global.u32 	[%rd7], %r99;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r79;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
