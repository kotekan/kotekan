// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception880[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<56>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1353>;
	.reg .b64 	%rd<97>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r83, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r83, 16511;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r84, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r84, 67711;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r81, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r85, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r86, %r85, %r2;
	add.s32 	%r87, %r86, %r4;
	mul.wide.u32 	%rd22, %r87, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r88, 1;
	st.global.u32 	[%rd7], %r88;
	setp.gt.u32 	%p8, %r81, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r82, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r82, %r81;
	setp.gt.s32 	%p10, %r82, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r89, %r82, %r81;
	and.b32  	%r90, %r89, 127;
	setp.eq.s32 	%p12, %r90, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L241
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r5, %r1, 1;
	neg.s32 	%r91, %r5;
	and.b32  	%r92, %r91, 96;
	shr.u32 	%r6, %r2, 3;
	shl.b32 	%r93, %r3, 2;
	or.b32  	%r94, %r6, %r93;
	cvt.u16.u32 	%rs1, %r94;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 14;
	mul.lo.s16 	%rs5, %rs4, 96;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r95, %rs6;
	and.b32  	%r7, %r95, 255;
	shr.u32 	%r96, %r1, 1;
	cvt.u16.u32 	%rs7, %r96;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 13;
	mul.lo.s16 	%rs11, %rs10, 48;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r97, %rs12;
	and.b32  	%r8, %r97, 255;
	add.s32 	%r98, %r92, %r7;
	mad.lo.s32 	%r99, %r8, 192, %r98;
	mul.wide.u32 	%rd23, %r99, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r100, [%rd24];
	add.s32 	%r10, %r100, -4;
	setp.lt.u32 	%p13, %r10, 31;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L457
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r9, %r100, -3;
	or.b32  	%r102, %r2, %r3;
	setp.ne.s32 	%p1, %r102, 0;
	mul.wide.u32 	%rd27, %r1, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r1344, 0;
	@%p1 bra 	$L__BB0_12;
// %bb.11:                              // %L480
	st.global.u32 	[%rd8], %r1344;
$L__BB0_12:                             // %L526
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p15, %r5, 0;
	bar.sync 	0;
	selp.b32 	%r361, 0, 24576, %p15;
	shl.b32 	%r362, %r3, 6;
	shl.b32 	%r363, %r2, 4;
	and.b32  	%r364, %r363, 16;
	shl.b32 	%r365, %r2, 1;
	and.b32  	%r366, %r365, 12;
	and.b32  	%r367, %r362, 192;
	or.b32  	%r368, %r367, %r364;
	or.b32  	%r369, %r366, %r368;
	shr.u32 	%r11, %r2, 2;
	shr.u32 	%r370, %r3, 2;
	cvt.u16.u32 	%rs13, %r370;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	cvt.u16.u32 	%rs19, %r11;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r371, %rs27, 256;
	or.b32  	%r372, %r369, %r361;
	mad.lo.s32 	%r373, %r8, 49152, %r372;
	add.s32 	%r374, %r373, %r371;
	shl.b32 	%r375, %r374, 2;
	cvt.u64.u32 	%rd28, %r375;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r105, %r106, %r121, %r122}, [%rd29];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r376, %rs34, 256;
	add.s32 	%r377, %r373, %r376;
	shl.b32 	%r378, %r377, 2;
	cvt.u64.u32 	%rd30, %r378;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r113, %r114, %r129, %r130}, [%rd31];
	or.b32  	%r379, %r373, 33;
	add.s32 	%r380, %r379, %r371;
	mul.wide.u32 	%rd32, %r380, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r137, %r138, %r153, %r154}, [%rd33+-4];
	add.s32 	%r381, %r379, %r376;
	mul.wide.u32 	%rd34, %r381, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r145, %r146, %r161, %r162}, [%rd35+-4];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r382, %rs42, 256;
	add.s32 	%r383, %r373, %r382;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd36, %r384;
	add.s64 	%rd37, %rd1, %rd36;
	ld.global.v4.u32 	{%r169, %r170, %r185, %r186}, [%rd37];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r385, %rs49, 256;
	add.s32 	%r386, %r373, %r385;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd38, %r387;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.v4.u32 	{%r177, %r178, %r193, %r194}, [%rd39];
	add.s32 	%r388, %r379, %r382;
	mul.wide.u32 	%rd40, %r388, 4;
	add.s64 	%rd41, %rd1, %rd40;
	ld.global.v4.u32 	{%r201, %r202, %r217, %r218}, [%rd41+-4];
	add.s32 	%r389, %r379, %r385;
	mul.wide.u32 	%rd42, %r389, 4;
	add.s64 	%rd43, %rd1, %rd42;
	ld.global.v4.u32 	{%r209, %r210, %r225, %r226}, [%rd43+-4];
	mov.u32 	%r227, 21520;
	// begin inline asm
	prmt.b32 %r233, %r105, %r106, %r227;
	// end inline asm
	mov.u32 	%r231, 30258;
	// begin inline asm
	prmt.b32 %r234, %r105, %r106, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r113, %r114, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r113, %r114, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r249, %r121, %r122, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r121, %r122, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r257, %r129, %r130, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r129, %r130, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r265, %r137, %r138, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r137, %r138, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r145, %r146, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r145, %r146, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r153, %r154, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r153, %r154, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r161, %r162, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r161, %r162, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r169, %r170, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r169, %r170, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r177, %r178, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r177, %r178, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r313, %r185, %r186, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r185, %r186, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r321, %r193, %r194, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r193, %r194, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r329, %r201, %r202, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r201, %r202, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r337, %r209, %r210, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r209, %r210, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r345, %r217, %r218, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r217, %r218, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r353, %r225, %r226, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r354, %r225, %r226, %r231;
	// end inline asm
	mov.u32 	%r355, 25152;
	// begin inline asm
	prmt.b32 %r232, %r233, %r234, %r355;
	// end inline asm
	mov.u32 	%r359, 29521;
	// begin inline asm
	prmt.b32 %r236, %r233, %r234, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r241, %r242, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r241, %r242, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r248, %r249, %r250, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r249, %r250, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r256, %r257, %r258, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r257, %r258, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r264, %r265, %r266, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r265, %r266, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r273, %r274, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r273, %r274, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r281, %r282, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r281, %r282, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r289, %r290, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r289, %r290, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r297, %r298, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r297, %r298, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r305, %r306, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r305, %r306, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r312, %r313, %r314, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r313, %r314, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r320, %r321, %r322, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r321, %r322, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r328, %r329, %r330, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r329, %r330, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r336, %r337, %r338, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r337, %r338, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r344, %r345, %r346, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r345, %r346, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r352, %r353, %r354, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r356, %r353, %r354, %r359;
	// end inline asm
	and.b32  	%r12, %r2, 2;
	setp.eq.s32 	%p16, %r12, 0;
	selp.b32 	%r390, %r264, %r232, %p16;
	shfl.sync.bfly.b32	%r391, %r390, 2, 31, -1;
	selp.b32 	%r392, %r232, %r391, %p16;
	selp.b32 	%r393, %r391, %r264, %p16;
	selp.b32 	%r394, %r272, %r240, %p16;
	shfl.sync.bfly.b32	%r395, %r394, 2, 31, -1;
	selp.b32 	%r396, %r240, %r395, %p16;
	selp.b32 	%r397, %r395, %r272, %p16;
	selp.b32 	%r398, %r268, %r236, %p16;
	shfl.sync.bfly.b32	%r399, %r398, 2, 31, -1;
	selp.b32 	%r400, %r236, %r399, %p16;
	selp.b32 	%r401, %r399, %r268, %p16;
	selp.b32 	%r402, %r276, %r244, %p16;
	shfl.sync.bfly.b32	%r403, %r402, 2, 31, -1;
	selp.b32 	%r404, %r244, %r403, %p16;
	selp.b32 	%r405, %r403, %r276, %p16;
	selp.b32 	%r406, %r280, %r248, %p16;
	shfl.sync.bfly.b32	%r407, %r406, 2, 31, -1;
	selp.b32 	%r408, %r248, %r407, %p16;
	selp.b32 	%r409, %r407, %r280, %p16;
	selp.b32 	%r410, %r288, %r256, %p16;
	shfl.sync.bfly.b32	%r411, %r410, 2, 31, -1;
	selp.b32 	%r412, %r256, %r411, %p16;
	selp.b32 	%r413, %r411, %r288, %p16;
	selp.b32 	%r414, %r284, %r252, %p16;
	shfl.sync.bfly.b32	%r415, %r414, 2, 31, -1;
	selp.b32 	%r416, %r252, %r415, %p16;
	selp.b32 	%r417, %r415, %r284, %p16;
	selp.b32 	%r418, %r292, %r260, %p16;
	shfl.sync.bfly.b32	%r419, %r418, 2, 31, -1;
	selp.b32 	%r420, %r260, %r419, %p16;
	selp.b32 	%r421, %r419, %r292, %p16;
	selp.b32 	%r422, %r328, %r296, %p16;
	shfl.sync.bfly.b32	%r423, %r422, 2, 31, -1;
	selp.b32 	%r424, %r296, %r423, %p16;
	selp.b32 	%r425, %r423, %r328, %p16;
	selp.b32 	%r426, %r336, %r304, %p16;
	shfl.sync.bfly.b32	%r427, %r426, 2, 31, -1;
	selp.b32 	%r428, %r304, %r427, %p16;
	selp.b32 	%r429, %r427, %r336, %p16;
	selp.b32 	%r430, %r332, %r300, %p16;
	shfl.sync.bfly.b32	%r431, %r430, 2, 31, -1;
	selp.b32 	%r432, %r300, %r431, %p16;
	selp.b32 	%r433, %r431, %r332, %p16;
	selp.b32 	%r434, %r340, %r308, %p16;
	shfl.sync.bfly.b32	%r435, %r434, 2, 31, -1;
	selp.b32 	%r436, %r308, %r435, %p16;
	selp.b32 	%r437, %r435, %r340, %p16;
	selp.b32 	%r438, %r344, %r312, %p16;
	shfl.sync.bfly.b32	%r439, %r438, 2, 31, -1;
	selp.b32 	%r440, %r312, %r439, %p16;
	selp.b32 	%r441, %r439, %r344, %p16;
	selp.b32 	%r442, %r352, %r320, %p16;
	shfl.sync.bfly.b32	%r443, %r442, 2, 31, -1;
	selp.b32 	%r444, %r320, %r443, %p16;
	selp.b32 	%r445, %r443, %r352, %p16;
	selp.b32 	%r446, %r348, %r316, %p16;
	shfl.sync.bfly.b32	%r447, %r446, 2, 31, -1;
	selp.b32 	%r448, %r316, %r447, %p16;
	selp.b32 	%r449, %r447, %r348, %p16;
	selp.b32 	%r450, %r356, %r324, %p16;
	shfl.sync.bfly.b32	%r451, %r450, 2, 31, -1;
	selp.b32 	%r452, %r324, %r451, %p16;
	selp.b32 	%r453, %r451, %r356, %p16;
	and.b32  	%r13, %r2, 4;
	setp.eq.s32 	%p17, %r13, 0;
	selp.b32 	%r454, %r424, %r392, %p17;
	shfl.sync.bfly.b32	%r455, %r454, 4, 31, -1;
	selp.b32 	%r14, %r392, %r455, %p17;
	selp.b32 	%r15, %r455, %r424, %p17;
	selp.b32 	%r456, %r428, %r396, %p17;
	shfl.sync.bfly.b32	%r457, %r456, 4, 31, -1;
	selp.b32 	%r16, %r396, %r457, %p17;
	selp.b32 	%r17, %r457, %r428, %p17;
	selp.b32 	%r458, %r432, %r400, %p17;
	shfl.sync.bfly.b32	%r459, %r458, 4, 31, -1;
	selp.b32 	%r18, %r400, %r459, %p17;
	selp.b32 	%r19, %r459, %r432, %p17;
	selp.b32 	%r460, %r436, %r404, %p17;
	shfl.sync.bfly.b32	%r461, %r460, 4, 31, -1;
	selp.b32 	%r20, %r404, %r461, %p17;
	selp.b32 	%r21, %r461, %r436, %p17;
	selp.b32 	%r462, %r440, %r408, %p17;
	shfl.sync.bfly.b32	%r463, %r462, 4, 31, -1;
	selp.b32 	%r22, %r408, %r463, %p17;
	selp.b32 	%r23, %r463, %r440, %p17;
	selp.b32 	%r464, %r444, %r412, %p17;
	shfl.sync.bfly.b32	%r465, %r464, 4, 31, -1;
	selp.b32 	%r24, %r412, %r465, %p17;
	selp.b32 	%r25, %r465, %r444, %p17;
	selp.b32 	%r466, %r448, %r416, %p17;
	shfl.sync.bfly.b32	%r467, %r466, 4, 31, -1;
	selp.b32 	%r26, %r416, %r467, %p17;
	selp.b32 	%r27, %r467, %r448, %p17;
	selp.b32 	%r468, %r452, %r420, %p17;
	shfl.sync.bfly.b32	%r469, %r468, 4, 31, -1;
	selp.b32 	%r28, %r420, %r469, %p17;
	selp.b32 	%r29, %r469, %r452, %p17;
	selp.b32 	%r470, %r425, %r393, %p17;
	shfl.sync.bfly.b32	%r471, %r470, 4, 31, -1;
	selp.b32 	%r30, %r393, %r471, %p17;
	selp.b32 	%r31, %r471, %r425, %p17;
	selp.b32 	%r472, %r429, %r397, %p17;
	shfl.sync.bfly.b32	%r473, %r472, 4, 31, -1;
	selp.b32 	%r32, %r397, %r473, %p17;
	selp.b32 	%r33, %r473, %r429, %p17;
	selp.b32 	%r474, %r433, %r401, %p17;
	shfl.sync.bfly.b32	%r475, %r474, 4, 31, -1;
	selp.b32 	%r34, %r401, %r475, %p17;
	selp.b32 	%r35, %r475, %r433, %p17;
	selp.b32 	%r476, %r437, %r405, %p17;
	shfl.sync.bfly.b32	%r477, %r476, 4, 31, -1;
	selp.b32 	%r36, %r405, %r477, %p17;
	selp.b32 	%r37, %r477, %r437, %p17;
	selp.b32 	%r478, %r441, %r409, %p17;
	shfl.sync.bfly.b32	%r479, %r478, 4, 31, -1;
	selp.b32 	%r38, %r409, %r479, %p17;
	selp.b32 	%r39, %r479, %r441, %p17;
	selp.b32 	%r480, %r445, %r413, %p17;
	shfl.sync.bfly.b32	%r481, %r480, 4, 31, -1;
	selp.b32 	%r40, %r413, %r481, %p17;
	selp.b32 	%r41, %r481, %r445, %p17;
	selp.b32 	%r482, %r449, %r417, %p17;
	shfl.sync.bfly.b32	%r483, %r482, 4, 31, -1;
	selp.b32 	%r42, %r417, %r483, %p17;
	selp.b32 	%r43, %r483, %r449, %p17;
	selp.b32 	%r484, %r453, %r421, %p17;
	shfl.sync.bfly.b32	%r485, %r484, 4, 31, -1;
	selp.b32 	%r44, %r421, %r485, %p17;
	selp.b32 	%r45, %r485, %r453, %p17;
	shl.b32 	%r486, %r2, 2;
	and.b32  	%r487, %r486, 28;
	and.b32  	%r488, %r4, 96;
	or.b32  	%r46, %r488, %r487;
	shl.b32 	%r489, %r1, 7;
	and.b32  	%r490, %r489, 128;
	and.b32  	%r47, %r3, 12;
	or.b32  	%r491, %r46, %r490;
	shl.b32 	%r492, %r8, 8;
	or.b32  	%r48, %r491, %r492;
	shl.b32 	%r493, %r2, 3;
	and.b32  	%r494, %r493, 24;
	or.b32  	%r49, %r488, %r494;
	and.b32  	%r50, %r365, 6;
	and.b32  	%r495, %r3, 3;
	mul.lo.s32 	%r496, %r495, 3200;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r497, %rs54;
	and.b32  	%r498, %r497, 255;
	or.b32  	%r51, %r496, %r498;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r499, %rs60;
	and.b32  	%r500, %r499, 255;
	or.b32  	%r52, %r496, %r500;
	and.b32  	%r501, %r2, 7;
	shl.b32 	%r503, %r88, %r10;
	setp.gt.u32 	%p18, %r10, 31;
	selp.b32 	%r53, 0, %r503, %p18;
	min.u32 	%r54, %r9, 31;
	and.b32  	%r55, %r2, 1;
	shl.b32 	%r504, %r1, 11;
	and.b32  	%r505, %r504, 2048;
	shl.b32 	%r506, %r2, 5;
	and.b32  	%r507, %r506, 64;
	shl.b32 	%r508, %r8, 12;
	or.b32  	%r509, %r508, %r505;
	mad.lo.s32 	%r510, %r7, 196608, %r509;
	and.b32  	%r511, %r493, 32;
	or.b32  	%r512, %r511, %r507;
	or.b32  	%r56, %r512, %r364;
	mul.lo.s32 	%r513, %r501, 100;
	add.s32 	%r514, %r513, %r7;
	mul.wide.u32 	%rd44, %r514, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd46, %rd45, 16512;
	add.s64 	%rd9, %rd46, %rd44;
	cvt.u64.u32 	%rd47, %r513;
	cvt.u64.u32 	%rd48, %r7;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd10, %rd46, %rd50;
	add.s32 	%r515, %r513, 800;
	add.s32 	%r516, %r515, %r7;
	mul.wide.u32 	%rd51, %r516, 4;
	add.s64 	%rd11, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r515;
	add.s64 	%rd53, %rd48, %rd52;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd46, %rd54;
	add.s32 	%r517, %r513, 1600;
	add.s32 	%r518, %r517, %r7;
	mul.wide.u32 	%rd55, %r518, 4;
	add.s64 	%rd13, %rd46, %rd55;
	cvt.u64.u32 	%rd56, %r517;
	add.s64 	%rd57, %rd48, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd14, %rd46, %rd58;
	or.b32  	%r519, %r2, 24;
	mul.lo.s32 	%r520, %r519, 100;
	add.s32 	%r521, %r520, %r7;
	mul.wide.u32 	%rd59, %r521, 4;
	add.s64 	%rd15, %rd46, %rd59;
	cvt.u64.u32 	%rd60, %r520;
	add.s64 	%rd61, %rd48, %rd60;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd16, %rd46, %rd62;
	shl.b32 	%r57, %r510, 2;
	mov.pred 	%p55, 0;
$L__BB0_13:                             // %L2574
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_15 Depth 2
                                        //       Child Loop BB0_17 Depth 3
	add.s32 	%r522, %r1344, %r81;
	setp.ge.s32 	%p19, %r522, %r82;
	@%p19 bra 	$L__BB0_20;
// %bb.14:                              // %L2582.preheader
                                        //   in Loop: Header=BB0_13 Depth=1
	or.b32  	%r524, %r1344, %r6;
	or.b32  	%r59, %r524, %r47;
	or.b32  	%r60, %r59, 16;
	mov.u32 	%r1345, 0;
	mov.u32 	%r1346, %r1345;
	mov.u32 	%r1347, %r1345;
	mov.u32 	%r1348, %r1345;
	mov.u32 	%r1349, %r1345;
	mov.u32 	%r1350, %r1345;
	mov.u32 	%r1351, %r1345;
$L__BB0_15:                             // %L2582
                                        //   Parent Loop BB0_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_17 Depth 3
	setp.lt.u32 	%p20, %r3, 16;
	@%p20 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_16;
$L__BB0_23:                             // %pass1213
                                        //   in Loop: Header=BB0_15 Depth=2
	add.s32 	%r525, %r1345, %r59;
	and.b32  	%r526, %r525, 32751;
	add.s32 	%r527, %r526, %r81;
	mad.lo.s32 	%r528, %r527, 12288, %r48;
	mul.hi.s32 	%r529, %r528, 715827883;
	shr.u32 	%r530, %r529, 31;
	shr.s32 	%r531, %r529, 26;
	add.s32 	%r532, %r531, %r530;
	setp.lt.s32 	%p21, %r528, 0;
	mul.lo.s32 	%r533, %r532, 402653184;
	setp.ne.s32 	%p22, %r533, %r528;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r534, -1, 0, %p23;
	add.s32 	%r535, %r532, %r534;
	or.b32  	%r536, %r528, 1;
	mad.lo.s32 	%r537, %r535, -402653184, %r536;
	mul.wide.s32 	%rd63, %r537, 4;
	add.s64 	%rd64, %rd2, %rd63;
	ld.global.v4.u32 	{%r538, %r539, %r540, %r541}, [%rd64+-4];
	add.s32 	%r542, %r1345, %r60;
	and.b32  	%r543, %r542, 32767;
	add.s32 	%r544, %r543, %r81;
	mad.lo.s32 	%r545, %r544, 12288, %r48;
	mul.hi.s32 	%r546, %r545, 715827883;
	shr.u32 	%r547, %r546, 31;
	shr.s32 	%r548, %r546, 26;
	add.s32 	%r549, %r548, %r547;
	setp.lt.s32 	%p24, %r545, 0;
	mul.lo.s32 	%r550, %r549, 402653184;
	setp.ne.s32 	%p25, %r550, %r545;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r551, -1, 0, %p26;
	add.s32 	%r552, %r549, %r551;
	or.b32  	%r553, %r545, 1;
	mad.lo.s32 	%r554, %r552, -402653184, %r553;
	mul.wide.s32 	%rd65, %r554, 4;
	add.s64 	%rd66, %rd2, %rd65;
	ld.global.v4.u32 	{%r555, %r556, %r557, %r558}, [%rd66+-4];
	and.b32  	%r559, %r525, 15;
	mul.lo.s32 	%r560, %r559, 129;
	add.s32 	%r561, %r46, %r560;
	mul.wide.u32 	%rd67, %r561, 4;
	add.s64 	%rd69, %rd45, %rd67;
	st.shared.u32 	[%rd69], %r538;
	cvt.u64.u32 	%rd70, %r560;
	cvt.u64.u32 	%rd71, %r46;
	add.s64 	%rd72, %rd71, %rd70;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd74, %rd45, %rd73;
	st.shared.u32 	[%rd74+4], %r539;
	st.shared.u32 	[%rd74+8], %r540;
	st.shared.u32 	[%rd74+12], %r541;
	and.b32  	%r562, %r542, 31;
	mul.lo.s32 	%r563, %r562, 129;
	add.s32 	%r564, %r46, %r563;
	mul.wide.u32 	%rd75, %r564, 4;
	add.s64 	%rd76, %rd45, %rd75;
	st.shared.u32 	[%rd76], %r555;
	cvt.u64.u32 	%rd77, %r563;
	add.s64 	%rd78, %rd71, %rd77;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd45, %rd79;
	st.shared.u32 	[%rd80+4], %r556;
	st.shared.u32 	[%rd80+8], %r557;
	st.shared.u32 	[%rd80+12], %r558;
$L__BB0_16:                             // %L4294
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	add.s32 	%r68, %r1345, %r1344;
	mov.u32 	%r578, 0;
	mov.u32 	%r1352, %r578;
$L__BB0_17:                             // %L4296
                                        //   Parent Loop BB0_13 Depth=1
                                        //     Parent Loop BB0_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r1090, %r1352, %r11;
	add.s32 	%r1091, %r68, %r1090;
	shr.s32 	%r1092, %r1091, 31;
	shr.u32 	%r1093, %r1092, 27;
	add.s32 	%r1094, %r1091, %r1093;
	and.b32  	%r1095, %r1094, -32;
	sub.s32 	%r1096, %r1091, %r1095;
	mad.lo.s32 	%r1097, %r1096, 129, %r49;
	mul.wide.s32 	%rd81, %r1097, 4;
	add.s64 	%rd83, %rd45, %rd81;
	ld.shared.u32 	%r567, [%rd83];
	mov.u32 	%r568, 134744072;
	mov.u32 	%r569, 252645135;
	// begin inline asm
	lop3.b32 %r566, %r567, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1098, %r566, 2021161080;
	xor.b32  	%r577, %r1098, -2139062144;
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r570, %r571, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1099, %r570, 2021161080;
	xor.b32  	%r583, %r1099, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r14}, {%r577}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r580, %r581}, {%r18}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r586, %r587}, {%r14}, {%r583}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r18}, {%r577}, {%r586, %r587};
	// end inline asm
	ld.shared.u32 	%r599, [%rd83+4];
	// begin inline asm
	lop3.b32 %r598, %r599, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1100, %r598, 2021161080;
	xor.b32  	%r609, %r1100, -2139062144;
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r602, %r603, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1101, %r602, 2021161080;
	xor.b32  	%r615, %r1101, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r22}, {%r609}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r612, %r613}, {%r26}, {%r615}, {%r580, %r581};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r618, %r619}, {%r22}, {%r615}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r26}, {%r609}, {%r618, %r619};
	// end inline asm
	ld.shared.u32 	%r631, [%rd83+8];
	// begin inline asm
	lop3.b32 %r630, %r631, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1102, %r630, 2021161080;
	xor.b32  	%r641, %r1102, -2139062144;
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r634, %r635, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1103, %r634, 2021161080;
	xor.b32  	%r647, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r30}, {%r641}, {%r606, %r607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r644, %r645}, {%r34}, {%r647}, {%r612, %r613};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r650, %r651}, {%r30}, {%r647}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r34}, {%r641}, {%r650, %r651};
	// end inline asm
	ld.shared.u32 	%r663, [%rd83+12];
	// begin inline asm
	lop3.b32 %r662, %r663, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1104, %r662, 2021161080;
	xor.b32  	%r673, %r1104, -2139062144;
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r666, %r667, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1105, %r666, 2021161080;
	xor.b32  	%r679, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r38}, {%r673}, {%r638, %r639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r676, %r677}, {%r42}, {%r679}, {%r644, %r645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r682, %r683}, {%r38}, {%r679}, {%r656, %r657};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r688, %r689}, {%r42}, {%r673}, {%r682, %r683};
	// end inline asm
	ld.shared.u32 	%r695, [%rd83+16];
	// begin inline asm
	lop3.b32 %r694, %r695, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1106, %r694, 2021161080;
	xor.b32  	%r705, %r1106, -2139062144;
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r698, %r699, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1107, %r698, 2021161080;
	xor.b32  	%r711, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r702, %r703}, {%r15}, {%r705}, {%r670, %r671};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r708, %r709}, {%r19}, {%r711}, {%r676, %r677};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r714, %r715}, {%r15}, {%r711}, {%r688, %r689};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r720, %r721}, {%r19}, {%r705}, {%r714, %r715};
	// end inline asm
	ld.shared.u32 	%r727, [%rd83+20];
	// begin inline asm
	lop3.b32 %r726, %r727, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1108, %r726, 2021161080;
	xor.b32  	%r737, %r1108, -2139062144;
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r730, %r731, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1109, %r730, 2021161080;
	xor.b32  	%r743, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r734, %r735}, {%r23}, {%r737}, {%r702, %r703};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r740, %r741}, {%r27}, {%r743}, {%r708, %r709};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r746, %r747}, {%r23}, {%r743}, {%r720, %r721};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r752, %r753}, {%r27}, {%r737}, {%r746, %r747};
	// end inline asm
	ld.shared.u32 	%r759, [%rd83+24];
	// begin inline asm
	lop3.b32 %r758, %r759, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1110, %r758, 2021161080;
	xor.b32  	%r769, %r1110, -2139062144;
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r762, %r763, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1111, %r762, 2021161080;
	xor.b32  	%r775, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r766, %r767}, {%r31}, {%r769}, {%r734, %r735};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r772, %r773}, {%r35}, {%r775}, {%r740, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r778, %r779}, {%r31}, {%r775}, {%r752, %r753};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r784, %r785}, {%r35}, {%r769}, {%r778, %r779};
	// end inline asm
	ld.shared.u32 	%r791, [%rd83+28];
	// begin inline asm
	lop3.b32 %r790, %r791, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1112, %r790, 2021161080;
	xor.b32  	%r801, %r1112, -2139062144;
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r794, %r795, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1113, %r794, 2021161080;
	xor.b32  	%r807, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r798, %r799}, {%r39}, {%r801}, {%r766, %r767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r804, %r805}, {%r43}, {%r807}, {%r772, %r773};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r810, %r811}, {%r39}, {%r807}, {%r784, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r816, %r817}, {%r43}, {%r801}, {%r810, %r811};
	// end inline asm
	sub.s32 	%r1114, %r798, %r804;
	add.s32 	%r1115, %r1114, 4;
	shr.s32 	%r824, %r1115, 3;
	add.s32 	%r1116, %r816, 4;
	shr.s32 	%r823, %r1116, 3;
	sub.s32 	%r1117, %r799, %r805;
	add.s32 	%r1118, %r1117, 4;
	shr.s32 	%r827, %r1118, 3;
	add.s32 	%r1119, %r817, 4;
	shr.s32 	%r826, %r1119, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r822, %r823, %r824;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r825, %r826, %r827;
	// end inline asm
	or.b32  	%r1120, %r50, %r1352;
	mul.lo.s32 	%r1121, %r1120, 100;
	add.s32 	%r1122, %r51, %r1121;
	mul.wide.u32 	%rd84, %r1122, 4;
	add.s64 	%rd86, %rd46, %rd84;
	st.shared.u32 	[%rd86], %r822;
	add.s32 	%r1123, %r1121, 100;
	add.s32 	%r1124, %r51, %r1123;
	mul.wide.u32 	%rd87, %r1124, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r825;
	ld.shared.u32 	%r829, [%rd83];
	// begin inline asm
	lop3.b32 %r828, %r829, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1125, %r828, 2021161080;
	xor.b32  	%r839, %r1125, -2139062144;
	shr.u32 	%r833, %r829, 4;
	// begin inline asm
	lop3.b32 %r832, %r833, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1126, %r832, 2021161080;
	xor.b32  	%r845, %r1126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r836, %r837}, {%r16}, {%r839}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r842, %r843}, {%r20}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r848, %r849}, {%r16}, {%r845}, {%r578, %r578};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r854, %r855}, {%r20}, {%r839}, {%r848, %r849};
	// end inline asm
	ld.shared.u32 	%r861, [%rd83+4];
	// begin inline asm
	lop3.b32 %r860, %r861, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1127, %r860, 2021161080;
	xor.b32  	%r871, %r1127, -2139062144;
	shr.u32 	%r865, %r861, 4;
	// begin inline asm
	lop3.b32 %r864, %r865, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1128, %r864, 2021161080;
	xor.b32  	%r877, %r1128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r868, %r869}, {%r24}, {%r871}, {%r836, %r837};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r874, %r875}, {%r28}, {%r877}, {%r842, %r843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r880, %r881}, {%r24}, {%r877}, {%r854, %r855};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r886, %r887}, {%r28}, {%r871}, {%r880, %r881};
	// end inline asm
	ld.shared.u32 	%r893, [%rd83+8];
	// begin inline asm
	lop3.b32 %r892, %r893, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1129, %r892, 2021161080;
	xor.b32  	%r903, %r1129, -2139062144;
	shr.u32 	%r897, %r893, 4;
	// begin inline asm
	lop3.b32 %r896, %r897, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1130, %r896, 2021161080;
	xor.b32  	%r909, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r900, %r901}, {%r32}, {%r903}, {%r868, %r869};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r906, %r907}, {%r36}, {%r909}, {%r874, %r875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r912, %r913}, {%r32}, {%r909}, {%r886, %r887};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r918, %r919}, {%r36}, {%r903}, {%r912, %r913};
	// end inline asm
	ld.shared.u32 	%r925, [%rd83+12];
	// begin inline asm
	lop3.b32 %r924, %r925, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1131, %r924, 2021161080;
	xor.b32  	%r935, %r1131, -2139062144;
	shr.u32 	%r929, %r925, 4;
	// begin inline asm
	lop3.b32 %r928, %r929, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1132, %r928, 2021161080;
	xor.b32  	%r941, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r932, %r933}, {%r40}, {%r935}, {%r900, %r901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r938, %r939}, {%r44}, {%r941}, {%r906, %r907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r944, %r945}, {%r40}, {%r941}, {%r918, %r919};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r950, %r951}, {%r44}, {%r935}, {%r944, %r945};
	// end inline asm
	ld.shared.u32 	%r957, [%rd83+16];
	// begin inline asm
	lop3.b32 %r956, %r957, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1133, %r956, 2021161080;
	xor.b32  	%r967, %r1133, -2139062144;
	shr.u32 	%r961, %r957, 4;
	// begin inline asm
	lop3.b32 %r960, %r961, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1134, %r960, 2021161080;
	xor.b32  	%r973, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r964, %r965}, {%r17}, {%r967}, {%r932, %r933};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r970, %r971}, {%r21}, {%r973}, {%r938, %r939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r976, %r977}, {%r17}, {%r973}, {%r950, %r951};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r982, %r983}, {%r21}, {%r967}, {%r976, %r977};
	// end inline asm
	ld.shared.u32 	%r989, [%rd83+20];
	// begin inline asm
	lop3.b32 %r988, %r989, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1135, %r988, 2021161080;
	xor.b32  	%r999, %r1135, -2139062144;
	shr.u32 	%r993, %r989, 4;
	// begin inline asm
	lop3.b32 %r992, %r993, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1136, %r992, 2021161080;
	xor.b32  	%r1005, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r996, %r997}, {%r25}, {%r999}, {%r964, %r965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1002, %r1003}, {%r29}, {%r1005}, {%r970, %r971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1008, %r1009}, {%r25}, {%r1005}, {%r982, %r983};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1014, %r1015}, {%r29}, {%r999}, {%r1008, %r1009};
	// end inline asm
	ld.shared.u32 	%r1021, [%rd83+24];
	// begin inline asm
	lop3.b32 %r1020, %r1021, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1137, %r1020, 2021161080;
	xor.b32  	%r1031, %r1137, -2139062144;
	shr.u32 	%r1025, %r1021, 4;
	// begin inline asm
	lop3.b32 %r1024, %r1025, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1138, %r1024, 2021161080;
	xor.b32  	%r1037, %r1138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1028, %r1029}, {%r33}, {%r1031}, {%r996, %r997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1034, %r1035}, {%r37}, {%r1037}, {%r1002, %r1003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1040, %r1041}, {%r33}, {%r1037}, {%r1014, %r1015};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1046, %r1047}, {%r37}, {%r1031}, {%r1040, %r1041};
	// end inline asm
	ld.shared.u32 	%r1053, [%rd83+28];
	// begin inline asm
	lop3.b32 %r1052, %r1053, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1139, %r1052, 2021161080;
	xor.b32  	%r1063, %r1139, -2139062144;
	shr.u32 	%r1057, %r1053, 4;
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r568, %r569, 40;
	// end inline asm
	add.s32 	%r1140, %r1056, 2021161080;
	xor.b32  	%r1069, %r1140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1060, %r1061}, {%r41}, {%r1063}, {%r1028, %r1029};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1066, %r1067}, {%r45}, {%r1069}, {%r1034, %r1035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1072, %r1073}, {%r41}, {%r1069}, {%r1046, %r1047};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1078, %r1079}, {%r45}, {%r1063}, {%r1072, %r1073};
	// end inline asm
	sub.s32 	%r1141, %r1060, %r1066;
	add.s32 	%r1142, %r1141, 4;
	shr.s32 	%r1086, %r1142, 3;
	add.s32 	%r1143, %r1078, 4;
	shr.s32 	%r1085, %r1143, 3;
	sub.s32 	%r1144, %r1061, %r1067;
	add.s32 	%r1145, %r1144, 4;
	shr.s32 	%r1089, %r1145, 3;
	add.s32 	%r1146, %r1079, 4;
	shr.s32 	%r1088, %r1146, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1084, %r1085, %r1086;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1087, %r1088, %r1089;
	// end inline asm
	add.s32 	%r1147, %r52, %r1121;
	mul.wide.u32 	%rd89, %r1147, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r1084;
	add.s32 	%r1148, %r52, %r1123;
	mul.wide.u32 	%rd91, %r1148, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r1087;
	add.s32 	%r1352, %r1352, 8;
	setp.ne.s32 	%p27, %r1352, 32;
	@%p27 bra 	$L__BB0_17;
// %bb.18:                              // %L8021
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1167, [%rd9];
	ld.shared.u32 	%r1168, [%rd10+12800];
	ld.shared.u32 	%r1169, [%rd10+25600];
	ld.shared.u32 	%r1170, [%rd10+38400];
	ld.shared.u32 	%r1171, [%rd11];
	ld.shared.u32 	%r1172, [%rd12+12800];
	ld.shared.u32 	%r1173, [%rd12+25600];
	ld.shared.u32 	%r1174, [%rd12+38400];
	ld.shared.u32 	%r1175, [%rd13];
	ld.shared.u32 	%r1176, [%rd14+12800];
	ld.shared.u32 	%r1177, [%rd14+25600];
	ld.shared.u32 	%r1178, [%rd14+38400];
	ld.shared.u32 	%r1179, [%rd15];
	ld.shared.u32 	%r1180, [%rd16+12800];
	ld.shared.u32 	%r1181, [%rd16+25600];
	ld.shared.u32 	%r1182, [%rd16+38400];
	cvt.s32.s16 	%r1183, %r1167;
	shr.s32 	%r1184, %r1167, 16;
	cvt.s32.s16 	%r1185, %r1168;
	shr.s32 	%r1186, %r1168, 16;
	cvt.s32.s16 	%r1187, %r1169;
	shr.s32 	%r1188, %r1169, 16;
	cvt.s32.s16 	%r1189, %r1170;
	shr.s32 	%r1190, %r1170, 16;
	cvt.s32.s16 	%r1191, %r1171;
	shr.s32 	%r1192, %r1171, 16;
	cvt.s32.s16 	%r1193, %r1172;
	shr.s32 	%r1194, %r1172, 16;
	cvt.s32.s16 	%r1195, %r1173;
	shr.s32 	%r1196, %r1173, 16;
	cvt.s32.s16 	%r1197, %r1174;
	shr.s32 	%r1198, %r1174, 16;
	cvt.s32.s16 	%r1199, %r1175;
	shr.s32 	%r1200, %r1175, 16;
	cvt.s32.s16 	%r1201, %r1176;
	shr.s32 	%r1202, %r1176, 16;
	cvt.s32.s16 	%r1203, %r1177;
	shr.s32 	%r1204, %r1177, 16;
	cvt.s32.s16 	%r1205, %r1178;
	shr.s32 	%r1206, %r1178, 16;
	cvt.s32.s16 	%r1207, %r1179;
	shr.s32 	%r1208, %r1179, 16;
	cvt.s32.s16 	%r1209, %r1180;
	shr.s32 	%r1210, %r1180, 16;
	cvt.s32.s16 	%r1211, %r1181;
	shr.s32 	%r1212, %r1181, 16;
	cvt.s32.s16 	%r1213, %r1182;
	shr.s32 	%r1214, %r1182, 16;
	add.s32 	%r1215, %r1183, %r53;
	add.s32 	%r1216, %r1215, %r1185;
	add.s32 	%r1217, %r1216, %r1187;
	add.s32 	%r1218, %r1217, %r1189;
	shr.s32 	%r1219, %r1218, %r54;
	add.s32 	%r1220, %r1184, %r53;
	add.s32 	%r1221, %r1220, %r1186;
	add.s32 	%r1222, %r1221, %r1188;
	add.s32 	%r1223, %r1222, %r1190;
	shr.s32 	%r1224, %r1223, %r54;
	add.s32 	%r1225, %r1191, %r53;
	add.s32 	%r1226, %r1225, %r1193;
	add.s32 	%r1227, %r1226, %r1195;
	add.s32 	%r1228, %r1227, %r1197;
	shr.s32 	%r1229, %r1228, %r54;
	add.s32 	%r1230, %r1192, %r53;
	add.s32 	%r1231, %r1230, %r1194;
	add.s32 	%r1232, %r1231, %r1196;
	add.s32 	%r1233, %r1232, %r1198;
	shr.s32 	%r1234, %r1233, %r54;
	add.s32 	%r1235, %r1199, %r53;
	add.s32 	%r1236, %r1235, %r1201;
	add.s32 	%r1237, %r1236, %r1203;
	add.s32 	%r1238, %r1237, %r1205;
	shr.s32 	%r1239, %r1238, %r54;
	add.s32 	%r1240, %r1200, %r53;
	add.s32 	%r1241, %r1240, %r1202;
	add.s32 	%r1242, %r1241, %r1204;
	add.s32 	%r1243, %r1242, %r1206;
	shr.s32 	%r1244, %r1243, %r54;
	add.s32 	%r1245, %r1207, %r53;
	add.s32 	%r1246, %r1245, %r1209;
	add.s32 	%r1247, %r1246, %r1211;
	add.s32 	%r1248, %r1247, %r1213;
	shr.s32 	%r1249, %r1248, %r54;
	add.s32 	%r1250, %r1208, %r53;
	add.s32 	%r1251, %r1250, %r1210;
	add.s32 	%r1252, %r1251, %r1212;
	add.s32 	%r1253, %r1252, %r1214;
	shr.s32 	%r1254, %r1253, %r54;
	max.s32 	%r1255, %r1219, -7;
	min.s32 	%r1154, %r1255, 7;
	setp.ne.s32 	%p28, %r1154, %r1219;
	or.pred  	%p29, %p55, %p28;
	max.s32 	%r1256, %r1224, -7;
	min.s32 	%r1161, %r1256, 7;
	setp.ne.s32 	%p30, %r1161, %r1224;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r1257, %r1229, -7;
	min.s32 	%r1153, %r1257, 7;
	setp.ne.s32 	%p32, %r1153, %r1229;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r1258, %r1234, -7;
	min.s32 	%r1160, %r1258, 7;
	setp.ne.s32 	%p34, %r1160, %r1234;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r1259, %r1239, -7;
	min.s32 	%r1151, %r1259, 7;
	setp.ne.s32 	%p36, %r1151, %r1239;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r1260, %r1244, -7;
	min.s32 	%r1158, %r1260, 7;
	setp.ne.s32 	%p38, %r1158, %r1244;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r1261, %r1249, -7;
	min.s32 	%r1150, %r1261, 7;
	setp.ne.s32 	%p40, %r1150, %r1249;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r1262, %r1254, -7;
	min.s32 	%r1157, %r1262, 7;
	setp.ne.s32 	%p42, %r1157, %r1254;
	or.pred  	%p55, %p42, %p41;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1149, %r1150, %r1151, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1152, %r1153, %r1154, %r1149;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1156, %r1157, %r1158, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1159, %r1160, %r1161, %r1156;
	// end inline asm
	shl.b32 	%r1166, %r1159, 4;
	// begin inline asm
	lop3.b32 %r1273, %r569, %r1152, %r1166, 202;
	// end inline asm
	setp.eq.s32 	%p43, %r1345, 0;
	selp.b32 	%r1350, %r1273, %r1350, %p43;
	selp.b32 	%r1351, %r1273, %r1351, %p43;
	setp.eq.s32 	%p44, %r1345, 32;
	selp.b32 	%r1346, %r1273, %r1346, %p44;
	selp.b32 	%r1347, %r1273, %r1347, %p44;
	setp.eq.s32 	%p45, %r1345, 64;
	selp.b32 	%r1348, %r1273, %r1348, %p45;
	selp.b32 	%r1349, %r1273, %r1349, %p45;
	add.s32 	%r78, %r1345, 32;
	setp.ne.s32 	%p46, %r1345, 96;
	mov.u32 	%r1345, %r78;
	@%p46 bra 	$L__BB0_15;
// %bb.19:                              // %L10427.L10433_crit_edge
                                        //   in Loop: Header=BB0_13 Depth=1
	setp.eq.s32 	%p47, %r55, 0;
	// begin inline asm
	prmt.b32 %r1263, %r1350, %r1346, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1267, %r1351, %r1347, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1348, %r1273, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1349, %r1273, %r359;
	// end inline asm
	selp.b32 	%r1311, %r1267, %r1263, %p47;
	shfl.sync.bfly.b32	%r1312, %r1311, 1, 31, -1;
	selp.b32 	%r1280, %r1263, %r1312, %p47;
	selp.b32 	%r1281, %r1312, %r1267, %p47;
	selp.b32 	%r1313, %r1275, %r1271, %p47;
	shfl.sync.bfly.b32	%r1314, %r1313, 1, 31, -1;
	selp.b32 	%r1288, %r1271, %r1314, %p47;
	selp.b32 	%r1289, %r1314, %r1275, %p47;
	// begin inline asm
	prmt.b32 %r1279, %r1280, %r1281, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1280, %r1281, %r359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1288, %r1289, %r355;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1288, %r1289, %r359;
	// end inline asm
	selp.b32 	%r1315, %r1287, %r1279, %p16;
	shfl.sync.bfly.b32	%r1316, %r1315, 2, 31, -1;
	selp.b32 	%r1296, %r1279, %r1316, %p16;
	selp.b32 	%r1297, %r1316, %r1287, %p16;
	selp.b32 	%r1317, %r1291, %r1283, %p16;
	shfl.sync.bfly.b32	%r1318, %r1317, 2, 31, -1;
	selp.b32 	%r1304, %r1283, %r1318, %p16;
	selp.b32 	%r1305, %r1318, %r1291, %p16;
	// begin inline asm
	prmt.b32 %r1295, %r1296, %r1297, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1296, %r1297, %r231;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1304, %r1305, %r227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r1304, %r1305, %r231;
	// end inline asm
	selp.b32 	%r1319, %r1303, %r1295, %p17;
	shfl.sync.bfly.b32	%r1320, %r1319, 4, 31, -1;
	selp.b32 	%r1321, %r1295, %r1320, %p17;
	selp.b32 	%r1322, %r1320, %r1303, %p17;
	selp.b32 	%r1323, %r1307, %r1299, %p17;
	shfl.sync.bfly.b32	%r1324, %r1323, 4, 31, -1;
	selp.b32 	%r1325, %r1299, %r1324, %p17;
	selp.b32 	%r1326, %r1324, %r1307, %p17;
	selp.b32 	%r1327, %r1325, %r1321, %p47;
	shfl.sync.bfly.b32	%r1328, %r1327, 1, 31, -1;
	selp.b32 	%r1329, %r1321, %r1328, %p47;
	selp.b32 	%r1330, %r1328, %r1325, %p47;
	selp.b32 	%r1331, %r1326, %r1322, %p47;
	shfl.sync.bfly.b32	%r1332, %r1331, 1, 31, -1;
	selp.b32 	%r1333, %r1322, %r1332, %p47;
	selp.b32 	%r1334, %r1332, %r1326, %p47;
	and.b32  	%r1335, %r1344, 8064;
	or.b32  	%r1336, %r56, %r1335;
	or.b32  	%r1337, %r1336, %r57;
	cvt.u64.u32 	%rd93, %r1337;
	add.s64 	%rd94, %rd4, %rd93;
	st.global.v4.u32 	[%rd94], {%r1329, %r1333, %r1330, %r1334};
	add.s32 	%r79, %r1344, 128;
	setp.ne.s32 	%p50, %r1344, 32640;
	mov.u32 	%r1344, %r79;
	@%p50 bra 	$L__BB0_13;
$L__BB0_20:                             // %L10813
	selp.u32 	%r1338, 1, 0, %p55;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r1338, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r1339, 1, 0, %p2; 
	}
	setp.eq.s32 	%p51, %r1339, 0;
	or.pred  	%p52, %p51, %p1;
	@%p52 bra 	$L__BB0_22;
// %bb.21:                              // %L10843
	st.global.u32 	[%rd8], %r88;
$L__BB0_22:                             // %L10889
	mov.u32 	%r1341, 0;
	st.global.u32 	[%rd7], %r1341;
	ret;
$L__BB0_7:                              // %L149
	mov.u32 	%r1342, 2;
	st.global.u32 	[%rd7], %r1342;
	mov.u64 	%rd95, exception880;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_9:                              // %L365
	mov.u32 	%r101, 3;
	st.global.u32 	[%rd7], %r101;
	mov.u64 	%rd25, exception880;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r80;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
