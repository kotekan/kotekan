// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception876[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1882[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<29>;
	.reg .b16 	%rs<61>;
	.reg .b32 	%r<1353>;
	.reg .b64 	%rd<94>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r78, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r81, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r81, 16511;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r82, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r82, 67711;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r79, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r83, %r1, 768, %r3;
	or.b32  	%r84, %r83, %r4;
	mul.wide.u32 	%rd20, %r84, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r85, 1;
	st.global.u32 	[%rd6], %r85;
	setp.gt.u32 	%p3, %r79, 32767;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r80, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r80, %r79;
	setp.gt.s32 	%p5, %r80, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r86, %r80, %r79;
	and.b32  	%r87, %r86, 127;
	setp.eq.s32 	%p7, %r87, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass114
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b32  	%r25, %r1, 1;
	neg.s32 	%r88, %r25;
	and.b32  	%r89, %r88, 96;
	shr.u32 	%r90, %r1, 1;
	cvt.u16.u32 	%rs1, %r90;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	cvt.u32.u16 	%r91, %rs6;
	and.b32  	%r26, %r91, 255;
	shr.u32 	%r27, %r4, 3;
	shl.b32 	%r92, %r2, 2;
	or.b32  	%r93, %r27, %r92;
	cvt.u16.u32 	%rs7, %r93;
	and.b16  	%rs8, %rs7, 255;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 14;
	mul.lo.s16 	%rs11, %rs10, 96;
	sub.s16 	%rs12, %rs7, %rs11;
	cvt.u32.u16 	%r94, %rs12;
	and.b32  	%r28, %r94, 255;
	mad.lo.s32 	%r95, %r26, 192, %r89;
	add.s32 	%r96, %r95, %r28;
	mul.wide.u32 	%rd21, %r96, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r29, [%rd22];
	add.s32 	%r30, %r29, -4;
	setp.gt.u32 	%p8, %r30, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.18:                              // %pass180
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.eq.s32 	%p9, %r25, 0;
	add.s32 	%r355, %r29, -3;
	mul.lo.s32 	%r356, %r26, 49152;
	selp.b32 	%r357, 0, 24576, %p9;
	shr.u32 	%r358, %r2, 2;
	cvt.u16.u32 	%rs13, %r358;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 10;
	mul.lo.s16 	%rs16, %rs15, 6;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 4;
	shr.u32 	%r31, %r4, 2;
	cvt.u16.u32 	%rs19, %r31;
	and.b16  	%rs20, %rs19, 6;
	or.b16  	%rs21, %rs20, %rs18;
	and.b16  	%rs22, %rs21, 246;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 14;
	mul.lo.s16 	%rs25, %rs24, 96;
	sub.s16 	%rs26, %rs21, %rs25;
	and.b16  	%rs27, %rs26, 246;
	mul.wide.u16 	%r359, %rs27, 256;
	shl.b32 	%r360, %r4, 1;
	shl.b32 	%r361, %r2, 6;
	or.b32  	%r362, %r360, %r361;
	shl.b32 	%r363, %r4, 4;
	and.b32  	%r364, %r363, 16;
	and.b32  	%r365, %r362, 204;
	or.b32  	%r366, %r364, %r365;
	or.b32  	%r367, %r366, %r357;
	add.s32 	%r368, %r367, %r356;
	add.s32 	%r369, %r368, %r359;
	shl.b32 	%r370, %r369, 2;
	cvt.u64.u32 	%rd25, %r370;
	add.s64 	%rd26, %rd25, %rd1;
	ld.global.v4.u32 	{%r99, %r100, %r115, %r116}, [%rd26];
	or.b16  	%rs28, %rs21, 8;
	and.b16  	%rs29, %rs28, 254;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 14;
	mul.lo.s16 	%rs32, %rs31, 96;
	sub.s16 	%rs33, %rs28, %rs32;
	and.b16  	%rs34, %rs33, 254;
	mul.wide.u16 	%r371, %rs34, 256;
	add.s32 	%r372, %r368, %r371;
	shl.b32 	%r373, %r372, 2;
	cvt.u64.u32 	%rd27, %r373;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r107, %r108, %r123, %r124}, [%rd28];
	and.b32  	%r374, %r360, 12;
	and.b32  	%r375, %r361, 192;
	or.b32  	%r376, %r375, %r374;
	or.b32  	%r377, %r376, %r364;
	or.b32  	%r378, %r377, %r357;
	add.s32 	%r379, %r356, %r378;
	or.b32  	%r380, %r379, 32;
	add.s32 	%r381, %r380, %r359;
	shl.b32 	%r382, %r381, 2;
	cvt.u64.u32 	%rd29, %r382;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r131, %r132, %r147, %r148}, [%rd30];
	add.s32 	%r383, %r380, %r371;
	shl.b32 	%r384, %r383, 2;
	cvt.u64.u32 	%rd31, %r384;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r139, %r140, %r155, %r156}, [%rd32];
	or.b16  	%rs35, %rs18, %rs19;
	or.b16  	%rs36, %rs35, 1;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 14;
	mul.lo.s16 	%rs40, %rs39, 96;
	sub.s16 	%rs41, %rs36, %rs40;
	and.b16  	%rs42, %rs41, 255;
	mul.wide.u16 	%r385, %rs42, 256;
	add.s32 	%r386, %r368, %r385;
	shl.b32 	%r387, %r386, 2;
	cvt.u64.u32 	%rd33, %r387;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r163, %r164, %r179, %r180}, [%rd34];
	or.b16  	%rs43, %rs35, 9;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 14;
	mul.lo.s16 	%rs47, %rs46, 96;
	sub.s16 	%rs48, %rs43, %rs47;
	and.b16  	%rs49, %rs48, 255;
	mul.wide.u16 	%r388, %rs49, 256;
	add.s32 	%r389, %r368, %r388;
	shl.b32 	%r390, %r389, 2;
	cvt.u64.u32 	%rd35, %r390;
	add.s64 	%rd36, %rd35, %rd1;
	ld.global.v4.u32 	{%r171, %r172, %r187, %r188}, [%rd36];
	add.s32 	%r391, %r380, %r385;
	shl.b32 	%r392, %r391, 2;
	cvt.u64.u32 	%rd37, %r392;
	add.s64 	%rd38, %rd37, %rd1;
	ld.global.v4.u32 	{%r195, %r196, %r211, %r212}, [%rd38];
	add.s32 	%r393, %r380, %r388;
	shl.b32 	%r394, %r393, 2;
	cvt.u64.u32 	%rd39, %r394;
	add.s64 	%rd40, %rd39, %rd1;
	ld.global.v4.u32 	{%r203, %r204, %r219, %r220}, [%rd40];
	mov.u32 	%r221, 21520;
	// begin inline asm
	prmt.b32 %r227, %r99, %r100, %r221;
	// end inline asm
	mov.u32 	%r225, 30258;
	// begin inline asm
	prmt.b32 %r228, %r99, %r100, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r107, %r108, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r107, %r108, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r115, %r116, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r115, %r116, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r251, %r123, %r124, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r252, %r123, %r124, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r259, %r131, %r132, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r260, %r131, %r132, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r267, %r139, %r140, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r139, %r140, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r147, %r148, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r147, %r148, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r155, %r156, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r155, %r156, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r163, %r164, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r163, %r164, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r171, %r172, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r171, %r172, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r179, %r180, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r308, %r179, %r180, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r315, %r187, %r188, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r316, %r187, %r188, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r323, %r195, %r196, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r324, %r195, %r196, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r331, %r203, %r204, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r332, %r203, %r204, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r339, %r211, %r212, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r340, %r211, %r212, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r347, %r219, %r220, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r348, %r219, %r220, %r225;
	// end inline asm
	mov.u32 	%r349, 25152;
	// begin inline asm
	prmt.b32 %r226, %r227, %r228, %r349;
	// end inline asm
	mov.u32 	%r353, 29521;
	// begin inline asm
	prmt.b32 %r230, %r227, %r228, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r235, %r236, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r235, %r236, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r243, %r244, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r243, %r244, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r250, %r251, %r252, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r254, %r251, %r252, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r258, %r259, %r260, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r262, %r259, %r260, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r266, %r267, %r268, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r267, %r268, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r275, %r276, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r275, %r276, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r283, %r284, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r283, %r284, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r291, %r292, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r291, %r292, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r299, %r300, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r299, %r300, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r307, %r308, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r310, %r307, %r308, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r314, %r315, %r316, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r318, %r315, %r316, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r322, %r323, %r324, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r326, %r323, %r324, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r330, %r331, %r332, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r334, %r331, %r332, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r338, %r339, %r340, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r342, %r339, %r340, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r346, %r347, %r348, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r350, %r347, %r348, %r353;
	// end inline asm
	and.b32  	%r32, %r4, 2;
	setp.eq.s32 	%p10, %r32, 0;
	selp.b32 	%r395, %r258, %r226, %p10;
	shfl.sync.bfly.b32	%r396, %r395, 2, 31, -1;
	selp.b32 	%r397, %r226, %r396, %p10;
	selp.b32 	%r398, %r396, %r258, %p10;
	selp.b32 	%r399, %r266, %r234, %p10;
	shfl.sync.bfly.b32	%r400, %r399, 2, 31, -1;
	selp.b32 	%r401, %r234, %r400, %p10;
	selp.b32 	%r402, %r400, %r266, %p10;
	selp.b32 	%r403, %r262, %r230, %p10;
	shfl.sync.bfly.b32	%r404, %r403, 2, 31, -1;
	selp.b32 	%r405, %r230, %r404, %p10;
	selp.b32 	%r406, %r404, %r262, %p10;
	selp.b32 	%r407, %r270, %r238, %p10;
	shfl.sync.bfly.b32	%r408, %r407, 2, 31, -1;
	selp.b32 	%r409, %r238, %r408, %p10;
	selp.b32 	%r410, %r408, %r270, %p10;
	selp.b32 	%r411, %r274, %r242, %p10;
	shfl.sync.bfly.b32	%r412, %r411, 2, 31, -1;
	selp.b32 	%r413, %r242, %r412, %p10;
	selp.b32 	%r414, %r412, %r274, %p10;
	selp.b32 	%r415, %r282, %r250, %p10;
	shfl.sync.bfly.b32	%r416, %r415, 2, 31, -1;
	selp.b32 	%r417, %r250, %r416, %p10;
	selp.b32 	%r418, %r416, %r282, %p10;
	selp.b32 	%r419, %r278, %r246, %p10;
	shfl.sync.bfly.b32	%r420, %r419, 2, 31, -1;
	selp.b32 	%r421, %r246, %r420, %p10;
	selp.b32 	%r422, %r420, %r278, %p10;
	selp.b32 	%r423, %r286, %r254, %p10;
	shfl.sync.bfly.b32	%r424, %r423, 2, 31, -1;
	selp.b32 	%r425, %r254, %r424, %p10;
	selp.b32 	%r426, %r424, %r286, %p10;
	selp.b32 	%r427, %r322, %r290, %p10;
	shfl.sync.bfly.b32	%r428, %r427, 2, 31, -1;
	selp.b32 	%r429, %r290, %r428, %p10;
	selp.b32 	%r430, %r428, %r322, %p10;
	selp.b32 	%r431, %r330, %r298, %p10;
	shfl.sync.bfly.b32	%r432, %r431, 2, 31, -1;
	selp.b32 	%r433, %r298, %r432, %p10;
	selp.b32 	%r434, %r432, %r330, %p10;
	selp.b32 	%r435, %r326, %r294, %p10;
	shfl.sync.bfly.b32	%r436, %r435, 2, 31, -1;
	selp.b32 	%r437, %r294, %r436, %p10;
	selp.b32 	%r438, %r436, %r326, %p10;
	selp.b32 	%r439, %r334, %r302, %p10;
	shfl.sync.bfly.b32	%r440, %r439, 2, 31, -1;
	selp.b32 	%r441, %r302, %r440, %p10;
	selp.b32 	%r442, %r440, %r334, %p10;
	selp.b32 	%r443, %r338, %r306, %p10;
	shfl.sync.bfly.b32	%r444, %r443, 2, 31, -1;
	selp.b32 	%r445, %r306, %r444, %p10;
	selp.b32 	%r446, %r444, %r338, %p10;
	selp.b32 	%r447, %r346, %r314, %p10;
	shfl.sync.bfly.b32	%r448, %r447, 2, 31, -1;
	selp.b32 	%r449, %r314, %r448, %p10;
	selp.b32 	%r450, %r448, %r346, %p10;
	selp.b32 	%r451, %r342, %r310, %p10;
	shfl.sync.bfly.b32	%r452, %r451, 2, 31, -1;
	selp.b32 	%r453, %r310, %r452, %p10;
	selp.b32 	%r454, %r452, %r342, %p10;
	selp.b32 	%r455, %r350, %r318, %p10;
	shfl.sync.bfly.b32	%r456, %r455, 2, 31, -1;
	selp.b32 	%r457, %r318, %r456, %p10;
	selp.b32 	%r458, %r456, %r350, %p10;
	and.b32  	%r33, %r4, 4;
	setp.eq.s32 	%p11, %r33, 0;
	selp.b32 	%r459, %r429, %r397, %p11;
	shfl.sync.bfly.b32	%r460, %r459, 4, 31, -1;
	selp.b32 	%r34, %r397, %r460, %p11;
	selp.b32 	%r35, %r460, %r429, %p11;
	selp.b32 	%r461, %r433, %r401, %p11;
	shfl.sync.bfly.b32	%r462, %r461, 4, 31, -1;
	selp.b32 	%r36, %r401, %r462, %p11;
	selp.b32 	%r37, %r462, %r433, %p11;
	selp.b32 	%r463, %r437, %r405, %p11;
	shfl.sync.bfly.b32	%r464, %r463, 4, 31, -1;
	selp.b32 	%r38, %r405, %r464, %p11;
	selp.b32 	%r39, %r464, %r437, %p11;
	selp.b32 	%r465, %r441, %r409, %p11;
	shfl.sync.bfly.b32	%r466, %r465, 4, 31, -1;
	selp.b32 	%r40, %r409, %r466, %p11;
	selp.b32 	%r41, %r466, %r441, %p11;
	selp.b32 	%r467, %r445, %r413, %p11;
	shfl.sync.bfly.b32	%r468, %r467, 4, 31, -1;
	selp.b32 	%r42, %r413, %r468, %p11;
	selp.b32 	%r43, %r468, %r445, %p11;
	selp.b32 	%r469, %r449, %r417, %p11;
	shfl.sync.bfly.b32	%r470, %r469, 4, 31, -1;
	selp.b32 	%r44, %r417, %r470, %p11;
	selp.b32 	%r45, %r470, %r449, %p11;
	selp.b32 	%r471, %r453, %r421, %p11;
	shfl.sync.bfly.b32	%r472, %r471, 4, 31, -1;
	selp.b32 	%r46, %r421, %r472, %p11;
	selp.b32 	%r47, %r472, %r453, %p11;
	selp.b32 	%r473, %r457, %r425, %p11;
	shfl.sync.bfly.b32	%r474, %r473, 4, 31, -1;
	selp.b32 	%r48, %r425, %r474, %p11;
	selp.b32 	%r49, %r474, %r457, %p11;
	selp.b32 	%r475, %r430, %r398, %p11;
	shfl.sync.bfly.b32	%r476, %r475, 4, 31, -1;
	selp.b32 	%r50, %r398, %r476, %p11;
	selp.b32 	%r51, %r476, %r430, %p11;
	selp.b32 	%r477, %r434, %r402, %p11;
	shfl.sync.bfly.b32	%r478, %r477, 4, 31, -1;
	selp.b32 	%r52, %r402, %r478, %p11;
	selp.b32 	%r53, %r478, %r434, %p11;
	selp.b32 	%r479, %r438, %r406, %p11;
	shfl.sync.bfly.b32	%r480, %r479, 4, 31, -1;
	selp.b32 	%r54, %r406, %r480, %p11;
	selp.b32 	%r55, %r480, %r438, %p11;
	selp.b32 	%r481, %r442, %r410, %p11;
	shfl.sync.bfly.b32	%r482, %r481, 4, 31, -1;
	selp.b32 	%r56, %r410, %r482, %p11;
	selp.b32 	%r57, %r482, %r442, %p11;
	selp.b32 	%r483, %r446, %r414, %p11;
	shfl.sync.bfly.b32	%r484, %r483, 4, 31, -1;
	selp.b32 	%r58, %r414, %r484, %p11;
	selp.b32 	%r59, %r484, %r446, %p11;
	selp.b32 	%r485, %r450, %r418, %p11;
	shfl.sync.bfly.b32	%r486, %r485, 4, 31, -1;
	selp.b32 	%r60, %r418, %r486, %p11;
	selp.b32 	%r61, %r486, %r450, %p11;
	selp.b32 	%r487, %r454, %r422, %p11;
	shfl.sync.bfly.b32	%r488, %r487, 4, 31, -1;
	selp.b32 	%r62, %r422, %r488, %p11;
	selp.b32 	%r63, %r488, %r454, %p11;
	selp.b32 	%r489, %r458, %r426, %p11;
	shfl.sync.bfly.b32	%r490, %r489, 4, 31, -1;
	selp.b32 	%r64, %r426, %r490, %p11;
	selp.b32 	%r65, %r490, %r458, %p11;
	shl.b32 	%r491, %r26, 8;
	and.b32  	%r66, %r2, 12;
	shl.b32 	%r492, %r1, 7;
	and.b32  	%r493, %r492, 128;
	shl.b32 	%r494, %r4, 2;
	and.b32  	%r495, %r494, 28;
	and.b32  	%r496, %r3, 96;
	or.b32  	%r67, %r495, %r496;
	or.b32  	%r497, %r67, %r493;
	or.b32  	%r68, %r497, %r491;
	shl.b32 	%r498, %r4, 3;
	and.b32  	%r499, %r498, 24;
	or.b32  	%r69, %r496, %r499;
	and.b32  	%r70, %r360, 6;
	and.b32  	%r500, %r2, 3;
	and.b16  	%rs50, %rs35, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 14;
	mul.lo.s16 	%rs53, %rs52, 96;
	sub.s16 	%rs54, %rs35, %rs53;
	cvt.u32.u16 	%r501, %rs54;
	and.b32  	%r502, %r501, 255;
	mul.lo.s32 	%r503, %r500, 3200;
	or.b32  	%r71, %r503, %r502;
	or.b16  	%rs55, %rs35, 8;
	and.b16  	%rs56, %rs55, 255;
	mul.lo.s16 	%rs57, %rs56, 171;
	shr.u16 	%rs58, %rs57, 14;
	mul.lo.s16 	%rs59, %rs58, 96;
	sub.s16 	%rs60, %rs55, %rs59;
	cvt.u32.u16 	%r504, %rs60;
	and.b32  	%r505, %r504, 255;
	or.b32  	%r72, %r503, %r505;
	and.b32  	%r506, %r4, 7;
	shl.b32 	%r73, %r85, %r30;
	min.u32 	%r74, %r355, 31;
	and.b32  	%r75, %r4, 1;
	shl.b32 	%r508, %r4, 5;
	and.b32  	%r509, %r508, 64;
	shl.b32 	%r510, %r1, 11;
	and.b32  	%r511, %r510, 2048;
	shl.b32 	%r512, %r26, 12;
	or.b32  	%r513, %r512, %r511;
	mad.lo.s32 	%r514, %r28, 196608, %r513;
	mul.lo.s32 	%r515, %r506, 100;
	add.s32 	%r516, %r515, %r28;
	mul.wide.u32 	%rd41, %r516, 4;
	mov.u64 	%rd42, shmem;
	add.s64 	%rd43, %rd42, 16512;
	add.s64 	%rd7, %rd43, %rd41;
	cvt.u64.u32 	%rd44, %r515;
	cvt.u64.u32 	%rd45, %r28;
	add.s64 	%rd46, %rd45, %rd44;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd8, %rd43, %rd47;
	add.s32 	%r517, %r515, 800;
	add.s32 	%r518, %r517, %r28;
	mul.wide.u32 	%rd48, %r518, 4;
	add.s64 	%rd9, %rd43, %rd48;
	cvt.u64.u32 	%rd49, %r517;
	add.s64 	%rd50, %rd45, %rd49;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd10, %rd43, %rd51;
	add.s32 	%r519, %r515, 1600;
	add.s32 	%r520, %r519, %r28;
	mul.wide.u32 	%rd52, %r520, 4;
	add.s64 	%rd11, %rd43, %rd52;
	cvt.u64.u32 	%rd53, %r519;
	add.s64 	%rd54, %rd45, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd12, %rd43, %rd55;
	or.b32  	%r521, %r4, 24;
	mul.lo.s32 	%r522, %r521, 100;
	add.s32 	%r523, %r522, %r28;
	mul.wide.u32 	%rd56, %r523, 4;
	add.s64 	%rd13, %rd43, %rd56;
	cvt.u64.u32 	%rd57, %r522;
	add.s64 	%rd58, %rd45, %rd57;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd14, %rd43, %rd59;
	and.b32  	%r524, %r498, 32;
	or.b32  	%r525, %r509, %r524;
	or.b32  	%r76, %r364, %r525;
	shl.b32 	%r77, %r514, 2;
	mov.u32 	%r1344, 0;
	setp.lt.u32 	%p13, %r2, 16;
$L__BB0_9:                              // %L2480
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r526, %r1344, %r79;
	setp.ge.s32 	%p12, %r526, %r80;
	@%p12 bra 	$L__BB0_16;
// %bb.10:                              // %L2487.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r1345, 0;
	mov.u32 	%r1346, %r1345;
	mov.u32 	%r1347, %r1345;
	mov.u32 	%r1348, %r1345;
	mov.u32 	%r1349, %r1345;
	mov.u32 	%r1350, %r1345;
	mov.u32 	%r1351, %r1345;
$L__BB0_11:                             // %L2487
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	@%p13 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_12;
$L__BB0_19:                             // %pass1116
                                        //   in Loop: Header=BB0_11 Depth=2
	or.b32  	%r528, %r1345, %r66;
	or.b32  	%r529, %r528, %r27;
	add.s32 	%r530, %r529, %r1344;
	and.b32  	%r531, %r530, 32751;
	add.s32 	%r532, %r531, %r79;
	mad.lo.s32 	%r533, %r532, 12288, %r68;
	mul.hi.s32 	%r534, %r533, 715827883;
	shr.u32 	%r535, %r534, 31;
	shr.s32 	%r536, %r534, 26;
	add.s32 	%r537, %r536, %r535;
	setp.lt.s32 	%p14, %r533, 0;
	mul.lo.s32 	%r538, %r537, 402653184;
	setp.ne.s32 	%p15, %r538, %r533;
	and.pred  	%p16, %p14, %p15;
	selp.s32 	%r539, -1, 0, %p16;
	add.s32 	%r540, %r537, %r539;
	mad.lo.s32 	%r541, %r540, -402653184, %r533;
	mul.wide.s32 	%rd60, %r541, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.v4.u32 	{%r542, %r543, %r544, %r545}, [%rd61];
	or.b32  	%r546, %r529, 16;
	add.s32 	%r547, %r546, %r1344;
	and.b32  	%r548, %r547, 32767;
	add.s32 	%r549, %r548, %r79;
	mad.lo.s32 	%r550, %r549, 12288, %r68;
	mul.hi.s32 	%r551, %r550, 715827883;
	shr.u32 	%r552, %r551, 31;
	shr.s32 	%r553, %r551, 26;
	add.s32 	%r554, %r553, %r552;
	setp.lt.s32 	%p17, %r550, 0;
	mul.lo.s32 	%r555, %r554, 402653184;
	setp.ne.s32 	%p18, %r555, %r550;
	and.pred  	%p19, %p17, %p18;
	selp.s32 	%r556, -1, 0, %p19;
	add.s32 	%r557, %r554, %r556;
	mad.lo.s32 	%r558, %r557, -402653184, %r550;
	mul.wide.s32 	%rd62, %r558, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.v4.u32 	{%r559, %r560, %r561, %r562}, [%rd63];
	and.b32  	%r563, %r530, 15;
	mul.lo.s32 	%r564, %r563, 129;
	add.s32 	%r565, %r67, %r564;
	mul.wide.u32 	%rd64, %r565, 4;
	add.s64 	%rd66, %rd42, %rd64;
	st.shared.u32 	[%rd66], %r542;
	cvt.u64.u32 	%rd67, %r564;
	cvt.u64.u32 	%rd68, %r67;
	add.s64 	%rd69, %rd68, %rd67;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd42, %rd70;
	st.shared.u32 	[%rd71+4], %r543;
	st.shared.u32 	[%rd71+8], %r544;
	st.shared.u32 	[%rd71+12], %r545;
	and.b32  	%r566, %r547, 31;
	mul.lo.s32 	%r567, %r566, 129;
	add.s32 	%r568, %r67, %r567;
	mul.wide.u32 	%rd72, %r568, 4;
	add.s64 	%rd73, %rd42, %rd72;
	st.shared.u32 	[%rd73], %r559;
	cvt.u64.u32 	%rd74, %r567;
	add.s64 	%rd75, %rd68, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd42, %rd76;
	st.shared.u32 	[%rd77+4], %r560;
	st.shared.u32 	[%rd77+8], %r561;
	st.shared.u32 	[%rd77+12], %r562;
$L__BB0_12:                             // %L4204
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	or.b32  	%r570, %r1345, %r31;
	add.s32 	%r13, %r1344, %r570;
	mov.u32 	%r583, 0;
	mov.u32 	%r1352, %r583;
$L__BB0_13:                             // %L4206
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r1095, %r13, %r1352;
	shr.s32 	%r1096, %r1095, 31;
	shr.u32 	%r1097, %r1096, 27;
	add.s32 	%r1098, %r1095, %r1097;
	and.b32  	%r1099, %r1098, -32;
	sub.s32 	%r1100, %r1095, %r1099;
	mad.lo.s32 	%r1101, %r1100, 129, %r69;
	mul.wide.s32 	%rd78, %r1101, 4;
	add.s64 	%rd80, %rd42, %rd78;
	ld.shared.u32 	%r572, [%rd80];
	mov.u32 	%r573, 134744072;
	mov.u32 	%r574, 252645135;
	// begin inline asm
	lop3.b32 %r571, %r572, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1102, %r571, 2021161080;
	xor.b32  	%r582, %r1102, -2139062144;
	shr.u32 	%r576, %r572, 4;
	// begin inline asm
	lop3.b32 %r575, %r576, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1103, %r575, 2021161080;
	xor.b32  	%r588, %r1103, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r579, %r580}, {%r34}, {%r582}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r585, %r586}, {%r38}, {%r588}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r591, %r592}, {%r34}, {%r588}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r597, %r598}, {%r38}, {%r582}, {%r591, %r592};
	// end inline asm
	ld.shared.u32 	%r604, [%rd80+4];
	// begin inline asm
	lop3.b32 %r603, %r604, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1104, %r603, 2021161080;
	xor.b32  	%r614, %r1104, -2139062144;
	shr.u32 	%r608, %r604, 4;
	// begin inline asm
	lop3.b32 %r607, %r608, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1105, %r607, 2021161080;
	xor.b32  	%r620, %r1105, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r611, %r612}, {%r42}, {%r614}, {%r579, %r580};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r617, %r618}, {%r46}, {%r620}, {%r585, %r586};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r623, %r624}, {%r42}, {%r620}, {%r597, %r598};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r629, %r630}, {%r46}, {%r614}, {%r623, %r624};
	// end inline asm
	ld.shared.u32 	%r636, [%rd80+8];
	// begin inline asm
	lop3.b32 %r635, %r636, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1106, %r635, 2021161080;
	xor.b32  	%r646, %r1106, -2139062144;
	shr.u32 	%r640, %r636, 4;
	// begin inline asm
	lop3.b32 %r639, %r640, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1107, %r639, 2021161080;
	xor.b32  	%r652, %r1107, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r643, %r644}, {%r50}, {%r646}, {%r611, %r612};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r649, %r650}, {%r54}, {%r652}, {%r617, %r618};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r655, %r656}, {%r50}, {%r652}, {%r629, %r630};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r661, %r662}, {%r54}, {%r646}, {%r655, %r656};
	// end inline asm
	ld.shared.u32 	%r668, [%rd80+12];
	// begin inline asm
	lop3.b32 %r667, %r668, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1108, %r667, 2021161080;
	xor.b32  	%r678, %r1108, -2139062144;
	shr.u32 	%r672, %r668, 4;
	// begin inline asm
	lop3.b32 %r671, %r672, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1109, %r671, 2021161080;
	xor.b32  	%r684, %r1109, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r675, %r676}, {%r58}, {%r678}, {%r643, %r644};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r681, %r682}, {%r62}, {%r684}, {%r649, %r650};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r687, %r688}, {%r58}, {%r684}, {%r661, %r662};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r693, %r694}, {%r62}, {%r678}, {%r687, %r688};
	// end inline asm
	ld.shared.u32 	%r700, [%rd80+16];
	// begin inline asm
	lop3.b32 %r699, %r700, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1110, %r699, 2021161080;
	xor.b32  	%r710, %r1110, -2139062144;
	shr.u32 	%r704, %r700, 4;
	// begin inline asm
	lop3.b32 %r703, %r704, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1111, %r703, 2021161080;
	xor.b32  	%r716, %r1111, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r707, %r708}, {%r35}, {%r710}, {%r675, %r676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r713, %r714}, {%r39}, {%r716}, {%r681, %r682};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r719, %r720}, {%r35}, {%r716}, {%r693, %r694};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r725, %r726}, {%r39}, {%r710}, {%r719, %r720};
	// end inline asm
	ld.shared.u32 	%r732, [%rd80+20];
	// begin inline asm
	lop3.b32 %r731, %r732, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1112, %r731, 2021161080;
	xor.b32  	%r742, %r1112, -2139062144;
	shr.u32 	%r736, %r732, 4;
	// begin inline asm
	lop3.b32 %r735, %r736, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1113, %r735, 2021161080;
	xor.b32  	%r748, %r1113, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r739, %r740}, {%r43}, {%r742}, {%r707, %r708};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r745, %r746}, {%r47}, {%r748}, {%r713, %r714};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r751, %r752}, {%r43}, {%r748}, {%r725, %r726};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r757, %r758}, {%r47}, {%r742}, {%r751, %r752};
	// end inline asm
	ld.shared.u32 	%r764, [%rd80+24];
	// begin inline asm
	lop3.b32 %r763, %r764, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1114, %r763, 2021161080;
	xor.b32  	%r774, %r1114, -2139062144;
	shr.u32 	%r768, %r764, 4;
	// begin inline asm
	lop3.b32 %r767, %r768, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1115, %r767, 2021161080;
	xor.b32  	%r780, %r1115, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r771, %r772}, {%r51}, {%r774}, {%r739, %r740};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r777, %r778}, {%r55}, {%r780}, {%r745, %r746};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r783, %r784}, {%r51}, {%r780}, {%r757, %r758};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r789, %r790}, {%r55}, {%r774}, {%r783, %r784};
	// end inline asm
	ld.shared.u32 	%r796, [%rd80+28];
	// begin inline asm
	lop3.b32 %r795, %r796, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1116, %r795, 2021161080;
	xor.b32  	%r806, %r1116, -2139062144;
	shr.u32 	%r800, %r796, 4;
	// begin inline asm
	lop3.b32 %r799, %r800, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1117, %r799, 2021161080;
	xor.b32  	%r812, %r1117, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r803, %r804}, {%r59}, {%r806}, {%r771, %r772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r809, %r810}, {%r63}, {%r812}, {%r777, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r815, %r816}, {%r59}, {%r812}, {%r789, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r821, %r822}, {%r63}, {%r806}, {%r815, %r816};
	// end inline asm
	sub.s32 	%r1118, %r803, %r809;
	add.s32 	%r1119, %r1118, 4;
	shr.s32 	%r829, %r1119, 3;
	add.s32 	%r1120, %r821, 4;
	shr.s32 	%r828, %r1120, 3;
	sub.s32 	%r1121, %r804, %r810;
	add.s32 	%r1122, %r1121, 4;
	shr.s32 	%r832, %r1122, 3;
	add.s32 	%r1123, %r822, 4;
	shr.s32 	%r831, %r1123, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r827, %r828, %r829;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r830, %r831, %r832;
	// end inline asm
	or.b32  	%r1124, %r70, %r1352;
	mul.lo.s32 	%r1125, %r1124, 100;
	add.s32 	%r1126, %r71, %r1125;
	mul.wide.u32 	%rd81, %r1126, 4;
	add.s64 	%rd83, %rd43, %rd81;
	st.shared.u32 	[%rd83], %r827;
	add.s32 	%r1127, %r1125, 100;
	add.s32 	%r1128, %r71, %r1127;
	mul.wide.u32 	%rd84, %r1128, 4;
	add.s64 	%rd85, %rd43, %rd84;
	st.shared.u32 	[%rd85], %r830;
	ld.shared.u32 	%r834, [%rd80];
	// begin inline asm
	lop3.b32 %r833, %r834, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1129, %r833, 2021161080;
	xor.b32  	%r844, %r1129, -2139062144;
	shr.u32 	%r838, %r834, 4;
	// begin inline asm
	lop3.b32 %r837, %r838, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1130, %r837, 2021161080;
	xor.b32  	%r850, %r1130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r841, %r842}, {%r36}, {%r844}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r847, %r848}, {%r40}, {%r850}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r853, %r854}, {%r36}, {%r850}, {%r583, %r583};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r859, %r860}, {%r40}, {%r844}, {%r853, %r854};
	// end inline asm
	ld.shared.u32 	%r866, [%rd80+4];
	// begin inline asm
	lop3.b32 %r865, %r866, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1131, %r865, 2021161080;
	xor.b32  	%r876, %r1131, -2139062144;
	shr.u32 	%r870, %r866, 4;
	// begin inline asm
	lop3.b32 %r869, %r870, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1132, %r869, 2021161080;
	xor.b32  	%r882, %r1132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r873, %r874}, {%r44}, {%r876}, {%r841, %r842};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r879, %r880}, {%r48}, {%r882}, {%r847, %r848};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r885, %r886}, {%r44}, {%r882}, {%r859, %r860};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r891, %r892}, {%r48}, {%r876}, {%r885, %r886};
	// end inline asm
	ld.shared.u32 	%r898, [%rd80+8];
	// begin inline asm
	lop3.b32 %r897, %r898, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1133, %r897, 2021161080;
	xor.b32  	%r908, %r1133, -2139062144;
	shr.u32 	%r902, %r898, 4;
	// begin inline asm
	lop3.b32 %r901, %r902, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1134, %r901, 2021161080;
	xor.b32  	%r914, %r1134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r905, %r906}, {%r52}, {%r908}, {%r873, %r874};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r911, %r912}, {%r56}, {%r914}, {%r879, %r880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r917, %r918}, {%r52}, {%r914}, {%r891, %r892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r923, %r924}, {%r56}, {%r908}, {%r917, %r918};
	// end inline asm
	ld.shared.u32 	%r930, [%rd80+12];
	// begin inline asm
	lop3.b32 %r929, %r930, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1135, %r929, 2021161080;
	xor.b32  	%r940, %r1135, -2139062144;
	shr.u32 	%r934, %r930, 4;
	// begin inline asm
	lop3.b32 %r933, %r934, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1136, %r933, 2021161080;
	xor.b32  	%r946, %r1136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r937, %r938}, {%r60}, {%r940}, {%r905, %r906};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r943, %r944}, {%r64}, {%r946}, {%r911, %r912};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r949, %r950}, {%r60}, {%r946}, {%r923, %r924};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r955, %r956}, {%r64}, {%r940}, {%r949, %r950};
	// end inline asm
	ld.shared.u32 	%r962, [%rd80+16];
	// begin inline asm
	lop3.b32 %r961, %r962, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1137, %r961, 2021161080;
	xor.b32  	%r972, %r1137, -2139062144;
	shr.u32 	%r966, %r962, 4;
	// begin inline asm
	lop3.b32 %r965, %r966, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1138, %r965, 2021161080;
	xor.b32  	%r978, %r1138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r969, %r970}, {%r37}, {%r972}, {%r937, %r938};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r975, %r976}, {%r41}, {%r978}, {%r943, %r944};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r981, %r982}, {%r37}, {%r978}, {%r955, %r956};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r987, %r988}, {%r41}, {%r972}, {%r981, %r982};
	// end inline asm
	ld.shared.u32 	%r994, [%rd80+20];
	// begin inline asm
	lop3.b32 %r993, %r994, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1139, %r993, 2021161080;
	xor.b32  	%r1004, %r1139, -2139062144;
	shr.u32 	%r998, %r994, 4;
	// begin inline asm
	lop3.b32 %r997, %r998, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1140, %r997, 2021161080;
	xor.b32  	%r1010, %r1140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1001, %r1002}, {%r45}, {%r1004}, {%r969, %r970};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1007, %r1008}, {%r49}, {%r1010}, {%r975, %r976};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1013, %r1014}, {%r45}, {%r1010}, {%r987, %r988};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1019, %r1020}, {%r49}, {%r1004}, {%r1013, %r1014};
	// end inline asm
	ld.shared.u32 	%r1026, [%rd80+24];
	// begin inline asm
	lop3.b32 %r1025, %r1026, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1141, %r1025, 2021161080;
	xor.b32  	%r1036, %r1141, -2139062144;
	shr.u32 	%r1030, %r1026, 4;
	// begin inline asm
	lop3.b32 %r1029, %r1030, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1142, %r1029, 2021161080;
	xor.b32  	%r1042, %r1142, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1033, %r1034}, {%r53}, {%r1036}, {%r1001, %r1002};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1039, %r1040}, {%r57}, {%r1042}, {%r1007, %r1008};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1045, %r1046}, {%r53}, {%r1042}, {%r1019, %r1020};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1051, %r1052}, {%r57}, {%r1036}, {%r1045, %r1046};
	// end inline asm
	ld.shared.u32 	%r1058, [%rd80+28];
	// begin inline asm
	lop3.b32 %r1057, %r1058, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1143, %r1057, 2021161080;
	xor.b32  	%r1068, %r1143, -2139062144;
	shr.u32 	%r1062, %r1058, 4;
	// begin inline asm
	lop3.b32 %r1061, %r1062, %r573, %r574, 40;
	// end inline asm
	add.s32 	%r1144, %r1061, 2021161080;
	xor.b32  	%r1074, %r1144, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1065, %r1066}, {%r61}, {%r1068}, {%r1033, %r1034};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1071, %r1072}, {%r65}, {%r1074}, {%r1039, %r1040};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1077, %r1078}, {%r61}, {%r1074}, {%r1051, %r1052};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1083, %r1084}, {%r65}, {%r1068}, {%r1077, %r1078};
	// end inline asm
	sub.s32 	%r1145, %r1065, %r1071;
	add.s32 	%r1146, %r1145, 4;
	shr.s32 	%r1091, %r1146, 3;
	add.s32 	%r1147, %r1083, 4;
	shr.s32 	%r1090, %r1147, 3;
	sub.s32 	%r1148, %r1066, %r1072;
	add.s32 	%r1149, %r1148, 4;
	shr.s32 	%r1094, %r1149, 3;
	add.s32 	%r1150, %r1084, 4;
	shr.s32 	%r1093, %r1150, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1089, %r1090, %r1091;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1092, %r1093, %r1094;
	// end inline asm
	add.s32 	%r1151, %r72, %r1125;
	mul.wide.u32 	%rd86, %r1151, 4;
	add.s64 	%rd87, %rd43, %rd86;
	st.shared.u32 	[%rd87], %r1089;
	add.s32 	%r1152, %r72, %r1127;
	mul.wide.u32 	%rd88, %r1152, 4;
	add.s64 	%rd89, %rd43, %rd88;
	st.shared.u32 	[%rd89], %r1092;
	add.s32 	%r1352, %r1352, 8;
	setp.ne.s32 	%p20, %r1352, 32;
	@%p20 bra 	$L__BB0_13;
// %bb.14:                              // %L7937
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1171, [%rd7];
	ld.shared.u32 	%r1172, [%rd8+12800];
	ld.shared.u32 	%r1173, [%rd8+25600];
	ld.shared.u32 	%r1174, [%rd8+38400];
	ld.shared.u32 	%r1175, [%rd9];
	ld.shared.u32 	%r1176, [%rd10+12800];
	ld.shared.u32 	%r1177, [%rd10+25600];
	ld.shared.u32 	%r1178, [%rd10+38400];
	ld.shared.u32 	%r1179, [%rd11];
	ld.shared.u32 	%r1180, [%rd12+12800];
	ld.shared.u32 	%r1181, [%rd12+25600];
	ld.shared.u32 	%r1182, [%rd12+38400];
	ld.shared.u32 	%r1183, [%rd13];
	ld.shared.u32 	%r1184, [%rd14+12800];
	ld.shared.u32 	%r1185, [%rd14+25600];
	ld.shared.u32 	%r1186, [%rd14+38400];
	cvt.s32.s16 	%r1187, %r1171;
	shr.s32 	%r1188, %r1171, 16;
	cvt.s32.s16 	%r1189, %r1172;
	shr.s32 	%r1190, %r1172, 16;
	cvt.s32.s16 	%r1191, %r1173;
	shr.s32 	%r1192, %r1173, 16;
	cvt.s32.s16 	%r1193, %r1174;
	shr.s32 	%r1194, %r1174, 16;
	cvt.s32.s16 	%r1195, %r1175;
	shr.s32 	%r1196, %r1175, 16;
	cvt.s32.s16 	%r1197, %r1176;
	shr.s32 	%r1198, %r1176, 16;
	cvt.s32.s16 	%r1199, %r1177;
	shr.s32 	%r1200, %r1177, 16;
	cvt.s32.s16 	%r1201, %r1178;
	shr.s32 	%r1202, %r1178, 16;
	cvt.s32.s16 	%r1203, %r1179;
	shr.s32 	%r1204, %r1179, 16;
	cvt.s32.s16 	%r1205, %r1180;
	shr.s32 	%r1206, %r1180, 16;
	cvt.s32.s16 	%r1207, %r1181;
	shr.s32 	%r1208, %r1181, 16;
	cvt.s32.s16 	%r1209, %r1182;
	shr.s32 	%r1210, %r1182, 16;
	cvt.s32.s16 	%r1211, %r1183;
	shr.s32 	%r1212, %r1183, 16;
	cvt.s32.s16 	%r1213, %r1184;
	shr.s32 	%r1214, %r1184, 16;
	cvt.s32.s16 	%r1215, %r1185;
	shr.s32 	%r1216, %r1185, 16;
	cvt.s32.s16 	%r1217, %r1186;
	shr.s32 	%r1218, %r1186, 16;
	add.s32 	%r1219, %r1187, %r73;
	add.s32 	%r1220, %r1219, %r1189;
	add.s32 	%r1221, %r1220, %r1191;
	add.s32 	%r1222, %r1221, %r1193;
	shr.s32 	%r1223, %r1222, %r74;
	add.s32 	%r1224, %r1188, %r73;
	add.s32 	%r1225, %r1224, %r1190;
	add.s32 	%r1226, %r1225, %r1192;
	add.s32 	%r1227, %r1226, %r1194;
	shr.s32 	%r1228, %r1227, %r74;
	add.s32 	%r1229, %r1195, %r73;
	add.s32 	%r1230, %r1229, %r1197;
	add.s32 	%r1231, %r1230, %r1199;
	add.s32 	%r1232, %r1231, %r1201;
	shr.s32 	%r1233, %r1232, %r74;
	add.s32 	%r1234, %r1196, %r73;
	add.s32 	%r1235, %r1234, %r1198;
	add.s32 	%r1236, %r1235, %r1200;
	add.s32 	%r1237, %r1236, %r1202;
	shr.s32 	%r1238, %r1237, %r74;
	add.s32 	%r1239, %r1203, %r73;
	add.s32 	%r1240, %r1239, %r1205;
	add.s32 	%r1241, %r1240, %r1207;
	add.s32 	%r1242, %r1241, %r1209;
	shr.s32 	%r1243, %r1242, %r74;
	add.s32 	%r1244, %r1204, %r73;
	add.s32 	%r1245, %r1244, %r1206;
	add.s32 	%r1246, %r1245, %r1208;
	add.s32 	%r1247, %r1246, %r1210;
	shr.s32 	%r1248, %r1247, %r74;
	add.s32 	%r1249, %r1211, %r73;
	add.s32 	%r1250, %r1249, %r1213;
	add.s32 	%r1251, %r1250, %r1215;
	add.s32 	%r1252, %r1251, %r1217;
	shr.s32 	%r1253, %r1252, %r74;
	add.s32 	%r1254, %r1212, %r73;
	add.s32 	%r1255, %r1254, %r1214;
	add.s32 	%r1256, %r1255, %r1216;
	add.s32 	%r1257, %r1256, %r1218;
	shr.s32 	%r1258, %r1257, %r74;
	max.s32 	%r1259, %r1223, -7;
	min.s32 	%r1158, %r1259, 7;
	max.s32 	%r1260, %r1228, -7;
	min.s32 	%r1165, %r1260, 7;
	max.s32 	%r1261, %r1233, -7;
	min.s32 	%r1157, %r1261, 7;
	max.s32 	%r1262, %r1238, -7;
	min.s32 	%r1164, %r1262, 7;
	max.s32 	%r1263, %r1243, -7;
	min.s32 	%r1155, %r1263, 7;
	max.s32 	%r1264, %r1248, -7;
	min.s32 	%r1162, %r1264, 7;
	max.s32 	%r1265, %r1253, -7;
	min.s32 	%r1154, %r1265, 7;
	max.s32 	%r1266, %r1258, -7;
	min.s32 	%r1161, %r1266, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1153, %r1154, %r1155, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1156, %r1157, %r1158, %r1153;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1160, %r1161, %r1162, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r1163, %r1164, %r1165, %r1160;
	// end inline asm
	shl.b32 	%r1170, %r1163, 4;
	// begin inline asm
	lop3.b32 %r1277, %r574, %r1156, %r1170, 202;
	// end inline asm
	setp.eq.s32 	%p21, %r1345, 0;
	selp.b32 	%r1350, %r1277, %r1350, %p21;
	selp.b32 	%r1351, %r1277, %r1351, %p21;
	setp.eq.s32 	%p22, %r1345, 32;
	selp.b32 	%r1346, %r1277, %r1346, %p22;
	selp.b32 	%r1347, %r1277, %r1347, %p22;
	setp.eq.s32 	%p23, %r1345, 64;
	selp.b32 	%r1348, %r1277, %r1348, %p23;
	selp.b32 	%r1349, %r1277, %r1349, %p23;
	add.s32 	%r23, %r1345, 32;
	setp.ne.s32 	%p24, %r1345, 96;
	mov.u32 	%r1345, %r23;
	@%p24 bra 	$L__BB0_11;
// %bb.15:                              // %L10321
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p25, %r75, 0;
	// begin inline asm
	prmt.b32 %r1267, %r1350, %r1346, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1271, %r1351, %r1347, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r1348, %r1277, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1349, %r1277, %r353;
	// end inline asm
	selp.b32 	%r1315, %r1271, %r1267, %p25;
	shfl.sync.bfly.b32	%r1316, %r1315, 1, 31, -1;
	selp.b32 	%r1284, %r1267, %r1316, %p25;
	selp.b32 	%r1285, %r1316, %r1271, %p25;
	selp.b32 	%r1317, %r1279, %r1275, %p25;
	shfl.sync.bfly.b32	%r1318, %r1317, 1, 31, -1;
	selp.b32 	%r1292, %r1275, %r1318, %p25;
	selp.b32 	%r1293, %r1318, %r1279, %p25;
	// begin inline asm
	prmt.b32 %r1283, %r1284, %r1285, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1284, %r1285, %r353;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1292, %r1293, %r349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1292, %r1293, %r353;
	// end inline asm
	selp.b32 	%r1319, %r1291, %r1283, %p10;
	shfl.sync.bfly.b32	%r1320, %r1319, 2, 31, -1;
	selp.b32 	%r1300, %r1283, %r1320, %p10;
	selp.b32 	%r1301, %r1320, %r1291, %p10;
	selp.b32 	%r1321, %r1295, %r1287, %p10;
	shfl.sync.bfly.b32	%r1322, %r1321, 2, 31, -1;
	selp.b32 	%r1308, %r1287, %r1322, %p10;
	selp.b32 	%r1309, %r1322, %r1295, %p10;
	// begin inline asm
	prmt.b32 %r1299, %r1300, %r1301, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1300, %r1301, %r225;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r1308, %r1309, %r221;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1311, %r1308, %r1309, %r225;
	// end inline asm
	selp.b32 	%r1323, %r1307, %r1299, %p11;
	shfl.sync.bfly.b32	%r1324, %r1323, 4, 31, -1;
	selp.b32 	%r1325, %r1299, %r1324, %p11;
	selp.b32 	%r1326, %r1324, %r1307, %p11;
	selp.b32 	%r1327, %r1311, %r1303, %p11;
	shfl.sync.bfly.b32	%r1328, %r1327, 4, 31, -1;
	selp.b32 	%r1329, %r1303, %r1328, %p11;
	selp.b32 	%r1330, %r1328, %r1311, %p11;
	selp.b32 	%r1331, %r1329, %r1325, %p25;
	shfl.sync.bfly.b32	%r1332, %r1331, 1, 31, -1;
	selp.b32 	%r1333, %r1325, %r1332, %p25;
	selp.b32 	%r1334, %r1332, %r1329, %p25;
	selp.b32 	%r1335, %r1330, %r1326, %p25;
	shfl.sync.bfly.b32	%r1336, %r1335, 1, 31, -1;
	selp.b32 	%r1337, %r1326, %r1336, %p25;
	selp.b32 	%r1338, %r1336, %r1330, %p25;
	and.b32  	%r1339, %r1344, 8064;
	or.b32  	%r1340, %r1339, %r76;
	or.b32  	%r1341, %r1340, %r77;
	cvt.u64.u32 	%rd90, %r1341;
	add.s64 	%rd91, %rd4, %rd90;
	st.global.v4.u32 	[%rd91], {%r1333, %r1337, %r1334, %r1338};
	add.s32 	%r24, %r1344, 128;
	setp.ne.s32 	%p28, %r1344, 32640;
	mov.u32 	%r1344, %r24;
	@%p28 bra 	$L__BB0_9;
$L__BB0_16:                             // %L10700
	mov.u32 	%r1342, 0;
	st.global.u32 	[%rd6], %r1342;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r1343, 2;
	st.global.u32 	[%rd6], %r1343;
	mov.u64 	%rd92, exception876;
	cvta.global.u64 	%rd93, %rd92;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd93;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1882;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1882;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L370
	mov.u32 	%r97, 2;
	st.global.u32 	[%rd6], %r97;
	mov.u64 	%rd23, exception876;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r78;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
