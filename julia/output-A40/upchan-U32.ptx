// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1271[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<229>;
	.reg .b16 	%rs<300>;
	.reg .f32 	%f<929>;
	.reg .b32 	%r<2425>;
	.reg .b64 	%rd<138>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r152, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r153, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r153, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd54, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	ld.param.u64 	%rd50, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r154, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r155, %r2, %r154;
	or.b32  	%r156, %r155, %r4;
	mul.wide.u32 	%rd60, %r156, 4;
	add.s64 	%rd4, %rd54, %rd60;
	mov.u32 	%r157, 1;
	st.global.u32 	[%rd4], %r157;
	ld.global.u32 	%r5, [%rd50];
	setp.lt.u32 	%p2, %r5, 32769;
	and.b32  	%r158, %r5, 255;
	setp.eq.s32 	%p3, %r158, 0;
	and.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L271
	bfe.u32 	%r14, %r2, 1, 1;
	and.b32  	%r15, %r2, 1;
	bfe.u32 	%r17, %r2, 2, 1;
	shl.b32 	%r164, %r17, 1;
	shl.b32 	%r165, %r15, 2;
	shl.b32 	%r166, %r14, 3;
	or.b32  	%r167, %r165, %r166;
	or.b32  	%r168, %r164, %r167;
	shr.u32 	%r18, %r2, 4;
	or.b32  	%r19, %r18, %r168;
	or.b32  	%r20, %r19, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r19;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p5, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p5;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r169, %f193;
	and.b32  	%r170, %r169, -2147483648;
	or.b32  	%r171, %r170, 1056964608;
	mov.b32 	%f194, %r171;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p6, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p6;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p7, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p7;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p10, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p10 bra 	LBB0_6;
// %bb.5:                               // %L479
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_6:                                 // %L482
	cvt.rzi.s32.f32 	%r172, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r20;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p11, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p11;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r176, %f227;
	and.b32  	%r177, %r176, -2147483648;
	or.b32  	%r178, %r177, 1056964608;
	mov.b32 	%f228, %r178;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p12, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p12;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p13, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p13;
	cvt.rzi.s32.f32 	%r179, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p16, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p16 bra 	LBB0_8;
// %bb.7:                               // %L499
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_8:                                 // %L502
	add.s32 	%r173, %r172, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r180, %r179, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r186, %r19, 32;
	or.b32  	%r22, %r19, 48;
	cvt.rn.f32.s32 	%f255, %r186;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p17, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p17;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r187, %f262;
	and.b32  	%r188, %r187, -2147483648;
	or.b32  	%r189, %r188, 1056964608;
	mov.b32 	%f263, %r189;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p18, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p18;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p19, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p19;
	cvt.rzi.s32.f32 	%r190, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r191, %r190, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p22, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p22 bra 	LBB0_10;
// %bb.9:                               // %L587
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_10:                                // %L590
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r174, %r173, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r181, %r180, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r192, %r191, 1;
	cvt.rn.f32.s32 	%f289, %r22;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p23, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p23;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r194, %f296;
	and.b32  	%r195, %r194, -2147483648;
	or.b32  	%r196, %r195, 1056964608;
	mov.b32 	%f297, %r196;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p24, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p24;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p25, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p25;
	cvt.rzi.s32.f32 	%r197, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r198, %r197, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r199, %r198, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p28, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p28 bra 	LBB0_12;
// %bb.11:                              // %L607
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_12:                                // %L610
	shl.b32 	%r6, %r2, 1;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p8, %r174, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p14, %r181, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p20, %r192, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p26, %r199, 1;
	or.b32  	%r204, %r19, 64;
	or.b32  	%r24, %r19, 80;
	cvt.rn.f32.s32 	%f324, %r204;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p29, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p29;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r205, %f331;
	and.b32  	%r206, %r205, -2147483648;
	or.b32  	%r207, %r206, 1056964608;
	mov.b32 	%f332, %r207;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p30, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p30;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p31, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p31;
	cvt.rzi.s32.f32 	%r208, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r209, %r208, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r210, %r209, 1;
	setp.eq.b32 	%p32, %r210, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p34, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p34 bra 	LBB0_14;
// %bb.13:                              // %L695
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_14:                                // %L698
	and.b32  	%r7, %r6, 8;
	and.b32  	%r8, %r2, 16;
	selp.f32 	%f212, %f210, %f211, %p8;
	and.b32  	%r175, %r173, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p14;
	and.b32  	%r182, %r180, 2;
	selp.f32 	%f281, %f279, %f280, %p20;
	and.b32  	%r193, %r191, 2;
	selp.f32 	%f315, %f313, %f314, %p26;
	and.b32  	%r200, %r198, 2;
	selp.f32 	%f350, %f348, %f349, %p32;
	and.b32  	%r211, %r209, 2;
	cvt.rn.f32.s32 	%f358, %r24;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p35, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p35;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r212, %f365;
	and.b32  	%r213, %r212, -2147483648;
	or.b32  	%r214, %r213, 1056964608;
	mov.b32 	%f366, %r214;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p36, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p36;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p37, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p37;
	cvt.rzi.s32.f32 	%r215, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r216, %r215, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r217, %r216, 1;
	setp.eq.b32 	%p38, %r217, 1;
	selp.f32 	%f384, %f382, %f383, %p38;
	and.b32  	%r218, %r216, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p40, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p40 bra 	LBB0_16;
// %bb.15:                              // %L715
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_16:                                // %L718
	or.b32  	%r160, %r8, %r7;
	and.b32  	%r9, %r2, 2;
	shl.b32 	%r10, %r2, 2;
	setp.eq.s32 	%p9, %r175, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p15, %r182, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p21, %r193, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p27, %r200, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p33, %r211, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p39, %r218, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r222, %r19, 96;
	or.b32  	%r26, %r19, 112;
	cvt.rn.f32.s32 	%f393, %r222;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p41, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p41;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r223, %f400;
	and.b32  	%r224, %r223, -2147483648;
	or.b32  	%r225, %r224, 1056964608;
	mov.b32 	%f401, %r225;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p42, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p42;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p43, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p43;
	cvt.rzi.s32.f32 	%r226, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r227, %r226, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r228, %r227, 1;
	setp.eq.b32 	%p44, %r228, 1;
	selp.f32 	%f419, %f417, %f418, %p44;
	and.b32  	%r229, %r227, 2;
	setp.eq.s32 	%p45, %r229, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p46, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p46 bra 	LBB0_18;
// %bb.17:                              // %L803
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_18:                                // %L806
	or.b32  	%r161, %r160, %r9;
	and.b32  	%r11, %r10, 4;
	selp.f32 	%f215, %f212, %f214, %p9;
	selp.f32 	%f249, %f246, %f248, %p15;
	selp.f32 	%f284, %f281, %f283, %p21;
	selp.f32 	%f318, %f315, %f317, %p27;
	selp.f32 	%f353, %f350, %f352, %p33;
	selp.f32 	%f387, %f384, %f386, %p39;
	selp.f32 	%f422, %f419, %f421, %p45;
	cvt.rn.f32.s32 	%f427, %r26;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p47, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p47;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r230, %f434;
	and.b32  	%r231, %r230, -2147483648;
	or.b32  	%r232, %r231, 1056964608;
	mov.b32 	%f435, %r232;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p48, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p48;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p49, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p49;
	cvt.rzi.s32.f32 	%r233, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r234, %r233, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r235, %r234, 1;
	setp.eq.b32 	%p50, %r235, 1;
	selp.f32 	%f453, %f451, %f452, %p50;
	and.b32  	%r236, %r234, 2;
	setp.eq.s32 	%p51, %r236, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p51;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p52, %f35, 0f00000000;
	@%p52 bra 	LBB0_20;
// %bb.19:                              // %L823
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_20:                                // %L826
	or.b32  	%r162, %r161, %r11;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r28, %r19, 31;
	cvt.rn.f32.s32 	%f461, %r28;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p53, %f899, 0f40000000;
	@%p53 bra 	LBB0_32;
// %bb.21:
	setp.gtu.f32 	%p54, %f899, 0f4B800000;
	@%p54 bra 	LBB0_28;
	bra.uni 	LBB0_22;
LBB0_28:
	mov.b32 	%r30, %f899;
	and.b32  	%r240, %r30, 8388607;
	or.b32  	%r2395, %r240, 1065353216;
	mov.b32 	%f898, %r2395;
	add.s32 	%r241, %r30, -1073741824;
	and.b32  	%r2396, %r241, -8388608;
	setp.eq.s32 	%p60, %r2396, 0;
	@%p60 bra 	LBB0_31;
// %bb.29:                              // %.lr.ph1468.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_30:                                // %.lr.ph1468
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r242, %r2396, 192937984;
	add.s32 	%r243, %r242, %r2395;
	mov.b32 	%f473, %r243;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2396, %r2396, %r242;
	mov.b32 	%r2395, %f898;
	setp.ne.s32 	%p61, %r2396, 0;
	setp.ne.s32 	%p62, %r2395, 0;
	and.pred  	%p63, %p61, %p62;
	@%p63 bra 	LBB0_30;
LBB0_31:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p64, %r30, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p64;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_32;
LBB0_22:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f40, %f464;
	fma.rn.f32 	%f41, %f40, 0fC0000000, %f899;
	mov.b32 	%r29, %f41;
	setp.lt.u32 	%p55, %r29, 1073741824;
	mov.f32 	%f897, %f40;
	@%p55 bra 	LBB0_27;
// %bb.23:
	setp.lt.u32 	%p56, %r29, -2147483647;
	@%p56 bra 	LBB0_25;
// %bb.24:
	add.f32 	%f469, %f40, 0fBF800000;
	setp.lt.f32 	%p59, %f41, 0fC0000000;
	selp.f32 	%f470, %f469, %f40, %p59;
	add.f32 	%f897, %f470, 0fBF800000;
	bra.uni 	LBB0_27;
LBB0_25:
	add.f32 	%f897, %f40, 0f3F800000;
	setp.ltu.f32 	%p57, %f41, 0f40800000;
	@%p57 bra 	LBB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f466, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p58, %f466, 0f00000000;
	selp.f32 	%f467, %f897, %f40, %p58;
	add.f32 	%f468, %f467, 0f3F800000;
	add.f32 	%f897, %f468, 0f3F800000;
LBB0_27:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_32:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r163, %r162, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p65, %f482, 0f7F800000;
	@%p65 bra 	LBB0_34;
// %bb.33:
	mov.b32 	%r244, %f38;
	and.b32  	%r245, %r244, -2147483648;
	mov.b32 	%r246, %f899;
	or.b32  	%r247, %r245, %r246;
	mov.b32 	%f899, %r247;
LBB0_34:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	mul.wide.u32 	%rd63, %r163, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r248, %f483;
	and.b32  	%r249, %r248, -2147483648;
	or.b32  	%r250, %r249, 1056964608;
	mov.b32 	%f484, %r250;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p66, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p66;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p67, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p67;
	cvt.rzi.s32.f32 	%r251, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r252, %r251, 1;
	setp.eq.b32 	%p68, %r252, 1;
	selp.f32 	%f502, %f500, %f501, %p68;
	selp.f32 	%f503, %f501, %f500, %p68;
	and.b32  	%r253, %r251, 2;
	setp.eq.s32 	%p69, %r253, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p69;
	add.s32 	%r254, %r251, 1;
	and.b32  	%r255, %r254, 2;
	setp.eq.s32 	%p70, %r255, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p70;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p71, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p71;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p72, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r256, %r28, 496;
	cvt.rn.f32.s32 	%f513, %r256;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p73, %f903, 0f40000000;
	@%p73 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p74, %f903, 0f4B800000;
	@%p74 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r38, %f903;
	and.b32  	%r257, %r38, 8388607;
	or.b32  	%r2397, %r257, 1065353216;
	mov.b32 	%f902, %r2397;
	add.s32 	%r258, %r38, -1073741824;
	and.b32  	%r2398, %r258, -8388608;
	setp.eq.s32 	%p80, %r2398, 0;
	@%p80 bra 	LBB0_45;
// %bb.43:                              // %.lr.ph1463.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_44:                                // %.lr.ph1463
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r259, %r2398, 192937984;
	add.s32 	%r260, %r259, %r2397;
	mov.b32 	%f525, %r260;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2398, %r2398, %r259;
	mov.b32 	%r2397, %f902;
	setp.ne.s32 	%p81, %r2398, 0;
	setp.ne.s32 	%p82, %r2397, 0;
	and.pred  	%p83, %p81, %p82;
	@%p83 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i945
	setp.gt.u32 	%p84, %r38, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p84;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i911
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f59, %f516;
	fma.rn.f32 	%f60, %f59, 0fC0000000, %f903;
	mov.b32 	%r37, %f60;
	setp.lt.u32 	%p75, %r37, 1073741824;
	mov.f32 	%f901, %f59;
	@%p75 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p76, %r37, -2147483647;
	@%p76 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f521, %f59, 0fBF800000;
	setp.lt.f32 	%p79, %f60, 0fC0000000;
	selp.f32 	%f522, %f521, %f59, %p79;
	add.f32 	%f901, %f522, 0fBF800000;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f901, %f59, 0f3F800000;
	setp.ltu.f32 	%p77, %f60, 0f40800000;
	@%p77 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i916
	fma.rn.f32 	%f518, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p78, %f518, 0f00000000;
	selp.f32 	%f519, %f901, %f59, %p78;
	add.f32 	%f520, %f519, 0f3F800000;
	add.f32 	%f901, %f520, 0f3F800000;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i919
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i948
	add.s64 	%rd64, %rd1, %rd63;
	mov.b32 	%r185, %f254;
	mov.b32 	%r184, %f6;
	mov.b32 	%r203, %f323;
	mov.b32 	%r202, %f15;
	mov.b32 	%r221, %f392;
	mov.b32 	%r220, %f24;
	mov.b32 	%r239, %f460;
	mov.b32 	%r238, %f33;
	selp.f32 	%f56, %f512, %f508, %p72;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p85, %f534, 0f7F800000;
	@%p85 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r261, %f57;
	and.b32  	%r262, %r261, -2147483648;
	mov.b32 	%r263, %f903;
	or.b32  	%r264, %r262, %r263;
	mov.b32 	%f903, %r264;
LBB0_48:                                // %__nv_fmodf.exit951
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r12, [%rd64];
	shr.u32 	%r13, %r2, 1;
	shr.u32 	%r16, %r2, 2;
	// begin inline asm
	cvt.rn.f16x2.f32 %r183, %r185, %r184;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r201, %r203, %r202;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r219, %r221, %r220;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r237, %r239, %r238;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r271, %f535;
	and.b32  	%r272, %r271, -2147483648;
	or.b32  	%r273, %r272, 1056964608;
	mov.b32 	%f536, %r273;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p86, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p86;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p87, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p87;
	cvt.rzi.s32.f32 	%r274, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r275, %r274, 1;
	setp.eq.b32 	%p88, %r275, 1;
	selp.f32 	%f554, %f552, %f553, %p88;
	selp.f32 	%f555, %f553, %f552, %p88;
	and.b32  	%r276, %r274, 2;
	setp.eq.s32 	%p89, %r276, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p89;
	add.s32 	%r277, %r274, 1;
	and.b32  	%r278, %r277, 2;
	setp.eq.s32 	%p90, %r278, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p90;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p91, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p91;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p92, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p92;
	mov.b32 	%r267, %f566;
	mov.b32 	%r266, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r45, %r267, %r266;
	// end inline asm
	mov.b32 	%r270, %f563;
	mov.b32 	%r269, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r270, %r269;
	// end inline asm
	mov.u64 	%rd125, 2;
	mov.u64 	%rd124, -2;
LBB0_49:                                // %L948.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd125, %rd125, %rd125;
	add.s64 	%rd8, %rd124, 1;
	setp.ge.u64 	%p93, %rd8, %rd124;
	mov.u64 	%rd124, %rd8;
	@%p93 bra 	LBB0_49;
// %bb.50:                              // %L955
	and.b64  	%rd67, %rd125, 9223372036854775807;
	setp.ne.s64 	%p94, %rd67, 16;
	@%p94 bra 	LBB0_130;
// %bb.51:                              // %L957
	and.b32  	%r279, %r2, 3;
	mul.lo.s32 	%r280, %r279, %r16;
	shl.b32 	%r281, %r280, 1;
	neg.s32 	%r47, %r281;
	cvt.rn.f32.s32 	%f567, %r47;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p95, %f907, 0f40000000;
	@%p95 bra 	LBB0_63;
// %bb.52:
	setp.gtu.f32 	%p96, %f907, 0f4B800000;
	@%p96 bra 	LBB0_59;
	bra.uni 	LBB0_53;
LBB0_59:
	mov.b32 	%r49, %f907;
	and.b32  	%r282, %r49, 8388607;
	or.b32  	%r2399, %r282, 1065353216;
	mov.b32 	%f906, %r2399;
	add.s32 	%r283, %r49, -1073741824;
	and.b32  	%r2400, %r283, -8388608;
	setp.eq.s32 	%p102, %r2400, 0;
	@%p102 bra 	LBB0_62;
// %bb.60:                              // %.lr.ph1448.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_61:                                // %.lr.ph1448
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r284, %r2400, 192937984;
	add.s32 	%r285, %r284, %r2399;
	mov.b32 	%f579, %r285;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2400, %r2400, %r284;
	mov.b32 	%r2399, %f906;
	setp.ne.s32 	%p103, %r2400, 0;
	setp.ne.s32 	%p104, %r2399, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	LBB0_61;
LBB0_62:                                // %__internal_fmodf_slowpath_mod.exit.i.i998
	setp.gt.u32 	%p106, %r49, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_63;
LBB0_53:                                // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f76, %f570;
	fma.rn.f32 	%f77, %f76, 0fC0000000, %f907;
	mov.b32 	%r48, %f77;
	setp.lt.u32 	%p97, %r48, 1073741824;
	mov.f32 	%f905, %f76;
	@%p97 bra 	LBB0_58;
// %bb.54:
	setp.lt.u32 	%p98, %r48, -2147483647;
	@%p98 bra 	LBB0_56;
// %bb.55:
	add.f32 	%f575, %f76, 0fBF800000;
	setp.lt.f32 	%p101, %f77, 0fC0000000;
	selp.f32 	%f576, %f575, %f76, %p101;
	add.f32 	%f905, %f576, 0fBF800000;
	bra.uni 	LBB0_58;
LBB0_56:
	add.f32 	%f905, %f76, 0f3F800000;
	setp.ltu.f32 	%p99, %f77, 0f40800000;
	@%p99 bra 	LBB0_58;
// %bb.57:                              // %__nv_fmaf_rn.exit.i.i.i969
	fma.rn.f32 	%f572, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p100, %f572, 0f00000000;
	selp.f32 	%f573, %f905, %f76, %p100;
	add.f32 	%f574, %f573, 0f3F800000;
	add.f32 	%f905, %f574, 0f3F800000;
LBB0_58:                                // %__internal_fmodf_fastpath_quot.exit.i.i972
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_63:                                // %__internal_fmodf_kernel.exit.i1001
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p107, %f588, 0f7F800000;
	@%p107 bra 	LBB0_65;
// %bb.64:
	mov.b32 	%r286, %f74;
	and.b32  	%r287, %r286, -2147483648;
	mov.b32 	%r288, %f907;
	or.b32  	%r289, %r287, %r288;
	mov.b32 	%f907, %r289;
LBB0_65:                                // %__nv_fmodf.exit1004
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r290, %f589;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f590, %r292;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p108, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p108;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p109, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p109;
	cvt.rzi.s32.f32 	%r293, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r294, %r293, 1;
	setp.eq.b32 	%p110, %r294, 1;
	selp.f32 	%f608, %f606, %f607, %p110;
	selp.f32 	%f609, %f607, %f606, %p110;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p111, %r295, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p111;
	add.s32 	%r296, %r293, 1;
	and.b32  	%r297, %r296, 2;
	setp.eq.s32 	%p112, %r297, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p112;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p113, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p113;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p114, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	shl.b32 	%r298, %r16, 3;
	sub.s32 	%r299, %r47, %r298;
	cvt.rn.f32.s32 	%f619, %r299;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p115, %f911, 0f40000000;
	@%p115 bra 	LBB0_77;
// %bb.66:
	setp.gtu.f32 	%p116, %f911, 0f4B800000;
	@%p116 bra 	LBB0_73;
	bra.uni 	LBB0_67;
LBB0_73:
	mov.b32 	%r57, %f911;
	and.b32  	%r300, %r57, 8388607;
	or.b32  	%r2401, %r300, 1065353216;
	mov.b32 	%f910, %r2401;
	add.s32 	%r301, %r57, -1073741824;
	and.b32  	%r2402, %r301, -8388608;
	setp.eq.s32 	%p122, %r2402, 0;
	@%p122 bra 	LBB0_76;
// %bb.74:                              // %.lr.ph1438.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_75:                                // %.lr.ph1438
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r2402, 192937984;
	add.s32 	%r303, %r302, %r2401;
	mov.b32 	%f631, %r303;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2402, %r2402, %r302;
	mov.b32 	%r2401, %f910;
	setp.ne.s32 	%p123, %r2402, 0;
	setp.ne.s32 	%p124, %r2401, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	LBB0_75;
LBB0_76:                                // %__internal_fmodf_slowpath_mod.exit.i.i1051
	setp.gt.u32 	%p126, %r57, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_77;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i1017
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f95, %f622;
	fma.rn.f32 	%f96, %f95, 0fC0000000, %f911;
	mov.b32 	%r56, %f96;
	setp.lt.u32 	%p117, %r56, 1073741824;
	mov.f32 	%f909, %f95;
	@%p117 bra 	LBB0_72;
// %bb.68:
	setp.lt.u32 	%p118, %r56, -2147483647;
	@%p118 bra 	LBB0_70;
// %bb.69:
	add.f32 	%f627, %f95, 0fBF800000;
	setp.lt.f32 	%p121, %f96, 0fC0000000;
	selp.f32 	%f628, %f627, %f95, %p121;
	add.f32 	%f909, %f628, 0fBF800000;
	bra.uni 	LBB0_72;
LBB0_70:
	add.f32 	%f909, %f95, 0f3F800000;
	setp.ltu.f32 	%p119, %f96, 0f40800000;
	@%p119 bra 	LBB0_72;
// %bb.71:                              // %__nv_fmaf_rn.exit.i.i.i1022
	fma.rn.f32 	%f624, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p120, %f624, 0f00000000;
	selp.f32 	%f625, %f909, %f95, %p120;
	add.f32 	%f626, %f625, 0f3F800000;
	add.f32 	%f909, %f626, 0f3F800000;
LBB0_72:                                // %__internal_fmodf_fastpath_quot.exit.i.i1025
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_77:                                // %__internal_fmodf_kernel.exit.i1054
	selp.f32 	%f92, %f618, %f614, %p114;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p127, %f640, 0f7F800000;
	@%p127 bra 	LBB0_79;
// %bb.78:
	mov.b32 	%r304, %f93;
	and.b32  	%r305, %r304, -2147483648;
	mov.b32 	%r306, %f911;
	or.b32  	%r307, %r305, %r306;
	mov.b32 	%f911, %r307;
LBB0_79:                                // %__nv_fmodf.exit1057
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r320, %f641;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f642, %r322;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p128, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p128;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p129, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p129;
	cvt.rzi.s32.f32 	%r323, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r324, %r323, 1;
	setp.eq.b32 	%p130, %r324, 1;
	selp.f32 	%f660, %f658, %f659, %p130;
	selp.f32 	%f661, %f659, %f658, %p130;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p131, %r325, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p131;
	add.s32 	%r326, %r323, 1;
	and.b32  	%r327, %r326, 2;
	setp.eq.s32 	%p132, %r327, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p132;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p133, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p133;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p134, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p134;
	mov.b32 	%r310, %f672;
	mov.b32 	%r309, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r64, %r310, %r309;
	// end inline asm
	mov.b32 	%r316, %f669;
	xor.b32  	%r313, %r316, -2147483648;
	mov.b32 	%r315, %f91;
	xor.b32  	%r312, %r315, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r65, %r313, %r312;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r66, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r67, %r310, %r309;
	// end inline asm
	mov.u64 	%rd127, 2;
	mov.u64 	%rd126, -2;
LBB0_80:                                // %L1120.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd127, %rd127, %rd127;
	add.s64 	%rd12, %rd126, 1;
	setp.ge.u64 	%p135, %rd12, %rd126;
	mov.u64 	%rd126, %rd12;
	@%p135 bra 	LBB0_80;
// %bb.81:                              // %L1127
	and.b64  	%rd72, %rd127, 9223372036854775807;
	setp.ne.s64 	%p136, %rd72, 16;
	@%p136 bra 	LBB0_129;
// %bb.82:                              // %L1129
	shl.b32 	%r328, %r14, 1;
	neg.s32 	%r68, %r328;
	mov.u64 	%rd129, 2;
	mov.u64 	%rd128, -2;
LBB0_83:                                // %L1192.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd129, %rd129, %rd129;
	add.s64 	%rd16, %rd128, 1;
	setp.ge.u64 	%p137, %rd16, %rd128;
	mov.u64 	%rd128, %rd16;
	@%p137 bra 	LBB0_83;
// %bb.84:                              // %L1199
	mul.lo.s32 	%r69, %r68, %r16;
	cvt.rn.f32.s32 	%f673, %r69;
	shl.b64 	%rd77, %rd129, 1;
	cvt.rn.f32.s64 	%f674, %rd77;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p138, %f915, 0f40000000;
	@%p138 bra 	LBB0_96;
// %bb.85:
	setp.gtu.f32 	%p139, %f915, 0f4B800000;
	@%p139 bra 	LBB0_92;
	bra.uni 	LBB0_86;
LBB0_92:
	mov.b32 	%r71, %f915;
	and.b32  	%r329, %r71, 8388607;
	or.b32  	%r2403, %r329, 1065353216;
	mov.b32 	%f914, %r2403;
	add.s32 	%r330, %r71, -1073741824;
	and.b32  	%r2404, %r330, -8388608;
	setp.eq.s32 	%p145, %r2404, 0;
	@%p145 bra 	LBB0_95;
// %bb.93:                              // %.lr.ph1423.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_94:                                // %.lr.ph1423
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r2404, 192937984;
	add.s32 	%r332, %r331, %r2403;
	mov.b32 	%f685, %r332;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2404, %r2404, %r331;
	mov.b32 	%r2403, %f914;
	setp.ne.s32 	%p146, %r2404, 0;
	setp.ne.s32 	%p147, %r2403, 0;
	and.pred  	%p148, %p146, %p147;
	@%p148 bra 	LBB0_94;
LBB0_95:                                // %__internal_fmodf_slowpath_mod.exit.i.i1104
	setp.gt.u32 	%p149, %r71, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p149;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_96;
LBB0_86:                                // %__nv_fast_fdividef.exit.i.i.i1070
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f112, %f676;
	fma.rn.f32 	%f113, %f112, 0fC0000000, %f915;
	mov.b32 	%r70, %f113;
	setp.lt.u32 	%p140, %r70, 1073741824;
	mov.f32 	%f913, %f112;
	@%p140 bra 	LBB0_91;
// %bb.87:
	setp.lt.u32 	%p141, %r70, -2147483647;
	@%p141 bra 	LBB0_89;
// %bb.88:
	add.f32 	%f681, %f112, 0fBF800000;
	setp.lt.f32 	%p144, %f113, 0fC0000000;
	selp.f32 	%f682, %f681, %f112, %p144;
	add.f32 	%f913, %f682, 0fBF800000;
	bra.uni 	LBB0_91;
LBB0_89:
	add.f32 	%f913, %f112, 0f3F800000;
	setp.ltu.f32 	%p142, %f113, 0f40800000;
	@%p142 bra 	LBB0_91;
// %bb.90:                              // %__nv_fmaf_rn.exit.i.i.i1075
	fma.rn.f32 	%f678, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p143, %f678, 0f00000000;
	selp.f32 	%f679, %f913, %f112, %p143;
	add.f32 	%f680, %f679, 0f3F800000;
	add.f32 	%f913, %f680, 0f3F800000;
LBB0_91:                                // %__internal_fmodf_fastpath_quot.exit.i.i1078
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_96:                                // %__internal_fmodf_kernel.exit.i1107
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p150, %f694, 0f7F800000;
	@%p150 bra 	LBB0_98;
// %bb.97:
	mov.b32 	%r333, %f110;
	and.b32  	%r334, %r333, -2147483648;
	mov.b32 	%r335, %f915;
	or.b32  	%r336, %r334, %r335;
	mov.b32 	%f915, %r336;
LBB0_98:                                // %__nv_fmodf.exit1110
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r337, %f695;
	and.b32  	%r338, %r337, -2147483648;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%f696, %r339;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p151, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p151;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p152, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p152;
	cvt.rzi.s32.f32 	%r340, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r341, %r340, 1;
	setp.eq.b32 	%p153, %r341, 1;
	selp.f32 	%f714, %f712, %f713, %p153;
	selp.f32 	%f715, %f713, %f712, %p153;
	and.b32  	%r342, %r340, 2;
	setp.eq.s32 	%p154, %r342, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p154;
	add.s32 	%r343, %r340, 1;
	and.b32  	%r344, %r343, 2;
	setp.eq.s32 	%p155, %r344, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p155;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p156, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p156;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p157, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p157;
	mov.u64 	%rd131, 2;
	mov.u64 	%rd130, -2;
LBB0_99:                                // %L1234.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd131, %rd131, %rd131;
	add.s64 	%rd20, %rd130, 1;
	setp.ge.u64 	%p158, %rd20, %rd130;
	mov.u64 	%rd130, %rd20;
	@%p158 bra 	LBB0_99;
// %bb.100:                             // %L1241
	shl.b32 	%r345, %r16, 2;
	sub.s32 	%r346, %r69, %r345;
	cvt.rn.f32.s32 	%f725, %r346;
	shl.b64 	%rd80, %rd131, 1;
	cvt.rn.f32.s64 	%f726, %rd80;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p159, %f919, 0f40000000;
	@%p159 bra 	LBB0_112;
// %bb.101:
	setp.gtu.f32 	%p160, %f919, 0f4B800000;
	@%p160 bra 	LBB0_108;
	bra.uni 	LBB0_102;
LBB0_108:
	mov.b32 	%r79, %f919;
	and.b32  	%r347, %r79, 8388607;
	or.b32  	%r2405, %r347, 1065353216;
	mov.b32 	%f918, %r2405;
	add.s32 	%r348, %r79, -1073741824;
	and.b32  	%r2406, %r348, -8388608;
	setp.eq.s32 	%p166, %r2406, 0;
	@%p166 bra 	LBB0_111;
// %bb.109:                             // %.lr.ph1413.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_110:                               // %.lr.ph1413
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r2406, 192937984;
	add.s32 	%r350, %r349, %r2405;
	mov.b32 	%f737, %r350;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2406, %r2406, %r349;
	mov.b32 	%r2405, %f918;
	setp.ne.s32 	%p167, %r2406, 0;
	setp.ne.s32 	%p168, %r2405, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	LBB0_110;
LBB0_111:                               // %__internal_fmodf_slowpath_mod.exit.i.i1157
	setp.gt.u32 	%p170, %r79, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_112;
LBB0_102:                               // %__nv_fast_fdividef.exit.i.i.i1123
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f131, %f728;
	fma.rn.f32 	%f132, %f131, 0fC0000000, %f919;
	mov.b32 	%r78, %f132;
	setp.lt.u32 	%p161, %r78, 1073741824;
	mov.f32 	%f917, %f131;
	@%p161 bra 	LBB0_107;
// %bb.103:
	setp.lt.u32 	%p162, %r78, -2147483647;
	@%p162 bra 	LBB0_105;
// %bb.104:
	add.f32 	%f733, %f131, 0fBF800000;
	setp.lt.f32 	%p165, %f132, 0fC0000000;
	selp.f32 	%f734, %f733, %f131, %p165;
	add.f32 	%f917, %f734, 0fBF800000;
	bra.uni 	LBB0_107;
LBB0_105:
	add.f32 	%f917, %f131, 0f3F800000;
	setp.ltu.f32 	%p163, %f132, 0f40800000;
	@%p163 bra 	LBB0_107;
// %bb.106:                             // %__nv_fmaf_rn.exit.i.i.i1128
	fma.rn.f32 	%f730, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p164, %f730, 0f00000000;
	selp.f32 	%f731, %f917, %f131, %p164;
	add.f32 	%f732, %f731, 0f3F800000;
	add.f32 	%f917, %f732, 0f3F800000;
LBB0_107:                               // %__internal_fmodf_fastpath_quot.exit.i.i1131
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_112:                               // %__internal_fmodf_kernel.exit.i1160
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p171, %f746, 0f7F800000;
	@%p171 bra 	LBB0_114;
// %bb.113:
	mov.b32 	%r351, %f129;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f919;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f919, %r354;
LBB0_114:                               // %__nv_fmodf.exit1163
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r361, %f747;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f748, %r363;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p172, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p172;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p173, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p173;
	cvt.rzi.s32.f32 	%r364, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r365, %r364, 1;
	setp.eq.b32 	%p174, %r365, 1;
	selp.f32 	%f766, %f764, %f765, %p174;
	selp.f32 	%f767, %f765, %f764, %p174;
	and.b32  	%r366, %r364, 2;
	setp.eq.s32 	%p175, %r366, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p175;
	add.s32 	%r367, %r364, 1;
	and.b32  	%r368, %r367, 2;
	setp.eq.s32 	%p176, %r368, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p176;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p177, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p177;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p178, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p178;
	mov.b32 	%r357, %f778;
	mov.b32 	%r356, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r86, %r357, %r356;
	// end inline asm
	mov.b32 	%r360, %f775;
	mov.b32 	%r359, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r87, %r360, %r359;
	// end inline asm
	mov.u64 	%rd133, 2;
	mov.u64 	%rd132, -2;
LBB0_115:                               // %L1280.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd133, %rd133, %rd133;
	add.s64 	%rd24, %rd132, 1;
	setp.ge.u64 	%p179, %rd24, %rd132;
	mov.u64 	%rd132, %rd24;
	@%p179 bra 	LBB0_115;
// %bb.116:                             // %L1287
	and.b64  	%rd83, %rd133, 9223372036854775807;
	setp.ne.s64 	%p180, %rd83, 16;
	@%p180 bra 	LBB0_128;
// %bb.117:                             // %L1289
	shr.u32 	%r88, %r2, 3;
	and.b32  	%r369, %r88, 2;
	or.b32  	%r89, %r17, %r369;
	xor.b32  	%r370, %r88, %r2;
	cvt.u16.u32 	%rs2, %r370;
	not.b16 	%rs3, %rs2;
	mul.lo.s32 	%r90, %r68, %r89;
	cvt.rn.f32.s32 	%f779, %r90;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p181, %f923, 0f40000000;
	@%p181 bra 	LBB0_138;
// %bb.118:
	setp.gtu.f32 	%p182, %f923, 0f4B800000;
	@%p182 bra 	LBB0_134;
	bra.uni 	LBB0_119;
LBB0_134:
	mov.b32 	%r112, %f923;
	and.b32  	%r371, %r112, 8388607;
	or.b32  	%r2421, %r371, 1065353216;
	mov.b32 	%f922, %r2421;
	add.s32 	%r372, %r112, -1073741824;
	and.b32  	%r2422, %r372, -8388608;
	setp.eq.s32 	%p188, %r2422, 0;
	@%p188 bra 	LBB0_137;
// %bb.135:                             // %.lr.ph1403.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_136:                               // %.lr.ph1403
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r2422, 192937984;
	add.s32 	%r374, %r373, %r2421;
	mov.b32 	%f791, %r374;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2422, %r2422, %r373;
	mov.b32 	%r2421, %f922;
	setp.ne.s32 	%p189, %r2422, 0;
	setp.ne.s32 	%p190, %r2421, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	LBB0_136;
LBB0_137:                               // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p192, %r112, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_138;
LBB0_119:                               // %__nv_fast_fdividef.exit.i.i.i1176
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f148, %f782;
	fma.rn.f32 	%f149, %f148, 0fC0000000, %f923;
	mov.b32 	%r111, %f149;
	setp.lt.u32 	%p183, %r111, 1073741824;
	mov.f32 	%f921, %f148;
	@%p183 bra 	LBB0_133;
// %bb.120:
	setp.lt.u32 	%p184, %r111, -2147483647;
	@%p184 bra 	LBB0_131;
// %bb.121:
	add.f32 	%f787, %f148, 0fBF800000;
	setp.lt.f32 	%p187, %f149, 0fC0000000;
	selp.f32 	%f788, %f787, %f148, %p187;
	add.f32 	%f921, %f788, 0fBF800000;
	bra.uni 	LBB0_133;
LBB0_131:
	add.f32 	%f921, %f148, 0f3F800000;
	setp.ltu.f32 	%p185, %f149, 0f40800000;
	@%p185 bra 	LBB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i1181
	fma.rn.f32 	%f784, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p186, %f784, 0f00000000;
	selp.f32 	%f785, %f921, %f148, %p186;
	add.f32 	%f786, %f785, 0f3F800000;
	add.f32 	%f921, %f786, 0f3F800000;
LBB0_133:                               // %__internal_fmodf_fastpath_quot.exit.i.i1184
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_138:                               // %__internal_fmodf_kernel.exit.i1213
	and.b16  	%rs1, %rs3, 1;
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p193, %f800, 0f7F800000;
	@%p193 bra 	LBB0_140;
// %bb.139:
	mov.b32 	%r375, %f146;
	and.b32  	%r376, %r375, -2147483648;
	mov.b32 	%r377, %f923;
	or.b32  	%r378, %r376, %r377;
	mov.b32 	%f923, %r378;
LBB0_140:                               // %__nv_fmodf.exit1216
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r379, %f801;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f802, %r381;
	add.f32 	%f803, %f801, %f802;
	cvt.rzi.f32.f32 	%f804, %f803;
	abs.f32 	%f805, %f801;
	setp.gt.f32 	%p194, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p194;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p195, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p195;
	cvt.rzi.s32.f32 	%r382, %f808;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p196, %r383, 1;
	selp.f32 	%f820, %f818, %f819, %p196;
	selp.f32 	%f821, %f819, %f818, %p196;
	and.b32  	%r384, %r382, 2;
	setp.eq.s32 	%p197, %r384, 0;
	neg.f32 	%f822, %f820;
	selp.f32 	%f823, %f820, %f822, %p197;
	add.s32 	%r385, %r382, 1;
	and.b32  	%r386, %r385, 2;
	setp.eq.s32 	%p198, %r386, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f826, %f821, %f825, %p198;
	cvt.rzi.f32.f32 	%f827, %f923;
	setp.eq.f32 	%p199, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	selp.f32 	%f829, %f828, %f823, %p199;
	abs.f32 	%f830, %f923;
	setp.gt.f32 	%p200, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p200;
	cvt.rn.f32.u16 	%f163, %rs1;
	shl.b32 	%r387, %r89, 2;
	sub.s32 	%r388, %r90, %r387;
	cvt.rn.f32.s32 	%f833, %r388;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p201, %f927, 0f40000000;
	@%p201 bra 	LBB0_152;
// %bb.141:
	setp.gtu.f32 	%p202, %f927, 0f4B800000;
	@%p202 bra 	LBB0_148;
	bra.uni 	LBB0_142;
LBB0_148:
	mov.b32 	%r120, %f927;
	and.b32  	%r389, %r120, 8388607;
	or.b32  	%r2423, %r389, 1065353216;
	mov.b32 	%f926, %r2423;
	add.s32 	%r390, %r120, -1073741824;
	and.b32  	%r2424, %r390, -8388608;
	setp.eq.s32 	%p208, %r2424, 0;
	@%p208 bra 	LBB0_151;
// %bb.149:                             // %.lr.ph.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_150:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r391, %r2424, 192937984;
	add.s32 	%r392, %r391, %r2423;
	mov.b32 	%f845, %r392;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2424, %r2424, %r391;
	mov.b32 	%r2423, %f926;
	setp.ne.s32 	%p209, %r2424, 0;
	setp.ne.s32 	%p210, %r2423, 0;
	and.pred  	%p211, %p209, %p210;
	@%p211 bra 	LBB0_150;
LBB0_151:                               // %__internal_fmodf_slowpath_mod.exit.i.i1263
	setp.gt.u32 	%p212, %r120, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p212;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_152;
LBB0_142:                               // %__nv_fast_fdividef.exit.i.i.i1229
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f168, %f836;
	fma.rn.f32 	%f169, %f168, 0fC0000000, %f927;
	mov.b32 	%r119, %f169;
	setp.lt.u32 	%p203, %r119, 1073741824;
	mov.f32 	%f925, %f168;
	@%p203 bra 	LBB0_147;
// %bb.143:
	setp.lt.u32 	%p204, %r119, -2147483647;
	@%p204 bra 	LBB0_145;
// %bb.144:
	add.f32 	%f841, %f168, 0fBF800000;
	setp.lt.f32 	%p207, %f169, 0fC0000000;
	selp.f32 	%f842, %f841, %f168, %p207;
	add.f32 	%f925, %f842, 0fBF800000;
	bra.uni 	LBB0_147;
LBB0_145:
	add.f32 	%f925, %f168, 0f3F800000;
	setp.ltu.f32 	%p205, %f169, 0f40800000;
	@%p205 bra 	LBB0_147;
// %bb.146:                             // %__nv_fmaf_rn.exit.i.i.i1234
	fma.rn.f32 	%f838, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p206, %f838, 0f00000000;
	selp.f32 	%f839, %f925, %f168, %p206;
	add.f32 	%f840, %f839, 0f3F800000;
	add.f32 	%f925, %f840, 0f3F800000;
LBB0_147:                               // %__internal_fmodf_fastpath_quot.exit.i.i1237
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_152:                               // %__internal_fmodf_kernel.exit.i1266
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p213, %f854, 0f7F800000;
	@%p213 bra 	LBB0_154;
// %bb.153:
	mov.b32 	%r393, %f166;
	and.b32  	%r394, %r393, -2147483648;
	mov.b32 	%r395, %f927;
	or.b32  	%r396, %r394, %r395;
	mov.b32 	%f927, %r396;
LBB0_154:                               // %__nv_fmodf.exit1269
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r410, %f855;
	and.b32  	%r411, %r410, -2147483648;
	or.b32  	%r412, %r411, 1056964608;
	mov.b32 	%f856, %r412;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p214, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p214;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p215, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p215;
	cvt.rzi.s32.f32 	%r413, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r414, %r413, 1;
	setp.eq.b32 	%p216, %r414, 1;
	selp.f32 	%f874, %f872, %f873, %p216;
	selp.f32 	%f875, %f873, %f872, %p216;
	and.b32  	%r415, %r413, 2;
	setp.eq.s32 	%p217, %r415, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p217;
	add.s32 	%r416, %r413, 1;
	and.b32  	%r417, %r416, 2;
	setp.eq.s32 	%p218, %r417, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p218;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p219, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p219;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p220, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p220;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r399, %f887;
	mov.b32 	%r398, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r127, %r399, %r398;
	// end inline asm
	mov.b32 	%r405, %f888;
	xor.b32  	%r402, %r405, -2147483648;
	mov.b32 	%r404, %f165;
	xor.b32  	%r401, %r404, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r128, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r129, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r130, %r399, %r398;
	// end inline asm
	shl.b32 	%r418, %r1, 5;
	and.b32  	%r131, %r418, 128;
	and.b32  	%r132, %r13, 8;
	and.b32  	%r133, %r6, 16;
	shl.b32 	%r419, %r3, 2;
	and.b32  	%r134, %r419, 32;
	and.b32  	%r135, %r3, 7;
	and.b32  	%r420, %r10, 28;
	and.b32  	%r421, %r418, 96;
	or.b32  	%r136, %r420, %r421;
	and.b32  	%r137, %r2, 8;
	shl.b32 	%r422, %r2, 4;
	or.b32  	%r423, %r422, %r137;
	shr.u32 	%r424, %r423, 2;
	and.b32  	%r425, %r424, 30;
	and.b32  	%r426, %r3, 1;
	mul.lo.s32 	%r427, %r426, 520;
	mul.lo.s32 	%r428, %r18, 65;
	bfe.u32 	%r429, %r3, 2, 1;
	mul.lo.s32 	%r430, %r429, 130;
	bfe.u32 	%r431, %r3, 1, 1;
	mul.lo.s32 	%r432, %r431, 260;
	shr.u32 	%r433, %r3, 3;
	mul.lo.s32 	%r434, %r433, 1057;
	add.s32 	%r435, %r427, %r425;
	add.s32 	%r436, %r435, %r428;
	add.s32 	%r437, %r436, %r430;
	add.s32 	%r438, %r437, %r432;
	add.s32 	%r439, %r438, %r434;
	mul.wide.u32 	%rd86, %r439, 4;
	mov.u64 	%rd87, shmem;
	add.s64 	%rd37, %rd87, %rd86;
	cvt.u64.u32 	%rd88, %r434;
	cvt.u64.u32 	%rd89, %r432;
	cvt.u64.u32 	%rd90, %r430;
	cvt.u64.u32 	%rd91, %r428;
	cvt.u64.u32 	%rd92, %r427;
	cvt.u64.u32 	%rd93, %r425;
	add.s64 	%rd94, %rd93, %rd92;
	add.s64 	%rd95, %rd94, %rd91;
	add.s64 	%rd96, %rd95, %rd90;
	add.s64 	%rd97, %rd96, %rd89;
	add.s64 	%rd98, %rd97, %rd88;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd38, %rd87, %rd99;
	or.b32  	%r440, %r433, 4;
	mul.lo.s32 	%r441, %r440, 1057;
	add.s32 	%r442, %r438, %r441;
	mul.wide.s32 	%rd100, %r442, 4;
	add.s64 	%rd39, %rd87, %rd100;
	cvt.u64.u32 	%rd101, %r441;
	add.s64 	%rd102, %rd97, %rd101;
	shl.b64 	%rd103, %rd102, 2;
	add.s64 	%rd40, %rd87, %rd103;
	and.b32  	%r443, %r4, 32;
	shl.b32 	%r444, %r3, 1;
	shl.b32 	%r445, %r2, 3;
	and.b32  	%r446, %r445, 64;
	or.b32  	%r447, %r446, %r444;
	shr.u32 	%r448, %r447, 2;
	mul.lo.s32 	%r449, %r18, 520;
	mul.lo.s32 	%r450, %r14, 65;
	mul.lo.s32 	%r451, %r15, 130;
	mul.lo.s32 	%r452, %r17, 260;
	or.b32  	%r453, %r448, %r443;
	or.b32  	%r454, %r453, 8;
	shl.b32 	%r455, %r1, 2;
	and.b32  	%r456, %r455, 480;
	or.b32  	%r457, %r9, %r456;
	or.b32  	%r458, %r457, %r11;
	or.b32  	%r459, %r458, %r7;
	or.b32  	%r460, %r459, %r8;
	bfe.u32 	%r461, %r460, 1, 4;
	mul.lo.s32 	%r462, %r461, 65;
	and.b32  	%r463, %r419, 28;
	shl.b32 	%r464, %r3, 14;
	and.b32  	%r138, %r464, 131072;
	and.b32  	%r465, %r444, 14;
	or.b32  	%r466, %r465, %r18;
	mul.lo.s32 	%r467, %r466, 65;
	add.s32 	%r468, %r467, %r425;
	add.s32 	%r469, %r468, %r434;
	mul.wide.u32 	%rd104, %r469, 4;
	add.s64 	%rd41, %rd87, %rd104;
	cvt.u64.u32 	%rd105, %r467;
	add.s64 	%rd106, %rd93, %rd105;
	add.s64 	%rd107, %rd106, %rd88;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd42, %rd87, %rd108;
	add.s32 	%r470, %r468, %r441;
	mul.wide.u32 	%rd109, %r470, 4;
	add.s64 	%rd43, %rd87, %rd109;
	add.s64 	%rd110, %rd106, %rd101;
	shl.b64 	%rd111, %rd110, 2;
	add.s64 	%rd44, %rd87, %rd111;
	or.b32  	%r471, %r88, %r456;
	or.b32  	%r472, %r471, %r463;
	shl.b32 	%r139, %r472, 8;
	add.s32 	%r473, %r454, %r462;
	mul.wide.u32 	%rd112, %r473, 4;
	add.s64 	%rd45, %rd87, %rd112;
	add.s32 	%r474, %r454, %r449;
	add.s32 	%r475, %r474, %r452;
	add.s32 	%r476, %r475, %r451;
	add.s32 	%r477, %r476, %r450;
	mul.wide.u32 	%rd113, %r477, 4;
	add.s64 	%rd46, %rd87, %rd113;
	add.s32 	%r478, %r453, %r462;
	mul.wide.u32 	%rd114, %r478, 4;
	add.s64 	%rd47, %rd87, %rd114;
	add.s32 	%r479, %r453, %r449;
	add.s32 	%r480, %r479, %r452;
	add.s32 	%r481, %r480, %r451;
	add.s32 	%r482, %r481, %r450;
	mul.wide.u32 	%rd115, %r482, 4;
	add.s64 	%rd48, %rd87, %rd115;
	mov.u32 	%r2407, 0;
	setp.eq.s32 	%p221, %r137, 0;
	mov.u16 	%rs291, 25600;
	mov.u16 	%rs239, 21504;
	mov.u16 	%rs299, 18432;
	mov.u16 	%rs277, -14592;
	mov.u32 	%r2408, %r2407;
	mov.u32 	%r2409, %r2407;
	mov.u32 	%r2410, %r2407;
	mov.u32 	%r2419, %r2407;
	mov.u32 	%r2420, %r2407;
	mov.u32 	%r2413, %r2407;
	bra.uni 	LBB0_122;
LBB0_126:                               // %L17327
                                        //   in Loop: Header=BB0_122 Depth=1
	add.s32 	%r2413, %r97, 256;
	setp.gt.s32 	%p226, %r5, %r2413;
	setp.ne.s32 	%p227, %r97, 32512;
	and.pred  	%p228, %p227, %p226;
	@%p228 bra 	LBB0_122;
	bra.uni 	LBB0_127;
LBB0_122:                               // %L1391
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_123 Depth 2
	mov.u32 	%r97, %r2413;
	or.b32  	%r516, %r132, %r97;
	or.b32  	%r517, %r516, %r133;
	or.b32  	%r518, %r517, %r134;
	or.b32  	%r519, %r518, %r135;
	shl.b32 	%r520, %r519, 12;
	or.b32  	%r521, %r520, %r131;
	or.b32  	%r522, %r136, %r521;
	mul.wide.s32 	%rd116, %r522, 4;
	add.s64 	%rd117, %rd2, %rd116;
	ld.global.v4.u32 	{%r523, %r524, %r525, %r526}, [%rd117];
	or.b32  	%r527, %r522, 524288;
	mul.wide.s32 	%rd118, %r527, 4;
	add.s64 	%rd119, %rd2, %rd118;
	ld.global.v4.u32 	{%r528, %r529, %r530, %r531}, [%rd119];
	selp.b32 	%r532, %r525, %r523, %p221;
	shfl.sync.bfly.b32	%r533, %r532, 8, 31, -1;
	selp.b32 	%r484, %r523, %r533, %p221;
	selp.b32 	%r485, %r533, %r525, %p221;
	selp.b32 	%r534, %r526, %r524, %p221;
	shfl.sync.bfly.b32	%r535, %r534, 8, 31, -1;
	selp.b32 	%r492, %r524, %r535, %p221;
	selp.b32 	%r493, %r535, %r526, %p221;
	selp.b32 	%r536, %r530, %r528, %p221;
	shfl.sync.bfly.b32	%r537, %r536, 8, 31, -1;
	selp.b32 	%r500, %r528, %r537, %p221;
	selp.b32 	%r501, %r537, %r530, %p221;
	selp.b32 	%r538, %r531, %r529, %p221;
	shfl.sync.bfly.b32	%r539, %r538, 8, 31, -1;
	selp.b32 	%r508, %r529, %r539, %p221;
	selp.b32 	%r509, %r539, %r531, %p221;
	mov.u32 	%r510, 21520;
	// begin inline asm
	prmt.b32 %r483, %r484, %r485, %r510;
	// end inline asm
	mov.u32 	%r514, 30258;
	// begin inline asm
	prmt.b32 %r487, %r484, %r485, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r491, %r492, %r493, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r495, %r492, %r493, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r499, %r500, %r501, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r503, %r500, %r501, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r508, %r509, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r508, %r509, %r514;
	// end inline asm
	st.shared.u32 	[%rd37], %r483;
	st.shared.u32 	[%rd38+128], %r487;
	st.shared.u32 	[%rd38+4], %r491;
	st.shared.u32 	[%rd38+132], %r495;
	st.shared.u32 	[%rd39], %r499;
	st.shared.u32 	[%rd40+128], %r503;
	st.shared.u32 	[%rd40+4], %r507;
	st.shared.u32 	[%rd40+132], %r511;
	bar.sync 	0;
	mov.u32 	%r2414, 256;
	mov.u64 	%rd134, %rd48;
	mov.u64 	%rd135, %rd47;
	mov.u64 	%rd136, %rd46;
	mov.u64 	%rd137, %rd45;
	mov.u32 	%r2415, %r2407;
	mov.u32 	%r2416, %r2408;
	mov.u32 	%r2417, %r2409;
	mov.u32 	%r2418, %r2410;
LBB0_123:                               // %L7498
                                        //   Parent Loop BB0_122 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2408, %r2420;
	mov.u32 	%r2407, %r2419;
	ld.shared.u32 	%r2409, [%rd134];
	ld.shared.u32 	%r2410, [%rd136];
	// begin inline asm
	mov.b32 %r545, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r556, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r544, %r2409, -2004318072;
	mov.u32 	%r543, 983055;
	// begin inline asm
	lop3.b32 %r542, %r543, %r544, %r545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r546, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r547, %r545, %r546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r550, %r542, %r547;
	// end inline asm
	mov.u32 	%r554, 15728880;
	// begin inline asm
	lop3.b32 %r553, %r554, %r544, %r556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r557, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r558, %r556, %r557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r561, %r553, %r558;
	// end inline asm
	shr.u32 	%r566, %r544, 8;
	// begin inline asm
	lop3.b32 %r564, %r543, %r566, %r545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r568, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r569, %r545, %r568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r572, %r564, %r569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r575, %r554, %r566, %r556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r579, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r580, %r556, %r579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r583, %r575, %r580;
	// end inline asm
	// begin inline asm
	mov.b32 %r591, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r602, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r590, %r2410, -2004318072;
	// begin inline asm
	lop3.b32 %r588, %r543, %r590, %r591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r592, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r593, %r591, %r592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r596, %r588, %r593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r599, %r554, %r590, %r602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r603, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r604, %r602, %r603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r607, %r599, %r604;
	// end inline asm
	shr.u32 	%r612, %r590, 8;
	// begin inline asm
	lop3.b32 %r610, %r543, %r612, %r591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r614, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r615, %r591, %r614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r618, %r610, %r615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r621, %r554, %r612, %r602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r625, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r626, %r602, %r625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r629, %r621, %r626;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r632, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r634, %r632, %r550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r637, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r639, %r637, %r561;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r642, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r644, %r642, %r572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r647, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r649, %r647, %r583;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r652, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r654, %r652, %r596;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r657, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r659, %r657, %r607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r662, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r664, %r662, %r618;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r667, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r669, %r667, %r629;
	// end inline asm
	// begin inline asm
	mov.b32 %r677, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r676, %r2415, -2004318072;
	// begin inline asm
	lop3.b32 %r674, %r543, %r676, %r677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r678, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r679, %r677, %r678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r682, %r674, %r679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r685, %r554, %r676, %r688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r690, %r688, %r689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r693, %r685, %r690;
	// end inline asm
	shr.u32 	%r698, %r676, 8;
	// begin inline asm
	lop3.b32 %r696, %r543, %r698, %r677, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r677, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r707, %r554, %r698, %r688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r688, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r722, %r2416, -2004318072;
	// begin inline asm
	lop3.b32 %r720, %r543, %r722, %r723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r724, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r725, %r723, %r724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r728, %r720, %r725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r731, %r554, %r722, %r734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r734, %r735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r739, %r731, %r736;
	// end inline asm
	shr.u32 	%r744, %r722, 8;
	// begin inline asm
	lop3.b32 %r742, %r543, %r744, %r723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r747, %r723, %r746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r750, %r742, %r747;
	// end inline asm
	// begin inline asm
	lop3.b32 %r753, %r554, %r744, %r734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r734, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r764, %r183, %r682, %r634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r768, %r183, %r693, %r639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r772, %r183, %r704, %r644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r776, %r183, %r715, %r649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r780, %r183, %r728, %r654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r784, %r183, %r739, %r659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r788, %r183, %r750, %r664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r792, %r183, %r761, %r669;
	// end inline asm
	// begin inline asm
	mov.b32 %r801, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r812, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r800, %r2417, -2004318072;
	// begin inline asm
	lop3.b32 %r798, %r543, %r800, %r801, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r802, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r803, %r801, %r802;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r806, %r798, %r803;
	// end inline asm
	// begin inline asm
	lop3.b32 %r809, %r554, %r800, %r812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r813, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r814, %r812, %r813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r817, %r809, %r814;
	// end inline asm
	shr.u32 	%r822, %r800, 8;
	// begin inline asm
	lop3.b32 %r820, %r543, %r822, %r801, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r824, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r825, %r801, %r824;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r828, %r820, %r825;
	// end inline asm
	// begin inline asm
	lop3.b32 %r831, %r554, %r822, %r812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r836, %r812, %r835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r839, %r831, %r836;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r858, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r846, %r2418, -2004318072;
	// begin inline asm
	lop3.b32 %r844, %r543, %r846, %r847, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r849, %r847, %r848;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r852, %r844, %r849;
	// end inline asm
	// begin inline asm
	lop3.b32 %r855, %r554, %r846, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r860, %r858, %r859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r863, %r855, %r860;
	// end inline asm
	shr.u32 	%r868, %r846, 8;
	// begin inline asm
	lop3.b32 %r866, %r543, %r868, %r847, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r870, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r871, %r847, %r870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r874, %r866, %r871;
	// end inline asm
	// begin inline asm
	lop3.b32 %r877, %r554, %r868, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r858, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r888, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r890, %r888, %r806, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r896, %r894, %r817, %r768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r900, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r902, %r900, %r828, %r772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r906, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r908, %r906, %r839, %r776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r912, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r914, %r912, %r852, %r780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r918, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r920, %r918, %r863, %r784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r924, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r926, %r924, %r874, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r930, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r932, %r930, %r885, %r792;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r940, %r2407, -2004318072;
	// begin inline asm
	lop3.b32 %r938, %r543, %r940, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r949, %r554, %r940, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r952, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	shr.u32 	%r962, %r940, 8;
	// begin inline asm
	lop3.b32 %r960, %r543, %r962, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r941, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r971, %r554, %r962, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r976, %r952, %r975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r979, %r971, %r976;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r986, %r2408, -2004318072;
	// begin inline asm
	lop3.b32 %r984, %r543, %r986, %r987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r989, %r987, %r988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r992, %r984, %r989;
	// end inline asm
	// begin inline asm
	lop3.b32 %r995, %r554, %r986, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r998, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	shr.u32 	%r1008, %r986, 8;
	// begin inline asm
	lop3.b32 %r1006, %r543, %r1008, %r987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r987, %r1010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1014, %r1006, %r1011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1017, %r554, %r1008, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1022, %r998, %r1021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1025, %r1017, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r219, %r946, %r890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1064, %r219, %r957, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1076, %r219, %r968, %r902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r219, %r979, %r908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r219, %r992, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1082, %r219, %r1003, %r920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1094, %r219, %r1014, %r926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r219, %r1025, %r932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1060, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1062, %r1060, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1065, %r45, %r1067, %r1062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1071, %r1069, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1074, %r45, %r1076, %r1071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1078, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1080, %r1078, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r45, %r1085, %r1080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1089, %r1087, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r45, %r1094, %r1089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r46, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r45, %r1064, %r1096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1103, %r46, %r1076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r45, %r1073, %r1103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1110, %r46, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r45, %r1082, %r1110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1117, %r46, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r45, %r1091, %r1117;
	// end inline asm
	mov.u32 	%r2165, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1171, %r1168}, {%r64, %r66, %r65, %r67}, {%r1065, %r1099}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1180, %r1177}, {%r64, %r66, %r65, %r67}, {%r1074, %r1106}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1189, %r1186}, {%r64, %r66, %r65, %r67}, {%r1083, %r1113}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1198, %r1195}, {%r64, %r66, %r65, %r67}, {%r1092, %r1120}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r86, %r1171, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r86, %r1180, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r86, %r1189, %r1184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r1191, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r86, %r1198, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r87, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r86, %r1168, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r87, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r86, %r1177, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r87, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r86, %r1186, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r87, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r86, %r1195, %r1221;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1228, %r1229}, {%r127, %r129, %r128, %r130}, {%r1169, %r1203}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1238, %r1239}, {%r127, %r129, %r128, %r130}, {%r1178, %r1210}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1248, %r1249}, {%r127, %r129, %r128, %r130}, {%r1187, %r1217}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1258, %r1259}, {%r127, %r129, %r128, %r130}, {%r1196, %r1224}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1268, %r12, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1271, %r12, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r12, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1277, %r12, %r1239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r12, %r1248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r12, %r1249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1286, %r12, %r1258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1289, %r12, %r1259;
	// end inline asm
	// begin inline asm
	mov.b32 %r1292, {%rs277, %rs277};
	// end inline asm
	mov.u16 	%rs102, 18176;
	// begin inline asm
	mov.b32 %r1293, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1294, %r1268, %r1292;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1297, %r1294, %r1293;
	// end inline asm
	// begin inline asm
	mov.b32 %r1300, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1301, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1302, %r1271, %r1300;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1305, %r1302, %r1301;
	// end inline asm
	// begin inline asm
	mov.b32 %r1308, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1309, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1310, %r1274, %r1308;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1313, %r1310, %r1309;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1317, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1318, %r1277, %r1316;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1321, %r1318, %r1317;
	// end inline asm
	// begin inline asm
	mov.b32 %r1324, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1325, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1326, %r1280, %r1324;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1329, %r1326, %r1325;
	// end inline asm
	// begin inline asm
	mov.b32 %r1332, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1334, %r1283, %r1332;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1337, %r1334, %r1333;
	// end inline asm
	// begin inline asm
	mov.b32 %r1340, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1342, %r1286, %r1340;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1345, %r1342, %r1341;
	// end inline asm
	// begin inline asm
	mov.b32 %r1348, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r1349, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1350, %r1289, %r1348;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1353, %r1350, %r1349;
	// end inline asm
	// begin inline asm
	mov.b32 %r1359, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1357, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1358, %r1359, %r1357;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1361, %r1297, %r1358;
	// end inline asm
	// begin inline asm
	mov.b32 %r1364, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1365, %r1359, %r1364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1368, %r1305, %r1365;
	// end inline asm
	// begin inline asm
	mov.b32 %r1371, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1372, %r1359, %r1371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1375, %r1313, %r1372;
	// end inline asm
	// begin inline asm
	mov.b32 %r1378, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1379, %r1359, %r1378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1382, %r1321, %r1379;
	// end inline asm
	mov.u32 	%r1388, 25152;
	// begin inline asm
	prmt.b32 %r1385, %r1361, %r1375, %r1388;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1389, %r1368, %r1382, %r1388;
	// end inline asm
	shl.b32 	%r1396, %r1389, 4;
	mov.u32 	%r1394, 252645135;
	// begin inline asm
	lop3.b32 %r1393, %r1394, %r1385, %r1396, 202;
	// end inline asm
	xor.b32  	%r2336, %r1393, -2004318072;
	// begin inline asm
	mov.b32 %r1400, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1398, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1399, %r1400, %r1398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1402, %r1329, %r1399;
	// end inline asm
	// begin inline asm
	mov.b32 %r1405, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1406, %r1400, %r1405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1409, %r1337, %r1406;
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1413, %r1400, %r1412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1416, %r1345, %r1413;
	// end inline asm
	// begin inline asm
	mov.b32 %r1419, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1420, %r1400, %r1419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1423, %r1353, %r1420;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1426, %r1402, %r1416, %r1388;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1430, %r1409, %r1423, %r1388;
	// end inline asm
	shl.b32 	%r1437, %r1430, 4;
	// begin inline asm
	lop3.b32 %r1434, %r1394, %r1426, %r1437, 202;
	// end inline asm
	xor.b32  	%r2337, %r1434, -2004318072;
	st.shared.u32 	[%rd135], %r2336;
	st.shared.u32 	[%rd137], %r2337;
	ld.shared.u32 	%r2419, [%rd134];
	ld.shared.u32 	%r2420, [%rd136];
	// begin inline asm
	mov.b32 %r1443, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r1442, %r2419, -2004318072;
	// begin inline asm
	lop3.b32 %r1440, %r543, %r1442, %r1443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1444, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1445, %r1443, %r1444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1448, %r1440, %r1445;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1451, %r554, %r1442, %r1454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1455, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1456, %r1454, %r1455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1459, %r1451, %r1456;
	// end inline asm
	shr.u32 	%r1464, %r1442, 8;
	// begin inline asm
	lop3.b32 %r1462, %r543, %r1464, %r1443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1467, %r1443, %r1466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1470, %r1462, %r1467;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1473, %r554, %r1464, %r1454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1477, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1478, %r1454, %r1477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1481, %r1473, %r1478;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs239, %rs239};
	// end inline asm
	xor.b32  	%r1488, %r2420, -2004318072;
	// begin inline asm
	lop3.b32 %r1486, %r543, %r1488, %r1489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1491, %r1489, %r1490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1494, %r1486, %r1491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1497, %r554, %r1488, %r1500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1501, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1502, %r1500, %r1501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1505, %r1497, %r1502;
	// end inline asm
	shr.u32 	%r1510, %r1488, 8;
	// begin inline asm
	lop3.b32 %r1508, %r543, %r1510, %r1489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1513, %r1489, %r1512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1516, %r1508, %r1513;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1519, %r554, %r1510, %r1500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1500, %r1523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1527, %r1519, %r1524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1530, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r1530, %r1448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1535, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1537, %r1535, %r1459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1540, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1542, %r1540, %r1470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1545, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1547, %r1545, %r1481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1550, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r1550, %r1494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1555, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r1555, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1560, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r1560, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1527;
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1586, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1572, %r543, %r800, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1575, %r1576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1580, %r1572, %r1577;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1583, %r554, %r800, %r1586, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1587, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1588, %r1586, %r1587;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1591, %r1583, %r1588;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1594, %r543, %r822, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1598, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1599, %r1575, %r1598;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1602, %r1594, %r1599;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1605, %r554, %r822, %r1586, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1586, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	mov.b32 %r1621, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1632, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1618, %r543, %r846, %r1621, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1623, %r1621, %r1622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1626, %r1618, %r1623;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1629, %r554, %r846, %r1632, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1633, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1634, %r1632, %r1633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1637, %r1629, %r1634;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1640, %r543, %r868, %r1621, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1644, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1645, %r1621, %r1644;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1648, %r1640, %r1645;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1651, %r554, %r868, %r1632, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1655, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1656, %r1632, %r1655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1659, %r1651, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r183, %r1580, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r183, %r1591, %r1537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r183, %r1602, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r183, %r1613, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r183, %r1626, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r183, %r1637, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r183, %r1648, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r183, %r1659, %r1567;
	// end inline asm
	// begin inline asm
	mov.b32 %r1699, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1710, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1696, %r543, %r940, %r1699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1700, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1701, %r1699, %r1700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1704, %r1696, %r1701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1707, %r554, %r940, %r1710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1711, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1712, %r1710, %r1711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1715, %r1707, %r1712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1718, %r543, %r962, %r1699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1722, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1723, %r1699, %r1722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1726, %r1718, %r1723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1729, %r554, %r962, %r1710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1733, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1734, %r1710, %r1733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1737, %r1729, %r1734;
	// end inline asm
	// begin inline asm
	mov.b32 %r1745, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1756, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1742, %r543, %r986, %r1745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1746, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1747, %r1745, %r1746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1750, %r1742, %r1747;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1753, %r554, %r986, %r1756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1757, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1758, %r1756, %r1757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1761, %r1753, %r1758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1764, %r543, %r1008, %r1745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1768, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1769, %r1745, %r1768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1772, %r1764, %r1769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1775, %r554, %r1008, %r1756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1779, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1780, %r1756, %r1779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1783, %r1775, %r1780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1786, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1786, %r1704, %r1662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1792, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1792, %r1715, %r1666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1798, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r1798, %r1726, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1804, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1804, %r1737, %r1674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1810, %r1750, %r1678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1816, %r1761, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1822, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1822, %r1772, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1828, %r201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1828, %r1783, %r1690;
	// end inline asm
	// begin inline asm
	mov.b32 %r1839, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1850, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1836, %r543, %r544, %r1839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1840, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1841, %r1839, %r1840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1844, %r1836, %r1841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1847, %r554, %r544, %r1850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1851, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1852, %r1850, %r1851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1855, %r1847, %r1852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1858, %r543, %r566, %r1839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1862, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1863, %r1839, %r1862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1866, %r1858, %r1863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1869, %r554, %r566, %r1850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1873, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1874, %r1850, %r1873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1877, %r1869, %r1874;
	// end inline asm
	// begin inline asm
	mov.b32 %r1885, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r1896, {%rs239, %rs239};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1882, %r543, %r590, %r1885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1886, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1887, %r1885, %r1886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1890, %r1882, %r1887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1893, %r554, %r590, %r1896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1897, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1898, %r1896, %r1897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1901, %r1893, %r1898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1904, %r543, %r612, %r1885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1908, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1909, %r1885, %r1908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1912, %r1904, %r1909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1915, %r554, %r612, %r1896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1919, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1920, %r1896, %r1919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1923, %r1915, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r219, %r1844, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r219, %r1855, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r219, %r1866, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r219, %r1877, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r219, %r1890, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r219, %r1901, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r219, %r1912, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r219, %r1923, %r1830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1958, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r1958, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r45, %r1965, %r1960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1967, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r45, %r1974, %r1969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1976, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r1976, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r45, %r1983, %r1978;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1985, %r46;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r1985, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r45, %r1992, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r46, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r45, %r1962, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r46, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r45, %r1971, %r2001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r46, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r45, %r1980, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r46, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r45, %r1989, %r2015;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2069, %r2066}, {%r64, %r66, %r65, %r67}, {%r1963, %r1997}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2075}, {%r64, %r66, %r65, %r67}, {%r1972, %r2004}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2087, %r2084}, {%r64, %r66, %r65, %r67}, {%r1981, %r2011}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2096, %r2093}, {%r64, %r66, %r65, %r67}, {%r1990, %r2018}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2062, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r2062, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r86, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2071, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r2071, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r86, %r2078, %r2073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2080, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2082, %r2080, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r86, %r2087, %r2082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2089, %r87;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r2089, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r86, %r2096, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r87, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r86, %r2066, %r2098;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r87, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r86, %r2075, %r2105;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2112, %r87, %r2087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2115, %r86, %r2084, %r2112;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r87, %r2096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r86, %r2093, %r2119;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2126, %r2127}, {%r127, %r129, %r128, %r130}, {%r2067, %r2101}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2136, %r2137}, {%r127, %r129, %r128, %r130}, {%r2076, %r2108}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2146, %r2147}, {%r127, %r129, %r128, %r130}, {%r2085, %r2115}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2156, %r2157}, {%r127, %r129, %r128, %r130}, {%r2094, %r2122}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r12, %r2126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r12, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r12, %r2136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r12, %r2137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r12, %r2146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r12, %r2147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2184, %r12, %r2156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r12, %r2157;
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2191, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2192, %r2166, %r2190;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2195, %r2192, %r2191;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2199, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2200, %r2169, %r2198;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2203, %r2200, %r2199;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2208, %r2172, %r2206;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2211, %r2208, %r2207;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2216, %r2175, %r2214;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2219, %r2216, %r2215;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2224, %r2178, %r2222;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2227, %r2224, %r2223;
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2232, %r2181, %r2230;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2235, %r2232, %r2231;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2240, %r2184, %r2238;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2243, %r2240, %r2239;
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs277, %rs277};
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs102, %rs102};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2248, %r2187, %r2246;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2251, %r2248, %r2247;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2256, %r2257, %r2255;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2259, %r2195, %r2256;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2263, %r2257, %r2262;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2266, %r2203, %r2263;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2270, %r2257, %r2269;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2273, %r2211, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2276, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2277, %r2257, %r2276;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2280, %r2219, %r2277;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2283, %r2259, %r2273, %r1388;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2287, %r2266, %r2280, %r1388;
	// end inline asm
	shl.b32 	%r2294, %r2287, 4;
	// begin inline asm
	lop3.b32 %r2291, %r1394, %r2283, %r2294, 202;
	// end inline asm
	xor.b32  	%r2338, %r2291, -2004318072;
	// begin inline asm
	mov.b32 %r2298, {%rs291, %rs291};
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2298, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2227, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2298, %r2303;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2235, %r2304;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2298, %r2310;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2243, %r2311;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs299, %rs299};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2298, %r2317;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2321, %r2251, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2324, %r2300, %r2314, %r1388;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2328, %r2307, %r2321, %r1388;
	// end inline asm
	shl.b32 	%r2335, %r2328, 4;
	// begin inline asm
	lop3.b32 %r2332, %r1394, %r2324, %r2335, 202;
	// end inline asm
	xor.b32  	%r2339, %r2332, -2004318072;
	st.shared.u32 	[%rd135], %r2338;
	st.shared.u32 	[%rd137], %r2339;
	add.s32 	%r2414, %r2414, -32;
	add.s64 	%rd137, %rd137, 4228;
	add.s64 	%rd136, %rd136, 4228;
	add.s64 	%rd135, %rd135, 4228;
	add.s64 	%rd134, %rd134, 4228;
	setp.eq.s32 	%p222, %r2414, 0;
	mov.u32 	%r2415, %r2407;
	mov.u32 	%r2416, %r2408;
	mov.u32 	%r2417, %r2409;
	mov.u32 	%r2418, %r2410;
	@%p222 bra 	LBB0_124;
	bra.uni 	LBB0_123;
LBB0_124:                               // %guard_pass5781
                                        //   in Loop: Header=BB0_122 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2345, [%rd41];
	ld.shared.u32 	%r2346, [%rd42+128];
	ld.shared.u32 	%r2353, [%rd42+4];
	ld.shared.u32 	%r2354, [%rd42+132];
	ld.shared.u32 	%r2361, [%rd43];
	ld.shared.u32 	%r2362, [%rd44+128];
	ld.shared.u32 	%r2369, [%rd44+4];
	ld.shared.u32 	%r2370, [%rd44+132];
	// begin inline asm
	prmt.b32 %r2340, %r2345, %r2346, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2344, %r2345, %r2346, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2348, %r2353, %r2354, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2352, %r2353, %r2354, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2356, %r2361, %r2362, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2360, %r2361, %r2362, %r514;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2364, %r2369, %r2370, %r510;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2368, %r2369, %r2370, %r514;
	// end inline asm
	selp.b32 	%r2372, %r2344, %r2340, %p221;
	shfl.sync.bfly.b32	%r148, %r2372, 8, 31, -1;
	selp.b32 	%r2373, %r2352, %r2348, %p221;
	shfl.sync.bfly.b32	%r149, %r2373, 8, 31, -1;
	selp.b32 	%r2374, %r2360, %r2356, %p221;
	shfl.sync.bfly.b32	%r150, %r2374, 8, 31, -1;
	selp.b32 	%r2375, %r2368, %r2364, %p221;
	shfl.sync.bfly.b32	%r151, %r2375, 8, 31, -1;
	setp.eq.s32 	%p224, %r97, 0;
	@%p224 bra 	LBB0_126;
// %bb.125:                             // %L16874
                                        //   in Loop: Header=BB0_122 Depth=1
	selp.b32 	%r2376, %r151, %r2368, %p221;
	selp.b32 	%r2377, %r2364, %r151, %p221;
	selp.b32 	%r2378, %r150, %r2360, %p221;
	selp.b32 	%r2379, %r2356, %r150, %p221;
	selp.b32 	%r2380, %r149, %r2352, %p221;
	selp.b32 	%r2381, %r2348, %r149, %p221;
	selp.b32 	%r2382, %r148, %r2344, %p221;
	selp.b32 	%r2383, %r2340, %r148, %p221;
	shl.b32 	%r2384, %r97, 12;
	or.b32  	%r2385, %r2384, %r131;
	add.s32 	%r2386, %r2385, -393216;
	or.b32  	%r2387, %r2386, %r139;
	or.b32  	%r2388, %r2387, %r136;
	add.s32 	%r2389, %r2388, %r138;
	mul.wide.s32 	%rd120, %r2389, 4;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r2383, %r2381, %r2382, %r2380};
	or.b32  	%r2390, %r2385, %r139;
	or.b32  	%r2391, %r2390, %r136;
	or.b32  	%r2392, %r2391, 131072;
	add.s32 	%r2393, %r2392, %r138;
	mul.wide.s32 	%rd122, %r2393, 4;
	add.s64 	%rd123, %rd3, %rd122;
	st.global.v4.u32 	[%rd123], {%r2379, %r2377, %r2378, %r2376};
	bra.uni 	LBB0_126;
LBB0_127:                               // %L17344
	st.global.u32 	[%rd4], %r2165;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd58, exception1;
	cvta.global.u64 	%rd59, %rd58;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd59;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd49;
	st.param.b32 	[param0+8], %r152;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L166
	mov.u32 	%r159, 2;
	st.global.u32 	[%rd4], %r159;
	mov.u64 	%rd61, exception1271;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd49;
	st.param.b32 	[param0+8], %r152;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L17454
	mov.u64 	%rd68, exception1;
	cvta.global.u64 	%rd69, %rd68;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd69;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd49;
	st.param.b32 	[param0+8], %r152;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_129:                               // %L17451
	mov.u64 	%rd73, exception1;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd49;
	st.param.b32 	[param0+8], %r152;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_128:                               // %L17448
	mov.u64 	%rd84, exception1;
	cvta.global.u64 	%rd85, %rd84;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd85;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd49;
	st.param.b32 	[param0+8], %r152;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
