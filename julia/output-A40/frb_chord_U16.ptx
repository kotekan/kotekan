// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2816[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<277>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3727>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<278>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r311, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r316, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r316, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd31, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r312, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r317, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r318, %r317, %r2;
	add.s32 	%r319, %r318, %r4;
	mul.wide.u32 	%rd37, %r319, 4;
	add.s64 	%rd5, %rd31, %rd37;
	mov.u32 	%r320, 1;
	st.global.u32 	[%rd5], %r320;
	setp.lt.s32 	%p4, %r312, 0;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L115
	ld.param.u32 	%r313, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r313, %r312;
	setp.gt.s32 	%p6, %r313, 4096;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L125
	ld.param.u32 	%r314, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r313, %r312;
	mad.lo.s32 	%r321, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r322, %r321, %r321, 4;
	setp.gt.u32 	%p8, %r322, 89478484;
	setp.lt.s32 	%p9, %r314, 0;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L131
	ld.param.u32 	%r315, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r315, %r314;
	setp.lt.s32 	%p12, %r315, 1025;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_6;
$L__BB0_167:                            // %pass40
	sub.s32 	%r323, %r315, %r314;
	mul.hi.s32 	%r324, %r5, 1717986919;
	shr.u32 	%r325, %r324, 31;
	shr.s32 	%r326, %r324, 4;
	add.s32 	%r327, %r326, %r325;
	setp.ne.s32 	%p14, %r323, %r327;
	@%p14 bra 	$L__BB0_6;
// %bb.168:                             // %pass90
	and.b32  	%r221, %r2, 3;
	shr.u32 	%r222, %r2, 2;
	mul.lo.s32 	%r328, %r221, %r222;
	and.b32  	%r329, %r328, 7;
	cvt.rn.f32.s32 	%f201, %r329;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p15, %f785, 0f40000000;
	setp.gtu.f32 	%p276, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p15 bra 	$L__BB0_180;
// %bb.169:
	@%p276 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_170;
$L__BB0_176:
	mov.b32 	%r224, %f785;
	and.b32  	%r330, %r224, 8388607;
	or.b32  	%r3722, %r330, 1065353216;
	mov.b32 	%f780, %r3722;
	add.s32 	%r331, %r224, -1073741824;
	and.b32  	%r3723, %r331, -8388608;
	setp.eq.s32 	%p22, %r3723, 0;
	@%p22 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r3723, 192937984;
	add.s32 	%r333, %r3722, %r332;
	mov.b32 	%f213, %r333;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3723, %r3723, %r332;
	mov.b32 	%r3722, %f780;
	setp.ne.s32 	%p23, %r3723, 0;
	setp.ne.s32 	%p24, %r3722, 0;
	and.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p26, %r224, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p26;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_180;
$L__BB0_170:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r223, %f172;
	setp.lt.u32 	%p17, %r223, 1073741824;
	@%p17 bra 	$L__BB0_175;
// %bb.171:
	setp.lt.u32 	%p18, %r223, -2147483647;
	@%p18 bra 	$L__BB0_173;
// %bb.172:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p21, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p21;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p19, %f172, 0f40800000;
	@%p19 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p20, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p20;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p27, %f222, 0f7F800000;
	mov.b32 	%r334, %f169;
	and.b32  	%r231, %r334, -2147483648;
	@%p27 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r335, %f781;
	or.b32  	%r336, %r231, %r335;
	mov.b32 	%f781, %r336;
$L__BB0_182:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r343, %f224;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f225, %r345;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p28, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p28;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p29, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p29;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r234, %r2, 1;
	and.b32  	%r235, %r234, 6;
	or.b32  	%r236, %r235, 1;
	setp.eq.s32 	%p35, %r235, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3619, %r235, %r222;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p35 bra 	$L__BB0_22;
// %bb.7:                               // %L339
	cvt.u16.u32 	%rs1, %r3619;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p36, %f733, 0f40000000;
	@%p36 bra 	$L__BB0_19;
// %bb.8:
	setp.gtu.f32 	%p37, %f733, 0f4B800000;
	@%p37 bra 	$L__BB0_15;
	bra.uni 	$L__BB0_9;
$L__BB0_15:
	mov.b32 	%r7, %f733;
	and.b32  	%r352, %r7, 8388607;
	or.b32  	%r3623, %r352, 1065353216;
	mov.b32 	%f732, %r3623;
	add.s32 	%r353, %r7, -1073741824;
	and.b32  	%r3624, %r353, -8388608;
	setp.eq.s32 	%p43, %r3624, 0;
	@%p43 bra 	$L__BB0_18;
// %bb.16:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_17:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r354, %r3624, 192937984;
	add.s32 	%r355, %r3623, %r354;
	mov.b32 	%f267, %r355;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3624, %r3624, %r354;
	mov.b32 	%r3623, %f732;
	setp.ne.s32 	%p44, %r3624, 0;
	setp.ne.s32 	%p45, %r3623, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_17;
$L__BB0_18:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p47, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_19;
$L__BB0_9:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p38, %r6, 1073741824;
	@%p38 bra 	$L__BB0_14;
// %bb.10:
	setp.lt.u32 	%p39, %r6, -2147483647;
	@%p39 bra 	$L__BB0_12;
// %bb.11:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p42, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p42;
	bra.uni 	$L__BB0_14;
$L__BB0_12:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p40, %f4, 0f40800000;
	@%p40 bra 	$L__BB0_14;
// %bb.13:                              // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p41, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p41;
$L__BB0_14:                             // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_19:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p48, %f276, 0f7F800000;
	@%p48 bra 	$L__BB0_21;
// %bb.20:
	mov.b32 	%r356, %f1;
	and.b32  	%r357, %r356, -2147483648;
	mov.b32 	%r358, %f733;
	or.b32  	%r359, %r357, %r358;
	mov.b32 	%f733, %r359;
$L__BB0_21:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r360, %f277;
	and.b32  	%r361, %r360, -2147483648;
	or.b32  	%r362, %r361, 1056964608;
	mov.b32 	%f278, %r362;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p49, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p49;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p50, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p50;
	cvt.rzi.s32.f32 	%r363, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r364, %r363, 1;
	setp.eq.b32 	%p51, %r364, 1;
	selp.f32 	%f296, %f294, %f295, %p51;
	selp.f32 	%f297, %f295, %f294, %p51;
	and.b32  	%r365, %r363, 2;
	setp.eq.s32 	%p52, %r365, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p52;
	add.s32 	%r366, %r363, 1;
	and.b32  	%r367, %r366, 2;
	setp.eq.s32 	%p53, %r367, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p53;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p54, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p54;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p55, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p55;
$L__BB0_22:                             // %L373
	cvt.rzi.s32.f32 	%r346, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p56, %r236, 5;
	mul.lo.s32 	%r3620, %r236, %r222;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p56 bra 	$L__BB0_38;
// %bb.23:                              // %L377
	mul.hi.u32 	%r369, %r3620, -1431655765;
	shr.u32 	%r370, %r369, 5;
	mul.lo.s32 	%r371, %r370, 48;
	sub.s32 	%r372, %r3620, %r371;
	cvt.rn.f32.s32 	%f308, %r372;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p57, %f739, 0f40000000;
	@%p57 bra 	$L__BB0_35;
// %bb.24:
	setp.gtu.f32 	%p58, %f739, 0f4B800000;
	@%p58 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_25;
$L__BB0_31:
	mov.b32 	%r15, %f739;
	and.b32  	%r373, %r15, 8388607;
	or.b32  	%r3625, %r373, 1065353216;
	mov.b32 	%f738, %r3625;
	add.s32 	%r374, %r15, -1073741824;
	and.b32  	%r3626, %r374, -8388608;
	setp.eq.s32 	%p64, %r3626, 0;
	@%p64 bra 	$L__BB0_34;
// %bb.32:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_33:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r375, %r3626, 192937984;
	add.s32 	%r376, %r3625, %r375;
	mov.b32 	%f320, %r376;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3626, %r3626, %r375;
	mov.b32 	%r3625, %f738;
	setp.ne.s32 	%p65, %r3626, 0;
	setp.ne.s32 	%p66, %r3625, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_33;
$L__BB0_34:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p68, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_35;
$L__BB0_25:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p59, %r14, 1073741824;
	@%p59 bra 	$L__BB0_30;
// %bb.26:
	setp.lt.u32 	%p60, %r14, -2147483647;
	@%p60 bra 	$L__BB0_28;
// %bb.27:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p63, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p63;
	bra.uni 	$L__BB0_30;
$L__BB0_28:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p61, %f25, 0f40800000;
	@%p61 bra 	$L__BB0_30;
// %bb.29:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p62, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p62;
$L__BB0_30:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_35:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p69, %f329, 0f7F800000;
	@%p69 bra 	$L__BB0_37;
// %bb.36:
	mov.b32 	%r377, %f22;
	and.b32  	%r378, %r377, -2147483648;
	mov.b32 	%r379, %f739;
	or.b32  	%r380, %r378, %r379;
	mov.b32 	%f739, %r380;
$L__BB0_37:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r381, %f330;
	and.b32  	%r382, %r381, -2147483648;
	or.b32  	%r383, %r382, 1056964608;
	mov.b32 	%f331, %r383;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p70, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p70;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p71, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p71;
	cvt.rzi.s32.f32 	%r384, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r385, %r384, 1;
	setp.eq.b32 	%p72, %r385, 1;
	selp.f32 	%f349, %f347, %f348, %p72;
	selp.f32 	%f350, %f348, %f347, %p72;
	and.b32  	%r386, %r384, 2;
	setp.eq.s32 	%p73, %r386, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p73;
	add.s32 	%r387, %r384, 1;
	and.b32  	%r388, %r387, 2;
	setp.eq.s32 	%p74, %r388, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p74;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p75, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p75;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p76, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p76;
$L__BB0_38:                             // %L411
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r347, %r346, 1;
	setp.gt.u32 	%p78, %r2, 23;
	or.pred  	%p1, %p35, %p78;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_54;
// %bb.39:                              // %L449
	cvt.u16.u32 	%rs8, %r3619;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p79, %f745, 0f40000000;
	@%p79 bra 	$L__BB0_51;
// %bb.40:
	setp.gtu.f32 	%p80, %f745, 0f4B800000;
	@%p80 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_41;
$L__BB0_47:
	mov.b32 	%r25, %f745;
	and.b32  	%r396, %r25, 8388607;
	or.b32  	%r3627, %r396, 1065353216;
	mov.b32 	%f744, %r3627;
	add.s32 	%r397, %r25, -1073741824;
	and.b32  	%r3628, %r397, -8388608;
	setp.eq.s32 	%p86, %r3628, 0;
	@%p86 bra 	$L__BB0_50;
// %bb.48:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_49:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3628, 192937984;
	add.s32 	%r399, %r3627, %r398;
	mov.b32 	%f373, %r399;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3628, %r3628, %r398;
	mov.b32 	%r3627, %f744;
	setp.ne.s32 	%p87, %r3628, 0;
	setp.ne.s32 	%p88, %r3627, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_49;
$L__BB0_50:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p90, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_51;
$L__BB0_41:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p81, %r24, 1073741824;
	@%p81 bra 	$L__BB0_46;
// %bb.42:
	setp.lt.u32 	%p82, %r24, -2147483647;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p85, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p85;
	bra.uni 	$L__BB0_46;
$L__BB0_44:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p83, %f46, 0f40800000;
	@%p83 bra 	$L__BB0_46;
// %bb.45:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p84, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p84;
$L__BB0_46:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_51:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p91, %f382, 0f7F800000;
	@%p91 bra 	$L__BB0_53;
// %bb.52:
	mov.b32 	%r400, %f43;
	and.b32  	%r401, %r400, -2147483648;
	mov.b32 	%r402, %f745;
	or.b32  	%r403, %r401, %r402;
	mov.b32 	%f745, %r403;
$L__BB0_53:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r404, %f383;
	and.b32  	%r405, %r404, -2147483648;
	or.b32  	%r406, %r405, 1056964608;
	mov.b32 	%f384, %r406;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p92, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p92;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p93, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p93;
	cvt.rzi.s32.f32 	%r407, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r408, %r407, 1;
	setp.eq.b32 	%p94, %r408, 1;
	selp.f32 	%f402, %f400, %f401, %p94;
	selp.f32 	%f403, %f401, %f400, %p94;
	and.b32  	%r409, %r407, 2;
	setp.eq.s32 	%p95, %r409, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p95;
	add.s32 	%r410, %r407, 1;
	and.b32  	%r411, %r410, 2;
	setp.eq.s32 	%p96, %r411, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p96;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p97, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p97;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p98, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p98;
$L__BB0_54:                             // %L483
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p30, %r347, 1;
	or.pred  	%p2, %p56, %p78;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_70;
// %bb.55:                              // %L491
	mul.hi.u32 	%r413, %r3620, -1431655765;
	shr.u32 	%r414, %r413, 2;
	mul.lo.s32 	%r415, %r414, 6;
	sub.s32 	%r416, %r3620, %r415;
	cvt.rn.f32.s32 	%f414, %r416;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p101, %f751, 0f40000000;
	@%p101 bra 	$L__BB0_67;
// %bb.56:
	setp.gtu.f32 	%p102, %f751, 0f4B800000;
	@%p102 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r33, %f751;
	and.b32  	%r417, %r33, 8388607;
	or.b32  	%r3629, %r417, 1065353216;
	mov.b32 	%f750, %r3629;
	add.s32 	%r418, %r33, -1073741824;
	and.b32  	%r3630, %r418, -8388608;
	setp.eq.s32 	%p108, %r3630, 0;
	@%p108 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3630, 192937984;
	add.s32 	%r420, %r3629, %r419;
	mov.b32 	%f426, %r420;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3630, %r3630, %r419;
	mov.b32 	%r3629, %f750;
	setp.ne.s32 	%p109, %r3630, 0;
	setp.ne.s32 	%p110, %r3629, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p112, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p103, %r32, 1073741824;
	@%p103 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p104, %r32, -2147483647;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p107, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p107;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p105, %f67, 0f40800000;
	@%p105 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p106, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p106;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p113, %f435, 0f7F800000;
	@%p113 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r421, %f64;
	and.b32  	%r422, %r421, -2147483648;
	mov.b32 	%r423, %f751;
	or.b32  	%r424, %r422, %r423;
	mov.b32 	%f751, %r424;
$L__BB0_69:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r425, %f436;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f437, %r427;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p114, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p114;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p115, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p115;
	cvt.rzi.s32.f32 	%r428, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p116, %r429, 1;
	selp.f32 	%f455, %f453, %f454, %p116;
	selp.f32 	%f456, %f454, %f453, %p116;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p117, %r430, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p117;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p118, %r432, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p118;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p119, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p119;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p120, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p120;
$L__BB0_70:                             // %L525
	selp.f32 	%f243, %f241, %f242, %p30;
	and.b32  	%r348, %r346, 2;
	@%p15 bra 	$L__BB0_190;
// %bb.71:
	@%p276 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_72;
$L__BB0_186:
	mov.b32 	%r238, %f785;
	and.b32  	%r445, %r238, 8388607;
	or.b32  	%r3724, %r445, 1065353216;
	mov.b32 	%f784, %r3724;
	add.s32 	%r446, %r238, -1073741824;
	and.b32  	%r3725, %r446, -8388608;
	setp.eq.s32 	%p128, %r3725, 0;
	@%p128 bra 	$L__BB0_189;
// %bb.187:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_188:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r447, %r3725, 192937984;
	add.s32 	%r448, %r3724, %r447;
	mov.b32 	%f476, %r448;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3725, %r3725, %r447;
	mov.b32 	%r3724, %f784;
	setp.ne.s32 	%p129, %r3725, 0;
	setp.ne.s32 	%p130, %r3724, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_188;
$L__BB0_189:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p132, %r238, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_190;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r237, %f187;
	setp.lt.u32 	%p123, %r237, 1073741824;
	@%p123 bra 	$L__BB0_185;
// %bb.73:
	setp.lt.u32 	%p124, %r237, -2147483647;
	@%p124 bra 	$L__BB0_183;
// %bb.74:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p127, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p127;
	bra.uni 	$L__BB0_185;
$L__BB0_183:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p125, %f187, 0f40800000;
	@%p125 bra 	$L__BB0_185;
// %bb.184:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p126, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p126;
$L__BB0_185:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_190:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p31, %r348, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r349, %r346, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p133, %f485, 0f7F800000;
	@%p133 bra 	$L__BB0_192;
// %bb.191:
	mov.b32 	%r449, %f785;
	or.b32  	%r450, %r231, %r449;
	mov.b32 	%f785, %r450;
$L__BB0_192:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p30;
	selp.f32 	%f246, %f243, %f245, %p31;
	and.b32  	%r350, %r349, 2;
	setp.eq.f32 	%p33, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r457, %f487;
	and.b32  	%r458, %r457, -2147483648;
	or.b32  	%r459, %r458, 1056964608;
	mov.b32 	%f488, %r459;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p135, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p135;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p136, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p136;
	cvt.rzi.s32.f32 	%r460, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r461, %r460, 1;
	setp.eq.b32 	%p137, %r461, 1;
	selp.f32 	%f506, %f504, %f505, %p137;
	selp.f32 	%f507, %f505, %f504, %p137;
	and.b32  	%r462, %r460, 2;
	setp.eq.s32 	%p138, %r462, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p138;
	add.s32 	%r463, %r460, 1;
	and.b32  	%r464, %r463, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p140, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p35 bra 	$L__BB0_90;
// %bb.75:                              // %L627
	cvt.u16.u32 	%rs15, %r3619;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p142, %f757, 0f40000000;
	@%p142 bra 	$L__BB0_87;
// %bb.76:
	setp.gtu.f32 	%p143, %f757, 0f4B800000;
	@%p143 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r45, %f757;
	and.b32  	%r466, %r45, 8388607;
	or.b32  	%r3631, %r466, 1065353216;
	mov.b32 	%f756, %r3631;
	add.s32 	%r467, %r45, -1073741824;
	and.b32  	%r3632, %r467, -8388608;
	setp.eq.s32 	%p149, %r3632, 0;
	@%p149 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r468, %r3632, 192937984;
	add.s32 	%r469, %r3631, %r468;
	mov.b32 	%f530, %r469;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3632, %r3632, %r468;
	mov.b32 	%r3631, %f756;
	setp.ne.s32 	%p150, %r3632, 0;
	setp.ne.s32 	%p151, %r3631, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p153, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p144, %r44, 1073741824;
	@%p144 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p145, %r44, -2147483647;
	@%p145 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p148;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p147;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p154, %f539, 0f7F800000;
	@%p154 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r470, %f85;
	and.b32  	%r471, %r470, -2147483648;
	mov.b32 	%r472, %f757;
	or.b32  	%r473, %r471, %r472;
	mov.b32 	%f757, %r473;
$L__BB0_89:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r474, %f540;
	and.b32  	%r475, %r474, -2147483648;
	or.b32  	%r476, %r475, 1056964608;
	mov.b32 	%f541, %r476;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p155, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p155;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p156, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p156;
	cvt.rzi.s32.f32 	%r477, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r478, %r477, 1;
	setp.eq.b32 	%p157, %r478, 1;
	selp.f32 	%f559, %f557, %f558, %p157;
	selp.f32 	%f560, %f558, %f557, %p157;
	and.b32  	%r479, %r477, 2;
	setp.eq.s32 	%p158, %r479, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p158;
	add.s32 	%r480, %r477, 1;
	and.b32  	%r481, %r480, 2;
	setp.eq.s32 	%p159, %r481, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p159;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p160, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p160;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p161, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p161;
$L__BB0_90:                             // %L661
	setp.eq.s32 	%p32, %r350, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p33;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p139, %r464, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p140;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p56 bra 	$L__BB0_106;
// %bb.91:                              // %L665
	mul.hi.u32 	%r483, %r3620, -1431655765;
	shr.u32 	%r484, %r483, 5;
	mul.lo.s32 	%r485, %r484, 48;
	sub.s32 	%r486, %r3620, %r485;
	cvt.rn.f32.s32 	%f571, %r486;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p163, %f763, 0f40000000;
	@%p163 bra 	$L__BB0_103;
// %bb.92:
	setp.gtu.f32 	%p164, %f763, 0f4B800000;
	@%p164 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r53, %f763;
	and.b32  	%r487, %r53, 8388607;
	or.b32  	%r3633, %r487, 1065353216;
	mov.b32 	%f762, %r3633;
	add.s32 	%r488, %r53, -1073741824;
	and.b32  	%r3634, %r488, -8388608;
	setp.eq.s32 	%p170, %r3634, 0;
	@%p170 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3634, 192937984;
	add.s32 	%r490, %r3633, %r489;
	mov.b32 	%f583, %r490;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3634, %r3634, %r489;
	mov.b32 	%r3633, %f762;
	setp.ne.s32 	%p171, %r3634, 0;
	setp.ne.s32 	%p172, %r3633, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p174, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p165, %r52, 1073741824;
	@%p165 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p166, %r52, -2147483647;
	@%p166 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p169, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p169;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p167, %f109, 0f40800000;
	@%p167 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p168, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p168;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p175, %f592, 0f7F800000;
	@%p175 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r491, %f106;
	and.b32  	%r492, %r491, -2147483648;
	mov.b32 	%r493, %f763;
	or.b32  	%r494, %r492, %r493;
	mov.b32 	%f763, %r494;
$L__BB0_105:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r495, %f593;
	and.b32  	%r496, %r495, -2147483648;
	or.b32  	%r497, %r496, 1056964608;
	mov.b32 	%f594, %r497;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p176, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p176;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p177, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p177;
	cvt.rzi.s32.f32 	%r498, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r499, %r498, 1;
	setp.eq.b32 	%p178, %r499, 1;
	selp.f32 	%f612, %f610, %f611, %p178;
	selp.f32 	%f613, %f611, %f610, %p178;
	and.b32  	%r500, %r498, 2;
	setp.eq.s32 	%p179, %r500, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p179;
	add.s32 	%r501, %r498, 1;
	and.b32  	%r502, %r501, 2;
	setp.eq.s32 	%p180, %r502, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p180;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p181, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p181;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p182, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p182;
$L__BB0_106:                            // %L699
	selp.f32 	%f248, %f244, %f247, %p32;
	setp.gt.f32 	%p34, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p139;
	setp.gt.f32 	%p141, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_122;
// %bb.107:                             // %L737
	cvt.u16.u32 	%rs22, %r3619;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p183, %f769, 0f40000000;
	@%p183 bra 	$L__BB0_119;
// %bb.108:
	setp.gtu.f32 	%p184, %f769, 0f4B800000;
	@%p184 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_109;
$L__BB0_115:
	mov.b32 	%r63, %f769;
	and.b32  	%r510, %r63, 8388607;
	or.b32  	%r3635, %r510, 1065353216;
	mov.b32 	%f768, %r3635;
	add.s32 	%r511, %r63, -1073741824;
	and.b32  	%r3636, %r511, -8388608;
	setp.eq.s32 	%p190, %r3636, 0;
	@%p190 bra 	$L__BB0_118;
// %bb.116:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_117:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r512, %r3636, 192937984;
	add.s32 	%r513, %r3635, %r512;
	mov.b32 	%f636, %r513;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3636, %r3636, %r512;
	mov.b32 	%r3635, %f768;
	setp.ne.s32 	%p191, %r3636, 0;
	setp.ne.s32 	%p192, %r3635, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_117;
$L__BB0_118:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p194, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_119;
$L__BB0_109:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p185, %r62, 1073741824;
	@%p185 bra 	$L__BB0_114;
// %bb.110:
	setp.lt.u32 	%p186, %r62, -2147483647;
	@%p186 bra 	$L__BB0_112;
// %bb.111:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p189, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p189;
	bra.uni 	$L__BB0_114;
$L__BB0_112:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p187, %f130, 0f40800000;
	@%p187 bra 	$L__BB0_114;
// %bb.113:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p188, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p188;
$L__BB0_114:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_119:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p195, %f645, 0f7F800000;
	@%p195 bra 	$L__BB0_121;
// %bb.120:
	mov.b32 	%r514, %f127;
	and.b32  	%r515, %r514, -2147483648;
	mov.b32 	%r516, %f769;
	or.b32  	%r517, %r515, %r516;
	mov.b32 	%f769, %r517;
$L__BB0_121:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r518, %f646;
	and.b32  	%r519, %r518, -2147483648;
	or.b32  	%r520, %r519, 1056964608;
	mov.b32 	%f647, %r520;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p196, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p196;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p197, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p197;
	cvt.rzi.s32.f32 	%r521, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r522, %r521, 1;
	setp.eq.b32 	%p198, %r522, 1;
	selp.f32 	%f665, %f663, %f664, %p198;
	selp.f32 	%f666, %f664, %f663, %p198;
	and.b32  	%r523, %r521, 2;
	setp.eq.s32 	%p199, %r523, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p199;
	add.s32 	%r524, %r521, 1;
	and.b32  	%r525, %r524, 2;
	setp.eq.s32 	%p200, %r525, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p200;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p201, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p201;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p202, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p202;
$L__BB0_122:                            // %L771
	selp.f32 	%f254, %f253, %f248, %p34;
	selp.f32 	%f517, %f516, %f511, %p141;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_138;
// %bb.123:                             // %L779
	mul.hi.u32 	%r527, %r3620, -1431655765;
	shr.u32 	%r528, %r527, 2;
	mul.lo.s32 	%r529, %r528, 6;
	sub.s32 	%r530, %r3620, %r529;
	cvt.rn.f32.s32 	%f677, %r530;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p203, %f775, 0f40000000;
	@%p203 bra 	$L__BB0_135;
// %bb.124:
	setp.gtu.f32 	%p204, %f775, 0f4B800000;
	@%p204 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_125;
$L__BB0_131:
	mov.b32 	%r71, %f775;
	and.b32  	%r531, %r71, 8388607;
	or.b32  	%r3637, %r531, 1065353216;
	mov.b32 	%f774, %r3637;
	add.s32 	%r532, %r71, -1073741824;
	and.b32  	%r3638, %r532, -8388608;
	setp.eq.s32 	%p210, %r3638, 0;
	@%p210 bra 	$L__BB0_134;
// %bb.132:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_133:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r533, %r3638, 192937984;
	add.s32 	%r534, %r3637, %r533;
	mov.b32 	%f689, %r534;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3638, %r3638, %r533;
	mov.b32 	%r3637, %f774;
	setp.ne.s32 	%p211, %r3638, 0;
	setp.ne.s32 	%p212, %r3637, 0;
	and.pred  	%p213, %p211, %p212;
	@%p213 bra 	$L__BB0_133;
$L__BB0_134:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p214, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p214;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_135;
$L__BB0_125:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p205, %r70, 1073741824;
	@%p205 bra 	$L__BB0_130;
// %bb.126:
	setp.lt.u32 	%p206, %r70, -2147483647;
	@%p206 bra 	$L__BB0_128;
// %bb.127:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p209, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p209;
	bra.uni 	$L__BB0_130;
$L__BB0_128:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p207, %f151, 0f40800000;
	@%p207 bra 	$L__BB0_130;
// %bb.129:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p208, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p208;
$L__BB0_130:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_135:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p215, %f698, 0f7F800000;
	@%p215 bra 	$L__BB0_137;
// %bb.136:
	mov.b32 	%r535, %f148;
	and.b32  	%r536, %r535, -2147483648;
	mov.b32 	%r537, %f775;
	or.b32  	%r538, %r536, %r537;
	mov.b32 	%f775, %r538;
$L__BB0_137:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r539, %f699;
	and.b32  	%r540, %r539, -2147483648;
	or.b32  	%r541, %r540, 1056964608;
	mov.b32 	%f700, %r541;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p216, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p216;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p217, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p217;
	cvt.rzi.s32.f32 	%r542, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r543, %r542, 1;
	setp.eq.b32 	%p218, %r543, 1;
	selp.f32 	%f718, %f716, %f717, %p218;
	selp.f32 	%f719, %f717, %f716, %p218;
	and.b32  	%r544, %r542, 2;
	setp.eq.s32 	%p219, %r544, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p219;
	add.s32 	%r545, %r542, 1;
	and.b32  	%r546, %r545, 2;
	setp.eq.s32 	%p220, %r546, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p220;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p221, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p221;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p222, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p222;
$L__BB0_138:                            // %L813
	mov.b32 	%r339, %f254;
	mov.b32 	%r342, %f251;
	mov.b32 	%r434, %f747;
	mov.b32 	%r435, %f753;
	mov.b32 	%r440, %f748;
	mov.b32 	%r441, %f754;
	mov.b32 	%r453, %f517;
	mov.b32 	%r456, %f514;
	mov.b32 	%r548, %f771;
	mov.b32 	%r549, %f777;
	mov.b32 	%r554, %f772;
	mov.b32 	%r555, %f778;
	mov.u32 	%r3726, 999999999;
	cvt.u16.u32 	%rs247, %r2;
	@%p78 bra 	$L__BB0_140;
// %bb.139:                             // %L849
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r560, %rs34;
	and.b32  	%r561, %r560, 255;
	mad.lo.s32 	%r562, %r561, 24, %r3;
	cvt.u16.u32 	%rs35, %r562;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r563, %rs39;
	mul.wide.u32 	%rd38, %r563, 4;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.u32 	%r564, [%rd39];
	cvt.s32.s16 	%r565, %r564;
	shr.s32 	%r566, %r564, 16;
	mul.lo.s32 	%r567, %r566, 801;
	mad.lo.s32 	%r3726, %r565, 33, %r567;
$L__BB0_140:                            // %pass386
	xor.b32  	%r338, %r342, -2147483648;
	mov.b32 	%r390, %f735;
	mov.b32 	%r391, %f741;
	mov.b32 	%r393, %f736;
	mov.b32 	%r394, %f742;
	xor.b32  	%r437, %r440, -2147483648;
	xor.b32  	%r438, %r441, -2147483648;
	xor.b32  	%r452, %r456, -2147483648;
	mov.b32 	%r504, %f759;
	mov.b32 	%r505, %f765;
	mov.b32 	%r507, %f760;
	mov.b32 	%r508, %f766;
	xor.b32  	%r551, %r554, -2147483648;
	xor.b32  	%r552, %r555, -2147483648;
	and.b32  	%r568, %r2, 24;
	setp.ne.s32 	%p224, %r568, 24;
	cvt.u16.u32 	%rs248, %r222;
	mul.lo.s32 	%r3639, %r1, 1152;
	@%p224 bra 	$L__BB0_141;
// %bb.193:                             // %pass386.L1186_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r580, %rs50;
	and.b32  	%r3640, %r580, 255;
	mov.u32 	%r3641, 0;
	mov.u32 	%r3642, %r3641;
	bra.uni 	$L__BB0_142;
$L__BB0_141:                            // %pass412
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mul.lo.s32 	%r569, %r221, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r570, %rs44;
	and.b32  	%r3640, %r570, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r571, %rs45, 24;
	or.b32  	%r572, %r3639, %r3;
	add.s32 	%r573, %r572, %r569;
	add.s32 	%r574, %r573, %r571;
	mul.wide.u32 	%rd40, %r574, 4;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.u32 	%r3641, [%rd41];
	or.b32  	%r575, %r3, 576;
	add.s32 	%r576, %r575, %r3639;
	add.s32 	%r577, %r576, %r569;
	add.s32 	%r578, %r577, %r571;
	mul.wide.u32 	%rd42, %r578, 4;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r3642, [%rd43];
$L__BB0_142:                            // %L1186
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r451, %r453, %r452;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r454, %r456, %r453;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r504;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r547, %r549, %r548;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r550, %r552, %r551;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r553, %r555, %r554;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r556, %r549, %r548;
	// end inline asm
	mov.u32 	%r3643, 0;
	shl.b32 	%r87, %r2, 2;
	and.b32  	%r582, %r87, 60;
	shl.b32 	%r583, %r2, 3;
	and.b32  	%r584, %r583, 128;
	shl.b32 	%r585, %r1, 8;
	or.b32  	%r586, %r582, %r585;
	or.b32  	%r88, %r586, %r584;
	or.b32  	%r89, %r584, 64;
	mad.lo.s32 	%r90, %r312, 196608, %r585;
	add.s32 	%r91, %r3, 24;
	and.b32  	%r587, %r234, 30;
	shr.u32 	%r588, %r2, 4;
	or.b32  	%r589, %r587, %r588;
	mul.lo.s32 	%r92, %r589, 257;
	or.b32  	%r590, %r588, %r234;
	or.b32  	%r591, %r590, 32;
	mul.lo.s32 	%r93, %r591, 257;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r592, %rs56;
	and.b32  	%r94, %r592, 255;
	and.b32  	%r593, %r4, 224;
	shr.u32 	%r594, %r3, 3;
	mad.lo.s32 	%r95, %r594, 257, %r593;
	shr.u32 	%r595, %r91, 3;
	mad.lo.s32 	%r96, %r595, 257, %r593;
	add.s32 	%r596, %r3, 48;
	shr.u32 	%r597, %r596, 3;
	mad.lo.s32 	%r97, %r597, 257, %r593;
	add.s32 	%r598, %r3, 72;
	shr.u32 	%r599, %r598, 3;
	mad.lo.s32 	%r98, %r599, 257, %r593;
	or.b32  	%r600, %r594, 12;
	mad.lo.s32 	%r99, %r600, 257, %r593;
	add.s32 	%r601, %r3, 120;
	shr.u32 	%r602, %r601, 3;
	mad.lo.s32 	%r100, %r602, 257, %r593;
	add.s32 	%r603, %r3, 144;
	shr.u32 	%r604, %r603, 3;
	mad.lo.s32 	%r101, %r604, 257, %r593;
	add.s32 	%r605, %r3, 168;
	shr.u32 	%r606, %r605, 3;
	mad.lo.s32 	%r102, %r606, 257, %r593;
	or.b32  	%r607, %r594, 24;
	mad.lo.s32 	%r103, %r607, 257, %r593;
	add.s32 	%r608, %r3, 216;
	shr.u32 	%r609, %r608, 3;
	mad.lo.s32 	%r104, %r609, 257, %r593;
	add.s32 	%r610, %r3, 240;
	shr.u32 	%r611, %r610, 3;
	mad.lo.s32 	%r105, %r611, 257, %r593;
	add.s32 	%r612, %r3, 264;
	shr.u32 	%r613, %r612, 3;
	mad.lo.s32 	%r106, %r613, 257, %r593;
	or.b32  	%r614, %r594, 36;
	mad.lo.s32 	%r107, %r614, 257, %r593;
	add.s32 	%r615, %r3, 312;
	shr.u32 	%r616, %r615, 3;
	mad.lo.s32 	%r108, %r616, 257, %r593;
	add.s32 	%r617, %r3, 336;
	shr.u32 	%r618, %r617, 3;
	mad.lo.s32 	%r109, %r618, 257, %r593;
	add.s32 	%r619, %r3, 360;
	shr.u32 	%r620, %r619, 3;
	mad.lo.s32 	%r110, %r620, 257, %r593;
	or.b32  	%r621, %r594, 48;
	mad.lo.s32 	%r111, %r621, 257, %r593;
	add.s32 	%r622, %r3, 408;
	shr.u32 	%r623, %r622, 3;
	mad.lo.s32 	%r112, %r623, 257, %r593;
	add.s32 	%r624, %r3, 432;
	shr.u32 	%r625, %r624, 3;
	mad.lo.s32 	%r113, %r625, 257, %r593;
	add.s32 	%r626, %r3, 456;
	shr.u32 	%r627, %r626, 3;
	mad.lo.s32 	%r114, %r627, 257, %r593;
	or.b32  	%r628, %r594, 60;
	mad.lo.s32 	%r115, %r628, 257, %r593;
	add.s32 	%r629, %r3, 504;
	bfe.u32 	%r630, %r629, 3, 6;
	mad.lo.s32 	%r116, %r630, 257, %r593;
	mul.lo.s32 	%r631, %r3, 33;
	mad.lo.s32 	%r632, %r221, 4806, %r631;
	mad.lo.s32 	%r633, %r3640, 801, %r632;
	bfe.s32 	%r634, %r2, 3, 1;
	and.b32  	%r635, %r634, 514;
	and.b32  	%r636, %r2, 1;
	neg.s32 	%r637, %r636;
	and.b32  	%r638, %r637, 4112;
	bfe.s32 	%r639, %r2, 1, 1;
	and.b32  	%r640, %r639, 2056;
	mul.lo.s32 	%r641, %r588, 257;
	bfe.s32 	%r642, %r2, 2, 1;
	and.b32  	%r643, %r2, 4;
	setp.eq.s32 	%p225, %r643, 0;
	and.b32  	%r644, %r642, 1028;
	or.b32  	%r645, %r635, %r638;
	add.s32 	%r646, %r641, %r3;
	add.s32 	%r647, %r646, %r640;
	add.s32 	%r648, %r647, %r644;
	add.s32 	%r649, %r648, %r645;
	mul.wide.u32 	%rd44, %r649, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd6, %rd45, %rd44;
	add.s32 	%r650, %r640, %r3;
	add.s32 	%r651, %r650, %r645;
	or.b32  	%r652, %r651, 8256;
	add.s32 	%r653, %r644, %r641;
	add.s32 	%r654, %r653, %r652;
	mul.wide.u32 	%rd46, %r654, 4;
	add.s64 	%rd7, %rd45, %rd46;
	or.b32  	%r655, %r3, 32;
	add.s32 	%r656, %r655, %r641;
	add.s32 	%r657, %r656, %r640;
	add.s32 	%r658, %r657, %r644;
	add.s32 	%r659, %r658, %r645;
	mul.wide.u32 	%rd47, %r659, 4;
	add.s64 	%rd8, %rd45, %rd47;
	cvt.u64.u32 	%rd48, %r652;
	selp.b64 	%rd49, 0, 1028, %p225;
	cvt.u64.u32 	%rd50, %r641;
	add.s64 	%rd51, %rd50, %rd49;
	add.s64 	%rd52, %rd51, %rd48;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd45, %rd53;
	or.b32  	%r660, %r3, 8256;
	add.s32 	%r661, %r660, %r641;
	add.s32 	%r662, %r661, %r640;
	add.s32 	%r663, %r662, %r644;
	add.s32 	%r664, %r663, %r645;
	or.b32  	%r665, %r3, 8288;
	add.s32 	%r666, %r665, %r641;
	add.s32 	%r667, %r666, %r640;
	add.s32 	%r668, %r667, %r644;
	add.s32 	%r669, %r668, %r645;
	shr.u32 	%r670, %r3, 4;
	bfe.s32 	%r671, %r3, 1, 1;
	and.b32  	%r672, %r671, 4112;
	bfe.s32 	%r673, %r3, 2, 1;
	and.b32  	%r674, %r673, 2056;
	mul.lo.s32 	%r675, %r221, 6;
	and.b32  	%r676, %r3, 1;
	neg.s32 	%r677, %r676;
	and.b32  	%r678, %r677, 8256;
	bfe.s32 	%r679, %r3, 3, 1;
	and.b32  	%r680, %r3, 8;
	setp.eq.s32 	%p226, %r680, 0;
	and.b32  	%r681, %r679, 1028;
	mad.lo.s32 	%r682, %r670, 514, %r675;
	add.s32 	%r683, %r682, %r672;
	add.s32 	%r684, %r683, %r674;
	add.s32 	%r685, %r684, %r678;
	add.s32 	%r686, %r685, %r681;
	add.s32 	%r687, %r686, %r3640;
	mul.wide.u32 	%rd54, %r687, 4;
	add.s64 	%rd10, %rd45, %rd54;
	bfe.s32 	%r688, %r91, 4, 1;
	and.b32  	%r689, %r688, 514;
	shr.u32 	%r690, %r91, 5;
	selp.b32 	%r691, 1028, 0, %p226;
	or.b32  	%r692, %r672, %r689;
	add.s32 	%r693, %r674, %r675;
	or.b32  	%r694, %r693, %r678;
	mad.lo.s32 	%r695, %r690, 257, %r694;
	add.s32 	%r696, %r695, %r691;
	add.s32 	%r697, %r696, %r3640;
	add.s32 	%r698, %r697, %r692;
	mul.wide.u32 	%rd55, %r698, 4;
	add.s64 	%rd11, %rd45, %rd55;
	add.s32 	%r699, %r687, 32;
	mul.wide.u32 	%rd56, %r699, 4;
	add.s64 	%rd12, %rd45, %rd56;
	add.s32 	%r700, %r698, 32;
	mul.wide.u32 	%rd57, %r700, 4;
	add.s64 	%rd13, %rd45, %rd57;
	mul.lo.s32 	%r701, %r314, 884736;
	mad.lo.s32 	%r702, %r3, 24, %r3639;
	add.s32 	%r117, %r702, %r94;
	cvt.s64.s32 	%rd14, %r701;
	cvt.u16.u32 	%rs57, %r91;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r703, %rs62;
	and.b32  	%r704, %r703, 255;
	or.b32  	%r705, %r3639, %r94;
	mad.lo.s32 	%r118, %r704, 24, %r705;
	mul.wide.u32 	%rd58, %r633, 4;
	add.s64 	%rd15, %rd45, %rd58;
	mul.wide.u32 	%rd59, %r664, 4;
	add.s64 	%rd16, %rd45, %rd59;
	mul.wide.u32 	%rd60, %r669, 4;
	add.s64 	%rd17, %rd45, %rd60;
	add.s32 	%r706, %r687, 64;
	mul.wide.u32 	%rd61, %r706, 4;
	add.s64 	%rd18, %rd45, %rd61;
	add.s32 	%r707, %r698, 64;
	mul.wide.u32 	%rd62, %r707, 4;
	add.s64 	%rd19, %rd45, %rd62;
	add.s32 	%r708, %r687, 96;
	mul.wide.u32 	%rd63, %r708, 4;
	add.s64 	%rd20, %rd45, %rd63;
	add.s32 	%r709, %r698, 96;
	mul.wide.u32 	%rd64, %r709, 4;
	add.s64 	%rd21, %rd45, %rd64;
	add.s32 	%r710, %r687, 128;
	mul.wide.u32 	%rd65, %r710, 4;
	add.s64 	%rd22, %rd45, %rd65;
	add.s32 	%r711, %r698, 128;
	mul.wide.u32 	%rd66, %r711, 4;
	add.s64 	%rd23, %rd45, %rd66;
	add.s32 	%r712, %r687, 160;
	mul.wide.u32 	%rd67, %r712, 4;
	add.s64 	%rd24, %rd45, %rd67;
	add.s32 	%r713, %r698, 160;
	mul.wide.u32 	%rd68, %r713, 4;
	add.s64 	%rd25, %rd45, %rd68;
	add.s32 	%r714, %r687, 192;
	mul.wide.u32 	%rd69, %r714, 4;
	add.s64 	%rd26, %rd45, %rd69;
	add.s32 	%r715, %r698, 192;
	mul.wide.u32 	%rd70, %r715, 4;
	add.s64 	%rd27, %rd45, %rd70;
	add.s32 	%r716, %r687, 224;
	mul.wide.u32 	%rd71, %r716, 4;
	add.s64 	%rd28, %rd45, %rd71;
	add.s32 	%r717, %r698, 224;
	mul.wide.u32 	%rd72, %r717, 4;
	add.s64 	%rd29, %rd45, %rd72;
	setp.gt.u32 	%p228, %r3, 7;
	setp.lt.u32 	%p229, %r2, 16;
	setp.lt.u32 	%p237, %r2, 24;
	mov.u32 	%r3673, %r3643;
	mov.u32 	%r3674, %r3643;
	mov.u32 	%r3675, %r3643;
	mov.u32 	%r3676, %r3643;
	bra.uni 	$L__BB0_143;
$L__BB0_165:                            // %L30705
                                        //   in Loop: Header=BB0_143 Depth=1
	add.s32 	%r220, %r3643, 48;
	setp.ne.s32 	%p275, %r3643, 1968;
	mov.u32 	%r3643, %r220;
	@%p275 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_166;
$L__BB0_143:                            // %L1189
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_146 Depth 2
                                        //     Child Loop BB0_156 Depth 2
	add.s32 	%r718, %r3643, %r312;
	setp.lt.s32 	%p227, %r718, %r313;
	@%p227 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_166;
$L__BB0_144:                            // %oksrem559
                                        //   in Loop: Header=BB0_143 Depth=1
	mul.hi.u32 	%r912, %r3643, -1431655765;
	shr.u32 	%r913, %r912, 5;
	mul.lo.s32 	%r254, %r913, 48;
	add.s32 	%r914, %r254, %r3;
	cvt.u16.u32 	%rs63, %r914;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 5;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -2048;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r915, %rs68;
	add.s32 	%r916, %r915, %r312;
	mad.lo.s32 	%r917, %r916, 196608, %r88;
	mul.hi.s32 	%r918, %r917, 715827883;
	shr.u32 	%r919, %r918, 31;
	shr.s32 	%r920, %r918, 26;
	add.s32 	%r921, %r920, %r919;
	setp.lt.s32 	%p231, %r917, 0;
	mul.lo.s32 	%r922, %r921, 402653184;
	setp.ne.s32 	%p232, %r922, %r917;
	and.pred  	%p233, %p231, %p232;
	selp.s32 	%r923, -1, 0, %p233;
	add.s32 	%r924, %r921, %r923;
	mad.lo.s32 	%r925, %r924, -402653184, %r917;
	mul.wide.s32 	%rd73, %r925, 4;
	add.s64 	%rd74, %rd3, %rd73;
	ld.global.v4.u32 	{%r926, %r927, %r928, %r929}, [%rd74];
	mul.lo.s32 	%r930, %r915, 196608;
	or.b32  	%r931, %r930, %r87;
	or.b32  	%r932, %r89, %r931;
	add.s32 	%r933, %r90, %r932;
	mul.hi.s32 	%r934, %r933, 715827883;
	shr.u32 	%r935, %r934, 31;
	shr.s32 	%r936, %r934, 26;
	add.s32 	%r937, %r936, %r935;
	shr.s32 	%r938, %r933, 31;
	add.s32 	%r939, %r938, %r937;
	or.b32  	%r940, %r933, 1;
	mad.lo.s32 	%r941, %r939, -402653184, %r940;
	mul.wide.s32 	%rd75, %r941, 4;
	add.s64 	%rd76, %rd3, %rd75;
	ld.global.v4.u32 	{%r942, %r943, %r944, %r945}, [%rd76+-4];
	add.s32 	%r946, %r91, %r254;
	cvt.u16.u32 	%rs69, %r946;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 5;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -2048;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.s32.s16 	%r947, %rs74;
	add.s32 	%r948, %r947, %r312;
	mad.lo.s32 	%r949, %r948, 196608, %r88;
	mul.hi.s32 	%r950, %r949, 715827883;
	shr.u32 	%r951, %r950, 31;
	shr.s32 	%r952, %r950, 26;
	add.s32 	%r953, %r952, %r951;
	setp.lt.s32 	%p234, %r949, 0;
	mul.lo.s32 	%r954, %r953, 402653184;
	setp.ne.s32 	%p235, %r954, %r949;
	and.pred  	%p236, %p234, %p235;
	selp.s32 	%r955, -1, 0, %p236;
	add.s32 	%r956, %r953, %r955;
	mad.lo.s32 	%r957, %r956, -402653184, %r949;
	mul.wide.s32 	%rd77, %r957, 4;
	add.s64 	%rd78, %rd3, %rd77;
	ld.global.v4.u32 	{%r958, %r959, %r960, %r961}, [%rd78];
	mul.lo.s32 	%r962, %r947, 196608;
	or.b32  	%r963, %r962, %r87;
	or.b32  	%r964, %r89, %r963;
	add.s32 	%r965, %r90, %r964;
	mul.hi.s32 	%r966, %r965, 715827883;
	shr.u32 	%r967, %r966, 31;
	shr.s32 	%r968, %r966, 26;
	add.s32 	%r969, %r968, %r967;
	shr.s32 	%r970, %r965, 31;
	add.s32 	%r971, %r970, %r969;
	or.b32  	%r972, %r965, 1;
	mad.lo.s32 	%r973, %r971, -402653184, %r972;
	mul.wide.s32 	%rd79, %r973, 4;
	add.s64 	%rd80, %rd3, %rd79;
	ld.global.v4.u32 	{%r974, %r975, %r976, %r977}, [%rd80+-4];
	selp.b32 	%r978, %r928, %r926, %p229;
	shfl.sync.bfly.b32	%r979, %r978, 16, 31, -1;
	selp.b32 	%r721, %r926, %r979, %p229;
	selp.b32 	%r726, %r979, %r928, %p229;
	selp.b32 	%r980, %r929, %r927, %p229;
	shfl.sync.bfly.b32	%r981, %r980, 16, 31, -1;
	selp.b32 	%r729, %r927, %r981, %p229;
	selp.b32 	%r734, %r981, %r929, %p229;
	selp.b32 	%r982, %r944, %r942, %p229;
	shfl.sync.bfly.b32	%r983, %r982, 16, 31, -1;
	selp.b32 	%r737, %r942, %r983, %p229;
	selp.b32 	%r742, %r983, %r944, %p229;
	selp.b32 	%r984, %r945, %r943, %p229;
	shfl.sync.bfly.b32	%r985, %r984, 16, 31, -1;
	selp.b32 	%r745, %r943, %r985, %p229;
	selp.b32 	%r750, %r985, %r945, %p229;
	selp.b32 	%r986, %r960, %r958, %p229;
	shfl.sync.bfly.b32	%r987, %r986, 16, 31, -1;
	selp.b32 	%r753, %r958, %r987, %p229;
	selp.b32 	%r758, %r987, %r960, %p229;
	selp.b32 	%r988, %r961, %r959, %p229;
	shfl.sync.bfly.b32	%r989, %r988, 16, 31, -1;
	selp.b32 	%r761, %r959, %r989, %p229;
	selp.b32 	%r766, %r989, %r961, %p229;
	selp.b32 	%r990, %r976, %r974, %p229;
	shfl.sync.bfly.b32	%r991, %r990, 16, 31, -1;
	selp.b32 	%r769, %r974, %r991, %p229;
	selp.b32 	%r774, %r991, %r976, %p229;
	selp.b32 	%r992, %r977, %r975, %p229;
	shfl.sync.bfly.b32	%r993, %r992, 16, 31, -1;
	selp.b32 	%r777, %r975, %r993, %p229;
	selp.b32 	%r782, %r993, %r977, %p229;
	shl.b32 	%r722, %r726, 4;
	mov.u32 	%r720, 252645135;
	// begin inline asm
	lop3.b32 %r784, %r720, %r721, %r722, 202;
	// end inline asm
	shr.u32 	%r725, %r721, 4;
	// begin inline asm
	lop3.b32 %r800, %r720, %r725, %r726, 202;
	// end inline asm
	shl.b32 	%r730, %r734, 4;
	// begin inline asm
	lop3.b32 %r792, %r720, %r729, %r730, 202;
	// end inline asm
	shr.u32 	%r733, %r729, 4;
	// begin inline asm
	lop3.b32 %r808, %r720, %r733, %r734, 202;
	// end inline asm
	shl.b32 	%r738, %r742, 4;
	// begin inline asm
	lop3.b32 %r816, %r720, %r737, %r738, 202;
	// end inline asm
	shr.u32 	%r741, %r737, 4;
	// begin inline asm
	lop3.b32 %r832, %r720, %r741, %r742, 202;
	// end inline asm
	shl.b32 	%r746, %r750, 4;
	// begin inline asm
	lop3.b32 %r824, %r720, %r745, %r746, 202;
	// end inline asm
	shr.u32 	%r749, %r745, 4;
	// begin inline asm
	lop3.b32 %r840, %r720, %r749, %r750, 202;
	// end inline asm
	shl.b32 	%r754, %r758, 4;
	// begin inline asm
	lop3.b32 %r785, %r720, %r753, %r754, 202;
	// end inline asm
	shr.u32 	%r757, %r753, 4;
	// begin inline asm
	lop3.b32 %r801, %r720, %r757, %r758, 202;
	// end inline asm
	shl.b32 	%r762, %r766, 4;
	// begin inline asm
	lop3.b32 %r793, %r720, %r761, %r762, 202;
	// end inline asm
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r809, %r720, %r765, %r766, 202;
	// end inline asm
	shl.b32 	%r770, %r774, 4;
	// begin inline asm
	lop3.b32 %r817, %r720, %r769, %r770, 202;
	// end inline asm
	shr.u32 	%r773, %r769, 4;
	// begin inline asm
	lop3.b32 %r833, %r720, %r773, %r774, 202;
	// end inline asm
	shl.b32 	%r778, %r782, 4;
	// begin inline asm
	lop3.b32 %r825, %r720, %r777, %r778, 202;
	// end inline asm
	shr.u32 	%r781, %r777, 4;
	// begin inline asm
	lop3.b32 %r841, %r720, %r781, %r782, 202;
	// end inline asm
	mov.u32 	%r786, 25152;
	// begin inline asm
	prmt.b32 %r848, %r784, %r785, %r786;
	// end inline asm
	mov.u32 	%r790, 29521;
	// begin inline asm
	prmt.b32 %r880, %r784, %r785, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r856, %r792, %r793, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r792, %r793, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r849, %r800, %r801, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r800, %r801, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r857, %r808, %r809, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r808, %r809, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r816, %r817, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r816, %r817, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r824, %r825, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r824, %r825, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r832, %r833, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r832, %r833, %r790;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r840, %r841, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r840, %r841, %r790;
	// end inline asm
	mov.u32 	%r906, 21520;
	// begin inline asm
	prmt.b32 %r847, %r848, %r849, %r906;
	// end inline asm
	mov.u32 	%r910, 30258;
	// begin inline asm
	prmt.b32 %r851, %r848, %r849, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r856, %r857, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r859, %r856, %r857, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r864, %r865, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r867, %r864, %r865, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r872, %r873, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r875, %r872, %r873, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r880, %r881, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r883, %r880, %r881, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r888, %r889, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r891, %r888, %r889, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r896, %r897, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r899, %r896, %r897, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r904, %r905, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r904, %r905, %r910;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r994, %rs80;
	add.s32 	%r995, %r92, %r994;
	mul.wide.s32 	%rd81, %r995, 4;
	add.s64 	%rd83, %rd45, %rd81;
	st.shared.u32 	[%rd83], %r847;
	add.s32 	%r996, %r995, 128;
	mul.wide.u32 	%rd84, %r996, 4;
	add.s64 	%rd85, %rd45, %rd84;
	st.shared.u32 	[%rd85], %r855;
	add.s32 	%r997, %r995, 64;
	mul.wide.u32 	%rd86, %r997, 4;
	add.s64 	%rd87, %rd45, %rd86;
	st.shared.u32 	[%rd87], %r851;
	add.s32 	%r998, %r995, 192;
	mul.wide.u32 	%rd88, %r998, 4;
	add.s64 	%rd89, %rd45, %rd88;
	st.shared.u32 	[%rd89], %r859;
	add.s32 	%r999, %r93, %r994;
	mul.wide.u32 	%rd90, %r999, 4;
	add.s64 	%rd91, %rd45, %rd90;
	st.shared.u32 	[%rd91], %r863;
	add.s32 	%r1000, %r999, 128;
	mul.wide.u32 	%rd92, %r1000, 4;
	add.s64 	%rd93, %rd45, %rd92;
	st.shared.u32 	[%rd93], %r871;
	add.s32 	%r1001, %r999, 64;
	mul.wide.u32 	%rd94, %r1001, 4;
	add.s64 	%rd95, %rd45, %rd94;
	st.shared.u32 	[%rd95], %r867;
	add.s32 	%r1002, %r999, 192;
	mul.wide.u32 	%rd96, %r1002, 4;
	add.s64 	%rd97, %rd45, %rd96;
	st.shared.u32 	[%rd97], %r875;
	add.s32 	%r1003, %r995, 32;
	mul.wide.u32 	%rd98, %r1003, 4;
	add.s64 	%rd99, %rd45, %rd98;
	st.shared.u32 	[%rd99], %r879;
	add.s32 	%r1004, %r995, 160;
	mul.wide.u32 	%rd100, %r1004, 4;
	add.s64 	%rd101, %rd45, %rd100;
	st.shared.u32 	[%rd101], %r887;
	add.s32 	%r1005, %r995, 96;
	mul.wide.u32 	%rd102, %r1005, 4;
	add.s64 	%rd103, %rd45, %rd102;
	st.shared.u32 	[%rd103], %r883;
	add.s32 	%r1006, %r995, 224;
	mul.wide.u32 	%rd104, %r1006, 4;
	add.s64 	%rd105, %rd45, %rd104;
	st.shared.u32 	[%rd105], %r891;
	add.s32 	%r1007, %r999, 32;
	mul.wide.u32 	%rd106, %r1007, 4;
	add.s64 	%rd107, %rd45, %rd106;
	st.shared.u32 	[%rd107], %r895;
	add.s32 	%r1008, %r999, 160;
	mul.wide.u32 	%rd108, %r1008, 4;
	add.s64 	%rd109, %rd45, %rd108;
	st.shared.u32 	[%rd109], %r903;
	add.s32 	%r1009, %r999, 96;
	mul.wide.u32 	%rd110, %r1009, 4;
	add.s64 	%rd111, %rd45, %rd110;
	st.shared.u32 	[%rd111], %r899;
	add.s32 	%r1010, %r999, 224;
	mul.wide.u32 	%rd112, %r1010, 4;
	add.s64 	%rd113, %rd45, %rd112;
	st.shared.u32 	[%rd113], %r907;
	bar.sync 	0;
	add.s32 	%r1011, %r254, %r94;
	cvt.u16.u32 	%rs81, %r1011;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r1012, %rs87;
	add.s32 	%r1013, %r95, %r1012;
	mul.wide.s32 	%rd114, %r1013, 4;
	add.s64 	%rd115, %rd45, %rd114;
	ld.shared.u32 	%r1014, [%rd115];
	add.s32 	%r1015, %r96, %r1012;
	mul.wide.u32 	%rd116, %r1015, 4;
	add.s64 	%rd117, %rd45, %rd116;
	ld.shared.u32 	%r1016, [%rd117];
	add.s32 	%r1017, %r97, %r1012;
	mul.wide.u32 	%rd118, %r1017, 4;
	add.s64 	%rd119, %rd45, %rd118;
	ld.shared.u32 	%r1018, [%rd119];
	add.s32 	%r1019, %r98, %r1012;
	mul.wide.u32 	%rd120, %r1019, 4;
	add.s64 	%rd121, %rd45, %rd120;
	ld.shared.u32 	%r1020, [%rd121];
	add.s32 	%r1021, %r99, %r1012;
	mul.wide.u32 	%rd122, %r1021, 4;
	add.s64 	%rd123, %rd45, %rd122;
	ld.shared.u32 	%r1022, [%rd123];
	add.s32 	%r1023, %r100, %r1012;
	mul.wide.u32 	%rd124, %r1023, 4;
	add.s64 	%rd125, %rd45, %rd124;
	ld.shared.u32 	%r1024, [%rd125];
	add.s32 	%r1025, %r101, %r1012;
	mul.wide.u32 	%rd126, %r1025, 4;
	add.s64 	%rd127, %rd45, %rd126;
	ld.shared.u32 	%r1026, [%rd127];
	add.s32 	%r1027, %r102, %r1012;
	mul.wide.u32 	%rd128, %r1027, 4;
	add.s64 	%rd129, %rd45, %rd128;
	ld.shared.u32 	%r1028, [%rd129];
	add.s32 	%r1029, %r103, %r1012;
	mul.wide.u32 	%rd130, %r1029, 4;
	add.s64 	%rd131, %rd45, %rd130;
	ld.shared.u32 	%r1030, [%rd131];
	add.s32 	%r1031, %r104, %r1012;
	mul.wide.u32 	%rd132, %r1031, 4;
	add.s64 	%rd133, %rd45, %rd132;
	ld.shared.u32 	%r1032, [%rd133];
	add.s32 	%r1033, %r105, %r1012;
	mul.wide.u32 	%rd134, %r1033, 4;
	add.s64 	%rd135, %rd45, %rd134;
	ld.shared.u32 	%r1034, [%rd135];
	add.s32 	%r1035, %r106, %r1012;
	mul.wide.u32 	%rd136, %r1035, 4;
	add.s64 	%rd137, %rd45, %rd136;
	ld.shared.u32 	%r1036, [%rd137];
	add.s32 	%r1037, %r107, %r1012;
	mul.wide.u32 	%rd138, %r1037, 4;
	add.s64 	%rd139, %rd45, %rd138;
	ld.shared.u32 	%r1038, [%rd139];
	add.s32 	%r1039, %r108, %r1012;
	mul.wide.u32 	%rd140, %r1039, 4;
	add.s64 	%rd141, %rd45, %rd140;
	ld.shared.u32 	%r1040, [%rd141];
	add.s32 	%r1041, %r109, %r1012;
	mul.wide.u32 	%rd142, %r1041, 4;
	add.s64 	%rd143, %rd45, %rd142;
	ld.shared.u32 	%r1042, [%rd143];
	add.s32 	%r1043, %r110, %r1012;
	mul.wide.u32 	%rd144, %r1043, 4;
	add.s64 	%rd145, %rd45, %rd144;
	ld.shared.u32 	%r1044, [%rd145];
	add.s32 	%r1045, %r111, %r1012;
	mul.wide.u32 	%rd146, %r1045, 4;
	add.s64 	%rd147, %rd45, %rd146;
	ld.shared.u32 	%r1046, [%rd147];
	add.s32 	%r1047, %r112, %r1012;
	mul.wide.u32 	%rd148, %r1047, 4;
	add.s64 	%rd149, %rd45, %rd148;
	ld.shared.u32 	%r1048, [%rd149];
	add.s32 	%r1049, %r113, %r1012;
	mul.wide.u32 	%rd150, %r1049, 4;
	add.s64 	%rd151, %rd45, %rd150;
	ld.shared.u32 	%r1050, [%rd151];
	add.s32 	%r1051, %r114, %r1012;
	mul.wide.u32 	%rd152, %r1051, 4;
	add.s64 	%rd153, %rd45, %rd152;
	ld.shared.u32 	%r1052, [%rd153];
	add.s32 	%r1053, %r115, %r1012;
	mul.wide.u32 	%rd154, %r1053, 4;
	add.s64 	%rd155, %rd45, %rd154;
	ld.shared.u32 	%r1054, [%rd155];
	add.s32 	%r1055, %r116, %r1012;
	mul.wide.s32 	%rd156, %r1055, 4;
	add.s64 	%rd157, %rd45, %rd156;
	ld.shared.u32 	%r1056, [%rd157];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1057, %r3726, 0, 31, -1;
	shfl.sync.idx.b32	%r1058, %r3726, 1, 31, -1;
	shfl.sync.idx.b32	%r1059, %r3726, 2, 31, -1;
	shfl.sync.idx.b32	%r1060, %r3726, 3, 31, -1;
	shfl.sync.idx.b32	%r1061, %r3726, 4, 31, -1;
	shfl.sync.idx.b32	%r1062, %r3726, 5, 31, -1;
	shfl.sync.idx.b32	%r1063, %r3726, 6, 31, -1;
	shfl.sync.idx.b32	%r1064, %r3726, 7, 31, -1;
	shfl.sync.idx.b32	%r1065, %r3726, 8, 31, -1;
	shfl.sync.idx.b32	%r1066, %r3726, 9, 31, -1;
	shfl.sync.idx.b32	%r1067, %r3726, 10, 31, -1;
	shfl.sync.idx.b32	%r1068, %r3726, 11, 31, -1;
	shfl.sync.idx.b32	%r1069, %r3726, 12, 31, -1;
	shfl.sync.idx.b32	%r1070, %r3726, 13, 31, -1;
	shfl.sync.idx.b32	%r1071, %r3726, 14, 31, -1;
	shfl.sync.idx.b32	%r1072, %r3726, 15, 31, -1;
	shfl.sync.idx.b32	%r1073, %r3726, 16, 31, -1;
	shfl.sync.idx.b32	%r1074, %r3726, 17, 31, -1;
	shfl.sync.idx.b32	%r1075, %r3726, 18, 31, -1;
	shfl.sync.idx.b32	%r1076, %r3726, 19, 31, -1;
	shfl.sync.idx.b32	%r1077, %r3726, 20, 31, -1;
	shfl.sync.idx.b32	%r1078, %r3726, 21, 31, -1;
	shfl.sync.idx.b32	%r1079, %r3726, 22, 31, -1;
	shfl.sync.idx.b32	%r1080, %r3726, 23, 31, -1;
	add.s32 	%r1081, %r1057, %r1012;
	mul.wide.s32 	%rd158, %r1081, 4;
	add.s64 	%rd159, %rd45, %rd158;
	st.shared.u32 	[%rd159], %r1014;
	add.s32 	%r1082, %r1058, %r1012;
	mul.wide.s32 	%rd160, %r1082, 4;
	add.s64 	%rd161, %rd45, %rd160;
	st.shared.u32 	[%rd161], %r1016;
	add.s32 	%r1083, %r1059, %r1012;
	mul.wide.s32 	%rd162, %r1083, 4;
	add.s64 	%rd163, %rd45, %rd162;
	st.shared.u32 	[%rd163], %r1018;
	add.s32 	%r1084, %r1060, %r1012;
	mul.wide.s32 	%rd164, %r1084, 4;
	add.s64 	%rd165, %rd45, %rd164;
	st.shared.u32 	[%rd165], %r1020;
	add.s32 	%r1085, %r1061, %r1012;
	mul.wide.s32 	%rd166, %r1085, 4;
	add.s64 	%rd167, %rd45, %rd166;
	st.shared.u32 	[%rd167], %r1022;
	add.s32 	%r1086, %r1062, %r1012;
	mul.wide.s32 	%rd168, %r1086, 4;
	add.s64 	%rd169, %rd45, %rd168;
	st.shared.u32 	[%rd169], %r1024;
	add.s32 	%r1087, %r1063, %r1012;
	mul.wide.s32 	%rd170, %r1087, 4;
	add.s64 	%rd171, %rd45, %rd170;
	st.shared.u32 	[%rd171], %r1026;
	add.s32 	%r1088, %r1064, %r1012;
	mul.wide.s32 	%rd172, %r1088, 4;
	add.s64 	%rd173, %rd45, %rd172;
	st.shared.u32 	[%rd173], %r1028;
	add.s32 	%r1089, %r1065, %r1012;
	mul.wide.s32 	%rd174, %r1089, 4;
	add.s64 	%rd175, %rd45, %rd174;
	st.shared.u32 	[%rd175], %r1030;
	add.s32 	%r1090, %r1066, %r1012;
	mul.wide.s32 	%rd176, %r1090, 4;
	add.s64 	%rd177, %rd45, %rd176;
	st.shared.u32 	[%rd177], %r1032;
	add.s32 	%r1091, %r1067, %r1012;
	mul.wide.s32 	%rd178, %r1091, 4;
	add.s64 	%rd179, %rd45, %rd178;
	st.shared.u32 	[%rd179], %r1034;
	add.s32 	%r1092, %r1068, %r1012;
	mul.wide.s32 	%rd180, %r1092, 4;
	add.s64 	%rd181, %rd45, %rd180;
	st.shared.u32 	[%rd181], %r1036;
	add.s32 	%r1093, %r1069, %r1012;
	mul.wide.s32 	%rd182, %r1093, 4;
	add.s64 	%rd183, %rd45, %rd182;
	st.shared.u32 	[%rd183], %r1038;
	add.s32 	%r1094, %r1070, %r1012;
	mul.wide.s32 	%rd184, %r1094, 4;
	add.s64 	%rd185, %rd45, %rd184;
	st.shared.u32 	[%rd185], %r1040;
	add.s32 	%r1095, %r1071, %r1012;
	mul.wide.s32 	%rd186, %r1095, 4;
	add.s64 	%rd187, %rd45, %rd186;
	st.shared.u32 	[%rd187], %r1042;
	add.s32 	%r1096, %r1072, %r1012;
	mul.wide.s32 	%rd188, %r1096, 4;
	add.s64 	%rd189, %rd45, %rd188;
	st.shared.u32 	[%rd189], %r1044;
	add.s32 	%r1097, %r1073, %r1012;
	mul.wide.s32 	%rd190, %r1097, 4;
	add.s64 	%rd191, %rd45, %rd190;
	st.shared.u32 	[%rd191], %r1046;
	add.s32 	%r1098, %r1074, %r1012;
	mul.wide.s32 	%rd192, %r1098, 4;
	add.s64 	%rd193, %rd45, %rd192;
	st.shared.u32 	[%rd193], %r1048;
	add.s32 	%r1099, %r1075, %r1012;
	mul.wide.s32 	%rd194, %r1099, 4;
	add.s64 	%rd195, %rd45, %rd194;
	st.shared.u32 	[%rd195], %r1050;
	add.s32 	%r1100, %r1076, %r1012;
	mul.wide.s32 	%rd196, %r1100, 4;
	add.s64 	%rd197, %rd45, %rd196;
	st.shared.u32 	[%rd197], %r1052;
	add.s32 	%r1101, %r1077, %r1012;
	mul.wide.s32 	%rd198, %r1101, 4;
	add.s64 	%rd199, %rd45, %rd198;
	st.shared.u32 	[%rd199], %r1054;
	selp.b32 	%r1102, 0, %r1056, %p228;
	add.s32 	%r1103, %r1078, %r1012;
	mul.wide.s32 	%rd200, %r1103, 4;
	add.s64 	%rd201, %rd45, %rd200;
	st.shared.u32 	[%rd201], %r1102;
	add.s32 	%r1104, %r1079, %r1012;
	mul.wide.s32 	%rd202, %r1104, 4;
	add.s64 	%rd203, %rd45, %rd202;
	mov.u32 	%r3648, 0;
	st.shared.u32 	[%rd203], %r3648;
	add.s32 	%r1105, %r1080, %r1012;
	mul.wide.s32 	%rd204, %r1105, 4;
	add.s64 	%rd205, %rd45, %rd204;
	st.shared.u32 	[%rd205], %r3648;
	bar.sync 	0;
	mov.u32 	%r3649, %r3648;
	mov.u32 	%r3650, %r3648;
	mov.u32 	%r3651, %r3648;
	mov.u32 	%r3652, %r3648;
	mov.u32 	%r3653, %r3648;
	mov.u32 	%r3654, %r3648;
	mov.u32 	%r3655, %r3648;
	mov.u32 	%r3656, %r3648;
	mov.u32 	%r3657, %r3648;
	mov.u32 	%r3658, %r3648;
	mov.u32 	%r3659, %r3648;
	mov.u32 	%r3660, %r3648;
	mov.u32 	%r3661, %r3648;
	mov.u32 	%r3662, %r3648;
	mov.u32 	%r3663, %r3648;
	mov.u32 	%r3664, %r3648;
	mov.u32 	%r3665, %r3648;
	mov.u32 	%r3666, %r3648;
	mov.u32 	%r3667, %r3648;
	mov.u32 	%r3668, %r3648;
	mov.u32 	%r3669, %r3648;
	mov.u32 	%r3670, %r3648;
	mov.u32 	%r3671, %r3648;
	@%p78 bra 	$L__BB0_145;
// %bb.194:                             // %oksrem3803
                                        //   in Loop: Header=BB0_143 Depth=1
	cvt.u16.u32 	%rs88, %r254;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1106, %rs94;
	mul.wide.s32 	%rd206, %r1106, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.shared.u32 	%r3648, [%rd207];
	ld.shared.u32 	%r3649, [%rd15+4];
	ld.shared.u32 	%r3650, [%rd15+8];
	ld.shared.u32 	%r3651, [%rd15+12];
	ld.shared.u32 	%r3652, [%rd15+16];
	ld.shared.u32 	%r3653, [%rd15+20];
	ld.shared.u32 	%r3654, [%rd15+24];
	ld.shared.u32 	%r3655, [%rd15+28];
	ld.shared.u32 	%r3656, [%rd15+32];
	ld.shared.u32 	%r3657, [%rd15+36];
	ld.shared.u32 	%r3658, [%rd15+40];
	ld.shared.u32 	%r3659, [%rd15+44];
	ld.shared.u32 	%r3660, [%rd15+48];
	ld.shared.u32 	%r3661, [%rd15+52];
	ld.shared.u32 	%r3662, [%rd15+56];
	ld.shared.u32 	%r3663, [%rd15+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1107, %rs101;
	mul.wide.s32 	%rd208, %r1107, 4;
	add.s64 	%rd209, %rd15, %rd208;
	ld.shared.u32 	%r3664, [%rd209];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1108, %rs108;
	mul.wide.s32 	%rd210, %r1108, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.shared.u32 	%r3665, [%rd211];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1109, %rs115;
	mul.wide.s32 	%rd212, %r1109, 4;
	add.s64 	%rd213, %rd15, %rd212;
	ld.shared.u32 	%r3666, [%rd213];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1110, %rs122;
	mul.wide.s32 	%rd214, %r1110, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.shared.u32 	%r3667, [%rd215];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1111, %rs129;
	mul.wide.s32 	%rd216, %r1111, 4;
	add.s64 	%rd217, %rd15, %rd216;
	ld.shared.u32 	%r3668, [%rd217];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1112, %rs136;
	mul.wide.s32 	%rd218, %r1112, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.shared.u32 	%r3669, [%rd219];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1113, %rs143;
	mul.wide.s32 	%rd220, %r1113, 4;
	add.s64 	%rd221, %rd15, %rd220;
	ld.shared.u32 	%r3670, [%rd221];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1114, %rs150;
	mul.wide.s32 	%rd222, %r1114, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.shared.u32 	%r3671, [%rd223];
$L__BB0_145:                            // %L11422
                                        //   in Loop: Header=BB0_143 Depth=1
	bar.sync 	0;
	mov.u32 	%r3672, 12;
	bra.uni 	$L__BB0_146;
$L__BB0_153:                            // %L21054
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r3674, %r3674, 1;
	mov.u32 	%r3673, 0;
	mov.u32 	%r3675, %r3673;
	mov.u32 	%r3676, %r3673;
$L__BB0_154:                            // %L21055
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3672, %r3672, -4;
	setp.ne.s32 	%p255, %r3672, -12;
	@%p255 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_155;
$L__BB0_146:                            // %L11448
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p238, %r3672, 12;
	selp.b32 	%r1653, %r3648, 0, %p238;
	setp.eq.s32 	%p239, %r3672, 8;
	selp.b32 	%r1654, %r3652, %r1653, %p239;
	setp.eq.s32 	%p240, %r3672, 4;
	selp.b32 	%r1655, %r3656, %r1654, %p240;
	setp.eq.s32 	%p241, %r3672, 0;
	selp.b32 	%r1656, %r3660, %r1655, %p241;
	setp.eq.s32 	%p242, %r3672, -4;
	selp.b32 	%r1657, %r3664, %r1656, %p242;
	setp.eq.s32 	%p243, %r3672, -8;
	selp.b32 	%r1658, %r3668, %r1657, %p243;
	selp.b32 	%r1659, %r3649, 0, %p238;
	selp.b32 	%r1660, %r3653, %r1659, %p239;
	selp.b32 	%r1661, %r3657, %r1660, %p240;
	selp.b32 	%r1662, %r3661, %r1661, %p241;
	selp.b32 	%r1663, %r3665, %r1662, %p242;
	selp.b32 	%r1664, %r3669, %r1663, %p243;
	selp.b32 	%r1665, %r3650, 0, %p238;
	selp.b32 	%r1666, %r3654, %r1665, %p239;
	selp.b32 	%r1667, %r3658, %r1666, %p240;
	selp.b32 	%r1668, %r3662, %r1667, %p241;
	selp.b32 	%r1669, %r3666, %r1668, %p242;
	selp.b32 	%r1670, %r3670, %r1669, %p243;
	selp.b32 	%r1671, %r3651, 0, %p238;
	selp.b32 	%r1672, %r3655, %r1671, %p239;
	selp.b32 	%r1673, %r3659, %r1672, %p240;
	selp.b32 	%r1674, %r3663, %r1673, %p241;
	selp.b32 	%r1675, %r3667, %r1674, %p242;
	selp.b32 	%r1676, %r3671, %r1675, %p243;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1121, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1132, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1120, %r1658, -2004318072;
	mov.u32 	%r1257, 983055;
	// begin inline asm
	lop3.b32 %r1118, %r1257, %r1120, %r1121, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1122, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1123, %r1121, %r1122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1126, %r1118, %r1123;
	// end inline asm
	mov.u32 	%r1268, 15728880;
	// begin inline asm
	lop3.b32 %r1129, %r1268, %r1120, %r1132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1133, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1134, %r1132, %r1133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1137, %r1129, %r1134;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1166, %r1664, -2004318072;
	// begin inline asm
	lop3.b32 %r1164, %r1257, %r1166, %r1167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1168, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1169, %r1167, %r1168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1172, %r1164, %r1169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1175, %r1268, %r1166, %r1178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1180, %r1178, %r1179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1183, %r1175, %r1180;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1212, %r1670, -2004318072;
	// begin inline asm
	lop3.b32 %r1210, %r1257, %r1212, %r1213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1214, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1215, %r1213, %r1214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1218, %r1210, %r1215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1221, %r1268, %r1212, %r1224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1226, %r1224, %r1225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1229, %r1221, %r1226;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1258, %r1676, -2004318072;
	// begin inline asm
	lop3.b32 %r1256, %r1257, %r1258, %r1259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1260, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1261, %r1259, %r1260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1264, %r1256, %r1261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1267, %r1268, %r1258, %r1270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1272, %r1270, %r1271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1275, %r1267, %r1272;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r1126;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1300, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r1137;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1303, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r1172;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1306, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r1183;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1309, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r1218;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1312, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r1229;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1315, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r1264;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1318, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r1275;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1321, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1652, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1387, %r1384}, {%r337, %r340}, {%r1300}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1396, %r1393}, {%r337, %r340}, {%r1303}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1405, %r1402}, {%r337, %r340}, {%r1306}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1414, %r1411}, {%r337, %r340}, {%r1309}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1423, %r1420}, {%r337, %r340}, {%r1312}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1432, %r1429}, {%r337, %r340}, {%r1315}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1441, %r1438}, {%r337, %r340}, {%r1318}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1450, %r1447}, {%r337, %r340}, {%r1321}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1380, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r1380, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r389, %r1387, %r1382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1389, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1391, %r1389, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r389, %r1396, %r1391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1398, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1400, %r1398, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r389, %r1405, %r1400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1407, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r1407, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r389, %r1414, %r1409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1416, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r1416, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r389, %r1423, %r1418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r1425, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r389, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r1434, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r389, %r1441, %r1436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1443, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r1443, %r1447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r389, %r1450, %r1445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r392, %r1387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r389, %r1384, %r1452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r392, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r389, %r1393, %r1459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r392, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r389, %r1402, %r1466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r392, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r389, %r1411, %r1473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r392, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r389, %r1420, %r1480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1487, %r392, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1490, %r389, %r1429, %r1487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1494, %r392, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1497, %r389, %r1438, %r1494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r392, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r389, %r1447, %r1501;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1589, %r1590}, {%r433, %r439, %r436, %r442}, {%r1385, %r1455}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1597, %r1598}, {%r433, %r439, %r436, %r442}, {%r1394, %r1462}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1606}, {%r433, %r439, %r436, %r442}, {%r1403, %r1469}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1613, %r1614}, {%r433, %r439, %r436, %r442}, {%r1412, %r1476}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1621, %r1622}, {%r433, %r439, %r436, %r442}, {%r1421, %r1483}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1629, %r1630}, {%r433, %r439, %r436, %r442}, {%r1430, %r1490}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1637, %r1638}, {%r433, %r439, %r436, %r442}, {%r1439, %r1497}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1645, %r1646}, {%r433, %r439, %r436, %r442}, {%r1448, %r1504}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1588, %r1589, %r1590, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1592, %r1589, %r1590, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1596, %r1597, %r1598, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1600, %r1597, %r1598, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1604, %r1605, %r1606, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1608, %r1605, %r1606, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1612, %r1613, %r1614, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1616, %r1613, %r1614, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1620, %r1621, %r1622, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1624, %r1621, %r1622, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1628, %r1629, %r1630, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1632, %r1629, %r1630, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1636, %r1637, %r1638, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1640, %r1637, %r1638, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1644, %r1645, %r1646, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1648, %r1645, %r1646, %r910;
	// end inline asm
	st.shared.u32 	[%rd6], %r1588;
	st.shared.u32 	[%rd7], %r1592;
	st.shared.u32 	[%rd8], %r1596;
	st.shared.u32 	[%rd9+128], %r1600;
	st.shared.u32 	[%rd6+256], %r1604;
	st.shared.u32 	[%rd16+256], %r1608;
	st.shared.u32 	[%rd8+256], %r1612;
	st.shared.u32 	[%rd17+256], %r1616;
	st.shared.u32 	[%rd6+512], %r1620;
	st.shared.u32 	[%rd16+512], %r1624;
	st.shared.u32 	[%rd8+512], %r1628;
	st.shared.u32 	[%rd17+512], %r1632;
	st.shared.u32 	[%rd6+768], %r1636;
	st.shared.u32 	[%rd16+768], %r1640;
	st.shared.u32 	[%rd8+768], %r1644;
	st.shared.u32 	[%rd17+768], %r1648;
	bar.sync 	0;
	mov.u32 	%r3677, %r1652;
	mov.u32 	%r3678, %r1652;
	mov.u32 	%r3679, %r1652;
	mov.u32 	%r3680, %r1652;
	@%p237 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_147;
$L__BB0_195:                            // %pass7398
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3677, [%rd10];
	ld.shared.u32 	%r3678, [%rd11];
	ld.shared.u32 	%r3679, [%rd12];
	ld.shared.u32 	%r3680, [%rd13];
$L__BB0_147:                            // %L16957
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1712, %r1709}, {%r451, %r454}, {%r3677}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1721, %r1718}, {%r451, %r454}, {%r3678}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1730, %r1727}, {%r451, %r454}, {%r3679}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1739, %r1736}, {%r451, %r454}, {%r3680}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1705, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r1705, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r503, %r1712, %r1707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1714, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1716, %r1714, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r503, %r1721, %r1716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1723, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r1723, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r503, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r1732, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r503, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r506, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r503, %r1709, %r1741;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r506, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r503, %r1718, %r1748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r506, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r503, %r1727, %r1755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r506, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r503, %r1736, %r1762;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1813}, {%r547, %r553, %r550, %r556}, {%r1710, %r1744}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1832}, {%r547, %r553, %r550, %r556}, {%r1719, %r1751}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1817, %r1821}, {%r547, %r553, %r550, %r556}, {%r1728, %r1758}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1836, %r1840}, {%r547, %r553, %r550, %r556}, {%r1737, %r1765}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r1810, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1816;
	// end inline asm
	mov.u32 	%r1844, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1844, %r1820, %r3676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r1829, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1839, %r3675;
	// end inline asm
	mov.u32 	%r3681, %r1652;
	mov.u32 	%r3682, %r1652;
	mov.u32 	%r3683, %r1652;
	mov.u32 	%r3684, %r1652;
	@%p237 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_148;
$L__BB0_196:                            // %pass7999
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3681, [%rd18];
	ld.shared.u32 	%r3682, [%rd19];
	ld.shared.u32 	%r3683, [%rd20];
	ld.shared.u32 	%r3684, [%rd21];
$L__BB0_148:                            // %L18164
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1883, %r1880}, {%r451, %r454}, {%r3681}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1892, %r1889}, {%r451, %r454}, {%r3682}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1901, %r1898}, {%r451, %r454}, {%r3683}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r451, %r454}, {%r3684}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1876, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r1876, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r503, %r1883, %r1878;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1885, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1885, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r503, %r1892, %r1887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1894, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r503, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r503, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r506, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r503, %r1880, %r1912;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r506, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r503, %r1889, %r1919;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r506, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r503, %r1898, %r1926;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r506, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r503, %r1907, %r1933;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1984}, {%r547, %r553, %r550, %r556}, {%r1881, %r1915}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2000, %r2003}, {%r547, %r553, %r550, %r556}, {%r1890, %r1922}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1988, %r1992}, {%r547, %r553, %r550, %r556}, {%r1899, %r1929}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2007, %r2011}, {%r547, %r553, %r550, %r556}, {%r1908, %r1936}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r1981, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1984, %r1984, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1988, %r1988, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r1992, %r1992, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1844, %r1991, %r1824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r2000, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r2011, %r2011, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r1844, %r2010, %r1843;
	// end inline asm
	mov.u32 	%r3685, %r1652;
	mov.u32 	%r3686, %r1652;
	mov.u32 	%r3687, %r1652;
	mov.u32 	%r3688, %r1652;
	@%p237 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_149;
$L__BB0_197:                            // %pass8600
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3685, [%rd22];
	ld.shared.u32 	%r3686, [%rd23];
	ld.shared.u32 	%r3687, [%rd24];
	ld.shared.u32 	%r3688, [%rd25];
$L__BB0_149:                            // %L19371
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2054, %r2051}, {%r451, %r454}, {%r3685}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2063, %r2060}, {%r451, %r454}, {%r3686}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2072, %r2069}, {%r451, %r454}, {%r3687}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2081, %r2078}, {%r451, %r454}, {%r3688}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2047, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r2047, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r503, %r2054, %r2049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2056, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r2056, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r503, %r2063, %r2058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2065, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r2065, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r503, %r2072, %r2067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2074, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r2074, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r503, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r506, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r503, %r2051, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r506, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r503, %r2060, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r506, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r503, %r2069, %r2097;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r506, %r2081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r503, %r2078, %r2104;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2155}, {%r547, %r553, %r550, %r556}, {%r2052, %r2086}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2171, %r2174}, {%r547, %r553, %r550, %r556}, {%r2061, %r2093}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2159, %r2163}, {%r547, %r553, %r550, %r556}, {%r2070, %r2100}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2178, %r2182}, {%r547, %r553, %r550, %r556}, {%r2079, %r2107}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r2152, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r2155, %r2155, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r2159, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r2163, %r2163, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r1844, %r2162, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2171, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r2174, %r2174, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r2178, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r2182, %r2182, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r1844, %r2181, %r2014;
	// end inline asm
	mov.u32 	%r3689, %r1652;
	mov.u32 	%r3690, %r1652;
	mov.u32 	%r3691, %r1652;
	mov.u32 	%r3692, %r1652;
	@%p237 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_150;
$L__BB0_198:                            // %pass9201
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3689, [%rd26];
	ld.shared.u32 	%r3690, [%rd27];
	ld.shared.u32 	%r3691, [%rd28];
	ld.shared.u32 	%r3692, [%rd29];
$L__BB0_150:                            // %L20578
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r451, %r454}, {%r3689}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r451, %r454}, {%r3690}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r451, %r454}, {%r3691}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2252, %r2249}, {%r451, %r454}, {%r3692}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r503, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r503, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r503, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2245, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r2245, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r503, %r2252, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r506, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r503, %r2222, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r506, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r503, %r2231, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r506, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r503, %r2240, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r506, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r503, %r2249, %r2275;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2326}, {%r547, %r553, %r550, %r556}, {%r2223, %r2257}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2342, %r2345}, {%r547, %r553, %r550, %r556}, {%r2232, %r2264}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2330, %r2334}, {%r547, %r553, %r550, %r556}, {%r2241, %r2271}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2349, %r2353}, {%r547, %r553, %r550, %r556}, {%r2250, %r2278}, {%r1652, %r1652};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2322, %r2323, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r2326, %r2326, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r2330, %r2330, %r2325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r2334, %r2334, %r2329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r1844, %r2333, %r2166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2341, %r2342, %r2342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2344, %r2345, %r2345, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r2349, %r2349, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2352, %r2353, %r2353, %r2348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1844, %r2352, %r2185;
	// end inline asm
	add.s32 	%r3673, %r3673, 4;
	setp.ne.s32 	%p247, %r3673, 40;
	@%p247 bra 	$L__BB0_154;
// %bb.151:                             // %L20728
                                        //   in Loop: Header=BB0_146 Depth=2
	@%p78 bra 	$L__BB0_153;
// %bb.152:                             // %L20788
                                        //   in Loop: Header=BB0_146 Depth=2
	mul.lo.s32 	%r2360, %r3674, 884736;
	add.s32 	%r2361, %r117, %r2360;
	cvt.s64.s32 	%rd224, %r2361;
	add.s64 	%rd225, %rd224, %rd14;
	mul.hi.s64 	%rd226, %rd225, 341606371735362067;
	shr.u64 	%rd227, %rd226, 63;
	shr.s64 	%rd228, %rd226, 23;
	add.s64 	%rd229, %rd228, %rd227;
	setp.lt.s64 	%p249, %rd225, 0;
	mul.lo.s64 	%rd230, %rd229, 452984832;
	setp.ne.s64 	%p250, %rd230, %rd225;
	and.pred  	%p251, %p249, %p250;
	selp.s64 	%rd231, -1, 0, %p251;
	add.s64 	%rd232, %rd229, %rd231;
	mul.lo.s64 	%rd233, %rd232, -452984832;
	add.s64 	%rd234, %rd233, %rd225;
	shl.b64 	%rd235, %rd234, 2;
	add.s64 	%rd236, %rd4, %rd235;
	st.global.u32 	[%rd236], %r3676;
	add.s32 	%r2362, %r118, %r2360;
	cvt.s64.s32 	%rd237, %r2362;
	add.s64 	%rd238, %rd237, %rd14;
	mul.hi.s64 	%rd239, %rd238, 341606371735362067;
	shr.u64 	%rd240, %rd239, 63;
	shr.s64 	%rd241, %rd239, 23;
	add.s64 	%rd242, %rd241, %rd240;
	setp.lt.s64 	%p252, %rd238, 0;
	mul.lo.s64 	%rd243, %rd242, 452984832;
	setp.ne.s64 	%p253, %rd243, %rd238;
	and.pred  	%p254, %p252, %p253;
	selp.s64 	%rd244, -1, 0, %p254;
	add.s64 	%rd245, %rd242, %rd244;
	mul.lo.s64 	%rd246, %rd245, -452984832;
	add.s64 	%rd247, %rd246, %rd238;
	shl.b64 	%rd248, %rd247, 2;
	add.s64 	%rd249, %rd4, %rd248;
	st.global.u32 	[%rd249], %r3675;
	bra.uni 	$L__BB0_153;
$L__BB0_155:                            // %L21080.preheader
                                        //   in Loop: Header=BB0_143 Depth=1
	mov.u32 	%r3697, 12;
	bra.uni 	$L__BB0_156;
$L__BB0_163:                            // %L30686
                                        //   in Loop: Header=BB0_156 Depth=2
	add.s32 	%r3674, %r3674, 1;
	mov.u32 	%r3673, 0;
	mov.u32 	%r3675, %r3673;
	mov.u32 	%r3676, %r3673;
$L__BB0_164:                            // %L30687
                                        //   in Loop: Header=BB0_156 Depth=2
	bar.sync 	0;
	add.s32 	%r3697, %r3697, -4;
	setp.ne.s32 	%p274, %r3697, -12;
	@%p274 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_165;
$L__BB0_156:                            // %L21080
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p257, %r3697, 12;
	selp.b32 	%r2902, %r3648, 0, %p257;
	setp.eq.s32 	%p258, %r3697, 8;
	selp.b32 	%r2903, %r3652, %r2902, %p258;
	setp.eq.s32 	%p259, %r3697, 4;
	selp.b32 	%r2904, %r3656, %r2903, %p259;
	setp.eq.s32 	%p260, %r3697, 0;
	selp.b32 	%r2905, %r3660, %r2904, %p260;
	setp.eq.s32 	%p261, %r3697, -4;
	selp.b32 	%r2906, %r3664, %r2905, %p261;
	setp.eq.s32 	%p262, %r3697, -8;
	selp.b32 	%r2907, %r3668, %r2906, %p262;
	selp.b32 	%r2908, %r3649, 0, %p257;
	selp.b32 	%r2909, %r3653, %r2908, %p258;
	selp.b32 	%r2910, %r3657, %r2909, %p259;
	selp.b32 	%r2911, %r3661, %r2910, %p260;
	selp.b32 	%r2912, %r3665, %r2911, %p261;
	selp.b32 	%r2913, %r3669, %r2912, %p262;
	selp.b32 	%r2914, %r3650, 0, %p257;
	selp.b32 	%r2915, %r3654, %r2914, %p258;
	selp.b32 	%r2916, %r3658, %r2915, %p259;
	selp.b32 	%r2917, %r3662, %r2916, %p260;
	selp.b32 	%r2918, %r3666, %r2917, %p261;
	selp.b32 	%r2919, %r3670, %r2918, %p262;
	selp.b32 	%r2920, %r3651, 0, %p257;
	selp.b32 	%r2921, %r3655, %r2920, %p258;
	selp.b32 	%r2922, %r3659, %r2921, %p259;
	selp.b32 	%r2923, %r3663, %r2922, %p260;
	selp.b32 	%r2924, %r3667, %r2923, %p261;
	selp.b32 	%r2925, %r3671, %r2924, %p262;
	// begin inline asm
	mov.b32 %r2392, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2926, %r2907, 8;
	xor.b32  	%r2402, %r2926, 8947848;
	// begin inline asm
	lop3.b32 %r2389, %r1257, %r2402, %r2392, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2392, %r2393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2397, %r2389, %r2394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2400, %r1268, %r2402, %r2403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2403, %r2404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2408, %r2400, %r2405;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2449, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2927, %r2913, 8;
	xor.b32  	%r2448, %r2927, 8947848;
	// begin inline asm
	lop3.b32 %r2435, %r1257, %r2448, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2438, %r2439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2443, %r2435, %r2440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2446, %r1268, %r2448, %r2449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2449, %r2450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2454, %r2446, %r2451;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2495, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2928, %r2919, 8;
	xor.b32  	%r2494, %r2928, 8947848;
	// begin inline asm
	lop3.b32 %r2481, %r1257, %r2494, %r2484, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2484, %r2485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2489, %r2481, %r2486;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2492, %r1268, %r2494, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2497, %r2495, %r2496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2500, %r2492, %r2497;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2929, %r2925, 8;
	xor.b32  	%r2540, %r2929, 8947848;
	// begin inline asm
	lop3.b32 %r2527, %r1257, %r2540, %r2530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2532, %r2530, %r2531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2535, %r2527, %r2532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2538, %r1268, %r2540, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2543, %r2541, %r2542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2546, %r2538, %r2543;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r2397;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r2408;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2552, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r2443;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2555, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r2454;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2558, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r2489;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2561, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r2500;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2564, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3641;
    mov.b32 {%r2re, %r2im}, %r2535;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2567, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3642;
    mov.b32 {%r2re, %r2im}, %r2546;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2570, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2901, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2636, %r2633}, {%r337, %r340}, {%r2549}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2645, %r2642}, {%r337, %r340}, {%r2552}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2654, %r2651}, {%r337, %r340}, {%r2555}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2663, %r2660}, {%r337, %r340}, {%r2558}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2672, %r2669}, {%r337, %r340}, {%r2561}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2681, %r2678}, {%r337, %r340}, {%r2564}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2690, %r2687}, {%r337, %r340}, {%r2567}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2699, %r2696}, {%r337, %r340}, {%r2570}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2634, %r389, %r2636, %r2631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2643, %r389, %r2645, %r2640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r389, %r2654, %r2649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2661, %r389, %r2663, %r2658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r389, %r2672, %r2667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r389, %r2681, %r2676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r389, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r389, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r392, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r389, %r2633, %r2701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r392, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r389, %r2642, %r2708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r392, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r389, %r2651, %r2715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r392, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r389, %r2660, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r392, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r389, %r2669, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r392, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r389, %r2678, %r2736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r392, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r389, %r2687, %r2743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r392, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r389, %r2696, %r2750;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2838, %r2839}, {%r433, %r439, %r436, %r442}, {%r2634, %r2704}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2846, %r2847}, {%r433, %r439, %r436, %r442}, {%r2643, %r2711}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2854, %r2855}, {%r433, %r439, %r436, %r442}, {%r2652, %r2718}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2862, %r2863}, {%r433, %r439, %r436, %r442}, {%r2661, %r2725}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2870, %r2871}, {%r433, %r439, %r436, %r442}, {%r2670, %r2732}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2878, %r2879}, {%r433, %r439, %r436, %r442}, {%r2679, %r2739}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2886, %r2887}, {%r433, %r439, %r436, %r442}, {%r2688, %r2746}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2894, %r2895}, {%r433, %r439, %r436, %r442}, {%r2697, %r2753}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2837, %r2838, %r2839, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2841, %r2838, %r2839, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2845, %r2846, %r2847, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2849, %r2846, %r2847, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2853, %r2854, %r2855, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2857, %r2854, %r2855, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2861, %r2862, %r2863, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2865, %r2862, %r2863, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2869, %r2870, %r2871, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2873, %r2870, %r2871, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2877, %r2878, %r2879, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2881, %r2878, %r2879, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2885, %r2886, %r2887, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2889, %r2886, %r2887, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2893, %r2894, %r2895, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2897, %r2894, %r2895, %r910;
	// end inline asm
	st.shared.u32 	[%rd6], %r2837;
	st.shared.u32 	[%rd7], %r2841;
	st.shared.u32 	[%rd8], %r2845;
	st.shared.u32 	[%rd9+128], %r2849;
	st.shared.u32 	[%rd6+256], %r2853;
	st.shared.u32 	[%rd16+256], %r2857;
	st.shared.u32 	[%rd8+256], %r2861;
	st.shared.u32 	[%rd17+256], %r2865;
	st.shared.u32 	[%rd6+512], %r2869;
	st.shared.u32 	[%rd16+512], %r2873;
	st.shared.u32 	[%rd8+512], %r2877;
	st.shared.u32 	[%rd17+512], %r2881;
	st.shared.u32 	[%rd6+768], %r2885;
	st.shared.u32 	[%rd16+768], %r2889;
	st.shared.u32 	[%rd8+768], %r2893;
	st.shared.u32 	[%rd17+768], %r2897;
	bar.sync 	0;
	mov.u32 	%r3702, %r2901;
	mov.u32 	%r3703, %r2901;
	mov.u32 	%r3704, %r2901;
	mov.u32 	%r3705, %r2901;
	@%p237 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_157;
$L__BB0_199:                            // %pass12060
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3705, [%rd10];
	ld.shared.u32 	%r3704, [%rd11];
	ld.shared.u32 	%r3703, [%rd12];
	ld.shared.u32 	%r3702, [%rd13];
$L__BB0_157:                            // %L26589
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r451, %r454}, {%r3705}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2974, %r2971}, {%r451, %r454}, {%r3704}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2983, %r2980}, {%r451, %r454}, {%r3703}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2992, %r2989}, {%r451, %r454}, {%r3702}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r503, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2967, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2967, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r503, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2976, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r2976, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r503, %r2983, %r2978;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2985, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r2985, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r503, %r2992, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r506, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r503, %r2962, %r2994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r506, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r503, %r2971, %r3001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r506, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r503, %r2980, %r3008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r506, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r503, %r2989, %r3015;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3063, %r3066}, {%r547, %r553, %r550, %r556}, {%r2963, %r2997}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3085}, {%r547, %r553, %r550, %r556}, {%r2972, %r3004}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3070, %r3074}, {%r547, %r553, %r550, %r556}, {%r2981, %r3011}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3089, %r3093}, {%r547, %r553, %r550, %r556}, {%r2990, %r3018}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r3063, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r3070, %r3070, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r3074, %r3074, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r1844, %r3073, %r3676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3081, %r3082, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r3093, %r3093, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r1844, %r3092, %r3675;
	// end inline asm
	mov.u32 	%r3706, %r2901;
	mov.u32 	%r3707, %r2901;
	mov.u32 	%r3708, %r2901;
	mov.u32 	%r3709, %r2901;
	@%p237 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass12661
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3709, [%rd18];
	ld.shared.u32 	%r3708, [%rd19];
	ld.shared.u32 	%r3707, [%rd20];
	ld.shared.u32 	%r3706, [%rd21];
$L__BB0_158:                            // %L27796
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r451, %r454}, {%r3709}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3145, %r3142}, {%r451, %r454}, {%r3708}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3154, %r3151}, {%r451, %r454}, {%r3707}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3163, %r3160}, {%r451, %r454}, {%r3706}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r503, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3138, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r503, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r3147, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r503, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3158, %r3156, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r503, %r3163, %r3158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r506, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r503, %r3133, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3172, %r506, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r503, %r3142, %r3172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r506, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r503, %r3151, %r3179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r506, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r503, %r3160, %r3186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3237}, {%r547, %r553, %r550, %r556}, {%r3134, %r3168}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3256}, {%r547, %r553, %r550, %r556}, {%r3143, %r3175}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3241, %r3245}, {%r547, %r553, %r550, %r556}, {%r3152, %r3182}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3264}, {%r547, %r553, %r550, %r556}, {%r3161, %r3189}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r3234, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3237, %r3237, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r3241, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r3245, %r3245, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r1844, %r3244, %r3077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r3253, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r3264, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r1844, %r3263, %r3096;
	// end inline asm
	mov.u32 	%r3710, %r2901;
	mov.u32 	%r3711, %r2901;
	mov.u32 	%r3712, %r2901;
	mov.u32 	%r3713, %r2901;
	@%p237 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_159;
$L__BB0_201:                            // %pass13262
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3713, [%rd22];
	ld.shared.u32 	%r3712, [%rd23];
	ld.shared.u32 	%r3711, [%rd24];
	ld.shared.u32 	%r3710, [%rd25];
$L__BB0_159:                            // %L29003
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3307, %r3304}, {%r451, %r454}, {%r3713}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3316, %r3313}, {%r451, %r454}, {%r3712}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3325, %r3322}, {%r451, %r454}, {%r3711}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3334, %r3331}, {%r451, %r454}, {%r3710}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3300, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3302, %r3300, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r503, %r3307, %r3302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3309, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r3309, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r503, %r3316, %r3311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3318, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r3318, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r503, %r3325, %r3320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3327, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r3327, %r3331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r503, %r3334, %r3329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r506, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r503, %r3304, %r3336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3343, %r506, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r503, %r3313, %r3343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3350, %r506, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r503, %r3322, %r3350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3357, %r506, %r3334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3360, %r503, %r3331, %r3357;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3405, %r3408}, {%r547, %r553, %r550, %r556}, {%r3305, %r3339}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3424, %r3427}, {%r547, %r553, %r550, %r556}, {%r3314, %r3346}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3412, %r3416}, {%r547, %r553, %r550, %r556}, {%r3323, %r3353}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3431, %r3435}, {%r547, %r553, %r550, %r556}, {%r3332, %r3360}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3404, %r3405, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r3408, %r3408, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r3412, %r3412, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r3416, %r3416, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r1844, %r3415, %r3248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3423, %r3424, %r3424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3426, %r3427, %r3427, %r3423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r3431, %r3431, %r3426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3434, %r3435, %r3435, %r3430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r1844, %r3434, %r3267;
	// end inline asm
	mov.u32 	%r3714, %r2901;
	mov.u32 	%r3715, %r2901;
	mov.u32 	%r3716, %r2901;
	mov.u32 	%r3717, %r2901;
	@%p237 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_160;
$L__BB0_202:                            // %pass13863
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3717, [%rd26];
	ld.shared.u32 	%r3716, [%rd27];
	ld.shared.u32 	%r3715, [%rd28];
	ld.shared.u32 	%r3714, [%rd29];
$L__BB0_160:                            // %L30210
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3478, %r3475}, {%r451, %r454}, {%r3717}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3487, %r3484}, {%r451, %r454}, {%r3716}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3496, %r3493}, {%r451, %r454}, {%r3715}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3505, %r3502}, {%r451, %r454}, {%r3714}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3471, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3473, %r3471, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r503, %r3478, %r3473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3480, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3482, %r3480, %r3484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r503, %r3487, %r3482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3489, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3491, %r3489, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r503, %r3496, %r3491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3498, %r506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3500, %r3498, %r3502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r503, %r3505, %r3500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3507, %r506, %r3478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r503, %r3475, %r3507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r506, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r503, %r3484, %r3514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3521, %r506, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r503, %r3493, %r3521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3528, %r506, %r3505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r503, %r3502, %r3528;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3576, %r3579}, {%r547, %r553, %r550, %r556}, {%r3476, %r3510}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3595, %r3598}, {%r547, %r553, %r550, %r556}, {%r3485, %r3517}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3583, %r3587}, {%r547, %r553, %r550, %r556}, {%r3494, %r3524}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3602, %r3606}, {%r547, %r553, %r550, %r556}, {%r3503, %r3531}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3575, %r3576, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r3579, %r3579, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r3583, %r3583, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r3587, %r3587, %r3582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r1844, %r3586, %r3419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3594, %r3595, %r3595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r3598, %r3598, %r3594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3601, %r3602, %r3602, %r3597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r3606, %r3606, %r3601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1844, %r3605, %r3438;
	// end inline asm
	add.s32 	%r3673, %r3673, 4;
	setp.ne.s32 	%p266, %r3673, 40;
	@%p266 bra 	$L__BB0_164;
// %bb.161:                             // %L30360
                                        //   in Loop: Header=BB0_156 Depth=2
	@%p78 bra 	$L__BB0_163;
// %bb.162:                             // %L30420
                                        //   in Loop: Header=BB0_156 Depth=2
	mul.lo.s32 	%r3613, %r3674, 884736;
	add.s32 	%r3614, %r117, %r3613;
	cvt.s64.s32 	%rd250, %r3614;
	add.s64 	%rd251, %rd250, %rd14;
	mul.hi.s64 	%rd252, %rd251, 341606371735362067;
	shr.u64 	%rd253, %rd252, 63;
	shr.s64 	%rd254, %rd252, 23;
	add.s64 	%rd255, %rd254, %rd253;
	setp.lt.s64 	%p268, %rd251, 0;
	mul.lo.s64 	%rd256, %rd255, 452984832;
	setp.ne.s64 	%p269, %rd256, %rd251;
	and.pred  	%p270, %p268, %p269;
	selp.s64 	%rd257, -1, 0, %p270;
	add.s64 	%rd258, %rd255, %rd257;
	mul.lo.s64 	%rd259, %rd258, -452984832;
	add.s64 	%rd260, %rd259, %rd251;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3676;
	add.s32 	%r3615, %r118, %r3613;
	cvt.s64.s32 	%rd263, %r3615;
	add.s64 	%rd264, %rd263, %rd14;
	mul.hi.s64 	%rd265, %rd264, 341606371735362067;
	shr.u64 	%rd266, %rd265, 63;
	shr.s64 	%rd267, %rd265, 23;
	add.s64 	%rd268, %rd267, %rd266;
	setp.lt.s64 	%p271, %rd264, 0;
	mul.lo.s64 	%rd269, %rd268, 452984832;
	setp.ne.s64 	%p272, %rd269, %rd264;
	and.pred  	%p273, %p271, %p272;
	selp.s64 	%rd270, -1, 0, %p273;
	add.s64 	%rd271, %rd268, %rd270;
	mul.lo.s64 	%rd272, %rd271, -452984832;
	add.s64 	%rd273, %rd272, %rd264;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd4, %rd274;
	st.global.u32 	[%rd275], %r3675;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L30722
	mov.u32 	%r3617, 0;
	st.global.u32 	[%rd5], %r3617;
	ret;
$L__BB0_6:                              // %L157
	mov.u32 	%r3618, 2;
	st.global.u32 	[%rd5], %r3618;
	mov.u64 	%rd276, exception2816;
	cvta.global.u64 	%rd277, %rd276;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd277;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r311;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r311;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
