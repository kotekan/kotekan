// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<319>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3823>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<374>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r392, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r401, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r401, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r393, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r402, %r2, %r3;
	mad.lo.s32 	%r403, %r4, 768, %r402;
	mul.wide.u32 	%rd49, %r403, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r404, 1;
	st.global.u32 	[%rd6], %r404;
	setp.gt.u32 	%p4, %r393, 2047;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r394, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r394, %r393;
	setp.gt.s32 	%p6, %r394, 4095;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r395, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r394, %r393;
	mad.lo.s32 	%r405, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r406, %r405, %r405, 4;
	setp.gt.u32 	%p8, %r406, 89478484;
	setp.gt.u32 	%p9, %r395, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r396, %r395;
	setp.lt.s32 	%p12, %r396, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r407, %r396, %r395;
	mul.hi.s32 	%r408, %r5, 715827883;
	shr.u32 	%r409, %r408, 31;
	shr.s32 	%r410, %r408, 1;
	add.s32 	%r411, %r410, %r409;
	setp.eq.s32 	%p14, %r407, %r411;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r397, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r398, %r397;
	setp.gt.s32 	%p17, %r398, 128;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r398, %r397;
	and.b32  	%r412, %r6, 15;
	setp.ne.s32 	%p19, %r412, 0;
	setp.lt.s32 	%p20, %r399, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r400, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r400, %r399;
	setp.gt.s32 	%p23, %r400, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r413, %r400, %r399;
	and.b32  	%r414, %r413, 15;
	setp.eq.s32 	%p25, %r414, 0;
	setp.eq.s32 	%p26, %r413, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass162
	and.b32  	%r255, %r3, 3;
	shr.u32 	%r256, %r3, 2;
	mul.lo.s32 	%r415, %r255, %r256;
	and.b32  	%r416, %r415, 7;
	cvt.rn.f32.s32 	%f201, %r416;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p318, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_210;
// %bb.199:
	@%p318 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r258, %f785;
	and.b32  	%r417, %r258, 8388607;
	or.b32  	%r3818, %r417, 1065353216;
	mov.b32 	%f780, %r3818;
	add.s32 	%r418, %r258, -1073741824;
	and.b32  	%r3819, %r418, -8388608;
	setp.eq.s32 	%p35, %r3819, 0;
	@%p35 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3819, 192937984;
	add.s32 	%r420, %r3818, %r419;
	mov.b32 	%f213, %r420;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3819, %r3819, %r419;
	mov.b32 	%r3818, %f780;
	setp.ne.s32 	%p36, %r3819, 0;
	setp.ne.s32 	%p37, %r3818, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r258, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r257, %f172;
	setp.lt.u32 	%p30, %r257, 1073741824;
	@%p30 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p31, %r257, -2147483647;
	@%p31 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r421, %f169;
	and.b32  	%r265, %r421, -2147483648;
	@%p40 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r422, %f781;
	or.b32  	%r423, %r265, %r422;
	mov.b32 	%f781, %r423;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r268, %r3, 1;
	and.b32  	%r269, %r268, 6;
	or.b32  	%r270, %r269, 1;
	setp.eq.s32 	%p48, %r269, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3715, %r269, %r256;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3715;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r439, %r8, 8388607;
	or.b32  	%r3719, %r439, 1065353216;
	mov.b32 	%f732, %r3719;
	add.s32 	%r440, %r8, -1073741824;
	and.b32  	%r3720, %r440, -8388608;
	setp.eq.s32 	%p56, %r3720, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1020.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1020
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r441, %r3720, 192937984;
	add.s32 	%r442, %r3719, %r441;
	mov.b32 	%f267, %r442;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3720, %r3720, %r441;
	mov.b32 	%r3719, %f732;
	setp.ne.s32 	%p57, %r3720, 0;
	setp.ne.s32 	%p58, %r3719, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1022
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i999
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1003
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1006
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1025
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r443, %f1;
	and.b32  	%r444, %r443, -2147483648;
	mov.b32 	%r445, %f733;
	or.b32  	%r446, %r444, %r445;
	mov.b32 	%f733, %r446;
$L__BB0_28:                             // %__nv_fmodf.exit1026
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r447, %f277;
	and.b32  	%r448, %r447, -2147483648;
	or.b32  	%r449, %r448, 1056964608;
	mov.b32 	%f278, %r449;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r450, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r451, %r450, 1;
	setp.eq.b32 	%p64, %r451, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r452, %r450, 2;
	setp.eq.s32 	%p65, %r452, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r453, %r450, 1;
	and.b32  	%r454, %r453, 2;
	setp.eq.s32 	%p66, %r454, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r270, 5;
	mul.lo.s32 	%r3716, %r270, %r256;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r456, %r3716, -1431655765;
	shr.u32 	%r457, %r456, 5;
	mul.lo.s32 	%r458, %r457, 48;
	sub.s32 	%r459, %r3716, %r458;
	cvt.rn.f32.s32 	%f308, %r459;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r460, %r16, 8388607;
	or.b32  	%r3721, %r460, 1065353216;
	mov.b32 	%f738, %r3721;
	add.s32 	%r461, %r16, -1073741824;
	and.b32  	%r3722, %r461, -8388608;
	setp.eq.s32 	%p77, %r3722, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1051.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1051
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r462, %r3722, 192937984;
	add.s32 	%r463, %r3721, %r462;
	mov.b32 	%f320, %r463;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3722, %r3722, %r462;
	mov.b32 	%r3721, %f738;
	setp.ne.s32 	%p78, %r3722, 0;
	setp.ne.s32 	%p79, %r3721, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1053
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1030
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1034
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r464, %f22;
	and.b32  	%r465, %r464, -2147483648;
	mov.b32 	%r466, %f739;
	or.b32  	%r467, %r465, %r466;
	mov.b32 	%f739, %r467;
$L__BB0_44:                             // %__nv_fmodf.exit1057
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r468, %f330;
	and.b32  	%r469, %r468, -2147483648;
	or.b32  	%r470, %r469, 1056964608;
	mov.b32 	%f331, %r470;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r471, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r472, %r471, 1;
	setp.eq.b32 	%p85, %r472, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r473, %r471, 2;
	setp.eq.s32 	%p86, %r473, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r474, %r471, 1;
	and.b32  	%r475, %r474, 2;
	setp.eq.s32 	%p87, %r475, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r3, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3715;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r483, %r26, 8388607;
	or.b32  	%r3723, %r483, 1065353216;
	mov.b32 	%f744, %r3723;
	add.s32 	%r484, %r26, -1073741824;
	and.b32  	%r3724, %r484, -8388608;
	setp.eq.s32 	%p99, %r3724, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1082.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1082
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r485, %r3724, 192937984;
	add.s32 	%r486, %r3723, %r485;
	mov.b32 	%f373, %r486;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3724, %r3724, %r485;
	mov.b32 	%r3723, %f744;
	setp.ne.s32 	%p100, %r3724, 0;
	setp.ne.s32 	%p101, %r3723, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1084
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1061
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1065
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1068
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1087
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r487, %f43;
	and.b32  	%r488, %r487, -2147483648;
	mov.b32 	%r489, %f745;
	or.b32  	%r490, %r488, %r489;
	mov.b32 	%f745, %r490;
$L__BB0_60:                             // %__nv_fmodf.exit1088
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r491, %f383;
	and.b32  	%r492, %r491, -2147483648;
	or.b32  	%r493, %r492, 1056964608;
	mov.b32 	%f384, %r493;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r494, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r495, %r494, 1;
	setp.eq.b32 	%p107, %r495, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r496, %r494, 2;
	setp.eq.s32 	%p108, %r496, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r497, %r494, 1;
	and.b32  	%r498, %r497, 2;
	setp.eq.s32 	%p109, %r498, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r500, %r3716, -1431655765;
	shr.u32 	%r501, %r500, 2;
	mul.lo.s32 	%r502, %r501, 6;
	sub.s32 	%r503, %r3716, %r502;
	cvt.rn.f32.s32 	%f414, %r503;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r504, %r34, 8388607;
	or.b32  	%r3725, %r504, 1065353216;
	mov.b32 	%f750, %r3725;
	add.s32 	%r505, %r34, -1073741824;
	and.b32  	%r3726, %r505, -8388608;
	setp.eq.s32 	%p121, %r3726, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1113.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1113
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r506, %r3726, 192937984;
	add.s32 	%r507, %r3725, %r506;
	mov.b32 	%f426, %r507;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3726, %r3726, %r506;
	mov.b32 	%r3725, %f750;
	setp.ne.s32 	%p122, %r3726, 0;
	setp.ne.s32 	%p123, %r3725, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1115
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1092
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1096
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1099
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1118
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r508, %f64;
	and.b32  	%r509, %r508, -2147483648;
	mov.b32 	%r510, %f751;
	or.b32  	%r511, %r509, %r510;
	mov.b32 	%f751, %r511;
$L__BB0_76:                             // %__nv_fmodf.exit1119
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r512, %f436;
	and.b32  	%r513, %r512, -2147483648;
	or.b32  	%r514, %r513, 1056964608;
	mov.b32 	%f437, %r514;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r515, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r516, %r515, 1;
	setp.eq.b32 	%p129, %r516, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r517, %r515, 2;
	setp.eq.s32 	%p130, %r517, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r518, %r515, 1;
	and.b32  	%r519, %r518, 2;
	setp.eq.s32 	%p131, %r519, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_220;
// %bb.78:
	@%p318 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r272, %f785;
	and.b32  	%r532, %r272, 8388607;
	or.b32  	%r3820, %r532, 1065353216;
	mov.b32 	%f784, %r3820;
	add.s32 	%r533, %r272, -1073741824;
	and.b32  	%r3821, %r533, -8388608;
	setp.eq.s32 	%p141, %r3821, 0;
	@%p141 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1144.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1144
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r534, %r3821, 192937984;
	add.s32 	%r535, %r3820, %r534;
	mov.b32 	%f476, %r535;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3821, %r3821, %r534;
	mov.b32 	%r3820, %f784;
	setp.ne.s32 	%p142, %r3821, 0;
	setp.ne.s32 	%p143, %r3820, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1146
	setp.gt.u32 	%p145, %r272, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1123
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r271, %f187;
	setp.lt.u32 	%p136, %r271, 1073741824;
	@%p136 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p137, %r271, -2147483647;
	@%p137 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1127
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1130
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1149
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r536, %f785;
	or.b32  	%r537, %r265, %r536;
	mov.b32 	%f785, %r537;
$L__BB0_222:                            // %__nv_fmodf.exit1150
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3715;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r553, %r46, 8388607;
	or.b32  	%r3727, %r553, 1065353216;
	mov.b32 	%f756, %r3727;
	add.s32 	%r554, %r46, -1073741824;
	and.b32  	%r3728, %r554, -8388608;
	setp.eq.s32 	%p162, %r3728, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1175.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1175
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r555, %r3728, 192937984;
	add.s32 	%r556, %r3727, %r555;
	mov.b32 	%f530, %r556;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3728, %r3728, %r555;
	mov.b32 	%r3727, %f756;
	setp.ne.s32 	%p163, %r3728, 0;
	setp.ne.s32 	%p164, %r3727, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1177
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1154
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1158
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1161
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1180
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r557, %f85;
	and.b32  	%r558, %r557, -2147483648;
	mov.b32 	%r559, %f757;
	or.b32  	%r560, %r558, %r559;
	mov.b32 	%f757, %r560;
$L__BB0_96:                             // %__nv_fmodf.exit1181
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r561, %f540;
	and.b32  	%r562, %r561, -2147483648;
	or.b32  	%r563, %r562, 1056964608;
	mov.b32 	%f541, %r563;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r564, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r565, %r564, 1;
	setp.eq.b32 	%p170, %r565, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r566, %r564, 2;
	setp.eq.s32 	%p171, %r566, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r567, %r564, 1;
	and.b32  	%r568, %r567, 2;
	setp.eq.s32 	%p172, %r568, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r570, %r3716, -1431655765;
	shr.u32 	%r571, %r570, 5;
	mul.lo.s32 	%r572, %r571, 48;
	sub.s32 	%r573, %r3716, %r572;
	cvt.rn.f32.s32 	%f571, %r573;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r574, %r54, 8388607;
	or.b32  	%r3729, %r574, 1065353216;
	mov.b32 	%f762, %r3729;
	add.s32 	%r575, %r54, -1073741824;
	and.b32  	%r3730, %r575, -8388608;
	setp.eq.s32 	%p183, %r3730, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1206.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1206
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r576, %r3730, 192937984;
	add.s32 	%r577, %r3729, %r576;
	mov.b32 	%f583, %r577;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3730, %r3730, %r576;
	mov.b32 	%r3729, %f762;
	setp.ne.s32 	%p184, %r3730, 0;
	setp.ne.s32 	%p185, %r3729, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1208
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1185
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1189
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1192
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1211
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r578, %f106;
	and.b32  	%r579, %r578, -2147483648;
	mov.b32 	%r580, %f763;
	or.b32  	%r581, %r579, %r580;
	mov.b32 	%f763, %r581;
$L__BB0_112:                            // %__nv_fmodf.exit1212
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r582, %f593;
	and.b32  	%r583, %r582, -2147483648;
	or.b32  	%r584, %r583, 1056964608;
	mov.b32 	%f594, %r584;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r585, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r586, %r585, 1;
	setp.eq.b32 	%p191, %r586, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r587, %r585, 2;
	setp.eq.s32 	%p192, %r587, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r588, %r585, 1;
	and.b32  	%r589, %r588, 2;
	setp.eq.s32 	%p193, %r589, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3715;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r597, %r64, 8388607;
	or.b32  	%r3731, %r597, 1065353216;
	mov.b32 	%f768, %r3731;
	add.s32 	%r598, %r64, -1073741824;
	and.b32  	%r3732, %r598, -8388608;
	setp.eq.s32 	%p203, %r3732, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1237.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r599, %r3732, 192937984;
	add.s32 	%r600, %r3731, %r599;
	mov.b32 	%f636, %r600;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3732, %r3732, %r599;
	mov.b32 	%r3731, %f768;
	setp.ne.s32 	%p204, %r3732, 0;
	setp.ne.s32 	%p205, %r3731, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1239
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1216
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1220
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1223
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1242
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r601, %f127;
	and.b32  	%r602, %r601, -2147483648;
	mov.b32 	%r603, %f769;
	or.b32  	%r604, %r602, %r603;
	mov.b32 	%f769, %r604;
$L__BB0_128:                            // %__nv_fmodf.exit1243
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r605, %f646;
	and.b32  	%r606, %r605, -2147483648;
	or.b32  	%r607, %r606, 1056964608;
	mov.b32 	%f647, %r607;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r608, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r609, %r608, 1;
	setp.eq.b32 	%p211, %r609, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r610, %r608, 2;
	setp.eq.s32 	%p212, %r610, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r611, %r608, 1;
	and.b32  	%r612, %r611, 2;
	setp.eq.s32 	%p213, %r612, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r614, %r3716, -1431655765;
	shr.u32 	%r615, %r614, 2;
	mul.lo.s32 	%r616, %r615, 6;
	sub.s32 	%r617, %r3716, %r616;
	cvt.rn.f32.s32 	%f677, %r617;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r618, %r72, 8388607;
	or.b32  	%r3733, %r618, 1065353216;
	mov.b32 	%f774, %r3733;
	add.s32 	%r619, %r72, -1073741824;
	and.b32  	%r3734, %r619, -8388608;
	setp.eq.s32 	%p223, %r3734, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1268.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1268
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r620, %r3734, 192937984;
	add.s32 	%r621, %r3733, %r620;
	mov.b32 	%f689, %r621;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3734, %r3734, %r620;
	mov.b32 	%r3733, %f774;
	setp.ne.s32 	%p224, %r3734, 0;
	setp.ne.s32 	%p225, %r3733, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1270
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1247
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1251
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1254
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1273
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r622, %f148;
	and.b32  	%r623, %r622, -2147483648;
	mov.b32 	%r624, %f775;
	or.b32  	%r625, %r623, %r624;
	mov.b32 	%f775, %r625;
$L__BB0_144:                            // %__nv_fmodf.exit1274
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r626, %f699;
	and.b32  	%r627, %r626, -2147483648;
	or.b32  	%r628, %r627, 1056964608;
	mov.b32 	%f700, %r628;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r629, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r630, %r629, 1;
	setp.eq.b32 	%p231, %r630, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r631, %r629, 2;
	setp.eq.s32 	%p232, %r631, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r632, %r629, 1;
	and.b32  	%r633, %r632, 2;
	setp.eq.s32 	%p233, %r633, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r281, 999999999;
	cvt.u16.u32 	%rs247, %r3;
	@%p91 bra 	$L__BB0_224;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r647, %rs34;
	and.b32  	%r648, %r647, 255;
	mad.lo.s32 	%r649, %r648, 24, %r1;
	cvt.u16.u32 	%rs35, %r649;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r650, %rs39;
	mul.wide.u32 	%rd50, %r650, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r651, [%rd51];
	shl.b32 	%r652, %r651, 16;
	cvt.s32.s16 	%r83, %r651;
	shr.s32 	%r84, %r651, 16;
	or.b32  	%r653, %r652, 65535;
	setp.lt.u32 	%p237, %r653, 1638399;
	setp.lt.u32 	%p238, %r651, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1237
	mul.lo.s32 	%r657, %r84, 801;
	mad.lo.s32 	%r281, %r83, 33, %r657;
$L__BB0_224:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r430, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r431, %r430, -2147483648;
	mov.b32 	%r544, %f487;
	or.b32  	%r432, %r431, 1056964608;
	and.b32  	%r545, %r544, -2147483648;
	mov.b32 	%f225, %r432;
	or.b32  	%r546, %r545, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r546;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r433, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r434, %r433, 1;
	cvt.rzi.s32.f32 	%r547, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r434, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r548, %r547, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r435, %r433, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r548, 1;
	setp.eq.s32 	%p44, %r435, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r436, %r433, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r549, %r547, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r437, %r436, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r549, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r550, %r547, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r437, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r551, %r550, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r551, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r426, %f254;
	mov.b32 	%r429, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r425, %r429, -2147483648;
	mov.b32 	%r521, %f62;
	mov.b32 	%r522, %f83;
	mov.b32 	%r527, %f63;
	mov.b32 	%r528, %f84;
	mov.b32 	%r540, %f517;
	mov.b32 	%r543, %f514;
	mov.b32 	%r477, %f20;
	mov.b32 	%r478, %f41;
	mov.b32 	%r480, %f21;
	mov.b32 	%r481, %f42;
	xor.b32  	%r524, %r527, -2147483648;
	xor.b32  	%r525, %r528, -2147483648;
	xor.b32  	%r539, %r543, -2147483648;
	mov.b32 	%r591, %f104;
	mov.b32 	%r592, %f125;
	mov.b32 	%r594, %f105;
	mov.b32 	%r595, %f126;
	mov.b32 	%r635, %f146;
	mov.b32 	%r636, %f167;
	mov.b32 	%r641, %f147;
	xor.b32  	%r638, %r641, -2147483648;
	mov.b32 	%r642, %f168;
	xor.b32  	%r639, %r642, -2147483648;
	and.b32  	%r658, %r3, 24;
	setp.ne.s32 	%p240, %r658, 24;
	cvt.u16.u32 	%rs248, %r256;
	mul.lo.s32 	%r3735, %r4, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.225:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r670, %rs50;
	and.b32  	%r3736, %r670, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r659, %r255, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r660, %rs44;
	and.b32  	%r3736, %r660, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r661, %rs45, 24;
	or.b32  	%r662, %r3735, %r1;
	add.s32 	%r663, %r662, %r659;
	add.s32 	%r664, %r663, %r661;
	mul.wide.u32 	%rd57, %r664, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r88, [%rd58];
	or.b32  	%r665, %r1, 576;
	add.s32 	%r666, %r665, %r3735;
	add.s32 	%r667, %r666, %r659;
	add.s32 	%r668, %r667, %r661;
	mul.wide.u32 	%rd59, %r668, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r89, [%rd60];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r424, %r426, %r425;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r476, %r478, %r477;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r520, %r522, %r521;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r523, %r525, %r524;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r526, %r528, %r527;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r529, %r522, %r521;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r538, %r540, %r539;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r541, %r543, %r540;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r590, %r592, %r591;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r593, %r595, %r594;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r634, %r636, %r635;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r637, %r639, %r638;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r640, %r642, %r641;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r643, %r636, %r635;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r672, %r393, 15;
	shl.b32 	%r673, %r397, 8;
	add.s32 	%r90, %r673, %r672;
	shl.b32 	%r674, %r4, 8;
	shl.b32 	%r675, %r3, 2;
	and.b32  	%r676, %r675, 60;
	or.b32  	%r677, %r676, %r674;
	shl.b32 	%r678, %r3, 3;
	and.b32  	%r679, %r678, 128;
	or.b32  	%r91, %r677, %r679;
	or.b32  	%r680, %r675, %r674;
	or.b32  	%r681, %r680, %r679;
	or.b32  	%r92, %r681, 64;
	add.s32 	%r93, %r1, 24;
	shr.u32 	%r682, %r3, 4;
	and.b32  	%r683, %r268, 30;
	or.b32  	%r684, %r683, %r682;
	mul.lo.s32 	%r94, %r684, 257;
	or.b32  	%r685, %r268, %r682;
	or.b32  	%r686, %r685, 32;
	mul.lo.s32 	%r95, %r686, 257;
	and.b32  	%r687, %r2, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r688, %rs56;
	and.b32  	%r96, %r688, 255;
	shr.u32 	%r689, %r1, 3;
	mad.lo.s32 	%r97, %r689, 257, %r687;
	shr.u32 	%r690, %r93, 3;
	mad.lo.s32 	%r98, %r690, 257, %r687;
	add.s32 	%r691, %r1, 48;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r99, %r692, 257, %r687;
	add.s32 	%r693, %r1, 72;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r100, %r694, 257, %r687;
	or.b32  	%r695, %r689, 12;
	mad.lo.s32 	%r101, %r695, 257, %r687;
	add.s32 	%r696, %r1, 120;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r102, %r697, 257, %r687;
	add.s32 	%r698, %r1, 144;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r103, %r699, 257, %r687;
	add.s32 	%r700, %r1, 168;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r104, %r701, 257, %r687;
	or.b32  	%r702, %r689, 24;
	mad.lo.s32 	%r105, %r702, 257, %r687;
	add.s32 	%r703, %r1, 216;
	shr.u32 	%r704, %r703, 3;
	mad.lo.s32 	%r106, %r704, 257, %r687;
	add.s32 	%r705, %r1, 240;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r107, %r706, 257, %r687;
	add.s32 	%r707, %r1, 264;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r108, %r708, 257, %r687;
	or.b32  	%r709, %r689, 36;
	mad.lo.s32 	%r109, %r709, 257, %r687;
	add.s32 	%r710, %r1, 312;
	shr.u32 	%r711, %r710, 3;
	mad.lo.s32 	%r110, %r711, 257, %r687;
	add.s32 	%r712, %r1, 336;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r111, %r713, 257, %r687;
	add.s32 	%r714, %r1, 360;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r112, %r715, 257, %r687;
	or.b32  	%r716, %r689, 48;
	mad.lo.s32 	%r113, %r716, 257, %r687;
	add.s32 	%r717, %r1, 408;
	shr.u32 	%r718, %r717, 3;
	mad.lo.s32 	%r114, %r718, 257, %r687;
	add.s32 	%r719, %r1, 432;
	shr.u32 	%r720, %r719, 3;
	mad.lo.s32 	%r115, %r720, 257, %r687;
	add.s32 	%r721, %r1, 456;
	shr.u32 	%r722, %r721, 3;
	mad.lo.s32 	%r116, %r722, 257, %r687;
	or.b32  	%r723, %r689, 60;
	mad.lo.s32 	%r117, %r723, 257, %r687;
	add.s32 	%r724, %r1, 504;
	bfe.u32 	%r725, %r724, 3, 6;
	mad.lo.s32 	%r118, %r725, 257, %r687;
	mul.lo.s32 	%r726, %r1, 33;
	mad.lo.s32 	%r727, %r255, 4806, %r726;
	mad.lo.s32 	%r728, %r3736, 801, %r727;
	bfe.s32 	%r729, %r3, 2, 1;
	and.b32  	%r730, %r3, 4;
	setp.eq.s32 	%p241, %r730, 0;
	and.b32  	%r731, %r729, 1028;
	bfe.s32 	%r732, %r3, 3, 1;
	and.b32  	%r733, %r732, 514;
	bfe.s32 	%r734, %r3, 1, 1;
	and.b32  	%r735, %r734, 2056;
	and.b32  	%r736, %r3, 1;
	neg.s32 	%r737, %r736;
	and.b32  	%r738, %r737, 4112;
	mul.lo.s32 	%r739, %r682, 257;
	add.s32 	%r740, %r739, %r1;
	add.s32 	%r741, %r740, %r733;
	add.s32 	%r742, %r741, %r731;
	add.s32 	%r743, %r742, %r735;
	add.s32 	%r744, %r743, %r738;
	mul.wide.u32 	%rd61, %r744, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	selp.b32 	%r745, 8256, 9284, %p241;
	add.s32 	%r746, %r741, %r745;
	add.s32 	%r747, %r746, %r735;
	add.s32 	%r748, %r747, %r738;
	mul.wide.u32 	%rd63, %r748, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r749, %r1, 32;
	add.s32 	%r750, %r749, %r739;
	add.s32 	%r751, %r750, %r733;
	add.s32 	%r752, %r751, %r731;
	add.s32 	%r753, %r752, %r735;
	add.s32 	%r754, %r753, %r738;
	mul.wide.u32 	%rd64, %r754, 4;
	add.s64 	%rd9, %rd62, %rd64;
	add.s32 	%r755, %r751, %r745;
	add.s32 	%r756, %r755, %r735;
	add.s32 	%r757, %r756, %r738;
	mul.wide.u32 	%rd65, %r757, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r758, %r1, 3, 1;
	and.b32  	%r759, %r1, 8;
	setp.eq.s32 	%p242, %r759, 0;
	and.b32  	%r760, %r758, 1028;
	mul.lo.s32 	%r761, %r255, 6;
	and.b32  	%r762, %r1, 1;
	neg.s32 	%r763, %r762;
	and.b32  	%r764, %r763, 8256;
	shr.u32 	%r765, %r1, 4;
	mul.lo.s32 	%r766, %r765, 514;
	bfe.s32 	%r767, %r1, 2, 1;
	and.b32  	%r768, %r767, 2056;
	bfe.s32 	%r769, %r1, 1, 1;
	and.b32  	%r770, %r769, 4112;
	add.s32 	%r771, %r766, %r761;
	add.s32 	%r772, %r771, %r760;
	add.s32 	%r773, %r772, %r764;
	add.s32 	%r774, %r773, %r768;
	add.s32 	%r775, %r774, %r770;
	add.s32 	%r776, %r775, %r3736;
	mul.wide.u32 	%rd66, %r776, 4;
	add.s64 	%rd11, %rd62, %rd66;
	selp.b32 	%r777, 1028, 0, %p242;
	bfe.s32 	%r778, %r93, 4, 1;
	and.b32  	%r779, %r778, 514;
	shr.u32 	%r780, %r93, 5;
	mul.lo.s32 	%r781, %r780, 257;
	add.s32 	%r782, %r777, %r761;
	or.b32  	%r783, %r782, %r764;
	add.s32 	%r784, %r783, %r768;
	add.s32 	%r785, %r784, %r770;
	add.s32 	%r786, %r785, %r781;
	add.s32 	%r787, %r786, %r779;
	add.s32 	%r788, %r787, %r3736;
	mul.wide.u32 	%rd67, %r788, 4;
	add.s64 	%rd12, %rd62, %rd67;
	or.b32  	%r789, %r761, 32;
	add.s32 	%r790, %r789, %r766;
	add.s32 	%r791, %r790, %r760;
	add.s32 	%r792, %r791, %r764;
	add.s32 	%r793, %r792, %r768;
	add.s32 	%r794, %r793, %r770;
	add.s32 	%r795, %r794, %r3736;
	mul.wide.u32 	%rd68, %r795, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r796, %r789, %r777;
	add.s32 	%r797, %r796, %r764;
	add.s32 	%r798, %r797, %r768;
	add.s32 	%r799, %r798, %r770;
	add.s32 	%r800, %r799, %r781;
	add.s32 	%r801, %r800, %r779;
	add.s32 	%r802, %r801, %r3736;
	mul.wide.u32 	%rd69, %r802, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r803, %r395, 589824;
	mad.lo.s32 	%r804, %r399, 1152, %r803;
	mad.lo.s32 	%r805, %r1, 24, %r3735;
	add.s32 	%r119, %r805, %r96;
	cvt.s64.s32 	%rd15, %r804;
	cvt.u16.u32 	%rs57, %r93;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r806, %rs62;
	and.b32  	%r807, %r806, 255;
	or.b32  	%r808, %r3735, %r96;
	mad.lo.s32 	%r120, %r807, 24, %r808;
	mul.wide.u32 	%rd70, %r728, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r809, %r744, 64;
	mul.wide.u32 	%rd71, %r809, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r810, %r748, 64;
	mul.wide.u32 	%rd72, %r810, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r811, %r754, 64;
	mul.wide.u32 	%rd73, %r811, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r812, %r757, 64;
	mul.wide.u32 	%rd74, %r812, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r813, %r744, 128;
	mul.wide.u32 	%rd75, %r813, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r814, %r748, 128;
	mul.wide.u32 	%rd76, %r814, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r815, %r754, 128;
	mul.wide.u32 	%rd77, %r815, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r816, %r757, 128;
	mul.wide.u32 	%rd78, %r816, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r817, %r744, 192;
	mul.wide.u32 	%rd79, %r817, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r818, %r748, 192;
	mul.wide.u32 	%rd80, %r818, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r819, %r754, 192;
	mul.wide.u32 	%rd81, %r819, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r820, %r757, 192;
	mul.wide.u32 	%rd82, %r820, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r821, %r776, 64;
	mul.wide.u32 	%rd83, %r821, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r822, %r788, 64;
	mul.wide.u32 	%rd84, %r822, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r823, %r795, 64;
	mul.wide.u32 	%rd85, %r823, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r824, %r802, 64;
	mul.wide.u32 	%rd86, %r824, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r825, %r776, 128;
	mul.wide.u32 	%rd87, %r825, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r826, %r788, 128;
	mul.wide.u32 	%rd88, %r826, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r827, %r795, 128;
	mul.wide.u32 	%rd89, %r827, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r828, %r802, 128;
	mul.wide.u32 	%rd90, %r828, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r829, %r776, 192;
	mul.wide.u32 	%rd91, %r829, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r830, %r788, 192;
	mul.wide.u32 	%rd92, %r830, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r831, %r795, 192;
	mul.wide.u32 	%rd93, %r831, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r832, %r802, 192;
	mul.wide.u32 	%rd94, %r832, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p244, %r3, 16;
	setp.gt.u32 	%p273, %r1, 7;
	setp.lt.u32 	%p277, %r3, 24;
	mov.u32 	%r3769, %r121;
	mov.u32 	%r3770, %r121;
	mov.u32 	%r3771, %r121;
	mov.u32 	%r3772, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L41253
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r254, %r121, 48;
	setp.ne.s32 	%p317, %r121, 1968;
	mov.u32 	%r121, %r254;
	@%p317 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r833, %r121, %r393;
	setp.lt.s32 	%p243, %r833, %r394;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem690
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1026, %r121, -1431655765;
	shr.u32 	%r1027, %r1026, 5;
	mul.lo.s32 	%r288, %r1027, 48;
	add.s32 	%r1028, %r288, %r1;
	cvt.u16.u32 	%rs63, %r1028;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 5;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -2048;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r1029, %rs68;
	shl.b32 	%r1030, %r1029, 15;
	or.b32  	%r1031, %r91, %r1030;
	add.s32 	%r1032, %r90, %r1031;
	shr.s32 	%r1033, %r1032, 31;
	shr.u32 	%r1034, %r1033, 6;
	add.s32 	%r1035, %r1032, %r1034;
	shr.s32 	%r1036, %r1035, 26;
	setp.lt.s32 	%p245, %r1032, 0;
	and.b32  	%r1037, %r1035, -67108864;
	setp.ne.s32 	%p246, %r1037, %r1032;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r1038, 1, 0, %p247;
	sub.s32 	%r1039, %r1038, %r1036;
	shl.b32 	%r1040, %r1039, 26;
	add.s32 	%r1041, %r1040, %r1032;
	mul.wide.s32 	%rd95, %r1041, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1042, %r1043, %r1044, %r1045}, [%rd96];
	or.b32  	%r1046, %r92, %r1030;
	add.s32 	%r1047, %r90, %r1046;
	shr.s32 	%r1048, %r1047, 31;
	shr.u32 	%r1049, %r1048, 6;
	add.s32 	%r1050, %r1047, %r1049;
	shr.u32 	%r1051, %r1050, 26;
	shr.u32 	%r1052, %r1047, 31;
	sub.s32 	%r1053, %r1052, %r1051;
	shl.b32 	%r1054, %r1053, 26;
	or.b32  	%r1055, %r1047, 1;
	add.s32 	%r1056, %r1055, %r1054;
	mul.wide.s32 	%rd97, %r1056, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1057, %r1058, %r1059, %r1060}, [%rd98+-4];
	add.s32 	%r1061, %r93, %r288;
	cvt.u16.u32 	%rs69, %r1061;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 5;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -2048;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.s32.s16 	%r1062, %rs74;
	shl.b32 	%r1063, %r1062, 15;
	or.b32  	%r1064, %r91, %r1063;
	add.s32 	%r1065, %r90, %r1064;
	shr.s32 	%r1066, %r1065, 31;
	shr.u32 	%r1067, %r1066, 6;
	add.s32 	%r1068, %r1065, %r1067;
	shr.s32 	%r1069, %r1068, 26;
	setp.lt.s32 	%p248, %r1065, 0;
	and.b32  	%r1070, %r1068, -67108864;
	setp.ne.s32 	%p249, %r1070, %r1065;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r1071, 1, 0, %p250;
	sub.s32 	%r1072, %r1071, %r1069;
	shl.b32 	%r1073, %r1072, 26;
	add.s32 	%r1074, %r1073, %r1065;
	mul.wide.s32 	%rd99, %r1074, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1075, %r1076, %r1077, %r1078}, [%rd100];
	or.b32  	%r1079, %r92, %r1063;
	add.s32 	%r1080, %r90, %r1079;
	shr.s32 	%r1081, %r1080, 31;
	shr.u32 	%r1082, %r1081, 6;
	add.s32 	%r1083, %r1080, %r1082;
	shr.u32 	%r1084, %r1083, 26;
	shr.u32 	%r1085, %r1080, 31;
	sub.s32 	%r1086, %r1085, %r1084;
	shl.b32 	%r1087, %r1086, 26;
	or.b32  	%r1088, %r1080, 1;
	add.s32 	%r1089, %r1088, %r1087;
	mul.wide.s32 	%rd101, %r1089, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1090, %r1091, %r1092, %r1093}, [%rd102+-4];
	selp.b32 	%r1094, %r1044, %r1042, %p244;
	shfl.sync.bfly.b32	%r1095, %r1094, 16, 31, -1;
	selp.b32 	%r836, %r1042, %r1095, %p244;
	selp.b32 	%r841, %r1095, %r1044, %p244;
	selp.b32 	%r1096, %r1045, %r1043, %p244;
	shfl.sync.bfly.b32	%r1097, %r1096, 16, 31, -1;
	selp.b32 	%r844, %r1043, %r1097, %p244;
	selp.b32 	%r849, %r1097, %r1045, %p244;
	selp.b32 	%r1098, %r1059, %r1057, %p244;
	shfl.sync.bfly.b32	%r1099, %r1098, 16, 31, -1;
	selp.b32 	%r852, %r1057, %r1099, %p244;
	selp.b32 	%r857, %r1099, %r1059, %p244;
	selp.b32 	%r1100, %r1060, %r1058, %p244;
	shfl.sync.bfly.b32	%r1101, %r1100, 16, 31, -1;
	selp.b32 	%r860, %r1058, %r1101, %p244;
	selp.b32 	%r865, %r1101, %r1060, %p244;
	selp.b32 	%r1102, %r1077, %r1075, %p244;
	shfl.sync.bfly.b32	%r1103, %r1102, 16, 31, -1;
	selp.b32 	%r868, %r1075, %r1103, %p244;
	selp.b32 	%r873, %r1103, %r1077, %p244;
	selp.b32 	%r1104, %r1078, %r1076, %p244;
	shfl.sync.bfly.b32	%r1105, %r1104, 16, 31, -1;
	selp.b32 	%r876, %r1076, %r1105, %p244;
	selp.b32 	%r881, %r1105, %r1078, %p244;
	selp.b32 	%r1106, %r1092, %r1090, %p244;
	shfl.sync.bfly.b32	%r1107, %r1106, 16, 31, -1;
	selp.b32 	%r884, %r1090, %r1107, %p244;
	selp.b32 	%r889, %r1107, %r1092, %p244;
	selp.b32 	%r1108, %r1093, %r1091, %p244;
	shfl.sync.bfly.b32	%r1109, %r1108, 16, 31, -1;
	selp.b32 	%r892, %r1091, %r1109, %p244;
	selp.b32 	%r897, %r1109, %r1093, %p244;
	shl.b32 	%r837, %r841, 4;
	mov.u32 	%r835, 252645135;
	// begin inline asm
	lop3.b32 %r899, %r835, %r836, %r837, 202;
	// end inline asm
	shr.u32 	%r840, %r836, 4;
	// begin inline asm
	lop3.b32 %r915, %r835, %r840, %r841, 202;
	// end inline asm
	shl.b32 	%r845, %r849, 4;
	// begin inline asm
	lop3.b32 %r907, %r835, %r844, %r845, 202;
	// end inline asm
	shr.u32 	%r848, %r844, 4;
	// begin inline asm
	lop3.b32 %r923, %r835, %r848, %r849, 202;
	// end inline asm
	shl.b32 	%r853, %r857, 4;
	// begin inline asm
	lop3.b32 %r931, %r835, %r852, %r853, 202;
	// end inline asm
	shr.u32 	%r856, %r852, 4;
	// begin inline asm
	lop3.b32 %r947, %r835, %r856, %r857, 202;
	// end inline asm
	shl.b32 	%r861, %r865, 4;
	// begin inline asm
	lop3.b32 %r939, %r835, %r860, %r861, 202;
	// end inline asm
	shr.u32 	%r864, %r860, 4;
	// begin inline asm
	lop3.b32 %r955, %r835, %r864, %r865, 202;
	// end inline asm
	shl.b32 	%r869, %r873, 4;
	// begin inline asm
	lop3.b32 %r900, %r835, %r868, %r869, 202;
	// end inline asm
	shr.u32 	%r872, %r868, 4;
	// begin inline asm
	lop3.b32 %r916, %r835, %r872, %r873, 202;
	// end inline asm
	shl.b32 	%r877, %r881, 4;
	// begin inline asm
	lop3.b32 %r908, %r835, %r876, %r877, 202;
	// end inline asm
	shr.u32 	%r880, %r876, 4;
	// begin inline asm
	lop3.b32 %r924, %r835, %r880, %r881, 202;
	// end inline asm
	shl.b32 	%r885, %r889, 4;
	// begin inline asm
	lop3.b32 %r932, %r835, %r884, %r885, 202;
	// end inline asm
	shr.u32 	%r888, %r884, 4;
	// begin inline asm
	lop3.b32 %r948, %r835, %r888, %r889, 202;
	// end inline asm
	shl.b32 	%r893, %r897, 4;
	// begin inline asm
	lop3.b32 %r940, %r835, %r892, %r893, 202;
	// end inline asm
	shr.u32 	%r896, %r892, 4;
	// begin inline asm
	lop3.b32 %r956, %r835, %r896, %r897, 202;
	// end inline asm
	mov.u32 	%r901, 25152;
	// begin inline asm
	prmt.b32 %r963, %r899, %r900, %r901;
	// end inline asm
	mov.u32 	%r905, 29521;
	// begin inline asm
	prmt.b32 %r995, %r899, %r900, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r907, %r908, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r907, %r908, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r964, %r915, %r916, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r996, %r915, %r916, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r972, %r923, %r924, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1004, %r923, %r924, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r931, %r932, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r931, %r932, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r939, %r940, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1019, %r939, %r940, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r980, %r947, %r948, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1012, %r947, %r948, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r988, %r955, %r956, %r901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1020, %r955, %r956, %r905;
	// end inline asm
	mov.u32 	%r1021, 21520;
	// begin inline asm
	prmt.b32 %r962, %r963, %r964, %r1021;
	// end inline asm
	mov.u32 	%r1025, 30258;
	// begin inline asm
	prmt.b32 %r966, %r963, %r964, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r970, %r971, %r972, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r974, %r971, %r972, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r978, %r979, %r980, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r982, %r979, %r980, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r986, %r987, %r988, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r990, %r987, %r988, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r994, %r995, %r996, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r998, %r995, %r996, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1002, %r1003, %r1004, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1006, %r1003, %r1004, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1010, %r1011, %r1012, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1014, %r1011, %r1012, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1018, %r1019, %r1020, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1022, %r1019, %r1020, %r1025;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1110, %rs80;
	add.s32 	%r1111, %r94, %r1110;
	mul.wide.s32 	%rd103, %r1111, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r962;
	add.s32 	%r1112, %r1111, 128;
	mul.wide.u32 	%rd106, %r1112, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r970;
	add.s32 	%r1113, %r1111, 64;
	mul.wide.u32 	%rd108, %r1113, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r966;
	add.s32 	%r1114, %r1111, 192;
	mul.wide.u32 	%rd110, %r1114, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r974;
	add.s32 	%r1115, %r95, %r1110;
	mul.wide.u32 	%rd112, %r1115, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r978;
	add.s32 	%r1116, %r1115, 128;
	mul.wide.u32 	%rd114, %r1116, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r986;
	add.s32 	%r1117, %r1115, 64;
	mul.wide.u32 	%rd116, %r1117, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r982;
	add.s32 	%r1118, %r1115, 192;
	mul.wide.u32 	%rd118, %r1118, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r990;
	add.s32 	%r1119, %r1111, 32;
	mul.wide.u32 	%rd120, %r1119, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r994;
	add.s32 	%r1120, %r1111, 160;
	mul.wide.u32 	%rd122, %r1120, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r1002;
	add.s32 	%r1121, %r1111, 96;
	mul.wide.u32 	%rd124, %r1121, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r998;
	add.s32 	%r1122, %r1111, 224;
	mul.wide.u32 	%rd126, %r1122, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r1006;
	add.s32 	%r1123, %r1115, 32;
	mul.wide.u32 	%rd128, %r1123, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1010;
	add.s32 	%r1124, %r1115, 160;
	mul.wide.u32 	%rd130, %r1124, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1018;
	add.s32 	%r1125, %r1115, 96;
	mul.wide.u32 	%rd132, %r1125, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1014;
	add.s32 	%r1126, %r1115, 224;
	mul.wide.u32 	%rd134, %r1126, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1022;
	bar.sync 	0;
	add.s32 	%r1127, %r288, %r96;
	cvt.u16.u32 	%rs81, %r1127;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r289, %rs87;
	add.s32 	%r1128, %r97, %r289;
	mul.wide.s32 	%rd136, %r1128, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r290, [%rd137];
	add.s32 	%r1129, %r98, %r289;
	mul.wide.u32 	%rd138, %r1129, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r291, [%rd139];
	add.s32 	%r1130, %r99, %r289;
	mul.wide.u32 	%rd140, %r1130, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r292, [%rd141];
	add.s32 	%r1131, %r100, %r289;
	mul.wide.u32 	%rd142, %r1131, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r293, [%rd143];
	add.s32 	%r1132, %r101, %r289;
	mul.wide.u32 	%rd144, %r1132, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r294, [%rd145];
	add.s32 	%r1133, %r102, %r289;
	mul.wide.u32 	%rd146, %r1133, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r295, [%rd147];
	add.s32 	%r1134, %r103, %r289;
	mul.wide.u32 	%rd148, %r1134, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r296, [%rd149];
	add.s32 	%r1135, %r104, %r289;
	mul.wide.u32 	%rd150, %r1135, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r297, [%rd151];
	add.s32 	%r1136, %r105, %r289;
	mul.wide.u32 	%rd152, %r1136, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r298, [%rd153];
	add.s32 	%r1137, %r106, %r289;
	mul.wide.u32 	%rd154, %r1137, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r299, [%rd155];
	add.s32 	%r1138, %r107, %r289;
	mul.wide.u32 	%rd156, %r1138, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r300, [%rd157];
	add.s32 	%r1139, %r108, %r289;
	mul.wide.u32 	%rd158, %r1139, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r301, [%rd159];
	add.s32 	%r1140, %r109, %r289;
	mul.wide.u32 	%rd160, %r1140, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r302, [%rd161];
	add.s32 	%r1141, %r110, %r289;
	mul.wide.u32 	%rd162, %r1141, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r303, [%rd163];
	add.s32 	%r1142, %r111, %r289;
	mul.wide.u32 	%rd164, %r1142, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r304, [%rd165];
	add.s32 	%r1143, %r112, %r289;
	mul.wide.u32 	%rd166, %r1143, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r305, [%rd167];
	add.s32 	%r1144, %r113, %r289;
	mul.wide.u32 	%rd168, %r1144, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r306, [%rd169];
	add.s32 	%r1145, %r114, %r289;
	mul.wide.u32 	%rd170, %r1145, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r307, [%rd171];
	add.s32 	%r1146, %r115, %r289;
	mul.wide.u32 	%rd172, %r1146, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r308, [%rd173];
	add.s32 	%r1147, %r116, %r289;
	mul.wide.u32 	%rd174, %r1147, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r309, [%rd175];
	add.s32 	%r1148, %r117, %r289;
	mul.wide.u32 	%rd176, %r1148, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r310, [%rd177];
	add.s32 	%r1149, %r118, %r289;
	mul.wide.s32 	%rd178, %r1149, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r311, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r312, %r281, 0, 31, -1;
	shfl.sync.idx.b32	%r313, %r281, 1, 31, -1;
	shfl.sync.idx.b32	%r314, %r281, 2, 31, -1;
	shfl.sync.idx.b32	%r315, %r281, 3, 31, -1;
	shfl.sync.idx.b32	%r316, %r281, 4, 31, -1;
	shfl.sync.idx.b32	%r317, %r281, 5, 31, -1;
	shfl.sync.idx.b32	%r318, %r281, 6, 31, -1;
	shfl.sync.idx.b32	%r319, %r281, 7, 31, -1;
	shfl.sync.idx.b32	%r320, %r281, 8, 31, -1;
	shfl.sync.idx.b32	%r321, %r281, 9, 31, -1;
	shfl.sync.idx.b32	%r322, %r281, 10, 31, -1;
	shfl.sync.idx.b32	%r323, %r281, 11, 31, -1;
	shfl.sync.idx.b32	%r324, %r281, 12, 31, -1;
	shfl.sync.idx.b32	%r325, %r281, 13, 31, -1;
	shfl.sync.idx.b32	%r326, %r281, 14, 31, -1;
	shfl.sync.idx.b32	%r327, %r281, 15, 31, -1;
	shfl.sync.idx.b32	%r328, %r281, 16, 31, -1;
	shfl.sync.idx.b32	%r329, %r281, 17, 31, -1;
	shfl.sync.idx.b32	%r330, %r281, 18, 31, -1;
	shfl.sync.idx.b32	%r331, %r281, 19, 31, -1;
	shfl.sync.idx.b32	%r332, %r281, 20, 31, -1;
	shfl.sync.idx.b32	%r333, %r281, 21, 31, -1;
	shfl.sync.idx.b32	%r334, %r281, 22, 31, -1;
	shfl.sync.idx.b32	%r335, %r281, 23, 31, -1;
	setp.eq.s32 	%p251, %r312, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1150, %r312, %r289;
	mul.wide.s32 	%rd180, %r1150, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r290;
	setp.eq.s32 	%p252, %r313, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1151, %r313, %r289;
	mul.wide.s32 	%rd183, %r1151, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r291;
	setp.eq.s32 	%p253, %r314, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1152, %r314, %r289;
	mul.wide.s32 	%rd186, %r1152, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r292;
	setp.eq.s32 	%p254, %r315, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1153, %r315, %r289;
	mul.wide.s32 	%rd189, %r1153, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r293;
	setp.eq.s32 	%p255, %r316, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1154, %r316, %r289;
	mul.wide.s32 	%rd192, %r1154, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r294;
	setp.eq.s32 	%p256, %r317, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1155, %r317, %r289;
	mul.wide.s32 	%rd195, %r1155, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r295;
	setp.eq.s32 	%p257, %r318, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1156, %r318, %r289;
	mul.wide.s32 	%rd198, %r1156, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r296;
	setp.eq.s32 	%p258, %r319, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1157, %r319, %r289;
	mul.wide.s32 	%rd201, %r1157, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r297;
	setp.eq.s32 	%p259, %r320, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1158, %r320, %r289;
	mul.wide.s32 	%rd204, %r1158, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r298;
	setp.eq.s32 	%p260, %r321, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1159, %r321, %r289;
	mul.wide.s32 	%rd207, %r1159, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r299;
	setp.eq.s32 	%p261, %r322, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1160, %r322, %r289;
	mul.wide.s32 	%rd210, %r1160, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r300;
	setp.eq.s32 	%p262, %r323, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1161, %r323, %r289;
	mul.wide.s32 	%rd213, %r1161, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r301;
	setp.eq.s32 	%p263, %r324, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1162, %r324, %r289;
	mul.wide.s32 	%rd216, %r1162, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r302;
	setp.eq.s32 	%p264, %r325, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1163, %r325, %r289;
	mul.wide.s32 	%rd219, %r1163, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r303;
	setp.eq.s32 	%p265, %r326, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1164, %r326, %r289;
	mul.wide.s32 	%rd222, %r1164, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r304;
	setp.eq.s32 	%p266, %r327, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1165, %r327, %r289;
	mul.wide.s32 	%rd225, %r1165, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r305;
	setp.eq.s32 	%p267, %r328, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1166, %r328, %r289;
	mul.wide.s32 	%rd228, %r1166, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r306;
	setp.eq.s32 	%p268, %r329, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1167, %r329, %r289;
	mul.wide.s32 	%rd231, %r1167, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r307;
	setp.eq.s32 	%p269, %r330, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1168, %r330, %r289;
	mul.wide.s32 	%rd234, %r1168, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r308;
	setp.eq.s32 	%p270, %r331, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1169, %r331, %r289;
	mul.wide.s32 	%rd237, %r1169, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r309;
	setp.eq.s32 	%p271, %r332, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1170, %r332, %r289;
	mul.wide.s32 	%rd240, %r1170, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r310;
	setp.eq.s32 	%p272, %r333, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1171, 0, %r311, %p273;
	add.s32 	%r1172, %r333, %r289;
	mul.wide.s32 	%rd243, %r1172, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1171;
	setp.eq.s32 	%p274, %r334, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1173, %r334, %r289;
	mul.wide.s32 	%rd246, %r1173, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3744, 0;
	st.shared.u32 	[%rd248], %r3744;
	setp.eq.s32 	%p275, %r335, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1176, %r335, %r289;
	mul.wide.s32 	%rd249, %r1176, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3744;
	bar.sync 	0;
	mov.u32 	%r3745, %r3744;
	mov.u32 	%r3746, %r3744;
	mov.u32 	%r3747, %r3744;
	mov.u32 	%r3748, %r3744;
	mov.u32 	%r3749, %r3744;
	mov.u32 	%r3750, %r3744;
	mov.u32 	%r3751, %r3744;
	mov.u32 	%r3752, %r3744;
	mov.u32 	%r3753, %r3744;
	mov.u32 	%r3754, %r3744;
	mov.u32 	%r3755, %r3744;
	mov.u32 	%r3756, %r3744;
	mov.u32 	%r3757, %r3744;
	mov.u32 	%r3758, %r3744;
	mov.u32 	%r3759, %r3744;
	mov.u32 	%r3760, %r3744;
	mov.u32 	%r3761, %r3744;
	mov.u32 	%r3762, %r3744;
	mov.u32 	%r3763, %r3744;
	mov.u32 	%r3764, %r3744;
	mov.u32 	%r3765, %r3744;
	mov.u32 	%r3766, %r3744;
	mov.u32 	%r3767, %r3744;
	@%p91 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4934
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r288;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1177, %rs94;
	mul.wide.s32 	%rd252, %r1177, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3744, [%rd253];
	ld.shared.u32 	%r3745, [%rd16+4];
	ld.shared.u32 	%r3746, [%rd16+8];
	ld.shared.u32 	%r3747, [%rd16+12];
	ld.shared.u32 	%r3748, [%rd16+16];
	ld.shared.u32 	%r3749, [%rd16+20];
	ld.shared.u32 	%r3750, [%rd16+24];
	ld.shared.u32 	%r3751, [%rd16+28];
	ld.shared.u32 	%r3752, [%rd16+32];
	ld.shared.u32 	%r3753, [%rd16+36];
	ld.shared.u32 	%r3754, [%rd16+40];
	ld.shared.u32 	%r3755, [%rd16+44];
	ld.shared.u32 	%r3756, [%rd16+48];
	ld.shared.u32 	%r3757, [%rd16+52];
	ld.shared.u32 	%r3758, [%rd16+56];
	ld.shared.u32 	%r3759, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1178, %rs101;
	mul.wide.s32 	%rd254, %r1178, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3760, [%rd255];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1179, %rs108;
	mul.wide.s32 	%rd256, %r1179, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3761, [%rd257];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1180, %rs115;
	mul.wide.s32 	%rd258, %r1180, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3762, [%rd259];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1181, %rs122;
	mul.wide.s32 	%rd260, %r1181, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3763, [%rd261];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1182, %rs129;
	mul.wide.s32 	%rd262, %r1182, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3764, [%rd263];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1183, %rs136;
	mul.wide.s32 	%rd264, %r1183, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3765, [%rd265];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1184, %rs143;
	mul.wide.s32 	%rd266, %r1184, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3766, [%rd267];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1185, %rs150;
	mul.wide.s32 	%rd268, %r1185, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3767, [%rd269];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3768, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L27570
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3770, %r3770, 1;
	mov.u32 	%r3769, 0;
	mov.u32 	%r3771, %r3769;
	mov.u32 	%r3772, %r3769;
$L__BB0_185:                            // %L27571
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3768, %r3768, -4;
	setp.ne.s32 	%p296, %r3768, -12;
	@%p296 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3768, 12;
	selp.b32 	%r1723, %r3744, 0, %p278;
	setp.eq.s32 	%p279, %r3768, 8;
	selp.b32 	%r1724, %r3748, %r1723, %p279;
	setp.eq.s32 	%p280, %r3768, 4;
	selp.b32 	%r1725, %r3752, %r1724, %p280;
	setp.eq.s32 	%p281, %r3768, 0;
	selp.b32 	%r1726, %r3756, %r1725, %p281;
	setp.eq.s32 	%p282, %r3768, -4;
	selp.b32 	%r1727, %r3760, %r1726, %p282;
	setp.eq.s32 	%p283, %r3768, -8;
	selp.b32 	%r1728, %r3764, %r1727, %p283;
	selp.b32 	%r1729, %r3745, 0, %p278;
	selp.b32 	%r1730, %r3749, %r1729, %p279;
	selp.b32 	%r1731, %r3753, %r1730, %p280;
	selp.b32 	%r1732, %r3757, %r1731, %p281;
	selp.b32 	%r1733, %r3761, %r1732, %p282;
	selp.b32 	%r1734, %r3765, %r1733, %p283;
	selp.b32 	%r1735, %r3746, 0, %p278;
	selp.b32 	%r1736, %r3750, %r1735, %p279;
	selp.b32 	%r1737, %r3754, %r1736, %p280;
	selp.b32 	%r1738, %r3758, %r1737, %p281;
	selp.b32 	%r1739, %r3762, %r1738, %p282;
	selp.b32 	%r1740, %r3766, %r1739, %p283;
	selp.b32 	%r1741, %r3747, 0, %p278;
	selp.b32 	%r1742, %r3751, %r1741, %p279;
	selp.b32 	%r1743, %r3755, %r1742, %p280;
	selp.b32 	%r1744, %r3759, %r1743, %p281;
	selp.b32 	%r1745, %r3763, %r1744, %p282;
	selp.b32 	%r1746, %r3767, %r1745, %p283;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1192, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1203, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1191, %r1728, -2004318072;
	mov.u32 	%r1328, 983055;
	// begin inline asm
	lop3.b32 %r1189, %r1328, %r1191, %r1192, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1193, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1192, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	mov.u32 	%r1339, 15728880;
	// begin inline asm
	lop3.b32 %r1200, %r1339, %r1191, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1204, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1203, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1237, %r1734, -2004318072;
	// begin inline asm
	lop3.b32 %r1235, %r1328, %r1237, %r1238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1238, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r1339, %r1237, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1249, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	mov.b32 %r1284, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1283, %r1740, -2004318072;
	// begin inline asm
	lop3.b32 %r1281, %r1328, %r1283, %r1284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1285, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1286, %r1284, %r1285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1289, %r1281, %r1286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1292, %r1339, %r1283, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1297, %r1295, %r1296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1300, %r1292, %r1297;
	// end inline asm
	// begin inline asm
	mov.b32 %r1330, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1329, %r1746, -2004318072;
	// begin inline asm
	lop3.b32 %r1327, %r1328, %r1329, %r1330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1331, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1332, %r1330, %r1331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1335, %r1327, %r1332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1338, %r1339, %r1329, %r1341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1343, %r1341, %r1342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1346, %r1338, %r1343;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1197;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1208;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1374, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1243;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1377, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1254;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1380, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1289;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1383, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1300;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1386, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1335;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1389, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1346;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1392, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1658, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1458, %r1455}, {%r424, %r427}, {%r1371}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r424, %r427}, {%r1374}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r424, %r427}, {%r1377}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1485, %r1482}, {%r424, %r427}, {%r1380}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1494, %r1491}, {%r424, %r427}, {%r1383}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1503, %r1500}, {%r424, %r427}, {%r1386}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r424, %r427}, {%r1389}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r424, %r427}, {%r1392}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1451, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r1451, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r476, %r1458, %r1453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r476, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r476, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1478, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r1478, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r476, %r1485, %r1480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1487, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r1487, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r476, %r1494, %r1489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1496, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r1496, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1501, %r476, %r1503, %r1498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r476, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r476, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r479, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r476, %r1455, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r479, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r476, %r1464, %r1530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1537, %r479, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r476, %r1473, %r1537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1544, %r479, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r476, %r1482, %r1544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1551, %r479, %r1494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r476, %r1491, %r1551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r479, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r476, %r1500, %r1558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r479, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r476, %r1509, %r1565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r479, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r476, %r1518, %r1572;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1660, %r1661}, {%r520, %r526, %r523, %r529}, {%r1456, %r1526}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1668, %r1669}, {%r520, %r526, %r523, %r529}, {%r1465, %r1533}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1676, %r1677}, {%r520, %r526, %r523, %r529}, {%r1474, %r1540}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1684, %r1685}, {%r520, %r526, %r523, %r529}, {%r1483, %r1547}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1693}, {%r520, %r526, %r523, %r529}, {%r1492, %r1554}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1700, %r1701}, {%r520, %r526, %r523, %r529}, {%r1501, %r1561}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1708, %r1709}, {%r520, %r526, %r523, %r529}, {%r1510, %r1568}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1716, %r1717}, {%r520, %r526, %r523, %r529}, {%r1519, %r1575}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1659, %r1660, %r1661, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1663, %r1660, %r1661, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1667, %r1668, %r1669, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1671, %r1668, %r1669, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1675, %r1676, %r1677, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1679, %r1676, %r1677, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1683, %r1684, %r1685, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1687, %r1684, %r1685, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1691, %r1692, %r1693, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1695, %r1692, %r1693, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1699, %r1700, %r1701, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1703, %r1700, %r1701, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1707, %r1708, %r1709, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1711, %r1708, %r1709, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1715, %r1716, %r1717, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1719, %r1716, %r1717, %r1025;
	// end inline asm
	st.shared.u32 	[%rd7], %r1659;
	st.shared.u32 	[%rd8], %r1663;
	st.shared.u32 	[%rd9], %r1667;
	st.shared.u32 	[%rd10], %r1671;
	st.shared.u32 	[%rd17], %r1675;
	st.shared.u32 	[%rd18], %r1679;
	st.shared.u32 	[%rd19], %r1683;
	st.shared.u32 	[%rd20], %r1687;
	st.shared.u32 	[%rd21], %r1691;
	st.shared.u32 	[%rd22], %r1695;
	st.shared.u32 	[%rd23], %r1699;
	st.shared.u32 	[%rd24], %r1703;
	st.shared.u32 	[%rd25], %r1707;
	st.shared.u32 	[%rd26], %r1711;
	st.shared.u32 	[%rd27], %r1715;
	st.shared.u32 	[%rd28], %r1719;
	@%p277 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass8545
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1659;
	st.shared.u32 	[%rd8], %r1663;
	st.shared.u32 	[%rd9], %r1667;
	st.shared.u32 	[%rd10], %r1671;
	st.shared.u32 	[%rd17], %r1675;
	st.shared.u32 	[%rd18], %r1679;
	st.shared.u32 	[%rd19], %r1683;
	st.shared.u32 	[%rd20], %r1687;
	st.shared.u32 	[%rd21], %r1691;
	st.shared.u32 	[%rd22], %r1695;
	st.shared.u32 	[%rd23], %r1699;
	st.shared.u32 	[%rd24], %r1703;
	st.shared.u32 	[%rd25], %r1707;
	st.shared.u32 	[%rd26], %r1711;
	st.shared.u32 	[%rd27], %r1715;
	st.shared.u32 	[%rd28], %r1719;
$L__BB0_178:                            // %L22306
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3773, %r1658;
	mov.u32 	%r3774, %r1658;
	mov.u32 	%r3775, %r1658;
	mov.u32 	%r3776, %r1658;
	@%p277 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass10640
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3773, [%rd11];
	ld.shared.u32 	%r3774, [%rd12];
	ld.shared.u32 	%r3775, [%rd13];
	ld.shared.u32 	%r3776, [%rd14];
$L__BB0_179:                            // %L23381
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1783, %r1780}, {%r538, %r541}, {%r3773}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1792, %r1789}, {%r538, %r541}, {%r3774}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1801, %r1798}, {%r538, %r541}, {%r3775}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1810, %r1807}, {%r538, %r541}, {%r3776}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1776, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1776, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r590, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1785, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r1785, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r590, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1794, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r1794, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r590, %r1801, %r1796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1803, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1803, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r590, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r593, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r590, %r1780, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r593, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r590, %r1789, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r593, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r590, %r1798, %r1826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r593, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r590, %r1807, %r1833;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1881, %r1884}, {%r634, %r640, %r637, %r643}, {%r1781, %r1815}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1900, %r1903}, {%r634, %r640, %r637, %r643}, {%r1790, %r1822}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1888, %r1892}, {%r634, %r640, %r637, %r643}, {%r1799, %r1829}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1907, %r1911}, {%r634, %r640, %r637, %r643}, {%r1808, %r1836}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r1881, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r1884, %r1884, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r1888, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r1892, %r1892, %r1887;
	// end inline asm
	mov.u32 	%r1915, 559227221;
	// begin inline asm
	fma.rn.f16x2 %r1895, %r1915, %r1891, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1900, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r1903, %r1903, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r1907, %r1907, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r1911, %r1911, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1915, %r1910, %r3771;
	// end inline asm
	mov.u32 	%r3777, %r1658;
	mov.u32 	%r3778, %r1658;
	mov.u32 	%r3779, %r1658;
	mov.u32 	%r3780, %r1658;
	@%p277 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass11245
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3777, [%rd29];
	ld.shared.u32 	%r3778, [%rd30];
	ld.shared.u32 	%r3779, [%rd31];
	ld.shared.u32 	%r3780, [%rd32];
$L__BB0_180:                            // %L24600
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1954, %r1951}, {%r538, %r541}, {%r3777}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1963, %r1960}, {%r538, %r541}, {%r3778}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1972, %r1969}, {%r538, %r541}, {%r3779}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1981, %r1978}, {%r538, %r541}, {%r3780}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1947, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r590, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1956, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r1956, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r590, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1965, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1965, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r590, %r1972, %r1967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1974, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r1974, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r590, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r593, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r590, %r1951, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r593, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r590, %r1960, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r593, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r590, %r1969, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r593, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r590, %r1978, %r2004;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2052, %r2055}, {%r634, %r640, %r637, %r643}, {%r1952, %r1986}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2074}, {%r634, %r640, %r637, %r643}, {%r1961, %r1993}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2059, %r2063}, {%r634, %r640, %r637, %r643}, {%r1970, %r2000}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2082}, {%r634, %r640, %r637, %r643}, {%r1979, %r2007}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2052, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r2055, %r2055, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r2059, %r2059, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r2063, %r2063, %r2058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r1915, %r2062, %r1895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r2071, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r2074, %r2074, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r2078, %r2078, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r2082, %r2082, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r1915, %r2081, %r1914;
	// end inline asm
	mov.u32 	%r3781, %r1658;
	mov.u32 	%r3782, %r1658;
	mov.u32 	%r3783, %r1658;
	mov.u32 	%r3784, %r1658;
	@%p277 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %pass11850
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3781, [%rd33];
	ld.shared.u32 	%r3782, [%rd34];
	ld.shared.u32 	%r3783, [%rd35];
	ld.shared.u32 	%r3784, [%rd36];
$L__BB0_181:                            // %L25819
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2125, %r2122}, {%r538, %r541}, {%r3781}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2134, %r2131}, {%r538, %r541}, {%r3782}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2143, %r2140}, {%r538, %r541}, {%r3783}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2152, %r2149}, {%r538, %r541}, {%r3784}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2118, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2118, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r590, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2127, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r2127, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r590, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2136, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r2136, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r590, %r2143, %r2138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2145, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r2145, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r590, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r593, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r590, %r2122, %r2154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r593, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r590, %r2131, %r2161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r593, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r590, %r2140, %r2168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r593, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r590, %r2149, %r2175;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2223, %r2226}, {%r634, %r640, %r637, %r643}, {%r2123, %r2157}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2242, %r2245}, {%r634, %r640, %r637, %r643}, {%r2132, %r2164}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2230, %r2234}, {%r634, %r640, %r637, %r643}, {%r2141, %r2171}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2249, %r2253}, {%r634, %r640, %r637, %r643}, {%r2150, %r2178}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2223, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r2226, %r2226, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r2230, %r2230, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r2234, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2237, %r1915, %r2233, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r2242, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r2245, %r2245, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r2249, %r2249, %r2244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r2253, %r2253, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r1915, %r2252, %r2085;
	// end inline asm
	mov.u32 	%r3785, %r1658;
	mov.u32 	%r3786, %r1658;
	mov.u32 	%r3787, %r1658;
	mov.u32 	%r3788, %r1658;
	@%p277 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_182;
$L__BB0_255:                            // %pass12455
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3785, [%rd37];
	ld.shared.u32 	%r3786, [%rd38];
	ld.shared.u32 	%r3787, [%rd39];
	ld.shared.u32 	%r3788, [%rd40];
$L__BB0_182:                            // %L27038
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2296, %r2293}, {%r538, %r541}, {%r3785}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2305, %r2302}, {%r538, %r541}, {%r3786}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2314, %r2311}, {%r538, %r541}, {%r3787}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2323, %r2320}, {%r538, %r541}, {%r3788}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2289, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r2289, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r590, %r2296, %r2291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2298, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r2298, %r2302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r590, %r2305, %r2300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2307, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2309, %r2307, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2312, %r590, %r2314, %r2309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2316, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2318, %r2316, %r2320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2321, %r590, %r2323, %r2318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2325, %r593, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2328, %r590, %r2293, %r2325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2332, %r593, %r2305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2335, %r590, %r2302, %r2332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2339, %r593, %r2314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2342, %r590, %r2311, %r2339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2346, %r593, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2349, %r590, %r2320, %r2346;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2394, %r2397}, {%r634, %r640, %r637, %r643}, {%r2294, %r2328}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2413, %r2416}, {%r634, %r640, %r637, %r643}, {%r2303, %r2335}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2401, %r2405}, {%r634, %r640, %r637, %r643}, {%r2312, %r2342}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2420, %r2424}, {%r634, %r640, %r637, %r643}, {%r2321, %r2349}, {%r1658, %r1658};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2393, %r2394, %r2394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2396, %r2397, %r2397, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2400, %r2401, %r2401, %r2396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2404, %r2405, %r2405, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3772, %r1915, %r2404, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2412, %r2413, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2415, %r2416, %r2416, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2419, %r2420, %r2420, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r2424, %r2424, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3771, %r1915, %r2423, %r2256;
	// end inline asm
	add.s32 	%r3769, %r3769, 4;
	setp.eq.s32 	%p288, %r3769, 12;
	@%p288 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_185;
$L__BB0_183:                            // %pass12918
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_184;
// %bb.256:                             // %pass12928
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2431, %r3770, 589824;
	add.s32 	%r2432, %r119, %r2431;
	cvt.s64.s32 	%rd270, %r2432;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p290, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p291, %rd276, %rd271;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd277, -1, 0, %p292;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3772;
	add.s32 	%r2433, %r120, %r2431;
	cvt.s64.s32 	%rd283, %r2433;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p293, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p294, %rd289, %rd284;
	and.pred  	%p295, %p293, %p294;
	selp.s64 	%rd290, -1, 0, %p295;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3771;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L27596.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3793, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L41234
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3770, %r3770, 1;
	mov.u32 	%r3769, 0;
	mov.u32 	%r3771, %r3769;
	mov.u32 	%r3772, %r3769;
$L__BB0_195:                            // %L41235
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3793, %r3793, -4;
	setp.ne.s32 	%p316, %r3793, -12;
	@%p316 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L27596
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p298, %r3793, 12;
	selp.b32 	%r2972, %r3744, 0, %p298;
	setp.eq.s32 	%p299, %r3793, 8;
	selp.b32 	%r2973, %r3748, %r2972, %p299;
	setp.eq.s32 	%p300, %r3793, 4;
	selp.b32 	%r2974, %r3752, %r2973, %p300;
	setp.eq.s32 	%p301, %r3793, 0;
	selp.b32 	%r2975, %r3756, %r2974, %p301;
	setp.eq.s32 	%p302, %r3793, -4;
	selp.b32 	%r2976, %r3760, %r2975, %p302;
	setp.eq.s32 	%p303, %r3793, -8;
	selp.b32 	%r2977, %r3764, %r2976, %p303;
	selp.b32 	%r2978, %r3745, 0, %p298;
	selp.b32 	%r2979, %r3749, %r2978, %p299;
	selp.b32 	%r2980, %r3753, %r2979, %p300;
	selp.b32 	%r2981, %r3757, %r2980, %p301;
	selp.b32 	%r2982, %r3761, %r2981, %p302;
	selp.b32 	%r2983, %r3765, %r2982, %p303;
	selp.b32 	%r2984, %r3746, 0, %p298;
	selp.b32 	%r2985, %r3750, %r2984, %p299;
	selp.b32 	%r2986, %r3754, %r2985, %p300;
	selp.b32 	%r2987, %r3758, %r2986, %p301;
	selp.b32 	%r2988, %r3762, %r2987, %p302;
	selp.b32 	%r2989, %r3766, %r2988, %p303;
	selp.b32 	%r2990, %r3747, 0, %p298;
	selp.b32 	%r2991, %r3751, %r2990, %p299;
	selp.b32 	%r2992, %r3755, %r2991, %p300;
	selp.b32 	%r2993, %r3759, %r2992, %p301;
	selp.b32 	%r2994, %r3763, %r2993, %p302;
	selp.b32 	%r2995, %r3767, %r2994, %p303;
	// begin inline asm
	mov.b32 %r2463, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2996, %r2977, 8;
	xor.b32  	%r2473, %r2996, 8947848;
	// begin inline asm
	lop3.b32 %r2460, %r1328, %r2473, %r2463, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2465, %r2463, %r2464;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2468, %r2460, %r2465;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2471, %r1339, %r2473, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2474, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2997, %r2983, 8;
	xor.b32  	%r2519, %r2997, 8947848;
	// begin inline asm
	lop3.b32 %r2506, %r1328, %r2519, %r2509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2511, %r2509, %r2510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2514, %r2506, %r2511;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2517, %r1339, %r2519, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2520, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2998, %r2989, 8;
	xor.b32  	%r2565, %r2998, 8947848;
	// begin inline asm
	lop3.b32 %r2552, %r1328, %r2565, %r2555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2556, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2557, %r2555, %r2556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2560, %r2552, %r2557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2563, %r1339, %r2565, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2568, %r2566, %r2567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2571, %r2563, %r2568;
	// end inline asm
	// begin inline asm
	mov.b32 %r2601, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2999, %r2995, 8;
	xor.b32  	%r2611, %r2999, 8947848;
	// begin inline asm
	lop3.b32 %r2598, %r1328, %r2611, %r2601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2602, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2603, %r2601, %r2602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2606, %r2598, %r2603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2609, %r1339, %r2611, %r2612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2613, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2614, %r2612, %r2613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2617, %r2609, %r2614;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2468;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2620, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2479;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2623, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2514;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2626, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2525;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2629, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2560;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2632, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2571;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2635, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2606;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2638, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2617;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2641, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2907, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r424, %r427}, {%r2620}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r424, %r427}, {%r2623}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2725, %r2722}, {%r424, %r427}, {%r2626}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2734, %r2731}, {%r424, %r427}, {%r2629}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2743, %r2740}, {%r424, %r427}, {%r2632}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2752, %r2749}, {%r424, %r427}, {%r2635}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2761, %r2758}, {%r424, %r427}, {%r2638}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2770, %r2767}, {%r424, %r427}, {%r2641}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r476, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r476, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r476, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2727, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r2727, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r476, %r2734, %r2729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2736, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2736, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r476, %r2743, %r2738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2745, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r2745, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r476, %r2752, %r2747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r476, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r476, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r479, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r476, %r2704, %r2772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2779, %r479, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2782, %r476, %r2713, %r2779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2786, %r479, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r476, %r2722, %r2786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2793, %r479, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r476, %r2731, %r2793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r479, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r476, %r2740, %r2800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r479, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r476, %r2749, %r2807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2814, %r479, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r476, %r2758, %r2814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2821, %r479, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r476, %r2767, %r2821;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2909, %r2910}, {%r520, %r526, %r523, %r529}, {%r2705, %r2775}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2918}, {%r520, %r526, %r523, %r529}, {%r2714, %r2782}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2925, %r2926}, {%r520, %r526, %r523, %r529}, {%r2723, %r2789}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2933, %r2934}, {%r520, %r526, %r523, %r529}, {%r2732, %r2796}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2941, %r2942}, {%r520, %r526, %r523, %r529}, {%r2741, %r2803}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2949, %r2950}, {%r520, %r526, %r523, %r529}, {%r2750, %r2810}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2957, %r2958}, {%r520, %r526, %r523, %r529}, {%r2759, %r2817}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2965, %r2966}, {%r520, %r526, %r523, %r529}, {%r2768, %r2824}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2908, %r2909, %r2910, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2912, %r2909, %r2910, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2916, %r2917, %r2918, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2920, %r2917, %r2918, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2924, %r2925, %r2926, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2928, %r2925, %r2926, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2932, %r2933, %r2934, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2936, %r2933, %r2934, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2940, %r2941, %r2942, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2944, %r2941, %r2942, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2948, %r2949, %r2950, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2952, %r2949, %r2950, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2956, %r2957, %r2958, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2960, %r2957, %r2958, %r1025;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2964, %r2965, %r2966, %r1021;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2968, %r2965, %r2966, %r1025;
	// end inline asm
	st.shared.u32 	[%rd7], %r2908;
	st.shared.u32 	[%rd8], %r2912;
	st.shared.u32 	[%rd9], %r2916;
	st.shared.u32 	[%rd10], %r2920;
	st.shared.u32 	[%rd17], %r2924;
	st.shared.u32 	[%rd18], %r2928;
	st.shared.u32 	[%rd19], %r2932;
	st.shared.u32 	[%rd20], %r2936;
	st.shared.u32 	[%rd21], %r2940;
	st.shared.u32 	[%rd22], %r2944;
	st.shared.u32 	[%rd23], %r2948;
	st.shared.u32 	[%rd24], %r2952;
	st.shared.u32 	[%rd25], %r2956;
	st.shared.u32 	[%rd26], %r2960;
	st.shared.u32 	[%rd27], %r2964;
	st.shared.u32 	[%rd28], %r2968;
	@%p277 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass15341
                                        //   in Loop: Header=BB0_187 Depth=2
	st.shared.u32 	[%rd7], %r2908;
	st.shared.u32 	[%rd8], %r2912;
	st.shared.u32 	[%rd9], %r2916;
	st.shared.u32 	[%rd10], %r2920;
	st.shared.u32 	[%rd17], %r2924;
	st.shared.u32 	[%rd18], %r2928;
	st.shared.u32 	[%rd19], %r2932;
	st.shared.u32 	[%rd20], %r2936;
	st.shared.u32 	[%rd21], %r2940;
	st.shared.u32 	[%rd22], %r2944;
	st.shared.u32 	[%rd23], %r2948;
	st.shared.u32 	[%rd24], %r2952;
	st.shared.u32 	[%rd25], %r2956;
	st.shared.u32 	[%rd26], %r2960;
	st.shared.u32 	[%rd27], %r2964;
	st.shared.u32 	[%rd28], %r2968;
$L__BB0_188:                            // %L35970
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	mov.u32 	%r3798, %r2907;
	mov.u32 	%r3799, %r2907;
	mov.u32 	%r3800, %r2907;
	mov.u32 	%r3801, %r2907;
	@%p277 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass17436
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3801, [%rd11];
	ld.shared.u32 	%r3800, [%rd12];
	ld.shared.u32 	%r3799, [%rd13];
	ld.shared.u32 	%r3798, [%rd14];
$L__BB0_189:                            // %L37045
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3036, %r3033}, {%r538, %r541}, {%r3801}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3045, %r3042}, {%r538, %r541}, {%r3800}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3054, %r3051}, {%r538, %r541}, {%r3799}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3063, %r3060}, {%r538, %r541}, {%r3798}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3029, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3031, %r3029, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r590, %r3036, %r3031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3038, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3040, %r3038, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r590, %r3045, %r3040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3047, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r3047, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r590, %r3054, %r3049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3056, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3058, %r3056, %r3060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r590, %r3063, %r3058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3065, %r593, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r590, %r3033, %r3065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r593, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r590, %r3042, %r3072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3079, %r593, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r590, %r3051, %r3079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r593, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r590, %r3060, %r3086;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3134, %r3137}, {%r634, %r640, %r637, %r643}, {%r3034, %r3068}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3153, %r3156}, {%r634, %r640, %r637, %r643}, {%r3043, %r3075}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3141, %r3145}, {%r634, %r640, %r637, %r643}, {%r3052, %r3082}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3160, %r3164}, {%r634, %r640, %r637, %r643}, {%r3061, %r3089}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r3134, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r3137, %r3137, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r3141, %r3141, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r3145, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r1915, %r3144, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r3153, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3156, %r3156, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r3160, %r3160, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3164, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r1915, %r3163, %r3771;
	// end inline asm
	mov.u32 	%r3802, %r2907;
	mov.u32 	%r3803, %r2907;
	mov.u32 	%r3804, %r2907;
	mov.u32 	%r3805, %r2907;
	@%p277 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass18041
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3805, [%rd29];
	ld.shared.u32 	%r3804, [%rd30];
	ld.shared.u32 	%r3803, [%rd31];
	ld.shared.u32 	%r3802, [%rd32];
$L__BB0_190:                            // %L38264
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3207, %r3204}, {%r538, %r541}, {%r3805}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3216, %r3213}, {%r538, %r541}, {%r3804}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3225, %r3222}, {%r538, %r541}, {%r3803}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3234, %r3231}, {%r538, %r541}, {%r3802}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3200, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3202, %r3200, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r590, %r3207, %r3202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3211, %r3209, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r590, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3220, %r3218, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r590, %r3225, %r3220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3227, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r3227, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r590, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r593, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r590, %r3204, %r3236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r593, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r590, %r3213, %r3243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3250, %r593, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r590, %r3222, %r3250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3257, %r593, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r590, %r3231, %r3257;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3305, %r3308}, {%r634, %r640, %r637, %r643}, {%r3205, %r3239}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3324, %r3327}, {%r634, %r640, %r637, %r643}, {%r3214, %r3246}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3316}, {%r634, %r640, %r637, %r643}, {%r3223, %r3253}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3331, %r3335}, {%r634, %r640, %r637, %r643}, {%r3232, %r3260}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r3305, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r3308, %r3308, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r3312, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r3316, %r3316, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r1915, %r3315, %r3148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3323, %r3324, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3326, %r3327, %r3327, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3330, %r3331, %r3331, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r3335, %r3335, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r1915, %r3334, %r3167;
	// end inline asm
	mov.u32 	%r3806, %r2907;
	mov.u32 	%r3807, %r2907;
	mov.u32 	%r3808, %r2907;
	mov.u32 	%r3809, %r2907;
	@%p277 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_191;
$L__BB0_260:                            // %pass18646
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3809, [%rd33];
	ld.shared.u32 	%r3808, [%rd34];
	ld.shared.u32 	%r3807, [%rd35];
	ld.shared.u32 	%r3806, [%rd36];
$L__BB0_191:                            // %L39483
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3378, %r3375}, {%r538, %r541}, {%r3809}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3387, %r3384}, {%r538, %r541}, {%r3808}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3396, %r3393}, {%r538, %r541}, {%r3807}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3405, %r3402}, {%r538, %r541}, {%r3806}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3371, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r3371, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r590, %r3378, %r3373;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3380, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3382, %r3380, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r590, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3389, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3391, %r3389, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r590, %r3396, %r3391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3398, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r3398, %r3402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r590, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r593, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r590, %r3375, %r3407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3414, %r593, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r590, %r3384, %r3414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3421, %r593, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3424, %r590, %r3393, %r3421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3428, %r593, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r590, %r3402, %r3428;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3476, %r3479}, {%r634, %r640, %r637, %r643}, {%r3376, %r3410}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3495, %r3498}, {%r634, %r640, %r637, %r643}, {%r3385, %r3417}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3483, %r3487}, {%r634, %r640, %r637, %r643}, {%r3394, %r3424}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3502, %r3506}, {%r634, %r640, %r637, %r643}, {%r3403, %r3431}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3476, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r3479, %r3479, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r3483, %r3483, %r3478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r3487, %r3487, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r1915, %r3486, %r3319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3494, %r3495, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r3498, %r3498, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r3502, %r3502, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r3506, %r3506, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r1915, %r3505, %r3338;
	// end inline asm
	mov.u32 	%r3810, %r2907;
	mov.u32 	%r3811, %r2907;
	mov.u32 	%r3812, %r2907;
	mov.u32 	%r3813, %r2907;
	@%p277 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_192;
$L__BB0_261:                            // %pass19251
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3813, [%rd37];
	ld.shared.u32 	%r3812, [%rd38];
	ld.shared.u32 	%r3811, [%rd39];
	ld.shared.u32 	%r3810, [%rd40];
$L__BB0_192:                            // %L40702
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3549, %r3546}, {%r538, %r541}, {%r3813}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3558, %r3555}, {%r538, %r541}, {%r3812}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3567, %r3564}, {%r538, %r541}, {%r3811}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3576, %r3573}, {%r538, %r541}, {%r3810}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3542, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3544, %r3542, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r590, %r3549, %r3544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3551, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3553, %r3551, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r590, %r3558, %r3553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3560, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3562, %r3560, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r590, %r3567, %r3562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3569, %r593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r3569, %r3573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r590, %r3576, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r593, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r590, %r3546, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r593, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r590, %r3555, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r593, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r590, %r3564, %r3592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3599, %r593, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3602, %r590, %r3573, %r3599;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3647, %r3650}, {%r634, %r640, %r637, %r643}, {%r3547, %r3581}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3666, %r3669}, {%r634, %r640, %r637, %r643}, {%r3556, %r3588}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3654, %r3658}, {%r634, %r640, %r637, %r643}, {%r3565, %r3595}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3673, %r3677}, {%r634, %r640, %r637, %r643}, {%r3574, %r3602}, {%r2907, %r2907};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3646, %r3647, %r3647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3649, %r3650, %r3650, %r3646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3653, %r3654, %r3654, %r3649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3657, %r3658, %r3658, %r3653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3772, %r1915, %r3657, %r3490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3665, %r3666, %r3666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3668, %r3669, %r3669, %r3665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3672, %r3673, %r3673, %r3668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r3677, %r3677, %r3672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3771, %r1915, %r3676, %r3509;
	// end inline asm
	add.s32 	%r3769, %r3769, 4;
	setp.eq.s32 	%p308, %r3769, 12;
	@%p308 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_195;
$L__BB0_193:                            // %pass19714
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_194;
// %bb.262:                             // %pass19724
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3684, %r3770, 589824;
	add.s32 	%r3685, %r119, %r3684;
	cvt.s64.s32 	%rd296, %r3685;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p310, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p311, %rd302, %rd297;
	and.pred  	%p312, %p310, %p311;
	selp.s64 	%rd303, -1, 0, %p312;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3772;
	add.s32 	%r3686, %r120, %r3684;
	cvt.s64.s32 	%rd309, %r3686;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p313, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p314, %rd315, %rd310;
	and.pred  	%p315, %p313, %p314;
	selp.s64 	%rd316, -1, 0, %p315;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3771;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L41270
	mov.u32 	%r3688, 0;
	st.global.u32 	[%rd6], %r3688;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3712, 5;
	st.global.u32 	[%rd6], %r3712;
	mov.u64 	%rd368, exception3856;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3711, 5;
	st.global.u32 	[%rd6], %r3711;
	mov.u64 	%rd366, exception3856;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3710, 5;
	st.global.u32 	[%rd6], %r3710;
	mov.u64 	%rd364, exception3856;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3709, 5;
	st.global.u32 	[%rd6], %r3709;
	mov.u64 	%rd362, exception3856;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3708, 5;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3707, 5;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3714, 2;
	st.global.u32 	[%rd6], %r3714;
	mov.u64 	%rd372, exception3856;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3713, 3;
	st.global.u32 	[%rd6], %r3713;
	mov.u64 	%rd370, exception3856;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r654, [retval0+0];
	} // callseq 61
	mov.u32 	%r656, 4;
	st.global.u32 	[%rd6], %r656;
	mov.u64 	%rd55, exception3856;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r392;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
