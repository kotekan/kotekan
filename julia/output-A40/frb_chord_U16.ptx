// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2169[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12180[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<317>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3747>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<353>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r357, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r366, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r366, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r358, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r367, %r2, %r3;
	mad.lo.s32 	%r368, %r4, 768, %r367;
	mul.wide.u32 	%rd33, %r368, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r369, 1;
	st.global.u32 	[%rd6], %r369;
	setp.gt.u32 	%p4, %r358, 2047;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r359, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r359, %r358;
	setp.gt.s32 	%p6, %r359, 4095;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r359, %r358;
	mad.lo.s32 	%r370, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r371, %r370, %r370, 4;
	setp.gt.u32 	%p8, %r371, 89478484;
	setp.gt.u32 	%p9, %r360, 511;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r361, %r360;
	setp.lt.s32 	%p12, %r361, 1024;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r372, %r361, %r360;
	mul.hi.s32 	%r373, %r5, 1717986919;
	shr.u32 	%r374, %r373, 31;
	shr.s32 	%r375, %r373, 4;
	add.s32 	%r376, %r375, %r374;
	setp.eq.s32 	%p14, %r372, %r376;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r362, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L263
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r363, %r362;
	setp.gt.s32 	%p17, %r363, 768;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L273
	ld.param.u32 	%r364, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r363, %r362;
	and.b32  	%r377, %r6, 15;
	setp.ne.s32 	%p19, %r377, 0;
	setp.lt.s32 	%p20, %r364, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L279
	ld.param.u32 	%r365, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r365, %r364;
	setp.gt.s32 	%p23, %r365, 768;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L289
	sub.s32 	%r378, %r365, %r364;
	and.b32  	%r379, %r378, 15;
	setp.eq.s32 	%p25, %r379, 0;
	setp.eq.s32 	%p26, %r378, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass149
	and.b32  	%r221, %r3, 3;
	shr.u32 	%r222, %r3, 2;
	mul.lo.s32 	%r380, %r221, %r222;
	and.b32  	%r381, %r380, 7;
	cvt.rn.f32.s32 	%f201, %r381;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p316, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_210;
// %bb.199:
	@%p316 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r224, %f785;
	and.b32  	%r382, %r224, 8388607;
	or.b32  	%r3742, %r382, 1065353216;
	mov.b32 	%f780, %r3742;
	add.s32 	%r383, %r224, -1073741824;
	and.b32  	%r3743, %r383, -8388608;
	setp.eq.s32 	%p35, %r3743, 0;
	@%p35 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3743, 192937984;
	add.s32 	%r385, %r3742, %r384;
	mov.b32 	%f213, %r385;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3743, %r3743, %r384;
	mov.b32 	%r3742, %f780;
	setp.ne.s32 	%p36, %r3743, 0;
	setp.ne.s32 	%p37, %r3742, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r224, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r223, %f172;
	setp.lt.u32 	%p30, %r223, 1073741824;
	@%p30 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p31, %r223, -2147483647;
	@%p31 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r386, %f169;
	and.b32  	%r231, %r386, -2147483648;
	@%p40 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r387, %f781;
	or.b32  	%r388, %r231, %r387;
	mov.b32 	%f781, %r388;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r234, %r3, 1;
	and.b32  	%r235, %r234, 6;
	or.b32  	%r236, %r235, 1;
	setp.eq.s32 	%p48, %r235, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3640, %r235, %r222;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L493
	cvt.u16.u32 	%rs1, %r3640;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r404, %r8, 8388607;
	or.b32  	%r3644, %r404, 1065353216;
	mov.b32 	%f732, %r3644;
	add.s32 	%r405, %r8, -1073741824;
	and.b32  	%r3645, %r405, -8388608;
	setp.eq.s32 	%p56, %r3645, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3645, 192937984;
	add.s32 	%r407, %r3644, %r406;
	mov.b32 	%f267, %r407;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3645, %r3645, %r406;
	mov.b32 	%r3644, %f732;
	setp.ne.s32 	%p57, %r3645, 0;
	setp.ne.s32 	%p58, %r3644, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r408, %f1;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f733;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f733, %r411;
$L__BB0_28:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r412, %f277;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f278, %r414;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r415, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p64, %r416, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p65, %r417, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p66, %r419, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L527
	setp.gt.u32 	%p69, %r236, 5;
	mul.lo.s32 	%r3641, %r236, %r222;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L531
	mul.hi.u32 	%r421, %r3641, -1431655765;
	shr.u32 	%r422, %r421, 5;
	mul.lo.s32 	%r423, %r422, 48;
	sub.s32 	%r424, %r3641, %r423;
	cvt.rn.f32.s32 	%f308, %r424;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r425, %r16, 8388607;
	or.b32  	%r3646, %r425, 1065353216;
	mov.b32 	%f738, %r3646;
	add.s32 	%r426, %r16, -1073741824;
	and.b32  	%r3647, %r426, -8388608;
	setp.eq.s32 	%p77, %r3647, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r3647, 192937984;
	add.s32 	%r428, %r3646, %r427;
	mov.b32 	%f320, %r428;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3647, %r3647, %r427;
	mov.b32 	%r3646, %f738;
	setp.ne.s32 	%p78, %r3647, 0;
	setp.ne.s32 	%p79, %r3646, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r429, %f22;
	and.b32  	%r430, %r429, -2147483648;
	mov.b32 	%r431, %f739;
	or.b32  	%r432, %r430, %r431;
	mov.b32 	%f739, %r432;
$L__BB0_44:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r433, %f330;
	and.b32  	%r434, %r433, -2147483648;
	or.b32  	%r435, %r434, 1056964608;
	mov.b32 	%f331, %r435;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r436, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r437, %r436, 1;
	setp.eq.b32 	%p85, %r437, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r438, %r436, 2;
	setp.eq.s32 	%p86, %r438, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r439, %r436, 1;
	and.b32  	%r440, %r439, 2;
	setp.eq.s32 	%p87, %r440, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L565
	setp.gt.u32 	%p91, %r3, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L603
	cvt.u16.u32 	%rs8, %r3640;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r448, %r26, 8388607;
	or.b32  	%r3648, %r448, 1065353216;
	mov.b32 	%f744, %r3648;
	add.s32 	%r449, %r26, -1073741824;
	and.b32  	%r3649, %r449, -8388608;
	setp.eq.s32 	%p99, %r3649, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r3649, 192937984;
	add.s32 	%r451, %r3648, %r450;
	mov.b32 	%f373, %r451;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3649, %r3649, %r450;
	mov.b32 	%r3648, %f744;
	setp.ne.s32 	%p100, %r3649, 0;
	setp.ne.s32 	%p101, %r3648, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r452, %f43;
	and.b32  	%r453, %r452, -2147483648;
	mov.b32 	%r454, %f745;
	or.b32  	%r455, %r453, %r454;
	mov.b32 	%f745, %r455;
$L__BB0_60:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r456, %f383;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f384, %r458;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r459, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p107, %r460, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p108, %r461, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	setp.eq.s32 	%p109, %r463, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L637
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L645
	mul.hi.u32 	%r465, %r3641, -1431655765;
	shr.u32 	%r466, %r465, 2;
	mul.lo.s32 	%r467, %r466, 6;
	sub.s32 	%r468, %r3641, %r467;
	cvt.rn.f32.s32 	%f414, %r468;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r469, %r34, 8388607;
	or.b32  	%r3650, %r469, 1065353216;
	mov.b32 	%f750, %r3650;
	add.s32 	%r470, %r34, -1073741824;
	and.b32  	%r3651, %r470, -8388608;
	setp.eq.s32 	%p121, %r3651, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r471, %r3651, 192937984;
	add.s32 	%r472, %r3650, %r471;
	mov.b32 	%f426, %r472;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3651, %r3651, %r471;
	mov.b32 	%r3650, %f750;
	setp.ne.s32 	%p122, %r3651, 0;
	setp.ne.s32 	%p123, %r3650, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r473, %f64;
	and.b32  	%r474, %r473, -2147483648;
	mov.b32 	%r475, %f751;
	or.b32  	%r476, %r474, %r475;
	mov.b32 	%f751, %r476;
$L__BB0_76:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r477, %f436;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f437, %r479;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r480, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p129, %r481, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p130, %r482, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p131, %r484, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L679
	@%p28 bra 	$L__BB0_220;
// %bb.78:
	@%p316 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r238, %f785;
	and.b32  	%r497, %r238, 8388607;
	or.b32  	%r3744, %r497, 1065353216;
	mov.b32 	%f784, %r3744;
	add.s32 	%r498, %r238, -1073741824;
	and.b32  	%r3745, %r498, -8388608;
	setp.eq.s32 	%p141, %r3745, 0;
	@%p141 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r499, %r3745, 192937984;
	add.s32 	%r500, %r3744, %r499;
	mov.b32 	%f476, %r500;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3745, %r3745, %r499;
	mov.b32 	%r3744, %f784;
	setp.ne.s32 	%p142, %r3745, 0;
	setp.ne.s32 	%p143, %r3744, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p145, %r238, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r237, %f187;
	setp.lt.u32 	%p136, %r237, 1073741824;
	@%p136 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p137, %r237, -2147483647;
	@%p137 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r501, %f785;
	or.b32  	%r502, %r231, %r501;
	mov.b32 	%f785, %r502;
$L__BB0_222:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L781
	cvt.u16.u32 	%rs15, %r3640;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r518, %r46, 8388607;
	or.b32  	%r3652, %r518, 1065353216;
	mov.b32 	%f756, %r3652;
	add.s32 	%r519, %r46, -1073741824;
	and.b32  	%r3653, %r519, -8388608;
	setp.eq.s32 	%p162, %r3653, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r520, %r3653, 192937984;
	add.s32 	%r521, %r3652, %r520;
	mov.b32 	%f530, %r521;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3653, %r3653, %r520;
	mov.b32 	%r3652, %f756;
	setp.ne.s32 	%p163, %r3653, 0;
	setp.ne.s32 	%p164, %r3652, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r522, %f85;
	and.b32  	%r523, %r522, -2147483648;
	mov.b32 	%r524, %f757;
	or.b32  	%r525, %r523, %r524;
	mov.b32 	%f757, %r525;
$L__BB0_96:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r526, %f540;
	and.b32  	%r527, %r526, -2147483648;
	or.b32  	%r528, %r527, 1056964608;
	mov.b32 	%f541, %r528;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r529, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r530, %r529, 1;
	setp.eq.b32 	%p170, %r530, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r531, %r529, 2;
	setp.eq.s32 	%p171, %r531, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r532, %r529, 1;
	and.b32  	%r533, %r532, 2;
	setp.eq.s32 	%p172, %r533, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L819
	mul.hi.u32 	%r535, %r3641, -1431655765;
	shr.u32 	%r536, %r535, 5;
	mul.lo.s32 	%r537, %r536, 48;
	sub.s32 	%r538, %r3641, %r537;
	cvt.rn.f32.s32 	%f571, %r538;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r539, %r54, 8388607;
	or.b32  	%r3654, %r539, 1065353216;
	mov.b32 	%f762, %r3654;
	add.s32 	%r540, %r54, -1073741824;
	and.b32  	%r3655, %r540, -8388608;
	setp.eq.s32 	%p183, %r3655, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r541, %r3655, 192937984;
	add.s32 	%r542, %r3654, %r541;
	mov.b32 	%f583, %r542;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3655, %r3655, %r541;
	mov.b32 	%r3654, %f762;
	setp.ne.s32 	%p184, %r3655, 0;
	setp.ne.s32 	%p185, %r3654, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r543, %f106;
	and.b32  	%r544, %r543, -2147483648;
	mov.b32 	%r545, %f763;
	or.b32  	%r546, %r544, %r545;
	mov.b32 	%f763, %r546;
$L__BB0_112:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r547, %f593;
	and.b32  	%r548, %r547, -2147483648;
	or.b32  	%r549, %r548, 1056964608;
	mov.b32 	%f594, %r549;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r550, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r551, %r550, 1;
	setp.eq.b32 	%p191, %r551, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r552, %r550, 2;
	setp.eq.s32 	%p192, %r552, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r553, %r550, 1;
	and.b32  	%r554, %r553, 2;
	setp.eq.s32 	%p193, %r554, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L891
	cvt.u16.u32 	%rs22, %r3640;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r562, %r64, 8388607;
	or.b32  	%r3656, %r562, 1065353216;
	mov.b32 	%f768, %r3656;
	add.s32 	%r563, %r64, -1073741824;
	and.b32  	%r3657, %r563, -8388608;
	setp.eq.s32 	%p203, %r3657, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r564, %r3657, 192937984;
	add.s32 	%r565, %r3656, %r564;
	mov.b32 	%f636, %r565;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3657, %r3657, %r564;
	mov.b32 	%r3656, %f768;
	setp.ne.s32 	%p204, %r3657, 0;
	setp.ne.s32 	%p205, %r3656, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r566, %f127;
	and.b32  	%r567, %r566, -2147483648;
	mov.b32 	%r568, %f769;
	or.b32  	%r569, %r567, %r568;
	mov.b32 	%f769, %r569;
$L__BB0_128:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r570, %f646;
	and.b32  	%r571, %r570, -2147483648;
	or.b32  	%r572, %r571, 1056964608;
	mov.b32 	%f647, %r572;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r573, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r574, %r573, 1;
	setp.eq.b32 	%p211, %r574, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r575, %r573, 2;
	setp.eq.s32 	%p212, %r575, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r576, %r573, 1;
	and.b32  	%r577, %r576, 2;
	setp.eq.s32 	%p213, %r577, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L933
	mul.hi.u32 	%r579, %r3641, -1431655765;
	shr.u32 	%r580, %r579, 2;
	mul.lo.s32 	%r581, %r580, 6;
	sub.s32 	%r582, %r3641, %r581;
	cvt.rn.f32.s32 	%f677, %r582;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r583, %r72, 8388607;
	or.b32  	%r3658, %r583, 1065353216;
	mov.b32 	%f774, %r3658;
	add.s32 	%r584, %r72, -1073741824;
	and.b32  	%r3659, %r584, -8388608;
	setp.eq.s32 	%p223, %r3659, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r585, %r3659, 192937984;
	add.s32 	%r586, %r3658, %r585;
	mov.b32 	%f689, %r586;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3659, %r3659, %r585;
	mov.b32 	%r3658, %f774;
	setp.ne.s32 	%p224, %r3659, 0;
	setp.ne.s32 	%p225, %r3658, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r587, %f148;
	and.b32  	%r588, %r587, -2147483648;
	mov.b32 	%r589, %f775;
	or.b32  	%r590, %r588, %r589;
	mov.b32 	%f775, %r590;
$L__BB0_144:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r591, %f699;
	and.b32  	%r592, %r591, -2147483648;
	or.b32  	%r593, %r592, 1056964608;
	mov.b32 	%f700, %r593;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r594, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r595, %r594, 1;
	setp.eq.b32 	%p231, %r595, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r596, %r594, 2;
	setp.eq.s32 	%p232, %r596, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r597, %r594, 1;
	and.b32  	%r598, %r597, 2;
	setp.eq.s32 	%p233, %r598, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L967
	mov.u32 	%r247, 999999999;
	cvt.u16.u32 	%rs241, %r3;
	@%p91 bra 	$L__BB0_224;
// %bb.146:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r612, %rs34;
	and.b32  	%r613, %r612, 255;
	mad.lo.s32 	%r614, %r613, 24, %r1;
	cvt.u16.u32 	%rs35, %r614;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r615, %rs39;
	mul.wide.u32 	%rd34, %r615, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r616, [%rd35];
	shl.b32 	%r617, %r616, 16;
	cvt.s32.s16 	%r83, %r616;
	shr.s32 	%r84, %r616, 16;
	or.b32  	%r618, %r617, 65535;
	setp.lt.u32 	%p237, %r618, 1638399;
	setp.lt.u32 	%p238, %r616, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1247
	mul.lo.s32 	%r622, %r84, 801;
	mad.lo.s32 	%r247, %r83, 33, %r622;
$L__BB0_224:                            // %pass487
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r395, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r509, %f487;
	or.b32  	%r397, %r396, 1056964608;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%f225, %r397;
	or.b32  	%r511, %r510, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r511;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r398, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r399, %r398, 1;
	cvt.rzi.s32.f32 	%r512, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r399, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r513, %r512, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r400, %r398, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r513, 1;
	setp.eq.s32 	%p44, %r400, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r514, %r512, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r514, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r515, %r512, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r402, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r516, %r515, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r516, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r391, %f254;
	mov.b32 	%r394, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r390, %r394, -2147483648;
	mov.b32 	%r486, %f62;
	mov.b32 	%r487, %f83;
	mov.b32 	%r492, %f63;
	mov.b32 	%r493, %f84;
	mov.b32 	%r505, %f517;
	mov.b32 	%r508, %f514;
	mov.b32 	%r442, %f20;
	mov.b32 	%r443, %f41;
	mov.b32 	%r445, %f21;
	mov.b32 	%r446, %f42;
	xor.b32  	%r489, %r492, -2147483648;
	xor.b32  	%r490, %r493, -2147483648;
	xor.b32  	%r504, %r508, -2147483648;
	mov.b32 	%r556, %f104;
	mov.b32 	%r557, %f125;
	mov.b32 	%r559, %f105;
	mov.b32 	%r560, %f126;
	mov.b32 	%r600, %f146;
	mov.b32 	%r601, %f167;
	mov.b32 	%r606, %f147;
	xor.b32  	%r603, %r606, -2147483648;
	mov.b32 	%r607, %f168;
	xor.b32  	%r604, %r607, -2147483648;
	and.b32  	%r623, %r3, 24;
	setp.ne.s32 	%p240, %r623, 24;
	cvt.u16.u32 	%rs40, %r222;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r624, %rs44;
	and.b32  	%r248, %r624, 255;
	mul.lo.s32 	%r3660, %r4, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.225:                             // %pass487.L1509_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass502
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r625, %r248, 24;
	mul.lo.s32 	%r626, %r221, 144;
	or.b32  	%r627, %r3660, %r1;
	add.s32 	%r628, %r627, %r626;
	add.s32 	%r629, %r628, %r625;
	mul.wide.u32 	%rd41, %r629, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r87, [%rd42];
	or.b32  	%r630, %r1, 576;
	add.s32 	%r631, %r630, %r3660;
	add.s32 	%r632, %r631, %r626;
	add.s32 	%r633, %r632, %r625;
	mul.wide.u32 	%rd43, %r633, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r88, [%rd44];
$L__BB0_149:                            // %L1509
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r445;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r488, %r490, %r489;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r491, %r493, %r492;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r494, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r504;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r557, %r556;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r558, %r560, %r559;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r599, %r601, %r600;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r602, %r604, %r603;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r605, %r607, %r606;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r608, %r601, %r600;
	// end inline asm
	mov.u32 	%r119, 0;
	shl.b32 	%r636, %r362, 8;
	shl.b32 	%r637, %r3, 2;
	and.b32  	%r638, %r637, 60;
	shl.b32 	%r639, %r3, 3;
	and.b32  	%r640, %r639, 128;
	shl.b32 	%r641, %r4, 8;
	or.b32  	%r642, %r638, %r640;
	or.b32  	%r643, %r642, %r641;
	add.s32 	%r89, %r643, %r636;
	or.b32  	%r644, %r637, %r641;
	or.b32  	%r645, %r644, %r640;
	or.b32  	%r646, %r645, 64;
	add.s32 	%r90, %r636, %r646;
	add.s32 	%r91, %r1, 24;
	shr.u32 	%r647, %r3, 4;
	and.b32  	%r648, %r234, 30;
	or.b32  	%r649, %r648, %r647;
	mul.lo.s32 	%r92, %r649, 257;
	or.b32  	%r650, %r234, %r647;
	or.b32  	%r651, %r650, 32;
	mul.lo.s32 	%r93, %r651, 257;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r652, %rs50;
	and.b32  	%r94, %r652, 255;
	and.b32  	%r653, %r2, 224;
	shr.u32 	%r654, %r1, 3;
	mad.lo.s32 	%r95, %r654, 257, %r653;
	shr.u32 	%r655, %r91, 3;
	mad.lo.s32 	%r96, %r655, 257, %r653;
	add.s32 	%r656, %r1, 48;
	shr.u32 	%r657, %r656, 3;
	mad.lo.s32 	%r97, %r657, 257, %r653;
	add.s32 	%r658, %r1, 72;
	shr.u32 	%r659, %r658, 3;
	mad.lo.s32 	%r98, %r659, 257, %r653;
	or.b32  	%r660, %r654, 12;
	mad.lo.s32 	%r99, %r660, 257, %r653;
	add.s32 	%r661, %r1, 120;
	shr.u32 	%r662, %r661, 3;
	mad.lo.s32 	%r100, %r662, 257, %r653;
	add.s32 	%r663, %r1, 144;
	shr.u32 	%r664, %r663, 3;
	mad.lo.s32 	%r101, %r664, 257, %r653;
	add.s32 	%r665, %r1, 168;
	shr.u32 	%r666, %r665, 3;
	mad.lo.s32 	%r102, %r666, 257, %r653;
	or.b32  	%r667, %r654, 24;
	mad.lo.s32 	%r103, %r667, 257, %r653;
	add.s32 	%r668, %r1, 216;
	shr.u32 	%r669, %r668, 3;
	mad.lo.s32 	%r104, %r669, 257, %r653;
	add.s32 	%r670, %r1, 240;
	shr.u32 	%r671, %r670, 3;
	mad.lo.s32 	%r105, %r671, 257, %r653;
	add.s32 	%r672, %r1, 264;
	shr.u32 	%r673, %r672, 3;
	mad.lo.s32 	%r106, %r673, 257, %r653;
	or.b32  	%r674, %r654, 36;
	mad.lo.s32 	%r107, %r674, 257, %r653;
	add.s32 	%r675, %r1, 312;
	shr.u32 	%r676, %r675, 3;
	mad.lo.s32 	%r108, %r676, 257, %r653;
	add.s32 	%r677, %r1, 336;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r109, %r678, 257, %r653;
	add.s32 	%r679, %r1, 360;
	shr.u32 	%r680, %r679, 3;
	mad.lo.s32 	%r110, %r680, 257, %r653;
	or.b32  	%r681, %r654, 48;
	mad.lo.s32 	%r111, %r681, 257, %r653;
	add.s32 	%r682, %r1, 408;
	shr.u32 	%r683, %r682, 3;
	mad.lo.s32 	%r112, %r683, 257, %r653;
	add.s32 	%r684, %r1, 432;
	shr.u32 	%r685, %r684, 3;
	mad.lo.s32 	%r113, %r685, 257, %r653;
	add.s32 	%r686, %r1, 456;
	shr.u32 	%r687, %r686, 3;
	mad.lo.s32 	%r114, %r687, 257, %r653;
	or.b32  	%r688, %r654, 60;
	mad.lo.s32 	%r115, %r688, 257, %r653;
	add.s32 	%r689, %r1, 504;
	bfe.u32 	%r690, %r689, 3, 6;
	mad.lo.s32 	%r116, %r690, 257, %r653;
	mul.lo.s32 	%r691, %r1, 33;
	mad.lo.s32 	%r692, %r221, 4806, %r691;
	mad.lo.s32 	%r693, %r248, 801, %r692;
	bfe.s32 	%r694, %r1, 1, 1;
	and.b32  	%r695, %r694, 4112;
	bfe.s32 	%r696, %r1, 2, 1;
	and.b32  	%r697, %r696, 2056;
	bfe.s32 	%r698, %r1, 3, 1;
	and.b32  	%r699, %r1, 8;
	setp.eq.s32 	%p241, %r699, 0;
	and.b32  	%r700, %r698, 1028;
	mul.lo.s32 	%r701, %r221, 6;
	and.b32  	%r702, %r1, 1;
	neg.s32 	%r703, %r702;
	and.b32  	%r704, %r703, 8256;
	shr.u32 	%r705, %r1, 4;
	mul.lo.s32 	%r706, %r705, 514;
	or.b32  	%r707, %r695, %r697;
	add.s32 	%r708, %r700, %r701;
	add.s32 	%r709, %r708, %r707;
	or.b32  	%r710, %r709, %r704;
	add.s32 	%r711, %r706, %r248;
	add.s32 	%r712, %r711, %r710;
	mul.wide.u32 	%rd45, %r712, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	selp.b32 	%r713, 1028, 0, %p241;
	bfe.s32 	%r714, %r91, 4, 1;
	and.b32  	%r715, %r91, 16;
	setp.eq.s32 	%p242, %r715, 0;
	and.b32  	%r716, %r714, 514;
	shr.u32 	%r717, %r91, 5;
	mul.lo.s32 	%r718, %r717, 257;
	add.s32 	%r719, %r713, %r701;
	add.s32 	%r720, %r719, %r707;
	or.b32  	%r721, %r720, %r704;
	add.s32 	%r722, %r718, %r248;
	add.s32 	%r723, %r722, %r716;
	add.s32 	%r724, %r723, %r721;
	mul.wide.u32 	%rd47, %r724, 4;
	add.s64 	%rd8, %rd46, %rd47;
	cvt.u64.u32 	%rd48, %r710;
	cvt.u64.u32 	%rd49, %r248;
	cvt.u64.u32 	%rd50, %r706;
	add.s64 	%rd51, %rd50, %rd49;
	add.s64 	%rd52, %rd51, %rd48;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd46, %rd53;
	cvt.u64.u32 	%rd54, %r721;
	selp.b64 	%rd55, 0, 514, %p242;
	cvt.u64.u32 	%rd56, %r718;
	add.s64 	%rd57, %rd56, %rd49;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd10, %rd46, %rd60;
	add.s32 	%r725, %r708, %r706;
	add.s32 	%r726, %r725, %r704;
	add.s32 	%r727, %r726, %r707;
	add.s32 	%r728, %r727, %r248;
	or.b32  	%r729, %r719, %r704;
	add.s32 	%r730, %r729, %r718;
	add.s32 	%r731, %r730, %r707;
	add.s32 	%r732, %r731, %r248;
	add.s32 	%r733, %r732, %r716;
	or.b32  	%r734, %r701, 32;
	add.s32 	%r735, %r734, %r706;
	add.s32 	%r736, %r735, %r700;
	add.s32 	%r737, %r736, %r704;
	add.s32 	%r738, %r737, %r707;
	add.s32 	%r739, %r738, %r248;
	add.s32 	%r740, %r734, %r713;
	add.s32 	%r741, %r740, %r704;
	add.s32 	%r742, %r741, %r718;
	add.s32 	%r743, %r742, %r707;
	add.s32 	%r744, %r743, %r248;
	add.s32 	%r745, %r744, %r716;
	mul.lo.s32 	%r746, %r360, 884736;
	mad.lo.s32 	%r747, %r364, 1152, %r746;
	mad.lo.s32 	%r748, %r1, 24, %r3660;
	add.s32 	%r117, %r748, %r94;
	cvt.s64.s32 	%rd11, %r747;
	cvt.u16.u32 	%rs51, %r91;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r749, %rs56;
	and.b32  	%r750, %r749, 255;
	or.b32  	%r751, %r3660, %r94;
	mad.lo.s32 	%r118, %r750, 24, %r751;
	mul.wide.u32 	%rd61, %r693, 4;
	add.s64 	%rd12, %rd46, %rd61;
	add.s32 	%r752, %r728, 64;
	mul.wide.u32 	%rd62, %r752, 4;
	add.s64 	%rd13, %rd46, %rd62;
	add.s32 	%r753, %r733, 64;
	mul.wide.u32 	%rd63, %r753, 4;
	add.s64 	%rd14, %rd46, %rd63;
	add.s32 	%r754, %r739, 64;
	mul.wide.u32 	%rd64, %r754, 4;
	add.s64 	%rd15, %rd46, %rd64;
	add.s32 	%r755, %r745, 64;
	mul.wide.u32 	%rd65, %r755, 4;
	add.s64 	%rd16, %rd46, %rd65;
	add.s32 	%r756, %r728, 128;
	mul.wide.u32 	%rd66, %r756, 4;
	add.s64 	%rd17, %rd46, %rd66;
	add.s32 	%r757, %r733, 128;
	mul.wide.u32 	%rd67, %r757, 4;
	add.s64 	%rd18, %rd46, %rd67;
	add.s32 	%r758, %r739, 128;
	mul.wide.u32 	%rd68, %r758, 4;
	add.s64 	%rd19, %rd46, %rd68;
	add.s32 	%r759, %r745, 128;
	mul.wide.u32 	%rd69, %r759, 4;
	add.s64 	%rd20, %rd46, %rd69;
	add.s32 	%r760, %r728, 192;
	mul.wide.u32 	%rd70, %r760, 4;
	add.s64 	%rd21, %rd46, %rd70;
	add.s32 	%r761, %r733, 192;
	mul.wide.u32 	%rd71, %r761, 4;
	add.s64 	%rd22, %rd46, %rd71;
	add.s32 	%r762, %r739, 192;
	mul.wide.u32 	%rd72, %r762, 4;
	add.s64 	%rd23, %rd46, %rd72;
	add.s32 	%r763, %r745, 192;
	mul.wide.u32 	%rd73, %r763, 4;
	add.s64 	%rd24, %rd46, %rd73;
	setp.lt.u32 	%p244, %r3, 16;
	setp.gt.u32 	%p273, %r1, 7;
	setp.lt.u32 	%p277, %r3, 24;
	mov.u32 	%r3693, %r119;
	mov.u32 	%r3694, %r119;
	mov.u32 	%r3695, %r119;
	mov.u32 	%r3696, %r119;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L25588
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r220, %r119, 48;
	setp.ne.s32 	%p315, %r119, 1968;
	mov.u32 	%r119, %r220;
	@%p315 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1512
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r764, %r119, %r358;
	setp.lt.s32 	%p243, %r764, %r359;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem685
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r957, %r119, -1431655765;
	shr.u32 	%r958, %r957, 5;
	mul.lo.s32 	%r253, %r958, 48;
	add.s32 	%r959, %r253, %r1;
	cvt.u16.u32 	%rs57, %r959;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 5;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -2048;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.s32.s16 	%r960, %rs62;
	add.s32 	%r961, %r960, %r358;
	mul.lo.s32 	%r962, %r961, 196608;
	add.s32 	%r963, %r89, %r962;
	mul.hi.s32 	%r964, %r963, 715827883;
	shr.u32 	%r965, %r964, 31;
	shr.s32 	%r966, %r964, 26;
	add.s32 	%r967, %r966, %r965;
	setp.lt.s32 	%p245, %r963, 0;
	mul.lo.s32 	%r968, %r967, 402653184;
	setp.ne.s32 	%p246, %r968, %r963;
	and.pred  	%p247, %p245, %p246;
	selp.s32 	%r969, -1, 0, %p247;
	add.s32 	%r970, %r967, %r969;
	mad.lo.s32 	%r971, %r970, -402653184, %r963;
	mul.wide.s32 	%rd74, %r971, 4;
	add.s64 	%rd75, %rd3, %rd74;
	ld.global.v4.u32 	{%r972, %r973, %r974, %r975}, [%rd75];
	add.s32 	%r976, %r90, %r962;
	mul.hi.s32 	%r977, %r976, 715827883;
	shr.u32 	%r978, %r977, 31;
	shr.s32 	%r979, %r977, 26;
	add.s32 	%r980, %r979, %r978;
	shr.s32 	%r981, %r976, 31;
	add.s32 	%r982, %r981, %r980;
	or.b32  	%r983, %r976, 1;
	mad.lo.s32 	%r984, %r982, -402653184, %r983;
	mul.wide.s32 	%rd76, %r984, 4;
	add.s64 	%rd77, %rd3, %rd76;
	ld.global.v4.u32 	{%r985, %r986, %r987, %r988}, [%rd77+-4];
	add.s32 	%r989, %r91, %r253;
	cvt.u16.u32 	%rs63, %r989;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 5;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -2048;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r990, %rs68;
	add.s32 	%r991, %r990, %r358;
	mul.lo.s32 	%r992, %r991, 196608;
	add.s32 	%r993, %r89, %r992;
	mul.hi.s32 	%r994, %r993, 715827883;
	shr.u32 	%r995, %r994, 31;
	shr.s32 	%r996, %r994, 26;
	add.s32 	%r997, %r996, %r995;
	setp.lt.s32 	%p248, %r993, 0;
	mul.lo.s32 	%r998, %r997, 402653184;
	setp.ne.s32 	%p249, %r998, %r993;
	and.pred  	%p250, %p248, %p249;
	selp.s32 	%r999, -1, 0, %p250;
	add.s32 	%r1000, %r997, %r999;
	mad.lo.s32 	%r1001, %r1000, -402653184, %r993;
	mul.wide.s32 	%rd78, %r1001, 4;
	add.s64 	%rd79, %rd3, %rd78;
	ld.global.v4.u32 	{%r1002, %r1003, %r1004, %r1005}, [%rd79];
	add.s32 	%r1006, %r90, %r992;
	mul.hi.s32 	%r1007, %r1006, 715827883;
	shr.u32 	%r1008, %r1007, 31;
	shr.s32 	%r1009, %r1007, 26;
	add.s32 	%r1010, %r1009, %r1008;
	shr.s32 	%r1011, %r1006, 31;
	add.s32 	%r1012, %r1011, %r1010;
	or.b32  	%r1013, %r1006, 1;
	mad.lo.s32 	%r1014, %r1012, -402653184, %r1013;
	mul.wide.s32 	%rd80, %r1014, 4;
	add.s64 	%rd81, %rd3, %rd80;
	ld.global.v4.u32 	{%r1015, %r1016, %r1017, %r1018}, [%rd81+-4];
	selp.b32 	%r1019, %r974, %r972, %p244;
	shfl.sync.bfly.b32	%r1020, %r1019, 16, 31, -1;
	selp.b32 	%r767, %r972, %r1020, %p244;
	selp.b32 	%r772, %r1020, %r974, %p244;
	selp.b32 	%r1021, %r975, %r973, %p244;
	shfl.sync.bfly.b32	%r1022, %r1021, 16, 31, -1;
	selp.b32 	%r775, %r973, %r1022, %p244;
	selp.b32 	%r780, %r1022, %r975, %p244;
	selp.b32 	%r1023, %r987, %r985, %p244;
	shfl.sync.bfly.b32	%r1024, %r1023, 16, 31, -1;
	selp.b32 	%r783, %r985, %r1024, %p244;
	selp.b32 	%r788, %r1024, %r987, %p244;
	selp.b32 	%r1025, %r988, %r986, %p244;
	shfl.sync.bfly.b32	%r1026, %r1025, 16, 31, -1;
	selp.b32 	%r791, %r986, %r1026, %p244;
	selp.b32 	%r796, %r1026, %r988, %p244;
	selp.b32 	%r1027, %r1004, %r1002, %p244;
	shfl.sync.bfly.b32	%r1028, %r1027, 16, 31, -1;
	selp.b32 	%r799, %r1002, %r1028, %p244;
	selp.b32 	%r804, %r1028, %r1004, %p244;
	selp.b32 	%r1029, %r1005, %r1003, %p244;
	shfl.sync.bfly.b32	%r1030, %r1029, 16, 31, -1;
	selp.b32 	%r807, %r1003, %r1030, %p244;
	selp.b32 	%r812, %r1030, %r1005, %p244;
	selp.b32 	%r1031, %r1017, %r1015, %p244;
	shfl.sync.bfly.b32	%r1032, %r1031, 16, 31, -1;
	selp.b32 	%r815, %r1015, %r1032, %p244;
	selp.b32 	%r820, %r1032, %r1017, %p244;
	selp.b32 	%r1033, %r1018, %r1016, %p244;
	shfl.sync.bfly.b32	%r1034, %r1033, 16, 31, -1;
	selp.b32 	%r823, %r1016, %r1034, %p244;
	selp.b32 	%r828, %r1034, %r1018, %p244;
	shl.b32 	%r768, %r772, 4;
	mov.u32 	%r766, 252645135;
	// begin inline asm
	lop3.b32 %r830, %r766, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r846, %r766, %r771, %r772, 202;
	// end inline asm
	shl.b32 	%r776, %r780, 4;
	// begin inline asm
	lop3.b32 %r838, %r766, %r775, %r776, 202;
	// end inline asm
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r854, %r766, %r779, %r780, 202;
	// end inline asm
	shl.b32 	%r784, %r788, 4;
	// begin inline asm
	lop3.b32 %r862, %r766, %r783, %r784, 202;
	// end inline asm
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r878, %r766, %r787, %r788, 202;
	// end inline asm
	shl.b32 	%r792, %r796, 4;
	// begin inline asm
	lop3.b32 %r870, %r766, %r791, %r792, 202;
	// end inline asm
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r886, %r766, %r795, %r796, 202;
	// end inline asm
	shl.b32 	%r800, %r804, 4;
	// begin inline asm
	lop3.b32 %r831, %r766, %r799, %r800, 202;
	// end inline asm
	shr.u32 	%r803, %r799, 4;
	// begin inline asm
	lop3.b32 %r847, %r766, %r803, %r804, 202;
	// end inline asm
	shl.b32 	%r808, %r812, 4;
	// begin inline asm
	lop3.b32 %r839, %r766, %r807, %r808, 202;
	// end inline asm
	shr.u32 	%r811, %r807, 4;
	// begin inline asm
	lop3.b32 %r855, %r766, %r811, %r812, 202;
	// end inline asm
	shl.b32 	%r816, %r820, 4;
	// begin inline asm
	lop3.b32 %r863, %r766, %r815, %r816, 202;
	// end inline asm
	shr.u32 	%r819, %r815, 4;
	// begin inline asm
	lop3.b32 %r879, %r766, %r819, %r820, 202;
	// end inline asm
	shl.b32 	%r824, %r828, 4;
	// begin inline asm
	lop3.b32 %r871, %r766, %r823, %r824, 202;
	// end inline asm
	shr.u32 	%r827, %r823, 4;
	// begin inline asm
	lop3.b32 %r887, %r766, %r827, %r828, 202;
	// end inline asm
	mov.u32 	%r832, 25152;
	// begin inline asm
	prmt.b32 %r894, %r830, %r831, %r832;
	// end inline asm
	mov.u32 	%r836, 29521;
	// begin inline asm
	prmt.b32 %r926, %r830, %r831, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r838, %r839, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r934, %r838, %r839, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r846, %r847, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r846, %r847, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r854, %r855, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r935, %r854, %r855, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r862, %r863, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r942, %r862, %r863, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r870, %r871, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r950, %r870, %r871, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r878, %r879, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r943, %r878, %r879, %r836;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r886, %r887, %r832;
	// end inline asm
	// begin inline asm
	prmt.b32 %r951, %r886, %r887, %r836;
	// end inline asm
	mov.u32 	%r896, 21520;
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r896;
	// end inline asm
	mov.u32 	%r900, 30258;
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r902, %r903, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r902, %r903, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r910, %r911, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r910, %r911, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r918, %r919, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r918, %r919, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r926, %r927, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r926, %r927, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r933, %r934, %r935, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r934, %r935, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r941, %r942, %r943, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r942, %r943, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r949, %r950, %r951, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r953, %r950, %r951, %r900;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1035, %rs74;
	add.s32 	%r1036, %r92, %r1035;
	mul.wide.s32 	%rd82, %r1036, 4;
	add.s64 	%rd84, %rd46, %rd82;
	st.shared.u32 	[%rd84], %r893;
	add.s32 	%r1037, %r1036, 128;
	mul.wide.u32 	%rd85, %r1037, 4;
	add.s64 	%rd86, %rd46, %rd85;
	st.shared.u32 	[%rd86], %r901;
	add.s32 	%r1038, %r1036, 64;
	mul.wide.u32 	%rd87, %r1038, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r897;
	add.s32 	%r1039, %r1036, 192;
	mul.wide.u32 	%rd89, %r1039, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r905;
	add.s32 	%r1040, %r93, %r1035;
	mul.wide.u32 	%rd91, %r1040, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r909;
	add.s32 	%r1041, %r1040, 128;
	mul.wide.u32 	%rd93, %r1041, 4;
	add.s64 	%rd94, %rd46, %rd93;
	st.shared.u32 	[%rd94], %r917;
	add.s32 	%r1042, %r1040, 64;
	mul.wide.u32 	%rd95, %r1042, 4;
	add.s64 	%rd96, %rd46, %rd95;
	st.shared.u32 	[%rd96], %r913;
	add.s32 	%r1043, %r1040, 192;
	mul.wide.u32 	%rd97, %r1043, 4;
	add.s64 	%rd98, %rd46, %rd97;
	st.shared.u32 	[%rd98], %r921;
	add.s32 	%r1044, %r1036, 32;
	mul.wide.u32 	%rd99, %r1044, 4;
	add.s64 	%rd100, %rd46, %rd99;
	st.shared.u32 	[%rd100], %r925;
	add.s32 	%r1045, %r1036, 160;
	mul.wide.u32 	%rd101, %r1045, 4;
	add.s64 	%rd102, %rd46, %rd101;
	st.shared.u32 	[%rd102], %r933;
	add.s32 	%r1046, %r1036, 96;
	mul.wide.u32 	%rd103, %r1046, 4;
	add.s64 	%rd104, %rd46, %rd103;
	st.shared.u32 	[%rd104], %r929;
	add.s32 	%r1047, %r1036, 224;
	mul.wide.u32 	%rd105, %r1047, 4;
	add.s64 	%rd106, %rd46, %rd105;
	st.shared.u32 	[%rd106], %r937;
	add.s32 	%r1048, %r1040, 32;
	mul.wide.u32 	%rd107, %r1048, 4;
	add.s64 	%rd108, %rd46, %rd107;
	st.shared.u32 	[%rd108], %r941;
	add.s32 	%r1049, %r1040, 160;
	mul.wide.u32 	%rd109, %r1049, 4;
	add.s64 	%rd110, %rd46, %rd109;
	st.shared.u32 	[%rd110], %r949;
	add.s32 	%r1050, %r1040, 96;
	mul.wide.u32 	%rd111, %r1050, 4;
	add.s64 	%rd112, %rd46, %rd111;
	st.shared.u32 	[%rd112], %r945;
	add.s32 	%r1051, %r1040, 224;
	mul.wide.u32 	%rd113, %r1051, 4;
	add.s64 	%rd114, %rd46, %rd113;
	st.shared.u32 	[%rd114], %r953;
	bar.sync 	0;
	add.s32 	%r1052, %r253, %r94;
	cvt.u16.u32 	%rs75, %r1052;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r254, %rs81;
	add.s32 	%r1053, %r95, %r254;
	mul.wide.s32 	%rd115, %r1053, 4;
	add.s64 	%rd116, %rd46, %rd115;
	ld.shared.u32 	%r255, [%rd116];
	add.s32 	%r1054, %r96, %r254;
	mul.wide.u32 	%rd117, %r1054, 4;
	add.s64 	%rd118, %rd46, %rd117;
	ld.shared.u32 	%r256, [%rd118];
	add.s32 	%r1055, %r97, %r254;
	mul.wide.u32 	%rd119, %r1055, 4;
	add.s64 	%rd120, %rd46, %rd119;
	ld.shared.u32 	%r257, [%rd120];
	add.s32 	%r1056, %r98, %r254;
	mul.wide.u32 	%rd121, %r1056, 4;
	add.s64 	%rd122, %rd46, %rd121;
	ld.shared.u32 	%r258, [%rd122];
	add.s32 	%r1057, %r99, %r254;
	mul.wide.u32 	%rd123, %r1057, 4;
	add.s64 	%rd124, %rd46, %rd123;
	ld.shared.u32 	%r259, [%rd124];
	add.s32 	%r1058, %r100, %r254;
	mul.wide.u32 	%rd125, %r1058, 4;
	add.s64 	%rd126, %rd46, %rd125;
	ld.shared.u32 	%r260, [%rd126];
	add.s32 	%r1059, %r101, %r254;
	mul.wide.u32 	%rd127, %r1059, 4;
	add.s64 	%rd128, %rd46, %rd127;
	ld.shared.u32 	%r261, [%rd128];
	add.s32 	%r1060, %r102, %r254;
	mul.wide.u32 	%rd129, %r1060, 4;
	add.s64 	%rd130, %rd46, %rd129;
	ld.shared.u32 	%r262, [%rd130];
	add.s32 	%r1061, %r103, %r254;
	mul.wide.u32 	%rd131, %r1061, 4;
	add.s64 	%rd132, %rd46, %rd131;
	ld.shared.u32 	%r263, [%rd132];
	add.s32 	%r1062, %r104, %r254;
	mul.wide.u32 	%rd133, %r1062, 4;
	add.s64 	%rd134, %rd46, %rd133;
	ld.shared.u32 	%r264, [%rd134];
	add.s32 	%r1063, %r105, %r254;
	mul.wide.u32 	%rd135, %r1063, 4;
	add.s64 	%rd136, %rd46, %rd135;
	ld.shared.u32 	%r265, [%rd136];
	add.s32 	%r1064, %r106, %r254;
	mul.wide.u32 	%rd137, %r1064, 4;
	add.s64 	%rd138, %rd46, %rd137;
	ld.shared.u32 	%r266, [%rd138];
	add.s32 	%r1065, %r107, %r254;
	mul.wide.u32 	%rd139, %r1065, 4;
	add.s64 	%rd140, %rd46, %rd139;
	ld.shared.u32 	%r267, [%rd140];
	add.s32 	%r1066, %r108, %r254;
	mul.wide.u32 	%rd141, %r1066, 4;
	add.s64 	%rd142, %rd46, %rd141;
	ld.shared.u32 	%r268, [%rd142];
	add.s32 	%r1067, %r109, %r254;
	mul.wide.u32 	%rd143, %r1067, 4;
	add.s64 	%rd144, %rd46, %rd143;
	ld.shared.u32 	%r269, [%rd144];
	add.s32 	%r1068, %r110, %r254;
	mul.wide.u32 	%rd145, %r1068, 4;
	add.s64 	%rd146, %rd46, %rd145;
	ld.shared.u32 	%r270, [%rd146];
	add.s32 	%r1069, %r111, %r254;
	mul.wide.u32 	%rd147, %r1069, 4;
	add.s64 	%rd148, %rd46, %rd147;
	ld.shared.u32 	%r271, [%rd148];
	add.s32 	%r1070, %r112, %r254;
	mul.wide.u32 	%rd149, %r1070, 4;
	add.s64 	%rd150, %rd46, %rd149;
	ld.shared.u32 	%r272, [%rd150];
	add.s32 	%r1071, %r113, %r254;
	mul.wide.u32 	%rd151, %r1071, 4;
	add.s64 	%rd152, %rd46, %rd151;
	ld.shared.u32 	%r273, [%rd152];
	add.s32 	%r1072, %r114, %r254;
	mul.wide.u32 	%rd153, %r1072, 4;
	add.s64 	%rd154, %rd46, %rd153;
	ld.shared.u32 	%r274, [%rd154];
	add.s32 	%r1073, %r115, %r254;
	mul.wide.u32 	%rd155, %r1073, 4;
	add.s64 	%rd156, %rd46, %rd155;
	ld.shared.u32 	%r275, [%rd156];
	add.s32 	%r1074, %r116, %r254;
	mul.wide.s32 	%rd157, %r1074, 4;
	add.s64 	%rd158, %rd46, %rd157;
	ld.shared.u32 	%r276, [%rd158];
	bar.sync 	0;
	shfl.sync.idx.b32	%r277, %r247, 0, 31, -1;
	shfl.sync.idx.b32	%r278, %r247, 1, 31, -1;
	shfl.sync.idx.b32	%r279, %r247, 2, 31, -1;
	shfl.sync.idx.b32	%r280, %r247, 3, 31, -1;
	shfl.sync.idx.b32	%r281, %r247, 4, 31, -1;
	shfl.sync.idx.b32	%r282, %r247, 5, 31, -1;
	shfl.sync.idx.b32	%r283, %r247, 6, 31, -1;
	shfl.sync.idx.b32	%r284, %r247, 7, 31, -1;
	shfl.sync.idx.b32	%r285, %r247, 8, 31, -1;
	shfl.sync.idx.b32	%r286, %r247, 9, 31, -1;
	shfl.sync.idx.b32	%r287, %r247, 10, 31, -1;
	shfl.sync.idx.b32	%r288, %r247, 11, 31, -1;
	shfl.sync.idx.b32	%r289, %r247, 12, 31, -1;
	shfl.sync.idx.b32	%r290, %r247, 13, 31, -1;
	shfl.sync.idx.b32	%r291, %r247, 14, 31, -1;
	shfl.sync.idx.b32	%r292, %r247, 15, 31, -1;
	shfl.sync.idx.b32	%r293, %r247, 16, 31, -1;
	shfl.sync.idx.b32	%r294, %r247, 17, 31, -1;
	shfl.sync.idx.b32	%r295, %r247, 18, 31, -1;
	shfl.sync.idx.b32	%r296, %r247, 19, 31, -1;
	shfl.sync.idx.b32	%r297, %r247, 20, 31, -1;
	shfl.sync.idx.b32	%r298, %r247, 21, 31, -1;
	shfl.sync.idx.b32	%r299, %r247, 22, 31, -1;
	shfl.sync.idx.b32	%r300, %r247, 23, 31, -1;
	setp.eq.s32 	%p251, %r277, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3274
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1075, %r277, %r254;
	mul.wide.s32 	%rd159, %r1075, 4;
	add.s64 	%rd161, %rd46, %rd159;
	st.shared.u32 	[%rd161], %r255;
	setp.eq.s32 	%p252, %r278, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3340
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1076, %r278, %r254;
	mul.wide.s32 	%rd162, %r1076, 4;
	add.s64 	%rd164, %rd46, %rd162;
	st.shared.u32 	[%rd164], %r256;
	setp.eq.s32 	%p253, %r279, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3406
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1077, %r279, %r254;
	mul.wide.s32 	%rd165, %r1077, 4;
	add.s64 	%rd167, %rd46, %rd165;
	st.shared.u32 	[%rd167], %r257;
	setp.eq.s32 	%p254, %r280, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3472
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1078, %r280, %r254;
	mul.wide.s32 	%rd168, %r1078, 4;
	add.s64 	%rd170, %rd46, %rd168;
	st.shared.u32 	[%rd170], %r258;
	setp.eq.s32 	%p255, %r281, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3538
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1079, %r281, %r254;
	mul.wide.s32 	%rd171, %r1079, 4;
	add.s64 	%rd173, %rd46, %rd171;
	st.shared.u32 	[%rd173], %r259;
	setp.eq.s32 	%p256, %r282, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1080, %r282, %r254;
	mul.wide.s32 	%rd174, %r1080, 4;
	add.s64 	%rd176, %rd46, %rd174;
	st.shared.u32 	[%rd176], %r260;
	setp.eq.s32 	%p257, %r283, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3670
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1081, %r283, %r254;
	mul.wide.s32 	%rd177, %r1081, 4;
	add.s64 	%rd179, %rd46, %rd177;
	st.shared.u32 	[%rd179], %r261;
	setp.eq.s32 	%p258, %r284, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3736
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1082, %r284, %r254;
	mul.wide.s32 	%rd180, %r1082, 4;
	add.s64 	%rd182, %rd46, %rd180;
	st.shared.u32 	[%rd182], %r262;
	setp.eq.s32 	%p259, %r285, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3802
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1083, %r285, %r254;
	mul.wide.s32 	%rd183, %r1083, 4;
	add.s64 	%rd185, %rd46, %rd183;
	st.shared.u32 	[%rd185], %r263;
	setp.eq.s32 	%p260, %r286, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3868
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1084, %r286, %r254;
	mul.wide.s32 	%rd186, %r1084, 4;
	add.s64 	%rd188, %rd46, %rd186;
	st.shared.u32 	[%rd188], %r264;
	setp.eq.s32 	%p261, %r287, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem3934
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1085, %r287, %r254;
	mul.wide.s32 	%rd189, %r1085, 4;
	add.s64 	%rd191, %rd46, %rd189;
	st.shared.u32 	[%rd191], %r265;
	setp.eq.s32 	%p262, %r288, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4000
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1086, %r288, %r254;
	mul.wide.s32 	%rd192, %r1086, 4;
	add.s64 	%rd194, %rd46, %rd192;
	st.shared.u32 	[%rd194], %r266;
	setp.eq.s32 	%p263, %r289, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4066
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1087, %r289, %r254;
	mul.wide.s32 	%rd195, %r1087, 4;
	add.s64 	%rd197, %rd46, %rd195;
	st.shared.u32 	[%rd197], %r267;
	setp.eq.s32 	%p264, %r290, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4132
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1088, %r290, %r254;
	mul.wide.s32 	%rd198, %r1088, 4;
	add.s64 	%rd200, %rd46, %rd198;
	st.shared.u32 	[%rd200], %r268;
	setp.eq.s32 	%p265, %r291, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4198
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1089, %r291, %r254;
	mul.wide.s32 	%rd201, %r1089, 4;
	add.s64 	%rd203, %rd46, %rd201;
	st.shared.u32 	[%rd203], %r269;
	setp.eq.s32 	%p266, %r292, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4264
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1090, %r292, %r254;
	mul.wide.s32 	%rd204, %r1090, 4;
	add.s64 	%rd206, %rd46, %rd204;
	st.shared.u32 	[%rd206], %r270;
	setp.eq.s32 	%p267, %r293, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4330
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1091, %r293, %r254;
	mul.wide.s32 	%rd207, %r1091, 4;
	add.s64 	%rd209, %rd46, %rd207;
	st.shared.u32 	[%rd209], %r271;
	setp.eq.s32 	%p268, %r294, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4396
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1092, %r294, %r254;
	mul.wide.s32 	%rd210, %r1092, 4;
	add.s64 	%rd212, %rd46, %rd210;
	st.shared.u32 	[%rd212], %r272;
	setp.eq.s32 	%p269, %r295, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4462
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1093, %r295, %r254;
	mul.wide.s32 	%rd213, %r1093, 4;
	add.s64 	%rd215, %rd46, %rd213;
	st.shared.u32 	[%rd215], %r273;
	setp.eq.s32 	%p270, %r296, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4528
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1094, %r296, %r254;
	mul.wide.s32 	%rd216, %r1094, 4;
	add.s64 	%rd218, %rd46, %rd216;
	st.shared.u32 	[%rd218], %r274;
	setp.eq.s32 	%p271, %r297, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4594
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1095, %r297, %r254;
	mul.wide.s32 	%rd219, %r1095, 4;
	add.s64 	%rd221, %rd46, %rd219;
	st.shared.u32 	[%rd221], %r275;
	setp.eq.s32 	%p272, %r298, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4661
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1096, 0, %r276, %p273;
	add.s32 	%r1097, %r298, %r254;
	mul.wide.s32 	%rd222, %r1097, 4;
	add.s64 	%rd224, %rd46, %rd222;
	st.shared.u32 	[%rd224], %r1096;
	setp.eq.s32 	%p274, %r299, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4727
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1098, %r299, %r254;
	mul.wide.s32 	%rd225, %r1098, 4;
	add.s64 	%rd227, %rd46, %rd225;
	mov.u32 	%r3668, 0;
	st.shared.u32 	[%rd227], %r3668;
	setp.eq.s32 	%p275, %r300, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4792
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1101, %r300, %r254;
	mul.wide.s32 	%rd228, %r1101, 4;
	add.s64 	%rd230, %rd46, %rd228;
	st.shared.u32 	[%rd230], %r3668;
	bar.sync 	0;
	mov.u32 	%r3669, %r3668;
	mov.u32 	%r3670, %r3668;
	mov.u32 	%r3671, %r3668;
	mov.u32 	%r3672, %r3668;
	mov.u32 	%r3673, %r3668;
	mov.u32 	%r3674, %r3668;
	mov.u32 	%r3675, %r3668;
	mov.u32 	%r3676, %r3668;
	mov.u32 	%r3677, %r3668;
	mov.u32 	%r3678, %r3668;
	mov.u32 	%r3679, %r3668;
	mov.u32 	%r3680, %r3668;
	mov.u32 	%r3681, %r3668;
	mov.u32 	%r3682, %r3668;
	mov.u32 	%r3683, %r3668;
	mov.u32 	%r3684, %r3668;
	mov.u32 	%r3685, %r3668;
	mov.u32 	%r3686, %r3668;
	mov.u32 	%r3687, %r3668;
	mov.u32 	%r3688, %r3668;
	mov.u32 	%r3689, %r3668;
	mov.u32 	%r3690, %r3668;
	mov.u32 	%r3691, %r3668;
	@%p91 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs82, %r253;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1102, %rs88;
	mul.wide.s32 	%rd231, %r1102, 4;
	add.s64 	%rd232, %rd12, %rd231;
	ld.shared.u32 	%r3668, [%rd232];
	ld.shared.u32 	%r3669, [%rd12+4];
	ld.shared.u32 	%r3670, [%rd12+8];
	ld.shared.u32 	%r3671, [%rd12+12];
	ld.shared.u32 	%r3672, [%rd12+16];
	ld.shared.u32 	%r3673, [%rd12+20];
	ld.shared.u32 	%r3674, [%rd12+24];
	ld.shared.u32 	%r3675, [%rd12+28];
	ld.shared.u32 	%r3676, [%rd12+32];
	ld.shared.u32 	%r3677, [%rd12+36];
	ld.shared.u32 	%r3678, [%rd12+40];
	ld.shared.u32 	%r3679, [%rd12+44];
	ld.shared.u32 	%r3680, [%rd12+48];
	ld.shared.u32 	%r3681, [%rd12+52];
	ld.shared.u32 	%r3682, [%rd12+56];
	ld.shared.u32 	%r3683, [%rd12+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1103, %rs95;
	mul.wide.s32 	%rd233, %r1103, 4;
	add.s64 	%rd234, %rd12, %rd233;
	ld.shared.u32 	%r3684, [%rd234];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1104, %rs102;
	mul.wide.s32 	%rd235, %r1104, 4;
	add.s64 	%rd236, %rd12, %rd235;
	ld.shared.u32 	%r3685, [%rd236];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1105, %rs109;
	mul.wide.s32 	%rd237, %r1105, 4;
	add.s64 	%rd238, %rd12, %rd237;
	ld.shared.u32 	%r3686, [%rd238];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1106, %rs116;
	mul.wide.s32 	%rd239, %r1106, 4;
	add.s64 	%rd240, %rd12, %rd239;
	ld.shared.u32 	%r3687, [%rd240];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1107, %rs123;
	mul.wide.s32 	%rd241, %r1107, 4;
	add.s64 	%rd242, %rd12, %rd241;
	ld.shared.u32 	%r3688, [%rd242];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1108, %rs130;
	mul.wide.s32 	%rd243, %r1108, 4;
	add.s64 	%rd244, %rd12, %rd243;
	ld.shared.u32 	%r3689, [%rd244];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1109, %rs137;
	mul.wide.s32 	%rd245, %r1109, 4;
	add.s64 	%rd246, %rd12, %rd245;
	ld.shared.u32 	%r3690, [%rd246];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1110, %rs144;
	mul.wide.s32 	%rd247, %r1110, 4;
	add.s64 	%rd248, %rd12, %rd247;
	ld.shared.u32 	%r3691, [%rd248];
$L__BB0_176:                            // %L14073
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3692, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L19821
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3693, 0;
	mov.u32 	%r3695, %r3693;
	mov.u32 	%r3696, %r3693;
$L__BB0_185:                            // %L19822
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3692, %r3692, -4;
	setp.ne.s32 	%p295, %r3692, -12;
	@%p295 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L14099
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3692, 12;
	selp.b32 	%r1649, %r3668, 0, %p278;
	setp.eq.s32 	%p279, %r3692, 8;
	selp.b32 	%r1650, %r3672, %r1649, %p279;
	setp.eq.s32 	%p280, %r3692, 4;
	selp.b32 	%r1651, %r3676, %r1650, %p280;
	setp.eq.s32 	%p281, %r3692, 0;
	selp.b32 	%r1652, %r3680, %r1651, %p281;
	setp.eq.s32 	%p282, %r3692, -4;
	selp.b32 	%r1653, %r3684, %r1652, %p282;
	setp.eq.s32 	%p283, %r3692, -8;
	selp.b32 	%r1654, %r3688, %r1653, %p283;
	selp.b32 	%r1655, %r3669, 0, %p278;
	selp.b32 	%r1656, %r3673, %r1655, %p279;
	selp.b32 	%r1657, %r3677, %r1656, %p280;
	selp.b32 	%r1658, %r3681, %r1657, %p281;
	selp.b32 	%r1659, %r3685, %r1658, %p282;
	selp.b32 	%r1660, %r3689, %r1659, %p283;
	selp.b32 	%r1661, %r3670, 0, %p278;
	selp.b32 	%r1662, %r3674, %r1661, %p279;
	selp.b32 	%r1663, %r3678, %r1662, %p280;
	selp.b32 	%r1664, %r3682, %r1663, %p281;
	selp.b32 	%r1665, %r3686, %r1664, %p282;
	selp.b32 	%r1666, %r3690, %r1665, %p283;
	selp.b32 	%r1667, %r3671, 0, %p278;
	selp.b32 	%r1668, %r3675, %r1667, %p279;
	selp.b32 	%r1669, %r3679, %r1668, %p280;
	selp.b32 	%r1670, %r3683, %r1669, %p281;
	selp.b32 	%r1671, %r3687, %r1670, %p282;
	selp.b32 	%r1672, %r3691, %r1671, %p283;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1117, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1128, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1116, %r1654, -2004318072;
	mov.u32 	%r1253, 983055;
	// begin inline asm
	lop3.b32 %r1114, %r1253, %r1116, %r1117, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1118, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1117, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	mov.u32 	%r1264, 15728880;
	// begin inline asm
	lop3.b32 %r1125, %r1264, %r1116, %r1128, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1129, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1130, %r1128, %r1129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1133, %r1125, %r1130;
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1174, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1162, %r1660, -2004318072;
	// begin inline asm
	lop3.b32 %r1160, %r1253, %r1162, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1165, %r1163, %r1164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1168, %r1160, %r1165;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1171, %r1264, %r1162, %r1174, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1175, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1176, %r1174, %r1175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1179, %r1171, %r1176;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1208, %r1666, -2004318072;
	// begin inline asm
	lop3.b32 %r1206, %r1253, %r1208, %r1209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1210, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1211, %r1209, %r1210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1214, %r1206, %r1211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1217, %r1264, %r1208, %r1220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1222, %r1220, %r1221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1225, %r1217, %r1222;
	// end inline asm
	// begin inline asm
	mov.b32 %r1255, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1266, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1254, %r1672, -2004318072;
	// begin inline asm
	lop3.b32 %r1252, %r1253, %r1254, %r1255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1256, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1257, %r1255, %r1256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1260, %r1252, %r1257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1263, %r1264, %r1254, %r1266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1267, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1268, %r1266, %r1267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1271, %r1263, %r1268;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1122;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1296, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1133;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1168;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1302, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1179;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1305, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1308, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1311, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1314, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1317, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1648, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r389, %r392}, {%r1296}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1392, %r1389}, {%r389, %r392}, {%r1299}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1398}, {%r389, %r392}, {%r1302}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r389, %r392}, {%r1305}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r389, %r392}, {%r1308}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1425}, {%r389, %r392}, {%r1311}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1434}, {%r389, %r392}, {%r1314}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1446, %r1443}, {%r389, %r392}, {%r1317}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r441, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1385, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r441, %r1392, %r1387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r1394, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r441, %r1401, %r1396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r441, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r441, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r1421, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r441, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r1430, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r441, %r1437, %r1432;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1439, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r1439, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r441, %r1446, %r1441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r444, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r441, %r1380, %r1448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r444, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r441, %r1389, %r1455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r444, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r441, %r1398, %r1462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r444, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r441, %r1407, %r1469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r444, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r441, %r1416, %r1476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1483, %r444, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r441, %r1425, %r1483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r444, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r441, %r1434, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r444, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r441, %r1443, %r1497;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1505}, {%r485, %r491, %r488, %r494}, {%r1381, %r1451}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1514, %r1515}, {%r485, %r491, %r488, %r494}, {%r1390, %r1458}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1524, %r1525}, {%r485, %r491, %r488, %r494}, {%r1399, %r1465}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1534, %r1535}, {%r485, %r491, %r488, %r494}, {%r1408, %r1472}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1544, %r1545}, {%r485, %r491, %r488, %r494}, {%r1417, %r1479}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1554, %r1555}, {%r485, %r491, %r488, %r494}, {%r1426, %r1486}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1564, %r1565}, {%r485, %r491, %r488, %r494}, {%r1435, %r1493}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1574, %r1575}, {%r485, %r491, %r488, %r494}, {%r1444, %r1500}, {%r1648, %r1648};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3697, %r1648;
	mov.u32 	%r3698, %r1648;
	mov.u32 	%r3699, %r1648;
	mov.u32 	%r3700, %r1648;
	@%p277 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %oksrem6293
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3697, [%rd7];
	ld.shared.u32 	%r3698, [%rd8];
	ld.shared.u32 	%r3699, [%rd9+128];
	ld.shared.u32 	%r3700, [%rd10+128];
$L__BB0_178:                            // %L15720
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1708, %r1705}, {%r503, %r506}, {%r3697}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1717, %r1714}, {%r503, %r506}, {%r3698}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1726, %r1723}, {%r503, %r506}, {%r3699}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r503, %r506}, {%r3700}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r555, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1710, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r1710, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r555, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1719, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1719, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r555, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r555, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r558, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r555, %r1705, %r1737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r558, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r555, %r1714, %r1744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r558, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r555, %r1723, %r1751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r558, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r555, %r1732, %r1758;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1809}, {%r599, %r605, %r602, %r608}, {%r1706, %r1740}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1828}, {%r599, %r605, %r602, %r608}, {%r1715, %r1747}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1813, %r1817}, {%r599, %r605, %r602, %r608}, {%r1724, %r1754}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1836}, {%r599, %r605, %r602, %r608}, {%r1733, %r1761}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1806, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1812;
	// end inline asm
	mov.u32 	%r1840, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1840, %r1816, %r3696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r1825, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1828, %r1828, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1835, %r3695;
	// end inline asm
	mov.u32 	%r3701, %r1648;
	mov.u32 	%r3702, %r1648;
	mov.u32 	%r3703, %r1648;
	mov.u32 	%r3704, %r1648;
	@%p277 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %oksrem6894
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3701, [%rd13];
	ld.shared.u32 	%r3702, [%rd14];
	ld.shared.u32 	%r3703, [%rd15];
	ld.shared.u32 	%r3704, [%rd16];
$L__BB0_179:                            // %L16927
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1879, %r1876}, {%r503, %r506}, {%r3701}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1888, %r1885}, {%r503, %r506}, {%r3702}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r503, %r506}, {%r3703}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1906, %r1903}, {%r503, %r506}, {%r3704}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1872, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1872, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r555, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r1881, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r555, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r555, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1899, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r555, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r558, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r555, %r1876, %r1908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r558, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r555, %r1885, %r1915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r558, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r555, %r1894, %r1922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r558, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r555, %r1903, %r1929;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1977, %r1980}, {%r599, %r605, %r602, %r608}, {%r1877, %r1911}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1996, %r1999}, {%r599, %r605, %r602, %r608}, {%r1886, %r1918}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1984, %r1988}, {%r599, %r605, %r602, %r608}, {%r1895, %r1925}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2003, %r2007}, {%r599, %r605, %r602, %r608}, {%r1904, %r1932}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r1977, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r1980, %r1980, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1984, %r1984, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1988, %r1988, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r1840, %r1987, %r1820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r1996, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r1840, %r2006, %r1839;
	// end inline asm
	mov.u32 	%r3705, %r1648;
	mov.u32 	%r3706, %r1648;
	mov.u32 	%r3707, %r1648;
	mov.u32 	%r3708, %r1648;
	@%p277 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %oksrem7495
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3705, [%rd17];
	ld.shared.u32 	%r3706, [%rd18];
	ld.shared.u32 	%r3707, [%rd19];
	ld.shared.u32 	%r3708, [%rd20];
$L__BB0_180:                            // %L18134
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2050, %r2047}, {%r503, %r506}, {%r3705}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2059, %r2056}, {%r503, %r506}, {%r3706}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2068, %r2065}, {%r503, %r506}, {%r3707}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2077, %r2074}, {%r503, %r506}, {%r3708}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2043, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r2043, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r555, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2052, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r2052, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r555, %r2059, %r2054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2061, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2063, %r2061, %r2065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r555, %r2068, %r2063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2070, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2072, %r2070, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r555, %r2077, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r558, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r555, %r2047, %r2079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2086, %r558, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2089, %r555, %r2056, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2093, %r558, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2096, %r555, %r2065, %r2093;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r558, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r555, %r2074, %r2100;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2148, %r2151}, {%r599, %r605, %r602, %r608}, {%r2048, %r2082}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2167, %r2170}, {%r599, %r605, %r602, %r608}, {%r2057, %r2089}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2155, %r2159}, {%r599, %r605, %r602, %r608}, {%r2066, %r2096}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2174, %r2178}, {%r599, %r605, %r602, %r608}, {%r2075, %r2103}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r2148, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r2151, %r2151, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r2155, %r2155, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r2159, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r1840, %r2158, %r1991;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r2167, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r2170, %r2170, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r2174, %r2174, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r2178, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r1840, %r2177, %r2010;
	// end inline asm
	mov.u32 	%r3709, %r1648;
	mov.u32 	%r3710, %r1648;
	mov.u32 	%r3711, %r1648;
	mov.u32 	%r3712, %r1648;
	@%p277 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %oksrem8096
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3709, [%rd21];
	ld.shared.u32 	%r3710, [%rd22];
	ld.shared.u32 	%r3711, [%rd23];
	ld.shared.u32 	%r3712, [%rd24];
$L__BB0_181:                            // %L19341
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2221, %r2218}, {%r503, %r506}, {%r3709}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2230, %r2227}, {%r503, %r506}, {%r3710}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2239, %r2236}, {%r503, %r506}, {%r3711}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2248, %r2245}, {%r503, %r506}, {%r3712}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2214, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r2214, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r555, %r2221, %r2216;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2223, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2225, %r2223, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r555, %r2230, %r2225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2232, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2234, %r2232, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2237, %r555, %r2239, %r2234;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2241, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r2241, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r555, %r2248, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r558, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r555, %r2218, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r558, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r555, %r2227, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r558, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r555, %r2236, %r2264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r558, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r555, %r2245, %r2271;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2319, %r2322}, {%r599, %r605, %r602, %r608}, {%r2219, %r2253}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2338, %r2341}, {%r599, %r605, %r602, %r608}, {%r2228, %r2260}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2326, %r2330}, {%r599, %r605, %r602, %r608}, {%r2237, %r2267}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2345, %r2349}, {%r599, %r605, %r602, %r608}, {%r2246, %r2274}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2318, %r2319, %r2319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2321, %r2322, %r2322, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r2326, %r2326, %r2321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r2330, %r2330, %r2325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3696, %r1840, %r2329, %r2162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2337, %r2338, %r2338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2340, %r2341, %r2341, %r2337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2344, %r2345, %r2345, %r2340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r2349, %r2349, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r1840, %r2348, %r2181;
	// end inline asm
	add.s32 	%r3693, %r3693, 4;
	setp.ne.s32 	%p287, %r3693, 40;
	@%p287 bra 	$L__BB0_185;
// %bb.182:                             // %L19491
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_184;
// %bb.183:                             // %L19551
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2356, %r3694, 884736;
	add.s32 	%r2357, %r117, %r2356;
	cvt.s64.s32 	%rd249, %r2357;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 341606371735362067;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 23;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p289, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 452984832;
	setp.ne.s64 	%p290, %rd255, %rd250;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd256, -1, 0, %p291;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -452984832;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3696;
	add.s32 	%r2358, %r118, %r2356;
	cvt.s64.s32 	%rd262, %r2358;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 341606371735362067;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 23;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p292, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 452984832;
	setp.ne.s64 	%p293, %rd268, %rd263;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd269, -1, 0, %p294;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -452984832;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3695;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L19847.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3717, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L25569
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3693, 0;
	mov.u32 	%r3695, %r3693;
	mov.u32 	%r3696, %r3693;
$L__BB0_195:                            // %L25570
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3717, %r3717, -4;
	setp.ne.s32 	%p314, %r3717, -12;
	@%p314 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L19847
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p297, %r3717, 12;
	selp.b32 	%r2898, %r3668, 0, %p297;
	setp.eq.s32 	%p298, %r3717, 8;
	selp.b32 	%r2899, %r3672, %r2898, %p298;
	setp.eq.s32 	%p299, %r3717, 4;
	selp.b32 	%r2900, %r3676, %r2899, %p299;
	setp.eq.s32 	%p300, %r3717, 0;
	selp.b32 	%r2901, %r3680, %r2900, %p300;
	setp.eq.s32 	%p301, %r3717, -4;
	selp.b32 	%r2902, %r3684, %r2901, %p301;
	setp.eq.s32 	%p302, %r3717, -8;
	selp.b32 	%r2903, %r3688, %r2902, %p302;
	selp.b32 	%r2904, %r3669, 0, %p297;
	selp.b32 	%r2905, %r3673, %r2904, %p298;
	selp.b32 	%r2906, %r3677, %r2905, %p299;
	selp.b32 	%r2907, %r3681, %r2906, %p300;
	selp.b32 	%r2908, %r3685, %r2907, %p301;
	selp.b32 	%r2909, %r3689, %r2908, %p302;
	selp.b32 	%r2910, %r3670, 0, %p297;
	selp.b32 	%r2911, %r3674, %r2910, %p298;
	selp.b32 	%r2912, %r3678, %r2911, %p299;
	selp.b32 	%r2913, %r3682, %r2912, %p300;
	selp.b32 	%r2914, %r3686, %r2913, %p301;
	selp.b32 	%r2915, %r3690, %r2914, %p302;
	selp.b32 	%r2916, %r3671, 0, %p297;
	selp.b32 	%r2917, %r3675, %r2916, %p298;
	selp.b32 	%r2918, %r3679, %r2917, %p299;
	selp.b32 	%r2919, %r3683, %r2918, %p300;
	selp.b32 	%r2920, %r3687, %r2919, %p301;
	selp.b32 	%r2921, %r3691, %r2920, %p302;
	// begin inline asm
	mov.b32 %r2388, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2399, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2922, %r2903, 8;
	xor.b32  	%r2398, %r2922, 8947848;
	// begin inline asm
	lop3.b32 %r2385, %r1253, %r2398, %r2388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2388, %r2389;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2393, %r2385, %r2390;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2396, %r1264, %r2398, %r2399, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2400, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2399, %r2400;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2404, %r2396, %r2401;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2445, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2923, %r2909, 8;
	xor.b32  	%r2444, %r2923, 8947848;
	// begin inline asm
	lop3.b32 %r2431, %r1253, %r2444, %r2434, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2435, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2436, %r2434, %r2435;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2439, %r2431, %r2436;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2442, %r1264, %r2444, %r2445, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2446, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2447, %r2445, %r2446;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2450, %r2442, %r2447;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2491, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2924, %r2915, 8;
	xor.b32  	%r2490, %r2924, 8947848;
	// begin inline asm
	lop3.b32 %r2477, %r1253, %r2490, %r2480, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2481, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2482, %r2480, %r2481;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2485, %r2477, %r2482;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2488, %r1264, %r2490, %r2491, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2492, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2493, %r2491, %r2492;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2496, %r2488, %r2493;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2537, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2925, %r2921, 8;
	xor.b32  	%r2536, %r2925, 8947848;
	// begin inline asm
	lop3.b32 %r2523, %r1253, %r2536, %r2526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2527, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2528, %r2526, %r2527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2531, %r2523, %r2528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2534, %r1264, %r2536, %r2537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2538, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2539, %r2537, %r2538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2542, %r2534, %r2539;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2393;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2545, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2404;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2548, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2439;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2551, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2450;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2554, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2485;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2557, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2496;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2560, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2531;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2563, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2542;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2566, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2897, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2632, %r2629}, {%r389, %r392}, {%r2545}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2641, %r2638}, {%r389, %r392}, {%r2548}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2650, %r2647}, {%r389, %r392}, {%r2551}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2659, %r2656}, {%r389, %r392}, {%r2554}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2668, %r2665}, {%r389, %r392}, {%r2557}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2677, %r2674}, {%r389, %r392}, {%r2560}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2686, %r2683}, {%r389, %r392}, {%r2563}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2695, %r2692}, {%r389, %r392}, {%r2566}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2625, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2627, %r2625, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2630, %r441, %r2632, %r2627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2634, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r2634, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2639, %r441, %r2641, %r2636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2643, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r2643, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2648, %r441, %r2650, %r2645;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r441, %r2659, %r2654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r441, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r441, %r2677, %r2672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r441, %r2686, %r2681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2688, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r441, %r2695, %r2690;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r444, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r441, %r2629, %r2697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r444, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r441, %r2638, %r2704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r444, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r441, %r2647, %r2711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r444, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r441, %r2656, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r444, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r441, %r2665, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r444, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r441, %r2674, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r444, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r441, %r2683, %r2739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r444, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r441, %r2692, %r2746;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2754}, {%r485, %r491, %r488, %r494}, {%r2630, %r2700}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2763, %r2764}, {%r485, %r491, %r488, %r494}, {%r2639, %r2707}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2773, %r2774}, {%r485, %r491, %r488, %r494}, {%r2648, %r2714}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2783, %r2784}, {%r485, %r491, %r488, %r494}, {%r2657, %r2721}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2793, %r2794}, {%r485, %r491, %r488, %r494}, {%r2666, %r2728}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2803, %r2804}, {%r485, %r491, %r488, %r494}, {%r2675, %r2735}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2813, %r2814}, {%r485, %r491, %r488, %r494}, {%r2684, %r2742}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2823, %r2824}, {%r485, %r491, %r488, %r494}, {%r2693, %r2749}, {%r2897, %r2897};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3722, %r2897;
	mov.u32 	%r3723, %r2897;
	mov.u32 	%r3724, %r2897;
	mov.u32 	%r3725, %r2897;
	@%p277 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem8891
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3725, [%rd7];
	ld.shared.u32 	%r3724, [%rd8];
	ld.shared.u32 	%r3723, [%rd9+128];
	ld.shared.u32 	%r3722, [%rd10+128];
$L__BB0_188:                            // %L21468
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2961, %r2958}, {%r503, %r506}, {%r3725}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2970, %r2967}, {%r503, %r506}, {%r3724}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2979, %r2976}, {%r503, %r506}, {%r3723}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2988, %r2985}, {%r503, %r506}, {%r3722}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2954, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2956, %r2954, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r555, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2963, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r2963, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r555, %r2970, %r2965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2972, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r2972, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r555, %r2979, %r2974;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2981, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r2981, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r555, %r2988, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r558, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r555, %r2958, %r2990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2997, %r558, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r555, %r2967, %r2997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r558, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r555, %r2976, %r3004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3011, %r558, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r555, %r2985, %r3011;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3059, %r3062}, {%r599, %r605, %r602, %r608}, {%r2959, %r2993}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3078, %r3081}, {%r599, %r605, %r602, %r608}, {%r2968, %r3000}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3066, %r3070}, {%r599, %r605, %r602, %r608}, {%r2977, %r3007}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3085, %r3089}, {%r599, %r605, %r602, %r608}, {%r2986, %r3014}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3058, %r3059, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r3070, %r3070, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r1840, %r3069, %r3696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r3078, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r1840, %r3088, %r3695;
	// end inline asm
	mov.u32 	%r3726, %r2897;
	mov.u32 	%r3727, %r2897;
	mov.u32 	%r3728, %r2897;
	mov.u32 	%r3729, %r2897;
	@%p277 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_189;
$L__BB0_256:                            // %oksrem9492
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3729, [%rd13];
	ld.shared.u32 	%r3728, [%rd14];
	ld.shared.u32 	%r3727, [%rd15];
	ld.shared.u32 	%r3726, [%rd16];
$L__BB0_189:                            // %L22675
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3132, %r3129}, {%r503, %r506}, {%r3729}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3141, %r3138}, {%r503, %r506}, {%r3728}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3150, %r3147}, {%r503, %r506}, {%r3727}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3159, %r3156}, {%r503, %r506}, {%r3726}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3125, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3127, %r3125, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r555, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3134, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r3134, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r555, %r3141, %r3136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3143, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r3143, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r555, %r3150, %r3145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3152, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3154, %r3152, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r555, %r3159, %r3154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3161, %r558, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r555, %r3129, %r3161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r558, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r555, %r3138, %r3168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3175, %r558, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r555, %r3147, %r3175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3182, %r558, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r555, %r3156, %r3182;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3230, %r3233}, {%r599, %r605, %r602, %r608}, {%r3130, %r3164}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3249, %r3252}, {%r599, %r605, %r602, %r608}, {%r3139, %r3171}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3237, %r3241}, {%r599, %r605, %r602, %r608}, {%r3148, %r3178}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3256, %r3260}, {%r599, %r605, %r602, %r608}, {%r3157, %r3185}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r3230, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3237, %r3237, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r3241, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r1840, %r3240, %r3073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3248, %r3249, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3252, %r3252, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r1840, %r3259, %r3092;
	// end inline asm
	mov.u32 	%r3730, %r2897;
	mov.u32 	%r3731, %r2897;
	mov.u32 	%r3732, %r2897;
	mov.u32 	%r3733, %r2897;
	@%p277 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_190;
$L__BB0_257:                            // %oksrem10093
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3733, [%rd17];
	ld.shared.u32 	%r3732, [%rd18];
	ld.shared.u32 	%r3731, [%rd19];
	ld.shared.u32 	%r3730, [%rd20];
$L__BB0_190:                            // %L23882
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3303, %r3300}, {%r503, %r506}, {%r3733}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3312, %r3309}, {%r503, %r506}, {%r3732}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3321, %r3318}, {%r503, %r506}, {%r3731}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3330, %r3327}, {%r503, %r506}, {%r3730}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3296, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3298, %r3296, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r555, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3305, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r3305, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r555, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3314, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3316, %r3314, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r555, %r3321, %r3316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3323, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3325, %r3323, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r555, %r3330, %r3325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3332, %r558, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3335, %r555, %r3300, %r3332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3339, %r558, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3342, %r555, %r3309, %r3339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3346, %r558, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3349, %r555, %r3318, %r3346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3353, %r558, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3356, %r555, %r3327, %r3353;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3401, %r3404}, {%r599, %r605, %r602, %r608}, {%r3301, %r3335}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3420, %r3423}, {%r599, %r605, %r602, %r608}, {%r3310, %r3342}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3408, %r3412}, {%r599, %r605, %r602, %r608}, {%r3319, %r3349}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3427, %r3431}, {%r599, %r605, %r602, %r608}, {%r3328, %r3356}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r3401, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r3404, %r3404, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r3408, %r3408, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r3412, %r3412, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r1840, %r3411, %r3244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3419, %r3420, %r3420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r3423, %r3423, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3426, %r3427, %r3427, %r3422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r3431, %r3431, %r3426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3434, %r1840, %r3430, %r3263;
	// end inline asm
	mov.u32 	%r3734, %r2897;
	mov.u32 	%r3735, %r2897;
	mov.u32 	%r3736, %r2897;
	mov.u32 	%r3737, %r2897;
	@%p277 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_191;
$L__BB0_258:                            // %oksrem10694
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3737, [%rd21];
	ld.shared.u32 	%r3736, [%rd22];
	ld.shared.u32 	%r3735, [%rd23];
	ld.shared.u32 	%r3734, [%rd24];
$L__BB0_191:                            // %L25089
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3474, %r3471}, {%r503, %r506}, {%r3737}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3483, %r3480}, {%r503, %r506}, {%r3736}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3492, %r3489}, {%r503, %r506}, {%r3735}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3501, %r3498}, {%r503, %r506}, {%r3734}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3467, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3469, %r3467, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r555, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3476, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3478, %r3476, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r555, %r3483, %r3478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3485, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3487, %r3485, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r555, %r3492, %r3487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3494, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r3494, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r555, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3503, %r558, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r555, %r3471, %r3503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3510, %r558, %r3483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r555, %r3480, %r3510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3517, %r558, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r555, %r3489, %r3517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3524, %r558, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r555, %r3498, %r3524;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3572, %r3575}, {%r599, %r605, %r602, %r608}, {%r3472, %r3506}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3591, %r3594}, {%r599, %r605, %r602, %r608}, {%r3481, %r3513}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3579, %r3583}, {%r599, %r605, %r602, %r608}, {%r3490, %r3520}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3598, %r3602}, {%r599, %r605, %r602, %r608}, {%r3499, %r3527}, {%r2897, %r2897};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r3572, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r3575, %r3575, %r3571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r3579, %r3579, %r3574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r3583, %r3583, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3696, %r1840, %r3582, %r3415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r3591, %r3591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r3594, %r3594, %r3590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r3598, %r3598, %r3593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3601, %r3602, %r3602, %r3597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r1840, %r3601, %r3434;
	// end inline asm
	add.s32 	%r3693, %r3693, 4;
	setp.ne.s32 	%p306, %r3693, 40;
	@%p306 bra 	$L__BB0_195;
// %bb.192:                             // %L25239
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p91 bra 	$L__BB0_194;
// %bb.193:                             // %L25299
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3609, %r3694, 884736;
	add.s32 	%r3610, %r117, %r3609;
	cvt.s64.s32 	%rd275, %r3610;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 341606371735362067;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 23;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p308, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 452984832;
	setp.ne.s64 	%p309, %rd281, %rd276;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd282, -1, 0, %p310;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -452984832;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3696;
	add.s32 	%r3611, %r118, %r3609;
	cvt.s64.s32 	%rd288, %r3611;
	add.s64 	%rd289, %rd288, %rd11;
	mul.hi.s64 	%rd290, %rd289, 341606371735362067;
	shr.u64 	%rd291, %rd290, 63;
	shr.s64 	%rd292, %rd290, 23;
	add.s64 	%rd293, %rd292, %rd291;
	setp.lt.s64 	%p311, %rd289, 0;
	mul.lo.s64 	%rd294, %rd293, 452984832;
	setp.ne.s64 	%p312, %rd294, %rd289;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd295, -1, 0, %p313;
	add.s64 	%rd296, %rd293, %rd295;
	mul.lo.s64 	%rd297, %rd296, -452984832;
	add.s64 	%rd298, %rd297, %rd289;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd300, %rd4, %rd299;
	st.global.u32 	[%rd300], %r3695;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L25605
	mov.u32 	%r3613, 0;
	st.global.u32 	[%rd6], %r3613;
	ret;
$L__BB0_152:                            // %L7444
	mov.u32 	%r3637, 5;
	st.global.u32 	[%rd6], %r3637;
	mov.u64 	%rd347, exception2169;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7606
	mov.u32 	%r3636, 5;
	st.global.u32 	[%rd6], %r3636;
	mov.u64 	%rd345, exception2169;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7768
	mov.u32 	%r3635, 5;
	st.global.u32 	[%rd6], %r3635;
	mov.u64 	%rd343, exception2169;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7930
	mov.u32 	%r3634, 5;
	st.global.u32 	[%rd6], %r3634;
	mov.u64 	%rd341, exception2169;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8092
	mov.u32 	%r3633, 5;
	st.global.u32 	[%rd6], %r3633;
	mov.u64 	%rd339, exception2169;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8254
	mov.u32 	%r3632, 5;
	st.global.u32 	[%rd6], %r3632;
	mov.u64 	%rd337, exception2169;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8416
	mov.u32 	%r3631, 5;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd335, exception2169;
	cvta.global.u64 	%rd336, %rd335;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd336;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8578
	mov.u32 	%r3630, 5;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd333, exception2169;
	cvta.global.u64 	%rd334, %rd333;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd334;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8740
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd331, exception2169;
	cvta.global.u64 	%rd332, %rd331;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd332;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8902
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd329, exception2169;
	cvta.global.u64 	%rd330, %rd329;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd330;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9064
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd327, exception2169;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9226
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd325, exception2169;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9388
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd323, exception2169;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9550
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd321, exception2169;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9712
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd319, exception2169;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9874
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd317, exception2169;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10036
	mov.u32 	%r3621, 5;
	st.global.u32 	[%rd6], %r3621;
	mov.u64 	%rd315, exception2169;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10198
	mov.u32 	%r3620, 5;
	st.global.u32 	[%rd6], %r3620;
	mov.u64 	%rd313, exception2169;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10360
	mov.u32 	%r3619, 5;
	st.global.u32 	[%rd6], %r3619;
	mov.u64 	%rd311, exception2169;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10522
	mov.u32 	%r3618, 5;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd309, exception2169;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10684
	mov.u32 	%r3617, 5;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd307, exception2169;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10872
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd305, exception2169;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11034
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd303, exception2169;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11196
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd301, exception2169;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r3639, 2;
	st.global.u32 	[%rd6], %r3639;
	mov.u64 	%rd351, exception2169;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L311
	mov.u32 	%r3638, 3;
	st.global.u32 	[%rd6], %r3638;
	mov.u64 	%rd349, exception2169;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception12180;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1150
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r619, [retval0+0];
	} // callseq 61
	mov.u32 	%r621, 4;
	st.global.u32 	[%rd6], %r621;
	mov.u64 	%rd39, exception2169;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r357;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
