// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1911[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1951[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<317>;
	.reg .b16 	%rs<180>;
	.reg .b32 	%r<3092>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<327>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r281, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r290, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r290, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	mov.u32 	%r291, %tid.x;
	add.s32 	%r292, %r2, %r4;
	or.b32  	%r293, %r292, %r291;
	mul.wide.u32 	%rd20, %r293, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r294, 1;
	st.global.u32 	[%rd6], %r294;
	setp.gt.u32 	%p5, %r282, 4095;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r283, %r282;
	setp.gt.s32 	%p7, %r283, 8191;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r283, %r282;
	mad.lo.s32 	%r295, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r296, %r295, %r295, 4;
	setp.gt.u32 	%p9, %r296, 89478484;
	setp.gt.u32 	%p10, %r284, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r285, %r284;
	setp.lt.s32 	%p13, %r285, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r297, %r285, %r284;
	shr.s32 	%r298, %r6, 31;
	shr.u32 	%r299, %r298, 27;
	add.s32 	%r300, %r6, %r299;
	shr.s32 	%r301, %r300, 5;
	setp.eq.s32 	%p15, %r297, %r301;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r286, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r287, %r286;
	setp.gt.s32 	%p18, %r287, 512;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r287, %r286;
	and.b32  	%r302, %r7, 7;
	setp.ne.s32 	%p20, %r302, 0;
	setp.lt.s32 	%p21, %r288, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r289, %r288;
	setp.gt.s32 	%p24, %r289, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r303, %r289, %r288;
	and.b32  	%r304, %r303, 7;
	setp.eq.s32 	%p26, %r304, 0;
	setp.eq.s32 	%p27, %r303, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_13;
$L__BB0_175:                            // %pass162
	and.b32  	%r144, %r291, 3;
	shr.u32 	%r145, %r291, 2;
	mul.lo.s32 	%r305, %r144, %r145;
	and.b32  	%r306, %r305, 7;
	cvt.rn.f32.s32 	%f205, %r306;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p316, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_187;
// %bb.176:
	@%p316 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_177;
$L__BB0_183:
	mov.b32 	%r147, %f788;
	and.b32  	%r307, %r147, 8388607;
	or.b32  	%r3075, %r307, 1065353216;
	mov.b32 	%f783, %r3075;
	add.s32 	%r308, %r147, -1073741824;
	and.b32  	%r3076, %r308, -8388608;
	setp.eq.s32 	%p36, %r3076, 0;
	@%p36 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3076, 192937984;
	add.s32 	%r310, %r3075, %r309;
	mov.b32 	%f217, %r310;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3076, %r3076, %r309;
	mov.b32 	%r3075, %f783;
	setp.ne.s32 	%p37, %r3076, 0;
	setp.ne.s32 	%p38, %r3075, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r147, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_187;
$L__BB0_177:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r146, %f172;
	setp.lt.u32 	%p31, %r146, 1073741824;
	@%p31 bra 	$L__BB0_182;
// %bb.178:
	setp.lt.u32 	%p32, %r146, -2147483647;
	@%p32 bra 	$L__BB0_180;
// %bb.179:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r311, %f169;
	and.b32  	%r154, %r311, -2147483648;
	@%p41 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r312, %f784;
	or.b32  	%r313, %r154, %r312;
	mov.b32 	%f784, %r313;
$L__BB0_189:                            // %__nv_fmodf.exit
	shl.b32 	%r157, %r291, 1;
	and.b32  	%r158, %r157, 2;
	mul.lo.s32 	%r328, %r158, %r145;
	cvt.rn.f32.s32 	%f259, %r328;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r329, %r9, 8388607;
	or.b32  	%r3025, %r329, 1065353216;
	mov.b32 	%f733, %r3025;
	add.s32 	%r330, %r9, -1073741824;
	and.b32  	%r3026, %r330, -8388608;
	setp.eq.s32 	%p56, %r3026, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3026, 192937984;
	add.s32 	%r332, %r3025, %r331;
	mov.b32 	%f271, %r332;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3026, %r3026, %r331;
	mov.b32 	%r3025, %f733;
	setp.ne.s32 	%p57, %r3026, 0;
	setp.ne.s32 	%p58, %r3025, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r159, %r158, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r333, %f186;
	and.b32  	%r334, %r333, -2147483648;
	mov.b32 	%r335, %f734;
	or.b32  	%r336, %r334, %r335;
	mov.b32 	%f734, %r336;
$L__BB0_27:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r159, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r345, %r159, %r145;
	mul.hi.u32 	%r346, %r345, -1431655765;
	shr.u32 	%r347, %r346, 4;
	mul.lo.s32 	%r348, %r347, 24;
	sub.s32 	%r349, %r345, %r348;
	cvt.rn.f32.s32 	%f311, %r349;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r350, %r17, 8388607;
	or.b32  	%r3027, %r350, 1065353216;
	mov.b32 	%f737, %r3027;
	add.s32 	%r351, %r17, -1073741824;
	and.b32  	%r3028, %r351, -8388608;
	setp.eq.s32 	%p77, %r3028, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r3028, 192937984;
	add.s32 	%r353, %r3027, %r352;
	mov.b32 	%f323, %r353;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3028, %r3028, %r352;
	mov.b32 	%r3027, %f737;
	setp.ne.s32 	%p78, %r3028, 0;
	setp.ne.s32 	%p79, %r3027, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r354, %f18;
	and.b32  	%r355, %r354, -2147483648;
	mov.b32 	%r356, %f738;
	or.b32  	%r357, %r355, %r356;
	mov.b32 	%f738, %r357;
$L__BB0_42:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r358, %f333;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f334, %r360;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r361, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r362, %r361, 1;
	setp.eq.b32 	%p85, %r362, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p86, %r363, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r364, %r361, 1;
	and.b32  	%r365, %r364, 2;
	setp.eq.s32 	%p87, %r365, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r145, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r372, %r158, %r26;
	cvt.u16.u32 	%rs9, %r372;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r373, %r28, 8388607;
	or.b32  	%r3029, %r373, 1065353216;
	mov.b32 	%f743, %r3029;
	add.s32 	%r374, %r28, -1073741824;
	and.b32  	%r3030, %r374, -8388608;
	setp.eq.s32 	%p98, %r3030, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r375, %r3030, 192937984;
	add.s32 	%r376, %r3029, %r375;
	mov.b32 	%f376, %r376;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3030, %r3030, %r375;
	mov.b32 	%r3029, %f743;
	setp.ne.s32 	%p99, %r3030, 0;
	setp.ne.s32 	%p100, %r3029, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r377, %f39;
	and.b32  	%r378, %r377, -2147483648;
	mov.b32 	%r379, %f744;
	or.b32  	%r380, %r378, %r379;
	mov.b32 	%f744, %r380;
$L__BB0_58:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r381, %f386;
	and.b32  	%r382, %r381, -2147483648;
	or.b32  	%r383, %r382, 1056964608;
	mov.b32 	%f387, %r383;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r384, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r385, %r384, 1;
	setp.eq.b32 	%p106, %r385, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r386, %r384, 2;
	setp.eq.s32 	%p107, %r386, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r387, %r384, 1;
	and.b32  	%r388, %r387, 2;
	setp.eq.s32 	%p108, %r388, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L637
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r389, %r159, %r26;
	mul.hi.u32 	%r390, %r389, -1431655765;
	shr.u32 	%r391, %r390, 1;
	mul.lo.s32 	%r392, %r391, 3;
	sub.s32 	%r393, %r389, %r392;
	cvt.rn.f32.s32 	%f417, %r393;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r394, %r36, 8388607;
	or.b32  	%r3031, %r394, 1065353216;
	mov.b32 	%f749, %r3031;
	add.s32 	%r395, %r36, -1073741824;
	and.b32  	%r3032, %r395, -8388608;
	setp.eq.s32 	%p121, %r3032, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r3032, 192937984;
	add.s32 	%r397, %r3031, %r396;
	mov.b32 	%f429, %r397;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3032, %r3032, %r396;
	mov.b32 	%r3031, %f749;
	setp.ne.s32 	%p122, %r3032, 0;
	setp.ne.s32 	%p123, %r3031, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r398, %f60;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f750;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f750, %r401;
$L__BB0_74:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r402, %f439;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f440, %r404;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r405, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p129, %r406, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p130, %r407, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r408, %r405, 1;
	and.b32  	%r409, %r408, 2;
	setp.eq.s32 	%p131, %r409, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r291, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p29 bra 	$L__BB0_197;
// %bb.78:
	@%p316 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_79;
$L__BB0_193:
	mov.b32 	%r161, %f788;
	and.b32  	%r416, %r161, 8388607;
	or.b32  	%r3077, %r416, 1065353216;
	mov.b32 	%f787, %r3077;
	add.s32 	%r417, %r161, -1073741824;
	and.b32  	%r3078, %r417, -8388608;
	setp.eq.s32 	%p142, %r3078, 0;
	@%p142 bra 	$L__BB0_196;
// %bb.194:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_195:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3078, 192937984;
	add.s32 	%r419, %r3077, %r418;
	mov.b32 	%f479, %r419;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3078, %r3078, %r418;
	mov.b32 	%r3077, %f787;
	setp.ne.s32 	%p143, %r3078, 0;
	setp.ne.s32 	%p144, %r3077, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_195;
$L__BB0_196:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p146, %r161, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_197;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r160, %f189;
	setp.lt.u32 	%p137, %r160, 1073741824;
	@%p137 bra 	$L__BB0_192;
// %bb.80:
	setp.lt.u32 	%p138, %r160, -2147483647;
	@%p138 bra 	$L__BB0_190;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_192;
$L__BB0_190:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_192;
// %bb.191:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_192:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_197:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_199;
// %bb.198:
	mov.b32 	%r420, %f788;
	or.b32  	%r421, %r154, %r420;
	mov.b32 	%f788, %r421;
$L__BB0_199:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r436, %r47, 8388607;
	or.b32  	%r3033, %r436, 1065353216;
	mov.b32 	%f759, %r3033;
	add.s32 	%r437, %r47, -1073741824;
	and.b32  	%r3034, %r437, -8388608;
	setp.eq.s32 	%p162, %r3034, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r3034, 192937984;
	add.s32 	%r439, %r3033, %r438;
	mov.b32 	%f532, %r439;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3034, %r3034, %r438;
	mov.b32 	%r3033, %f759;
	setp.ne.s32 	%p163, %r3034, 0;
	setp.ne.s32 	%p164, %r3033, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r440, %f203;
	and.b32  	%r441, %r440, -2147483648;
	mov.b32 	%r442, %f760;
	or.b32  	%r443, %r441, %r442;
	mov.b32 	%f760, %r443;
$L__BB0_95:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r145;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r452, %r55, 8388607;
	or.b32  	%r3035, %r452, 1065353216;
	mov.b32 	%f763, %r3035;
	add.s32 	%r453, %r55, -1073741824;
	and.b32  	%r3036, %r453, -8388608;
	setp.eq.s32 	%p182, %r3036, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3036, 192937984;
	add.s32 	%r455, %r3035, %r454;
	mov.b32 	%f584, %r455;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3036, %r3036, %r454;
	mov.b32 	%r3035, %f763;
	setp.ne.s32 	%p183, %r3036, 0;
	setp.ne.s32 	%p184, %r3035, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r456, %f104;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f764;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f764, %r459;
$L__BB0_109:                            // %__nv_fmodf.exit2180
	and.b32  	%r65, %r291, 1;
	shr.u32 	%r66, %r291, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r474, %r68, 8388607;
	or.b32  	%r3037, %r474, 1065353216;
	mov.b32 	%f767, %r3037;
	add.s32 	%r475, %r68, -1073741824;
	and.b32  	%r3038, %r475, -8388608;
	setp.eq.s32 	%p203, %r3038, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r476, %r3038, 192937984;
	add.s32 	%r477, %r3037, %r476;
	mov.b32 	%f638, %r477;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3038, %r3038, %r476;
	mov.b32 	%r3037, %f767;
	setp.ne.s32 	%p204, %r3038, 0;
	setp.ne.s32 	%p205, %r3037, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r478, %f121;
	and.b32  	%r479, %r478, -2147483648;
	mov.b32 	%r480, %f768;
	or.b32  	%r481, %r479, %r480;
	mov.b32 	%f768, %r481;
$L__BB0_124:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r482, %f648;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f649, %r484;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r485, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p211, %r486, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p212, %r487, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p213, %r489, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r145, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r490, %r76, 8388607;
	or.b32  	%r3039, %r490, 1065353216;
	mov.b32 	%f773, %r3039;
	add.s32 	%r491, %r76, -1073741824;
	and.b32  	%r3040, %r491, -8388608;
	setp.eq.s32 	%p224, %r3040, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r492, %r3040, 192937984;
	add.s32 	%r493, %r3039, %r492;
	mov.b32 	%f691, %r493;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3040, %r3040, %r492;
	mov.b32 	%r3039, %f773;
	setp.ne.s32 	%p225, %r3040, 0;
	setp.ne.s32 	%p226, %r3039, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r494, %f142;
	and.b32  	%r495, %r494, -2147483648;
	mov.b32 	%r496, %f774;
	or.b32  	%r497, %r495, %r496;
	mov.b32 	%f774, %r497;
$L__BB0_140:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r498, %f701;
	and.b32  	%r499, %r498, -2147483648;
	or.b32  	%r500, %r499, 1056964608;
	mov.b32 	%f702, %r500;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r501, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r502, %r501, 1;
	setp.eq.b32 	%p232, %r502, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r503, %r501, 2;
	setp.eq.s32 	%p233, %r503, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r504, %r501, 1;
	and.b32  	%r505, %r504, 2;
	setp.eq.s32 	%p234, %r505, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p238, %r291, 15;
	mov.u32 	%r170, 999999999;
	@%p238 bra 	$L__BB0_201;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r513, %r291, 6, %r3;
	cvt.u16.u32 	%rs15, %r513;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r514, %rs20;
	and.b32  	%r515, %r514, 255;
	mul.wide.u32 	%rd21, %r515, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r516, [%rd22];
	shl.b32 	%r517, %r516, 16;
	cvt.s32.s16 	%r85, %r516;
	shr.s32 	%r86, %r516, 16;
	or.b32  	%r518, %r517, 65535;
	setp.lt.u32 	%p239, %r518, 589823;
	setp.lt.u32 	%p240, %r516, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_145;
$L__BB0_200:                            // %L1254
	mul.lo.s32 	%r522, %r86, 290;
	mad.lo.s32 	%r170, %r85, 33, %r522;
$L__BB0_201:                            // %pass543
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r320, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r321, %r320, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r428, %f489;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%r337, %f282;
	and.b32  	%r429, %r428, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r322;
	and.b32  	%r338, %r337, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%r444, %f542;
	mov.b32 	%r466, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%f490, %r430;
	and.b32  	%r445, %r444, -2147483648;
	and.b32  	%r467, %r466, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r339;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r446, %r445, 1056964608;
	or.b32  	%r468, %r467, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r446;
	mov.b32 	%f596, %r468;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r323, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r324, %r323, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r431, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r324, 1;
	cvt.rzi.s32.f32 	%r340, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r432, %r431, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r325, %r323, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r432, 1;
	cvt.rzi.s32.f32 	%r447, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r469, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r325, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r341, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r433, %r431, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r448, %r447, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r470, %r469, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r342, %r340, 2;
	setp.eq.s32 	%p151, %r433, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r434, %r431, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r448, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r470, 1;
	setp.eq.s32 	%p46, %r327, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r342, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r435, %r434, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r449, %r447, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r471, %r469, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r435, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r449, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r450, %r447, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r471, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r472, %r469, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r344, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r451, %r450, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r473, %r472, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r316, %f258;
	mov.b32 	%r319, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r451, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r473, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r315, %r319, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r424, %f520;
	mov.b32 	%r427, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r316;
	// end inline asm
	mov.b32 	%r367, %f17;
	mov.b32 	%r368, %f37;
	mov.b32 	%r370, %f16;
	mov.b32 	%r371, %f38;
	mov.b32 	%r411, %f83;
	mov.b32 	%r412, %f85;
	mov.b32 	%r414, %f755;
	mov.b32 	%r415, %f757;
	xor.b32  	%r423, %r427, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r424;
	// end inline asm
	mov.b32 	%r462, %f625;
	mov.b32 	%r461, %f103;
	mov.b32 	%r465, %f622;
	mov.b32 	%r464, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r463, %r465, %r464;
	// end inline asm
	mov.b32 	%r507, %f165;
	mov.b32 	%r508, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	mov.b32 	%r510, %f779;
	mov.b32 	%r511, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r509, %r511, %r510;
	// end inline asm
	shl.b32 	%r524, %r3, 1;
	and.b32  	%r525, %r524, 2;
	shr.u32 	%r171, %r291, 3;
	bfe.u32 	%r526, %r291, 3, 1;
	or.b32  	%r527, %r525, %r526;
	and.b32  	%r528, %r171, 2;
	or.b32  	%r172, %r528, %r64;
	cvt.u16.u32 	%rs23, %r172;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r529, %rs27;
	and.b32  	%r530, %r529, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r531, %rs28, 8;
	mul.lo.s32 	%r532, %r144, 24;
	add.s32 	%r533, %r532, %r2;
	or.b32  	%r534, %r533, %r527;
	add.s32 	%r535, %r534, %r531;
	mul.wide.u32 	%rd28, %r535, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r173, [%rd29];
	cvt.u64.u32 	%rd30, %r531;
	cvt.u64.u32 	%rd31, %r527;
	cvt.u64.u32 	%rd32, %r532;
	cvt.u64.u32 	%rd33, %r2;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r174, [%rd38+16];
	ld.global.u32 	%r175, [%rd38+384];
	ld.global.u32 	%r176, [%rd38+400];
	shl.b32 	%r536, %r282, 14;
	shl.b32 	%r537, %r286, 5;
	add.s32 	%r177, %r537, %r536;
	shl.b32 	%r538, %r291, 2;
	shl.b32 	%r539, %r1, 5;
	shl.b32 	%r178, %r3, 2;
	and.b32  	%r540, %r538, 28;
	or.b32  	%r179, %r540, %r539;
	and.b32  	%r180, %r291, 4;
	and.b32  	%r541, %r157, 8;
	shl.b32 	%r542, %r291, 4;
	or.b32  	%r543, %r541, %r542;
	bfe.u32 	%r544, %r543, 3, 3;
	mul.lo.s32 	%r181, %r544, 260;
	cvt.u16.u32 	%rs29, %r291;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r545, %rs34;
	and.b32  	%r182, %r545, 255;
	add.s32 	%r546, %r4, 192;
	and.b32  	%r547, %r546, 224;
	add.s32 	%r548, %r3, 6;
	shr.u32 	%r549, %r548, 3;
	mad.lo.s32 	%r183, %r549, 260, %r547;
	add.s32 	%r550, %r4, 128;
	and.b32  	%r551, %r550, 224;
	add.s32 	%r552, %r3, 12;
	shr.u32 	%r553, %r552, 3;
	mad.lo.s32 	%r184, %r553, 260, %r551;
	add.s32 	%r554, %r4, 64;
	and.b32  	%r555, %r554, 224;
	add.s32 	%r556, %r3, 18;
	shr.u32 	%r557, %r556, 3;
	mad.lo.s32 	%r185, %r557, 260, %r555;
	or.b32  	%r186, %r4, 780;
	add.s32 	%r558, %r3, 30;
	shr.u32 	%r559, %r558, 3;
	mad.lo.s32 	%r187, %r559, 260, %r547;
	add.s32 	%r560, %r3, 36;
	shr.u32 	%r561, %r560, 3;
	mad.lo.s32 	%r188, %r561, 260, %r551;
	add.s32 	%r562, %r3, 42;
	shr.u32 	%r563, %r562, 3;
	mad.lo.s32 	%r189, %r563, 260, %r555;
	or.b32  	%r190, %r4, 1560;
	add.s32 	%r564, %r3, 54;
	shr.u32 	%r565, %r564, 3;
	mad.lo.s32 	%r191, %r565, 260, %r547;
	add.s32 	%r566, %r3, 60;
	bfe.u32 	%r567, %r566, 3, 3;
	mad.lo.s32 	%r192, %r567, 260, %r551;
	shr.u32 	%r568, %r3, 1;
	cvt.u16.u32 	%rs35, %r568;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r569, %rs40;
	and.b32  	%r193, %r569, 255;
	mul.lo.s32 	%r570, %r144, 870;
	mad.lo.s32 	%r571, %r527, 33, %r570;
	mad.lo.s32 	%r194, %r530, 290, %r571;
	add.s32 	%r195, %r194, 132;
	setp.lt.u32 	%p242, %r291, 4;
	setp.eq.s32 	%p243, %r145, 1;
	setp.eq.s32 	%p244, %r145, 4;
	setp.eq.s32 	%p245, %r145, 5;
	bfe.s32 	%r572, %r291, 3, 1;
	and.b32  	%r573, %r572, 1576;
	mul.lo.s32 	%r574, %r66, 784;
	and.b32  	%r575, %r3, 1;
	neg.s32 	%r576, %r575;
	and.b32  	%r577, %r576, 392;
	shr.u32 	%r578, %r3, 2;
	bfe.s32 	%r579, %r3, 1, 1;
	and.b32  	%r580, %r579, 196;
	and.b32  	%r581, %r157, 6;
	or.b32  	%r582, %r64, %r574;
	mad.lo.s32 	%r583, %r578, 98, %r582;
	add.s32 	%r584, %r583, %r581;
	add.s32 	%r585, %r584, %r573;
	add.s32 	%r586, %r585, %r577;
	add.s32 	%r196, %r586, %r580;
	add.s32 	%r197, %r196, 8;
	mul.lo.s32 	%r587, %r284, 786432;
	mad.lo.s32 	%r588, %r288, 192, %r587;
	or.b32  	%r589, %r178, %r171;
	cvt.u16.u32 	%rs41, %r589;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r590, %rs47;
	and.b32  	%r591, %r590, 248;
	and.b32  	%r592, %r291, 7;
	or.b32  	%r593, %r592, %r2;
	add.s32 	%r198, %r593, %r591;
	cvt.s64.s32 	%rd7, %r588;
	add.s32 	%r594, %r194, %r193;
	mul.wide.u32 	%rd39, %r594, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r595, %r195, %r193;
	mul.wide.u32 	%rd41, %r595, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r194;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r195;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p246, %p242, %p243;
	and.b32  	%r596, %r291, 24;
	setp.eq.s32 	%p247, %r596, 8;
	or.pred  	%p248, %p246, %p247;
	or.pred  	%p249, %p248, %p244;
	setp.eq.s32 	%p250, %r596, 24;
	or.pred  	%p251, %p245, %p250;
	selp.b32 	%r199, 1145324612, -286331154, %p248;
	or.pred  	%p1, %p249, %p251;
	selp.b32 	%r200, 1145324612, -286331154, %p246;
	add.s32 	%r597, %r145, -1;
	setp.lt.u32 	%p252, %r597, 3;
	or.pred  	%p2, %p242, %p252;
	setp.eq.s32 	%p253, %r596, 16;
	or.pred  	%p3, %p253, %p250;
	selp.b32 	%r201, 1145324612, -286331154, %p253;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 24;
	selp.b32 	%r251, %r200, %r201, %p2;
	or.pred  	%p284, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_202;
$L__BB0_173:                            // %L24403
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r143, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p315, %r88, 4032;
	mov.u32 	%r88, %r143;
	@%p315 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_174;
$L__BB0_202:                            // %L1935
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r598, %r88, %r282;
	setp.lt.s32 	%p254, %r598, %r283;
	@%p254 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_174;
$L__BB0_203:                            // %oksrem888
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p255, %r180, 0;
	mul.hi.u32 	%r695, %r88, -1431655765;
	shr.u32 	%r696, %r695, 5;
	mul.lo.s32 	%r202, %r696, 48;
	add.s32 	%r697, %r202, %r178;
	or.b32  	%r698, %r697, %r171;
	shr.s32 	%r699, %r697, 31;
	shr.u32 	%r700, %r699, 20;
	add.s32 	%r701, %r698, %r700;
	and.b32  	%r702, %r701, 258048;
	sub.s32 	%r703, %r698, %r702;
	shl.b32 	%r704, %r703, 14;
	or.b32  	%r705, %r179, %r704;
	add.s32 	%r706, %r177, %r705;
	shr.s32 	%r707, %r706, 31;
	shr.u32 	%r708, %r707, 6;
	add.s32 	%r709, %r706, %r708;
	shr.s32 	%r710, %r709, 26;
	setp.lt.s32 	%p256, %r706, 0;
	and.b32  	%r711, %r709, -67108864;
	setp.ne.s32 	%p257, %r711, %r706;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r712, 1, 0, %p258;
	sub.s32 	%r713, %r712, %r710;
	shl.b32 	%r714, %r713, 26;
	add.s32 	%r715, %r714, %r706;
	mul.wide.s32 	%rd50, %r715, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r716, %r717, %r718, %r719}, [%rd51];
	add.s32 	%r720, %r698, 24;
	shr.s32 	%r721, %r720, 31;
	shr.u32 	%r722, %r721, 20;
	add.s32 	%r723, %r720, %r722;
	and.b32  	%r724, %r723, 258048;
	sub.s32 	%r725, %r720, %r724;
	shl.b32 	%r726, %r725, 14;
	or.b32  	%r727, %r179, %r726;
	add.s32 	%r728, %r177, %r727;
	shr.s32 	%r729, %r728, 31;
	shr.u32 	%r730, %r729, 6;
	add.s32 	%r731, %r728, %r730;
	shr.s32 	%r732, %r731, 26;
	setp.lt.s32 	%p259, %r728, 0;
	and.b32  	%r733, %r731, -67108864;
	setp.ne.s32 	%p260, %r733, %r728;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r734, 1, 0, %p261;
	sub.s32 	%r735, %r734, %r732;
	shl.b32 	%r736, %r735, 26;
	add.s32 	%r737, %r736, %r728;
	mul.wide.s32 	%rd52, %r737, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r738, %r739, %r740, %r741}, [%rd53];
	selp.b32 	%r742, %r718, %r716, %p255;
	shfl.sync.bfly.b32	%r743, %r742, 4, 31, -1;
	selp.b32 	%r601, %r716, %r743, %p255;
	selp.b32 	%r606, %r743, %r718, %p255;
	selp.b32 	%r744, %r719, %r717, %p255;
	shfl.sync.bfly.b32	%r745, %r744, 4, 31, -1;
	selp.b32 	%r609, %r717, %r745, %p255;
	selp.b32 	%r614, %r745, %r719, %p255;
	selp.b32 	%r746, %r740, %r738, %p255;
	shfl.sync.bfly.b32	%r747, %r746, 4, 31, -1;
	selp.b32 	%r617, %r738, %r747, %p255;
	selp.b32 	%r622, %r747, %r740, %p255;
	selp.b32 	%r748, %r741, %r739, %p255;
	shfl.sync.bfly.b32	%r749, %r748, 4, 31, -1;
	selp.b32 	%r625, %r739, %r749, %p255;
	selp.b32 	%r630, %r749, %r741, %p255;
	shl.b32 	%r602, %r606, 4;
	mov.u32 	%r600, 252645135;
	// begin inline asm
	lop3.b32 %r632, %r600, %r601, %r602, 202;
	// end inline asm
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r648, %r600, %r605, %r606, 202;
	// end inline asm
	shl.b32 	%r610, %r614, 4;
	// begin inline asm
	lop3.b32 %r640, %r600, %r609, %r610, 202;
	// end inline asm
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r656, %r600, %r613, %r614, 202;
	// end inline asm
	shl.b32 	%r618, %r622, 4;
	// begin inline asm
	lop3.b32 %r633, %r600, %r617, %r618, 202;
	// end inline asm
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r649, %r600, %r621, %r622, 202;
	// end inline asm
	shl.b32 	%r626, %r630, 4;
	// begin inline asm
	lop3.b32 %r641, %r600, %r625, %r626, 202;
	// end inline asm
	shr.u32 	%r629, %r625, 4;
	// begin inline asm
	lop3.b32 %r657, %r600, %r629, %r630, 202;
	// end inline asm
	mov.u32 	%r634, 25152;
	// begin inline asm
	prmt.b32 %r664, %r632, %r633, %r634;
	// end inline asm
	mov.u32 	%r638, 29521;
	// begin inline asm
	prmt.b32 %r680, %r632, %r633, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r640, %r641, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r640, %r641, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r648, %r649, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r648, %r649, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r656, %r657, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r656, %r657, %r638;
	// end inline asm
	mov.u32 	%r666, 21520;
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r666;
	// end inline asm
	mov.u32 	%r670, 30258;
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r680, %r681, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r680, %r681, %r670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r688, %r689, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r691, %r688, %r689, %r670;
	// end inline asm
	mul.hi.s32 	%r750, %r698, 715827883;
	shr.u32 	%r751, %r750, 31;
	shr.s32 	%r752, %r750, 2;
	add.s32 	%r753, %r752, %r751;
	mul.lo.s32 	%r754, %r753, 24;
	sub.s32 	%r755, %r698, %r754;
	add.s32 	%r756, %r755, %r181;
	mul.wide.s32 	%rd54, %r756, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r663;
	add.s32 	%r757, %r756, 128;
	mul.wide.u32 	%rd57, %r757, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r671;
	add.s32 	%r758, %r756, 64;
	mul.wide.u32 	%rd59, %r758, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r667;
	add.s32 	%r759, %r756, 192;
	mul.wide.u32 	%rd61, %r759, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r675;
	add.s32 	%r760, %r756, 32;
	mul.wide.u32 	%rd63, %r760, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r679;
	add.s32 	%r761, %r756, 160;
	mul.wide.u32 	%rd65, %r761, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r687;
	add.s32 	%r762, %r756, 96;
	mul.wide.u32 	%rd67, %r762, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r683;
	add.s32 	%r763, %r756, 224;
	mul.wide.u32 	%rd69, %r763, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r691;
	bar.sync 	0;
	add.s32 	%r764, %r202, %r182;
	cvt.u16.u32 	%rs48, %r764;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r203, %rs54;
	add.s32 	%r765, %r4, %r203;
	mul.wide.s32 	%rd71, %r765, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r204, [%rd72];
	add.s32 	%r766, %r183, %r203;
	mul.wide.s32 	%rd73, %r766, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r205, [%rd74];
	add.s32 	%r767, %r184, %r203;
	mul.wide.u32 	%rd75, %r767, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r206, [%rd76];
	add.s32 	%r768, %r185, %r203;
	mul.wide.u32 	%rd77, %r768, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r207, [%rd78];
	add.s32 	%r769, %r186, %r203;
	mul.wide.u32 	%rd79, %r769, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r208, [%rd80];
	add.s32 	%r770, %r187, %r203;
	mul.wide.u32 	%rd81, %r770, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r209, [%rd82];
	add.s32 	%r771, %r188, %r203;
	mul.wide.u32 	%rd83, %r771, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r210, [%rd84];
	add.s32 	%r772, %r189, %r203;
	mul.wide.u32 	%rd85, %r772, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r211, [%rd86];
	add.s32 	%r773, %r190, %r203;
	mul.wide.u32 	%rd87, %r773, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r212, [%rd88];
	add.s32 	%r774, %r191, %r203;
	mul.wide.u32 	%rd89, %r774, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r213, [%rd90];
	add.s32 	%r775, %r192, %r203;
	mul.wide.s32 	%rd91, %r775, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r214, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r215, %r170, 0, 31, -1;
	shfl.sync.idx.b32	%r216, %r170, 1, 31, -1;
	shfl.sync.idx.b32	%r217, %r170, 2, 31, -1;
	shfl.sync.idx.b32	%r218, %r170, 3, 31, -1;
	shfl.sync.idx.b32	%r219, %r170, 4, 31, -1;
	shfl.sync.idx.b32	%r220, %r170, 5, 31, -1;
	shfl.sync.idx.b32	%r221, %r170, 6, 31, -1;
	shfl.sync.idx.b32	%r222, %r170, 7, 31, -1;
	shfl.sync.idx.b32	%r223, %r170, 8, 31, -1;
	shfl.sync.idx.b32	%r224, %r170, 9, 31, -1;
	shfl.sync.idx.b32	%r225, %r170, 10, 31, -1;
	shfl.sync.idx.b32	%r226, %r170, 11, 31, -1;
	shfl.sync.idx.b32	%r227, %r170, 12, 31, -1;
	shfl.sync.idx.b32	%r228, %r170, 13, 31, -1;
	shfl.sync.idx.b32	%r229, %r170, 14, 31, -1;
	shfl.sync.idx.b32	%r230, %r170, 15, 31, -1;
	setp.eq.s32 	%p262, %r215, 999999999;
	@%p262 bra 	$L__BB0_146;
// %bb.204:                             // %oksrem2306
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r776, %r215, %r203;
	mul.wide.s32 	%rd93, %r776, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r204;
	setp.eq.s32 	%p263, %r216, 999999999;
	@%p263 bra 	$L__BB0_147;
// %bb.205:                             // %oksrem2374
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r777, %r216, %r203;
	mul.wide.s32 	%rd96, %r777, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r205;
	setp.eq.s32 	%p264, %r217, 999999999;
	@%p264 bra 	$L__BB0_148;
// %bb.206:                             // %oksrem2442
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r778, %r217, %r203;
	mul.wide.s32 	%rd99, %r778, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r206;
	setp.eq.s32 	%p265, %r218, 999999999;
	@%p265 bra 	$L__BB0_149;
// %bb.207:                             // %oksrem2510
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r779, %r218, %r203;
	mul.wide.s32 	%rd102, %r779, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r207;
	setp.eq.s32 	%p266, %r219, 999999999;
	@%p266 bra 	$L__BB0_150;
// %bb.208:                             // %oksrem2578
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r780, %r219, %r203;
	mul.wide.s32 	%rd105, %r780, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r208;
	setp.eq.s32 	%p267, %r220, 999999999;
	@%p267 bra 	$L__BB0_151;
// %bb.209:                             // %oksrem2646
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r781, %r220, %r203;
	mul.wide.s32 	%rd108, %r781, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r209;
	setp.eq.s32 	%p268, %r221, 999999999;
	@%p268 bra 	$L__BB0_152;
// %bb.210:                             // %oksrem2714
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r782, %r221, %r203;
	mul.wide.s32 	%rd111, %r782, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r210;
	setp.eq.s32 	%p269, %r222, 999999999;
	@%p269 bra 	$L__BB0_153;
// %bb.211:                             // %oksrem2782
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r783, %r222, %r203;
	mul.wide.s32 	%rd114, %r783, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r211;
	setp.eq.s32 	%p270, %r223, 999999999;
	@%p270 bra 	$L__BB0_154;
// %bb.212:                             // %oksrem2850
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r784, %r223, %r203;
	mul.wide.s32 	%rd117, %r784, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r212;
	setp.eq.s32 	%p271, %r224, 999999999;
	@%p271 bra 	$L__BB0_155;
// %bb.213:                             // %oksrem2918
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r785, %r224, %r203;
	mul.wide.s32 	%rd120, %r785, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r213;
	setp.eq.s32 	%p272, %r225, 999999999;
	@%p272 bra 	$L__BB0_156;
// %bb.214:                             // %oksrem2987
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.gt.u32 	%p273, %r3, 3;
	selp.b32 	%r786, 0, %r214, %p273;
	add.s32 	%r787, %r225, %r203;
	mul.wide.s32 	%rd123, %r787, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r786;
	setp.eq.s32 	%p274, %r226, 999999999;
	@%p274 bra 	$L__BB0_157;
// %bb.215:                             // %oksrem3055
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r788, %r226, %r203;
	mul.wide.s32 	%rd126, %r788, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r789, 0;
	st.shared.u32 	[%rd128], %r789;
	setp.eq.s32 	%p275, %r227, 999999999;
	@%p275 bra 	$L__BB0_158;
// %bb.216:                             // %oksrem3122
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r790, %r227, %r203;
	mul.wide.s32 	%rd129, %r790, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r789;
	setp.eq.s32 	%p276, %r228, 999999999;
	@%p276 bra 	$L__BB0_159;
// %bb.217:                             // %oksrem3189
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r792, %r228, %r203;
	mul.wide.s32 	%rd132, %r792, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r789;
	setp.eq.s32 	%p277, %r229, 999999999;
	@%p277 bra 	$L__BB0_160;
// %bb.218:                             // %oksrem3256
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r794, %r229, %r203;
	mul.wide.s32 	%rd135, %r794, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r789;
	setp.eq.s32 	%p278, %r230, 999999999;
	@%p278 bra 	$L__BB0_161;
// %bb.219:                             // %oksrem3323
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p279, %r172, 3;
	add.s32 	%r797, %r230, %r203;
	mul.wide.s32 	%rd138, %r797, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r789;
	bar.sync 	0;
	mov.u32 	%r92, %r789;
	mov.u32 	%r93, %r789;
	mov.u32 	%r94, %r789;
	mov.u32 	%r95, %r789;
	mov.u32 	%r96, %r789;
	mov.u32 	%r97, %r789;
	mov.u32 	%r98, %r789;
	mov.u32 	%r99, %r789;
	mov.u32 	%r100, %r789;
	mov.u32 	%r101, %r789;
	mov.u32 	%r102, %r789;
	mov.u32 	%r103, %r789;
	mov.u32 	%r104, %r789;
	mov.u32 	%r105, %r789;
	mov.u32 	%r106, %r789;
	mov.u32 	%r107, %r789;
	@%p279 bra 	$L__BB0_162;
// %bb.220:                             // %oksrem3387
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r798, %r202, %r193;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r799, %r798, 12;
	mul.hi.u32 	%r800, %r799, -1431655765;
	shr.u32 	%r801, %r800, 4;
	mul.lo.s32 	%r802, %r801, 24;
	sub.s32 	%r803, %r799, %r802;
	add.s32 	%r804, %r194, %r803;
	mul.wide.u32 	%rd141, %r804, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r100, [%rd143];
	add.s32 	%r805, %r195, %r803;
	mul.wide.u32 	%rd144, %r805, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r101, [%rd145];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd11+60];
	cvt.u16.u32 	%rs55, %r798;
	add.s16 	%rs56, %rs55, 18;
	mul.hi.s16 	%rs57, %rs56, 10923;
	shr.u16 	%rs58, %rs57, 15;
	shr.s16 	%rs59, %rs57, 2;
	add.s16 	%rs60, %rs59, %rs58;
	mul.lo.s16 	%rs61, %rs60, 24;
	sub.s16 	%rs62, %rs56, %rs61;
	cvt.s32.s16 	%r806, %rs62;
	add.s32 	%r807, %r194, %r806;
	mul.wide.s32 	%rd146, %r807, 4;
	add.s64 	%rd147, %rd40, %rd146;
	ld.shared.u32 	%r104, [%rd147];
	add.s32 	%r808, %r195, %r806;
	mul.wide.u32 	%rd148, %r808, 4;
	add.s64 	%rd149, %rd40, %rd148;
	ld.shared.u32 	%r105, [%rd149];
	add.s16 	%rs63, %rs55, 21;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r809, %rs69;
	add.s32 	%r810, %r194, %r809;
	mul.wide.s32 	%rd150, %r810, 4;
	add.s64 	%rd151, %rd40, %rd150;
	ld.shared.u32 	%r106, [%rd151];
	add.s32 	%r811, %r195, %r809;
	mul.wide.u32 	%rd152, %r811, 4;
	add.s64 	%rd153, %rd40, %rd152;
	ld.shared.u32 	%r107, [%rd153];
$L__BB0_162:                            // %L10606
                                        //   in Loop: Header=BB0_202 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r789;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L17495
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p297, %r111, 24;
	@%p297 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10624
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p280, %r111, 0;
	selp.b32 	%r1205, %r92, 0, %p280;
	setp.eq.s32 	%p281, %r111, 6;
	selp.b32 	%r1206, %r96, %r1205, %p281;
	setp.eq.s32 	%p282, %r111, 12;
	selp.b32 	%r1207, %r100, %r1206, %p282;
	setp.eq.s32 	%p283, %r111, 18;
	selp.b32 	%r1208, %r104, %r1207, %p283;
	selp.b32 	%r1209, %r93, 0, %p280;
	selp.b32 	%r1210, %r97, %r1209, %p281;
	selp.b32 	%r1211, %r101, %r1210, %p282;
	selp.b32 	%r1212, %r105, %r1211, %p283;
	selp.b32 	%r1213, %r94, 0, %p280;
	selp.b32 	%r1214, %r98, %r1213, %p281;
	selp.b32 	%r1215, %r102, %r1214, %p282;
	selp.b32 	%r1216, %r106, %r1215, %p283;
	selp.b32 	%r1217, %r95, 0, %p280;
	selp.b32 	%r1218, %r99, %r1217, %p281;
	selp.b32 	%r1219, %r103, %r1218, %p282;
	selp.b32 	%r1220, %r107, %r1219, %p283;
	mov.u16 	%rs107, 25600;
	// begin inline asm
	mov.b32 %r818, {%rs107, %rs107};
	// end inline asm
	mov.u16 	%rs109, 21504;
	// begin inline asm
	mov.b32 %r829, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r817, %r1208, -2004318072;
	mov.u32 	%r954, 983055;
	// begin inline asm
	lop3.b32 %r815, %r954, %r817, %r818, 202;
	// end inline asm
	mov.u16 	%rs113, 18432;
	// begin inline asm
	mov.b32 %r819, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r818, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	mov.u32 	%r965, 15728880;
	// begin inline asm
	lop3.b32 %r826, %r965, %r817, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r829, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	// begin inline asm
	mov.b32 %r864, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r875, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r863, %r1212, -2004318072;
	// begin inline asm
	lop3.b32 %r861, %r954, %r863, %r864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r866, %r864, %r865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r869, %r861, %r866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r872, %r965, %r863, %r875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r877, %r875, %r876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r880, %r872, %r877;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r909, %r1216, -2004318072;
	// begin inline asm
	lop3.b32 %r907, %r954, %r909, %r910, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r912, %r910, %r911;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r915, %r907, %r912;
	// end inline asm
	// begin inline asm
	lop3.b32 %r918, %r965, %r909, %r921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r923, %r921, %r922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r926, %r918, %r923;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r955, %r1220, -2004318072;
	// begin inline asm
	lop3.b32 %r953, %r954, %r955, %r956, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r958, %r956, %r957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r961, %r953, %r958;
	// end inline asm
	// begin inline asm
	lop3.b32 %r964, %r965, %r955, %r967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r969, %r967, %r968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r972, %r964, %r969;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r823;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r997, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r869;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1000, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r834;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1003, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r880;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1006, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r915;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1009, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r961;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1012, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r926;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1015, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1018, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1021, %r1022}, {%r314, %r317}, {%r997}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1028, %r1029}, {%r314, %r317}, {%r1000}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1035, %r1036}, {%r314, %r317}, {%r1003}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1042, %r1043}, {%r314, %r317}, {%r1006}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1049, %r1050}, {%r314, %r317}, {%r1009}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1056, %r1057}, {%r314, %r317}, {%r1012}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1063, %r1064}, {%r314, %r317}, {%r1015}, {%r789, %r789};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1070, %r1071}, {%r314, %r317}, {%r1018}, {%r789, %r789};
	// end inline asm
	@%p1 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_164;
$L__BB0_221:                            // %pass4747
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1077, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1079, %r1077, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1082, %r366, %r1021, %r1079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1086, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1088, %r1086, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r366, %r1028, %r1088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1095, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1097, %r1095, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r366, %r1035, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1104, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1106, %r1104, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r366, %r1042, %r1106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1113, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1115, %r1113, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r366, %r1049, %r1115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1122, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1124, %r1122, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r366, %r1056, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1131, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1133, %r1131, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r366, %r1063, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1140, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r1140, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r366, %r1070, %r1142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r369, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r366, %r1022, %r1149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1156, %r369, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r366, %r1029, %r1156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r369, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r366, %r1036, %r1163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r369, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r366, %r1043, %r1170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r369, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r366, %r1050, %r1177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r369, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r366, %r1057, %r1184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r369, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r366, %r1064, %r1191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r369, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r366, %r1071, %r1198;
	// end inline asm
	mov.u32 	%r1370, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1221, %r1222}, {%r410, %r413}, {%r1082, %r1152}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1230, %r1231}, {%r410, %r413}, {%r1091, %r1159}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1239, %r1240}, {%r410, %r413}, {%r1100, %r1166}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1248, %r1249}, {%r410, %r413}, {%r1109, %r1173}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1257, %r1258}, {%r410, %r413}, {%r1118, %r1180}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1266, %r1267}, {%r410, %r413}, {%r1127, %r1187}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1275, %r1276}, {%r410, %r413}, {%r1136, %r1194}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1284, %r1285}, {%r410, %r413}, {%r1145, %r1201}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs118, %rs3, 10923;
	shr.u16 	%rs119, %rs118, 15;
	add.s16 	%rs120, %rs118, %rs119;
	mul.lo.s16 	%rs121, %rs120, 6;
	sub.s16 	%rs122, %rs3, %rs121;
	mul.wide.s16 	%r1403, %rs122, 16;
	add.s32 	%r1404, %r196, %r1403;
	mul.wide.s32 	%rd156, %r1404, 4;
	add.s64 	%rd158, %rd40, %rd156;
	ld.shared.u32 	%r1361, [%rd158];
	add.s32 	%r1405, %r197, %r1403;
	mul.wide.s32 	%rd159, %r1405, 4;
	add.s64 	%rd160, %rd40, %rd159;
	ld.shared.u32 	%r1368, [%rd160];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1357, %r1358}, {%r422, %r425}, {%r1361}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r422, %r425}, {%r1368}, {%r1370, %r1370};
	// end inline asm
	@%p284 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;
$L__BB0_223:                            // %pass5243
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1371, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1373, %r1371, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r460, %r1357, %r1373;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1380, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r1380, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r460, %r1364, %r1382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1389, %r463, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1392, %r460, %r1358, %r1389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r463, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r460, %r1365, %r1396;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1425, %r1428}, {%r506, %r509}, {%r1376, %r1392}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1432, %r1436}, {%r506, %r509}, {%r1385, %r1399}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1425, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1428, %r1428, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1432, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r1436, %r1436, %r1431;
	// end inline asm
	mov.u32 	%r1523, 469769216;
	// begin inline asm
	fma.rn.f16x2 %r1439, %r1523, %r1435, %r110;
	// end inline asm
	add.s32 	%r252, %r88, %r111;
	add.s32 	%r1526, %r252, 1;
	mul.hi.u32 	%r1527, %r1526, -1431655765;
	shr.u32 	%r1528, %r1527, 2;
	mul.lo.s32 	%r1529, %r1528, 6;
	sub.s32 	%r1530, %r1526, %r1529;
	shl.b32 	%r1531, %r1530, 4;
	add.s32 	%r1532, %r196, %r1531;
	mul.wide.u32 	%rd163, %r1532, 4;
	add.s64 	%rd165, %rd40, %rd163;
	ld.shared.u32 	%r1447, [%rd165];
	add.s32 	%r1533, %r197, %r1531;
	mul.wide.u32 	%rd166, %r1533, 4;
	add.s64 	%rd167, %rd40, %rd166;
	ld.shared.u32 	%r1454, [%rd167];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1464, %r1461}, {%r422, %r425}, {%r1447}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1473, %r1470}, {%r422, %r425}, {%r1454}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1457, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r1457, %r1461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r460, %r1464, %r1459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1466, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r1466, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r460, %r1473, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r463, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r460, %r1461, %r1475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r463, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r460, %r1470, %r1482;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1508, %r1511}, {%r506, %r509}, {%r1462, %r1478}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1519}, {%r506, %r509}, {%r1471, %r1485}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1508, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1511, %r1511, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1515, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r1519, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r1523, %r1518, %r1439;
	// end inline asm
	add.s32 	%r3080, %r108, 2;
	setp.ne.s32 	%p285, %r3080, 32;
	@%p285 bra 	$L__BB0_225;
// %bb.224:                             // %pass5691
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1535, %r109, 786432;
	or.b32  	%r1536, %r198, %r1535;
	cvt.u64.u32 	%rd168, %r1536;
	add.s64 	%rd169, %rd168, %rd7;
	mul.hi.s64 	%rd170, %rd169, 3074457345618258603;
	shr.u64 	%rd171, %rd170, 63;
	shr.s64 	%rd172, %rd170, 26;
	add.s64 	%rd173, %rd172, %rd171;
	setp.lt.s64 	%p286, %rd169, 0;
	mul.lo.s64 	%rd174, %rd173, 402653184;
	setp.ne.s64 	%p287, %rd174, %rd169;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd175, -1, 0, %p288;
	add.s64 	%rd176, %rd173, %rd175;
	mul.lo.s64 	%rd177, %rd176, -402653184;
	add.s64 	%rd178, %rd177, %rd169;
	shl.b64 	%rd179, %rd178, 2;
	add.s64 	%rd180, %rd4, %rd179;
	st.global.u32 	[%rd180], %r3082;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3080, 0;
	mov.u32 	%r3082, %r3080;
$L__BB0_225:                            // %oksrem5775
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1703, %r252, 2;
	mul.hi.u32 	%r1704, %r1703, -1431655765;
	shr.u32 	%r1705, %r1704, 2;
	mul.lo.s32 	%r1706, %r1705, 6;
	sub.s32 	%r1707, %r1703, %r1706;
	shl.b32 	%r1708, %r1707, 4;
	add.s32 	%r1709, %r196, %r1708;
	mul.wide.u32 	%rd181, %r1709, 4;
	add.s64 	%rd183, %rd40, %rd181;
	ld.shared.u32 	%r1541, [%rd183];
	add.s32 	%r1710, %r197, %r1708;
	mul.wide.u32 	%rd184, %r1710, 4;
	add.s64 	%rd185, %rd40, %rd184;
	ld.shared.u32 	%r1548, [%rd185];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1558, %r1555}, {%r422, %r425}, {%r1541}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1567, %r1564}, {%r422, %r425}, {%r1548}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1551, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r1551, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r460, %r1558, %r1553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1560, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r1560, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r460, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r463, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r460, %r1555, %r1569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r463, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r460, %r1564, %r1576;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1605}, {%r506, %r509}, {%r1556, %r1572}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1609, %r1613}, {%r506, %r509}, {%r1565, %r1579}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1602, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1613, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r1523, %r1612, %r3082;
	// end inline asm
	add.s32 	%r1711, %r252, 3;
	mul.hi.u32 	%r1712, %r1711, -1431655765;
	shr.u32 	%r1713, %r1712, 2;
	mul.lo.s32 	%r1714, %r1713, 6;
	sub.s32 	%r1715, %r1711, %r1714;
	shl.b32 	%r1716, %r1715, 4;
	add.s32 	%r1717, %r196, %r1716;
	mul.wide.u32 	%rd186, %r1717, 4;
	add.s64 	%rd187, %rd40, %rd186;
	ld.shared.u32 	%r1624, [%rd187];
	add.s32 	%r1718, %r197, %r1716;
	mul.wide.u32 	%rd188, %r1718, 4;
	add.s64 	%rd189, %rd40, %rd188;
	ld.shared.u32 	%r1631, [%rd189];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1641, %r1638}, {%r422, %r425}, {%r1624}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1650, %r1647}, {%r422, %r425}, {%r1631}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1634, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1636, %r1634, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r460, %r1641, %r1636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1643, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r1643, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r460, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r463, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r460, %r1638, %r1652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r463, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r460, %r1647, %r1659;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1688}, {%r506, %r509}, {%r1639, %r1655}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1696}, {%r506, %r509}, {%r1648, %r1662}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r1685, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r1696, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r1523, %r1695, %r1616;
	// end inline asm
	add.s32 	%r3083, %r3080, 2;
	setp.ne.s32 	%p289, %r3083, 32;
	@%p289 bra 	$L__BB0_227;
// %bb.226:                             // %pass6571
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1720, %r109, 786432;
	or.b32  	%r1721, %r198, %r1720;
	cvt.u64.u32 	%rd190, %r1721;
	add.s64 	%rd191, %rd190, %rd7;
	mul.hi.s64 	%rd192, %rd191, 3074457345618258603;
	shr.u64 	%rd193, %rd192, 63;
	shr.s64 	%rd194, %rd192, 26;
	add.s64 	%rd195, %rd194, %rd193;
	setp.lt.s64 	%p290, %rd191, 0;
	mul.lo.s64 	%rd196, %rd195, 402653184;
	setp.ne.s64 	%p291, %rd196, %rd191;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd197, -1, 0, %p292;
	add.s64 	%rd198, %rd195, %rd197;
	mul.lo.s64 	%rd199, %rd198, -402653184;
	add.s64 	%rd200, %rd199, %rd191;
	shl.b64 	%rd201, %rd200, 2;
	add.s64 	%rd202, %rd4, %rd201;
	st.global.u32 	[%rd202], %r3085;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3083, 0;
	mov.u32 	%r3085, %r3083;
$L__BB0_227:                            // %oksrem6655
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1888, %r252, 4;
	mul.hi.u32 	%r1889, %r1888, -1431655765;
	shr.u32 	%r1890, %r1889, 2;
	mul.lo.s32 	%r1891, %r1890, 6;
	sub.s32 	%r1892, %r1888, %r1891;
	shl.b32 	%r1893, %r1892, 4;
	add.s32 	%r1894, %r196, %r1893;
	mul.wide.u32 	%rd203, %r1894, 4;
	add.s64 	%rd205, %rd40, %rd203;
	ld.shared.u32 	%r1726, [%rd205];
	add.s32 	%r1895, %r197, %r1893;
	mul.wide.u32 	%rd206, %r1895, 4;
	add.s64 	%rd207, %rd40, %rd206;
	ld.shared.u32 	%r1733, [%rd207];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1743, %r1740}, {%r422, %r425}, {%r1726}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1752, %r1749}, {%r422, %r425}, {%r1733}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r460, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1745, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r1745, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r460, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r463, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r460, %r1740, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r463, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r460, %r1749, %r1761;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1787, %r1790}, {%r506, %r509}, {%r1741, %r1757}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1794, %r1798}, {%r506, %r509}, {%r1750, %r1764}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r1787, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1794, %r1794, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1798, %r1798, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1523, %r1797, %r3085;
	// end inline asm
	add.s32 	%r1896, %r252, 5;
	mul.hi.u32 	%r1897, %r1896, -1431655765;
	shr.u32 	%r1898, %r1897, 2;
	mul.lo.s32 	%r1899, %r1898, 6;
	sub.s32 	%r1900, %r1896, %r1899;
	shl.b32 	%r1901, %r1900, 4;
	add.s32 	%r1902, %r196, %r1901;
	mul.wide.u32 	%rd208, %r1902, 4;
	add.s64 	%rd209, %rd40, %rd208;
	ld.shared.u32 	%r1809, [%rd209];
	add.s32 	%r1903, %r197, %r1901;
	mul.wide.u32 	%rd210, %r1903, 4;
	add.s64 	%rd211, %rd40, %rd210;
	ld.shared.u32 	%r1816, [%rd211];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1826, %r1823}, {%r422, %r425}, {%r1809}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1835, %r1832}, {%r422, %r425}, {%r1816}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1819, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1819, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r460, %r1826, %r1821;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1828, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1830, %r1828, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r460, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1837, %r463, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r460, %r1823, %r1837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r463, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r460, %r1832, %r1844;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1870, %r1873}, {%r506, %r509}, {%r1824, %r1840}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1877, %r1881}, {%r506, %r509}, {%r1833, %r1847}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1869, %r1870, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1881, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1523, %r1880, %r1801;
	// end inline asm
	add.s32 	%r108, %r3083, 2;
	setp.ne.s32 	%p293, %r108, 32;
	@%p293 bra 	$L__BB0_165;
// %bb.228:                             // %pass7451
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1905, %r109, 786432;
	or.b32  	%r1906, %r198, %r1905;
	cvt.u64.u32 	%rd212, %r1906;
	add.s64 	%rd213, %rd212, %rd7;
	mul.hi.s64 	%rd214, %rd213, 3074457345618258603;
	shr.u64 	%rd215, %rd214, 63;
	shr.s64 	%rd216, %rd214, 26;
	add.s64 	%rd217, %rd216, %rd215;
	setp.lt.s64 	%p294, %rd213, 0;
	mul.lo.s64 	%rd218, %rd217, 402653184;
	setp.ne.s64 	%p295, %rd218, %rd213;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd219, -1, 0, %p296;
	add.s64 	%rd220, %rd217, %rd219;
	mul.lo.s64 	%rd221, %rd220, -402653184;
	add.s64 	%rd222, %rd221, %rd213;
	shl.b64 	%rd223, %rd222, 2;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L17516.preheader
                                        //   in Loop: Header=BB0_202 Depth=1
	mov.u16 	%rs179, %rs1;
	mov.u32 	%r3071, %r1370;
	bra.uni 	$L__BB0_167;
$L__BB0_172:                            // %L24387
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3071, %r3071, 6;
	add.s16 	%rs179, %rs179, 6;
	setp.ne.s32 	%p314, %r3071, 24;
	@%p314 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_173;
$L__BB0_167:                            // %L17516
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p298, %r3071, 0;
	selp.b32 	%r2602, %r92, 0, %p298;
	setp.eq.s32 	%p299, %r3071, 6;
	selp.b32 	%r2603, %r96, %r2602, %p299;
	setp.eq.s32 	%p300, %r3071, 12;
	selp.b32 	%r2604, %r100, %r2603, %p300;
	setp.eq.s32 	%p301, %r3071, 18;
	selp.b32 	%r2605, %r104, %r2604, %p301;
	selp.b32 	%r2606, %r93, 0, %p298;
	selp.b32 	%r2607, %r97, %r2606, %p299;
	selp.b32 	%r2608, %r101, %r2607, %p300;
	selp.b32 	%r2609, %r105, %r2608, %p301;
	selp.b32 	%r2610, %r94, 0, %p298;
	selp.b32 	%r2611, %r98, %r2610, %p299;
	selp.b32 	%r2612, %r102, %r2611, %p300;
	selp.b32 	%r2613, %r106, %r2612, %p301;
	selp.b32 	%r2614, %r95, 0, %p298;
	selp.b32 	%r2615, %r99, %r2614, %p299;
	selp.b32 	%r2616, %r103, %r2615, %p300;
	selp.b32 	%r2617, %r107, %r2616, %p301;
	// begin inline asm
	mov.b32 %r1935, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r1946, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2618, %r2605, 8;
	xor.b32  	%r1945, %r2618, 8947848;
	// begin inline asm
	lop3.b32 %r1932, %r954, %r1945, %r1935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1936, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1937, %r1935, %r1936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1940, %r1932, %r1937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1943, %r965, %r1945, %r1946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1948, %r1946, %r1947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1951, %r1943, %r1948;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2619, %r2609, 8;
	xor.b32  	%r1991, %r2619, 8947848;
	// begin inline asm
	lop3.b32 %r1978, %r954, %r1991, %r1981, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1982, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1983, %r1981, %r1982;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1986, %r1978, %r1983;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1989, %r965, %r1991, %r1992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1994, %r1992, %r1993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1997, %r1989, %r1994;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r2038, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2620, %r2613, 8;
	xor.b32  	%r2037, %r2620, 8947848;
	// begin inline asm
	lop3.b32 %r2024, %r954, %r2037, %r2027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2028, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2029, %r2027, %r2028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2032, %r2024, %r2029;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2035, %r965, %r2037, %r2038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2039, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2040, %r2038, %r2039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2043, %r2035, %r2040;
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r2084, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2621, %r2617, 8;
	xor.b32  	%r2083, %r2621, 8947848;
	// begin inline asm
	lop3.b32 %r2070, %r954, %r2083, %r2073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2074, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2075, %r2073, %r2074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2078, %r2070, %r2075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2081, %r965, %r2083, %r2084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2085, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2086, %r2084, %r2085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2089, %r2081, %r2086;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1940;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2092, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1986;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1997;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2032;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2078;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2043;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2089;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2179, %r2176}, {%r314, %r317}, {%r2092}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2188, %r2185}, {%r314, %r317}, {%r2095}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2197, %r2194}, {%r314, %r317}, {%r2098}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r314, %r317}, {%r2101}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r314, %r317}, {%r2104}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r314, %r317}, {%r2107}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r314, %r317}, {%r2110}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r314, %r317}, {%r2113}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2172, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r2172, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r366, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2181, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r366, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r2190, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r366, %r2197, %r2192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r366, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r366, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r366, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r366, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r366, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r369, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r366, %r2176, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r369, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r366, %r2185, %r2251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r369, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r366, %r2194, %r2258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r369, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r366, %r2203, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r369, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r366, %r2212, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r369, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r366, %r2221, %r2279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r369, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r366, %r2230, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r369, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r366, %r2239, %r2293;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2300, %r2301}, {%r410, %r413}, {%r2177, %r2247}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2309, %r2310}, {%r410, %r413}, {%r2186, %r2254}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2318, %r2319}, {%r410, %r413}, {%r2195, %r2261}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2327, %r2328}, {%r410, %r413}, {%r2204, %r2268}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2336, %r2337}, {%r410, %r413}, {%r2213, %r2275}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2345, %r2346}, {%r410, %r413}, {%r2222, %r2282}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2354, %r2355}, {%r410, %r413}, {%r2231, %r2289}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2363, %r2364}, {%r410, %r413}, {%r2240, %r2296}, {%r1370, %r1370}, %r199, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs171, %rs179, 10923;
	shr.u16 	%rs172, %rs171, 15;
	add.s16 	%rs173, %rs171, %rs172;
	mul.lo.s16 	%rs174, %rs173, 6;
	sub.s16 	%rs175, %rs179, %rs174;
	mul.wide.s16 	%r2622, %rs175, 16;
	add.s32 	%r2623, %r196, %r2622;
	mul.wide.s32 	%rd225, %r2623, 4;
	add.s64 	%rd227, %rd40, %rd225;
	ld.shared.u32 	%r2440, [%rd227];
	add.s32 	%r2624, %r197, %r2622;
	mul.wide.s32 	%rd228, %r2624, 4;
	add.s64 	%rd229, %rd40, %rd228;
	ld.shared.u32 	%r2447, [%rd229];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2457, %r2454}, {%r422, %r425}, {%r2440}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2466, %r2463}, {%r422, %r425}, {%r2447}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2450, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2452, %r2450, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2455, %r460, %r2457, %r2452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2459, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2461, %r2459, %r2463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r460, %r2466, %r2461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2468, %r463, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2471, %r460, %r2454, %r2468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2475, %r463, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r460, %r2463, %r2475;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2501, %r2504}, {%r506, %r509}, {%r2455, %r2471}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2508, %r2512}, {%r506, %r509}, {%r2464, %r2478}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r2501, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r2504, %r2504, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r2508, %r2508, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r2512, %r2512, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r1523, %r2511, %r110;
	// end inline asm
	add.s32 	%r136, %r88, %r3071;
	add.s32 	%r2625, %r136, 25;
	mul.hi.u32 	%r2626, %r2625, -1431655765;
	shr.u32 	%r2627, %r2626, 2;
	mul.lo.s32 	%r2628, %r2627, 6;
	sub.s32 	%r2629, %r2625, %r2628;
	shl.b32 	%r2630, %r2629, 4;
	add.s32 	%r2631, %r196, %r2630;
	mul.wide.u32 	%rd230, %r2631, 4;
	add.s64 	%rd231, %rd40, %rd230;
	ld.shared.u32 	%r2523, [%rd231];
	add.s32 	%r2632, %r197, %r2630;
	mul.wide.u32 	%rd232, %r2632, 4;
	add.s64 	%rd233, %rd40, %rd232;
	ld.shared.u32 	%r2530, [%rd233];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2540, %r2537}, {%r422, %r425}, {%r2523}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2549, %r2546}, {%r422, %r425}, {%r2530}, {%r1370, %r1370};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2533, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r2533, %r2537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r460, %r2540, %r2535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2542, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r2542, %r2546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r460, %r2549, %r2544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r463, %r2540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r460, %r2537, %r2551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2558, %r463, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2561, %r460, %r2546, %r2558;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2584, %r2587}, {%r506, %r509}, {%r2538, %r2554}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2591, %r2595}, {%r506, %r509}, {%r2547, %r2561}, {%r1370, %r1370}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r2584, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r2587, %r2587, %r2583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2590, %r2591, %r2591, %r2586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r2595, %r2595, %r2590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r1523, %r2594, %r2515;
	// end inline asm
	add.s32 	%r3086, %r108, 2;
	setp.eq.s32 	%p302, %r3086, 32;
	@%p302 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_169;
$L__BB0_168:                            // %pass8516
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2634, %r109, 786432;
	or.b32  	%r2635, %r198, %r2634;
	cvt.u64.u32 	%rd234, %r2635;
	add.s64 	%rd235, %rd234, %rd7;
	mul.hi.s64 	%rd236, %rd235, 3074457345618258603;
	shr.u64 	%rd237, %rd236, 63;
	shr.s64 	%rd238, %rd236, 26;
	add.s64 	%rd239, %rd238, %rd237;
	setp.lt.s64 	%p303, %rd235, 0;
	mul.lo.s64 	%rd240, %rd239, 402653184;
	setp.ne.s64 	%p304, %rd240, %rd235;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd241, -1, 0, %p305;
	add.s64 	%rd242, %rd239, %rd241;
	mul.lo.s64 	%rd243, %rd242, -402653184;
	add.s64 	%rd244, %rd243, %rd235;
	shl.b64 	%rd245, %rd244, 2;
	add.s64 	%rd246, %rd4, %rd245;
	st.global.u32 	[%rd246], %r3088;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3086, 0;
	mov.u32 	%r3088, %r3086;
$L__BB0_169:                            // %oksrem8600
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s32 	%r2802, %r136, 26;
	mul.hi.u32 	%r2803, %r2802, -1431655765;
	shr.u32 	%r2804, %r2803, 2;
	mul.lo.s32 	%r2805, %r2804, 6;
	sub.s32 	%r2806, %r2802, %r2805;
	shl.b32 	%r2807, %r2806, 4;
	add.s32 	%r2808, %r196, %r2807;
	mul.wide.u32 	%rd247, %r2808, 4;
	add.s64 	%rd249, %rd40, %rd247;
	ld.shared.u32 	%r2640, [%rd249];
	add.s32 	%r2809, %r197, %r2807;
	mul.wide.u32 	%rd250, %r2809, 4;
	add.s64 	%rd251, %rd40, %rd250;
	ld.shared.u32 	%r2647, [%rd251];
	mov.u32 	%r2826, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2657, %r2654}, {%r422, %r425}, {%r2640}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2666, %r2663}, {%r422, %r425}, {%r2647}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2655, %r460, %r2657, %r2652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r460, %r2666, %r2661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r463, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r460, %r2654, %r2668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r463, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r460, %r2663, %r2675;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2701, %r2704}, {%r506, %r509}, {%r2655, %r2671}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2708, %r2712}, {%r506, %r509}, {%r2664, %r2678}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2701, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r2704, %r2704, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r2708, %r2708, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r2712, %r2712, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r1523, %r2711, %r3088;
	// end inline asm
	add.s32 	%r2810, %r136, 27;
	mul.hi.u32 	%r2811, %r2810, -1431655765;
	shr.u32 	%r2812, %r2811, 2;
	mul.lo.s32 	%r2813, %r2812, 6;
	sub.s32 	%r2814, %r2810, %r2813;
	shl.b32 	%r2815, %r2814, 4;
	add.s32 	%r2816, %r196, %r2815;
	mul.wide.u32 	%rd252, %r2816, 4;
	add.s64 	%rd253, %rd40, %rd252;
	ld.shared.u32 	%r2723, [%rd253];
	add.s32 	%r2817, %r197, %r2815;
	mul.wide.u32 	%rd254, %r2817, 4;
	add.s64 	%rd255, %rd40, %rd254;
	ld.shared.u32 	%r2730, [%rd255];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r422, %r425}, {%r2723}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2749, %r2746}, {%r422, %r425}, {%r2730}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r460, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2742, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r2742, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r460, %r2749, %r2744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r463, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r460, %r2737, %r2751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2758, %r463, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r460, %r2746, %r2758;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2784, %r2787}, {%r506, %r509}, {%r2738, %r2754}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2791, %r2795}, {%r506, %r509}, {%r2747, %r2761}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r2784, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r2787, %r2787, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r2791, %r2791, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r2795, %r2795, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3091, %r1523, %r2794, %r2715;
	// end inline asm
	add.s32 	%r3089, %r3086, 2;
	setp.ne.s32 	%p306, %r3089, 32;
	@%p306 bra 	$L__BB0_171;
// %bb.170:                             // %pass9396
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2819, %r109, 786432;
	or.b32  	%r2820, %r198, %r2819;
	cvt.u64.u32 	%rd256, %r2820;
	add.s64 	%rd257, %rd256, %rd7;
	mul.hi.s64 	%rd258, %rd257, 3074457345618258603;
	shr.u64 	%rd259, %rd258, 63;
	shr.s64 	%rd260, %rd258, 26;
	add.s64 	%rd261, %rd260, %rd259;
	setp.lt.s64 	%p307, %rd257, 0;
	mul.lo.s64 	%rd262, %rd261, 402653184;
	setp.ne.s64 	%p308, %rd262, %rd257;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd263, -1, 0, %p309;
	add.s64 	%rd264, %rd261, %rd263;
	mul.lo.s64 	%rd265, %rd264, -402653184;
	add.s64 	%rd266, %rd265, %rd257;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd268, %rd4, %rd267;
	st.global.u32 	[%rd268], %r3091;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3089, 0;
	mov.u32 	%r3091, %r3089;
$L__BB0_171:                            // %oksrem9480
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s32 	%r2987, %r136, 28;
	mul.hi.u32 	%r2988, %r2987, -1431655765;
	shr.u32 	%r2989, %r2988, 2;
	mul.lo.s32 	%r2990, %r2989, 6;
	sub.s32 	%r2991, %r2987, %r2990;
	shl.b32 	%r2992, %r2991, 4;
	add.s32 	%r2993, %r196, %r2992;
	mul.wide.u32 	%rd269, %r2993, 4;
	add.s64 	%rd271, %rd40, %rd269;
	ld.shared.u32 	%r2825, [%rd271];
	add.s32 	%r2994, %r197, %r2992;
	mul.wide.u32 	%rd272, %r2994, 4;
	add.s64 	%rd273, %rd40, %rd272;
	ld.shared.u32 	%r2832, [%rd273];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2842, %r2839}, {%r422, %r425}, {%r2825}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2851, %r2848}, {%r422, %r425}, {%r2832}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2835, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r2835, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r460, %r2842, %r2837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2844, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2846, %r2844, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r460, %r2851, %r2846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2853, %r463, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r460, %r2839, %r2853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r463, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r460, %r2848, %r2860;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2886, %r2889}, {%r506, %r509}, {%r2840, %r2856}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2897}, {%r506, %r509}, {%r2849, %r2863}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r2886, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r2889, %r2889, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r2893, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r2897, %r2897, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r1523, %r2896, %r3091;
	// end inline asm
	add.s32 	%r2995, %r136, 29;
	mul.hi.u32 	%r2996, %r2995, -1431655765;
	shr.u32 	%r2997, %r2996, 2;
	mul.lo.s32 	%r2998, %r2997, 6;
	sub.s32 	%r2999, %r2995, %r2998;
	shl.b32 	%r3000, %r2999, 4;
	add.s32 	%r3001, %r196, %r3000;
	mul.wide.u32 	%rd274, %r3001, 4;
	add.s64 	%rd275, %rd40, %rd274;
	ld.shared.u32 	%r2908, [%rd275];
	add.s32 	%r3002, %r197, %r3000;
	mul.wide.u32 	%rd276, %r3002, 4;
	add.s64 	%rd277, %rd40, %rd276;
	ld.shared.u32 	%r2915, [%rd277];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2925, %r2922}, {%r422, %r425}, {%r2908}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2934, %r2931}, {%r422, %r425}, {%r2915}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2918, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r2918, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r460, %r2925, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2927, %r463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2927, %r2931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r460, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r463, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r460, %r2922, %r2936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r463, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r460, %r2931, %r2943;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2969, %r2972}, {%r506, %r509}, {%r2923, %r2939}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2980}, {%r506, %r509}, {%r2932, %r2946}, {%r2826, %r2826}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r2969, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r2972, %r2972, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r2976, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r2980, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1523, %r2979, %r2900;
	// end inline asm
	add.s32 	%r108, %r3089, 2;
	setp.ne.s32 	%p310, %r108, 32;
	@%p310 bra 	$L__BB0_172;
// %bb.229:                             // %pass10276
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r3004, %r109, 786432;
	or.b32  	%r3005, %r198, %r3004;
	cvt.u64.u32 	%rd278, %r3005;
	add.s64 	%rd279, %rd278, %rd7;
	mul.hi.s64 	%rd280, %rd279, 3074457345618258603;
	shr.u64 	%rd281, %rd280, 63;
	shr.s64 	%rd282, %rd280, 26;
	add.s64 	%rd283, %rd282, %rd281;
	setp.lt.s64 	%p311, %rd279, 0;
	mul.lo.s64 	%rd284, %rd283, 402653184;
	setp.ne.s64 	%p312, %rd284, %rd279;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd285, -1, 0, %p313;
	add.s64 	%rd286, %rd283, %rd285;
	mul.lo.s64 	%rd287, %rd286, -402653184;
	add.s64 	%rd288, %rd287, %rd279;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2826;
	mov.u32 	%r110, %r2826;
	bra.uni 	$L__BB0_172;
$L__BB0_174:                            // %L24418
	mov.u32 	%r3006, 0;
	st.global.u32 	[%rd6], %r3006;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd154, exception1951;
	cvta.global.u64 	%rd155, %rd154;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd155;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_222:                            // %post_box_union5238
	mov.u64 	%rd161, exception1951;
	cvta.global.u64 	%rd162, %rd161;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd162;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5122
	mov.u32 	%r3022, 5;
	st.global.u32 	[%rd6], %r3022;
	mov.u64 	%rd321, exception1911;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5282
	mov.u32 	%r3021, 5;
	st.global.u32 	[%rd6], %r3021;
	mov.u64 	%rd319, exception1911;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5442
	mov.u32 	%r3020, 5;
	st.global.u32 	[%rd6], %r3020;
	mov.u64 	%rd317, exception1911;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5602
	mov.u32 	%r3019, 5;
	st.global.u32 	[%rd6], %r3019;
	mov.u64 	%rd315, exception1911;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5762
	mov.u32 	%r3018, 5;
	st.global.u32 	[%rd6], %r3018;
	mov.u64 	%rd313, exception1911;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5922
	mov.u32 	%r3017, 5;
	st.global.u32 	[%rd6], %r3017;
	mov.u64 	%rd311, exception1911;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6082
	mov.u32 	%r3016, 5;
	st.global.u32 	[%rd6], %r3016;
	mov.u64 	%rd309, exception1911;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6242
	mov.u32 	%r3015, 5;
	st.global.u32 	[%rd6], %r3015;
	mov.u64 	%rd307, exception1911;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6402
	mov.u32 	%r3014, 5;
	st.global.u32 	[%rd6], %r3014;
	mov.u64 	%rd305, exception1911;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6562
	mov.u32 	%r3013, 5;
	st.global.u32 	[%rd6], %r3013;
	mov.u64 	%rd303, exception1911;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6748
	mov.u32 	%r3012, 5;
	st.global.u32 	[%rd6], %r3012;
	mov.u64 	%rd301, exception1911;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6908
	mov.u32 	%r3011, 5;
	st.global.u32 	[%rd6], %r3011;
	mov.u64 	%rd299, exception1911;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7068
	mov.u32 	%r3010, 5;
	st.global.u32 	[%rd6], %r3010;
	mov.u64 	%rd297, exception1911;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7228
	mov.u32 	%r3009, 5;
	st.global.u32 	[%rd6], %r3009;
	mov.u64 	%rd295, exception1911;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7388
	mov.u32 	%r3008, 5;
	st.global.u32 	[%rd6], %r3008;
	mov.u64 	%rd293, exception1911;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7548
	mov.u32 	%r3007, 5;
	st.global.u32 	[%rd6], %r3007;
	mov.u64 	%rd291, exception1911;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3024, 2;
	st.global.u32 	[%rd6], %r3024;
	mov.u64 	%rd325, exception1911;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3023, 3;
	st.global.u32 	[%rd6], %r3023;
	mov.u64 	%rd323, exception1911;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r291, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r519, [retval0+0];
	} // callseq 49
	mov.u32 	%r521, 4;
	st.global.u32 	[%rd6], %r521;
	mov.u64 	%rd26, exception1911;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r281;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
