// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<306>;
	.reg .b16 	%rs<281>;
	.reg .b32 	%r<3063>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<373>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r311, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r311, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd47, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r312, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r313, %r2, %r312;
	add.s32 	%r314, %r313, %r5;
	mul.wide.u32 	%rd54, %r314, 4;
	add.s64 	%rd6, %rd47, %rd54;
	mov.u32 	%r315, 1;
	st.global.u32 	[%rd6], %r315;
	setp.gt.u32 	%p5, %r303, 4095;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r304, %r303;
	setp.gt.s32 	%p7, %r304, 8191;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r304, %r303;
	mad.lo.s32 	%r316, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r317, %r316, %r316, 4;
	setp.gt.u32 	%p9, %r317, 89478484;
	setp.gt.u32 	%p10, %r305, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r306, %r305;
	setp.lt.s32 	%p13, %r306, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r318, %r306, %r305;
	mul.hi.s32 	%r319, %r6, 715827883;
	shr.u32 	%r320, %r319, 31;
	shr.s32 	%r321, %r319, 2;
	add.s32 	%r322, %r321, %r320;
	setp.eq.s32 	%p15, %r318, %r322;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r307, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r308, %r307;
	setp.gt.s32 	%p18, %r308, 512;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r309, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r308, %r307;
	and.b32  	%r323, %r7, 7;
	setp.ne.s32 	%p20, %r323, 0;
	setp.lt.s32 	%p21, %r309, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r310, %r309;
	setp.gt.s32 	%p24, %r310, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r324, %r310, %r309;
	and.b32  	%r325, %r324, 7;
	setp.eq.s32 	%p26, %r325, 0;
	setp.eq.s32 	%p27, %r324, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_13;
$L__BB0_172:                            // %pass162
	and.b32  	%r164, %r312, 3;
	shr.u32 	%r165, %r312, 2;
	mul.lo.s32 	%r326, %r164, %r165;
	and.b32  	%r327, %r326, 7;
	cvt.rn.f32.s32 	%f205, %r327;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p305, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_184;
// %bb.173:
	@%p305 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r167, %f788;
	and.b32  	%r328, %r167, 8388607;
	or.b32  	%r3058, %r328, 1065353216;
	mov.b32 	%f783, %r3058;
	add.s32 	%r329, %r167, -1073741824;
	and.b32  	%r3059, %r329, -8388608;
	setp.eq.s32 	%p36, %r3059, 0;
	@%p36 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r3059, 192937984;
	add.s32 	%r331, %r3058, %r330;
	mov.b32 	%f217, %r331;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3059, %r3059, %r330;
	mov.b32 	%r3058, %f783;
	setp.ne.s32 	%p37, %r3059, 0;
	setp.ne.s32 	%p38, %r3058, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r167, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r166, %f172;
	setp.lt.u32 	%p31, %r166, 1073741824;
	@%p31 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p32, %r166, -2147483647;
	@%p32 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r332, %f169;
	and.b32  	%r174, %r332, -2147483648;
	@%p41 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r333, %f784;
	or.b32  	%r334, %r174, %r333;
	mov.b32 	%f784, %r334;
$L__BB0_186:                            // %__nv_fmodf.exit
	shl.b32 	%r177, %r312, 1;
	and.b32  	%r178, %r177, 2;
	mul.lo.s32 	%r349, %r178, %r165;
	cvt.rn.f32.s32 	%f259, %r349;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r350, %r9, 8388607;
	or.b32  	%r3008, %r350, 1065353216;
	mov.b32 	%f733, %r3008;
	add.s32 	%r351, %r9, -1073741824;
	and.b32  	%r3009, %r351, -8388608;
	setp.eq.s32 	%p56, %r3009, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2046.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2046
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r3009, 192937984;
	add.s32 	%r353, %r3008, %r352;
	mov.b32 	%f271, %r353;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3009, %r3009, %r352;
	mov.b32 	%r3008, %f733;
	setp.ne.s32 	%p57, %r3009, 0;
	setp.ne.s32 	%p58, %r3008, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2048
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2025
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2029
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2032
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2051
	or.b32  	%r179, %r178, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r354, %f186;
	and.b32  	%r355, %r354, -2147483648;
	mov.b32 	%r356, %f734;
	or.b32  	%r357, %r355, %r356;
	mov.b32 	%f734, %r357;
$L__BB0_27:                             // %__nv_fmodf.exit2052
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r179, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r366, %r179, %r165;
	mul.hi.u32 	%r367, %r366, -1431655765;
	shr.u32 	%r368, %r367, 4;
	mul.lo.s32 	%r369, %r368, 24;
	sub.s32 	%r370, %r366, %r369;
	cvt.rn.f32.s32 	%f311, %r370;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r371, %r17, 8388607;
	or.b32  	%r3010, %r371, 1065353216;
	mov.b32 	%f737, %r3010;
	add.s32 	%r372, %r17, -1073741824;
	and.b32  	%r3011, %r372, -8388608;
	setp.eq.s32 	%p77, %r3011, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2077.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2077
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r3011, 192937984;
	add.s32 	%r374, %r3010, %r373;
	mov.b32 	%f323, %r374;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3011, %r3011, %r373;
	mov.b32 	%r3010, %f737;
	setp.ne.s32 	%p78, %r3011, 0;
	setp.ne.s32 	%p79, %r3010, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2079
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2056
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2060
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2063
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2082
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r375, %f18;
	and.b32  	%r376, %r375, -2147483648;
	mov.b32 	%r377, %f738;
	or.b32  	%r378, %r376, %r377;
	mov.b32 	%f738, %r378;
$L__BB0_42:                             // %__nv_fmodf.exit2083
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r379, %f333;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f334, %r381;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r382, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p85, %r383, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r384, %r382, 2;
	setp.eq.s32 	%p86, %r384, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r385, %r382, 1;
	and.b32  	%r386, %r385, 2;
	setp.eq.s32 	%p87, %r386, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r165, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r393, %r178, %r26;
	cvt.u16.u32 	%rs11, %r393;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r394, %r28, 8388607;
	or.b32  	%r3012, %r394, 1065353216;
	mov.b32 	%f743, %r3012;
	add.s32 	%r395, %r28, -1073741824;
	and.b32  	%r3013, %r395, -8388608;
	setp.eq.s32 	%p98, %r3013, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2108.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2108
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r3013, 192937984;
	add.s32 	%r397, %r3012, %r396;
	mov.b32 	%f376, %r397;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3013, %r3013, %r396;
	mov.b32 	%r3012, %f743;
	setp.ne.s32 	%p99, %r3013, 0;
	setp.ne.s32 	%p100, %r3012, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2110
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2087
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2091
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2094
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2113
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r398, %f39;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f744;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f744, %r401;
$L__BB0_58:                             // %__nv_fmodf.exit2114
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r402, %f386;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f387, %r404;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r405, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p106, %r406, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p107, %r407, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r408, %r405, 1;
	and.b32  	%r409, %r408, 2;
	setp.eq.s32 	%p108, %r409, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r410, %r179, %r26;
	mul.hi.u32 	%r411, %r410, -1431655765;
	shr.u32 	%r412, %r411, 1;
	mul.lo.s32 	%r413, %r412, 3;
	sub.s32 	%r414, %r410, %r413;
	cvt.rn.f32.s32 	%f417, %r414;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r415, %r36, 8388607;
	or.b32  	%r3014, %r415, 1065353216;
	mov.b32 	%f749, %r3014;
	add.s32 	%r416, %r36, -1073741824;
	and.b32  	%r3015, %r416, -8388608;
	setp.eq.s32 	%p121, %r3015, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2139.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2139
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r3015, 192937984;
	add.s32 	%r418, %r3014, %r417;
	mov.b32 	%f429, %r418;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3015, %r3015, %r417;
	mov.b32 	%r3014, %f749;
	setp.ne.s32 	%p122, %r3015, 0;
	setp.ne.s32 	%p123, %r3014, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2141
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2118
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2122
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2125
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2144
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r419, %f60;
	and.b32  	%r420, %r419, -2147483648;
	mov.b32 	%r421, %f750;
	or.b32  	%r422, %r420, %r421;
	mov.b32 	%f750, %r422;
$L__BB0_74:                             // %__nv_fmodf.exit2145
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r423, %f439;
	and.b32  	%r424, %r423, -2147483648;
	or.b32  	%r425, %r424, 1056964608;
	mov.b32 	%f440, %r425;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r426, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r427, %r426, 1;
	setp.eq.b32 	%p129, %r427, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r428, %r426, 2;
	setp.eq.s32 	%p130, %r428, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r429, %r426, 1;
	and.b32  	%r430, %r429, 2;
	setp.eq.s32 	%p131, %r430, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r312, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_194;
// %bb.78:
	@%p305 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_79;
$L__BB0_190:
	mov.b32 	%r181, %f788;
	and.b32  	%r437, %r181, 8388607;
	or.b32  	%r3060, %r437, 1065353216;
	mov.b32 	%f787, %r3060;
	add.s32 	%r438, %r181, -1073741824;
	and.b32  	%r3061, %r438, -8388608;
	setp.eq.s32 	%p142, %r3061, 0;
	@%p142 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2170.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2170
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3061, 192937984;
	add.s32 	%r440, %r3060, %r439;
	mov.b32 	%f479, %r440;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3061, %r3061, %r439;
	mov.b32 	%r3060, %f787;
	setp.ne.s32 	%p143, %r3061, 0;
	setp.ne.s32 	%p144, %r3060, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2172
	setp.gt.u32 	%p146, %r181, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_194;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2149
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r180, %f189;
	setp.lt.u32 	%p137, %r180, 1073741824;
	@%p137 bra 	$L__BB0_189;
// %bb.80:
	setp.lt.u32 	%p138, %r180, -2147483647;
	@%p138 bra 	$L__BB0_187;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2153
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2156
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2175
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r441, %f788;
	or.b32  	%r442, %r174, %r441;
	mov.b32 	%f788, %r442;
$L__BB0_196:                            // %__nv_fmodf.exit2176
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r457, %r47, 8388607;
	or.b32  	%r3016, %r457, 1065353216;
	mov.b32 	%f759, %r3016;
	add.s32 	%r458, %r47, -1073741824;
	and.b32  	%r3017, %r458, -8388608;
	setp.eq.s32 	%p162, %r3017, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2201.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2201
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r459, %r3017, 192937984;
	add.s32 	%r460, %r3016, %r459;
	mov.b32 	%f532, %r460;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3017, %r3017, %r459;
	mov.b32 	%r3016, %f759;
	setp.ne.s32 	%p163, %r3017, 0;
	setp.ne.s32 	%p164, %r3016, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2203
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2180
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2184
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2187
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2206
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r461, %f203;
	and.b32  	%r462, %r461, -2147483648;
	mov.b32 	%r463, %f760;
	or.b32  	%r464, %r462, %r463;
	mov.b32 	%f760, %r464;
$L__BB0_95:                             // %__nv_fmodf.exit2207
	cvt.rn.f32.s32 	%f572, %r165;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r473, %r55, 8388607;
	or.b32  	%r3018, %r473, 1065353216;
	mov.b32 	%f763, %r3018;
	add.s32 	%r474, %r55, -1073741824;
	and.b32  	%r3019, %r474, -8388608;
	setp.eq.s32 	%p182, %r3019, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2232.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2232
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3019, 192937984;
	add.s32 	%r476, %r3018, %r475;
	mov.b32 	%f584, %r476;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3019, %r3019, %r475;
	mov.b32 	%r3018, %f763;
	setp.ne.s32 	%p183, %r3019, 0;
	setp.ne.s32 	%p184, %r3018, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2234
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2211
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2215
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2218
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2237
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r477, %f104;
	and.b32  	%r478, %r477, -2147483648;
	mov.b32 	%r479, %f764;
	or.b32  	%r480, %r478, %r479;
	mov.b32 	%f764, %r480;
$L__BB0_109:                            // %__nv_fmodf.exit2238
	and.b32  	%r65, %r312, 1;
	shr.u32 	%r66, %r312, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r495, %r68, 8388607;
	or.b32  	%r3020, %r495, 1065353216;
	mov.b32 	%f767, %r3020;
	add.s32 	%r496, %r68, -1073741824;
	and.b32  	%r3021, %r496, -8388608;
	setp.eq.s32 	%p203, %r3021, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2263.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2263
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r497, %r3021, 192937984;
	add.s32 	%r498, %r3020, %r497;
	mov.b32 	%f638, %r498;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3021, %r3021, %r497;
	mov.b32 	%r3020, %f767;
	setp.ne.s32 	%p204, %r3021, 0;
	setp.ne.s32 	%p205, %r3020, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2265
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2242
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2246
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2249
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2268
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r499, %f121;
	and.b32  	%r500, %r499, -2147483648;
	mov.b32 	%r501, %f768;
	or.b32  	%r502, %r500, %r501;
	mov.b32 	%f768, %r502;
$L__BB0_124:                            // %__nv_fmodf.exit2269
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r503, %f648;
	and.b32  	%r504, %r503, -2147483648;
	or.b32  	%r505, %r504, 1056964608;
	mov.b32 	%f649, %r505;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r506, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r507, %r506, 1;
	setp.eq.b32 	%p211, %r507, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r508, %r506, 2;
	setp.eq.s32 	%p212, %r508, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r509, %r506, 1;
	and.b32  	%r510, %r509, 2;
	setp.eq.s32 	%p213, %r510, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r165, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r511, %r76, 8388607;
	or.b32  	%r3022, %r511, 1065353216;
	mov.b32 	%f773, %r3022;
	add.s32 	%r512, %r76, -1073741824;
	and.b32  	%r3023, %r512, -8388608;
	setp.eq.s32 	%p224, %r3023, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2294.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2294
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r513, %r3023, 192937984;
	add.s32 	%r514, %r3022, %r513;
	mov.b32 	%f691, %r514;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3023, %r3023, %r513;
	mov.b32 	%r3022, %f773;
	setp.ne.s32 	%p225, %r3023, 0;
	setp.ne.s32 	%p226, %r3022, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2296
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2273
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2277
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2280
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2299
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r515, %f142;
	and.b32  	%r516, %r515, -2147483648;
	mov.b32 	%r517, %f774;
	or.b32  	%r518, %r516, %r517;
	mov.b32 	%f774, %r518;
$L__BB0_140:                            // %__nv_fmodf.exit2300
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r519, %f701;
	and.b32  	%r520, %r519, -2147483648;
	or.b32  	%r521, %r520, 1056964608;
	mov.b32 	%f702, %r521;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r522, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r523, %r522, 1;
	setp.eq.b32 	%p232, %r523, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r524, %r522, 2;
	setp.eq.s32 	%p233, %r524, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r525, %r522, 1;
	and.b32  	%r526, %r525, 2;
	setp.eq.s32 	%p234, %r526, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r312, 15;
	mov.u32 	%r190, 999999999;
	@%p238 bra 	$L__BB0_198;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r534, %r312, 6, %r4;
	cvt.u16.u32 	%rs17, %r534;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r535, %rs22;
	and.b32  	%r536, %r535, 255;
	mul.wide.u32 	%rd55, %r536, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r537, [%rd56];
	shl.b32 	%r538, %r537, 16;
	cvt.s32.s16 	%r85, %r537;
	shr.s32 	%r86, %r537, 16;
	or.b32  	%r539, %r538, 65535;
	setp.lt.u32 	%p239, %r539, 589823;
	setp.lt.u32 	%p240, %r537, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_145;
$L__BB0_197:                            // %L1246
	mul.lo.s32 	%r543, %r86, 290;
	mad.lo.s32 	%r190, %r85, 33, %r543;
$L__BB0_198:                            // %pass560
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r341, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r342, %r341, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r449, %f489;
	or.b32  	%r343, %r342, 1056964608;
	mov.b32 	%r358, %f282;
	and.b32  	%r450, %r449, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r343;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r451, %r450, 1056964608;
	mov.b32 	%r465, %f542;
	mov.b32 	%r487, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f490, %r451;
	and.b32  	%r466, %r465, -2147483648;
	and.b32  	%r488, %r487, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r360;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r467, %r466, 1056964608;
	or.b32  	%r489, %r488, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r467;
	mov.b32 	%f596, %r489;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r344, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r345, %r344, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r452, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r345, 1;
	cvt.rzi.s32.f32 	%r361, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r453, %r452, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r346, %r344, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r362, %r361, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r453, 1;
	cvt.rzi.s32.f32 	%r468, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r490, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r346, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r347, %r344, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r362, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r454, %r452, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r469, %r468, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r491, %r490, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r348, %r347, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p151, %r454, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r455, %r452, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r469, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r491, 1;
	setp.eq.s32 	%p46, %r348, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r363, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r364, %r361, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r456, %r455, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r470, %r468, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r492, %r490, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r365, %r364, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r456, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r470, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r492, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r493, %r490, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r365, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r494, %r493, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r337, %f258;
	mov.b32 	%r340, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r472, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r494, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r336, %r340, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r445, %f520;
	mov.b32 	%r448, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r337;
	// end inline asm
	mov.b32 	%r388, %f17;
	mov.b32 	%r389, %f37;
	mov.b32 	%r391, %f16;
	mov.b32 	%r392, %f38;
	mov.b32 	%r432, %f83;
	mov.b32 	%r433, %f85;
	mov.b32 	%r435, %f755;
	mov.b32 	%r436, %f757;
	xor.b32  	%r444, %r448, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r445, %r444;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r446, %r448, %r445;
	// end inline asm
	mov.b32 	%r483, %f625;
	mov.b32 	%r482, %f103;
	mov.b32 	%r486, %f622;
	mov.b32 	%r485, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r481, %r483, %r482;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	mov.b32 	%r528, %f165;
	mov.b32 	%r529, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	mov.b32 	%r531, %f779;
	mov.b32 	%r532, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	shr.u32 	%r545, %r312, 3;
	and.b32  	%r546, %r545, 2;
	or.b32  	%r191, %r64, %r546;
	cvt.u16.u32 	%rs25, %r191;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r547, %rs29;
	and.b32  	%r548, %r547, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r549, %rs30, 8;
	bfe.u32 	%r550, %r312, 3, 1;
	shl.b32 	%r551, %r4, 1;
	and.b32  	%r552, %r551, 2;
	or.b32  	%r553, %r550, %r552;
	mul.lo.s32 	%r554, %r164, 24;
	add.s32 	%r555, %r554, %r2;
	or.b32  	%r556, %r555, %r553;
	add.s32 	%r557, %r556, %r549;
	mul.wide.u32 	%rd62, %r557, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.u32 	%r192, [%rd63];
	or.b32  	%r558, %r2, %r552;
	or.b32  	%r559, %r558, %r550;
	cvt.u64.u32 	%rd64, %r549;
	cvt.u64.u32 	%rd65, %r554;
	cvt.u64.u32 	%rd66, %r559;
	add.s64 	%rd67, %rd66, %rd65;
	add.s64 	%rd68, %rd67, %rd64;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.u32 	%r193, [%rd70+16];
	cvt.u64.u32 	%rd71, %r553;
	cvt.u64.u32 	%rd72, %r2;
	add.s64 	%rd73, %rd72, %rd65;
	add.s64 	%rd74, %rd73, %rd71;
	add.s64 	%rd75, %rd74, %rd64;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.u32 	%r194, [%rd77+384];
	cvt.u64.u32 	%rd78, %r550;
	cvt.u64.u32 	%rd79, %r552;
	add.s64 	%rd80, %rd72, %rd79;
	add.s64 	%rd81, %rd80, %rd78;
	add.s64 	%rd82, %rd81, %rd65;
	add.s64 	%rd83, %rd82, %rd64;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.u32 	%r195, [%rd85+400];
	shl.b32 	%r560, %r303, 14;
	shl.b32 	%r561, %r307, 5;
	add.s32 	%r196, %r561, %r560;
	shl.b32 	%r562, %r4, 2;
	or.b32  	%r197, %r545, %r562;
	shl.b32 	%r563, %r312, 2;
	and.b32  	%r198, %r563, 12;
	shl.b32 	%r564, %r1, 5;
	and.b32  	%r565, %r563, 16;
	or.b32  	%r199, %r565, %r564;
	or.b32  	%r566, %r545, 24;
	add.s32 	%r200, %r566, %r562;
	bfe.s32 	%r567, %r312, 2, 1;
	and.b32  	%r201, %r312, 4;
	setp.eq.s32 	%p243, %r201, 0;
	and.b32  	%r568, %r177, 8;
	shl.b32 	%r569, %r312, 4;
	or.b32  	%r570, %r568, %r569;
	bfe.u32 	%r571, %r570, 3, 3;
	mul.lo.s32 	%r202, %r571, 260;
	cvt.u16.u32 	%rs31, %r312;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r572, %rs36;
	and.b32  	%r203, %r572, 255;
	add.s32 	%r573, %r4, 6;
	shr.u32 	%r574, %r573, 3;
	add.s32 	%r575, %r5, 192;
	and.b32  	%r576, %r575, 224;
	mad.lo.s32 	%r204, %r574, 260, %r576;
	add.s32 	%r577, %r4, 12;
	shr.u32 	%r578, %r577, 3;
	add.s32 	%r579, %r5, 128;
	and.b32  	%r580, %r579, 224;
	mad.lo.s32 	%r205, %r578, 260, %r580;
	add.s32 	%r581, %r4, 18;
	shr.u32 	%r582, %r581, 3;
	add.s32 	%r583, %r5, 64;
	and.b32  	%r584, %r583, 224;
	mad.lo.s32 	%r206, %r582, 260, %r584;
	or.b32  	%r207, %r5, 780;
	add.s32 	%r585, %r4, 30;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r208, %r586, 260, %r576;
	add.s32 	%r587, %r4, 36;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r209, %r588, 260, %r580;
	add.s32 	%r589, %r4, 42;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r210, %r590, 260, %r584;
	or.b32  	%r211, %r5, 1560;
	add.s32 	%r591, %r4, 54;
	shr.u32 	%r592, %r591, 3;
	mad.lo.s32 	%r212, %r592, 260, %r576;
	add.s32 	%r593, %r4, 60;
	bfe.u32 	%r594, %r593, 3, 3;
	mad.lo.s32 	%r213, %r594, 260, %r580;
	shr.u32 	%r595, %r4, 1;
	cvt.u16.u32 	%rs37, %r595;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r596, %rs42;
	and.b32  	%r214, %r596, 255;
	mul.lo.s32 	%r597, %r164, 870;
	mad.lo.s32 	%r598, %r553, 33, %r597;
	mad.lo.s32 	%r215, %r548, 290, %r598;
	add.s32 	%r216, %r215, 132;
	setp.lt.u32 	%p244, %r312, 4;
	setp.eq.s32 	%p245, %r165, 1;
	setp.eq.s32 	%p246, %r165, 4;
	setp.eq.s32 	%p247, %r165, 5;
	and.b32  	%r217, %r567, 196;
	bfe.s32 	%r599, %r312, 3, 1;
	and.b32  	%r218, %r599, 98;
	selp.b32 	%r219, 0, 392, %p134;
	setp.eq.s32 	%p248, %r65, 0;
	selp.b32 	%r220, 0, 784, %p248;
	or.b32  	%r221, %r552, %r66;
	add.s32 	%r600, %r217, %r218;
	add.s32 	%r601, %r600, %r219;
	add.s32 	%r602, %r601, %r220;
	add.s32 	%r222, %r602, %r221;
	selp.b32 	%r603, 1576, 1772, %p243;
	add.s32 	%r604, %r603, %r218;
	add.s32 	%r605, %r604, %r219;
	add.s32 	%r606, %r605, %r220;
	add.s32 	%r223, %r606, %r221;
	or.b32  	%r224, %r221, 4;
	add.s32 	%r225, %r602, %r224;
	add.s32 	%r226, %r606, %r224;
	add.s32 	%r607, %r606, 8;
	add.s32 	%r227, %r607, %r221;
	add.s32 	%r228, %r607, %r224;
	bfe.s32 	%r608, %r4, 1, 1;
	and.b32  	%r609, %r608, 196;
	and.b32  	%r610, %r177, 6;
	and.b32  	%r611, %r599, 1576;
	shr.u32 	%r612, %r4, 2;
	and.b32  	%r613, %r4, 1;
	neg.s32 	%r614, %r613;
	and.b32  	%r615, %r614, 392;
	mad.lo.s32 	%r616, %r612, 98, %r610;
	or.b32  	%r617, %r616, %r64;
	mad.lo.s32 	%r618, %r66, 784, %r617;
	add.s32 	%r619, %r618, %r609;
	add.s32 	%r620, %r619, %r611;
	add.s32 	%r229, %r620, %r615;
	add.s32 	%r230, %r229, 8;
	mul.lo.s32 	%r621, %r305, 786432;
	mad.lo.s32 	%r622, %r309, 192, %r621;
	cvt.u16.u32 	%rs43, %r197;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r623, %rs49;
	and.b32  	%r231, %r623, 248;
	and.b32  	%r232, %r312, 7;
	cvt.s64.s32 	%rd23, %r622;
	add.s32 	%r624, %r215, %r214;
	mul.wide.u32 	%rd86, %r624, 4;
	mov.u64 	%rd87, shmem;
	add.s64 	%rd24, %rd87, %rd86;
	add.s32 	%r625, %r216, %r214;
	mul.wide.u32 	%rd88, %r625, 4;
	add.s64 	%rd25, %rd87, %rd88;
	cvt.u64.u32 	%rd89, %r215;
	cvt.u64.u16 	%rd90, %rs42;
	and.b64  	%rd91, %rd90, 255;
	add.s64 	%rd92, %rd89, %rd91;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd26, %rd87, %rd93;
	cvt.u64.u32 	%rd94, %r216;
	add.s64 	%rd95, %rd94, %rd91;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd27, %rd87, %rd96;
	or.pred  	%p249, %p244, %p245;
	and.b32  	%r626, %r312, 24;
	setp.eq.s32 	%p250, %r626, 8;
	or.pred  	%p251, %p249, %p250;
	or.pred  	%p252, %p251, %p246;
	setp.eq.s32 	%p253, %r626, 24;
	or.pred  	%p254, %p247, %p253;
	selp.b32 	%r233, 1145324612, -286331154, %p251;
	or.pred  	%p1, %p252, %p254;
	selp.b32 	%r234, 1145324612, -286331154, %p249;
	add.s32 	%r627, %r165, -1;
	setp.lt.u32 	%p255, %r627, 3;
	or.pred  	%p2, %p244, %p255;
	setp.eq.s32 	%p256, %r626, 16;
	or.pred  	%p3, %p256, %p253;
	selp.b32 	%r235, 1145324612, -286331154, %p256;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r234, %r235, %p2;
	or.pred  	%p288, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_199;
$L__BB0_170:                            // %L40316
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r163, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p304, %r88, 4032;
	mov.u32 	%r88, %r163;
	@%p304 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_171;
$L__BB0_199:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r628, %r88, %r303;
	setp.lt.s32 	%p257, %r628, %r304;
	@%p257 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_171;
$L__BB0_200:                            // %oksrem878
                                        //   in Loop: Header=BB0_199 Depth=1
	mul.hi.u32 	%r725, %r88, -1431655765;
	shr.u32 	%r726, %r725, 5;
	mul.lo.s32 	%r236, %r726, 48;
	add.s32 	%r727, %r236, %r197;
	cvt.u16.u32 	%rs50, %r727;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 4;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -4096;
	sub.s16 	%rs55, %rs50, %rs54;
	mul.wide.s16 	%r728, %rs55, 16384;
	or.b32  	%r729, %r728, %r198;
	or.b32  	%r730, %r199, %r729;
	add.s32 	%r731, %r196, %r730;
	shr.s32 	%r732, %r731, 31;
	shr.u32 	%r733, %r732, 6;
	add.s32 	%r734, %r731, %r733;
	shr.s32 	%r735, %r734, 26;
	setp.lt.s32 	%p259, %r731, 0;
	and.b32  	%r736, %r734, -67108864;
	setp.ne.s32 	%p260, %r736, %r731;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r737, 1, 0, %p261;
	sub.s32 	%r738, %r737, %r735;
	shl.b32 	%r739, %r738, 26;
	add.s32 	%r740, %r739, %r731;
	mul.wide.s32 	%rd97, %r740, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r741, %r742, %r743, %r744}, [%rd98];
	add.s32 	%r745, %r200, %r236;
	cvt.u16.u32 	%rs56, %r745;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 4;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -4096;
	sub.s16 	%rs61, %rs56, %rs60;
	mul.wide.s16 	%r746, %rs61, 16384;
	or.b32  	%r747, %r746, %r198;
	or.b32  	%r748, %r199, %r747;
	add.s32 	%r749, %r196, %r748;
	shr.s32 	%r750, %r749, 31;
	shr.u32 	%r751, %r750, 6;
	add.s32 	%r752, %r749, %r751;
	shr.s32 	%r753, %r752, 26;
	setp.lt.s32 	%p262, %r749, 0;
	and.b32  	%r754, %r752, -67108864;
	setp.ne.s32 	%p263, %r754, %r749;
	and.pred  	%p264, %p262, %p263;
	selp.u32 	%r755, 1, 0, %p264;
	sub.s32 	%r756, %r755, %r753;
	shl.b32 	%r757, %r756, 26;
	add.s32 	%r758, %r757, %r749;
	mul.wide.s32 	%rd99, %r758, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r759, %r760, %r761, %r762}, [%rd100];
	selp.b32 	%r763, %r743, %r741, %p243;
	shfl.sync.bfly.b32	%r764, %r763, 4, 31, -1;
	selp.b32 	%r631, %r741, %r764, %p243;
	selp.b32 	%r636, %r764, %r743, %p243;
	selp.b32 	%r765, %r744, %r742, %p243;
	shfl.sync.bfly.b32	%r766, %r765, 4, 31, -1;
	selp.b32 	%r639, %r742, %r766, %p243;
	selp.b32 	%r644, %r766, %r744, %p243;
	selp.b32 	%r767, %r761, %r759, %p243;
	shfl.sync.bfly.b32	%r768, %r767, 4, 31, -1;
	selp.b32 	%r647, %r759, %r768, %p243;
	selp.b32 	%r652, %r768, %r761, %p243;
	selp.b32 	%r769, %r762, %r760, %p243;
	shfl.sync.bfly.b32	%r770, %r769, 4, 31, -1;
	selp.b32 	%r655, %r760, %r770, %p243;
	selp.b32 	%r660, %r770, %r762, %p243;
	shl.b32 	%r632, %r636, 4;
	mov.u32 	%r630, 252645135;
	// begin inline asm
	lop3.b32 %r662, %r630, %r631, %r632, 202;
	// end inline asm
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r678, %r630, %r635, %r636, 202;
	// end inline asm
	shl.b32 	%r640, %r644, 4;
	// begin inline asm
	lop3.b32 %r670, %r630, %r639, %r640, 202;
	// end inline asm
	shr.u32 	%r643, %r639, 4;
	// begin inline asm
	lop3.b32 %r686, %r630, %r643, %r644, 202;
	// end inline asm
	shl.b32 	%r648, %r652, 4;
	// begin inline asm
	lop3.b32 %r663, %r630, %r647, %r648, 202;
	// end inline asm
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r679, %r630, %r651, %r652, 202;
	// end inline asm
	shl.b32 	%r656, %r660, 4;
	// begin inline asm
	lop3.b32 %r671, %r630, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r687, %r630, %r659, %r660, 202;
	// end inline asm
	mov.u32 	%r664, 25152;
	// begin inline asm
	prmt.b32 %r694, %r662, %r663, %r664;
	// end inline asm
	mov.u32 	%r668, 29521;
	// begin inline asm
	prmt.b32 %r710, %r662, %r663, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r670, %r671, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r670, %r671, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r678, %r679, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r678, %r679, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r686, %r687, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r686, %r687, %r668;
	// end inline asm
	mov.u32 	%r720, 21520;
	// begin inline asm
	prmt.b32 %r693, %r694, %r695, %r720;
	// end inline asm
	mov.u32 	%r724, 30258;
	// begin inline asm
	prmt.b32 %r697, %r694, %r695, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r724;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r771, %rs67;
	add.s32 	%r772, %r202, %r771;
	mul.wide.s32 	%rd101, %r772, 4;
	add.s64 	%rd103, %rd87, %rd101;
	st.shared.u32 	[%rd103], %r693;
	add.s32 	%r773, %r772, 128;
	mul.wide.u32 	%rd104, %r773, 4;
	add.s64 	%rd105, %rd87, %rd104;
	st.shared.u32 	[%rd105], %r701;
	add.s32 	%r774, %r772, 64;
	mul.wide.u32 	%rd106, %r774, 4;
	add.s64 	%rd107, %rd87, %rd106;
	st.shared.u32 	[%rd107], %r697;
	add.s32 	%r775, %r772, 192;
	mul.wide.u32 	%rd108, %r775, 4;
	add.s64 	%rd109, %rd87, %rd108;
	st.shared.u32 	[%rd109], %r705;
	add.s32 	%r776, %r772, 32;
	mul.wide.u32 	%rd110, %r776, 4;
	add.s64 	%rd111, %rd87, %rd110;
	st.shared.u32 	[%rd111], %r709;
	add.s32 	%r777, %r772, 160;
	mul.wide.u32 	%rd112, %r777, 4;
	add.s64 	%rd113, %rd87, %rd112;
	st.shared.u32 	[%rd113], %r717;
	add.s32 	%r778, %r772, 96;
	mul.wide.u32 	%rd114, %r778, 4;
	add.s64 	%rd115, %rd87, %rd114;
	st.shared.u32 	[%rd115], %r713;
	add.s32 	%r779, %r772, 224;
	mul.wide.u32 	%rd116, %r779, 4;
	add.s64 	%rd117, %rd87, %rd116;
	st.shared.u32 	[%rd117], %r721;
	bar.sync 	0;
	add.s32 	%r780, %r236, %r203;
	cvt.u16.u32 	%rs68, %r780;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r237, %rs74;
	add.s32 	%r781, %r5, %r237;
	mul.wide.s32 	%rd118, %r781, 4;
	add.s64 	%rd119, %rd87, %rd118;
	ld.shared.u32 	%r238, [%rd119];
	add.s32 	%r782, %r204, %r237;
	mul.wide.s32 	%rd120, %r782, 4;
	add.s64 	%rd121, %rd87, %rd120;
	ld.shared.u32 	%r239, [%rd121];
	add.s32 	%r783, %r205, %r237;
	mul.wide.u32 	%rd122, %r783, 4;
	add.s64 	%rd123, %rd87, %rd122;
	ld.shared.u32 	%r240, [%rd123];
	add.s32 	%r784, %r206, %r237;
	mul.wide.u32 	%rd124, %r784, 4;
	add.s64 	%rd125, %rd87, %rd124;
	ld.shared.u32 	%r241, [%rd125];
	add.s32 	%r785, %r207, %r237;
	mul.wide.u32 	%rd126, %r785, 4;
	add.s64 	%rd127, %rd87, %rd126;
	ld.shared.u32 	%r242, [%rd127];
	add.s32 	%r786, %r208, %r237;
	mul.wide.u32 	%rd128, %r786, 4;
	add.s64 	%rd129, %rd87, %rd128;
	ld.shared.u32 	%r243, [%rd129];
	add.s32 	%r787, %r209, %r237;
	mul.wide.u32 	%rd130, %r787, 4;
	add.s64 	%rd131, %rd87, %rd130;
	ld.shared.u32 	%r244, [%rd131];
	add.s32 	%r788, %r210, %r237;
	mul.wide.u32 	%rd132, %r788, 4;
	add.s64 	%rd133, %rd87, %rd132;
	ld.shared.u32 	%r245, [%rd133];
	add.s32 	%r789, %r211, %r237;
	mul.wide.u32 	%rd134, %r789, 4;
	add.s64 	%rd135, %rd87, %rd134;
	ld.shared.u32 	%r246, [%rd135];
	add.s32 	%r790, %r212, %r237;
	mul.wide.u32 	%rd136, %r790, 4;
	add.s64 	%rd137, %rd87, %rd136;
	ld.shared.u32 	%r247, [%rd137];
	add.s32 	%r791, %r213, %r237;
	mul.wide.s32 	%rd138, %r791, 4;
	add.s64 	%rd139, %rd87, %rd138;
	ld.shared.u32 	%r248, [%rd139];
	bar.sync 	0;
	shfl.sync.idx.b32	%r249, %r190, 0, 31, -1;
	shfl.sync.idx.b32	%r250, %r190, 1, 31, -1;
	shfl.sync.idx.b32	%r251, %r190, 2, 31, -1;
	shfl.sync.idx.b32	%r252, %r190, 3, 31, -1;
	shfl.sync.idx.b32	%r253, %r190, 4, 31, -1;
	shfl.sync.idx.b32	%r254, %r190, 5, 31, -1;
	shfl.sync.idx.b32	%r255, %r190, 6, 31, -1;
	shfl.sync.idx.b32	%r256, %r190, 7, 31, -1;
	shfl.sync.idx.b32	%r257, %r190, 8, 31, -1;
	shfl.sync.idx.b32	%r258, %r190, 9, 31, -1;
	shfl.sync.idx.b32	%r259, %r190, 10, 31, -1;
	shfl.sync.idx.b32	%r260, %r190, 11, 31, -1;
	shfl.sync.idx.b32	%r261, %r190, 12, 31, -1;
	shfl.sync.idx.b32	%r262, %r190, 13, 31, -1;
	shfl.sync.idx.b32	%r263, %r190, 14, 31, -1;
	shfl.sync.idx.b32	%r264, %r190, 15, 31, -1;
	setp.eq.s32 	%p265, %r249, 999999999;
	@%p265 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2306
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r792, %r249, %r237;
	mul.wide.s32 	%rd140, %r792, 4;
	add.s64 	%rd142, %rd87, %rd140;
	st.shared.u32 	[%rd142], %r238;
	setp.eq.s32 	%p266, %r250, 999999999;
	@%p266 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2374
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r793, %r250, %r237;
	mul.wide.s32 	%rd143, %r793, 4;
	add.s64 	%rd145, %rd87, %rd143;
	st.shared.u32 	[%rd145], %r239;
	setp.eq.s32 	%p267, %r251, 999999999;
	@%p267 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2442
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r794, %r251, %r237;
	mul.wide.s32 	%rd146, %r794, 4;
	add.s64 	%rd148, %rd87, %rd146;
	st.shared.u32 	[%rd148], %r240;
	setp.eq.s32 	%p268, %r252, 999999999;
	@%p268 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2510
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r795, %r252, %r237;
	mul.wide.s32 	%rd149, %r795, 4;
	add.s64 	%rd151, %rd87, %rd149;
	st.shared.u32 	[%rd151], %r241;
	setp.eq.s32 	%p269, %r253, 999999999;
	@%p269 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2578
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r796, %r253, %r237;
	mul.wide.s32 	%rd152, %r796, 4;
	add.s64 	%rd154, %rd87, %rd152;
	st.shared.u32 	[%rd154], %r242;
	setp.eq.s32 	%p270, %r254, 999999999;
	@%p270 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2646
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r797, %r254, %r237;
	mul.wide.s32 	%rd155, %r797, 4;
	add.s64 	%rd157, %rd87, %rd155;
	st.shared.u32 	[%rd157], %r243;
	setp.eq.s32 	%p271, %r255, 999999999;
	@%p271 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2714
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r798, %r255, %r237;
	mul.wide.s32 	%rd158, %r798, 4;
	add.s64 	%rd160, %rd87, %rd158;
	st.shared.u32 	[%rd160], %r244;
	setp.eq.s32 	%p272, %r256, 999999999;
	@%p272 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2782
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r799, %r256, %r237;
	mul.wide.s32 	%rd161, %r799, 4;
	add.s64 	%rd163, %rd87, %rd161;
	st.shared.u32 	[%rd163], %r245;
	setp.eq.s32 	%p273, %r257, 999999999;
	@%p273 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2850
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r800, %r257, %r237;
	mul.wide.s32 	%rd164, %r800, 4;
	add.s64 	%rd166, %rd87, %rd164;
	st.shared.u32 	[%rd166], %r246;
	setp.eq.s32 	%p274, %r258, 999999999;
	@%p274 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2918
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r801, %r258, %r237;
	mul.wide.s32 	%rd167, %r801, 4;
	add.s64 	%rd169, %rd87, %rd167;
	st.shared.u32 	[%rd169], %r247;
	setp.eq.s32 	%p275, %r259, 999999999;
	@%p275 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem2987
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.gt.u32 	%p276, %r4, 3;
	selp.b32 	%r802, 0, %r248, %p276;
	add.s32 	%r803, %r259, %r237;
	mul.wide.s32 	%rd170, %r803, 4;
	add.s64 	%rd172, %rd87, %rd170;
	st.shared.u32 	[%rd172], %r802;
	setp.eq.s32 	%p277, %r260, 999999999;
	@%p277 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3055
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r804, %r260, %r237;
	mul.wide.s32 	%rd173, %r804, 4;
	add.s64 	%rd175, %rd87, %rd173;
	mov.u32 	%r805, 0;
	st.shared.u32 	[%rd175], %r805;
	setp.eq.s32 	%p278, %r261, 999999999;
	@%p278 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3122
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r806, %r261, %r237;
	mul.wide.s32 	%rd176, %r806, 4;
	add.s64 	%rd178, %rd87, %rd176;
	st.shared.u32 	[%rd178], %r805;
	setp.eq.s32 	%p279, %r262, 999999999;
	@%p279 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3189
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r808, %r262, %r237;
	mul.wide.s32 	%rd179, %r808, 4;
	add.s64 	%rd181, %rd87, %rd179;
	st.shared.u32 	[%rd181], %r805;
	setp.eq.s32 	%p280, %r263, 999999999;
	@%p280 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3256
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r810, %r263, %r237;
	mul.wide.s32 	%rd182, %r810, 4;
	add.s64 	%rd184, %rd87, %rd182;
	st.shared.u32 	[%rd184], %r805;
	setp.eq.s32 	%p281, %r264, 999999999;
	@%p281 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3323
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.eq.s32 	%p282, %r191, 3;
	add.s32 	%r813, %r264, %r237;
	mul.wide.s32 	%rd185, %r813, 4;
	add.s64 	%rd187, %rd87, %rd185;
	st.shared.u32 	[%rd187], %r805;
	bar.sync 	0;
	mov.u32 	%r92, %r805;
	mov.u32 	%r93, %r805;
	mov.u32 	%r94, %r805;
	mov.u32 	%r95, %r805;
	mov.u32 	%r96, %r805;
	mov.u32 	%r97, %r805;
	mov.u32 	%r98, %r805;
	mov.u32 	%r99, %r805;
	mov.u32 	%r100, %r805;
	mov.u32 	%r101, %r805;
	mov.u32 	%r102, %r805;
	mov.u32 	%r103, %r805;
	mov.u32 	%r104, %r805;
	mov.u32 	%r105, %r805;
	mov.u32 	%r106, %r805;
	mov.u32 	%r107, %r805;
	@%p282 bra 	$L__BB0_162;
// %bb.217:                             // %oksrem3390
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r265, %r236, %r214;
	ld.shared.u32 	%r92, [%rd24];
	ld.shared.u32 	%r93, [%rd25];
	ld.shared.u32 	%r94, [%rd26+12];
	ld.shared.u32 	%r95, [%rd27+12];
	ld.shared.u32 	%r96, [%rd26+24];
	ld.shared.u32 	%r97, [%rd27+24];
	ld.shared.u32 	%r98, [%rd26+36];
	ld.shared.u32 	%r99, [%rd27+36];
	add.s32 	%r814, %r265, 12;
	mul.hi.u32 	%r815, %r814, -1431655765;
	shr.u32 	%r816, %r815, 4;
	mul.lo.s32 	%r817, %r816, 24;
	sub.s32 	%r818, %r814, %r817;
	add.s32 	%r819, %r215, %r818;
	mul.wide.u32 	%rd188, %r819, 4;
	add.s64 	%rd190, %rd87, %rd188;
	ld.shared.u32 	%r100, [%rd190];
	add.s32 	%r820, %r216, %r818;
	mul.wide.u32 	%rd191, %r820, 4;
	add.s64 	%rd192, %rd87, %rd191;
	ld.shared.u32 	%r101, [%rd192];
	ld.shared.u32 	%r102, [%rd26+60];
	ld.shared.u32 	%r103, [%rd27+60];
	cvt.u16.u32 	%rs75, %r265;
	add.s16 	%rs76, %rs75, 18;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r821, %rs82;
	add.s32 	%r822, %r215, %r821;
	mul.wide.s32 	%rd193, %r822, 4;
	add.s64 	%rd194, %rd87, %rd193;
	ld.shared.u32 	%r104, [%rd194];
	add.s32 	%r823, %r216, %r821;
	mul.wide.u32 	%rd195, %r823, 4;
	add.s64 	%rd196, %rd87, %rd195;
	ld.shared.u32 	%r105, [%rd196];
	add.s16 	%rs83, %rs75, 21;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r824, %rs89;
	add.s32 	%r825, %r215, %r824;
	mul.wide.s32 	%rd197, %r825, 4;
	add.s64 	%rd198, %rd87, %rd197;
	ld.shared.u32 	%r106, [%rd198];
	add.s32 	%r826, %r216, %r824;
	mul.wide.u32 	%rd199, %r826, 4;
	add.s64 	%rd200, %rd87, %rd199;
	ld.shared.u32 	%r107, [%rd200];
$L__BB0_162:                            // %L10559
                                        //   in Loop: Header=BB0_199 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r805;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L25428
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p293, %r111, 24;
	@%p293 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10577
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p283, %r111, 0;
	selp.b32 	%r1220, %r92, 0, %p283;
	setp.eq.s32 	%p284, %r111, 6;
	selp.b32 	%r1221, %r96, %r1220, %p284;
	setp.eq.s32 	%p285, %r111, 12;
	selp.b32 	%r1222, %r100, %r1221, %p285;
	setp.eq.s32 	%p286, %r111, 18;
	selp.b32 	%r832, %r104, %r1222, %p286;
	selp.b32 	%r1223, %r93, 0, %p283;
	selp.b32 	%r1224, %r97, %r1223, %p284;
	selp.b32 	%r1225, %r101, %r1224, %p285;
	selp.b32 	%r878, %r105, %r1225, %p286;
	selp.b32 	%r1226, %r94, 0, %p283;
	selp.b32 	%r1227, %r98, %r1226, %p284;
	selp.b32 	%r1228, %r102, %r1227, %p285;
	selp.b32 	%r924, %r106, %r1228, %p286;
	selp.b32 	%r1229, %r95, 0, %p283;
	selp.b32 	%r1230, %r99, %r1229, %p284;
	selp.b32 	%r1231, %r103, %r1230, %p285;
	selp.b32 	%r970, %r107, %r1231, %p286;
	mov.u16 	%rs127, 25600;
	// begin inline asm
	mov.b32 %r833, {%rs127, %rs127};
	// end inline asm
	mov.u16 	%rs129, 21504;
	// begin inline asm
	mov.b32 %r844, {%rs129, %rs129};
	// end inline asm
	mov.u32 	%r969, 983055;
	// begin inline asm
	lop3.b32 %r830, %r969, %r832, %r833, 202;
	// end inline asm
	mov.u16 	%rs133, 18432;
	// begin inline asm
	mov.b32 %r834, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r835, %r833, %r834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r838, %r830, %r835;
	// end inline asm
	mov.u32 	%r980, 15728880;
	// begin inline asm
	lop3.b32 %r841, %r980, %r832, %r844, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r846, %r844, %r845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r849, %r841, %r846;
	// end inline asm
	// begin inline asm
	mov.b32 %r879, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs129, %rs129};
	// end inline asm
	// begin inline asm
	lop3.b32 %r876, %r969, %r878, %r879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r881, %r879, %r880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r884, %r876, %r881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r887, %r980, %r878, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs129, %rs129};
	// end inline asm
	// begin inline asm
	lop3.b32 %r922, %r969, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r980, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs129, %rs129};
	// end inline asm
	// begin inline asm
	lop3.b32 %r968, %r969, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r980, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r849;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1012, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1015, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r838;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1018, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r884;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1021, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1024, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r930;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1036, %r1037}, {%r335, %r338}, {%r1012}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1043, %r1044}, {%r335, %r338}, {%r1015}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1050, %r1051}, {%r335, %r338}, {%r1018}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1057, %r1058}, {%r335, %r338}, {%r1021}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1064, %r1065}, {%r335, %r338}, {%r1024}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1071, %r1072}, {%r335, %r338}, {%r1027}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1078, %r1079}, {%r335, %r338}, {%r1030}, {%r805, %r805};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1085, %r1086}, {%r335, %r338}, {%r1033}, {%r805, %r805};
	// end inline asm
	@%p1 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_164;
$L__BB0_218:                            // %pass4759
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1092, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1094, %r1092, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r387, %r1036, %r1094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1101, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1103, %r1101, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r387, %r1043, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1110, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1112, %r1110, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r387, %r1050, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1119, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1121, %r1119, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r387, %r1057, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1128, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r387, %r1064, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r387, %r1071, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r387, %r1078, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r387, %r1085, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r390, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r387, %r1037, %r1164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r390, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r387, %r1044, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r390, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r387, %r1051, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r390, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r387, %r1058, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r390, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r387, %r1065, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r390, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r387, %r1072, %r1199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r390, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r387, %r1079, %r1206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r390, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r387, %r1086, %r1213;
	// end inline asm
	setp.gt.u32 	%p287, %r312, 11;
	mov.u32 	%r1302, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1305, %r1306}, {%r431, %r434}, {%r1097, %r1167}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1313, %r1314}, {%r431, %r434}, {%r1106, %r1174}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1321, %r1322}, {%r431, %r434}, {%r1115, %r1181}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1329, %r1330}, {%r431, %r434}, {%r1124, %r1188}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r431, %r434}, {%r1133, %r1195}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1346}, {%r431, %r434}, {%r1142, %r1202}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1353, %r1354}, {%r431, %r434}, {%r1151, %r1209}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1361, %r1362}, {%r431, %r434}, {%r1160, %r1216}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1305, %r1306, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1305, %r1306, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1313, %r1314, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1313, %r1314, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1321, %r1322, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1321, %r1322, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1329, %r1330, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1329, %r1330, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1337, %r1338, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1337, %r1338, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1345, %r1346, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1345, %r1346, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1353, %r1354, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1353, %r1354, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1361, %r1362, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1361, %r1362, %r724;
	// end inline asm
	add.s16 	%rs138, %rs9, %rs3;
	add.s16 	%rs139, %rs138, -5;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	add.s16 	%rs142, %rs140, %rs141;
	mul.lo.s16 	%rs143, %rs142, 6;
	sub.s16 	%rs144, %rs139, %rs143;
	mul.wide.s16 	%r1368, %rs144, 16;
	add.s32 	%r1369, %r222, %r1368;
	mul.wide.s32 	%rd203, %r1369, 4;
	add.s64 	%rd28, %rd87, %rd203;
	st.shared.u32 	[%rd28], %r282;
	add.s32 	%r1370, %r223, %r1368;
	mul.wide.u32 	%rd205, %r1370, 4;
	add.s64 	%rd29, %rd87, %rd205;
	st.shared.u32 	[%rd29], %r283;
	add.s32 	%r1371, %r225, %r1368;
	mul.wide.s32 	%rd206, %r1371, 4;
	add.s64 	%rd30, %rd87, %rd206;
	st.shared.u32 	[%rd30], %r284;
	add.s32 	%r1372, %r226, %r1368;
	mul.wide.u32 	%rd207, %r1372, 4;
	add.s64 	%rd31, %rd87, %rd207;
	st.shared.u32 	[%rd31], %r285;
	cvt.s64.s32 	%rd208, %r1368;
	cvt.u64.u32 	%rd209, %r221;
	cvt.u64.u32 	%rd210, %r220;
	cvt.u64.u32 	%rd211, %r219;
	cvt.u64.u32 	%rd212, %r217;
	cvt.u64.u32 	%rd213, %r218;
	add.s64 	%rd214, %rd213, %rd212;
	add.s64 	%rd215, %rd214, %rd211;
	add.s64 	%rd216, %rd215, %rd210;
	add.s64 	%rd32, %rd216, %rd209;
	add.s64 	%rd217, %rd32, %rd208;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd33, %rd87, %rd218;
	st.shared.u32 	[%rd33+32], %r286;
	add.s32 	%r1373, %r227, %r1368;
	mul.wide.u32 	%rd219, %r1373, 4;
	add.s64 	%rd34, %rd87, %rd219;
	st.shared.u32 	[%rd34], %r287;
	cvt.u64.u32 	%rd220, %r224;
	add.s64 	%rd35, %rd216, %rd220;
	add.s64 	%rd221, %rd35, %rd208;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd36, %rd87, %rd222;
	st.shared.u32 	[%rd36+32], %r288;
	add.s32 	%r1374, %r228, %r1368;
	mul.wide.u32 	%rd223, %r1374, 4;
	add.s64 	%rd37, %rd87, %rd223;
	st.shared.u32 	[%rd37], %r289;
	add.s16 	%rs145, %rs138, -2;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	add.s16 	%rs148, %rs146, %rs147;
	mul.lo.s16 	%rs149, %rs148, 6;
	sub.s16 	%rs150, %rs145, %rs149;
	mul.wide.s16 	%r1375, %rs150, 16;
	add.s32 	%r1376, %r222, %r1375;
	mul.wide.s32 	%rd224, %r1376, 4;
	add.s64 	%rd38, %rd87, %rd224;
	st.shared.u32 	[%rd38], %r290;
	add.s32 	%r1377, %r223, %r1375;
	mul.wide.u32 	%rd225, %r1377, 4;
	add.s64 	%rd39, %rd87, %rd225;
	st.shared.u32 	[%rd39], %r291;
	add.s32 	%r1378, %r225, %r1375;
	mul.wide.s32 	%rd226, %r1378, 4;
	add.s64 	%rd40, %rd87, %rd226;
	st.shared.u32 	[%rd40], %r292;
	add.s32 	%r1379, %r226, %r1375;
	mul.wide.u32 	%rd227, %r1379, 4;
	add.s64 	%rd41, %rd87, %rd227;
	st.shared.u32 	[%rd41], %r293;
	cvt.s64.s32 	%rd228, %r1375;
	add.s64 	%rd229, %rd32, %rd228;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd42, %rd87, %rd230;
	st.shared.u32 	[%rd42+32], %r294;
	add.s32 	%r1380, %r227, %r1375;
	mul.wide.u32 	%rd231, %r1380, 4;
	add.s64 	%rd43, %rd87, %rd231;
	st.shared.u32 	[%rd43], %r295;
	add.s64 	%rd232, %rd35, %rd228;
	shl.b64 	%rd233, %rd232, 2;
	add.s64 	%rd44, %rd87, %rd233;
	st.shared.u32 	[%rd44+32], %r296;
	add.s32 	%r1381, %r228, %r1375;
	mul.wide.u32 	%rd234, %r1381, 4;
	add.s64 	%rd45, %rd87, %rd234;
	st.shared.u32 	[%rd45], %r297;
	@%p287 bra 	$L__BB0_220;
// %bb.219:                             // %oksrem7076
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r282;
	st.shared.u32 	[%rd29], %r283;
	st.shared.u32 	[%rd30], %r284;
	st.shared.u32 	[%rd31], %r285;
	st.shared.u32 	[%rd33+32], %r286;
	st.shared.u32 	[%rd34], %r287;
	st.shared.u32 	[%rd36+32], %r288;
	st.shared.u32 	[%rd37], %r289;
	st.shared.u32 	[%rd38], %r290;
	st.shared.u32 	[%rd39], %r291;
	st.shared.u32 	[%rd40], %r292;
	st.shared.u32 	[%rd41], %r293;
	st.shared.u32 	[%rd42+32], %r294;
	st.shared.u32 	[%rd43], %r295;
	st.shared.u32 	[%rd44+32], %r296;
	st.shared.u32 	[%rd45], %r297;
$L__BB0_220:                            // %L19974
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s16 	%rs151, %rs3, -5;
	mul.hi.s16 	%rs152, %rs151, 10923;
	shr.u16 	%rs153, %rs152, 15;
	add.s16 	%rs154, %rs152, %rs153;
	mul.lo.s16 	%rs155, %rs154, 6;
	sub.s16 	%rs156, %rs151, %rs155;
	mul.wide.s16 	%r1428, %rs156, 16;
	add.s32 	%r1429, %r229, %r1428;
	mul.wide.s32 	%rd235, %r1429, 4;
	add.s64 	%rd237, %rd87, %rd235;
	ld.shared.u32 	%r1386, [%rd237];
	add.s32 	%r1430, %r230, %r1428;
	mul.wide.s32 	%rd238, %r1430, 4;
	add.s64 	%rd239, %rd87, %rd238;
	ld.shared.u32 	%r1393, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1382, %r1383}, {%r443, %r446}, {%r1386}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1389, %r1390}, {%r443, %r446}, {%r1393}, {%r1302, %r1302};
	// end inline asm
	@%p288 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_221;
$L__BB0_222:                            // %pass9528
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1396, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1398, %r1396, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r481, %r1382, %r1398;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1407, %r1405, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r481, %r1389, %r1407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r484, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r481, %r1383, %r1414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r484, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r481, %r1390, %r1421;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1453}, {%r527, %r530}, {%r1401, %r1417}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1457, %r1461}, {%r527, %r530}, {%r1410, %r1424}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r1450, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r1453, %r1453, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r1457, %r1457, %r1452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r1461, %r1461, %r1456;
	// end inline asm
	mov.u32 	%r1880, 492117333;
	// begin inline asm
	fma.rn.f16x2 %r1464, %r1880, %r1460, %r110;
	// end inline asm
	add.s32 	%r1883, %r88, %r111;
	add.s32 	%r1884, %r1883, 1;
	mul.hi.u32 	%r1885, %r1884, -1431655765;
	shr.u32 	%r1886, %r1885, 2;
	mul.lo.s32 	%r1887, %r1886, 6;
	sub.s32 	%r1888, %r1884, %r1887;
	shl.b32 	%r1889, %r1888, 4;
	add.s32 	%r1890, %r229, %r1889;
	mul.wide.u32 	%rd242, %r1890, 4;
	add.s64 	%rd244, %rd87, %rd242;
	ld.shared.u32 	%r1472, [%rd244];
	add.s32 	%r1891, %r230, %r1889;
	mul.wide.u32 	%rd245, %r1891, 4;
	add.s64 	%rd246, %rd87, %rd245;
	ld.shared.u32 	%r1479, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1489, %r1486}, {%r443, %r446}, {%r1472}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1498, %r1495}, {%r443, %r446}, {%r1479}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1482, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1484, %r1482, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1487, %r481, %r1489, %r1484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1491, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r1491, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r481, %r1498, %r1493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r484, %r1489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r481, %r1486, %r1500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r484, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r481, %r1495, %r1507;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1533, %r1536}, {%r527, %r530}, {%r1487, %r1503}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1540, %r1544}, {%r527, %r530}, {%r1496, %r1510}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r1533, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r1536, %r1536, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r1540, %r1540, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r1544, %r1544, %r1539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r1880, %r1543, %r1464;
	// end inline asm
	add.s16 	%rs157, %rs3, -3;
	mul.hi.s16 	%rs158, %rs157, 10923;
	shr.u16 	%rs159, %rs158, 15;
	add.s16 	%rs160, %rs158, %rs159;
	mul.lo.s16 	%rs161, %rs160, 6;
	sub.s16 	%rs162, %rs157, %rs161;
	mul.wide.s16 	%r1892, %rs162, 16;
	add.s32 	%r1893, %r229, %r1892;
	mul.wide.s32 	%rd247, %r1893, 4;
	add.s64 	%rd248, %rd87, %rd247;
	ld.shared.u32 	%r1555, [%rd248];
	add.s32 	%r1894, %r230, %r1892;
	mul.wide.s32 	%rd249, %r1894, 4;
	add.s64 	%rd250, %rd87, %rd249;
	ld.shared.u32 	%r1562, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r443, %r446}, {%r1555}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1581, %r1578}, {%r443, %r446}, {%r1562}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r481, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r481, %r1581, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r484, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r481, %r1569, %r1583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r484, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r481, %r1578, %r1590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1619}, {%r527, %r530}, {%r1570, %r1586}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1627}, {%r527, %r530}, {%r1579, %r1593}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r1616, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r1880, %r1626, %r1547;
	// end inline asm
	add.s16 	%rs163, %rs3, -2;
	mul.hi.s16 	%rs164, %rs163, 10923;
	shr.u16 	%rs165, %rs164, 15;
	add.s16 	%rs166, %rs164, %rs165;
	mul.lo.s16 	%rs167, %rs166, 6;
	sub.s16 	%rs168, %rs163, %rs167;
	mul.wide.s16 	%r1895, %rs168, 16;
	add.s32 	%r1896, %r229, %r1895;
	mul.wide.s32 	%rd251, %r1896, 4;
	add.s64 	%rd252, %rd87, %rd251;
	ld.shared.u32 	%r1638, [%rd252];
	add.s32 	%r1897, %r230, %r1895;
	mul.wide.s32 	%rd253, %r1897, 4;
	add.s64 	%rd254, %rd87, %rd253;
	ld.shared.u32 	%r1645, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1655, %r1652}, {%r443, %r446}, {%r1638}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1664, %r1661}, {%r443, %r446}, {%r1645}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r481, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1657, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r1657, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r481, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r484, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r481, %r1652, %r1666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r484, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r481, %r1661, %r1673;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1702}, {%r527, %r530}, {%r1653, %r1669}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1706, %r1710}, {%r527, %r530}, {%r1662, %r1676}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r1699, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r1706, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r1710, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r1880, %r1709, %r1630;
	// end inline asm
	add.s16 	%rs169, %rs3, -1;
	mul.hi.s16 	%rs170, %rs169, 10923;
	shr.u16 	%rs171, %rs170, 15;
	add.s16 	%rs172, %rs170, %rs171;
	mul.lo.s16 	%rs173, %rs172, 6;
	sub.s16 	%rs174, %rs169, %rs173;
	mul.wide.s16 	%r1898, %rs174, 16;
	add.s32 	%r1899, %r229, %r1898;
	mul.wide.s32 	%rd255, %r1899, 4;
	add.s64 	%rd256, %rd87, %rd255;
	ld.shared.u32 	%r1721, [%rd256];
	add.s32 	%r1900, %r230, %r1898;
	mul.wide.s32 	%rd257, %r1900, 4;
	add.s64 	%rd258, %rd87, %rd257;
	ld.shared.u32 	%r1728, [%rd258];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1738, %r1735}, {%r443, %r446}, {%r1721}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1747, %r1744}, {%r443, %r446}, {%r1728}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r481, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r481, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r484, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r481, %r1735, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r484, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r481, %r1744, %r1756;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1782, %r1785}, {%r527, %r530}, {%r1736, %r1752}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1789, %r1793}, {%r527, %r530}, {%r1745, %r1759}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r1782, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1785, %r1785, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1789, %r1789, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r1793, %r1793, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r1880, %r1792, %r1713;
	// end inline asm
	mul.hi.s16 	%rs175, %rs3, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs3, %rs178;
	mul.wide.s16 	%r1901, %rs179, 16;
	add.s32 	%r1902, %r229, %r1901;
	mul.wide.s32 	%rd259, %r1902, 4;
	add.s64 	%rd260, %rd87, %rd259;
	ld.shared.u32 	%r1804, [%rd260];
	add.s32 	%r1903, %r230, %r1901;
	mul.wide.s32 	%rd261, %r1903, 4;
	add.s64 	%rd262, %rd87, %rd261;
	ld.shared.u32 	%r1811, [%rd262];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1821, %r1818}, {%r443, %r446}, {%r1804}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1830, %r1827}, {%r443, %r446}, {%r1811}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1814, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r1814, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r481, %r1821, %r1816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1823, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r481, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r484, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r481, %r1818, %r1832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r484, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r481, %r1827, %r1839;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1865, %r1868}, {%r527, %r530}, {%r1819, %r1835}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1876}, {%r527, %r530}, {%r1828, %r1842}, {%r1302, %r1302}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r1865, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r1876, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1880, %r1875, %r1796;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p289, %r108, 24;
	@%p289 bra 	$L__BB0_165;
// %bb.223:                             // %pass11512
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1905, %r109, 786432;
	or.b32  	%r1906, %r1905, %r2;
	add.s32 	%r1907, %r1906, %r231;
	or.b32  	%r1908, %r1907, %r232;
	cvt.u64.u32 	%rd263, %r1908;
	add.s64 	%rd264, %rd263, %rd23;
	mul.hi.s64 	%rd265, %rd264, 3074457345618258603;
	shr.u64 	%rd266, %rd265, 63;
	shr.s64 	%rd267, %rd265, 27;
	add.s64 	%rd268, %rd267, %rd266;
	setp.lt.s64 	%p290, %rd264, 0;
	mul.lo.s64 	%rd269, %rd268, 805306368;
	setp.ne.s64 	%p291, %rd269, %rd264;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd270, -1, 0, %p292;
	add.s64 	%rd271, %rd268, %rd270;
	mul.lo.s64 	%rd272, %rd271, -805306368;
	add.s64 	%rd273, %rd272, %rd264;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd4, %rd274;
	st.global.u32 	[%rd275], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L25449.preheader
                                        //   in Loop: Header=BB0_199 Depth=1
	mov.u16 	%rs280, %rs1;
	mov.u32 	%r3054, %r1302;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L34846
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs242, %rs280, -5;
	mul.hi.s16 	%rs243, %rs242, 10923;
	shr.u16 	%rs244, %rs243, 15;
	add.s16 	%rs245, %rs243, %rs244;
	mul.lo.s16 	%rs246, %rs245, 6;
	sub.s16 	%rs247, %rs242, %rs246;
	mul.wide.s16 	%r2966, %rs247, 16;
	add.s32 	%r2967, %r229, %r2966;
	mul.wide.s32 	%rd299, %r2967, 4;
	add.s64 	%rd301, %rd87, %rd299;
	ld.shared.u32 	%r2472, [%rd301];
	add.s32 	%r2968, %r230, %r2966;
	mul.wide.s32 	%rd302, %r2968, 4;
	add.s64 	%rd303, %rd87, %rd302;
	ld.shared.u32 	%r2479, [%rd303];
	mov.u32 	%r2945, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2489, %r2486}, {%r443, %r446}, {%r2472}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r443, %r446}, {%r2479}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2482, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r2482, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r481, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r481, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r484, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r481, %r2486, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r484, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r481, %r2495, %r2507;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2533, %r2536}, {%r527, %r530}, {%r2487, %r2503}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2540, %r2544}, {%r527, %r530}, {%r2496, %r2510}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r2533, %r2533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r2536, %r2536, %r2532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r2540, %r2540, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r2544, %r2544, %r2539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r1880, %r2543, %r110;
	// end inline asm
	add.s16 	%rs248, %rs280, -4;
	mul.hi.s16 	%rs249, %rs248, 10923;
	shr.u16 	%rs250, %rs249, 15;
	add.s16 	%rs251, %rs249, %rs250;
	mul.lo.s16 	%rs252, %rs251, 6;
	sub.s16 	%rs253, %rs248, %rs252;
	mul.wide.s16 	%r2969, %rs253, 16;
	add.s32 	%r2970, %r229, %r2969;
	mul.wide.s32 	%rd304, %r2970, 4;
	add.s64 	%rd305, %rd87, %rd304;
	ld.shared.u32 	%r2555, [%rd305];
	add.s32 	%r2971, %r230, %r2969;
	mul.wide.s32 	%rd306, %r2971, 4;
	add.s64 	%rd307, %rd87, %rd306;
	ld.shared.u32 	%r2562, [%rd307];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2572, %r2569}, {%r443, %r446}, {%r2555}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2581, %r2578}, {%r443, %r446}, {%r2562}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2565, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r2565, %r2569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r481, %r2572, %r2567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2574, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2576, %r2574, %r2578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r481, %r2581, %r2576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r484, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r481, %r2569, %r2583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2590, %r484, %r2581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2593, %r481, %r2578, %r2590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2616, %r2619}, {%r527, %r530}, {%r2570, %r2586}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2627}, {%r527, %r530}, {%r2579, %r2593}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2615, %r2616, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2618, %r2619, %r2619, %r2615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r2623, %r2623, %r2618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r2627, %r2627, %r2622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2630, %r1880, %r2626, %r2547;
	// end inline asm
	add.s16 	%rs254, %rs280, -3;
	mul.hi.s16 	%rs255, %rs254, 10923;
	shr.u16 	%rs256, %rs255, 15;
	add.s16 	%rs257, %rs255, %rs256;
	mul.lo.s16 	%rs258, %rs257, 6;
	sub.s16 	%rs259, %rs254, %rs258;
	mul.wide.s16 	%r2972, %rs259, 16;
	add.s32 	%r2973, %r229, %r2972;
	mul.wide.s32 	%rd308, %r2973, 4;
	add.s64 	%rd309, %rd87, %rd308;
	ld.shared.u32 	%r2638, [%rd309];
	add.s32 	%r2974, %r230, %r2972;
	mul.wide.s32 	%rd310, %r2974, 4;
	add.s64 	%rd311, %rd87, %rd310;
	ld.shared.u32 	%r2645, [%rd311];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2655, %r2652}, {%r443, %r446}, {%r2638}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2664, %r2661}, {%r443, %r446}, {%r2645}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2648, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2648, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2653, %r481, %r2655, %r2650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r481, %r2664, %r2659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r484, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r481, %r2652, %r2666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r484, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r481, %r2661, %r2673;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2699, %r2702}, {%r527, %r530}, {%r2653, %r2669}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2706, %r2710}, {%r527, %r530}, {%r2662, %r2676}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2699, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r2702, %r2702, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r2706, %r2706, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r2710, %r2710, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2713, %r1880, %r2709, %r2630;
	// end inline asm
	add.s16 	%rs260, %rs280, -2;
	mul.hi.s16 	%rs261, %rs260, 10923;
	shr.u16 	%rs262, %rs261, 15;
	add.s16 	%rs263, %rs261, %rs262;
	mul.lo.s16 	%rs264, %rs263, 6;
	sub.s16 	%rs265, %rs260, %rs264;
	mul.wide.s16 	%r2975, %rs265, 16;
	add.s32 	%r2976, %r229, %r2975;
	mul.wide.s32 	%rd312, %r2976, 4;
	add.s64 	%rd313, %rd87, %rd312;
	ld.shared.u32 	%r2721, [%rd313];
	add.s32 	%r2977, %r230, %r2975;
	mul.wide.s32 	%rd314, %r2977, 4;
	add.s64 	%rd315, %rd87, %rd314;
	ld.shared.u32 	%r2728, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2738, %r2735}, {%r443, %r446}, {%r2721}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2747, %r2744}, {%r443, %r446}, {%r2728}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2731, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r2731, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r481, %r2738, %r2733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2740, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r2740, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r481, %r2747, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r484, %r2738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r481, %r2735, %r2749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r484, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r481, %r2744, %r2756;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2785}, {%r527, %r530}, {%r2736, %r2752}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2789, %r2793}, {%r527, %r530}, {%r2745, %r2759}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r2782, %r2782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r2785, %r2785, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r2789, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r2793, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r1880, %r2792, %r2713;
	// end inline asm
	add.s16 	%rs266, %rs280, -1;
	mul.hi.s16 	%rs267, %rs266, 10923;
	shr.u16 	%rs268, %rs267, 15;
	add.s16 	%rs269, %rs267, %rs268;
	mul.lo.s16 	%rs270, %rs269, 6;
	sub.s16 	%rs271, %rs266, %rs270;
	mul.wide.s16 	%r2978, %rs271, 16;
	add.s32 	%r2979, %r229, %r2978;
	mul.wide.s32 	%rd316, %r2979, 4;
	add.s64 	%rd317, %rd87, %rd316;
	ld.shared.u32 	%r2804, [%rd317];
	add.s32 	%r2980, %r230, %r2978;
	mul.wide.s32 	%rd318, %r2980, 4;
	add.s64 	%rd319, %rd87, %rd318;
	ld.shared.u32 	%r2811, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2821, %r2818}, {%r443, %r446}, {%r2804}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2830, %r2827}, {%r443, %r446}, {%r2811}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2814, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r2814, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r481, %r2821, %r2816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2823, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2825, %r2823, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r481, %r2830, %r2825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2832, %r484, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r481, %r2818, %r2832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2839, %r484, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r481, %r2827, %r2839;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2865, %r2868}, {%r527, %r530}, {%r2819, %r2835}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2872, %r2876}, {%r527, %r530}, {%r2828, %r2842}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2864, %r2865, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r2868, %r2868, %r2864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r2872, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r2876, %r2876, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2879, %r1880, %r2875, %r2796;
	// end inline asm
	mul.hi.s16 	%rs272, %rs280, 10923;
	shr.u16 	%rs273, %rs272, 15;
	add.s16 	%rs274, %rs272, %rs273;
	mul.lo.s16 	%rs275, %rs274, 6;
	sub.s16 	%rs276, %rs280, %rs275;
	mul.wide.s16 	%r2981, %rs276, 16;
	add.s32 	%r2982, %r229, %r2981;
	mul.wide.s32 	%rd320, %r2982, 4;
	add.s64 	%rd321, %rd87, %rd320;
	ld.shared.u32 	%r2887, [%rd321];
	add.s32 	%r2983, %r230, %r2981;
	mul.wide.s32 	%rd322, %r2983, 4;
	add.s64 	%rd323, %rd87, %rd322;
	ld.shared.u32 	%r2894, [%rd323];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2904, %r2901}, {%r443, %r446}, {%r2887}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2913, %r2910}, {%r443, %r446}, {%r2894}, {%r2945, %r2945};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2897, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2897, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r481, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2906, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2908, %r2906, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r481, %r2913, %r2908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2915, %r484, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r481, %r2901, %r2915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r484, %r2913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r481, %r2910, %r2922;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2948, %r2951}, {%r527, %r530}, {%r2902, %r2918}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2955, %r2959}, {%r527, %r530}, {%r2911, %r2925}, {%r2945, %r2945}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2947, %r2948, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r2951, %r2951, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r2955, %r2955, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r2959, %r2959, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1880, %r2958, %r2879;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p299, %r108, 24;
	@%p299 bra 	$L__BB0_225;
$L__BB0_169:                            // %L40300
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3054, %r3054, 6;
	add.s16 	%rs280, %rs280, 6;
	setp.ne.s32 	%p303, %r3054, 24;
	@%p303 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_170;
$L__BB0_167:                            // %L25449
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p294, %r312, 12;
	setp.eq.s32 	%p295, %r3054, 0;
	selp.b32 	%r2438, %r92, 0, %p295;
	setp.eq.s32 	%p296, %r3054, 6;
	selp.b32 	%r2439, %r96, %r2438, %p296;
	setp.eq.s32 	%p297, %r3054, 12;
	selp.b32 	%r2440, %r100, %r2439, %p297;
	setp.eq.s32 	%p298, %r3054, 18;
	selp.b32 	%r2441, %r104, %r2440, %p298;
	selp.b32 	%r2442, %r93, 0, %p295;
	selp.b32 	%r2443, %r97, %r2442, %p296;
	selp.b32 	%r2444, %r101, %r2443, %p297;
	selp.b32 	%r2445, %r105, %r2444, %p298;
	selp.b32 	%r2446, %r94, 0, %p295;
	selp.b32 	%r2447, %r98, %r2446, %p296;
	selp.b32 	%r2448, %r102, %r2447, %p297;
	selp.b32 	%r2449, %r106, %r2448, %p298;
	selp.b32 	%r2450, %r95, 0, %p295;
	selp.b32 	%r2451, %r99, %r2450, %p296;
	selp.b32 	%r2452, %r103, %r2451, %p297;
	selp.b32 	%r2453, %r107, %r2452, %p298;
	// begin inline asm
	mov.b32 %r1937, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r1948, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r1936, %r2441, 8;
	// begin inline asm
	lop3.b32 %r1934, %r969, %r1936, %r1937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1939, %r1937, %r1938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1942, %r1934, %r1939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1945, %r980, %r1936, %r1948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1949, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1950, %r1948, %r1949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1953, %r1945, %r1950;
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r1982, %r2445, 8;
	// begin inline asm
	lop3.b32 %r1980, %r969, %r1982, %r1983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1985, %r1983, %r1984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1988, %r1980, %r1985;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1991, %r980, %r1982, %r1994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1995, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1996, %r1994, %r1995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1999, %r1991, %r1996;
	// end inline asm
	// begin inline asm
	mov.b32 %r2029, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2040, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2028, %r2449, 8;
	// begin inline asm
	lop3.b32 %r2026, %r969, %r2028, %r2029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2031, %r2029, %r2030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2034, %r2026, %r2031;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2037, %r980, %r2028, %r2040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2041, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2042, %r2040, %r2041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2045, %r2037, %r2042;
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2086, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2074, %r2453, 8;
	// begin inline asm
	lop3.b32 %r2072, %r969, %r2074, %r2075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2077, %r2075, %r2076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2080, %r2072, %r2077;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2083, %r980, %r2074, %r2086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2087, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2088, %r2086, %r2087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2091, %r2083, %r2088;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r1953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2094, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r1999;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2097, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r1942;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r1988;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2103, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r2045;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2106, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r2091;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2109, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r2034;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2112, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2080;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2115, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2181, %r2178}, {%r335, %r338}, {%r2094}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2190, %r2187}, {%r335, %r338}, {%r2097}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2199, %r2196}, {%r335, %r338}, {%r2100}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2208, %r2205}, {%r335, %r338}, {%r2103}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2217, %r2214}, {%r335, %r338}, {%r2106}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2226, %r2223}, {%r335, %r338}, {%r2109}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2235, %r2232}, {%r335, %r338}, {%r2112}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2244, %r2241}, {%r335, %r338}, {%r2115}, {%r1302, %r1302};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2174, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2176, %r2174, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2179, %r387, %r2181, %r2176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2183, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2185, %r2183, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2188, %r387, %r2190, %r2185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2192, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2194, %r2192, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r387, %r2199, %r2194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2201, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r2201, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r387, %r2208, %r2203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2210, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r2210, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r387, %r2217, %r2212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2219, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2219, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r387, %r2226, %r2221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2228, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r2228, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r387, %r2235, %r2230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2237, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2239, %r2237, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2242, %r387, %r2244, %r2239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r390, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r387, %r2178, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r390, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r387, %r2187, %r2253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r390, %r2199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r387, %r2196, %r2260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r390, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r387, %r2205, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r390, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r387, %r2214, %r2274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2281, %r390, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2284, %r387, %r2223, %r2281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2288, %r390, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2291, %r387, %r2232, %r2288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2295, %r390, %r2244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2298, %r387, %r2241, %r2295;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2375, %r2376}, {%r431, %r434}, {%r2179, %r2249}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2383, %r2384}, {%r431, %r434}, {%r2188, %r2256}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2391, %r2392}, {%r431, %r434}, {%r2197, %r2263}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2399, %r2400}, {%r431, %r434}, {%r2206, %r2270}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2408}, {%r431, %r434}, {%r2215, %r2277}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2415, %r2416}, {%r431, %r434}, {%r2224, %r2284}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2423, %r2424}, {%r431, %r434}, {%r2233, %r2291}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2431, %r2432}, {%r431, %r434}, {%r2242, %r2298}, {%r1302, %r1302}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2374, %r2375, %r2376, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2375, %r2376, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2383, %r2384, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2386, %r2383, %r2384, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2390, %r2391, %r2392, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2394, %r2391, %r2392, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2399, %r2400, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2399, %r2400, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2407, %r2408, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2407, %r2408, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2415, %r2416, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2415, %r2416, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2423, %r2424, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2423, %r2424, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2431, %r2432, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2431, %r2432, %r724;
	// end inline asm
	add.s16 	%rs228, %rs10, %rs280;
	add.s16 	%rs229, %rs228, -29;
	mul.hi.s16 	%rs230, %rs229, 10923;
	shr.u16 	%rs231, %rs230, 15;
	add.s16 	%rs232, %rs230, %rs231;
	mul.lo.s16 	%rs233, %rs232, 6;
	sub.s16 	%rs234, %rs229, %rs233;
	mul.wide.s16 	%r2454, %rs234, 16;
	add.s32 	%r2455, %r222, %r2454;
	mul.wide.s32 	%rd276, %r2455, 4;
	add.s64 	%rd7, %rd87, %rd276;
	st.shared.u32 	[%rd7], %r2374;
	add.s32 	%r2456, %r223, %r2454;
	mul.wide.u32 	%rd278, %r2456, 4;
	add.s64 	%rd8, %rd87, %rd278;
	st.shared.u32 	[%rd8], %r2378;
	add.s32 	%r2457, %r225, %r2454;
	mul.wide.s32 	%rd279, %r2457, 4;
	add.s64 	%rd9, %rd87, %rd279;
	st.shared.u32 	[%rd9], %r2382;
	add.s32 	%r2458, %r226, %r2454;
	mul.wide.u32 	%rd280, %r2458, 4;
	add.s64 	%rd10, %rd87, %rd280;
	st.shared.u32 	[%rd10], %r2386;
	cvt.s64.s32 	%rd281, %r2454;
	add.s64 	%rd282, %rd32, %rd281;
	shl.b64 	%rd283, %rd282, 2;
	add.s64 	%rd11, %rd87, %rd283;
	st.shared.u32 	[%rd11+32], %r2390;
	add.s32 	%r2459, %r227, %r2454;
	mul.wide.u32 	%rd284, %r2459, 4;
	add.s64 	%rd12, %rd87, %rd284;
	st.shared.u32 	[%rd12], %r2394;
	add.s64 	%rd285, %rd35, %rd281;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd13, %rd87, %rd286;
	st.shared.u32 	[%rd13+32], %r2398;
	add.s32 	%r2460, %r228, %r2454;
	mul.wide.u32 	%rd287, %r2460, 4;
	add.s64 	%rd14, %rd87, %rd287;
	st.shared.u32 	[%rd14], %r2402;
	add.s16 	%rs235, %rs9, %rs280;
	add.s16 	%rs236, %rs235, -2;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r2461, %rs241, 16;
	add.s32 	%r2462, %r222, %r2461;
	mul.wide.s32 	%rd288, %r2462, 4;
	add.s64 	%rd15, %rd87, %rd288;
	st.shared.u32 	[%rd15], %r2406;
	add.s32 	%r2463, %r223, %r2461;
	mul.wide.u32 	%rd289, %r2463, 4;
	add.s64 	%rd16, %rd87, %rd289;
	st.shared.u32 	[%rd16], %r2410;
	add.s32 	%r2464, %r225, %r2461;
	mul.wide.s32 	%rd290, %r2464, 4;
	add.s64 	%rd17, %rd87, %rd290;
	st.shared.u32 	[%rd17], %r2414;
	add.s32 	%r2465, %r226, %r2461;
	mul.wide.u32 	%rd291, %r2465, 4;
	add.s64 	%rd18, %rd87, %rd291;
	st.shared.u32 	[%rd18], %r2418;
	cvt.s64.s32 	%rd292, %r2461;
	add.s64 	%rd293, %rd32, %rd292;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd19, %rd87, %rd294;
	st.shared.u32 	[%rd19+32], %r2422;
	add.s32 	%r2466, %r227, %r2461;
	mul.wide.u32 	%rd295, %r2466, 4;
	add.s64 	%rd20, %rd87, %rd295;
	st.shared.u32 	[%rd20], %r2426;
	add.s64 	%rd296, %rd35, %rd292;
	shl.b64 	%rd297, %rd296, 2;
	add.s64 	%rd21, %rd87, %rd297;
	st.shared.u32 	[%rd21+32], %r2430;
	add.s32 	%r2467, %r228, %r2461;
	mul.wide.u32 	%rd298, %r2467, 4;
	add.s64 	%rd22, %rd87, %rd298;
	st.shared.u32 	[%rd22], %r2434;
	@%p294 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_168;
$L__BB0_224:                            // %oksrem13978
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2374;
	st.shared.u32 	[%rd8], %r2378;
	st.shared.u32 	[%rd9], %r2382;
	st.shared.u32 	[%rd10], %r2386;
	st.shared.u32 	[%rd11+32], %r2390;
	st.shared.u32 	[%rd12], %r2394;
	st.shared.u32 	[%rd13+32], %r2398;
	st.shared.u32 	[%rd14], %r2402;
	st.shared.u32 	[%rd15], %r2406;
	st.shared.u32 	[%rd16], %r2410;
	st.shared.u32 	[%rd17], %r2414;
	st.shared.u32 	[%rd18], %r2418;
	st.shared.u32 	[%rd19+32], %r2422;
	st.shared.u32 	[%rd20], %r2426;
	st.shared.u32 	[%rd21+32], %r2430;
	st.shared.u32 	[%rd22], %r2434;
	bra.uni 	$L__BB0_168;
$L__BB0_225:                            // %pass18414
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2985, %r109, 786432;
	or.b32  	%r2986, %r2985, %r2;
	add.s32 	%r2987, %r2986, %r231;
	or.b32  	%r2988, %r2987, %r232;
	cvt.u64.u32 	%rd324, %r2988;
	add.s64 	%rd325, %rd324, %rd23;
	mul.hi.s64 	%rd326, %rd325, 3074457345618258603;
	shr.u64 	%rd327, %rd326, 63;
	shr.s64 	%rd328, %rd326, 27;
	add.s64 	%rd329, %rd328, %rd327;
	setp.lt.s64 	%p300, %rd325, 0;
	mul.lo.s64 	%rd330, %rd329, 805306368;
	setp.ne.s64 	%p301, %rd330, %rd325;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd331, -1, 0, %p302;
	add.s64 	%rd332, %rd329, %rd331;
	mul.lo.s64 	%rd333, %rd332, -805306368;
	add.s64 	%rd334, %rd333, %rd325;
	shl.b64 	%rd335, %rd334, 2;
	add.s64 	%rd336, %rd4, %rd335;
	st.global.u32 	[%rd336], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2945;
	mov.u32 	%r110, %r2945;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L40331
	mov.u32 	%r2989, 0;
	st.global.u32 	[%rd6], %r2989;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd201, exception3604;
	cvta.global.u64 	%rd202, %rd201;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd202;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_221:                            // %post_box_union9523
	mov.u64 	%rd240, exception3604;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5128
	mov.u32 	%r3005, 5;
	st.global.u32 	[%rd6], %r3005;
	mov.u64 	%rd367, exception3564;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5284
	mov.u32 	%r3004, 5;
	st.global.u32 	[%rd6], %r3004;
	mov.u64 	%rd365, exception3564;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5440
	mov.u32 	%r3003, 5;
	st.global.u32 	[%rd6], %r3003;
	mov.u64 	%rd363, exception3564;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5596
	mov.u32 	%r3002, 5;
	st.global.u32 	[%rd6], %r3002;
	mov.u64 	%rd361, exception3564;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5752
	mov.u32 	%r3001, 5;
	st.global.u32 	[%rd6], %r3001;
	mov.u64 	%rd359, exception3564;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5908
	mov.u32 	%r3000, 5;
	st.global.u32 	[%rd6], %r3000;
	mov.u64 	%rd357, exception3564;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6064
	mov.u32 	%r2999, 5;
	st.global.u32 	[%rd6], %r2999;
	mov.u64 	%rd355, exception3564;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6220
	mov.u32 	%r2998, 5;
	st.global.u32 	[%rd6], %r2998;
	mov.u64 	%rd353, exception3564;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6376
	mov.u32 	%r2997, 5;
	st.global.u32 	[%rd6], %r2997;
	mov.u64 	%rd351, exception3564;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6532
	mov.u32 	%r2996, 5;
	st.global.u32 	[%rd6], %r2996;
	mov.u64 	%rd349, exception3564;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6714
	mov.u32 	%r2995, 5;
	st.global.u32 	[%rd6], %r2995;
	mov.u64 	%rd347, exception3564;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6870
	mov.u32 	%r2994, 5;
	st.global.u32 	[%rd6], %r2994;
	mov.u64 	%rd345, exception3564;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7026
	mov.u32 	%r2993, 5;
	st.global.u32 	[%rd6], %r2993;
	mov.u64 	%rd343, exception3564;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7182
	mov.u32 	%r2992, 5;
	st.global.u32 	[%rd6], %r2992;
	mov.u64 	%rd341, exception3564;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7338
	mov.u32 	%r2991, 5;
	st.global.u32 	[%rd6], %r2991;
	mov.u64 	%rd339, exception3564;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7494
	mov.u32 	%r2990, 5;
	st.global.u32 	[%rd6], %r2990;
	mov.u64 	%rd337, exception3564;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3007, 2;
	st.global.u32 	[%rd6], %r3007;
	mov.u64 	%rd371, exception3564;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3006, 3;
	st.global.u32 	[%rd6], %r3006;
	mov.u64 	%rd369, exception3564;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd52, exception1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r312, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd57, __unnamed_1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r540, [retval0+0];
	} // callseq 49
	mov.u32 	%r542, 4;
	st.global.u32 	[%rd6], %r542;
	mov.u64 	%rd60, exception3564;
	cvta.global.u64 	%rd61, %rd60;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd61;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
