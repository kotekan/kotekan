// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<305>;
	.reg .b16 	%rs<191>;
	.reg .b32 	%r<3152>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<370>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r312, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd48, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r321, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r321, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd49, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r313, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r322, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r323, %r3, %r322;
	add.s32 	%r324, %r323, %r5;
	mul.wide.u32 	%rd56, %r324, 4;
	add.s64 	%rd6, %rd49, %rd56;
	mov.u32 	%r325, 1;
	st.global.u32 	[%rd6], %r325;
	setp.gt.u32 	%p5, %r313, 4095;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r314, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r314, %r313;
	setp.gt.s32 	%p7, %r314, 8191;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r315, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r314, %r313;
	mad.lo.s32 	%r326, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r327, %r326, %r326, 4;
	setp.gt.u32 	%p9, %r327, 89478484;
	setp.gt.u32 	%p10, %r315, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r316, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r316, %r315;
	setp.lt.s32 	%p13, %r316, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r328, %r316, %r315;
	mul.hi.s32 	%r329, %r6, 715827883;
	shr.u32 	%r330, %r329, 31;
	shr.s32 	%r331, %r329, 2;
	add.s32 	%r332, %r331, %r330;
	setp.eq.s32 	%p15, %r328, %r332;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r317, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r317, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r318, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r318, %r317;
	setp.gt.s32 	%p18, %r318, 512;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r319, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r318, %r317;
	and.b32  	%r333, %r7, 7;
	setp.ne.s32 	%p20, %r333, 0;
	setp.lt.s32 	%p21, %r319, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r320, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r320, %r319;
	setp.gt.s32 	%p24, %r320, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r334, %r320, %r319;
	and.b32  	%r335, %r334, 7;
	setp.eq.s32 	%p26, %r335, 0;
	setp.eq.s32 	%p27, %r334, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_13;
$L__BB0_172:                            // %pass162
	and.b32  	%r168, %r322, 3;
	shr.u32 	%r169, %r322, 2;
	mul.lo.s32 	%r336, %r168, %r169;
	and.b32  	%r337, %r336, 7;
	cvt.rn.f32.s32 	%f205, %r337;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p304, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_184;
// %bb.173:
	@%p304 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r171, %f788;
	and.b32  	%r338, %r171, 8388607;
	or.b32  	%r3147, %r338, 1065353216;
	mov.b32 	%f783, %r3147;
	add.s32 	%r339, %r171, -1073741824;
	and.b32  	%r3148, %r339, -8388608;
	setp.eq.s32 	%p36, %r3148, 0;
	@%p36 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r340, %r3148, 192937984;
	add.s32 	%r341, %r3147, %r340;
	mov.b32 	%f217, %r341;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3148, %r3148, %r340;
	mov.b32 	%r3147, %f783;
	setp.ne.s32 	%p37, %r3148, 0;
	setp.ne.s32 	%p38, %r3147, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r171, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r170, %f172;
	setp.lt.u32 	%p31, %r170, 1073741824;
	@%p31 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p32, %r170, -2147483647;
	@%p32 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r342, %f169;
	and.b32  	%r178, %r342, -2147483648;
	@%p41 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r343, %f784;
	or.b32  	%r344, %r178, %r343;
	mov.b32 	%f784, %r344;
$L__BB0_186:                            // %__nv_fmodf.exit
	shl.b32 	%r181, %r322, 1;
	and.b32  	%r182, %r181, 2;
	mul.lo.s32 	%r359, %r182, %r169;
	cvt.rn.f32.s32 	%f259, %r359;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r360, %r9, 8388607;
	or.b32  	%r3095, %r360, 1065353216;
	mov.b32 	%f733, %r3095;
	add.s32 	%r361, %r9, -1073741824;
	and.b32  	%r3096, %r361, -8388608;
	setp.eq.s32 	%p56, %r3096, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r3096, 192937984;
	add.s32 	%r363, %r3095, %r362;
	mov.b32 	%f271, %r363;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3096, %r3096, %r362;
	mov.b32 	%r3095, %f733;
	setp.ne.s32 	%p57, %r3096, 0;
	setp.ne.s32 	%p58, %r3095, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r183, %r182, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r364, %f186;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f734;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f734, %r367;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r183, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r376, %r183, %r169;
	mul.hi.u32 	%r377, %r376, -1431655765;
	shr.u32 	%r378, %r377, 4;
	mul.lo.s32 	%r379, %r378, 24;
	sub.s32 	%r380, %r376, %r379;
	cvt.rn.f32.s32 	%f311, %r380;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r381, %r17, 8388607;
	or.b32  	%r3097, %r381, 1065353216;
	mov.b32 	%f737, %r3097;
	add.s32 	%r382, %r17, -1073741824;
	and.b32  	%r3098, %r382, -8388608;
	setp.eq.s32 	%p77, %r3098, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r383, %r3098, 192937984;
	add.s32 	%r384, %r3097, %r383;
	mov.b32 	%f323, %r384;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3098, %r3098, %r383;
	mov.b32 	%r3097, %f737;
	setp.ne.s32 	%p78, %r3098, 0;
	setp.ne.s32 	%p79, %r3097, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r385, %f18;
	and.b32  	%r386, %r385, -2147483648;
	mov.b32 	%r387, %f738;
	or.b32  	%r388, %r386, %r387;
	mov.b32 	%f738, %r388;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r389, %f333;
	and.b32  	%r390, %r389, -2147483648;
	or.b32  	%r391, %r390, 1056964608;
	mov.b32 	%f334, %r391;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r392, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r393, %r392, 1;
	setp.eq.b32 	%p85, %r393, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r394, %r392, 2;
	setp.eq.s32 	%p86, %r394, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r395, %r392, 1;
	and.b32  	%r396, %r395, 2;
	setp.eq.s32 	%p87, %r396, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r169, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r403, %r182, %r26;
	cvt.u16.u32 	%rs9, %r403;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r404, %r28, 8388607;
	or.b32  	%r3099, %r404, 1065353216;
	mov.b32 	%f743, %r3099;
	add.s32 	%r405, %r28, -1073741824;
	and.b32  	%r3100, %r405, -8388608;
	setp.eq.s32 	%p98, %r3100, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3100, 192937984;
	add.s32 	%r407, %r3099, %r406;
	mov.b32 	%f376, %r407;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3100, %r3100, %r406;
	mov.b32 	%r3099, %f743;
	setp.ne.s32 	%p99, %r3100, 0;
	setp.ne.s32 	%p100, %r3099, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r408, %f39;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f744;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f744, %r411;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r412, %f386;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f387, %r414;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r415, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p106, %r416, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p107, %r417, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p108, %r419, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r420, %r183, %r26;
	mul.hi.u32 	%r421, %r420, -1431655765;
	shr.u32 	%r422, %r421, 1;
	mul.lo.s32 	%r423, %r422, 3;
	sub.s32 	%r424, %r420, %r423;
	cvt.rn.f32.s32 	%f417, %r424;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r425, %r36, 8388607;
	or.b32  	%r3101, %r425, 1065353216;
	mov.b32 	%f749, %r3101;
	add.s32 	%r426, %r36, -1073741824;
	and.b32  	%r3102, %r426, -8388608;
	setp.eq.s32 	%p121, %r3102, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r3102, 192937984;
	add.s32 	%r428, %r3101, %r427;
	mov.b32 	%f429, %r428;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3102, %r3102, %r427;
	mov.b32 	%r3101, %f749;
	setp.ne.s32 	%p122, %r3102, 0;
	setp.ne.s32 	%p123, %r3101, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r429, %f60;
	and.b32  	%r430, %r429, -2147483648;
	mov.b32 	%r431, %f750;
	or.b32  	%r432, %r430, %r431;
	mov.b32 	%f750, %r432;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r433, %f439;
	and.b32  	%r434, %r433, -2147483648;
	or.b32  	%r435, %r434, 1056964608;
	mov.b32 	%f440, %r435;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r436, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r437, %r436, 1;
	setp.eq.b32 	%p129, %r437, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r438, %r436, 2;
	setp.eq.s32 	%p130, %r438, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r439, %r436, 1;
	and.b32  	%r440, %r439, 2;
	setp.eq.s32 	%p131, %r440, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r322, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_194;
// %bb.78:
	@%p304 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_79;
$L__BB0_190:
	mov.b32 	%r185, %f788;
	and.b32  	%r447, %r185, 8388607;
	or.b32  	%r3149, %r447, 1065353216;
	mov.b32 	%f787, %r3149;
	add.s32 	%r448, %r185, -1073741824;
	and.b32  	%r3150, %r448, -8388608;
	setp.eq.s32 	%p142, %r3150, 0;
	@%p142 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r449, %r3150, 192937984;
	add.s32 	%r450, %r3149, %r449;
	mov.b32 	%f479, %r450;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3150, %r3150, %r449;
	mov.b32 	%r3149, %f787;
	setp.ne.s32 	%p143, %r3150, 0;
	setp.ne.s32 	%p144, %r3149, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r185, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_194;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r184, %f189;
	setp.lt.u32 	%p137, %r184, 1073741824;
	@%p137 bra 	$L__BB0_189;
// %bb.80:
	setp.lt.u32 	%p138, %r184, -2147483647;
	@%p138 bra 	$L__BB0_187;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r451, %f788;
	or.b32  	%r452, %r178, %r451;
	mov.b32 	%f788, %r452;
$L__BB0_196:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r467, %r47, 8388607;
	or.b32  	%r3103, %r467, 1065353216;
	mov.b32 	%f759, %r3103;
	add.s32 	%r468, %r47, -1073741824;
	and.b32  	%r3104, %r468, -8388608;
	setp.eq.s32 	%p162, %r3104, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r469, %r3104, 192937984;
	add.s32 	%r470, %r3103, %r469;
	mov.b32 	%f532, %r470;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3104, %r3104, %r469;
	mov.b32 	%r3103, %f759;
	setp.ne.s32 	%p163, %r3104, 0;
	setp.ne.s32 	%p164, %r3103, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r471, %f203;
	and.b32  	%r472, %r471, -2147483648;
	mov.b32 	%r473, %f760;
	or.b32  	%r474, %r472, %r473;
	mov.b32 	%f760, %r474;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r169;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r483, %r55, 8388607;
	or.b32  	%r3105, %r483, 1065353216;
	mov.b32 	%f763, %r3105;
	add.s32 	%r484, %r55, -1073741824;
	and.b32  	%r3106, %r484, -8388608;
	setp.eq.s32 	%p182, %r3106, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r485, %r3106, 192937984;
	add.s32 	%r486, %r3105, %r485;
	mov.b32 	%f584, %r486;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3106, %r3106, %r485;
	mov.b32 	%r3105, %f763;
	setp.ne.s32 	%p183, %r3106, 0;
	setp.ne.s32 	%p184, %r3105, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r487, %f104;
	and.b32  	%r488, %r487, -2147483648;
	mov.b32 	%r489, %f764;
	or.b32  	%r490, %r488, %r489;
	mov.b32 	%f764, %r490;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r322, 1;
	shr.u32 	%r66, %r322, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r505, %r68, 8388607;
	or.b32  	%r3107, %r505, 1065353216;
	mov.b32 	%f767, %r3107;
	add.s32 	%r506, %r68, -1073741824;
	and.b32  	%r3108, %r506, -8388608;
	setp.eq.s32 	%p203, %r3108, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r507, %r3108, 192937984;
	add.s32 	%r508, %r3107, %r507;
	mov.b32 	%f638, %r508;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3108, %r3108, %r507;
	mov.b32 	%r3107, %f767;
	setp.ne.s32 	%p204, %r3108, 0;
	setp.ne.s32 	%p205, %r3107, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r509, %f121;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%r511, %f768;
	or.b32  	%r512, %r510, %r511;
	mov.b32 	%f768, %r512;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r513, %f648;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f649, %r515;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r516, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p211, %r517, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p212, %r518, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p213, %r520, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r169, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r521, %r76, 8388607;
	or.b32  	%r3109, %r521, 1065353216;
	mov.b32 	%f773, %r3109;
	add.s32 	%r522, %r76, -1073741824;
	and.b32  	%r3110, %r522, -8388608;
	setp.eq.s32 	%p224, %r3110, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r523, %r3110, 192937984;
	add.s32 	%r524, %r3109, %r523;
	mov.b32 	%f691, %r524;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3110, %r3110, %r523;
	mov.b32 	%r3109, %f773;
	setp.ne.s32 	%p225, %r3110, 0;
	setp.ne.s32 	%p226, %r3109, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r525, %f142;
	and.b32  	%r526, %r525, -2147483648;
	mov.b32 	%r527, %f774;
	or.b32  	%r528, %r526, %r527;
	mov.b32 	%f774, %r528;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r529, %f701;
	and.b32  	%r530, %r529, -2147483648;
	or.b32  	%r531, %r530, 1056964608;
	mov.b32 	%f702, %r531;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r532, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r533, %r532, 1;
	setp.eq.b32 	%p232, %r533, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r534, %r532, 2;
	setp.eq.s32 	%p233, %r534, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r535, %r532, 1;
	and.b32  	%r536, %r535, 2;
	setp.eq.s32 	%p234, %r536, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r322, 15;
	mov.u32 	%r194, 999999999;
	@%p238 bra 	$L__BB0_198;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r544, %r322, 6, %r4;
	cvt.u16.u32 	%rs15, %r544;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r545, %rs20;
	and.b32  	%r546, %r545, 255;
	mul.wide.u32 	%rd57, %r546, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.u32 	%r547, [%rd58];
	shl.b32 	%r548, %r547, 16;
	cvt.s32.s16 	%r85, %r547;
	shr.s32 	%r86, %r547, 16;
	or.b32  	%r549, %r548, 65535;
	setp.lt.u32 	%p239, %r549, 589823;
	setp.lt.u32 	%p240, %r547, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_145;
$L__BB0_197:                            // %L1246
	mul.lo.s32 	%r553, %r86, 290;
	mad.lo.s32 	%r194, %r85, 33, %r553;
$L__BB0_198:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r351, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r352, %r351, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r459, %f489;
	or.b32  	%r353, %r352, 1056964608;
	mov.b32 	%r368, %f282;
	and.b32  	%r460, %r459, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r353;
	and.b32  	%r369, %r368, -2147483648;
	or.b32  	%r461, %r460, 1056964608;
	mov.b32 	%r475, %f542;
	mov.b32 	%r497, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%f490, %r461;
	and.b32  	%r476, %r475, -2147483648;
	and.b32  	%r498, %r497, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r370;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r477, %r476, 1056964608;
	or.b32  	%r499, %r498, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r477;
	mov.b32 	%f596, %r499;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r354, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r355, %r354, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r462, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r355, 1;
	cvt.rzi.s32.f32 	%r371, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r463, %r462, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r356, %r354, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r372, %r371, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r463, 1;
	cvt.rzi.s32.f32 	%r478, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r500, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r356, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r357, %r354, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r372, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r464, %r462, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r479, %r478, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r501, %r500, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r358, %r357, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r373, %r371, 2;
	setp.eq.s32 	%p151, %r464, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r465, %r462, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r479, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r501, 1;
	setp.eq.s32 	%p46, %r358, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r373, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r374, %r371, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r466, %r465, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r480, %r478, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r502, %r500, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r375, %r374, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r466, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r480, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r481, %r478, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r502, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r503, %r500, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r375, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r482, %r481, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r504, %r503, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r347, %f258;
	mov.b32 	%r350, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r482, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r504, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r346, %r350, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r455, %f520;
	mov.b32 	%r458, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r345, %r347, %r346;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r348, %r350, %r347;
	// end inline asm
	mov.b32 	%r398, %f17;
	mov.b32 	%r399, %f37;
	mov.b32 	%r401, %f16;
	mov.b32 	%r402, %f38;
	mov.b32 	%r442, %f83;
	mov.b32 	%r443, %f85;
	mov.b32 	%r445, %f755;
	mov.b32 	%r446, %f757;
	xor.b32  	%r454, %r458, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r445;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r453, %r455, %r454;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r456, %r458, %r455;
	// end inline asm
	mov.b32 	%r493, %f625;
	mov.b32 	%r492, %f103;
	mov.b32 	%r496, %f622;
	mov.b32 	%r495, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r491, %r493, %r492;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r494, %r496, %r495;
	// end inline asm
	mov.b32 	%r538, %f165;
	mov.b32 	%r539, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r537, %r539, %r538;
	// end inline asm
	mov.b32 	%r541, %f779;
	mov.b32 	%r542, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r540, %r542, %r541;
	// end inline asm
	mul.lo.s32 	%r555, %r168, 24;
	shl.b32 	%r556, %r4, 1;
	and.b32  	%r557, %r556, 2;
	shr.u32 	%r195, %r322, 3;
	bfe.u32 	%r558, %r322, 3, 1;
	or.b32  	%r559, %r557, %r558;
	and.b32  	%r560, %r195, 2;
	or.b32  	%r196, %r560, %r64;
	cvt.u16.u32 	%rs22, %r196;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 3;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r561, %rs26;
	and.b32  	%r562, %r561, 255;
	and.b16  	%rs27, %rs26, 255;
	mul.wide.u16 	%r563, %rs27, 8;
	add.s32 	%r564, %r555, %r3;
	or.b32  	%r565, %r564, %r559;
	add.s32 	%r566, %r565, %r563;
	mul.wide.u32 	%rd64, %r566, 4;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.u32 	%r197, [%rd65];
	or.b32  	%r567, %r559, 4;
	cvt.u64.u32 	%rd66, %r563;
	cvt.u64.u32 	%rd67, %r564;
	cvt.u64.u32 	%rd68, %r559;
	add.s64 	%rd69, %rd67, %rd68;
	add.s64 	%rd70, %rd69, %rd66;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd72, %rd2, %rd71;
	ld.global.u32 	%r198, [%rd72+16];
	cvt.u64.u32 	%rd73, %r555;
	cvt.u64.u32 	%rd74, %r3;
	add.s64 	%rd75, %rd74, %rd73;
	add.s64 	%rd76, %rd75, %rd68;
	add.s64 	%rd77, %rd76, %rd66;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.u32 	%r199, [%rd79+384];
	cvt.u64.u32 	%rd80, %r567;
	add.s64 	%rd81, %rd75, %rd80;
	add.s64 	%rd82, %rd81, %rd66;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r200, [%rd84+384];
	shl.b32 	%r568, %r313, 14;
	shl.b32 	%r569, %r317, 5;
	add.s32 	%r201, %r569, %r568;
	shl.b32 	%r570, %r322, 2;
	and.b32  	%r202, %r570, 16;
	shl.b32 	%r203, %r4, 2;
	and.b32  	%r204, %r570, 12;
	shl.b32 	%r205, %r2, 5;
	and.b32  	%r206, %r322, 4;
	bfe.s32 	%r571, %r322, 2, 1;
	shl.b32 	%r572, %r322, 4;
	and.b32  	%r573, %r181, 8;
	or.b32  	%r574, %r573, %r572;
	bfe.u32 	%r575, %r574, 3, 3;
	mul.lo.s32 	%r207, %r575, 260;
	cvt.u16.u32 	%rs28, %r322;
	and.b16  	%rs29, %rs28, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 12;
	mul.lo.s16 	%rs32, %rs31, 24;
	sub.s16 	%rs33, %rs28, %rs32;
	cvt.u32.u16 	%r576, %rs33;
	and.b32  	%r208, %r576, 255;
	add.s32 	%r577, %r4, 6;
	add.s32 	%r578, %r5, 192;
	and.b32  	%r579, %r578, 224;
	shr.u32 	%r580, %r577, 3;
	mad.lo.s32 	%r209, %r580, 260, %r579;
	add.s32 	%r581, %r4, 12;
	add.s32 	%r582, %r5, 128;
	and.b32  	%r583, %r582, 224;
	shr.u32 	%r584, %r581, 3;
	mad.lo.s32 	%r210, %r584, 260, %r583;
	add.s32 	%r585, %r4, 18;
	add.s32 	%r586, %r5, 64;
	and.b32  	%r587, %r586, 224;
	shr.u32 	%r588, %r585, 3;
	mad.lo.s32 	%r211, %r588, 260, %r587;
	or.b32  	%r212, %r5, 780;
	add.s32 	%r589, %r4, 30;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r213, %r590, 260, %r579;
	add.s32 	%r591, %r4, 36;
	shr.u32 	%r592, %r591, 3;
	mad.lo.s32 	%r214, %r592, 260, %r583;
	add.s32 	%r593, %r4, 42;
	shr.u32 	%r594, %r593, 3;
	mad.lo.s32 	%r215, %r594, 260, %r587;
	or.b32  	%r216, %r5, 1560;
	add.s32 	%r595, %r4, 54;
	shr.u32 	%r596, %r595, 3;
	mad.lo.s32 	%r217, %r596, 260, %r579;
	add.s32 	%r597, %r4, 60;
	bfe.u32 	%r598, %r597, 3, 3;
	mad.lo.s32 	%r218, %r598, 260, %r583;
	mul.lo.s32 	%r599, %r168, 870;
	shr.u32 	%r600, %r4, 1;
	cvt.u16.u32 	%rs34, %r600;
	and.b16  	%rs35, %rs34, 255;
	mul.lo.s16 	%rs36, %rs35, 171;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 3;
	sub.s16 	%rs39, %rs34, %rs38;
	cvt.u32.u16 	%r601, %rs39;
	and.b32  	%r219, %r601, 255;
	mad.lo.s32 	%r602, %r559, 33, %r599;
	mad.lo.s32 	%r220, %r562, 290, %r602;
	add.s32 	%r221, %r220, 132;
	setp.lt.u32 	%p243, %r322, 4;
	setp.eq.s32 	%p244, %r169, 1;
	setp.eq.s32 	%p245, %r169, 4;
	setp.eq.s32 	%p246, %r169, 5;
	selp.b32 	%r603, 0, 392, %p134;
	or.b32  	%r604, %r557, %r66;
	setp.eq.s32 	%p247, %r65, 0;
	selp.b32 	%r222, 0, 784, %p247;
	bfe.s32 	%r605, %r322, 3, 1;
	and.b32  	%r223, %r605, 98;
	and.b32  	%r224, %r571, 196;
	or.b32  	%r225, %r604, %r603;
	or.b32  	%r606, %r223, %r222;
	add.s32 	%r607, %r606, %r224;
	add.s32 	%r226, %r607, %r225;
	add.s32 	%r608, %r607, 1576;
	add.s32 	%r227, %r608, %r225;
	or.b32  	%r609, %r604, 4;
	or.b32  	%r228, %r609, %r603;
	add.s32 	%r229, %r607, %r228;
	add.s32 	%r230, %r608, %r228;
	selp.b32 	%r610, 8, 400, %p134;
	or.b32  	%r231, %r604, %r610;
	add.s32 	%r232, %r607, %r231;
	add.s32 	%r233, %r608, %r231;
	or.b32  	%r234, %r609, %r610;
	add.s32 	%r235, %r607, %r234;
	add.s32 	%r236, %r608, %r234;
	and.b32  	%r611, %r4, 1;
	neg.s32 	%r612, %r611;
	and.b32  	%r613, %r612, 392;
	and.b32  	%r614, %r605, 1576;
	mul.lo.s32 	%r615, %r66, 784;
	and.b32  	%r616, %r181, 6;
	shr.u32 	%r617, %r4, 2;
	bfe.s32 	%r618, %r4, 1, 1;
	and.b32  	%r619, %r618, 196;
	or.b32  	%r620, %r615, %r64;
	or.b32  	%r621, %r620, %r616;
	mad.lo.s32 	%r622, %r617, 98, %r621;
	add.s32 	%r623, %r622, %r613;
	add.s32 	%r624, %r623, %r614;
	add.s32 	%r237, %r624, %r619;
	add.s32 	%r238, %r237, 8;
	mul.lo.s32 	%r625, %r315, 786432;
	mad.lo.s32 	%r626, %r319, 192, %r625;
	or.b32  	%r627, %r203, %r195;
	cvt.u16.u32 	%rs40, %r627;
	and.b16  	%rs41, %rs40, 255;
	mul.lo.s16 	%rs42, %rs41, 171;
	shr.u16 	%rs43, %rs42, 9;
	and.b16  	%rs44, %rs43, 24;
	add.s16 	%rs45, %rs40, %rs44;
	shl.b16 	%rs46, %rs45, 3;
	cvt.u32.u16 	%r628, %rs46;
	and.b32  	%r239, %r628, 248;
	and.b32  	%r240, %r322, 7;
	cvt.s64.s32 	%rd23, %r626;
	add.s32 	%r629, %r220, %r219;
	mul.wide.u32 	%rd85, %r629, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd24, %rd86, %rd85;
	add.s32 	%r630, %r221, %r219;
	mul.wide.u32 	%rd87, %r630, 4;
	add.s64 	%rd25, %rd86, %rd87;
	cvt.u64.u32 	%rd88, %r220;
	cvt.u64.u16 	%rd89, %rs39;
	and.b64  	%rd90, %rd89, 255;
	add.s64 	%rd91, %rd88, %rd90;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd26, %rd86, %rd92;
	cvt.u64.u32 	%rd93, %r221;
	add.s64 	%rd94, %rd93, %rd90;
	shl.b64 	%rd95, %rd94, 2;
	add.s64 	%rd27, %rd86, %rd95;
	or.pred  	%p248, %p243, %p244;
	and.b32  	%r631, %r322, 24;
	setp.eq.s32 	%p249, %r631, 8;
	or.pred  	%p250, %p248, %p249;
	or.pred  	%p251, %p250, %p245;
	setp.eq.s32 	%p252, %r631, 24;
	or.pred  	%p253, %p246, %p252;
	selp.b32 	%r241, 1145324612, -286331154, %p250;
	or.pred  	%p1, %p251, %p253;
	selp.b32 	%r242, 1145324612, -286331154, %p248;
	add.s32 	%r632, %r169, -1;
	setp.lt.u32 	%p254, %r632, 3;
	or.pred  	%p2, %p243, %p254;
	setp.eq.s32 	%p255, %r631, 16;
	or.pred  	%p3, %p255, %p252;
	selp.b32 	%r243, 1145324612, -286331154, %p255;
	add.s32 	%r89, %r219, 3;
	and.b16  	%rs7, %rs39, 255;
	add.s32 	%r88, %r219, 27;
	or.b16  	%rs8, %rs7, 24;
	mov.u32 	%r90, 0;
	mov.u16 	%rs1, 0;
	selp.b32 	%r134, %r242, %r243, %p2;
	or.pred  	%p287, %p2, %p3;
	mov.u32 	%r110, %r90;
	mov.u32 	%r111, %r90;
	mov.u32 	%r112, %r90;
	bra.uni 	$L__BB0_199;
$L__BB0_170:                            // %L40300
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r165, %r90, 48;
	add.s32 	%r89, %r89, 48;
	add.s16 	%rs1, %rs1, 48;
	add.s32 	%r88, %r88, 48;
	setp.ne.s32 	%p303, %r90, 4032;
	mov.u32 	%r90, %r165;
	@%p303 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_171;
$L__BB0_199:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r633, %r90, %r313;
	setp.lt.s32 	%p256, %r633, %r314;
	@%p256 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_171;
$L__BB0_200:                            // %oksrem877
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.eq.s32 	%p257, %r206, 0;
	mul.hi.u32 	%r730, %r90, -1431655765;
	shr.u32 	%r731, %r730, 5;
	mul.lo.s32 	%r246, %r731, 48;
	add.s32 	%r732, %r246, %r203;
	or.b32  	%r733, %r732, %r195;
	shr.s32 	%r734, %r732, 31;
	shr.u32 	%r735, %r734, 20;
	add.s32 	%r736, %r733, %r735;
	and.b32  	%r737, %r736, 258048;
	sub.s32 	%r738, %r733, %r737;
	shl.b32 	%r739, %r738, 14;
	or.b32  	%r740, %r739, %r202;
	or.b32  	%r741, %r740, %r204;
	or.b32  	%r742, %r741, %r205;
	add.s32 	%r743, %r201, %r742;
	shr.s32 	%r744, %r743, 31;
	shr.u32 	%r745, %r744, 6;
	add.s32 	%r746, %r743, %r745;
	shr.s32 	%r747, %r746, 26;
	setp.lt.s32 	%p258, %r743, 0;
	and.b32  	%r748, %r746, -67108864;
	setp.ne.s32 	%p259, %r748, %r743;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r749, 1, 0, %p260;
	sub.s32 	%r750, %r749, %r747;
	shl.b32 	%r751, %r750, 26;
	add.s32 	%r752, %r751, %r743;
	mul.wide.s32 	%rd96, %r752, 4;
	add.s64 	%rd97, %rd3, %rd96;
	ld.global.v4.u32 	{%r753, %r754, %r755, %r756}, [%rd97];
	add.s32 	%r757, %r733, 24;
	shr.s32 	%r758, %r757, 31;
	shr.u32 	%r759, %r758, 20;
	add.s32 	%r760, %r757, %r759;
	and.b32  	%r761, %r760, 258048;
	sub.s32 	%r762, %r757, %r761;
	shl.b32 	%r763, %r762, 14;
	or.b32  	%r764, %r763, %r202;
	or.b32  	%r765, %r764, %r204;
	or.b32  	%r766, %r765, %r205;
	add.s32 	%r767, %r201, %r766;
	shr.s32 	%r768, %r767, 31;
	shr.u32 	%r769, %r768, 6;
	add.s32 	%r770, %r767, %r769;
	shr.s32 	%r771, %r770, 26;
	setp.lt.s32 	%p261, %r767, 0;
	and.b32  	%r772, %r770, -67108864;
	setp.ne.s32 	%p262, %r772, %r767;
	and.pred  	%p263, %p261, %p262;
	selp.u32 	%r773, 1, 0, %p263;
	sub.s32 	%r774, %r773, %r771;
	shl.b32 	%r775, %r774, 26;
	add.s32 	%r776, %r775, %r767;
	mul.wide.s32 	%rd98, %r776, 4;
	add.s64 	%rd99, %rd3, %rd98;
	ld.global.v4.u32 	{%r777, %r778, %r779, %r780}, [%rd99];
	selp.b32 	%r781, %r755, %r753, %p257;
	shfl.sync.bfly.b32	%r782, %r781, 4, 31, -1;
	selp.b32 	%r636, %r753, %r782, %p257;
	selp.b32 	%r641, %r782, %r755, %p257;
	selp.b32 	%r783, %r756, %r754, %p257;
	shfl.sync.bfly.b32	%r784, %r783, 4, 31, -1;
	selp.b32 	%r644, %r754, %r784, %p257;
	selp.b32 	%r649, %r784, %r756, %p257;
	selp.b32 	%r785, %r779, %r777, %p257;
	shfl.sync.bfly.b32	%r786, %r785, 4, 31, -1;
	selp.b32 	%r652, %r777, %r786, %p257;
	selp.b32 	%r657, %r786, %r779, %p257;
	selp.b32 	%r787, %r780, %r778, %p257;
	shfl.sync.bfly.b32	%r788, %r787, 4, 31, -1;
	selp.b32 	%r660, %r778, %r788, %p257;
	selp.b32 	%r665, %r788, %r780, %p257;
	shl.b32 	%r637, %r641, 4;
	mov.u32 	%r635, 252645135;
	// begin inline asm
	lop3.b32 %r667, %r635, %r636, %r637, 202;
	// end inline asm
	shr.u32 	%r640, %r636, 4;
	// begin inline asm
	lop3.b32 %r683, %r635, %r640, %r641, 202;
	// end inline asm
	shl.b32 	%r645, %r649, 4;
	// begin inline asm
	lop3.b32 %r675, %r635, %r644, %r645, 202;
	// end inline asm
	shr.u32 	%r648, %r644, 4;
	// begin inline asm
	lop3.b32 %r691, %r635, %r648, %r649, 202;
	// end inline asm
	shl.b32 	%r653, %r657, 4;
	// begin inline asm
	lop3.b32 %r668, %r635, %r652, %r653, 202;
	// end inline asm
	shr.u32 	%r656, %r652, 4;
	// begin inline asm
	lop3.b32 %r684, %r635, %r656, %r657, 202;
	// end inline asm
	shl.b32 	%r661, %r665, 4;
	// begin inline asm
	lop3.b32 %r676, %r635, %r660, %r661, 202;
	// end inline asm
	shr.u32 	%r664, %r660, 4;
	// begin inline asm
	lop3.b32 %r692, %r635, %r664, %r665, 202;
	// end inline asm
	mov.u32 	%r669, 25152;
	// begin inline asm
	prmt.b32 %r699, %r667, %r668, %r669;
	// end inline asm
	mov.u32 	%r673, 29521;
	// begin inline asm
	prmt.b32 %r715, %r667, %r668, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r675, %r676, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r675, %r676, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r683, %r684, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r683, %r684, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r691, %r692, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r724, %r691, %r692, %r673;
	// end inline asm
	mov.u32 	%r725, 21520;
	// begin inline asm
	prmt.b32 %r698, %r699, %r700, %r725;
	// end inline asm
	mov.u32 	%r729, 30258;
	// begin inline asm
	prmt.b32 %r702, %r699, %r700, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r707, %r708, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r707, %r708, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r715, %r716, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r715, %r716, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r723, %r724, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r723, %r724, %r729;
	// end inline asm
	mul.hi.s32 	%r789, %r733, 715827883;
	shr.u32 	%r790, %r789, 31;
	shr.s32 	%r791, %r789, 2;
	add.s32 	%r792, %r791, %r790;
	mul.lo.s32 	%r793, %r792, 24;
	sub.s32 	%r794, %r733, %r793;
	add.s32 	%r795, %r794, %r207;
	mul.wide.s32 	%rd100, %r795, 4;
	add.s64 	%rd102, %rd86, %rd100;
	st.shared.u32 	[%rd102], %r698;
	add.s32 	%r796, %r795, 128;
	mul.wide.u32 	%rd103, %r796, 4;
	add.s64 	%rd104, %rd86, %rd103;
	st.shared.u32 	[%rd104], %r706;
	add.s32 	%r797, %r795, 64;
	mul.wide.u32 	%rd105, %r797, 4;
	add.s64 	%rd106, %rd86, %rd105;
	st.shared.u32 	[%rd106], %r702;
	add.s32 	%r798, %r795, 192;
	mul.wide.u32 	%rd107, %r798, 4;
	add.s64 	%rd108, %rd86, %rd107;
	st.shared.u32 	[%rd108], %r710;
	add.s32 	%r799, %r795, 32;
	mul.wide.u32 	%rd109, %r799, 4;
	add.s64 	%rd110, %rd86, %rd109;
	st.shared.u32 	[%rd110], %r714;
	add.s32 	%r800, %r795, 160;
	mul.wide.u32 	%rd111, %r800, 4;
	add.s64 	%rd112, %rd86, %rd111;
	st.shared.u32 	[%rd112], %r722;
	add.s32 	%r801, %r795, 96;
	mul.wide.u32 	%rd113, %r801, 4;
	add.s64 	%rd114, %rd86, %rd113;
	st.shared.u32 	[%rd114], %r718;
	add.s32 	%r802, %r795, 224;
	mul.wide.u32 	%rd115, %r802, 4;
	add.s64 	%rd116, %rd86, %rd115;
	st.shared.u32 	[%rd116], %r726;
	bar.sync 	0;
	add.s32 	%r803, %r246, %r208;
	cvt.u16.u32 	%rs47, %r803;
	mul.hi.s16 	%rs48, %rs47, 10923;
	shr.u16 	%rs49, %rs48, 15;
	shr.s16 	%rs50, %rs48, 2;
	add.s16 	%rs51, %rs50, %rs49;
	mul.lo.s16 	%rs52, %rs51, 24;
	sub.s16 	%rs53, %rs47, %rs52;
	cvt.s32.s16 	%r247, %rs53;
	add.s32 	%r804, %r5, %r247;
	mul.wide.s32 	%rd117, %r804, 4;
	add.s64 	%rd118, %rd86, %rd117;
	ld.shared.u32 	%r248, [%rd118];
	add.s32 	%r805, %r209, %r247;
	mul.wide.s32 	%rd119, %r805, 4;
	add.s64 	%rd120, %rd86, %rd119;
	ld.shared.u32 	%r249, [%rd120];
	add.s32 	%r806, %r210, %r247;
	mul.wide.u32 	%rd121, %r806, 4;
	add.s64 	%rd122, %rd86, %rd121;
	ld.shared.u32 	%r250, [%rd122];
	add.s32 	%r807, %r211, %r247;
	mul.wide.u32 	%rd123, %r807, 4;
	add.s64 	%rd124, %rd86, %rd123;
	ld.shared.u32 	%r251, [%rd124];
	add.s32 	%r808, %r212, %r247;
	mul.wide.u32 	%rd125, %r808, 4;
	add.s64 	%rd126, %rd86, %rd125;
	ld.shared.u32 	%r252, [%rd126];
	add.s32 	%r809, %r213, %r247;
	mul.wide.u32 	%rd127, %r809, 4;
	add.s64 	%rd128, %rd86, %rd127;
	ld.shared.u32 	%r253, [%rd128];
	add.s32 	%r810, %r214, %r247;
	mul.wide.u32 	%rd129, %r810, 4;
	add.s64 	%rd130, %rd86, %rd129;
	ld.shared.u32 	%r254, [%rd130];
	add.s32 	%r811, %r215, %r247;
	mul.wide.u32 	%rd131, %r811, 4;
	add.s64 	%rd132, %rd86, %rd131;
	ld.shared.u32 	%r255, [%rd132];
	add.s32 	%r812, %r216, %r247;
	mul.wide.u32 	%rd133, %r812, 4;
	add.s64 	%rd134, %rd86, %rd133;
	ld.shared.u32 	%r256, [%rd134];
	add.s32 	%r813, %r217, %r247;
	mul.wide.u32 	%rd135, %r813, 4;
	add.s64 	%rd136, %rd86, %rd135;
	ld.shared.u32 	%r257, [%rd136];
	add.s32 	%r814, %r218, %r247;
	mul.wide.s32 	%rd137, %r814, 4;
	add.s64 	%rd138, %rd86, %rd137;
	ld.shared.u32 	%r258, [%rd138];
	bar.sync 	0;
	shfl.sync.idx.b32	%r259, %r194, 0, 31, -1;
	shfl.sync.idx.b32	%r260, %r194, 1, 31, -1;
	shfl.sync.idx.b32	%r261, %r194, 2, 31, -1;
	shfl.sync.idx.b32	%r262, %r194, 3, 31, -1;
	shfl.sync.idx.b32	%r263, %r194, 4, 31, -1;
	shfl.sync.idx.b32	%r264, %r194, 5, 31, -1;
	shfl.sync.idx.b32	%r265, %r194, 6, 31, -1;
	shfl.sync.idx.b32	%r266, %r194, 7, 31, -1;
	shfl.sync.idx.b32	%r267, %r194, 8, 31, -1;
	shfl.sync.idx.b32	%r268, %r194, 9, 31, -1;
	shfl.sync.idx.b32	%r269, %r194, 10, 31, -1;
	shfl.sync.idx.b32	%r270, %r194, 11, 31, -1;
	shfl.sync.idx.b32	%r271, %r194, 12, 31, -1;
	shfl.sync.idx.b32	%r272, %r194, 13, 31, -1;
	shfl.sync.idx.b32	%r273, %r194, 14, 31, -1;
	shfl.sync.idx.b32	%r274, %r194, 15, 31, -1;
	setp.eq.s32 	%p264, %r259, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2312
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r815, %r259, %r247;
	mul.wide.s32 	%rd139, %r815, 4;
	add.s64 	%rd141, %rd86, %rd139;
	st.shared.u32 	[%rd141], %r248;
	setp.eq.s32 	%p265, %r260, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2380
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r816, %r260, %r247;
	mul.wide.s32 	%rd142, %r816, 4;
	add.s64 	%rd144, %rd86, %rd142;
	st.shared.u32 	[%rd144], %r249;
	setp.eq.s32 	%p266, %r261, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2448
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r817, %r261, %r247;
	mul.wide.s32 	%rd145, %r817, 4;
	add.s64 	%rd147, %rd86, %rd145;
	st.shared.u32 	[%rd147], %r250;
	setp.eq.s32 	%p267, %r262, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2516
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r818, %r262, %r247;
	mul.wide.s32 	%rd148, %r818, 4;
	add.s64 	%rd150, %rd86, %rd148;
	st.shared.u32 	[%rd150], %r251;
	setp.eq.s32 	%p268, %r263, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2584
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r819, %r263, %r247;
	mul.wide.s32 	%rd151, %r819, 4;
	add.s64 	%rd153, %rd86, %rd151;
	st.shared.u32 	[%rd153], %r252;
	setp.eq.s32 	%p269, %r264, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2652
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r820, %r264, %r247;
	mul.wide.s32 	%rd154, %r820, 4;
	add.s64 	%rd156, %rd86, %rd154;
	st.shared.u32 	[%rd156], %r253;
	setp.eq.s32 	%p270, %r265, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2720
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r821, %r265, %r247;
	mul.wide.s32 	%rd157, %r821, 4;
	add.s64 	%rd159, %rd86, %rd157;
	st.shared.u32 	[%rd159], %r254;
	setp.eq.s32 	%p271, %r266, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2788
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r822, %r266, %r247;
	mul.wide.s32 	%rd160, %r822, 4;
	add.s64 	%rd162, %rd86, %rd160;
	st.shared.u32 	[%rd162], %r255;
	setp.eq.s32 	%p272, %r267, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2856
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r823, %r267, %r247;
	mul.wide.s32 	%rd163, %r823, 4;
	add.s64 	%rd165, %rd86, %rd163;
	st.shared.u32 	[%rd165], %r256;
	setp.eq.s32 	%p273, %r268, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2924
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r824, %r268, %r247;
	mul.wide.s32 	%rd166, %r824, 4;
	add.s64 	%rd168, %rd86, %rd166;
	st.shared.u32 	[%rd168], %r257;
	setp.eq.s32 	%p274, %r269, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem2993
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.gt.u32 	%p275, %r4, 3;
	selp.b32 	%r825, 0, %r258, %p275;
	add.s32 	%r826, %r269, %r247;
	mul.wide.s32 	%rd169, %r826, 4;
	add.s64 	%rd171, %rd86, %rd169;
	st.shared.u32 	[%rd171], %r825;
	setp.eq.s32 	%p276, %r270, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3061
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r827, %r270, %r247;
	mul.wide.s32 	%rd172, %r827, 4;
	add.s64 	%rd174, %rd86, %rd172;
	mov.u32 	%r828, 0;
	st.shared.u32 	[%rd174], %r828;
	setp.eq.s32 	%p277, %r271, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3128
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r829, %r271, %r247;
	mul.wide.s32 	%rd175, %r829, 4;
	add.s64 	%rd177, %rd86, %rd175;
	st.shared.u32 	[%rd177], %r828;
	setp.eq.s32 	%p278, %r272, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3195
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r831, %r272, %r247;
	mul.wide.s32 	%rd178, %r831, 4;
	add.s64 	%rd180, %rd86, %rd178;
	st.shared.u32 	[%rd180], %r828;
	setp.eq.s32 	%p279, %r273, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3262
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r833, %r273, %r247;
	mul.wide.s32 	%rd181, %r833, 4;
	add.s64 	%rd183, %rd86, %rd181;
	st.shared.u32 	[%rd183], %r828;
	setp.eq.s32 	%p280, %r274, 999999999;
	@%p280 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3329
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.eq.s32 	%p281, %r196, 3;
	add.s32 	%r836, %r274, %r247;
	mul.wide.s32 	%rd184, %r836, 4;
	add.s64 	%rd186, %rd86, %rd184;
	st.shared.u32 	[%rd186], %r828;
	bar.sync 	0;
	mov.u32 	%r94, %r828;
	mov.u32 	%r95, %r828;
	mov.u32 	%r96, %r828;
	mov.u32 	%r97, %r828;
	mov.u32 	%r98, %r828;
	mov.u32 	%r99, %r828;
	mov.u32 	%r100, %r828;
	mov.u32 	%r101, %r828;
	mov.u32 	%r102, %r828;
	mov.u32 	%r103, %r828;
	mov.u32 	%r104, %r828;
	mov.u32 	%r105, %r828;
	mov.u32 	%r106, %r828;
	mov.u32 	%r107, %r828;
	mov.u32 	%r108, %r828;
	mov.u32 	%r109, %r828;
	@%p281 bra 	$L__BB0_162;
// %bb.217:                             // %oksrem3398
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r275, %r246, %r219;
	ld.shared.u32 	%r94, [%rd24];
	ld.shared.u32 	%r95, [%rd25];
	ld.shared.u32 	%r96, [%rd26+12];
	ld.shared.u32 	%r97, [%rd27+12];
	ld.shared.u32 	%r98, [%rd26+24];
	ld.shared.u32 	%r99, [%rd27+24];
	ld.shared.u32 	%r100, [%rd26+36];
	ld.shared.u32 	%r101, [%rd27+36];
	add.s32 	%r837, %r275, 12;
	mul.hi.u32 	%r838, %r837, -1431655765;
	shr.u32 	%r839, %r838, 4;
	mul.lo.s32 	%r840, %r839, 24;
	sub.s32 	%r841, %r837, %r840;
	add.s32 	%r842, %r220, %r841;
	mul.wide.u32 	%rd187, %r842, 4;
	add.s64 	%rd189, %rd86, %rd187;
	ld.shared.u32 	%r102, [%rd189];
	add.s32 	%r843, %r221, %r841;
	mul.wide.u32 	%rd190, %r843, 4;
	add.s64 	%rd191, %rd86, %rd190;
	ld.shared.u32 	%r103, [%rd191];
	ld.shared.u32 	%r104, [%rd26+60];
	ld.shared.u32 	%r105, [%rd27+60];
	cvt.u16.u32 	%rs54, %r275;
	add.s16 	%rs55, %rs54, 18;
	mul.hi.s16 	%rs56, %rs55, 10923;
	shr.u16 	%rs57, %rs56, 15;
	shr.s16 	%rs58, %rs56, 2;
	add.s16 	%rs59, %rs58, %rs57;
	mul.lo.s16 	%rs60, %rs59, 24;
	sub.s16 	%rs61, %rs55, %rs60;
	cvt.s32.s16 	%r844, %rs61;
	add.s32 	%r845, %r220, %r844;
	mul.wide.s32 	%rd192, %r845, 4;
	add.s64 	%rd193, %rd86, %rd192;
	ld.shared.u32 	%r106, [%rd193];
	add.s32 	%r846, %r221, %r844;
	mul.wide.u32 	%rd194, %r846, 4;
	add.s64 	%rd195, %rd86, %rd194;
	ld.shared.u32 	%r107, [%rd195];
	add.s16 	%rs62, %rs54, 21;
	mul.hi.s16 	%rs63, %rs62, 10923;
	shr.u16 	%rs64, %rs63, 15;
	shr.s16 	%rs65, %rs63, 2;
	add.s16 	%rs66, %rs65, %rs64;
	mul.lo.s16 	%rs67, %rs66, 24;
	sub.s16 	%rs68, %rs62, %rs67;
	cvt.s32.s16 	%r847, %rs68;
	add.s32 	%r848, %r220, %r847;
	mul.wide.s32 	%rd196, %r848, 4;
	add.s64 	%rd197, %rd86, %rd196;
	ld.shared.u32 	%r108, [%rd197];
	add.s32 	%r849, %r221, %r847;
	mul.wide.u32 	%rd198, %r849, 4;
	add.s64 	%rd199, %rd86, %rd198;
	ld.shared.u32 	%r109, [%rd199];
$L__BB0_162:                            // %L10559
                                        //   in Loop: Header=BB0_199 Depth=1
	bar.sync 	0;
	mov.u16 	%rs2, %rs1;
	mov.u32 	%r113, %r828;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L25420
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r113, %r113, 6;
	add.s16 	%rs2, %rs2, 6;
	setp.ne.s32 	%p292, %r113, 24;
	@%p292 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10577
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p282, %r113, 0;
	selp.b32 	%r1243, %r94, 0, %p282;
	setp.eq.s32 	%p283, %r113, 6;
	selp.b32 	%r1244, %r98, %r1243, %p283;
	setp.eq.s32 	%p284, %r113, 12;
	selp.b32 	%r1245, %r102, %r1244, %p284;
	setp.eq.s32 	%p285, %r113, 18;
	selp.b32 	%r1246, %r106, %r1245, %p285;
	selp.b32 	%r1247, %r95, 0, %p282;
	selp.b32 	%r1248, %r99, %r1247, %p283;
	selp.b32 	%r1249, %r103, %r1248, %p284;
	selp.b32 	%r1250, %r107, %r1249, %p285;
	selp.b32 	%r1251, %r96, 0, %p282;
	selp.b32 	%r1252, %r100, %r1251, %p283;
	selp.b32 	%r1253, %r104, %r1252, %p284;
	selp.b32 	%r1254, %r108, %r1253, %p285;
	selp.b32 	%r1255, %r97, 0, %p282;
	selp.b32 	%r1256, %r101, %r1255, %p283;
	selp.b32 	%r1257, %r105, %r1256, %p284;
	selp.b32 	%r1258, %r109, %r1257, %p285;
	mov.u16 	%rs106, 25600;
	// begin inline asm
	mov.b32 %r856, {%rs106, %rs106};
	// end inline asm
	mov.u16 	%rs108, 21504;
	// begin inline asm
	mov.b32 %r867, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r855, %r1246, -2004318072;
	mov.u32 	%r992, 983055;
	// begin inline asm
	lop3.b32 %r853, %r992, %r855, %r856, 202;
	// end inline asm
	mov.u16 	%rs112, 18432;
	// begin inline asm
	mov.b32 %r857, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r856, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	mov.u32 	%r1003, 15728880;
	// begin inline asm
	lop3.b32 %r864, %r1003, %r855, %r867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r868, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r869, %r867, %r868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r872, %r864, %r869;
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r913, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r901, %r1250, -2004318072;
	// begin inline asm
	lop3.b32 %r899, %r992, %r901, %r902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r902, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r910, %r1003, %r901, %r913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r913, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r947, %r1254, -2004318072;
	// begin inline asm
	lop3.b32 %r945, %r992, %r947, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r956, %r1003, %r947, %r959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r959, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r993, %r1258, -2004318072;
	// begin inline asm
	lop3.b32 %r991, %r992, %r993, %r994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r996, %r994, %r995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r999, %r991, %r996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1002, %r1003, %r993, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r1005, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r861;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1035, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r907;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1038, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r872;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1041, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r200;
    mov.b32 {%r2re, %r2im}, %r918;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1044, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1047, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r999;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1050, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1053, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r200;
    mov.b32 {%r2re, %r2im}, %r1010;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1056, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1059, %r1060}, {%r345, %r348}, {%r1035}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1066, %r1067}, {%r345, %r348}, {%r1038}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1073, %r1074}, {%r345, %r348}, {%r1041}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1080, %r1081}, {%r345, %r348}, {%r1044}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1088}, {%r345, %r348}, {%r1047}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1094, %r1095}, {%r345, %r348}, {%r1050}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1101, %r1102}, {%r345, %r348}, {%r1053}, {%r828, %r828};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1108, %r1109}, {%r345, %r348}, {%r1056}, {%r828, %r828};
	// end inline asm
	@%p1 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_164;
$L__BB0_218:                            // %pass4747
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1115, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1117, %r1115, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r397, %r1059, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1124, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1126, %r1124, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r397, %r1066, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1133, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1135, %r1133, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r397, %r1073, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r1142, %r1081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r397, %r1080, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1151, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r1151, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r397, %r1087, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1160, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r1160, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r397, %r1094, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1169, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r1169, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r397, %r1101, %r1171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1178, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r1178, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r397, %r1108, %r1180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r400, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r397, %r1060, %r1187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r400, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r397, %r1067, %r1194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r400, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r397, %r1074, %r1201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r400, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r397, %r1081, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r400, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r397, %r1088, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r400, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r397, %r1095, %r1222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1229, %r400, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r397, %r1102, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r400, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r397, %r1109, %r1236;
	// end inline asm
	setp.gt.u32 	%p286, %r322, 11;
	mov.u32 	%r1329, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r441, %r444}, {%r1120, %r1190}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r441, %r444}, {%r1129, %r1197}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1348, %r1349}, {%r441, %r444}, {%r1138, %r1204}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r441, %r444}, {%r1147, %r1211}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r441, %r444}, {%r1156, %r1218}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r441, %r444}, {%r1165, %r1225}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1381}, {%r441, %r444}, {%r1174, %r1232}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1388, %r1389}, {%r441, %r444}, {%r1183, %r1239}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1332, %r1333, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1332, %r1333, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1340, %r1341, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1340, %r1341, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1348, %r1349, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1348, %r1349, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r1356, %r1357, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r1356, %r1357, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r1364, %r1365, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r1364, %r1365, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r1372, %r1373, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r1372, %r1373, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r304, %r1380, %r1381, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r305, %r1380, %r1381, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r306, %r1388, %r1389, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r307, %r1388, %r1389, %r729;
	// end inline asm
	add.s16 	%rs117, %rs7, %rs2;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	add.s16 	%rs120, %rs118, %rs119;
	mul.lo.s16 	%rs121, %rs120, 6;
	sub.s16 	%rs122, %rs117, %rs121;
	mul.wide.s16 	%r1395, %rs122, 16;
	add.s32 	%r1396, %r226, %r1395;
	mul.wide.s32 	%rd202, %r1396, 4;
	add.s64 	%rd28, %rd86, %rd202;
	st.shared.u32 	[%rd28], %r292;
	add.s32 	%r1397, %r227, %r1395;
	mul.wide.u32 	%rd204, %r1397, 4;
	add.s64 	%rd29, %rd86, %rd204;
	st.shared.u32 	[%rd29], %r293;
	add.s32 	%r1398, %r229, %r1395;
	mul.wide.s32 	%rd205, %r1398, 4;
	add.s64 	%rd30, %rd86, %rd205;
	st.shared.u32 	[%rd30], %r294;
	add.s32 	%r1399, %r230, %r1395;
	mul.wide.u32 	%rd206, %r1399, 4;
	add.s64 	%rd31, %rd86, %rd206;
	st.shared.u32 	[%rd31], %r295;
	add.s32 	%r1400, %r232, %r1395;
	mul.wide.s32 	%rd207, %r1400, 4;
	add.s64 	%rd32, %rd86, %rd207;
	st.shared.u32 	[%rd32], %r296;
	add.s32 	%r1401, %r233, %r1395;
	mul.wide.u32 	%rd208, %r1401, 4;
	add.s64 	%rd33, %rd86, %rd208;
	st.shared.u32 	[%rd33], %r297;
	add.s32 	%r1402, %r235, %r1395;
	mul.wide.s32 	%rd209, %r1402, 4;
	add.s64 	%rd34, %rd86, %rd209;
	st.shared.u32 	[%rd34], %r298;
	add.s32 	%r1403, %r236, %r1395;
	mul.wide.u32 	%rd210, %r1403, 4;
	add.s64 	%rd35, %rd86, %rd210;
	st.shared.u32 	[%rd35], %r299;
	add.s32 	%r1404, %r89, %r113;
	mul.hi.u32 	%r1405, %r1404, -1431655765;
	shr.u32 	%r1406, %r1405, 2;
	mul.lo.s32 	%r1407, %r1406, 6;
	sub.s32 	%r1408, %r1404, %r1407;
	shl.b32 	%r1409, %r1408, 4;
	add.s32 	%r1410, %r226, %r1409;
	mul.wide.u32 	%rd211, %r1410, 4;
	add.s64 	%rd36, %rd86, %rd211;
	st.shared.u32 	[%rd36], %r300;
	cvt.u64.u32 	%rd212, %r1409;
	cvt.u64.u32 	%rd213, %r225;
	cvt.u64.u32 	%rd214, %r224;
	cvt.u64.u32 	%rd215, %r223;
	cvt.u64.u32 	%rd216, %r222;
	add.s64 	%rd217, %rd216, %rd215;
	add.s64 	%rd218, %rd217, %rd214;
	add.s64 	%rd37, %rd218, %rd213;
	add.s64 	%rd219, %rd37, %rd212;
	shl.b64 	%rd220, %rd219, 2;
	add.s64 	%rd38, %rd86, %rd220;
	st.shared.u32 	[%rd38+6304], %r301;
	add.s32 	%r1411, %r229, %r1409;
	mul.wide.u32 	%rd221, %r1411, 4;
	add.s64 	%rd39, %rd86, %rd221;
	st.shared.u32 	[%rd39], %r302;
	cvt.u64.u32 	%rd222, %r228;
	add.s64 	%rd40, %rd218, %rd222;
	add.s64 	%rd223, %rd40, %rd212;
	shl.b64 	%rd224, %rd223, 2;
	add.s64 	%rd41, %rd86, %rd224;
	st.shared.u32 	[%rd41+6304], %r303;
	add.s32 	%r1412, %r232, %r1409;
	mul.wide.u32 	%rd225, %r1412, 4;
	add.s64 	%rd42, %rd86, %rd225;
	st.shared.u32 	[%rd42], %r304;
	cvt.u64.u32 	%rd226, %r231;
	add.s64 	%rd43, %rd218, %rd226;
	add.s64 	%rd227, %rd43, %rd212;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd44, %rd86, %rd228;
	st.shared.u32 	[%rd44+6304], %r305;
	add.s32 	%r1413, %r235, %r1409;
	mul.wide.u32 	%rd229, %r1413, 4;
	add.s64 	%rd45, %rd86, %rd229;
	st.shared.u32 	[%rd45], %r306;
	cvt.u64.u32 	%rd230, %r234;
	add.s64 	%rd46, %rd218, %rd230;
	add.s64 	%rd231, %rd46, %rd212;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd47, %rd86, %rd232;
	st.shared.u32 	[%rd47+6304], %r307;
	@%p286 bra 	$L__BB0_220;
// %bb.219:                             // %oksrem7085
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r292;
	st.shared.u32 	[%rd29], %r293;
	st.shared.u32 	[%rd30], %r294;
	st.shared.u32 	[%rd31], %r295;
	st.shared.u32 	[%rd32], %r296;
	st.shared.u32 	[%rd33], %r297;
	st.shared.u32 	[%rd34], %r298;
	st.shared.u32 	[%rd35], %r299;
	st.shared.u32 	[%rd36], %r300;
	st.shared.u32 	[%rd38+6304], %r301;
	st.shared.u32 	[%rd39], %r302;
	st.shared.u32 	[%rd41+6304], %r303;
	st.shared.u32 	[%rd42], %r304;
	st.shared.u32 	[%rd44+6304], %r305;
	st.shared.u32 	[%rd45], %r306;
	st.shared.u32 	[%rd47+6304], %r307;
$L__BB0_220:                            // %L19966
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs123, %rs2, 10923;
	shr.u16 	%rs124, %rs123, 15;
	add.s16 	%rs125, %rs123, %rs124;
	mul.lo.s16 	%rs126, %rs125, 6;
	sub.s16 	%rs127, %rs2, %rs126;
	mul.wide.s16 	%r1460, %rs127, 16;
	add.s32 	%r1461, %r237, %r1460;
	mul.wide.s32 	%rd233, %r1461, 4;
	add.s64 	%rd235, %rd86, %rd233;
	ld.shared.u32 	%r1418, [%rd235];
	add.s32 	%r1462, %r238, %r1460;
	mul.wide.s32 	%rd236, %r1462, 4;
	add.s64 	%rd237, %rd86, %rd236;
	ld.shared.u32 	%r1425, [%rd237];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1414, %r1415}, {%r453, %r456}, {%r1418}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r453, %r456}, {%r1425}, {%r1329, %r1329};
	// end inline asm
	@%p287 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_221;
$L__BB0_222:                            // %pass9516
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1428, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r491, %r1414, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r491, %r1421, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r494, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r491, %r1415, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r494, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r491, %r1422, %r1453;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1482, %r1485}, {%r537, %r540}, {%r1433, %r1449}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1489, %r1493}, {%r537, %r540}, {%r1442, %r1456}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r1482, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r1485, %r1485, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r1489, %r1489, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r1493, %r1493, %r1488;
	// end inline asm
	mov.u32 	%r1912, 492117333;
	// begin inline asm
	fma.rn.f16x2 %r1496, %r1912, %r1492, %r112;
	// end inline asm
	add.s32 	%r1915, %r90, %r113;
	add.s32 	%r1916, %r1915, 1;
	mul.hi.u32 	%r1917, %r1916, -1431655765;
	shr.u32 	%r1918, %r1917, 2;
	mul.lo.s32 	%r1919, %r1918, 6;
	sub.s32 	%r1920, %r1916, %r1919;
	shl.b32 	%r1921, %r1920, 4;
	add.s32 	%r1922, %r237, %r1921;
	mul.wide.u32 	%rd240, %r1922, 4;
	add.s64 	%rd242, %rd86, %rd240;
	ld.shared.u32 	%r1504, [%rd242];
	add.s32 	%r1923, %r238, %r1921;
	mul.wide.u32 	%rd243, %r1923, 4;
	add.s64 	%rd244, %rd86, %rd243;
	ld.shared.u32 	%r1511, [%rd244];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r453, %r456}, {%r1504}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1530, %r1527}, {%r453, %r456}, {%r1511}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r491, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1523, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1523, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r491, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r494, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r491, %r1518, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r494, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r491, %r1527, %r1539;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1568}, {%r537, %r540}, {%r1519, %r1535}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1572, %r1576}, {%r537, %r540}, {%r1528, %r1542}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1565, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r1568, %r1568, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r1572, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r1576, %r1576, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r1912, %r1575, %r1496;
	// end inline asm
	add.s32 	%r1924, %r1915, 2;
	mul.hi.u32 	%r1925, %r1924, -1431655765;
	shr.u32 	%r1926, %r1925, 2;
	mul.lo.s32 	%r1927, %r1926, 6;
	sub.s32 	%r1928, %r1924, %r1927;
	shl.b32 	%r1929, %r1928, 4;
	add.s32 	%r1930, %r237, %r1929;
	mul.wide.u32 	%rd245, %r1930, 4;
	add.s64 	%rd246, %rd86, %rd245;
	ld.shared.u32 	%r1587, [%rd246];
	add.s32 	%r1931, %r238, %r1929;
	mul.wide.u32 	%rd247, %r1931, 4;
	add.s64 	%rd248, %rd86, %rd247;
	ld.shared.u32 	%r1594, [%rd248];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r453, %r456}, {%r1587}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1613, %r1610}, {%r453, %r456}, {%r1594}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r491, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1606, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r1606, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r491, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r494, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r491, %r1601, %r1615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r494, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r491, %r1610, %r1622;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1648, %r1651}, {%r537, %r540}, {%r1602, %r1618}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1655, %r1659}, {%r537, %r540}, {%r1611, %r1625}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1648, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1651, %r1651, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1912, %r1658, %r1579;
	// end inline asm
	add.s32 	%r1932, %r1915, 3;
	mul.hi.u32 	%r1933, %r1932, -1431655765;
	shr.u32 	%r1934, %r1933, 2;
	mul.lo.s32 	%r1935, %r1934, 6;
	sub.s32 	%r1936, %r1932, %r1935;
	shl.b32 	%r1937, %r1936, 4;
	add.s32 	%r1938, %r237, %r1937;
	mul.wide.u32 	%rd249, %r1938, 4;
	add.s64 	%rd250, %rd86, %rd249;
	ld.shared.u32 	%r1670, [%rd250];
	add.s32 	%r1939, %r238, %r1937;
	mul.wide.u32 	%rd251, %r1939, 4;
	add.s64 	%rd252, %rd86, %rd251;
	ld.shared.u32 	%r1677, [%rd252];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r453, %r456}, {%r1670}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r453, %r456}, {%r1677}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r491, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r491, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r494, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r491, %r1684, %r1698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r494, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r491, %r1693, %r1705;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1731, %r1734}, {%r537, %r540}, {%r1685, %r1701}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1738, %r1742}, {%r537, %r540}, {%r1694, %r1708}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1731, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r1734, %r1734, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r1738, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r1742, %r1742, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r1912, %r1741, %r1662;
	// end inline asm
	add.s32 	%r1940, %r1915, 4;
	mul.hi.u32 	%r1941, %r1940, -1431655765;
	shr.u32 	%r1942, %r1941, 2;
	mul.lo.s32 	%r1943, %r1942, 6;
	sub.s32 	%r1944, %r1940, %r1943;
	shl.b32 	%r1945, %r1944, 4;
	add.s32 	%r1946, %r237, %r1945;
	mul.wide.u32 	%rd253, %r1946, 4;
	add.s64 	%rd254, %rd86, %rd253;
	ld.shared.u32 	%r1753, [%rd254];
	add.s32 	%r1947, %r238, %r1945;
	mul.wide.u32 	%rd255, %r1947, 4;
	add.s64 	%rd256, %rd86, %rd255;
	ld.shared.u32 	%r1760, [%rd256];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r453, %r456}, {%r1753}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1779, %r1776}, {%r453, %r456}, {%r1760}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r491, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1772, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1772, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r491, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r494, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r491, %r1767, %r1781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r494, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r491, %r1776, %r1788;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1814, %r1817}, {%r537, %r540}, {%r1768, %r1784}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1821, %r1825}, {%r537, %r540}, {%r1777, %r1791}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1814, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1912, %r1824, %r1745;
	// end inline asm
	add.s32 	%r1948, %r1915, 5;
	mul.hi.u32 	%r1949, %r1948, -1431655765;
	shr.u32 	%r1950, %r1949, 2;
	mul.lo.s32 	%r1951, %r1950, 6;
	sub.s32 	%r1952, %r1948, %r1951;
	shl.b32 	%r1953, %r1952, 4;
	add.s32 	%r1954, %r237, %r1953;
	mul.wide.u32 	%rd257, %r1954, 4;
	add.s64 	%rd258, %rd86, %rd257;
	ld.shared.u32 	%r1836, [%rd258];
	add.s32 	%r1955, %r238, %r1953;
	mul.wide.u32 	%rd259, %r1955, 4;
	add.s64 	%rd260, %rd86, %rd259;
	ld.shared.u32 	%r1843, [%rd260];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r453, %r456}, {%r1836}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r453, %r456}, {%r1843}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r491, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r491, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r494, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r491, %r1850, %r1864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r494, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r491, %r1859, %r1871;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1897, %r1900}, {%r537, %r540}, {%r1851, %r1867}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1908}, {%r537, %r540}, {%r1860, %r1874}, {%r1329, %r1329}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1897, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r1900, %r1900, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r1904, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r1908, %r1908, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r112, %r1912, %r1907, %r1828;
	// end inline asm
	add.s32 	%r110, %r110, 6;
	setp.ne.s32 	%p288, %r110, 24;
	@%p288 bra 	$L__BB0_165;
// %bb.223:                             // %pass11500
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1957, %r111, 786432;
	or.b32  	%r1958, %r1957, %r3;
	add.s32 	%r1959, %r1958, %r239;
	or.b32  	%r1960, %r1959, %r240;
	cvt.u64.u32 	%rd261, %r1960;
	add.s64 	%rd262, %rd261, %rd23;
	mul.hi.s64 	%rd263, %rd262, 3074457345618258603;
	shr.u64 	%rd264, %rd263, 63;
	shr.s64 	%rd265, %rd263, 27;
	add.s64 	%rd266, %rd265, %rd264;
	setp.lt.s64 	%p289, %rd262, 0;
	mul.lo.s64 	%rd267, %rd266, 805306368;
	setp.ne.s64 	%p290, %rd267, %rd262;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd268, -1, 0, %p291;
	add.s64 	%rd269, %rd266, %rd268;
	mul.lo.s64 	%rd270, %rd269, -805306368;
	add.s64 	%rd271, %rd270, %rd262;
	shl.b64 	%rd272, %rd271, 2;
	add.s64 	%rd273, %rd4, %rd272;
	st.global.u32 	[%rd273], %r112;
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r110, 0;
	mov.u32 	%r112, %r110;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L25441.preheader
                                        //   in Loop: Header=BB0_199 Depth=1
	mov.u16 	%rs190, %rs1;
	mov.u32 	%r3143, %r1329;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L34830
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs182, %rs190, 24;
	mul.hi.s16 	%rs183, %rs182, 10923;
	shr.u16 	%rs184, %rs183, 15;
	add.s16 	%rs185, %rs183, %rs184;
	mul.lo.s16 	%rs186, %rs185, 6;
	sub.s16 	%rs187, %rs182, %rs186;
	mul.wide.s16 	%r3027, %rs187, 16;
	add.s32 	%r3028, %r237, %r3027;
	mul.wide.s32 	%rd296, %r3028, 4;
	add.s64 	%rd298, %rd86, %rd296;
	ld.shared.u32 	%r2533, [%rd298];
	add.s32 	%r3029, %r238, %r3027;
	mul.wide.s32 	%rd299, %r3029, 4;
	add.s64 	%rd300, %rd86, %rd299;
	ld.shared.u32 	%r2540, [%rd300];
	mov.u32 	%r3006, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2550, %r2547}, {%r453, %r456}, {%r2533}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2559, %r2556}, {%r453, %r456}, {%r2540}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2543, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2545, %r2543, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r491, %r2550, %r2545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2552, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r2552, %r2556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r491, %r2559, %r2554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2561, %r494, %r2550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2564, %r491, %r2547, %r2561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2568, %r494, %r2559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r491, %r2556, %r2568;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2594, %r2597}, {%r537, %r540}, {%r2548, %r2564}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2601, %r2605}, {%r537, %r540}, {%r2557, %r2571}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2593, %r2594, %r2594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2596, %r2597, %r2597, %r2593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2600, %r2601, %r2601, %r2596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2604, %r2605, %r2605, %r2600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r1912, %r2604, %r112;
	// end inline asm
	add.s32 	%r3030, %r90, %r3143;
	add.s32 	%r3031, %r3030, 25;
	mul.hi.u32 	%r3032, %r3031, -1431655765;
	shr.u32 	%r3033, %r3032, 2;
	mul.lo.s32 	%r3034, %r3033, 6;
	sub.s32 	%r3035, %r3031, %r3034;
	shl.b32 	%r3036, %r3035, 4;
	add.s32 	%r3037, %r237, %r3036;
	mul.wide.u32 	%rd301, %r3037, 4;
	add.s64 	%rd302, %rd86, %rd301;
	ld.shared.u32 	%r2616, [%rd302];
	add.s32 	%r3038, %r238, %r3036;
	mul.wide.u32 	%rd303, %r3038, 4;
	add.s64 	%rd304, %rd86, %rd303;
	ld.shared.u32 	%r2623, [%rd304];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r453, %r456}, {%r2616}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r453, %r456}, {%r2623}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r491, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r491, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r494, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2647, %r491, %r2630, %r2644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r494, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r491, %r2639, %r2651;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2677, %r2680}, {%r537, %r540}, {%r2631, %r2647}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2684, %r2688}, {%r537, %r540}, {%r2640, %r2654}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2677, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r2680, %r2680, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r2684, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r2688, %r2688, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r1912, %r2687, %r2608;
	// end inline asm
	add.s32 	%r3039, %r3030, 26;
	mul.hi.u32 	%r3040, %r3039, -1431655765;
	shr.u32 	%r3041, %r3040, 2;
	mul.lo.s32 	%r3042, %r3041, 6;
	sub.s32 	%r3043, %r3039, %r3042;
	shl.b32 	%r3044, %r3043, 4;
	add.s32 	%r3045, %r237, %r3044;
	mul.wide.u32 	%rd305, %r3045, 4;
	add.s64 	%rd306, %rd86, %rd305;
	ld.shared.u32 	%r2699, [%rd306];
	add.s32 	%r3046, %r238, %r3044;
	mul.wide.u32 	%rd307, %r3046, 4;
	add.s64 	%rd308, %rd86, %rd307;
	ld.shared.u32 	%r2706, [%rd308];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r453, %r456}, {%r2699}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2725, %r2722}, {%r453, %r456}, {%r2706}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r491, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r491, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r494, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r491, %r2713, %r2727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r494, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r491, %r2722, %r2734;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2760, %r2763}, {%r537, %r540}, {%r2714, %r2730}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2767, %r2771}, {%r537, %r540}, {%r2723, %r2737}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r2760, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r2763, %r2763, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r2767, %r2767, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r2771, %r2771, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r1912, %r2770, %r2691;
	// end inline asm
	add.s32 	%r3047, %r3030, 27;
	mul.hi.u32 	%r3048, %r3047, -1431655765;
	shr.u32 	%r3049, %r3048, 2;
	mul.lo.s32 	%r3050, %r3049, 6;
	sub.s32 	%r3051, %r3047, %r3050;
	shl.b32 	%r3052, %r3051, 4;
	add.s32 	%r3053, %r237, %r3052;
	mul.wide.u32 	%rd309, %r3053, 4;
	add.s64 	%rd310, %rd86, %rd309;
	ld.shared.u32 	%r2782, [%rd310];
	add.s32 	%r3054, %r238, %r3052;
	mul.wide.u32 	%rd311, %r3054, 4;
	add.s64 	%rd312, %rd86, %rd311;
	ld.shared.u32 	%r2789, [%rd312];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2799, %r2796}, {%r453, %r456}, {%r2782}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2808, %r2805}, {%r453, %r456}, {%r2789}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2792, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2792, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r491, %r2799, %r2794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2801, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r2801, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r491, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2810, %r494, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r491, %r2796, %r2810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2817, %r494, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r491, %r2805, %r2817;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2843, %r2846}, {%r537, %r540}, {%r2797, %r2813}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2850, %r2854}, {%r537, %r540}, {%r2806, %r2820}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r2843, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r2846, %r2846, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r2850, %r2850, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2853, %r2854, %r2854, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r1912, %r2853, %r2774;
	// end inline asm
	add.s32 	%r3055, %r3030, 28;
	mul.hi.u32 	%r3056, %r3055, -1431655765;
	shr.u32 	%r3057, %r3056, 2;
	mul.lo.s32 	%r3058, %r3057, 6;
	sub.s32 	%r3059, %r3055, %r3058;
	shl.b32 	%r3060, %r3059, 4;
	add.s32 	%r3061, %r237, %r3060;
	mul.wide.u32 	%rd313, %r3061, 4;
	add.s64 	%rd314, %rd86, %rd313;
	ld.shared.u32 	%r2865, [%rd314];
	add.s32 	%r3062, %r238, %r3060;
	mul.wide.u32 	%rd315, %r3062, 4;
	add.s64 	%rd316, %rd86, %rd315;
	ld.shared.u32 	%r2872, [%rd316];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2882, %r2879}, {%r453, %r456}, {%r2865}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2891, %r2888}, {%r453, %r456}, {%r2872}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2875, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2875, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r491, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2884, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r2884, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r491, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2893, %r494, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r491, %r2879, %r2893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2900, %r494, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r491, %r2888, %r2900;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2926, %r2929}, {%r537, %r540}, {%r2880, %r2896}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2933, %r2937}, {%r537, %r540}, {%r2889, %r2903}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2925, %r2926, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r2929, %r2929, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r2933, %r2933, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r2937, %r2937, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r1912, %r2936, %r2857;
	// end inline asm
	add.s32 	%r3063, %r3030, 29;
	mul.hi.u32 	%r3064, %r3063, -1431655765;
	shr.u32 	%r3065, %r3064, 2;
	mul.lo.s32 	%r3066, %r3065, 6;
	sub.s32 	%r3067, %r3063, %r3066;
	shl.b32 	%r3068, %r3067, 4;
	add.s32 	%r3069, %r237, %r3068;
	mul.wide.u32 	%rd317, %r3069, 4;
	add.s64 	%rd318, %rd86, %rd317;
	ld.shared.u32 	%r2948, [%rd318];
	add.s32 	%r3070, %r238, %r3068;
	mul.wide.u32 	%rd319, %r3070, 4;
	add.s64 	%rd320, %rd86, %rd319;
	ld.shared.u32 	%r2955, [%rd320];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r453, %r456}, {%r2948}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2974, %r2971}, {%r453, %r456}, {%r2955}, {%r3006, %r3006};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r491, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2967, %r494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2967, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r491, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r494, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r491, %r2962, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r494, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r491, %r2971, %r2983;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3009, %r3012}, {%r537, %r540}, {%r2963, %r2979}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3016, %r3020}, {%r537, %r540}, {%r2972, %r2986}, {%r3006, %r3006}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r3009, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r3012, %r3012, %r3008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3015, %r3016, %r3016, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r3020, %r3020, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r112, %r1912, %r3019, %r2940;
	// end inline asm
	add.s32 	%r110, %r110, 6;
	setp.eq.s32 	%p298, %r110, 24;
	@%p298 bra 	$L__BB0_225;
$L__BB0_169:                            // %L40284
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3143, %r3143, 6;
	add.s16 	%rs190, %rs190, 6;
	setp.ne.s32 	%p302, %r3143, 24;
	@%p302 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_170;
$L__BB0_167:                            // %L25441
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p293, %r322, 12;
	setp.eq.s32 	%p294, %r3143, 0;
	selp.b32 	%r2490, %r94, 0, %p294;
	setp.eq.s32 	%p295, %r3143, 6;
	selp.b32 	%r2491, %r98, %r2490, %p295;
	setp.eq.s32 	%p296, %r3143, 12;
	selp.b32 	%r2492, %r102, %r2491, %p296;
	setp.eq.s32 	%p297, %r3143, 18;
	selp.b32 	%r2493, %r106, %r2492, %p297;
	selp.b32 	%r2494, %r95, 0, %p294;
	selp.b32 	%r2495, %r99, %r2494, %p295;
	selp.b32 	%r2496, %r103, %r2495, %p296;
	selp.b32 	%r2497, %r107, %r2496, %p297;
	selp.b32 	%r2498, %r96, 0, %p294;
	selp.b32 	%r2499, %r100, %r2498, %p295;
	selp.b32 	%r2500, %r104, %r2499, %p296;
	selp.b32 	%r2501, %r108, %r2500, %p297;
	selp.b32 	%r2502, %r97, 0, %p294;
	selp.b32 	%r2503, %r101, %r2502, %p295;
	selp.b32 	%r2504, %r105, %r2503, %p296;
	selp.b32 	%r2505, %r109, %r2504, %p297;
	// begin inline asm
	mov.b32 %r1989, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2000, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2506, %r2493, 8;
	xor.b32  	%r1999, %r2506, 8947848;
	// begin inline asm
	lop3.b32 %r1986, %r992, %r1999, %r1989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1991, %r1989, %r1990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1994, %r1986, %r1991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1997, %r1003, %r1999, %r2000, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2001, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2002, %r2000, %r2001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2005, %r1997, %r2002;
	// end inline asm
	// begin inline asm
	mov.b32 %r2035, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2046, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2507, %r2497, 8;
	xor.b32  	%r2045, %r2507, 8947848;
	// begin inline asm
	lop3.b32 %r2032, %r992, %r2045, %r2035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2037, %r2035, %r2036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2040, %r2032, %r2037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2043, %r1003, %r2045, %r2046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2047, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2048, %r2046, %r2047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2051, %r2043, %r2048;
	// end inline asm
	// begin inline asm
	mov.b32 %r2081, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2092, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2508, %r2501, 8;
	xor.b32  	%r2091, %r2508, 8947848;
	// begin inline asm
	lop3.b32 %r2078, %r992, %r2091, %r2081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2082, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2083, %r2081, %r2082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2086, %r2078, %r2083;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2089, %r1003, %r2091, %r2092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2093, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2094, %r2092, %r2093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2097, %r2089, %r2094;
	// end inline asm
	// begin inline asm
	mov.b32 %r2127, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2138, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2509, %r2505, 8;
	xor.b32  	%r2137, %r2509, 8947848;
	// begin inline asm
	lop3.b32 %r2124, %r992, %r2137, %r2127, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2128, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2129, %r2127, %r2128;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2132, %r2124, %r2129;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2135, %r1003, %r2137, %r2138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2139, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2140, %r2138, %r2139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2143, %r2135, %r2140;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r1994;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r2040;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r2005;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2152, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r200;
    mov.b32 {%r2re, %r2im}, %r2051;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2155, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r2086;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2158, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r2132;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2161, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r2097;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2164, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r200;
    mov.b32 {%r2re, %r2im}, %r2143;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2167, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r345, %r348}, {%r2146}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r345, %r348}, {%r2149}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r345, %r348}, {%r2152}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2260, %r2257}, {%r345, %r348}, {%r2155}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2269, %r2266}, {%r345, %r348}, {%r2158}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2278, %r2275}, {%r345, %r348}, {%r2161}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2287, %r2284}, {%r345, %r348}, {%r2164}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2296, %r2293}, {%r345, %r348}, {%r2167}, {%r1329, %r1329};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r397, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r397, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r397, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2253, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r2253, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r397, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2262, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r2262, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r397, %r2269, %r2264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2271, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r2271, %r2275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r397, %r2278, %r2273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2280, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r2280, %r2284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r397, %r2287, %r2282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2289, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r2289, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r397, %r2296, %r2291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2298, %r400, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2301, %r397, %r2230, %r2298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2305, %r400, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r397, %r2239, %r2305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2312, %r400, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2315, %r397, %r2248, %r2312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2319, %r400, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r397, %r2257, %r2319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2326, %r400, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r397, %r2266, %r2326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2333, %r400, %r2278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2336, %r397, %r2275, %r2333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2340, %r400, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2343, %r397, %r2284, %r2340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2347, %r400, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2350, %r397, %r2293, %r2347;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2427, %r2428}, {%r441, %r444}, {%r2231, %r2301}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2435, %r2436}, {%r441, %r444}, {%r2240, %r2308}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2443, %r2444}, {%r441, %r444}, {%r2249, %r2315}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2451, %r2452}, {%r441, %r444}, {%r2258, %r2322}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2459, %r2460}, {%r441, %r444}, {%r2267, %r2329}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2467, %r2468}, {%r441, %r444}, {%r2276, %r2336}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2475, %r2476}, {%r441, %r444}, {%r2285, %r2343}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2483, %r2484}, {%r441, %r444}, {%r2294, %r2350}, {%r1329, %r1329}, %r241, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2427, %r2428, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2427, %r2428, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2435, %r2436, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2435, %r2436, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2443, %r2444, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2443, %r2444, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2451, %r2452, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2451, %r2452, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2459, %r2460, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2459, %r2460, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2467, %r2468, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2467, %r2468, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2475, %r2476, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2475, %r2476, %r729;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2482, %r2483, %r2484, %r725;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2486, %r2483, %r2484, %r729;
	// end inline asm
	add.s16 	%rs176, %rs8, %rs190;
	mul.hi.s16 	%rs177, %rs176, 10923;
	shr.u16 	%rs178, %rs177, 15;
	add.s16 	%rs179, %rs177, %rs178;
	mul.lo.s16 	%rs180, %rs179, 6;
	sub.s16 	%rs181, %rs176, %rs180;
	mul.wide.s16 	%r2510, %rs181, 16;
	add.s32 	%r2511, %r226, %r2510;
	mul.wide.s32 	%rd274, %r2511, 4;
	add.s64 	%rd7, %rd86, %rd274;
	st.shared.u32 	[%rd7], %r2426;
	add.s32 	%r2512, %r227, %r2510;
	mul.wide.u32 	%rd276, %r2512, 4;
	add.s64 	%rd8, %rd86, %rd276;
	st.shared.u32 	[%rd8], %r2430;
	add.s32 	%r2513, %r229, %r2510;
	mul.wide.s32 	%rd277, %r2513, 4;
	add.s64 	%rd9, %rd86, %rd277;
	st.shared.u32 	[%rd9], %r2434;
	add.s32 	%r2514, %r230, %r2510;
	mul.wide.u32 	%rd278, %r2514, 4;
	add.s64 	%rd10, %rd86, %rd278;
	st.shared.u32 	[%rd10], %r2438;
	add.s32 	%r2515, %r232, %r2510;
	mul.wide.s32 	%rd279, %r2515, 4;
	add.s64 	%rd11, %rd86, %rd279;
	st.shared.u32 	[%rd11], %r2442;
	add.s32 	%r2516, %r233, %r2510;
	mul.wide.u32 	%rd280, %r2516, 4;
	add.s64 	%rd12, %rd86, %rd280;
	st.shared.u32 	[%rd12], %r2446;
	add.s32 	%r2517, %r235, %r2510;
	mul.wide.s32 	%rd281, %r2517, 4;
	add.s64 	%rd13, %rd86, %rd281;
	st.shared.u32 	[%rd13], %r2450;
	add.s32 	%r2518, %r236, %r2510;
	mul.wide.u32 	%rd282, %r2518, 4;
	add.s64 	%rd14, %rd86, %rd282;
	st.shared.u32 	[%rd14], %r2454;
	add.s32 	%r2519, %r88, %r3143;
	mul.hi.u32 	%r2520, %r2519, -1431655765;
	shr.u32 	%r2521, %r2520, 2;
	mul.lo.s32 	%r2522, %r2521, 6;
	sub.s32 	%r2523, %r2519, %r2522;
	shl.b32 	%r2524, %r2523, 4;
	add.s32 	%r2525, %r226, %r2524;
	mul.wide.u32 	%rd283, %r2525, 4;
	add.s64 	%rd15, %rd86, %rd283;
	st.shared.u32 	[%rd15], %r2458;
	cvt.u64.u32 	%rd284, %r2524;
	add.s64 	%rd285, %rd37, %rd284;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd16, %rd86, %rd286;
	st.shared.u32 	[%rd16+6304], %r2462;
	add.s32 	%r2526, %r229, %r2524;
	mul.wide.u32 	%rd287, %r2526, 4;
	add.s64 	%rd17, %rd86, %rd287;
	st.shared.u32 	[%rd17], %r2466;
	add.s64 	%rd288, %rd40, %rd284;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd18, %rd86, %rd289;
	st.shared.u32 	[%rd18+6304], %r2470;
	add.s32 	%r2527, %r232, %r2524;
	mul.wide.u32 	%rd290, %r2527, 4;
	add.s64 	%rd19, %rd86, %rd290;
	st.shared.u32 	[%rd19], %r2474;
	add.s64 	%rd291, %rd43, %rd284;
	shl.b64 	%rd292, %rd291, 2;
	add.s64 	%rd20, %rd86, %rd292;
	st.shared.u32 	[%rd20+6304], %r2478;
	add.s32 	%r2528, %r235, %r2524;
	mul.wide.u32 	%rd293, %r2528, 4;
	add.s64 	%rd21, %rd86, %rd293;
	st.shared.u32 	[%rd21], %r2482;
	add.s64 	%rd294, %rd46, %rd284;
	shl.b64 	%rd295, %rd294, 2;
	add.s64 	%rd22, %rd86, %rd295;
	st.shared.u32 	[%rd22+6304], %r2486;
	@%p293 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_168;
$L__BB0_224:                            // %oksrem13975
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2426;
	st.shared.u32 	[%rd8], %r2430;
	st.shared.u32 	[%rd9], %r2434;
	st.shared.u32 	[%rd10], %r2438;
	st.shared.u32 	[%rd11], %r2442;
	st.shared.u32 	[%rd12], %r2446;
	st.shared.u32 	[%rd13], %r2450;
	st.shared.u32 	[%rd14], %r2454;
	st.shared.u32 	[%rd15], %r2458;
	st.shared.u32 	[%rd16+6304], %r2462;
	st.shared.u32 	[%rd17], %r2466;
	st.shared.u32 	[%rd18+6304], %r2470;
	st.shared.u32 	[%rd19], %r2474;
	st.shared.u32 	[%rd20+6304], %r2478;
	st.shared.u32 	[%rd21], %r2482;
	st.shared.u32 	[%rd22+6304], %r2486;
	bra.uni 	$L__BB0_168;
$L__BB0_225:                            // %pass18390
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r3072, %r111, 786432;
	or.b32  	%r3073, %r3072, %r3;
	add.s32 	%r3074, %r3073, %r239;
	or.b32  	%r3075, %r3074, %r240;
	cvt.u64.u32 	%rd321, %r3075;
	add.s64 	%rd322, %rd321, %rd23;
	mul.hi.s64 	%rd323, %rd322, 3074457345618258603;
	shr.u64 	%rd324, %rd323, 63;
	shr.s64 	%rd325, %rd323, 27;
	add.s64 	%rd326, %rd325, %rd324;
	setp.lt.s64 	%p299, %rd322, 0;
	mul.lo.s64 	%rd327, %rd326, 805306368;
	setp.ne.s64 	%p300, %rd327, %rd322;
	and.pred  	%p301, %p299, %p300;
	selp.s64 	%rd328, -1, 0, %p301;
	add.s64 	%rd329, %rd326, %rd328;
	mul.lo.s64 	%rd330, %rd329, -805306368;
	add.s64 	%rd331, %rd330, %rd322;
	shl.b64 	%rd332, %rd331, 2;
	add.s64 	%rd333, %rd4, %rd332;
	st.global.u32 	[%rd333], %r112;
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r110, %r3006;
	mov.u32 	%r112, %r3006;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L40315
	mov.u32 	%r3076, 0;
	st.global.u32 	[%rd6], %r3076;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd200, exception3604;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_221:                            // %post_box_union9511
	mov.u64 	%rd238, exception3604;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5128
	mov.u32 	%r3092, 5;
	st.global.u32 	[%rd6], %r3092;
	mov.u64 	%rd364, exception3564;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5284
	mov.u32 	%r3091, 5;
	st.global.u32 	[%rd6], %r3091;
	mov.u64 	%rd362, exception3564;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5440
	mov.u32 	%r3090, 5;
	st.global.u32 	[%rd6], %r3090;
	mov.u64 	%rd360, exception3564;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5596
	mov.u32 	%r3089, 5;
	st.global.u32 	[%rd6], %r3089;
	mov.u64 	%rd358, exception3564;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5752
	mov.u32 	%r3088, 5;
	st.global.u32 	[%rd6], %r3088;
	mov.u64 	%rd356, exception3564;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5908
	mov.u32 	%r3087, 5;
	st.global.u32 	[%rd6], %r3087;
	mov.u64 	%rd354, exception3564;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6064
	mov.u32 	%r3086, 5;
	st.global.u32 	[%rd6], %r3086;
	mov.u64 	%rd352, exception3564;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6220
	mov.u32 	%r3085, 5;
	st.global.u32 	[%rd6], %r3085;
	mov.u64 	%rd350, exception3564;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6376
	mov.u32 	%r3084, 5;
	st.global.u32 	[%rd6], %r3084;
	mov.u64 	%rd348, exception3564;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6532
	mov.u32 	%r3083, 5;
	st.global.u32 	[%rd6], %r3083;
	mov.u64 	%rd346, exception3564;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6714
	mov.u32 	%r3082, 5;
	st.global.u32 	[%rd6], %r3082;
	mov.u64 	%rd344, exception3564;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6870
	mov.u32 	%r3081, 5;
	st.global.u32 	[%rd6], %r3081;
	mov.u64 	%rd342, exception3564;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7026
	mov.u32 	%r3080, 5;
	st.global.u32 	[%rd6], %r3080;
	mov.u64 	%rd340, exception3564;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7182
	mov.u32 	%r3079, 5;
	st.global.u32 	[%rd6], %r3079;
	mov.u64 	%rd338, exception3564;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7338
	mov.u32 	%r3078, 5;
	st.global.u32 	[%rd6], %r3078;
	mov.u64 	%rd336, exception3564;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7494
	mov.u32 	%r3077, 5;
	st.global.u32 	[%rd6], %r3077;
	mov.u64 	%rd334, exception3564;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3094, 2;
	st.global.u32 	[%rd6], %r3094;
	mov.u64 	%rd368, exception3564;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3093, 3;
	st.global.u32 	[%rd6], %r3093;
	mov.u64 	%rd366, exception3564;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd54, exception1;
	cvta.global.u64 	%rd55, %rd54;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd55;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd53, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r322, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd59, __unnamed_1;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd53;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r550, [retval0+0];
	} // callseq 49
	mov.u32 	%r552, 4;
	st.global.u32 	[%rd6], %r552;
	mov.u64 	%rd62, exception3564;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r312;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
