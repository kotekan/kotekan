// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3602[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3642[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13654[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<309>;
	.reg .b16 	%rs<275>;
	.reg .b32 	%r<3065>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<373>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd44, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r297, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r297, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd45, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r298, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r299, %r2, %r298;
	add.s32 	%r300, %r299, %r5;
	mul.wide.u32 	%rd52, %r300, 4;
	add.s64 	%rd6, %rd45, %rd52;
	mov.u32 	%r301, 1;
	st.global.u32 	[%rd6], %r301;
	setp.gt.u32 	%p5, %r289, 511;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r290, %r289;
	setp.gt.s32 	%p7, %r290, 1023;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r291, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r290, %r289;
	mad.lo.s32 	%r302, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r303, %r302, %r302, 4;
	setp.gt.u32 	%p9, %r303, 89478484;
	setp.gt.u32 	%p10, %r291, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r292, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r292, %r291;
	setp.lt.s32 	%p13, %r292, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r304, %r292, %r291;
	mul.hi.s32 	%r305, %r6, 1431655766;
	shr.u32 	%r306, %r305, 31;
	add.s32 	%r307, %r305, %r306;
	setp.eq.s32 	%p15, %r304, %r307;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r293, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r293, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r294, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r294, %r293;
	setp.gt.s32 	%p18, %r294, 2048;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r295, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r294, %r293;
	and.b32  	%r308, %r7, 63;
	setp.ne.s32 	%p20, %r308, 0;
	setp.lt.s32 	%p21, %r295, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r296, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r296, %r295;
	setp.gt.s32 	%p24, %r296, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r309, %r296, %r295;
	and.b32  	%r310, %r309, 63;
	setp.eq.s32 	%p26, %r310, 0;
	setp.eq.s32 	%p27, %r309, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_13;
$L__BB0_171:                            // %pass162
	and.b32  	%r156, %r298, 3;
	shr.u32 	%r157, %r298, 2;
	mul.lo.s32 	%r311, %r156, %r157;
	and.b32  	%r312, %r311, 7;
	cvt.rn.f32.s32 	%f205, %r312;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p308, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_183;
// %bb.172:
	@%p308 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r159, %f788;
	and.b32  	%r313, %r159, 8388607;
	or.b32  	%r3060, %r313, 1065353216;
	mov.b32 	%f783, %r3060;
	add.s32 	%r314, %r159, -1073741824;
	and.b32  	%r3061, %r314, -8388608;
	setp.eq.s32 	%p36, %r3061, 0;
	@%p36 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r315, %r3061, 192937984;
	add.s32 	%r316, %r3060, %r315;
	mov.b32 	%f217, %r316;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3061, %r3061, %r315;
	mov.b32 	%r3060, %f783;
	setp.ne.s32 	%p37, %r3061, 0;
	setp.ne.s32 	%p38, %r3060, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r159, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r158, %f172;
	setp.lt.u32 	%p31, %r158, 1073741824;
	@%p31 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p32, %r158, -2147483647;
	@%p32 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r317, %f169;
	and.b32  	%r166, %r317, -2147483648;
	@%p41 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r318, %f784;
	or.b32  	%r319, %r166, %r318;
	mov.b32 	%f784, %r319;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r169, %r298, 1;
	and.b32  	%r170, %r169, 2;
	mul.lo.s32 	%r334, %r170, %r157;
	cvt.rn.f32.s32 	%f259, %r334;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r335, %r9, 8388607;
	or.b32  	%r3019, %r335, 1065353216;
	mov.b32 	%f733, %r3019;
	add.s32 	%r336, %r9, -1073741824;
	and.b32  	%r3020, %r336, -8388608;
	setp.eq.s32 	%p56, %r3020, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r337, %r3020, 192937984;
	add.s32 	%r338, %r3019, %r337;
	mov.b32 	%f271, %r338;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3020, %r3020, %r337;
	mov.b32 	%r3019, %f733;
	setp.ne.s32 	%p57, %r3020, 0;
	setp.ne.s32 	%p58, %r3019, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r171, %r170, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r339, %f186;
	and.b32  	%r340, %r339, -2147483648;
	mov.b32 	%r341, %f734;
	or.b32  	%r342, %r340, %r341;
	mov.b32 	%f734, %r342;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r171, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r351, %r171, %r157;
	mul.hi.u32 	%r352, %r351, -1431655765;
	shr.u32 	%r353, %r352, 4;
	mul.lo.s32 	%r354, %r353, 24;
	sub.s32 	%r355, %r351, %r354;
	cvt.rn.f32.s32 	%f311, %r355;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r356, %r17, 8388607;
	or.b32  	%r3021, %r356, 1065353216;
	mov.b32 	%f737, %r3021;
	add.s32 	%r357, %r17, -1073741824;
	and.b32  	%r3022, %r357, -8388608;
	setp.eq.s32 	%p77, %r3022, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r358, %r3022, 192937984;
	add.s32 	%r359, %r3021, %r358;
	mov.b32 	%f323, %r359;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3022, %r3022, %r358;
	mov.b32 	%r3021, %f737;
	setp.ne.s32 	%p78, %r3022, 0;
	setp.ne.s32 	%p79, %r3021, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r360, %f18;
	and.b32  	%r361, %r360, -2147483648;
	mov.b32 	%r362, %f738;
	or.b32  	%r363, %r361, %r362;
	mov.b32 	%f738, %r363;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r364, %f333;
	and.b32  	%r365, %r364, -2147483648;
	or.b32  	%r366, %r365, 1056964608;
	mov.b32 	%f334, %r366;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r367, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r368, %r367, 1;
	setp.eq.b32 	%p85, %r368, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r369, %r367, 2;
	setp.eq.s32 	%p86, %r369, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r370, %r367, 1;
	and.b32  	%r371, %r370, 2;
	setp.eq.s32 	%p87, %r371, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r157, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r378, %r170, %r26;
	cvt.u16.u32 	%rs11, %r378;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r379, %r28, 8388607;
	or.b32  	%r3023, %r379, 1065353216;
	mov.b32 	%f743, %r3023;
	add.s32 	%r380, %r28, -1073741824;
	and.b32  	%r3024, %r380, -8388608;
	setp.eq.s32 	%p98, %r3024, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3024, 192937984;
	add.s32 	%r382, %r3023, %r381;
	mov.b32 	%f376, %r382;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3024, %r3024, %r381;
	mov.b32 	%r3023, %f743;
	setp.ne.s32 	%p99, %r3024, 0;
	setp.ne.s32 	%p100, %r3023, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r383, %f39;
	and.b32  	%r384, %r383, -2147483648;
	mov.b32 	%r385, %f744;
	or.b32  	%r386, %r384, %r385;
	mov.b32 	%f744, %r386;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r387, %f386;
	and.b32  	%r388, %r387, -2147483648;
	or.b32  	%r389, %r388, 1056964608;
	mov.b32 	%f387, %r389;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r390, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r391, %r390, 1;
	setp.eq.b32 	%p106, %r391, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r392, %r390, 2;
	setp.eq.s32 	%p107, %r392, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r393, %r390, 1;
	and.b32  	%r394, %r393, 2;
	setp.eq.s32 	%p108, %r394, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r395, %r171, %r26;
	mul.hi.u32 	%r396, %r395, -1431655765;
	shr.u32 	%r397, %r396, 1;
	mul.lo.s32 	%r398, %r397, 3;
	sub.s32 	%r399, %r395, %r398;
	cvt.rn.f32.s32 	%f417, %r399;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r400, %r36, 8388607;
	or.b32  	%r3025, %r400, 1065353216;
	mov.b32 	%f749, %r3025;
	add.s32 	%r401, %r36, -1073741824;
	and.b32  	%r3026, %r401, -8388608;
	setp.eq.s32 	%p121, %r3026, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r402, %r3026, 192937984;
	add.s32 	%r403, %r3025, %r402;
	mov.b32 	%f429, %r403;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3026, %r3026, %r402;
	mov.b32 	%r3025, %f749;
	setp.ne.s32 	%p122, %r3026, 0;
	setp.ne.s32 	%p123, %r3025, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r404, %f60;
	and.b32  	%r405, %r404, -2147483648;
	mov.b32 	%r406, %f750;
	or.b32  	%r407, %r405, %r406;
	mov.b32 	%f750, %r407;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r408, %f439;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f440, %r410;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r411, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p129, %r412, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p130, %r413, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r414, %r411, 1;
	and.b32  	%r415, %r414, 2;
	setp.eq.s32 	%p131, %r415, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r298, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_193;
// %bb.78:
	@%p308 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_79;
$L__BB0_189:
	mov.b32 	%r173, %f788;
	and.b32  	%r422, %r173, 8388607;
	or.b32  	%r3062, %r422, 1065353216;
	mov.b32 	%f787, %r3062;
	add.s32 	%r423, %r173, -1073741824;
	and.b32  	%r3063, %r423, -8388608;
	setp.eq.s32 	%p142, %r3063, 0;
	@%p142 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3063, 192937984;
	add.s32 	%r425, %r3062, %r424;
	mov.b32 	%f479, %r425;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3063, %r3063, %r424;
	mov.b32 	%r3062, %f787;
	setp.ne.s32 	%p143, %r3063, 0;
	setp.ne.s32 	%p144, %r3062, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r173, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r172, %f189;
	setp.lt.u32 	%p137, %r172, 1073741824;
	@%p137 bra 	$L__BB0_188;
// %bb.80:
	setp.lt.u32 	%p138, %r172, -2147483647;
	@%p138 bra 	$L__BB0_186;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r426, %f788;
	or.b32  	%r427, %r166, %r426;
	mov.b32 	%f788, %r427;
$L__BB0_195:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r442, %r47, 8388607;
	or.b32  	%r3027, %r442, 1065353216;
	mov.b32 	%f759, %r3027;
	add.s32 	%r443, %r47, -1073741824;
	and.b32  	%r3028, %r443, -8388608;
	setp.eq.s32 	%p162, %r3028, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r3028, 192937984;
	add.s32 	%r445, %r3027, %r444;
	mov.b32 	%f532, %r445;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3028, %r3028, %r444;
	mov.b32 	%r3027, %f759;
	setp.ne.s32 	%p163, %r3028, 0;
	setp.ne.s32 	%p164, %r3027, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r446, %f203;
	and.b32  	%r447, %r446, -2147483648;
	mov.b32 	%r448, %f760;
	or.b32  	%r449, %r447, %r448;
	mov.b32 	%f760, %r449;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r157;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r458, %r55, 8388607;
	or.b32  	%r3029, %r458, 1065353216;
	mov.b32 	%f763, %r3029;
	add.s32 	%r459, %r55, -1073741824;
	and.b32  	%r3030, %r459, -8388608;
	setp.eq.s32 	%p182, %r3030, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r460, %r3030, 192937984;
	add.s32 	%r461, %r3029, %r460;
	mov.b32 	%f584, %r461;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3030, %r3030, %r460;
	mov.b32 	%r3029, %f763;
	setp.ne.s32 	%p183, %r3030, 0;
	setp.ne.s32 	%p184, %r3029, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r462, %f104;
	and.b32  	%r463, %r462, -2147483648;
	mov.b32 	%r464, %f764;
	or.b32  	%r465, %r463, %r464;
	mov.b32 	%f764, %r465;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r298, 1;
	shr.u32 	%r66, %r298, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r480, %r68, 8388607;
	or.b32  	%r3031, %r480, 1065353216;
	mov.b32 	%f767, %r3031;
	add.s32 	%r481, %r68, -1073741824;
	and.b32  	%r3032, %r481, -8388608;
	setp.eq.s32 	%p203, %r3032, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r482, %r3032, 192937984;
	add.s32 	%r483, %r3031, %r482;
	mov.b32 	%f638, %r483;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3032, %r3032, %r482;
	mov.b32 	%r3031, %f767;
	setp.ne.s32 	%p204, %r3032, 0;
	setp.ne.s32 	%p205, %r3031, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r484, %f121;
	and.b32  	%r485, %r484, -2147483648;
	mov.b32 	%r486, %f768;
	or.b32  	%r487, %r485, %r486;
	mov.b32 	%f768, %r487;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r488, %f648;
	and.b32  	%r489, %r488, -2147483648;
	or.b32  	%r490, %r489, 1056964608;
	mov.b32 	%f649, %r490;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r491, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r492, %r491, 1;
	setp.eq.b32 	%p211, %r492, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r493, %r491, 2;
	setp.eq.s32 	%p212, %r493, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r494, %r491, 1;
	and.b32  	%r495, %r494, 2;
	setp.eq.s32 	%p213, %r495, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r157, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r496, %r76, 8388607;
	or.b32  	%r3033, %r496, 1065353216;
	mov.b32 	%f773, %r3033;
	add.s32 	%r497, %r76, -1073741824;
	and.b32  	%r3034, %r497, -8388608;
	setp.eq.s32 	%p224, %r3034, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r498, %r3034, 192937984;
	add.s32 	%r499, %r3033, %r498;
	mov.b32 	%f691, %r499;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3034, %r3034, %r498;
	mov.b32 	%r3033, %f773;
	setp.ne.s32 	%p225, %r3034, 0;
	setp.ne.s32 	%p226, %r3033, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r500, %f142;
	and.b32  	%r501, %r500, -2147483648;
	mov.b32 	%r502, %f774;
	or.b32  	%r503, %r501, %r502;
	mov.b32 	%f774, %r503;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r504, %f701;
	and.b32  	%r505, %r504, -2147483648;
	or.b32  	%r506, %r505, 1056964608;
	mov.b32 	%f702, %r506;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r507, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r508, %r507, 1;
	setp.eq.b32 	%p232, %r508, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r509, %r507, 2;
	setp.eq.s32 	%p233, %r509, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r510, %r507, 1;
	and.b32  	%r511, %r510, 2;
	setp.eq.s32 	%p234, %r511, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r298, 15;
	mov.u32 	%r182, 999999999;
	@%p238 bra 	$L__BB0_197;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r519, %r298, 6, %r4;
	cvt.u16.u32 	%rs17, %r519;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r520, %rs22;
	and.b32  	%r521, %r520, 255;
	mul.wide.u32 	%rd53, %r521, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.u32 	%r522, [%rd54];
	shl.b32 	%r523, %r522, 16;
	cvt.s32.s16 	%r85, %r522;
	shr.s32 	%r86, %r522, 16;
	or.b32  	%r524, %r523, 65535;
	setp.lt.u32 	%p239, %r524, 589823;
	setp.lt.u32 	%p240, %r522, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_145;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r528, %r86, 290;
	mad.lo.s32 	%r182, %r85, 33, %r528;
$L__BB0_197:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r326, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r327, %r326, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r434, %f489;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%r343, %f282;
	and.b32  	%r435, %r434, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r328;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%r450, %f542;
	mov.b32 	%r472, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f490, %r436;
	and.b32  	%r451, %r450, -2147483648;
	and.b32  	%r473, %r472, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r345;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r452, %r451, 1056964608;
	or.b32  	%r474, %r473, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r452;
	mov.b32 	%f596, %r474;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r329, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r330, %r329, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r437, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r330, 1;
	cvt.rzi.s32.f32 	%r346, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r438, %r437, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r331, %r329, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r347, %r346, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r438, 1;
	cvt.rzi.s32.f32 	%r453, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r475, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r331, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r332, %r329, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r347, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r439, %r437, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r454, %r453, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r476, %r475, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r333, %r332, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p151, %r439, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r440, %r437, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r454, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r476, 1;
	setp.eq.s32 	%p46, %r333, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r348, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r349, %r346, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r441, %r440, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r455, %r453, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r477, %r475, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r350, %r349, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r441, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r455, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r456, %r453, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r477, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r478, %r475, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r350, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r457, %r456, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r479, %r478, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r322, %f258;
	mov.b32 	%r325, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r457, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r479, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r321, %r325, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r430, %f520;
	mov.b32 	%r433, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r325, %r322;
	// end inline asm
	mov.b32 	%r373, %f17;
	mov.b32 	%r374, %f37;
	mov.b32 	%r376, %f16;
	mov.b32 	%r377, %f38;
	mov.b32 	%r417, %f83;
	mov.b32 	%r418, %f85;
	mov.b32 	%r420, %f755;
	mov.b32 	%r421, %f757;
	xor.b32  	%r429, %r433, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	mov.b32 	%r468, %f625;
	mov.b32 	%r467, %f103;
	mov.b32 	%r471, %f622;
	mov.b32 	%r470, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r466, %r468, %r467;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r469, %r471, %r470;
	// end inline asm
	mov.b32 	%r513, %f165;
	mov.b32 	%r514, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r512, %r514, %r513;
	// end inline asm
	mov.b32 	%r516, %f779;
	mov.b32 	%r517, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r515, %r517, %r516;
	// end inline asm
	mul.lo.s32 	%r530, %r156, 24;
	shl.b32 	%r531, %r4, 1;
	and.b32  	%r532, %r531, 2;
	shr.u32 	%r533, %r298, 3;
	bfe.u32 	%r534, %r298, 3, 1;
	or.b32  	%r535, %r532, %r534;
	and.b32  	%r536, %r533, 2;
	or.b32  	%r183, %r536, %r64;
	cvt.u16.u32 	%rs25, %r183;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r537, %rs29;
	and.b32  	%r538, %r537, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r539, %rs30, 8;
	add.s32 	%r540, %r530, %r2;
	or.b32  	%r541, %r540, %r535;
	add.s32 	%r542, %r541, %r539;
	mul.wide.u32 	%rd60, %r542, 4;
	add.s64 	%rd61, %rd2, %rd60;
	ld.global.u32 	%r184, [%rd61];
	or.b32  	%r543, %r535, 4;
	cvt.u64.u32 	%rd62, %r539;
	cvt.u64.u32 	%rd63, %r540;
	cvt.u64.u32 	%rd64, %r535;
	add.s64 	%rd65, %rd63, %rd64;
	add.s64 	%rd66, %rd65, %rd62;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd68, %rd2, %rd67;
	ld.global.u32 	%r185, [%rd68+16];
	cvt.u64.u32 	%rd69, %r530;
	cvt.u64.u32 	%rd70, %r2;
	add.s64 	%rd71, %rd70, %rd69;
	add.s64 	%rd72, %rd71, %rd64;
	add.s64 	%rd73, %rd72, %rd62;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd75, %rd2, %rd74;
	ld.global.u32 	%r186, [%rd75+384];
	cvt.u64.u32 	%rd76, %r543;
	add.s64 	%rd77, %rd71, %rd76;
	add.s64 	%rd78, %rd77, %rd62;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.u32 	%r187, [%rd80+384];
	shl.b32 	%r544, %r289, 16;
	shl.b32 	%r545, %r293, 5;
	add.s32 	%r188, %r545, %r544;
	shl.b32 	%r546, %r298, 2;
	shl.b32 	%r547, %r1, 5;
	shl.b32 	%r548, %r4, 2;
	and.b32  	%r549, %r546, 28;
	or.b32  	%r189, %r549, %r547;
	or.b32  	%r190, %r548, %r533;
	and.b32  	%r191, %r298, 4;
	bfe.s32 	%r550, %r298, 2, 1;
	shl.b32 	%r551, %r298, 4;
	and.b32  	%r552, %r169, 8;
	or.b32  	%r553, %r552, %r551;
	bfe.u32 	%r554, %r553, 3, 3;
	mul.lo.s32 	%r192, %r554, 260;
	cvt.u16.u32 	%rs31, %r298;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r555, %rs36;
	and.b32  	%r193, %r555, 255;
	add.s32 	%r556, %r4, 6;
	add.s32 	%r557, %r5, 192;
	and.b32  	%r558, %r557, 224;
	shr.u32 	%r559, %r556, 3;
	mad.lo.s32 	%r194, %r559, 260, %r558;
	add.s32 	%r560, %r4, 12;
	add.s32 	%r561, %r5, 128;
	and.b32  	%r562, %r561, 224;
	shr.u32 	%r563, %r560, 3;
	mad.lo.s32 	%r195, %r563, 260, %r562;
	add.s32 	%r564, %r4, 18;
	add.s32 	%r565, %r5, 64;
	and.b32  	%r566, %r565, 224;
	shr.u32 	%r567, %r564, 3;
	mad.lo.s32 	%r196, %r567, 260, %r566;
	or.b32  	%r197, %r5, 780;
	add.s32 	%r568, %r4, 30;
	shr.u32 	%r569, %r568, 3;
	mad.lo.s32 	%r198, %r569, 260, %r558;
	add.s32 	%r570, %r4, 36;
	shr.u32 	%r571, %r570, 3;
	mad.lo.s32 	%r199, %r571, 260, %r562;
	add.s32 	%r572, %r4, 42;
	shr.u32 	%r573, %r572, 3;
	mad.lo.s32 	%r200, %r573, 260, %r566;
	or.b32  	%r201, %r5, 1560;
	add.s32 	%r574, %r4, 54;
	shr.u32 	%r575, %r574, 3;
	mad.lo.s32 	%r202, %r575, 260, %r558;
	add.s32 	%r576, %r4, 60;
	bfe.u32 	%r577, %r576, 3, 3;
	mad.lo.s32 	%r203, %r577, 260, %r562;
	mul.lo.s32 	%r578, %r156, 870;
	shr.u32 	%r579, %r4, 1;
	cvt.u16.u32 	%rs37, %r579;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r580, %rs42;
	and.b32  	%r204, %r580, 255;
	mad.lo.s32 	%r581, %r535, 33, %r578;
	mad.lo.s32 	%r205, %r538, 290, %r581;
	add.s32 	%r206, %r205, 132;
	setp.lt.u32 	%p243, %r298, 4;
	setp.eq.s32 	%p244, %r157, 1;
	setp.eq.s32 	%p245, %r157, 4;
	setp.eq.s32 	%p246, %r157, 5;
	selp.b32 	%r582, 0, 392, %p134;
	or.b32  	%r583, %r532, %r66;
	setp.eq.s32 	%p247, %r65, 0;
	selp.b32 	%r584, 0, 784, %p247;
	bfe.s32 	%r585, %r298, 3, 1;
	and.b32  	%r586, %r585, 98;
	and.b32  	%r587, %r550, 196;
	or.b32  	%r588, %r583, %r582;
	or.b32  	%r589, %r586, %r584;
	add.s32 	%r590, %r589, %r587;
	add.s32 	%r207, %r590, %r588;
	add.s32 	%r591, %r590, 1576;
	add.s32 	%r208, %r591, %r588;
	or.b32  	%r592, %r583, 4;
	or.b32  	%r593, %r592, %r582;
	add.s32 	%r209, %r590, %r593;
	add.s32 	%r210, %r591, %r593;
	selp.b32 	%r594, 8, 400, %p134;
	or.b32  	%r595, %r583, %r594;
	add.s32 	%r211, %r590, %r595;
	add.s32 	%r212, %r591, %r595;
	or.b32  	%r596, %r592, %r594;
	add.s32 	%r213, %r590, %r596;
	add.s32 	%r214, %r591, %r596;
	and.b32  	%r597, %r4, 1;
	neg.s32 	%r598, %r597;
	and.b32  	%r599, %r598, 392;
	and.b32  	%r600, %r585, 1576;
	mul.lo.s32 	%r601, %r66, 784;
	and.b32  	%r602, %r169, 6;
	shr.u32 	%r603, %r4, 2;
	bfe.s32 	%r604, %r4, 1, 1;
	and.b32  	%r605, %r604, 196;
	or.b32  	%r606, %r601, %r64;
	or.b32  	%r607, %r606, %r602;
	mad.lo.s32 	%r608, %r603, 98, %r607;
	add.s32 	%r609, %r608, %r599;
	add.s32 	%r610, %r609, %r600;
	add.s32 	%r215, %r610, %r605;
	add.s32 	%r216, %r215, 8;
	mul.lo.s32 	%r611, %r291, 786432;
	mad.lo.s32 	%r612, %r295, 192, %r611;
	cvt.u16.u32 	%rs43, %r190;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r613, %rs49;
	and.b32  	%r614, %r613, 248;
	and.b32  	%r615, %r298, 7;
	or.b32  	%r616, %r615, %r2;
	add.s32 	%r217, %r616, %r614;
	cvt.s64.s32 	%rd23, %r612;
	add.s32 	%r617, %r205, %r204;
	mul.wide.u32 	%rd81, %r617, 4;
	mov.u64 	%rd82, shmem;
	add.s64 	%rd24, %rd82, %rd81;
	add.s32 	%r618, %r206, %r204;
	mul.wide.u32 	%rd83, %r618, 4;
	add.s64 	%rd25, %rd82, %rd83;
	cvt.u64.u32 	%rd84, %r205;
	cvt.u64.u16 	%rd85, %rs42;
	and.b64  	%rd86, %rd85, 255;
	add.s64 	%rd87, %rd84, %rd86;
	shl.b64 	%rd88, %rd87, 2;
	add.s64 	%rd26, %rd82, %rd88;
	cvt.u64.u32 	%rd89, %r206;
	add.s64 	%rd90, %rd89, %rd86;
	shl.b64 	%rd91, %rd90, 2;
	add.s64 	%rd27, %rd82, %rd91;
	or.pred  	%p248, %p243, %p244;
	and.b32  	%r619, %r298, 24;
	setp.eq.s32 	%p249, %r619, 8;
	or.pred  	%p250, %p248, %p249;
	or.pred  	%p251, %p250, %p245;
	setp.eq.s32 	%p252, %r619, 24;
	or.pred  	%p253, %p246, %p252;
	selp.b32 	%r218, 1145324612, -286331154, %p250;
	or.pred  	%p1, %p251, %p253;
	selp.b32 	%r219, 1145324612, -286331154, %p248;
	add.s32 	%r620, %r157, -1;
	setp.lt.u32 	%p254, %r620, 3;
	or.pred  	%p2, %p243, %p254;
	setp.eq.s32 	%p255, %r619, 16;
	or.pred  	%p3, %p255, %p252;
	selp.b32 	%r220, 1145324612, -286331154, %p255;
	and.b16  	%rs8, %rs42, 255;
	add.s32 	%r221, %r217, 1572864;
	or.b16  	%rs9, %rs8, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r219, %r220, %p2;
	or.pred  	%p287, %p2, %p3;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40748
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r155, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p307, %r88, 432;
	mov.u32 	%r88, %r155;
	@%p307 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r621, %r88, %r289;
	setp.lt.s32 	%p256, %r621, %r290;
	@%p256 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem914
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p257, %r191, 0;
	mul.hi.u32 	%r718, %r88, -1431655765;
	shr.u32 	%r719, %r718, 5;
	mul.lo.s32 	%r222, %r719, 48;
	add.s32 	%r720, %r222, %r190;
	cvt.u16.u32 	%rs50, %r720;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 7;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -512;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.u32.u16 	%r721, %rs55;
	shl.b32 	%r722, %r721, 16;
	or.b32  	%r723, %r722, %r189;
	add.s32 	%r724, %r188, %r723;
	shr.s32 	%r725, %r724, 31;
	shr.u32 	%r726, %r725, 7;
	add.s32 	%r727, %r724, %r726;
	shr.s32 	%r728, %r727, 25;
	setp.lt.s32 	%p258, %r724, 0;
	and.b32  	%r729, %r727, -33554432;
	setp.ne.s32 	%p259, %r729, %r724;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r730, 1, 0, %p260;
	sub.s32 	%r731, %r730, %r728;
	shl.b32 	%r732, %r731, 25;
	add.s32 	%r733, %r732, %r724;
	mul.wide.s32 	%rd92, %r733, 4;
	add.s64 	%rd93, %rd3, %rd92;
	ld.global.v4.u32 	{%r734, %r735, %r736, %r737}, [%rd93];
	add.s16 	%rs56, %rs50, 24;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 7;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -512;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r738, %rs61;
	shl.b32 	%r739, %r738, 16;
	or.b32  	%r740, %r739, %r189;
	add.s32 	%r741, %r188, %r740;
	shr.s32 	%r742, %r741, 31;
	shr.u32 	%r743, %r742, 7;
	add.s32 	%r744, %r741, %r743;
	shr.s32 	%r745, %r744, 25;
	setp.lt.s32 	%p261, %r741, 0;
	and.b32  	%r746, %r744, -33554432;
	setp.ne.s32 	%p262, %r746, %r741;
	and.pred  	%p263, %p261, %p262;
	selp.u32 	%r747, 1, 0, %p263;
	sub.s32 	%r748, %r747, %r745;
	shl.b32 	%r749, %r748, 25;
	add.s32 	%r750, %r749, %r741;
	mul.wide.s32 	%rd94, %r750, 4;
	add.s64 	%rd95, %rd3, %rd94;
	ld.global.v4.u32 	{%r751, %r752, %r753, %r754}, [%rd95];
	selp.b32 	%r755, %r736, %r734, %p257;
	shfl.sync.bfly.b32	%r756, %r755, 4, 31, -1;
	selp.b32 	%r624, %r734, %r756, %p257;
	selp.b32 	%r629, %r756, %r736, %p257;
	selp.b32 	%r757, %r737, %r735, %p257;
	shfl.sync.bfly.b32	%r758, %r757, 4, 31, -1;
	selp.b32 	%r632, %r735, %r758, %p257;
	selp.b32 	%r637, %r758, %r737, %p257;
	selp.b32 	%r759, %r753, %r751, %p257;
	shfl.sync.bfly.b32	%r760, %r759, 4, 31, -1;
	selp.b32 	%r640, %r751, %r760, %p257;
	selp.b32 	%r645, %r760, %r753, %p257;
	selp.b32 	%r761, %r754, %r752, %p257;
	shfl.sync.bfly.b32	%r762, %r761, 4, 31, -1;
	selp.b32 	%r648, %r752, %r762, %p257;
	selp.b32 	%r653, %r762, %r754, %p257;
	shl.b32 	%r625, %r629, 4;
	mov.u32 	%r623, 252645135;
	// begin inline asm
	lop3.b32 %r655, %r623, %r624, %r625, 202;
	// end inline asm
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r671, %r623, %r628, %r629, 202;
	// end inline asm
	shl.b32 	%r633, %r637, 4;
	// begin inline asm
	lop3.b32 %r663, %r623, %r632, %r633, 202;
	// end inline asm
	shr.u32 	%r636, %r632, 4;
	// begin inline asm
	lop3.b32 %r679, %r623, %r636, %r637, 202;
	// end inline asm
	shl.b32 	%r641, %r645, 4;
	// begin inline asm
	lop3.b32 %r656, %r623, %r640, %r641, 202;
	// end inline asm
	shr.u32 	%r644, %r640, 4;
	// begin inline asm
	lop3.b32 %r672, %r623, %r644, %r645, 202;
	// end inline asm
	shl.b32 	%r649, %r653, 4;
	// begin inline asm
	lop3.b32 %r664, %r623, %r648, %r649, 202;
	// end inline asm
	shr.u32 	%r652, %r648, 4;
	// begin inline asm
	lop3.b32 %r680, %r623, %r652, %r653, 202;
	// end inline asm
	mov.u32 	%r657, 25152;
	// begin inline asm
	prmt.b32 %r687, %r655, %r656, %r657;
	// end inline asm
	mov.u32 	%r661, 29521;
	// begin inline asm
	prmt.b32 %r703, %r655, %r656, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r663, %r664, %r657;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r663, %r664, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r671, %r672, %r657;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r671, %r672, %r661;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r679, %r680, %r657;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r679, %r680, %r661;
	// end inline asm
	mov.u32 	%r713, 21520;
	// begin inline asm
	prmt.b32 %r686, %r687, %r688, %r713;
	// end inline asm
	mov.u32 	%r717, 30258;
	// begin inline asm
	prmt.b32 %r690, %r687, %r688, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r695, %r696, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r695, %r696, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r703, %r704, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r703, %r704, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r711, %r712, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r711, %r712, %r717;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r763, %rs67;
	add.s32 	%r764, %r192, %r763;
	mul.wide.s32 	%rd96, %r764, 4;
	add.s64 	%rd98, %rd82, %rd96;
	st.shared.u32 	[%rd98], %r686;
	add.s32 	%r765, %r764, 128;
	mul.wide.u32 	%rd99, %r765, 4;
	add.s64 	%rd100, %rd82, %rd99;
	st.shared.u32 	[%rd100], %r694;
	add.s32 	%r766, %r764, 64;
	mul.wide.u32 	%rd101, %r766, 4;
	add.s64 	%rd102, %rd82, %rd101;
	st.shared.u32 	[%rd102], %r690;
	add.s32 	%r767, %r764, 192;
	mul.wide.u32 	%rd103, %r767, 4;
	add.s64 	%rd104, %rd82, %rd103;
	st.shared.u32 	[%rd104], %r698;
	add.s32 	%r768, %r764, 32;
	mul.wide.u32 	%rd105, %r768, 4;
	add.s64 	%rd106, %rd82, %rd105;
	st.shared.u32 	[%rd106], %r702;
	add.s32 	%r769, %r764, 160;
	mul.wide.u32 	%rd107, %r769, 4;
	add.s64 	%rd108, %rd82, %rd107;
	st.shared.u32 	[%rd108], %r710;
	add.s32 	%r770, %r764, 96;
	mul.wide.u32 	%rd109, %r770, 4;
	add.s64 	%rd110, %rd82, %rd109;
	st.shared.u32 	[%rd110], %r706;
	add.s32 	%r771, %r764, 224;
	mul.wide.u32 	%rd111, %r771, 4;
	add.s64 	%rd112, %rd82, %rd111;
	st.shared.u32 	[%rd112], %r714;
	bar.sync 	0;
	add.s32 	%r772, %r222, %r193;
	cvt.u16.u32 	%rs68, %r772;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r223, %rs74;
	add.s32 	%r773, %r5, %r223;
	mul.wide.s32 	%rd113, %r773, 4;
	add.s64 	%rd114, %rd82, %rd113;
	ld.shared.u32 	%r224, [%rd114];
	add.s32 	%r774, %r194, %r223;
	mul.wide.s32 	%rd115, %r774, 4;
	add.s64 	%rd116, %rd82, %rd115;
	ld.shared.u32 	%r225, [%rd116];
	add.s32 	%r775, %r195, %r223;
	mul.wide.u32 	%rd117, %r775, 4;
	add.s64 	%rd118, %rd82, %rd117;
	ld.shared.u32 	%r226, [%rd118];
	add.s32 	%r776, %r196, %r223;
	mul.wide.u32 	%rd119, %r776, 4;
	add.s64 	%rd120, %rd82, %rd119;
	ld.shared.u32 	%r227, [%rd120];
	add.s32 	%r777, %r197, %r223;
	mul.wide.u32 	%rd121, %r777, 4;
	add.s64 	%rd122, %rd82, %rd121;
	ld.shared.u32 	%r228, [%rd122];
	add.s32 	%r778, %r198, %r223;
	mul.wide.u32 	%rd123, %r778, 4;
	add.s64 	%rd124, %rd82, %rd123;
	ld.shared.u32 	%r229, [%rd124];
	add.s32 	%r779, %r199, %r223;
	mul.wide.u32 	%rd125, %r779, 4;
	add.s64 	%rd126, %rd82, %rd125;
	ld.shared.u32 	%r230, [%rd126];
	add.s32 	%r780, %r200, %r223;
	mul.wide.u32 	%rd127, %r780, 4;
	add.s64 	%rd128, %rd82, %rd127;
	ld.shared.u32 	%r231, [%rd128];
	add.s32 	%r781, %r201, %r223;
	mul.wide.u32 	%rd129, %r781, 4;
	add.s64 	%rd130, %rd82, %rd129;
	ld.shared.u32 	%r232, [%rd130];
	add.s32 	%r782, %r202, %r223;
	mul.wide.u32 	%rd131, %r782, 4;
	add.s64 	%rd132, %rd82, %rd131;
	ld.shared.u32 	%r233, [%rd132];
	add.s32 	%r783, %r203, %r223;
	mul.wide.s32 	%rd133, %r783, 4;
	add.s64 	%rd134, %rd82, %rd133;
	ld.shared.u32 	%r234, [%rd134];
	bar.sync 	0;
	shfl.sync.idx.b32	%r235, %r182, 0, 31, -1;
	shfl.sync.idx.b32	%r236, %r182, 1, 31, -1;
	shfl.sync.idx.b32	%r237, %r182, 2, 31, -1;
	shfl.sync.idx.b32	%r238, %r182, 3, 31, -1;
	shfl.sync.idx.b32	%r239, %r182, 4, 31, -1;
	shfl.sync.idx.b32	%r240, %r182, 5, 31, -1;
	shfl.sync.idx.b32	%r241, %r182, 6, 31, -1;
	shfl.sync.idx.b32	%r242, %r182, 7, 31, -1;
	shfl.sync.idx.b32	%r243, %r182, 8, 31, -1;
	shfl.sync.idx.b32	%r244, %r182, 9, 31, -1;
	shfl.sync.idx.b32	%r245, %r182, 10, 31, -1;
	shfl.sync.idx.b32	%r246, %r182, 11, 31, -1;
	shfl.sync.idx.b32	%r247, %r182, 12, 31, -1;
	shfl.sync.idx.b32	%r248, %r182, 13, 31, -1;
	shfl.sync.idx.b32	%r249, %r182, 14, 31, -1;
	shfl.sync.idx.b32	%r250, %r182, 15, 31, -1;
	setp.eq.s32 	%p264, %r235, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2309
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r784, %r235, %r223;
	mul.wide.s32 	%rd135, %r784, 4;
	add.s64 	%rd137, %rd82, %rd135;
	st.shared.u32 	[%rd137], %r224;
	setp.eq.s32 	%p265, %r236, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2377
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r785, %r236, %r223;
	mul.wide.s32 	%rd138, %r785, 4;
	add.s64 	%rd140, %rd82, %rd138;
	st.shared.u32 	[%rd140], %r225;
	setp.eq.s32 	%p266, %r237, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2445
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r786, %r237, %r223;
	mul.wide.s32 	%rd141, %r786, 4;
	add.s64 	%rd143, %rd82, %rd141;
	st.shared.u32 	[%rd143], %r226;
	setp.eq.s32 	%p267, %r238, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2513
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r787, %r238, %r223;
	mul.wide.s32 	%rd144, %r787, 4;
	add.s64 	%rd146, %rd82, %rd144;
	st.shared.u32 	[%rd146], %r227;
	setp.eq.s32 	%p268, %r239, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2581
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r788, %r239, %r223;
	mul.wide.s32 	%rd147, %r788, 4;
	add.s64 	%rd149, %rd82, %rd147;
	st.shared.u32 	[%rd149], %r228;
	setp.eq.s32 	%p269, %r240, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2649
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r789, %r240, %r223;
	mul.wide.s32 	%rd150, %r789, 4;
	add.s64 	%rd152, %rd82, %rd150;
	st.shared.u32 	[%rd152], %r229;
	setp.eq.s32 	%p270, %r241, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2717
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r790, %r241, %r223;
	mul.wide.s32 	%rd153, %r790, 4;
	add.s64 	%rd155, %rd82, %rd153;
	st.shared.u32 	[%rd155], %r230;
	setp.eq.s32 	%p271, %r242, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2785
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r791, %r242, %r223;
	mul.wide.s32 	%rd156, %r791, 4;
	add.s64 	%rd158, %rd82, %rd156;
	st.shared.u32 	[%rd158], %r231;
	setp.eq.s32 	%p272, %r243, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2853
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r792, %r243, %r223;
	mul.wide.s32 	%rd159, %r792, 4;
	add.s64 	%rd161, %rd82, %rd159;
	st.shared.u32 	[%rd161], %r232;
	setp.eq.s32 	%p273, %r244, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2921
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r793, %r244, %r223;
	mul.wide.s32 	%rd162, %r793, 4;
	add.s64 	%rd164, %rd82, %rd162;
	st.shared.u32 	[%rd164], %r233;
	setp.eq.s32 	%p274, %r245, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem2990
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p275, %r4, 3;
	selp.b32 	%r794, 0, %r234, %p275;
	add.s32 	%r795, %r245, %r223;
	mul.wide.s32 	%rd165, %r795, 4;
	add.s64 	%rd167, %rd82, %rd165;
	st.shared.u32 	[%rd167], %r794;
	setp.eq.s32 	%p276, %r246, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3058
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r796, %r246, %r223;
	mul.wide.s32 	%rd168, %r796, 4;
	add.s64 	%rd170, %rd82, %rd168;
	mov.u32 	%r797, 0;
	st.shared.u32 	[%rd170], %r797;
	setp.eq.s32 	%p277, %r247, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3125
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r798, %r247, %r223;
	mul.wide.s32 	%rd171, %r798, 4;
	add.s64 	%rd173, %rd82, %rd171;
	st.shared.u32 	[%rd173], %r797;
	setp.eq.s32 	%p278, %r248, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3192
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r800, %r248, %r223;
	mul.wide.s32 	%rd174, %r800, 4;
	add.s64 	%rd176, %rd82, %rd174;
	st.shared.u32 	[%rd176], %r797;
	setp.eq.s32 	%p279, %r249, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3259
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r802, %r249, %r223;
	mul.wide.s32 	%rd177, %r802, 4;
	add.s64 	%rd179, %rd82, %rd177;
	st.shared.u32 	[%rd179], %r797;
	setp.eq.s32 	%p280, %r250, 999999999;
	@%p280 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3326
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p281, %r183, 3;
	add.s32 	%r805, %r250, %r223;
	mul.wide.s32 	%rd180, %r805, 4;
	add.s64 	%rd182, %rd82, %rd180;
	st.shared.u32 	[%rd182], %r797;
	bar.sync 	0;
	mov.u32 	%r90, %r797;
	mov.u32 	%r91, %r797;
	mov.u32 	%r92, %r797;
	mov.u32 	%r93, %r797;
	mov.u32 	%r94, %r797;
	mov.u32 	%r95, %r797;
	mov.u32 	%r96, %r797;
	mov.u32 	%r97, %r797;
	mov.u32 	%r98, %r797;
	mov.u32 	%r99, %r797;
	mov.u32 	%r100, %r797;
	mov.u32 	%r101, %r797;
	mov.u32 	%r102, %r797;
	mov.u32 	%r103, %r797;
	mov.u32 	%r104, %r797;
	mov.u32 	%r105, %r797;
	@%p281 bra 	$L__BB0_162;
// %bb.216:                             // %oksrem3395
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r251, %r222, %r204;
	ld.shared.u32 	%r90, [%rd24];
	ld.shared.u32 	%r91, [%rd25];
	ld.shared.u32 	%r92, [%rd26+12];
	ld.shared.u32 	%r93, [%rd27+12];
	ld.shared.u32 	%r94, [%rd26+24];
	ld.shared.u32 	%r95, [%rd27+24];
	ld.shared.u32 	%r96, [%rd26+36];
	ld.shared.u32 	%r97, [%rd27+36];
	add.s32 	%r806, %r251, 12;
	mul.hi.u32 	%r807, %r806, -1431655765;
	shr.u32 	%r808, %r807, 4;
	mul.lo.s32 	%r809, %r808, 24;
	sub.s32 	%r810, %r806, %r809;
	add.s32 	%r811, %r205, %r810;
	mul.wide.u32 	%rd183, %r811, 4;
	add.s64 	%rd185, %rd82, %rd183;
	ld.shared.u32 	%r98, [%rd185];
	add.s32 	%r812, %r206, %r810;
	mul.wide.u32 	%rd186, %r812, 4;
	add.s64 	%rd187, %rd82, %rd186;
	ld.shared.u32 	%r99, [%rd187];
	ld.shared.u32 	%r100, [%rd26+60];
	ld.shared.u32 	%r101, [%rd27+60];
	cvt.u16.u32 	%rs75, %r251;
	add.s16 	%rs76, %rs75, 18;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r813, %rs82;
	add.s32 	%r814, %r205, %r813;
	mul.wide.s32 	%rd188, %r814, 4;
	add.s64 	%rd189, %rd82, %rd188;
	ld.shared.u32 	%r102, [%rd189];
	add.s32 	%r815, %r206, %r813;
	mul.wide.u32 	%rd190, %r815, 4;
	add.s64 	%rd191, %rd82, %rd190;
	ld.shared.u32 	%r103, [%rd191];
	add.s16 	%rs83, %rs75, 21;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r816, %rs89;
	add.s32 	%r817, %r205, %r816;
	mul.wide.s32 	%rd192, %r817, 4;
	add.s64 	%rd193, %rd82, %rd192;
	ld.shared.u32 	%r104, [%rd193];
	add.s32 	%r818, %r206, %r816;
	mul.wide.u32 	%rd194, %r818, 4;
	add.s64 	%rd195, %rd82, %rd194;
	ld.shared.u32 	%r105, [%rd195];
$L__BB0_162:                            // %L10556
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r820, %r110, 786432;
	add.s32 	%r109, %r217, %r820;
	add.s32 	%r3053, %r221, %r820;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r797;
$L__BB0_163:                            // %L10574
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r3057, %r3053;
	setp.eq.s32 	%p282, %r111, 0;
	selp.b32 	%r1213, %r90, 0, %p282;
	setp.eq.s32 	%p283, %r111, 6;
	selp.b32 	%r1214, %r94, %r1213, %p283;
	setp.eq.s32 	%p284, %r111, 12;
	selp.b32 	%r1215, %r98, %r1214, %p284;
	setp.eq.s32 	%p285, %r111, 18;
	selp.b32 	%r1216, %r102, %r1215, %p285;
	selp.b32 	%r1217, %r91, 0, %p282;
	selp.b32 	%r1218, %r95, %r1217, %p283;
	selp.b32 	%r1219, %r99, %r1218, %p284;
	selp.b32 	%r1220, %r103, %r1219, %p285;
	selp.b32 	%r1221, %r92, 0, %p282;
	selp.b32 	%r1222, %r96, %r1221, %p283;
	selp.b32 	%r1223, %r100, %r1222, %p284;
	selp.b32 	%r1224, %r104, %r1223, %p285;
	selp.b32 	%r1225, %r93, 0, %p282;
	selp.b32 	%r1226, %r97, %r1225, %p283;
	selp.b32 	%r1227, %r101, %r1226, %p284;
	selp.b32 	%r1228, %r105, %r1227, %p285;
	mov.u16 	%rs127, 25600;
	// begin inline asm
	mov.b32 %r826, {%rs127, %rs127};
	// end inline asm
	mov.u16 	%rs129, 21504;
	// begin inline asm
	mov.b32 %r837, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r825, %r1216, -2004318072;
	mov.u32 	%r962, 983055;
	// begin inline asm
	lop3.b32 %r823, %r962, %r825, %r826, 202;
	// end inline asm
	mov.u16 	%rs133, 18432;
	// begin inline asm
	mov.b32 %r827, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r828, %r826, %r827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r831, %r823, %r828;
	// end inline asm
	mov.u32 	%r973, 15728880;
	// begin inline asm
	lop3.b32 %r834, %r973, %r825, %r837, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r839, %r837, %r838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r842, %r834, %r839;
	// end inline asm
	// begin inline asm
	mov.b32 %r872, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r871, %r1220, -2004318072;
	// begin inline asm
	lop3.b32 %r869, %r962, %r871, %r872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r873, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r874, %r872, %r873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r877, %r869, %r874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r880, %r973, %r871, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r917, %r1224, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r962, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r973, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r963, %r1228, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r962, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r973, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r831;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r877;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1008, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r842;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1011, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1014, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1017, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r969;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1020, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1023, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r980;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1026, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1029, %r1030}, {%r320, %r323}, {%r1005}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1036, %r1037}, {%r320, %r323}, {%r1008}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1043, %r1044}, {%r320, %r323}, {%r1011}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1050, %r1051}, {%r320, %r323}, {%r1014}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1057, %r1058}, {%r320, %r323}, {%r1017}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1064, %r1065}, {%r320, %r323}, {%r1020}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1071, %r1072}, {%r320, %r323}, {%r1023}, {%r797, %r797};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1078, %r1079}, {%r320, %r323}, {%r1026}, {%r797, %r797};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_164;
$L__BB0_217:                            // %pass4742
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1085, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r372, %r1029, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r372, %r1036, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r372, %r1043, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r372, %r1050, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r372, %r1057, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r372, %r1064, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1139, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r1139, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r372, %r1071, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1148, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r1148, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r372, %r1078, %r1150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r375, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r372, %r1030, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r375, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r372, %r1037, %r1164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r375, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r372, %r1044, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r375, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r372, %r1051, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r375, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r372, %r1058, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r375, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r372, %r1065, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r375, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r372, %r1072, %r1199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r375, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r372, %r1079, %r1206;
	// end inline asm
	setp.gt.u32 	%p286, %r298, 11;
	mov.u32 	%r1299, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1302, %r1303}, {%r416, %r419}, {%r1090, %r1160}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1310, %r1311}, {%r416, %r419}, {%r1099, %r1167}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1318, %r1319}, {%r416, %r419}, {%r1108, %r1174}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1326, %r1327}, {%r416, %r419}, {%r1117, %r1181}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1334, %r1335}, {%r416, %r419}, {%r1126, %r1188}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1342, %r1343}, {%r416, %r419}, {%r1135, %r1195}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1350, %r1351}, {%r416, %r419}, {%r1144, %r1202}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1358, %r1359}, {%r416, %r419}, {%r1153, %r1209}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r268, %r1302, %r1303, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r269, %r1302, %r1303, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r270, %r1310, %r1311, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r271, %r1310, %r1311, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r1318, %r1319, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r1318, %r1319, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r1326, %r1327, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r1326, %r1327, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r1334, %r1335, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r1334, %r1335, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r1342, %r1343, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r1342, %r1343, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r1350, %r1351, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r1350, %r1351, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1358, %r1359, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1358, %r1359, %r717;
	// end inline asm
	add.s16 	%rs138, %rs8, %rs3;
	add.s16 	%rs139, %rs138, -5;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	add.s16 	%rs142, %rs140, %rs141;
	mul.lo.s16 	%rs143, %rs142, 6;
	sub.s16 	%rs144, %rs139, %rs143;
	mul.wide.s16 	%r1365, %rs144, 16;
	add.s32 	%r1366, %r207, %r1365;
	mul.wide.s32 	%rd198, %r1366, 4;
	add.s64 	%rd28, %rd82, %rd198;
	st.shared.u32 	[%rd28], %r268;
	add.s32 	%r1367, %r208, %r1365;
	mul.wide.u32 	%rd200, %r1367, 4;
	add.s64 	%rd29, %rd82, %rd200;
	st.shared.u32 	[%rd29], %r269;
	add.s32 	%r1368, %r209, %r1365;
	mul.wide.s32 	%rd201, %r1368, 4;
	add.s64 	%rd30, %rd82, %rd201;
	st.shared.u32 	[%rd30], %r270;
	add.s32 	%r1369, %r210, %r1365;
	mul.wide.u32 	%rd202, %r1369, 4;
	add.s64 	%rd31, %rd82, %rd202;
	st.shared.u32 	[%rd31], %r271;
	add.s32 	%r1370, %r211, %r1365;
	mul.wide.s32 	%rd203, %r1370, 4;
	add.s64 	%rd32, %rd82, %rd203;
	st.shared.u32 	[%rd32], %r272;
	add.s32 	%r1371, %r212, %r1365;
	mul.wide.u32 	%rd204, %r1371, 4;
	add.s64 	%rd33, %rd82, %rd204;
	st.shared.u32 	[%rd33], %r273;
	add.s32 	%r1372, %r213, %r1365;
	mul.wide.s32 	%rd205, %r1372, 4;
	add.s64 	%rd34, %rd82, %rd205;
	st.shared.u32 	[%rd34], %r274;
	add.s32 	%r1373, %r214, %r1365;
	mul.wide.u32 	%rd206, %r1373, 4;
	add.s64 	%rd35, %rd82, %rd206;
	st.shared.u32 	[%rd35], %r275;
	add.s16 	%rs145, %rs138, -2;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	add.s16 	%rs148, %rs146, %rs147;
	mul.lo.s16 	%rs149, %rs148, 6;
	sub.s16 	%rs150, %rs145, %rs149;
	mul.wide.s16 	%r1374, %rs150, 16;
	add.s32 	%r1375, %r207, %r1374;
	mul.wide.s32 	%rd207, %r1375, 4;
	add.s64 	%rd36, %rd82, %rd207;
	st.shared.u32 	[%rd36], %r276;
	add.s32 	%r1376, %r208, %r1374;
	mul.wide.u32 	%rd208, %r1376, 4;
	add.s64 	%rd37, %rd82, %rd208;
	st.shared.u32 	[%rd37], %r277;
	add.s32 	%r1377, %r209, %r1374;
	mul.wide.s32 	%rd209, %r1377, 4;
	add.s64 	%rd38, %rd82, %rd209;
	st.shared.u32 	[%rd38], %r278;
	add.s32 	%r1378, %r210, %r1374;
	mul.wide.u32 	%rd210, %r1378, 4;
	add.s64 	%rd39, %rd82, %rd210;
	st.shared.u32 	[%rd39], %r279;
	add.s32 	%r1379, %r211, %r1374;
	mul.wide.s32 	%rd211, %r1379, 4;
	add.s64 	%rd40, %rd82, %rd211;
	st.shared.u32 	[%rd40], %r280;
	add.s32 	%r1380, %r212, %r1374;
	mul.wide.u32 	%rd212, %r1380, 4;
	add.s64 	%rd41, %rd82, %rd212;
	st.shared.u32 	[%rd41], %r281;
	add.s32 	%r1381, %r213, %r1374;
	mul.wide.s32 	%rd213, %r1381, 4;
	add.s64 	%rd42, %rd82, %rd213;
	st.shared.u32 	[%rd42], %r282;
	add.s32 	%r1382, %r214, %r1374;
	mul.wide.u32 	%rd214, %r1382, 4;
	add.s64 	%rd43, %rd82, %rd214;
	st.shared.u32 	[%rd43], %r283;
	@%p286 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7065
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r268;
	st.shared.u32 	[%rd29], %r269;
	st.shared.u32 	[%rd30], %r270;
	st.shared.u32 	[%rd31], %r271;
	st.shared.u32 	[%rd32], %r272;
	st.shared.u32 	[%rd33], %r273;
	st.shared.u32 	[%rd34], %r274;
	st.shared.u32 	[%rd35], %r275;
	st.shared.u32 	[%rd36], %r276;
	st.shared.u32 	[%rd37], %r277;
	st.shared.u32 	[%rd38], %r278;
	st.shared.u32 	[%rd39], %r279;
	st.shared.u32 	[%rd40], %r280;
	st.shared.u32 	[%rd41], %r281;
	st.shared.u32 	[%rd42], %r282;
	st.shared.u32 	[%rd43], %r283;
$L__BB0_219:                            // %L19961
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s16 	%rs151, %rs3, -5;
	mul.hi.s16 	%rs152, %rs151, 10923;
	shr.u16 	%rs153, %rs152, 15;
	add.s16 	%rs154, %rs152, %rs153;
	mul.lo.s16 	%rs155, %rs154, 6;
	sub.s16 	%rs156, %rs151, %rs155;
	mul.wide.s16 	%r1429, %rs156, 16;
	add.s32 	%r1430, %r215, %r1429;
	mul.wide.s32 	%rd215, %r1430, 4;
	add.s64 	%rd217, %rd82, %rd215;
	ld.shared.u32 	%r1387, [%rd217];
	add.s32 	%r1431, %r216, %r1429;
	mul.wide.s32 	%rd218, %r1431, 4;
	add.s64 	%rd219, %rd82, %rd218;
	ld.shared.u32 	%r1394, [%rd219];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1383, %r1384}, {%r428, %r431}, {%r1387}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1390, %r1391}, {%r428, %r431}, {%r1394}, {%r1299, %r1299};
	// end inline asm
	@%p287 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_220;
$L__BB0_165:                            // %pass9511
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1397, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1399, %r1397, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1402, %r466, %r1383, %r1399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1406, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1408, %r1406, %r1391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1411, %r466, %r1390, %r1408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r469, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r466, %r1384, %r1415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1422, %r469, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r466, %r1391, %r1422;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1451, %r1454}, {%r512, %r515}, {%r1402, %r1418}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1458, %r1462}, {%r512, %r515}, {%r1411, %r1425}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r1451, %r1451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r1454, %r1454, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r1458, %r1458, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r1462, %r1462, %r1457;
	// end inline asm
	mov.u32 	%r1881, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r1465, %r1881, %r1461, %r1299;
	// end inline asm
	add.s32 	%r1884, %r88, %r111;
	add.s32 	%r1885, %r1884, 1;
	mul.hi.u32 	%r1886, %r1885, -1431655765;
	shr.u32 	%r1887, %r1886, 2;
	mul.lo.s32 	%r1888, %r1887, 6;
	sub.s32 	%r1889, %r1885, %r1888;
	shl.b32 	%r1890, %r1889, 4;
	add.s32 	%r1891, %r215, %r1890;
	mul.wide.u32 	%rd222, %r1891, 4;
	add.s64 	%rd224, %rd82, %rd222;
	ld.shared.u32 	%r1473, [%rd224];
	add.s32 	%r1892, %r216, %r1890;
	mul.wide.u32 	%rd225, %r1892, 4;
	add.s64 	%rd226, %rd82, %rd225;
	ld.shared.u32 	%r1480, [%rd226];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1490, %r1487}, {%r428, %r431}, {%r1473}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1499, %r1496}, {%r428, %r431}, {%r1480}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1483, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r1483, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r466, %r1490, %r1485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1492, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1494, %r1492, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1497, %r466, %r1499, %r1494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r469, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r466, %r1487, %r1501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1508, %r469, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1511, %r466, %r1496, %r1508;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1534, %r1537}, {%r512, %r515}, {%r1488, %r1504}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1541, %r1545}, {%r512, %r515}, {%r1497, %r1511}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r1534, %r1534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r1537, %r1537, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r1541, %r1541, %r1536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1544, %r1545, %r1545, %r1540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r1881, %r1544, %r1465;
	// end inline asm
	add.s16 	%rs157, %rs3, -3;
	mul.hi.s16 	%rs158, %rs157, 10923;
	shr.u16 	%rs159, %rs158, 15;
	add.s16 	%rs160, %rs158, %rs159;
	mul.lo.s16 	%rs161, %rs160, 6;
	sub.s16 	%rs162, %rs157, %rs161;
	mul.wide.s16 	%r1893, %rs162, 16;
	add.s32 	%r1894, %r215, %r1893;
	mul.wide.s32 	%rd227, %r1894, 4;
	add.s64 	%rd228, %rd82, %rd227;
	ld.shared.u32 	%r1556, [%rd228];
	add.s32 	%r1895, %r216, %r1893;
	mul.wide.s32 	%rd229, %r1895, 4;
	add.s64 	%rd230, %rd82, %rd229;
	ld.shared.u32 	%r1563, [%rd230];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1573, %r1570}, {%r428, %r431}, {%r1556}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1582, %r1579}, {%r428, %r431}, {%r1563}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1566, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1568, %r1566, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r466, %r1573, %r1568;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1575, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1577, %r1575, %r1579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r466, %r1582, %r1577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r469, %r1573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r466, %r1570, %r1584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1591, %r469, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1594, %r466, %r1579, %r1591;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1617, %r1620}, {%r512, %r515}, {%r1571, %r1587}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1624, %r1628}, {%r512, %r515}, {%r1580, %r1594}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1617, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r1628, %r1628, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r1881, %r1627, %r1548;
	// end inline asm
	cvt.u64.u32 	%rd231, %r109;
	add.s64 	%rd232, %rd231, %rd23;
	mul.hi.s64 	%rd233, %rd232, 3074457345618258603;
	shr.u64 	%rd234, %rd233, 63;
	shr.s64 	%rd235, %rd233, 27;
	add.s64 	%rd236, %rd235, %rd234;
	setp.lt.s64 	%p288, %rd232, 0;
	mul.lo.s64 	%rd237, %rd236, 805306368;
	setp.ne.s64 	%p289, %rd237, %rd232;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd238, -1, 0, %p290;
	add.s64 	%rd239, %rd236, %rd238;
	mul.lo.s64 	%rd240, %rd239, -805306368;
	add.s64 	%rd241, %rd240, %rd232;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r1631;
	add.s32 	%r1896, %r110, 1;
	add.s16 	%rs163, %rs3, -2;
	mul.hi.s16 	%rs164, %rs163, 10923;
	shr.u16 	%rs165, %rs164, 15;
	add.s16 	%rs166, %rs164, %rs165;
	mul.lo.s16 	%rs167, %rs166, 6;
	sub.s16 	%rs168, %rs163, %rs167;
	mul.wide.s16 	%r1897, %rs168, 16;
	add.s32 	%r1898, %r215, %r1897;
	mul.wide.s32 	%rd244, %r1898, 4;
	add.s64 	%rd245, %rd82, %rd244;
	ld.shared.u32 	%r1639, [%rd245];
	add.s32 	%r1899, %r216, %r1897;
	mul.wide.s32 	%rd246, %r1899, 4;
	add.s64 	%rd247, %rd82, %rd246;
	ld.shared.u32 	%r1646, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1656, %r1653}, {%r428, %r431}, {%r1639}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1665, %r1662}, {%r428, %r431}, {%r1646}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1649, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1649, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r466, %r1656, %r1651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1660, %r1658, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1663, %r466, %r1665, %r1660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1667, %r469, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r466, %r1653, %r1667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1674, %r469, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1677, %r466, %r1662, %r1674;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1700, %r1703}, {%r512, %r515}, {%r1654, %r1670}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1707, %r1711}, {%r512, %r515}, {%r1663, %r1677}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1700, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1703, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r1707, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r1711, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r1881, %r1710, %r1299;
	// end inline asm
	add.s16 	%rs169, %rs3, -1;
	mul.hi.s16 	%rs170, %rs169, 10923;
	shr.u16 	%rs171, %rs170, 15;
	add.s16 	%rs172, %rs170, %rs171;
	mul.lo.s16 	%rs173, %rs172, 6;
	sub.s16 	%rs174, %rs169, %rs173;
	mul.wide.s16 	%r1900, %rs174, 16;
	add.s32 	%r1901, %r215, %r1900;
	mul.wide.s32 	%rd248, %r1901, 4;
	add.s64 	%rd249, %rd82, %rd248;
	ld.shared.u32 	%r1722, [%rd249];
	add.s32 	%r1902, %r216, %r1900;
	mul.wide.s32 	%rd250, %r1902, 4;
	add.s64 	%rd251, %rd82, %rd250;
	ld.shared.u32 	%r1729, [%rd251];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1739, %r1736}, {%r428, %r431}, {%r1722}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1748, %r1745}, {%r428, %r431}, {%r1729}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r1732, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r466, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1741, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r1741, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r466, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r469, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r466, %r1736, %r1750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r469, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r466, %r1745, %r1757;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1783, %r1786}, {%r512, %r515}, {%r1737, %r1753}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1790, %r1794}, {%r512, %r515}, {%r1746, %r1760}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r1783, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1794, %r1794, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1881, %r1793, %r1714;
	// end inline asm
	mul.hi.s16 	%rs175, %rs3, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs3, %rs178;
	mul.wide.s16 	%r1903, %rs179, 16;
	add.s32 	%r1904, %r215, %r1903;
	mul.wide.s32 	%rd252, %r1904, 4;
	add.s64 	%rd253, %rd82, %rd252;
	ld.shared.u32 	%r1805, [%rd253];
	add.s32 	%r1905, %r216, %r1903;
	mul.wide.s32 	%rd254, %r1905, 4;
	add.s64 	%rd255, %rd82, %rd254;
	ld.shared.u32 	%r1812, [%rd255];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1822, %r1819}, {%r428, %r431}, {%r1805}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1831, %r1828}, {%r428, %r431}, {%r1812}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1815, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1815, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r466, %r1822, %r1817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1824, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r1824, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r466, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r469, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r466, %r1819, %r1833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1840, %r469, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r466, %r1828, %r1840;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1866, %r1869}, {%r512, %r515}, {%r1820, %r1836}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1873, %r1877}, {%r512, %r515}, {%r1829, %r1843}, {%r1299, %r1299}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r1866, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1876, %r1797;
	// end inline asm
	and.b32  	%r1906, %r1896, 1023;
	mad.lo.s32 	%r1907, %r1906, 786432, %r217;
	cvt.u64.u32 	%rd256, %r1907;
	add.s64 	%rd257, %rd256, %rd23;
	mul.hi.s64 	%rd258, %rd257, 3074457345618258603;
	shr.u64 	%rd259, %rd258, 63;
	shr.s64 	%rd260, %rd258, 27;
	add.s64 	%rd261, %rd260, %rd259;
	setp.lt.s64 	%p291, %rd257, 0;
	mul.lo.s64 	%rd262, %rd261, 805306368;
	setp.ne.s64 	%p292, %rd262, %rd257;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd263, -1, 0, %p293;
	add.s64 	%rd264, %rd261, %rd263;
	mul.lo.s64 	%rd265, %rd264, -805306368;
	add.s64 	%rd266, %rd265, %rd257;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd268, %rd4, %rd267;
	st.global.u32 	[%rd268], %r1880;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s32 	%r109, %r109, 1572864;
	add.s16 	%rs3, %rs3, 6;
	setp.eq.s32 	%p294, %r111, 24;
	add.s32 	%r3053, %r3057, 1572864;
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L25662.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs274, %rs1;
	mov.u32 	%r3059, %r1299;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L35049
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs242, %rs274, -5;
	mul.hi.s16 	%rs243, %rs242, 10923;
	shr.u16 	%rs244, %rs243, 15;
	add.s16 	%rs245, %rs243, %rs244;
	mul.lo.s16 	%rs246, %rs245, 6;
	sub.s16 	%rs247, %rs242, %rs246;
	mul.wide.s16 	%r2973, %rs247, 16;
	add.s32 	%r2974, %r215, %r2973;
	mul.wide.s32 	%rd286, %r2974, 4;
	add.s64 	%rd288, %rd82, %rd286;
	ld.shared.u32 	%r2479, [%rd288];
	add.s32 	%r2975, %r216, %r2973;
	mul.wide.s32 	%rd289, %r2975, 4;
	add.s64 	%rd290, %rd82, %rd289;
	ld.shared.u32 	%r2486, [%rd290];
	mov.u32 	%r2480, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2496, %r2493}, {%r428, %r431}, {%r2479}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2505, %r2502}, {%r428, %r431}, {%r2486}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2489, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2491, %r2489, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2494, %r466, %r2496, %r2491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2498, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r2498, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r466, %r2505, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r469, %r2496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r466, %r2493, %r2507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r469, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r466, %r2502, %r2514;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2540, %r2543}, {%r512, %r515}, {%r2494, %r2510}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2547, %r2551}, {%r512, %r515}, {%r2503, %r2517}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r2540, %r2540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r2543, %r2543, %r2539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r2547, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r2551, %r2551, %r2546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r1881, %r2550, %r2480;
	// end inline asm
	add.s32 	%r2976, %r88, %r3059;
	add.s32 	%r2977, %r2976, 25;
	mul.hi.u32 	%r2978, %r2977, -1431655765;
	shr.u32 	%r2979, %r2978, 2;
	mul.lo.s32 	%r2980, %r2979, 6;
	sub.s32 	%r2981, %r2977, %r2980;
	shl.b32 	%r2982, %r2981, 4;
	add.s32 	%r2983, %r215, %r2982;
	mul.wide.u32 	%rd291, %r2983, 4;
	add.s64 	%rd292, %rd82, %rd291;
	ld.shared.u32 	%r2562, [%rd292];
	add.s32 	%r2984, %r216, %r2982;
	mul.wide.u32 	%rd293, %r2984, 4;
	add.s64 	%rd294, %rd82, %rd293;
	ld.shared.u32 	%r2569, [%rd294];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2579, %r2576}, {%r428, %r431}, {%r2562}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2588, %r2585}, {%r428, %r431}, {%r2569}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2572, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2574, %r2572, %r2576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2577, %r466, %r2579, %r2574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2581, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r2581, %r2585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r466, %r2588, %r2583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2590, %r469, %r2579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2593, %r466, %r2576, %r2590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2597, %r469, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2600, %r466, %r2585, %r2597;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2626}, {%r512, %r515}, {%r2577, %r2593}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2634}, {%r512, %r515}, {%r2586, %r2600}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2622, %r2623, %r2623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2625, %r2626, %r2626, %r2622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2629, %r2630, %r2630, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r2634, %r2634, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2637, %r1881, %r2633, %r2554;
	// end inline asm
	add.s16 	%rs248, %rs274, -3;
	mul.hi.s16 	%rs249, %rs248, 10923;
	shr.u16 	%rs250, %rs249, 15;
	add.s16 	%rs251, %rs249, %rs250;
	mul.lo.s16 	%rs252, %rs251, 6;
	sub.s16 	%rs253, %rs248, %rs252;
	mul.wide.s16 	%r2985, %rs253, 16;
	add.s32 	%r2986, %r215, %r2985;
	mul.wide.s32 	%rd295, %r2986, 4;
	add.s64 	%rd296, %rd82, %rd295;
	ld.shared.u32 	%r2645, [%rd296];
	add.s32 	%r2987, %r216, %r2985;
	mul.wide.s32 	%rd297, %r2987, 4;
	add.s64 	%rd298, %rd82, %rd297;
	ld.shared.u32 	%r2652, [%rd298];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2662, %r2659}, {%r428, %r431}, {%r2645}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2671, %r2668}, {%r428, %r431}, {%r2652}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2660, %r466, %r2662, %r2657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r466, %r2671, %r2666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r469, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r466, %r2659, %r2673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r469, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r466, %r2668, %r2680;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2706, %r2709}, {%r512, %r515}, {%r2660, %r2676}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2713, %r2717}, {%r512, %r515}, {%r2669, %r2683}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2706, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r2709, %r2709, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r2713, %r2713, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r2717, %r2717, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r1881, %r2716, %r2637;
	// end inline asm
	cvt.u64.u32 	%rd299, %r3057;
	add.s64 	%rd300, %rd299, %rd23;
	mul.hi.s64 	%rd301, %rd300, 3074457345618258603;
	shr.u64 	%rd302, %rd301, 63;
	shr.s64 	%rd303, %rd301, 27;
	add.s64 	%rd304, %rd303, %rd302;
	setp.lt.s64 	%p300, %rd300, 0;
	mul.lo.s64 	%rd305, %rd304, 805306368;
	setp.ne.s64 	%p301, %rd305, %rd300;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd306, -1, 0, %p302;
	add.s64 	%rd307, %rd304, %rd306;
	mul.lo.s64 	%rd308, %rd307, -805306368;
	add.s64 	%rd309, %rd308, %rd300;
	shl.b64 	%rd310, %rd309, 2;
	add.s64 	%rd311, %rd4, %rd310;
	st.global.u32 	[%rd311], %r2720;
	add.s32 	%r2988, %r110, 1;
	add.s16 	%rs254, %rs274, -2;
	mul.hi.s16 	%rs255, %rs254, 10923;
	shr.u16 	%rs256, %rs255, 15;
	add.s16 	%rs257, %rs255, %rs256;
	mul.lo.s16 	%rs258, %rs257, 6;
	sub.s16 	%rs259, %rs254, %rs258;
	mul.wide.s16 	%r2989, %rs259, 16;
	add.s32 	%r2990, %r215, %r2989;
	mul.wide.s32 	%rd312, %r2990, 4;
	add.s64 	%rd313, %rd82, %rd312;
	ld.shared.u32 	%r2728, [%rd313];
	add.s32 	%r2991, %r216, %r2989;
	mul.wide.s32 	%rd314, %r2991, 4;
	add.s64 	%rd315, %rd82, %rd314;
	ld.shared.u32 	%r2735, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2745, %r2742}, {%r428, %r431}, {%r2728}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r428, %r431}, {%r2735}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2738, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r2738, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r466, %r2745, %r2740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r466, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r469, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r466, %r2742, %r2756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r469, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r466, %r2751, %r2763;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2789, %r2792}, {%r512, %r515}, {%r2743, %r2759}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2796, %r2800}, {%r512, %r515}, {%r2752, %r2766}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r2789, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r2792, %r2792, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r2796, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r2800, %r2800, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r1881, %r2799, %r2480;
	// end inline asm
	add.s16 	%rs260, %rs274, -1;
	mul.hi.s16 	%rs261, %rs260, 10923;
	shr.u16 	%rs262, %rs261, 15;
	add.s16 	%rs263, %rs261, %rs262;
	mul.lo.s16 	%rs264, %rs263, 6;
	sub.s16 	%rs265, %rs260, %rs264;
	mul.wide.s16 	%r2992, %rs265, 16;
	add.s32 	%r2993, %r215, %r2992;
	mul.wide.s32 	%rd316, %r2993, 4;
	add.s64 	%rd317, %rd82, %rd316;
	ld.shared.u32 	%r2811, [%rd317];
	add.s32 	%r2994, %r216, %r2992;
	mul.wide.s32 	%rd318, %r2994, 4;
	add.s64 	%rd319, %rd82, %rd318;
	ld.shared.u32 	%r2818, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2828, %r2825}, {%r428, %r431}, {%r2811}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2837, %r2834}, {%r428, %r431}, {%r2818}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2821, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r2821, %r2825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r466, %r2828, %r2823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2830, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2832, %r2830, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r466, %r2837, %r2832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2839, %r469, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r466, %r2825, %r2839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2846, %r469, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r466, %r2834, %r2846;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2872, %r2875}, {%r512, %r515}, {%r2826, %r2842}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2879, %r2883}, {%r512, %r515}, {%r2835, %r2849}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r2872, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r2875, %r2875, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r2879, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r2883, %r2883, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r1881, %r2882, %r2803;
	// end inline asm
	mul.hi.s16 	%rs266, %rs274, 10923;
	shr.u16 	%rs267, %rs266, 15;
	add.s16 	%rs268, %rs266, %rs267;
	mul.lo.s16 	%rs269, %rs268, 6;
	sub.s16 	%rs270, %rs274, %rs269;
	mul.wide.s16 	%r2995, %rs270, 16;
	add.s32 	%r2996, %r215, %r2995;
	mul.wide.s32 	%rd320, %r2996, 4;
	add.s64 	%rd321, %rd82, %rd320;
	ld.shared.u32 	%r2894, [%rd321];
	add.s32 	%r2997, %r216, %r2995;
	mul.wide.s32 	%rd322, %r2997, 4;
	add.s64 	%rd323, %rd82, %rd322;
	ld.shared.u32 	%r2901, [%rd323];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2911, %r2908}, {%r428, %r431}, {%r2894}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2920, %r2917}, {%r428, %r431}, {%r2901}, {%r2480, %r2480};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2904, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r2904, %r2908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r466, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2913, %r469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2915, %r2913, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r466, %r2920, %r2915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r469, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r466, %r2908, %r2922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r469, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r466, %r2917, %r2929;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2955, %r2958}, {%r512, %r515}, {%r2909, %r2925}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2966}, {%r512, %r515}, {%r2918, %r2932}, {%r2480, %r2480}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r2955, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r2958, %r2958, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r2962, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r2966, %r2966, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r1881, %r2965, %r2886;
	// end inline asm
	and.b32  	%r2998, %r2988, 1023;
	mad.lo.s32 	%r2999, %r2998, 786432, %r217;
	cvt.u64.u32 	%rd324, %r2999;
	add.s64 	%rd325, %rd324, %rd23;
	mul.hi.s64 	%rd326, %rd325, 3074457345618258603;
	shr.u64 	%rd327, %rd326, 63;
	shr.s64 	%rd328, %rd326, 27;
	add.s64 	%rd329, %rd328, %rd327;
	setp.lt.s64 	%p303, %rd325, 0;
	mul.lo.s64 	%rd330, %rd329, 805306368;
	setp.ne.s64 	%p304, %rd330, %rd325;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd331, -1, 0, %p305;
	add.s64 	%rd332, %rd329, %rd331;
	mul.lo.s64 	%rd333, %rd332, -805306368;
	add.s64 	%rd334, %rd333, %rd325;
	shl.b64 	%rd335, %rd334, 2;
	add.s64 	%rd336, %rd4, %rd335;
	st.global.u32 	[%rd336], %r2969;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r3059, %r3059, 6;
	add.s32 	%r3057, %r3057, 1572864;
	add.s16 	%rs274, %rs274, 6;
	setp.ne.s32 	%p306, %r3059, 24;
	@%p306 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_169;
$L__BB0_167:                            // %L25662
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p295, %r298, 12;
	setp.eq.s32 	%p296, %r3059, 0;
	selp.b32 	%r2437, %r90, 0, %p296;
	setp.eq.s32 	%p297, %r3059, 6;
	selp.b32 	%r2438, %r94, %r2437, %p297;
	setp.eq.s32 	%p298, %r3059, 12;
	selp.b32 	%r2439, %r98, %r2438, %p298;
	setp.eq.s32 	%p299, %r3059, 18;
	selp.b32 	%r2440, %r102, %r2439, %p299;
	selp.b32 	%r2441, %r91, 0, %p296;
	selp.b32 	%r2442, %r95, %r2441, %p297;
	selp.b32 	%r2443, %r99, %r2442, %p298;
	selp.b32 	%r2444, %r103, %r2443, %p299;
	selp.b32 	%r2445, %r92, 0, %p296;
	selp.b32 	%r2446, %r96, %r2445, %p297;
	selp.b32 	%r2447, %r100, %r2446, %p298;
	selp.b32 	%r2448, %r104, %r2447, %p299;
	selp.b32 	%r2449, %r93, 0, %p296;
	selp.b32 	%r2450, %r97, %r2449, %p297;
	selp.b32 	%r2451, %r101, %r2450, %p298;
	selp.b32 	%r2452, %r105, %r2451, %p299;
	// begin inline asm
	mov.b32 %r1936, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2453, %r2440, 8;
	xor.b32  	%r1946, %r2453, 8947848;
	// begin inline asm
	lop3.b32 %r1933, %r962, %r1946, %r1936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1938, %r1936, %r1937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1941, %r1933, %r1938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1944, %r973, %r1946, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1948, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1949, %r1947, %r1948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1952, %r1944, %r1949;
	// end inline asm
	// begin inline asm
	mov.b32 %r1982, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2454, %r2444, 8;
	xor.b32  	%r1992, %r2454, 8947848;
	// begin inline asm
	lop3.b32 %r1979, %r962, %r1992, %r1982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1984, %r1982, %r1983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1987, %r1979, %r1984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1990, %r973, %r1992, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1995, %r1993, %r1994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1998, %r1990, %r1995;
	// end inline asm
	// begin inline asm
	mov.b32 %r2028, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2039, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2455, %r2448, 8;
	xor.b32  	%r2038, %r2455, 8947848;
	// begin inline asm
	lop3.b32 %r2025, %r962, %r2038, %r2028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2029, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2030, %r2028, %r2029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2033, %r2025, %r2030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2036, %r973, %r2038, %r2039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2040, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2041, %r2039, %r2040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2044, %r2036, %r2041;
	// end inline asm
	// begin inline asm
	mov.b32 %r2074, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2085, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2456, %r2452, 8;
	xor.b32  	%r2084, %r2456, 8947848;
	// begin inline asm
	lop3.b32 %r2071, %r962, %r2084, %r2074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2076, %r2074, %r2075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2079, %r2071, %r2076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2082, %r973, %r2084, %r2085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2086, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2087, %r2085, %r2086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2090, %r2082, %r2087;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r1941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2093, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r1987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2096, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r1952;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2099, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1998;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2102, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r2033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2105, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r2079;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2108, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2044;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2111, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2090;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2114, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2180, %r2177}, {%r320, %r323}, {%r2093}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2189, %r2186}, {%r320, %r323}, {%r2096}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2198, %r2195}, {%r320, %r323}, {%r2099}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2207, %r2204}, {%r320, %r323}, {%r2102}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2216, %r2213}, {%r320, %r323}, {%r2105}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r320, %r323}, {%r2108}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r320, %r323}, {%r2111}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r320, %r323}, {%r2114}, {%r1299, %r1299};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2173, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r2173, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r372, %r2180, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2182, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2184, %r2182, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r372, %r2189, %r2184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2191, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2191, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r372, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2200, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2200, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r372, %r2207, %r2202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2209, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r2209, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2214, %r372, %r2216, %r2211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r372, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r372, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r372, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r375, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r372, %r2177, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r375, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r372, %r2186, %r2252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r375, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r372, %r2195, %r2259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r375, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r372, %r2204, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r375, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r372, %r2213, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r375, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r372, %r2222, %r2280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r375, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r372, %r2231, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r375, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2297, %r372, %r2240, %r2294;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2374, %r2375}, {%r416, %r419}, {%r2178, %r2248}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2382, %r2383}, {%r416, %r419}, {%r2187, %r2255}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2390, %r2391}, {%r416, %r419}, {%r2196, %r2262}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2398, %r2399}, {%r416, %r419}, {%r2205, %r2269}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2406, %r2407}, {%r416, %r419}, {%r2214, %r2276}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2414, %r2415}, {%r416, %r419}, {%r2223, %r2283}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2422, %r2423}, {%r416, %r419}, {%r2232, %r2290}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2430, %r2431}, {%r416, %r419}, {%r2241, %r2297}, {%r1299, %r1299}, %r218, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2373, %r2374, %r2375, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2374, %r2375, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2381, %r2382, %r2383, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2385, %r2382, %r2383, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2389, %r2390, %r2391, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2393, %r2390, %r2391, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2398, %r2399, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2398, %r2399, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2406, %r2407, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2409, %r2406, %r2407, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2413, %r2414, %r2415, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2417, %r2414, %r2415, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2422, %r2423, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2422, %r2423, %r717;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2430, %r2431, %r713;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2430, %r2431, %r717;
	// end inline asm
	add.s16 	%rs228, %rs9, %rs274;
	add.s16 	%rs229, %rs228, -29;
	mul.hi.s16 	%rs230, %rs229, 10923;
	shr.u16 	%rs231, %rs230, 15;
	add.s16 	%rs232, %rs230, %rs231;
	mul.lo.s16 	%rs233, %rs232, 6;
	sub.s16 	%rs234, %rs229, %rs233;
	mul.wide.s16 	%r2457, %rs234, 16;
	add.s32 	%r2458, %r207, %r2457;
	mul.wide.s32 	%rd269, %r2458, 4;
	add.s64 	%rd7, %rd82, %rd269;
	st.shared.u32 	[%rd7], %r2373;
	add.s32 	%r2459, %r208, %r2457;
	mul.wide.u32 	%rd271, %r2459, 4;
	add.s64 	%rd8, %rd82, %rd271;
	st.shared.u32 	[%rd8], %r2377;
	add.s32 	%r2460, %r209, %r2457;
	mul.wide.s32 	%rd272, %r2460, 4;
	add.s64 	%rd9, %rd82, %rd272;
	st.shared.u32 	[%rd9], %r2381;
	add.s32 	%r2461, %r210, %r2457;
	mul.wide.u32 	%rd273, %r2461, 4;
	add.s64 	%rd10, %rd82, %rd273;
	st.shared.u32 	[%rd10], %r2385;
	add.s32 	%r2462, %r211, %r2457;
	mul.wide.s32 	%rd274, %r2462, 4;
	add.s64 	%rd11, %rd82, %rd274;
	st.shared.u32 	[%rd11], %r2389;
	add.s32 	%r2463, %r212, %r2457;
	mul.wide.u32 	%rd275, %r2463, 4;
	add.s64 	%rd12, %rd82, %rd275;
	st.shared.u32 	[%rd12], %r2393;
	add.s32 	%r2464, %r213, %r2457;
	mul.wide.s32 	%rd276, %r2464, 4;
	add.s64 	%rd13, %rd82, %rd276;
	st.shared.u32 	[%rd13], %r2397;
	add.s32 	%r2465, %r214, %r2457;
	mul.wide.u32 	%rd277, %r2465, 4;
	add.s64 	%rd14, %rd82, %rd277;
	st.shared.u32 	[%rd14], %r2401;
	add.s16 	%rs235, %rs8, %rs274;
	add.s16 	%rs236, %rs235, -2;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r2466, %rs241, 16;
	add.s32 	%r2467, %r207, %r2466;
	mul.wide.s32 	%rd278, %r2467, 4;
	add.s64 	%rd15, %rd82, %rd278;
	st.shared.u32 	[%rd15], %r2405;
	add.s32 	%r2468, %r208, %r2466;
	mul.wide.u32 	%rd279, %r2468, 4;
	add.s64 	%rd16, %rd82, %rd279;
	st.shared.u32 	[%rd16], %r2409;
	add.s32 	%r2469, %r209, %r2466;
	mul.wide.s32 	%rd280, %r2469, 4;
	add.s64 	%rd17, %rd82, %rd280;
	st.shared.u32 	[%rd17], %r2413;
	add.s32 	%r2470, %r210, %r2466;
	mul.wide.u32 	%rd281, %r2470, 4;
	add.s64 	%rd18, %rd82, %rd281;
	st.shared.u32 	[%rd18], %r2417;
	add.s32 	%r2471, %r211, %r2466;
	mul.wide.s32 	%rd282, %r2471, 4;
	add.s64 	%rd19, %rd82, %rd282;
	st.shared.u32 	[%rd19], %r2421;
	add.s32 	%r2472, %r212, %r2466;
	mul.wide.u32 	%rd283, %r2472, 4;
	add.s64 	%rd20, %rd82, %rd283;
	st.shared.u32 	[%rd20], %r2425;
	add.s32 	%r2473, %r213, %r2466;
	mul.wide.s32 	%rd284, %r2473, 4;
	add.s64 	%rd21, %rd82, %rd284;
	st.shared.u32 	[%rd21], %r2429;
	add.s32 	%r2474, %r214, %r2466;
	mul.wide.u32 	%rd285, %r2474, 4;
	add.s64 	%rd22, %rd82, %rd285;
	st.shared.u32 	[%rd22], %r2433;
	@%p295 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_168;
$L__BB0_221:                            // %oksrem14049
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2373;
	st.shared.u32 	[%rd8], %r2377;
	st.shared.u32 	[%rd9], %r2381;
	st.shared.u32 	[%rd10], %r2385;
	st.shared.u32 	[%rd11], %r2389;
	st.shared.u32 	[%rd12], %r2393;
	st.shared.u32 	[%rd13], %r2397;
	st.shared.u32 	[%rd14], %r2401;
	st.shared.u32 	[%rd15], %r2405;
	st.shared.u32 	[%rd16], %r2409;
	st.shared.u32 	[%rd17], %r2413;
	st.shared.u32 	[%rd18], %r2417;
	st.shared.u32 	[%rd19], %r2421;
	st.shared.u32 	[%rd20], %r2425;
	st.shared.u32 	[%rd21], %r2429;
	st.shared.u32 	[%rd22], %r2433;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40760
	mov.u32 	%r3000, 0;
	st.global.u32 	[%rd6], %r3000;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd196, exception3642;
	cvta.global.u64 	%rd197, %rd196;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd197;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9506
	mov.u64 	%rd220, exception3642;
	cvta.global.u64 	%rd221, %rd220;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd221;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5125
	mov.u32 	%r3016, 5;
	st.global.u32 	[%rd6], %r3016;
	mov.u64 	%rd367, exception3602;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5281
	mov.u32 	%r3015, 5;
	st.global.u32 	[%rd6], %r3015;
	mov.u64 	%rd365, exception3602;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5437
	mov.u32 	%r3014, 5;
	st.global.u32 	[%rd6], %r3014;
	mov.u64 	%rd363, exception3602;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5593
	mov.u32 	%r3013, 5;
	st.global.u32 	[%rd6], %r3013;
	mov.u64 	%rd361, exception3602;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5749
	mov.u32 	%r3012, 5;
	st.global.u32 	[%rd6], %r3012;
	mov.u64 	%rd359, exception3602;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5905
	mov.u32 	%r3011, 5;
	st.global.u32 	[%rd6], %r3011;
	mov.u64 	%rd357, exception3602;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6061
	mov.u32 	%r3010, 5;
	st.global.u32 	[%rd6], %r3010;
	mov.u64 	%rd355, exception3602;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6217
	mov.u32 	%r3009, 5;
	st.global.u32 	[%rd6], %r3009;
	mov.u64 	%rd353, exception3602;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6373
	mov.u32 	%r3008, 5;
	st.global.u32 	[%rd6], %r3008;
	mov.u64 	%rd351, exception3602;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6529
	mov.u32 	%r3007, 5;
	st.global.u32 	[%rd6], %r3007;
	mov.u64 	%rd349, exception3602;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6711
	mov.u32 	%r3006, 5;
	st.global.u32 	[%rd6], %r3006;
	mov.u64 	%rd347, exception3602;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6867
	mov.u32 	%r3005, 5;
	st.global.u32 	[%rd6], %r3005;
	mov.u64 	%rd345, exception3602;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7023
	mov.u32 	%r3004, 5;
	st.global.u32 	[%rd6], %r3004;
	mov.u64 	%rd343, exception3602;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7179
	mov.u32 	%r3003, 5;
	st.global.u32 	[%rd6], %r3003;
	mov.u64 	%rd341, exception3602;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7335
	mov.u32 	%r3002, 5;
	st.global.u32 	[%rd6], %r3002;
	mov.u64 	%rd339, exception3602;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7491
	mov.u32 	%r3001, 5;
	st.global.u32 	[%rd6], %r3001;
	mov.u64 	%rd337, exception3602;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3018, 2;
	st.global.u32 	[%rd6], %r3018;
	mov.u64 	%rd371, exception3602;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3017, 3;
	st.global.u32 	[%rd6], %r3017;
	mov.u64 	%rd369, exception3602;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd50, exception13654;
	cvta.global.u64 	%rd51, %rd50;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd51;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd49, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r298, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd55, __unnamed_1;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd49;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r525, [retval0+0];
	} // callseq 49
	mov.u32 	%r527, 4;
	st.global.u32 	[%rd6], %r527;
	mov.u64 	%rd58, exception3602;
	cvta.global.u64 	%rd59, %rd58;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd59;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd44;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
