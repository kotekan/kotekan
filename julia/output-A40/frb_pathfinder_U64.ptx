// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1873[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1913[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<305>;
	.reg .b16 	%rs<195>;
	.reg .b32 	%r<2998>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<299>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r257, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r257, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r258, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r259, %r3, %r258;
	add.s32 	%r260, %r259, %r5;
	mul.wide.u32 	%rd20, %r260, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r261, 1;
	st.global.u32 	[%rd6], %r261;
	setp.gt.u32 	%p5, %r249, 511;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r250, %r249;
	setp.gt.s32 	%p7, %r250, 1023;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r250, %r249;
	mad.lo.s32 	%r262, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r263, %r262, %r262, 4;
	setp.gt.u32 	%p9, %r263, 89478484;
	setp.gt.u32 	%p10, %r251, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r252, %r251;
	setp.lt.s32 	%p13, %r252, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r264, %r252, %r251;
	mul.hi.s32 	%r265, %r6, 1431655766;
	shr.u32 	%r266, %r265, 31;
	add.s32 	%r267, %r265, %r266;
	setp.eq.s32 	%p15, %r264, %r267;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r253, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r254, %r253;
	setp.gt.s32 	%p18, %r254, 2048;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r254, %r253;
	and.b32  	%r268, %r7, 63;
	setp.ne.s32 	%p20, %r268, 0;
	setp.lt.s32 	%p21, %r255, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r256, %r255;
	setp.gt.s32 	%p24, %r256, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r269, %r256, %r255;
	and.b32  	%r270, %r269, 63;
	setp.eq.s32 	%p26, %r270, 0;
	setp.eq.s32 	%p27, %r269, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_13;
$L__BB0_170:                            // %pass162
	and.b32  	%r135, %r258, 3;
	shr.u32 	%r136, %r258, 2;
	mul.lo.s32 	%r271, %r135, %r136;
	and.b32  	%r272, %r271, 7;
	cvt.rn.f32.s32 	%f205, %r272;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p304, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_182;
// %bb.171:
	@%p304 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_172;
$L__BB0_178:
	mov.b32 	%r138, %f788;
	and.b32  	%r273, %r138, 8388607;
	or.b32  	%r2993, %r273, 1065353216;
	mov.b32 	%f783, %r2993;
	add.s32 	%r274, %r138, -1073741824;
	and.b32  	%r2994, %r274, -8388608;
	setp.eq.s32 	%p36, %r2994, 0;
	@%p36 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r275, %r2994, 192937984;
	add.s32 	%r276, %r2993, %r275;
	mov.b32 	%f217, %r276;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r2994, %r2994, %r275;
	mov.b32 	%r2993, %f783;
	setp.ne.s32 	%p37, %r2994, 0;
	setp.ne.s32 	%p38, %r2993, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r138, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_182;
$L__BB0_172:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r137, %f172;
	setp.lt.u32 	%p31, %r137, 1073741824;
	@%p31 bra 	$L__BB0_177;
// %bb.173:
	setp.lt.u32 	%p32, %r137, -2147483647;
	@%p32 bra 	$L__BB0_175;
// %bb.174:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r277, %f169;
	and.b32  	%r145, %r277, -2147483648;
	@%p41 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r278, %f784;
	or.b32  	%r279, %r145, %r278;
	mov.b32 	%f784, %r279;
$L__BB0_184:                            // %__nv_fmodf.exit
	shl.b32 	%r148, %r258, 1;
	and.b32  	%r149, %r148, 2;
	mul.lo.s32 	%r294, %r149, %r136;
	cvt.rn.f32.s32 	%f259, %r294;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r295, %r9, 8388607;
	or.b32  	%r2952, %r295, 1065353216;
	mov.b32 	%f733, %r2952;
	add.s32 	%r296, %r9, -1073741824;
	and.b32  	%r2953, %r296, -8388608;
	setp.eq.s32 	%p56, %r2953, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1990.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r297, %r2953, 192937984;
	add.s32 	%r298, %r2952, %r297;
	mov.b32 	%f271, %r298;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2953, %r2953, %r297;
	mov.b32 	%r2952, %f733;
	setp.ne.s32 	%p57, %r2953, 0;
	setp.ne.s32 	%p58, %r2952, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1992
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1969
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1973
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1976
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1995
	or.b32  	%r150, %r149, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r299, %f186;
	and.b32  	%r300, %r299, -2147483648;
	mov.b32 	%r301, %f734;
	or.b32  	%r302, %r300, %r301;
	mov.b32 	%f734, %r302;
$L__BB0_27:                             // %__nv_fmodf.exit1996
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r150, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r311, %r150, %r136;
	mul.hi.u32 	%r312, %r311, -1431655765;
	shr.u32 	%r313, %r312, 4;
	mul.lo.s32 	%r314, %r313, 24;
	sub.s32 	%r315, %r311, %r314;
	cvt.rn.f32.s32 	%f311, %r315;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r316, %r17, 8388607;
	or.b32  	%r2954, %r316, 1065353216;
	mov.b32 	%f737, %r2954;
	add.s32 	%r317, %r17, -1073741824;
	and.b32  	%r2955, %r317, -8388608;
	setp.eq.s32 	%p77, %r2955, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2021.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r318, %r2955, 192937984;
	add.s32 	%r319, %r2954, %r318;
	mov.b32 	%f323, %r319;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2955, %r2955, %r318;
	mov.b32 	%r2954, %f737;
	setp.ne.s32 	%p78, %r2955, 0;
	setp.ne.s32 	%p79, %r2954, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2023
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2000
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2004
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2007
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2026
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r320, %f18;
	and.b32  	%r321, %r320, -2147483648;
	mov.b32 	%r322, %f738;
	or.b32  	%r323, %r321, %r322;
	mov.b32 	%f738, %r323;
$L__BB0_42:                             // %__nv_fmodf.exit2027
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r324, %f333;
	and.b32  	%r325, %r324, -2147483648;
	or.b32  	%r326, %r325, 1056964608;
	mov.b32 	%f334, %r326;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r327, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r328, %r327, 1;
	setp.eq.b32 	%p85, %r328, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r329, %r327, 2;
	setp.eq.s32 	%p86, %r329, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r330, %r327, 1;
	and.b32  	%r331, %r330, 2;
	setp.eq.s32 	%p87, %r331, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r136, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r338, %r149, %r26;
	cvt.u16.u32 	%rs9, %r338;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r339, %r28, 8388607;
	or.b32  	%r2956, %r339, 1065353216;
	mov.b32 	%f743, %r2956;
	add.s32 	%r340, %r28, -1073741824;
	and.b32  	%r2957, %r340, -8388608;
	setp.eq.s32 	%p98, %r2957, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2052.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r2957, 192937984;
	add.s32 	%r342, %r2956, %r341;
	mov.b32 	%f376, %r342;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2957, %r2957, %r341;
	mov.b32 	%r2956, %f743;
	setp.ne.s32 	%p99, %r2957, 0;
	setp.ne.s32 	%p100, %r2956, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2054
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2031
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2035
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2038
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2057
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r343, %f39;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f744;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f744, %r346;
$L__BB0_58:                             // %__nv_fmodf.exit2058
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r347, %f386;
	and.b32  	%r348, %r347, -2147483648;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%f387, %r349;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r350, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r351, %r350, 1;
	setp.eq.b32 	%p106, %r351, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r352, %r350, 2;
	setp.eq.s32 	%p107, %r352, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r353, %r350, 1;
	and.b32  	%r354, %r353, 2;
	setp.eq.s32 	%p108, %r354, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L637
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r355, %r150, %r26;
	mul.hi.u32 	%r356, %r355, -1431655765;
	shr.u32 	%r357, %r356, 1;
	mul.lo.s32 	%r358, %r357, 3;
	sub.s32 	%r359, %r355, %r358;
	cvt.rn.f32.s32 	%f417, %r359;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r360, %r36, 8388607;
	or.b32  	%r2958, %r360, 1065353216;
	mov.b32 	%f749, %r2958;
	add.s32 	%r361, %r36, -1073741824;
	and.b32  	%r2959, %r361, -8388608;
	setp.eq.s32 	%p121, %r2959, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2083.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r2959, 192937984;
	add.s32 	%r363, %r2958, %r362;
	mov.b32 	%f429, %r363;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2959, %r2959, %r362;
	mov.b32 	%r2958, %f749;
	setp.ne.s32 	%p122, %r2959, 0;
	setp.ne.s32 	%p123, %r2958, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2085
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2062
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2066
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2069
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2088
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r364, %f60;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f750;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f750, %r367;
$L__BB0_74:                             // %__nv_fmodf.exit2089
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r368, %f439;
	and.b32  	%r369, %r368, -2147483648;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%f440, %r370;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r371, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r372, %r371, 1;
	setp.eq.b32 	%p129, %r372, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r373, %r371, 2;
	setp.eq.s32 	%p130, %r373, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r374, %r371, 1;
	and.b32  	%r375, %r374, 2;
	setp.eq.s32 	%p131, %r375, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r258, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p29 bra 	$L__BB0_192;
// %bb.78:
	@%p304 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_79;
$L__BB0_188:
	mov.b32 	%r152, %f788;
	and.b32  	%r382, %r152, 8388607;
	or.b32  	%r2995, %r382, 1065353216;
	mov.b32 	%f787, %r2995;
	add.s32 	%r383, %r152, -1073741824;
	and.b32  	%r2996, %r383, -8388608;
	setp.eq.s32 	%p142, %r2996, 0;
	@%p142 bra 	$L__BB0_191;
// %bb.189:                             // %__nv_fmaf_rn.exit4.i.i.i2114.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_190:                            // %__nv_fmaf_rn.exit4.i.i.i2114
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r2996, 192937984;
	add.s32 	%r385, %r2995, %r384;
	mov.b32 	%f479, %r385;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r2996, %r2996, %r384;
	mov.b32 	%r2995, %f787;
	setp.ne.s32 	%p143, %r2996, 0;
	setp.ne.s32 	%p144, %r2995, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_190;
$L__BB0_191:                            // %__internal_fmodf_slowpath_mod.exit.i.i2116
	setp.gt.u32 	%p146, %r152, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_192;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2093
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r151, %f189;
	setp.lt.u32 	%p137, %r151, 1073741824;
	@%p137 bra 	$L__BB0_187;
// %bb.80:
	setp.lt.u32 	%p138, %r151, -2147483647;
	@%p138 bra 	$L__BB0_185;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_187;
$L__BB0_185:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_187;
// %bb.186:                             // %__nv_fmaf_rn.exit.i.i.i2097
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_187:                            // %__internal_fmodf_fastpath_quot.exit.i.i2100
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_192:                            // %__internal_fmodf_kernel.exit.i2119
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_194;
// %bb.193:
	mov.b32 	%r386, %f788;
	or.b32  	%r387, %r145, %r386;
	mov.b32 	%f788, %r387;
$L__BB0_194:                            // %__nv_fmodf.exit2120
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r402, %r47, 8388607;
	or.b32  	%r2960, %r402, 1065353216;
	mov.b32 	%f759, %r2960;
	add.s32 	%r403, %r47, -1073741824;
	and.b32  	%r2961, %r403, -8388608;
	setp.eq.s32 	%p162, %r2961, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2145.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2145
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r404, %r2961, 192937984;
	add.s32 	%r405, %r2960, %r404;
	mov.b32 	%f532, %r405;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2961, %r2961, %r404;
	mov.b32 	%r2960, %f759;
	setp.ne.s32 	%p163, %r2961, 0;
	setp.ne.s32 	%p164, %r2960, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2147
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2124
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2128
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2131
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2150
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r406, %f203;
	and.b32  	%r407, %r406, -2147483648;
	mov.b32 	%r408, %f760;
	or.b32  	%r409, %r407, %r408;
	mov.b32 	%f760, %r409;
$L__BB0_95:                             // %__nv_fmodf.exit2151
	cvt.rn.f32.s32 	%f572, %r136;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r418, %r55, 8388607;
	or.b32  	%r2962, %r418, 1065353216;
	mov.b32 	%f763, %r2962;
	add.s32 	%r419, %r55, -1073741824;
	and.b32  	%r2963, %r419, -8388608;
	setp.eq.s32 	%p182, %r2963, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2176.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2176
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r420, %r2963, 192937984;
	add.s32 	%r421, %r2962, %r420;
	mov.b32 	%f584, %r421;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2963, %r2963, %r420;
	mov.b32 	%r2962, %f763;
	setp.ne.s32 	%p183, %r2963, 0;
	setp.ne.s32 	%p184, %r2962, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2178
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2155
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2159
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2162
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2181
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r422, %f104;
	and.b32  	%r423, %r422, -2147483648;
	mov.b32 	%r424, %f764;
	or.b32  	%r425, %r423, %r424;
	mov.b32 	%f764, %r425;
$L__BB0_109:                            // %__nv_fmodf.exit2182
	and.b32  	%r65, %r258, 1;
	shr.u32 	%r66, %r258, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r440, %r68, 8388607;
	or.b32  	%r2964, %r440, 1065353216;
	mov.b32 	%f767, %r2964;
	add.s32 	%r441, %r68, -1073741824;
	and.b32  	%r2965, %r441, -8388608;
	setp.eq.s32 	%p203, %r2965, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2207.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2207
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r442, %r2965, 192937984;
	add.s32 	%r443, %r2964, %r442;
	mov.b32 	%f638, %r443;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2965, %r2965, %r442;
	mov.b32 	%r2964, %f767;
	setp.ne.s32 	%p204, %r2965, 0;
	setp.ne.s32 	%p205, %r2964, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2209
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2186
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2190
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2193
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2212
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r444, %f121;
	and.b32  	%r445, %r444, -2147483648;
	mov.b32 	%r446, %f768;
	or.b32  	%r447, %r445, %r446;
	mov.b32 	%f768, %r447;
$L__BB0_124:                            // %__nv_fmodf.exit2213
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r448, %f648;
	and.b32  	%r449, %r448, -2147483648;
	or.b32  	%r450, %r449, 1056964608;
	mov.b32 	%f649, %r450;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r451, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r452, %r451, 1;
	setp.eq.b32 	%p211, %r452, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r453, %r451, 2;
	setp.eq.s32 	%p212, %r453, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r454, %r451, 1;
	and.b32  	%r455, %r454, 2;
	setp.eq.s32 	%p213, %r455, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r136, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r456, %r76, 8388607;
	or.b32  	%r2966, %r456, 1065353216;
	mov.b32 	%f773, %r2966;
	add.s32 	%r457, %r76, -1073741824;
	and.b32  	%r2967, %r457, -8388608;
	setp.eq.s32 	%p224, %r2967, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2238.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2238
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r458, %r2967, 192937984;
	add.s32 	%r459, %r2966, %r458;
	mov.b32 	%f691, %r459;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2967, %r2967, %r458;
	mov.b32 	%r2966, %f773;
	setp.ne.s32 	%p225, %r2967, 0;
	setp.ne.s32 	%p226, %r2966, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2240
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2217
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2221
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2224
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2243
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r460, %f142;
	and.b32  	%r461, %r460, -2147483648;
	mov.b32 	%r462, %f774;
	or.b32  	%r463, %r461, %r462;
	mov.b32 	%f774, %r463;
$L__BB0_140:                            // %__nv_fmodf.exit2244
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r464, %f701;
	and.b32  	%r465, %r464, -2147483648;
	or.b32  	%r466, %r465, 1056964608;
	mov.b32 	%f702, %r466;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r467, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r468, %r467, 1;
	setp.eq.b32 	%p232, %r468, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r469, %r467, 2;
	setp.eq.s32 	%p233, %r469, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r470, %r467, 1;
	and.b32  	%r471, %r470, 2;
	setp.eq.s32 	%p234, %r471, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p238, %r258, 15;
	mov.u32 	%r161, 999999999;
	@%p238 bra 	$L__BB0_196;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r479, %r258, 6, %r2;
	cvt.u16.u32 	%rs15, %r479;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r480, %rs20;
	and.b32  	%r481, %r480, 255;
	mul.wide.u32 	%rd21, %r481, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r482, [%rd22];
	shl.b32 	%r483, %r482, 16;
	cvt.s32.s16 	%r85, %r482;
	shr.s32 	%r86, %r482, 16;
	or.b32  	%r484, %r483, 65535;
	setp.lt.u32 	%p239, %r484, 589823;
	setp.lt.u32 	%p240, %r482, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_145;
$L__BB0_195:                            // %L1254
	mul.lo.s32 	%r488, %r86, 290;
	mad.lo.s32 	%r161, %r85, 33, %r488;
$L__BB0_196:                            // %pass548
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r286, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r287, %r286, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r394, %f489;
	or.b32  	%r288, %r287, 1056964608;
	mov.b32 	%r303, %f282;
	and.b32  	%r395, %r394, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r288;
	and.b32  	%r304, %r303, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%r410, %f542;
	mov.b32 	%r432, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r305, %r304, 1056964608;
	mov.b32 	%f490, %r396;
	and.b32  	%r411, %r410, -2147483648;
	and.b32  	%r433, %r432, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r305;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r412, %r411, 1056964608;
	or.b32  	%r434, %r433, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r412;
	mov.b32 	%f596, %r434;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r289, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r290, %r289, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r397, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r290, 1;
	cvt.rzi.s32.f32 	%r306, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r398, %r397, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r291, %r289, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r307, %r306, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r398, 1;
	cvt.rzi.s32.f32 	%r413, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r435, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r291, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r292, %r289, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r307, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r399, %r397, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r414, %r413, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r436, %r435, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r293, %r292, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r308, %r306, 2;
	setp.eq.s32 	%p151, %r399, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r400, %r397, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r414, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r436, 1;
	setp.eq.s32 	%p46, %r293, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r308, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r309, %r306, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r401, %r400, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r415, %r413, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r437, %r435, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r310, %r309, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r401, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r415, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r416, %r413, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r437, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r438, %r435, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r310, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r417, %r416, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r439, %r438, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r282, %f258;
	mov.b32 	%r285, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r417, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r439, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r281, %r285, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r390, %f520;
	mov.b32 	%r393, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r282;
	// end inline asm
	mov.b32 	%r333, %f17;
	mov.b32 	%r334, %f37;
	mov.b32 	%r336, %f16;
	mov.b32 	%r337, %f38;
	mov.b32 	%r377, %f83;
	mov.b32 	%r378, %f85;
	mov.b32 	%r380, %f755;
	mov.b32 	%r381, %f757;
	xor.b32  	%r389, %r393, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r390;
	// end inline asm
	mov.b32 	%r428, %f625;
	mov.b32 	%r427, %f103;
	mov.b32 	%r431, %f622;
	mov.b32 	%r430, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r427;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r431, %r430;
	// end inline asm
	mov.b32 	%r473, %f165;
	mov.b32 	%r474, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r472, %r474, %r473;
	// end inline asm
	mov.b32 	%r476, %f779;
	mov.b32 	%r477, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r475, %r477, %r476;
	// end inline asm
	shr.u32 	%r162, %r258, 3;
	bfe.u32 	%r490, %r258, 3, 1;
	shl.b32 	%r491, %r2, 1;
	and.b32  	%r492, %r491, 2;
	or.b32  	%r493, %r490, %r492;
	and.b32  	%r494, %r162, 2;
	or.b32  	%r163, %r494, %r64;
	cvt.u16.u32 	%rs23, %r163;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r495, %rs27;
	and.b32  	%r496, %r495, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r497, %rs28, 8;
	mul.lo.s32 	%r498, %r135, 24;
	add.s32 	%r499, %r498, %r5;
	or.b32  	%r500, %r499, %r493;
	add.s32 	%r501, %r500, %r497;
	mul.wide.u32 	%rd28, %r501, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r164, [%rd29];
	or.b32  	%r502, %r493, 4;
	cvt.u64.u32 	%rd30, %r497;
	cvt.u64.u32 	%rd31, %r499;
	cvt.u64.u32 	%rd32, %r493;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd34, %rd33, %rd30;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r165, [%rd36+16];
	cvt.u64.u32 	%rd37, %r498;
	cvt.u64.u32 	%rd38, %r5;
	add.s64 	%rd39, %rd38, %rd37;
	add.s64 	%rd40, %rd39, %rd32;
	add.s64 	%rd41, %rd40, %rd30;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r166, [%rd43+384];
	cvt.u64.u32 	%rd44, %r502;
	add.s64 	%rd45, %rd39, %rd44;
	add.s64 	%rd46, %rd45, %rd30;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.u32 	%r167, [%rd48+384];
	shl.b32 	%r503, %r249, 16;
	shl.b32 	%r504, %r253, 5;
	add.s32 	%r168, %r504, %r503;
	shl.b32 	%r505, %r4, 5;
	shl.b32 	%r169, %r2, 2;
	shl.b32 	%r506, %r258, 2;
	and.b32  	%r507, %r506, 28;
	or.b32  	%r170, %r507, %r505;
	and.b32  	%r171, %r258, 4;
	and.b32  	%r508, %r148, 8;
	shl.b32 	%r509, %r258, 4;
	or.b32  	%r510, %r508, %r509;
	bfe.u32 	%r511, %r510, 3, 3;
	mul.lo.s32 	%r172, %r511, 260;
	cvt.u16.u32 	%rs29, %r258;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r512, %rs34;
	and.b32  	%r173, %r512, 255;
	add.s32 	%r513, %r2, 6;
	shr.u32 	%r514, %r513, 3;
	add.s32 	%r515, %r3, 192;
	and.b32  	%r516, %r515, 224;
	mad.lo.s32 	%r174, %r514, 260, %r516;
	add.s32 	%r517, %r2, 12;
	shr.u32 	%r518, %r517, 3;
	add.s32 	%r519, %r3, 128;
	and.b32  	%r520, %r519, 224;
	mad.lo.s32 	%r175, %r518, 260, %r520;
	add.s32 	%r521, %r2, 18;
	shr.u32 	%r522, %r521, 3;
	add.s32 	%r523, %r3, 64;
	and.b32  	%r524, %r523, 224;
	mad.lo.s32 	%r176, %r522, 260, %r524;
	or.b32  	%r177, %r3, 780;
	add.s32 	%r525, %r2, 30;
	shr.u32 	%r526, %r525, 3;
	mad.lo.s32 	%r178, %r526, 260, %r516;
	add.s32 	%r527, %r2, 36;
	shr.u32 	%r528, %r527, 3;
	mad.lo.s32 	%r179, %r528, 260, %r520;
	add.s32 	%r529, %r2, 42;
	shr.u32 	%r530, %r529, 3;
	mad.lo.s32 	%r180, %r530, 260, %r524;
	or.b32  	%r181, %r3, 1560;
	add.s32 	%r531, %r2, 54;
	shr.u32 	%r532, %r531, 3;
	mad.lo.s32 	%r182, %r532, 260, %r516;
	add.s32 	%r533, %r2, 60;
	bfe.u32 	%r534, %r533, 3, 3;
	mad.lo.s32 	%r183, %r534, 260, %r520;
	shr.u32 	%r535, %r2, 1;
	cvt.u16.u32 	%rs35, %r535;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r536, %rs40;
	and.b32  	%r184, %r536, 255;
	mul.lo.s32 	%r537, %r135, 870;
	mad.lo.s32 	%r538, %r493, 33, %r537;
	mad.lo.s32 	%r185, %r496, 290, %r538;
	add.s32 	%r186, %r185, 132;
	setp.lt.u32 	%p242, %r258, 4;
	setp.eq.s32 	%p243, %r136, 1;
	setp.eq.s32 	%p244, %r136, 4;
	setp.eq.s32 	%p245, %r136, 5;
	shr.u32 	%r539, %r2, 2;
	mul.lo.s32 	%r540, %r539, 98;
	and.b32  	%r541, %r2, 1;
	neg.s32 	%r542, %r541;
	and.b32  	%r543, %r542, 392;
	and.b32  	%r544, %r148, 6;
	bfe.s32 	%r545, %r2, 1, 1;
	and.b32  	%r546, %r545, 196;
	bfe.s32 	%r547, %r258, 3, 1;
	and.b32  	%r548, %r547, 1576;
	or.b32  	%r549, %r540, %r64;
	add.s32 	%r550, %r549, %r544;
	mad.lo.s32 	%r551, %r66, 784, %r550;
	add.s32 	%r552, %r551, %r543;
	add.s32 	%r553, %r552, %r546;
	add.s32 	%r187, %r553, %r548;
	add.s32 	%r188, %r187, 8;
	mul.lo.s32 	%r554, %r251, 786432;
	mad.lo.s32 	%r555, %r255, 192, %r554;
	and.b32  	%r556, %r258, 7;
	or.b32  	%r557, %r162, %r169;
	cvt.u16.u32 	%rs41, %r557;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r558, %rs47;
	and.b32  	%r559, %r558, 248;
	or.b32  	%r560, %r5, %r556;
	add.s32 	%r189, %r560, %r559;
	cvt.s64.s32 	%rd7, %r555;
	add.s32 	%r561, %r185, %r184;
	mul.wide.u32 	%rd49, %r561, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd8, %rd50, %rd49;
	add.s32 	%r562, %r186, %r184;
	mul.wide.u32 	%rd51, %r562, 4;
	add.s64 	%rd9, %rd50, %rd51;
	cvt.u64.u32 	%rd52, %r185;
	cvt.u64.u16 	%rd53, %rs40;
	and.b64  	%rd54, %rd53, 255;
	add.s64 	%rd55, %rd52, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd10, %rd50, %rd56;
	cvt.u64.u32 	%rd57, %r186;
	add.s64 	%rd58, %rd57, %rd54;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd11, %rd50, %rd59;
	or.pred  	%p246, %p242, %p243;
	and.b32  	%r563, %r258, 24;
	setp.eq.s32 	%p247, %r563, 8;
	or.pred  	%p248, %p246, %p247;
	or.pred  	%p249, %p248, %p244;
	setp.eq.s32 	%p250, %r563, 24;
	or.pred  	%p251, %p245, %p250;
	selp.b32 	%r190, 1145324612, -286331154, %p248;
	or.pred  	%p1, %p249, %p251;
	selp.b32 	%r191, 1145324612, -286331154, %p246;
	add.s32 	%r564, %r136, -1;
	setp.lt.u32 	%p252, %r564, 3;
	or.pred  	%p2, %p242, %p252;
	setp.eq.s32 	%p253, %r563, 16;
	or.pred  	%p3, %p253, %p250;
	selp.b32 	%r192, 1145324612, -286331154, %p253;
	add.s32 	%r193, %r189, 1572864;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r243, %r191, %r192, %p2;
	or.pred  	%p284, %p2, %p3;
	mov.u32 	%r110, %r88;
$L__BB0_197:                            // %L1937
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r565, %r88, %r249;
	setp.lt.s32 	%p254, %r565, %r250;
	@%p254 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_169;
$L__BB0_198:                            // %oksrem871
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p255, %r171, 0;
	mul.hi.u32 	%r662, %r88, -1431655765;
	shr.u32 	%r663, %r662, 5;
	mul.lo.s32 	%r194, %r663, 48;
	add.s32 	%r664, %r194, %r169;
	or.b32  	%r665, %r664, %r162;
	shr.s32 	%r666, %r664, 31;
	shr.u32 	%r667, %r666, 23;
	add.s32 	%r668, %r665, %r667;
	and.b32  	%r669, %r668, 65024;
	sub.s32 	%r670, %r665, %r669;
	shl.b32 	%r671, %r670, 16;
	or.b32  	%r672, %r170, %r671;
	add.s32 	%r673, %r168, %r672;
	shr.s32 	%r674, %r673, 31;
	shr.u32 	%r675, %r674, 7;
	add.s32 	%r676, %r673, %r675;
	shr.s32 	%r677, %r676, 25;
	setp.lt.s32 	%p256, %r673, 0;
	and.b32  	%r678, %r676, -33554432;
	setp.ne.s32 	%p257, %r678, %r673;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r679, 1, 0, %p258;
	sub.s32 	%r680, %r679, %r677;
	shl.b32 	%r681, %r680, 25;
	add.s32 	%r682, %r681, %r673;
	mul.wide.s32 	%rd60, %r682, 4;
	add.s64 	%rd61, %rd3, %rd60;
	ld.global.v4.u32 	{%r683, %r684, %r685, %r686}, [%rd61];
	add.s32 	%r687, %r664, 24;
	or.b32  	%r688, %r687, %r162;
	shr.s32 	%r689, %r687, 31;
	shr.u32 	%r690, %r689, 23;
	add.s32 	%r691, %r688, %r690;
	and.b32  	%r692, %r691, 65024;
	sub.s32 	%r693, %r688, %r692;
	shl.b32 	%r694, %r693, 16;
	or.b32  	%r695, %r170, %r694;
	add.s32 	%r696, %r168, %r695;
	shr.s32 	%r697, %r696, 31;
	shr.u32 	%r698, %r697, 7;
	add.s32 	%r699, %r696, %r698;
	shr.s32 	%r700, %r699, 25;
	setp.lt.s32 	%p259, %r696, 0;
	and.b32  	%r701, %r699, -33554432;
	setp.ne.s32 	%p260, %r701, %r696;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r702, 1, 0, %p261;
	sub.s32 	%r703, %r702, %r700;
	shl.b32 	%r704, %r703, 25;
	add.s32 	%r705, %r704, %r696;
	mul.wide.s32 	%rd62, %r705, 4;
	add.s64 	%rd63, %rd3, %rd62;
	ld.global.v4.u32 	{%r706, %r707, %r708, %r709}, [%rd63];
	selp.b32 	%r710, %r685, %r683, %p255;
	shfl.sync.bfly.b32	%r711, %r710, 4, 31, -1;
	selp.b32 	%r568, %r683, %r711, %p255;
	selp.b32 	%r573, %r711, %r685, %p255;
	selp.b32 	%r712, %r686, %r684, %p255;
	shfl.sync.bfly.b32	%r713, %r712, 4, 31, -1;
	selp.b32 	%r576, %r684, %r713, %p255;
	selp.b32 	%r581, %r713, %r686, %p255;
	selp.b32 	%r714, %r708, %r706, %p255;
	shfl.sync.bfly.b32	%r715, %r714, 4, 31, -1;
	selp.b32 	%r584, %r706, %r715, %p255;
	selp.b32 	%r589, %r715, %r708, %p255;
	selp.b32 	%r716, %r709, %r707, %p255;
	shfl.sync.bfly.b32	%r717, %r716, 4, 31, -1;
	selp.b32 	%r592, %r707, %r717, %p255;
	selp.b32 	%r597, %r717, %r709, %p255;
	shl.b32 	%r569, %r573, 4;
	mov.u32 	%r567, 252645135;
	// begin inline asm
	lop3.b32 %r599, %r567, %r568, %r569, 202;
	// end inline asm
	shr.u32 	%r572, %r568, 4;
	// begin inline asm
	lop3.b32 %r615, %r567, %r572, %r573, 202;
	// end inline asm
	shl.b32 	%r577, %r581, 4;
	// begin inline asm
	lop3.b32 %r607, %r567, %r576, %r577, 202;
	// end inline asm
	shr.u32 	%r580, %r576, 4;
	// begin inline asm
	lop3.b32 %r623, %r567, %r580, %r581, 202;
	// end inline asm
	shl.b32 	%r585, %r589, 4;
	// begin inline asm
	lop3.b32 %r600, %r567, %r584, %r585, 202;
	// end inline asm
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r616, %r567, %r588, %r589, 202;
	// end inline asm
	shl.b32 	%r593, %r597, 4;
	// begin inline asm
	lop3.b32 %r608, %r567, %r592, %r593, 202;
	// end inline asm
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r624, %r567, %r596, %r597, 202;
	// end inline asm
	mov.u32 	%r601, 25152;
	// begin inline asm
	prmt.b32 %r631, %r599, %r600, %r601;
	// end inline asm
	mov.u32 	%r605, 29521;
	// begin inline asm
	prmt.b32 %r647, %r599, %r600, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r639, %r607, %r608, %r601;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r607, %r608, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r632, %r615, %r616, %r601;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r615, %r616, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r623, %r624, %r601;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r623, %r624, %r605;
	// end inline asm
	mov.u32 	%r633, 21520;
	// begin inline asm
	prmt.b32 %r630, %r631, %r632, %r633;
	// end inline asm
	mov.u32 	%r637, 30258;
	// begin inline asm
	prmt.b32 %r634, %r631, %r632, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r639, %r640, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r639, %r640, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r647, %r648, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r647, %r648, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r655, %r656, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r655, %r656, %r637;
	// end inline asm
	mul.hi.s32 	%r718, %r665, 715827883;
	shr.u32 	%r719, %r718, 31;
	shr.s32 	%r720, %r718, 2;
	add.s32 	%r721, %r720, %r719;
	mul.lo.s32 	%r722, %r721, 24;
	sub.s32 	%r723, %r665, %r722;
	add.s32 	%r724, %r723, %r172;
	mul.wide.s32 	%rd64, %r724, 4;
	add.s64 	%rd66, %rd50, %rd64;
	st.shared.u32 	[%rd66], %r630;
	add.s32 	%r725, %r724, 128;
	mul.wide.u32 	%rd67, %r725, 4;
	add.s64 	%rd68, %rd50, %rd67;
	st.shared.u32 	[%rd68], %r638;
	add.s32 	%r726, %r724, 64;
	mul.wide.u32 	%rd69, %r726, 4;
	add.s64 	%rd70, %rd50, %rd69;
	st.shared.u32 	[%rd70], %r634;
	add.s32 	%r727, %r724, 192;
	mul.wide.u32 	%rd71, %r727, 4;
	add.s64 	%rd72, %rd50, %rd71;
	st.shared.u32 	[%rd72], %r642;
	add.s32 	%r728, %r724, 32;
	mul.wide.u32 	%rd73, %r728, 4;
	add.s64 	%rd74, %rd50, %rd73;
	st.shared.u32 	[%rd74], %r646;
	add.s32 	%r729, %r724, 160;
	mul.wide.u32 	%rd75, %r729, 4;
	add.s64 	%rd76, %rd50, %rd75;
	st.shared.u32 	[%rd76], %r654;
	add.s32 	%r730, %r724, 96;
	mul.wide.u32 	%rd77, %r730, 4;
	add.s64 	%rd78, %rd50, %rd77;
	st.shared.u32 	[%rd78], %r650;
	add.s32 	%r731, %r724, 224;
	mul.wide.u32 	%rd79, %r731, 4;
	add.s64 	%rd80, %rd50, %rd79;
	st.shared.u32 	[%rd80], %r658;
	bar.sync 	0;
	add.s32 	%r732, %r194, %r173;
	cvt.u16.u32 	%rs48, %r732;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r195, %rs54;
	add.s32 	%r733, %r3, %r195;
	mul.wide.s32 	%rd81, %r733, 4;
	add.s64 	%rd82, %rd50, %rd81;
	ld.shared.u32 	%r196, [%rd82];
	add.s32 	%r734, %r174, %r195;
	mul.wide.s32 	%rd83, %r734, 4;
	add.s64 	%rd84, %rd50, %rd83;
	ld.shared.u32 	%r197, [%rd84];
	add.s32 	%r735, %r175, %r195;
	mul.wide.u32 	%rd85, %r735, 4;
	add.s64 	%rd86, %rd50, %rd85;
	ld.shared.u32 	%r198, [%rd86];
	add.s32 	%r736, %r176, %r195;
	mul.wide.u32 	%rd87, %r736, 4;
	add.s64 	%rd88, %rd50, %rd87;
	ld.shared.u32 	%r199, [%rd88];
	add.s32 	%r737, %r177, %r195;
	mul.wide.u32 	%rd89, %r737, 4;
	add.s64 	%rd90, %rd50, %rd89;
	ld.shared.u32 	%r200, [%rd90];
	add.s32 	%r738, %r178, %r195;
	mul.wide.u32 	%rd91, %r738, 4;
	add.s64 	%rd92, %rd50, %rd91;
	ld.shared.u32 	%r201, [%rd92];
	add.s32 	%r739, %r179, %r195;
	mul.wide.u32 	%rd93, %r739, 4;
	add.s64 	%rd94, %rd50, %rd93;
	ld.shared.u32 	%r202, [%rd94];
	add.s32 	%r740, %r180, %r195;
	mul.wide.u32 	%rd95, %r740, 4;
	add.s64 	%rd96, %rd50, %rd95;
	ld.shared.u32 	%r203, [%rd96];
	add.s32 	%r741, %r181, %r195;
	mul.wide.u32 	%rd97, %r741, 4;
	add.s64 	%rd98, %rd50, %rd97;
	ld.shared.u32 	%r204, [%rd98];
	add.s32 	%r742, %r182, %r195;
	mul.wide.u32 	%rd99, %r742, 4;
	add.s64 	%rd100, %rd50, %rd99;
	ld.shared.u32 	%r205, [%rd100];
	add.s32 	%r743, %r183, %r195;
	mul.wide.s32 	%rd101, %r743, 4;
	add.s64 	%rd102, %rd50, %rd101;
	ld.shared.u32 	%r206, [%rd102];
	bar.sync 	0;
	shfl.sync.idx.b32	%r207, %r161, 0, 31, -1;
	shfl.sync.idx.b32	%r208, %r161, 1, 31, -1;
	shfl.sync.idx.b32	%r209, %r161, 2, 31, -1;
	shfl.sync.idx.b32	%r210, %r161, 3, 31, -1;
	shfl.sync.idx.b32	%r211, %r161, 4, 31, -1;
	shfl.sync.idx.b32	%r212, %r161, 5, 31, -1;
	shfl.sync.idx.b32	%r213, %r161, 6, 31, -1;
	shfl.sync.idx.b32	%r214, %r161, 7, 31, -1;
	shfl.sync.idx.b32	%r215, %r161, 8, 31, -1;
	shfl.sync.idx.b32	%r216, %r161, 9, 31, -1;
	shfl.sync.idx.b32	%r217, %r161, 10, 31, -1;
	shfl.sync.idx.b32	%r218, %r161, 11, 31, -1;
	shfl.sync.idx.b32	%r219, %r161, 12, 31, -1;
	shfl.sync.idx.b32	%r220, %r161, 13, 31, -1;
	shfl.sync.idx.b32	%r221, %r161, 14, 31, -1;
	shfl.sync.idx.b32	%r222, %r161, 15, 31, -1;
	setp.eq.s32 	%p262, %r207, 999999999;
	@%p262 bra 	$L__BB0_146;
// %bb.199:                             // %oksrem2309
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r744, %r207, %r195;
	mul.wide.s32 	%rd103, %r744, 4;
	add.s64 	%rd105, %rd50, %rd103;
	st.shared.u32 	[%rd105], %r196;
	setp.eq.s32 	%p263, %r208, 999999999;
	@%p263 bra 	$L__BB0_147;
// %bb.200:                             // %oksrem2377
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r745, %r208, %r195;
	mul.wide.s32 	%rd106, %r745, 4;
	add.s64 	%rd108, %rd50, %rd106;
	st.shared.u32 	[%rd108], %r197;
	setp.eq.s32 	%p264, %r209, 999999999;
	@%p264 bra 	$L__BB0_148;
// %bb.201:                             // %oksrem2445
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r746, %r209, %r195;
	mul.wide.s32 	%rd109, %r746, 4;
	add.s64 	%rd111, %rd50, %rd109;
	st.shared.u32 	[%rd111], %r198;
	setp.eq.s32 	%p265, %r210, 999999999;
	@%p265 bra 	$L__BB0_149;
// %bb.202:                             // %oksrem2513
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r747, %r210, %r195;
	mul.wide.s32 	%rd112, %r747, 4;
	add.s64 	%rd114, %rd50, %rd112;
	st.shared.u32 	[%rd114], %r199;
	setp.eq.s32 	%p266, %r211, 999999999;
	@%p266 bra 	$L__BB0_150;
// %bb.203:                             // %oksrem2581
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r748, %r211, %r195;
	mul.wide.s32 	%rd115, %r748, 4;
	add.s64 	%rd117, %rd50, %rd115;
	st.shared.u32 	[%rd117], %r200;
	setp.eq.s32 	%p267, %r212, 999999999;
	@%p267 bra 	$L__BB0_151;
// %bb.204:                             // %oksrem2649
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r749, %r212, %r195;
	mul.wide.s32 	%rd118, %r749, 4;
	add.s64 	%rd120, %rd50, %rd118;
	st.shared.u32 	[%rd120], %r201;
	setp.eq.s32 	%p268, %r213, 999999999;
	@%p268 bra 	$L__BB0_152;
// %bb.205:                             // %oksrem2717
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r750, %r213, %r195;
	mul.wide.s32 	%rd121, %r750, 4;
	add.s64 	%rd123, %rd50, %rd121;
	st.shared.u32 	[%rd123], %r202;
	setp.eq.s32 	%p269, %r214, 999999999;
	@%p269 bra 	$L__BB0_153;
// %bb.206:                             // %oksrem2785
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r751, %r214, %r195;
	mul.wide.s32 	%rd124, %r751, 4;
	add.s64 	%rd126, %rd50, %rd124;
	st.shared.u32 	[%rd126], %r203;
	setp.eq.s32 	%p270, %r215, 999999999;
	@%p270 bra 	$L__BB0_154;
// %bb.207:                             // %oksrem2853
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r752, %r215, %r195;
	mul.wide.s32 	%rd127, %r752, 4;
	add.s64 	%rd129, %rd50, %rd127;
	st.shared.u32 	[%rd129], %r204;
	setp.eq.s32 	%p271, %r216, 999999999;
	@%p271 bra 	$L__BB0_155;
// %bb.208:                             // %oksrem2921
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r753, %r216, %r195;
	mul.wide.s32 	%rd130, %r753, 4;
	add.s64 	%rd132, %rd50, %rd130;
	st.shared.u32 	[%rd132], %r205;
	setp.eq.s32 	%p272, %r217, 999999999;
	@%p272 bra 	$L__BB0_156;
// %bb.209:                             // %oksrem2990
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.gt.u32 	%p273, %r2, 3;
	selp.b32 	%r754, 0, %r206, %p273;
	add.s32 	%r755, %r217, %r195;
	mul.wide.s32 	%rd133, %r755, 4;
	add.s64 	%rd135, %rd50, %rd133;
	st.shared.u32 	[%rd135], %r754;
	setp.eq.s32 	%p274, %r218, 999999999;
	@%p274 bra 	$L__BB0_157;
// %bb.210:                             // %oksrem3058
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r756, %r218, %r195;
	mul.wide.s32 	%rd136, %r756, 4;
	add.s64 	%rd138, %rd50, %rd136;
	mov.u32 	%r757, 0;
	st.shared.u32 	[%rd138], %r757;
	setp.eq.s32 	%p275, %r219, 999999999;
	@%p275 bra 	$L__BB0_158;
// %bb.211:                             // %oksrem3125
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r758, %r219, %r195;
	mul.wide.s32 	%rd139, %r758, 4;
	add.s64 	%rd141, %rd50, %rd139;
	st.shared.u32 	[%rd141], %r757;
	setp.eq.s32 	%p276, %r220, 999999999;
	@%p276 bra 	$L__BB0_159;
// %bb.212:                             // %oksrem3192
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r760, %r220, %r195;
	mul.wide.s32 	%rd142, %r760, 4;
	add.s64 	%rd144, %rd50, %rd142;
	st.shared.u32 	[%rd144], %r757;
	setp.eq.s32 	%p277, %r221, 999999999;
	@%p277 bra 	$L__BB0_160;
// %bb.213:                             // %oksrem3259
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r762, %r221, %r195;
	mul.wide.s32 	%rd145, %r762, 4;
	add.s64 	%rd147, %rd50, %rd145;
	st.shared.u32 	[%rd147], %r757;
	setp.eq.s32 	%p278, %r222, 999999999;
	@%p278 bra 	$L__BB0_161;
// %bb.214:                             // %oksrem3326
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p279, %r163, 3;
	add.s32 	%r765, %r222, %r195;
	mul.wide.s32 	%rd148, %r765, 4;
	add.s64 	%rd150, %rd50, %rd148;
	st.shared.u32 	[%rd150], %r757;
	bar.sync 	0;
	mov.u32 	%r90, %r757;
	mov.u32 	%r91, %r757;
	mov.u32 	%r92, %r757;
	mov.u32 	%r93, %r757;
	mov.u32 	%r94, %r757;
	mov.u32 	%r95, %r757;
	mov.u32 	%r96, %r757;
	mov.u32 	%r97, %r757;
	mov.u32 	%r98, %r757;
	mov.u32 	%r99, %r757;
	mov.u32 	%r100, %r757;
	mov.u32 	%r101, %r757;
	mov.u32 	%r102, %r757;
	mov.u32 	%r103, %r757;
	mov.u32 	%r104, %r757;
	mov.u32 	%r105, %r757;
	@%p279 bra 	$L__BB0_162;
// %bb.215:                             // %oksrem3393
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r766, %r194, %r184;
	ld.shared.u32 	%r90, [%rd8];
	ld.shared.u32 	%r91, [%rd9];
	ld.shared.u32 	%r92, [%rd10+12];
	ld.shared.u32 	%r93, [%rd11+12];
	ld.shared.u32 	%r94, [%rd10+24];
	ld.shared.u32 	%r95, [%rd11+24];
	ld.shared.u32 	%r96, [%rd10+36];
	ld.shared.u32 	%r97, [%rd11+36];
	add.s32 	%r767, %r766, 12;
	mul.hi.u32 	%r768, %r767, -1431655765;
	shr.u32 	%r769, %r768, 4;
	mul.lo.s32 	%r770, %r769, 24;
	sub.s32 	%r771, %r767, %r770;
	add.s32 	%r772, %r185, %r771;
	mul.wide.u32 	%rd151, %r772, 4;
	add.s64 	%rd153, %rd50, %rd151;
	ld.shared.u32 	%r98, [%rd153];
	add.s32 	%r773, %r186, %r771;
	mul.wide.u32 	%rd154, %r773, 4;
	add.s64 	%rd155, %rd50, %rd154;
	ld.shared.u32 	%r99, [%rd155];
	ld.shared.u32 	%r100, [%rd10+60];
	ld.shared.u32 	%r101, [%rd11+60];
	ld.shared.u32 	%r102, [%rd10+72];
	ld.shared.u32 	%r103, [%rd11+72];
	ld.shared.u32 	%r104, [%rd10+84];
	ld.shared.u32 	%r105, [%rd11+84];
$L__BB0_162:                            // %L10644
                                        //   in Loop: Header=BB0_197 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r775, %r110, 786432;
	add.s32 	%r109, %r189, %r775;
	add.s32 	%r2986, %r193, %r775;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r757;
$L__BB0_163:                            // %L10662
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2990, %r2986;
	setp.eq.s32 	%p280, %r111, 0;
	selp.b32 	%r1168, %r90, 0, %p280;
	setp.eq.s32 	%p281, %r111, 6;
	selp.b32 	%r1169, %r94, %r1168, %p281;
	setp.eq.s32 	%p282, %r111, 12;
	selp.b32 	%r1170, %r98, %r1169, %p282;
	setp.eq.s32 	%p283, %r111, 18;
	selp.b32 	%r1171, %r102, %r1170, %p283;
	selp.b32 	%r1172, %r91, 0, %p280;
	selp.b32 	%r1173, %r95, %r1172, %p281;
	selp.b32 	%r1174, %r99, %r1173, %p282;
	selp.b32 	%r1175, %r103, %r1174, %p283;
	selp.b32 	%r1176, %r92, 0, %p280;
	selp.b32 	%r1177, %r96, %r1176, %p281;
	selp.b32 	%r1178, %r100, %r1177, %p282;
	selp.b32 	%r1179, %r104, %r1178, %p283;
	selp.b32 	%r1180, %r93, 0, %p280;
	selp.b32 	%r1181, %r97, %r1180, %p281;
	selp.b32 	%r1182, %r101, %r1181, %p282;
	selp.b32 	%r1183, %r105, %r1182, %p283;
	mov.u16 	%rs92, 25600;
	// begin inline asm
	mov.b32 %r781, {%rs92, %rs92};
	// end inline asm
	mov.u16 	%rs94, 21504;
	// begin inline asm
	mov.b32 %r792, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r780, %r1171, -2004318072;
	mov.u32 	%r917, 983055;
	// begin inline asm
	lop3.b32 %r778, %r917, %r780, %r781, 202;
	// end inline asm
	mov.u16 	%rs98, 18432;
	// begin inline asm
	mov.b32 %r782, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r783, %r781, %r782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r778, %r783;
	// end inline asm
	mov.u32 	%r928, 15728880;
	// begin inline asm
	lop3.b32 %r789, %r928, %r780, %r792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r792, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	mov.b32 %r827, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r826, %r1175, -2004318072;
	// begin inline asm
	lop3.b32 %r824, %r917, %r826, %r827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r828, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r829, %r827, %r828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r832, %r824, %r829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r835, %r928, %r826, %r838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r839, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r840, %r838, %r839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r843, %r835, %r840;
	// end inline asm
	// begin inline asm
	mov.b32 %r873, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r872, %r1179, -2004318072;
	// begin inline asm
	lop3.b32 %r870, %r917, %r872, %r873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r874, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r875, %r873, %r874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r878, %r870, %r875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r881, %r928, %r872, %r884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r886, %r884, %r885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r889, %r881, %r886;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r918, %r1183, -2004318072;
	// begin inline asm
	lop3.b32 %r916, %r917, %r918, %r919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r921, %r919, %r920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r924, %r916, %r921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r927, %r928, %r918, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r164;
    mov.b32 {%r2re, %r2im}, %r786;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r960, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r165;
    mov.b32 {%r2re, %r2im}, %r832;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r963, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r166;
    mov.b32 {%r2re, %r2im}, %r797;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r966, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r167;
    mov.b32 {%r2re, %r2im}, %r843;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r969, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r164;
    mov.b32 {%r2re, %r2im}, %r878;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r972, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r165;
    mov.b32 {%r2re, %r2im}, %r924;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r975, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r166;
    mov.b32 {%r2re, %r2im}, %r889;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r978, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r167;
    mov.b32 {%r2re, %r2im}, %r935;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r981, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r984, %r985}, {%r280, %r283}, {%r960}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r991, %r992}, {%r280, %r283}, {%r963}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r998, %r999}, {%r280, %r283}, {%r966}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1005, %r1006}, {%r280, %r283}, {%r969}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1012, %r1013}, {%r280, %r283}, {%r972}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1019, %r1020}, {%r280, %r283}, {%r975}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1026, %r1027}, {%r280, %r283}, {%r978}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1033, %r1034}, {%r280, %r283}, {%r981}, {%r757, %r757};
	// end inline asm
	@%p1 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_164;
$L__BB0_216:                            // %pass4742
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1040, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1042, %r1040, %r985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1045, %r332, %r984, %r1042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1049, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1051, %r1049, %r992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1054, %r332, %r991, %r1051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1058, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1060, %r1058, %r999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1063, %r332, %r998, %r1060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1067, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1069, %r1067, %r1006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1072, %r332, %r1005, %r1069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1076, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1078, %r1076, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r332, %r1012, %r1078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1085, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r332, %r1019, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r332, %r1026, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r332, %r1033, %r1105;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1112, %r335, %r984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r332, %r985, %r1112;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1119, %r335, %r991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r332, %r992, %r1119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1126, %r335, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r332, %r999, %r1126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1133, %r335, %r1005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r332, %r1006, %r1133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r335, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r332, %r1013, %r1140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1147, %r335, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r332, %r1020, %r1147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r335, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r332, %r1027, %r1154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1161, %r335, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r332, %r1034, %r1161;
	// end inline asm
	mov.u32 	%r1333, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1184, %r1185}, {%r376, %r379}, {%r1045, %r1115}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1193, %r1194}, {%r376, %r379}, {%r1054, %r1122}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1202, %r1203}, {%r376, %r379}, {%r1063, %r1129}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1211, %r1212}, {%r376, %r379}, {%r1072, %r1136}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1220, %r1221}, {%r376, %r379}, {%r1081, %r1143}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1229, %r1230}, {%r376, %r379}, {%r1090, %r1150}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1238, %r1239}, {%r376, %r379}, {%r1099, %r1157}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1247, %r1248}, {%r376, %r379}, {%r1108, %r1164}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs103, %rs3, 10923;
	shr.u16 	%rs104, %rs103, 15;
	add.s16 	%rs105, %rs103, %rs104;
	mul.lo.s16 	%rs106, %rs105, 6;
	sub.s16 	%rs107, %rs3, %rs106;
	mul.wide.s16 	%r1366, %rs107, 16;
	add.s32 	%r1367, %r187, %r1366;
	mul.wide.s32 	%rd158, %r1367, 4;
	add.s64 	%rd160, %rd50, %rd158;
	ld.shared.u32 	%r1324, [%rd160];
	add.s32 	%r1368, %r188, %r1366;
	mul.wide.s32 	%rd161, %r1368, 4;
	add.s64 	%rd162, %rd50, %rd161;
	ld.shared.u32 	%r1331, [%rd162];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r388, %r391}, {%r1324}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r388, %r391}, {%r1331}, {%r1333, %r1333};
	// end inline asm
	@%p284 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_217;
$L__BB0_165:                            // %pass5238
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1334, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1336, %r1334, %r1321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1339, %r426, %r1320, %r1336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1343, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1345, %r1343, %r1328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1348, %r426, %r1327, %r1345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r429, %r1320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r426, %r1321, %r1352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r429, %r1327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r426, %r1328, %r1359;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1388, %r1391}, {%r472, %r475}, {%r1339, %r1355}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1399}, {%r472, %r475}, {%r1348, %r1362}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1388, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r1391, %r1391, %r1387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r1395, %r1395, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r1399, %r1399, %r1394;
	// end inline asm
	mov.u32 	%r1818, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r1402, %r1818, %r1398, %r1333;
	// end inline asm
	add.s32 	%r1821, %r88, %r111;
	add.s32 	%r1822, %r1821, 1;
	mul.hi.u32 	%r1823, %r1822, -1431655765;
	shr.u32 	%r1824, %r1823, 2;
	mul.lo.s32 	%r1825, %r1824, 6;
	sub.s32 	%r1826, %r1822, %r1825;
	shl.b32 	%r1827, %r1826, 4;
	add.s32 	%r1828, %r187, %r1827;
	mul.wide.u32 	%rd165, %r1828, 4;
	add.s64 	%rd167, %rd50, %rd165;
	ld.shared.u32 	%r1410, [%rd167];
	add.s32 	%r1829, %r188, %r1827;
	mul.wide.u32 	%rd168, %r1829, 4;
	add.s64 	%rd169, %rd50, %rd168;
	ld.shared.u32 	%r1417, [%rd169];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1427, %r1424}, {%r388, %r391}, {%r1410}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1436, %r1433}, {%r388, %r391}, {%r1417}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1420, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1422, %r1420, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r426, %r1427, %r1422;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r1429, %r1433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r426, %r1436, %r1431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r429, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r426, %r1424, %r1438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r429, %r1436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r426, %r1433, %r1445;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1471, %r1474}, {%r472, %r475}, {%r1425, %r1441}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1478, %r1482}, {%r472, %r475}, {%r1434, %r1448}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r1471, %r1471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r1474, %r1474, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r1478, %r1478, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r1482, %r1482, %r1477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r1818, %r1481, %r1402;
	// end inline asm
	add.s32 	%r1830, %r1821, 2;
	mul.hi.u32 	%r1831, %r1830, -1431655765;
	shr.u32 	%r1832, %r1831, 2;
	mul.lo.s32 	%r1833, %r1832, 6;
	sub.s32 	%r1834, %r1830, %r1833;
	shl.b32 	%r1835, %r1834, 4;
	add.s32 	%r1836, %r187, %r1835;
	mul.wide.u32 	%rd170, %r1836, 4;
	add.s64 	%rd171, %rd50, %rd170;
	ld.shared.u32 	%r1493, [%rd171];
	add.s32 	%r1837, %r188, %r1835;
	mul.wide.u32 	%rd172, %r1837, 4;
	add.s64 	%rd173, %rd50, %rd172;
	ld.shared.u32 	%r1500, [%rd173];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1510, %r1507}, {%r388, %r391}, {%r1493}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1519, %r1516}, {%r388, %r391}, {%r1500}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1503, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1505, %r1503, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r426, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1512, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r1512, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r426, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r429, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r426, %r1507, %r1521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1528, %r429, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1531, %r426, %r1516, %r1528;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1554, %r1557}, {%r472, %r475}, {%r1508, %r1524}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1561, %r1565}, {%r472, %r475}, {%r1517, %r1531}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r1554, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r1557, %r1557, %r1553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1561, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1565, %r1565, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r1818, %r1564, %r1485;
	// end inline asm
	cvt.u64.u32 	%rd174, %r109;
	add.s64 	%rd175, %rd174, %rd7;
	mul.hi.s64 	%rd176, %rd175, 3074457345618258603;
	shr.u64 	%rd177, %rd176, 63;
	shr.s64 	%rd178, %rd176, 27;
	add.s64 	%rd179, %rd178, %rd177;
	setp.lt.s64 	%p285, %rd175, 0;
	mul.lo.s64 	%rd180, %rd179, 805306368;
	setp.ne.s64 	%p286, %rd180, %rd175;
	and.pred  	%p287, %p285, %p286;
	selp.s64 	%rd181, -1, 0, %p287;
	add.s64 	%rd182, %rd179, %rd181;
	mul.lo.s64 	%rd183, %rd182, -805306368;
	add.s64 	%rd184, %rd183, %rd175;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd4, %rd185;
	st.global.u32 	[%rd186], %r1568;
	add.s32 	%r1838, %r110, 1;
	add.s32 	%r1839, %r1821, 3;
	mul.hi.u32 	%r1840, %r1839, -1431655765;
	shr.u32 	%r1841, %r1840, 2;
	mul.lo.s32 	%r1842, %r1841, 6;
	sub.s32 	%r1843, %r1839, %r1842;
	shl.b32 	%r1844, %r1843, 4;
	add.s32 	%r1845, %r187, %r1844;
	mul.wide.u32 	%rd187, %r1845, 4;
	add.s64 	%rd188, %rd50, %rd187;
	ld.shared.u32 	%r1576, [%rd188];
	add.s32 	%r1846, %r188, %r1844;
	mul.wide.u32 	%rd189, %r1846, 4;
	add.s64 	%rd190, %rd50, %rd189;
	ld.shared.u32 	%r1583, [%rd190];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1593, %r1590}, {%r388, %r391}, {%r1576}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1602, %r1599}, {%r388, %r391}, {%r1583}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1586, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1588, %r1586, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1591, %r426, %r1593, %r1588;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1595, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1595, %r1599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r426, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r429, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r426, %r1590, %r1604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r429, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r426, %r1599, %r1611;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1637, %r1640}, {%r472, %r475}, {%r1591, %r1607}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1644, %r1648}, {%r472, %r475}, {%r1600, %r1614}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1636, %r1637, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1648, %r1648, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r1818, %r1647, %r1333;
	// end inline asm
	add.s32 	%r1847, %r1821, 4;
	mul.hi.u32 	%r1848, %r1847, -1431655765;
	shr.u32 	%r1849, %r1848, 2;
	mul.lo.s32 	%r1850, %r1849, 6;
	sub.s32 	%r1851, %r1847, %r1850;
	shl.b32 	%r1852, %r1851, 4;
	add.s32 	%r1853, %r187, %r1852;
	mul.wide.u32 	%rd191, %r1853, 4;
	add.s64 	%rd192, %rd50, %rd191;
	ld.shared.u32 	%r1659, [%rd192];
	add.s32 	%r1854, %r188, %r1852;
	mul.wide.u32 	%rd193, %r1854, 4;
	add.s64 	%rd194, %rd50, %rd193;
	ld.shared.u32 	%r1666, [%rd194];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1676, %r1673}, {%r388, %r391}, {%r1659}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1685, %r1682}, {%r388, %r391}, {%r1666}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1669, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r1669, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r426, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1678, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r1678, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r426, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r429, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r426, %r1673, %r1687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r429, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r426, %r1682, %r1694;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1720, %r1723}, {%r472, %r475}, {%r1674, %r1690}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1727, %r1731}, {%r472, %r475}, {%r1683, %r1697}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1720, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1727, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r1731, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r1818, %r1730, %r1651;
	// end inline asm
	add.s32 	%r1855, %r1821, 5;
	mul.hi.u32 	%r1856, %r1855, -1431655765;
	shr.u32 	%r1857, %r1856, 2;
	mul.lo.s32 	%r1858, %r1857, 6;
	sub.s32 	%r1859, %r1855, %r1858;
	shl.b32 	%r1860, %r1859, 4;
	add.s32 	%r1861, %r187, %r1860;
	mul.wide.u32 	%rd195, %r1861, 4;
	add.s64 	%rd196, %rd50, %rd195;
	ld.shared.u32 	%r1742, [%rd196];
	add.s32 	%r1862, %r188, %r1860;
	mul.wide.u32 	%rd197, %r1862, 4;
	add.s64 	%rd198, %rd50, %rd197;
	ld.shared.u32 	%r1749, [%rd198];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1759, %r1756}, {%r388, %r391}, {%r1742}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1768, %r1765}, {%r388, %r391}, {%r1749}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r426, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r426, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r429, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r426, %r1756, %r1770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r429, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r426, %r1765, %r1777;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1806}, {%r472, %r475}, {%r1757, %r1773}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1814}, {%r472, %r475}, {%r1766, %r1780}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1803, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1818, %r1813, %r1734;
	// end inline asm
	and.b32  	%r1863, %r1838, 1023;
	mad.lo.s32 	%r1864, %r1863, 786432, %r189;
	cvt.u64.u32 	%rd199, %r1864;
	add.s64 	%rd200, %rd199, %rd7;
	mul.hi.s64 	%rd201, %rd200, 3074457345618258603;
	shr.u64 	%rd202, %rd201, 63;
	shr.s64 	%rd203, %rd201, 27;
	add.s64 	%rd204, %rd203, %rd202;
	setp.lt.s64 	%p288, %rd200, 0;
	mul.lo.s64 	%rd205, %rd204, 805306368;
	setp.ne.s64 	%p289, %rd205, %rd200;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd206, -1, 0, %p290;
	add.s64 	%rd207, %rd204, %rd206;
	mul.lo.s64 	%rd208, %rd207, -805306368;
	add.s64 	%rd209, %rd208, %rd200;
	shl.b64 	%rd210, %rd209, 2;
	add.s64 	%rd211, %rd4, %rd210;
	st.global.u32 	[%rd211], %r1817;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s32 	%r109, %r109, 1572864;
	add.s16 	%rs3, %rs3, 6;
	setp.eq.s32 	%p291, %r111, 24;
	add.s32 	%r2986, %r2990, 1572864;
	@%p291 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L17294.preheader
                                        //   in Loop: Header=BB0_197 Depth=1
	mov.u16 	%rs194, %rs1;
	mov.u32 	%r2992, %r1333;
$L__BB0_167:                            // %L17294
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p292, %r2992, 0;
	selp.b32 	%r2892, %r90, 0, %p292;
	setp.eq.s32 	%p293, %r2992, 6;
	selp.b32 	%r2893, %r94, %r2892, %p293;
	setp.eq.s32 	%p294, %r2992, 12;
	selp.b32 	%r2894, %r98, %r2893, %p294;
	setp.eq.s32 	%p295, %r2992, 18;
	selp.b32 	%r2895, %r102, %r2894, %p295;
	selp.b32 	%r2896, %r91, 0, %p292;
	selp.b32 	%r2897, %r95, %r2896, %p293;
	selp.b32 	%r2898, %r99, %r2897, %p294;
	selp.b32 	%r2899, %r103, %r2898, %p295;
	selp.b32 	%r2900, %r92, 0, %p292;
	selp.b32 	%r2901, %r96, %r2900, %p293;
	selp.b32 	%r2902, %r100, %r2901, %p294;
	selp.b32 	%r2903, %r104, %r2902, %p295;
	selp.b32 	%r2904, %r93, 0, %p292;
	selp.b32 	%r2905, %r97, %r2904, %p293;
	selp.b32 	%r2906, %r101, %r2905, %p294;
	selp.b32 	%r2907, %r105, %r2906, %p295;
	// begin inline asm
	mov.b32 %r1893, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1904, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2908, %r2895, 8;
	xor.b32  	%r1903, %r2908, 8947848;
	// begin inline asm
	lop3.b32 %r1890, %r917, %r1903, %r1893, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1894, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1895, %r1893, %r1894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1898, %r1890, %r1895;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1901, %r928, %r1903, %r1904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1905, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1906, %r1904, %r1905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1909, %r1901, %r1906;
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2909, %r2899, 8;
	xor.b32  	%r1949, %r2909, 8947848;
	// begin inline asm
	lop3.b32 %r1936, %r917, %r1949, %r1939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1941, %r1939, %r1940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1944, %r1936, %r1941;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1947, %r928, %r1949, %r1950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1951, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1952, %r1950, %r1951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1955, %r1947, %r1952;
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2910, %r2903, 8;
	xor.b32  	%r1995, %r2910, 8947848;
	// begin inline asm
	lop3.b32 %r1982, %r917, %r1995, %r1985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1987, %r1985, %r1986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1990, %r1982, %r1987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1993, %r928, %r1995, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1998, %r1996, %r1997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2001, %r1993, %r1998;
	// end inline asm
	// begin inline asm
	mov.b32 %r2031, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2042, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2911, %r2907, 8;
	xor.b32  	%r2041, %r2911, 8947848;
	// begin inline asm
	lop3.b32 %r2028, %r917, %r2041, %r2031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2032, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2033, %r2031, %r2032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2036, %r2028, %r2033;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2039, %r928, %r2041, %r2042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2044, %r2042, %r2043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2047, %r2039, %r2044;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r164;
    mov.b32 {%r2re, %r2im}, %r1898;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2050, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r165;
    mov.b32 {%r2re, %r2im}, %r1944;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2053, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r166;
    mov.b32 {%r2re, %r2im}, %r1909;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2056, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r167;
    mov.b32 {%r2re, %r2im}, %r1955;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2059, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r164;
    mov.b32 {%r2re, %r2im}, %r1990;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2062, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r165;
    mov.b32 {%r2re, %r2im}, %r2036;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2065, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r166;
    mov.b32 {%r2re, %r2im}, %r2001;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2068, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r167;
    mov.b32 {%r2re, %r2im}, %r2047;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2071, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2137, %r2134}, {%r280, %r283}, {%r2050}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2146, %r2143}, {%r280, %r283}, {%r2053}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2155, %r2152}, {%r280, %r283}, {%r2056}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2164, %r2161}, {%r280, %r283}, {%r2059}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2173, %r2170}, {%r280, %r283}, {%r2062}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2182, %r2179}, {%r280, %r283}, {%r2065}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2191, %r2188}, {%r280, %r283}, {%r2068}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2200, %r2197}, {%r280, %r283}, {%r2071}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2130, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r2130, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r332, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2139, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r2139, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r332, %r2146, %r2141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2148, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r2148, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r332, %r2155, %r2150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2157, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r2157, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r332, %r2164, %r2159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2166, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r2166, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r332, %r2173, %r2168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2175, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2177, %r2175, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2180, %r332, %r2182, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2184, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r332, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r2193, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r332, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r335, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r332, %r2134, %r2202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r335, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r332, %r2143, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r335, %r2155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r332, %r2152, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r335, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r332, %r2161, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r335, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r332, %r2170, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r335, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r332, %r2179, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r335, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r332, %r2188, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r335, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r332, %r2197, %r2251;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2258, %r2259}, {%r376, %r379}, {%r2135, %r2205}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2267, %r2268}, {%r376, %r379}, {%r2144, %r2212}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2276, %r2277}, {%r376, %r379}, {%r2153, %r2219}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2285, %r2286}, {%r376, %r379}, {%r2162, %r2226}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2294, %r2295}, {%r376, %r379}, {%r2171, %r2233}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2303, %r2304}, {%r376, %r379}, {%r2180, %r2240}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2312, %r2313}, {%r376, %r379}, {%r2189, %r2247}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2321, %r2322}, {%r376, %r379}, {%r2198, %r2254}, {%r1333, %r1333}, %r190, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs156, %rs194, -5;
	mul.hi.s16 	%rs157, %rs156, 10923;
	shr.u16 	%rs158, %rs157, 15;
	add.s16 	%rs159, %rs157, %rs158;
	mul.lo.s16 	%rs160, %rs159, 6;
	sub.s16 	%rs161, %rs156, %rs160;
	mul.wide.s16 	%r2912, %rs161, 16;
	add.s32 	%r2913, %r187, %r2912;
	mul.wide.s32 	%rd212, %r2913, 4;
	add.s64 	%rd214, %rd50, %rd212;
	ld.shared.u32 	%r2398, [%rd214];
	add.s32 	%r2914, %r188, %r2912;
	mul.wide.s32 	%rd215, %r2914, 4;
	add.s64 	%rd216, %rd50, %rd215;
	ld.shared.u32 	%r2405, [%rd216];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2415, %r2412}, {%r388, %r391}, {%r2398}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2424, %r2421}, {%r388, %r391}, {%r2405}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2408, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2410, %r2408, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2413, %r426, %r2415, %r2410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2417, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r2417, %r2421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r426, %r2424, %r2419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r429, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r426, %r2412, %r2426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r429, %r2424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r426, %r2421, %r2433;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2459, %r2462}, {%r472, %r475}, {%r2413, %r2429}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2466, %r2470}, {%r472, %r475}, {%r2422, %r2436}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2458, %r2459, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2461, %r2462, %r2462, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r2466, %r2466, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r2470, %r2470, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2473, %r1818, %r2469, %r1333;
	// end inline asm
	add.s16 	%rs162, %rs194, -4;
	mul.hi.s16 	%rs163, %rs162, 10923;
	shr.u16 	%rs164, %rs163, 15;
	add.s16 	%rs165, %rs163, %rs164;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs162, %rs166;
	mul.wide.s16 	%r2915, %rs167, 16;
	add.s32 	%r2916, %r187, %r2915;
	mul.wide.s32 	%rd217, %r2916, 4;
	add.s64 	%rd218, %rd50, %rd217;
	ld.shared.u32 	%r2481, [%rd218];
	add.s32 	%r2917, %r188, %r2915;
	mul.wide.s32 	%rd219, %r2917, 4;
	add.s64 	%rd220, %rd50, %rd219;
	ld.shared.u32 	%r2488, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r388, %r391}, {%r2481}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2507, %r2504}, {%r388, %r391}, {%r2488}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r426, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2500, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r2500, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r426, %r2507, %r2502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r429, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r426, %r2495, %r2509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r429, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r426, %r2504, %r2516;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2542, %r2545}, {%r472, %r475}, {%r2496, %r2512}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2549, %r2553}, {%r472, %r475}, {%r2505, %r2519}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2541, %r2542, %r2542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2544, %r2545, %r2545, %r2541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r2549, %r2549, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r2553, %r2553, %r2548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2556, %r1818, %r2552, %r2473;
	// end inline asm
	add.s16 	%rs168, %rs194, -3;
	mul.hi.s16 	%rs169, %rs168, 10923;
	shr.u16 	%rs170, %rs169, 15;
	add.s16 	%rs171, %rs169, %rs170;
	mul.lo.s16 	%rs172, %rs171, 6;
	sub.s16 	%rs173, %rs168, %rs172;
	mul.wide.s16 	%r2918, %rs173, 16;
	add.s32 	%r2919, %r187, %r2918;
	mul.wide.s32 	%rd221, %r2919, 4;
	add.s64 	%rd222, %rd50, %rd221;
	ld.shared.u32 	%r2564, [%rd222];
	add.s32 	%r2920, %r188, %r2918;
	mul.wide.s32 	%rd223, %r2920, 4;
	add.s64 	%rd224, %rd50, %rd223;
	ld.shared.u32 	%r2571, [%rd224];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2581, %r2578}, {%r388, %r391}, {%r2564}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2590, %r2587}, {%r388, %r391}, {%r2571}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2574, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2576, %r2574, %r2578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r426, %r2581, %r2576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2583, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2585, %r2583, %r2587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2588, %r426, %r2590, %r2585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2592, %r429, %r2581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2595, %r426, %r2578, %r2592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2599, %r429, %r2590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2602, %r426, %r2587, %r2599;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2625, %r2628}, {%r472, %r475}, {%r2579, %r2595}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2636}, {%r472, %r475}, {%r2588, %r2602}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2625, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2627, %r2628, %r2628, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r2632, %r2632, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2635, %r2636, %r2636, %r2631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2639, %r1818, %r2635, %r2556;
	// end inline asm
	cvt.u64.u32 	%rd225, %r2990;
	add.s64 	%rd226, %rd225, %rd7;
	mul.hi.s64 	%rd227, %rd226, 3074457345618258603;
	shr.u64 	%rd228, %rd227, 63;
	shr.s64 	%rd229, %rd227, 27;
	add.s64 	%rd230, %rd229, %rd228;
	setp.lt.s64 	%p296, %rd226, 0;
	mul.lo.s64 	%rd231, %rd230, 805306368;
	setp.ne.s64 	%p297, %rd231, %rd226;
	and.pred  	%p298, %p296, %p297;
	selp.s64 	%rd232, -1, 0, %p298;
	add.s64 	%rd233, %rd230, %rd232;
	mul.lo.s64 	%rd234, %rd233, -805306368;
	add.s64 	%rd235, %rd234, %rd226;
	shl.b64 	%rd236, %rd235, 2;
	add.s64 	%rd237, %rd4, %rd236;
	st.global.u32 	[%rd237], %r2639;
	add.s32 	%r2921, %r110, 1;
	add.s16 	%rs174, %rs194, -2;
	mul.hi.s16 	%rs175, %rs174, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs174, %rs178;
	mul.wide.s16 	%r2922, %rs179, 16;
	add.s32 	%r2923, %r187, %r2922;
	mul.wide.s32 	%rd238, %r2923, 4;
	add.s64 	%rd239, %rd50, %rd238;
	ld.shared.u32 	%r2647, [%rd239];
	add.s32 	%r2924, %r188, %r2922;
	mul.wide.s32 	%rd240, %r2924, 4;
	add.s64 	%rd241, %rd50, %rd240;
	ld.shared.u32 	%r2654, [%rd241];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2664, %r2661}, {%r388, %r391}, {%r2647}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2673, %r2670}, {%r388, %r391}, {%r2654}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r426, %r2664, %r2659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r426, %r2673, %r2668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r429, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r426, %r2661, %r2675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r429, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r426, %r2670, %r2682;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2708, %r2711}, {%r472, %r475}, {%r2662, %r2678}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2715, %r2719}, {%r472, %r475}, {%r2671, %r2685}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2708, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2710, %r2711, %r2711, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r2715, %r2715, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r2719, %r2719, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r1818, %r2718, %r1333;
	// end inline asm
	add.s16 	%rs180, %rs194, -1;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2925, %rs185, 16;
	add.s32 	%r2926, %r187, %r2925;
	mul.wide.s32 	%rd242, %r2926, 4;
	add.s64 	%rd243, %rd50, %rd242;
	ld.shared.u32 	%r2730, [%rd243];
	add.s32 	%r2927, %r188, %r2925;
	mul.wide.s32 	%rd244, %r2927, 4;
	add.s64 	%rd245, %rd50, %rd244;
	ld.shared.u32 	%r2737, [%rd245];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2747, %r2744}, {%r388, %r391}, {%r2730}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2756, %r2753}, {%r388, %r391}, {%r2737}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2740, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r2740, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r426, %r2747, %r2742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2749, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r2749, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r426, %r2756, %r2751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2758, %r429, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r426, %r2744, %r2758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r429, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r426, %r2753, %r2765;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2791, %r2794}, {%r472, %r475}, {%r2745, %r2761}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2802}, {%r472, %r475}, {%r2754, %r2768}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r2791, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r2794, %r2794, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r1818, %r2801, %r2722;
	// end inline asm
	mul.hi.s16 	%rs186, %rs194, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs194, %rs189;
	mul.wide.s16 	%r2928, %rs190, 16;
	add.s32 	%r2929, %r187, %r2928;
	mul.wide.s32 	%rd246, %r2929, 4;
	add.s64 	%rd247, %rd50, %rd246;
	ld.shared.u32 	%r2813, [%rd247];
	add.s32 	%r2930, %r188, %r2928;
	mul.wide.s32 	%rd248, %r2930, 4;
	add.s64 	%rd249, %rd50, %rd248;
	ld.shared.u32 	%r2820, [%rd249];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2830, %r2827}, {%r388, %r391}, {%r2813}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2839, %r2836}, {%r388, %r391}, {%r2820}, {%r1333, %r1333};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2823, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2825, %r2823, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r426, %r2830, %r2825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2832, %r429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r2832, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r426, %r2839, %r2834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2841, %r429, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r426, %r2827, %r2841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r429, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r426, %r2836, %r2848;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2874, %r2877}, {%r472, %r475}, {%r2828, %r2844}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2881, %r2885}, {%r472, %r475}, {%r2837, %r2851}, {%r1333, %r1333}, %r243, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2873, %r2874, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r2877, %r2877, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r2881, %r2881, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r2885, %r2885, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r1818, %r2884, %r2805;
	// end inline asm
	and.b32  	%r2931, %r2921, 1023;
	mad.lo.s32 	%r2932, %r2931, 786432, %r189;
	cvt.u64.u32 	%rd250, %r2932;
	add.s64 	%rd251, %rd250, %rd7;
	mul.hi.s64 	%rd252, %rd251, 3074457345618258603;
	shr.u64 	%rd253, %rd252, 63;
	shr.s64 	%rd254, %rd252, 27;
	add.s64 	%rd255, %rd254, %rd253;
	setp.lt.s64 	%p299, %rd251, 0;
	mul.lo.s64 	%rd256, %rd255, 805306368;
	setp.ne.s64 	%p300, %rd256, %rd251;
	and.pred  	%p301, %p299, %p300;
	selp.s64 	%rd257, -1, 0, %p301;
	add.s64 	%rd258, %rd255, %rd257;
	mul.lo.s64 	%rd259, %rd258, -805306368;
	add.s64 	%rd260, %rd259, %rd251;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r2888;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r2992, %r2992, 6;
	add.s32 	%r2990, %r2990, 1572864;
	add.s16 	%rs194, %rs194, 6;
	setp.ne.s32 	%p302, %r2992, 24;
	@%p302 bra 	$L__BB0_167;
// %bb.168:                             // %L23924
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r134, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p303, %r88, 432;
	mov.u32 	%r88, %r134;
	@%p303 bra 	$L__BB0_197;
$L__BB0_169:                            // %L23936
	mov.u32 	%r2933, 0;
	st.global.u32 	[%rd6], %r2933;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd156, exception1913;
	cvta.global.u64 	%rd157, %rd156;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd157;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_217:                            // %post_box_union5233
	mov.u64 	%rd163, exception1913;
	cvta.global.u64 	%rd164, %rd163;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd164;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5150
	mov.u32 	%r2949, 5;
	st.global.u32 	[%rd6], %r2949;
	mov.u64 	%rd293, exception1873;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5310
	mov.u32 	%r2948, 5;
	st.global.u32 	[%rd6], %r2948;
	mov.u64 	%rd291, exception1873;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5470
	mov.u32 	%r2947, 5;
	st.global.u32 	[%rd6], %r2947;
	mov.u64 	%rd289, exception1873;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5630
	mov.u32 	%r2946, 5;
	st.global.u32 	[%rd6], %r2946;
	mov.u64 	%rd287, exception1873;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5790
	mov.u32 	%r2945, 5;
	st.global.u32 	[%rd6], %r2945;
	mov.u64 	%rd285, exception1873;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5950
	mov.u32 	%r2944, 5;
	st.global.u32 	[%rd6], %r2944;
	mov.u64 	%rd283, exception1873;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6110
	mov.u32 	%r2943, 5;
	st.global.u32 	[%rd6], %r2943;
	mov.u64 	%rd281, exception1873;
	cvta.global.u64 	%rd282, %rd281;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd282;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6270
	mov.u32 	%r2942, 5;
	st.global.u32 	[%rd6], %r2942;
	mov.u64 	%rd279, exception1873;
	cvta.global.u64 	%rd280, %rd279;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd280;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6430
	mov.u32 	%r2941, 5;
	st.global.u32 	[%rd6], %r2941;
	mov.u64 	%rd277, exception1873;
	cvta.global.u64 	%rd278, %rd277;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd278;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6590
	mov.u32 	%r2940, 5;
	st.global.u32 	[%rd6], %r2940;
	mov.u64 	%rd275, exception1873;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6776
	mov.u32 	%r2939, 5;
	st.global.u32 	[%rd6], %r2939;
	mov.u64 	%rd273, exception1873;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6936
	mov.u32 	%r2938, 5;
	st.global.u32 	[%rd6], %r2938;
	mov.u64 	%rd271, exception1873;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7096
	mov.u32 	%r2937, 5;
	st.global.u32 	[%rd6], %r2937;
	mov.u64 	%rd269, exception1873;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7256
	mov.u32 	%r2936, 5;
	st.global.u32 	[%rd6], %r2936;
	mov.u64 	%rd267, exception1873;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7416
	mov.u32 	%r2935, 5;
	st.global.u32 	[%rd6], %r2935;
	mov.u64 	%rd265, exception1873;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7576
	mov.u32 	%r2934, 5;
	st.global.u32 	[%rd6], %r2934;
	mov.u64 	%rd263, exception1873;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r2951, 2;
	st.global.u32 	[%rd6], %r2951;
	mov.u64 	%rd297, exception1873;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r2950, 3;
	st.global.u32 	[%rd6], %r2950;
	mov.u64 	%rd295, exception1873;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r258, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r485, [retval0+0];
	} // callseq 49
	mov.u32 	%r487, 4;
	st.global.u32 	[%rd6], %r487;
	mov.u64 	%rd26, exception1873;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
