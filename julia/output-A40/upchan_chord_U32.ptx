// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_7500
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1284[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<246>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2458>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<153>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r141, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd54, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r142, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r142, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd71, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd55, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r143, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r144, %r143, %r4;
	or.b32  	%r145, %r144, %r2;
	mul.wide.u32 	%rd77, %r145, 4;
	add.s64 	%rd4, %rd71, %rd77;
	mov.u32 	%r146, 1;
	st.global.u32 	[%rd4], %r146;
	ld.global.u32 	%r5, [%rd55];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L205
	ld.param.u64 	%rd59, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd59];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L215
	ld.param.u64 	%rd63, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd63];
	sub.s32 	%r147, %r6, %r5;
	and.b32  	%r148, %r147, 255;
	setp.ne.s32 	%p6, %r148, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L221
	ld.param.u64 	%rd67, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd67];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L231
	sub.s32 	%r149, %r8, %r7;
	add.s32 	%r150, %r149, 3;
	and.b32  	%r151, %r150, 7;
	setp.eq.s32 	%p12, %r151, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L341
	bfe.u32 	%r16, %r4, 1, 1;
	and.b32  	%r17, %r4, 1;
	bfe.u32 	%r18, %r4, 2, 1;
	shl.b32 	%r155, %r18, 1;
	shl.b32 	%r156, %r17, 2;
	shl.b32 	%r157, %r16, 3;
	or.b32  	%r158, %r156, %r157;
	or.b32  	%r159, %r155, %r158;
	shr.u32 	%r19, %r4, 4;
	or.b32  	%r20, %r19, %r159;
	or.b32  	%r21, %r20, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r20;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r160, %f193;
	and.b32  	%r161, %r160, -2147483648;
	or.b32  	%r162, %r161, 1056964608;
	mov.b32 	%f194, %r162;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L529
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L532
	cvt.rzi.s32.f32 	%r163, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r21;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r167, %f227;
	and.b32  	%r168, %r167, -2147483648;
	or.b32  	%r169, %r168, 1056964608;
	mov.b32 	%f228, %r169;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r170, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L549
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L552
	add.s32 	%r164, %r163, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r171, %r170, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r177, %r20, 32;
	or.b32  	%r23, %r20, 48;
	cvt.rn.f32.s32 	%f255, %r177;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r178, %f262;
	and.b32  	%r179, %r178, -2147483648;
	or.b32  	%r180, %r179, 1056964608;
	mov.b32 	%f263, %r180;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r181, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r182, %r181, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L631
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L634
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r165, %r164, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r172, %r171, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r183, %r182, 1;
	cvt.rn.f32.s32 	%f289, %r23;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r185, %f296;
	and.b32  	%r186, %r185, -2147483648;
	or.b32  	%r187, %r186, 1056964608;
	mov.b32 	%f297, %r187;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r188, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r189, %r188, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r190, %r189, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L651
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L654
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r165, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r172, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r183, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r190, 1;
	or.b32  	%r195, %r20, 64;
	or.b32  	%r25, %r20, 80;
	cvt.rn.f32.s32 	%f324, %r195;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r196, %f331;
	and.b32  	%r197, %r196, -2147483648;
	or.b32  	%r198, %r197, 1056964608;
	mov.b32 	%f332, %r198;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r199, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r200, %r199, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r201, %r200, 1;
	setp.eq.b32 	%p40, %r201, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L733
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L736
	shl.b32 	%r9, %r4, 2;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r166, %r164, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r173, %r171, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r184, %r182, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r191, %r189, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r202, %r200, 2;
	cvt.rn.f32.s32 	%f358, %r25;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r203, %f365;
	and.b32  	%r204, %r203, -2147483648;
	or.b32  	%r205, %r204, 1056964608;
	mov.b32 	%f366, %r205;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r206, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r207, %r206, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r208, %r207, 1;
	setp.eq.b32 	%p46, %r208, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r209, %r207, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L753
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L756
	and.b32  	%r10, %r9, 4;
	shl.b32 	%r11, %r4, 1;
	and.b32  	%r13, %r4, 18;
	setp.eq.s32 	%p17, %r166, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r173, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r184, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r191, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r202, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r209, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r213, %r20, 96;
	or.b32  	%r27, %r20, 112;
	cvt.rn.f32.s32 	%f393, %r213;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r214, %f400;
	and.b32  	%r215, %r214, -2147483648;
	or.b32  	%r216, %r215, 1056964608;
	mov.b32 	%f401, %r216;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r217, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r218, %r217, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r219, %r218, 1;
	setp.eq.b32 	%p52, %r219, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r220, %r218, 2;
	setp.eq.s32 	%p53, %r220, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L835
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L838
	and.b32  	%r12, %r11, 8;
	or.b32  	%r152, %r13, %r10;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r27;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r221, %f434;
	and.b32  	%r222, %r221, -2147483648;
	or.b32  	%r223, %r222, 1056964608;
	mov.b32 	%f435, %r223;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r224, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r225, %r224, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r226, %r225, 1;
	setp.eq.b32 	%p58, %r226, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r227, %r225, 2;
	setp.eq.s32 	%p59, %r227, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L855
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L858
	or.b32  	%r153, %r152, %r12;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r29, %r20, 31;
	cvt.rn.f32.s32 	%f461, %r29;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r31, %f899;
	and.b32  	%r231, %r31, 8388607;
	or.b32  	%r2428, %r231, 1065353216;
	mov.b32 	%f898, %r2428;
	add.s32 	%r232, %r31, -1073741824;
	and.b32  	%r2429, %r232, -8388608;
	setp.eq.s32 	%p68, %r2429, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r233, %r2429, 192937984;
	add.s32 	%r234, %r233, %r2428;
	mov.b32 	%f473, %r234;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2429, %r2429, %r233;
	mov.b32 	%r2428, %f898;
	setp.ne.s32 	%p69, %r2429, 0;
	setp.ne.s32 	%p70, %r2428, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r31, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f41, %f897, 0fC0000000, %f899;
	mov.b32 	%r30, %f41;
	setp.lt.u32 	%p63, %r30, 1073741824;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r30, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r154, %r153, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r235, %f38;
	and.b32  	%r236, %r235, -2147483648;
	mov.b32 	%r237, %f899;
	or.b32  	%r238, %r236, %r237;
	mov.b32 	%f899, %r238;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd78, %r154, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r239, %f483;
	and.b32  	%r240, %r239, -2147483648;
	or.b32  	%r241, %r240, 1056964608;
	mov.b32 	%f484, %r241;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r242, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r243, %r242, 1;
	setp.eq.b32 	%p76, %r243, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r244, %r242, 2;
	setp.eq.s32 	%p77, %r244, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r245, %r242, 1;
	and.b32  	%r246, %r245, 2;
	setp.eq.s32 	%p78, %r246, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r247, %r29, 496;
	cvt.rn.f32.s32 	%f513, %r247;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r39, %f903;
	and.b32  	%r248, %r39, 8388607;
	or.b32  	%r2430, %r248, 1065353216;
	mov.b32 	%f902, %r2430;
	add.s32 	%r249, %r39, -1073741824;
	and.b32  	%r2431, %r249, -8388608;
	setp.eq.s32 	%p88, %r2431, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i893.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %__nv_fmaf_rn.exit4.i.i.i893
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r250, %r2431, 192937984;
	add.s32 	%r251, %r250, %r2430;
	mov.b32 	%f525, %r251;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2431, %r2431, %r250;
	mov.b32 	%r2430, %f902;
	setp.ne.s32 	%p89, %r2431, 0;
	setp.ne.s32 	%p90, %r2430, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i895
	setp.gt.u32 	%p92, %r39, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i865
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f60, %f901, 0fC0000000, %f903;
	mov.b32 	%r38, %f60;
	setp.lt.u32 	%p83, %r38, 1073741824;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r38, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i870
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i874
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i899
	add.s64 	%rd79, %rd1, %rd78;
	mov.b32 	%r176, %f254;
	mov.b32 	%r175, %f6;
	mov.b32 	%r194, %f323;
	mov.b32 	%r193, %f15;
	mov.b32 	%r212, %f392;
	mov.b32 	%r211, %f24;
	mov.b32 	%r230, %f460;
	mov.b32 	%r229, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r252, %f57;
	and.b32  	%r253, %r252, -2147483648;
	mov.b32 	%r254, %f903;
	or.b32  	%r255, %r253, %r254;
	mov.b32 	%f903, %r255;
LBB0_52:                                // %__nv_fmodf.exit900
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r14, [%rd79];
	shr.u32 	%r15, %r4, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r174, %r176, %r175;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r192, %r194, %r193;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r210, %r212, %r211;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r228, %r230, %r229;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r262, %f535;
	and.b32  	%r263, %r262, -2147483648;
	or.b32  	%r264, %r263, 1056964608;
	mov.b32 	%f536, %r264;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r265, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r266, %r265, 1;
	setp.eq.b32 	%p96, %r266, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r267, %r265, 2;
	setp.eq.s32 	%p97, %r267, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r268, %r265, 1;
	and.b32  	%r269, %r268, 2;
	setp.eq.s32 	%p98, %r269, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r258, %f566;
	mov.b32 	%r257, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r258, %r257;
	// end inline asm
	mov.b32 	%r261, %f563;
	mov.b32 	%r260, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r261, %r260;
	// end inline asm
	mov.u64 	%rd139, 2;
	mov.u64 	%rd140, %rd139;
LBB0_53:                                // %L970.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd140, %rd140, %rd140;
	add.s64 	%rd139, %rd139, -1;
	setp.ne.s64 	%p101, %rd139, 0;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L972
	and.b64  	%rd81, %rd140, 9223372036854775807;
	setp.ne.s64 	%p102, %rd81, 16;
	@%p102 bra 	LBB0_132;
// %bb.55:                              // %L979
	shr.u32 	%r48, %r4, 3;
	and.b32  	%r270, %r48, 2;
	or.b32  	%r49, %r18, %r270;
	and.b32  	%r271, %r15, 4;
	or.b32  	%r50, %r49, %r271;
	and.b32  	%r272, %r4, 3;
	mul.lo.s32 	%r273, %r272, %r50;
	shl.b32 	%r274, %r273, 1;
	neg.s32 	%r275, %r274;
	cvt.rn.f32.s32 	%f567, %r275;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r52, %f907;
	and.b32  	%r276, %r52, 8388607;
	or.b32  	%r2432, %r276, 1065353216;
	mov.b32 	%f906, %r2432;
	add.s32 	%r277, %r52, -1073741824;
	and.b32  	%r2433, %r277, -8388608;
	setp.eq.s32 	%p110, %r2433, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i939.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %__nv_fmaf_rn.exit4.i.i.i939
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r2433, 192937984;
	add.s32 	%r279, %r278, %r2432;
	mov.b32 	%f579, %r279;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2433, %r2433, %r278;
	mov.b32 	%r2432, %f906;
	setp.ne.s32 	%p111, %r2433, 0;
	setp.ne.s32 	%p112, %r2432, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i941
	setp.gt.u32 	%p114, %r52, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i911
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f77, %f905, 0fC0000000, %f907;
	mov.b32 	%r51, %f77;
	setp.lt.u32 	%p105, %r51, 1073741824;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r51, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p109;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i916
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p108;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i920
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i945
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r280, %f74;
	and.b32  	%r281, %r280, -2147483648;
	mov.b32 	%r282, %f907;
	or.b32  	%r283, %r281, %r282;
	mov.b32 	%f907, %r283;
LBB0_69:                                // %__nv_fmodf.exit946
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r284, %f589;
	and.b32  	%r285, %r284, -2147483648;
	or.b32  	%r286, %r285, 1056964608;
	mov.b32 	%f590, %r286;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r287, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r288, %r287, 1;
	setp.eq.b32 	%p118, %r288, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r289, %r287, 2;
	setp.eq.s32 	%p119, %r289, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r290, %r287, 1;
	and.b32  	%r291, %r290, 2;
	setp.eq.s32 	%p120, %r291, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r292, %r11, 6;
	mov.u32 	%r293, -8;
	sub.s32 	%r294, %r293, %r292;
	mul.lo.s32 	%r295, %r50, %r294;
	cvt.rn.f32.s32 	%f619, %r295;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r60, %f911;
	and.b32  	%r296, %r60, 8388607;
	or.b32  	%r2434, %r296, 1065353216;
	mov.b32 	%f910, %r2434;
	add.s32 	%r297, %r60, -1073741824;
	and.b32  	%r2435, %r297, -8388608;
	setp.eq.s32 	%p130, %r2435, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r2435, 192937984;
	add.s32 	%r299, %r298, %r2434;
	mov.b32 	%f631, %r299;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2435, %r2435, %r298;
	mov.b32 	%r2434, %f910;
	setp.ne.s32 	%p131, %r2435, 0;
	setp.ne.s32 	%p132, %r2434, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p134, %r60, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i957
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f96, %f909, 0fC0000000, %f911;
	mov.b32 	%r59, %f96;
	setp.lt.u32 	%p125, %r59, 1073741824;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r59, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p129;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i962
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p128;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i966
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i991
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r300, %f93;
	and.b32  	%r301, %r300, -2147483648;
	mov.b32 	%r302, %f911;
	or.b32  	%r303, %r301, %r302;
	mov.b32 	%f911, %r303;
LBB0_83:                                // %__nv_fmodf.exit992
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r316, %f641;
	and.b32  	%r317, %r316, -2147483648;
	or.b32  	%r318, %r317, 1056964608;
	mov.b32 	%f642, %r318;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r319, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r320, %r319, 1;
	setp.eq.b32 	%p138, %r320, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r321, %r319, 2;
	setp.eq.s32 	%p139, %r321, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r322, %r319, 1;
	and.b32  	%r323, %r322, 2;
	setp.eq.s32 	%p140, %r323, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r306, %f672;
	mov.b32 	%r305, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r67, %r306, %r305;
	// end inline asm
	mov.b32 	%r312, %f669;
	xor.b32  	%r309, %r312, -2147483648;
	mov.b32 	%r311, %f91;
	xor.b32  	%r308, %r311, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r68, %r309, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r306, %r305;
	// end inline asm
	mov.u64 	%rd141, 2;
	mov.u64 	%rd142, %rd141;
LBB0_84:                                // %L1151.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd142, %rd142, %rd142;
	add.s64 	%rd141, %rd141, -1;
	setp.ne.s64 	%p143, %rd141, 0;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1153
	and.b64  	%rd85, %rd142, 9223372036854775807;
	setp.ne.s64 	%p144, %rd85, 16;
	@%p144 bra 	LBB0_131;
// %bb.86:                              // %L1160
	shl.b32 	%r324, %r16, 1;
	neg.s32 	%r71, %r324;
	mov.u64 	%rd143, 2;
	mov.u64 	%rd144, %rd143;
LBB0_87:                                // %L1223.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd144, %rd144, %rd144;
	add.s64 	%rd143, %rd143, -1;
	setp.ne.s64 	%p145, %rd143, 0;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1225
	mul.lo.s32 	%r72, %r71, %r50;
	cvt.rn.f32.s32 	%f673, %r72;
	shl.b64 	%rd89, %rd144, 1;
	cvt.rn.f32.s64 	%f674, %rd89;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r74, %f915;
	and.b32  	%r325, %r74, 8388607;
	or.b32  	%r2436, %r325, 1065353216;
	mov.b32 	%f914, %r2436;
	add.s32 	%r326, %r74, -1073741824;
	and.b32  	%r2437, %r326, -8388608;
	setp.eq.s32 	%p153, %r2437, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i1031.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %__nv_fmaf_rn.exit4.i.i.i1031
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r2437, 192937984;
	add.s32 	%r328, %r327, %r2436;
	mov.b32 	%f685, %r328;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2437, %r2437, %r327;
	mov.b32 	%r2436, %f914;
	setp.ne.s32 	%p154, %r2437, 0;
	setp.ne.s32 	%p155, %r2436, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1033
	setp.gt.u32 	%p157, %r74, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1003
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f113, %f913, 0fC0000000, %f915;
	mov.b32 	%r73, %f113;
	setp.lt.u32 	%p148, %r73, 1073741824;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r73, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p152;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1008
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p151;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1012
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1037
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r329, %f110;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f915;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f915, %r332;
LBB0_102:                               // %__nv_fmodf.exit1038
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r333, %f695;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f696, %r335;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r336, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r337, %r336, 1;
	setp.eq.b32 	%p161, %r337, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p162, %r338, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r339, %r336, 1;
	and.b32  	%r340, %r339, 2;
	setp.eq.s32 	%p163, %r340, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd145, 2;
	mov.u64 	%rd146, %rd145;
LBB0_103:                               // %L1264.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd146, %rd146, %rd146;
	add.s64 	%rd145, %rd145, -1;
	setp.ne.s64 	%p166, %rd145, 0;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1266
	shl.b32 	%r341, %r50, 2;
	sub.s32 	%r342, %r72, %r341;
	cvt.rn.f32.s32 	%f725, %r342;
	shl.b64 	%rd91, %rd146, 1;
	cvt.rn.f32.s64 	%f726, %rd91;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r82, %f919;
	and.b32  	%r343, %r82, 8388607;
	or.b32  	%r2438, %r343, 1065353216;
	mov.b32 	%f918, %r2438;
	add.s32 	%r344, %r82, -1073741824;
	and.b32  	%r2439, %r344, -8388608;
	setp.eq.s32 	%p174, %r2439, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %__nv_fmaf_rn.exit4.i.i.i1077.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %__nv_fmaf_rn.exit4.i.i.i1077
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r2439, 192937984;
	add.s32 	%r346, %r345, %r2438;
	mov.b32 	%f737, %r346;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2439, %r2439, %r345;
	mov.b32 	%r2438, %f918;
	setp.ne.s32 	%p175, %r2439, 0;
	setp.ne.s32 	%p176, %r2438, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1079
	setp.gt.u32 	%p178, %r82, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1049
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f132, %f917, 0fC0000000, %f919;
	mov.b32 	%r81, %f132;
	setp.lt.u32 	%p169, %r81, 1073741824;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r81, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p173;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1054
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p172;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1058
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r347, %f129;
	and.b32  	%r348, %r347, -2147483648;
	mov.b32 	%r349, %f919;
	or.b32  	%r350, %r348, %r349;
	mov.b32 	%f919, %r350;
LBB0_118:                               // %__nv_fmodf.exit1084
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r357, %f747;
	and.b32  	%r358, %r357, -2147483648;
	or.b32  	%r359, %r358, 1056964608;
	mov.b32 	%f748, %r359;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r360, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r361, %r360, 1;
	setp.eq.b32 	%p182, %r361, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r362, %r360, 2;
	setp.eq.s32 	%p183, %r362, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r363, %r360, 1;
	and.b32  	%r364, %r363, 2;
	setp.eq.s32 	%p184, %r364, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r353, %f778;
	mov.b32 	%r352, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r89, %r353, %r352;
	// end inline asm
	mov.b32 	%r356, %f775;
	mov.b32 	%r355, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r356, %r355;
	// end inline asm
	mov.u64 	%rd147, 2;
	mov.u64 	%rd148, %rd147;
LBB0_119:                               // %L1307.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd148, %rd148, %rd148;
	add.s64 	%rd147, %rd147, -1;
	setp.ne.s64 	%p187, %rd147, 0;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1309
	and.b64  	%rd93, %rd148, 9223372036854775807;
	setp.ne.s64 	%p188, %rd93, 16;
	@%p188 bra 	LBB0_130;
// %bb.121:                             // %L1316
	mul.lo.s32 	%r92, %r71, %r49;
	cvt.rn.f32.s32 	%f779, %r92;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_140;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_136;
	bra.uni 	LBB0_123;
LBB0_136:
	mov.b32 	%r113, %f923;
	and.b32  	%r365, %r113, 8388607;
	or.b32  	%r2454, %r365, 1065353216;
	mov.b32 	%f922, %r2454;
	add.s32 	%r366, %r113, -1073741824;
	and.b32  	%r2455, %r366, -8388608;
	setp.eq.s32 	%p196, %r2455, 0;
	@%p196 bra 	LBB0_139;
// %bb.137:                             // %__nv_fmaf_rn.exit4.i.i.i1123.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_138:                               // %__nv_fmaf_rn.exit4.i.i.i1123
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r2455, 192937984;
	add.s32 	%r368, %r367, %r2454;
	mov.b32 	%f791, %r368;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2455, %r2455, %r367;
	mov.b32 	%r2454, %f922;
	setp.ne.s32 	%p197, %r2455, 0;
	setp.ne.s32 	%p198, %r2454, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_138;
LBB0_139:                               // %__internal_fmodf_slowpath_mod.exit.i.i1125
	setp.gt.u32 	%p200, %r113, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_140;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1095
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f782;
	fma.rn.f32 	%f149, %f921, 0fC0000000, %f923;
	mov.b32 	%r112, %f149;
	setp.lt.u32 	%p191, %r112, 1073741824;
	@%p191 bra 	LBB0_135;
// %bb.124:
	setp.lt.u32 	%p192, %r112, -2147483647;
	@%p192 bra 	LBB0_133;
// %bb.125:
	add.f32 	%f787, %f921, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f921, %f788, %f787, %p195;
	bra.uni 	LBB0_135;
LBB0_133:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_135;
// %bb.134:                             // %__nv_fmaf_rn.exit.i.i.i1100
	add.f32 	%f783, %f921, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f921, %f786, %f783, %p194;
LBB0_135:                               // %__internal_fmodf_fastpath_quot.exit.i.i1104
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_140:                               // %__internal_fmodf_kernel.exit.i1129
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_142;
// %bb.141:
	mov.b32 	%r369, %f146;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f923;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f923, %r372;
LBB0_142:                               // %__nv_fmodf.exit1130
	shl.b32 	%r381, %r49, 2;
	sub.s32 	%r382, %r92, %r381;
	cvt.rn.f32.s32 	%f833, %r382;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_154;
// %bb.143:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_150;
	bra.uni 	LBB0_144;
LBB0_150:
	mov.b32 	%r121, %f927;
	and.b32  	%r383, %r121, 8388607;
	or.b32  	%r2456, %r383, 1065353216;
	mov.b32 	%f926, %r2456;
	add.s32 	%r384, %r121, -1073741824;
	and.b32  	%r2457, %r384, -8388608;
	setp.eq.s32 	%p217, %r2457, 0;
	@%p217 bra 	LBB0_153;
// %bb.151:                             // %__nv_fmaf_rn.exit4.i.i.i1169.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_152:                               // %__nv_fmaf_rn.exit4.i.i.i1169
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r2457, 192937984;
	add.s32 	%r386, %r385, %r2456;
	mov.b32 	%f845, %r386;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2457, %r2457, %r385;
	mov.b32 	%r2456, %f926;
	setp.ne.s32 	%p218, %r2457, 0;
	setp.ne.s32 	%p219, %r2456, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_152;
LBB0_153:                               // %__internal_fmodf_slowpath_mod.exit.i.i1171
	setp.gt.u32 	%p221, %r121, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_154;
LBB0_144:                               // %__nv_fast_fdividef.exit.i.i.i1141
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f836;
	fma.rn.f32 	%f169, %f925, 0fC0000000, %f927;
	mov.b32 	%r120, %f169;
	setp.lt.u32 	%p212, %r120, 1073741824;
	@%p212 bra 	LBB0_149;
// %bb.145:
	setp.lt.u32 	%p213, %r120, -2147483647;
	@%p213 bra 	LBB0_147;
// %bb.146:
	add.f32 	%f841, %f925, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f925, %f842, %f841, %p216;
	bra.uni 	LBB0_149;
LBB0_147:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_149;
// %bb.148:                             // %__nv_fmaf_rn.exit.i.i.i1146
	add.f32 	%f837, %f925, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f925, %f840, %f837, %p215;
LBB0_149:                               // %__internal_fmodf_fastpath_quot.exit.i.i1150
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_154:                               // %__internal_fmodf_kernel.exit.i1175
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_156;
// %bb.155:
	mov.b32 	%r387, %f166;
	and.b32  	%r388, %r387, -2147483648;
	mov.b32 	%r389, %f927;
	or.b32  	%r390, %r388, %r389;
	mov.b32 	%f927, %r390;
LBB0_156:                               // %__nv_fmodf.exit1176
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2427, 0;
	@%p230 bra 	LBB0_129;
// %bb.157:                             // %L1431.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r373, %f801;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f802, %r375;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r376, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r377, %r376, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r377, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p206, %r378, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r379, %r376, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r380, %r379, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r91, %r48, 1;
	setp.eq.s32 	%p207, %r380, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r91, %r17;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r403, %f855;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f856, %r405;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r406, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p225, %r407, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p226, %r408, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p227, %r410, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r393, %f887;
	mov.b32 	%r392, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	mov.b32 	%r399, %f888;
	xor.b32  	%r396, %r399, -2147483648;
	mov.b32 	%r398, %f165;
	xor.b32  	%r395, %r398, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r395;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r393, %r392;
	// end inline asm
	shl.b32 	%r412, %r5, 12;
	and.b32  	%r413, %r9, 28;
	shl.b32 	%r414, %r3, 5;
	and.b32  	%r415, %r414, 96;
	or.b32  	%r132, %r413, %r415;
	and.b32  	%r133, %r414, 128;
	and.b32  	%r416, %r11, 16;
	shl.b32 	%r417, %r1, 2;
	and.b32  	%r418, %r417, 32;
	and.b32  	%r419, %r15, 8;
	and.b32  	%r420, %r1, 7;
	or.b32  	%r421, %r418, %r420;
	or.b32  	%r422, %r421, %r416;
	or.b32  	%r134, %r422, %r419;
	or.b32  	%r423, %r132, %r133;
	or.b32  	%r135, %r423, %r412;
	and.b32  	%r424, %r414, 224;
	or.b32  	%r425, %r424, %r413;
	or.b32  	%r426, %r412, %r425;
	add.s32 	%r136, %r426, 524288;
	and.b32  	%r137, %r4, 8;
	shr.u32 	%r427, %r1, 3;
	mul.lo.s32 	%r428, %r427, 1057;
	and.b32  	%r429, %r1, 1;
	mul.lo.s32 	%r430, %r429, 520;
	bfe.u32 	%r431, %r1, 1, 1;
	mul.lo.s32 	%r432, %r431, 260;
	bfe.u32 	%r433, %r1, 2, 1;
	mul.lo.s32 	%r434, %r433, 130;
	mul.lo.s32 	%r435, %r19, 65;
	shl.b32 	%r436, %r4, 4;
	or.b32  	%r437, %r137, %r436;
	shr.u32 	%r438, %r437, 2;
	and.b32  	%r439, %r438, 30;
	add.s32 	%r440, %r428, %r430;
	add.s32 	%r441, %r440, %r435;
	add.s32 	%r442, %r441, %r432;
	add.s32 	%r443, %r442, %r434;
	add.s32 	%r444, %r443, %r439;
	mul.wide.u32 	%rd96, %r444, 4;
	mov.u64 	%rd97, shmem;
	add.s64 	%rd37, %rd97, %rd96;
	add.s32 	%r445, %r444, 32;
	mul.wide.u32 	%rd98, %r445, 4;
	add.s64 	%rd38, %rd97, %rd98;
	or.b32  	%r446, %r430, 1;
	add.s32 	%r447, %r446, %r428;
	add.s32 	%r448, %r447, %r435;
	add.s32 	%r449, %r448, %r432;
	add.s32 	%r450, %r449, %r434;
	add.s32 	%r451, %r450, %r439;
	mul.wide.u32 	%rd99, %r451, 4;
	add.s64 	%rd39, %rd97, %rd99;
	add.s32 	%r452, %r444, 33;
	mul.wide.u32 	%rd100, %r452, 4;
	add.s64 	%rd40, %rd97, %rd100;
	or.b32  	%r453, %r427, 4;
	mul.lo.s32 	%r454, %r453, 1057;
	add.s32 	%r455, %r435, %r430;
	add.s32 	%r456, %r455, %r454;
	add.s32 	%r457, %r456, %r432;
	add.s32 	%r458, %r457, %r434;
	add.s32 	%r459, %r458, %r439;
	mul.wide.s32 	%rd101, %r459, 4;
	add.s64 	%rd41, %rd97, %rd101;
	add.s32 	%r460, %r459, 32;
	mul.wide.s32 	%rd102, %r460, 4;
	add.s64 	%rd42, %rd97, %rd102;
	add.s32 	%r461, %r446, %r435;
	add.s32 	%r462, %r461, %r454;
	add.s32 	%r463, %r462, %r432;
	add.s32 	%r464, %r463, %r434;
	add.s32 	%r465, %r464, %r439;
	mul.wide.s32 	%rd103, %r465, 4;
	add.s64 	%rd43, %rd97, %rd103;
	add.s32 	%r466, %r459, 33;
	mul.wide.s32 	%rd104, %r466, 4;
	add.s64 	%rd44, %rd97, %rd104;
	and.b32  	%r467, %r2, 32;
	shl.b32 	%r468, %r4, 3;
	and.b32  	%r469, %r468, 64;
	shl.b32 	%r470, %r1, 1;
	or.b32  	%r471, %r469, %r470;
	shr.u32 	%r472, %r471, 2;
	mad.lo.s32 	%r473, %r19, 520, %r467;
	mad.lo.s32 	%r474, %r17, 130, %r473;
	mad.lo.s32 	%r475, %r18, 260, %r474;
	mad.lo.s32 	%r476, %r16, 65, %r475;
	add.s32 	%r477, %r476, %r472;
	or.b32  	%r478, %r472, 8;
	add.s32 	%r479, %r476, %r478;
	or.b32  	%r480, %r13, %r12;
	or.b32  	%r481, %r480, %r10;
	shr.u32 	%r482, %r481, 1;
	mul.lo.s32 	%r483, %r482, 65;
	or.b32  	%r484, %r472, %r467;
	add.s32 	%r485, %r484, %r483;
	or.b32  	%r486, %r478, %r467;
	add.s32 	%r487, %r486, %r483;
	shl.b32 	%r488, %r7, 17;
	add.s32 	%r489, %r488, -393216;
	shl.b32 	%r490, %r1, 14;
	and.b32  	%r138, %r490, 131072;
	and.b32  	%r491, %r417, 28;
	or.b32  	%r492, %r491, %r48;
	shl.b32 	%r493, %r3, 2;
	and.b32  	%r494, %r493, 480;
	or.b32  	%r495, %r492, %r494;
	shl.b32 	%r139, %r495, 8;
	cvt.s64.s32 	%rd45, %r489;
	and.b32  	%r496, %r470, 14;
	or.b32  	%r497, %r496, %r19;
	mul.lo.s32 	%r498, %r497, 65;
	add.s32 	%r499, %r498, %r428;
	add.s32 	%r500, %r499, %r439;
	mul.wide.u32 	%rd105, %r500, 4;
	add.s64 	%rd46, %rd97, %rd105;
	cvt.u64.u32 	%rd106, %r439;
	cvt.u64.u32 	%rd107, %r498;
	cvt.u64.u32 	%rd108, %r428;
	add.s64 	%rd109, %rd108, %rd107;
	add.s64 	%rd110, %rd109, %rd106;
	shl.b64 	%rd111, %rd110, 2;
	add.s64 	%rd47, %rd97, %rd111;
	add.s32 	%r501, %r498, %r454;
	add.s32 	%r502, %r501, %r439;
	mul.wide.u32 	%rd112, %r502, 4;
	add.s64 	%rd48, %rd97, %rd112;
	cvt.u64.u32 	%rd113, %r454;
	add.s64 	%rd114, %rd113, %rd107;
	add.s64 	%rd115, %rd114, %rd106;
	shl.b64 	%rd116, %rd115, 2;
	add.s64 	%rd49, %rd97, %rd116;
	mul.wide.u32 	%rd117, %r487, 4;
	add.s64 	%rd50, %rd97, %rd117;
	mul.wide.u32 	%rd118, %r485, 4;
	add.s64 	%rd51, %rd97, %rd118;
	mul.wide.u32 	%rd119, %r479, 4;
	add.s64 	%rd52, %rd97, %rd119;
	mul.wide.u32 	%rd120, %r477, 4;
	add.s64 	%rd53, %rd97, %rd120;
	setp.eq.s32 	%p231, %r137, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	mov.u32 	%r2440, %r2427;
	mov.u32 	%r2453, %r2427;
	mov.u32 	%r2452, %r2427;
	mov.u32 	%r2451, %r2427;
	mov.u32 	%r2450, %r2427;
	mov.u32 	%r2449, %r2427;
	mov.u32 	%r2448, %r2427;
LBB0_126:                               // %L1431
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r536, %r134, %r2440;
	shl.b32 	%r537, %r536, 12;
	add.s32 	%r538, %r135, %r537;
	shr.s32 	%r539, %r538, 31;
	shr.u32 	%r540, %r539, 3;
	add.s32 	%r541, %r538, %r540;
	shr.s32 	%r542, %r541, 29;
	setp.lt.s32 	%p232, %r538, 0;
	and.b32  	%r543, %r541, -536870912;
	setp.ne.s32 	%p233, %r543, %r538;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r544, 1, 0, %p234;
	sub.s32 	%r545, %r544, %r542;
	shl.b32 	%r546, %r545, 29;
	add.s32 	%r547, %r546, %r538;
	mul.wide.s32 	%rd121, %r547, 4;
	add.s64 	%rd122, %rd2, %rd121;
	ld.global.v4.u32 	{%r548, %r549, %r550, %r551}, [%rd122];
	add.s32 	%r552, %r136, %r537;
	shr.s32 	%r553, %r552, 31;
	shr.u32 	%r554, %r553, 3;
	add.s32 	%r555, %r552, %r554;
	shr.s32 	%r556, %r555, 29;
	setp.lt.s32 	%p235, %r552, 0;
	and.b32  	%r557, %r555, -536870912;
	setp.ne.s32 	%p236, %r557, %r552;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r558, 1, 0, %p237;
	sub.s32 	%r559, %r558, %r556;
	shl.b32 	%r560, %r559, 29;
	add.s32 	%r561, %r560, %r552;
	mul.wide.s32 	%rd123, %r561, 4;
	add.s64 	%rd124, %rd2, %rd123;
	ld.global.v4.u32 	{%r562, %r563, %r564, %r565}, [%rd124];
	selp.b32 	%r566, %r550, %r548, %p231;
	shfl.sync.bfly.b32	%r567, %r566, 8, 31, -1;
	selp.b32 	%r504, %r548, %r567, %p231;
	selp.b32 	%r505, %r567, %r550, %p231;
	selp.b32 	%r568, %r551, %r549, %p231;
	shfl.sync.bfly.b32	%r569, %r568, 8, 31, -1;
	selp.b32 	%r512, %r549, %r569, %p231;
	selp.b32 	%r513, %r569, %r551, %p231;
	selp.b32 	%r570, %r564, %r562, %p231;
	shfl.sync.bfly.b32	%r571, %r570, 8, 31, -1;
	selp.b32 	%r520, %r562, %r571, %p231;
	selp.b32 	%r521, %r571, %r564, %p231;
	selp.b32 	%r572, %r565, %r563, %p231;
	shfl.sync.bfly.b32	%r573, %r572, 8, 31, -1;
	selp.b32 	%r528, %r563, %r573, %p231;
	selp.b32 	%r529, %r573, %r565, %p231;
	mov.u32 	%r530, 21520;
	// begin inline asm
	prmt.b32 %r503, %r504, %r505, %r530;
	// end inline asm
	mov.u32 	%r534, 30258;
	// begin inline asm
	prmt.b32 %r507, %r504, %r505, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r534;
	// end inline asm
	st.shared.u32 	[%rd37], %r503;
	st.shared.u32 	[%rd38], %r507;
	st.shared.u32 	[%rd39], %r511;
	st.shared.u32 	[%rd40], %r515;
	st.shared.u32 	[%rd41], %r519;
	st.shared.u32 	[%rd42], %r523;
	st.shared.u32 	[%rd43], %r527;
	st.shared.u32 	[%rd44], %r531;
	bar.sync 	0;
	mov.u32 	%r2447, 256;
	mov.u64 	%rd149, %rd53;
	mov.u64 	%rd150, %rd52;
	mov.u64 	%rd151, %rd51;
	mov.u64 	%rd152, %rd50;
LBB0_127:                               // %L6971
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r106, %r2453;
	mov.u32 	%r105, %r2452;
	ld.shared.u32 	%r107, [%rd149];
	ld.shared.u32 	%r108, [%rd150];
	// begin inline asm
	mov.b32 %r579, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r590, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r578, %r107, -2004318072;
	mov.u32 	%r577, 983055;
	// begin inline asm
	lop3.b32 %r576, %r577, %r578, %r579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r580, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r581, %r579, %r580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r584, %r576, %r581;
	// end inline asm
	mov.u32 	%r588, 15728880;
	// begin inline asm
	lop3.b32 %r587, %r588, %r578, %r590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r591, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r592, %r590, %r591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r595, %r587, %r592;
	// end inline asm
	shr.u32 	%r600, %r578, 8;
	// begin inline asm
	lop3.b32 %r598, %r577, %r600, %r579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r602, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r603, %r579, %r602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r606, %r598, %r603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r609, %r588, %r600, %r590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r613, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r614, %r590, %r613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r617, %r609, %r614;
	// end inline asm
	// begin inline asm
	mov.b32 %r625, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r636, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r624, %r108, -2004318072;
	// begin inline asm
	lop3.b32 %r622, %r577, %r624, %r625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r626, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r627, %r625, %r626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r630, %r622, %r627;
	// end inline asm
	// begin inline asm
	lop3.b32 %r633, %r588, %r624, %r636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r637, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r638, %r636, %r637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r641, %r633, %r638;
	// end inline asm
	shr.u32 	%r646, %r624, 8;
	// begin inline asm
	lop3.b32 %r644, %r577, %r646, %r625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r648, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r649, %r625, %r648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r652, %r644, %r649;
	// end inline asm
	// begin inline asm
	lop3.b32 %r655, %r588, %r646, %r636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r659, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r660, %r636, %r659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r663, %r655, %r660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r666, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r668, %r666, %r584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r671, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r673, %r671, %r595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r676, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r678, %r676, %r606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r681, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r683, %r681, %r617;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r686, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r688, %r686, %r630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r691, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r693, %r691, %r641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r696, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r698, %r696, %r652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r701, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r703, %r701, %r663;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r710, %r2448, -2004318072;
	// begin inline asm
	lop3.b32 %r708, %r577, %r710, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r711, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	// begin inline asm
	lop3.b32 %r719, %r588, %r710, %r722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r724, %r722, %r723;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r727, %r719, %r724;
	// end inline asm
	shr.u32 	%r732, %r710, 8;
	// begin inline asm
	lop3.b32 %r730, %r577, %r732, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r735, %r711, %r734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r738, %r730, %r735;
	// end inline asm
	// begin inline asm
	lop3.b32 %r741, %r588, %r732, %r722, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r745, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r746, %r722, %r745;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r749, %r741, %r746;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r756, %r2449, -2004318072;
	// begin inline asm
	lop3.b32 %r754, %r577, %r756, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	// begin inline asm
	lop3.b32 %r765, %r588, %r756, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r768, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	shr.u32 	%r778, %r756, 8;
	// begin inline asm
	lop3.b32 %r776, %r577, %r778, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	lop3.b32 %r787, %r588, %r778, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r792, %r768, %r791;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r795, %r787, %r792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r798, %r174, %r716, %r668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r802, %r174, %r727, %r673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r806, %r174, %r738, %r678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r810, %r174, %r749, %r683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r814, %r174, %r762, %r688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r818, %r174, %r773, %r693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r822, %r174, %r784, %r698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r826, %r174, %r795, %r703;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r834, %r2450, -2004318072;
	// begin inline asm
	lop3.b32 %r832, %r577, %r834, %r835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r836, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r837, %r835, %r836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r840, %r832, %r837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r843, %r588, %r834, %r846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r848, %r846, %r847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r851, %r843, %r848;
	// end inline asm
	shr.u32 	%r856, %r834, 8;
	// begin inline asm
	lop3.b32 %r854, %r577, %r856, %r835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r858, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r859, %r835, %r858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r862, %r854, %r859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r865, %r588, %r856, %r846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r869, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r870, %r846, %r869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r873, %r865, %r870;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r880, %r2451, -2004318072;
	// begin inline asm
	lop3.b32 %r878, %r577, %r880, %r881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r882, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r883, %r881, %r882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r886, %r878, %r883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r889, %r588, %r880, %r892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r894, %r892, %r893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r897, %r889, %r894;
	// end inline asm
	shr.u32 	%r902, %r880, 8;
	// begin inline asm
	lop3.b32 %r900, %r577, %r902, %r881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r904, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r905, %r881, %r904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r908, %r900, %r905;
	// end inline asm
	// begin inline asm
	lop3.b32 %r911, %r588, %r902, %r892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r916, %r892, %r915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r919, %r911, %r916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r922, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r924, %r922, %r840, %r798;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r928, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r930, %r928, %r851, %r802;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r934, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r936, %r934, %r862, %r806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r940, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r942, %r940, %r873, %r810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r946, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r948, %r946, %r886, %r814;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r952, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r954, %r952, %r897, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r958, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r960, %r958, %r908, %r822;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r964, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r966, %r964, %r919, %r826;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r974, %r105, -2004318072;
	// begin inline asm
	lop3.b32 %r972, %r577, %r974, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r983, %r588, %r974, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r986, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	shr.u32 	%r996, %r974, 8;
	// begin inline asm
	lop3.b32 %r994, %r577, %r996, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r975, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1005, %r588, %r996, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1010, %r986, %r1009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1013, %r1005, %r1010;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1020, %r106, -2004318072;
	// begin inline asm
	lop3.b32 %r1018, %r577, %r1020, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1029, %r588, %r1020, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1032, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	shr.u32 	%r1042, %r1020, 8;
	// begin inline asm
	lop3.b32 %r1040, %r577, %r1042, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1051, %r588, %r1042, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1056, %r1032, %r1055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1059, %r1051, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r210, %r980, %r924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r210, %r991, %r930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r210, %r1002, %r936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r210, %r1013, %r942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r210, %r1026, %r948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r210, %r1037, %r954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r210, %r1048, %r960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r210, %r1059, %r966;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r46, %r1101, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r46, %r1110, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r46, %r1119, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r46, %r1128, %r1123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r47, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r46, %r1098, %r1130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r47, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r46, %r1107, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r47, %r1119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r46, %r1116, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r47, %r1128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r46, %r1125, %r1151;
	// end inline asm
	mov.u32 	%r1166, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1205, %r1202}, {%r67, %r69, %r68, %r70}, {%r1099, %r1133}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1214, %r1211}, {%r67, %r69, %r68, %r70}, {%r1108, %r1140}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1223, %r1220}, {%r67, %r69, %r68, %r70}, {%r1117, %r1147}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1232, %r1229}, {%r67, %r69, %r68, %r70}, {%r1126, %r1154}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r1198, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r89, %r1205, %r1200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1207, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r1207, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r89, %r1214, %r1209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1216, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r1216, %r1220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r89, %r1223, %r1218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r89, %r1232, %r1227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1234, %r90, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1237, %r89, %r1202, %r1234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1241, %r90, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1244, %r89, %r1211, %r1241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r90, %r1223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r89, %r1220, %r1248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1255, %r90, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1258, %r89, %r1229, %r1255;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1263}, {%r391, %r397, %r394, %r400}, {%r1203, %r1237}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1272, %r1273}, {%r391, %r397, %r394, %r400}, {%r1212, %r1244}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1282, %r1283}, {%r391, %r397, %r394, %r400}, {%r1221, %r1251}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1292, %r1293}, {%r391, %r397, %r394, %r400}, {%r1230, %r1258}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r14, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1305, %r14, %r1263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r14, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r14, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r14, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r14, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1320, %r14, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1323, %r14, %r1293;
	// end inline asm
	// begin inline asm
	mov.b32 %r1326, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1327, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1328, %r1302, %r1326;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1331, %r1328, %r1327;
	// end inline asm
	// begin inline asm
	mov.b32 %r1334, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1335, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1336, %r1305, %r1334;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1339, %r1336, %r1335;
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1343, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1344, %r1308, %r1342;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1347, %r1344, %r1343;
	// end inline asm
	// begin inline asm
	mov.b32 %r1350, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1351, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1352, %r1311, %r1350;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1355, %r1352, %r1351;
	// end inline asm
	// begin inline asm
	mov.b32 %r1358, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1359, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1360, %r1314, %r1358;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1363, %r1360, %r1359;
	// end inline asm
	// begin inline asm
	mov.b32 %r1366, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1367, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1368, %r1317, %r1366;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1371, %r1368, %r1367;
	// end inline asm
	// begin inline asm
	mov.b32 %r1374, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1375, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1376, %r1320, %r1374;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1379, %r1376, %r1375;
	// end inline asm
	// begin inline asm
	mov.b32 %r1382, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1383, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1384, %r1323, %r1382;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1387, %r1384, %r1383;
	// end inline asm
	// begin inline asm
	mov.b32 %r1393, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1391, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1392, %r1393, %r1391;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1395, %r1331, %r1392;
	// end inline asm
	// begin inline asm
	mov.b32 %r1398, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1399, %r1393, %r1398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1402, %r1339, %r1399;
	// end inline asm
	// begin inline asm
	mov.b32 %r1405, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1406, %r1393, %r1405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1409, %r1347, %r1406;
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1413, %r1393, %r1412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1416, %r1355, %r1413;
	// end inline asm
	mov.u32 	%r1422, 25152;
	// begin inline asm
	prmt.b32 %r1419, %r1395, %r1409, %r1422;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1423, %r1402, %r1416, %r1422;
	// end inline asm
	shl.b32 	%r1430, %r1423, 4;
	mov.u32 	%r1428, 252645135;
	// begin inline asm
	lop3.b32 %r1427, %r1428, %r1419, %r1430, 202;
	// end inline asm
	xor.b32  	%r2370, %r1427, -2004318072;
	// begin inline asm
	mov.b32 %r1434, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1432, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1433, %r1434, %r1432;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1436, %r1363, %r1433;
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1440, %r1434, %r1439;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1443, %r1371, %r1440;
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1434, %r1446;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1450, %r1379, %r1447;
	// end inline asm
	// begin inline asm
	mov.b32 %r1453, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1434, %r1453;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1457, %r1387, %r1454;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1460, %r1436, %r1450, %r1422;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1464, %r1443, %r1457, %r1422;
	// end inline asm
	shl.b32 	%r1471, %r1464, 4;
	// begin inline asm
	lop3.b32 %r1468, %r1428, %r1460, %r1471, 202;
	// end inline asm
	xor.b32  	%r2371, %r1468, -2004318072;
	st.shared.u32 	[%rd151], %r2370;
	st.shared.u32 	[%rd152], %r2371;
	ld.shared.u32 	%r2452, [%rd149];
	ld.shared.u32 	%r2453, [%rd150];
	// begin inline asm
	mov.b32 %r1477, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1476, %r2452, -2004318072;
	// begin inline asm
	lop3.b32 %r1474, %r577, %r1476, %r1477, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1478, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1479, %r1477, %r1478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1482, %r1474, %r1479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1485, %r588, %r1476, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1488, %r1489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1493, %r1485, %r1490;
	// end inline asm
	shr.u32 	%r1498, %r1476, 8;
	// begin inline asm
	lop3.b32 %r1496, %r577, %r1498, %r1477, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1477, %r1500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1504, %r1496, %r1501;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1507, %r588, %r1498, %r1488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1488, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1534, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1522, %r2453, -2004318072;
	// begin inline asm
	lop3.b32 %r1520, %r577, %r1522, %r1523, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1525, %r1523, %r1524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1528, %r1520, %r1525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1531, %r588, %r1522, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1534, %r1535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1539, %r1531, %r1536;
	// end inline asm
	shr.u32 	%r1544, %r1522, 8;
	// begin inline asm
	lop3.b32 %r1542, %r577, %r1544, %r1523, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1546, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1547, %r1523, %r1546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1550, %r1542, %r1547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1553, %r588, %r1544, %r1534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1534, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1564, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r1564, %r1482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1569, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1571, %r1569, %r1493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1579, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1579, %r1515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1589, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1591, %r1589, %r1539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1594, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1596, %r1594, %r1550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1599, %r228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1599, %r1561;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1606, %r577, %r834, %r1609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1611, %r1609, %r1610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1614, %r1606, %r1611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1617, %r588, %r834, %r1620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1621, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1622, %r1620, %r1621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1625, %r1617, %r1622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1628, %r577, %r856, %r1609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1632, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1633, %r1609, %r1632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1636, %r1628, %r1633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1639, %r588, %r856, %r1620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1643, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1644, %r1620, %r1643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1647, %r1639, %r1644;
	// end inline asm
	// begin inline asm
	mov.b32 %r1655, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1666, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1652, %r577, %r880, %r1655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1656, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1657, %r1655, %r1656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1660, %r1652, %r1657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1663, %r588, %r880, %r1666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1667, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1668, %r1666, %r1667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1671, %r1663, %r1668;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1674, %r577, %r902, %r1655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1678, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1679, %r1655, %r1678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1682, %r1674, %r1679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1685, %r588, %r902, %r1666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1689, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1690, %r1666, %r1689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1693, %r1685, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r174, %r1614, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r174, %r1625, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r174, %r1636, %r1576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r174, %r1647, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r174, %r1660, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r174, %r1671, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r174, %r1682, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r174, %r1693, %r1601;
	// end inline asm
	// begin inline asm
	mov.b32 %r1733, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1744, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1730, %r577, %r974, %r1733, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1734, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1735, %r1733, %r1734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1738, %r1730, %r1735;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1741, %r588, %r974, %r1744, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1745, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1746, %r1744, %r1745;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1749, %r1741, %r1746;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1752, %r577, %r996, %r1733, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1756, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1757, %r1733, %r1756;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1760, %r1752, %r1757;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1763, %r588, %r996, %r1744, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1767, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1768, %r1744, %r1767;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1771, %r1763, %r1768;
	// end inline asm
	// begin inline asm
	mov.b32 %r1779, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1790, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1776, %r577, %r1020, %r1779, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1780, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1781, %r1779, %r1780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1784, %r1776, %r1781;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1787, %r588, %r1020, %r1790, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1791, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1792, %r1790, %r1791;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1795, %r1787, %r1792;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1798, %r577, %r1042, %r1779, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1802, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1803, %r1779, %r1802;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1806, %r1798, %r1803;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1809, %r588, %r1042, %r1790, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1813, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1814, %r1790, %r1813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1817, %r1809, %r1814;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1820, %r1738, %r1696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1826, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1826, %r1749, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r1832, %r1760, %r1704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1838, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r1838, %r1771, %r1708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1844, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r1844, %r1784, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1850, %r1795, %r1716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1856, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1856, %r1806, %r1720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1862, %r192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1862, %r1817, %r1724;
	// end inline asm
	// begin inline asm
	mov.b32 %r1873, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1884, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1870, %r577, %r578, %r1873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1875, %r1873, %r1874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1878, %r1870, %r1875;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1881, %r588, %r578, %r1884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1885, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1886, %r1884, %r1885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1889, %r1881, %r1886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1892, %r577, %r600, %r1873, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1896, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1897, %r1873, %r1896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1900, %r1892, %r1897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1903, %r588, %r600, %r1884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1907, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1908, %r1884, %r1907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1911, %r1903, %r1908;
	// end inline asm
	// begin inline asm
	mov.b32 %r1919, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1930, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1916, %r577, %r624, %r1919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1920, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1921, %r1919, %r1920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1924, %r1916, %r1921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1927, %r588, %r624, %r1930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1931, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1932, %r1930, %r1931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1935, %r1927, %r1932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1938, %r577, %r646, %r1919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1942, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1943, %r1919, %r1942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1946, %r1938, %r1943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1949, %r588, %r646, %r1930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1953, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1954, %r1930, %r1953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1957, %r1949, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r210, %r1878, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r210, %r1889, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r210, %r1900, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r210, %r1911, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r210, %r1924, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r210, %r1935, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r210, %r1946, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r210, %r1957, %r1864;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1992, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r1992, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r46, %r1999, %r1994;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2001, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2003, %r2001, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r46, %r2008, %r2003;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2010, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2012, %r2010, %r2014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2015, %r46, %r2017, %r2012;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2019, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r2019, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r46, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r47, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r46, %r1996, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r47, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r46, %r2005, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r47, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r46, %r2014, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r47, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r46, %r2023, %r2049;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2103, %r2100}, {%r67, %r69, %r68, %r70}, {%r1997, %r2031}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2112, %r2109}, {%r67, %r69, %r68, %r70}, {%r2006, %r2038}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2118}, {%r67, %r69, %r68, %r70}, {%r2015, %r2045}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2127}, {%r67, %r69, %r68, %r70}, {%r2024, %r2052}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2096, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r2096, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r89, %r2103, %r2098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r2105, %r2109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r89, %r2112, %r2107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2114, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r2114, %r2118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r89, %r2121, %r2116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2123, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2123, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r89, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r90, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r89, %r2100, %r2132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r90, %r2112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r89, %r2109, %r2139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r90, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r89, %r2118, %r2146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r90, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r89, %r2127, %r2153;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2161}, {%r391, %r397, %r394, %r400}, {%r2101, %r2135}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2171}, {%r391, %r397, %r394, %r400}, {%r2110, %r2142}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2180, %r2181}, {%r391, %r397, %r394, %r400}, {%r2119, %r2149}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2190, %r2191}, {%r391, %r397, %r394, %r400}, {%r2128, %r2156}, {%r1166, %r1166};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r14, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r14, %r2161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r14, %r2170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r14, %r2171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r14, %r2180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r14, %r2181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2218, %r14, %r2190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r14, %r2191;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2226, %r2200, %r2224;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2229, %r2226, %r2225;
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2234, %r2203, %r2232;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2237, %r2234, %r2233;
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2242, %r2206, %r2240;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2245, %r2242, %r2241;
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2250, %r2209, %r2248;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2253, %r2250, %r2249;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2258, %r2212, %r2256;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2261, %r2258, %r2257;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2266, %r2215, %r2264;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2269, %r2266, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2274, %r2218, %r2272;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2277, %r2274, %r2273;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2282, %r2221, %r2280;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2285, %r2282, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2291, %r2289;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2229, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2291, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2237, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2291, %r2303;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2245, %r2304;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2291, %r2310;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2253, %r2311;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2317, %r2293, %r2307, %r1422;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2321, %r2300, %r2314, %r1422;
	// end inline asm
	shl.b32 	%r2328, %r2321, 4;
	// begin inline asm
	lop3.b32 %r2325, %r1428, %r2317, %r2328, 202;
	// end inline asm
	xor.b32  	%r2372, %r2325, -2004318072;
	// begin inline asm
	mov.b32 %r2332, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2332, %r2330;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2261, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2332, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2269, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2332, %r2344;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2277, %r2345;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2332, %r2351;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2285, %r2352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2358, %r2334, %r2348, %r1422;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2362, %r2341, %r2355, %r1422;
	// end inline asm
	shl.b32 	%r2369, %r2362, 4;
	// begin inline asm
	lop3.b32 %r2366, %r1428, %r2358, %r2369, 202;
	// end inline asm
	xor.b32  	%r2373, %r2366, -2004318072;
	st.shared.u32 	[%rd151], %r2372;
	st.shared.u32 	[%rd152], %r2373;
	add.s32 	%r2447, %r2447, -32;
	add.s64 	%rd152, %rd152, 4228;
	add.s64 	%rd151, %rd151, 4228;
	add.s64 	%rd150, %rd150, 4228;
	add.s64 	%rd149, %rd149, 4228;
	setp.eq.s32 	%p238, %r2447, 0;
	mov.u32 	%r2448, %r105;
	mov.u32 	%r2449, %r106;
	mov.u32 	%r2450, %r107;
	mov.u32 	%r2451, %r108;
	@%p238 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass5830
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2379, [%rd46];
	ld.shared.u32 	%r2380, [%rd47+128];
	ld.shared.u32 	%r2387, [%rd47+4];
	ld.shared.u32 	%r2388, [%rd47+132];
	ld.shared.u32 	%r2395, [%rd48];
	ld.shared.u32 	%r2396, [%rd49+128];
	ld.shared.u32 	%r2403, [%rd49+4];
	ld.shared.u32 	%r2404, [%rd49+132];
	// begin inline asm
	prmt.b32 %r2374, %r2379, %r2380, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2379, %r2380, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2387, %r2388, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2386, %r2387, %r2388, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2390, %r2395, %r2396, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2394, %r2395, %r2396, %r534;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2403, %r2404, %r530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2403, %r2404, %r534;
	// end inline asm
	selp.b32 	%r2406, %r2378, %r2374, %p231;
	shfl.sync.bfly.b32	%r2407, %r2406, 8, 31, -1;
	selp.b32 	%r2408, %r2386, %r2382, %p231;
	shfl.sync.bfly.b32	%r2409, %r2408, 8, 31, -1;
	selp.b32 	%r2410, %r2394, %r2390, %p231;
	shfl.sync.bfly.b32	%r2411, %r2410, 8, 31, -1;
	selp.b32 	%r2412, %r2390, %r2411, %p231;
	selp.b32 	%r2413, %r2411, %r2394, %p231;
	selp.b32 	%r2414, %r2402, %r2398, %p231;
	shfl.sync.bfly.b32	%r2415, %r2414, 8, 31, -1;
	selp.b32 	%r2416, %r2398, %r2415, %p231;
	selp.b32 	%r2417, %r2415, %r2402, %p231;
	shl.b32 	%r2418, %r2440, 12;
	or.b32  	%r2419, %r2418, %r138;
	or.b32  	%r2420, %r2419, %r132;
	or.b32  	%r2421, %r2420, %r133;
	or.b32  	%r2422, %r2421, %r139;
	or.b32  	%r2423, %r2422, 524288;
	cvt.s64.s32 	%rd125, %r2423;
	add.s64 	%rd126, %rd125, %rd45;
	shr.u64 	%rd127, %rd126, 35;
	add.s64 	%rd128, %rd126, %rd127;
	shr.s64 	%rd129, %rd128, 29;
	setp.lt.s64 	%p240, %rd126, 0;
	and.b64  	%rd130, %rd128, -536870912;
	setp.ne.s64 	%p241, %rd130, %rd126;
	and.pred  	%p242, %p240, %p241;
	selp.u64 	%rd131, 1, 0, %p242;
	sub.s64 	%rd132, %rd131, %rd129;
	shl.b64 	%rd133, %rd132, 29;
	add.s64 	%rd134, %rd133, %rd126;
	shl.b64 	%rd135, %rd134, 2;
	add.s64 	%rd136, %rd3, %rd135;
	st.global.v4.u32 	[%rd136], {%r2412, %r2416, %r2413, %r2417};
	setp.ne.s32 	%p243, %r2440, 130816;
	add.s32 	%r2440, %r2440, 256;
	add.s32 	%r2424, %r2440, %r5;
	setp.gt.s32 	%p244, %r6, %r2424;
	and.pred  	%p245, %p243, %p244;
	mov.u32 	%r2451, %r108;
	mov.u32 	%r2450, %r107;
	mov.u32 	%r2449, %r106;
	mov.u32 	%r2448, %r105;
	@%p245 bra 	LBB0_126;
LBB0_129:                               // %L15516
	st.global.u32 	[%rd4], %r2427;
	ret;
LBB0_7:                                 // %L247
	mov.u32 	%r2426, 2;
	st.global.u32 	[%rd4], %r2426;
	mov.u64 	%rd137, exception1284;
	cvta.global.u64 	%rd138, %rd137;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd138;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd54;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L8
	mov.u64 	%rd75, exception1;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd76;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd54;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L15616
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_7500, 
	(
	);
	} // callseq 2
	mov.u64 	%rd82, exception1;
	cvta.global.u64 	%rd83, %rd82;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd83;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 3
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd54;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 4
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_131:                               // %L15613
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_7500, 
	(
	);
	} // callseq 5
	mov.u64 	%rd86, exception1;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd54;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L15610
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_7500, 
	(
	);
	} // callseq 8
	mov.u64 	%rd94, exception1;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 9
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd54;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 10
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
