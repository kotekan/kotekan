// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2082[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<230>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2565>;
	.reg .f32 	%f<847>;
	.reg .b64 	%rd<138>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r147, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r152, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r152, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r148, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r153, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r154, %r153, %r1;
	or.b32  	%r155, %r154, %r4;
	mul.wide.u32 	%rd37, %r155, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r156, 1;
	st.global.u32 	[%rd4], %r156;
	setp.lt.s32 	%p2, %r148, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r149, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r149, %r148;
	setp.gt.s32 	%p4, %r149, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r150, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r157, %r149, %r148;
	and.b32  	%r158, %r157, 255;
	setp.ne.s32 	%p6, %r158, 0;
	setp.lt.s32 	%p7, %r150, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r151, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r151, %r150;
	setp.gt.s32 	%p10, %r151, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	sub.s32 	%r159, %r151, %r150;
	add.s32 	%r160, %r159, 3;
	and.b32  	%r161, %r160, 7;
	setp.eq.s32 	%p12, %r161, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass136
	bfe.u32 	%r106, %r1, 1, 1;
	and.b32  	%r107, %r1, 1;
	bfe.u32 	%r108, %r1, 2, 1;
	shl.b32 	%r169, %r108, 1;
	shl.b32 	%r170, %r107, 2;
	shl.b32 	%r171, %r106, 3;
	or.b32  	%r172, %r170, %r171;
	or.b32  	%r173, %r169, %r172;
	shr.u32 	%r109, %r1, 4;
	or.b32  	%r110, %r109, %r173;
	or.b32  	%r111, %r110, 16;
	mov.f32 	%f148, 0f40000000;
	mov.f32 	%f149, 0f42FE0000;
	div.approx.f32 	%f105, %f149, %f148;
	cvt.rn.f32.s32 	%f150, %r110;
	sub.f32 	%f151, %f150, %f105;
	mov.f32 	%f180, 0f42000000;
	div.approx.f32 	%f107, %f151, %f180;
	setp.ne.f32 	%p18, %f107, 0f00000000;
	mov.f32 	%f822, 0f3F800000;
	mov.f32 	%f815, %f822;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L461
	sin.approx.f32 	%f181, %f107;
	div.approx.f32 	%f815, %f181, %f107;
$L__BB0_10:                             // %L464
	cvt.rn.f32.s32 	%f184, %r111;
	sub.f32 	%f185, %f184, %f105;
	div.approx.f32 	%f5, %f185, %f180;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f816, %f822;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L481
	sin.approx.f32 	%f215, %f5;
	div.approx.f32 	%f816, %f215, %f5;
$L__BB0_12:                             // %L484
	or.b32  	%r191, %r110, 32;
	or.b32  	%r6, %r110, 48;
	cvt.rn.f32.s32 	%f219, %r191;
	sub.f32 	%f220, %f219, %f105;
	div.approx.f32 	%f9, %f220, %f180;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f817, %f822;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L563
	sin.approx.f32 	%f250, %f9;
	div.approx.f32 	%f817, %f250, %f9;
$L__BB0_14:                             // %L566
	cvt.rn.f32.s32 	%f253, %r6;
	sub.f32 	%f254, %f253, %f105;
	div.approx.f32 	%f14, %f254, %f180;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f818, %f822;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L583
	sin.approx.f32 	%f284, %f14;
	div.approx.f32 	%f818, %f284, %f14;
$L__BB0_16:                             // %L586
	or.b32  	%r209, %r110, 64;
	or.b32  	%r8, %r110, 80;
	cvt.rn.f32.s32 	%f288, %r209;
	sub.f32 	%f289, %f288, %f105;
	div.approx.f32 	%f18, %f289, %f180;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f819, %f822;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L665
	sin.approx.f32 	%f319, %f18;
	div.approx.f32 	%f819, %f319, %f18;
$L__BB0_18:                             // %L668
	cvt.rn.f32.s32 	%f322, %r8;
	sub.f32 	%f323, %f322, %f105;
	div.approx.f32 	%f23, %f323, %f180;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f820, %f822;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L685
	sin.approx.f32 	%f353, %f23;
	div.approx.f32 	%f820, %f353, %f23;
$L__BB0_20:                             // %L688
	or.b32  	%r227, %r110, 96;
	or.b32  	%r10, %r110, 112;
	cvt.rn.f32.s32 	%f357, %r227;
	sub.f32 	%f358, %f357, %f105;
	div.approx.f32 	%f27, %f358, %f180;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f821, %f822;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L767
	sin.approx.f32 	%f388, %f27;
	div.approx.f32 	%f821, %f388, %f27;
$L__BB0_22:                             // %L770
	shr.u32 	%r105, %r1, 1;
	cvt.rn.f32.s32 	%f391, %r10;
	sub.f32 	%f392, %f391, %f105;
	div.approx.f32 	%f32, %f392, %f180;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L787
	sin.approx.f32 	%f422, %f32;
	div.approx.f32 	%f822, %f422, %f32;
$L__BB0_24:                             // %L790
	shr.u32 	%r14, %r1, 3;
	and.b32  	%r271, %r14, 2;
	and.b32  	%r272, %r105, 4;
	or.b32  	%r15, %r108, %r271;
	or.b32  	%r16, %r15, %r272;
	and.b32  	%r273, %r1, 3;
	mul.lo.s32 	%r274, %r273, %r16;
	shl.b32 	%r275, %r274, 1;
	neg.s32 	%r276, %r275;
	cvt.rn.f32.s32 	%f493, %r276;
	mov.f32 	%f494, 0f41000000;
	div.approx.f32 	%f35, %f493, %f494;
	abs.f32 	%f841, %f35;
	setp.lt.f32 	%p75, %f841, 0f40000000;
	@%p75 bra 	$L__BB0_101;
// %bb.25:
	setp.gtu.f32 	%p76, %f841, 0f4B800000;
	@%p76 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_26;
$L__BB0_97:
	mov.b32 	%r113, %f841;
	and.b32  	%r277, %r113, 8388607;
	or.b32  	%r2560, %r277, 1065353216;
	mov.b32 	%f840, %r2560;
	add.s32 	%r278, %r113, -1073741824;
	and.b32  	%r2561, %r278, -8388608;
	setp.eq.s32 	%p82, %r2561, 0;
	@%p82 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i680.preheader
	mov.f32 	%f504, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f503,%f504;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i680
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r2561, 192937984;
	add.s32 	%r280, %r2560, %r279;
	mov.b32 	%f505, %r280;
	mul.f32 	%f506, %f503, %f505;
	sub.f32 	%f507, %f505, %f506;
	fma.rn.f32 	%f508, %f507, %f503, %f506;
	sub.f32 	%f509, %f505, %f508;
	fma.rz.f32 	%f510, %f509, %f503, %f508;
	cvt.rzi.f32.f32 	%f511, %f510;
	sub.f32 	%f840, %f505, %f511;
	sub.s32 	%r2561, %r2561, %r279;
	mov.b32 	%r2560, %f840;
	setp.ne.s32 	%p83, %r2561, 0;
	setp.ne.s32 	%p84, %r2560, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i682
	setp.gt.u32 	%p86, %r113, 2139095039;
	selp.f32 	%f512, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f513, %f840, 0f34000000;
	mul.f32 	%f841, %f512, %f513;
	bra.uni 	$L__BB0_101;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i659
	div.approx.f32 	%f496, %f841, %f148;
	cvt.rzi.f32.f32 	%f839, %f496;
	fma.rn.f32 	%f109, %f839, 0fC0000000, %f841;
	mov.b32 	%r112, %f109;
	setp.lt.u32 	%p77, %r112, 1073741824;
	@%p77 bra 	$L__BB0_96;
// %bb.27:
	setp.lt.u32 	%p78, %r112, -2147483647;
	@%p78 bra 	$L__BB0_94;
// %bb.28:
	add.f32 	%f501, %f839, 0fBF800000;
	setp.lt.f32 	%p81, %f109, 0fC0000000;
	add.f32 	%f502, %f501, 0fBF800000;
	selp.f32 	%f839, %f502, %f501, %p81;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f839, %f839, 0f3F800000;
	setp.ltu.f32 	%p79, %f109, 0f40800000;
	@%p79 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i663
	add.f32 	%f497, %f839, 0f3F800000;
	fma.rn.f32 	%f499, %f148, 0fC0400000, %f109;
	setp.ge.f32 	%p80, %f499, 0f00000000;
	add.f32 	%f500, %f497, 0f3F800000;
	selp.f32 	%f839, %f500, %f497, %p80;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i666
	fma.rn.f32 	%f841, %f839, 0fC0000000, %f841;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i685
	shl.b32 	%r101, %r1, 1;
	abs.f32 	%f514, %f841;
	setp.gtu.f32 	%p87, %f514, 0f7F800000;
	@%p87 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r281, %f35;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f841;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f841, %r284;
$L__BB0_103:                            // %__nv_fmodf.exit686
	and.b32  	%r293, %r101, 6;
	mov.u32 	%r294, -8;
	sub.s32 	%r295, %r294, %r293;
	mul.lo.s32 	%r296, %r16, %r295;
	cvt.rn.f32.s32 	%f545, %r296;
	div.approx.f32 	%f125, %f545, %f494;
	abs.f32 	%f825, %f125;
	setp.lt.f32 	%p95, %f825, 0f40000000;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p96, %f825, 0f4B800000;
	@%p96 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r18, %f825;
	and.b32  	%r297, %r18, 8388607;
	or.b32  	%r2537, %r297, 1065353216;
	mov.b32 	%f824, %r2537;
	add.s32 	%r298, %r18, -1073741824;
	and.b32  	%r2538, %r298, -8388608;
	setp.eq.s32 	%p102, %r2538, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f556, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f555,%f556;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r299, %r2538, 192937984;
	add.s32 	%r300, %r2537, %r299;
	mov.b32 	%f557, %r300;
	mul.f32 	%f558, %f555, %f557;
	sub.f32 	%f559, %f557, %f558;
	fma.rn.f32 	%f560, %f559, %f555, %f558;
	sub.f32 	%f561, %f557, %f560;
	fma.rz.f32 	%f562, %f561, %f555, %f560;
	cvt.rzi.f32.f32 	%f563, %f562;
	sub.f32 	%f824, %f557, %f563;
	sub.s32 	%r2538, %r2538, %r299;
	mov.b32 	%r2537, %f824;
	setp.ne.s32 	%p103, %r2538, 0;
	setp.ne.s32 	%p104, %r2537, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r18, 2139095039;
	selp.f32 	%f564, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f565, %f824, 0f34000000;
	mul.f32 	%f825, %f564, %f565;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f548, %f825, %f148;
	cvt.rzi.f32.f32 	%f823, %f548;
	fma.rn.f32 	%f38, %f823, 0fC0000000, %f825;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p97, %r17, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r17, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f553, %f823, 0fBF800000;
	setp.lt.f32 	%p101, %f38, 0fC0000000;
	add.f32 	%f554, %f553, 0fBF800000;
	selp.f32 	%f823, %f554, %f553, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f823, %f823, 0f3F800000;
	setp.ltu.f32 	%p99, %f38, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f549, %f823, 0f3F800000;
	fma.rn.f32 	%f551, %f148, 0fC0400000, %f38;
	setp.ge.f32 	%p100, %f551, 0f00000000;
	add.f32 	%f552, %f549, 0f3F800000;
	selp.f32 	%f823, %f552, %f549, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f825, %f823, 0fC0000000, %f825;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f566, %f825;
	setp.gtu.f32 	%p107, %f566, 0f7F800000;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r301, %f125;
	and.b32  	%r302, %r301, -2147483648;
	mov.b32 	%r303, %f825;
	or.b32  	%r304, %r302, %r303;
	mov.b32 	%f825, %r304;
$L__BB0_42:                             // %__nv_fmodf.exit
	shl.b32 	%r325, %r106, 1;
	neg.s32 	%r29, %r325;
	mul.lo.s32 	%r30, %r29, %r16;
	cvt.rn.f32.s32 	%f599, %r30;
	div.approx.f32 	%f52, %f599, %f180;
	abs.f32 	%f829, %f52;
	setp.lt.f32 	%p115, %f829, 0f40000000;
	@%p115 bra 	$L__BB0_54;
// %bb.43:
	setp.gtu.f32 	%p116, %f829, 0f4B800000;
	@%p116 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_44;
$L__BB0_50:
	mov.b32 	%r32, %f829;
	and.b32  	%r326, %r32, 8388607;
	or.b32  	%r2539, %r326, 1065353216;
	mov.b32 	%f828, %r2539;
	add.s32 	%r327, %r32, -1073741824;
	and.b32  	%r2540, %r327, -8388608;
	setp.eq.s32 	%p122, %r2540, 0;
	@%p122 bra 	$L__BB0_53;
// %bb.51:                              // %__nv_fmaf_rn.exit4.i.i.i587.preheader
	mov.f32 	%f610, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f609,%f610;
	// end inline asm
$L__BB0_52:                             // %__nv_fmaf_rn.exit4.i.i.i587
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r328, %r2540, 192937984;
	add.s32 	%r329, %r2539, %r328;
	mov.b32 	%f611, %r329;
	mul.f32 	%f612, %f609, %f611;
	sub.f32 	%f613, %f611, %f612;
	fma.rn.f32 	%f614, %f613, %f609, %f612;
	sub.f32 	%f615, %f611, %f614;
	fma.rz.f32 	%f616, %f615, %f609, %f614;
	cvt.rzi.f32.f32 	%f617, %f616;
	sub.f32 	%f828, %f611, %f617;
	sub.s32 	%r2540, %r2540, %r328;
	mov.b32 	%r2539, %f828;
	setp.ne.s32 	%p123, %r2540, 0;
	setp.ne.s32 	%p124, %r2539, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_52;
$L__BB0_53:                             // %__internal_fmodf_slowpath_mod.exit.i.i589
	setp.gt.u32 	%p126, %r32, 2139095039;
	selp.f32 	%f618, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f619, %f828, 0f34000000;
	mul.f32 	%f829, %f618, %f619;
	bra.uni 	$L__BB0_54;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i566
	div.approx.f32 	%f602, %f829, %f148;
	cvt.rzi.f32.f32 	%f827, %f602;
	fma.rn.f32 	%f55, %f827, 0fC0000000, %f829;
	mov.b32 	%r31, %f55;
	setp.lt.u32 	%p117, %r31, 1073741824;
	@%p117 bra 	$L__BB0_49;
// %bb.45:
	setp.lt.u32 	%p118, %r31, -2147483647;
	@%p118 bra 	$L__BB0_47;
// %bb.46:
	add.f32 	%f607, %f827, 0fBF800000;
	setp.lt.f32 	%p121, %f55, 0fC0000000;
	add.f32 	%f608, %f607, 0fBF800000;
	selp.f32 	%f827, %f608, %f607, %p121;
	bra.uni 	$L__BB0_49;
$L__BB0_47:
	add.f32 	%f827, %f827, 0f3F800000;
	setp.ltu.f32 	%p119, %f55, 0f40800000;
	@%p119 bra 	$L__BB0_49;
// %bb.48:                              // %__nv_fmaf_rn.exit.i.i.i570
	add.f32 	%f603, %f827, 0f3F800000;
	fma.rn.f32 	%f605, %f148, 0fC0400000, %f55;
	setp.ge.f32 	%p120, %f605, 0f00000000;
	add.f32 	%f606, %f603, 0f3F800000;
	selp.f32 	%f827, %f606, %f603, %p120;
$L__BB0_49:                             // %__internal_fmodf_fastpath_quot.exit.i.i573
	fma.rn.f32 	%f829, %f827, 0fC0000000, %f829;
$L__BB0_54:                             // %__internal_fmodf_kernel.exit.i592
	abs.f32 	%f620, %f829;
	setp.gtu.f32 	%p127, %f620, 0f7F800000;
	@%p127 bra 	$L__BB0_56;
// %bb.55:
	mov.b32 	%r330, %f52;
	and.b32  	%r331, %r330, -2147483648;
	mov.b32 	%r332, %f829;
	or.b32  	%r333, %r331, %r332;
	mov.b32 	%f829, %r333;
$L__BB0_56:                             // %__nv_fmodf.exit593
	shl.b32 	%r342, %r16, 2;
	sub.s32 	%r343, %r30, %r342;
	cvt.rn.f32.s32 	%f651, %r343;
	div.approx.f32 	%f71, %f651, %f180;
	abs.f32 	%f833, %f71;
	setp.lt.f32 	%p135, %f833, 0f40000000;
	@%p135 bra 	$L__BB0_68;
// %bb.57:
	setp.gtu.f32 	%p136, %f833, 0f4B800000;
	@%p136 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_58;
$L__BB0_64:
	mov.b32 	%r40, %f833;
	and.b32  	%r344, %r40, 8388607;
	or.b32  	%r2541, %r344, 1065353216;
	mov.b32 	%f832, %r2541;
	add.s32 	%r345, %r40, -1073741824;
	and.b32  	%r2542, %r345, -8388608;
	setp.eq.s32 	%p142, %r2542, 0;
	@%p142 bra 	$L__BB0_67;
// %bb.65:                              // %__nv_fmaf_rn.exit4.i.i.i618.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_66:                             // %__nv_fmaf_rn.exit4.i.i.i618
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r2542, 192937984;
	add.s32 	%r347, %r2541, %r346;
	mov.b32 	%f663, %r347;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f832, %f663, %f669;
	sub.s32 	%r2542, %r2542, %r346;
	mov.b32 	%r2541, %f832;
	setp.ne.s32 	%p143, %r2542, 0;
	setp.ne.s32 	%p144, %r2541, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_66;
$L__BB0_67:                             // %__internal_fmodf_slowpath_mod.exit.i.i620
	setp.gt.u32 	%p146, %r40, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f671, %f832, 0f34000000;
	mul.f32 	%f833, %f670, %f671;
	bra.uni 	$L__BB0_68;
$L__BB0_58:                             // %__nv_fast_fdividef.exit.i.i.i597
	div.approx.f32 	%f654, %f833, %f148;
	cvt.rzi.f32.f32 	%f831, %f654;
	fma.rn.f32 	%f74, %f831, 0fC0000000, %f833;
	mov.b32 	%r39, %f74;
	setp.lt.u32 	%p137, %r39, 1073741824;
	@%p137 bra 	$L__BB0_63;
// %bb.59:
	setp.lt.u32 	%p138, %r39, -2147483647;
	@%p138 bra 	$L__BB0_61;
// %bb.60:
	add.f32 	%f659, %f831, 0fBF800000;
	setp.lt.f32 	%p141, %f74, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f831, %f660, %f659, %p141;
	bra.uni 	$L__BB0_63;
$L__BB0_61:
	add.f32 	%f831, %f831, 0f3F800000;
	setp.ltu.f32 	%p139, %f74, 0f40800000;
	@%p139 bra 	$L__BB0_63;
// %bb.62:                              // %__nv_fmaf_rn.exit.i.i.i601
	add.f32 	%f655, %f831, 0f3F800000;
	fma.rn.f32 	%f657, %f148, 0fC0400000, %f74;
	setp.ge.f32 	%p140, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f831, %f658, %f655, %p140;
$L__BB0_63:                             // %__internal_fmodf_fastpath_quot.exit.i.i604
	fma.rn.f32 	%f833, %f831, 0fC0000000, %f833;
$L__BB0_68:                             // %__internal_fmodf_kernel.exit.i623
	abs.f32 	%f672, %f833;
	setp.gtu.f32 	%p147, %f672, 0f7F800000;
	@%p147 bra 	$L__BB0_70;
// %bb.69:
	mov.b32 	%r348, %f71;
	and.b32  	%r349, %r348, -2147483648;
	mov.b32 	%r350, %f833;
	or.b32  	%r351, %r349, %r350;
	mov.b32 	%f833, %r351;
$L__BB0_70:                             // %__nv_fmodf.exit624
	mul.lo.s32 	%r50, %r29, %r15;
	cvt.rn.f32.s32 	%f705, %r50;
	mov.f32 	%f706, 0f40800000;
	div.approx.f32 	%f88, %f705, %f706;
	abs.f32 	%f845, %f88;
	setp.lt.f32 	%p155, %f845, 0f40000000;
	@%p155 bra 	$L__BB0_111;
// %bb.71:
	setp.gtu.f32 	%p156, %f845, 0f4B800000;
	@%p156 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_72;
$L__BB0_107:
	mov.b32 	%r121, %f845;
	and.b32  	%r366, %r121, 8388607;
	or.b32  	%r2562, %r366, 1065353216;
	mov.b32 	%f844, %r2562;
	add.s32 	%r367, %r121, -1073741824;
	and.b32  	%r2563, %r367, -8388608;
	setp.eq.s32 	%p162, %r2563, 0;
	@%p162 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i711.preheader
	mov.f32 	%f716, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f715,%f716;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i711
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r368, %r2563, 192937984;
	add.s32 	%r369, %r2562, %r368;
	mov.b32 	%f717, %r369;
	mul.f32 	%f718, %f715, %f717;
	sub.f32 	%f719, %f717, %f718;
	fma.rn.f32 	%f720, %f719, %f715, %f718;
	sub.f32 	%f721, %f717, %f720;
	fma.rz.f32 	%f722, %f721, %f715, %f720;
	cvt.rzi.f32.f32 	%f723, %f722;
	sub.f32 	%f844, %f717, %f723;
	sub.s32 	%r2563, %r2563, %r368;
	mov.b32 	%r2562, %f844;
	setp.ne.s32 	%p163, %r2563, 0;
	setp.ne.s32 	%p164, %r2562, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i713
	setp.gt.u32 	%p166, %r121, 2139095039;
	selp.f32 	%f724, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f725, %f844, 0f34000000;
	mul.f32 	%f845, %f724, %f725;
	bra.uni 	$L__BB0_111;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i690
	div.approx.f32 	%f708, %f845, %f148;
	cvt.rzi.f32.f32 	%f843, %f708;
	fma.rn.f32 	%f128, %f843, 0fC0000000, %f845;
	mov.b32 	%r120, %f128;
	setp.lt.u32 	%p157, %r120, 1073741824;
	@%p157 bra 	$L__BB0_106;
// %bb.73:
	setp.lt.u32 	%p158, %r120, -2147483647;
	@%p158 bra 	$L__BB0_104;
// %bb.74:
	add.f32 	%f713, %f843, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f714, %f713, 0fBF800000;
	selp.f32 	%f843, %f714, %f713, %p161;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f843, %f843, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i694
	add.f32 	%f709, %f843, 0f3F800000;
	fma.rn.f32 	%f711, %f148, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f711, 0f00000000;
	add.f32 	%f712, %f709, 0f3F800000;
	selp.f32 	%f843, %f712, %f709, %p160;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i697
	fma.rn.f32 	%f845, %f843, 0fC0000000, %f845;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i716
	abs.f32 	%f726, %f845;
	setp.gtu.f32 	%p167, %f726, 0f7F800000;
	@%p167 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r370, %f88;
	and.b32  	%r371, %r370, -2147483648;
	mov.b32 	%r372, %f845;
	or.b32  	%r373, %r371, %r372;
	mov.b32 	%f845, %r373;
$L__BB0_113:                            // %__nv_fmodf.exit717
	shl.b32 	%r382, %r15, 2;
	sub.s32 	%r383, %r50, %r382;
	cvt.rn.f32.s32 	%f759, %r383;
	div.approx.f32 	%f145, %f759, %f706;
	abs.f32 	%f837, %f145;
	setp.lt.f32 	%p176, %f837, 0f40000000;
	@%p176 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p177, %f837, 0f4B800000;
	@%p177 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r52, %f837;
	and.b32  	%r384, %r52, 8388607;
	or.b32  	%r2543, %r384, 1065353216;
	mov.b32 	%f836, %r2543;
	add.s32 	%r385, %r52, -1073741824;
	and.b32  	%r2544, %r385, -8388608;
	setp.eq.s32 	%p183, %r2544, 0;
	@%p183 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i649.preheader
	mov.f32 	%f770, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f769,%f770;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i649
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r2544, 192937984;
	add.s32 	%r387, %r2543, %r386;
	mov.b32 	%f771, %r387;
	mul.f32 	%f772, %f769, %f771;
	sub.f32 	%f773, %f771, %f772;
	fma.rn.f32 	%f774, %f773, %f769, %f772;
	sub.f32 	%f775, %f771, %f774;
	fma.rz.f32 	%f776, %f775, %f769, %f774;
	cvt.rzi.f32.f32 	%f777, %f776;
	sub.f32 	%f836, %f771, %f777;
	sub.s32 	%r2544, %r2544, %r386;
	mov.b32 	%r2543, %f836;
	setp.ne.s32 	%p184, %r2544, 0;
	setp.ne.s32 	%p185, %r2543, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i651
	setp.gt.u32 	%p187, %r52, 2139095039;
	selp.f32 	%f778, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f779, %f836, 0f34000000;
	mul.f32 	%f837, %f778, %f779;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i628
	div.approx.f32 	%f762, %f837, %f148;
	cvt.rzi.f32.f32 	%f835, %f762;
	fma.rn.f32 	%f91, %f835, 0fC0000000, %f837;
	mov.b32 	%r51, %f91;
	setp.lt.u32 	%p178, %r51, 1073741824;
	@%p178 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p179, %r51, -2147483647;
	@%p179 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f767, %f835, 0fBF800000;
	setp.lt.f32 	%p182, %f91, 0fC0000000;
	add.f32 	%f768, %f767, 0fBF800000;
	selp.f32 	%f835, %f768, %f767, %p182;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f835, %f835, 0f3F800000;
	setp.ltu.f32 	%p180, %f91, 0f40800000;
	@%p180 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i632
	add.f32 	%f763, %f835, 0f3F800000;
	fma.rn.f32 	%f765, %f148, 0fC0400000, %f91;
	setp.ge.f32 	%p181, %f765, 0f00000000;
	add.f32 	%f766, %f763, 0f3F800000;
	selp.f32 	%f835, %f766, %f763, %p181;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i635
	fma.rn.f32 	%f837, %f835, 0fC0000000, %f837;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i654
	abs.f32 	%f780, %f837;
	setp.gtu.f32 	%p188, %f780, 0f7F800000;
	@%p188 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r388, %f145;
	and.b32  	%r389, %r388, -2147483648;
	mov.b32 	%r390, %f837;
	or.b32  	%r391, %r389, %r390;
	mov.b32 	%f837, %r391;
$L__BB0_88:                             // %__nv_fmodf.exit655
	setp.le.s32 	%p196, %r149, %r148;
	mov.u32 	%r2535, 0;
	@%p196 bra 	$L__BB0_116;
// %bb.89:                              // %L1352.lr.ph
	mov.f32 	%f152, 0f43010000;
	mul.lo.s32 	%r251, %r110, 31;
	div.approx.f32 	%f153, %f151, %f152;
	div.approx.f32 	%f187, %f185, %f152;
	div.approx.f32 	%f222, %f220, %f152;
	div.approx.f32 	%f256, %f254, %f152;
	div.approx.f32 	%f291, %f289, %f152;
	div.approx.f32 	%f325, %f323, %f152;
	div.approx.f32 	%f360, %f358, %f152;
	div.approx.f32 	%f394, %f392, %f152;
	add.s32 	%r261, %r251, 48;
	abs.f32 	%f154, %f153;
	abs.f32 	%f188, %f187;
	abs.f32 	%f223, %f222;
	abs.f32 	%f257, %f256;
	abs.f32 	%f292, %f291;
	abs.f32 	%f326, %f325;
	abs.f32 	%f361, %f360;
	abs.f32 	%f395, %f394;
	and.b32  	%r252, %r251, 63;
	and.b32  	%r262, %r261, 63;
	setp.gt.f32 	%p13, %f154, 0f4B800000;
	mul.f32 	%f155, %f153, 0f00000000;
	setp.gt.f32 	%p19, %f188, 0f4B800000;
	mul.f32 	%f189, %f187, 0f00000000;
	setp.gt.f32 	%p25, %f223, 0f4B800000;
	mul.f32 	%f224, %f222, 0f00000000;
	setp.gt.f32 	%p31, %f257, 0f4B800000;
	mul.f32 	%f258, %f256, 0f00000000;
	setp.gt.f32 	%p37, %f292, 0f4B800000;
	mul.f32 	%f293, %f291, 0f00000000;
	setp.gt.f32 	%p43, %f326, 0f4B800000;
	mul.f32 	%f327, %f325, 0f00000000;
	setp.gt.f32 	%p49, %f361, 0f4B800000;
	mul.f32 	%f362, %f360, 0f00000000;
	setp.gt.f32 	%p55, %f395, 0f4B800000;
	mul.f32 	%f396, %f394, 0f00000000;
	cvt.rn.f32.s32 	%f425, %r252;
	cvt.rn.f32.s32 	%f460, %r262;
	selp.f32 	%f156, %f155, %f153, %p13;
	selp.f32 	%f190, %f189, %f187, %p19;
	selp.f32 	%f225, %f224, %f222, %p25;
	selp.f32 	%f259, %f258, %f256, %p31;
	selp.f32 	%f294, %f293, %f291, %p37;
	selp.f32 	%f328, %f327, %f325, %p43;
	selp.f32 	%f363, %f362, %f360, %p49;
	selp.f32 	%f397, %f396, %f394, %p55;
	div.approx.f32 	%f427, %f425, %f180;
	div.approx.f32 	%f461, %f460, %f180;
	add.f32 	%f157, %f156, %f156;
	add.f32 	%f191, %f190, %f190;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f260, %f259, %f259;
	add.f32 	%f295, %f294, %f294;
	add.f32 	%f329, %f328, %f328;
	add.f32 	%f364, %f363, %f363;
	add.f32 	%f398, %f397, %f397;
	add.f32 	%f428, %f427, %f427;
	add.f32 	%f462, %f461, %f461;
	add.f32 	%f515, %f841, %f841;
	add.f32 	%f567, %f825, %f825;
	mov.b32 	%r174, %f157;
	mov.b32 	%r181, %f191;
	mov.b32 	%r192, %f226;
	mov.b32 	%r199, %f260;
	mov.b32 	%r210, %f295;
	mov.b32 	%r217, %f329;
	mov.b32 	%r228, %f364;
	mov.b32 	%r235, %f398;
	mov.b32 	%r253, %f428;
	mov.b32 	%r263, %f462;
	mov.b32 	%r285, %f515;
	mov.b32 	%r317, %f567;
	add.f32 	%f621, %f829, %f829;
	add.f32 	%f673, %f833, %f833;
	and.b32  	%r175, %r174, -2147483648;
	and.b32  	%r182, %r181, -2147483648;
	and.b32  	%r193, %r192, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r211, %r210, -2147483648;
	and.b32  	%r218, %r217, -2147483648;
	and.b32  	%r229, %r228, -2147483648;
	and.b32  	%r236, %r235, -2147483648;
	and.b32  	%r254, %r253, -2147483648;
	and.b32  	%r264, %r263, -2147483648;
	and.b32  	%r286, %r285, -2147483648;
	and.b32  	%r318, %r317, -2147483648;
	mov.b32 	%r334, %f621;
	mov.b32 	%r358, %f673;
	add.f32 	%f727, %f845, %f845;
	or.b32  	%r176, %r175, 1056964608;
	or.b32  	%r183, %r182, 1056964608;
	or.b32  	%r194, %r193, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r212, %r211, 1056964608;
	or.b32  	%r219, %r218, 1056964608;
	or.b32  	%r230, %r229, 1056964608;
	or.b32  	%r237, %r236, 1056964608;
	or.b32  	%r255, %r254, 1056964608;
	or.b32  	%r265, %r264, 1056964608;
	or.b32  	%r287, %r286, 1056964608;
	or.b32  	%r319, %r318, 1056964608;
	and.b32  	%r335, %r334, -2147483648;
	and.b32  	%r359, %r358, -2147483648;
	mov.b32 	%r374, %f727;
	mov.b32 	%f158, %r176;
	mov.b32 	%f192, %r183;
	mov.b32 	%f227, %r194;
	mov.b32 	%f261, %r201;
	mov.b32 	%f296, %r212;
	mov.b32 	%f330, %r219;
	mov.b32 	%f365, %r230;
	mov.b32 	%f399, %r237;
	mov.b32 	%f429, %r255;
	mov.b32 	%f463, %r265;
	mov.b32 	%f516, %r287;
	mov.b32 	%f568, %r319;
	or.b32  	%r336, %r335, 1056964608;
	or.b32  	%r360, %r359, 1056964608;
	and.b32  	%r375, %r374, -2147483648;
	add.f32 	%f159, %f157, %f158;
	abs.f32 	%f161, %f157;
	add.f32 	%f193, %f191, %f192;
	abs.f32 	%f195, %f191;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f262, %f260, %f261;
	abs.f32 	%f264, %f260;
	add.f32 	%f297, %f295, %f296;
	abs.f32 	%f299, %f295;
	add.f32 	%f331, %f329, %f330;
	abs.f32 	%f333, %f329;
	add.f32 	%f366, %f364, %f365;
	abs.f32 	%f368, %f364;
	add.f32 	%f400, %f398, %f399;
	abs.f32 	%f402, %f398;
	add.f32 	%f430, %f428, %f429;
	abs.f32 	%f432, %f428;
	add.f32 	%f464, %f462, %f463;
	abs.f32 	%f466, %f462;
	add.f32 	%f517, %f515, %f516;
	abs.f32 	%f519, %f515;
	add.f32 	%f569, %f567, %f568;
	abs.f32 	%f571, %f567;
	mov.b32 	%f622, %r336;
	mov.b32 	%f674, %r360;
	or.b32  	%r376, %r375, 1056964608;
	cvt.rzi.f32.f32 	%f160, %f159;
	setp.gt.f32 	%p14, %f161, 0f4B000000;
	cvt.rzi.f32.f32 	%f194, %f193;
	setp.gt.f32 	%p20, %f195, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p26, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f263, %f262;
	setp.gt.f32 	%p32, %f264, 0f4B000000;
	cvt.rzi.f32.f32 	%f298, %f297;
	setp.gt.f32 	%p38, %f299, 0f4B000000;
	cvt.rzi.f32.f32 	%f332, %f331;
	setp.gt.f32 	%p44, %f333, 0f4B000000;
	cvt.rzi.f32.f32 	%f367, %f366;
	setp.gt.f32 	%p50, %f368, 0f4B000000;
	cvt.rzi.f32.f32 	%f401, %f400;
	setp.gt.f32 	%p56, %f402, 0f4B000000;
	cvt.rzi.f32.f32 	%f431, %f430;
	setp.gt.f32 	%p61, %f432, 0f4B000000;
	cvt.rzi.f32.f32 	%f465, %f464;
	setp.gt.f32 	%p68, %f466, 0f4B000000;
	cvt.rzi.f32.f32 	%f518, %f517;
	setp.gt.f32 	%p88, %f519, 0f4B000000;
	cvt.rzi.f32.f32 	%f570, %f569;
	setp.gt.f32 	%p108, %f571, 0f4B000000;
	add.f32 	%f623, %f621, %f622;
	abs.f32 	%f625, %f621;
	add.f32 	%f675, %f673, %f674;
	abs.f32 	%f677, %f673;
	mov.b32 	%f728, %r376;
	selp.f32 	%f162, %f157, %f160, %p14;
	cvt.rzi.f32.f32 	%f163, %f157;
	setp.lt.f32 	%p15, %f161, 0f3F000000;
	selp.f32 	%f196, %f191, %f194, %p20;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p21, %f195, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p26;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p27, %f230, 0f3F000000;
	selp.f32 	%f265, %f260, %f263, %p32;
	cvt.rzi.f32.f32 	%f266, %f260;
	setp.lt.f32 	%p33, %f264, 0f3F000000;
	selp.f32 	%f300, %f295, %f298, %p38;
	cvt.rzi.f32.f32 	%f301, %f295;
	setp.lt.f32 	%p39, %f299, 0f3F000000;
	selp.f32 	%f334, %f329, %f332, %p44;
	cvt.rzi.f32.f32 	%f335, %f329;
	setp.lt.f32 	%p45, %f333, 0f3F000000;
	selp.f32 	%f369, %f364, %f367, %p50;
	cvt.rzi.f32.f32 	%f370, %f364;
	setp.lt.f32 	%p51, %f368, 0f3F000000;
	selp.f32 	%f403, %f398, %f401, %p56;
	cvt.rzi.f32.f32 	%f404, %f398;
	setp.lt.f32 	%p57, %f402, 0f3F000000;
	selp.f32 	%f433, %f428, %f431, %p61;
	cvt.rzi.f32.f32 	%f434, %f428;
	setp.lt.f32 	%p62, %f432, 0f3F000000;
	selp.f32 	%f467, %f462, %f465, %p68;
	cvt.rzi.f32.f32 	%f468, %f462;
	setp.lt.f32 	%p69, %f466, 0f3F000000;
	selp.f32 	%f520, %f515, %f518, %p88;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p89, %f519, 0f3F000000;
	selp.f32 	%f572, %f567, %f570, %p108;
	cvt.rzi.f32.f32 	%f573, %f567;
	setp.lt.f32 	%p109, %f571, 0f3F000000;
	cvt.rzi.f32.f32 	%f624, %f623;
	setp.gt.f32 	%p128, %f625, 0f4B000000;
	cvt.rzi.f32.f32 	%f676, %f675;
	setp.gt.f32 	%p148, %f677, 0f4B000000;
	add.f32 	%f729, %f727, %f728;
	abs.f32 	%f731, %f727;
	selp.f32 	%f164, %f163, %f162, %p15;
	selp.f32 	%f198, %f197, %f196, %p21;
	selp.f32 	%f233, %f232, %f231, %p27;
	selp.f32 	%f267, %f266, %f265, %p33;
	selp.f32 	%f302, %f301, %f300, %p39;
	selp.f32 	%f336, %f335, %f334, %p45;
	selp.f32 	%f371, %f370, %f369, %p51;
	selp.f32 	%f405, %f404, %f403, %p57;
	selp.f32 	%f435, %f434, %f433, %p62;
	selp.f32 	%f469, %f468, %f467, %p69;
	selp.f32 	%f522, %f521, %f520, %p89;
	selp.f32 	%f574, %f573, %f572, %p109;
	selp.f32 	%f626, %f621, %f624, %p128;
	cvt.rzi.f32.f32 	%f627, %f621;
	setp.lt.f32 	%p129, %f625, 0f3F000000;
	selp.f32 	%f678, %f673, %f676, %p148;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p149, %f677, 0f3F000000;
	cvt.rzi.f32.f32 	%f730, %f729;
	setp.gt.f32 	%p169, %f731, 0f4B000000;
	fma.rn.f32 	%f165, %f164, 0fBF000000, %f156;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f190;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f268, %f267, 0fBF000000, %f259;
	fma.rn.f32 	%f303, %f302, 0fBF000000, %f294;
	fma.rn.f32 	%f337, %f336, 0fBF000000, %f328;
	fma.rn.f32 	%f372, %f371, 0fBF000000, %f363;
	fma.rn.f32 	%f406, %f405, 0fBF000000, %f397;
	fma.rn.f32 	%f436, %f435, 0fBF000000, %f427;
	fma.rn.f32 	%f470, %f469, 0fBF000000, %f461;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f841;
	fma.rn.f32 	%f575, %f574, 0fBF000000, %f825;
	selp.f32 	%f628, %f627, %f626, %p129;
	selp.f32 	%f680, %f679, %f678, %p149;
	selp.f32 	%f732, %f727, %f730, %p169;
	cvt.rzi.f32.f32 	%f733, %f727;
	setp.lt.f32 	%p170, %f731, 0f3F000000;
	mul.f32 	%f166, %f165, %f165;
	mul.f32 	%f200, %f199, %f199;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f269, %f268, %f268;
	mul.f32 	%f304, %f303, %f303;
	mul.f32 	%f338, %f337, %f337;
	mul.f32 	%f373, %f372, %f372;
	mul.f32 	%f407, %f406, %f406;
	mul.f32 	%f437, %f436, %f436;
	mul.f32 	%f471, %f470, %f470;
	mul.f32 	%f524, %f523, %f523;
	mul.f32 	%f576, %f575, %f575;
	fma.rn.f32 	%f629, %f628, 0fBF000000, %f829;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f833;
	selp.f32 	%f734, %f733, %f732, %p170;
	cvt.rzi.s32.f32 	%r177, %f164;
	fma.rn.f32 	%f167, %f166, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f168, %f166, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r184, %f198;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r195, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f267;
	fma.rn.f32 	%f270, %f269, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f271, %f269, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r213, %f302;
	fma.rn.f32 	%f305, %f304, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f306, %f304, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r220, %f336;
	fma.rn.f32 	%f339, %f338, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f340, %f338, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r231, %f371;
	fma.rn.f32 	%f374, %f373, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f375, %f373, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r238, %f405;
	fma.rn.f32 	%f408, %f407, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f409, %f407, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f438, %f437, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f439, %f437, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f472, %f471, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f473, %f471, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f577, %f576, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f578, %f576, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f630, %f629, %f629;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f735, %f734, 0fBF000000, %f845;
	add.s32 	%r178, %r177, 1;
	fma.rn.f32 	%f169, %f167, %f166, 0fC0A55DF6;
	fma.rn.f32 	%f170, %f168, %f166, 0f4081E0CF;
	fma.rn.f32 	%f171, %f166, %f165, 0f00000000;
	add.s32 	%r185, %r184, 1;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	add.s32 	%r196, %r195, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f272, %f270, %f269, 0fC0A55DF6;
	fma.rn.f32 	%f273, %f271, %f269, 0f4081E0CF;
	fma.rn.f32 	%f274, %f269, %f268, 0f00000000;
	add.s32 	%r214, %r213, 1;
	fma.rn.f32 	%f307, %f305, %f304, 0fC0A55DF6;
	fma.rn.f32 	%f308, %f306, %f304, 0f4081E0CF;
	fma.rn.f32 	%f309, %f304, %f303, 0f00000000;
	add.s32 	%r221, %r220, 1;
	fma.rn.f32 	%f341, %f339, %f338, 0fC0A55DF6;
	fma.rn.f32 	%f342, %f340, %f338, 0f4081E0CF;
	fma.rn.f32 	%f343, %f338, %f337, 0f00000000;
	add.s32 	%r232, %r231, 1;
	fma.rn.f32 	%f376, %f374, %f373, 0fC0A55DF6;
	fma.rn.f32 	%f377, %f375, %f373, 0f4081E0CF;
	fma.rn.f32 	%f378, %f373, %f372, 0f00000000;
	add.s32 	%r239, %r238, 1;
	fma.rn.f32 	%f410, %f408, %f407, 0fC0A55DF6;
	fma.rn.f32 	%f411, %f409, %f407, 0f4081E0CF;
	fma.rn.f32 	%f412, %f407, %f406, 0f00000000;
	cvt.rzi.s32.f32 	%r256, %f435;
	fma.rn.f32 	%f440, %f438, %f437, 0fC0A55DF6;
	fma.rn.f32 	%f441, %f439, %f437, 0f4081E0CF;
	fma.rn.f32 	%f442, %f437, %f436, 0f00000000;
	cvt.rzi.s32.f32 	%r266, %f469;
	fma.rn.f32 	%f474, %f472, %f471, 0fC0A55DF6;
	fma.rn.f32 	%f475, %f473, %f471, 0f4081E0CF;
	fma.rn.f32 	%f476, %f471, %f470, 0f00000000;
	cvt.rzi.s32.f32 	%r288, %f522;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	cvt.rzi.s32.f32 	%r320, %f574;
	fma.rn.f32 	%f579, %f577, %f576, 0fC0A55DF6;
	fma.rn.f32 	%f580, %f578, %f576, 0f4081E0CF;
	fma.rn.f32 	%f581, %f576, %f575, 0f00000000;
	fma.rn.f32 	%f631, %f630, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f632, %f630, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f736, %f735, %f735;
	shl.b32 	%r100, %r1, 2;
	fma.rn.f32 	%f172, %f170, %f166, 0fC09DE9E6;
	fma.rn.f32 	%f173, %f169, %f171, 0f00000000;
	and.b32  	%r179, %r178, 1;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	and.b32  	%r186, %r185, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r197, %r196, 1;
	fma.rn.f32 	%f275, %f273, %f269, 0fC09DE9E6;
	fma.rn.f32 	%f276, %f272, %f274, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f310, %f308, %f304, 0fC09DE9E6;
	fma.rn.f32 	%f311, %f307, %f309, 0f00000000;
	and.b32  	%r215, %r214, 1;
	fma.rn.f32 	%f344, %f342, %f338, 0fC09DE9E6;
	fma.rn.f32 	%f345, %f341, %f343, 0f00000000;
	and.b32  	%r222, %r221, 1;
	fma.rn.f32 	%f379, %f377, %f373, 0fC09DE9E6;
	fma.rn.f32 	%f380, %f376, %f378, 0f00000000;
	and.b32  	%r233, %r232, 1;
	fma.rn.f32 	%f413, %f411, %f407, 0fC09DE9E6;
	fma.rn.f32 	%f414, %f410, %f412, 0f00000000;
	and.b32  	%r240, %r239, 1;
	fma.rn.f32 	%f443, %f441, %f437, 0fC09DE9E6;
	fma.rn.f32 	%f444, %f440, %f442, 0f00000000;
	and.b32  	%r257, %r256, 1;
	fma.rn.f32 	%f477, %f475, %f471, 0fC09DE9E6;
	fma.rn.f32 	%f478, %f474, %f476, 0f00000000;
	and.b32  	%r267, %r266, 1;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f582, %f580, %f576, 0fC09DE9E6;
	fma.rn.f32 	%f583, %f579, %f581, 0f00000000;
	and.b32  	%r321, %r320, 1;
	cvt.rzi.s32.f32 	%r337, %f628;
	fma.rn.f32 	%f633, %f631, %f630, 0fC0A55DF6;
	fma.rn.f32 	%f634, %f632, %f630, 0f4081E0CF;
	fma.rn.f32 	%f635, %f630, %f629, 0f00000000;
	cvt.rzi.s32.f32 	%r361, %f680;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f737, %f736, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f738, %f736, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r162, %r100, 4;
	and.b32  	%r165, %r1, 18;
	fma.rn.f32 	%f174, %f172, %f166, 0f3F800000;
	fma.rn.f32 	%f175, %f165, 0f40490FDB, %f173;
	setp.eq.b32 	%p16, %r179, 1;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	setp.eq.b32 	%p22, %r186, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p28, %r197, 1;
	fma.rn.f32 	%f277, %f275, %f269, 0f3F800000;
	fma.rn.f32 	%f278, %f268, 0f40490FDB, %f276;
	setp.eq.b32 	%p34, %r204, 1;
	fma.rn.f32 	%f312, %f310, %f304, 0f3F800000;
	fma.rn.f32 	%f313, %f303, 0f40490FDB, %f311;
	setp.eq.b32 	%p40, %r215, 1;
	fma.rn.f32 	%f346, %f344, %f338, 0f3F800000;
	fma.rn.f32 	%f347, %f337, 0f40490FDB, %f345;
	setp.eq.b32 	%p46, %r222, 1;
	fma.rn.f32 	%f381, %f379, %f373, 0f3F800000;
	fma.rn.f32 	%f382, %f372, 0f40490FDB, %f380;
	setp.eq.b32 	%p52, %r233, 1;
	fma.rn.f32 	%f415, %f413, %f407, 0f3F800000;
	fma.rn.f32 	%f416, %f406, 0f40490FDB, %f414;
	setp.eq.b32 	%p58, %r240, 1;
	fma.rn.f32 	%f445, %f443, %f437, 0f3F800000;
	fma.rn.f32 	%f446, %f436, 0f40490FDB, %f444;
	setp.eq.b32 	%p63, %r257, 1;
	fma.rn.f32 	%f479, %f477, %f471, 0f3F800000;
	fma.rn.f32 	%f480, %f470, 0f40490FDB, %f478;
	setp.eq.b32 	%p70, %r267, 1;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	setp.eq.b32 	%p90, %r289, 1;
	fma.rn.f32 	%f584, %f582, %f576, 0f3F800000;
	fma.rn.f32 	%f585, %f575, 0f40490FDB, %f583;
	setp.eq.b32 	%p110, %r321, 1;
	fma.rn.f32 	%f636, %f634, %f630, 0fC09DE9E6;
	fma.rn.f32 	%f637, %f633, %f635, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	and.b32  	%r362, %r361, 1;
	cvt.rzi.s32.f32 	%r377, %f734;
	fma.rn.f32 	%f739, %f737, %f736, 0fC0A55DF6;
	fma.rn.f32 	%f740, %f738, %f736, 0f4081E0CF;
	fma.rn.f32 	%f741, %f736, %f735, 0f00000000;
	and.b32  	%r163, %r101, 8;
	shl.b32 	%r164, %r2, 2;
	or.b32  	%r166, %r165, %r162;
	selp.f32 	%f176, %f174, %f175, %p16;
	and.b32  	%r180, %r178, 2;
	mov.f32 	%f177, 0f00000000;
	selp.f32 	%f210, %f208, %f209, %p22;
	and.b32  	%r187, %r185, 2;
	selp.f32 	%f245, %f243, %f244, %p28;
	and.b32  	%r198, %r196, 2;
	selp.f32 	%f279, %f277, %f278, %p34;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f314, %f312, %f313, %p40;
	and.b32  	%r216, %r214, 2;
	selp.f32 	%f348, %f346, %f347, %p46;
	and.b32  	%r223, %r221, 2;
	selp.f32 	%f383, %f381, %f382, %p52;
	and.b32  	%r234, %r232, 2;
	selp.f32 	%f417, %f415, %f416, %p58;
	and.b32  	%r241, %r239, 2;
	selp.f32 	%f447, %f445, %f446, %p63;
	and.b32  	%r258, %r256, 2;
	selp.f32 	%f481, %f479, %f480, %p70;
	and.b32  	%r268, %r266, 2;
	selp.f32 	%f534, %f532, %f533, %p90;
	and.b32  	%r290, %r288, 2;
	selp.f32 	%f586, %f584, %f585, %p110;
	and.b32  	%r322, %r320, 2;
	fma.rn.f32 	%f638, %f636, %f630, 0f3F800000;
	fma.rn.f32 	%f639, %f629, 0f40490FDB, %f637;
	setp.eq.b32 	%p130, %r338, 1;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	setp.eq.b32 	%p150, %r362, 1;
	fma.rn.f32 	%f742, %f740, %f736, 0fC09DE9E6;
	fma.rn.f32 	%f743, %f739, %f741, 0f00000000;
	and.b32  	%r378, %r377, 1;
	and.b32  	%r102, %r164, 480;
	or.b32  	%r103, %r166, %r163;
	setp.eq.s32 	%p17, %r180, 0;
	sub.f32 	%f178, %f177, %f176;
	setp.eq.s32 	%p23, %r187, 0;
	sub.f32 	%f212, %f177, %f210;
	setp.eq.s32 	%p29, %r198, 0;
	sub.f32 	%f247, %f177, %f245;
	setp.eq.s32 	%p35, %r205, 0;
	sub.f32 	%f281, %f177, %f279;
	setp.eq.s32 	%p41, %r216, 0;
	sub.f32 	%f316, %f177, %f314;
	setp.eq.s32 	%p47, %r223, 0;
	sub.f32 	%f350, %f177, %f348;
	setp.eq.s32 	%p53, %r234, 0;
	sub.f32 	%f385, %f177, %f383;
	setp.eq.s32 	%p59, %r241, 0;
	sub.f32 	%f419, %f177, %f417;
	setp.eq.s32 	%p64, %r258, 0;
	neg.f32 	%f449, %f447;
	add.s32 	%r259, %r256, 1;
	cvt.rzi.f32.f32 	%f454, %f427;
	setp.eq.s32 	%p71, %r268, 0;
	neg.f32 	%f483, %f481;
	add.s32 	%r269, %r266, 1;
	cvt.rzi.f32.f32 	%f487, %f461;
	setp.eq.s32 	%p91, %r290, 0;
	neg.f32 	%f536, %f534;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f541, %f841;
	setp.eq.s32 	%p111, %r322, 0;
	neg.f32 	%f588, %f586;
	add.s32 	%r323, %r320, 1;
	cvt.rzi.f32.f32 	%f593, %f825;
	selp.f32 	%f640, %f638, %f639, %p130;
	and.b32  	%r339, %r337, 2;
	selp.f32 	%f692, %f690, %f691, %p150;
	and.b32  	%r363, %r361, 2;
	fma.rn.f32 	%f744, %f742, %f736, 0f3F800000;
	fma.rn.f32 	%f745, %f735, 0f40490FDB, %f743;
	setp.eq.b32 	%p171, %r378, 1;
	or.b32  	%r167, %r103, %r102;
	selp.f32 	%f179, %f176, %f178, %p17;
	selp.f32 	%f213, %f210, %f212, %p23;
	selp.f32 	%f248, %f245, %f247, %p29;
	selp.f32 	%f282, %f279, %f281, %p35;
	selp.f32 	%f317, %f314, %f316, %p41;
	selp.f32 	%f351, %f348, %f350, %p47;
	selp.f32 	%f386, %f383, %f385, %p53;
	selp.f32 	%f420, %f417, %f419, %p59;
	selp.f32 	%f448, %f446, %f445, %p63;
	selp.f32 	%f450, %f447, %f449, %p64;
	and.b32  	%r260, %r259, 2;
	setp.eq.f32 	%p66, %f454, %f427;
	mul.f32 	%f455, %f427, 0f00000000;
	selp.f32 	%f482, %f480, %f479, %p70;
	selp.f32 	%f484, %f481, %f483, %p71;
	and.b32  	%r270, %r269, 2;
	setp.eq.f32 	%p73, %f487, %f461;
	mul.f32 	%f488, %f461, 0f00000000;
	selp.f32 	%f535, %f533, %f532, %p90;
	selp.f32 	%f537, %f534, %f536, %p91;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p93, %f541, %f841;
	mul.f32 	%f542, %f841, 0f00000000;
	selp.f32 	%f587, %f585, %f584, %p110;
	selp.f32 	%f589, %f586, %f588, %p111;
	and.b32  	%r324, %r323, 2;
	setp.eq.f32 	%p113, %f593, %f825;
	mul.f32 	%f594, %f825, 0f00000000;
	setp.eq.s32 	%p131, %r339, 0;
	neg.f32 	%f642, %f640;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f647, %f829;
	setp.eq.s32 	%p151, %r363, 0;
	neg.f32 	%f694, %f692;
	add.s32 	%r364, %r361, 1;
	cvt.rzi.f32.f32 	%f699, %f833;
	selp.f32 	%f746, %f744, %f745, %p171;
	and.b32  	%r379, %r377, 2;
	shr.u32 	%r168, %r167, 1;
	mul.f32 	%f106, %f179, %f179;
	mul.f32 	%f4, %f213, %f213;
	mul.f32 	%f8, %f248, %f248;
	mul.f32 	%f13, %f282, %f282;
	mul.f32 	%f17, %f317, %f317;
	mul.f32 	%f22, %f351, %f351;
	mul.f32 	%f26, %f386, %f386;
	mul.f32 	%f31, %f420, %f420;
	setp.eq.s32 	%p65, %r260, 0;
	sub.f32 	%f452, %f177, %f448;
	selp.f32 	%f456, %f455, %f450, %p66;
	abs.f32 	%f457, %f427;
	setp.eq.s32 	%p72, %r270, 0;
	sub.f32 	%f485, %f177, %f482;
	selp.f32 	%f489, %f488, %f484, %p73;
	abs.f32 	%f490, %f461;
	setp.eq.s32 	%p92, %r292, 0;
	sub.f32 	%f539, %f177, %f535;
	selp.f32 	%f123, %f542, %f537, %p93;
	abs.f32 	%f543, %f841;
	setp.eq.s32 	%p112, %r324, 0;
	sub.f32 	%f591, %f177, %f587;
	selp.f32 	%f595, %f594, %f589, %p113;
	abs.f32 	%f596, %f825;
	selp.f32 	%f641, %f639, %f638, %p130;
	selp.f32 	%f643, %f640, %f642, %p131;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p133, %f647, %f829;
	mul.f32 	%f648, %f829, 0f00000000;
	selp.f32 	%f693, %f691, %f690, %p150;
	selp.f32 	%f695, %f692, %f694, %p151;
	and.b32  	%r365, %r364, 2;
	setp.eq.f32 	%p153, %f699, %f833;
	mul.f32 	%f700, %f833, 0f00000000;
	setp.eq.s32 	%p172, %r379, 0;
	neg.f32 	%f748, %f746;
	add.s32 	%r380, %r377, 1;
	cvt.rzi.f32.f32 	%f753, %f845;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd38, %r168, 4;
	mul.f32 	%f183, %f106, 0f3C8A83B8;
	mul.f32 	%f217, %f4, 0f3C8A83B8;
	mul.f32 	%f252, %f8, 0f3C8A83B8;
	mul.f32 	%f286, %f13, 0f3C8A83B8;
	mul.f32 	%f321, %f17, 0f3C8A83B8;
	mul.f32 	%f355, %f22, 0f3C8A83B8;
	mul.f32 	%f390, %f26, 0f3C8A83B8;
	mul.f32 	%f423, %f31, 0f3C8A83B8;
	selp.f32 	%f453, %f448, %f452, %p65;
	setp.gt.f32 	%p67, %f457, 0f4B800000;
	add.f32 	%f458, %f456, 0f3F800000;
	selp.f32 	%f486, %f482, %f485, %p72;
	setp.gt.f32 	%p74, %f490, 0f4B800000;
	add.f32 	%f491, %f489, 0f3F800000;
	selp.f32 	%f540, %f535, %f539, %p92;
	setp.gt.f32 	%p94, %f543, 0f4B800000;
	add.f32 	%f544, %f123, 0f3F800000;
	selp.f32 	%f592, %f587, %f591, %p112;
	setp.gt.f32 	%p114, %f596, 0f4B800000;
	add.f32 	%f597, %f595, 0f3F800000;
	setp.eq.s32 	%p132, %r341, 0;
	sub.f32 	%f645, %f177, %f641;
	selp.f32 	%f69, %f648, %f643, %p133;
	abs.f32 	%f649, %f829;
	setp.eq.s32 	%p152, %r365, 0;
	sub.f32 	%f697, %f177, %f693;
	selp.f32 	%f701, %f700, %f695, %p153;
	abs.f32 	%f702, %f833;
	selp.f32 	%f747, %f745, %f744, %p171;
	selp.f32 	%f749, %f746, %f748, %p172;
	and.b32  	%r381, %r380, 2;
	setp.eq.f32 	%p174, %f753, %f845;
	mul.f32 	%f754, %f845, 0f00000000;
	add.s64 	%rd39, %rd1, %rd38;
	mul.f32 	%f3, %f183, %f815;
	mul.f32 	%f218, %f217, %f816;
	mul.f32 	%f12, %f252, %f817;
	mul.f32 	%f287, %f286, %f818;
	mul.f32 	%f21, %f321, %f819;
	mul.f32 	%f356, %f355, %f820;
	mul.f32 	%f30, %f390, %f821;
	mul.f32 	%f424, %f423, %f822;
	selp.f32 	%f459, %f458, %f453, %p67;
	selp.f32 	%f492, %f491, %f486, %p74;
	selp.f32 	%f124, %f544, %f540, %p94;
	selp.f32 	%f598, %f597, %f592, %p114;
	selp.f32 	%f646, %f641, %f645, %p132;
	setp.gt.f32 	%p134, %f649, 0f4B800000;
	add.f32 	%f650, %f69, 0f3F800000;
	selp.f32 	%f698, %f693, %f697, %p152;
	setp.gt.f32 	%p154, %f702, 0f4B800000;
	add.f32 	%f703, %f701, 0f3F800000;
	and.b32  	%r49, %r14, 1;
	setp.eq.s32 	%p173, %r381, 0;
	sub.f32 	%f751, %f177, %f747;
	selp.f32 	%f755, %f754, %f749, %p174;
	abs.f32 	%f756, %f845;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.global.u32 	%r104, [%rd39];
	mov.b32 	%r190, %f218;
	mov.b32 	%r189, %f3;
	mov.b32 	%r208, %f287;
	mov.b32 	%r207, %f12;
	mov.b32 	%r226, %f356;
	mov.b32 	%r225, %f21;
	mov.b32 	%r244, %f424;
	mov.b32 	%r243, %f30;
	mov.b32 	%r246, %f459;
	mov.b32 	%r247, %f492;
	mov.b32 	%r249, %f456;
	mov.b32 	%r250, %f489;
	mov.b32 	%r307, %f598;
	mov.b32 	%r306, %f124;
	mov.b32 	%r313, %f595;
	mov.b32 	%r312, %f123;
	selp.f32 	%f70, %f650, %f646, %p134;
	selp.f32 	%f704, %f703, %f698, %p154;
	setp.eq.s32 	%p168, %r49, %r107;
	selp.f32 	%f752, %f747, %f751, %p173;
	setp.gt.f32 	%p175, %f756, 0f4B800000;
	add.f32 	%f757, %f755, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r188, %r190, %r189;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r206, %r208, %r207;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r224, %r226, %r225;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r242, %r244, %r243;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r248, %r250, %r249;
	// end inline asm
	xor.b32  	%r310, %r313, -2147483648;
	xor.b32  	%r309, %r312, -2147483648;
	mov.b32 	%r354, %f704;
	mov.b32 	%r353, %f70;
	mov.b32 	%r357, %f701;
	mov.b32 	%r356, %f69;
	selp.f32 	%f758, %f757, %f752, %p175;
	selp.f32 	%f142, 0f3F800000, 0f00000000, %p168;
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r310, %r309;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r307, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	mul.f32 	%f143, %f758, %f142;
	mul.f32 	%f144, %f755, %f142;
	add.f32 	%f781, %f837, %f837;
	mov.b32 	%r404, %f781;
	and.b32  	%r405, %r404, -2147483648;
	or.b32  	%r406, %r405, 1056964608;
	mov.b32 	%f782, %r406;
	add.f32 	%f783, %f781, %f782;
	cvt.rzi.f32.f32 	%f784, %f783;
	abs.f32 	%f785, %f781;
	setp.gt.f32 	%p189, %f785, 0f4B000000;
	selp.f32 	%f786, %f781, %f784, %p189;
	cvt.rzi.f32.f32 	%f787, %f781;
	setp.lt.f32 	%p190, %f785, 0f3F000000;
	selp.f32 	%f788, %f787, %f786, %p190;
	cvt.rzi.s32.f32 	%r407, %f788;
	fma.rn.f32 	%f789, %f788, 0fBF000000, %f837;
	mul.f32 	%f790, %f789, %f789;
	fma.rn.f32 	%f791, %f790, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f792, %f790, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f793, %f791, %f790, 0fC0A55DF6;
	fma.rn.f32 	%f794, %f792, %f790, 0f4081E0CF;
	fma.rn.f32 	%f795, %f790, %f789, 0f00000000;
	fma.rn.f32 	%f796, %f794, %f790, 0fC09DE9E6;
	fma.rn.f32 	%f797, %f793, %f795, 0f00000000;
	fma.rn.f32 	%f798, %f796, %f790, 0f3F800000;
	fma.rn.f32 	%f799, %f789, 0f40490FDB, %f797;
	and.b32  	%r408, %r407, 1;
	setp.eq.b32 	%p191, %r408, 1;
	selp.f32 	%f800, %f798, %f799, %p191;
	selp.f32 	%f801, %f799, %f798, %p191;
	and.b32  	%r409, %r407, 2;
	setp.eq.s32 	%p192, %r409, 0;
	neg.f32 	%f802, %f800;
	selp.f32 	%f803, %f800, %f802, %p192;
	add.s32 	%r410, %r407, 1;
	and.b32  	%r411, %r410, 2;
	setp.eq.s32 	%p193, %r411, 0;
	sub.f32 	%f805, %f177, %f801;
	selp.f32 	%f806, %f801, %f805, %p193;
	cvt.rzi.f32.f32 	%f807, %f837;
	setp.eq.f32 	%p194, %f807, %f837;
	mul.f32 	%f808, %f837, 0f00000000;
	selp.f32 	%f809, %f808, %f803, %p194;
	abs.f32 	%f810, %f837;
	setp.gt.f32 	%p195, %f810, 0f4B800000;
	add.f32 	%f811, %f809, 0f3F800000;
	selp.f32 	%f812, %f811, %f806, %p195;
	mul.f32 	%f813, %f812, %f142;
	mul.f32 	%f814, %f809, %f142;
	mov.b32 	%r394, %f813;
	mov.b32 	%r393, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	mov.b32 	%r400, %f814;
	xor.b32  	%r397, %r400, -2147483648;
	mov.b32 	%r399, %f144;
	xor.b32  	%r396, %r399, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r394, %r393;
	// end inline asm
	shl.b32 	%r413, %r148, 12;
	and.b32  	%r63, %r105, 8;
	and.b32  	%r64, %r101, 16;
	shl.b32 	%r414, %r3, 2;
	and.b32  	%r65, %r414, 32;
	and.b32  	%r66, %r3, 7;
	and.b32  	%r415, %r100, 28;
	shl.b32 	%r416, %r2, 5;
	and.b32  	%r417, %r416, 96;
	or.b32  	%r67, %r415, %r417;
	and.b32  	%r68, %r416, 128;
	or.b32  	%r418, %r67, %r68;
	or.b32  	%r69, %r418, %r413;
	and.b32  	%r70, %r1, 8;
	shl.b32 	%r419, %r1, 4;
	or.b32  	%r420, %r419, %r70;
	shr.u32 	%r421, %r420, 2;
	and.b32  	%r422, %r421, 30;
	and.b32  	%r71, %r105, 2;
	and.b32  	%r423, %r4, 32;
	shl.b32 	%r424, %r3, 1;
	shl.b32 	%r425, %r1, 3;
	and.b32  	%r426, %r425, 64;
	or.b32  	%r427, %r426, %r424;
	shr.u32 	%r428, %r427, 2;
	or.b32  	%r72, %r428, %r423;
	or.b32  	%r73, %r72, 8;
	shr.u32 	%r429, %r103, 1;
	mul.lo.s32 	%r430, %r429, 65;
	add.s32 	%r431, %r72, %r430;
	add.s32 	%r432, %r73, %r430;
	shl.b32 	%r433, %r150, 17;
	add.s32 	%r434, %r433, -393216;
	and.b32  	%r435, %r414, 28;
	or.b32  	%r436, %r435, %r14;
	or.b32  	%r437, %r436, %r102;
	shl.b32 	%r74, %r437, 8;
	cvt.s64.s32 	%rd5, %r434;
	shr.u32 	%r438, %r3, 3;
	or.b32  	%r439, %r438, 2;
	or.b32  	%r440, %r438, 4;
	or.b32  	%r441, %r438, 6;
	bfe.u32 	%r442, %r105, 3, 1;
	mul.lo.s32 	%r443, %r442, 65;
	bfe.s32 	%r444, %r3, 1, 1;
	and.b32  	%r445, %r3, 2;
	setp.eq.s32 	%p197, %r445, 0;
	and.b32  	%r446, %r444, 260;
	and.b32  	%r447, %r3, 1;
	neg.s32 	%r448, %r447;
	setp.eq.b32 	%p198, %r447, 1;
	and.b32  	%r449, %r448, 520;
	mul.lo.s32 	%r450, %r438, 1057;
	bfe.s32 	%r451, %r3, 2, 1;
	and.b32  	%r452, %r3, 4;
	setp.eq.s32 	%p199, %r452, 0;
	and.b32  	%r453, %r451, 130;
	add.s32 	%r454, %r449, %r422;
	add.s32 	%r455, %r454, %r446;
	add.s32 	%r456, %r455, %r443;
	add.s32 	%r457, %r456, %r450;
	add.s32 	%r458, %r457, %r453;
	mul.wide.u32 	%rd40, %r458, 4;
	mov.u64 	%rd41, shmem;
	add.s64 	%rd6, %rd41, %rd40;
	selp.b64 	%rd42, 0, 130, %p199;
	cvt.u64.u32 	%rd43, %r450;
	selp.b64 	%rd44, 0, 260, %p197;
	cvt.u64.u32 	%rd45, %r443;
	selp.b64 	%rd46, 520, 0, %p198;
	cvt.u64.u32 	%rd47, %r422;
	add.s64 	%rd48, %rd47, %rd46;
	add.s64 	%rd49, %rd48, %rd45;
	add.s64 	%rd50, %rd49, %rd44;
	add.s64 	%rd51, %rd50, %rd43;
	add.s64 	%rd52, %rd51, %rd42;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd7, %rd41, %rd53;
	mul.lo.s32 	%r459, %r439, 1057;
	add.s32 	%r460, %r456, %r459;
	add.s32 	%r461, %r460, %r453;
	mul.wide.u32 	%rd54, %r461, 4;
	add.s64 	%rd8, %rd41, %rd54;
	cvt.u64.u32 	%rd55, %r459;
	add.s64 	%rd56, %rd50, %rd55;
	add.s64 	%rd57, %rd56, %rd42;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd9, %rd41, %rd58;
	mul.lo.s32 	%r462, %r440, 1057;
	add.s32 	%r463, %r456, %r462;
	add.s32 	%r464, %r463, %r453;
	mul.wide.u32 	%rd59, %r464, 4;
	add.s64 	%rd10, %rd41, %rd59;
	cvt.u64.u32 	%rd60, %r462;
	add.s64 	%rd61, %rd50, %rd60;
	add.s64 	%rd62, %rd61, %rd42;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd11, %rd41, %rd63;
	mul.lo.s32 	%r465, %r441, 1057;
	add.s32 	%r466, %r456, %r465;
	add.s32 	%r467, %r466, %r453;
	mul.wide.u32 	%rd64, %r467, 4;
	add.s64 	%rd12, %rd41, %rd64;
	cvt.u64.u32 	%rd65, %r465;
	add.s64 	%rd66, %rd50, %rd65;
	add.s64 	%rd67, %rd66, %rd42;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd13, %rd41, %rd68;
	bfe.s32 	%r468, %r1, 1, 1;
	and.b32  	%r75, %r468, 65;
	setp.eq.s32 	%p200, %r107, 0;
	selp.b32 	%r76, 0, 130, %p200;
	and.b32  	%r469, %r424, 14;
	or.b32  	%r470, %r469, %r109;
	mul.lo.s32 	%r471, %r470, 65;
	add.s32 	%r472, %r471, %r422;
	add.s32 	%r473, %r472, %r450;
	mul.wide.u32 	%rd69, %r473, 4;
	add.s64 	%rd14, %rd41, %rd69;
	cvt.u64.u32 	%rd70, %r471;
	add.s64 	%rd71, %rd70, %rd47;
	add.s64 	%rd72, %rd71, %rd43;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd15, %rd41, %rd73;
	add.s32 	%r474, %r472, %r459;
	mul.wide.u32 	%rd74, %r474, 4;
	add.s64 	%rd16, %rd41, %rd74;
	add.s64 	%rd75, %rd71, %rd55;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd17, %rd41, %rd76;
	add.s32 	%r475, %r472, %r462;
	mul.wide.u32 	%rd77, %r475, 4;
	add.s64 	%rd18, %rd41, %rd77;
	add.s64 	%rd78, %rd71, %rd60;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd19, %rd41, %rd79;
	add.s32 	%r476, %r472, %r465;
	mul.wide.u32 	%rd80, %r476, 4;
	add.s64 	%rd20, %rd41, %rd80;
	add.s64 	%rd81, %rd71, %rd65;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd21, %rd41, %rd82;
	mul.wide.u32 	%rd83, %r432, 4;
	add.s64 	%rd22, %rd41, %rd83;
	mul.wide.u32 	%rd84, %r431, 4;
	add.s64 	%rd23, %rd41, %rd84;
	setp.eq.s32 	%p201, %r70, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.gt.u32 	%p215, %r3, 7;
	mov.u32 	%r2545, %r2535;
	mov.u32 	%r2546, %r2535;
	mov.u32 	%r2547, %r2535;
	mov.u32 	%r2548, %r2535;
	mov.u32 	%r2557, %r2535;
	mov.u32 	%r2558, %r2535;
	mov.u32 	%r83, %r2535;
	bra.uni 	$L__BB0_90;
$L__BB0_114:                            // %pass9968
                                        //   in Loop: Header=BB0_90 Depth=1
	selp.b32 	%r2519, %r137, %r2469, %p201;
	selp.b32 	%r2520, %r2465, %r137, %p201;
	selp.b32 	%r2521, %r136, %r2461, %p201;
	selp.b32 	%r2522, %r2457, %r136, %p201;
	or.b32  	%r2524, %r2536, %r67;
	or.b32  	%r2525, %r2524, %r68;
	or.b32  	%r2564, %r2525, %r74;
	or.b32  	%r2526, %r2564, 262144;
	cvt.s64.s32 	%rd98, %r2526;
	add.s64 	%rd99, %rd98, %rd5;
	shr.u64 	%rd100, %rd99, 35;
	add.s64 	%rd101, %rd99, %rd100;
	shr.s64 	%rd102, %rd101, 29;
	setp.lt.s64 	%p218, %rd99, 0;
	and.b64  	%rd103, %rd101, -536870912;
	setp.ne.s64 	%p219, %rd103, %rd99;
	and.pred  	%p220, %p218, %p219;
	selp.u64 	%rd104, 1, 0, %p220;
	sub.s64 	%rd105, %rd104, %rd102;
	shl.b64 	%rd106, %rd105, 29;
	add.s64 	%rd107, %rd106, %rd99;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r2522, %r2520, %r2521, %r2519};
$L__BB0_115:                            // %pass10078
                                        //   in Loop: Header=BB0_90 Depth=1
	or.b32  	%r2530, %r2564, 524288;
	cvt.s64.s32 	%rd110, %r2530;
	add.s64 	%rd111, %rd110, %rd5;
	shr.u64 	%rd112, %rd111, 35;
	add.s64 	%rd113, %rd111, %rd112;
	shr.s64 	%rd114, %rd113, 29;
	setp.lt.s64 	%p221, %rd111, 0;
	and.b64  	%rd115, %rd113, -536870912;
	setp.ne.s64 	%p222, %rd115, %rd111;
	and.pred  	%p223, %p221, %p222;
	selp.u64 	%rd116, 1, 0, %p223;
	sub.s64 	%rd117, %rd116, %rd114;
	shl.b64 	%rd118, %rd117, 29;
	add.s64 	%rd119, %rd118, %rd111;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r138, %r140, %r139, %r141};
	or.b32  	%r2531, %r2564, 786432;
	cvt.s64.s32 	%rd122, %r2531;
	add.s64 	%rd123, %rd122, %rd5;
	shr.u64 	%rd124, %rd123, 35;
	add.s64 	%rd125, %rd123, %rd124;
	shr.s64 	%rd126, %rd125, 29;
	setp.lt.s64 	%p224, %rd123, 0;
	and.b64  	%rd127, %rd125, -536870912;
	setp.ne.s64 	%p225, %rd127, %rd123;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd128, 1, 0, %p226;
	sub.s64 	%rd129, %rd128, %rd126;
	shl.b64 	%rd130, %rd129, 29;
	add.s64 	%rd131, %rd130, %rd123;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd3, %rd132;
	st.global.v4.u32 	[%rd133], {%r142, %r144, %r143, %r145};
	setp.ne.s32 	%p227, %r83, 130816;
	add.s32 	%r83, %r83, 256;
	add.s32 	%r2532, %r83, %r148;
	setp.lt.s32 	%p228, %r2532, %r149;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_116;
$L__BB0_90:                             // %L1352
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_91 Depth 2
	or.b32  	%r542, %r83, %r63;
	or.b32  	%r543, %r542, %r64;
	or.b32  	%r544, %r543, %r65;
	or.b32  	%r545, %r544, %r66;
	shl.b32 	%r546, %r545, 12;
	add.s32 	%r547, %r69, %r546;
	shr.s32 	%r548, %r547, 31;
	shr.u32 	%r549, %r548, 3;
	add.s32 	%r550, %r547, %r549;
	shr.s32 	%r551, %r550, 29;
	setp.lt.s32 	%p202, %r547, 0;
	and.b32  	%r552, %r550, -536870912;
	setp.ne.s32 	%p203, %r552, %r547;
	and.pred  	%p204, %p202, %p203;
	selp.u32 	%r553, 1, 0, %p204;
	sub.s32 	%r554, %r553, %r551;
	shl.b32 	%r555, %r554, 29;
	add.s32 	%r556, %r555, %r547;
	mul.wide.s32 	%rd85, %r556, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r557, %r558, %r559, %r560}, [%rd86];
	or.b32  	%r561, %r546, 262144;
	add.s32 	%r562, %r69, %r561;
	shr.s32 	%r563, %r562, 31;
	shr.u32 	%r564, %r563, 3;
	add.s32 	%r565, %r562, %r564;
	shr.s32 	%r566, %r565, 29;
	setp.lt.s32 	%p205, %r562, 0;
	and.b32  	%r567, %r565, -536870912;
	setp.ne.s32 	%p206, %r567, %r562;
	and.pred  	%p207, %p205, %p206;
	selp.u32 	%r568, 1, 0, %p207;
	sub.s32 	%r569, %r568, %r566;
	shl.b32 	%r570, %r569, 29;
	add.s32 	%r571, %r570, %r562;
	mul.wide.s32 	%rd87, %r571, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r572, %r573, %r574, %r575}, [%rd88];
	or.b32  	%r576, %r546, 524288;
	add.s32 	%r577, %r69, %r576;
	shr.s32 	%r578, %r577, 31;
	shr.u32 	%r579, %r578, 3;
	add.s32 	%r580, %r577, %r579;
	shr.s32 	%r581, %r580, 29;
	setp.lt.s32 	%p208, %r577, 0;
	and.b32  	%r582, %r580, -536870912;
	setp.ne.s32 	%p209, %r582, %r577;
	and.pred  	%p210, %p208, %p209;
	selp.u32 	%r583, 1, 0, %p210;
	sub.s32 	%r584, %r583, %r581;
	shl.b32 	%r585, %r584, 29;
	add.s32 	%r586, %r585, %r577;
	mul.wide.s32 	%rd89, %r586, 4;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.v4.u32 	{%r587, %r588, %r589, %r590}, [%rd90];
	or.b32  	%r591, %r546, 786432;
	add.s32 	%r592, %r69, %r591;
	shr.s32 	%r593, %r592, 31;
	shr.u32 	%r594, %r593, 3;
	add.s32 	%r595, %r592, %r594;
	shr.s32 	%r596, %r595, 29;
	setp.lt.s32 	%p211, %r592, 0;
	and.b32  	%r597, %r595, -536870912;
	setp.ne.s32 	%p212, %r597, %r592;
	and.pred  	%p213, %p211, %p212;
	selp.u32 	%r598, 1, 0, %p213;
	sub.s32 	%r599, %r598, %r596;
	shl.b32 	%r600, %r599, 29;
	add.s32 	%r601, %r600, %r592;
	mul.wide.s32 	%rd91, %r601, 4;
	add.s64 	%rd92, %rd2, %rd91;
	ld.global.v4.u32 	{%r602, %r603, %r604, %r605}, [%rd92];
	selp.b32 	%r606, %r559, %r557, %p201;
	shfl.sync.bfly.b32	%r607, %r606, 8, 31, -1;
	selp.b32 	%r478, %r557, %r607, %p201;
	selp.b32 	%r479, %r607, %r559, %p201;
	selp.b32 	%r608, %r560, %r558, %p201;
	shfl.sync.bfly.b32	%r609, %r608, 8, 31, -1;
	selp.b32 	%r486, %r558, %r609, %p201;
	selp.b32 	%r487, %r609, %r560, %p201;
	selp.b32 	%r610, %r574, %r572, %p201;
	shfl.sync.bfly.b32	%r611, %r610, 8, 31, -1;
	selp.b32 	%r494, %r572, %r611, %p201;
	selp.b32 	%r495, %r611, %r574, %p201;
	selp.b32 	%r612, %r575, %r573, %p201;
	shfl.sync.bfly.b32	%r613, %r612, 8, 31, -1;
	selp.b32 	%r502, %r573, %r613, %p201;
	selp.b32 	%r503, %r613, %r575, %p201;
	selp.b32 	%r614, %r589, %r587, %p201;
	shfl.sync.bfly.b32	%r615, %r614, 8, 31, -1;
	selp.b32 	%r510, %r587, %r615, %p201;
	selp.b32 	%r511, %r615, %r589, %p201;
	selp.b32 	%r616, %r590, %r588, %p201;
	shfl.sync.bfly.b32	%r617, %r616, 8, 31, -1;
	selp.b32 	%r518, %r588, %r617, %p201;
	selp.b32 	%r519, %r617, %r590, %p201;
	selp.b32 	%r618, %r604, %r602, %p201;
	shfl.sync.bfly.b32	%r619, %r618, 8, 31, -1;
	selp.b32 	%r526, %r602, %r619, %p201;
	selp.b32 	%r527, %r619, %r604, %p201;
	selp.b32 	%r620, %r605, %r603, %p201;
	shfl.sync.bfly.b32	%r621, %r620, 8, 31, -1;
	selp.b32 	%r534, %r603, %r621, %p201;
	selp.b32 	%r535, %r621, %r605, %p201;
	mov.u32 	%r536, 21520;
	// begin inline asm
	prmt.b32 %r477, %r478, %r479, %r536;
	// end inline asm
	mov.u32 	%r540, 30258;
	// begin inline asm
	prmt.b32 %r481, %r478, %r479, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r485, %r486, %r487, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r489, %r486, %r487, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r493, %r494, %r495, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r497, %r494, %r495, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r501, %r502, %r503, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r505, %r502, %r503, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r510, %r511, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r513, %r510, %r511, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r518, %r519, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r518, %r519, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r526, %r527, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r526, %r527, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r534, %r535, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r534, %r535, %r540;
	// end inline asm
	st.shared.u32 	[%rd6], %r477;
	st.shared.u32 	[%rd7+128], %r481;
	st.shared.u32 	[%rd7+4], %r485;
	st.shared.u32 	[%rd7+132], %r489;
	st.shared.u32 	[%rd8], %r493;
	st.shared.u32 	[%rd9+128], %r497;
	st.shared.u32 	[%rd9+4], %r501;
	st.shared.u32 	[%rd9+132], %r505;
	st.shared.u32 	[%rd10], %r509;
	st.shared.u32 	[%rd11+128], %r513;
	st.shared.u32 	[%rd11+4], %r517;
	st.shared.u32 	[%rd11+132], %r521;
	st.shared.u32 	[%rd12], %r525;
	st.shared.u32 	[%rd13+128], %r529;
	st.shared.u32 	[%rd13+4], %r533;
	st.shared.u32 	[%rd13+132], %r537;
	bar.sync 	0;
	or.b32  	%r622, %r83, %r71;
	or.b32  	%r84, %r622, %r109;
	shr.u32 	%r2552, %r84, 5;
	mov.u64 	%rd136, %rd23;
	mov.u64 	%rd137, %rd22;
	mov.u32 	%r2553, %r2545;
	mov.u32 	%r2554, %r2546;
	mov.u32 	%r2555, %r2547;
	mov.u32 	%r2556, %r2548;
	mov.u32 	%r2559, %r2535;
$L__BB0_91:                             // %L12428
                                        //   Parent Loop BB0_90 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2546, %r2558;
	mov.u32 	%r2545, %r2557;
	add.s32 	%r2419, %r84, %r2559;
	bfe.s32 	%r2420, %r2419, 1, 1;
	and.b32  	%r2421, %r2420, 260;
	and.b32  	%r2422, %r2419, 1;
	neg.s32 	%r2423, %r2422;
	and.b32  	%r2424, %r2423, 520;
	and.b32  	%r2425, %r2552, 7;
	mul.lo.s32 	%r2426, %r2425, 1057;
	or.b32  	%r2427, %r72, %r2424;
	add.s32 	%r2428, %r2427, %r75;
	add.s32 	%r2429, %r2428, %r2421;
	add.s32 	%r2430, %r2429, %r2426;
	add.s32 	%r2431, %r2430, %r76;
	mul.wide.u32 	%rd93, %r2431, 4;
	add.s64 	%rd95, %rd41, %rd93;
	ld.shared.u32 	%r2547, [%rd95];
	add.s32 	%r2432, %r73, %r2424;
	add.s32 	%r2433, %r2432, %r75;
	add.s32 	%r2434, %r2433, %r2421;
	add.s32 	%r2435, %r2434, %r2426;
	add.s32 	%r2436, %r2435, %r76;
	mul.wide.u32 	%rd96, %r2436, 4;
	add.s64 	%rd97, %rd41, %rd96;
	ld.shared.u32 	%r2548, [%rd97];
	// begin inline asm
	mov.b32 %r628, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r639, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r627, %r2547, -2004318072;
	mov.u32 	%r626, 983055;
	// begin inline asm
	lop3.b32 %r625, %r626, %r627, %r628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r629, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r630, %r628, %r629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r633, %r625, %r630;
	// end inline asm
	mov.u32 	%r637, 15728880;
	// begin inline asm
	lop3.b32 %r636, %r637, %r627, %r639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r640, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r641, %r639, %r640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r644, %r636, %r641;
	// end inline asm
	shr.u32 	%r649, %r627, 8;
	// begin inline asm
	lop3.b32 %r647, %r626, %r649, %r628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r651, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r652, %r628, %r651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r655, %r647, %r652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r658, %r637, %r649, %r639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r662, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r663, %r639, %r662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r666, %r658, %r663;
	// end inline asm
	// begin inline asm
	mov.b32 %r674, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r685, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r673, %r2548, -2004318072;
	// begin inline asm
	lop3.b32 %r671, %r626, %r673, %r674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r675, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r676, %r674, %r675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r679, %r671, %r676;
	// end inline asm
	// begin inline asm
	lop3.b32 %r682, %r637, %r673, %r685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r686, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r687, %r685, %r686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r690, %r682, %r687;
	// end inline asm
	shr.u32 	%r695, %r673, 8;
	// begin inline asm
	lop3.b32 %r693, %r626, %r695, %r674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r697, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r698, %r674, %r697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r701, %r693, %r698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r704, %r637, %r695, %r685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r708, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r709, %r685, %r708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r712, %r704, %r709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r715, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r717, %r715, %r633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r720, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r722, %r720, %r644;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r725, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r727, %r725, %r655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r730, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r732, %r730, %r666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r735, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r737, %r735, %r679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r740, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r742, %r740, %r690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r745, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r747, %r745, %r701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r750, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r752, %r750, %r712;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r759, %r2553, -2004318072;
	// begin inline asm
	lop3.b32 %r757, %r626, %r759, %r760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r761, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r762, %r760, %r761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r765, %r757, %r762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r768, %r637, %r759, %r771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r772, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r773, %r771, %r772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r776, %r768, %r773;
	// end inline asm
	shr.u32 	%r781, %r759, 8;
	// begin inline asm
	lop3.b32 %r779, %r626, %r781, %r760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r784, %r760, %r783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r787, %r779, %r784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r790, %r637, %r781, %r771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r794, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r795, %r771, %r794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r798, %r790, %r795;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r805, %r2554, -2004318072;
	// begin inline asm
	lop3.b32 %r803, %r626, %r805, %r806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r807, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r808, %r806, %r807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r811, %r803, %r808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r814, %r637, %r805, %r817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r818, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r819, %r817, %r818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r822, %r814, %r819;
	// end inline asm
	shr.u32 	%r827, %r805, 8;
	// begin inline asm
	lop3.b32 %r825, %r626, %r827, %r806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r830, %r806, %r829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r833, %r825, %r830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r836, %r637, %r827, %r817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r841, %r817, %r840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r844, %r836, %r841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r847, %r188, %r765, %r717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r851, %r188, %r776, %r722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r855, %r188, %r787, %r727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r859, %r188, %r798, %r732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r863, %r188, %r811, %r737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r867, %r188, %r822, %r742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r871, %r188, %r833, %r747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r875, %r188, %r844, %r752;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r883, %r2555, -2004318072;
	// begin inline asm
	lop3.b32 %r881, %r626, %r883, %r884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r886, %r884, %r885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r889, %r881, %r886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r892, %r637, %r883, %r895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r897, %r895, %r896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r900, %r892, %r897;
	// end inline asm
	shr.u32 	%r905, %r883, 8;
	// begin inline asm
	lop3.b32 %r903, %r626, %r905, %r884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r908, %r884, %r907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r911, %r903, %r908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r914, %r637, %r905, %r895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r919, %r895, %r918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r922, %r914, %r919;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r929, %r2556, -2004318072;
	// begin inline asm
	lop3.b32 %r927, %r626, %r929, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r938, %r637, %r929, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	shr.u32 	%r951, %r929, 8;
	// begin inline asm
	lop3.b32 %r949, %r626, %r951, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r930, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r960, %r637, %r951, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r941, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r971, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r973, %r971, %r889, %r847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r977, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r979, %r977, %r900, %r851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r983, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r985, %r983, %r911, %r855;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r989, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r991, %r989, %r922, %r859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r995, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r997, %r995, %r935, %r863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1001, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1003, %r1001, %r946, %r867;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1007, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1009, %r1007, %r957, %r871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1013, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1015, %r1013, %r968, %r875;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1023, %r2545, -2004318072;
	// begin inline asm
	lop3.b32 %r1021, %r626, %r1023, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1026, %r1024, %r1025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1029, %r1021, %r1026;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1032, %r637, %r1023, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1037, %r1035, %r1036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1040, %r1032, %r1037;
	// end inline asm
	shr.u32 	%r1045, %r1023, 8;
	// begin inline asm
	lop3.b32 %r1043, %r626, %r1045, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1048, %r1024, %r1047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1051, %r1043, %r1048;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1054, %r637, %r1045, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1059, %r1035, %r1058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1062, %r1054, %r1059;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1069, %r2546, -2004318072;
	// begin inline asm
	lop3.b32 %r1067, %r626, %r1069, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1072, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1075, %r1067, %r1072;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1078, %r637, %r1069, %r1081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1083, %r1081, %r1082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1086, %r1078, %r1083;
	// end inline asm
	shr.u32 	%r1091, %r1069, 8;
	// begin inline asm
	lop3.b32 %r1089, %r626, %r1091, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1094, %r1070, %r1093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1097, %r1089, %r1094;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1100, %r637, %r1091, %r1081, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1105, %r1081, %r1104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1108, %r1100, %r1105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r224, %r1029, %r973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r224, %r1040, %r979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r224, %r1051, %r985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r224, %r1062, %r991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r224, %r1075, %r997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r224, %r1086, %r1003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r224, %r1097, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r224, %r1108, %r1015;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1143, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r245, %r1150, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r245, %r1159, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r245, %r1168, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1170, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r1170, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r245, %r1177, %r1172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r248, %r1150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r245, %r1147, %r1179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1186, %r248, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r245, %r1156, %r1186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r248, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r245, %r1165, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r248, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r245, %r1174, %r1200;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1254, %r1251}, {%r305, %r311, %r308, %r314}, {%r1148, %r1182}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1263, %r1260}, {%r305, %r311, %r308, %r314}, {%r1157, %r1189}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1272, %r1269}, {%r305, %r311, %r308, %r314}, {%r1166, %r1196}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1278}, {%r305, %r311, %r308, %r314}, {%r1175, %r1203}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1247, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r1247, %r1251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r352, %r1254, %r1249;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1256, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r1256, %r1260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r352, %r1263, %r1258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1265, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r1265, %r1269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r352, %r1272, %r1267;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1274, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r1274, %r1278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r352, %r1281, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r355, %r1254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r352, %r1251, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r355, %r1263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r352, %r1260, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r355, %r1272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r352, %r1269, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r355, %r1281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r352, %r1278, %r1304;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1311, %r1312}, {%r392, %r398, %r395, %r401}, {%r1252, %r1286}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1321, %r1322}, {%r392, %r398, %r395, %r401}, {%r1261, %r1293}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r392, %r398, %r395, %r401}, {%r1270, %r1300}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r392, %r398, %r395, %r401}, {%r1279, %r1307}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r104, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1354, %r104, %r1312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1357, %r104, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r104, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r104, %r1331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r104, %r1332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r104, %r1341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r104, %r1342;
	// end inline asm
	// begin inline asm
	mov.b32 %r1375, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1376, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1377, %r1351, %r1375;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1380, %r1377, %r1376;
	// end inline asm
	// begin inline asm
	mov.b32 %r1383, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1384, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1385, %r1354, %r1383;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1388, %r1385, %r1384;
	// end inline asm
	// begin inline asm
	mov.b32 %r1391, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1392, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1393, %r1357, %r1391;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1396, %r1393, %r1392;
	// end inline asm
	// begin inline asm
	mov.b32 %r1399, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1400, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1401, %r1360, %r1399;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1404, %r1401, %r1400;
	// end inline asm
	// begin inline asm
	mov.b32 %r1407, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1408, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1409, %r1363, %r1407;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1412, %r1409, %r1408;
	// end inline asm
	// begin inline asm
	mov.b32 %r1415, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1416, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1417, %r1366, %r1415;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1420, %r1417, %r1416;
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1424, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1425, %r1369, %r1423;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1428, %r1425, %r1424;
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1432, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1433, %r1372, %r1431;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1436, %r1433, %r1432;
	// end inline asm
	// begin inline asm
	mov.b32 %r1442, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1441, %r1442, %r1440;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1444, %r1380, %r1441;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1442, %r1447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1451, %r1388, %r1448;
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1455, %r1442, %r1454;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1458, %r1396, %r1455;
	// end inline asm
	// begin inline asm
	mov.b32 %r1461, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1462, %r1442, %r1461;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1465, %r1404, %r1462;
	// end inline asm
	mov.u32 	%r1471, 25152;
	// begin inline asm
	prmt.b32 %r1468, %r1444, %r1458, %r1471;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1472, %r1451, %r1465, %r1471;
	// end inline asm
	shl.b32 	%r1479, %r1472, 4;
	mov.u32 	%r1477, 252645135;
	// begin inline asm
	lop3.b32 %r1476, %r1477, %r1468, %r1479, 202;
	// end inline asm
	xor.b32  	%r2437, %r1476, -2004318072;
	// begin inline asm
	mov.b32 %r1483, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1482, %r1483, %r1481;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1485, %r1412, %r1482;
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1489, %r1483, %r1488;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1492, %r1420, %r1489;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1483, %r1495;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1428, %r1496;
	// end inline asm
	// begin inline asm
	mov.b32 %r1502, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1503, %r1483, %r1502;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1436, %r1503;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1509, %r1485, %r1499, %r1471;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1513, %r1492, %r1506, %r1471;
	// end inline asm
	shl.b32 	%r1520, %r1513, 4;
	// begin inline asm
	lop3.b32 %r1517, %r1477, %r1509, %r1520, 202;
	// end inline asm
	xor.b32  	%r2438, %r1517, -2004318072;
	st.shared.u32 	[%rd136], %r2437;
	st.shared.u32 	[%rd137], %r2438;
	ld.shared.u32 	%r2557, [%rd95];
	ld.shared.u32 	%r2558, [%rd97];
	// begin inline asm
	mov.b32 %r1526, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1525, %r2557, -2004318072;
	// begin inline asm
	lop3.b32 %r1523, %r626, %r1525, %r1526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1526, %r1527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1531, %r1523, %r1528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1534, %r637, %r1525, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1537, %r1538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1542, %r1534, %r1539;
	// end inline asm
	shr.u32 	%r1547, %r1525, 8;
	// begin inline asm
	lop3.b32 %r1545, %r626, %r1547, %r1526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1550, %r1526, %r1549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1553, %r1545, %r1550;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1556, %r637, %r1547, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1560, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1561, %r1537, %r1560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1564, %r1556, %r1561;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1571, %r2558, -2004318072;
	// begin inline asm
	lop3.b32 %r1569, %r626, %r1571, %r1572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1574, %r1572, %r1573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1577, %r1569, %r1574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1580, %r637, %r1571, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1585, %r1583, %r1584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1588, %r1580, %r1585;
	// end inline asm
	shr.u32 	%r1593, %r1571, 8;
	// begin inline asm
	lop3.b32 %r1591, %r626, %r1593, %r1572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1596, %r1572, %r1595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1599, %r1591, %r1596;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1602, %r637, %r1593, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1606, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1607, %r1583, %r1606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1610, %r1602, %r1607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1613, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r1613, %r1531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1618, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r1618, %r1542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1623, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1625, %r1623, %r1553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1628, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1630, %r1628, %r1564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1633, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1635, %r1633, %r1577;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1638, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r1638, %r1588;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1643, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r1643, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1610;
	// end inline asm
	// begin inline asm
	mov.b32 %r1658, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1669, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1655, %r626, %r883, %r1658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1659, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1660, %r1658, %r1659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1663, %r1655, %r1660;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1666, %r637, %r883, %r1669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1670, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1671, %r1669, %r1670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1674, %r1666, %r1671;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1677, %r626, %r905, %r1658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1681, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1682, %r1658, %r1681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1685, %r1677, %r1682;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1688, %r637, %r905, %r1669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1692, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1693, %r1669, %r1692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1696, %r1688, %r1693;
	// end inline asm
	// begin inline asm
	mov.b32 %r1704, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1715, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1701, %r626, %r929, %r1704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1705, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1706, %r1704, %r1705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1709, %r1701, %r1706;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1712, %r637, %r929, %r1715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1716, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1717, %r1715, %r1716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1720, %r1712, %r1717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1723, %r626, %r951, %r1704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1727, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1728, %r1704, %r1727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1731, %r1723, %r1728;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1734, %r637, %r951, %r1715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1738, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1739, %r1715, %r1738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1742, %r1734, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r188, %r1663, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r188, %r1674, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r188, %r1685, %r1625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r188, %r1696, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r188, %r1709, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r188, %r1720, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r188, %r1731, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r188, %r1742, %r1650;
	// end inline asm
	// begin inline asm
	mov.b32 %r1782, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1793, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1779, %r626, %r1023, %r1782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1783, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1784, %r1782, %r1783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1787, %r1779, %r1784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1790, %r637, %r1023, %r1793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1794, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1795, %r1793, %r1794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1798, %r1790, %r1795;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1801, %r626, %r1045, %r1782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1805, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1806, %r1782, %r1805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1809, %r1801, %r1806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1812, %r637, %r1045, %r1793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1816, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1817, %r1793, %r1816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1820, %r1812, %r1817;
	// end inline asm
	// begin inline asm
	mov.b32 %r1828, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1839, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1825, %r626, %r1069, %r1828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1829, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1830, %r1828, %r1829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1833, %r1825, %r1830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1836, %r637, %r1069, %r1839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1840, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1841, %r1839, %r1840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1844, %r1836, %r1841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1847, %r626, %r1091, %r1828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1851, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1852, %r1828, %r1851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1855, %r1847, %r1852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1858, %r637, %r1091, %r1839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1862, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1863, %r1839, %r1862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1866, %r1858, %r1863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1869, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1869, %r1787, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1875, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1875, %r1798, %r1749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r1881, %r1809, %r1753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1887, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1887, %r1820, %r1757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1893, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r1893, %r1833, %r1761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1899, %r1844, %r1765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1905, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r1905, %r1855, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1911, %r1866, %r1773;
	// end inline asm
	// begin inline asm
	mov.b32 %r1922, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1919, %r626, %r627, %r1922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1923, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1924, %r1922, %r1923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1927, %r1919, %r1924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1930, %r637, %r627, %r1933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1935, %r1933, %r1934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1938, %r1930, %r1935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1941, %r626, %r649, %r1922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1946, %r1922, %r1945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1949, %r1941, %r1946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1952, %r637, %r649, %r1933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1956, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1957, %r1933, %r1956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1960, %r1952, %r1957;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1965, %r626, %r673, %r1968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1969, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1970, %r1968, %r1969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1973, %r1965, %r1970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1976, %r637, %r673, %r1979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1979, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1987, %r626, %r695, %r1968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1992, %r1968, %r1991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1995, %r1987, %r1992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1998, %r637, %r695, %r1979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2002, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2003, %r1979, %r2002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2006, %r1998, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r224, %r1927, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r224, %r1938, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r224, %r1949, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r224, %r1960, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r224, %r1973, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r224, %r1984, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r224, %r1995, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r224, %r2006, %r1913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2041, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r2041, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r245, %r2048, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2050, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2050, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r245, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2059, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2059, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r245, %r2066, %r2061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2068, %r248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r2068, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r245, %r2075, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r248, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r245, %r2045, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2084, %r248, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r245, %r2054, %r2084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r248, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r245, %r2063, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r248, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r245, %r2072, %r2098;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2149}, {%r305, %r311, %r308, %r314}, {%r2046, %r2080}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2161, %r2158}, {%r305, %r311, %r308, %r314}, {%r2055, %r2087}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2167}, {%r305, %r311, %r308, %r314}, {%r2064, %r2094}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2179, %r2176}, {%r305, %r311, %r308, %r314}, {%r2073, %r2101}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2145, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r2145, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r352, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2154, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r2154, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r352, %r2161, %r2156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2163, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r2163, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r352, %r2170, %r2165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2172, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r2172, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r352, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r355, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r352, %r2149, %r2181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r355, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r352, %r2158, %r2188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r355, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r352, %r2167, %r2195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r355, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r352, %r2176, %r2202;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2209, %r2210}, {%r392, %r398, %r395, %r401}, {%r2150, %r2184}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2219, %r2220}, {%r392, %r398, %r395, %r401}, {%r2159, %r2191}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2229, %r2230}, {%r392, %r398, %r395, %r401}, {%r2168, %r2198}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2239, %r2240}, {%r392, %r398, %r395, %r401}, {%r2177, %r2205}, {%r2535, %r2535};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r104, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r104, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r104, %r2219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r104, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r104, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r104, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r104, %r2239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r104, %r2240;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2275, %r2249, %r2273;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2278, %r2275, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2283, %r2252, %r2281;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2286, %r2283, %r2282;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2291, %r2255, %r2289;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2294, %r2291, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2299, %r2258, %r2297;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2302, %r2299, %r2298;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2306, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2307, %r2261, %r2305;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2310, %r2307, %r2306;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2315, %r2264, %r2313;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2318, %r2315, %r2314;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2323, %r2267, %r2321;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2326, %r2323, %r2322;
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2331, %r2270, %r2329;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2334, %r2331, %r2330;
	// end inline asm
	// begin inline asm
	mov.b32 %r2340, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2339, %r2340, %r2338;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2278, %r2339;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2340, %r2345;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2286, %r2346;
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2340, %r2352;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2294, %r2353;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2340, %r2359;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2302, %r2360;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2366, %r2342, %r2356, %r1471;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2370, %r2349, %r2363, %r1471;
	// end inline asm
	shl.b32 	%r2377, %r2370, 4;
	// begin inline asm
	lop3.b32 %r2374, %r1477, %r2366, %r2377, 202;
	// end inline asm
	xor.b32  	%r2439, %r2374, -2004318072;
	// begin inline asm
	mov.b32 %r2381, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2381, %r2379;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2310, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2386, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2381, %r2386;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2318, %r2387;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2381, %r2393;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2326, %r2394;
	// end inline asm
	// begin inline asm
	mov.b32 %r2400, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2381, %r2400;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2334, %r2401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2407, %r2383, %r2397, %r1471;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2411, %r2390, %r2404, %r1471;
	// end inline asm
	shl.b32 	%r2418, %r2411, 4;
	// begin inline asm
	lop3.b32 %r2415, %r1477, %r2407, %r2418, 202;
	// end inline asm
	xor.b32  	%r2440, %r2415, -2004318072;
	st.shared.u32 	[%rd136], %r2439;
	st.shared.u32 	[%rd137], %r2440;
	add.s32 	%r2559, %r2559, 32;
	add.s64 	%rd137, %rd137, 4228;
	add.s64 	%rd136, %rd136, 4228;
	add.s32 	%r2552, %r2552, 1;
	setp.eq.s32 	%p214, %r2559, 256;
	mov.u32 	%r2553, %r2545;
	mov.u32 	%r2554, %r2546;
	mov.u32 	%r2555, %r2547;
	mov.u32 	%r2556, %r2548;
	@%p214 bra 	$L__BB0_92;
	bra.uni 	$L__BB0_91;
$L__BB0_92:                             // %guard_exit10511
                                        //   in Loop: Header=BB0_90 Depth=1
	bar.sync 	0;
	or.b32  	%r131, %r83, %r65;
	ld.shared.u32 	%r2446, [%rd14];
	ld.shared.u32 	%r2447, [%rd15+128];
	ld.shared.u32 	%r2454, [%rd15+4];
	ld.shared.u32 	%r2455, [%rd15+132];
	ld.shared.u32 	%r2462, [%rd16];
	ld.shared.u32 	%r2463, [%rd17+128];
	ld.shared.u32 	%r2470, [%rd17+4];
	ld.shared.u32 	%r2471, [%rd17+132];
	ld.shared.u32 	%r2478, [%rd18];
	ld.shared.u32 	%r2479, [%rd19+128];
	ld.shared.u32 	%r2486, [%rd19+4];
	ld.shared.u32 	%r2487, [%rd19+132];
	ld.shared.u32 	%r2494, [%rd20];
	ld.shared.u32 	%r2495, [%rd21+128];
	ld.shared.u32 	%r2502, [%rd21+4];
	ld.shared.u32 	%r2503, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2441, %r2446, %r2447, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2446, %r2447, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2454, %r2455, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2453, %r2454, %r2455, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2457, %r2462, %r2463, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2461, %r2462, %r2463, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2465, %r2470, %r2471, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2469, %r2470, %r2471, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2473, %r2478, %r2479, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2477, %r2478, %r2479, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2481, %r2486, %r2487, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2485, %r2486, %r2487, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2489, %r2494, %r2495, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2493, %r2494, %r2495, %r540;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2497, %r2502, %r2503, %r536;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2501, %r2502, %r2503, %r540;
	// end inline asm
	selp.b32 	%r2505, %r2445, %r2441, %p201;
	shfl.sync.bfly.b32	%r2506, %r2505, 8, 31, -1;
	selp.b32 	%r2507, %r2453, %r2449, %p201;
	shfl.sync.bfly.b32	%r2508, %r2507, 8, 31, -1;
	selp.b32 	%r2509, %r2461, %r2457, %p201;
	shfl.sync.bfly.b32	%r136, %r2509, 8, 31, -1;
	selp.b32 	%r2510, %r2469, %r2465, %p201;
	shfl.sync.bfly.b32	%r137, %r2510, 8, 31, -1;
	selp.b32 	%r2511, %r2477, %r2473, %p201;
	shfl.sync.bfly.b32	%r2512, %r2511, 8, 31, -1;
	selp.b32 	%r138, %r2473, %r2512, %p201;
	selp.b32 	%r139, %r2512, %r2477, %p201;
	selp.b32 	%r2513, %r2485, %r2481, %p201;
	shfl.sync.bfly.b32	%r2514, %r2513, 8, 31, -1;
	selp.b32 	%r140, %r2481, %r2514, %p201;
	selp.b32 	%r141, %r2514, %r2485, %p201;
	selp.b32 	%r2515, %r2493, %r2489, %p201;
	shfl.sync.bfly.b32	%r2516, %r2515, 8, 31, -1;
	selp.b32 	%r142, %r2489, %r2516, %p201;
	selp.b32 	%r143, %r2516, %r2493, %p201;
	selp.b32 	%r2517, %r2501, %r2497, %p201;
	shfl.sync.bfly.b32	%r2518, %r2517, 8, 31, -1;
	selp.b32 	%r144, %r2497, %r2518, %p201;
	selp.b32 	%r145, %r2518, %r2501, %p201;
	shl.b32 	%r2536, %r131, 12;
	@%p215 bra 	$L__BB0_114;
// %bb.93:                              // %guard_exit10511.pass10078_crit_edge
                                        //   in Loop: Header=BB0_90 Depth=1
	or.b32  	%r2528, %r2536, %r67;
	or.b32  	%r2529, %r2528, %r68;
	or.b32  	%r2564, %r2529, %r74;
	bra.uni 	$L__BB0_115;
$L__BB0_116:                            // %L23743
	st.global.u32 	[%rd4], %r2535;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r2534, 2;
	st.global.u32 	[%rd4], %r2534;
	mov.u64 	%rd134, exception2082;
	cvta.global.u64 	%rd135, %rd134;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd135;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
