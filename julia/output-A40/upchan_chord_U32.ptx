// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2084[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<255>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2597>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<151>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r165, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r166, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r166, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd47, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd31, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r167, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r168, %r167, %r1;
	or.b32  	%r169, %r168, %r4;
	mul.wide.u32 	%rd53, %r169, 4;
	add.s64 	%rd4, %rd47, %rd53;
	mov.u32 	%r170, 1;
	st.global.u32 	[%rd4], %r170;
	ld.global.u32 	%r5, [%rd31];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd35, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd35];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd39, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd39];
	sub.s32 	%r171, %r6, %r5;
	and.b32  	%r172, %r171, 255;
	setp.ne.s32 	%p6, %r172, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd43, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd43];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	sub.s32 	%r173, %r8, %r7;
	add.s32 	%r174, %r173, 3;
	and.b32  	%r175, %r174, 7;
	setp.eq.s32 	%p12, %r175, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass161
	bfe.u32 	%r118, %r1, 1, 1;
	and.b32  	%r119, %r1, 1;
	bfe.u32 	%r120, %r1, 2, 1;
	shl.b32 	%r183, %r120, 1;
	shl.b32 	%r184, %r119, 2;
	shl.b32 	%r185, %r118, 3;
	or.b32  	%r186, %r184, %r185;
	or.b32  	%r187, %r183, %r186;
	shr.u32 	%r121, %r1, 4;
	or.b32  	%r122, %r121, %r187;
	or.b32  	%r123, %r122, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f160, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r122;
	sub.f32 	%f187, %f186, %f160;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f162, %f187, %f216;
	setp.ne.f32 	%p18, %f162, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L550
	sin.approx.f32 	%f217, %f162;
	div.approx.f32 	%f889, %f217, %f162;
$L__BB0_10:                             // %L553
	cvt.rn.f32.s32 	%f220, %r123;
	sub.f32 	%f221, %f220, %f160;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L570
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f890, %f251, %f5;
$L__BB0_12:                             // %L573
	or.b32  	%r205, %r122, 32;
	or.b32  	%r10, %r122, 48;
	cvt.rn.f32.s32 	%f255, %r205;
	sub.f32 	%f256, %f255, %f160;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L652
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f891, %f286, %f9;
$L__BB0_14:                             // %L655
	cvt.rn.f32.s32 	%f289, %r10;
	sub.f32 	%f290, %f289, %f160;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L672
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f892, %f320, %f14;
$L__BB0_16:                             // %L675
	or.b32  	%r223, %r122, 64;
	or.b32  	%r12, %r122, 80;
	cvt.rn.f32.s32 	%f324, %r223;
	sub.f32 	%f325, %f324, %f160;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L754
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f893, %f355, %f18;
$L__BB0_18:                             // %L757
	cvt.rn.f32.s32 	%f358, %r12;
	sub.f32 	%f359, %f358, %f160;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L774
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f894, %f389, %f23;
$L__BB0_20:                             // %L777
	or.b32  	%r241, %r122, 96;
	or.b32  	%r14, %r122, 112;
	cvt.rn.f32.s32 	%f393, %r241;
	sub.f32 	%f394, %f393, %f160;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L856
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f895, %f424, %f27;
$L__BB0_22:                             // %L859
	cvt.rn.f32.s32 	%f427, %r14;
	sub.f32 	%f428, %f427, %f160;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L876
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f896, %f458, %f32;
$L__BB0_24:                             // %L879
	mul.lo.s32 	%r16, %r122, 31;
	cvt.rn.f32.s32 	%f461, %r16;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f899, %f35;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f899;
	and.b32  	%r259, %r18, 8388607;
	or.b32  	%r2565, %r259, 1065353216;
	mov.b32 	%f898, %r2565;
	add.s32 	%r260, %r18, -1073741824;
	and.b32  	%r2566, %r260, -8388608;
	setp.eq.s32 	%p68, %r2566, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r261, %r2566, 192937984;
	add.s32 	%r262, %r2565, %r261;
	mov.b32 	%f473, %r262;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2566, %r2566, %r261;
	mov.b32 	%r2565, %f898;
	setp.ne.s32 	%p69, %r2566, 0;
	setp.ne.s32 	%p70, %r2565, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f38, %f897, 0fC0000000, %f899;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r263, %f35;
	and.b32  	%r264, %r263, -2147483648;
	mov.b32 	%r265, %f899;
	or.b32  	%r266, %r264, %r265;
	mov.b32 	%f899, %r266;
$L__BB0_38:                             // %__nv_fmodf.exit
	add.s32 	%r275, %r16, 496;
	cvt.rn.f32.s32 	%f513, %r275;
	div.approx.f32 	%f54, %f513, %f216;
	abs.f32 	%f903, %f54;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f903;
	and.b32  	%r276, %r26, 8388607;
	or.b32  	%r2567, %r276, 1065353216;
	mov.b32 	%f902, %r2567;
	add.s32 	%r277, %r26, -1073741824;
	and.b32  	%r2568, %r277, -8388608;
	setp.eq.s32 	%p88, %r2568, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i623.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i623
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r2568, 192937984;
	add.s32 	%r279, %r2567, %r278;
	mov.b32 	%f525, %r279;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2568, %r2568, %r278;
	mov.b32 	%r2567, %f902;
	setp.ne.s32 	%p89, %r2568, 0;
	setp.ne.s32 	%p90, %r2567, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i625
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i602
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f57, %f901, 0fC0000000, %f903;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i606
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i609
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i628
	shr.u32 	%r117, %r1, 1;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r280, %f54;
	and.b32  	%r281, %r280, -2147483648;
	mov.b32 	%r282, %f903;
	or.b32  	%r283, %r281, %r282;
	mov.b32 	%f903, %r283;
$L__BB0_52:                             // %__nv_fmodf.exit629
	shr.u32 	%r35, %r1, 3;
	and.b32  	%r298, %r35, 2;
	or.b32  	%r36, %r120, %r298;
	and.b32  	%r299, %r117, 4;
	or.b32  	%r37, %r36, %r299;
	and.b32  	%r300, %r1, 3;
	mul.lo.s32 	%r301, %r300, %r37;
	shl.b32 	%r302, %r301, 1;
	neg.s32 	%r303, %r302;
	cvt.rn.f32.s32 	%f567, %r303;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f71, %f567, %f568;
	abs.f32 	%f907, %f71;
	setp.lt.f32 	%p101, %f907, 0f40000000;
	@%p101 bra 	$L__BB0_64;
// %bb.53:
	setp.gtu.f32 	%p102, %f907, 0f4B800000;
	@%p102 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_54;
$L__BB0_60:
	mov.b32 	%r39, %f907;
	and.b32  	%r304, %r39, 8388607;
	or.b32  	%r2569, %r304, 1065353216;
	mov.b32 	%f906, %r2569;
	add.s32 	%r305, %r39, -1073741824;
	and.b32  	%r2570, %r305, -8388608;
	setp.eq.s32 	%p108, %r2570, 0;
	@%p108 bra 	$L__BB0_63;
// %bb.61:                              // %__nv_fmaf_rn.exit4.i.i.i654.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
$L__BB0_62:                             // %__nv_fmaf_rn.exit4.i.i.i654
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r2570, 192937984;
	add.s32 	%r307, %r2569, %r306;
	mov.b32 	%f579, %r307;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2570, %r2570, %r306;
	mov.b32 	%r2569, %f906;
	setp.ne.s32 	%p109, %r2570, 0;
	setp.ne.s32 	%p110, %r2569, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_62;
$L__BB0_63:                             // %__internal_fmodf_slowpath_mod.exit.i.i656
	setp.gt.u32 	%p112, %r39, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	$L__BB0_64;
$L__BB0_54:                             // %__nv_fast_fdividef.exit.i.i.i633
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f74, %f905, 0fC0000000, %f907;
	mov.b32 	%r38, %f74;
	setp.lt.u32 	%p103, %r38, 1073741824;
	@%p103 bra 	$L__BB0_59;
// %bb.55:
	setp.lt.u32 	%p104, %r38, -2147483647;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p107, %f74, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p107;
	bra.uni 	$L__BB0_59;
$L__BB0_57:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p105, %f74, 0f40800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:                              // %__nv_fmaf_rn.exit.i.i.i637
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p106, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p106;
$L__BB0_59:                             // %__internal_fmodf_fastpath_quot.exit.i.i640
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
$L__BB0_64:                             // %__internal_fmodf_kernel.exit.i659
	shl.b32 	%r114, %r1, 1;
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p113, %f588, 0f7F800000;
	@%p113 bra 	$L__BB0_66;
// %bb.65:
	mov.b32 	%r308, %f71;
	and.b32  	%r309, %r308, -2147483648;
	mov.b32 	%r310, %f907;
	or.b32  	%r311, %r309, %r310;
	mov.b32 	%f907, %r311;
$L__BB0_66:                             // %__nv_fmodf.exit660
	and.b32  	%r320, %r114, 6;
	mov.u32 	%r321, -8;
	sub.s32 	%r322, %r321, %r320;
	mul.lo.s32 	%r323, %r37, %r322;
	cvt.rn.f32.s32 	%f619, %r323;
	div.approx.f32 	%f90, %f619, %f568;
	abs.f32 	%f911, %f90;
	setp.lt.f32 	%p121, %f911, 0f40000000;
	@%p121 bra 	$L__BB0_78;
// %bb.67:
	setp.gtu.f32 	%p122, %f911, 0f4B800000;
	@%p122 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_68;
$L__BB0_74:
	mov.b32 	%r47, %f911;
	and.b32  	%r324, %r47, 8388607;
	or.b32  	%r2571, %r324, 1065353216;
	mov.b32 	%f910, %r2571;
	add.s32 	%r325, %r47, -1073741824;
	and.b32  	%r2572, %r325, -8388608;
	setp.eq.s32 	%p128, %r2572, 0;
	@%p128 bra 	$L__BB0_77;
// %bb.75:                              // %__nv_fmaf_rn.exit4.i.i.i685.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
$L__BB0_76:                             // %__nv_fmaf_rn.exit4.i.i.i685
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r2572, 192937984;
	add.s32 	%r327, %r2571, %r326;
	mov.b32 	%f631, %r327;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2572, %r2572, %r326;
	mov.b32 	%r2571, %f910;
	setp.ne.s32 	%p129, %r2572, 0;
	setp.ne.s32 	%p130, %r2571, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_76;
$L__BB0_77:                             // %__internal_fmodf_slowpath_mod.exit.i.i687
	setp.gt.u32 	%p132, %r47, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	$L__BB0_78;
$L__BB0_68:                             // %__nv_fast_fdividef.exit.i.i.i664
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f93, %f909, 0fC0000000, %f911;
	mov.b32 	%r46, %f93;
	setp.lt.u32 	%p123, %r46, 1073741824;
	@%p123 bra 	$L__BB0_73;
// %bb.69:
	setp.lt.u32 	%p124, %r46, -2147483647;
	@%p124 bra 	$L__BB0_71;
// %bb.70:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p127, %f93, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p127;
	bra.uni 	$L__BB0_73;
$L__BB0_71:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p125, %f93, 0f40800000;
	@%p125 bra 	$L__BB0_73;
// %bb.72:                              // %__nv_fmaf_rn.exit.i.i.i668
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p126, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p126;
$L__BB0_73:                             // %__internal_fmodf_fastpath_quot.exit.i.i671
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
$L__BB0_78:                             // %__internal_fmodf_kernel.exit.i690
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p133, %f640, 0f7F800000;
	@%p133 bra 	$L__BB0_80;
// %bb.79:
	mov.b32 	%r328, %f90;
	and.b32  	%r329, %r328, -2147483648;
	mov.b32 	%r330, %f911;
	or.b32  	%r331, %r329, %r330;
	mov.b32 	%f911, %r331;
$L__BB0_80:                             // %__nv_fmodf.exit691
	shl.b32 	%r352, %r118, 1;
	neg.s32 	%r58, %r352;
	mul.lo.s32 	%r59, %r58, %r37;
	cvt.rn.f32.s32 	%f673, %r59;
	div.approx.f32 	%f107, %f673, %f216;
	abs.f32 	%f915, %f107;
	setp.lt.f32 	%p141, %f915, 0f40000000;
	@%p141 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p142, %f915, 0f4B800000;
	@%p142 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r61, %f915;
	and.b32  	%r353, %r61, 8388607;
	or.b32  	%r2573, %r353, 1065353216;
	mov.b32 	%f914, %r2573;
	add.s32 	%r354, %r61, -1073741824;
	and.b32  	%r2574, %r354, -8388608;
	setp.eq.s32 	%p148, %r2574, 0;
	@%p148 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i716.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i716
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r2574, 192937984;
	add.s32 	%r356, %r2573, %r355;
	mov.b32 	%f685, %r356;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2574, %r2574, %r355;
	mov.b32 	%r2573, %f914;
	setp.ne.s32 	%p149, %r2574, 0;
	setp.ne.s32 	%p150, %r2573, 0;
	and.pred  	%p151, %p149, %p150;
	@%p151 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i718
	setp.gt.u32 	%p152, %r61, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p152;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i695
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f110, %f913, 0fC0000000, %f915;
	mov.b32 	%r60, %f110;
	setp.lt.u32 	%p143, %r60, 1073741824;
	@%p143 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p144, %r60, -2147483647;
	@%p144 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p147, %f110, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p147;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p145, %f110, 0f40800000;
	@%p145 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i699
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p146, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p146;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i702
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i721
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p153, %f694, 0f7F800000;
	@%p153 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r357, %f107;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f915;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f915, %r360;
$L__BB0_94:                             // %__nv_fmodf.exit722
	shl.b32 	%r369, %r37, 2;
	sub.s32 	%r370, %r59, %r369;
	cvt.rn.f32.s32 	%f725, %r370;
	div.approx.f32 	%f126, %f725, %f216;
	abs.f32 	%f919, %f126;
	setp.lt.f32 	%p161, %f919, 0f40000000;
	@%p161 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p162, %f919, 0f4B800000;
	@%p162 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r69, %f919;
	and.b32  	%r371, %r69, 8388607;
	or.b32  	%r2575, %r371, 1065353216;
	mov.b32 	%f918, %r2575;
	add.s32 	%r372, %r69, -1073741824;
	and.b32  	%r2576, %r372, -8388608;
	setp.eq.s32 	%p168, %r2576, 0;
	@%p168 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i747.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i747
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r2576, 192937984;
	add.s32 	%r374, %r2575, %r373;
	mov.b32 	%f737, %r374;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2576, %r2576, %r373;
	mov.b32 	%r2575, %f918;
	setp.ne.s32 	%p169, %r2576, 0;
	setp.ne.s32 	%p170, %r2575, 0;
	and.pred  	%p171, %p169, %p170;
	@%p171 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i749
	setp.gt.u32 	%p172, %r69, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p172;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i726
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f129, %f917, 0fC0000000, %f919;
	mov.b32 	%r68, %f129;
	setp.lt.u32 	%p163, %r68, 1073741824;
	@%p163 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p164, %r68, -2147483647;
	@%p164 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p167, %f129, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p167;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p165, %f129, 0f40800000;
	@%p165 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i730
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p166, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p166;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i733
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i752
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p173, %f746, 0f7F800000;
	@%p173 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r375, %f126;
	and.b32  	%r376, %r375, -2147483648;
	mov.b32 	%r377, %f919;
	or.b32  	%r378, %r376, %r377;
	mov.b32 	%f919, %r378;
$L__BB0_108:                            // %__nv_fmodf.exit753
	mul.lo.s32 	%r79, %r58, %r36;
	cvt.rn.f32.s32 	%f779, %r79;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f143, %f779, %f780;
	abs.f32 	%f927, %f143;
	setp.lt.f32 	%p181, %f927, 0f40000000;
	@%p181 bra 	$L__BB0_139;
// %bb.109:
	setp.gtu.f32 	%p182, %f927, 0f4B800000;
	@%p182 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_110;
$L__BB0_135:
	mov.b32 	%r125, %f927;
	and.b32  	%r393, %r125, 8388607;
	or.b32  	%r2586, %r393, 1065353216;
	mov.b32 	%f926, %r2586;
	add.s32 	%r394, %r125, -1073741824;
	and.b32  	%r2587, %r394, -8388608;
	setp.eq.s32 	%p188, %r2587, 0;
	@%p188 bra 	$L__BB0_138;
// %bb.136:                             // %__nv_fmaf_rn.exit4.i.i.i809.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
$L__BB0_137:                            // %__nv_fmaf_rn.exit4.i.i.i809
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r2587, 192937984;
	add.s32 	%r396, %r2586, %r395;
	mov.b32 	%f791, %r396;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f926, %f791, %f797;
	sub.s32 	%r2587, %r2587, %r395;
	mov.b32 	%r2586, %f926;
	setp.ne.s32 	%p189, %r2587, 0;
	setp.ne.s32 	%p190, %r2586, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	$L__BB0_137;
$L__BB0_138:                            // %__internal_fmodf_slowpath_mod.exit.i.i811
	setp.gt.u32 	%p192, %r125, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f799, %f926, 0f34000000;
	mul.f32 	%f927, %f798, %f799;
	bra.uni 	$L__BB0_139;
$L__BB0_110:                            // %__nv_fast_fdividef.exit.i.i.i788
	div.approx.f32 	%f782, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f782;
	fma.rn.f32 	%f164, %f925, 0fC0000000, %f927;
	mov.b32 	%r124, %f164;
	setp.lt.u32 	%p183, %r124, 1073741824;
	@%p183 bra 	$L__BB0_134;
// %bb.111:
	setp.lt.u32 	%p184, %r124, -2147483647;
	@%p184 bra 	$L__BB0_132;
// %bb.112:
	add.f32 	%f787, %f925, 0fBF800000;
	setp.lt.f32 	%p187, %f164, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f925, %f788, %f787, %p187;
	bra.uni 	$L__BB0_134;
$L__BB0_132:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p185, %f164, 0f40800000;
	@%p185 bra 	$L__BB0_134;
// %bb.133:                             // %__nv_fmaf_rn.exit.i.i.i792
	add.f32 	%f783, %f925, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f164;
	setp.ge.f32 	%p186, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f925, %f786, %f783, %p186;
$L__BB0_134:                            // %__internal_fmodf_fastpath_quot.exit.i.i795
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
$L__BB0_139:                            // %__internal_fmodf_kernel.exit.i814
	abs.f32 	%f800, %f927;
	setp.gtu.f32 	%p193, %f800, 0f7F800000;
	@%p193 bra 	$L__BB0_141;
// %bb.140:
	mov.b32 	%r397, %f143;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r399, %f927;
	or.b32  	%r400, %r398, %r399;
	mov.b32 	%f927, %r400;
$L__BB0_141:                            // %__nv_fmodf.exit815
	shl.b32 	%r409, %r36, 2;
	sub.s32 	%r410, %r79, %r409;
	cvt.rn.f32.s32 	%f833, %r410;
	div.approx.f32 	%f181, %f833, %f780;
	abs.f32 	%f923, %f181;
	setp.lt.f32 	%p202, %f923, 0f40000000;
	@%p202 bra 	$L__BB0_124;
// %bb.113:
	setp.gtu.f32 	%p203, %f923, 0f4B800000;
	@%p203 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_114;
$L__BB0_120:
	mov.b32 	%r81, %f923;
	and.b32  	%r411, %r81, 8388607;
	or.b32  	%r2577, %r411, 1065353216;
	mov.b32 	%f922, %r2577;
	add.s32 	%r412, %r81, -1073741824;
	and.b32  	%r2578, %r412, -8388608;
	setp.eq.s32 	%p209, %r2578, 0;
	@%p209 bra 	$L__BB0_123;
// %bb.121:                             // %__nv_fmaf_rn.exit4.i.i.i778.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
$L__BB0_122:                            // %__nv_fmaf_rn.exit4.i.i.i778
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r2578, 192937984;
	add.s32 	%r414, %r2577, %r413;
	mov.b32 	%f845, %r414;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f922, %f845, %f851;
	sub.s32 	%r2578, %r2578, %r413;
	mov.b32 	%r2577, %f922;
	setp.ne.s32 	%p210, %r2578, 0;
	setp.ne.s32 	%p211, %r2577, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	$L__BB0_122;
$L__BB0_123:                            // %__internal_fmodf_slowpath_mod.exit.i.i780
	setp.gt.u32 	%p213, %r81, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f853, %f922, 0f34000000;
	mul.f32 	%f923, %f852, %f853;
	bra.uni 	$L__BB0_124;
$L__BB0_114:                            // %__nv_fast_fdividef.exit.i.i.i757
	div.approx.f32 	%f836, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f836;
	fma.rn.f32 	%f146, %f921, 0fC0000000, %f923;
	mov.b32 	%r80, %f146;
	setp.lt.u32 	%p204, %r80, 1073741824;
	@%p204 bra 	$L__BB0_119;
// %bb.115:
	setp.lt.u32 	%p205, %r80, -2147483647;
	@%p205 bra 	$L__BB0_117;
// %bb.116:
	add.f32 	%f841, %f921, 0fBF800000;
	setp.lt.f32 	%p208, %f146, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f921, %f842, %f841, %p208;
	bra.uni 	$L__BB0_119;
$L__BB0_117:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p206, %f146, 0f40800000;
	@%p206 bra 	$L__BB0_119;
// %bb.118:                             // %__nv_fmaf_rn.exit.i.i.i761
	add.f32 	%f837, %f921, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f146;
	setp.ge.f32 	%p207, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f921, %f840, %f837, %p207;
$L__BB0_119:                            // %__internal_fmodf_fastpath_quot.exit.i.i764
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
$L__BB0_124:                            // %__internal_fmodf_kernel.exit.i783
	abs.f32 	%f854, %f923;
	setp.gtu.f32 	%p214, %f854, 0f7F800000;
	@%p214 bra 	$L__BB0_126;
// %bb.125:
	mov.b32 	%r415, %f181;
	and.b32  	%r416, %r415, -2147483648;
	mov.b32 	%r417, %f923;
	or.b32  	%r418, %r416, %r417;
	mov.b32 	%f923, %r418;
$L__BB0_126:                            // %__nv_fmodf.exit784
	setp.le.s32 	%p222, %r6, %r5;
	mov.u32 	%r2563, 0;
	@%p222 bra 	$L__BB0_144;
// %bb.127:                             // %L1596.lr.ph
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	div.approx.f32 	%f223, %f221, %f188;
	div.approx.f32 	%f258, %f256, %f188;
	div.approx.f32 	%f292, %f290, %f188;
	div.approx.f32 	%f327, %f325, %f188;
	div.approx.f32 	%f361, %f359, %f188;
	div.approx.f32 	%f396, %f394, %f188;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f190, %f189;
	abs.f32 	%f224, %f223;
	abs.f32 	%f259, %f258;
	abs.f32 	%f293, %f292;
	abs.f32 	%f328, %f327;
	abs.f32 	%f362, %f361;
	abs.f32 	%f397, %f396;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	selp.f32 	%f226, %f225, %f223, %p19;
	selp.f32 	%f261, %f260, %f258, %p25;
	selp.f32 	%f295, %f294, %f292, %p31;
	selp.f32 	%f330, %f329, %f327, %p37;
	selp.f32 	%f364, %f363, %f361, %p43;
	selp.f32 	%f399, %f398, %f396, %p49;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f589, %f907, %f907;
	add.f32 	%f641, %f911, %f911;
	add.f32 	%f193, %f192, %f192;
	add.f32 	%f227, %f226, %f226;
	add.f32 	%f262, %f261, %f261;
	add.f32 	%f296, %f295, %f295;
	add.f32 	%f331, %f330, %f330;
	add.f32 	%f365, %f364, %f364;
	add.f32 	%f400, %f399, %f399;
	add.f32 	%f434, %f433, %f433;
	add.f32 	%f483, %f899, %f899;
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r312, %f589;
	mov.b32 	%r344, %f641;
	add.f32 	%f695, %f915, %f915;
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r188, %f193;
	mov.b32 	%r195, %f227;
	mov.b32 	%r206, %f262;
	mov.b32 	%r213, %f296;
	mov.b32 	%r224, %f331;
	mov.b32 	%r231, %f365;
	mov.b32 	%r242, %f400;
	mov.b32 	%r249, %f434;
	mov.b32 	%r267, %f483;
	mov.b32 	%r290, %f535;
	and.b32  	%r313, %r312, -2147483648;
	and.b32  	%r345, %r344, -2147483648;
	mov.b32 	%r361, %f695;
	mov.b32 	%r385, %f747;
	add.f32 	%f801, %f927, %f927;
	and.b32  	%r189, %r188, -2147483648;
	and.b32  	%r196, %r195, -2147483648;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	or.b32  	%r346, %r345, 1056964608;
	and.b32  	%r362, %r361, -2147483648;
	and.b32  	%r386, %r385, -2147483648;
	mov.b32 	%r401, %f801;
	or.b32  	%r190, %r189, 1056964608;
	or.b32  	%r197, %r196, 1056964608;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f590, %r314;
	mov.b32 	%f642, %r346;
	or.b32  	%r363, %r362, 1056964608;
	or.b32  	%r387, %r386, 1056964608;
	and.b32  	%r402, %r401, -2147483648;
	mov.b32 	%f194, %r190;
	mov.b32 	%f228, %r197;
	mov.b32 	%f263, %r208;
	mov.b32 	%f297, %r215;
	mov.b32 	%f332, %r226;
	mov.b32 	%f366, %r233;
	mov.b32 	%f401, %r244;
	mov.b32 	%f435, %r251;
	mov.b32 	%f484, %r269;
	mov.b32 	%f536, %r292;
	add.f32 	%f591, %f589, %f590;
	abs.f32 	%f593, %f589;
	add.f32 	%f643, %f641, %f642;
	abs.f32 	%f645, %f641;
	mov.b32 	%f696, %r363;
	mov.b32 	%f748, %r387;
	or.b32  	%r403, %r402, 1056964608;
	add.f32 	%f195, %f193, %f194;
	abs.f32 	%f197, %f193;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	add.f32 	%f264, %f262, %f263;
	abs.f32 	%f266, %f262;
	add.f32 	%f298, %f296, %f297;
	abs.f32 	%f300, %f296;
	add.f32 	%f333, %f331, %f332;
	abs.f32 	%f335, %f331;
	add.f32 	%f367, %f365, %f366;
	abs.f32 	%f369, %f365;
	add.f32 	%f402, %f400, %f401;
	abs.f32 	%f404, %f400;
	add.f32 	%f436, %f434, %f435;
	abs.f32 	%f438, %f434;
	add.f32 	%f485, %f483, %f484;
	abs.f32 	%f487, %f483;
	add.f32 	%f537, %f535, %f536;
	abs.f32 	%f539, %f535;
	cvt.rzi.f32.f32 	%f592, %f591;
	setp.gt.f32 	%p114, %f593, 0f4B000000;
	cvt.rzi.f32.f32 	%f644, %f643;
	setp.gt.f32 	%p134, %f645, 0f4B000000;
	add.f32 	%f697, %f695, %f696;
	abs.f32 	%f699, %f695;
	add.f32 	%f749, %f747, %f748;
	abs.f32 	%f751, %f747;
	mov.b32 	%f802, %r403;
	cvt.rzi.f32.f32 	%f196, %f195;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	cvt.rzi.f32.f32 	%f265, %f264;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	cvt.rzi.f32.f32 	%f299, %f298;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	cvt.rzi.f32.f32 	%f334, %f333;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	cvt.rzi.f32.f32 	%f368, %f367;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	cvt.rzi.f32.f32 	%f403, %f402;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	cvt.rzi.f32.f32 	%f437, %f436;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	cvt.rzi.f32.f32 	%f486, %f485;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	cvt.rzi.f32.f32 	%f538, %f537;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p114;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p115, %f593, 0f3F000000;
	selp.f32 	%f646, %f641, %f644, %p134;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p135, %f645, 0f3F000000;
	cvt.rzi.f32.f32 	%f698, %f697;
	setp.gt.f32 	%p154, %f699, 0f4B000000;
	cvt.rzi.f32.f32 	%f750, %f749;
	setp.gt.f32 	%p174, %f751, 0f4B000000;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p115;
	selp.f32 	%f648, %f647, %f646, %p135;
	selp.f32 	%f700, %f695, %f698, %p154;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p155, %f699, 0f3F000000;
	selp.f32 	%f752, %f747, %f750, %p174;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p175, %f751, 0f3F000000;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p195, %f805, 0f4B000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	selp.f32 	%f234, %f233, %f232, %p21;
	selp.f32 	%f269, %f268, %f267, %p27;
	selp.f32 	%f303, %f302, %f301, %p33;
	selp.f32 	%f338, %f337, %f336, %p39;
	selp.f32 	%f372, %f371, %f370, %p45;
	selp.f32 	%f407, %f406, %f405, %p51;
	selp.f32 	%f441, %f440, %f439, %p57;
	selp.f32 	%f490, %f489, %f488, %p75;
	selp.f32 	%f542, %f541, %f540, %p95;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	selp.f32 	%f702, %f701, %f700, %p155;
	selp.f32 	%f754, %f753, %f752, %p175;
	selp.f32 	%f806, %f801, %f804, %p195;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p196, %f805, 0f3F000000;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f598, %f597, %f597;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	selp.f32 	%f808, %f807, %f806, %p196;
	mul.f32 	%f202, %f201, %f201;
	mul.f32 	%f236, %f235, %f235;
	mul.f32 	%f271, %f270, %f270;
	mul.f32 	%f305, %f304, %f304;
	mul.f32 	%f340, %f339, %f339;
	mul.f32 	%f374, %f373, %f373;
	mul.f32 	%f409, %f408, %f408;
	mul.f32 	%f443, %f442, %f442;
	mul.f32 	%f492, %f491, %f491;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f704, %f703, %f703;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f927;
	cvt.rzi.s32.f32 	%r191, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r198, %f234;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r209, %f269;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r216, %f303;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f338;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f372;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f407;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f441;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r315, %f596;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	cvt.rzi.s32.f32 	%r347, %f648;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f810, %f809, %f809;
	add.s32 	%r192, %r191, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r199, %r198, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	cvt.rzi.s32.f32 	%r270, %f490;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	cvt.rzi.s32.f32 	%r293, %f542;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	and.b32  	%r316, %r315, 1;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	and.b32  	%r348, %r347, 1;
	cvt.rzi.s32.f32 	%r364, %f702;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	cvt.rzi.s32.f32 	%r388, %f754;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	shl.b32 	%r113, %r1, 2;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r193, %r192, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r200, %r199, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	and.b32  	%r294, %r293, 1;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	setp.eq.b32 	%p116, %r316, 1;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	setp.eq.b32 	%p136, %r348, 1;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	and.b32  	%r365, %r364, 1;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	and.b32  	%r389, %r388, 1;
	cvt.rzi.s32.f32 	%r404, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	shl.b32 	%r176, %r2, 2;
	and.b32  	%r177, %r113, 4;
	and.b32  	%r179, %r1, 18;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r193, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r200, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r211, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r218, 1;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	setp.eq.b32 	%p40, %r229, 1;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	setp.eq.b32 	%p46, %r236, 1;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	setp.eq.b32 	%p52, %r247, 1;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	setp.eq.b32 	%p58, %r254, 1;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	setp.eq.b32 	%p76, %r271, 1;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	setp.eq.b32 	%p96, %r294, 1;
	selp.f32 	%f608, %f606, %f607, %p116;
	and.b32  	%r317, %r315, 2;
	selp.f32 	%f660, %f658, %f659, %p136;
	and.b32  	%r349, %r347, 2;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	setp.eq.b32 	%p156, %r365, 1;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	setp.eq.b32 	%p176, %r389, 1;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r405, %r404, 1;
	and.b32  	%r112, %r176, 480;
	or.b32  	%r180, %r179, %r177;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r194, %r192, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r201, %r199, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r212, %r210, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r219, %r217, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f502, %f500, %f501, %p76;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f554, %f552, %f553, %p96;
	and.b32  	%r295, %r293, 2;
	setp.eq.s32 	%p117, %r317, 0;
	neg.f32 	%f610, %f608;
	add.s32 	%r318, %r315, 1;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.s32 	%p137, %r349, 0;
	neg.f32 	%f662, %f660;
	add.s32 	%r350, %r347, 1;
	cvt.rzi.f32.f32 	%f667, %f911;
	selp.f32 	%f714, %f712, %f713, %p156;
	and.b32  	%r366, %r364, 2;
	selp.f32 	%f766, %f764, %f765, %p176;
	and.b32  	%r390, %r388, 2;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p197, %r405, 1;
	and.b32  	%r178, %r114, 8;
	or.b32  	%r181, %r180, %r112;
	setp.eq.s32 	%p17, %r194, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r201, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r212, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r219, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r230, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r237, 0;
	sub.f32 	%f386, %f213, %f384;
	setp.eq.s32 	%p53, %r248, 0;
	sub.f32 	%f421, %f213, %f419;
	setp.eq.s32 	%p59, %r255, 0;
	sub.f32 	%f455, %f213, %f453;
	setp.eq.s32 	%p77, %r272, 0;
	neg.f32 	%f504, %f502;
	add.s32 	%r273, %r270, 1;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.s32 	%p97, %r295, 0;
	neg.f32 	%f556, %f554;
	add.s32 	%r296, %r293, 1;
	cvt.rzi.f32.f32 	%f561, %f903;
	selp.f32 	%f609, %f607, %f606, %p116;
	selp.f32 	%f611, %f608, %f610, %p117;
	and.b32  	%r319, %r318, 2;
	setp.eq.f32 	%p119, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f661, %f659, %f658, %p136;
	selp.f32 	%f663, %f660, %f662, %p137;
	and.b32  	%r351, %r350, 2;
	setp.eq.f32 	%p139, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	setp.eq.s32 	%p157, %r366, 0;
	neg.f32 	%f716, %f714;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.s32 	%p177, %r390, 0;
	neg.f32 	%f768, %f766;
	add.s32 	%r391, %r388, 1;
	cvt.rzi.f32.f32 	%f773, %f919;
	selp.f32 	%f820, %f818, %f819, %p197;
	and.b32  	%r406, %r404, 2;
	or.b32  	%r182, %r181, %r178;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	selp.f32 	%f456, %f453, %f455, %p59;
	selp.f32 	%f503, %f501, %f500, %p76;
	selp.f32 	%f505, %f502, %f504, %p77;
	and.b32  	%r274, %r273, 2;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f555, %f553, %f552, %p96;
	selp.f32 	%f557, %f554, %f556, %p97;
	and.b32  	%r297, %r296, 2;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	setp.eq.s32 	%p118, %r319, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f88, %f616, %f611, %p119;
	abs.f32 	%f617, %f907;
	setp.eq.s32 	%p138, %r351, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f669, %f668, %f663, %p139;
	abs.f32 	%f670, %f911;
	selp.f32 	%f715, %f713, %f712, %p156;
	selp.f32 	%f717, %f714, %f716, %p157;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p159, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f767, %f765, %f764, %p176;
	selp.f32 	%f769, %f766, %f768, %p177;
	and.b32  	%r392, %r391, 2;
	setp.eq.f32 	%p179, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	setp.eq.s32 	%p198, %r406, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r407, %r404, 1;
	cvt.rzi.f32.f32 	%f827, %f927;
	shr.u32 	%r115, %r182, 1;
	mul.f32 	%f161, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	setp.eq.s32 	%p78, %r274, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f52, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.eq.s32 	%p98, %r297, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	selp.f32 	%f614, %f609, %f613, %p118;
	setp.gt.f32 	%p120, %f617, 0f4B800000;
	add.f32 	%f618, %f88, 0f3F800000;
	selp.f32 	%f666, %f661, %f665, %p138;
	setp.gt.f32 	%p140, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	setp.eq.s32 	%p158, %r368, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f124, %f722, %f717, %p159;
	abs.f32 	%f723, %f915;
	setp.eq.s32 	%p178, %r392, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f775, %f774, %f769, %p179;
	abs.f32 	%f776, %f919;
	selp.f32 	%f821, %f819, %f818, %p197;
	selp.f32 	%f823, %f820, %f822, %p198;
	and.b32  	%r408, %r407, 2;
	setp.eq.f32 	%p200, %f827, %f927;
	mul.f32 	%f828, %f927, 0f00000000;
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd54, %r115, 4;
	mul.f32 	%f219, %f161, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	selp.f32 	%f508, %f503, %f507, %p78;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f52, 0f3F800000;
	selp.f32 	%f560, %f555, %f559, %p98;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f89, %f618, %f614, %p120;
	selp.f32 	%f672, %f671, %f666, %p140;
	selp.f32 	%f720, %f715, %f719, %p158;
	setp.gt.f32 	%p160, %f723, 0f4B800000;
	add.f32 	%f724, %f124, 0f3F800000;
	selp.f32 	%f772, %f767, %f771, %p178;
	setp.gt.f32 	%p180, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	and.b32  	%r78, %r35, 1;
	setp.eq.s32 	%p199, %r408, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p200;
	abs.f32 	%f830, %f927;
	add.s64 	%rd55, %rd1, %rd54;
	mul.f32 	%f3, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f12, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f21, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f30, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	selp.f32 	%f53, %f512, %f508, %p80;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r334, %f672;
	mov.b32 	%r333, %f89;
	mov.b32 	%r340, %f669;
	mov.b32 	%r339, %f88;
	selp.f32 	%f125, %f724, %f720, %p160;
	selp.f32 	%f778, %f777, %f772, %p180;
	setp.eq.s32 	%p194, %r78, %r119;
	selp.f32 	%f826, %f821, %f825, %p199;
	setp.gt.f32 	%p201, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r116, [%rd55];
	mov.b32 	%r204, %f254;
	mov.b32 	%r203, %f3;
	mov.b32 	%r222, %f323;
	mov.b32 	%r221, %f12;
	mov.b32 	%r240, %f392;
	mov.b32 	%r239, %f21;
	mov.b32 	%r258, %f460;
	mov.b32 	%r257, %f30;
	mov.b32 	%r286, %f566;
	mov.b32 	%r285, %f53;
	mov.b32 	%r289, %f563;
	mov.b32 	%r288, %f52;
	xor.b32  	%r337, %r340, -2147483648;
	xor.b32  	%r336, %r339, -2147483648;
	mov.b32 	%r381, %f778;
	mov.b32 	%r380, %f125;
	mov.b32 	%r384, %f775;
	mov.b32 	%r383, %f124;
	selp.f32 	%f832, %f831, %f826, %p201;
	selp.f32 	%f178, 0f3F800000, 0f00000000, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r202, %r204, %r203;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r238, %r240, %r239;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r382, %r384, %r383;
	// end inline asm
	mul.f32 	%f179, %f832, %f178;
	mul.f32 	%f180, %f829, %f178;
	add.f32 	%f855, %f923, %f923;
	mov.b32 	%r431, %f855;
	and.b32  	%r432, %r431, -2147483648;
	or.b32  	%r433, %r432, 1056964608;
	mov.b32 	%f856, %r433;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p215, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p215;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p216, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p216;
	cvt.rzi.s32.f32 	%r434, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f923;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r435, %r434, 1;
	setp.eq.b32 	%p217, %r435, 1;
	selp.f32 	%f874, %f872, %f873, %p217;
	selp.f32 	%f875, %f873, %f872, %p217;
	and.b32  	%r436, %r434, 2;
	setp.eq.s32 	%p218, %r436, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p218;
	add.s32 	%r437, %r434, 1;
	and.b32  	%r438, %r437, 2;
	setp.eq.s32 	%p219, %r438, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p219;
	cvt.rzi.f32.f32 	%f881, %f923;
	setp.eq.f32 	%p220, %f881, %f923;
	mul.f32 	%f882, %f923, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p220;
	abs.f32 	%f884, %f923;
	setp.gt.f32 	%p221, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p221;
	mul.f32 	%f887, %f886, %f178;
	mul.f32 	%f888, %f883, %f178;
	mov.b32 	%r421, %f887;
	mov.b32 	%r420, %f179;
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	mov.b32 	%r427, %f888;
	xor.b32  	%r424, %r427, -2147483648;
	mov.b32 	%r426, %f180;
	xor.b32  	%r423, %r426, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r421, %r420;
	// end inline asm
	shl.b32 	%r440, %r5, 12;
	and.b32  	%r441, %r113, 28;
	shl.b32 	%r442, %r2, 5;
	and.b32  	%r443, %r442, 96;
	or.b32  	%r444, %r441, %r443;
	and.b32  	%r445, %r442, 128;
	and.b32  	%r92, %r114, 16;
	or.b32  	%r446, %r445, %r444;
	and.b32  	%r93, %r117, 8;
	shl.b32 	%r447, %r3, 2;
	and.b32  	%r94, %r447, 32;
	and.b32  	%r95, %r3, 7;
	or.b32  	%r96, %r440, %r446;
	and.b32  	%r97, %r1, 8;
	shl.b32 	%r448, %r1, 4;
	or.b32  	%r449, %r448, %r97;
	shr.u32 	%r450, %r449, 2;
	and.b32  	%r451, %r450, 30;
	and.b32  	%r452, %r113, 12;
	or.b32  	%r98, %r121, %r452;
	and.b32  	%r99, %r117, 2;
	shl.b32 	%r453, %r1, 3;
	and.b32  	%r454, %r453, 64;
	shl.b32 	%r455, %r3, 1;
	or.b32  	%r456, %r454, %r455;
	shr.u32 	%r457, %r456, 2;
	and.b32  	%r458, %r4, 32;
	or.b32  	%r100, %r457, %r458;
	or.b32  	%r101, %r100, 8;
	and.b32  	%r459, %r115, 15;
	mul.lo.s32 	%r460, %r459, 65;
	add.s32 	%r461, %r460, %r100;
	add.s32 	%r462, %r460, %r101;
	shl.b32 	%r463, %r7, 17;
	add.s32 	%r464, %r463, -393216;
	and.b32  	%r465, %r447, 28;
	or.b32  	%r466, %r465, %r35;
	or.b32  	%r467, %r466, %r112;
	shl.b32 	%r468, %r467, 8;
	or.b32  	%r469, %r468, %r444;
	or.b32  	%r102, %r469, %r445;
	cvt.s64.s32 	%rd5, %r464;
	shr.u32 	%r470, %r3, 3;
	or.b32  	%r471, %r470, 2;
	or.b32  	%r472, %r470, 4;
	or.b32  	%r473, %r470, 6;
	and.b32  	%r474, %r3, 1;
	neg.s32 	%r475, %r474;
	setp.eq.b32 	%p223, %r474, 1;
	and.b32  	%r476, %r475, 520;
	bfe.s32 	%r477, %r3, 1, 1;
	and.b32  	%r478, %r3, 2;
	setp.eq.s32 	%p224, %r478, 0;
	and.b32  	%r479, %r477, 260;
	bfe.u32 	%r480, %r117, 3, 1;
	mul.lo.s32 	%r481, %r480, 65;
	bfe.s32 	%r482, %r3, 2, 1;
	and.b32  	%r483, %r3, 4;
	setp.eq.s32 	%p225, %r483, 0;
	and.b32  	%r484, %r482, 130;
	mul.lo.s32 	%r485, %r470, 1057;
	add.s32 	%r486, %r476, %r451;
	add.s32 	%r487, %r486, %r479;
	add.s32 	%r488, %r487, %r481;
	add.s32 	%r489, %r488, %r484;
	add.s32 	%r490, %r489, %r485;
	mul.wide.u32 	%rd56, %r490, 4;
	mov.u64 	%rd57, shmem;
	add.s64 	%rd6, %rd57, %rd56;
	cvt.u64.u32 	%rd58, %r485;
	selp.b64 	%rd59, 0, 130, %p225;
	cvt.u64.u32 	%rd60, %r481;
	selp.b64 	%rd61, 0, 260, %p224;
	selp.b64 	%rd62, 520, 0, %p223;
	cvt.u64.u32 	%rd63, %r451;
	add.s64 	%rd64, %rd63, %rd62;
	add.s64 	%rd65, %rd64, %rd61;
	add.s64 	%rd66, %rd65, %rd60;
	add.s64 	%rd67, %rd66, %rd59;
	add.s64 	%rd68, %rd67, %rd58;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd7, %rd57, %rd69;
	mul.lo.s32 	%r491, %r471, 1057;
	add.s32 	%r492, %r489, %r491;
	mul.wide.u32 	%rd70, %r492, 4;
	add.s64 	%rd8, %rd57, %rd70;
	cvt.u64.u32 	%rd71, %r491;
	add.s64 	%rd72, %rd67, %rd71;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd9, %rd57, %rd73;
	mul.lo.s32 	%r493, %r472, 1057;
	add.s32 	%r494, %r489, %r493;
	mul.wide.u32 	%rd74, %r494, 4;
	add.s64 	%rd10, %rd57, %rd74;
	cvt.u64.u32 	%rd75, %r493;
	add.s64 	%rd76, %rd67, %rd75;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd11, %rd57, %rd77;
	mul.lo.s32 	%r495, %r473, 1057;
	add.s32 	%r496, %r489, %r495;
	mul.wide.u32 	%rd78, %r496, 4;
	add.s64 	%rd12, %rd57, %rd78;
	cvt.u64.u32 	%rd79, %r495;
	add.s64 	%rd80, %rd67, %rd79;
	shl.b64 	%rd81, %rd80, 2;
	add.s64 	%rd13, %rd57, %rd81;
	and.b32  	%r497, %r455, 14;
	or.b32  	%r498, %r497, %r121;
	mul.lo.s32 	%r499, %r498, 65;
	add.s32 	%r500, %r451, %r499;
	add.s32 	%r501, %r500, %r485;
	mul.wide.u32 	%rd82, %r501, 4;
	add.s64 	%rd14, %rd57, %rd82;
	cvt.u64.u32 	%rd83, %r499;
	add.s64 	%rd84, %rd63, %rd83;
	add.s64 	%rd85, %rd84, %rd58;
	shl.b64 	%rd86, %rd85, 2;
	add.s64 	%rd15, %rd57, %rd86;
	add.s32 	%r502, %r500, %r491;
	mul.wide.u32 	%rd87, %r502, 4;
	add.s64 	%rd16, %rd57, %rd87;
	add.s64 	%rd88, %rd84, %rd71;
	shl.b64 	%rd89, %rd88, 2;
	add.s64 	%rd17, %rd57, %rd89;
	add.s32 	%r503, %r500, %r493;
	mul.wide.u32 	%rd90, %r503, 4;
	add.s64 	%rd18, %rd57, %rd90;
	add.s64 	%rd91, %rd84, %rd75;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd19, %rd57, %rd92;
	add.s32 	%r504, %r500, %r495;
	mul.wide.u32 	%rd93, %r504, 4;
	add.s64 	%rd20, %rd57, %rd93;
	add.s64 	%rd94, %rd84, %rd79;
	shl.b64 	%rd95, %rd94, 2;
	add.s64 	%rd21, %rd57, %rd95;
	mul.wide.u32 	%rd96, %r462, 4;
	add.s64 	%rd22, %rd57, %rd96;
	mul.wide.u32 	%rd97, %r461, 4;
	add.s64 	%rd23, %rd57, %rd97;
	setp.eq.s32 	%p226, %r97, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.gt.u32 	%p240, %r3, 7;
	mov.u32 	%r2579, %r2563;
	mov.u32 	%r2580, %r2563;
	mov.u32 	%r2581, %r2563;
	mov.u32 	%r2582, %r2563;
	mov.u32 	%r2589, %r2563;
	mov.u32 	%r2590, %r2563;
	mov.u32 	%r109, %r2563;
	bra.uni 	$L__BB0_128;
$L__BB0_142:                            // %pass10093
                                        //   in Loop: Header=BB0_128 Depth=1
	selp.b32 	%r2551, %r155, %r2501, %p226;
	selp.b32 	%r2552, %r2497, %r155, %p226;
	selp.b32 	%r2553, %r154, %r2493, %p226;
	selp.b32 	%r2554, %r2489, %r154, %p226;
	or.b32  	%r2596, %r2564, %r102;
	or.b32  	%r2556, %r2596, 262144;
	cvt.s64.s32 	%rd111, %r2556;
	add.s64 	%rd112, %rd111, %rd5;
	shr.u64 	%rd113, %rd112, 35;
	add.s64 	%rd114, %rd112, %rd113;
	shr.s64 	%rd115, %rd114, 29;
	setp.lt.s64 	%p243, %rd112, 0;
	and.b64  	%rd116, %rd114, -536870912;
	setp.ne.s64 	%p244, %rd116, %rd112;
	and.pred  	%p245, %p243, %p244;
	selp.u64 	%rd117, 1, 0, %p245;
	sub.s64 	%rd118, %rd117, %rd115;
	shl.b64 	%rd119, %rd118, 29;
	add.s64 	%rd120, %rd119, %rd112;
	shl.b64 	%rd121, %rd120, 2;
	add.s64 	%rd122, %rd3, %rd121;
	st.global.v4.u32 	[%rd122], {%r2554, %r2552, %r2553, %r2551};
$L__BB0_143:                            // %pass10204
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2558, %r2596, 524288;
	cvt.s64.s32 	%rd123, %r2558;
	add.s64 	%rd124, %rd123, %rd5;
	shr.u64 	%rd125, %rd124, 35;
	add.s64 	%rd126, %rd124, %rd125;
	shr.s64 	%rd127, %rd126, 29;
	setp.lt.s64 	%p246, %rd124, 0;
	and.b64  	%rd128, %rd126, -536870912;
	setp.ne.s64 	%p247, %rd128, %rd124;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd129, 1, 0, %p248;
	sub.s64 	%rd130, %rd129, %rd127;
	shl.b64 	%rd131, %rd130, 29;
	add.s64 	%rd132, %rd131, %rd124;
	shl.b64 	%rd133, %rd132, 2;
	add.s64 	%rd134, %rd3, %rd133;
	st.global.v4.u32 	[%rd134], {%r156, %r158, %r157, %r159};
	or.b32  	%r2559, %r2596, 786432;
	cvt.s64.s32 	%rd135, %r2559;
	add.s64 	%rd136, %rd135, %rd5;
	shr.u64 	%rd137, %rd136, 35;
	add.s64 	%rd138, %rd136, %rd137;
	shr.s64 	%rd139, %rd138, 29;
	setp.lt.s64 	%p249, %rd136, 0;
	and.b64  	%rd140, %rd138, -536870912;
	setp.ne.s64 	%p250, %rd140, %rd136;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd141, 1, 0, %p251;
	sub.s64 	%rd142, %rd141, %rd139;
	shl.b64 	%rd143, %rd142, 29;
	add.s64 	%rd144, %rd143, %rd136;
	shl.b64 	%rd145, %rd144, 2;
	add.s64 	%rd146, %rd3, %rd145;
	st.global.v4.u32 	[%rd146], {%r160, %r162, %r161, %r163};
	setp.ne.s32 	%p252, %r109, 130816;
	add.s32 	%r109, %r109, 256;
	add.s32 	%r2560, %r109, %r5;
	setp.gt.s32 	%p253, %r6, %r2560;
	and.pred  	%p254, %p252, %p253;
	@%p254 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_144;
$L__BB0_128:                            // %L1596
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_129 Depth 2
	or.b32  	%r570, %r109, %r92;
	or.b32  	%r571, %r570, %r93;
	or.b32  	%r572, %r571, %r94;
	or.b32  	%r573, %r572, %r95;
	shl.b32 	%r574, %r573, 12;
	add.s32 	%r575, %r96, %r574;
	shr.s32 	%r576, %r575, 31;
	shr.u32 	%r577, %r576, 3;
	add.s32 	%r578, %r575, %r577;
	shr.s32 	%r579, %r578, 29;
	setp.lt.s32 	%p227, %r575, 0;
	and.b32  	%r580, %r578, -536870912;
	setp.ne.s32 	%p228, %r580, %r575;
	and.pred  	%p229, %p227, %p228;
	selp.u32 	%r581, 1, 0, %p229;
	sub.s32 	%r582, %r581, %r579;
	shl.b32 	%r583, %r582, 29;
	add.s32 	%r584, %r583, %r575;
	mul.wide.s32 	%rd98, %r584, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.v4.u32 	{%r585, %r586, %r587, %r588}, [%rd99];
	or.b32  	%r589, %r574, 262144;
	add.s32 	%r590, %r96, %r589;
	shr.s32 	%r591, %r590, 31;
	shr.u32 	%r592, %r591, 3;
	add.s32 	%r593, %r590, %r592;
	shr.s32 	%r594, %r593, 29;
	setp.lt.s32 	%p230, %r590, 0;
	and.b32  	%r595, %r593, -536870912;
	setp.ne.s32 	%p231, %r595, %r590;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r596, 1, 0, %p232;
	sub.s32 	%r597, %r596, %r594;
	shl.b32 	%r598, %r597, 29;
	add.s32 	%r599, %r598, %r590;
	mul.wide.s32 	%rd100, %r599, 4;
	add.s64 	%rd101, %rd2, %rd100;
	ld.global.v4.u32 	{%r600, %r601, %r602, %r603}, [%rd101];
	or.b32  	%r604, %r574, 524288;
	add.s32 	%r605, %r96, %r604;
	shr.s32 	%r606, %r605, 31;
	shr.u32 	%r607, %r606, 3;
	add.s32 	%r608, %r605, %r607;
	shr.s32 	%r609, %r608, 29;
	setp.lt.s32 	%p233, %r605, 0;
	and.b32  	%r610, %r608, -536870912;
	setp.ne.s32 	%p234, %r610, %r605;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r611, 1, 0, %p235;
	sub.s32 	%r612, %r611, %r609;
	shl.b32 	%r613, %r612, 29;
	add.s32 	%r614, %r613, %r605;
	mul.wide.s32 	%rd102, %r614, 4;
	add.s64 	%rd103, %rd2, %rd102;
	ld.global.v4.u32 	{%r615, %r616, %r617, %r618}, [%rd103];
	or.b32  	%r619, %r574, 786432;
	add.s32 	%r620, %r96, %r619;
	shr.s32 	%r621, %r620, 31;
	shr.u32 	%r622, %r621, 3;
	add.s32 	%r623, %r620, %r622;
	shr.s32 	%r624, %r623, 29;
	setp.lt.s32 	%p236, %r620, 0;
	and.b32  	%r625, %r623, -536870912;
	setp.ne.s32 	%p237, %r625, %r620;
	and.pred  	%p238, %p236, %p237;
	selp.u32 	%r626, 1, 0, %p238;
	sub.s32 	%r627, %r626, %r624;
	shl.b32 	%r628, %r627, 29;
	add.s32 	%r629, %r628, %r620;
	mul.wide.s32 	%rd104, %r629, 4;
	add.s64 	%rd105, %rd2, %rd104;
	ld.global.v4.u32 	{%r630, %r631, %r632, %r633}, [%rd105];
	selp.b32 	%r634, %r587, %r585, %p226;
	shfl.sync.bfly.b32	%r635, %r634, 8, 31, -1;
	selp.b32 	%r506, %r585, %r635, %p226;
	selp.b32 	%r507, %r635, %r587, %p226;
	selp.b32 	%r636, %r588, %r586, %p226;
	shfl.sync.bfly.b32	%r637, %r636, 8, 31, -1;
	selp.b32 	%r514, %r586, %r637, %p226;
	selp.b32 	%r515, %r637, %r588, %p226;
	selp.b32 	%r638, %r602, %r600, %p226;
	shfl.sync.bfly.b32	%r639, %r638, 8, 31, -1;
	selp.b32 	%r522, %r600, %r639, %p226;
	selp.b32 	%r523, %r639, %r602, %p226;
	selp.b32 	%r640, %r603, %r601, %p226;
	shfl.sync.bfly.b32	%r641, %r640, 8, 31, -1;
	selp.b32 	%r530, %r601, %r641, %p226;
	selp.b32 	%r531, %r641, %r603, %p226;
	selp.b32 	%r642, %r617, %r615, %p226;
	shfl.sync.bfly.b32	%r643, %r642, 8, 31, -1;
	selp.b32 	%r538, %r615, %r643, %p226;
	selp.b32 	%r539, %r643, %r617, %p226;
	selp.b32 	%r644, %r618, %r616, %p226;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r546, %r616, %r645, %p226;
	selp.b32 	%r547, %r645, %r618, %p226;
	selp.b32 	%r646, %r632, %r630, %p226;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r554, %r630, %r647, %p226;
	selp.b32 	%r555, %r647, %r632, %p226;
	selp.b32 	%r648, %r633, %r631, %p226;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r562, %r631, %r649, %p226;
	selp.b32 	%r563, %r649, %r633, %p226;
	mov.u32 	%r564, 21520;
	// begin inline asm
	prmt.b32 %r505, %r506, %r507, %r564;
	// end inline asm
	mov.u32 	%r568, 30258;
	// begin inline asm
	prmt.b32 %r509, %r506, %r507, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r513, %r514, %r515, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r514, %r515, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r522, %r523, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r522, %r523, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r530, %r531, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r530, %r531, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r538, %r539, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r538, %r539, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r546, %r547, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r546, %r547, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r554, %r555, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r554, %r555, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r561, %r562, %r563, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r562, %r563, %r568;
	// end inline asm
	st.shared.u32 	[%rd6], %r505;
	st.shared.u32 	[%rd7+128], %r509;
	st.shared.u32 	[%rd7+4], %r513;
	st.shared.u32 	[%rd7+132], %r517;
	st.shared.u32 	[%rd8], %r521;
	st.shared.u32 	[%rd9+128], %r525;
	st.shared.u32 	[%rd9+4], %r529;
	st.shared.u32 	[%rd9+132], %r533;
	st.shared.u32 	[%rd10], %r537;
	st.shared.u32 	[%rd11+128], %r541;
	st.shared.u32 	[%rd11+4], %r545;
	st.shared.u32 	[%rd11+132], %r549;
	st.shared.u32 	[%rd12], %r553;
	st.shared.u32 	[%rd13+128], %r557;
	st.shared.u32 	[%rd13+4], %r561;
	st.shared.u32 	[%rd13+132], %r565;
	bar.sync 	0;
	or.b32  	%r650, %r109, %r98;
	or.b32  	%r110, %r650, %r99;
	shr.u32 	%r2588, %r110, 5;
	mov.u64 	%rd149, %rd23;
	mov.u64 	%rd150, %rd22;
	mov.u32 	%r2591, %r2563;
	mov.u32 	%r2592, %r2582;
	mov.u32 	%r2593, %r2581;
	mov.u32 	%r2594, %r2580;
	mov.u32 	%r2595, %r2579;
$L__BB0_129:                            // %pass5735
                                        //   Parent Loop BB0_128 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2580, %r2590;
	mov.u32 	%r2579, %r2589;
	add.s32 	%r2447, %r110, %r2591;
	and.b32  	%r2448, %r2447, 1;
	neg.s32 	%r2449, %r2448;
	and.b32  	%r2450, %r2449, 520;
	bfe.s32 	%r2451, %r2447, 1, 1;
	and.b32  	%r2452, %r2451, 260;
	bfe.s32 	%r2453, %r2447, 3, 1;
	and.b32  	%r2454, %r2453, 65;
	bfe.s32 	%r2455, %r2447, 2, 1;
	and.b32  	%r2456, %r2455, 130;
	and.b32  	%r2457, %r2588, 7;
	mul.lo.s32 	%r2458, %r2457, 1057;
	or.b32  	%r2459, %r100, %r2450;
	add.s32 	%r2460, %r2459, %r2452;
	add.s32 	%r2461, %r2460, %r2454;
	add.s32 	%r2462, %r2461, %r2456;
	add.s32 	%r2463, %r2462, %r2458;
	mul.wide.u32 	%rd106, %r2463, 4;
	add.s64 	%rd108, %rd57, %rd106;
	ld.shared.u32 	%r2581, [%rd108];
	add.s32 	%r2464, %r101, %r2450;
	add.s32 	%r2465, %r2464, %r2452;
	add.s32 	%r2466, %r2465, %r2454;
	add.s32 	%r2467, %r2466, %r2456;
	add.s32 	%r2468, %r2467, %r2458;
	mul.wide.u32 	%rd109, %r2468, 4;
	add.s64 	%rd110, %rd57, %rd109;
	ld.shared.u32 	%r2582, [%rd110];
	// begin inline asm
	mov.b32 %r656, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r667, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r655, %r2581, -2004318072;
	mov.u32 	%r654, 983055;
	// begin inline asm
	lop3.b32 %r653, %r654, %r655, %r656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r657, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r658, %r656, %r657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r661, %r653, %r658;
	// end inline asm
	mov.u32 	%r665, 15728880;
	// begin inline asm
	lop3.b32 %r664, %r665, %r655, %r667, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r668, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r669, %r667, %r668;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r672, %r664, %r669;
	// end inline asm
	shr.u32 	%r677, %r655, 8;
	// begin inline asm
	lop3.b32 %r675, %r654, %r677, %r656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r679, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r680, %r656, %r679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r683, %r675, %r680;
	// end inline asm
	// begin inline asm
	lop3.b32 %r686, %r665, %r677, %r667, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r690, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r691, %r667, %r690;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r694, %r686, %r691;
	// end inline asm
	// begin inline asm
	mov.b32 %r702, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r713, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r701, %r2582, -2004318072;
	// begin inline asm
	lop3.b32 %r699, %r654, %r701, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r703, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r704, %r702, %r703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r707, %r699, %r704;
	// end inline asm
	// begin inline asm
	lop3.b32 %r710, %r665, %r701, %r713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r715, %r713, %r714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r718, %r710, %r715;
	// end inline asm
	shr.u32 	%r723, %r701, 8;
	// begin inline asm
	lop3.b32 %r721, %r654, %r723, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r702, %r725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r729, %r721, %r726;
	// end inline asm
	// begin inline asm
	lop3.b32 %r732, %r665, %r723, %r713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r736, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r737, %r713, %r736;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r740, %r732, %r737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r743, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r745, %r743, %r661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r748, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r750, %r748, %r672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r753, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r755, %r753, %r683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r758, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r760, %r758, %r694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r763, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r765, %r763, %r707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r768, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r770, %r768, %r718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r773, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r775, %r773, %r729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r778, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r780, %r778, %r740;
	// end inline asm
	// begin inline asm
	mov.b32 %r788, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r799, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r787, %r2595, -2004318072;
	// begin inline asm
	lop3.b32 %r785, %r654, %r787, %r788, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r789, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r790, %r788, %r789;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r793, %r785, %r790;
	// end inline asm
	// begin inline asm
	lop3.b32 %r796, %r665, %r787, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r800, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r801, %r799, %r800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r804, %r796, %r801;
	// end inline asm
	shr.u32 	%r809, %r787, 8;
	// begin inline asm
	lop3.b32 %r807, %r654, %r809, %r788, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r811, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r788, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r818, %r665, %r809, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r822, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r823, %r799, %r822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r826, %r818, %r823;
	// end inline asm
	// begin inline asm
	mov.b32 %r834, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r833, %r2594, -2004318072;
	// begin inline asm
	lop3.b32 %r831, %r654, %r833, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r836, %r834, %r835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r839, %r831, %r836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r842, %r665, %r833, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r847, %r845, %r846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r850, %r842, %r847;
	// end inline asm
	shr.u32 	%r855, %r833, 8;
	// begin inline asm
	lop3.b32 %r853, %r654, %r855, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r857, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r834, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r864, %r665, %r855, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r868, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r869, %r845, %r868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r872, %r864, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r875, %r202, %r793, %r745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r879, %r202, %r804, %r750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r883, %r202, %r815, %r755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r887, %r202, %r826, %r760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r891, %r202, %r839, %r765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r895, %r202, %r850, %r770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r899, %r202, %r861, %r775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r903, %r202, %r872, %r780;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r911, %r2593, -2004318072;
	// begin inline asm
	lop3.b32 %r909, %r654, %r911, %r912, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r913, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r914, %r912, %r913;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r917, %r909, %r914;
	// end inline asm
	// begin inline asm
	lop3.b32 %r920, %r665, %r911, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	shr.u32 	%r933, %r911, 8;
	// begin inline asm
	lop3.b32 %r931, %r654, %r933, %r912, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r912, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	lop3.b32 %r942, %r665, %r933, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r947, %r923, %r946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r950, %r942, %r947;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r957, %r2592, -2004318072;
	// begin inline asm
	lop3.b32 %r955, %r654, %r957, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r958, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r966, %r665, %r957, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	shr.u32 	%r979, %r957, 8;
	// begin inline asm
	lop3.b32 %r977, %r654, %r979, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r958, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r988, %r665, %r979, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r969, %r992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r996, %r988, %r993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r999, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1001, %r999, %r917, %r875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1005, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1007, %r1005, %r928, %r879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1011, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1013, %r1011, %r939, %r883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1017, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1019, %r1017, %r950, %r887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1023, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1025, %r1023, %r963, %r891;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1029, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1031, %r1029, %r974, %r895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1035, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1037, %r1035, %r985, %r899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1041, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1043, %r1041, %r996, %r903;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1051, %r2579, -2004318072;
	// begin inline asm
	lop3.b32 %r1049, %r654, %r1051, %r1052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1054, %r1052, %r1053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1057, %r1049, %r1054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1060, %r665, %r1051, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1065, %r1063, %r1064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1068, %r1060, %r1065;
	// end inline asm
	shr.u32 	%r1073, %r1051, 8;
	// begin inline asm
	lop3.b32 %r1071, %r654, %r1073, %r1052, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1076, %r1052, %r1075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1079, %r1071, %r1076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1082, %r665, %r1073, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1087, %r1063, %r1086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1090, %r1082, %r1087;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1109, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1097, %r2580, -2004318072;
	// begin inline asm
	lop3.b32 %r1095, %r654, %r1097, %r1098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1100, %r1098, %r1099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1103, %r1095, %r1100;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1106, %r665, %r1097, %r1109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1110, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1111, %r1109, %r1110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1114, %r1106, %r1111;
	// end inline asm
	shr.u32 	%r1119, %r1097, 8;
	// begin inline asm
	lop3.b32 %r1117, %r654, %r1119, %r1098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1121, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1122, %r1098, %r1121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1125, %r1117, %r1122;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1128, %r665, %r1119, %r1109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1132, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1133, %r1109, %r1132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1136, %r1128, %r1133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r238, %r1057, %r1001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r238, %r1068, %r1007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r238, %r1079, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r238, %r1090, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r238, %r1103, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r238, %r1114, %r1031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1205, %r238, %r1125, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r238, %r1136, %r1043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1171, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r1171, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r284, %r1178, %r1173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1180, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1182, %r1180, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1185, %r284, %r1187, %r1182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1189, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r1189, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r284, %r1196, %r1191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r1198, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r284, %r1205, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r287, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r284, %r1175, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r287, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r284, %r1184, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r287, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r284, %r1193, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r287, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r284, %r1202, %r1228;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1282, %r1279}, {%r332, %r338, %r335, %r341}, {%r1176, %r1210}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1291, %r1288}, {%r332, %r338, %r335, %r341}, {%r1185, %r1217}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1300, %r1297}, {%r332, %r338, %r335, %r341}, {%r1194, %r1224}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1306}, {%r332, %r338, %r335, %r341}, {%r1203, %r1231}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1275, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1277, %r1275, %r1279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1280, %r379, %r1282, %r1277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1284, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1286, %r1284, %r1288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1289, %r379, %r1291, %r1286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1293, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r1293, %r1297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1298, %r379, %r1300, %r1295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1302, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r1302, %r1306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r379, %r1309, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r382, %r1282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r379, %r1279, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r382, %r1291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r379, %r1288, %r1318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1325, %r382, %r1300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r379, %r1297, %r1325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r382, %r1309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r379, %r1306, %r1332;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1339, %r1340}, {%r419, %r425, %r422, %r428}, {%r1280, %r1314}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r419, %r425, %r422, %r428}, {%r1289, %r1321}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r419, %r425, %r422, %r428}, {%r1298, %r1328}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1369, %r1370}, {%r419, %r425, %r422, %r428}, {%r1307, %r1335}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r116, %r1339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r116, %r1340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r116, %r1349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r116, %r1350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1391, %r116, %r1359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r116, %r1360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r116, %r1369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1400, %r116, %r1370;
	// end inline asm
	// begin inline asm
	mov.b32 %r1403, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1404, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1405, %r1379, %r1403;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1408, %r1405, %r1404;
	// end inline asm
	// begin inline asm
	mov.b32 %r1411, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1412, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1413, %r1382, %r1411;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1416, %r1413, %r1412;
	// end inline asm
	// begin inline asm
	mov.b32 %r1419, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1420, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1421, %r1385, %r1419;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1424, %r1421, %r1420;
	// end inline asm
	// begin inline asm
	mov.b32 %r1427, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1429, %r1388, %r1427;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1432, %r1429, %r1428;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1437, %r1391, %r1435;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1440, %r1437, %r1436;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1444, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1445, %r1394, %r1443;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1448, %r1445, %r1444;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1453, %r1397, %r1451;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1456, %r1453, %r1452;
	// end inline asm
	// begin inline asm
	mov.b32 %r1459, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1460, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1461, %r1400, %r1459;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1464, %r1461, %r1460;
	// end inline asm
	// begin inline asm
	mov.b32 %r1470, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1470, %r1468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1408, %r1469;
	// end inline asm
	// begin inline asm
	mov.b32 %r1475, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1476, %r1470, %r1475;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1479, %r1416, %r1476;
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1483, %r1470, %r1482;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1486, %r1424, %r1483;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1470, %r1489;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1493, %r1432, %r1490;
	// end inline asm
	mov.u32 	%r1499, 25152;
	// begin inline asm
	prmt.b32 %r1496, %r1472, %r1486, %r1499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1500, %r1479, %r1493, %r1499;
	// end inline asm
	shl.b32 	%r1507, %r1500, 4;
	mov.u32 	%r1505, 252645135;
	// begin inline asm
	lop3.b32 %r1504, %r1505, %r1496, %r1507, 202;
	// end inline asm
	xor.b32  	%r2469, %r1504, -2004318072;
	// begin inline asm
	mov.b32 %r1511, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1509, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1510, %r1511, %r1509;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1513, %r1440, %r1510;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1517, %r1511, %r1516;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1520, %r1448, %r1517;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1511, %r1523;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1527, %r1456, %r1524;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1511, %r1530;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1534, %r1464, %r1531;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1537, %r1513, %r1527, %r1499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1541, %r1520, %r1534, %r1499;
	// end inline asm
	shl.b32 	%r1548, %r1541, 4;
	// begin inline asm
	lop3.b32 %r1545, %r1505, %r1537, %r1548, 202;
	// end inline asm
	xor.b32  	%r2470, %r1545, -2004318072;
	st.shared.u32 	[%rd149], %r2469;
	st.shared.u32 	[%rd150], %r2470;
	ld.shared.u32 	%r2589, [%rd108];
	ld.shared.u32 	%r2590, [%rd110];
	// begin inline asm
	mov.b32 %r1554, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1565, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1553, %r2589, -2004318072;
	// begin inline asm
	lop3.b32 %r1551, %r654, %r1553, %r1554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1555, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1556, %r1554, %r1555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1559, %r1551, %r1556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1562, %r665, %r1553, %r1565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1566, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1567, %r1565, %r1566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1570, %r1562, %r1567;
	// end inline asm
	shr.u32 	%r1575, %r1553, 8;
	// begin inline asm
	lop3.b32 %r1573, %r654, %r1575, %r1554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1577, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1578, %r1554, %r1577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1581, %r1573, %r1578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1584, %r665, %r1575, %r1565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1588, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1589, %r1565, %r1588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1592, %r1584, %r1589;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1599, %r2590, -2004318072;
	// begin inline asm
	lop3.b32 %r1597, %r654, %r1599, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1601, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1602, %r1600, %r1601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1605, %r1597, %r1602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1608, %r665, %r1599, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1612, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1613, %r1611, %r1612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1616, %r1608, %r1613;
	// end inline asm
	shr.u32 	%r1621, %r1599, 8;
	// begin inline asm
	lop3.b32 %r1619, %r654, %r1621, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1623, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1624, %r1600, %r1623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1627, %r1619, %r1624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1630, %r665, %r1621, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1634, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1635, %r1611, %r1634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1638, %r1630, %r1635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1641, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1643, %r1641, %r1559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r1646, %r1570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1651, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1653, %r1651, %r1581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1656, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1658, %r1656, %r1592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1661, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1663, %r1661, %r1605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1666, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r1666, %r1616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1638;
	// end inline asm
	// begin inline asm
	mov.b32 %r1686, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1697, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1683, %r654, %r911, %r1686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1687, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1688, %r1686, %r1687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1691, %r1683, %r1688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1694, %r665, %r911, %r1697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1698, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1699, %r1697, %r1698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1702, %r1694, %r1699;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1705, %r654, %r933, %r1686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1709, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1710, %r1686, %r1709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1713, %r1705, %r1710;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1716, %r665, %r933, %r1697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1720, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1721, %r1697, %r1720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1724, %r1716, %r1721;
	// end inline asm
	// begin inline asm
	mov.b32 %r1732, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1743, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1729, %r654, %r957, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1733, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1734, %r1732, %r1733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1737, %r1729, %r1734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1740, %r665, %r957, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1744, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1745, %r1743, %r1744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1748, %r1740, %r1745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1751, %r654, %r979, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1755, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1756, %r1732, %r1755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1759, %r1751, %r1756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1762, %r665, %r979, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1766, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1767, %r1743, %r1766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1770, %r1762, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r202, %r1691, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r202, %r1702, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r202, %r1713, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r202, %r1724, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r202, %r1737, %r1663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r202, %r1748, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r202, %r1759, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r202, %r1770, %r1678;
	// end inline asm
	// begin inline asm
	mov.b32 %r1810, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1821, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1807, %r654, %r1051, %r1810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1811, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1812, %r1810, %r1811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1815, %r1807, %r1812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1818, %r665, %r1051, %r1821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1822, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1823, %r1821, %r1822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1826, %r1818, %r1823;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1829, %r654, %r1073, %r1810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1833, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1834, %r1810, %r1833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1837, %r1829, %r1834;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1840, %r665, %r1073, %r1821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1844, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1845, %r1821, %r1844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1848, %r1840, %r1845;
	// end inline asm
	// begin inline asm
	mov.b32 %r1856, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1853, %r654, %r1097, %r1856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1857, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1858, %r1856, %r1857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1861, %r1853, %r1858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1864, %r665, %r1097, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1868, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1869, %r1867, %r1868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1872, %r1864, %r1869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1875, %r654, %r1119, %r1856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1879, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1880, %r1856, %r1879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1883, %r1875, %r1880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1886, %r665, %r1119, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1891, %r1867, %r1890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1894, %r1886, %r1891;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r1897, %r1815, %r1773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r1903, %r1826, %r1777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1909, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r1909, %r1837, %r1781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r1915, %r1848, %r1785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r1921, %r1861, %r1789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1927, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r1927, %r1872, %r1793;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r1933, %r1883, %r1797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r1939, %r1894, %r1801;
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1961, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1947, %r654, %r655, %r1950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1951, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1952, %r1950, %r1951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1955, %r1947, %r1952;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1958, %r665, %r655, %r1961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1962, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1963, %r1961, %r1962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1966, %r1958, %r1963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1969, %r654, %r677, %r1950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1974, %r1950, %r1973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1977, %r1969, %r1974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1980, %r665, %r677, %r1961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1985, %r1961, %r1984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1988, %r1980, %r1985;
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2007, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1993, %r654, %r701, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1998, %r1996, %r1997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2001, %r1993, %r1998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2004, %r665, %r701, %r2007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2008, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2009, %r2007, %r2008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2012, %r2004, %r2009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2015, %r654, %r723, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2020, %r1996, %r2019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2023, %r2015, %r2020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2026, %r665, %r723, %r2007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2031, %r2007, %r2030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2034, %r2026, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r238, %r1955, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r238, %r1966, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r238, %r1977, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r238, %r1988, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r238, %r2001, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r238, %r2012, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r238, %r2023, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r238, %r2034, %r1941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2069, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r2069, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r284, %r2076, %r2071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2078, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r2078, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r284, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2087, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r2087, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r284, %r2094, %r2089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2096, %r287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r2096, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r284, %r2103, %r2098;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r287, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2108, %r284, %r2073, %r2105;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2112, %r287, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2115, %r284, %r2082, %r2112;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r287, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r284, %r2091, %r2119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r287, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r284, %r2100, %r2126;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2180, %r2177}, {%r332, %r338, %r335, %r341}, {%r2074, %r2108}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2189, %r2186}, {%r332, %r338, %r335, %r341}, {%r2083, %r2115}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2198, %r2195}, {%r332, %r338, %r335, %r341}, {%r2092, %r2122}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2207, %r2204}, {%r332, %r338, %r335, %r341}, {%r2101, %r2129}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2173, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r2173, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r379, %r2180, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2182, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2184, %r2182, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r379, %r2189, %r2184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2191, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2191, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r379, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2200, %r382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2200, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r379, %r2207, %r2202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r382, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r379, %r2177, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r382, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r379, %r2186, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r382, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r379, %r2195, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r382, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r379, %r2204, %r2230;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2237, %r2238}, {%r419, %r425, %r422, %r428}, {%r2178, %r2212}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2247, %r2248}, {%r419, %r425, %r422, %r428}, {%r2187, %r2219}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2257, %r2258}, {%r419, %r425, %r422, %r428}, {%r2196, %r2226}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2267, %r2268}, {%r419, %r425, %r422, %r428}, {%r2205, %r2233}, {%r2563, %r2563};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r116, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r116, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2283, %r116, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r116, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r116, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r116, %r2258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2295, %r116, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2298, %r116, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2303, %r2277, %r2301;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2306, %r2303, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2311, %r2280, %r2309;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2314, %r2311, %r2310;
	// end inline asm
	// begin inline asm
	mov.b32 %r2317, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2319, %r2283, %r2317;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2322, %r2319, %r2318;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2327, %r2286, %r2325;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2330, %r2327, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2335, %r2289, %r2333;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2338, %r2335, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2343, %r2292, %r2341;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2346, %r2343, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2351, %r2295, %r2349;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2354, %r2351, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2359, %r2298, %r2357;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2362, %r2359, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2366, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2368, %r2366;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2306, %r2367;
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2368, %r2373;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2314, %r2374;
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2368, %r2380;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2322, %r2381;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2368, %r2387;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2330, %r2388;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2394, %r2370, %r2384, %r1499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2377, %r2391, %r1499;
	// end inline asm
	shl.b32 	%r2405, %r2398, 4;
	// begin inline asm
	lop3.b32 %r2402, %r1505, %r2394, %r2405, 202;
	// end inline asm
	xor.b32  	%r2471, %r2402, -2004318072;
	// begin inline asm
	mov.b32 %r2409, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2409, %r2407;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2411, %r2338, %r2408;
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2409, %r2414;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2346, %r2415;
	// end inline asm
	// begin inline asm
	mov.b32 %r2421, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2422, %r2409, %r2421;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2425, %r2354, %r2422;
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2409, %r2428;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2432, %r2362, %r2429;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2435, %r2411, %r2425, %r1499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2439, %r2418, %r2432, %r1499;
	// end inline asm
	shl.b32 	%r2446, %r2439, 4;
	// begin inline asm
	lop3.b32 %r2443, %r1505, %r2435, %r2446, 202;
	// end inline asm
	xor.b32  	%r2472, %r2443, -2004318072;
	st.shared.u32 	[%rd149], %r2471;
	st.shared.u32 	[%rd150], %r2472;
	add.s32 	%r2591, %r2591, 32;
	add.s64 	%rd150, %rd150, 4228;
	add.s64 	%rd149, %rd149, 4228;
	add.s32 	%r2588, %r2588, 1;
	setp.eq.s32 	%p239, %r2591, 256;
	mov.u32 	%r2592, %r2582;
	mov.u32 	%r2593, %r2581;
	mov.u32 	%r2594, %r2580;
	mov.u32 	%r2595, %r2579;
	@%p239 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;
$L__BB0_130:                            // %guard_exit10584
                                        //   in Loop: Header=BB0_128 Depth=1
	bar.sync 	0;
	or.b32  	%r149, %r109, %r94;
	ld.shared.u32 	%r2478, [%rd14];
	ld.shared.u32 	%r2479, [%rd15+128];
	ld.shared.u32 	%r2486, [%rd15+4];
	ld.shared.u32 	%r2487, [%rd15+132];
	ld.shared.u32 	%r2494, [%rd16];
	ld.shared.u32 	%r2495, [%rd17+128];
	ld.shared.u32 	%r2502, [%rd17+4];
	ld.shared.u32 	%r2503, [%rd17+132];
	ld.shared.u32 	%r2510, [%rd18];
	ld.shared.u32 	%r2511, [%rd19+128];
	ld.shared.u32 	%r2518, [%rd19+4];
	ld.shared.u32 	%r2519, [%rd19+132];
	ld.shared.u32 	%r2526, [%rd20];
	ld.shared.u32 	%r2527, [%rd21+128];
	ld.shared.u32 	%r2534, [%rd21+4];
	ld.shared.u32 	%r2535, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2473, %r2478, %r2479, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2477, %r2478, %r2479, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2481, %r2486, %r2487, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2485, %r2486, %r2487, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2489, %r2494, %r2495, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2493, %r2494, %r2495, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2497, %r2502, %r2503, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2501, %r2502, %r2503, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2505, %r2510, %r2511, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2509, %r2510, %r2511, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2513, %r2518, %r2519, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2517, %r2518, %r2519, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2521, %r2526, %r2527, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2525, %r2526, %r2527, %r568;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2529, %r2534, %r2535, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2533, %r2534, %r2535, %r568;
	// end inline asm
	selp.b32 	%r2537, %r2477, %r2473, %p226;
	shfl.sync.bfly.b32	%r2538, %r2537, 8, 31, -1;
	selp.b32 	%r2539, %r2485, %r2481, %p226;
	shfl.sync.bfly.b32	%r2540, %r2539, 8, 31, -1;
	selp.b32 	%r2541, %r2493, %r2489, %p226;
	shfl.sync.bfly.b32	%r154, %r2541, 8, 31, -1;
	selp.b32 	%r2542, %r2501, %r2497, %p226;
	shfl.sync.bfly.b32	%r155, %r2542, 8, 31, -1;
	selp.b32 	%r2543, %r2509, %r2505, %p226;
	shfl.sync.bfly.b32	%r2544, %r2543, 8, 31, -1;
	selp.b32 	%r156, %r2505, %r2544, %p226;
	selp.b32 	%r157, %r2544, %r2509, %p226;
	selp.b32 	%r2545, %r2517, %r2513, %p226;
	shfl.sync.bfly.b32	%r2546, %r2545, 8, 31, -1;
	selp.b32 	%r158, %r2513, %r2546, %p226;
	selp.b32 	%r159, %r2546, %r2517, %p226;
	selp.b32 	%r2547, %r2525, %r2521, %p226;
	shfl.sync.bfly.b32	%r2548, %r2547, 8, 31, -1;
	selp.b32 	%r160, %r2521, %r2548, %p226;
	selp.b32 	%r161, %r2548, %r2525, %p226;
	selp.b32 	%r2549, %r2533, %r2529, %p226;
	shfl.sync.bfly.b32	%r2550, %r2549, 8, 31, -1;
	selp.b32 	%r162, %r2529, %r2550, %p226;
	selp.b32 	%r163, %r2550, %r2533, %p226;
	shl.b32 	%r2564, %r149, 12;
	@%p240 bra 	$L__BB0_142;
// %bb.131:                             // %guard_exit10584.pass10204_crit_edge
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2596, %r2564, %r102;
	bra.uni 	$L__BB0_143;
$L__BB0_144:                            // %L23967
	st.global.u32 	[%rd4], %r2563;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r2562, 2;
	st.global.u32 	[%rd4], %r2562;
	mov.u64 	%rd147, exception2084;
	cvta.global.u64 	%rd148, %rd147;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd148;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd51, exception1;
	cvta.global.u64 	%rd52, %rd51;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd52;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
