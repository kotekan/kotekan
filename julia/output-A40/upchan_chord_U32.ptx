// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2068[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<311>;
	.reg .f32 	%f<929>;
	.reg .b32 	%r<2641>;
	.reg .b64 	%rd<216>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r165, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd66, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r166, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r166, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd83, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd67, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r167, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r168, %r167, %r2;
	or.b32  	%r169, %r168, %r4;
	mul.wide.u32 	%rd89, %r169, 4;
	add.s64 	%rd4, %rd83, %rd89;
	mov.u32 	%r170, 1;
	st.global.u32 	[%rd4], %r170;
	ld.global.u32 	%r5, [%rd67];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L231
	ld.param.u64 	%rd71, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd71];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L241
	ld.param.u64 	%rd75, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd75];
	sub.s32 	%r171, %r6, %r5;
	and.b32  	%r172, %r171, 255;
	setp.ne.s32 	%p6, %r172, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L247
	ld.param.u64 	%rd79, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd79];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L257
	sub.s32 	%r173, %r8, %r7;
	add.s32 	%r174, %r173, 3;
	and.b32  	%r175, %r174, 7;
	setp.eq.s32 	%p12, %r175, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L379
	bfe.u32 	%r16, %r4, 1, 1;
	and.b32  	%r17, %r4, 1;
	bfe.u32 	%r18, %r4, 2, 1;
	shl.b32 	%r184, %r18, 1;
	shl.b32 	%r185, %r17, 2;
	shl.b32 	%r186, %r16, 3;
	or.b32  	%r187, %r185, %r186;
	or.b32  	%r188, %r184, %r187;
	shr.u32 	%r19, %r4, 4;
	or.b32  	%r20, %r19, %r188;
	or.b32  	%r21, %r20, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r20;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r189, %f193;
	and.b32  	%r190, %r189, -2147483648;
	or.b32  	%r191, %r190, 1056964608;
	mov.b32 	%f194, %r191;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L614
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L617
	cvt.rzi.s32.f32 	%r192, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r21;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r196, %f227;
	and.b32  	%r197, %r196, -2147483648;
	or.b32  	%r198, %r197, 1056964608;
	mov.b32 	%f228, %r198;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r199, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L634
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L637
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r206, %r20, 32;
	or.b32  	%r23, %r20, 48;
	cvt.rn.f32.s32 	%f255, %r206;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r207, %f262;
	and.b32  	%r208, %r207, -2147483648;
	or.b32  	%r209, %r208, 1056964608;
	mov.b32 	%f263, %r209;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r210, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r211, %r210, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L723
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L726
	shl.b32 	%r9, %r4, 2;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r212, %r211, 1;
	cvt.rn.f32.s32 	%f289, %r23;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r214, %f296;
	and.b32  	%r215, %r214, -2147483648;
	or.b32  	%r216, %r215, 1056964608;
	mov.b32 	%f297, %r216;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r217, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r218, %r217, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r219, %r218, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L743
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L746
	and.b32  	%r176, %r9, 4;
	and.b32  	%r10, %r4, 16;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r194, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r201, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r212, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r219, 1;
	or.b32  	%r224, %r20, 64;
	or.b32  	%r25, %r20, 80;
	cvt.rn.f32.s32 	%f324, %r224;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r225, %f331;
	and.b32  	%r226, %r225, -2147483648;
	or.b32  	%r227, %r226, 1056964608;
	mov.b32 	%f332, %r227;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r228, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r229, %r228, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r230, %r229, 1;
	setp.eq.b32 	%p40, %r230, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L832
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L835
	or.b32  	%r177, %r10, %r176;
	and.b32  	%r178, %r4, 2;
	shl.b32 	%r11, %r4, 1;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r195, %r193, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r202, %r200, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r213, %r211, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r220, %r218, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r231, %r229, 2;
	cvt.rn.f32.s32 	%f358, %r25;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r232, %f365;
	and.b32  	%r233, %r232, -2147483648;
	or.b32  	%r234, %r233, 1056964608;
	mov.b32 	%f366, %r234;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r235, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r236, %r235, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r237, %r236, 1;
	setp.eq.b32 	%p46, %r237, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r238, %r236, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L852
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L855
	or.b32  	%r179, %r177, %r178;
	and.b32  	%r12, %r11, 8;
	shl.b32 	%r181, %r3, 2;
	setp.eq.s32 	%p17, %r195, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r202, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r213, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r220, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r231, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r238, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r242, %r20, 96;
	or.b32  	%r27, %r20, 112;
	cvt.rn.f32.s32 	%f393, %r242;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r243, %f400;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f401, %r245;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r246, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r247, %r246, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r248, %r247, 1;
	setp.eq.b32 	%p52, %r248, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r249, %r247, 2;
	setp.eq.s32 	%p53, %r249, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L941
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L944
	or.b32  	%r180, %r179, %r12;
	and.b32  	%r13, %r181, 480;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r27;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r250, %f434;
	and.b32  	%r251, %r250, -2147483648;
	or.b32  	%r252, %r251, 1056964608;
	mov.b32 	%f435, %r252;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r253, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r254, %r253, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r255, %r254, 1;
	setp.eq.b32 	%p58, %r255, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r256, %r254, 2;
	setp.eq.s32 	%p59, %r256, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L961
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L964
	or.b32  	%r182, %r180, %r13;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r29, %r20, 31;
	cvt.rn.f32.s32 	%f461, %r29;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r31, %f899;
	and.b32  	%r260, %r31, 8388607;
	or.b32  	%r2610, %r260, 1065353216;
	mov.b32 	%f898, %r2610;
	add.s32 	%r261, %r31, -1073741824;
	and.b32  	%r2611, %r261, -8388608;
	setp.eq.s32 	%p68, %r2611, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %.lr.ph1847.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %.lr.ph1847
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r262, %r2611, 192937984;
	add.s32 	%r263, %r262, %r2610;
	mov.b32 	%f473, %r263;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2611, %r2611, %r262;
	mov.b32 	%r2610, %f898;
	setp.ne.s32 	%p69, %r2611, 0;
	setp.ne.s32 	%p70, %r2610, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r31, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f40, %f464;
	fma.rn.f32 	%f41, %f40, 0fC0000000, %f899;
	mov.b32 	%r30, %f41;
	setp.lt.u32 	%p63, %r30, 1073741824;
	mov.f32 	%f897, %f40;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r30, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f40, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	selp.f32 	%f470, %f469, %f40, %p67;
	add.f32 	%f897, %f470, 0fBF800000;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f40, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f466, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f466, 0f00000000;
	selp.f32 	%f467, %f897, %f40, %p66;
	add.f32 	%f468, %f467, 0f3F800000;
	add.f32 	%f897, %f468, 0f3F800000;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r183, %r182, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r264, %f38;
	and.b32  	%r265, %r264, -2147483648;
	mov.b32 	%r266, %f899;
	or.b32  	%r267, %r265, %r266;
	mov.b32 	%f899, %r267;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd90, %r183, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r268, %f483;
	and.b32  	%r269, %r268, -2147483648;
	or.b32  	%r270, %r269, 1056964608;
	mov.b32 	%f484, %r270;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r271, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r272, %r271, 1;
	setp.eq.b32 	%p76, %r272, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r273, %r271, 2;
	setp.eq.s32 	%p77, %r273, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r274, %r271, 1;
	and.b32  	%r275, %r274, 2;
	setp.eq.s32 	%p78, %r275, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r276, %r29, 496;
	cvt.rn.f32.s32 	%f513, %r276;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r39, %f903;
	and.b32  	%r277, %r39, 8388607;
	or.b32  	%r2612, %r277, 1065353216;
	mov.b32 	%f902, %r2612;
	add.s32 	%r278, %r39, -1073741824;
	and.b32  	%r2613, %r278, -8388608;
	setp.eq.s32 	%p88, %r2613, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %.lr.ph1842.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %.lr.ph1842
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r2613, 192937984;
	add.s32 	%r280, %r279, %r2612;
	mov.b32 	%f525, %r280;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2613, %r2613, %r279;
	mov.b32 	%r2612, %f902;
	setp.ne.s32 	%p89, %r2613, 0;
	setp.ne.s32 	%p90, %r2612, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i1063
	setp.gt.u32 	%p92, %r39, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i1029
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f59, %f516;
	fma.rn.f32 	%f60, %f59, 0fC0000000, %f903;
	mov.b32 	%r38, %f60;
	setp.lt.u32 	%p83, %r38, 1073741824;
	mov.f32 	%f901, %f59;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r38, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f59, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	selp.f32 	%f522, %f521, %f59, %p87;
	add.f32 	%f901, %f522, 0fBF800000;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f59, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i1034
	fma.rn.f32 	%f518, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f518, 0f00000000;
	selp.f32 	%f519, %f901, %f59, %p86;
	add.f32 	%f520, %f519, 0f3F800000;
	add.f32 	%f901, %f520, 0f3F800000;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i1066
	add.s64 	%rd91, %rd1, %rd90;
	mov.b32 	%r205, %f254;
	mov.b32 	%r204, %f6;
	mov.b32 	%r223, %f323;
	mov.b32 	%r222, %f15;
	mov.b32 	%r241, %f392;
	mov.b32 	%r240, %f24;
	mov.b32 	%r259, %f460;
	mov.b32 	%r258, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r281, %f57;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f903;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f903, %r284;
LBB0_52:                                // %__nv_fmodf.exit1069
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r14, [%rd91];
	shr.u32 	%r15, %r4, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r203, %r205, %r204;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r221, %r223, %r222;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r239, %r241, %r240;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r291, %f535;
	and.b32  	%r292, %r291, -2147483648;
	or.b32  	%r293, %r292, 1056964608;
	mov.b32 	%f536, %r293;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r294, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r295, %r294, 1;
	setp.eq.b32 	%p96, %r295, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r296, %r294, 2;
	setp.eq.s32 	%p97, %r296, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r297, %r294, 1;
	and.b32  	%r298, %r297, 2;
	setp.eq.s32 	%p98, %r298, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r287, %f566;
	mov.b32 	%r286, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r287, %r286;
	// end inline asm
	mov.b32 	%r290, %f563;
	mov.b32 	%r289, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r290, %r289;
	// end inline asm
	mov.u64 	%rd203, 2;
	mov.u64 	%rd202, -2;
LBB0_53:                                // %L1086.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd203, %rd203, %rd203;
	add.s64 	%rd8, %rd202, 1;
	setp.ge.u64 	%p101, %rd8, %rd202;
	mov.u64 	%rd202, %rd8;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L1093
	and.b64  	%rd94, %rd203, 9223372036854775807;
	setp.ne.s64 	%p102, %rd94, 16;
	@%p102 bra 	LBB0_134;
// %bb.55:                              // %L1095
	shr.u32 	%r48, %r4, 3;
	and.b32  	%r299, %r48, 2;
	or.b32  	%r49, %r18, %r299;
	and.b32  	%r300, %r15, 4;
	or.b32  	%r50, %r49, %r300;
	and.b32  	%r301, %r4, 3;
	mul.lo.s32 	%r302, %r301, %r50;
	shl.b32 	%r303, %r302, 1;
	neg.s32 	%r304, %r303;
	cvt.rn.f32.s32 	%f567, %r304;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r52, %f907;
	and.b32  	%r305, %r52, 8388607;
	or.b32  	%r2614, %r305, 1065353216;
	mov.b32 	%f906, %r2614;
	add.s32 	%r306, %r52, -1073741824;
	and.b32  	%r2615, %r306, -8388608;
	setp.eq.s32 	%p110, %r2615, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %.lr.ph1827.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %.lr.ph1827
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r2615, 192937984;
	add.s32 	%r308, %r307, %r2614;
	mov.b32 	%f579, %r308;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2615, %r2615, %r307;
	mov.b32 	%r2614, %f906;
	setp.ne.s32 	%p111, %r2615, 0;
	setp.ne.s32 	%p112, %r2614, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i1116
	setp.gt.u32 	%p114, %r52, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i1082
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f76, %f570;
	fma.rn.f32 	%f77, %f76, 0fC0000000, %f907;
	mov.b32 	%r51, %f77;
	setp.lt.u32 	%p105, %r51, 1073741824;
	mov.f32 	%f905, %f76;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r51, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f76, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	selp.f32 	%f576, %f575, %f76, %p109;
	add.f32 	%f905, %f576, 0fBF800000;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f76, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1087
	fma.rn.f32 	%f572, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f572, 0f00000000;
	selp.f32 	%f573, %f905, %f76, %p108;
	add.f32 	%f574, %f573, 0f3F800000;
	add.f32 	%f905, %f574, 0f3F800000;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i1090
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i1119
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r309, %f74;
	and.b32  	%r310, %r309, -2147483648;
	mov.b32 	%r311, %f907;
	or.b32  	%r312, %r310, %r311;
	mov.b32 	%f907, %r312;
LBB0_69:                                // %__nv_fmodf.exit1122
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r313, %f589;
	and.b32  	%r314, %r313, -2147483648;
	or.b32  	%r315, %r314, 1056964608;
	mov.b32 	%f590, %r315;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r316, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r317, %r316, 1;
	setp.eq.b32 	%p118, %r317, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r318, %r316, 2;
	setp.eq.s32 	%p119, %r318, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r319, %r316, 1;
	and.b32  	%r320, %r319, 2;
	setp.eq.s32 	%p120, %r320, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r321, %r11, 6;
	mov.u32 	%r322, -8;
	sub.s32 	%r323, %r322, %r321;
	mul.lo.s32 	%r324, %r50, %r323;
	cvt.rn.f32.s32 	%f619, %r324;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r60, %f911;
	and.b32  	%r325, %r60, 8388607;
	or.b32  	%r2616, %r325, 1065353216;
	mov.b32 	%f910, %r2616;
	add.s32 	%r326, %r60, -1073741824;
	and.b32  	%r2617, %r326, -8388608;
	setp.eq.s32 	%p130, %r2617, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %.lr.ph1817.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %.lr.ph1817
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r2617, 192937984;
	add.s32 	%r328, %r327, %r2616;
	mov.b32 	%f631, %r328;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2617, %r2617, %r327;
	mov.b32 	%r2616, %f910;
	setp.ne.s32 	%p131, %r2617, 0;
	setp.ne.s32 	%p132, %r2616, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i1169
	setp.gt.u32 	%p134, %r60, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i1135
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f95, %f622;
	fma.rn.f32 	%f96, %f95, 0fC0000000, %f911;
	mov.b32 	%r59, %f96;
	setp.lt.u32 	%p125, %r59, 1073741824;
	mov.f32 	%f909, %f95;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r59, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f95, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	selp.f32 	%f628, %f627, %f95, %p129;
	add.f32 	%f909, %f628, 0fBF800000;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f95, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i1140
	fma.rn.f32 	%f624, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f624, 0f00000000;
	selp.f32 	%f625, %f909, %f95, %p128;
	add.f32 	%f626, %f625, 0f3F800000;
	add.f32 	%f909, %f626, 0f3F800000;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i1143
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i1172
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r329, %f93;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f911;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f911, %r332;
LBB0_83:                                // %__nv_fmodf.exit1175
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r345, %f641;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f642, %r347;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r348, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p138, %r349, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p139, %r350, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p140, %r352, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r335, %f672;
	mov.b32 	%r334, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r67, %r335, %r334;
	// end inline asm
	mov.b32 	%r341, %f669;
	xor.b32  	%r338, %r341, -2147483648;
	mov.b32 	%r340, %f91;
	xor.b32  	%r337, %r340, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r68, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r335, %r334;
	// end inline asm
	mov.u64 	%rd205, 2;
	mov.u64 	%rd204, -2;
LBB0_84:                                // %L1277.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd205, %rd205, %rd205;
	add.s64 	%rd12, %rd204, 1;
	setp.ge.u64 	%p143, %rd12, %rd204;
	mov.u64 	%rd204, %rd12;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1284
	and.b64  	%rd99, %rd205, 9223372036854775807;
	setp.ne.s64 	%p144, %rd99, 16;
	@%p144 bra 	LBB0_133;
// %bb.86:                              // %L1286
	shl.b32 	%r353, %r16, 1;
	neg.s32 	%r71, %r353;
	mov.u64 	%rd207, 2;
	mov.u64 	%rd206, -2;
LBB0_87:                                // %L1353.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd207, %rd207, %rd207;
	add.s64 	%rd16, %rd206, 1;
	setp.ge.u64 	%p145, %rd16, %rd206;
	mov.u64 	%rd206, %rd16;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1360
	mul.lo.s32 	%r72, %r71, %r50;
	cvt.rn.f32.s32 	%f673, %r72;
	shl.b64 	%rd104, %rd207, 1;
	cvt.rn.f32.s64 	%f674, %rd104;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r74, %f915;
	and.b32  	%r354, %r74, 8388607;
	or.b32  	%r2618, %r354, 1065353216;
	mov.b32 	%f914, %r2618;
	add.s32 	%r355, %r74, -1073741824;
	and.b32  	%r2619, %r355, -8388608;
	setp.eq.s32 	%p153, %r2619, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %.lr.ph1802.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %.lr.ph1802
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r356, %r2619, 192937984;
	add.s32 	%r357, %r356, %r2618;
	mov.b32 	%f685, %r357;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2619, %r2619, %r356;
	mov.b32 	%r2618, %f914;
	setp.ne.s32 	%p154, %r2619, 0;
	setp.ne.s32 	%p155, %r2618, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1222
	setp.gt.u32 	%p157, %r74, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1188
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f112, %f676;
	fma.rn.f32 	%f113, %f112, 0fC0000000, %f915;
	mov.b32 	%r73, %f113;
	setp.lt.u32 	%p148, %r73, 1073741824;
	mov.f32 	%f913, %f112;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r73, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f112, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	selp.f32 	%f682, %f681, %f112, %p152;
	add.f32 	%f913, %f682, 0fBF800000;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f112, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1193
	fma.rn.f32 	%f678, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f678, 0f00000000;
	selp.f32 	%f679, %f913, %f112, %p151;
	add.f32 	%f680, %f679, 0f3F800000;
	add.f32 	%f913, %f680, 0f3F800000;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1196
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1225
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r358, %f110;
	and.b32  	%r359, %r358, -2147483648;
	mov.b32 	%r360, %f915;
	or.b32  	%r361, %r359, %r360;
	mov.b32 	%f915, %r361;
LBB0_102:                               // %__nv_fmodf.exit1228
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r362, %f695;
	and.b32  	%r363, %r362, -2147483648;
	or.b32  	%r364, %r363, 1056964608;
	mov.b32 	%f696, %r364;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r365, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r366, %r365, 1;
	setp.eq.b32 	%p161, %r366, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r367, %r365, 2;
	setp.eq.s32 	%p162, %r367, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r368, %r365, 1;
	and.b32  	%r369, %r368, 2;
	setp.eq.s32 	%p163, %r369, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd209, 2;
	mov.u64 	%rd208, -2;
LBB0_103:                               // %L1395.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd209, %rd209, %rd209;
	add.s64 	%rd20, %rd208, 1;
	setp.ge.u64 	%p166, %rd20, %rd208;
	mov.u64 	%rd208, %rd20;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1402
	shl.b32 	%r370, %r50, 2;
	sub.s32 	%r371, %r72, %r370;
	cvt.rn.f32.s32 	%f725, %r371;
	shl.b64 	%rd107, %rd209, 1;
	cvt.rn.f32.s64 	%f726, %rd107;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r82, %f919;
	and.b32  	%r372, %r82, 8388607;
	or.b32  	%r2620, %r372, 1065353216;
	mov.b32 	%f918, %r2620;
	add.s32 	%r373, %r82, -1073741824;
	and.b32  	%r2621, %r373, -8388608;
	setp.eq.s32 	%p174, %r2621, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %.lr.ph1792.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %.lr.ph1792
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r2621, 192937984;
	add.s32 	%r375, %r374, %r2620;
	mov.b32 	%f737, %r375;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2621, %r2621, %r374;
	mov.b32 	%r2620, %f918;
	setp.ne.s32 	%p175, %r2621, 0;
	setp.ne.s32 	%p176, %r2620, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1275
	setp.gt.u32 	%p178, %r82, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1241
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f131, %f728;
	fma.rn.f32 	%f132, %f131, 0fC0000000, %f919;
	mov.b32 	%r81, %f132;
	setp.lt.u32 	%p169, %r81, 1073741824;
	mov.f32 	%f917, %f131;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r81, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f131, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	selp.f32 	%f734, %f733, %f131, %p173;
	add.f32 	%f917, %f734, 0fBF800000;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f131, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1246
	fma.rn.f32 	%f730, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f730, 0f00000000;
	selp.f32 	%f731, %f917, %f131, %p172;
	add.f32 	%f732, %f731, 0f3F800000;
	add.f32 	%f917, %f732, 0f3F800000;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1249
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1278
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r376, %f129;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f919;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f919, %r379;
LBB0_118:                               // %__nv_fmodf.exit1281
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r386, %f747;
	and.b32  	%r387, %r386, -2147483648;
	or.b32  	%r388, %r387, 1056964608;
	mov.b32 	%f748, %r388;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r389, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r390, %r389, 1;
	setp.eq.b32 	%p182, %r390, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r391, %r389, 2;
	setp.eq.s32 	%p183, %r391, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r392, %r389, 1;
	and.b32  	%r393, %r392, 2;
	setp.eq.s32 	%p184, %r393, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r382, %f778;
	mov.b32 	%r381, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r89, %r382, %r381;
	// end inline asm
	mov.b32 	%r385, %f775;
	mov.b32 	%r384, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r385, %r384;
	// end inline asm
	mov.u64 	%rd211, 2;
	mov.u64 	%rd210, -2;
LBB0_119:                               // %L1441.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd211, %rd211, %rd211;
	add.s64 	%rd24, %rd210, 1;
	setp.ge.u64 	%p187, %rd24, %rd210;
	mov.u64 	%rd210, %rd24;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1448
	and.b64  	%rd110, %rd211, 9223372036854775807;
	setp.ne.s64 	%p188, %rd110, 16;
	@%p188 bra 	LBB0_132;
// %bb.121:                             // %L1450
	mul.lo.s32 	%r92, %r71, %r49;
	cvt.rn.f32.s32 	%f779, %r92;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_142;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_138;
	bra.uni 	LBB0_123;
LBB0_138:
	mov.b32 	%r114, %f923;
	and.b32  	%r394, %r114, 8388607;
	or.b32  	%r2636, %r394, 1065353216;
	mov.b32 	%f922, %r2636;
	add.s32 	%r395, %r114, -1073741824;
	and.b32  	%r2637, %r395, -8388608;
	setp.eq.s32 	%p196, %r2637, 0;
	@%p196 bra 	LBB0_141;
// %bb.139:                             // %.lr.ph1782.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_140:                               // %.lr.ph1782
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r2637, 192937984;
	add.s32 	%r397, %r396, %r2636;
	mov.b32 	%f791, %r397;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2637, %r2637, %r396;
	mov.b32 	%r2636, %f922;
	setp.ne.s32 	%p197, %r2637, 0;
	setp.ne.s32 	%p198, %r2636, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_140;
LBB0_141:                               // %__internal_fmodf_slowpath_mod.exit.i.i1328
	setp.gt.u32 	%p200, %r114, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_142;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1294
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f148, %f782;
	fma.rn.f32 	%f149, %f148, 0fC0000000, %f923;
	mov.b32 	%r113, %f149;
	setp.lt.u32 	%p191, %r113, 1073741824;
	mov.f32 	%f921, %f148;
	@%p191 bra 	LBB0_137;
// %bb.124:
	setp.lt.u32 	%p192, %r113, -2147483647;
	@%p192 bra 	LBB0_135;
// %bb.125:
	add.f32 	%f787, %f148, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	selp.f32 	%f788, %f787, %f148, %p195;
	add.f32 	%f921, %f788, 0fBF800000;
	bra.uni 	LBB0_137;
LBB0_135:
	add.f32 	%f921, %f148, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1299
	fma.rn.f32 	%f784, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f784, 0f00000000;
	selp.f32 	%f785, %f921, %f148, %p194;
	add.f32 	%f786, %f785, 0f3F800000;
	add.f32 	%f921, %f786, 0f3F800000;
LBB0_137:                               // %__internal_fmodf_fastpath_quot.exit.i.i1302
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_142:                               // %__internal_fmodf_kernel.exit.i1331
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_144;
// %bb.143:
	mov.b32 	%r398, %f146;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f923;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f923, %r401;
LBB0_144:                               // %__nv_fmodf.exit1334
	shl.b32 	%r410, %r49, 2;
	sub.s32 	%r411, %r92, %r410;
	cvt.rn.f32.s32 	%f833, %r411;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_156;
// %bb.145:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_152;
	bra.uni 	LBB0_146;
LBB0_152:
	mov.b32 	%r122, %f927;
	and.b32  	%r412, %r122, 8388607;
	or.b32  	%r2638, %r412, 1065353216;
	mov.b32 	%f926, %r2638;
	add.s32 	%r413, %r122, -1073741824;
	and.b32  	%r2639, %r413, -8388608;
	setp.eq.s32 	%p217, %r2639, 0;
	@%p217 bra 	LBB0_155;
// %bb.153:                             // %.lr.ph.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_154:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r2639, 192937984;
	add.s32 	%r415, %r414, %r2638;
	mov.b32 	%f845, %r415;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2639, %r2639, %r414;
	mov.b32 	%r2638, %f926;
	setp.ne.s32 	%p218, %r2639, 0;
	setp.ne.s32 	%p219, %r2638, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_154;
LBB0_155:                               // %__internal_fmodf_slowpath_mod.exit.i.i1381
	setp.gt.u32 	%p221, %r122, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_156;
LBB0_146:                               // %__nv_fast_fdividef.exit.i.i.i1347
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f168, %f836;
	fma.rn.f32 	%f169, %f168, 0fC0000000, %f927;
	mov.b32 	%r121, %f169;
	setp.lt.u32 	%p212, %r121, 1073741824;
	mov.f32 	%f925, %f168;
	@%p212 bra 	LBB0_151;
// %bb.147:
	setp.lt.u32 	%p213, %r121, -2147483647;
	@%p213 bra 	LBB0_149;
// %bb.148:
	add.f32 	%f841, %f168, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	selp.f32 	%f842, %f841, %f168, %p216;
	add.f32 	%f925, %f842, 0fBF800000;
	bra.uni 	LBB0_151;
LBB0_149:
	add.f32 	%f925, %f168, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_151;
// %bb.150:                             // %__nv_fmaf_rn.exit.i.i.i1352
	fma.rn.f32 	%f838, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f838, 0f00000000;
	selp.f32 	%f839, %f925, %f168, %p215;
	add.f32 	%f840, %f839, 0f3F800000;
	add.f32 	%f925, %f840, 0f3F800000;
LBB0_151:                               // %__internal_fmodf_fastpath_quot.exit.i.i1355
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_156:                               // %__internal_fmodf_kernel.exit.i1384
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_158;
// %bb.157:
	mov.b32 	%r416, %f166;
	and.b32  	%r417, %r416, -2147483648;
	mov.b32 	%r418, %f927;
	or.b32  	%r419, %r417, %r418;
	mov.b32 	%f927, %r419;
LBB0_158:                               // %__nv_fmodf.exit1387
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2608, 0;
	@%p230 bra 	LBB0_131;
// %bb.159:                             // %L1572.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r402, %f801;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f802, %r404;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r405, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r406, %r405, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r406, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p206, %r407, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r408, %r405, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r409, %r408, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r91, %r48, 1;
	setp.eq.s32 	%p207, %r409, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r91, %r17;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r432, %f855;
	and.b32  	%r433, %r432, -2147483648;
	or.b32  	%r434, %r433, 1056964608;
	mov.b32 	%f856, %r434;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r435, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r436, %r435, 1;
	setp.eq.b32 	%p225, %r436, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r437, %r435, 2;
	setp.eq.s32 	%p226, %r437, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r438, %r435, 1;
	and.b32  	%r439, %r438, 2;
	setp.eq.s32 	%p227, %r439, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r422, %f887;
	mov.b32 	%r421, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	mov.b32 	%r428, %f888;
	xor.b32  	%r425, %r428, -2147483648;
	mov.b32 	%r427, %f165;
	xor.b32  	%r424, %r427, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r427;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r422, %r421;
	// end inline asm
	shl.b32 	%r441, %r5, 12;
	shl.b32 	%r442, %r3, 5;
	and.b32  	%r133, %r9, 28;
	and.b32  	%r134, %r442, 96;
	and.b32  	%r135, %r442, 128;
	and.b32  	%r136, %r11, 16;
	and.b32  	%r137, %r15, 8;
	and.b32  	%r138, %r1, 7;
	shl.b32 	%r443, %r1, 2;
	and.b32  	%r139, %r443, 32;
	or.b32  	%r444, %r134, %r441;
	or.b32  	%r445, %r444, %r133;
	or.b32  	%r140, %r445, %r135;
	add.s32 	%r141, %r140, 262144;
	add.s32 	%r142, %r140, 524288;
	add.s32 	%r143, %r140, 786432;
	and.b32  	%r144, %r4, 8;
	and.b32  	%r446, %r1, 1;
	mul.lo.s32 	%r447, %r446, 520;
	bfe.u32 	%r448, %r1, 2, 1;
	shr.u32 	%r449, %r1, 3;
	mul.lo.s32 	%r450, %r449, 1057;
	shl.b32 	%r451, %r4, 4;
	or.b32  	%r452, %r451, %r144;
	shr.u32 	%r453, %r452, 2;
	and.b32  	%r454, %r453, 30;
	bfe.u32 	%r455, %r1, 1, 1;
	mul.lo.s32 	%r456, %r455, 260;
	mad.lo.s32 	%r457, %r448, 130, %r447;
	mad.lo.s32 	%r458, %r19, 65, %r457;
	add.s32 	%r459, %r458, %r450;
	add.s32 	%r460, %r459, %r454;
	add.s32 	%r461, %r460, %r456;
	mul.wide.u32 	%rd113, %r461, 4;
	mov.u64 	%rd114, shmem;
	add.s64 	%rd37, %rd114, %rd113;
	add.s32 	%r462, %r458, 32;
	add.s32 	%r463, %r462, %r450;
	add.s32 	%r464, %r463, %r454;
	add.s32 	%r465, %r464, %r456;
	mul.wide.u32 	%rd115, %r465, 4;
	add.s64 	%rd38, %rd114, %rd115;
	add.s32 	%r466, %r458, 1;
	add.s32 	%r467, %r466, %r450;
	add.s32 	%r468, %r467, %r454;
	add.s32 	%r469, %r468, %r456;
	mul.wide.u32 	%rd116, %r469, 4;
	add.s64 	%rd39, %rd114, %rd116;
	add.s32 	%r470, %r458, 33;
	add.s32 	%r471, %r470, %r450;
	add.s32 	%r472, %r471, %r454;
	add.s32 	%r473, %r472, %r456;
	mul.wide.u32 	%rd117, %r473, 4;
	add.s64 	%rd40, %rd114, %rd117;
	or.b32  	%r474, %r449, 2;
	mul.lo.s32 	%r475, %r474, 1057;
	add.s32 	%r476, %r458, %r475;
	add.s32 	%r477, %r476, %r454;
	add.s32 	%r478, %r477, %r456;
	mul.wide.s32 	%rd118, %r478, 4;
	add.s64 	%rd41, %rd114, %rd118;
	add.s32 	%r479, %r462, %r475;
	add.s32 	%r480, %r479, %r454;
	add.s32 	%r481, %r480, %r456;
	mul.wide.s32 	%rd119, %r481, 4;
	add.s64 	%rd42, %rd114, %rd119;
	add.s32 	%r482, %r466, %r475;
	add.s32 	%r483, %r482, %r454;
	add.s32 	%r484, %r483, %r456;
	mul.wide.s32 	%rd120, %r484, 4;
	add.s64 	%rd43, %rd114, %rd120;
	add.s32 	%r485, %r470, %r475;
	add.s32 	%r486, %r485, %r454;
	add.s32 	%r487, %r486, %r456;
	mul.wide.s32 	%rd121, %r487, 4;
	add.s64 	%rd44, %rd114, %rd121;
	or.b32  	%r488, %r449, 4;
	mul.lo.s32 	%r489, %r488, 1057;
	add.s32 	%r490, %r458, %r489;
	add.s32 	%r491, %r490, %r454;
	add.s32 	%r492, %r491, %r456;
	mul.wide.s32 	%rd122, %r492, 4;
	add.s64 	%rd45, %rd114, %rd122;
	add.s32 	%r493, %r462, %r489;
	add.s32 	%r494, %r493, %r454;
	add.s32 	%r495, %r494, %r456;
	mul.wide.s32 	%rd123, %r495, 4;
	add.s64 	%rd46, %rd114, %rd123;
	add.s32 	%r496, %r466, %r489;
	add.s32 	%r497, %r496, %r454;
	add.s32 	%r498, %r497, %r456;
	mul.wide.s32 	%rd124, %r498, 4;
	add.s64 	%rd47, %rd114, %rd124;
	add.s32 	%r499, %r470, %r489;
	add.s32 	%r500, %r499, %r454;
	add.s32 	%r501, %r500, %r456;
	mul.wide.s32 	%rd125, %r501, 4;
	add.s64 	%rd48, %rd114, %rd125;
	or.b32  	%r502, %r449, 6;
	mul.lo.s32 	%r503, %r502, 1057;
	add.s32 	%r504, %r458, %r503;
	add.s32 	%r505, %r504, %r454;
	add.s32 	%r506, %r505, %r456;
	mul.wide.s32 	%rd126, %r506, 4;
	add.s64 	%rd49, %rd114, %rd126;
	add.s32 	%r507, %r462, %r503;
	add.s32 	%r508, %r507, %r454;
	add.s32 	%r509, %r508, %r456;
	mul.wide.s32 	%rd127, %r509, 4;
	add.s64 	%rd50, %rd114, %rd127;
	add.s32 	%r510, %r466, %r503;
	add.s32 	%r511, %r510, %r454;
	add.s32 	%r512, %r511, %r456;
	mul.wide.s32 	%rd128, %r512, 4;
	add.s64 	%rd51, %rd114, %rd128;
	add.s32 	%r513, %r470, %r503;
	add.s32 	%r514, %r513, %r454;
	add.s32 	%r515, %r514, %r456;
	mul.wide.s32 	%rd129, %r515, 4;
	add.s64 	%rd52, %rd114, %rd129;
	mul.lo.s32 	%r516, %r19, 520;
	mul.lo.s32 	%r517, %r17, 130;
	mul.lo.s32 	%r518, %r16, 65;
	shl.b32 	%r519, %r1, 1;
	shl.b32 	%r520, %r4, 3;
	and.b32  	%r521, %r520, 64;
	or.b32  	%r522, %r521, %r519;
	shr.u32 	%r523, %r522, 2;
	mul.lo.s32 	%r524, %r18, 260;
	and.b32  	%r525, %r2, 32;
	or.b32  	%r526, %r523, 8;
	cvt.u16.u32 	%rs1, %r4;
	shr.u16 	%rs2, %rs1, 8;
	shl.b16 	%rs3, %rs1, 8;
	or.b16  	%rs4, %rs3, %rs2;
	shl.b16 	%rs5, %rs4, 4;
	shl.b16 	%rs6, %rs1, 4;
	and.b16  	%rs7, %rs6, 768;
	or.b16  	%rs8, %rs7, %rs5;
	and.b16  	%rs9, %rs8, 13104;
	shl.b16 	%rs10, %rs9, 3;
	shl.b16 	%rs11, %rs9, 1;
	and.b16  	%rs12, %rs11, 16384;
	or.b16  	%rs13, %rs12, %rs10;
	shr.u16 	%rs14, %rs13, 13;
	cvt.u32.u16 	%r527, %rs14;
	or.b32  	%r528, %r10, %r527;
	or.b32  	%r529, %r528, %r12;
	shr.u32 	%r530, %r529, 1;
	mul.lo.s32 	%r531, %r530, 65;
	and.b32  	%r145, %r1, 8;
	shl.b32 	%r532, %r7, 17;
	add.s32 	%r533, %r532, -393216;
	shl.b32 	%r534, %r1, 14;
	and.b32  	%r146, %r534, 131072;
	and.b32  	%r535, %r443, 28;
	or.b32  	%r536, %r48, %r535;
	or.b32  	%r537, %r536, %r13;
	shl.b32 	%r147, %r537, 8;
	cvt.s64.s32 	%rd53, %r533;
	and.b32  	%r538, %r519, 14;
	or.b32  	%r539, %r19, %r538;
	mul.lo.s32 	%r540, %r539, 65;
	add.s32 	%r541, %r450, %r540;
	add.s32 	%r542, %r541, %r454;
	mul.wide.u32 	%rd130, %r542, 4;
	add.s64 	%rd54, %rd114, %rd130;
	cvt.u64.u32 	%rd131, %r454;
	cvt.u64.u32 	%rd132, %r450;
	cvt.u64.u32 	%rd133, %r540;
	add.s64 	%rd134, %rd133, %rd132;
	add.s64 	%rd135, %rd134, %rd131;
	shl.b64 	%rd136, %rd135, 2;
	add.s64 	%rd55, %rd114, %rd136;
	add.s32 	%r543, %r475, %r540;
	add.s32 	%r544, %r543, %r454;
	mul.wide.u32 	%rd137, %r544, 4;
	add.s64 	%rd56, %rd114, %rd137;
	cvt.u64.u32 	%rd138, %r475;
	add.s64 	%rd139, %rd133, %rd138;
	add.s64 	%rd140, %rd139, %rd131;
	shl.b64 	%rd141, %rd140, 2;
	add.s64 	%rd57, %rd114, %rd141;
	add.s32 	%r545, %r489, %r540;
	add.s32 	%r546, %r545, %r454;
	mul.wide.u32 	%rd142, %r546, 4;
	add.s64 	%rd58, %rd114, %rd142;
	cvt.u64.u32 	%rd143, %r489;
	add.s64 	%rd144, %rd133, %rd143;
	add.s64 	%rd145, %rd144, %rd131;
	shl.b64 	%rd146, %rd145, 2;
	add.s64 	%rd59, %rd114, %rd146;
	add.s32 	%r547, %r503, %r540;
	add.s32 	%r548, %r547, %r454;
	mul.wide.u32 	%rd147, %r548, 4;
	add.s64 	%rd60, %rd114, %rd147;
	cvt.u64.u32 	%rd148, %r503;
	add.s64 	%rd149, %rd133, %rd148;
	add.s64 	%rd150, %rd149, %rd131;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd61, %rd114, %rd151;
	add.s32 	%r549, %r526, %r531;
	add.s32 	%r550, %r549, %r525;
	mul.wide.u32 	%rd152, %r550, 4;
	add.s64 	%rd62, %rd114, %rd152;
	add.s32 	%r551, %r523, %r531;
	add.s32 	%r552, %r551, %r525;
	mul.wide.u32 	%rd153, %r552, 4;
	add.s64 	%rd63, %rd114, %rd153;
	add.s32 	%r553, %r526, %r516;
	add.s32 	%r554, %r553, %r524;
	add.s32 	%r555, %r554, %r517;
	add.s32 	%r556, %r555, %r518;
	add.s32 	%r557, %r556, %r525;
	mul.wide.u32 	%rd154, %r557, 4;
	add.s64 	%rd64, %rd114, %rd154;
	add.s32 	%r558, %r523, %r516;
	add.s32 	%r559, %r558, %r524;
	add.s32 	%r560, %r559, %r517;
	add.s32 	%r561, %r560, %r518;
	add.s32 	%r562, %r561, %r525;
	mul.wide.u32 	%rd155, %r562, 4;
	add.s64 	%rd65, %rd114, %rd155;
	setp.eq.s32 	%p231, %r144, 0;
	mov.u16 	%rs302, 25600;
	mov.u16 	%rs250, 21504;
	setp.ne.s32 	%p245, %r145, 0;
	mov.u32 	%r93, %r2608;
	mov.u32 	%r2635, %r2608;
	mov.u32 	%r2634, %r2608;
	mov.u32 	%r2625, %r2608;
	mov.u32 	%r2626, %r2608;
	mov.u32 	%r2627, %r2608;
	mov.u32 	%r2628, %r2608;
	bra.uni 	LBB0_126;
LBB0_130:                               // %pass8966
                                        //   in Loop: Header=BB0_126 Depth=1
	add.s32 	%r2593, %r2640, 524288;
	or.b32  	%r2594, %r2593, %r134;
	or.b32  	%r2595, %r2594, %r133;
	or.b32  	%r2596, %r2595, %r135;
	add.s32 	%r2597, %r2596, %r146;
	add.s32 	%r2598, %r2597, %r147;
	cvt.u64.u32 	%rd176, %r2598;
	add.s64 	%rd177, %rd176, %rd53;
	shr.u64 	%rd178, %rd177, 35;
	add.s64 	%rd179, %rd177, %rd178;
	shr.s64 	%rd180, %rd179, 29;
	and.b64  	%rd181, %rd179, -536870912;
	setp.ne.s64 	%p251, %rd181, %rd177;
	setp.lt.s64 	%p252, %rd177, 0;
	and.pred  	%p253, %p252, %p251;
	selp.u64 	%rd182, 1, 0, %p253;
	sub.s64 	%rd183, %rd182, %rd180;
	shl.b64 	%rd184, %rd183, 29;
	add.s64 	%rd185, %rd184, %rd177;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd3, %rd186;
	st.global.v4.u32 	[%rd187], {%r156, %r158, %r157, %r159};
	add.s32 	%r2599, %r2640, 786432;
	or.b32  	%r2600, %r2599, %r134;
	or.b32  	%r2601, %r2600, %r133;
	or.b32  	%r2602, %r2601, %r135;
	add.s32 	%r2603, %r2602, %r146;
	add.s32 	%r2604, %r2603, %r147;
	cvt.u64.u32 	%rd188, %r2604;
	add.s64 	%rd189, %rd188, %rd53;
	shr.u64 	%rd190, %rd189, 35;
	add.s64 	%rd191, %rd189, %rd190;
	shr.s64 	%rd192, %rd191, 29;
	and.b64  	%rd193, %rd191, -536870912;
	setp.ne.s64 	%p254, %rd193, %rd189;
	setp.lt.s64 	%p255, %rd189, 0;
	and.pred  	%p256, %p255, %p254;
	selp.u64 	%rd194, 1, 0, %p256;
	sub.s64 	%rd195, %rd194, %rd192;
	shl.b64 	%rd196, %rd195, 29;
	add.s64 	%rd197, %rd196, %rd189;
	shl.b64 	%rd198, %rd197, 2;
	add.s64 	%rd199, %rd3, %rd198;
	st.global.v4.u32 	[%rd199], {%r160, %r162, %r161, %r163};
	setp.ne.s32 	%p257, %r93, 130816;
	add.s32 	%r93, %r93, 256;
	add.s32 	%r2605, %r93, %r5;
	setp.gt.s32 	%p258, %r6, %r2605;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_126;
	bra.uni 	LBB0_131;
LBB0_126:                               // %L1572
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r628, %r136, %r93;
	or.b32  	%r629, %r628, %r137;
	or.b32  	%r630, %r629, %r138;
	or.b32  	%r631, %r630, %r139;
	shl.b32 	%r632, %r631, 12;
	add.s32 	%r633, %r140, %r632;
	shr.s32 	%r634, %r633, 31;
	shr.u32 	%r635, %r634, 3;
	add.s32 	%r636, %r633, %r635;
	shr.s32 	%r637, %r636, 29;
	and.b32  	%r638, %r636, -536870912;
	setp.ne.s32 	%p232, %r638, %r633;
	setp.lt.s32 	%p233, %r633, 0;
	and.pred  	%p234, %p233, %p232;
	selp.u32 	%r639, 1, 0, %p234;
	sub.s32 	%r640, %r639, %r637;
	shl.b32 	%r641, %r640, 29;
	add.s32 	%r642, %r641, %r633;
	mul.wide.s32 	%rd156, %r642, 4;
	add.s64 	%rd157, %rd2, %rd156;
	ld.global.v4.u32 	{%r643, %r644, %r645, %r646}, [%rd157];
	add.s32 	%r647, %r141, %r632;
	shr.s32 	%r648, %r647, 31;
	shr.u32 	%r649, %r648, 3;
	add.s32 	%r650, %r647, %r649;
	shr.s32 	%r651, %r650, 29;
	and.b32  	%r652, %r650, -536870912;
	setp.ne.s32 	%p235, %r652, %r647;
	setp.lt.s32 	%p236, %r647, 0;
	and.pred  	%p237, %p236, %p235;
	selp.u32 	%r653, 1, 0, %p237;
	sub.s32 	%r654, %r653, %r651;
	shl.b32 	%r655, %r654, 29;
	add.s32 	%r656, %r655, %r647;
	mul.wide.s32 	%rd158, %r656, 4;
	add.s64 	%rd159, %rd2, %rd158;
	ld.global.v4.u32 	{%r657, %r658, %r659, %r660}, [%rd159];
	add.s32 	%r661, %r142, %r632;
	shr.s32 	%r662, %r661, 31;
	shr.u32 	%r663, %r662, 3;
	add.s32 	%r664, %r661, %r663;
	shr.s32 	%r665, %r664, 29;
	and.b32  	%r666, %r664, -536870912;
	setp.ne.s32 	%p238, %r666, %r661;
	setp.lt.s32 	%p239, %r661, 0;
	and.pred  	%p240, %p239, %p238;
	selp.u32 	%r667, 1, 0, %p240;
	sub.s32 	%r668, %r667, %r665;
	shl.b32 	%r669, %r668, 29;
	add.s32 	%r670, %r669, %r661;
	mul.wide.s32 	%rd160, %r670, 4;
	add.s64 	%rd161, %rd2, %rd160;
	ld.global.v4.u32 	{%r671, %r672, %r673, %r674}, [%rd161];
	add.s32 	%r675, %r143, %r632;
	shr.s32 	%r676, %r675, 31;
	shr.u32 	%r677, %r676, 3;
	add.s32 	%r678, %r675, %r677;
	shr.s32 	%r679, %r678, 29;
	and.b32  	%r680, %r678, -536870912;
	setp.ne.s32 	%p241, %r680, %r675;
	setp.lt.s32 	%p242, %r675, 0;
	and.pred  	%p243, %p242, %p241;
	selp.u32 	%r681, 1, 0, %p243;
	sub.s32 	%r682, %r681, %r679;
	shl.b32 	%r683, %r682, 29;
	add.s32 	%r684, %r683, %r675;
	mul.wide.s32 	%rd162, %r684, 4;
	add.s64 	%rd163, %rd2, %rd162;
	ld.global.v4.u32 	{%r685, %r686, %r687, %r688}, [%rd163];
	selp.b32 	%r689, %r645, %r643, %p231;
	shfl.sync.bfly.b32	%r690, %r689, 8, 31, -1;
	selp.b32 	%r564, %r643, %r690, %p231;
	selp.b32 	%r565, %r690, %r645, %p231;
	selp.b32 	%r691, %r646, %r644, %p231;
	shfl.sync.bfly.b32	%r692, %r691, 8, 31, -1;
	selp.b32 	%r572, %r644, %r692, %p231;
	selp.b32 	%r573, %r692, %r646, %p231;
	selp.b32 	%r693, %r659, %r657, %p231;
	shfl.sync.bfly.b32	%r694, %r693, 8, 31, -1;
	selp.b32 	%r580, %r657, %r694, %p231;
	selp.b32 	%r581, %r694, %r659, %p231;
	selp.b32 	%r695, %r660, %r658, %p231;
	shfl.sync.bfly.b32	%r696, %r695, 8, 31, -1;
	selp.b32 	%r588, %r658, %r696, %p231;
	selp.b32 	%r589, %r696, %r660, %p231;
	selp.b32 	%r697, %r673, %r671, %p231;
	shfl.sync.bfly.b32	%r698, %r697, 8, 31, -1;
	selp.b32 	%r596, %r671, %r698, %p231;
	selp.b32 	%r597, %r698, %r673, %p231;
	selp.b32 	%r699, %r674, %r672, %p231;
	shfl.sync.bfly.b32	%r700, %r699, 8, 31, -1;
	selp.b32 	%r604, %r672, %r700, %p231;
	selp.b32 	%r605, %r700, %r674, %p231;
	selp.b32 	%r701, %r687, %r685, %p231;
	shfl.sync.bfly.b32	%r702, %r701, 8, 31, -1;
	selp.b32 	%r612, %r685, %r702, %p231;
	selp.b32 	%r613, %r702, %r687, %p231;
	selp.b32 	%r703, %r688, %r686, %p231;
	shfl.sync.bfly.b32	%r704, %r703, 8, 31, -1;
	selp.b32 	%r620, %r686, %r704, %p231;
	selp.b32 	%r621, %r704, %r688, %p231;
	mov.u32 	%r622, 21520;
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r622;
	// end inline asm
	mov.u32 	%r626, 30258;
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r588, %r589, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r588, %r589, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r596, %r597, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r599, %r596, %r597, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r604, %r605, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r607, %r604, %r605, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r612, %r613, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r615, %r612, %r613, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r619, %r620, %r621, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r623, %r620, %r621, %r626;
	// end inline asm
	st.shared.u32 	[%rd37], %r563;
	st.shared.u32 	[%rd38], %r567;
	st.shared.u32 	[%rd39], %r571;
	st.shared.u32 	[%rd40], %r575;
	st.shared.u32 	[%rd41], %r579;
	st.shared.u32 	[%rd42], %r583;
	st.shared.u32 	[%rd43], %r587;
	st.shared.u32 	[%rd44], %r591;
	st.shared.u32 	[%rd45], %r595;
	st.shared.u32 	[%rd46], %r599;
	st.shared.u32 	[%rd47], %r603;
	st.shared.u32 	[%rd48], %r607;
	st.shared.u32 	[%rd49], %r611;
	st.shared.u32 	[%rd50], %r615;
	st.shared.u32 	[%rd51], %r619;
	st.shared.u32 	[%rd52], %r623;
	bar.sync 	0;
	mov.u32 	%r2629, 256;
	mov.u64 	%rd212, %rd65;
	mov.u64 	%rd213, %rd64;
	mov.u64 	%rd214, %rd63;
	mov.u64 	%rd215, %rd62;
	mov.u32 	%r2630, %r2628;
	mov.u32 	%r2631, %r2627;
	mov.u32 	%r2632, %r2626;
	mov.u32 	%r2633, %r2625;
LBB0_127:                               // %L13871
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2627, %r2635;
	mov.u32 	%r2628, %r2634;
	ld.shared.u32 	%r2626, [%rd212];
	ld.shared.u32 	%r2625, [%rd213];
	// begin inline asm
	mov.b32 %r710, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r721, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r709, %r2626, -2004318072;
	mov.u32 	%r708, 983055;
	// begin inline asm
	lop3.b32 %r707, %r708, %r709, %r710, 202;
	// end inline asm
	mov.u16 	%rs19, 18432;
	// begin inline asm
	mov.b32 %r711, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	mov.u32 	%r719, 15728880;
	// begin inline asm
	lop3.b32 %r718, %r719, %r709, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r721, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	shr.u32 	%r731, %r709, 8;
	// begin inline asm
	lop3.b32 %r729, %r708, %r731, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r740, %r719, %r731, %r721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r744, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r745, %r721, %r744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r748, %r740, %r745;
	// end inline asm
	// begin inline asm
	mov.b32 %r756, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r767, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r755, %r2625, -2004318072;
	// begin inline asm
	lop3.b32 %r753, %r708, %r755, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r756, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r764, %r719, %r755, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r767, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	shr.u32 	%r777, %r755, 8;
	// begin inline asm
	lop3.b32 %r775, %r708, %r777, %r756, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r779, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r780, %r756, %r779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r783, %r775, %r780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r786, %r719, %r777, %r767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r790, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r791, %r767, %r790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r794, %r786, %r791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r797, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r799, %r797, %r715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r802, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r804, %r802, %r726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r807, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r809, %r807, %r737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r812, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r814, %r812, %r748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r817, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r819, %r817, %r761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r822, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r824, %r822, %r772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r827, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r829, %r827, %r783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r832, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r834, %r832, %r794;
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r853, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r841, %r2630, -2004318072;
	// begin inline asm
	lop3.b32 %r839, %r708, %r841, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	// begin inline asm
	lop3.b32 %r850, %r719, %r841, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r855, %r853, %r854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r858, %r850, %r855;
	// end inline asm
	shr.u32 	%r863, %r841, 8;
	// begin inline asm
	lop3.b32 %r861, %r708, %r863, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r866, %r842, %r865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r869, %r861, %r866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r872, %r719, %r863, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r877, %r853, %r876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r880, %r872, %r877;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r887, %r2631, -2004318072;
	// begin inline asm
	lop3.b32 %r885, %r708, %r887, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	lop3.b32 %r896, %r719, %r887, %r899, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r901, %r899, %r900;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r904, %r896, %r901;
	// end inline asm
	shr.u32 	%r909, %r887, 8;
	// begin inline asm
	lop3.b32 %r907, %r708, %r909, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r912, %r888, %r911;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r915, %r907, %r912;
	// end inline asm
	// begin inline asm
	lop3.b32 %r918, %r719, %r909, %r899, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r923, %r899, %r922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r926, %r918, %r923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r929, %r203, %r847, %r799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r933, %r203, %r858, %r804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r937, %r203, %r869, %r809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r941, %r203, %r880, %r814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r945, %r203, %r893, %r819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r949, %r203, %r904, %r824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r953, %r203, %r915, %r829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r957, %r203, %r926, %r834;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r965, %r2632, -2004318072;
	// begin inline asm
	lop3.b32 %r963, %r708, %r965, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r974, %r719, %r965, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	shr.u32 	%r987, %r965, 8;
	// begin inline asm
	lop3.b32 %r985, %r708, %r987, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r966, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r996, %r719, %r987, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r977, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1011, %r2633, -2004318072;
	// begin inline asm
	lop3.b32 %r1009, %r708, %r1011, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r1012, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1020, %r719, %r1011, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	shr.u32 	%r1033, %r1011, 8;
	// begin inline asm
	lop3.b32 %r1031, %r708, %r1033, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1012, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1042, %r719, %r1033, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1023, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1053, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1055, %r1053, %r971, %r929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1059, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1061, %r1059, %r982, %r933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1065, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r1065, %r993, %r937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1071, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r1071, %r1004, %r941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1077, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1079, %r1077, %r1017, %r945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1083, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r1083, %r1028, %r949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1089, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r1089, %r1039, %r953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1095, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r1095, %r1050, %r957;
	// end inline asm
	// begin inline asm
	mov.b32 %r1106, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1117, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1105, %r2628, -2004318072;
	// begin inline asm
	lop3.b32 %r1103, %r708, %r1105, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1108, %r1106, %r1107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1111, %r1103, %r1108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1114, %r719, %r1105, %r1117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1118, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1117, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	shr.u32 	%r1127, %r1105, 8;
	// begin inline asm
	lop3.b32 %r1125, %r708, %r1127, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1129, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1130, %r1106, %r1129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1133, %r1125, %r1130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1136, %r719, %r1127, %r1117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1140, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1141, %r1117, %r1140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1144, %r1136, %r1141;
	// end inline asm
	// begin inline asm
	mov.b32 %r1152, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1151, %r2627, -2004318072;
	// begin inline asm
	lop3.b32 %r1149, %r708, %r1151, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1154, %r1152, %r1153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1157, %r1149, %r1154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1160, %r719, %r1151, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1165, %r1163, %r1164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1168, %r1160, %r1165;
	// end inline asm
	shr.u32 	%r1173, %r1151, 8;
	// begin inline asm
	lop3.b32 %r1171, %r708, %r1173, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1175, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1176, %r1152, %r1175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1179, %r1171, %r1176;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1182, %r719, %r1173, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1186, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1187, %r1163, %r1186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1190, %r1182, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r239, %r1111, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r239, %r1122, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r239, %r1133, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r239, %r1144, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1250, %r239, %r1157, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r239, %r1168, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r239, %r1179, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r239, %r1190, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r46, %r1232, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r46, %r1241, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r46, %r1250, %r1245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1252, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r1252, %r1256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r46, %r1259, %r1254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1261, %r47, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1264, %r46, %r1229, %r1261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1268, %r47, %r1241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1271, %r46, %r1238, %r1268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r47, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r46, %r1247, %r1275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1282, %r47, %r1259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r46, %r1256, %r1282;
	// end inline asm
	mov.u32 	%r1297, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1336, %r1333}, {%r67, %r69, %r68, %r70}, {%r1230, %r1264}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1345, %r1342}, {%r67, %r69, %r68, %r70}, {%r1239, %r1271}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1354, %r1351}, {%r67, %r69, %r68, %r70}, {%r1248, %r1278}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1360}, {%r67, %r69, %r68, %r70}, {%r1257, %r1285}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1329, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1331, %r1329, %r1333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1334, %r89, %r1336, %r1331;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1338, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r1338, %r1342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r89, %r1345, %r1340;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1347, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1349, %r1347, %r1351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r89, %r1354, %r1349;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1356, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1358, %r1356, %r1360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r89, %r1363, %r1358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r90, %r1336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r89, %r1333, %r1365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r90, %r1345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r89, %r1342, %r1372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r90, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r89, %r1351, %r1379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1386, %r90, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r89, %r1360, %r1386;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r420, %r426, %r423, %r429}, {%r1334, %r1368}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1404}, {%r420, %r426, %r423, %r429}, {%r1343, %r1375}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r420, %r426, %r423, %r429}, {%r1352, %r1382}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1423, %r1424}, {%r420, %r426, %r423, %r429}, {%r1361, %r1389}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r14, %r1393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r14, %r1394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r14, %r1403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r14, %r1404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r14, %r1413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r14, %r1414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r14, %r1423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r14, %r1424;
	// end inline asm
	mov.u16 	%rs111, -14592;
	// begin inline asm
	mov.b32 %r1457, {%rs111, %rs111};
	// end inline asm
	mov.u16 	%rs113, 18176;
	// begin inline asm
	mov.b32 %r1458, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1459, %r1433, %r1457;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1462, %r1459, %r1458;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1467, %r1436, %r1465;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1470, %r1467, %r1466;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1474, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1475, %r1439, %r1473;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1478, %r1475, %r1474;
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1483, %r1442, %r1481;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1486, %r1483, %r1482;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1491, %r1445, %r1489;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1494, %r1491, %r1490;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1499, %r1448, %r1497;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1502, %r1499, %r1498;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1507, %r1451, %r1505;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1510, %r1507, %r1506;
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1515, %r1454, %r1513;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1518, %r1515, %r1514;
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1524, %r1522;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1526, %r1462, %r1523;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1530, %r1524, %r1529;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1533, %r1470, %r1530;
	// end inline asm
	// begin inline asm
	mov.b32 %r1536, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1537, %r1524, %r1536;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1478, %r1537;
	// end inline asm
	// begin inline asm
	mov.b32 %r1543, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1544, %r1524, %r1543;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1547, %r1486, %r1544;
	// end inline asm
	mov.u32 	%r1553, 25152;
	// begin inline asm
	prmt.b32 %r1550, %r1526, %r1540, %r1553;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1554, %r1533, %r1547, %r1553;
	// end inline asm
	shl.b32 	%r1561, %r1554, 4;
	mov.u32 	%r1559, 252645135;
	// begin inline asm
	lop3.b32 %r1558, %r1559, %r1550, %r1561, 202;
	// end inline asm
	xor.b32  	%r2501, %r1558, -2004318072;
	// begin inline asm
	mov.b32 %r1565, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1565, %r1563;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1567, %r1494, %r1564;
	// end inline asm
	// begin inline asm
	mov.b32 %r1570, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1571, %r1565, %r1570;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1574, %r1502, %r1571;
	// end inline asm
	// begin inline asm
	mov.b32 %r1577, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1578, %r1565, %r1577;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1581, %r1510, %r1578;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1585, %r1565, %r1584;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1588, %r1518, %r1585;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1591, %r1567, %r1581, %r1553;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1595, %r1574, %r1588, %r1553;
	// end inline asm
	shl.b32 	%r1602, %r1595, 4;
	// begin inline asm
	lop3.b32 %r1599, %r1559, %r1591, %r1602, 202;
	// end inline asm
	xor.b32  	%r2502, %r1599, -2004318072;
	st.shared.u32 	[%rd214], %r2501;
	st.shared.u32 	[%rd215], %r2502;
	ld.shared.u32 	%r2634, [%rd212];
	ld.shared.u32 	%r2635, [%rd213];
	// begin inline asm
	mov.b32 %r1608, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1619, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1607, %r2634, -2004318072;
	// begin inline asm
	lop3.b32 %r1605, %r708, %r1607, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1608, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1616, %r719, %r1607, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1619, %r1620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1624, %r1616, %r1621;
	// end inline asm
	shr.u32 	%r1629, %r1607, 8;
	// begin inline asm
	lop3.b32 %r1627, %r708, %r1629, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1608, %r1631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1635, %r1627, %r1632;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1638, %r719, %r1629, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1642, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1643, %r1619, %r1642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1646, %r1638, %r1643;
	// end inline asm
	// begin inline asm
	mov.b32 %r1654, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1665, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1653, %r2635, -2004318072;
	// begin inline asm
	lop3.b32 %r1651, %r708, %r1653, %r1654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1655, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1656, %r1654, %r1655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1659, %r1651, %r1656;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1662, %r719, %r1653, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1666, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1667, %r1665, %r1666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1670, %r1662, %r1667;
	// end inline asm
	shr.u32 	%r1675, %r1653, 8;
	// begin inline asm
	lop3.b32 %r1673, %r708, %r1675, %r1654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1677, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1678, %r1654, %r1677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1681, %r1673, %r1678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1684, %r719, %r1675, %r1665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1688, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1689, %r1665, %r1688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1692, %r1684, %r1689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1613;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1702, %r1700, %r1624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1705, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r1705, %r1635;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1710, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r1710, %r1646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1715, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1715, %r1659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1720, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r1720, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r1730, %r1692;
	// end inline asm
	// begin inline asm
	mov.b32 %r1740, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1751, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1737, %r708, %r965, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1741, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1742, %r1740, %r1741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1745, %r1737, %r1742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1748, %r719, %r965, %r1751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1752, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1753, %r1751, %r1752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1756, %r1748, %r1753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1759, %r708, %r987, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1763, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1764, %r1740, %r1763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1767, %r1759, %r1764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1770, %r719, %r987, %r1751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1774, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1775, %r1751, %r1774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1778, %r1770, %r1775;
	// end inline asm
	// begin inline asm
	mov.b32 %r1786, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1797, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1783, %r708, %r1011, %r1786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1787, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1788, %r1786, %r1787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1791, %r1783, %r1788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1794, %r719, %r1011, %r1797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1798, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1799, %r1797, %r1798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1802, %r1794, %r1799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1805, %r708, %r1033, %r1786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1809, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1810, %r1786, %r1809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1813, %r1805, %r1810;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1816, %r719, %r1033, %r1797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1820, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1821, %r1797, %r1820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1824, %r1816, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r203, %r1745, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r203, %r1756, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r203, %r1767, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r203, %r1778, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r203, %r1791, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r203, %r1802, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r203, %r1813, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r203, %r1824, %r1732;
	// end inline asm
	// begin inline asm
	mov.b32 %r1864, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1861, %r708, %r1105, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1865, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1866, %r1864, %r1865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1869, %r1861, %r1866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1872, %r719, %r1105, %r1875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1876, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1877, %r1875, %r1876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1880, %r1872, %r1877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1883, %r708, %r1127, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1887, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1888, %r1864, %r1887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1891, %r1883, %r1888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1894, %r719, %r1127, %r1875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1898, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1899, %r1875, %r1898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1902, %r1894, %r1899;
	// end inline asm
	// begin inline asm
	mov.b32 %r1910, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1921, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1907, %r708, %r1151, %r1910, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1911, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1912, %r1910, %r1911;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1915, %r1907, %r1912;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1918, %r719, %r1151, %r1921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1922, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1923, %r1921, %r1922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1926, %r1918, %r1923;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1929, %r708, %r1173, %r1910, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1934, %r1910, %r1933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1937, %r1929, %r1934;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1940, %r719, %r1173, %r1921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1944, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1945, %r1921, %r1944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1948, %r1940, %r1945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r1951, %r1869, %r1827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1957, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r1957, %r1880, %r1831;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1963, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1963, %r1891, %r1835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r1969, %r1902, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1975, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1975, %r1915, %r1843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1981, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1981, %r1926, %r1847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1987, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1987, %r1937, %r1851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1993, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1993, %r1948, %r1855;
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2001, %r708, %r709, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2006, %r2004, %r2005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2009, %r2001, %r2006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2012, %r719, %r709, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r2015, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2023, %r708, %r731, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2004, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2034, %r719, %r731, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2038, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2039, %r2015, %r2038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2042, %r2034, %r2039;
	// end inline asm
	// begin inline asm
	mov.b32 %r2050, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2061, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2047, %r708, %r755, %r2050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2051, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2052, %r2050, %r2051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2055, %r2047, %r2052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2058, %r719, %r755, %r2061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2063, %r2061, %r2062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2066, %r2058, %r2063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2069, %r708, %r777, %r2050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2074, %r2050, %r2073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2077, %r2069, %r2074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2080, %r719, %r777, %r2061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2084, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2085, %r2061, %r2084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2088, %r2080, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r239, %r2009, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r239, %r2020, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2139, %r239, %r2031, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r239, %r2042, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r239, %r2055, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r239, %r2066, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r239, %r2077, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r239, %r2088, %r1995;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2123, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2123, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r46, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2132, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r2132, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r46, %r2139, %r2134;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2141, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r2141, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r46, %r2148, %r2143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2150, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r2150, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r46, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r47, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r46, %r2127, %r2159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r47, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r46, %r2136, %r2166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2173, %r47, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r46, %r2145, %r2173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r47, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r46, %r2154, %r2180;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r67, %r69, %r68, %r70}, {%r2128, %r2162}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r67, %r69, %r68, %r70}, {%r2137, %r2169}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2252, %r2249}, {%r67, %r69, %r68, %r70}, {%r2146, %r2176}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2261, %r2258}, {%r67, %r69, %r68, %r70}, {%r2155, %r2183}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r89, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r89, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2245, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r2245, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r89, %r2252, %r2247;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2254, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r2254, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r89, %r2261, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r90, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r89, %r2231, %r2263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r90, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2273, %r89, %r2240, %r2270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r90, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2280, %r89, %r2249, %r2277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r90, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r89, %r2258, %r2284;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2291, %r2292}, {%r420, %r426, %r423, %r429}, {%r2232, %r2266}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2301, %r2302}, {%r420, %r426, %r423, %r429}, {%r2241, %r2273}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2311, %r2312}, {%r420, %r426, %r423, %r429}, {%r2250, %r2280}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2321, %r2322}, {%r420, %r426, %r423, %r429}, {%r2259, %r2287}, {%r1297, %r1297};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r14, %r2291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r14, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2337, %r14, %r2301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2340, %r14, %r2302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r14, %r2311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2346, %r14, %r2312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2349, %r14, %r2321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r14, %r2322;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2357, %r2331, %r2355;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2360, %r2357, %r2356;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2365, %r2334, %r2363;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2368, %r2365, %r2364;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2373, %r2337, %r2371;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2376, %r2373, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2381, %r2340, %r2379;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2384, %r2381, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2389, %r2343, %r2387;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2392, %r2389, %r2388;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2397, %r2346, %r2395;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2400, %r2397, %r2396;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2405, %r2349, %r2403;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2408, %r2405, %r2404;
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2413, %r2352, %r2411;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2416, %r2413, %r2412;
	// end inline asm
	// begin inline asm
	mov.b32 %r2422, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2420, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2421, %r2422, %r2420;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2360, %r2421;
	// end inline asm
	// begin inline asm
	mov.b32 %r2427, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2428, %r2422, %r2427;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2368, %r2428;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2422, %r2434;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2438, %r2376, %r2435;
	// end inline asm
	// begin inline asm
	mov.b32 %r2441, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2442, %r2422, %r2441;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2445, %r2384, %r2442;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2424, %r2438, %r1553;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2452, %r2431, %r2445, %r1553;
	// end inline asm
	shl.b32 	%r2459, %r2452, 4;
	// begin inline asm
	lop3.b32 %r2456, %r1559, %r2448, %r2459, 202;
	// end inline asm
	xor.b32  	%r2503, %r2456, -2004318072;
	// begin inline asm
	mov.b32 %r2463, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2462, %r2463, %r2461;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2465, %r2392, %r2462;
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2469, %r2463, %r2468;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2472, %r2400, %r2469;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2463, %r2475;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2479, %r2408, %r2476;
	// end inline asm
	// begin inline asm
	mov.b32 %r2482, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2483, %r2463, %r2482;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2416, %r2483;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2489, %r2465, %r2479, %r1553;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2493, %r2472, %r2486, %r1553;
	// end inline asm
	shl.b32 	%r2500, %r2493, 4;
	// begin inline asm
	lop3.b32 %r2497, %r1559, %r2489, %r2500, 202;
	// end inline asm
	xor.b32  	%r2504, %r2497, -2004318072;
	st.shared.u32 	[%rd214], %r2503;
	st.shared.u32 	[%rd215], %r2504;
	add.s32 	%r2629, %r2629, -32;
	add.s64 	%rd215, %rd215, 4228;
	add.s64 	%rd214, %rd214, 4228;
	add.s64 	%rd213, %rd213, 4228;
	add.s64 	%rd212, %rd212, 4228;
	setp.eq.s32 	%p244, %r2629, 0;
	mov.u32 	%r2630, %r2628;
	mov.u32 	%r2631, %r2627;
	mov.u32 	%r2632, %r2626;
	mov.u32 	%r2633, %r2625;
	@%p244 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass9290
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2510, [%rd54];
	ld.shared.u32 	%r2511, [%rd55+128];
	ld.shared.u32 	%r2518, [%rd55+4];
	ld.shared.u32 	%r2519, [%rd55+132];
	ld.shared.u32 	%r2526, [%rd56];
	ld.shared.u32 	%r2527, [%rd57+128];
	ld.shared.u32 	%r2534, [%rd57+4];
	ld.shared.u32 	%r2535, [%rd57+132];
	ld.shared.u32 	%r2542, [%rd58];
	ld.shared.u32 	%r2543, [%rd59+128];
	ld.shared.u32 	%r2550, [%rd59+4];
	ld.shared.u32 	%r2551, [%rd59+132];
	ld.shared.u32 	%r2558, [%rd60];
	ld.shared.u32 	%r2559, [%rd61+128];
	ld.shared.u32 	%r2566, [%rd61+4];
	ld.shared.u32 	%r2567, [%rd61+132];
	// begin inline asm
	prmt.b32 %r2505, %r2510, %r2511, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2509, %r2510, %r2511, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2513, %r2518, %r2519, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2517, %r2518, %r2519, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2521, %r2526, %r2527, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2525, %r2526, %r2527, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2529, %r2534, %r2535, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2533, %r2534, %r2535, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2537, %r2542, %r2543, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2541, %r2542, %r2543, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2545, %r2550, %r2551, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2549, %r2550, %r2551, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2553, %r2558, %r2559, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2557, %r2558, %r2559, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2561, %r2566, %r2567, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2565, %r2566, %r2567, %r626;
	// end inline asm
	selp.b32 	%r2569, %r2509, %r2505, %p231;
	shfl.sync.bfly.b32	%r2570, %r2569, 8, 31, -1;
	selp.b32 	%r2571, %r2517, %r2513, %p231;
	shfl.sync.bfly.b32	%r2572, %r2571, 8, 31, -1;
	selp.b32 	%r2573, %r2525, %r2521, %p231;
	shfl.sync.bfly.b32	%r154, %r2573, 8, 31, -1;
	selp.b32 	%r2574, %r2533, %r2529, %p231;
	shfl.sync.bfly.b32	%r155, %r2574, 8, 31, -1;
	selp.b32 	%r2575, %r2541, %r2537, %p231;
	shfl.sync.bfly.b32	%r2576, %r2575, 8, 31, -1;
	selp.b32 	%r156, %r2537, %r2576, %p231;
	selp.b32 	%r157, %r2576, %r2541, %p231;
	selp.b32 	%r2577, %r2549, %r2545, %p231;
	shfl.sync.bfly.b32	%r2578, %r2577, 8, 31, -1;
	selp.b32 	%r158, %r2545, %r2578, %p231;
	selp.b32 	%r159, %r2578, %r2549, %p231;
	selp.b32 	%r2579, %r2557, %r2553, %p231;
	shfl.sync.bfly.b32	%r2580, %r2579, 8, 31, -1;
	selp.b32 	%r160, %r2553, %r2580, %p231;
	selp.b32 	%r161, %r2580, %r2557, %p231;
	selp.b32 	%r2581, %r2565, %r2561, %p231;
	shfl.sync.bfly.b32	%r2582, %r2581, 8, 31, -1;
	selp.b32 	%r162, %r2561, %r2582, %p231;
	selp.b32 	%r163, %r2582, %r2565, %p231;
	shl.b32 	%r2640, %r93, 12;
	@%p245 bra 	LBB0_129;
	bra.uni 	LBB0_130;
LBB0_129:                               // %L26113
                                        //   in Loop: Header=BB0_126 Depth=1
	selp.b32 	%r2583, %r155, %r2533, %p231;
	selp.b32 	%r2584, %r2529, %r155, %p231;
	selp.b32 	%r2585, %r154, %r2525, %p231;
	selp.b32 	%r2586, %r2521, %r154, %p231;
	or.b32  	%r2587, %r2640, %r134;
	or.b32  	%r2588, %r2587, %r133;
	or.b32  	%r2589, %r2588, %r135;
	or.b32  	%r2590, %r2589, %r146;
	or.b32  	%r2591, %r2590, 262144;
	add.s32 	%r2592, %r2591, %r147;
	cvt.u64.u32 	%rd164, %r2592;
	add.s64 	%rd165, %rd164, %rd53;
	shr.u64 	%rd166, %rd165, 35;
	add.s64 	%rd167, %rd165, %rd166;
	shr.s64 	%rd168, %rd167, 29;
	and.b64  	%rd169, %rd167, -536870912;
	setp.ne.s64 	%p248, %rd169, %rd165;
	setp.lt.s64 	%p249, %rd165, 0;
	and.pred  	%p250, %p249, %p248;
	selp.u64 	%rd170, 1, 0, %p250;
	sub.s64 	%rd171, %rd170, %rd168;
	shl.b64 	%rd172, %rd171, 29;
	add.s64 	%rd173, %rd172, %rd165;
	shl.b64 	%rd174, %rd173, 2;
	add.s64 	%rd175, %rd3, %rd174;
	st.global.v4.u32 	[%rd175], {%r2586, %r2584, %r2585, %r2583};
	bra.uni 	LBB0_130;
LBB0_131:                               // %L26893
	st.global.u32 	[%rd4], %r2608;
	ret;
LBB0_7:                                 // %L273
	mov.u32 	%r2607, 2;
	st.global.u32 	[%rd4], %r2607;
	mov.u64 	%rd200, exception2068;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd87, exception1;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_134:                               // %L27004
	mov.u64 	%rd95, exception1;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_133:                               // %L27001
	mov.u64 	%rd100, exception1;
	cvta.global.u64 	%rd101, %rd100;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd101;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L26998
	mov.u64 	%rd111, exception1;
	cvta.global.u64 	%rd112, %rd111;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd112;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r165;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
