// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_8502
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2068[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2632>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<211>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r161, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd66, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r162, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r162, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd83, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd67, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r163, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r164, %r163, %r4;
	or.b32  	%r165, %r164, %r2;
	mul.wide.u32 	%rd89, %r165, 4;
	add.s64 	%rd4, %rd83, %rd89;
	mov.u32 	%r166, 1;
	st.global.u32 	[%rd4], %r166;
	ld.global.u32 	%r5, [%rd67];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L205
	ld.param.u64 	%rd71, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd71];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L215
	ld.param.u64 	%rd75, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd75];
	sub.s32 	%r167, %r6, %r5;
	and.b32  	%r168, %r167, 255;
	setp.ne.s32 	%p6, %r168, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L221
	ld.param.u64 	%rd79, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd79];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L231
	sub.s32 	%r169, %r8, %r7;
	add.s32 	%r170, %r169, 3;
	and.b32  	%r171, %r170, 7;
	setp.eq.s32 	%p12, %r171, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L341
	bfe.u32 	%r17, %r4, 1, 1;
	and.b32  	%r18, %r4, 1;
	bfe.u32 	%r19, %r4, 2, 1;
	shl.b32 	%r177, %r19, 1;
	shl.b32 	%r178, %r18, 2;
	shl.b32 	%r179, %r17, 3;
	or.b32  	%r180, %r178, %r179;
	or.b32  	%r181, %r177, %r180;
	shr.u32 	%r20, %r4, 4;
	or.b32  	%r21, %r20, %r181;
	or.b32  	%r22, %r21, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r21;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r182, %f193;
	and.b32  	%r183, %r182, -2147483648;
	or.b32  	%r184, %r183, 1056964608;
	mov.b32 	%f194, %r184;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L552
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L555
	cvt.rzi.s32.f32 	%r185, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r22;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r189, %f227;
	and.b32  	%r190, %r189, -2147483648;
	or.b32  	%r191, %r190, 1056964608;
	mov.b32 	%f228, %r191;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r192, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L572
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L575
	add.s32 	%r186, %r185, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r199, %r21, 32;
	or.b32  	%r24, %r21, 48;
	cvt.rn.f32.s32 	%f255, %r199;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r200, %f262;
	and.b32  	%r201, %r200, -2147483648;
	or.b32  	%r202, %r201, 1056964608;
	mov.b32 	%f263, %r202;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r203, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r204, %r203, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L654
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L657
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r187, %r186, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r205, %r204, 1;
	cvt.rn.f32.s32 	%f289, %r24;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r207, %f296;
	and.b32  	%r208, %r207, -2147483648;
	or.b32  	%r209, %r208, 1056964608;
	mov.b32 	%f297, %r209;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r210, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r211, %r210, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r212, %r211, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L674
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L677
	shl.b32 	%r172, %r3, 2;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r187, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r194, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r205, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r212, 1;
	or.b32  	%r217, %r21, 64;
	or.b32  	%r26, %r21, 80;
	cvt.rn.f32.s32 	%f324, %r217;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r218, %f331;
	and.b32  	%r219, %r218, -2147483648;
	or.b32  	%r220, %r219, 1056964608;
	mov.b32 	%f332, %r220;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r221, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r222, %r221, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r223, %r222, 1;
	setp.eq.b32 	%p40, %r223, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L756
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L759
	shl.b32 	%r9, %r4, 1;
	and.b32  	%r11, %r172, 480;
	and.b32  	%r14, %r4, 18;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r188, %r186, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r195, %r193, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r206, %r204, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r213, %r211, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r224, %r222, 2;
	cvt.rn.f32.s32 	%f358, %r26;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r225, %f365;
	and.b32  	%r226, %r225, -2147483648;
	or.b32  	%r227, %r226, 1056964608;
	mov.b32 	%f366, %r227;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r228, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r229, %r228, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r230, %r229, 1;
	setp.eq.b32 	%p46, %r230, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r231, %r229, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L776
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L779
	and.b32  	%r10, %r9, 8;
	shl.b32 	%r12, %r4, 2;
	or.b32  	%r173, %r14, %r11;
	setp.eq.s32 	%p17, %r188, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r195, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r206, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r213, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r224, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r231, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r235, %r21, 96;
	or.b32  	%r28, %r21, 112;
	cvt.rn.f32.s32 	%f393, %r235;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r236, %f400;
	and.b32  	%r237, %r236, -2147483648;
	or.b32  	%r238, %r237, 1056964608;
	mov.b32 	%f401, %r238;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r239, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r240, %r239, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r241, %r240, 1;
	setp.eq.b32 	%p52, %r241, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r242, %r240, 2;
	setp.eq.s32 	%p53, %r242, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L858
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L861
	and.b32  	%r13, %r12, 4;
	or.b32  	%r174, %r173, %r10;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r28;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r243, %f434;
	and.b32  	%r244, %r243, -2147483648;
	or.b32  	%r245, %r244, 1056964608;
	mov.b32 	%f435, %r245;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r246, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r247, %r246, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r248, %r247, 1;
	setp.eq.b32 	%p58, %r248, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r249, %r247, 2;
	setp.eq.s32 	%p59, %r249, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L878
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L881
	or.b32  	%r175, %r174, %r13;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r30, %r21, 31;
	cvt.rn.f32.s32 	%f461, %r30;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r32, %f899;
	and.b32  	%r253, %r32, 8388607;
	or.b32  	%r2601, %r253, 1065353216;
	mov.b32 	%f898, %r2601;
	add.s32 	%r254, %r32, -1073741824;
	and.b32  	%r2602, %r254, -8388608;
	setp.eq.s32 	%p68, %r2602, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r255, %r2602, 192937984;
	add.s32 	%r256, %r255, %r2601;
	mov.b32 	%f473, %r256;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2602, %r2602, %r255;
	mov.b32 	%r2601, %f898;
	setp.ne.s32 	%p69, %r2602, 0;
	setp.ne.s32 	%p70, %r2601, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r32, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f41, %f897, 0fC0000000, %f899;
	mov.b32 	%r31, %f41;
	setp.lt.u32 	%p63, %r31, 1073741824;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r31, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r176, %r175, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r257, %f38;
	and.b32  	%r258, %r257, -2147483648;
	mov.b32 	%r259, %f899;
	or.b32  	%r260, %r258, %r259;
	mov.b32 	%f899, %r260;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd90, %r176, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r261, %f483;
	and.b32  	%r262, %r261, -2147483648;
	or.b32  	%r263, %r262, 1056964608;
	mov.b32 	%f484, %r263;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r264, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r265, %r264, 1;
	setp.eq.b32 	%p76, %r265, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r266, %r264, 2;
	setp.eq.s32 	%p77, %r266, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r267, %r264, 1;
	and.b32  	%r268, %r267, 2;
	setp.eq.s32 	%p78, %r268, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r269, %r30, 496;
	cvt.rn.f32.s32 	%f513, %r269;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r40, %f903;
	and.b32  	%r270, %r40, 8388607;
	or.b32  	%r2603, %r270, 1065353216;
	mov.b32 	%f902, %r2603;
	add.s32 	%r271, %r40, -1073741824;
	and.b32  	%r2604, %r271, -8388608;
	setp.eq.s32 	%p88, %r2604, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i968.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %__nv_fmaf_rn.exit4.i.i.i968
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r272, %r2604, 192937984;
	add.s32 	%r273, %r272, %r2603;
	mov.b32 	%f525, %r273;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2604, %r2604, %r272;
	mov.b32 	%r2603, %f902;
	setp.ne.s32 	%p89, %r2604, 0;
	setp.ne.s32 	%p90, %r2603, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i970
	setp.gt.u32 	%p92, %r40, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i940
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f60, %f901, 0fC0000000, %f903;
	mov.b32 	%r39, %f60;
	setp.lt.u32 	%p83, %r39, 1073741824;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r39, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i945
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i949
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i974
	add.s64 	%rd91, %rd1, %rd90;
	mov.b32 	%r198, %f254;
	mov.b32 	%r197, %f6;
	mov.b32 	%r216, %f323;
	mov.b32 	%r215, %f15;
	mov.b32 	%r234, %f392;
	mov.b32 	%r233, %f24;
	mov.b32 	%r252, %f460;
	mov.b32 	%r251, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r274, %f57;
	and.b32  	%r275, %r274, -2147483648;
	mov.b32 	%r276, %f903;
	or.b32  	%r277, %r275, %r276;
	mov.b32 	%f903, %r277;
LBB0_52:                                // %__nv_fmodf.exit975
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r15, [%rd91];
	shr.u32 	%r16, %r4, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r196, %r198, %r197;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r214, %r216, %r215;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r232, %r234, %r233;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r250, %r252, %r251;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r284, %f535;
	and.b32  	%r285, %r284, -2147483648;
	or.b32  	%r286, %r285, 1056964608;
	mov.b32 	%f536, %r286;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r287, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r288, %r287, 1;
	setp.eq.b32 	%p96, %r288, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r289, %r287, 2;
	setp.eq.s32 	%p97, %r289, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r290, %r287, 1;
	and.b32  	%r291, %r290, 2;
	setp.eq.s32 	%p98, %r291, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r280, %f566;
	mov.b32 	%r279, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r280, %r279;
	// end inline asm
	mov.b32 	%r283, %f563;
	mov.b32 	%r282, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r48, %r283, %r282;
	// end inline asm
	mov.u64 	%rd197, 2;
	mov.u64 	%rd198, %rd197;
LBB0_53:                                // %L993.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd198, %rd198, %rd198;
	add.s64 	%rd197, %rd197, -1;
	setp.ne.s64 	%p101, %rd197, 0;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L995
	and.b64  	%rd93, %rd198, 9223372036854775807;
	setp.ne.s64 	%p102, %rd93, 16;
	@%p102 bra 	LBB0_134;
// %bb.55:                              // %L1002
	shr.u32 	%r49, %r4, 3;
	and.b32  	%r292, %r49, 2;
	or.b32  	%r50, %r19, %r292;
	and.b32  	%r293, %r16, 4;
	or.b32  	%r51, %r50, %r293;
	and.b32  	%r294, %r4, 3;
	mul.lo.s32 	%r295, %r294, %r51;
	shl.b32 	%r296, %r295, 1;
	neg.s32 	%r297, %r296;
	cvt.rn.f32.s32 	%f567, %r297;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r53, %f907;
	and.b32  	%r298, %r53, 8388607;
	or.b32  	%r2605, %r298, 1065353216;
	mov.b32 	%f906, %r2605;
	add.s32 	%r299, %r53, -1073741824;
	and.b32  	%r2606, %r299, -8388608;
	setp.eq.s32 	%p110, %r2606, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1014.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %__nv_fmaf_rn.exit4.i.i.i1014
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r2606, 192937984;
	add.s32 	%r301, %r300, %r2605;
	mov.b32 	%f579, %r301;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2606, %r2606, %r300;
	mov.b32 	%r2605, %f906;
	setp.ne.s32 	%p111, %r2606, 0;
	setp.ne.s32 	%p112, %r2605, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i1016
	setp.gt.u32 	%p114, %r53, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i986
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f77, %f905, 0fC0000000, %f907;
	mov.b32 	%r52, %f77;
	setp.lt.u32 	%p105, %r52, 1073741824;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r52, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p109;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i991
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p108;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i995
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i1020
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r302, %f74;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f907;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f907, %r305;
LBB0_69:                                // %__nv_fmodf.exit1021
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r306, %f589;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f590, %r308;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r309, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r310, %r309, 1;
	setp.eq.b32 	%p118, %r310, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p119, %r311, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r312, %r309, 1;
	and.b32  	%r313, %r312, 2;
	setp.eq.s32 	%p120, %r313, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r314, %r9, 6;
	mov.u32 	%r315, -8;
	sub.s32 	%r316, %r315, %r314;
	mul.lo.s32 	%r317, %r51, %r316;
	cvt.rn.f32.s32 	%f619, %r317;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r61, %f911;
	and.b32  	%r318, %r61, 8388607;
	or.b32  	%r2607, %r318, 1065353216;
	mov.b32 	%f910, %r2607;
	add.s32 	%r319, %r61, -1073741824;
	and.b32  	%r2608, %r319, -8388608;
	setp.eq.s32 	%p130, %r2608, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i1060.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %__nv_fmaf_rn.exit4.i.i.i1060
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r320, %r2608, 192937984;
	add.s32 	%r321, %r320, %r2607;
	mov.b32 	%f631, %r321;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2608, %r2608, %r320;
	mov.b32 	%r2607, %f910;
	setp.ne.s32 	%p131, %r2608, 0;
	setp.ne.s32 	%p132, %r2607, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i1062
	setp.gt.u32 	%p134, %r61, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i1032
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f96, %f909, 0fC0000000, %f911;
	mov.b32 	%r60, %f96;
	setp.lt.u32 	%p125, %r60, 1073741824;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r60, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p129;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i1037
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p128;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i1041
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i1066
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r322, %f93;
	and.b32  	%r323, %r322, -2147483648;
	mov.b32 	%r324, %f911;
	or.b32  	%r325, %r323, %r324;
	mov.b32 	%f911, %r325;
LBB0_83:                                // %__nv_fmodf.exit1067
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r338, %f641;
	and.b32  	%r339, %r338, -2147483648;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%f642, %r340;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r341, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r342, %r341, 1;
	setp.eq.b32 	%p138, %r342, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r343, %r341, 2;
	setp.eq.s32 	%p139, %r343, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r344, %r341, 1;
	and.b32  	%r345, %r344, 2;
	setp.eq.s32 	%p140, %r345, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r328, %f672;
	mov.b32 	%r327, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r68, %r328, %r327;
	// end inline asm
	mov.b32 	%r334, %f669;
	xor.b32  	%r331, %r334, -2147483648;
	mov.b32 	%r333, %f91;
	xor.b32  	%r330, %r333, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r71, %r328, %r327;
	// end inline asm
	mov.u64 	%rd199, 2;
	mov.u64 	%rd200, %rd199;
LBB0_84:                                // %L1174.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd200, %rd200, %rd200;
	add.s64 	%rd199, %rd199, -1;
	setp.ne.s64 	%p143, %rd199, 0;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1176
	and.b64  	%rd97, %rd200, 9223372036854775807;
	setp.ne.s64 	%p144, %rd97, 16;
	@%p144 bra 	LBB0_133;
// %bb.86:                              // %L1183
	shl.b32 	%r346, %r17, 1;
	neg.s32 	%r72, %r346;
	mov.u64 	%rd201, 2;
	mov.u64 	%rd202, %rd201;
LBB0_87:                                // %L1246.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd202, %rd202, %rd202;
	add.s64 	%rd201, %rd201, -1;
	setp.ne.s64 	%p145, %rd201, 0;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1248
	mul.lo.s32 	%r73, %r72, %r51;
	cvt.rn.f32.s32 	%f673, %r73;
	shl.b64 	%rd101, %rd202, 1;
	cvt.rn.f32.s64 	%f674, %rd101;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r75, %f915;
	and.b32  	%r347, %r75, 8388607;
	or.b32  	%r2609, %r347, 1065353216;
	mov.b32 	%f914, %r2609;
	add.s32 	%r348, %r75, -1073741824;
	and.b32  	%r2610, %r348, -8388608;
	setp.eq.s32 	%p153, %r2610, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i1106.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %__nv_fmaf_rn.exit4.i.i.i1106
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r2610, 192937984;
	add.s32 	%r350, %r349, %r2609;
	mov.b32 	%f685, %r350;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2610, %r2610, %r349;
	mov.b32 	%r2609, %f914;
	setp.ne.s32 	%p154, %r2610, 0;
	setp.ne.s32 	%p155, %r2609, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1108
	setp.gt.u32 	%p157, %r75, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1078
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f113, %f913, 0fC0000000, %f915;
	mov.b32 	%r74, %f113;
	setp.lt.u32 	%p148, %r74, 1073741824;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r74, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p152;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1083
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p151;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1087
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1112
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r351, %f110;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f915;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f915, %r354;
LBB0_102:                               // %__nv_fmodf.exit1113
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r355, %f695;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f696, %r357;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r358, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p161, %r359, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p162, %r360, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p163, %r362, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd203, 2;
	mov.u64 	%rd204, %rd203;
LBB0_103:                               // %L1287.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd204, %rd204, %rd204;
	add.s64 	%rd203, %rd203, -1;
	setp.ne.s64 	%p166, %rd203, 0;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1289
	shl.b32 	%r363, %r51, 2;
	sub.s32 	%r364, %r73, %r363;
	cvt.rn.f32.s32 	%f725, %r364;
	shl.b64 	%rd103, %rd204, 1;
	cvt.rn.f32.s64 	%f726, %rd103;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r83, %f919;
	and.b32  	%r365, %r83, 8388607;
	or.b32  	%r2611, %r365, 1065353216;
	mov.b32 	%f918, %r2611;
	add.s32 	%r366, %r83, -1073741824;
	and.b32  	%r2612, %r366, -8388608;
	setp.eq.s32 	%p174, %r2612, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %__nv_fmaf_rn.exit4.i.i.i1152.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %__nv_fmaf_rn.exit4.i.i.i1152
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r2612, 192937984;
	add.s32 	%r368, %r367, %r2611;
	mov.b32 	%f737, %r368;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2612, %r2612, %r367;
	mov.b32 	%r2611, %f918;
	setp.ne.s32 	%p175, %r2612, 0;
	setp.ne.s32 	%p176, %r2611, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1154
	setp.gt.u32 	%p178, %r83, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1124
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f132, %f917, 0fC0000000, %f919;
	mov.b32 	%r82, %f132;
	setp.lt.u32 	%p169, %r82, 1073741824;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r82, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p173;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p172;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1133
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1158
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r369, %f129;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f919;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f919, %r372;
LBB0_118:                               // %__nv_fmodf.exit1159
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r379, %f747;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f748, %r381;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r382, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p182, %r383, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r384, %r382, 2;
	setp.eq.s32 	%p183, %r384, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r385, %r382, 1;
	and.b32  	%r386, %r385, 2;
	setp.eq.s32 	%p184, %r386, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r375, %f778;
	mov.b32 	%r374, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r375, %r374;
	// end inline asm
	mov.b32 	%r378, %f775;
	mov.b32 	%r377, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r91, %r378, %r377;
	// end inline asm
	mov.u64 	%rd205, 2;
	mov.u64 	%rd206, %rd205;
LBB0_119:                               // %L1330.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd206, %rd206, %rd206;
	add.s64 	%rd205, %rd205, -1;
	setp.ne.s64 	%p187, %rd205, 0;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1332
	and.b64  	%rd105, %rd206, 9223372036854775807;
	setp.ne.s64 	%p188, %rd105, 16;
	@%p188 bra 	LBB0_132;
// %bb.121:                             // %L1339
	mul.lo.s32 	%r93, %r72, %r50;
	cvt.rn.f32.s32 	%f779, %r93;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_142;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_138;
	bra.uni 	LBB0_123;
LBB0_138:
	mov.b32 	%r115, %f923;
	and.b32  	%r387, %r115, 8388607;
	or.b32  	%r2627, %r387, 1065353216;
	mov.b32 	%f922, %r2627;
	add.s32 	%r388, %r115, -1073741824;
	and.b32  	%r2628, %r388, -8388608;
	setp.eq.s32 	%p196, %r2628, 0;
	@%p196 bra 	LBB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1198.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_140:                               // %__nv_fmaf_rn.exit4.i.i.i1198
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r2628, 192937984;
	add.s32 	%r390, %r389, %r2627;
	mov.b32 	%f791, %r390;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2628, %r2628, %r389;
	mov.b32 	%r2627, %f922;
	setp.ne.s32 	%p197, %r2628, 0;
	setp.ne.s32 	%p198, %r2627, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_140;
LBB0_141:                               // %__internal_fmodf_slowpath_mod.exit.i.i1200
	setp.gt.u32 	%p200, %r115, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_142;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1170
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f782;
	fma.rn.f32 	%f149, %f921, 0fC0000000, %f923;
	mov.b32 	%r114, %f149;
	setp.lt.u32 	%p191, %r114, 1073741824;
	@%p191 bra 	LBB0_137;
// %bb.124:
	setp.lt.u32 	%p192, %r114, -2147483647;
	@%p192 bra 	LBB0_135;
// %bb.125:
	add.f32 	%f787, %f921, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f921, %f788, %f787, %p195;
	bra.uni 	LBB0_137;
LBB0_135:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1175
	add.f32 	%f783, %f921, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f921, %f786, %f783, %p194;
LBB0_137:                               // %__internal_fmodf_fastpath_quot.exit.i.i1179
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_142:                               // %__internal_fmodf_kernel.exit.i1204
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_144;
// %bb.143:
	mov.b32 	%r391, %f146;
	and.b32  	%r392, %r391, -2147483648;
	mov.b32 	%r393, %f923;
	or.b32  	%r394, %r392, %r393;
	mov.b32 	%f923, %r394;
LBB0_144:                               // %__nv_fmodf.exit1205
	shl.b32 	%r403, %r50, 2;
	sub.s32 	%r404, %r93, %r403;
	cvt.rn.f32.s32 	%f833, %r404;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_156;
// %bb.145:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_152;
	bra.uni 	LBB0_146;
LBB0_152:
	mov.b32 	%r123, %f927;
	and.b32  	%r405, %r123, 8388607;
	or.b32  	%r2629, %r405, 1065353216;
	mov.b32 	%f926, %r2629;
	add.s32 	%r406, %r123, -1073741824;
	and.b32  	%r2630, %r406, -8388608;
	setp.eq.s32 	%p217, %r2630, 0;
	@%p217 bra 	LBB0_155;
// %bb.153:                             // %__nv_fmaf_rn.exit4.i.i.i1244.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_154:                               // %__nv_fmaf_rn.exit4.i.i.i1244
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r2630, 192937984;
	add.s32 	%r408, %r407, %r2629;
	mov.b32 	%f845, %r408;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2630, %r2630, %r407;
	mov.b32 	%r2629, %f926;
	setp.ne.s32 	%p218, %r2630, 0;
	setp.ne.s32 	%p219, %r2629, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_154;
LBB0_155:                               // %__internal_fmodf_slowpath_mod.exit.i.i1246
	setp.gt.u32 	%p221, %r123, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_156;
LBB0_146:                               // %__nv_fast_fdividef.exit.i.i.i1216
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f836;
	fma.rn.f32 	%f169, %f925, 0fC0000000, %f927;
	mov.b32 	%r122, %f169;
	setp.lt.u32 	%p212, %r122, 1073741824;
	@%p212 bra 	LBB0_151;
// %bb.147:
	setp.lt.u32 	%p213, %r122, -2147483647;
	@%p213 bra 	LBB0_149;
// %bb.148:
	add.f32 	%f841, %f925, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f925, %f842, %f841, %p216;
	bra.uni 	LBB0_151;
LBB0_149:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_151;
// %bb.150:                             // %__nv_fmaf_rn.exit.i.i.i1221
	add.f32 	%f837, %f925, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f925, %f840, %f837, %p215;
LBB0_151:                               // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_156:                               // %__internal_fmodf_kernel.exit.i1250
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_158;
// %bb.157:
	mov.b32 	%r409, %f166;
	and.b32  	%r410, %r409, -2147483648;
	mov.b32 	%r411, %f927;
	or.b32  	%r412, %r410, %r411;
	mov.b32 	%f927, %r412;
LBB0_158:                               // %__nv_fmodf.exit1251
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2599, 0;
	@%p230 bra 	LBB0_131;
// %bb.159:                             // %L1454.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r395, %f801;
	and.b32  	%r396, %r395, -2147483648;
	or.b32  	%r397, %r396, 1056964608;
	mov.b32 	%f802, %r397;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r398, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r399, %r398, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r399, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r400, %r398, 2;
	setp.eq.s32 	%p206, %r400, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r92, %r49, 1;
	setp.eq.s32 	%p207, %r402, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r92, %r18;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r425, %f855;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f856, %r427;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r428, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p225, %r429, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p226, %r430, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p227, %r432, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r415, %f887;
	mov.b32 	%r414, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	mov.b32 	%r421, %f888;
	xor.b32  	%r418, %r421, -2147483648;
	mov.b32 	%r420, %f165;
	xor.b32  	%r417, %r420, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r415, %r414;
	// end inline asm
	shl.b32 	%r434, %r5, 12;
	shl.b32 	%r435, %r3, 5;
	and.b32  	%r436, %r435, 128;
	and.b32  	%r437, %r12, 28;
	and.b32  	%r438, %r435, 96;
	or.b32  	%r439, %r438, %r437;
	and.b32  	%r440, %r9, 16;
	and.b32  	%r441, %r16, 8;
	and.b32  	%r442, %r1, 7;
	shl.b32 	%r443, %r1, 2;
	and.b32  	%r444, %r443, 32;
	or.b32  	%r445, %r440, %r442;
	or.b32  	%r446, %r445, %r441;
	or.b32  	%r134, %r446, %r444;
	or.b32  	%r447, %r439, %r436;
	or.b32  	%r135, %r447, %r434;
	or.b32  	%r448, %r436, %r437;
	or.b32  	%r449, %r448, %r438;
	or.b32  	%r450, %r434, %r449;
	add.s32 	%r136, %r450, 262144;
	add.s32 	%r137, %r450, 524288;
	add.s32 	%r138, %r450, 786432;
	and.b32  	%r139, %r4, 8;
	shl.b32 	%r451, %r4, 4;
	or.b32  	%r452, %r139, %r451;
	shr.u32 	%r453, %r452, 2;
	and.b32  	%r454, %r453, 30;
	shr.u32 	%r455, %r1, 3;
	mul.lo.s32 	%r456, %r455, 1057;
	mul.lo.s32 	%r457, %r20, 65;
	bfe.u32 	%r458, %r1, 2, 1;
	mul.lo.s32 	%r459, %r458, 130;
	bfe.u32 	%r460, %r1, 1, 1;
	mul.lo.s32 	%r461, %r460, 260;
	and.b32  	%r462, %r1, 1;
	mul.lo.s32 	%r463, %r462, 520;
	add.s32 	%r464, %r457, %r456;
	add.s32 	%r465, %r464, %r463;
	add.s32 	%r466, %r465, %r459;
	add.s32 	%r467, %r466, %r461;
	add.s32 	%r468, %r467, %r454;
	mul.wide.u32 	%rd108, %r468, 4;
	mov.u64 	%rd109, shmem;
	add.s64 	%rd37, %rd109, %rd108;
	add.s32 	%r469, %r468, 32;
	mul.wide.u32 	%rd110, %r469, 4;
	add.s64 	%rd38, %rd109, %rd110;
	add.s32 	%r470, %r468, 1;
	mul.wide.u32 	%rd111, %r470, 4;
	add.s64 	%rd39, %rd109, %rd111;
	add.s32 	%r471, %r468, 33;
	mul.wide.u32 	%rd112, %r471, 4;
	add.s64 	%rd40, %rd109, %rd112;
	or.b32  	%r472, %r455, 2;
	mul.lo.s32 	%r473, %r472, 1057;
	add.s32 	%r474, %r463, %r457;
	add.s32 	%r475, %r474, %r473;
	add.s32 	%r476, %r475, %r459;
	add.s32 	%r477, %r476, %r461;
	add.s32 	%r478, %r477, %r454;
	mul.wide.s32 	%rd113, %r478, 4;
	add.s64 	%rd41, %rd109, %rd113;
	add.s32 	%r479, %r474, 32;
	add.s32 	%r480, %r479, %r473;
	add.s32 	%r481, %r480, %r459;
	add.s32 	%r482, %r481, %r461;
	add.s32 	%r483, %r482, %r454;
	mul.wide.s32 	%rd114, %r483, 4;
	add.s64 	%rd42, %rd109, %rd114;
	add.s32 	%r484, %r474, 1;
	add.s32 	%r485, %r484, %r473;
	add.s32 	%r486, %r485, %r459;
	add.s32 	%r487, %r486, %r461;
	add.s32 	%r488, %r487, %r454;
	mul.wide.s32 	%rd115, %r488, 4;
	add.s64 	%rd43, %rd109, %rd115;
	add.s32 	%r489, %r474, 33;
	add.s32 	%r490, %r489, %r473;
	add.s32 	%r491, %r490, %r459;
	add.s32 	%r492, %r491, %r461;
	add.s32 	%r493, %r492, %r454;
	mul.wide.s32 	%rd116, %r493, 4;
	add.s64 	%rd44, %rd109, %rd116;
	or.b32  	%r494, %r455, 4;
	mul.lo.s32 	%r495, %r494, 1057;
	add.s32 	%r496, %r474, %r495;
	add.s32 	%r497, %r496, %r459;
	add.s32 	%r498, %r497, %r461;
	add.s32 	%r499, %r498, %r454;
	mul.wide.s32 	%rd117, %r499, 4;
	add.s64 	%rd45, %rd109, %rd117;
	add.s32 	%r500, %r479, %r495;
	add.s32 	%r501, %r500, %r459;
	add.s32 	%r502, %r501, %r461;
	add.s32 	%r503, %r502, %r454;
	mul.wide.s32 	%rd118, %r503, 4;
	add.s64 	%rd46, %rd109, %rd118;
	add.s32 	%r504, %r484, %r495;
	add.s32 	%r505, %r504, %r459;
	add.s32 	%r506, %r505, %r461;
	add.s32 	%r507, %r506, %r454;
	mul.wide.s32 	%rd119, %r507, 4;
	add.s64 	%rd47, %rd109, %rd119;
	add.s32 	%r508, %r489, %r495;
	add.s32 	%r509, %r508, %r459;
	add.s32 	%r510, %r509, %r461;
	add.s32 	%r511, %r510, %r454;
	mul.wide.s32 	%rd120, %r511, 4;
	add.s64 	%rd48, %rd109, %rd120;
	or.b32  	%r512, %r455, 6;
	mul.lo.s32 	%r513, %r512, 1057;
	add.s32 	%r514, %r474, %r513;
	add.s32 	%r515, %r514, %r459;
	add.s32 	%r516, %r515, %r461;
	add.s32 	%r517, %r516, %r454;
	mul.wide.s32 	%rd121, %r517, 4;
	add.s64 	%rd49, %rd109, %rd121;
	add.s32 	%r518, %r479, %r513;
	add.s32 	%r519, %r518, %r459;
	add.s32 	%r520, %r519, %r461;
	add.s32 	%r521, %r520, %r454;
	mul.wide.s32 	%rd122, %r521, 4;
	add.s64 	%rd50, %rd109, %rd122;
	add.s32 	%r522, %r484, %r513;
	add.s32 	%r523, %r522, %r459;
	add.s32 	%r524, %r523, %r461;
	add.s32 	%r525, %r524, %r454;
	mul.wide.s32 	%rd123, %r525, 4;
	add.s64 	%rd51, %rd109, %rd123;
	add.s32 	%r526, %r489, %r513;
	add.s32 	%r527, %r526, %r459;
	add.s32 	%r528, %r527, %r461;
	add.s32 	%r529, %r528, %r454;
	mul.wide.s32 	%rd124, %r529, 4;
	add.s64 	%rd52, %rd109, %rd124;
	shl.b32 	%r530, %r4, 3;
	and.b32  	%r531, %r530, 64;
	shl.b32 	%r532, %r1, 1;
	or.b32  	%r533, %r531, %r532;
	shr.u32 	%r534, %r533, 2;
	and.b32  	%r535, %r2, 32;
	mad.lo.s32 	%r536, %r18, 130, %r535;
	mad.lo.s32 	%r537, %r20, 520, %r536;
	mad.lo.s32 	%r538, %r17, 65, %r537;
	mad.lo.s32 	%r539, %r19, 260, %r538;
	add.s32 	%r540, %r539, %r534;
	or.b32  	%r541, %r534, 8;
	add.s32 	%r542, %r539, %r541;
	or.b32  	%r543, %r14, %r13;
	or.b32  	%r544, %r543, %r10;
	shr.u32 	%r545, %r544, 1;
	mul.lo.s32 	%r546, %r545, 65;
	or.b32  	%r547, %r534, %r535;
	add.s32 	%r548, %r547, %r546;
	or.b32  	%r549, %r541, %r535;
	add.s32 	%r550, %r549, %r546;
	add.s32 	%r551, %r454, %r456;
	add.s32 	%r552, %r454, %r473;
	add.s32 	%r553, %r454, %r495;
	add.s32 	%r554, %r454, %r513;
	and.b32  	%r140, %r1, 8;
	shl.b32 	%r555, %r7, 17;
	add.s32 	%r556, %r555, -393216;
	and.b32  	%r557, %r443, 28;
	or.b32  	%r558, %r557, %r49;
	or.b32  	%r559, %r558, %r11;
	shl.b32 	%r560, %r559, 8;
	shl.b32 	%r561, %r1, 14;
	and.b32  	%r562, %r561, 131072;
	or.b32  	%r563, %r447, %r562;
	or.b32  	%r564, %r563, %r560;
	or.b32  	%r141, %r564, 262144;
	cvt.s64.s32 	%rd53, %r556;
	or.b32  	%r142, %r564, 524288;
	or.b32  	%r143, %r564, 786432;
	and.b32  	%r565, %r532, 14;
	or.b32  	%r566, %r565, %r20;
	mul.lo.s32 	%r567, %r566, 65;
	add.s32 	%r568, %r551, %r567;
	mul.wide.u32 	%rd125, %r568, 4;
	add.s64 	%rd54, %rd109, %rd125;
	cvt.u64.u32 	%rd126, %r567;
	cvt.u64.u32 	%rd127, %r454;
	cvt.u64.u32 	%rd128, %r456;
	add.s64 	%rd129, %rd128, %rd127;
	add.s64 	%rd130, %rd129, %rd126;
	shl.b64 	%rd131, %rd130, 2;
	add.s64 	%rd55, %rd109, %rd131;
	add.s32 	%r569, %r552, %r567;
	mul.wide.u32 	%rd132, %r569, 4;
	add.s64 	%rd56, %rd109, %rd132;
	cvt.u64.u32 	%rd133, %r473;
	add.s64 	%rd134, %rd133, %rd127;
	add.s64 	%rd135, %rd134, %rd126;
	shl.b64 	%rd136, %rd135, 2;
	add.s64 	%rd57, %rd109, %rd136;
	add.s32 	%r570, %r553, %r567;
	mul.wide.u32 	%rd137, %r570, 4;
	add.s64 	%rd58, %rd109, %rd137;
	cvt.u64.u32 	%rd138, %r495;
	add.s64 	%rd139, %rd138, %rd127;
	add.s64 	%rd140, %rd139, %rd126;
	shl.b64 	%rd141, %rd140, 2;
	add.s64 	%rd59, %rd109, %rd141;
	add.s32 	%r571, %r554, %r567;
	mul.wide.u32 	%rd142, %r571, 4;
	add.s64 	%rd60, %rd109, %rd142;
	cvt.u64.u32 	%rd143, %r513;
	add.s64 	%rd144, %rd143, %rd127;
	add.s64 	%rd145, %rd144, %rd126;
	shl.b64 	%rd146, %rd145, 2;
	add.s64 	%rd61, %rd109, %rd146;
	mul.wide.u32 	%rd147, %r550, 4;
	add.s64 	%rd62, %rd109, %rd147;
	mul.wide.u32 	%rd148, %r548, 4;
	add.s64 	%rd63, %rd109, %rd148;
	mul.wide.u32 	%rd149, %r542, 4;
	add.s64 	%rd64, %rd109, %rd149;
	mul.wide.u32 	%rd150, %r540, 4;
	add.s64 	%rd65, %rd109, %rd150;
	setp.eq.s32 	%p231, %r139, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.ne.s32 	%p245, %r140, 0;
	mov.u32 	%r94, %r2599;
	mov.u32 	%r2626, %r2599;
	mov.u32 	%r2625, %r2599;
	mov.u32 	%r2616, %r2599;
	mov.u32 	%r2617, %r2599;
	mov.u32 	%r2618, %r2599;
	mov.u32 	%r2619, %r2599;
	bra.uni 	LBB0_126;
LBB0_130:                               // %pass8966
                                        //   in Loop: Header=BB0_126 Depth=1
	add.s32 	%r2594, %r142, %r2631;
	cvt.u64.u32 	%rd171, %r2594;
	add.s64 	%rd172, %rd171, %rd53;
	shr.u64 	%rd173, %rd172, 35;
	add.s64 	%rd174, %rd172, %rd173;
	shr.s64 	%rd175, %rd174, 29;
	setp.lt.s64 	%p251, %rd172, 0;
	and.b64  	%rd176, %rd174, -536870912;
	setp.ne.s64 	%p252, %rd176, %rd172;
	and.pred  	%p253, %p251, %p252;
	selp.u64 	%rd177, 1, 0, %p253;
	sub.s64 	%rd178, %rd177, %rd175;
	shl.b64 	%rd179, %rd178, 29;
	add.s64 	%rd180, %rd179, %rd172;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd182, %rd3, %rd181;
	st.global.v4.u32 	[%rd182], {%r152, %r154, %r153, %r155};
	add.s32 	%r2595, %r143, %r2631;
	cvt.u64.u32 	%rd183, %r2595;
	add.s64 	%rd184, %rd183, %rd53;
	shr.u64 	%rd185, %rd184, 35;
	add.s64 	%rd186, %rd184, %rd185;
	shr.s64 	%rd187, %rd186, 29;
	setp.lt.s64 	%p254, %rd184, 0;
	and.b64  	%rd188, %rd186, -536870912;
	setp.ne.s64 	%p255, %rd188, %rd184;
	and.pred  	%p256, %p254, %p255;
	selp.u64 	%rd189, 1, 0, %p256;
	sub.s64 	%rd190, %rd189, %rd187;
	shl.b64 	%rd191, %rd190, 29;
	add.s64 	%rd192, %rd191, %rd184;
	shl.b64 	%rd193, %rd192, 2;
	add.s64 	%rd194, %rd3, %rd193;
	st.global.v4.u32 	[%rd194], {%r156, %r158, %r157, %r159};
	setp.ne.s32 	%p257, %r94, 130816;
	add.s32 	%r94, %r94, 256;
	add.s32 	%r2596, %r94, %r5;
	setp.gt.s32 	%p258, %r6, %r2596;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_126;
	bra.uni 	LBB0_131;
LBB0_126:                               // %L1454
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r637, %r134, %r94;
	shl.b32 	%r638, %r637, 12;
	add.s32 	%r639, %r135, %r638;
	shr.s32 	%r640, %r639, 31;
	shr.u32 	%r641, %r640, 3;
	add.s32 	%r642, %r639, %r641;
	shr.s32 	%r643, %r642, 29;
	setp.lt.s32 	%p232, %r639, 0;
	and.b32  	%r644, %r642, -536870912;
	setp.ne.s32 	%p233, %r644, %r639;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r645, 1, 0, %p234;
	sub.s32 	%r646, %r645, %r643;
	shl.b32 	%r647, %r646, 29;
	add.s32 	%r648, %r647, %r639;
	mul.wide.s32 	%rd151, %r648, 4;
	add.s64 	%rd152, %rd2, %rd151;
	ld.global.v4.u32 	{%r649, %r650, %r651, %r652}, [%rd152];
	add.s32 	%r653, %r136, %r638;
	shr.s32 	%r654, %r653, 31;
	shr.u32 	%r655, %r654, 3;
	add.s32 	%r656, %r653, %r655;
	shr.s32 	%r657, %r656, 29;
	setp.lt.s32 	%p235, %r653, 0;
	and.b32  	%r658, %r656, -536870912;
	setp.ne.s32 	%p236, %r658, %r653;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r659, 1, 0, %p237;
	sub.s32 	%r660, %r659, %r657;
	shl.b32 	%r661, %r660, 29;
	add.s32 	%r662, %r661, %r653;
	mul.wide.s32 	%rd153, %r662, 4;
	add.s64 	%rd154, %rd2, %rd153;
	ld.global.v4.u32 	{%r663, %r664, %r665, %r666}, [%rd154];
	add.s32 	%r667, %r137, %r638;
	shr.s32 	%r668, %r667, 31;
	shr.u32 	%r669, %r668, 3;
	add.s32 	%r670, %r667, %r669;
	shr.s32 	%r671, %r670, 29;
	setp.lt.s32 	%p238, %r667, 0;
	and.b32  	%r672, %r670, -536870912;
	setp.ne.s32 	%p239, %r672, %r667;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r673, 1, 0, %p240;
	sub.s32 	%r674, %r673, %r671;
	shl.b32 	%r675, %r674, 29;
	add.s32 	%r676, %r675, %r667;
	mul.wide.s32 	%rd155, %r676, 4;
	add.s64 	%rd156, %rd2, %rd155;
	ld.global.v4.u32 	{%r677, %r678, %r679, %r680}, [%rd156];
	add.s32 	%r681, %r138, %r638;
	shr.s32 	%r682, %r681, 31;
	shr.u32 	%r683, %r682, 3;
	add.s32 	%r684, %r681, %r683;
	shr.s32 	%r685, %r684, 29;
	setp.lt.s32 	%p241, %r681, 0;
	and.b32  	%r686, %r684, -536870912;
	setp.ne.s32 	%p242, %r686, %r681;
	and.pred  	%p243, %p241, %p242;
	selp.u32 	%r687, 1, 0, %p243;
	sub.s32 	%r688, %r687, %r685;
	shl.b32 	%r689, %r688, 29;
	add.s32 	%r690, %r689, %r681;
	mul.wide.s32 	%rd157, %r690, 4;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.v4.u32 	{%r691, %r692, %r693, %r694}, [%rd158];
	selp.b32 	%r695, %r651, %r649, %p231;
	shfl.sync.bfly.b32	%r696, %r695, 8, 31, -1;
	selp.b32 	%r573, %r649, %r696, %p231;
	selp.b32 	%r574, %r696, %r651, %p231;
	selp.b32 	%r697, %r652, %r650, %p231;
	shfl.sync.bfly.b32	%r698, %r697, 8, 31, -1;
	selp.b32 	%r581, %r650, %r698, %p231;
	selp.b32 	%r582, %r698, %r652, %p231;
	selp.b32 	%r699, %r665, %r663, %p231;
	shfl.sync.bfly.b32	%r700, %r699, 8, 31, -1;
	selp.b32 	%r589, %r663, %r700, %p231;
	selp.b32 	%r590, %r700, %r665, %p231;
	selp.b32 	%r701, %r666, %r664, %p231;
	shfl.sync.bfly.b32	%r702, %r701, 8, 31, -1;
	selp.b32 	%r597, %r664, %r702, %p231;
	selp.b32 	%r598, %r702, %r666, %p231;
	selp.b32 	%r703, %r679, %r677, %p231;
	shfl.sync.bfly.b32	%r704, %r703, 8, 31, -1;
	selp.b32 	%r605, %r677, %r704, %p231;
	selp.b32 	%r606, %r704, %r679, %p231;
	selp.b32 	%r705, %r680, %r678, %p231;
	shfl.sync.bfly.b32	%r706, %r705, 8, 31, -1;
	selp.b32 	%r613, %r678, %r706, %p231;
	selp.b32 	%r614, %r706, %r680, %p231;
	selp.b32 	%r707, %r693, %r691, %p231;
	shfl.sync.bfly.b32	%r708, %r707, 8, 31, -1;
	selp.b32 	%r621, %r691, %r708, %p231;
	selp.b32 	%r622, %r708, %r693, %p231;
	selp.b32 	%r709, %r694, %r692, %p231;
	shfl.sync.bfly.b32	%r710, %r709, 8, 31, -1;
	selp.b32 	%r629, %r692, %r710, %p231;
	selp.b32 	%r630, %r710, %r694, %p231;
	mov.u32 	%r631, 21520;
	// begin inline asm
	prmt.b32 %r572, %r573, %r574, %r631;
	// end inline asm
	mov.u32 	%r635, 30258;
	// begin inline asm
	prmt.b32 %r576, %r573, %r574, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r581, %r582, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r581, %r582, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r589, %r590, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r589, %r590, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r597, %r598, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r597, %r598, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r605, %r606, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r605, %r606, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r613, %r614, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r616, %r613, %r614, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r621, %r622, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r624, %r621, %r622, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r629, %r630, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r632, %r629, %r630, %r635;
	// end inline asm
	st.shared.u32 	[%rd37], %r572;
	st.shared.u32 	[%rd38], %r576;
	st.shared.u32 	[%rd39], %r580;
	st.shared.u32 	[%rd40], %r584;
	st.shared.u32 	[%rd41], %r588;
	st.shared.u32 	[%rd42], %r592;
	st.shared.u32 	[%rd43], %r596;
	st.shared.u32 	[%rd44], %r600;
	st.shared.u32 	[%rd45], %r604;
	st.shared.u32 	[%rd46], %r608;
	st.shared.u32 	[%rd47], %r612;
	st.shared.u32 	[%rd48], %r616;
	st.shared.u32 	[%rd49], %r620;
	st.shared.u32 	[%rd50], %r624;
	st.shared.u32 	[%rd51], %r628;
	st.shared.u32 	[%rd52], %r632;
	bar.sync 	0;
	mov.u32 	%r2620, 256;
	mov.u64 	%rd207, %rd65;
	mov.u64 	%rd208, %rd64;
	mov.u64 	%rd209, %rd63;
	mov.u64 	%rd210, %rd62;
	mov.u32 	%r2621, %r2619;
	mov.u32 	%r2622, %r2618;
	mov.u32 	%r2623, %r2617;
	mov.u32 	%r2624, %r2616;
LBB0_127:                               // %L12542
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2618, %r2626;
	mov.u32 	%r2619, %r2625;
	ld.shared.u32 	%r2617, [%rd207];
	ld.shared.u32 	%r2616, [%rd208];
	// begin inline asm
	mov.b32 %r716, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r715, %r2617, -2004318072;
	mov.u32 	%r714, 983055;
	// begin inline asm
	lop3.b32 %r713, %r714, %r715, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r718, %r716, %r717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r721, %r713, %r718;
	// end inline asm
	mov.u32 	%r725, 15728880;
	// begin inline asm
	lop3.b32 %r724, %r725, %r715, %r727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r728, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r727, %r728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r732, %r724, %r729;
	// end inline asm
	shr.u32 	%r737, %r715, 8;
	// begin inline asm
	lop3.b32 %r735, %r714, %r737, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r740, %r716, %r739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r743, %r735, %r740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r746, %r725, %r737, %r727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r750, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r751, %r727, %r750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r754, %r746, %r751;
	// end inline asm
	// begin inline asm
	mov.b32 %r762, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r761, %r2616, -2004318072;
	// begin inline asm
	lop3.b32 %r759, %r714, %r761, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r763, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r764, %r762, %r763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r767, %r759, %r764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r770, %r725, %r761, %r773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r774, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r775, %r773, %r774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r778, %r770, %r775;
	// end inline asm
	shr.u32 	%r783, %r761, 8;
	// begin inline asm
	lop3.b32 %r781, %r714, %r783, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r762, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r792, %r725, %r783, %r773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r797, %r773, %r796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r800, %r792, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r803, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r805, %r803, %r721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r808, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r810, %r808, %r732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r813, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r815, %r813, %r743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r818, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r820, %r818, %r754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r823, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r825, %r823, %r767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r828, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r830, %r828, %r778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r833, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r835, %r833, %r789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r840, %r838, %r800;
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r847, %r2621, -2004318072;
	// begin inline asm
	lop3.b32 %r845, %r714, %r847, %r848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r849, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r850, %r848, %r849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r853, %r845, %r850;
	// end inline asm
	// begin inline asm
	lop3.b32 %r856, %r725, %r847, %r859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r861, %r859, %r860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r864, %r856, %r861;
	// end inline asm
	shr.u32 	%r869, %r847, 8;
	// begin inline asm
	lop3.b32 %r867, %r714, %r869, %r848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r871, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r872, %r848, %r871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r875, %r867, %r872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r878, %r725, %r869, %r859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r882, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r883, %r859, %r882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r886, %r878, %r883;
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r893, %r2622, -2004318072;
	// begin inline asm
	lop3.b32 %r891, %r714, %r893, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r896, %r894, %r895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r899, %r891, %r896;
	// end inline asm
	// begin inline asm
	lop3.b32 %r902, %r725, %r893, %r905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r907, %r905, %r906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r910, %r902, %r907;
	// end inline asm
	shr.u32 	%r915, %r893, 8;
	// begin inline asm
	lop3.b32 %r913, %r714, %r915, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r917, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r918, %r894, %r917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r921, %r913, %r918;
	// end inline asm
	// begin inline asm
	lop3.b32 %r924, %r725, %r915, %r905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r928, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r929, %r905, %r928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r932, %r924, %r929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r935, %r196, %r853, %r805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r939, %r196, %r864, %r810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r943, %r196, %r875, %r815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r947, %r196, %r886, %r820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r951, %r196, %r899, %r825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r955, %r196, %r910, %r830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r959, %r196, %r921, %r835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r963, %r196, %r932, %r840;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r971, %r2623, -2004318072;
	// begin inline asm
	lop3.b32 %r969, %r714, %r971, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r980, %r725, %r971, %r983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r985, %r983, %r984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r988, %r980, %r985;
	// end inline asm
	shr.u32 	%r993, %r971, 8;
	// begin inline asm
	lop3.b32 %r991, %r714, %r993, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r996, %r972, %r995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r999, %r991, %r996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1002, %r725, %r993, %r983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r983, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1017, %r2624, -2004318072;
	// begin inline asm
	lop3.b32 %r1015, %r714, %r1017, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1026, %r725, %r1017, %r1029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1030, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1031, %r1029, %r1030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1034, %r1026, %r1031;
	// end inline asm
	shr.u32 	%r1039, %r1017, 8;
	// begin inline asm
	lop3.b32 %r1037, %r714, %r1039, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1042, %r1018, %r1041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1045, %r1037, %r1042;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1048, %r725, %r1039, %r1029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1029, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1059, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1061, %r1059, %r977, %r935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1065, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r1065, %r988, %r939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1071, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r1071, %r999, %r943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1077, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1079, %r1077, %r1010, %r947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1083, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r1083, %r1023, %r951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1089, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r1089, %r1034, %r955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1095, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r1095, %r1045, %r959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1101, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r1101, %r1056, %r963;
	// end inline asm
	// begin inline asm
	mov.b32 %r1112, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1123, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1111, %r2619, -2004318072;
	// begin inline asm
	lop3.b32 %r1109, %r714, %r1111, %r1112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1113, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1114, %r1112, %r1113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1117, %r1109, %r1114;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1120, %r725, %r1111, %r1123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1124, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1125, %r1123, %r1124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1128, %r1120, %r1125;
	// end inline asm
	shr.u32 	%r1133, %r1111, 8;
	// begin inline asm
	lop3.b32 %r1131, %r714, %r1133, %r1112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1135, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1136, %r1112, %r1135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1139, %r1131, %r1136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1142, %r725, %r1133, %r1123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1146, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1147, %r1123, %r1146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1150, %r1142, %r1147;
	// end inline asm
	// begin inline asm
	mov.b32 %r1158, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1169, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1157, %r2618, -2004318072;
	// begin inline asm
	lop3.b32 %r1155, %r714, %r1157, %r1158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1159, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1160, %r1158, %r1159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1163, %r1155, %r1160;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1166, %r725, %r1157, %r1169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1170, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1171, %r1169, %r1170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1174, %r1166, %r1171;
	// end inline asm
	shr.u32 	%r1179, %r1157, 8;
	// begin inline asm
	lop3.b32 %r1177, %r714, %r1179, %r1158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1181, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1182, %r1158, %r1181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1185, %r1177, %r1182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1188, %r725, %r1179, %r1169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1193, %r1169, %r1192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1196, %r1188, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r232, %r1117, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1235, %r232, %r1128, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r232, %r1139, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1244, %r232, %r1150, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r232, %r1163, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r232, %r1174, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r232, %r1185, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r232, %r1196, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1231, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1233, %r1231, %r1235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r47, %r1238, %r1233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1240, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r1240, %r1244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r47, %r1247, %r1242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1249, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1251, %r1249, %r1253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r47, %r1256, %r1251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1258, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r1258, %r1262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r47, %r1265, %r1260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r48, %r1238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r47, %r1235, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r48, %r1247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r47, %r1244, %r1274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r48, %r1256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r47, %r1253, %r1281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1288, %r48, %r1265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1291, %r47, %r1262, %r1288;
	// end inline asm
	mov.u32 	%r1303, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1342, %r1339}, {%r68, %r70, %r69, %r71}, {%r1236, %r1270}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1351, %r1348}, {%r68, %r70, %r69, %r71}, {%r1245, %r1277}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1360, %r1357}, {%r68, %r70, %r69, %r71}, {%r1254, %r1284}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1369, %r1366}, {%r68, %r70, %r69, %r71}, {%r1263, %r1291}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1335, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1337, %r1335, %r1339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1340, %r90, %r1342, %r1337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1344, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1346, %r1344, %r1348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r90, %r1351, %r1346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1353, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1355, %r1353, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1358, %r90, %r1360, %r1355;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1362, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1364, %r1362, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r90, %r1369, %r1364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1371, %r91, %r1342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r90, %r1339, %r1371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r91, %r1351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r90, %r1348, %r1378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r91, %r1360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r90, %r1357, %r1385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r91, %r1369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r90, %r1366, %r1392;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r413, %r419, %r416, %r422}, {%r1340, %r1374}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1409, %r1410}, {%r413, %r419, %r416, %r422}, {%r1349, %r1381}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1419, %r1420}, {%r413, %r419, %r416, %r422}, {%r1358, %r1388}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r413, %r419, %r416, %r422}, {%r1367, %r1395}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r15, %r1399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r15, %r1400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r15, %r1409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r15, %r1410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r15, %r1419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r15, %r1420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r15, %r1429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r15, %r1430;
	// end inline asm
	// begin inline asm
	mov.b32 %r1463, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1464, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1465, %r1439, %r1463;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1468, %r1465, %r1464;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1473, %r1442, %r1471;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1476, %r1473, %r1472;
	// end inline asm
	// begin inline asm
	mov.b32 %r1479, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1481, %r1445, %r1479;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1484, %r1481, %r1480;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1488, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1489, %r1448, %r1487;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1492, %r1489, %r1488;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1496, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1497, %r1451, %r1495;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1500, %r1497, %r1496;
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1505, %r1454, %r1503;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1508, %r1505, %r1504;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1513, %r1457, %r1511;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1516, %r1513, %r1512;
	// end inline asm
	// begin inline asm
	mov.b32 %r1519, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1521, %r1460, %r1519;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1524, %r1521, %r1520;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1529, %r1530, %r1528;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1532, %r1468, %r1529;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1530, %r1535;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1476, %r1536;
	// end inline asm
	// begin inline asm
	mov.b32 %r1542, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1543, %r1530, %r1542;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1546, %r1484, %r1543;
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1550, %r1530, %r1549;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1492, %r1550;
	// end inline asm
	mov.u32 	%r1559, 25152;
	// begin inline asm
	prmt.b32 %r1556, %r1532, %r1546, %r1559;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1560, %r1539, %r1553, %r1559;
	// end inline asm
	shl.b32 	%r1567, %r1560, 4;
	mov.u32 	%r1565, 252645135;
	// begin inline asm
	lop3.b32 %r1564, %r1565, %r1556, %r1567, 202;
	// end inline asm
	xor.b32  	%r2507, %r1564, -2004318072;
	// begin inline asm
	mov.b32 %r1571, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1569, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1570, %r1571, %r1569;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1500, %r1570;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1571, %r1576;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1508, %r1577;
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1584, %r1571, %r1583;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1587, %r1516, %r1584;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1591, %r1571, %r1590;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1594, %r1524, %r1591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1597, %r1573, %r1587, %r1559;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1601, %r1580, %r1594, %r1559;
	// end inline asm
	shl.b32 	%r1608, %r1601, 4;
	// begin inline asm
	lop3.b32 %r1605, %r1565, %r1597, %r1608, 202;
	// end inline asm
	xor.b32  	%r2508, %r1605, -2004318072;
	st.shared.u32 	[%rd209], %r2507;
	st.shared.u32 	[%rd210], %r2508;
	ld.shared.u32 	%r2625, [%rd207];
	ld.shared.u32 	%r2626, [%rd208];
	// begin inline asm
	mov.b32 %r1614, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1625, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1613, %r2625, -2004318072;
	// begin inline asm
	lop3.b32 %r1611, %r714, %r1613, %r1614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1615, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1616, %r1614, %r1615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1619, %r1611, %r1616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1622, %r725, %r1613, %r1625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1626, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1627, %r1625, %r1626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1630, %r1622, %r1627;
	// end inline asm
	shr.u32 	%r1635, %r1613, 8;
	// begin inline asm
	lop3.b32 %r1633, %r714, %r1635, %r1614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1637, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1638, %r1614, %r1637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1641, %r1633, %r1638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1644, %r725, %r1635, %r1625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1648, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1649, %r1625, %r1648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1652, %r1644, %r1649;
	// end inline asm
	// begin inline asm
	mov.b32 %r1660, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1671, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1659, %r2626, -2004318072;
	// begin inline asm
	lop3.b32 %r1657, %r714, %r1659, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1661, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1662, %r1660, %r1661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1665, %r1657, %r1662;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1668, %r725, %r1659, %r1671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1672, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1673, %r1671, %r1672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1676, %r1668, %r1673;
	// end inline asm
	shr.u32 	%r1681, %r1659, 8;
	// begin inline asm
	lop3.b32 %r1679, %r714, %r1681, %r1660, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1683, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1684, %r1660, %r1683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1687, %r1679, %r1684;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1690, %r725, %r1681, %r1671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1694, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1695, %r1671, %r1694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1698, %r1690, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1706, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r1706, %r1630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1711, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r1711, %r1641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1698;
	// end inline asm
	// begin inline asm
	mov.b32 %r1746, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1757, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1743, %r714, %r971, %r1746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1747, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1748, %r1746, %r1747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1751, %r1743, %r1748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1754, %r725, %r971, %r1757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1758, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1759, %r1757, %r1758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1762, %r1754, %r1759;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1765, %r714, %r993, %r1746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1769, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1770, %r1746, %r1769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1773, %r1765, %r1770;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1776, %r725, %r993, %r1757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1780, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1781, %r1757, %r1780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1784, %r1776, %r1781;
	// end inline asm
	// begin inline asm
	mov.b32 %r1792, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1803, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1789, %r714, %r1017, %r1792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1793, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1794, %r1792, %r1793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1797, %r1789, %r1794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1800, %r725, %r1017, %r1803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1804, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1805, %r1803, %r1804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1808, %r1800, %r1805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1811, %r714, %r1039, %r1792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1815, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1816, %r1792, %r1815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1819, %r1811, %r1816;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1822, %r725, %r1039, %r1803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1826, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1827, %r1803, %r1826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1830, %r1822, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r196, %r1751, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r196, %r1762, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r196, %r1773, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r196, %r1784, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r196, %r1797, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r196, %r1808, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r196, %r1819, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r196, %r1830, %r1738;
	// end inline asm
	// begin inline asm
	mov.b32 %r1870, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1881, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1867, %r714, %r1111, %r1870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1871, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1872, %r1870, %r1871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1875, %r1867, %r1872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1878, %r725, %r1111, %r1881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1882, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1883, %r1881, %r1882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1886, %r1878, %r1883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1889, %r714, %r1133, %r1870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1893, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1894, %r1870, %r1893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1897, %r1889, %r1894;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1900, %r725, %r1133, %r1881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1904, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1905, %r1881, %r1904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1908, %r1900, %r1905;
	// end inline asm
	// begin inline asm
	mov.b32 %r1916, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1927, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1913, %r714, %r1157, %r1916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1917, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1918, %r1916, %r1917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1921, %r1913, %r1918;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1924, %r725, %r1157, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1928, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1929, %r1927, %r1928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1932, %r1924, %r1929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1935, %r714, %r1179, %r1916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1940, %r1916, %r1939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1943, %r1935, %r1940;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1946, %r725, %r1179, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1950, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1951, %r1927, %r1950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1954, %r1946, %r1951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1957, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r1957, %r1875, %r1833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1963, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1963, %r1886, %r1837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r1969, %r1897, %r1841;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1975, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1975, %r1908, %r1845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1981, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1981, %r1921, %r1849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1987, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1987, %r1932, %r1853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1993, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1993, %r1943, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1999, %r214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r1999, %r1954, %r1861;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2021, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2007, %r714, %r715, %r2010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2011, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2012, %r2010, %r2011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2015, %r2007, %r2012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2018, %r725, %r715, %r2021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2022, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2023, %r2021, %r2022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2026, %r2018, %r2023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2029, %r714, %r737, %r2010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2033, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2034, %r2010, %r2033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2037, %r2029, %r2034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2040, %r725, %r737, %r2021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2045, %r2021, %r2044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2048, %r2040, %r2045;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2067, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2053, %r714, %r761, %r2056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2057, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2058, %r2056, %r2057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2061, %r2053, %r2058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2064, %r725, %r761, %r2067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2068, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2069, %r2067, %r2068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2072, %r2064, %r2069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2075, %r714, %r783, %r2056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2079, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2080, %r2056, %r2079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2083, %r2075, %r2080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2086, %r725, %r783, %r2067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2090, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2091, %r2067, %r2090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2094, %r2086, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r232, %r2015, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r232, %r2026, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r232, %r2037, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r232, %r2048, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r232, %r2061, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r232, %r2072, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r232, %r2083, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r232, %r2094, %r2001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2129, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r2129, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r47, %r2136, %r2131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2138, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r2138, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r47, %r2145, %r2140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2147, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r2147, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r47, %r2154, %r2149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2156, %r48;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r2156, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r47, %r2163, %r2158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r48, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r47, %r2133, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r48, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r47, %r2142, %r2172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r48, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r47, %r2151, %r2179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r48, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r47, %r2160, %r2186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2240, %r2237}, {%r68, %r70, %r69, %r71}, {%r2134, %r2168}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2249, %r2246}, {%r68, %r70, %r69, %r71}, {%r2143, %r2175}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2258, %r2255}, {%r68, %r70, %r69, %r71}, {%r2152, %r2182}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2267, %r2264}, {%r68, %r70, %r69, %r71}, {%r2161, %r2189}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2233, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r90, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2242, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r2242, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r90, %r2249, %r2244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2251, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r2251, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r90, %r2258, %r2253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2260, %r91;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r2260, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r90, %r2267, %r2262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r91, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2272, %r90, %r2237, %r2269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2276, %r91, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2279, %r90, %r2246, %r2276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2283, %r91, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2286, %r90, %r2255, %r2283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2290, %r91, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2293, %r90, %r2264, %r2290;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2297, %r2298}, {%r413, %r419, %r416, %r422}, {%r2238, %r2272}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2307, %r2308}, {%r413, %r419, %r416, %r422}, {%r2247, %r2279}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2317, %r2318}, {%r413, %r419, %r416, %r422}, {%r2256, %r2286}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2327, %r2328}, {%r413, %r419, %r416, %r422}, {%r2265, %r2293}, {%r1303, %r1303};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2337, %r15, %r2297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2340, %r15, %r2298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r15, %r2307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2346, %r15, %r2308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2349, %r15, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r15, %r2318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2355, %r15, %r2327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2358, %r15, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2363, %r2337, %r2361;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2366, %r2363, %r2362;
	// end inline asm
	// begin inline asm
	mov.b32 %r2369, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2371, %r2340, %r2369;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2374, %r2371, %r2370;
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2379, %r2343, %r2377;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2382, %r2379, %r2378;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2386, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2387, %r2346, %r2385;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2390, %r2387, %r2386;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2394, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2395, %r2349, %r2393;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2398, %r2395, %r2394;
	// end inline asm
	// begin inline asm
	mov.b32 %r2401, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2403, %r2352, %r2401;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2406, %r2403, %r2402;
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2410, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2411, %r2355, %r2409;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2414, %r2411, %r2410;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2419, %r2358, %r2417;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2422, %r2419, %r2418;
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2428, %r2426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2366, %r2427;
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2428, %r2433;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2374, %r2434;
	// end inline asm
	// begin inline asm
	mov.b32 %r2440, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2441, %r2428, %r2440;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2444, %r2382, %r2441;
	// end inline asm
	// begin inline asm
	mov.b32 %r2447, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2448, %r2428, %r2447;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2390, %r2448;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2430, %r2444, %r1559;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2437, %r2451, %r1559;
	// end inline asm
	shl.b32 	%r2465, %r2458, 4;
	// begin inline asm
	lop3.b32 %r2462, %r1565, %r2454, %r2465, 202;
	// end inline asm
	xor.b32  	%r2509, %r2462, -2004318072;
	// begin inline asm
	mov.b32 %r2469, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2469, %r2467;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2471, %r2398, %r2468;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2469, %r2474;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2406, %r2475;
	// end inline asm
	// begin inline asm
	mov.b32 %r2481, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2482, %r2469, %r2481;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2414, %r2482;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2469, %r2488;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2422, %r2489;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2495, %r2471, %r2485, %r1559;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2499, %r2478, %r2492, %r1559;
	// end inline asm
	shl.b32 	%r2506, %r2499, 4;
	// begin inline asm
	lop3.b32 %r2503, %r1565, %r2495, %r2506, 202;
	// end inline asm
	xor.b32  	%r2510, %r2503, -2004318072;
	st.shared.u32 	[%rd209], %r2509;
	st.shared.u32 	[%rd210], %r2510;
	add.s32 	%r2620, %r2620, -32;
	add.s64 	%rd210, %rd210, 4228;
	add.s64 	%rd209, %rd209, 4228;
	add.s64 	%rd208, %rd208, 4228;
	add.s64 	%rd207, %rd207, 4228;
	setp.eq.s32 	%p244, %r2620, 0;
	mov.u32 	%r2621, %r2619;
	mov.u32 	%r2622, %r2618;
	mov.u32 	%r2623, %r2617;
	mov.u32 	%r2624, %r2616;
	@%p244 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass9290
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2516, [%rd54];
	ld.shared.u32 	%r2517, [%rd55+128];
	ld.shared.u32 	%r2524, [%rd55+4];
	ld.shared.u32 	%r2525, [%rd55+132];
	ld.shared.u32 	%r2532, [%rd56];
	ld.shared.u32 	%r2533, [%rd57+128];
	ld.shared.u32 	%r2540, [%rd57+4];
	ld.shared.u32 	%r2541, [%rd57+132];
	ld.shared.u32 	%r2548, [%rd58];
	ld.shared.u32 	%r2549, [%rd59+128];
	ld.shared.u32 	%r2556, [%rd59+4];
	ld.shared.u32 	%r2557, [%rd59+132];
	ld.shared.u32 	%r2564, [%rd60];
	ld.shared.u32 	%r2565, [%rd61+128];
	ld.shared.u32 	%r2572, [%rd61+4];
	ld.shared.u32 	%r2573, [%rd61+132];
	// begin inline asm
	prmt.b32 %r2511, %r2516, %r2517, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2515, %r2516, %r2517, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2519, %r2524, %r2525, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2523, %r2524, %r2525, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2527, %r2532, %r2533, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2531, %r2532, %r2533, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2535, %r2540, %r2541, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2539, %r2540, %r2541, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2543, %r2548, %r2549, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2547, %r2548, %r2549, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2551, %r2556, %r2557, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2555, %r2556, %r2557, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2559, %r2564, %r2565, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2563, %r2564, %r2565, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2567, %r2572, %r2573, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2571, %r2572, %r2573, %r635;
	// end inline asm
	selp.b32 	%r2575, %r2515, %r2511, %p231;
	shfl.sync.bfly.b32	%r2576, %r2575, 8, 31, -1;
	selp.b32 	%r2577, %r2523, %r2519, %p231;
	shfl.sync.bfly.b32	%r2578, %r2577, 8, 31, -1;
	selp.b32 	%r2579, %r2531, %r2527, %p231;
	shfl.sync.bfly.b32	%r150, %r2579, 8, 31, -1;
	selp.b32 	%r2580, %r2539, %r2535, %p231;
	shfl.sync.bfly.b32	%r151, %r2580, 8, 31, -1;
	selp.b32 	%r2581, %r2547, %r2543, %p231;
	shfl.sync.bfly.b32	%r2582, %r2581, 8, 31, -1;
	selp.b32 	%r152, %r2543, %r2582, %p231;
	selp.b32 	%r153, %r2582, %r2547, %p231;
	selp.b32 	%r2583, %r2555, %r2551, %p231;
	shfl.sync.bfly.b32	%r2584, %r2583, 8, 31, -1;
	selp.b32 	%r154, %r2551, %r2584, %p231;
	selp.b32 	%r155, %r2584, %r2555, %p231;
	selp.b32 	%r2585, %r2563, %r2559, %p231;
	shfl.sync.bfly.b32	%r2586, %r2585, 8, 31, -1;
	selp.b32 	%r156, %r2559, %r2586, %p231;
	selp.b32 	%r157, %r2586, %r2563, %p231;
	selp.b32 	%r2587, %r2571, %r2567, %p231;
	shfl.sync.bfly.b32	%r2588, %r2587, 8, 31, -1;
	selp.b32 	%r158, %r2567, %r2588, %p231;
	selp.b32 	%r159, %r2588, %r2571, %p231;
	shl.b32 	%r2631, %r94, 12;
	@%p245 bra 	LBB0_129;
	bra.uni 	LBB0_130;
LBB0_129:                               // %L23126
                                        //   in Loop: Header=BB0_126 Depth=1
	selp.b32 	%r2589, %r151, %r2539, %p231;
	selp.b32 	%r2590, %r2535, %r151, %p231;
	selp.b32 	%r2591, %r150, %r2531, %p231;
	selp.b32 	%r2592, %r2527, %r150, %p231;
	add.s32 	%r2593, %r141, %r2631;
	cvt.u64.u32 	%rd159, %r2593;
	add.s64 	%rd160, %rd159, %rd53;
	shr.u64 	%rd161, %rd160, 35;
	add.s64 	%rd162, %rd160, %rd161;
	shr.s64 	%rd163, %rd162, 29;
	setp.lt.s64 	%p248, %rd160, 0;
	and.b64  	%rd164, %rd162, -536870912;
	setp.ne.s64 	%p249, %rd164, %rd160;
	and.pred  	%p250, %p248, %p249;
	selp.u64 	%rd165, 1, 0, %p250;
	sub.s64 	%rd166, %rd165, %rd163;
	shl.b64 	%rd167, %rd166, 29;
	add.s64 	%rd168, %rd167, %rd160;
	shl.b64 	%rd169, %rd168, 2;
	add.s64 	%rd170, %rd3, %rd169;
	st.global.v4.u32 	[%rd170], {%r2592, %r2590, %r2591, %r2589};
	bra.uni 	LBB0_130;
LBB0_131:                               // %L23829
	st.global.u32 	[%rd4], %r2599;
	ret;
LBB0_7:                                 // %L247
	mov.u32 	%r2598, 2;
	st.global.u32 	[%rd4], %r2598;
	mov.u64 	%rd195, exception2068;
	cvta.global.u64 	%rd196, %rd195;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd196;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L8
	mov.u64 	%rd87, exception1;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_134:                               // %L23929
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8502, 
	(
	);
	} // callseq 2
	mov.u64 	%rd94, exception1;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 3
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 4
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_133:                               // %L23926
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8502, 
	(
	);
	} // callseq 5
	mov.u64 	%rd98, exception1;
	cvta.global.u64 	%rd99, %rd98;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd99;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L23923
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_8502, 
	(
	);
	} // callseq 8
	mov.u64 	%rd106, exception1;
	cvta.global.u64 	%rd107, %rd106;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd107;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 9
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 10
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
