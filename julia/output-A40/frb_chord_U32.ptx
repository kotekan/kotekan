// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3916[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13928[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<334>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3848>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<414>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r406, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r415, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r415, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd36, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r407, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r416, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r417, %r416, %r1;
	add.s32 	%r418, %r417, %r4;
	mul.wide.u32 	%rd43, %r418, 4;
	add.s64 	%rd6, %rd36, %rd43;
	mov.u32 	%r419, 1;
	st.global.u32 	[%rd6], %r419;
	setp.gt.u32 	%p4, %r407, 1023;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r408, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r408, %r407;
	setp.gt.s32 	%p6, %r408, 2047;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r409, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r408, %r407;
	mad.lo.s32 	%r420, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r421, %r420, %r420, 4;
	setp.gt.u32 	%p8, %r421, 89478484;
	setp.gt.u32 	%p9, %r409, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r410, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r410, %r409;
	setp.lt.s32 	%p12, %r410, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r422, %r410, %r409;
	mul.hi.s32 	%r423, %r5, 715827883;
	shr.u32 	%r424, %r423, 31;
	add.s32 	%r425, %r423, %r424;
	setp.eq.s32 	%p14, %r422, %r425;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r411, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r411, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r412, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r412, %r411;
	setp.gt.s32 	%p17, %r412, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r413, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r412, %r411;
	and.b32  	%r426, %r6, 31;
	setp.ne.s32 	%p19, %r426, 0;
	setp.lt.s32 	%p20, %r413, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r414, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r414, %r413;
	setp.gt.s32 	%p23, %r414, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r427, %r414, %r413;
	and.b32  	%r428, %r427, 31;
	setp.eq.s32 	%p25, %r428, 0;
	setp.eq.s32 	%p26, %r427, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_13;
$L__BB0_206:                            // %pass162
	and.b32  	%r261, %r1, 3;
	shr.u32 	%r262, %r1, 2;
	mul.lo.s32 	%r429, %r261, %r262;
	and.b32  	%r430, %r429, 7;
	cvt.rn.f32.s32 	%f201, %r430;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p333, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_218;
// %bb.207:
	@%p333 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_208;
$L__BB0_214:
	mov.b32 	%r264, %f785;
	and.b32  	%r431, %r264, 8388607;
	or.b32  	%r3835, %r431, 1065353216;
	mov.b32 	%f780, %r3835;
	add.s32 	%r432, %r264, -1073741824;
	and.b32  	%r3836, %r432, -8388608;
	setp.eq.s32 	%p35, %r3836, 0;
	@%p35 bra 	$L__BB0_217;
// %bb.215:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_216:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r433, %r3836, 192937984;
	add.s32 	%r434, %r3835, %r433;
	mov.b32 	%f213, %r434;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3836, %r3836, %r433;
	mov.b32 	%r3835, %f780;
	setp.ne.s32 	%p36, %r3836, 0;
	setp.ne.s32 	%p37, %r3835, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_216;
$L__BB0_217:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r264, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_218;
$L__BB0_208:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r263, %f172;
	setp.lt.u32 	%p30, %r263, 1073741824;
	@%p30 bra 	$L__BB0_213;
// %bb.209:
	setp.lt.u32 	%p31, %r263, -2147483647;
	@%p31 bra 	$L__BB0_211;
// %bb.210:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_213;
$L__BB0_211:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_213;
// %bb.212:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_213:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_218:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r435, %f169;
	and.b32  	%r271, %r435, -2147483648;
	@%p40 bra 	$L__BB0_220;
// %bb.219:
	mov.b32 	%r436, %f781;
	or.b32  	%r437, %r271, %r436;
	mov.b32 	%f781, %r437;
$L__BB0_220:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r274, %r1, 1;
	and.b32  	%r275, %r274, 6;
	or.b32  	%r276, %r275, 1;
	setp.eq.s32 	%p48, %r275, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3732, %r275, %r262;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3732;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r453, %r8, 8388607;
	or.b32  	%r3736, %r453, 1065353216;
	mov.b32 	%f732, %r3736;
	add.s32 	%r454, %r8, -1073741824;
	and.b32  	%r3737, %r454, -8388608;
	setp.eq.s32 	%p56, %r3737, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1017.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1017
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3737, 192937984;
	add.s32 	%r456, %r3736, %r455;
	mov.b32 	%f267, %r456;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3737, %r3737, %r455;
	mov.b32 	%r3736, %f732;
	setp.ne.s32 	%p57, %r3737, 0;
	setp.ne.s32 	%p58, %r3736, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1019
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i996
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1000
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1003
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1022
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r457, %f1;
	and.b32  	%r458, %r457, -2147483648;
	mov.b32 	%r459, %f733;
	or.b32  	%r460, %r458, %r459;
	mov.b32 	%f733, %r460;
$L__BB0_28:                             // %__nv_fmodf.exit1023
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r461, %f277;
	and.b32  	%r462, %r461, -2147483648;
	or.b32  	%r463, %r462, 1056964608;
	mov.b32 	%f278, %r463;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r464, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r465, %r464, 1;
	setp.eq.b32 	%p64, %r465, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r466, %r464, 2;
	setp.eq.s32 	%p65, %r466, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r467, %r464, 1;
	and.b32  	%r468, %r467, 2;
	setp.eq.s32 	%p66, %r468, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r276, 5;
	mul.lo.s32 	%r3733, %r276, %r262;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r470, %r3733, -1431655765;
	shr.u32 	%r471, %r470, 5;
	mul.lo.s32 	%r472, %r471, 48;
	sub.s32 	%r473, %r3733, %r472;
	cvt.rn.f32.s32 	%f308, %r473;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r474, %r16, 8388607;
	or.b32  	%r3738, %r474, 1065353216;
	mov.b32 	%f738, %r3738;
	add.s32 	%r475, %r16, -1073741824;
	and.b32  	%r3739, %r475, -8388608;
	setp.eq.s32 	%p77, %r3739, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1048.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1048
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r476, %r3739, 192937984;
	add.s32 	%r477, %r3738, %r476;
	mov.b32 	%f320, %r477;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3739, %r3739, %r476;
	mov.b32 	%r3738, %f738;
	setp.ne.s32 	%p78, %r3739, 0;
	setp.ne.s32 	%p79, %r3738, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1050
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1027
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1031
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1034
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1053
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r478, %f22;
	and.b32  	%r479, %r478, -2147483648;
	mov.b32 	%r480, %f739;
	or.b32  	%r481, %r479, %r480;
	mov.b32 	%f739, %r481;
$L__BB0_44:                             // %__nv_fmodf.exit1054
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r482, %f330;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f331, %r484;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r485, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p85, %r486, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p86, %r487, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p87, %r489, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r1, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3732;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r497, %r26, 8388607;
	or.b32  	%r3740, %r497, 1065353216;
	mov.b32 	%f744, %r3740;
	add.s32 	%r498, %r26, -1073741824;
	and.b32  	%r3741, %r498, -8388608;
	setp.eq.s32 	%p99, %r3741, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1079.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1079
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r499, %r3741, 192937984;
	add.s32 	%r500, %r3740, %r499;
	mov.b32 	%f373, %r500;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3741, %r3741, %r499;
	mov.b32 	%r3740, %f744;
	setp.ne.s32 	%p100, %r3741, 0;
	setp.ne.s32 	%p101, %r3740, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1081
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1058
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1062
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1065
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1084
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r501, %f43;
	and.b32  	%r502, %r501, -2147483648;
	mov.b32 	%r503, %f745;
	or.b32  	%r504, %r502, %r503;
	mov.b32 	%f745, %r504;
$L__BB0_60:                             // %__nv_fmodf.exit1085
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r505, %f383;
	and.b32  	%r506, %r505, -2147483648;
	or.b32  	%r507, %r506, 1056964608;
	mov.b32 	%f384, %r507;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r508, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r509, %r508, 1;
	setp.eq.b32 	%p107, %r509, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r510, %r508, 2;
	setp.eq.s32 	%p108, %r510, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r511, %r508, 1;
	and.b32  	%r512, %r511, 2;
	setp.eq.s32 	%p109, %r512, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r514, %r3733, -1431655765;
	shr.u32 	%r515, %r514, 2;
	mul.lo.s32 	%r516, %r515, 6;
	sub.s32 	%r517, %r3733, %r516;
	cvt.rn.f32.s32 	%f414, %r517;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r518, %r34, 8388607;
	or.b32  	%r3742, %r518, 1065353216;
	mov.b32 	%f750, %r3742;
	add.s32 	%r519, %r34, -1073741824;
	and.b32  	%r3743, %r519, -8388608;
	setp.eq.s32 	%p121, %r3743, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1110.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1110
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r520, %r3743, 192937984;
	add.s32 	%r521, %r3742, %r520;
	mov.b32 	%f426, %r521;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3743, %r3743, %r520;
	mov.b32 	%r3742, %f750;
	setp.ne.s32 	%p122, %r3743, 0;
	setp.ne.s32 	%p123, %r3742, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1112
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1089
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1093
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1096
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1115
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r522, %f64;
	and.b32  	%r523, %r522, -2147483648;
	mov.b32 	%r524, %f751;
	or.b32  	%r525, %r523, %r524;
	mov.b32 	%f751, %r525;
$L__BB0_76:                             // %__nv_fmodf.exit1116
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r526, %f436;
	and.b32  	%r527, %r526, -2147483648;
	or.b32  	%r528, %r527, 1056964608;
	mov.b32 	%f437, %r528;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r529, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r530, %r529, 1;
	setp.eq.b32 	%p129, %r530, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r531, %r529, 2;
	setp.eq.s32 	%p130, %r531, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r532, %r529, 1;
	and.b32  	%r533, %r532, 2;
	setp.eq.s32 	%p131, %r533, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_228;
// %bb.78:
	@%p333 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_79;
$L__BB0_224:
	mov.b32 	%r278, %f785;
	and.b32  	%r546, %r278, 8388607;
	or.b32  	%r3837, %r546, 1065353216;
	mov.b32 	%f784, %r3837;
	add.s32 	%r547, %r278, -1073741824;
	and.b32  	%r3838, %r547, -8388608;
	setp.eq.s32 	%p141, %r3838, 0;
	@%p141 bra 	$L__BB0_227;
// %bb.225:                             // %__nv_fmaf_rn.exit4.i.i.i1141.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_226:                            // %__nv_fmaf_rn.exit4.i.i.i1141
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r548, %r3838, 192937984;
	add.s32 	%r549, %r3837, %r548;
	mov.b32 	%f476, %r549;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3838, %r3838, %r548;
	mov.b32 	%r3837, %f784;
	setp.ne.s32 	%p142, %r3838, 0;
	setp.ne.s32 	%p143, %r3837, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_226;
$L__BB0_227:                            // %__internal_fmodf_slowpath_mod.exit.i.i1143
	setp.gt.u32 	%p145, %r278, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_228;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r277, %f187;
	setp.lt.u32 	%p136, %r277, 1073741824;
	@%p136 bra 	$L__BB0_223;
// %bb.80:
	setp.lt.u32 	%p137, %r277, -2147483647;
	@%p137 bra 	$L__BB0_221;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_223;
$L__BB0_221:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_223;
// %bb.222:                             // %__nv_fmaf_rn.exit.i.i.i1124
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_223:                            // %__internal_fmodf_fastpath_quot.exit.i.i1127
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_228:                            // %__internal_fmodf_kernel.exit.i1146
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_230;
// %bb.229:
	mov.b32 	%r550, %f785;
	or.b32  	%r551, %r271, %r550;
	mov.b32 	%f785, %r551;
$L__BB0_230:                            // %__nv_fmodf.exit1147
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3732;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r567, %r46, 8388607;
	or.b32  	%r3744, %r567, 1065353216;
	mov.b32 	%f756, %r3744;
	add.s32 	%r568, %r46, -1073741824;
	and.b32  	%r3745, %r568, -8388608;
	setp.eq.s32 	%p162, %r3745, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1172.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1172
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r569, %r3745, 192937984;
	add.s32 	%r570, %r3744, %r569;
	mov.b32 	%f530, %r570;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3745, %r3745, %r569;
	mov.b32 	%r3744, %f756;
	setp.ne.s32 	%p163, %r3745, 0;
	setp.ne.s32 	%p164, %r3744, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1174
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1151
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1155
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1158
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1177
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r571, %f85;
	and.b32  	%r572, %r571, -2147483648;
	mov.b32 	%r573, %f757;
	or.b32  	%r574, %r572, %r573;
	mov.b32 	%f757, %r574;
$L__BB0_96:                             // %__nv_fmodf.exit1178
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r575, %f540;
	and.b32  	%r576, %r575, -2147483648;
	or.b32  	%r577, %r576, 1056964608;
	mov.b32 	%f541, %r577;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r578, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r579, %r578, 1;
	setp.eq.b32 	%p170, %r579, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r580, %r578, 2;
	setp.eq.s32 	%p171, %r580, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r581, %r578, 1;
	and.b32  	%r582, %r581, 2;
	setp.eq.s32 	%p172, %r582, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r584, %r3733, -1431655765;
	shr.u32 	%r585, %r584, 5;
	mul.lo.s32 	%r586, %r585, 48;
	sub.s32 	%r587, %r3733, %r586;
	cvt.rn.f32.s32 	%f571, %r587;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r588, %r54, 8388607;
	or.b32  	%r3746, %r588, 1065353216;
	mov.b32 	%f762, %r3746;
	add.s32 	%r589, %r54, -1073741824;
	and.b32  	%r3747, %r589, -8388608;
	setp.eq.s32 	%p183, %r3747, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1203.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1203
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r590, %r3747, 192937984;
	add.s32 	%r591, %r3746, %r590;
	mov.b32 	%f583, %r591;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3747, %r3747, %r590;
	mov.b32 	%r3746, %f762;
	setp.ne.s32 	%p184, %r3747, 0;
	setp.ne.s32 	%p185, %r3746, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1205
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1182
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1186
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1189
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1208
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r592, %f106;
	and.b32  	%r593, %r592, -2147483648;
	mov.b32 	%r594, %f763;
	or.b32  	%r595, %r593, %r594;
	mov.b32 	%f763, %r595;
$L__BB0_112:                            // %__nv_fmodf.exit1209
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r596, %f593;
	and.b32  	%r597, %r596, -2147483648;
	or.b32  	%r598, %r597, 1056964608;
	mov.b32 	%f594, %r598;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r599, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r600, %r599, 1;
	setp.eq.b32 	%p191, %r600, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r601, %r599, 2;
	setp.eq.s32 	%p192, %r601, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r602, %r599, 1;
	and.b32  	%r603, %r602, 2;
	setp.eq.s32 	%p193, %r603, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3732;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r611, %r64, 8388607;
	or.b32  	%r3748, %r611, 1065353216;
	mov.b32 	%f768, %r3748;
	add.s32 	%r612, %r64, -1073741824;
	and.b32  	%r3749, %r612, -8388608;
	setp.eq.s32 	%p203, %r3749, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1234.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1234
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r613, %r3749, 192937984;
	add.s32 	%r614, %r3748, %r613;
	mov.b32 	%f636, %r614;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3749, %r3749, %r613;
	mov.b32 	%r3748, %f768;
	setp.ne.s32 	%p204, %r3749, 0;
	setp.ne.s32 	%p205, %r3748, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1236
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1213
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1220
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1239
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r615, %f127;
	and.b32  	%r616, %r615, -2147483648;
	mov.b32 	%r617, %f769;
	or.b32  	%r618, %r616, %r617;
	mov.b32 	%f769, %r618;
$L__BB0_128:                            // %__nv_fmodf.exit1240
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r619, %f646;
	and.b32  	%r620, %r619, -2147483648;
	or.b32  	%r621, %r620, 1056964608;
	mov.b32 	%f647, %r621;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r622, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r623, %r622, 1;
	setp.eq.b32 	%p211, %r623, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r624, %r622, 2;
	setp.eq.s32 	%p212, %r624, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r625, %r622, 1;
	and.b32  	%r626, %r625, 2;
	setp.eq.s32 	%p213, %r626, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r628, %r3733, -1431655765;
	shr.u32 	%r629, %r628, 2;
	mul.lo.s32 	%r630, %r629, 6;
	sub.s32 	%r631, %r3733, %r630;
	cvt.rn.f32.s32 	%f677, %r631;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r632, %r72, 8388607;
	or.b32  	%r3750, %r632, 1065353216;
	mov.b32 	%f774, %r3750;
	add.s32 	%r633, %r72, -1073741824;
	and.b32  	%r3751, %r633, -8388608;
	setp.eq.s32 	%p223, %r3751, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1265.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1265
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r634, %r3751, 192937984;
	add.s32 	%r635, %r3750, %r634;
	mov.b32 	%f689, %r635;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3751, %r3751, %r634;
	mov.b32 	%r3750, %f774;
	setp.ne.s32 	%p224, %r3751, 0;
	setp.ne.s32 	%p225, %r3750, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1267
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1244
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1248
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1251
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1270
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r636, %f148;
	and.b32  	%r637, %r636, -2147483648;
	mov.b32 	%r638, %f775;
	or.b32  	%r639, %r637, %r638;
	mov.b32 	%f775, %r639;
$L__BB0_144:                            // %__nv_fmodf.exit1271
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r640, %f699;
	and.b32  	%r641, %r640, -2147483648;
	or.b32  	%r642, %r641, 1056964608;
	mov.b32 	%f700, %r642;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r643, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r644, %r643, 1;
	setp.eq.b32 	%p231, %r644, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r645, %r643, 2;
	setp.eq.s32 	%p232, %r645, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r646, %r643, 1;
	and.b32  	%r647, %r646, 2;
	setp.eq.s32 	%p233, %r647, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r287, 999999999;
	cvt.u16.u32 	%rs247, %r1;
	@%p91 bra 	$L__BB0_232;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r661, %rs34;
	and.b32  	%r662, %r661, 255;
	mad.lo.s32 	%r663, %r662, 24, %r3;
	cvt.u16.u32 	%rs35, %r663;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r664, %rs39;
	mul.wide.u32 	%rd44, %r664, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.u32 	%r665, [%rd45];
	shl.b32 	%r666, %r665, 16;
	cvt.s32.s16 	%r83, %r665;
	shr.s32 	%r84, %r665, 16;
	or.b32  	%r667, %r666, 65535;
	setp.lt.u32 	%p237, %r667, 1638399;
	setp.lt.u32 	%p238, %r665, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_147;
$L__BB0_231:                            // %L1237
	mul.lo.s32 	%r671, %r84, 801;
	mad.lo.s32 	%r287, %r83, 33, %r671;
$L__BB0_232:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r444, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r445, %r444, -2147483648;
	mov.b32 	%r558, %f487;
	or.b32  	%r446, %r445, 1056964608;
	and.b32  	%r559, %r558, -2147483648;
	mov.b32 	%f225, %r446;
	or.b32  	%r560, %r559, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r560;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r447, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r448, %r447, 1;
	cvt.rzi.s32.f32 	%r561, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r448, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r562, %r561, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r449, %r447, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r562, 1;
	setp.eq.s32 	%p44, %r449, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r450, %r447, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r563, %r561, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r451, %r450, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r563, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r564, %r561, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r451, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r565, %r564, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r565, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r440, %f254;
	mov.b32 	%r443, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r439, %r443, -2147483648;
	mov.b32 	%r535, %f62;
	mov.b32 	%r536, %f83;
	mov.b32 	%r541, %f63;
	mov.b32 	%r542, %f84;
	mov.b32 	%r554, %f517;
	mov.b32 	%r557, %f514;
	mov.b32 	%r491, %f20;
	mov.b32 	%r492, %f41;
	mov.b32 	%r494, %f21;
	mov.b32 	%r495, %f42;
	xor.b32  	%r538, %r541, -2147483648;
	xor.b32  	%r539, %r542, -2147483648;
	xor.b32  	%r553, %r557, -2147483648;
	mov.b32 	%r605, %f104;
	mov.b32 	%r606, %f125;
	mov.b32 	%r608, %f105;
	mov.b32 	%r609, %f126;
	mov.b32 	%r649, %f146;
	mov.b32 	%r650, %f167;
	mov.b32 	%r655, %f147;
	xor.b32  	%r652, %r655, -2147483648;
	mov.b32 	%r656, %f168;
	xor.b32  	%r653, %r656, -2147483648;
	and.b32  	%r672, %r1, 24;
	setp.ne.s32 	%p240, %r672, 24;
	cvt.u16.u32 	%rs248, %r262;
	mul.lo.s32 	%r3752, %r2, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.233:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r684, %rs50;
	and.b32  	%r3753, %r684, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r673, %r261, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r674, %rs44;
	and.b32  	%r3753, %r674, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r675, %rs45, 24;
	or.b32  	%r676, %r3752, %r3;
	add.s32 	%r677, %r676, %r673;
	add.s32 	%r678, %r677, %r675;
	mul.wide.u32 	%rd51, %r678, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r88, [%rd52];
	or.b32  	%r679, %r3, 576;
	add.s32 	%r680, %r679, %r3752;
	add.s32 	%r681, %r680, %r673;
	add.s32 	%r682, %r681, %r675;
	mul.wide.u32 	%rd53, %r682, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.u32 	%r89, [%rd54];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r490, %r492, %r491;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r493, %r495, %r494;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r537, %r539, %r538;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r540, %r542, %r541;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r543, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r552, %r554, %r553;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r557, %r554;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r604, %r606, %r605;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r607, %r609, %r608;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r648, %r650, %r649;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r651, %r653, %r652;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r654, %r656, %r655;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r657, %r650, %r649;
	// end inline asm
	mov.u32 	%r123, 0;
	shl.b32 	%r686, %r407, 16;
	shl.b32 	%r687, %r411, 8;
	add.s32 	%r90, %r687, %r686;
	shl.b32 	%r688, %r1, 2;
	and.b32  	%r689, %r688, 60;
	shl.b32 	%r690, %r1, 3;
	and.b32  	%r691, %r690, 128;
	or.b32  	%r91, %r689, %r691;
	shl.b32 	%r92, %r2, 8;
	or.b32  	%r93, %r688, %r691;
	or.b32  	%r94, %r92, 64;
	add.s32 	%r95, %r3, 24;
	shr.u32 	%r692, %r1, 4;
	and.b32  	%r693, %r274, 30;
	or.b32  	%r694, %r693, %r692;
	mul.lo.s32 	%r96, %r694, 257;
	or.b32  	%r695, %r274, %r692;
	or.b32  	%r696, %r695, 32;
	mul.lo.s32 	%r97, %r696, 257;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r697, %rs56;
	and.b32  	%r98, %r697, 255;
	shr.u32 	%r698, %r3, 3;
	and.b32  	%r699, %r4, 224;
	mad.lo.s32 	%r99, %r698, 257, %r699;
	shr.u32 	%r700, %r95, 3;
	mad.lo.s32 	%r100, %r700, 257, %r699;
	add.s32 	%r701, %r3, 48;
	shr.u32 	%r702, %r701, 3;
	mad.lo.s32 	%r101, %r702, 257, %r699;
	add.s32 	%r703, %r3, 72;
	shr.u32 	%r704, %r703, 3;
	mad.lo.s32 	%r102, %r704, 257, %r699;
	or.b32  	%r705, %r698, 12;
	mad.lo.s32 	%r103, %r705, 257, %r699;
	add.s32 	%r706, %r3, 120;
	shr.u32 	%r707, %r706, 3;
	mad.lo.s32 	%r104, %r707, 257, %r699;
	add.s32 	%r708, %r3, 144;
	shr.u32 	%r709, %r708, 3;
	mad.lo.s32 	%r105, %r709, 257, %r699;
	add.s32 	%r710, %r3, 168;
	shr.u32 	%r711, %r710, 3;
	mad.lo.s32 	%r106, %r711, 257, %r699;
	or.b32  	%r712, %r698, 24;
	mad.lo.s32 	%r107, %r712, 257, %r699;
	add.s32 	%r713, %r3, 216;
	shr.u32 	%r714, %r713, 3;
	mad.lo.s32 	%r108, %r714, 257, %r699;
	add.s32 	%r715, %r3, 240;
	shr.u32 	%r716, %r715, 3;
	mad.lo.s32 	%r109, %r716, 257, %r699;
	add.s32 	%r717, %r3, 264;
	shr.u32 	%r718, %r717, 3;
	mad.lo.s32 	%r110, %r718, 257, %r699;
	or.b32  	%r719, %r698, 36;
	mad.lo.s32 	%r111, %r719, 257, %r699;
	add.s32 	%r720, %r3, 312;
	shr.u32 	%r721, %r720, 3;
	mad.lo.s32 	%r112, %r721, 257, %r699;
	add.s32 	%r722, %r3, 336;
	shr.u32 	%r723, %r722, 3;
	mad.lo.s32 	%r113, %r723, 257, %r699;
	add.s32 	%r724, %r3, 360;
	shr.u32 	%r725, %r724, 3;
	mad.lo.s32 	%r114, %r725, 257, %r699;
	or.b32  	%r726, %r698, 48;
	mad.lo.s32 	%r115, %r726, 257, %r699;
	add.s32 	%r727, %r3, 408;
	shr.u32 	%r728, %r727, 3;
	mad.lo.s32 	%r116, %r728, 257, %r699;
	add.s32 	%r729, %r3, 432;
	shr.u32 	%r730, %r729, 3;
	mad.lo.s32 	%r117, %r730, 257, %r699;
	add.s32 	%r731, %r3, 456;
	shr.u32 	%r732, %r731, 3;
	mad.lo.s32 	%r118, %r732, 257, %r699;
	or.b32  	%r733, %r698, 60;
	mad.lo.s32 	%r119, %r733, 257, %r699;
	add.s32 	%r734, %r3, 504;
	bfe.u32 	%r735, %r734, 3, 6;
	mad.lo.s32 	%r120, %r735, 257, %r699;
	mul.lo.s32 	%r736, %r3, 33;
	mad.lo.s32 	%r737, %r261, 4806, %r736;
	mad.lo.s32 	%r738, %r3753, 801, %r737;
	and.b32  	%r739, %r1, 1;
	neg.s32 	%r740, %r739;
	and.b32  	%r741, %r740, 4112;
	bfe.s32 	%r742, %r1, 3, 1;
	and.b32  	%r743, %r742, 514;
	mul.lo.s32 	%r744, %r692, 257;
	bfe.s32 	%r745, %r1, 1, 1;
	and.b32  	%r746, %r745, 2056;
	bfe.s32 	%r747, %r1, 2, 1;
	and.b32  	%r748, %r747, 1028;
	add.s32 	%r749, %r744, %r3;
	add.s32 	%r750, %r749, %r743;
	add.s32 	%r751, %r750, %r741;
	add.s32 	%r752, %r751, %r746;
	add.s32 	%r753, %r752, %r748;
	mul.wide.u32 	%rd55, %r753, 4;
	mov.u64 	%rd56, shmem;
	add.s64 	%rd7, %rd56, %rd55;
	or.b32  	%r754, %r3, 8256;
	add.s32 	%r755, %r754, %r744;
	add.s32 	%r756, %r755, %r743;
	add.s32 	%r757, %r756, %r741;
	add.s32 	%r758, %r757, %r746;
	add.s32 	%r759, %r758, %r748;
	mul.wide.u32 	%rd57, %r759, 4;
	add.s64 	%rd8, %rd56, %rd57;
	or.b32  	%r760, %r741, %r743;
	or.b32  	%r761, %r3, 32;
	add.s32 	%r762, %r761, %r744;
	add.s32 	%r763, %r762, %r746;
	add.s32 	%r764, %r763, %r748;
	add.s32 	%r765, %r764, %r760;
	mul.wide.u32 	%rd58, %r765, 4;
	add.s64 	%rd9, %rd56, %rd58;
	or.b32  	%r766, %r3, 8288;
	add.s32 	%r767, %r766, %r744;
	add.s32 	%r768, %r767, %r746;
	add.s32 	%r769, %r768, %r748;
	add.s32 	%r770, %r769, %r760;
	mul.wide.u32 	%rd59, %r770, 4;
	add.s64 	%rd10, %rd56, %rd59;
	bfe.s32 	%r771, %r3, 1, 1;
	and.b32  	%r772, %r771, 4112;
	mul.lo.s32 	%r773, %r261, 6;
	shr.u32 	%r774, %r3, 4;
	mul.lo.s32 	%r775, %r774, 514;
	bfe.s32 	%r776, %r3, 2, 1;
	and.b32  	%r777, %r776, 2056;
	bfe.s32 	%r778, %r3, 3, 1;
	and.b32  	%r779, %r3, 8;
	setp.eq.s32 	%p241, %r779, 0;
	and.b32  	%r780, %r778, 1028;
	and.b32  	%r781, %r3, 1;
	neg.s32 	%r782, %r781;
	and.b32  	%r783, %r782, 8256;
	add.s32 	%r784, %r775, %r773;
	add.s32 	%r785, %r784, %r772;
	add.s32 	%r786, %r785, %r777;
	add.s32 	%r787, %r786, %r780;
	add.s32 	%r788, %r787, %r783;
	add.s32 	%r789, %r788, %r3753;
	mul.wide.u32 	%rd60, %r789, 4;
	add.s64 	%rd11, %rd56, %rd60;
	bfe.s32 	%r790, %r95, 4, 1;
	and.b32  	%r791, %r790, 514;
	shr.u32 	%r792, %r95, 5;
	mul.lo.s32 	%r793, %r792, 257;
	selp.b32 	%r794, 1028, 0, %p241;
	add.s32 	%r795, %r772, %r773;
	add.s32 	%r796, %r795, %r793;
	add.s32 	%r797, %r796, %r777;
	add.s32 	%r798, %r797, %r794;
	add.s32 	%r799, %r798, %r783;
	add.s32 	%r800, %r799, %r3753;
	add.s32 	%r801, %r800, %r791;
	mul.wide.u32 	%rd61, %r801, 4;
	add.s64 	%rd12, %rd56, %rd61;
	add.s32 	%r802, %r795, 32;
	add.s32 	%r803, %r802, %r775;
	add.s32 	%r804, %r803, %r777;
	add.s32 	%r805, %r804, %r780;
	add.s32 	%r806, %r805, %r783;
	add.s32 	%r807, %r806, %r3753;
	mul.wide.u32 	%rd62, %r807, 4;
	add.s64 	%rd13, %rd56, %rd62;
	add.s32 	%r808, %r802, %r793;
	add.s32 	%r809, %r808, %r777;
	add.s32 	%r810, %r809, %r794;
	add.s32 	%r811, %r810, %r783;
	add.s32 	%r812, %r811, %r3753;
	add.s32 	%r813, %r812, %r791;
	mul.wide.u32 	%rd63, %r813, 4;
	add.s64 	%rd14, %rd56, %rd63;
	mul.lo.s32 	%r814, %r409, 589824;
	mad.lo.s32 	%r815, %r413, 1152, %r814;
	mad.lo.s32 	%r816, %r3, 24, %r3752;
	add.s32 	%r121, %r816, %r98;
	cvt.s64.s32 	%rd15, %r815;
	cvt.u16.u32 	%rs57, %r95;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r817, %rs62;
	and.b32  	%r818, %r817, 255;
	or.b32  	%r819, %r3752, %r98;
	mad.lo.s32 	%r122, %r818, 24, %r819;
	mul.wide.u32 	%rd64, %r738, 4;
	add.s64 	%rd16, %rd56, %rd64;
	add.s32 	%r820, %r753, 64;
	mul.wide.u32 	%rd65, %r820, 4;
	add.s64 	%rd17, %rd56, %rd65;
	add.s32 	%r821, %r759, 64;
	mul.wide.u32 	%rd66, %r821, 4;
	add.s64 	%rd18, %rd56, %rd66;
	add.s32 	%r822, %r753, 128;
	mul.wide.u32 	%rd67, %r822, 4;
	add.s64 	%rd19, %rd56, %rd67;
	add.s32 	%r823, %r759, 128;
	mul.wide.u32 	%rd68, %r823, 4;
	add.s64 	%rd20, %rd56, %rd68;
	add.s32 	%r824, %r753, 192;
	mul.wide.u32 	%rd69, %r824, 4;
	add.s64 	%rd21, %rd56, %rd69;
	add.s32 	%r825, %r759, 192;
	mul.wide.u32 	%rd70, %r825, 4;
	add.s64 	%rd22, %rd56, %rd70;
	add.s32 	%r826, %r789, 64;
	mul.wide.u32 	%rd71, %r826, 4;
	add.s64 	%rd23, %rd56, %rd71;
	add.s32 	%r827, %r801, 64;
	mul.wide.u32 	%rd72, %r827, 4;
	add.s64 	%rd24, %rd56, %rd72;
	add.s32 	%r828, %r807, 64;
	mul.wide.u32 	%rd73, %r828, 4;
	add.s64 	%rd25, %rd56, %rd73;
	add.s32 	%r829, %r813, 64;
	mul.wide.u32 	%rd74, %r829, 4;
	add.s64 	%rd26, %rd56, %rd74;
	add.s32 	%r830, %r789, 128;
	mul.wide.u32 	%rd75, %r830, 4;
	add.s64 	%rd27, %rd56, %rd75;
	add.s32 	%r831, %r801, 128;
	mul.wide.u32 	%rd76, %r831, 4;
	add.s64 	%rd28, %rd56, %rd76;
	add.s32 	%r832, %r807, 128;
	mul.wide.u32 	%rd77, %r832, 4;
	add.s64 	%rd29, %rd56, %rd77;
	add.s32 	%r833, %r813, 128;
	mul.wide.u32 	%rd78, %r833, 4;
	add.s64 	%rd30, %rd56, %rd78;
	add.s32 	%r834, %r789, 192;
	mul.wide.u32 	%rd79, %r834, 4;
	add.s64 	%rd31, %rd56, %rd79;
	add.s32 	%r835, %r801, 192;
	mul.wide.u32 	%rd80, %r835, 4;
	add.s64 	%rd32, %rd56, %rd80;
	add.s32 	%r836, %r807, 192;
	mul.wide.u32 	%rd81, %r836, 4;
	add.s64 	%rd33, %rd56, %rd81;
	add.s32 	%r837, %r813, 192;
	mul.wide.u32 	%rd82, %r837, 4;
	add.s64 	%rd34, %rd56, %rd82;
	setp.lt.u32 	%p243, %r1, 16;
	setp.gt.u32 	%p272, %r3, 7;
	setp.lt.u32 	%p276, %r1, 24;
	mov.u32 	%r3786, %r123;
	mov.u32 	%r3787, %r123;
	mov.u32 	%r3788, %r123;
	mov.u32 	%r3789, %r123;
	bra.uni 	$L__BB0_150;
$L__BB0_204:                            // %L42037
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r260, %r123, 48;
	setp.ne.s32 	%p332, %r123, 960;
	mov.u32 	%r123, %r260;
	@%p332 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_205;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_191 Depth 2
	add.s32 	%r838, %r123, %r407;
	setp.lt.s32 	%p242, %r838, %r408;
	@%p242 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_205;
$L__BB0_151:                            // %oksrem693
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1031, %r123, -1431655765;
	shr.u32 	%r1032, %r1031, 5;
	mul.lo.s32 	%r294, %r1032, 48;
	add.s32 	%r1033, %r294, %r3;
	cvt.u16.u32 	%rs63, %r1033;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 6;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -1024;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r1034, %rs68;
	shl.b32 	%r1035, %r1034, 16;
	or.b32  	%r1036, %r1035, %r91;
	or.b32  	%r1037, %r1036, %r92;
	add.s32 	%r1038, %r90, %r1037;
	shr.s32 	%r1039, %r1038, 31;
	shr.u32 	%r1040, %r1039, 6;
	add.s32 	%r1041, %r1038, %r1040;
	shr.s32 	%r1042, %r1041, 26;
	setp.lt.s32 	%p244, %r1038, 0;
	and.b32  	%r1043, %r1041, -67108864;
	setp.ne.s32 	%p245, %r1043, %r1038;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r1044, 1, 0, %p246;
	sub.s32 	%r1045, %r1044, %r1042;
	shl.b32 	%r1046, %r1045, 26;
	add.s32 	%r1047, %r1046, %r1038;
	mul.wide.s32 	%rd83, %r1047, 4;
	add.s64 	%rd84, %rd3, %rd83;
	ld.global.v4.u32 	{%r1048, %r1049, %r1050, %r1051}, [%rd84];
	or.b32  	%r1052, %r1035, %r93;
	or.b32  	%r1053, %r94, %r1052;
	add.s32 	%r1054, %r90, %r1053;
	shr.s32 	%r1055, %r1054, 31;
	shr.u32 	%r1056, %r1055, 6;
	add.s32 	%r1057, %r1054, %r1056;
	shr.u32 	%r1058, %r1057, 26;
	shr.u32 	%r1059, %r1054, 31;
	sub.s32 	%r1060, %r1059, %r1058;
	shl.b32 	%r1061, %r1060, 26;
	or.b32  	%r1062, %r1054, 1;
	add.s32 	%r1063, %r1062, %r1061;
	mul.wide.s32 	%rd85, %r1063, 4;
	add.s64 	%rd86, %rd3, %rd85;
	ld.global.v4.u32 	{%r1064, %r1065, %r1066, %r1067}, [%rd86+-4];
	add.s32 	%r1068, %r95, %r294;
	cvt.u16.u32 	%rs69, %r1068;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 6;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -1024;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.u32.u16 	%r1069, %rs74;
	shl.b32 	%r1070, %r1069, 16;
	or.b32  	%r1071, %r1070, %r91;
	or.b32  	%r1072, %r1071, %r92;
	add.s32 	%r1073, %r90, %r1072;
	shr.s32 	%r1074, %r1073, 31;
	shr.u32 	%r1075, %r1074, 6;
	add.s32 	%r1076, %r1073, %r1075;
	shr.s32 	%r1077, %r1076, 26;
	setp.lt.s32 	%p247, %r1073, 0;
	and.b32  	%r1078, %r1076, -67108864;
	setp.ne.s32 	%p248, %r1078, %r1073;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r1079, 1, 0, %p249;
	sub.s32 	%r1080, %r1079, %r1077;
	shl.b32 	%r1081, %r1080, 26;
	add.s32 	%r1082, %r1081, %r1073;
	mul.wide.s32 	%rd87, %r1082, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r1083, %r1084, %r1085, %r1086}, [%rd88];
	or.b32  	%r1087, %r1070, %r93;
	or.b32  	%r1088, %r94, %r1087;
	add.s32 	%r1089, %r90, %r1088;
	shr.s32 	%r1090, %r1089, 31;
	shr.u32 	%r1091, %r1090, 6;
	add.s32 	%r1092, %r1089, %r1091;
	shr.u32 	%r1093, %r1092, 26;
	shr.u32 	%r1094, %r1089, 31;
	sub.s32 	%r1095, %r1094, %r1093;
	shl.b32 	%r1096, %r1095, 26;
	or.b32  	%r1097, %r1089, 1;
	add.s32 	%r1098, %r1097, %r1096;
	mul.wide.s32 	%rd89, %r1098, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r1099, %r1100, %r1101, %r1102}, [%rd90+-4];
	selp.b32 	%r1103, %r1050, %r1048, %p243;
	shfl.sync.bfly.b32	%r1104, %r1103, 16, 31, -1;
	selp.b32 	%r841, %r1048, %r1104, %p243;
	selp.b32 	%r846, %r1104, %r1050, %p243;
	selp.b32 	%r1105, %r1051, %r1049, %p243;
	shfl.sync.bfly.b32	%r1106, %r1105, 16, 31, -1;
	selp.b32 	%r849, %r1049, %r1106, %p243;
	selp.b32 	%r854, %r1106, %r1051, %p243;
	selp.b32 	%r1107, %r1066, %r1064, %p243;
	shfl.sync.bfly.b32	%r1108, %r1107, 16, 31, -1;
	selp.b32 	%r857, %r1064, %r1108, %p243;
	selp.b32 	%r862, %r1108, %r1066, %p243;
	selp.b32 	%r1109, %r1067, %r1065, %p243;
	shfl.sync.bfly.b32	%r1110, %r1109, 16, 31, -1;
	selp.b32 	%r865, %r1065, %r1110, %p243;
	selp.b32 	%r870, %r1110, %r1067, %p243;
	selp.b32 	%r1111, %r1085, %r1083, %p243;
	shfl.sync.bfly.b32	%r1112, %r1111, 16, 31, -1;
	selp.b32 	%r873, %r1083, %r1112, %p243;
	selp.b32 	%r878, %r1112, %r1085, %p243;
	selp.b32 	%r1113, %r1086, %r1084, %p243;
	shfl.sync.bfly.b32	%r1114, %r1113, 16, 31, -1;
	selp.b32 	%r881, %r1084, %r1114, %p243;
	selp.b32 	%r886, %r1114, %r1086, %p243;
	selp.b32 	%r1115, %r1101, %r1099, %p243;
	shfl.sync.bfly.b32	%r1116, %r1115, 16, 31, -1;
	selp.b32 	%r889, %r1099, %r1116, %p243;
	selp.b32 	%r894, %r1116, %r1101, %p243;
	selp.b32 	%r1117, %r1102, %r1100, %p243;
	shfl.sync.bfly.b32	%r1118, %r1117, 16, 31, -1;
	selp.b32 	%r897, %r1100, %r1118, %p243;
	selp.b32 	%r902, %r1118, %r1102, %p243;
	shl.b32 	%r842, %r846, 4;
	mov.u32 	%r840, 252645135;
	// begin inline asm
	lop3.b32 %r904, %r840, %r841, %r842, 202;
	// end inline asm
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r920, %r840, %r845, %r846, 202;
	// end inline asm
	shl.b32 	%r850, %r854, 4;
	// begin inline asm
	lop3.b32 %r912, %r840, %r849, %r850, 202;
	// end inline asm
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r928, %r840, %r853, %r854, 202;
	// end inline asm
	shl.b32 	%r858, %r862, 4;
	// begin inline asm
	lop3.b32 %r936, %r840, %r857, %r858, 202;
	// end inline asm
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r952, %r840, %r861, %r862, 202;
	// end inline asm
	shl.b32 	%r866, %r870, 4;
	// begin inline asm
	lop3.b32 %r944, %r840, %r865, %r866, 202;
	// end inline asm
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r960, %r840, %r869, %r870, 202;
	// end inline asm
	shl.b32 	%r874, %r878, 4;
	// begin inline asm
	lop3.b32 %r905, %r840, %r873, %r874, 202;
	// end inline asm
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r921, %r840, %r877, %r878, 202;
	// end inline asm
	shl.b32 	%r882, %r886, 4;
	// begin inline asm
	lop3.b32 %r913, %r840, %r881, %r882, 202;
	// end inline asm
	shr.u32 	%r885, %r881, 4;
	// begin inline asm
	lop3.b32 %r929, %r840, %r885, %r886, 202;
	// end inline asm
	shl.b32 	%r890, %r894, 4;
	// begin inline asm
	lop3.b32 %r937, %r840, %r889, %r890, 202;
	// end inline asm
	shr.u32 	%r893, %r889, 4;
	// begin inline asm
	lop3.b32 %r953, %r840, %r893, %r894, 202;
	// end inline asm
	shl.b32 	%r898, %r902, 4;
	// begin inline asm
	lop3.b32 %r945, %r840, %r897, %r898, 202;
	// end inline asm
	shr.u32 	%r901, %r897, 4;
	// begin inline asm
	lop3.b32 %r961, %r840, %r901, %r902, 202;
	// end inline asm
	mov.u32 	%r906, 25152;
	// begin inline asm
	prmt.b32 %r968, %r904, %r905, %r906;
	// end inline asm
	mov.u32 	%r910, 29521;
	// begin inline asm
	prmt.b32 %r1000, %r904, %r905, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r976, %r912, %r913, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1008, %r912, %r913, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r920, %r921, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r920, %r921, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r928, %r929, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r928, %r929, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r984, %r936, %r937, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1016, %r936, %r937, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r992, %r944, %r945, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1024, %r944, %r945, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r952, %r953, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1017, %r952, %r953, %r910;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r960, %r961, %r906;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1025, %r960, %r961, %r910;
	// end inline asm
	mov.u32 	%r1026, 21520;
	// begin inline asm
	prmt.b32 %r967, %r968, %r969, %r1026;
	// end inline asm
	mov.u32 	%r1030, 30258;
	// begin inline asm
	prmt.b32 %r971, %r968, %r969, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r976, %r977, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r976, %r977, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r984, %r985, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r984, %r985, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r992, %r993, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r992, %r993, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r1000, %r1001, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r1000, %r1001, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r1008, %r1009, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r1008, %r1009, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r1016, %r1017, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1019, %r1016, %r1017, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1023, %r1024, %r1025, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1027, %r1024, %r1025, %r1030;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1119, %rs80;
	add.s32 	%r1120, %r96, %r1119;
	mul.wide.s32 	%rd91, %r1120, 4;
	add.s64 	%rd93, %rd56, %rd91;
	st.shared.u32 	[%rd93], %r967;
	add.s32 	%r1121, %r1120, 128;
	mul.wide.u32 	%rd94, %r1121, 4;
	add.s64 	%rd95, %rd56, %rd94;
	st.shared.u32 	[%rd95], %r975;
	add.s32 	%r1122, %r1120, 64;
	mul.wide.u32 	%rd96, %r1122, 4;
	add.s64 	%rd97, %rd56, %rd96;
	st.shared.u32 	[%rd97], %r971;
	add.s32 	%r1123, %r1120, 192;
	mul.wide.u32 	%rd98, %r1123, 4;
	add.s64 	%rd99, %rd56, %rd98;
	st.shared.u32 	[%rd99], %r979;
	add.s32 	%r1124, %r97, %r1119;
	mul.wide.u32 	%rd100, %r1124, 4;
	add.s64 	%rd101, %rd56, %rd100;
	st.shared.u32 	[%rd101], %r983;
	add.s32 	%r1125, %r1124, 128;
	mul.wide.u32 	%rd102, %r1125, 4;
	add.s64 	%rd103, %rd56, %rd102;
	st.shared.u32 	[%rd103], %r991;
	add.s32 	%r1126, %r1124, 64;
	mul.wide.u32 	%rd104, %r1126, 4;
	add.s64 	%rd105, %rd56, %rd104;
	st.shared.u32 	[%rd105], %r987;
	add.s32 	%r1127, %r1124, 192;
	mul.wide.u32 	%rd106, %r1127, 4;
	add.s64 	%rd107, %rd56, %rd106;
	st.shared.u32 	[%rd107], %r995;
	add.s32 	%r1128, %r1120, 32;
	mul.wide.u32 	%rd108, %r1128, 4;
	add.s64 	%rd109, %rd56, %rd108;
	st.shared.u32 	[%rd109], %r999;
	add.s32 	%r1129, %r1120, 160;
	mul.wide.u32 	%rd110, %r1129, 4;
	add.s64 	%rd111, %rd56, %rd110;
	st.shared.u32 	[%rd111], %r1007;
	add.s32 	%r1130, %r1120, 96;
	mul.wide.u32 	%rd112, %r1130, 4;
	add.s64 	%rd113, %rd56, %rd112;
	st.shared.u32 	[%rd113], %r1003;
	add.s32 	%r1131, %r1120, 224;
	mul.wide.u32 	%rd114, %r1131, 4;
	add.s64 	%rd115, %rd56, %rd114;
	st.shared.u32 	[%rd115], %r1011;
	add.s32 	%r1132, %r1124, 32;
	mul.wide.u32 	%rd116, %r1132, 4;
	add.s64 	%rd117, %rd56, %rd116;
	st.shared.u32 	[%rd117], %r1015;
	add.s32 	%r1133, %r1124, 160;
	mul.wide.u32 	%rd118, %r1133, 4;
	add.s64 	%rd119, %rd56, %rd118;
	st.shared.u32 	[%rd119], %r1023;
	add.s32 	%r1134, %r1124, 96;
	mul.wide.u32 	%rd120, %r1134, 4;
	add.s64 	%rd121, %rd56, %rd120;
	st.shared.u32 	[%rd121], %r1019;
	add.s32 	%r1135, %r1124, 224;
	mul.wide.u32 	%rd122, %r1135, 4;
	add.s64 	%rd123, %rd56, %rd122;
	st.shared.u32 	[%rd123], %r1027;
	bar.sync 	0;
	add.s32 	%r1136, %r294, %r98;
	cvt.u16.u32 	%rs81, %r1136;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r295, %rs87;
	add.s32 	%r1137, %r99, %r295;
	mul.wide.s32 	%rd124, %r1137, 4;
	add.s64 	%rd125, %rd56, %rd124;
	ld.shared.u32 	%r296, [%rd125];
	add.s32 	%r1138, %r100, %r295;
	mul.wide.u32 	%rd126, %r1138, 4;
	add.s64 	%rd127, %rd56, %rd126;
	ld.shared.u32 	%r297, [%rd127];
	add.s32 	%r1139, %r101, %r295;
	mul.wide.u32 	%rd128, %r1139, 4;
	add.s64 	%rd129, %rd56, %rd128;
	ld.shared.u32 	%r298, [%rd129];
	add.s32 	%r1140, %r102, %r295;
	mul.wide.u32 	%rd130, %r1140, 4;
	add.s64 	%rd131, %rd56, %rd130;
	ld.shared.u32 	%r299, [%rd131];
	add.s32 	%r1141, %r103, %r295;
	mul.wide.u32 	%rd132, %r1141, 4;
	add.s64 	%rd133, %rd56, %rd132;
	ld.shared.u32 	%r300, [%rd133];
	add.s32 	%r1142, %r104, %r295;
	mul.wide.u32 	%rd134, %r1142, 4;
	add.s64 	%rd135, %rd56, %rd134;
	ld.shared.u32 	%r301, [%rd135];
	add.s32 	%r1143, %r105, %r295;
	mul.wide.u32 	%rd136, %r1143, 4;
	add.s64 	%rd137, %rd56, %rd136;
	ld.shared.u32 	%r302, [%rd137];
	add.s32 	%r1144, %r106, %r295;
	mul.wide.u32 	%rd138, %r1144, 4;
	add.s64 	%rd139, %rd56, %rd138;
	ld.shared.u32 	%r303, [%rd139];
	add.s32 	%r1145, %r107, %r295;
	mul.wide.u32 	%rd140, %r1145, 4;
	add.s64 	%rd141, %rd56, %rd140;
	ld.shared.u32 	%r304, [%rd141];
	add.s32 	%r1146, %r108, %r295;
	mul.wide.u32 	%rd142, %r1146, 4;
	add.s64 	%rd143, %rd56, %rd142;
	ld.shared.u32 	%r305, [%rd143];
	add.s32 	%r1147, %r109, %r295;
	mul.wide.u32 	%rd144, %r1147, 4;
	add.s64 	%rd145, %rd56, %rd144;
	ld.shared.u32 	%r306, [%rd145];
	add.s32 	%r1148, %r110, %r295;
	mul.wide.u32 	%rd146, %r1148, 4;
	add.s64 	%rd147, %rd56, %rd146;
	ld.shared.u32 	%r307, [%rd147];
	add.s32 	%r1149, %r111, %r295;
	mul.wide.u32 	%rd148, %r1149, 4;
	add.s64 	%rd149, %rd56, %rd148;
	ld.shared.u32 	%r308, [%rd149];
	add.s32 	%r1150, %r112, %r295;
	mul.wide.u32 	%rd150, %r1150, 4;
	add.s64 	%rd151, %rd56, %rd150;
	ld.shared.u32 	%r309, [%rd151];
	add.s32 	%r1151, %r113, %r295;
	mul.wide.u32 	%rd152, %r1151, 4;
	add.s64 	%rd153, %rd56, %rd152;
	ld.shared.u32 	%r310, [%rd153];
	add.s32 	%r1152, %r114, %r295;
	mul.wide.u32 	%rd154, %r1152, 4;
	add.s64 	%rd155, %rd56, %rd154;
	ld.shared.u32 	%r311, [%rd155];
	add.s32 	%r1153, %r115, %r295;
	mul.wide.u32 	%rd156, %r1153, 4;
	add.s64 	%rd157, %rd56, %rd156;
	ld.shared.u32 	%r312, [%rd157];
	add.s32 	%r1154, %r116, %r295;
	mul.wide.u32 	%rd158, %r1154, 4;
	add.s64 	%rd159, %rd56, %rd158;
	ld.shared.u32 	%r313, [%rd159];
	add.s32 	%r1155, %r117, %r295;
	mul.wide.u32 	%rd160, %r1155, 4;
	add.s64 	%rd161, %rd56, %rd160;
	ld.shared.u32 	%r314, [%rd161];
	add.s32 	%r1156, %r118, %r295;
	mul.wide.u32 	%rd162, %r1156, 4;
	add.s64 	%rd163, %rd56, %rd162;
	ld.shared.u32 	%r315, [%rd163];
	add.s32 	%r1157, %r119, %r295;
	mul.wide.u32 	%rd164, %r1157, 4;
	add.s64 	%rd165, %rd56, %rd164;
	ld.shared.u32 	%r316, [%rd165];
	add.s32 	%r1158, %r120, %r295;
	mul.wide.s32 	%rd166, %r1158, 4;
	add.s64 	%rd167, %rd56, %rd166;
	ld.shared.u32 	%r317, [%rd167];
	bar.sync 	0;
	shfl.sync.idx.b32	%r318, %r287, 0, 31, -1;
	shfl.sync.idx.b32	%r319, %r287, 1, 31, -1;
	shfl.sync.idx.b32	%r320, %r287, 2, 31, -1;
	shfl.sync.idx.b32	%r321, %r287, 3, 31, -1;
	shfl.sync.idx.b32	%r322, %r287, 4, 31, -1;
	shfl.sync.idx.b32	%r323, %r287, 5, 31, -1;
	shfl.sync.idx.b32	%r324, %r287, 6, 31, -1;
	shfl.sync.idx.b32	%r325, %r287, 7, 31, -1;
	shfl.sync.idx.b32	%r326, %r287, 8, 31, -1;
	shfl.sync.idx.b32	%r327, %r287, 9, 31, -1;
	shfl.sync.idx.b32	%r328, %r287, 10, 31, -1;
	shfl.sync.idx.b32	%r329, %r287, 11, 31, -1;
	shfl.sync.idx.b32	%r330, %r287, 12, 31, -1;
	shfl.sync.idx.b32	%r331, %r287, 13, 31, -1;
	shfl.sync.idx.b32	%r332, %r287, 14, 31, -1;
	shfl.sync.idx.b32	%r333, %r287, 15, 31, -1;
	shfl.sync.idx.b32	%r334, %r287, 16, 31, -1;
	shfl.sync.idx.b32	%r335, %r287, 17, 31, -1;
	shfl.sync.idx.b32	%r336, %r287, 18, 31, -1;
	shfl.sync.idx.b32	%r337, %r287, 19, 31, -1;
	shfl.sync.idx.b32	%r338, %r287, 20, 31, -1;
	shfl.sync.idx.b32	%r339, %r287, 21, 31, -1;
	shfl.sync.idx.b32	%r340, %r287, 22, 31, -1;
	shfl.sync.idx.b32	%r341, %r287, 23, 31, -1;
	setp.eq.s32 	%p250, %r318, 999999999;
	@%p250 bra 	$L__BB0_152;
// %bb.234:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1159, %r318, %r295;
	mul.wide.s32 	%rd168, %r1159, 4;
	add.s64 	%rd170, %rd56, %rd168;
	st.shared.u32 	[%rd170], %r296;
	setp.eq.s32 	%p251, %r319, 999999999;
	@%p251 bra 	$L__BB0_153;
// %bb.235:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1160, %r319, %r295;
	mul.wide.s32 	%rd171, %r1160, 4;
	add.s64 	%rd173, %rd56, %rd171;
	st.shared.u32 	[%rd173], %r297;
	setp.eq.s32 	%p252, %r320, 999999999;
	@%p252 bra 	$L__BB0_154;
// %bb.236:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1161, %r320, %r295;
	mul.wide.s32 	%rd174, %r1161, 4;
	add.s64 	%rd176, %rd56, %rd174;
	st.shared.u32 	[%rd176], %r298;
	setp.eq.s32 	%p253, %r321, 999999999;
	@%p253 bra 	$L__BB0_155;
// %bb.237:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1162, %r321, %r295;
	mul.wide.s32 	%rd177, %r1162, 4;
	add.s64 	%rd179, %rd56, %rd177;
	st.shared.u32 	[%rd179], %r299;
	setp.eq.s32 	%p254, %r322, 999999999;
	@%p254 bra 	$L__BB0_156;
// %bb.238:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1163, %r322, %r295;
	mul.wide.s32 	%rd180, %r1163, 4;
	add.s64 	%rd182, %rd56, %rd180;
	st.shared.u32 	[%rd182], %r300;
	setp.eq.s32 	%p255, %r323, 999999999;
	@%p255 bra 	$L__BB0_157;
// %bb.239:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1164, %r323, %r295;
	mul.wide.s32 	%rd183, %r1164, 4;
	add.s64 	%rd185, %rd56, %rd183;
	st.shared.u32 	[%rd185], %r301;
	setp.eq.s32 	%p256, %r324, 999999999;
	@%p256 bra 	$L__BB0_158;
// %bb.240:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1165, %r324, %r295;
	mul.wide.s32 	%rd186, %r1165, 4;
	add.s64 	%rd188, %rd56, %rd186;
	st.shared.u32 	[%rd188], %r302;
	setp.eq.s32 	%p257, %r325, 999999999;
	@%p257 bra 	$L__BB0_159;
// %bb.241:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1166, %r325, %r295;
	mul.wide.s32 	%rd189, %r1166, 4;
	add.s64 	%rd191, %rd56, %rd189;
	st.shared.u32 	[%rd191], %r303;
	setp.eq.s32 	%p258, %r326, 999999999;
	@%p258 bra 	$L__BB0_160;
// %bb.242:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1167, %r326, %r295;
	mul.wide.s32 	%rd192, %r1167, 4;
	add.s64 	%rd194, %rd56, %rd192;
	st.shared.u32 	[%rd194], %r304;
	setp.eq.s32 	%p259, %r327, 999999999;
	@%p259 bra 	$L__BB0_161;
// %bb.243:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1168, %r327, %r295;
	mul.wide.s32 	%rd195, %r1168, 4;
	add.s64 	%rd197, %rd56, %rd195;
	st.shared.u32 	[%rd197], %r305;
	setp.eq.s32 	%p260, %r328, 999999999;
	@%p260 bra 	$L__BB0_162;
// %bb.244:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1169, %r328, %r295;
	mul.wide.s32 	%rd198, %r1169, 4;
	add.s64 	%rd200, %rd56, %rd198;
	st.shared.u32 	[%rd200], %r306;
	setp.eq.s32 	%p261, %r329, 999999999;
	@%p261 bra 	$L__BB0_163;
// %bb.245:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1170, %r329, %r295;
	mul.wide.s32 	%rd201, %r1170, 4;
	add.s64 	%rd203, %rd56, %rd201;
	st.shared.u32 	[%rd203], %r307;
	setp.eq.s32 	%p262, %r330, 999999999;
	@%p262 bra 	$L__BB0_164;
// %bb.246:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1171, %r330, %r295;
	mul.wide.s32 	%rd204, %r1171, 4;
	add.s64 	%rd206, %rd56, %rd204;
	st.shared.u32 	[%rd206], %r308;
	setp.eq.s32 	%p263, %r331, 999999999;
	@%p263 bra 	$L__BB0_165;
// %bb.247:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1172, %r331, %r295;
	mul.wide.s32 	%rd207, %r1172, 4;
	add.s64 	%rd209, %rd56, %rd207;
	st.shared.u32 	[%rd209], %r309;
	setp.eq.s32 	%p264, %r332, 999999999;
	@%p264 bra 	$L__BB0_166;
// %bb.248:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1173, %r332, %r295;
	mul.wide.s32 	%rd210, %r1173, 4;
	add.s64 	%rd212, %rd56, %rd210;
	st.shared.u32 	[%rd212], %r310;
	setp.eq.s32 	%p265, %r333, 999999999;
	@%p265 bra 	$L__BB0_167;
// %bb.249:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1174, %r333, %r295;
	mul.wide.s32 	%rd213, %r1174, 4;
	add.s64 	%rd215, %rd56, %rd213;
	st.shared.u32 	[%rd215], %r311;
	setp.eq.s32 	%p266, %r334, 999999999;
	@%p266 bra 	$L__BB0_168;
// %bb.250:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1175, %r334, %r295;
	mul.wide.s32 	%rd216, %r1175, 4;
	add.s64 	%rd218, %rd56, %rd216;
	st.shared.u32 	[%rd218], %r312;
	setp.eq.s32 	%p267, %r335, 999999999;
	@%p267 bra 	$L__BB0_169;
// %bb.251:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1176, %r335, %r295;
	mul.wide.s32 	%rd219, %r1176, 4;
	add.s64 	%rd221, %rd56, %rd219;
	st.shared.u32 	[%rd221], %r313;
	setp.eq.s32 	%p268, %r336, 999999999;
	@%p268 bra 	$L__BB0_170;
// %bb.252:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1177, %r336, %r295;
	mul.wide.s32 	%rd222, %r1177, 4;
	add.s64 	%rd224, %rd56, %rd222;
	st.shared.u32 	[%rd224], %r314;
	setp.eq.s32 	%p269, %r337, 999999999;
	@%p269 bra 	$L__BB0_171;
// %bb.253:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1178, %r337, %r295;
	mul.wide.s32 	%rd225, %r1178, 4;
	add.s64 	%rd227, %rd56, %rd225;
	st.shared.u32 	[%rd227], %r315;
	setp.eq.s32 	%p270, %r338, 999999999;
	@%p270 bra 	$L__BB0_172;
// %bb.254:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1179, %r338, %r295;
	mul.wide.s32 	%rd228, %r1179, 4;
	add.s64 	%rd230, %rd56, %rd228;
	st.shared.u32 	[%rd230], %r316;
	setp.eq.s32 	%p271, %r339, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.255:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1180, 0, %r317, %p272;
	add.s32 	%r1181, %r339, %r295;
	mul.wide.s32 	%rd231, %r1181, 4;
	add.s64 	%rd233, %rd56, %rd231;
	st.shared.u32 	[%rd233], %r1180;
	setp.eq.s32 	%p273, %r340, 999999999;
	@%p273 bra 	$L__BB0_174;
// %bb.256:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1182, %r340, %r295;
	mul.wide.s32 	%rd234, %r1182, 4;
	add.s64 	%rd236, %rd56, %rd234;
	mov.u32 	%r3761, 0;
	st.shared.u32 	[%rd236], %r3761;
	setp.eq.s32 	%p274, %r341, 999999999;
	@%p274 bra 	$L__BB0_175;
// %bb.257:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1185, %r341, %r295;
	mul.wide.s32 	%rd237, %r1185, 4;
	add.s64 	%rd239, %rd56, %rd237;
	st.shared.u32 	[%rd239], %r3761;
	bar.sync 	0;
	mov.u32 	%r3762, %r3761;
	mov.u32 	%r3763, %r3761;
	mov.u32 	%r3764, %r3761;
	mov.u32 	%r3765, %r3761;
	mov.u32 	%r3766, %r3761;
	mov.u32 	%r3767, %r3761;
	mov.u32 	%r3768, %r3761;
	mov.u32 	%r3769, %r3761;
	mov.u32 	%r3770, %r3761;
	mov.u32 	%r3771, %r3761;
	mov.u32 	%r3772, %r3761;
	mov.u32 	%r3773, %r3761;
	mov.u32 	%r3774, %r3761;
	mov.u32 	%r3775, %r3761;
	mov.u32 	%r3776, %r3761;
	mov.u32 	%r3777, %r3761;
	mov.u32 	%r3778, %r3761;
	mov.u32 	%r3779, %r3761;
	mov.u32 	%r3780, %r3761;
	mov.u32 	%r3781, %r3761;
	mov.u32 	%r3782, %r3761;
	mov.u32 	%r3783, %r3761;
	mov.u32 	%r3784, %r3761;
	@%p91 bra 	$L__BB0_176;
// %bb.258:                             // %oksrem4959
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r294;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1186, %rs94;
	mul.wide.s32 	%rd240, %r1186, 4;
	add.s64 	%rd241, %rd16, %rd240;
	ld.shared.u32 	%r3761, [%rd241];
	ld.shared.u32 	%r3762, [%rd16+4];
	ld.shared.u32 	%r3763, [%rd16+8];
	ld.shared.u32 	%r3764, [%rd16+12];
	ld.shared.u32 	%r3765, [%rd16+16];
	ld.shared.u32 	%r3766, [%rd16+20];
	ld.shared.u32 	%r3767, [%rd16+24];
	ld.shared.u32 	%r3768, [%rd16+28];
	ld.shared.u32 	%r3769, [%rd16+32];
	ld.shared.u32 	%r3770, [%rd16+36];
	ld.shared.u32 	%r3771, [%rd16+40];
	ld.shared.u32 	%r3772, [%rd16+44];
	ld.shared.u32 	%r3773, [%rd16+48];
	ld.shared.u32 	%r3774, [%rd16+52];
	ld.shared.u32 	%r3775, [%rd16+56];
	ld.shared.u32 	%r3776, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1187, %rs101;
	mul.wide.s32 	%rd242, %r1187, 4;
	add.s64 	%rd243, %rd16, %rd242;
	ld.shared.u32 	%r3777, [%rd243];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1188, %rs108;
	mul.wide.s32 	%rd244, %r1188, 4;
	add.s64 	%rd245, %rd16, %rd244;
	ld.shared.u32 	%r3778, [%rd245];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1189, %rs115;
	mul.wide.s32 	%rd246, %r1189, 4;
	add.s64 	%rd247, %rd16, %rd246;
	ld.shared.u32 	%r3779, [%rd247];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1190, %rs122;
	mul.wide.s32 	%rd248, %r1190, 4;
	add.s64 	%rd249, %rd16, %rd248;
	ld.shared.u32 	%r3780, [%rd249];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1191, %rs129;
	mul.wide.s32 	%rd250, %r1191, 4;
	add.s64 	%rd251, %rd16, %rd250;
	ld.shared.u32 	%r3781, [%rd251];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1192, %rs136;
	mul.wide.s32 	%rd252, %r1192, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3782, [%rd253];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1193, %rs143;
	mul.wide.s32 	%rd254, %r1193, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3783, [%rd255];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1194, %rs150;
	mul.wide.s32 	%rd256, %r1194, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3784, [%rd257];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3785, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_188:                            // %L27962
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3787, %r3787, 1;
	mov.u32 	%r3786, 0;
	mov.u32 	%r3788, %r3786;
	mov.u32 	%r3789, %r3786;
$L__BB0_189:                            // %L27963
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3785, %r3785, -4;
	setp.ne.s32 	%p303, %r3785, -12;
	@%p303 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_190;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3785, 12;
	selp.b32 	%r1732, %r3761, 0, %p277;
	setp.eq.s32 	%p278, %r3785, 8;
	selp.b32 	%r1733, %r3765, %r1732, %p278;
	setp.eq.s32 	%p279, %r3785, 4;
	selp.b32 	%r1734, %r3769, %r1733, %p279;
	setp.eq.s32 	%p280, %r3785, 0;
	selp.b32 	%r1735, %r3773, %r1734, %p280;
	setp.eq.s32 	%p281, %r3785, -4;
	selp.b32 	%r1736, %r3777, %r1735, %p281;
	setp.eq.s32 	%p282, %r3785, -8;
	selp.b32 	%r1737, %r3781, %r1736, %p282;
	selp.b32 	%r1738, %r3762, 0, %p277;
	selp.b32 	%r1739, %r3766, %r1738, %p278;
	selp.b32 	%r1740, %r3770, %r1739, %p279;
	selp.b32 	%r1741, %r3774, %r1740, %p280;
	selp.b32 	%r1742, %r3778, %r1741, %p281;
	selp.b32 	%r1743, %r3782, %r1742, %p282;
	selp.b32 	%r1744, %r3763, 0, %p277;
	selp.b32 	%r1745, %r3767, %r1744, %p278;
	selp.b32 	%r1746, %r3771, %r1745, %p279;
	selp.b32 	%r1747, %r3775, %r1746, %p280;
	selp.b32 	%r1748, %r3779, %r1747, %p281;
	selp.b32 	%r1749, %r3783, %r1748, %p282;
	selp.b32 	%r1750, %r3764, 0, %p277;
	selp.b32 	%r1751, %r3768, %r1750, %p278;
	selp.b32 	%r1752, %r3772, %r1751, %p279;
	selp.b32 	%r1753, %r3776, %r1752, %p280;
	selp.b32 	%r1754, %r3780, %r1753, %p281;
	selp.b32 	%r1755, %r3784, %r1754, %p282;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1201, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1212, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1200, %r1737, -2004318072;
	mov.u32 	%r1337, 983055;
	// begin inline asm
	lop3.b32 %r1198, %r1337, %r1200, %r1201, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1202, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1201, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	mov.u32 	%r1348, 15728880;
	// begin inline asm
	lop3.b32 %r1209, %r1348, %r1200, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1246, %r1743, -2004318072;
	// begin inline asm
	lop3.b32 %r1244, %r1337, %r1246, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1249, %r1247, %r1248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1252, %r1244, %r1249;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1255, %r1348, %r1246, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1292, %r1749, -2004318072;
	// begin inline asm
	lop3.b32 %r1290, %r1337, %r1292, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1295, %r1293, %r1294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1298, %r1290, %r1295;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1301, %r1348, %r1292, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1304, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	mov.b32 %r1339, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1350, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1338, %r1755, -2004318072;
	// begin inline asm
	lop3.b32 %r1336, %r1337, %r1338, %r1339, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1340, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1341, %r1339, %r1340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1344, %r1336, %r1341;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1347, %r1348, %r1338, %r1350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1351, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1352, %r1350, %r1351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1355, %r1347, %r1352;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1206;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1380, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1217;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1383, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1252;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1386, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1389, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1298;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1392, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1309;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1395, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1344;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1398, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1355;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1401, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1667, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r438, %r441}, {%r1380}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r438, %r441}, {%r1383}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1485, %r1482}, {%r438, %r441}, {%r1386}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1494, %r1491}, {%r438, %r441}, {%r1389}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1503, %r1500}, {%r438, %r441}, {%r1392}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r438, %r441}, {%r1395}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r438, %r441}, {%r1398}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1530, %r1527}, {%r438, %r441}, {%r1401}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r490, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r490, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1478, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r1478, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r490, %r1485, %r1480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1487, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r1487, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r490, %r1494, %r1489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1496, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r1496, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1501, %r490, %r1503, %r1498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r490, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r490, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1523, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1523, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r490, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r493, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r490, %r1464, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r493, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r490, %r1473, %r1539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r493, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r490, %r1482, %r1546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r493, %r1494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r490, %r1491, %r1553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1560, %r493, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r490, %r1500, %r1560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r493, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r490, %r1509, %r1567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1574, %r493, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r490, %r1518, %r1574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r493, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r490, %r1527, %r1581;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1669, %r1670}, {%r534, %r540, %r537, %r543}, {%r1465, %r1535}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1677, %r1678}, {%r534, %r540, %r537, %r543}, {%r1474, %r1542}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1686}, {%r534, %r540, %r537, %r543}, {%r1483, %r1549}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1693, %r1694}, {%r534, %r540, %r537, %r543}, {%r1492, %r1556}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1702}, {%r534, %r540, %r537, %r543}, {%r1501, %r1563}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1709, %r1710}, {%r534, %r540, %r537, %r543}, {%r1510, %r1570}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1717, %r1718}, {%r534, %r540, %r537, %r543}, {%r1519, %r1577}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1726}, {%r534, %r540, %r537, %r543}, {%r1528, %r1584}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1668, %r1669, %r1670, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1672, %r1669, %r1670, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1676, %r1677, %r1678, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1680, %r1677, %r1678, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1684, %r1685, %r1686, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1688, %r1685, %r1686, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1692, %r1693, %r1694, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1696, %r1693, %r1694, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1700, %r1701, %r1702, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1704, %r1701, %r1702, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1708, %r1709, %r1710, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1712, %r1709, %r1710, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1716, %r1717, %r1718, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1720, %r1717, %r1718, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1724, %r1725, %r1726, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1728, %r1725, %r1726, %r1030;
	// end inline asm
	st.shared.u32 	[%rd7], %r1668;
	st.shared.u32 	[%rd8], %r1672;
	st.shared.u32 	[%rd9], %r1676;
	st.shared.u32 	[%rd10], %r1680;
	st.shared.u32 	[%rd17], %r1684;
	st.shared.u32 	[%rd18], %r1688;
	st.shared.u32 	[%rd9+256], %r1692;
	st.shared.u32 	[%rd10+256], %r1696;
	st.shared.u32 	[%rd19], %r1700;
	st.shared.u32 	[%rd20], %r1704;
	st.shared.u32 	[%rd9+512], %r1708;
	st.shared.u32 	[%rd10+512], %r1712;
	st.shared.u32 	[%rd21], %r1716;
	st.shared.u32 	[%rd22], %r1720;
	st.shared.u32 	[%rd9+768], %r1724;
	st.shared.u32 	[%rd10+768], %r1728;
	@%p276 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_178;
$L__BB0_259:                            // %pass8539
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1668;
	st.shared.u32 	[%rd8], %r1672;
	st.shared.u32 	[%rd9], %r1676;
	st.shared.u32 	[%rd10], %r1680;
	st.shared.u32 	[%rd17], %r1684;
	st.shared.u32 	[%rd18], %r1688;
	st.shared.u32 	[%rd9+256], %r1692;
	st.shared.u32 	[%rd10+256], %r1696;
	st.shared.u32 	[%rd19], %r1700;
	st.shared.u32 	[%rd20], %r1704;
	st.shared.u32 	[%rd9+512], %r1708;
	st.shared.u32 	[%rd10+512], %r1712;
	st.shared.u32 	[%rd21], %r1716;
	st.shared.u32 	[%rd22], %r1720;
	st.shared.u32 	[%rd9+768], %r1724;
	st.shared.u32 	[%rd10+768], %r1728;
$L__BB0_178:                            // %L22306
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3790, %r1667;
	mov.u32 	%r3791, %r1667;
	mov.u32 	%r3792, %r1667;
	mov.u32 	%r3793, %r1667;
	@%p276 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_179;
$L__BB0_260:                            // %pass10634
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3790, [%rd11];
	ld.shared.u32 	%r3791, [%rd12];
	ld.shared.u32 	%r3792, [%rd13];
	ld.shared.u32 	%r3793, [%rd14];
$L__BB0_179:                            // %L23381
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1792, %r1789}, {%r552, %r555}, {%r3790}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1801, %r1798}, {%r552, %r555}, {%r3791}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1810, %r1807}, {%r552, %r555}, {%r3792}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1819, %r1816}, {%r552, %r555}, {%r3793}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1785, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r1785, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r604, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1794, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r1794, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r604, %r1801, %r1796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1803, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1803, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r604, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1812, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r1812, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r604, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r607, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r604, %r1789, %r1821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r607, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r604, %r1798, %r1828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r607, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r604, %r1807, %r1835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r607, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r604, %r1816, %r1842;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1890, %r1893}, {%r648, %r654, %r651, %r657}, {%r1790, %r1824}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1909, %r1912}, {%r648, %r654, %r651, %r657}, {%r1799, %r1831}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1897, %r1901}, {%r648, %r654, %r651, %r657}, {%r1808, %r1838}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1916, %r1920}, {%r648, %r654, %r651, %r657}, {%r1817, %r1845}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r1890, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1893, %r1893, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1901, %r1901, %r1896;
	// end inline asm
	mov.u32 	%r1924, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1904, %r1924, %r1900, %r3789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1909, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r1912, %r1912, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r1916, %r1916, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r1920, %r1920, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r1924, %r1919, %r3788;
	// end inline asm
	mov.u32 	%r3794, %r1667;
	mov.u32 	%r3795, %r1667;
	mov.u32 	%r3796, %r1667;
	mov.u32 	%r3797, %r1667;
	@%p276 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_180;
$L__BB0_261:                            // %pass11239
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3794, [%rd23];
	ld.shared.u32 	%r3795, [%rd24];
	ld.shared.u32 	%r3796, [%rd25];
	ld.shared.u32 	%r3797, [%rd26];
$L__BB0_180:                            // %L24600
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1963, %r1960}, {%r552, %r555}, {%r3794}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1972, %r1969}, {%r552, %r555}, {%r3795}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1981, %r1978}, {%r552, %r555}, {%r3796}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1990, %r1987}, {%r552, %r555}, {%r3797}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1956, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r1956, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r604, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1965, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1965, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r604, %r1972, %r1967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1974, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r1974, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r604, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1983, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1985, %r1983, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r604, %r1990, %r1985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r607, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r604, %r1960, %r1992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r607, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r604, %r1969, %r1999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r607, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r604, %r1978, %r2006;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r607, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r604, %r1987, %r2013;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2064}, {%r648, %r654, %r651, %r657}, {%r1961, %r1995}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2080, %r2083}, {%r648, %r654, %r651, %r657}, {%r1970, %r2002}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2068, %r2072}, {%r648, %r654, %r651, %r657}, {%r1979, %r2009}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2087, %r2091}, {%r648, %r654, %r651, %r657}, {%r1988, %r2016}, {%r1667, %r1667};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r2061, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r2064, %r2064, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r2068, %r2068, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r2072, %r2072, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3843, %r1924, %r2071, %r1904;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r2080, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r2083, %r2083, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r2087, %r2087, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r2091, %r2091, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3842, %r1924, %r2090, %r1923;
	// end inline asm
	add.s32 	%r3840, %r3786, 2;
	setp.eq.s32 	%p285, %r3840, 6;
	@%p285 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_184;
$L__BB0_181:                            // %pass11708
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_183;
// %bb.182:                             // %pass11718
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2098, %r3787, 589824;
	add.s32 	%r2099, %r121, %r2098;
	cvt.s64.s32 	%rd258, %r2099;
	add.s64 	%rd259, %rd258, %rd15;
	mul.hi.s64 	%rd260, %rd259, 1024819115206086201;
	shr.u64 	%rd261, %rd260, 63;
	shr.s64 	%rd262, %rd260, 25;
	add.s64 	%rd263, %rd262, %rd261;
	setp.lt.s64 	%p287, %rd259, 0;
	mul.lo.s64 	%rd264, %rd263, 603979776;
	setp.ne.s64 	%p288, %rd264, %rd259;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd265, -1, 0, %p289;
	add.s64 	%rd266, %rd263, %rd265;
	mul.lo.s64 	%rd267, %rd266, -603979776;
	add.s64 	%rd268, %rd267, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3843;
	add.s32 	%r2100, %r122, %r2098;
	cvt.s64.s32 	%rd271, %r2100;
	add.s64 	%rd272, %rd271, %rd15;
	mul.hi.s64 	%rd273, %rd272, 1024819115206086201;
	shr.u64 	%rd274, %rd273, 63;
	shr.s64 	%rd275, %rd273, 25;
	add.s64 	%rd276, %rd275, %rd274;
	setp.lt.s64 	%p290, %rd272, 0;
	mul.lo.s64 	%rd277, %rd276, 603979776;
	setp.ne.s64 	%p291, %rd277, %rd272;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd278, -1, 0, %p292;
	add.s64 	%rd279, %rd276, %rd278;
	mul.lo.s64 	%rd280, %rd279, -603979776;
	add.s64 	%rd281, %rd280, %rd272;
	shl.b64 	%rd282, %rd281, 2;
	add.s64 	%rd283, %rd4, %rd282;
	st.global.u32 	[%rd283], %r3842;
$L__BB0_183:                            // %L25132
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3787, %r3787, 1;
	mov.u32 	%r3840, 0;
	mov.u32 	%r3842, %r3840;
	mov.u32 	%r3843, %r3840;
$L__BB0_184:                            // %pass11884
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2102, 0;
	mov.u32 	%r3798, %r2102;
	mov.u32 	%r3799, %r2102;
	mov.u32 	%r3800, %r2102;
	mov.u32 	%r3801, %r2102;
	@%p91 bra 	$L__BB0_185;
// %bb.262:                             // %pass12014
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3798, [%rd27];
	ld.shared.u32 	%r3799, [%rd28];
	ld.shared.u32 	%r3800, [%rd29];
	ld.shared.u32 	%r3801, [%rd30];
$L__BB0_185:                            // %L26211
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2138, %r2135}, {%r552, %r555}, {%r3798}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2147, %r2144}, {%r552, %r555}, {%r3799}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2156, %r2153}, {%r552, %r555}, {%r3800}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2165, %r2162}, {%r552, %r555}, {%r3801}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2131, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r2131, %r2135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r604, %r2138, %r2133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2140, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r2140, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r604, %r2147, %r2142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2149, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r2149, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r604, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2158, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2160, %r2158, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r604, %r2165, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2167, %r607, %r2138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r604, %r2135, %r2167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r607, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r604, %r2144, %r2174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r607, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r604, %r2153, %r2181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r607, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r604, %r2162, %r2188;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2236, %r2239}, {%r648, %r654, %r651, %r657}, {%r2136, %r2170}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2255, %r2258}, {%r648, %r654, %r651, %r657}, {%r2145, %r2177}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2243, %r2247}, {%r648, %r654, %r651, %r657}, {%r2154, %r2184}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2262, %r2266}, {%r648, %r654, %r651, %r657}, {%r2163, %r2191}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2236, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r2239, %r2239, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2242, %r2243, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r2247, %r2247, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r1924, %r2246, %r3843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r2255, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r2258, %r2258, %r2254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r2262, %r2262, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r2266, %r2266, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r1924, %r2265, %r3842;
	// end inline asm
	mov.u32 	%r3802, %r2102;
	mov.u32 	%r3803, %r2102;
	mov.u32 	%r3804, %r2102;
	mov.u32 	%r3805, %r2102;
	@%p276 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_186;
$L__BB0_263:                            // %pass12619
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3802, [%rd31];
	ld.shared.u32 	%r3803, [%rd32];
	ld.shared.u32 	%r3804, [%rd33];
	ld.shared.u32 	%r3805, [%rd34];
$L__BB0_186:                            // %L27430
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2309, %r2306}, {%r552, %r555}, {%r3802}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2318, %r2315}, {%r552, %r555}, {%r3803}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2327, %r2324}, {%r552, %r555}, {%r3804}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2336, %r2333}, {%r552, %r555}, {%r3805}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2302, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2304, %r2302, %r2306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2307, %r604, %r2309, %r2304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2311, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r2311, %r2315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r604, %r2318, %r2313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2320, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2322, %r2320, %r2324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r604, %r2327, %r2322;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2329, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r2329, %r2333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2334, %r604, %r2336, %r2331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r607, %r2309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r604, %r2306, %r2338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2345, %r607, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r604, %r2315, %r2345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2352, %r607, %r2327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2355, %r604, %r2324, %r2352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2359, %r607, %r2336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2362, %r604, %r2333, %r2359;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2410}, {%r648, %r654, %r651, %r657}, {%r2307, %r2341}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2426, %r2429}, {%r648, %r654, %r651, %r657}, {%r2316, %r2348}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2414, %r2418}, {%r648, %r654, %r651, %r657}, {%r2325, %r2355}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2433, %r2437}, {%r648, %r654, %r651, %r657}, {%r2334, %r2362}, {%r2102, %r2102};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2406, %r2407, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2409, %r2410, %r2410, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2413, %r2414, %r2414, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2417, %r2418, %r2418, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r1924, %r2417, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2425, %r2426, %r2426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2428, %r2429, %r2429, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2432, %r2433, %r2433, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r2437, %r2437, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3788, %r1924, %r2436, %r2269;
	// end inline asm
	add.s32 	%r3786, %r3840, 2;
	setp.eq.s32 	%p295, %r3786, 6;
	@%p295 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_189;
$L__BB0_187:                            // %pass13088
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_188;
// %bb.264:                             // %pass13098
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2444, %r3787, 589824;
	add.s32 	%r2445, %r121, %r2444;
	cvt.s64.s32 	%rd284, %r2445;
	add.s64 	%rd285, %rd284, %rd15;
	mul.hi.s64 	%rd286, %rd285, 1024819115206086201;
	shr.u64 	%rd287, %rd286, 63;
	shr.s64 	%rd288, %rd286, 25;
	add.s64 	%rd289, %rd288, %rd287;
	setp.lt.s64 	%p297, %rd285, 0;
	mul.lo.s64 	%rd290, %rd289, 603979776;
	setp.ne.s64 	%p298, %rd290, %rd285;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd291, -1, 0, %p299;
	add.s64 	%rd292, %rd289, %rd291;
	mul.lo.s64 	%rd293, %rd292, -603979776;
	add.s64 	%rd294, %rd293, %rd285;
	shl.b64 	%rd295, %rd294, 2;
	add.s64 	%rd296, %rd4, %rd295;
	st.global.u32 	[%rd296], %r3789;
	add.s32 	%r2446, %r122, %r2444;
	cvt.s64.s32 	%rd297, %r2446;
	add.s64 	%rd298, %rd297, %rd15;
	mul.hi.s64 	%rd299, %rd298, 1024819115206086201;
	shr.u64 	%rd300, %rd299, 63;
	shr.s64 	%rd301, %rd299, 25;
	add.s64 	%rd302, %rd301, %rd300;
	setp.lt.s64 	%p300, %rd298, 0;
	mul.lo.s64 	%rd303, %rd302, 603979776;
	setp.ne.s64 	%p301, %rd303, %rd298;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd304, -1, 0, %p302;
	add.s64 	%rd305, %rd302, %rd304;
	mul.lo.s64 	%rd306, %rd305, -603979776;
	add.s64 	%rd307, %rd306, %rd298;
	shl.b64 	%rd308, %rd307, 2;
	add.s64 	%rd309, %rd4, %rd308;
	st.global.u32 	[%rd309], %r3788;
	bra.uni 	$L__BB0_188;
$L__BB0_190:                            // %L27988.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3810, 12;
	bra.uni 	$L__BB0_191;
$L__BB0_202:                            // %L42018
                                        //   in Loop: Header=BB0_191 Depth=2
	add.s32 	%r3787, %r3787, 1;
	mov.u32 	%r3786, 0;
	mov.u32 	%r3788, %r3786;
	mov.u32 	%r3789, %r3786;
$L__BB0_203:                            // %L42019
                                        //   in Loop: Header=BB0_191 Depth=2
	bar.sync 	0;
	add.s32 	%r3810, %r3810, -4;
	setp.ne.s32 	%p331, %r3810, -12;
	@%p331 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_204;
$L__BB0_191:                            // %L27988
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p305, %r3810, 12;
	selp.b32 	%r2985, %r3761, 0, %p305;
	setp.eq.s32 	%p306, %r3810, 8;
	selp.b32 	%r2986, %r3765, %r2985, %p306;
	setp.eq.s32 	%p307, %r3810, 4;
	selp.b32 	%r2987, %r3769, %r2986, %p307;
	setp.eq.s32 	%p308, %r3810, 0;
	selp.b32 	%r2988, %r3773, %r2987, %p308;
	setp.eq.s32 	%p309, %r3810, -4;
	selp.b32 	%r2989, %r3777, %r2988, %p309;
	setp.eq.s32 	%p310, %r3810, -8;
	selp.b32 	%r2990, %r3781, %r2989, %p310;
	selp.b32 	%r2991, %r3762, 0, %p305;
	selp.b32 	%r2992, %r3766, %r2991, %p306;
	selp.b32 	%r2993, %r3770, %r2992, %p307;
	selp.b32 	%r2994, %r3774, %r2993, %p308;
	selp.b32 	%r2995, %r3778, %r2994, %p309;
	selp.b32 	%r2996, %r3782, %r2995, %p310;
	selp.b32 	%r2997, %r3763, 0, %p305;
	selp.b32 	%r2998, %r3767, %r2997, %p306;
	selp.b32 	%r2999, %r3771, %r2998, %p307;
	selp.b32 	%r3000, %r3775, %r2999, %p308;
	selp.b32 	%r3001, %r3779, %r3000, %p309;
	selp.b32 	%r3002, %r3783, %r3001, %p310;
	selp.b32 	%r3003, %r3764, 0, %p305;
	selp.b32 	%r3004, %r3768, %r3003, %p306;
	selp.b32 	%r3005, %r3772, %r3004, %p307;
	selp.b32 	%r3006, %r3776, %r3005, %p308;
	selp.b32 	%r3007, %r3780, %r3006, %p309;
	selp.b32 	%r3008, %r3784, %r3007, %p310;
	// begin inline asm
	mov.b32 %r2476, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2487, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3009, %r2990, 8;
	xor.b32  	%r2486, %r3009, 8947848;
	// begin inline asm
	lop3.b32 %r2473, %r1337, %r2486, %r2476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2476, %r2477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2481, %r2473, %r2478;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2484, %r1348, %r2486, %r2487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2487, %r2488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2492, %r2484, %r2489;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2533, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3010, %r2996, 8;
	xor.b32  	%r2532, %r3010, 8947848;
	// begin inline asm
	lop3.b32 %r2519, %r1337, %r2532, %r2522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2523, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2524, %r2522, %r2523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2527, %r2519, %r2524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2530, %r1348, %r2532, %r2533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2534, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2535, %r2533, %r2534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2538, %r2530, %r2535;
	// end inline asm
	// begin inline asm
	mov.b32 %r2568, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2579, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3011, %r3002, 8;
	xor.b32  	%r2578, %r3011, 8947848;
	// begin inline asm
	lop3.b32 %r2565, %r1337, %r2578, %r2568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2569, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2570, %r2568, %r2569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2573, %r2565, %r2570;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2576, %r1348, %r2578, %r2579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2580, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2581, %r2579, %r2580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2584, %r2576, %r2581;
	// end inline asm
	// begin inline asm
	mov.b32 %r2614, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2625, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r3012, %r3008, 8;
	xor.b32  	%r2624, %r3012, 8947848;
	// begin inline asm
	lop3.b32 %r2611, %r1337, %r2624, %r2614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2615, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2616, %r2614, %r2615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2619, %r2611, %r2616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2622, %r1348, %r2624, %r2625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2626, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2627, %r2625, %r2626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2630, %r2622, %r2627;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2481;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2633, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2492;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2636, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2527;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2639, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2538;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2642, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2573;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2645, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2584;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2648, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2619;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2651, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2630;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2654, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2920, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2720, %r2717}, {%r438, %r441}, {%r2633}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2729, %r2726}, {%r438, %r441}, {%r2636}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2738, %r2735}, {%r438, %r441}, {%r2639}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2747, %r2744}, {%r438, %r441}, {%r2642}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2756, %r2753}, {%r438, %r441}, {%r2645}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2765, %r2762}, {%r438, %r441}, {%r2648}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2774, %r2771}, {%r438, %r441}, {%r2651}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2783, %r2780}, {%r438, %r441}, {%r2654}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2713, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2713, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r490, %r2720, %r2715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2722, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r2722, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r490, %r2729, %r2724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2731, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r2731, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r490, %r2738, %r2733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2740, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r2740, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r490, %r2747, %r2742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2749, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r2749, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r490, %r2756, %r2751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2758, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2760, %r2758, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r490, %r2765, %r2760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2767, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r2767, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r490, %r2774, %r2769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2776, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r2776, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r490, %r2783, %r2778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r493, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r490, %r2717, %r2785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r493, %r2729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r490, %r2726, %r2792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r493, %r2738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r490, %r2735, %r2799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r493, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r490, %r2744, %r2806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r493, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r490, %r2753, %r2813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2820, %r493, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r490, %r2762, %r2820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r493, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r490, %r2771, %r2827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r493, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r490, %r2780, %r2834;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2922, %r2923}, {%r534, %r540, %r537, %r543}, {%r2718, %r2788}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2931}, {%r534, %r540, %r537, %r543}, {%r2727, %r2795}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2938, %r2939}, {%r534, %r540, %r537, %r543}, {%r2736, %r2802}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2947}, {%r534, %r540, %r537, %r543}, {%r2745, %r2809}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2955}, {%r534, %r540, %r537, %r543}, {%r2754, %r2816}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2963}, {%r534, %r540, %r537, %r543}, {%r2763, %r2823}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2970, %r2971}, {%r534, %r540, %r537, %r543}, {%r2772, %r2830}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2978, %r2979}, {%r534, %r540, %r537, %r543}, {%r2781, %r2837}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2921, %r2922, %r2923, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2925, %r2922, %r2923, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2929, %r2930, %r2931, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2933, %r2930, %r2931, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2937, %r2938, %r2939, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2941, %r2938, %r2939, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2945, %r2946, %r2947, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2949, %r2946, %r2947, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2953, %r2954, %r2955, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2957, %r2954, %r2955, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2961, %r2962, %r2963, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2965, %r2962, %r2963, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2969, %r2970, %r2971, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2973, %r2970, %r2971, %r1030;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2977, %r2978, %r2979, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2981, %r2978, %r2979, %r1030;
	// end inline asm
	st.shared.u32 	[%rd7], %r2921;
	st.shared.u32 	[%rd8], %r2925;
	st.shared.u32 	[%rd9], %r2929;
	st.shared.u32 	[%rd10], %r2933;
	st.shared.u32 	[%rd17], %r2937;
	st.shared.u32 	[%rd18], %r2941;
	st.shared.u32 	[%rd9+256], %r2945;
	st.shared.u32 	[%rd10+256], %r2949;
	st.shared.u32 	[%rd19], %r2953;
	st.shared.u32 	[%rd20], %r2957;
	st.shared.u32 	[%rd9+512], %r2961;
	st.shared.u32 	[%rd10+512], %r2965;
	st.shared.u32 	[%rd21], %r2969;
	st.shared.u32 	[%rd22], %r2973;
	st.shared.u32 	[%rd9+768], %r2977;
	st.shared.u32 	[%rd10+768], %r2981;
	@%p276 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_192;
$L__BB0_265:                            // %pass15505
                                        //   in Loop: Header=BB0_191 Depth=2
	st.shared.u32 	[%rd7], %r2921;
	st.shared.u32 	[%rd8], %r2925;
	st.shared.u32 	[%rd9], %r2929;
	st.shared.u32 	[%rd10], %r2933;
	st.shared.u32 	[%rd17], %r2937;
	st.shared.u32 	[%rd18], %r2941;
	st.shared.u32 	[%rd9+256], %r2945;
	st.shared.u32 	[%rd10+256], %r2949;
	st.shared.u32 	[%rd19], %r2953;
	st.shared.u32 	[%rd20], %r2957;
	st.shared.u32 	[%rd9+512], %r2961;
	st.shared.u32 	[%rd10+512], %r2965;
	st.shared.u32 	[%rd21], %r2969;
	st.shared.u32 	[%rd22], %r2973;
	st.shared.u32 	[%rd9+768], %r2977;
	st.shared.u32 	[%rd10+768], %r2981;
$L__BB0_192:                            // %L36362
                                        //   in Loop: Header=BB0_191 Depth=2
	bar.sync 	0;
	mov.u32 	%r3815, %r2920;
	mov.u32 	%r3816, %r2920;
	mov.u32 	%r3817, %r2920;
	mov.u32 	%r3818, %r2920;
	@%p276 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_193;
$L__BB0_266:                            // %pass17600
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3818, [%rd11];
	ld.shared.u32 	%r3817, [%rd12];
	ld.shared.u32 	%r3816, [%rd13];
	ld.shared.u32 	%r3815, [%rd14];
$L__BB0_193:                            // %L37437
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3049, %r3046}, {%r552, %r555}, {%r3818}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3058, %r3055}, {%r552, %r555}, {%r3817}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3067, %r3064}, {%r552, %r555}, {%r3816}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3076, %r3073}, {%r552, %r555}, {%r3815}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3042, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3044, %r3042, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r604, %r3049, %r3044;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3051, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3053, %r3051, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r604, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3060, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r3060, %r3064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r604, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3069, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r3069, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r604, %r3076, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r607, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r604, %r3046, %r3078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r607, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r604, %r3055, %r3085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3092, %r607, %r3067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r604, %r3064, %r3092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3099, %r607, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r604, %r3073, %r3099;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3147, %r3150}, {%r648, %r654, %r651, %r657}, {%r3047, %r3081}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3166, %r3169}, {%r648, %r654, %r651, %r657}, {%r3056, %r3088}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3154, %r3158}, {%r648, %r654, %r651, %r657}, {%r3065, %r3095}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3173, %r3177}, {%r648, %r654, %r651, %r657}, {%r3074, %r3102}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r3147, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3150, %r3150, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r3154, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r3158, %r3158, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r1924, %r3157, %r3789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r3166, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r3169, %r3169, %r3165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3173, %r3173, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3177, %r3177, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r1924, %r3176, %r3788;
	// end inline asm
	mov.u32 	%r3819, %r2920;
	mov.u32 	%r3820, %r2920;
	mov.u32 	%r3821, %r2920;
	mov.u32 	%r3822, %r2920;
	@%p276 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_194;
$L__BB0_267:                            // %pass18205
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3822, [%rd23];
	ld.shared.u32 	%r3821, [%rd24];
	ld.shared.u32 	%r3820, [%rd25];
	ld.shared.u32 	%r3819, [%rd26];
$L__BB0_194:                            // %L38656
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3220, %r3217}, {%r552, %r555}, {%r3822}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3229, %r3226}, {%r552, %r555}, {%r3821}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3238, %r3235}, {%r552, %r555}, {%r3820}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3247, %r3244}, {%r552, %r555}, {%r3819}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3215, %r3213, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r604, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3222, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r3222, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r604, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r3231, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r604, %r3238, %r3233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3240, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3242, %r3240, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r604, %r3247, %r3242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3249, %r607, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r604, %r3217, %r3249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3256, %r607, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r604, %r3226, %r3256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3263, %r607, %r3238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r604, %r3235, %r3263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3270, %r607, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3273, %r604, %r3244, %r3270;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3318, %r3321}, {%r648, %r654, %r651, %r657}, {%r3218, %r3252}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3337, %r3340}, {%r648, %r654, %r651, %r657}, {%r3227, %r3259}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3325, %r3329}, {%r648, %r654, %r651, %r657}, {%r3236, %r3266}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3344, %r3348}, {%r648, %r654, %r651, %r657}, {%r3245, %r3273}, {%r2920, %r2920};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3317, %r3318, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r3321, %r3321, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r3325, %r3325, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r3329, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3847, %r1924, %r3328, %r3161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r3337, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r3340, %r3340, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r3344, %r3344, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r3348, %r3348, %r3343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3846, %r1924, %r3347, %r3180;
	// end inline asm
	add.s32 	%r3844, %r3786, 2;
	setp.eq.s32 	%p313, %r3844, 6;
	@%p313 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_198;
$L__BB0_195:                            // %pass18674
                                        //   in Loop: Header=BB0_191 Depth=2
	@%p91 bra 	$L__BB0_197;
// %bb.196:                             // %pass18684
                                        //   in Loop: Header=BB0_191 Depth=2
	mul.lo.s32 	%r3355, %r3787, 589824;
	add.s32 	%r3356, %r121, %r3355;
	cvt.s64.s32 	%rd310, %r3356;
	add.s64 	%rd311, %rd310, %rd15;
	mul.hi.s64 	%rd312, %rd311, 1024819115206086201;
	shr.u64 	%rd313, %rd312, 63;
	shr.s64 	%rd314, %rd312, 25;
	add.s64 	%rd315, %rd314, %rd313;
	setp.lt.s64 	%p315, %rd311, 0;
	mul.lo.s64 	%rd316, %rd315, 603979776;
	setp.ne.s64 	%p316, %rd316, %rd311;
	and.pred  	%p317, %p315, %p316;
	selp.s64 	%rd317, -1, 0, %p317;
	add.s64 	%rd318, %rd315, %rd317;
	mul.lo.s64 	%rd319, %rd318, -603979776;
	add.s64 	%rd320, %rd319, %rd311;
	shl.b64 	%rd321, %rd320, 2;
	add.s64 	%rd322, %rd4, %rd321;
	st.global.u32 	[%rd322], %r3847;
	add.s32 	%r3357, %r122, %r3355;
	cvt.s64.s32 	%rd323, %r3357;
	add.s64 	%rd324, %rd323, %rd15;
	mul.hi.s64 	%rd325, %rd324, 1024819115206086201;
	shr.u64 	%rd326, %rd325, 63;
	shr.s64 	%rd327, %rd325, 25;
	add.s64 	%rd328, %rd327, %rd326;
	setp.lt.s64 	%p318, %rd324, 0;
	mul.lo.s64 	%rd329, %rd328, 603979776;
	setp.ne.s64 	%p319, %rd329, %rd324;
	and.pred  	%p320, %p318, %p319;
	selp.s64 	%rd330, -1, 0, %p320;
	add.s64 	%rd331, %rd328, %rd330;
	mul.lo.s64 	%rd332, %rd331, -603979776;
	add.s64 	%rd333, %rd332, %rd324;
	shl.b64 	%rd334, %rd333, 2;
	add.s64 	%rd335, %rd4, %rd334;
	st.global.u32 	[%rd335], %r3846;
$L__BB0_197:                            // %L39188
                                        //   in Loop: Header=BB0_191 Depth=2
	add.s32 	%r3787, %r3787, 1;
	mov.u32 	%r3844, 0;
	mov.u32 	%r3846, %r3844;
	mov.u32 	%r3847, %r3844;
$L__BB0_198:                            // %pass18850
                                        //   in Loop: Header=BB0_191 Depth=2
	mov.u32 	%r3359, 0;
	mov.u32 	%r3823, %r3359;
	mov.u32 	%r3824, %r3359;
	mov.u32 	%r3825, %r3359;
	mov.u32 	%r3826, %r3359;
	@%p91 bra 	$L__BB0_199;
// %bb.268:                             // %pass18980
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3826, [%rd27];
	ld.shared.u32 	%r3825, [%rd28];
	ld.shared.u32 	%r3824, [%rd29];
	ld.shared.u32 	%r3823, [%rd30];
$L__BB0_199:                            // %L40267
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3395, %r3392}, {%r552, %r555}, {%r3826}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3404, %r3401}, {%r552, %r555}, {%r3825}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3413, %r3410}, {%r552, %r555}, {%r3824}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3422, %r3419}, {%r552, %r555}, {%r3823}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3388, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3390, %r3388, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r604, %r3395, %r3390;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3397, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3399, %r3397, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3402, %r604, %r3404, %r3399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3406, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r3406, %r3410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r604, %r3413, %r3408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3415, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3417, %r3415, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3420, %r604, %r3422, %r3417;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3424, %r607, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r604, %r3392, %r3424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3431, %r607, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3434, %r604, %r3401, %r3431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3438, %r607, %r3413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3441, %r604, %r3410, %r3438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3445, %r607, %r3422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3448, %r604, %r3419, %r3445;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3493, %r3496}, {%r648, %r654, %r651, %r657}, {%r3393, %r3427}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3512, %r3515}, {%r648, %r654, %r651, %r657}, {%r3402, %r3434}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3500, %r3504}, {%r648, %r654, %r651, %r657}, {%r3411, %r3441}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3519, %r3523}, {%r648, %r654, %r651, %r657}, {%r3420, %r3448}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3492, %r3493, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r3496, %r3496, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r3500, %r3500, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r3504, %r3504, %r3499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r1924, %r3503, %r3847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r3512, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r3515, %r3515, %r3511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r3519, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r3523, %r3523, %r3518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r1924, %r3522, %r3846;
	// end inline asm
	mov.u32 	%r3827, %r3359;
	mov.u32 	%r3828, %r3359;
	mov.u32 	%r3829, %r3359;
	mov.u32 	%r3830, %r3359;
	@%p276 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_200;
$L__BB0_269:                            // %pass19585
                                        //   in Loop: Header=BB0_191 Depth=2
	ld.shared.u32 	%r3830, [%rd31];
	ld.shared.u32 	%r3829, [%rd32];
	ld.shared.u32 	%r3828, [%rd33];
	ld.shared.u32 	%r3827, [%rd34];
$L__BB0_200:                            // %L41486
                                        //   in Loop: Header=BB0_191 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3566, %r3563}, {%r552, %r555}, {%r3830}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3575, %r3572}, {%r552, %r555}, {%r3829}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3584, %r3581}, {%r552, %r555}, {%r3828}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3593, %r3590}, {%r552, %r555}, {%r3827}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3559, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3561, %r3559, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r604, %r3566, %r3561;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3568, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3570, %r3568, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r604, %r3575, %r3570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3577, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3579, %r3577, %r3581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r604, %r3584, %r3579;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3586, %r607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3588, %r3586, %r3590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r604, %r3593, %r3588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3595, %r607, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r604, %r3563, %r3595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3602, %r607, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r604, %r3572, %r3602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3609, %r607, %r3584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3612, %r604, %r3581, %r3609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3616, %r607, %r3593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3619, %r604, %r3590, %r3616;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3664, %r3667}, {%r648, %r654, %r651, %r657}, {%r3564, %r3598}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3683, %r3686}, {%r648, %r654, %r651, %r657}, {%r3573, %r3605}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3671, %r3675}, {%r648, %r654, %r651, %r657}, {%r3582, %r3612}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3690, %r3694}, {%r648, %r654, %r651, %r657}, {%r3591, %r3619}, {%r3359, %r3359};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3663, %r3664, %r3664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3666, %r3667, %r3667, %r3663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r3671, %r3671, %r3666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3674, %r3675, %r3675, %r3670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r1924, %r3674, %r3507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3682, %r3683, %r3683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3685, %r3686, %r3686, %r3682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3689, %r3690, %r3690, %r3685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3693, %r3694, %r3694, %r3689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3788, %r1924, %r3693, %r3526;
	// end inline asm
	add.s32 	%r3786, %r3844, 2;
	setp.eq.s32 	%p323, %r3786, 6;
	@%p323 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_203;
$L__BB0_201:                            // %pass20054
                                        //   in Loop: Header=BB0_191 Depth=2
	@%p91 bra 	$L__BB0_202;
// %bb.270:                             // %pass20064
                                        //   in Loop: Header=BB0_191 Depth=2
	mul.lo.s32 	%r3701, %r3787, 589824;
	add.s32 	%r3702, %r121, %r3701;
	cvt.s64.s32 	%rd336, %r3702;
	add.s64 	%rd337, %rd336, %rd15;
	mul.hi.s64 	%rd338, %rd337, 1024819115206086201;
	shr.u64 	%rd339, %rd338, 63;
	shr.s64 	%rd340, %rd338, 25;
	add.s64 	%rd341, %rd340, %rd339;
	setp.lt.s64 	%p325, %rd337, 0;
	mul.lo.s64 	%rd342, %rd341, 603979776;
	setp.ne.s64 	%p326, %rd342, %rd337;
	and.pred  	%p327, %p325, %p326;
	selp.s64 	%rd343, -1, 0, %p327;
	add.s64 	%rd344, %rd341, %rd343;
	mul.lo.s64 	%rd345, %rd344, -603979776;
	add.s64 	%rd346, %rd345, %rd337;
	shl.b64 	%rd347, %rd346, 2;
	add.s64 	%rd348, %rd4, %rd347;
	st.global.u32 	[%rd348], %r3789;
	add.s32 	%r3703, %r122, %r3701;
	cvt.s64.s32 	%rd349, %r3703;
	add.s64 	%rd350, %rd349, %rd15;
	mul.hi.s64 	%rd351, %rd350, 1024819115206086201;
	shr.u64 	%rd352, %rd351, 63;
	shr.s64 	%rd353, %rd351, 25;
	add.s64 	%rd354, %rd353, %rd352;
	setp.lt.s64 	%p328, %rd350, 0;
	mul.lo.s64 	%rd355, %rd354, 603979776;
	setp.ne.s64 	%p329, %rd355, %rd350;
	and.pred  	%p330, %p328, %p329;
	selp.s64 	%rd356, -1, 0, %p330;
	add.s64 	%rd357, %rd354, %rd356;
	mul.lo.s64 	%rd358, %rd357, -603979776;
	add.s64 	%rd359, %rd358, %rd350;
	shl.b64 	%rd360, %rd359, 2;
	add.s64 	%rd361, %rd4, %rd360;
	st.global.u32 	[%rd361], %r3788;
	bra.uni 	$L__BB0_202;
$L__BB0_205:                            // %L42054
	mov.u32 	%r3705, 0;
	st.global.u32 	[%rd6], %r3705;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3729, 5;
	st.global.u32 	[%rd6], %r3729;
	mov.u64 	%rd408, exception3916;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3728, 5;
	st.global.u32 	[%rd6], %r3728;
	mov.u64 	%rd406, exception3916;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3727, 5;
	st.global.u32 	[%rd6], %r3727;
	mov.u64 	%rd404, exception3916;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3726, 5;
	st.global.u32 	[%rd6], %r3726;
	mov.u64 	%rd402, exception3916;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3725, 5;
	st.global.u32 	[%rd6], %r3725;
	mov.u64 	%rd400, exception3916;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3724, 5;
	st.global.u32 	[%rd6], %r3724;
	mov.u64 	%rd398, exception3916;
	cvta.global.u64 	%rd399, %rd398;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd399;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3723, 5;
	st.global.u32 	[%rd6], %r3723;
	mov.u64 	%rd396, exception3916;
	cvta.global.u64 	%rd397, %rd396;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd397;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3722, 5;
	st.global.u32 	[%rd6], %r3722;
	mov.u64 	%rd394, exception3916;
	cvta.global.u64 	%rd395, %rd394;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd395;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3721, 5;
	st.global.u32 	[%rd6], %r3721;
	mov.u64 	%rd392, exception3916;
	cvta.global.u64 	%rd393, %rd392;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd393;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3720, 5;
	st.global.u32 	[%rd6], %r3720;
	mov.u64 	%rd390, exception3916;
	cvta.global.u64 	%rd391, %rd390;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd391;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3719, 5;
	st.global.u32 	[%rd6], %r3719;
	mov.u64 	%rd388, exception3916;
	cvta.global.u64 	%rd389, %rd388;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd389;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3718, 5;
	st.global.u32 	[%rd6], %r3718;
	mov.u64 	%rd386, exception3916;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3717, 5;
	st.global.u32 	[%rd6], %r3717;
	mov.u64 	%rd384, exception3916;
	cvta.global.u64 	%rd385, %rd384;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd385;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3716, 5;
	st.global.u32 	[%rd6], %r3716;
	mov.u64 	%rd382, exception3916;
	cvta.global.u64 	%rd383, %rd382;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd383;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3715, 5;
	st.global.u32 	[%rd6], %r3715;
	mov.u64 	%rd380, exception3916;
	cvta.global.u64 	%rd381, %rd380;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd381;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3714, 5;
	st.global.u32 	[%rd6], %r3714;
	mov.u64 	%rd378, exception3916;
	cvta.global.u64 	%rd379, %rd378;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd379;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3713, 5;
	st.global.u32 	[%rd6], %r3713;
	mov.u64 	%rd376, exception3916;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3712, 5;
	st.global.u32 	[%rd6], %r3712;
	mov.u64 	%rd374, exception3916;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3711, 5;
	st.global.u32 	[%rd6], %r3711;
	mov.u64 	%rd372, exception3916;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3710, 5;
	st.global.u32 	[%rd6], %r3710;
	mov.u64 	%rd370, exception3916;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3709, 5;
	st.global.u32 	[%rd6], %r3709;
	mov.u64 	%rd368, exception3916;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3708, 5;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd366, exception3916;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3707, 5;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd364, exception3916;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd362, exception3916;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3731, 2;
	st.global.u32 	[%rd6], %r3731;
	mov.u64 	%rd412, exception3916;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3730, 3;
	st.global.u32 	[%rd6], %r3730;
	mov.u64 	%rd410, exception3916;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception13928;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd40, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd46, __unnamed_1;
	cvta.global.u64 	%rd47, %rd46;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd47;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r668, [retval0+0];
	} // callseq 61
	mov.u32 	%r670, 4;
	st.global.u32 	[%rd6], %r670;
	mov.u64 	%rd49, exception3916;
	cvta.global.u64 	%rd50, %rd49;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd50;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r406;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
