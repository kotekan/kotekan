// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2251[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<332>;
	.reg .b16 	%rs<248>;
	.reg .b32 	%r<3755>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<392>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r372, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r381, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r381, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r373, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r382, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r383, %r382, %r1;
	add.s32 	%r384, %r383, %r4;
	mul.wide.u32 	%rd33, %r384, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r385, 1;
	st.global.u32 	[%rd6], %r385;
	setp.gt.u32 	%p4, %r373, 1023;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r374, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r374, %r373;
	setp.gt.s32 	%p6, %r374, 2047;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r375, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r374, %r373;
	mad.lo.s32 	%r386, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r387, %r386, %r386, 4;
	setp.gt.u32 	%p8, %r387, 89478484;
	setp.gt.u32 	%p9, %r375, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r376, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r376, %r375;
	setp.lt.s32 	%p12, %r376, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r388, %r376, %r375;
	mul.hi.s32 	%r389, %r5, 715827883;
	shr.u32 	%r390, %r389, 31;
	add.s32 	%r391, %r389, %r390;
	setp.eq.s32 	%p14, %r388, %r391;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r377, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r377, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r378, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r378, %r377;
	setp.gt.s32 	%p17, %r378, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r379, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r378, %r377;
	and.b32  	%r392, %r6, 31;
	setp.ne.s32 	%p19, %r392, 0;
	setp.lt.s32 	%p20, %r379, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r380, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r380, %r379;
	setp.gt.s32 	%p23, %r380, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r393, %r380, %r379;
	and.b32  	%r394, %r393, 31;
	setp.eq.s32 	%p25, %r394, 0;
	setp.eq.s32 	%p26, %r393, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_13;
$L__BB0_204:                            // %pass162
	and.b32  	%r227, %r1, 3;
	shr.u32 	%r228, %r1, 2;
	mul.lo.s32 	%r395, %r227, %r228;
	and.b32  	%r396, %r395, 7;
	cvt.rn.f32.s32 	%f201, %r396;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p331, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_216;
// %bb.205:
	@%p331 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_206;
$L__BB0_212:
	mov.b32 	%r230, %f785;
	and.b32  	%r397, %r230, 8388607;
	or.b32  	%r3742, %r397, 1065353216;
	mov.b32 	%f780, %r3742;
	add.s32 	%r398, %r230, -1073741824;
	and.b32  	%r3743, %r398, -8388608;
	setp.eq.s32 	%p35, %r3743, 0;
	@%p35 bra 	$L__BB0_215;
// %bb.213:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_214:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r399, %r3743, 192937984;
	add.s32 	%r400, %r3742, %r399;
	mov.b32 	%f213, %r400;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3743, %r3743, %r399;
	mov.b32 	%r3742, %f780;
	setp.ne.s32 	%p36, %r3743, 0;
	setp.ne.s32 	%p37, %r3742, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_214;
$L__BB0_215:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r230, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_216;
$L__BB0_206:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r229, %f172;
	setp.lt.u32 	%p30, %r229, 1073741824;
	@%p30 bra 	$L__BB0_211;
// %bb.207:
	setp.lt.u32 	%p31, %r229, -2147483647;
	@%p31 bra 	$L__BB0_209;
// %bb.208:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_211;
$L__BB0_209:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_211;
// %bb.210:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_211:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_216:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r401, %f169;
	and.b32  	%r237, %r401, -2147483648;
	@%p40 bra 	$L__BB0_218;
// %bb.217:
	mov.b32 	%r402, %f781;
	or.b32  	%r403, %r237, %r402;
	mov.b32 	%f781, %r403;
$L__BB0_218:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r240, %r1, 1;
	and.b32  	%r241, %r240, 6;
	or.b32  	%r242, %r241, 1;
	setp.eq.s32 	%p48, %r241, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3639, %r241, %r228;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3639;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r419, %r8, 8388607;
	or.b32  	%r3643, %r419, 1065353216;
	mov.b32 	%f732, %r3643;
	add.s32 	%r420, %r8, -1073741824;
	and.b32  	%r3644, %r420, -8388608;
	setp.eq.s32 	%p56, %r3644, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r421, %r3644, 192937984;
	add.s32 	%r422, %r3643, %r421;
	mov.b32 	%f267, %r422;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3644, %r3644, %r421;
	mov.b32 	%r3643, %f732;
	setp.ne.s32 	%p57, %r3644, 0;
	setp.ne.s32 	%p58, %r3643, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i964
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r423, %f1;
	and.b32  	%r424, %r423, -2147483648;
	mov.b32 	%r425, %f733;
	or.b32  	%r426, %r424, %r425;
	mov.b32 	%f733, %r426;
$L__BB0_28:                             // %__nv_fmodf.exit991
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r427, %f277;
	and.b32  	%r428, %r427, -2147483648;
	or.b32  	%r429, %r428, 1056964608;
	mov.b32 	%f278, %r429;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r430, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r431, %r430, 1;
	setp.eq.b32 	%p64, %r431, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r432, %r430, 2;
	setp.eq.s32 	%p65, %r432, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r433, %r430, 1;
	and.b32  	%r434, %r433, 2;
	setp.eq.s32 	%p66, %r434, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p69, %r242, 5;
	mul.lo.s32 	%r3640, %r242, %r228;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r436, %r3640, -1431655765;
	shr.u32 	%r437, %r436, 5;
	mul.lo.s32 	%r438, %r437, 48;
	sub.s32 	%r439, %r3640, %r438;
	cvt.rn.f32.s32 	%f308, %r439;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r440, %r16, 8388607;
	or.b32  	%r3645, %r440, 1065353216;
	mov.b32 	%f738, %r3645;
	add.s32 	%r441, %r16, -1073741824;
	and.b32  	%r3646, %r441, -8388608;
	setp.eq.s32 	%p77, %r3646, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r442, %r3646, 192937984;
	add.s32 	%r443, %r3645, %r442;
	mov.b32 	%f320, %r443;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3646, %r3646, %r442;
	mov.b32 	%r3645, %f738;
	setp.ne.s32 	%p78, %r3646, 0;
	setp.ne.s32 	%p79, %r3645, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i995
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r444, %f22;
	and.b32  	%r445, %r444, -2147483648;
	mov.b32 	%r446, %f739;
	or.b32  	%r447, %r445, %r446;
	mov.b32 	%f739, %r447;
$L__BB0_44:                             // %__nv_fmodf.exit1022
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r448, %f330;
	and.b32  	%r449, %r448, -2147483648;
	or.b32  	%r450, %r449, 1056964608;
	mov.b32 	%f331, %r450;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r451, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r452, %r451, 1;
	setp.eq.b32 	%p85, %r452, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r453, %r451, 2;
	setp.eq.s32 	%p86, %r453, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r454, %r451, 1;
	and.b32  	%r455, %r454, 2;
	setp.eq.s32 	%p87, %r455, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p91, %r1, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3639;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r463, %r26, 8388607;
	or.b32  	%r3647, %r463, 1065353216;
	mov.b32 	%f744, %r3647;
	add.s32 	%r464, %r26, -1073741824;
	and.b32  	%r3648, %r464, -8388608;
	setp.eq.s32 	%p99, %r3648, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r465, %r3648, 192937984;
	add.s32 	%r466, %r3647, %r465;
	mov.b32 	%f373, %r466;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3648, %r3648, %r465;
	mov.b32 	%r3647, %f744;
	setp.ne.s32 	%p100, %r3648, 0;
	setp.ne.s32 	%p101, %r3647, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1026
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r467, %f43;
	and.b32  	%r468, %r467, -2147483648;
	mov.b32 	%r469, %f745;
	or.b32  	%r470, %r468, %r469;
	mov.b32 	%f745, %r470;
$L__BB0_60:                             // %__nv_fmodf.exit1053
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r471, %f383;
	and.b32  	%r472, %r471, -2147483648;
	or.b32  	%r473, %r472, 1056964608;
	mov.b32 	%f384, %r473;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r474, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r475, %r474, 1;
	setp.eq.b32 	%p107, %r475, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r476, %r474, 2;
	setp.eq.s32 	%p108, %r476, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r477, %r474, 1;
	and.b32  	%r478, %r477, 2;
	setp.eq.s32 	%p109, %r478, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r480, %r3640, -1431655765;
	shr.u32 	%r481, %r480, 2;
	mul.lo.s32 	%r482, %r481, 6;
	sub.s32 	%r483, %r3640, %r482;
	cvt.rn.f32.s32 	%f414, %r483;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r484, %r34, 8388607;
	or.b32  	%r3649, %r484, 1065353216;
	mov.b32 	%f750, %r3649;
	add.s32 	%r485, %r34, -1073741824;
	and.b32  	%r3650, %r485, -8388608;
	setp.eq.s32 	%p121, %r3650, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1078.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1078
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r486, %r3650, 192937984;
	add.s32 	%r487, %r3649, %r486;
	mov.b32 	%f426, %r487;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3650, %r3650, %r486;
	mov.b32 	%r3649, %f750;
	setp.ne.s32 	%p122, %r3650, 0;
	setp.ne.s32 	%p123, %r3649, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1080
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1057
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1061
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1064
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r488, %f64;
	and.b32  	%r489, %r488, -2147483648;
	mov.b32 	%r490, %f751;
	or.b32  	%r491, %r489, %r490;
	mov.b32 	%f751, %r491;
$L__BB0_76:                             // %__nv_fmodf.exit1084
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r492, %f436;
	and.b32  	%r493, %r492, -2147483648;
	or.b32  	%r494, %r493, 1056964608;
	mov.b32 	%f437, %r494;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r495, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r496, %r495, 1;
	setp.eq.b32 	%p129, %r496, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r497, %r495, 2;
	setp.eq.s32 	%p130, %r497, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r498, %r495, 1;
	and.b32  	%r499, %r498, 2;
	setp.eq.s32 	%p131, %r499, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L673
	@%p28 bra 	$L__BB0_226;
// %bb.78:
	@%p331 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_79;
$L__BB0_222:
	mov.b32 	%r244, %f785;
	and.b32  	%r512, %r244, 8388607;
	or.b32  	%r3744, %r512, 1065353216;
	mov.b32 	%f784, %r3744;
	add.s32 	%r513, %r244, -1073741824;
	and.b32  	%r3745, %r513, -8388608;
	setp.eq.s32 	%p141, %r3745, 0;
	@%p141 bra 	$L__BB0_225;
// %bb.223:                             // %__nv_fmaf_rn.exit4.i.i.i1109.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_224:                            // %__nv_fmaf_rn.exit4.i.i.i1109
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r514, %r3745, 192937984;
	add.s32 	%r515, %r3744, %r514;
	mov.b32 	%f476, %r515;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3745, %r3745, %r514;
	mov.b32 	%r3744, %f784;
	setp.ne.s32 	%p142, %r3745, 0;
	setp.ne.s32 	%p143, %r3744, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_224;
$L__BB0_225:                            // %__internal_fmodf_slowpath_mod.exit.i.i1111
	setp.gt.u32 	%p145, %r244, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_226;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1088
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r243, %f187;
	setp.lt.u32 	%p136, %r243, 1073741824;
	@%p136 bra 	$L__BB0_221;
// %bb.80:
	setp.lt.u32 	%p137, %r243, -2147483647;
	@%p137 bra 	$L__BB0_219;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_221;
$L__BB0_219:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_221;
// %bb.220:                             // %__nv_fmaf_rn.exit.i.i.i1092
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_221:                            // %__internal_fmodf_fastpath_quot.exit.i.i1095
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_226:                            // %__internal_fmodf_kernel.exit.i1114
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_228;
// %bb.227:
	mov.b32 	%r516, %f785;
	or.b32  	%r517, %r237, %r516;
	mov.b32 	%f785, %r517;
$L__BB0_228:                            // %__nv_fmodf.exit1115
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3639;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r533, %r46, 8388607;
	or.b32  	%r3651, %r533, 1065353216;
	mov.b32 	%f756, %r3651;
	add.s32 	%r534, %r46, -1073741824;
	and.b32  	%r3652, %r534, -8388608;
	setp.eq.s32 	%p162, %r3652, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1140.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1140
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r535, %r3652, 192937984;
	add.s32 	%r536, %r3651, %r535;
	mov.b32 	%f530, %r536;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3652, %r3652, %r535;
	mov.b32 	%r3651, %f756;
	setp.ne.s32 	%p163, %r3652, 0;
	setp.ne.s32 	%p164, %r3651, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1142
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1119
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1123
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1126
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1145
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r537, %f85;
	and.b32  	%r538, %r537, -2147483648;
	mov.b32 	%r539, %f757;
	or.b32  	%r540, %r538, %r539;
	mov.b32 	%f757, %r540;
$L__BB0_96:                             // %__nv_fmodf.exit1146
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r541, %f540;
	and.b32  	%r542, %r541, -2147483648;
	or.b32  	%r543, %r542, 1056964608;
	mov.b32 	%f541, %r543;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r544, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r545, %r544, 1;
	setp.eq.b32 	%p170, %r545, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r546, %r544, 2;
	setp.eq.s32 	%p171, %r546, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r547, %r544, 1;
	and.b32  	%r548, %r547, 2;
	setp.eq.s32 	%p172, %r548, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r550, %r3640, -1431655765;
	shr.u32 	%r551, %r550, 5;
	mul.lo.s32 	%r552, %r551, 48;
	sub.s32 	%r553, %r3640, %r552;
	cvt.rn.f32.s32 	%f571, %r553;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r554, %r54, 8388607;
	or.b32  	%r3653, %r554, 1065353216;
	mov.b32 	%f762, %r3653;
	add.s32 	%r555, %r54, -1073741824;
	and.b32  	%r3654, %r555, -8388608;
	setp.eq.s32 	%p183, %r3654, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1171.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1171
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r556, %r3654, 192937984;
	add.s32 	%r557, %r3653, %r556;
	mov.b32 	%f583, %r557;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3654, %r3654, %r556;
	mov.b32 	%r3653, %f762;
	setp.ne.s32 	%p184, %r3654, 0;
	setp.ne.s32 	%p185, %r3653, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1173
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1150
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1154
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1157
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1176
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r558, %f106;
	and.b32  	%r559, %r558, -2147483648;
	mov.b32 	%r560, %f763;
	or.b32  	%r561, %r559, %r560;
	mov.b32 	%f763, %r561;
$L__BB0_112:                            // %__nv_fmodf.exit1177
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r562, %f593;
	and.b32  	%r563, %r562, -2147483648;
	or.b32  	%r564, %r563, 1056964608;
	mov.b32 	%f594, %r564;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r565, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r566, %r565, 1;
	setp.eq.b32 	%p191, %r566, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r567, %r565, 2;
	setp.eq.s32 	%p192, %r567, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r568, %r565, 1;
	and.b32  	%r569, %r568, 2;
	setp.eq.s32 	%p193, %r569, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3639;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r577, %r64, 8388607;
	or.b32  	%r3655, %r577, 1065353216;
	mov.b32 	%f768, %r3655;
	add.s32 	%r578, %r64, -1073741824;
	and.b32  	%r3656, %r578, -8388608;
	setp.eq.s32 	%p203, %r3656, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1202.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1202
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r579, %r3656, 192937984;
	add.s32 	%r580, %r3655, %r579;
	mov.b32 	%f636, %r580;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3656, %r3656, %r579;
	mov.b32 	%r3655, %f768;
	setp.ne.s32 	%p204, %r3656, 0;
	setp.ne.s32 	%p205, %r3655, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1204
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1181
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1185
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1188
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1207
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r581, %f127;
	and.b32  	%r582, %r581, -2147483648;
	mov.b32 	%r583, %f769;
	or.b32  	%r584, %r582, %r583;
	mov.b32 	%f769, %r584;
$L__BB0_128:                            // %__nv_fmodf.exit1208
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r585, %f646;
	and.b32  	%r586, %r585, -2147483648;
	or.b32  	%r587, %r586, 1056964608;
	mov.b32 	%f647, %r587;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r588, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r589, %r588, 1;
	setp.eq.b32 	%p211, %r589, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r590, %r588, 2;
	setp.eq.s32 	%p212, %r590, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r591, %r588, 1;
	and.b32  	%r592, %r591, 2;
	setp.eq.s32 	%p213, %r592, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r594, %r3640, -1431655765;
	shr.u32 	%r595, %r594, 2;
	mul.lo.s32 	%r596, %r595, 6;
	sub.s32 	%r597, %r3640, %r596;
	cvt.rn.f32.s32 	%f677, %r597;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r598, %r72, 8388607;
	or.b32  	%r3657, %r598, 1065353216;
	mov.b32 	%f774, %r3657;
	add.s32 	%r599, %r72, -1073741824;
	and.b32  	%r3658, %r599, -8388608;
	setp.eq.s32 	%p223, %r3658, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1233.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1233
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r600, %r3658, 192937984;
	add.s32 	%r601, %r3657, %r600;
	mov.b32 	%f689, %r601;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3658, %r3658, %r600;
	mov.b32 	%r3657, %f774;
	setp.ne.s32 	%p224, %r3658, 0;
	setp.ne.s32 	%p225, %r3657, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1235
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1216
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1219
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1238
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r602, %f148;
	and.b32  	%r603, %r602, -2147483648;
	mov.b32 	%r604, %f775;
	or.b32  	%r605, %r603, %r604;
	mov.b32 	%f775, %r605;
$L__BB0_144:                            // %__nv_fmodf.exit1239
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r606, %f699;
	and.b32  	%r607, %r606, -2147483648;
	or.b32  	%r608, %r607, 1056964608;
	mov.b32 	%f700, %r608;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r609, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r610, %r609, 1;
	setp.eq.b32 	%p231, %r610, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r611, %r609, 2;
	setp.eq.s32 	%p232, %r611, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r612, %r609, 1;
	and.b32  	%r613, %r612, 2;
	setp.eq.s32 	%p233, %r613, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L961
	mov.u32 	%r253, 999999999;
	cvt.u16.u32 	%rs246, %r1;
	@%p91 bra 	$L__BB0_230;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs246, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs246, %rs33;
	cvt.u32.u16 	%r627, %rs34;
	and.b32  	%r628, %r627, 255;
	mad.lo.s32 	%r629, %r628, 24, %r3;
	cvt.u16.u32 	%rs35, %r629;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r630, %rs39;
	mul.wide.u32 	%rd34, %r630, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r631, [%rd35];
	shl.b32 	%r632, %r631, 16;
	cvt.s32.s16 	%r83, %r631;
	shr.s32 	%r84, %r631, 16;
	or.b32  	%r633, %r632, 65535;
	setp.lt.u32 	%p237, %r633, 1638399;
	setp.lt.u32 	%p238, %r631, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_229;
	bra.uni 	$L__BB0_147;
$L__BB0_229:                            // %L1237
	mul.lo.s32 	%r637, %r84, 801;
	mad.lo.s32 	%r253, %r83, 33, %r637;
$L__BB0_230:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r410, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r411, %r410, -2147483648;
	mov.b32 	%r524, %f487;
	or.b32  	%r412, %r411, 1056964608;
	and.b32  	%r525, %r524, -2147483648;
	mov.b32 	%f225, %r412;
	or.b32  	%r526, %r525, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r526;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r413, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r414, %r413, 1;
	cvt.rzi.s32.f32 	%r527, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r414, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r528, %r527, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r415, %r413, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r528, 1;
	setp.eq.s32 	%p44, %r415, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r416, %r413, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r529, %r527, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r417, %r416, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r529, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r530, %r527, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r417, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r531, %r530, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r531, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r406, %f254;
	mov.b32 	%r409, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r405, %r409, -2147483648;
	mov.b32 	%r501, %f62;
	mov.b32 	%r502, %f83;
	mov.b32 	%r507, %f63;
	mov.b32 	%r508, %f84;
	mov.b32 	%r520, %f517;
	mov.b32 	%r523, %f514;
	mov.b32 	%r457, %f20;
	mov.b32 	%r458, %f41;
	mov.b32 	%r460, %f21;
	mov.b32 	%r461, %f42;
	xor.b32  	%r504, %r507, -2147483648;
	xor.b32  	%r505, %r508, -2147483648;
	xor.b32  	%r519, %r523, -2147483648;
	mov.b32 	%r571, %f104;
	mov.b32 	%r572, %f125;
	mov.b32 	%r574, %f105;
	mov.b32 	%r575, %f126;
	mov.b32 	%r615, %f146;
	mov.b32 	%r616, %f167;
	mov.b32 	%r621, %f147;
	xor.b32  	%r618, %r621, -2147483648;
	mov.b32 	%r622, %f168;
	xor.b32  	%r619, %r622, -2147483648;
	and.b32  	%r638, %r1, 24;
	setp.ne.s32 	%p240, %r638, 24;
	cvt.u16.u32 	%rs247, %r228;
	mul.lo.s32 	%r3659, %r2, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.231:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs46, %rs247, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs247, %rs48;
	cvt.u32.u16 	%r644, %rs49;
	and.b32  	%r3660, %r644, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s16 	%rs41, %rs247, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs247, %rs43;
	cvt.u32.u16 	%r639, %rs44;
	and.b32  	%r3660, %r639, 255;
	or.b32  	%r640, %r3659, %r3;
	mad.lo.s32 	%r641, %r227, 144, %r640;
	mad.lo.s32 	%r642, %r3660, 24, %r641;
	mul.wide.u32 	%rd41, %r642, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r88, [%rd42];
	ld.global.u32 	%r89, [%rd42+2304];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r456, %r458, %r457;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r500, %r502, %r501;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r504;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r509, %r502, %r501;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r518, %r520, %r519;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r521, %r523, %r520;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r570, %r572, %r571;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r573, %r575, %r574;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r614, %r616, %r615;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r617, %r619, %r618;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r620, %r622, %r621;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r623, %r616, %r615;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r646, %r373, 16;
	shl.b32 	%r647, %r377, 8;
	add.s32 	%r90, %r647, %r646;
	shl.b32 	%r648, %r2, 8;
	shl.b32 	%r649, %r1, 3;
	and.b32  	%r650, %r649, 128;
	shl.b32 	%r651, %r1, 2;
	and.b32  	%r652, %r651, 60;
	or.b32  	%r653, %r650, %r648;
	or.b32  	%r91, %r653, %r652;
	or.b32  	%r654, %r651, %r653;
	or.b32  	%r92, %r654, 64;
	add.s32 	%r93, %r3, 24;
	shr.u32 	%r655, %r1, 4;
	and.b32  	%r656, %r240, 30;
	or.b32  	%r657, %r656, %r655;
	mul.lo.s32 	%r94, %r657, 257;
	or.b32  	%r658, %r240, %r655;
	or.b32  	%r659, %r658, 32;
	mul.lo.s32 	%r95, %r659, 257;
	and.b16  	%rs51, %rs246, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs246, %rs54;
	cvt.u32.u16 	%r660, %rs55;
	and.b32  	%r96, %r660, 255;
	and.b32  	%r661, %r4, 224;
	shr.u32 	%r662, %r3, 3;
	mad.lo.s32 	%r97, %r662, 257, %r661;
	shr.u32 	%r663, %r93, 3;
	mad.lo.s32 	%r98, %r663, 257, %r661;
	add.s32 	%r664, %r3, 48;
	shr.u32 	%r665, %r664, 3;
	mad.lo.s32 	%r99, %r665, 257, %r661;
	add.s32 	%r666, %r3, 72;
	shr.u32 	%r667, %r666, 3;
	mad.lo.s32 	%r100, %r667, 257, %r661;
	or.b32  	%r668, %r662, 12;
	mad.lo.s32 	%r101, %r668, 257, %r661;
	add.s32 	%r669, %r3, 120;
	shr.u32 	%r670, %r669, 3;
	mad.lo.s32 	%r102, %r670, 257, %r661;
	add.s32 	%r671, %r3, 144;
	shr.u32 	%r672, %r671, 3;
	mad.lo.s32 	%r103, %r672, 257, %r661;
	add.s32 	%r673, %r3, 168;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r104, %r674, 257, %r661;
	or.b32  	%r675, %r662, 24;
	mad.lo.s32 	%r105, %r675, 257, %r661;
	add.s32 	%r676, %r3, 216;
	shr.u32 	%r677, %r676, 3;
	mad.lo.s32 	%r106, %r677, 257, %r661;
	add.s32 	%r678, %r3, 240;
	shr.u32 	%r679, %r678, 3;
	mad.lo.s32 	%r107, %r679, 257, %r661;
	add.s32 	%r680, %r3, 264;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r108, %r681, 257, %r661;
	or.b32  	%r682, %r662, 36;
	mad.lo.s32 	%r109, %r682, 257, %r661;
	add.s32 	%r683, %r3, 312;
	shr.u32 	%r684, %r683, 3;
	mad.lo.s32 	%r110, %r684, 257, %r661;
	add.s32 	%r685, %r3, 336;
	shr.u32 	%r686, %r685, 3;
	mad.lo.s32 	%r111, %r686, 257, %r661;
	add.s32 	%r687, %r3, 360;
	shr.u32 	%r688, %r687, 3;
	mad.lo.s32 	%r112, %r688, 257, %r661;
	or.b32  	%r689, %r662, 48;
	mad.lo.s32 	%r113, %r689, 257, %r661;
	add.s32 	%r690, %r3, 408;
	shr.u32 	%r691, %r690, 3;
	mad.lo.s32 	%r114, %r691, 257, %r661;
	add.s32 	%r692, %r3, 432;
	shr.u32 	%r693, %r692, 3;
	mad.lo.s32 	%r115, %r693, 257, %r661;
	add.s32 	%r694, %r3, 456;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r116, %r695, 257, %r661;
	or.b32  	%r696, %r662, 60;
	mad.lo.s32 	%r117, %r696, 257, %r661;
	add.s32 	%r697, %r3, 504;
	bfe.u32 	%r698, %r697, 3, 6;
	mad.lo.s32 	%r118, %r698, 257, %r661;
	mul.lo.s32 	%r699, %r3, 33;
	mad.lo.s32 	%r700, %r227, 4806, %r699;
	mad.lo.s32 	%r701, %r3660, 801, %r700;
	bfe.s32 	%r702, %r3, 1, 1;
	and.b32  	%r703, %r702, 4112;
	shr.u32 	%r704, %r3, 4;
	bfe.s32 	%r705, %r3, 2, 1;
	and.b32  	%r706, %r705, 2056;
	mul.lo.s32 	%r707, %r227, 6;
	bfe.s32 	%r708, %r3, 3, 1;
	and.b32  	%r709, %r3, 8;
	setp.eq.s32 	%p241, %r709, 0;
	and.b32  	%r710, %r708, 1028;
	and.b32  	%r711, %r3, 1;
	neg.s32 	%r712, %r711;
	and.b32  	%r713, %r712, 8256;
	mad.lo.s32 	%r714, %r704, 514, %r707;
	add.s32 	%r715, %r714, %r703;
	add.s32 	%r716, %r715, %r706;
	add.s32 	%r717, %r716, %r710;
	add.s32 	%r718, %r717, %r713;
	add.s32 	%r719, %r718, %r3660;
	mul.wide.u32 	%rd43, %r719, 4;
	mov.u64 	%rd44, shmem;
	add.s64 	%rd7, %rd44, %rd43;
	shr.u32 	%r720, %r93, 5;
	bfe.s32 	%r721, %r93, 4, 1;
	and.b32  	%r722, %r721, 514;
	selp.b32 	%r723, 1028, 0, %p241;
	mad.lo.s32 	%r724, %r720, 257, %r707;
	add.s32 	%r725, %r724, %r703;
	add.s32 	%r726, %r725, %r706;
	add.s32 	%r727, %r726, %r723;
	add.s32 	%r728, %r727, %r713;
	add.s32 	%r729, %r728, %r722;
	add.s32 	%r730, %r729, %r3660;
	mul.wide.u32 	%rd45, %r730, 4;
	add.s64 	%rd8, %rd44, %rd45;
	add.s32 	%r731, %r719, 32;
	mul.wide.u32 	%rd46, %r731, 4;
	add.s64 	%rd9, %rd44, %rd46;
	add.s32 	%r732, %r730, 32;
	mul.wide.u32 	%rd47, %r732, 4;
	add.s64 	%rd10, %rd44, %rd47;
	mul.lo.s32 	%r733, %r375, 589824;
	mad.lo.s32 	%r734, %r379, 1152, %r733;
	mad.lo.s32 	%r735, %r3, 24, %r3659;
	add.s32 	%r119, %r735, %r96;
	cvt.s64.s32 	%rd11, %r734;
	cvt.u16.u32 	%rs56, %r93;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r736, %rs61;
	and.b32  	%r737, %r736, 255;
	or.b32  	%r738, %r3659, %r96;
	mad.lo.s32 	%r120, %r737, 24, %r738;
	mul.wide.u32 	%rd48, %r701, 4;
	add.s64 	%rd12, %rd44, %rd48;
	add.s32 	%r739, %r719, 64;
	mul.wide.u32 	%rd49, %r739, 4;
	add.s64 	%rd13, %rd44, %rd49;
	add.s32 	%r740, %r730, 64;
	mul.wide.u32 	%rd50, %r740, 4;
	add.s64 	%rd14, %rd44, %rd50;
	add.s32 	%r741, %r719, 96;
	mul.wide.u32 	%rd51, %r741, 4;
	add.s64 	%rd15, %rd44, %rd51;
	add.s32 	%r742, %r730, 96;
	mul.wide.u32 	%rd52, %r742, 4;
	add.s64 	%rd16, %rd44, %rd52;
	add.s32 	%r743, %r719, 128;
	mul.wide.u32 	%rd53, %r743, 4;
	add.s64 	%rd17, %rd44, %rd53;
	add.s32 	%r744, %r730, 128;
	mul.wide.u32 	%rd54, %r744, 4;
	add.s64 	%rd18, %rd44, %rd54;
	add.s32 	%r745, %r719, 160;
	mul.wide.u32 	%rd55, %r745, 4;
	add.s64 	%rd19, %rd44, %rd55;
	add.s32 	%r746, %r730, 160;
	mul.wide.u32 	%rd56, %r746, 4;
	add.s64 	%rd20, %rd44, %rd56;
	add.s32 	%r747, %r719, 192;
	mul.wide.u32 	%rd57, %r747, 4;
	add.s64 	%rd21, %rd44, %rd57;
	add.s32 	%r748, %r730, 192;
	mul.wide.u32 	%rd58, %r748, 4;
	add.s64 	%rd22, %rd44, %rd58;
	add.s32 	%r749, %r719, 224;
	mul.wide.u32 	%rd59, %r749, 4;
	add.s64 	%rd23, %rd44, %rd59;
	add.s32 	%r750, %r730, 224;
	mul.wide.u32 	%rd60, %r750, 4;
	add.s64 	%rd24, %rd44, %rd60;
	setp.lt.u32 	%p243, %r1, 16;
	setp.gt.u32 	%p272, %r3, 7;
	setp.lt.u32 	%p276, %r1, 24;
	mov.u32 	%r3693, %r121;
	mov.u32 	%r3694, %r121;
	mov.u32 	%r3695, %r121;
	mov.u32 	%r3696, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_202:                            // %L26405
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r226, %r121, 48;
	setp.ne.s32 	%p330, %r121, 960;
	mov.u32 	%r121, %r226;
	@%p330 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_203;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_190 Depth 2
	add.s32 	%r751, %r121, %r373;
	setp.lt.s32 	%p242, %r751, %r374;
	@%p242 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_203;
$L__BB0_151:                            // %oksrem704
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r944, %r121, -1431655765;
	shr.u32 	%r945, %r944, 5;
	mul.lo.s32 	%r260, %r945, 48;
	add.s32 	%r946, %r260, %r3;
	cvt.u16.u32 	%rs62, %r946;
	shr.s16 	%rs63, %rs62, 15;
	shr.u16 	%rs64, %rs63, 6;
	add.s16 	%rs65, %rs62, %rs64;
	and.b16  	%rs66, %rs65, -1024;
	sub.s16 	%rs67, %rs62, %rs66;
	cvt.u32.u16 	%r947, %rs67;
	shl.b32 	%r948, %r947, 16;
	or.b32  	%r949, %r948, %r91;
	add.s32 	%r950, %r90, %r949;
	shr.s32 	%r951, %r950, 31;
	shr.u32 	%r952, %r951, 6;
	add.s32 	%r953, %r950, %r952;
	shr.s32 	%r954, %r953, 26;
	setp.lt.s32 	%p244, %r950, 0;
	and.b32  	%r955, %r953, -67108864;
	setp.ne.s32 	%p245, %r955, %r950;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r956, 1, 0, %p246;
	sub.s32 	%r957, %r956, %r954;
	shl.b32 	%r958, %r957, 26;
	add.s32 	%r959, %r958, %r950;
	mul.wide.s32 	%rd61, %r959, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r960, %r961, %r962, %r963}, [%rd62];
	or.b32  	%r964, %r92, %r948;
	add.s32 	%r965, %r90, %r964;
	shr.s32 	%r966, %r965, 31;
	shr.u32 	%r967, %r966, 6;
	add.s32 	%r968, %r965, %r967;
	shr.u32 	%r969, %r968, 26;
	shr.u32 	%r970, %r965, 31;
	sub.s32 	%r971, %r970, %r969;
	shl.b32 	%r972, %r971, 26;
	add.s32 	%r973, %r972, %r965;
	mul.wide.s32 	%rd63, %r973, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r974, %r975, %r976, %r977}, [%rd64];
	add.s32 	%r978, %r93, %r260;
	cvt.u16.u32 	%rs68, %r978;
	shr.s16 	%rs69, %rs68, 15;
	shr.u16 	%rs70, %rs69, 6;
	add.s16 	%rs71, %rs68, %rs70;
	and.b16  	%rs72, %rs71, -1024;
	sub.s16 	%rs73, %rs68, %rs72;
	cvt.u32.u16 	%r979, %rs73;
	shl.b32 	%r980, %r979, 16;
	or.b32  	%r981, %r980, %r91;
	add.s32 	%r982, %r90, %r981;
	shr.s32 	%r983, %r982, 31;
	shr.u32 	%r984, %r983, 6;
	add.s32 	%r985, %r982, %r984;
	shr.s32 	%r986, %r985, 26;
	setp.lt.s32 	%p247, %r982, 0;
	and.b32  	%r987, %r985, -67108864;
	setp.ne.s32 	%p248, %r987, %r982;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r988, 1, 0, %p249;
	sub.s32 	%r989, %r988, %r986;
	shl.b32 	%r990, %r989, 26;
	add.s32 	%r991, %r990, %r982;
	mul.wide.s32 	%rd65, %r991, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r992, %r993, %r994, %r995}, [%rd66];
	or.b32  	%r996, %r92, %r980;
	add.s32 	%r997, %r90, %r996;
	shr.s32 	%r998, %r997, 31;
	shr.u32 	%r999, %r998, 6;
	add.s32 	%r1000, %r997, %r999;
	shr.u32 	%r1001, %r1000, 26;
	shr.u32 	%r1002, %r997, 31;
	sub.s32 	%r1003, %r1002, %r1001;
	shl.b32 	%r1004, %r1003, 26;
	add.s32 	%r1005, %r1004, %r997;
	mul.wide.s32 	%rd67, %r1005, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r1006, %r1007, %r1008, %r1009}, [%rd68];
	selp.b32 	%r1010, %r962, %r960, %p243;
	shfl.sync.bfly.b32	%r1011, %r1010, 16, 31, -1;
	selp.b32 	%r754, %r960, %r1011, %p243;
	selp.b32 	%r759, %r1011, %r962, %p243;
	selp.b32 	%r1012, %r963, %r961, %p243;
	shfl.sync.bfly.b32	%r1013, %r1012, 16, 31, -1;
	selp.b32 	%r762, %r961, %r1013, %p243;
	selp.b32 	%r767, %r1013, %r963, %p243;
	selp.b32 	%r1014, %r976, %r974, %p243;
	shfl.sync.bfly.b32	%r1015, %r1014, 16, 31, -1;
	selp.b32 	%r770, %r974, %r1015, %p243;
	selp.b32 	%r775, %r1015, %r976, %p243;
	selp.b32 	%r1016, %r977, %r975, %p243;
	shfl.sync.bfly.b32	%r1017, %r1016, 16, 31, -1;
	selp.b32 	%r778, %r975, %r1017, %p243;
	selp.b32 	%r783, %r1017, %r977, %p243;
	selp.b32 	%r1018, %r994, %r992, %p243;
	shfl.sync.bfly.b32	%r1019, %r1018, 16, 31, -1;
	selp.b32 	%r786, %r992, %r1019, %p243;
	selp.b32 	%r791, %r1019, %r994, %p243;
	selp.b32 	%r1020, %r995, %r993, %p243;
	shfl.sync.bfly.b32	%r1021, %r1020, 16, 31, -1;
	selp.b32 	%r794, %r993, %r1021, %p243;
	selp.b32 	%r799, %r1021, %r995, %p243;
	selp.b32 	%r1022, %r1008, %r1006, %p243;
	shfl.sync.bfly.b32	%r1023, %r1022, 16, 31, -1;
	selp.b32 	%r802, %r1006, %r1023, %p243;
	selp.b32 	%r807, %r1023, %r1008, %p243;
	selp.b32 	%r1024, %r1009, %r1007, %p243;
	shfl.sync.bfly.b32	%r1025, %r1024, 16, 31, -1;
	selp.b32 	%r810, %r1007, %r1025, %p243;
	selp.b32 	%r815, %r1025, %r1009, %p243;
	shl.b32 	%r755, %r759, 4;
	mov.u32 	%r753, 252645135;
	// begin inline asm
	lop3.b32 %r817, %r753, %r754, %r755, 202;
	// end inline asm
	shr.u32 	%r758, %r754, 4;
	// begin inline asm
	lop3.b32 %r833, %r753, %r758, %r759, 202;
	// end inline asm
	shl.b32 	%r763, %r767, 4;
	// begin inline asm
	lop3.b32 %r825, %r753, %r762, %r763, 202;
	// end inline asm
	shr.u32 	%r766, %r762, 4;
	// begin inline asm
	lop3.b32 %r841, %r753, %r766, %r767, 202;
	// end inline asm
	shl.b32 	%r771, %r775, 4;
	// begin inline asm
	lop3.b32 %r849, %r753, %r770, %r771, 202;
	// end inline asm
	shr.u32 	%r774, %r770, 4;
	// begin inline asm
	lop3.b32 %r865, %r753, %r774, %r775, 202;
	// end inline asm
	shl.b32 	%r779, %r783, 4;
	// begin inline asm
	lop3.b32 %r857, %r753, %r778, %r779, 202;
	// end inline asm
	shr.u32 	%r782, %r778, 4;
	// begin inline asm
	lop3.b32 %r873, %r753, %r782, %r783, 202;
	// end inline asm
	shl.b32 	%r787, %r791, 4;
	// begin inline asm
	lop3.b32 %r818, %r753, %r786, %r787, 202;
	// end inline asm
	shr.u32 	%r790, %r786, 4;
	// begin inline asm
	lop3.b32 %r834, %r753, %r790, %r791, 202;
	// end inline asm
	shl.b32 	%r795, %r799, 4;
	// begin inline asm
	lop3.b32 %r826, %r753, %r794, %r795, 202;
	// end inline asm
	shr.u32 	%r798, %r794, 4;
	// begin inline asm
	lop3.b32 %r842, %r753, %r798, %r799, 202;
	// end inline asm
	shl.b32 	%r803, %r807, 4;
	// begin inline asm
	lop3.b32 %r850, %r753, %r802, %r803, 202;
	// end inline asm
	shr.u32 	%r806, %r802, 4;
	// begin inline asm
	lop3.b32 %r866, %r753, %r806, %r807, 202;
	// end inline asm
	shl.b32 	%r811, %r815, 4;
	// begin inline asm
	lop3.b32 %r858, %r753, %r810, %r811, 202;
	// end inline asm
	shr.u32 	%r814, %r810, 4;
	// begin inline asm
	lop3.b32 %r874, %r753, %r814, %r815, 202;
	// end inline asm
	mov.u32 	%r819, 25152;
	// begin inline asm
	prmt.b32 %r881, %r817, %r818, %r819;
	// end inline asm
	mov.u32 	%r823, 29521;
	// begin inline asm
	prmt.b32 %r913, %r817, %r818, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r825, %r826, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r825, %r826, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r833, %r834, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r833, %r834, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r841, %r842, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r841, %r842, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r849, %r850, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r849, %r850, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r857, %r858, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r857, %r858, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r865, %r866, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r930, %r865, %r866, %r823;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r873, %r874, %r819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r938, %r873, %r874, %r823;
	// end inline asm
	mov.u32 	%r883, 21520;
	// begin inline asm
	prmt.b32 %r880, %r881, %r882, %r883;
	// end inline asm
	mov.u32 	%r887, 30258;
	// begin inline asm
	prmt.b32 %r884, %r881, %r882, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r889, %r890, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r892, %r889, %r890, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r897, %r898, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r900, %r897, %r898, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r905, %r906, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r908, %r905, %r906, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r913, %r914, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r916, %r913, %r914, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r920, %r921, %r922, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r924, %r921, %r922, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r928, %r929, %r930, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r932, %r929, %r930, %r887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r936, %r937, %r938, %r883;
	// end inline asm
	// begin inline asm
	prmt.b32 %r940, %r937, %r938, %r887;
	// end inline asm
	mul.hi.s16 	%rs74, %rs62, 10923;
	shr.u16 	%rs75, %rs74, 15;
	shr.s16 	%rs76, %rs74, 2;
	add.s16 	%rs77, %rs76, %rs75;
	mul.lo.s16 	%rs78, %rs77, 24;
	sub.s16 	%rs79, %rs62, %rs78;
	cvt.s32.s16 	%r1026, %rs79;
	add.s32 	%r1027, %r94, %r1026;
	mul.wide.s32 	%rd69, %r1027, 4;
	add.s64 	%rd71, %rd44, %rd69;
	st.shared.u32 	[%rd71], %r880;
	add.s32 	%r1028, %r1027, 128;
	mul.wide.u32 	%rd72, %r1028, 4;
	add.s64 	%rd73, %rd44, %rd72;
	st.shared.u32 	[%rd73], %r888;
	add.s32 	%r1029, %r1027, 64;
	mul.wide.u32 	%rd74, %r1029, 4;
	add.s64 	%rd75, %rd44, %rd74;
	st.shared.u32 	[%rd75], %r884;
	add.s32 	%r1030, %r1027, 192;
	mul.wide.u32 	%rd76, %r1030, 4;
	add.s64 	%rd77, %rd44, %rd76;
	st.shared.u32 	[%rd77], %r892;
	add.s32 	%r1031, %r95, %r1026;
	mul.wide.u32 	%rd78, %r1031, 4;
	add.s64 	%rd79, %rd44, %rd78;
	st.shared.u32 	[%rd79], %r896;
	add.s32 	%r1032, %r1031, 128;
	mul.wide.u32 	%rd80, %r1032, 4;
	add.s64 	%rd81, %rd44, %rd80;
	st.shared.u32 	[%rd81], %r904;
	add.s32 	%r1033, %r1031, 64;
	mul.wide.u32 	%rd82, %r1033, 4;
	add.s64 	%rd83, %rd44, %rd82;
	st.shared.u32 	[%rd83], %r900;
	add.s32 	%r1034, %r1031, 192;
	mul.wide.u32 	%rd84, %r1034, 4;
	add.s64 	%rd85, %rd44, %rd84;
	st.shared.u32 	[%rd85], %r908;
	add.s32 	%r1035, %r1027, 32;
	mul.wide.u32 	%rd86, %r1035, 4;
	add.s64 	%rd87, %rd44, %rd86;
	st.shared.u32 	[%rd87], %r912;
	add.s32 	%r1036, %r1027, 160;
	mul.wide.u32 	%rd88, %r1036, 4;
	add.s64 	%rd89, %rd44, %rd88;
	st.shared.u32 	[%rd89], %r920;
	add.s32 	%r1037, %r1027, 96;
	mul.wide.u32 	%rd90, %r1037, 4;
	add.s64 	%rd91, %rd44, %rd90;
	st.shared.u32 	[%rd91], %r916;
	add.s32 	%r1038, %r1027, 224;
	mul.wide.u32 	%rd92, %r1038, 4;
	add.s64 	%rd93, %rd44, %rd92;
	st.shared.u32 	[%rd93], %r924;
	add.s32 	%r1039, %r1031, 32;
	mul.wide.u32 	%rd94, %r1039, 4;
	add.s64 	%rd95, %rd44, %rd94;
	st.shared.u32 	[%rd95], %r928;
	add.s32 	%r1040, %r1031, 160;
	mul.wide.u32 	%rd96, %r1040, 4;
	add.s64 	%rd97, %rd44, %rd96;
	st.shared.u32 	[%rd97], %r936;
	add.s32 	%r1041, %r1031, 96;
	mul.wide.u32 	%rd98, %r1041, 4;
	add.s64 	%rd99, %rd44, %rd98;
	st.shared.u32 	[%rd99], %r932;
	add.s32 	%r1042, %r1031, 224;
	mul.wide.u32 	%rd100, %r1042, 4;
	add.s64 	%rd101, %rd44, %rd100;
	st.shared.u32 	[%rd101], %r940;
	bar.sync 	0;
	add.s32 	%r1043, %r260, %r96;
	cvt.u16.u32 	%rs80, %r1043;
	mul.hi.s16 	%rs81, %rs80, 10923;
	shr.u16 	%rs82, %rs81, 15;
	shr.s16 	%rs83, %rs81, 2;
	add.s16 	%rs84, %rs83, %rs82;
	mul.lo.s16 	%rs85, %rs84, 24;
	sub.s16 	%rs86, %rs80, %rs85;
	cvt.s32.s16 	%r261, %rs86;
	add.s32 	%r1044, %r97, %r261;
	mul.wide.s32 	%rd102, %r1044, 4;
	add.s64 	%rd103, %rd44, %rd102;
	ld.shared.u32 	%r262, [%rd103];
	add.s32 	%r1045, %r98, %r261;
	mul.wide.u32 	%rd104, %r1045, 4;
	add.s64 	%rd105, %rd44, %rd104;
	ld.shared.u32 	%r263, [%rd105];
	add.s32 	%r1046, %r99, %r261;
	mul.wide.u32 	%rd106, %r1046, 4;
	add.s64 	%rd107, %rd44, %rd106;
	ld.shared.u32 	%r264, [%rd107];
	add.s32 	%r1047, %r100, %r261;
	mul.wide.u32 	%rd108, %r1047, 4;
	add.s64 	%rd109, %rd44, %rd108;
	ld.shared.u32 	%r265, [%rd109];
	add.s32 	%r1048, %r101, %r261;
	mul.wide.u32 	%rd110, %r1048, 4;
	add.s64 	%rd111, %rd44, %rd110;
	ld.shared.u32 	%r266, [%rd111];
	add.s32 	%r1049, %r102, %r261;
	mul.wide.u32 	%rd112, %r1049, 4;
	add.s64 	%rd113, %rd44, %rd112;
	ld.shared.u32 	%r267, [%rd113];
	add.s32 	%r1050, %r103, %r261;
	mul.wide.u32 	%rd114, %r1050, 4;
	add.s64 	%rd115, %rd44, %rd114;
	ld.shared.u32 	%r268, [%rd115];
	add.s32 	%r1051, %r104, %r261;
	mul.wide.u32 	%rd116, %r1051, 4;
	add.s64 	%rd117, %rd44, %rd116;
	ld.shared.u32 	%r269, [%rd117];
	add.s32 	%r1052, %r105, %r261;
	mul.wide.u32 	%rd118, %r1052, 4;
	add.s64 	%rd119, %rd44, %rd118;
	ld.shared.u32 	%r270, [%rd119];
	add.s32 	%r1053, %r106, %r261;
	mul.wide.u32 	%rd120, %r1053, 4;
	add.s64 	%rd121, %rd44, %rd120;
	ld.shared.u32 	%r271, [%rd121];
	add.s32 	%r1054, %r107, %r261;
	mul.wide.u32 	%rd122, %r1054, 4;
	add.s64 	%rd123, %rd44, %rd122;
	ld.shared.u32 	%r272, [%rd123];
	add.s32 	%r1055, %r108, %r261;
	mul.wide.u32 	%rd124, %r1055, 4;
	add.s64 	%rd125, %rd44, %rd124;
	ld.shared.u32 	%r273, [%rd125];
	add.s32 	%r1056, %r109, %r261;
	mul.wide.u32 	%rd126, %r1056, 4;
	add.s64 	%rd127, %rd44, %rd126;
	ld.shared.u32 	%r274, [%rd127];
	add.s32 	%r1057, %r110, %r261;
	mul.wide.u32 	%rd128, %r1057, 4;
	add.s64 	%rd129, %rd44, %rd128;
	ld.shared.u32 	%r275, [%rd129];
	add.s32 	%r1058, %r111, %r261;
	mul.wide.u32 	%rd130, %r1058, 4;
	add.s64 	%rd131, %rd44, %rd130;
	ld.shared.u32 	%r276, [%rd131];
	add.s32 	%r1059, %r112, %r261;
	mul.wide.u32 	%rd132, %r1059, 4;
	add.s64 	%rd133, %rd44, %rd132;
	ld.shared.u32 	%r277, [%rd133];
	add.s32 	%r1060, %r113, %r261;
	mul.wide.u32 	%rd134, %r1060, 4;
	add.s64 	%rd135, %rd44, %rd134;
	ld.shared.u32 	%r278, [%rd135];
	add.s32 	%r1061, %r114, %r261;
	mul.wide.u32 	%rd136, %r1061, 4;
	add.s64 	%rd137, %rd44, %rd136;
	ld.shared.u32 	%r279, [%rd137];
	add.s32 	%r1062, %r115, %r261;
	mul.wide.u32 	%rd138, %r1062, 4;
	add.s64 	%rd139, %rd44, %rd138;
	ld.shared.u32 	%r280, [%rd139];
	add.s32 	%r1063, %r116, %r261;
	mul.wide.u32 	%rd140, %r1063, 4;
	add.s64 	%rd141, %rd44, %rd140;
	ld.shared.u32 	%r281, [%rd141];
	add.s32 	%r1064, %r117, %r261;
	mul.wide.u32 	%rd142, %r1064, 4;
	add.s64 	%rd143, %rd44, %rd142;
	ld.shared.u32 	%r282, [%rd143];
	add.s32 	%r1065, %r118, %r261;
	mul.wide.s32 	%rd144, %r1065, 4;
	add.s64 	%rd145, %rd44, %rd144;
	ld.shared.u32 	%r283, [%rd145];
	bar.sync 	0;
	shfl.sync.idx.b32	%r284, %r253, 0, 31, -1;
	shfl.sync.idx.b32	%r285, %r253, 1, 31, -1;
	shfl.sync.idx.b32	%r286, %r253, 2, 31, -1;
	shfl.sync.idx.b32	%r287, %r253, 3, 31, -1;
	shfl.sync.idx.b32	%r288, %r253, 4, 31, -1;
	shfl.sync.idx.b32	%r289, %r253, 5, 31, -1;
	shfl.sync.idx.b32	%r290, %r253, 6, 31, -1;
	shfl.sync.idx.b32	%r291, %r253, 7, 31, -1;
	shfl.sync.idx.b32	%r292, %r253, 8, 31, -1;
	shfl.sync.idx.b32	%r293, %r253, 9, 31, -1;
	shfl.sync.idx.b32	%r294, %r253, 10, 31, -1;
	shfl.sync.idx.b32	%r295, %r253, 11, 31, -1;
	shfl.sync.idx.b32	%r296, %r253, 12, 31, -1;
	shfl.sync.idx.b32	%r297, %r253, 13, 31, -1;
	shfl.sync.idx.b32	%r298, %r253, 14, 31, -1;
	shfl.sync.idx.b32	%r299, %r253, 15, 31, -1;
	shfl.sync.idx.b32	%r300, %r253, 16, 31, -1;
	shfl.sync.idx.b32	%r301, %r253, 17, 31, -1;
	shfl.sync.idx.b32	%r302, %r253, 18, 31, -1;
	shfl.sync.idx.b32	%r303, %r253, 19, 31, -1;
	shfl.sync.idx.b32	%r304, %r253, 20, 31, -1;
	shfl.sync.idx.b32	%r305, %r253, 21, 31, -1;
	shfl.sync.idx.b32	%r306, %r253, 22, 31, -1;
	shfl.sync.idx.b32	%r307, %r253, 23, 31, -1;
	setp.eq.s32 	%p250, %r284, 999999999;
	@%p250 bra 	$L__BB0_152;
// %bb.232:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1066, %r284, %r261;
	mul.wide.s32 	%rd146, %r1066, 4;
	add.s64 	%rd148, %rd44, %rd146;
	st.shared.u32 	[%rd148], %r262;
	setp.eq.s32 	%p251, %r285, 999999999;
	@%p251 bra 	$L__BB0_153;
// %bb.233:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1067, %r285, %r261;
	mul.wide.s32 	%rd149, %r1067, 4;
	add.s64 	%rd151, %rd44, %rd149;
	st.shared.u32 	[%rd151], %r263;
	setp.eq.s32 	%p252, %r286, 999999999;
	@%p252 bra 	$L__BB0_154;
// %bb.234:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1068, %r286, %r261;
	mul.wide.s32 	%rd152, %r1068, 4;
	add.s64 	%rd154, %rd44, %rd152;
	st.shared.u32 	[%rd154], %r264;
	setp.eq.s32 	%p253, %r287, 999999999;
	@%p253 bra 	$L__BB0_155;
// %bb.235:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1069, %r287, %r261;
	mul.wide.s32 	%rd155, %r1069, 4;
	add.s64 	%rd157, %rd44, %rd155;
	st.shared.u32 	[%rd157], %r265;
	setp.eq.s32 	%p254, %r288, 999999999;
	@%p254 bra 	$L__BB0_156;
// %bb.236:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1070, %r288, %r261;
	mul.wide.s32 	%rd158, %r1070, 4;
	add.s64 	%rd160, %rd44, %rd158;
	st.shared.u32 	[%rd160], %r266;
	setp.eq.s32 	%p255, %r289, 999999999;
	@%p255 bra 	$L__BB0_157;
// %bb.237:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1071, %r289, %r261;
	mul.wide.s32 	%rd161, %r1071, 4;
	add.s64 	%rd163, %rd44, %rd161;
	st.shared.u32 	[%rd163], %r267;
	setp.eq.s32 	%p256, %r290, 999999999;
	@%p256 bra 	$L__BB0_158;
// %bb.238:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1072, %r290, %r261;
	mul.wide.s32 	%rd164, %r1072, 4;
	add.s64 	%rd166, %rd44, %rd164;
	st.shared.u32 	[%rd166], %r268;
	setp.eq.s32 	%p257, %r291, 999999999;
	@%p257 bra 	$L__BB0_159;
// %bb.239:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1073, %r291, %r261;
	mul.wide.s32 	%rd167, %r1073, 4;
	add.s64 	%rd169, %rd44, %rd167;
	st.shared.u32 	[%rd169], %r269;
	setp.eq.s32 	%p258, %r292, 999999999;
	@%p258 bra 	$L__BB0_160;
// %bb.240:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1074, %r292, %r261;
	mul.wide.s32 	%rd170, %r1074, 4;
	add.s64 	%rd172, %rd44, %rd170;
	st.shared.u32 	[%rd172], %r270;
	setp.eq.s32 	%p259, %r293, 999999999;
	@%p259 bra 	$L__BB0_161;
// %bb.241:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1075, %r293, %r261;
	mul.wide.s32 	%rd173, %r1075, 4;
	add.s64 	%rd175, %rd44, %rd173;
	st.shared.u32 	[%rd175], %r271;
	setp.eq.s32 	%p260, %r294, 999999999;
	@%p260 bra 	$L__BB0_162;
// %bb.242:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1076, %r294, %r261;
	mul.wide.s32 	%rd176, %r1076, 4;
	add.s64 	%rd178, %rd44, %rd176;
	st.shared.u32 	[%rd178], %r272;
	setp.eq.s32 	%p261, %r295, 999999999;
	@%p261 bra 	$L__BB0_163;
// %bb.243:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1077, %r295, %r261;
	mul.wide.s32 	%rd179, %r1077, 4;
	add.s64 	%rd181, %rd44, %rd179;
	st.shared.u32 	[%rd181], %r273;
	setp.eq.s32 	%p262, %r296, 999999999;
	@%p262 bra 	$L__BB0_164;
// %bb.244:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1078, %r296, %r261;
	mul.wide.s32 	%rd182, %r1078, 4;
	add.s64 	%rd184, %rd44, %rd182;
	st.shared.u32 	[%rd184], %r274;
	setp.eq.s32 	%p263, %r297, 999999999;
	@%p263 bra 	$L__BB0_165;
// %bb.245:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1079, %r297, %r261;
	mul.wide.s32 	%rd185, %r1079, 4;
	add.s64 	%rd187, %rd44, %rd185;
	st.shared.u32 	[%rd187], %r275;
	setp.eq.s32 	%p264, %r298, 999999999;
	@%p264 bra 	$L__BB0_166;
// %bb.246:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1080, %r298, %r261;
	mul.wide.s32 	%rd188, %r1080, 4;
	add.s64 	%rd190, %rd44, %rd188;
	st.shared.u32 	[%rd190], %r276;
	setp.eq.s32 	%p265, %r299, 999999999;
	@%p265 bra 	$L__BB0_167;
// %bb.247:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1081, %r299, %r261;
	mul.wide.s32 	%rd191, %r1081, 4;
	add.s64 	%rd193, %rd44, %rd191;
	st.shared.u32 	[%rd193], %r277;
	setp.eq.s32 	%p266, %r300, 999999999;
	@%p266 bra 	$L__BB0_168;
// %bb.248:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1082, %r300, %r261;
	mul.wide.s32 	%rd194, %r1082, 4;
	add.s64 	%rd196, %rd44, %rd194;
	st.shared.u32 	[%rd196], %r278;
	setp.eq.s32 	%p267, %r301, 999999999;
	@%p267 bra 	$L__BB0_169;
// %bb.249:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1083, %r301, %r261;
	mul.wide.s32 	%rd197, %r1083, 4;
	add.s64 	%rd199, %rd44, %rd197;
	st.shared.u32 	[%rd199], %r279;
	setp.eq.s32 	%p268, %r302, 999999999;
	@%p268 bra 	$L__BB0_170;
// %bb.250:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1084, %r302, %r261;
	mul.wide.s32 	%rd200, %r1084, 4;
	add.s64 	%rd202, %rd44, %rd200;
	st.shared.u32 	[%rd202], %r280;
	setp.eq.s32 	%p269, %r303, 999999999;
	@%p269 bra 	$L__BB0_171;
// %bb.251:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1085, %r303, %r261;
	mul.wide.s32 	%rd203, %r1085, 4;
	add.s64 	%rd205, %rd44, %rd203;
	st.shared.u32 	[%rd205], %r281;
	setp.eq.s32 	%p270, %r304, 999999999;
	@%p270 bra 	$L__BB0_172;
// %bb.252:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1086, %r304, %r261;
	mul.wide.s32 	%rd206, %r1086, 4;
	add.s64 	%rd208, %rd44, %rd206;
	st.shared.u32 	[%rd208], %r282;
	setp.eq.s32 	%p271, %r305, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.253:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1087, 0, %r283, %p272;
	add.s32 	%r1088, %r305, %r261;
	mul.wide.s32 	%rd209, %r1088, 4;
	add.s64 	%rd211, %rd44, %rd209;
	st.shared.u32 	[%rd211], %r1087;
	setp.eq.s32 	%p273, %r306, 999999999;
	@%p273 bra 	$L__BB0_174;
// %bb.254:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1089, %r306, %r261;
	mul.wide.s32 	%rd212, %r1089, 4;
	add.s64 	%rd214, %rd44, %rd212;
	mov.u32 	%r3668, 0;
	st.shared.u32 	[%rd214], %r3668;
	setp.eq.s32 	%p274, %r307, 999999999;
	@%p274 bra 	$L__BB0_175;
// %bb.255:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1092, %r307, %r261;
	mul.wide.s32 	%rd215, %r1092, 4;
	add.s64 	%rd217, %rd44, %rd215;
	st.shared.u32 	[%rd217], %r3668;
	bar.sync 	0;
	mov.u32 	%r3669, %r3668;
	mov.u32 	%r3670, %r3668;
	mov.u32 	%r3671, %r3668;
	mov.u32 	%r3672, %r3668;
	mov.u32 	%r3673, %r3668;
	mov.u32 	%r3674, %r3668;
	mov.u32 	%r3675, %r3668;
	mov.u32 	%r3676, %r3668;
	mov.u32 	%r3677, %r3668;
	mov.u32 	%r3678, %r3668;
	mov.u32 	%r3679, %r3668;
	mov.u32 	%r3680, %r3668;
	mov.u32 	%r3681, %r3668;
	mov.u32 	%r3682, %r3668;
	mov.u32 	%r3683, %r3668;
	mov.u32 	%r3684, %r3668;
	mov.u32 	%r3685, %r3668;
	mov.u32 	%r3686, %r3668;
	mov.u32 	%r3687, %r3668;
	mov.u32 	%r3688, %r3668;
	mov.u32 	%r3689, %r3668;
	mov.u32 	%r3690, %r3668;
	mov.u32 	%r3691, %r3668;
	@%p91 bra 	$L__BB0_176;
// %bb.256:                             // %oksrem4970
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs87, %r260;
	mul.hi.s16 	%rs88, %rs87, 10923;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 2;
	add.s16 	%rs91, %rs90, %rs89;
	mul.lo.s16 	%rs92, %rs91, 24;
	sub.s16 	%rs93, %rs87, %rs92;
	cvt.s32.s16 	%r1093, %rs93;
	mul.wide.s32 	%rd218, %r1093, 4;
	add.s64 	%rd219, %rd12, %rd218;
	ld.shared.u32 	%r3668, [%rd219];
	ld.shared.u32 	%r3669, [%rd12+4];
	ld.shared.u32 	%r3670, [%rd12+8];
	ld.shared.u32 	%r3671, [%rd12+12];
	ld.shared.u32 	%r3672, [%rd12+16];
	ld.shared.u32 	%r3673, [%rd12+20];
	ld.shared.u32 	%r3674, [%rd12+24];
	ld.shared.u32 	%r3675, [%rd12+28];
	ld.shared.u32 	%r3676, [%rd12+32];
	ld.shared.u32 	%r3677, [%rd12+36];
	ld.shared.u32 	%r3678, [%rd12+40];
	ld.shared.u32 	%r3679, [%rd12+44];
	ld.shared.u32 	%r3680, [%rd12+48];
	ld.shared.u32 	%r3681, [%rd12+52];
	ld.shared.u32 	%r3682, [%rd12+56];
	ld.shared.u32 	%r3683, [%rd12+60];
	add.s16 	%rs94, %rs87, 16;
	mul.hi.s16 	%rs95, %rs94, 10923;
	shr.u16 	%rs96, %rs95, 15;
	shr.s16 	%rs97, %rs95, 2;
	add.s16 	%rs98, %rs97, %rs96;
	mul.lo.s16 	%rs99, %rs98, 24;
	sub.s16 	%rs100, %rs94, %rs99;
	cvt.s32.s16 	%r1094, %rs100;
	mul.wide.s32 	%rd220, %r1094, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3684, [%rd221];
	add.s16 	%rs101, %rs87, 17;
	mul.hi.s16 	%rs102, %rs101, 10923;
	shr.u16 	%rs103, %rs102, 15;
	shr.s16 	%rs104, %rs102, 2;
	add.s16 	%rs105, %rs104, %rs103;
	mul.lo.s16 	%rs106, %rs105, 24;
	sub.s16 	%rs107, %rs101, %rs106;
	cvt.s32.s16 	%r1095, %rs107;
	mul.wide.s32 	%rd222, %r1095, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3685, [%rd223];
	add.s16 	%rs108, %rs87, 18;
	mul.hi.s16 	%rs109, %rs108, 10923;
	shr.u16 	%rs110, %rs109, 15;
	shr.s16 	%rs111, %rs109, 2;
	add.s16 	%rs112, %rs111, %rs110;
	mul.lo.s16 	%rs113, %rs112, 24;
	sub.s16 	%rs114, %rs108, %rs113;
	cvt.s32.s16 	%r1096, %rs114;
	mul.wide.s32 	%rd224, %r1096, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3686, [%rd225];
	add.s16 	%rs115, %rs87, 19;
	mul.hi.s16 	%rs116, %rs115, 10923;
	shr.u16 	%rs117, %rs116, 15;
	shr.s16 	%rs118, %rs116, 2;
	add.s16 	%rs119, %rs118, %rs117;
	mul.lo.s16 	%rs120, %rs119, 24;
	sub.s16 	%rs121, %rs115, %rs120;
	cvt.s32.s16 	%r1097, %rs121;
	mul.wide.s32 	%rd226, %r1097, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3687, [%rd227];
	add.s16 	%rs122, %rs87, 20;
	mul.hi.s16 	%rs123, %rs122, 10923;
	shr.u16 	%rs124, %rs123, 15;
	shr.s16 	%rs125, %rs123, 2;
	add.s16 	%rs126, %rs125, %rs124;
	mul.lo.s16 	%rs127, %rs126, 24;
	sub.s16 	%rs128, %rs122, %rs127;
	cvt.s32.s16 	%r1098, %rs128;
	mul.wide.s32 	%rd228, %r1098, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3688, [%rd229];
	add.s16 	%rs129, %rs87, 21;
	mul.hi.s16 	%rs130, %rs129, 10923;
	shr.u16 	%rs131, %rs130, 15;
	shr.s16 	%rs132, %rs130, 2;
	add.s16 	%rs133, %rs132, %rs131;
	mul.lo.s16 	%rs134, %rs133, 24;
	sub.s16 	%rs135, %rs129, %rs134;
	cvt.s32.s16 	%r1099, %rs135;
	mul.wide.s32 	%rd230, %r1099, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3689, [%rd231];
	add.s16 	%rs136, %rs87, 22;
	mul.hi.s16 	%rs137, %rs136, 10923;
	shr.u16 	%rs138, %rs137, 15;
	shr.s16 	%rs139, %rs137, 2;
	add.s16 	%rs140, %rs139, %rs138;
	mul.lo.s16 	%rs141, %rs140, 24;
	sub.s16 	%rs142, %rs136, %rs141;
	cvt.s32.s16 	%r1100, %rs142;
	mul.wide.s32 	%rd232, %r1100, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3690, [%rd233];
	add.s16 	%rs143, %rs87, 23;
	mul.hi.s16 	%rs144, %rs143, 10923;
	shr.u16 	%rs145, %rs144, 15;
	shr.s16 	%rs146, %rs144, 2;
	add.s16 	%rs147, %rs146, %rs145;
	mul.lo.s16 	%rs148, %rs147, 24;
	sub.s16 	%rs149, %rs143, %rs148;
	cvt.s32.s16 	%r1101, %rs149;
	mul.wide.s32 	%rd234, %r1101, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3691, [%rd235];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3692, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_187:                            // %L20146
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3693, 0;
	mov.u32 	%r3695, %r3693;
	mov.u32 	%r3696, %r3693;
$L__BB0_188:                            // %L20147
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3692, %r3692, -4;
	setp.ne.s32 	%p302, %r3692, -12;
	@%p302 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_189;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3692, 12;
	selp.b32 	%r1640, %r3668, 0, %p277;
	setp.eq.s32 	%p278, %r3692, 8;
	selp.b32 	%r1641, %r3672, %r1640, %p278;
	setp.eq.s32 	%p279, %r3692, 4;
	selp.b32 	%r1642, %r3676, %r1641, %p279;
	setp.eq.s32 	%p280, %r3692, 0;
	selp.b32 	%r1643, %r3680, %r1642, %p280;
	setp.eq.s32 	%p281, %r3692, -4;
	selp.b32 	%r1644, %r3684, %r1643, %p281;
	setp.eq.s32 	%p282, %r3692, -8;
	selp.b32 	%r1645, %r3688, %r1644, %p282;
	selp.b32 	%r1646, %r3669, 0, %p277;
	selp.b32 	%r1647, %r3673, %r1646, %p278;
	selp.b32 	%r1648, %r3677, %r1647, %p279;
	selp.b32 	%r1649, %r3681, %r1648, %p280;
	selp.b32 	%r1650, %r3685, %r1649, %p281;
	selp.b32 	%r1651, %r3689, %r1650, %p282;
	selp.b32 	%r1652, %r3670, 0, %p277;
	selp.b32 	%r1653, %r3674, %r1652, %p278;
	selp.b32 	%r1654, %r3678, %r1653, %p279;
	selp.b32 	%r1655, %r3682, %r1654, %p280;
	selp.b32 	%r1656, %r3686, %r1655, %p281;
	selp.b32 	%r1657, %r3690, %r1656, %p282;
	selp.b32 	%r1658, %r3671, 0, %p277;
	selp.b32 	%r1659, %r3675, %r1658, %p278;
	selp.b32 	%r1660, %r3679, %r1659, %p279;
	selp.b32 	%r1661, %r3683, %r1660, %p280;
	selp.b32 	%r1662, %r3687, %r1661, %p281;
	selp.b32 	%r1663, %r3691, %r1662, %p282;
	mov.u16 	%rs187, 25600;
	// begin inline asm
	mov.b32 %r1108, {%rs187, %rs187};
	// end inline asm
	mov.u16 	%rs189, 21504;
	// begin inline asm
	mov.b32 %r1119, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1107, %r1645, -2004318072;
	mov.u32 	%r1244, 983055;
	// begin inline asm
	lop3.b32 %r1105, %r1244, %r1107, %r1108, 202;
	// end inline asm
	mov.u16 	%rs193, 18432;
	// begin inline asm
	mov.b32 %r1109, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1110, %r1108, %r1109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1113, %r1105, %r1110;
	// end inline asm
	mov.u32 	%r1255, 15728880;
	// begin inline asm
	lop3.b32 %r1116, %r1255, %r1107, %r1119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1120, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1121, %r1119, %r1120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1124, %r1116, %r1121;
	// end inline asm
	// begin inline asm
	mov.b32 %r1154, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1165, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1153, %r1651, -2004318072;
	// begin inline asm
	lop3.b32 %r1151, %r1244, %r1153, %r1154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1155, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1156, %r1154, %r1155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1159, %r1151, %r1156;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1162, %r1255, %r1153, %r1165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1167, %r1165, %r1166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1170, %r1162, %r1167;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1199, %r1657, -2004318072;
	// begin inline asm
	lop3.b32 %r1197, %r1244, %r1199, %r1200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1202, %r1200, %r1201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1205, %r1197, %r1202;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1208, %r1255, %r1199, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1213, %r1211, %r1212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1216, %r1208, %r1213;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1257, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1245, %r1663, -2004318072;
	// begin inline asm
	lop3.b32 %r1243, %r1244, %r1245, %r1246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1248, %r1246, %r1247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1251, %r1243, %r1248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1254, %r1255, %r1245, %r1257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1259, %r1257, %r1258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1262, %r1254, %r1259;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1113;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1287, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1124;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1290, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1159;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1293, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1170;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1296, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1205;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1216;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1302, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1251;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1305, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1262;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1308, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1639, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1374, %r1371}, {%r404, %r407}, {%r1287}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r404, %r407}, {%r1290}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1392, %r1389}, {%r404, %r407}, {%r1293}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1398}, {%r404, %r407}, {%r1296}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r404, %r407}, {%r1299}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r404, %r407}, {%r1302}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1425}, {%r404, %r407}, {%r1305}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1434}, {%r404, %r407}, {%r1308}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1367, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r1367, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r456, %r1374, %r1369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r456, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1385, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r456, %r1392, %r1387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r1394, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r456, %r1401, %r1396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r456, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r456, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r1421, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r456, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r1430, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r456, %r1437, %r1432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r459, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r456, %r1371, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r459, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r456, %r1380, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r459, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r456, %r1389, %r1453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r459, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r456, %r1398, %r1460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r459, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r456, %r1407, %r1467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r459, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r456, %r1416, %r1474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r459, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r456, %r1425, %r1481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r459, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r456, %r1434, %r1488;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1495, %r1496}, {%r500, %r506, %r503, %r509}, {%r1372, %r1442}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1505, %r1506}, {%r500, %r506, %r503, %r509}, {%r1381, %r1449}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1516}, {%r500, %r506, %r503, %r509}, {%r1390, %r1456}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1525, %r1526}, {%r500, %r506, %r503, %r509}, {%r1399, %r1463}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1535, %r1536}, {%r500, %r506, %r503, %r509}, {%r1408, %r1470}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1545, %r1546}, {%r500, %r506, %r503, %r509}, {%r1417, %r1477}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1555, %r1556}, {%r500, %r506, %r503, %r509}, {%r1426, %r1484}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1566}, {%r500, %r506, %r503, %r509}, {%r1435, %r1491}, {%r1639, %r1639};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3697, %r1639;
	mov.u32 	%r3698, %r1639;
	mov.u32 	%r3699, %r1639;
	mov.u32 	%r3700, %r1639;
	@%p276 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_178;
$L__BB0_257:                            // %oksrem6465
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3697, [%rd7];
	ld.shared.u32 	%r3698, [%rd8];
	ld.shared.u32 	%r3699, [%rd9];
	ld.shared.u32 	%r3700, [%rd10];
$L__BB0_178:                            // %L15565
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1699, %r1696}, {%r518, %r521}, {%r3697}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1708, %r1705}, {%r518, %r521}, {%r3698}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1717, %r1714}, {%r518, %r521}, {%r3699}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1726, %r1723}, {%r518, %r521}, {%r3700}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r570, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r570, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1710, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r1710, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r570, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1719, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1719, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r570, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r573, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r570, %r1696, %r1728;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r573, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r570, %r1705, %r1735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r573, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r570, %r1714, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r573, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r570, %r1723, %r1749;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1797, %r1800}, {%r614, %r620, %r617, %r623}, {%r1697, %r1731}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1816, %r1819}, {%r614, %r620, %r617, %r623}, {%r1706, %r1738}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1804, %r1808}, {%r614, %r620, %r617, %r623}, {%r1715, %r1745}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1827}, {%r614, %r620, %r617, %r623}, {%r1724, %r1752}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r1797, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1804, %r1804, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1803;
	// end inline asm
	mov.u32 	%r1831, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1831, %r1807, %r3696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r1816, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1819, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1826, %r3695;
	// end inline asm
	mov.u32 	%r3701, %r1639;
	mov.u32 	%r3702, %r1639;
	mov.u32 	%r3703, %r1639;
	mov.u32 	%r3704, %r1639;
	@%p276 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_179;
$L__BB0_258:                            // %oksrem7070
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3701, [%rd13];
	ld.shared.u32 	%r3702, [%rd14];
	ld.shared.u32 	%r3703, [%rd15];
	ld.shared.u32 	%r3704, [%rd16];
$L__BB0_179:                            // %L16784
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1870, %r1867}, {%r518, %r521}, {%r3701}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1879, %r1876}, {%r518, %r521}, {%r3702}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1888, %r1885}, {%r518, %r521}, {%r3703}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r518, %r521}, {%r3704}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1863, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r1863, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r570, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1872, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1872, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r570, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r1881, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r570, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r570, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r573, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r570, %r1867, %r1899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r573, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r570, %r1876, %r1906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r573, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r570, %r1885, %r1913;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1920, %r573, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r570, %r1894, %r1920;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1968, %r1971}, {%r614, %r620, %r617, %r623}, {%r1868, %r1902}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1987, %r1990}, {%r614, %r620, %r617, %r623}, {%r1877, %r1909}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1975, %r1979}, {%r614, %r620, %r617, %r623}, {%r1886, %r1916}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1994, %r1998}, {%r614, %r620, %r617, %r623}, {%r1895, %r1923}, {%r1639, %r1639};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1968, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1971, %r1971, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r1975, %r1975, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r1979, %r1979, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3750, %r1831, %r1978, %r1811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1986, %r1987, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1990, %r1990, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1994, %r1994, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r1998, %r1998, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3749, %r1831, %r1997, %r1830;
	// end inline asm
	add.s32 	%r3747, %r3693, 2;
	setp.eq.s32 	%p284, %r3747, 6;
	@%p284 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_183;
$L__BB0_180:                            // %pass7563
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_182;
// %bb.181:                             // %pass7573
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2005, %r3694, 589824;
	add.s32 	%r2006, %r119, %r2005;
	cvt.s64.s32 	%rd236, %r2006;
	add.s64 	%rd237, %rd236, %rd11;
	mul.hi.s64 	%rd238, %rd237, 1024819115206086201;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 25;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p286, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 603979776;
	setp.ne.s64 	%p287, %rd242, %rd237;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd243, -1, 0, %p288;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -603979776;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3750;
	add.s32 	%r2007, %r120, %r2005;
	cvt.s64.s32 	%rd249, %r2007;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 1024819115206086201;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 25;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p289, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 603979776;
	setp.ne.s64 	%p290, %rd255, %rd250;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd256, -1, 0, %p291;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -603979776;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3749;
$L__BB0_182:                            // %L17316
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3747, 0;
	mov.u32 	%r3749, %r3747;
	mov.u32 	%r3750, %r3747;
$L__BB0_183:                            // %pass7739
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2009, 0;
	mov.u32 	%r3705, %r2009;
	mov.u32 	%r3706, %r2009;
	mov.u32 	%r3707, %r2009;
	mov.u32 	%r3708, %r2009;
	@%p91 bra 	$L__BB0_184;
// %bb.259:                             // %oksrem7845
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3705, [%rd17];
	ld.shared.u32 	%r3706, [%rd18];
	ld.shared.u32 	%r3707, [%rd19];
	ld.shared.u32 	%r3708, [%rd20];
$L__BB0_184:                            // %L18395
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2045, %r2042}, {%r518, %r521}, {%r3705}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2054, %r2051}, {%r518, %r521}, {%r3706}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2063, %r2060}, {%r518, %r521}, {%r3707}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2072, %r2069}, {%r518, %r521}, {%r3708}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2038, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2040, %r2038, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r570, %r2045, %r2040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2047, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r2047, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r570, %r2054, %r2049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2056, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r2056, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r570, %r2063, %r2058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2065, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r2065, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r570, %r2072, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2074, %r573, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r570, %r2042, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2081, %r573, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r570, %r2051, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r573, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r570, %r2060, %r2088;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r573, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r570, %r2069, %r2095;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2143, %r2146}, {%r614, %r620, %r617, %r623}, {%r2043, %r2077}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2162, %r2165}, {%r614, %r620, %r617, %r623}, {%r2052, %r2084}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2150, %r2154}, {%r614, %r620, %r617, %r623}, {%r2061, %r2091}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2169, %r2173}, {%r614, %r620, %r617, %r623}, {%r2070, %r2098}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r2143, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r2146, %r2146, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r2150, %r2150, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r2154, %r2154, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r1831, %r2153, %r3750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r2162, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r2165, %r2165, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r2169, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r2173, %r2173, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r1831, %r2172, %r3749;
	// end inline asm
	mov.u32 	%r3709, %r2009;
	mov.u32 	%r3710, %r2009;
	mov.u32 	%r3711, %r2009;
	mov.u32 	%r3712, %r2009;
	@%p276 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_185;
$L__BB0_260:                            // %oksrem8450
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3709, [%rd21];
	ld.shared.u32 	%r3710, [%rd22];
	ld.shared.u32 	%r3711, [%rd23];
	ld.shared.u32 	%r3712, [%rd24];
$L__BB0_185:                            // %L19614
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2216, %r2213}, {%r518, %r521}, {%r3709}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r518, %r521}, {%r3710}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r518, %r521}, {%r3711}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r518, %r521}, {%r3712}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2209, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r2209, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2214, %r570, %r2216, %r2211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r570, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r570, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r570, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r573, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r570, %r2213, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r573, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r570, %r2222, %r2252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r573, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r570, %r2231, %r2259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r573, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r570, %r2240, %r2266;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2314, %r2317}, {%r614, %r620, %r617, %r623}, {%r2214, %r2248}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2333, %r2336}, {%r614, %r620, %r617, %r623}, {%r2223, %r2255}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2321, %r2325}, {%r614, %r620, %r617, %r623}, {%r2232, %r2262}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2340, %r2344}, {%r614, %r620, %r617, %r623}, {%r2241, %r2269}, {%r2009, %r2009};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r2314, %r2314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r2317, %r2317, %r2313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2320, %r2321, %r2321, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2324, %r2325, %r2325, %r2320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3696, %r1831, %r2324, %r2157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2332, %r2333, %r2333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2335, %r2336, %r2336, %r2332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2339, %r2340, %r2340, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2343, %r2344, %r2344, %r2339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r1831, %r2343, %r2176;
	// end inline asm
	add.s32 	%r3693, %r3747, 2;
	setp.eq.s32 	%p294, %r3693, 6;
	@%p294 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_188;
$L__BB0_186:                            // %pass8943
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_187;
// %bb.261:                             // %pass8953
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2351, %r3694, 589824;
	add.s32 	%r2352, %r119, %r2351;
	cvt.s64.s32 	%rd262, %r2352;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 1024819115206086201;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 25;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p296, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 603979776;
	setp.ne.s64 	%p297, %rd268, %rd263;
	and.pred  	%p298, %p296, %p297;
	selp.s64 	%rd269, -1, 0, %p298;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -603979776;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3696;
	add.s32 	%r2353, %r120, %r2351;
	cvt.s64.s32 	%rd275, %r2353;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 1024819115206086201;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 25;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p299, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 603979776;
	setp.ne.s64 	%p300, %rd281, %rd276;
	and.pred  	%p301, %p299, %p300;
	selp.s64 	%rd282, -1, 0, %p301;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -603979776;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3695;
	bra.uni 	$L__BB0_187;
$L__BB0_189:                            // %L20172.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3717, 12;
	bra.uni 	$L__BB0_190;
$L__BB0_200:                            // %L26386
                                        //   in Loop: Header=BB0_190 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3693, 0;
	mov.u32 	%r3695, %r3693;
	mov.u32 	%r3696, %r3693;
$L__BB0_201:                            // %L26387
                                        //   in Loop: Header=BB0_190 Depth=2
	bar.sync 	0;
	add.s32 	%r3717, %r3717, -4;
	setp.ne.s32 	%p329, %r3717, -12;
	@%p329 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_202;
$L__BB0_190:                            // %L20172
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p304, %r3717, 12;
	selp.b32 	%r2893, %r3668, 0, %p304;
	setp.eq.s32 	%p305, %r3717, 8;
	selp.b32 	%r2894, %r3672, %r2893, %p305;
	setp.eq.s32 	%p306, %r3717, 4;
	selp.b32 	%r2895, %r3676, %r2894, %p306;
	setp.eq.s32 	%p307, %r3717, 0;
	selp.b32 	%r2896, %r3680, %r2895, %p307;
	setp.eq.s32 	%p308, %r3717, -4;
	selp.b32 	%r2897, %r3684, %r2896, %p308;
	setp.eq.s32 	%p309, %r3717, -8;
	selp.b32 	%r2898, %r3688, %r2897, %p309;
	selp.b32 	%r2899, %r3669, 0, %p304;
	selp.b32 	%r2900, %r3673, %r2899, %p305;
	selp.b32 	%r2901, %r3677, %r2900, %p306;
	selp.b32 	%r2902, %r3681, %r2901, %p307;
	selp.b32 	%r2903, %r3685, %r2902, %p308;
	selp.b32 	%r2904, %r3689, %r2903, %p309;
	selp.b32 	%r2905, %r3670, 0, %p304;
	selp.b32 	%r2906, %r3674, %r2905, %p305;
	selp.b32 	%r2907, %r3678, %r2906, %p306;
	selp.b32 	%r2908, %r3682, %r2907, %p307;
	selp.b32 	%r2909, %r3686, %r2908, %p308;
	selp.b32 	%r2910, %r3690, %r2909, %p309;
	selp.b32 	%r2911, %r3671, 0, %p304;
	selp.b32 	%r2912, %r3675, %r2911, %p305;
	selp.b32 	%r2913, %r3679, %r2912, %p306;
	selp.b32 	%r2914, %r3683, %r2913, %p307;
	selp.b32 	%r2915, %r3687, %r2914, %p308;
	selp.b32 	%r2916, %r3691, %r2915, %p309;
	// begin inline asm
	mov.b32 %r2383, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2394, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2917, %r2898, 8;
	xor.b32  	%r2393, %r2917, 8947848;
	// begin inline asm
	lop3.b32 %r2380, %r1244, %r2393, %r2383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2383, %r2384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2388, %r2380, %r2385;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2391, %r1255, %r2393, %r2394, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2396, %r2394, %r2395;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2399, %r2391, %r2396;
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2440, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2918, %r2904, 8;
	xor.b32  	%r2439, %r2918, 8947848;
	// begin inline asm
	lop3.b32 %r2426, %r1244, %r2439, %r2429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2429, %r2430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2434, %r2426, %r2431;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2437, %r1255, %r2439, %r2440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2441, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2442, %r2440, %r2441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2445, %r2437, %r2442;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2486, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2919, %r2910, 8;
	xor.b32  	%r2485, %r2919, 8947848;
	// begin inline asm
	lop3.b32 %r2472, %r1244, %r2485, %r2475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2476, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2477, %r2475, %r2476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2480, %r2472, %r2477;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2483, %r1255, %r2485, %r2486, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2487, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2488, %r2486, %r2487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2491, %r2483, %r2488;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2532, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2920, %r2916, 8;
	xor.b32  	%r2531, %r2920, 8947848;
	// begin inline asm
	lop3.b32 %r2518, %r1244, %r2531, %r2521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2523, %r2521, %r2522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2526, %r2518, %r2523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2529, %r1255, %r2531, %r2532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2533, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2534, %r2532, %r2533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2537, %r2529, %r2534;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2388;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2540, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2399;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2543, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2434;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2546, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2445;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2480;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2552, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2491;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2555, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2526;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2558, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2537;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2561, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2892, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2627, %r2624}, {%r404, %r407}, {%r2540}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2636, %r2633}, {%r404, %r407}, {%r2543}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2645, %r2642}, {%r404, %r407}, {%r2546}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2654, %r2651}, {%r404, %r407}, {%r2549}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2663, %r2660}, {%r404, %r407}, {%r2552}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2672, %r2669}, {%r404, %r407}, {%r2555}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2681, %r2678}, {%r404, %r407}, {%r2558}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2690, %r2687}, {%r404, %r407}, {%r2561}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2620, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2622, %r2620, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2625, %r456, %r2627, %r2622;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2634, %r456, %r2636, %r2631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2643, %r456, %r2645, %r2640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r456, %r2654, %r2649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2661, %r456, %r2663, %r2658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r456, %r2672, %r2667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r456, %r2681, %r2676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r456, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r459, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2695, %r456, %r2624, %r2692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r459, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r456, %r2633, %r2699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r459, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r456, %r2642, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r459, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r456, %r2651, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r459, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r456, %r2660, %r2720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r459, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r456, %r2669, %r2727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r459, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r456, %r2678, %r2734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2741, %r459, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2744, %r456, %r2687, %r2741;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2748, %r2749}, {%r500, %r506, %r503, %r509}, {%r2625, %r2695}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2758, %r2759}, {%r500, %r506, %r503, %r509}, {%r2634, %r2702}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2768, %r2769}, {%r500, %r506, %r503, %r509}, {%r2643, %r2709}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2778, %r2779}, {%r500, %r506, %r503, %r509}, {%r2652, %r2716}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2788, %r2789}, {%r500, %r506, %r503, %r509}, {%r2661, %r2723}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2799}, {%r500, %r506, %r503, %r509}, {%r2670, %r2730}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2808, %r2809}, {%r500, %r506, %r503, %r509}, {%r2679, %r2737}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2818, %r2819}, {%r500, %r506, %r503, %r509}, {%r2688, %r2744}, {%r2892, %r2892};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3722, %r2892;
	mov.u32 	%r3723, %r2892;
	mov.u32 	%r3724, %r2892;
	mov.u32 	%r3725, %r2892;
	@%p276 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_191;
$L__BB0_262:                            // %oksrem9286
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3725, [%rd7];
	ld.shared.u32 	%r3724, [%rd8];
	ld.shared.u32 	%r3723, [%rd9];
	ld.shared.u32 	%r3722, [%rd10];
$L__BB0_191:                            // %L21805
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2956, %r2953}, {%r518, %r521}, {%r3725}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r518, %r521}, {%r3724}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2974, %r2971}, {%r518, %r521}, {%r3723}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2983, %r2980}, {%r518, %r521}, {%r3722}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2949, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r2949, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r570, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r570, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2967, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2967, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r570, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2976, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r2976, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r570, %r2983, %r2978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r573, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r570, %r2953, %r2985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2992, %r573, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r570, %r2962, %r2992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r573, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r570, %r2971, %r2999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3006, %r573, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r570, %r2980, %r3006;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3054, %r3057}, {%r614, %r620, %r617, %r623}, {%r2954, %r2988}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3073, %r3076}, {%r614, %r620, %r617, %r623}, {%r2963, %r2995}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3061, %r3065}, {%r614, %r620, %r617, %r623}, {%r2972, %r3002}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3080, %r3084}, {%r614, %r620, %r617, %r623}, {%r2981, %r3009}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3053, %r3054, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r3057, %r3057, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r3061, %r3061, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r3065, %r3065, %r3060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r1831, %r3064, %r3696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r3073, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r3076, %r3076, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r3080, %r3080, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r3084, %r3084, %r3079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r1831, %r3083, %r3695;
	// end inline asm
	mov.u32 	%r3726, %r2892;
	mov.u32 	%r3727, %r2892;
	mov.u32 	%r3728, %r2892;
	mov.u32 	%r3729, %r2892;
	@%p276 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_192;
$L__BB0_263:                            // %oksrem9891
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3729, [%rd13];
	ld.shared.u32 	%r3728, [%rd14];
	ld.shared.u32 	%r3727, [%rd15];
	ld.shared.u32 	%r3726, [%rd16];
$L__BB0_192:                            // %L23024
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r518, %r521}, {%r3729}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r518, %r521}, {%r3728}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3145, %r3142}, {%r518, %r521}, {%r3727}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3154, %r3151}, {%r518, %r521}, {%r3726}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r570, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r570, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3138, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r570, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r3147, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r570, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r573, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r570, %r3124, %r3156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3163, %r573, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r570, %r3133, %r3163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r573, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r570, %r3142, %r3170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3177, %r573, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r570, %r3151, %r3177;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3225, %r3228}, {%r614, %r620, %r617, %r623}, {%r3125, %r3159}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3244, %r3247}, {%r614, %r620, %r617, %r623}, {%r3134, %r3166}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3232, %r3236}, {%r614, %r620, %r617, %r623}, {%r3143, %r3173}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3251, %r3255}, {%r614, %r620, %r617, %r623}, {%r3152, %r3180}, {%r2892, %r2892};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r3225, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3228, %r3228, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r3232, %r3232, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r3236, %r3236, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3754, %r1831, %r3235, %r3068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r3244, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r3247, %r3247, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3250, %r3251, %r3251, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r3255, %r3255, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3753, %r1831, %r3254, %r3087;
	// end inline asm
	add.s32 	%r3751, %r3693, 2;
	setp.eq.s32 	%p311, %r3751, 6;
	@%p311 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_196;
$L__BB0_193:                            // %pass10384
                                        //   in Loop: Header=BB0_190 Depth=2
	@%p91 bra 	$L__BB0_195;
// %bb.194:                             // %pass10394
                                        //   in Loop: Header=BB0_190 Depth=2
	mul.lo.s32 	%r3262, %r3694, 589824;
	add.s32 	%r3263, %r119, %r3262;
	cvt.s64.s32 	%rd288, %r3263;
	add.s64 	%rd289, %rd288, %rd11;
	mul.hi.s64 	%rd290, %rd289, 1024819115206086201;
	shr.u64 	%rd291, %rd290, 63;
	shr.s64 	%rd292, %rd290, 25;
	add.s64 	%rd293, %rd292, %rd291;
	setp.lt.s64 	%p313, %rd289, 0;
	mul.lo.s64 	%rd294, %rd293, 603979776;
	setp.ne.s64 	%p314, %rd294, %rd289;
	and.pred  	%p315, %p313, %p314;
	selp.s64 	%rd295, -1, 0, %p315;
	add.s64 	%rd296, %rd293, %rd295;
	mul.lo.s64 	%rd297, %rd296, -603979776;
	add.s64 	%rd298, %rd297, %rd289;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd300, %rd4, %rd299;
	st.global.u32 	[%rd300], %r3754;
	add.s32 	%r3264, %r120, %r3262;
	cvt.s64.s32 	%rd301, %r3264;
	add.s64 	%rd302, %rd301, %rd11;
	mul.hi.s64 	%rd303, %rd302, 1024819115206086201;
	shr.u64 	%rd304, %rd303, 63;
	shr.s64 	%rd305, %rd303, 25;
	add.s64 	%rd306, %rd305, %rd304;
	setp.lt.s64 	%p316, %rd302, 0;
	mul.lo.s64 	%rd307, %rd306, 603979776;
	setp.ne.s64 	%p317, %rd307, %rd302;
	and.pred  	%p318, %p316, %p317;
	selp.s64 	%rd308, -1, 0, %p318;
	add.s64 	%rd309, %rd306, %rd308;
	mul.lo.s64 	%rd310, %rd309, -603979776;
	add.s64 	%rd311, %rd310, %rd302;
	shl.b64 	%rd312, %rd311, 2;
	add.s64 	%rd313, %rd4, %rd312;
	st.global.u32 	[%rd313], %r3753;
$L__BB0_195:                            // %L23556
                                        //   in Loop: Header=BB0_190 Depth=2
	add.s32 	%r3694, %r3694, 1;
	mov.u32 	%r3751, 0;
	mov.u32 	%r3753, %r3751;
	mov.u32 	%r3754, %r3751;
$L__BB0_196:                            // %pass10560
                                        //   in Loop: Header=BB0_190 Depth=2
	mov.u32 	%r3266, 0;
	mov.u32 	%r3730, %r3266;
	mov.u32 	%r3731, %r3266;
	mov.u32 	%r3732, %r3266;
	mov.u32 	%r3733, %r3266;
	@%p91 bra 	$L__BB0_197;
// %bb.264:                             // %oksrem10666
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3733, [%rd17];
	ld.shared.u32 	%r3732, [%rd18];
	ld.shared.u32 	%r3731, [%rd19];
	ld.shared.u32 	%r3730, [%rd20];
$L__BB0_197:                            // %L24635
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r518, %r521}, {%r3733}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3311, %r3308}, {%r518, %r521}, {%r3732}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3320, %r3317}, {%r518, %r521}, {%r3731}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3329, %r3326}, {%r518, %r521}, {%r3730}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r570, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3304, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r3304, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r570, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3313, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r3313, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r570, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3322, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r3322, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r570, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3331, %r573, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r570, %r3299, %r3331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3338, %r573, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3341, %r570, %r3308, %r3338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r573, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r570, %r3317, %r3345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3352, %r573, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3355, %r570, %r3326, %r3352;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3400, %r3403}, {%r614, %r620, %r617, %r623}, {%r3300, %r3334}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3419, %r3422}, {%r614, %r620, %r617, %r623}, {%r3309, %r3341}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3407, %r3411}, {%r614, %r620, %r617, %r623}, {%r3318, %r3348}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3426, %r3430}, {%r614, %r620, %r617, %r623}, {%r3327, %r3355}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3399, %r3400, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3402, %r3403, %r3403, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3406, %r3407, %r3407, %r3402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r3411, %r3411, %r3406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r1831, %r3410, %r3754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3418, %r3419, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3421, %r3422, %r3422, %r3418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3425, %r3426, %r3426, %r3421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3429, %r3430, %r3430, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3433, %r1831, %r3429, %r3753;
	// end inline asm
	mov.u32 	%r3734, %r3266;
	mov.u32 	%r3735, %r3266;
	mov.u32 	%r3736, %r3266;
	mov.u32 	%r3737, %r3266;
	@%p276 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_198;
$L__BB0_265:                            // %oksrem11271
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3737, [%rd21];
	ld.shared.u32 	%r3736, [%rd22];
	ld.shared.u32 	%r3735, [%rd23];
	ld.shared.u32 	%r3734, [%rd24];
$L__BB0_198:                            // %L25854
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3473, %r3470}, {%r518, %r521}, {%r3737}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3482, %r3479}, {%r518, %r521}, {%r3736}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3491, %r3488}, {%r518, %r521}, {%r3735}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3500, %r3497}, {%r518, %r521}, {%r3734}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3466, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3468, %r3466, %r3470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r570, %r3473, %r3468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3475, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3477, %r3475, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r570, %r3482, %r3477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3484, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r3484, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r570, %r3491, %r3486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3493, %r573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r3493, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r570, %r3500, %r3495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r573, %r3473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r570, %r3470, %r3502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3509, %r573, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r570, %r3479, %r3509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3516, %r573, %r3491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r570, %r3488, %r3516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r573, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r570, %r3497, %r3523;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3571, %r3574}, {%r614, %r620, %r617, %r623}, {%r3471, %r3505}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3590, %r3593}, {%r614, %r620, %r617, %r623}, {%r3480, %r3512}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3578, %r3582}, {%r614, %r620, %r617, %r623}, {%r3489, %r3519}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3597, %r3601}, {%r614, %r620, %r617, %r623}, {%r3498, %r3526}, {%r3266, %r3266};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3570, %r3571, %r3571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r3574, %r3574, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r3578, %r3578, %r3573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r3582, %r3582, %r3577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3696, %r1831, %r3581, %r3414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3589, %r3590, %r3590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3592, %r3593, %r3593, %r3589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3596, %r3597, %r3597, %r3592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r3601, %r3601, %r3596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r1831, %r3600, %r3433;
	// end inline asm
	add.s32 	%r3693, %r3751, 2;
	setp.eq.s32 	%p321, %r3693, 6;
	@%p321 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_201;
$L__BB0_199:                            // %pass11764
                                        //   in Loop: Header=BB0_190 Depth=2
	@%p91 bra 	$L__BB0_200;
// %bb.266:                             // %pass11774
                                        //   in Loop: Header=BB0_190 Depth=2
	mul.lo.s32 	%r3608, %r3694, 589824;
	add.s32 	%r3609, %r119, %r3608;
	cvt.s64.s32 	%rd314, %r3609;
	add.s64 	%rd315, %rd314, %rd11;
	mul.hi.s64 	%rd316, %rd315, 1024819115206086201;
	shr.u64 	%rd317, %rd316, 63;
	shr.s64 	%rd318, %rd316, 25;
	add.s64 	%rd319, %rd318, %rd317;
	setp.lt.s64 	%p323, %rd315, 0;
	mul.lo.s64 	%rd320, %rd319, 603979776;
	setp.ne.s64 	%p324, %rd320, %rd315;
	and.pred  	%p325, %p323, %p324;
	selp.s64 	%rd321, -1, 0, %p325;
	add.s64 	%rd322, %rd319, %rd321;
	mul.lo.s64 	%rd323, %rd322, -603979776;
	add.s64 	%rd324, %rd323, %rd315;
	shl.b64 	%rd325, %rd324, 2;
	add.s64 	%rd326, %rd4, %rd325;
	st.global.u32 	[%rd326], %r3696;
	add.s32 	%r3610, %r120, %r3608;
	cvt.s64.s32 	%rd327, %r3610;
	add.s64 	%rd328, %rd327, %rd11;
	mul.hi.s64 	%rd329, %rd328, 1024819115206086201;
	shr.u64 	%rd330, %rd329, 63;
	shr.s64 	%rd331, %rd329, 25;
	add.s64 	%rd332, %rd331, %rd330;
	setp.lt.s64 	%p326, %rd328, 0;
	mul.lo.s64 	%rd333, %rd332, 603979776;
	setp.ne.s64 	%p327, %rd333, %rd328;
	and.pred  	%p328, %p326, %p327;
	selp.s64 	%rd334, -1, 0, %p328;
	add.s64 	%rd335, %rd332, %rd334;
	mul.lo.s64 	%rd336, %rd335, -603979776;
	add.s64 	%rd337, %rd336, %rd328;
	shl.b64 	%rd338, %rd337, 2;
	add.s64 	%rd339, %rd4, %rd338;
	st.global.u32 	[%rd339], %r3695;
	bra.uni 	$L__BB0_200;
$L__BB0_203:                            // %L26422
	mov.u32 	%r3612, 0;
	st.global.u32 	[%rd6], %r3612;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3636, 5;
	st.global.u32 	[%rd6], %r3636;
	mov.u64 	%rd386, exception2251;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3635, 5;
	st.global.u32 	[%rd6], %r3635;
	mov.u64 	%rd384, exception2251;
	cvta.global.u64 	%rd385, %rd384;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd385;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3634, 5;
	st.global.u32 	[%rd6], %r3634;
	mov.u64 	%rd382, exception2251;
	cvta.global.u64 	%rd383, %rd382;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd383;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3633, 5;
	st.global.u32 	[%rd6], %r3633;
	mov.u64 	%rd380, exception2251;
	cvta.global.u64 	%rd381, %rd380;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd381;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3632, 5;
	st.global.u32 	[%rd6], %r3632;
	mov.u64 	%rd378, exception2251;
	cvta.global.u64 	%rd379, %rd378;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd379;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3631, 5;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd376, exception2251;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3630, 5;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd374, exception2251;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd372, exception2251;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd370, exception2251;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd368, exception2251;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd366, exception2251;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd364, exception2251;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd362, exception2251;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd360, exception2251;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd358, exception2251;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3621, 5;
	st.global.u32 	[%rd6], %r3621;
	mov.u64 	%rd356, exception2251;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3620, 5;
	st.global.u32 	[%rd6], %r3620;
	mov.u64 	%rd354, exception2251;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3619, 5;
	st.global.u32 	[%rd6], %r3619;
	mov.u64 	%rd352, exception2251;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3618, 5;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd350, exception2251;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3617, 5;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd348, exception2251;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd346, exception2251;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd344, exception2251;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd342, exception2251;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd340, exception2251;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3638, 2;
	st.global.u32 	[%rd6], %r3638;
	mov.u64 	%rd390, exception2251;
	cvta.global.u64 	%rd391, %rd390;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd391;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3637, 3;
	st.global.u32 	[%rd6], %r3637;
	mov.u64 	%rd388, exception2251;
	cvta.global.u64 	%rd389, %rd388;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd389;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r634, [retval0+0];
	} // callseq 61
	mov.u32 	%r636, 4;
	st.global.u32 	[%rd6], %r636;
	mov.u64 	%rd39, exception2251;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r372;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
