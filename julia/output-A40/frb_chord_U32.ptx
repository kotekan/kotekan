// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2251[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<333>;
	.reg .b16 	%rs<242>;
	.reg .b32 	%r<3763>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<394>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r370, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r379, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r379, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r371, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r380, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r381, %r380, %r1;
	add.s32 	%r382, %r381, %r4;
	mul.wide.u32 	%rd33, %r382, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r383, 1;
	st.global.u32 	[%rd6], %r383;
	setp.gt.u32 	%p4, %r371, 1023;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r372, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r372, %r371;
	setp.gt.s32 	%p6, %r372, 2047;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r373, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r372, %r371;
	mad.lo.s32 	%r384, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r385, %r384, %r384, 4;
	setp.gt.u32 	%p8, %r385, 89478484;
	setp.gt.u32 	%p9, %r373, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r374, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r374, %r373;
	setp.lt.s32 	%p12, %r374, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r386, %r374, %r373;
	mul.hi.s32 	%r387, %r5, 715827883;
	shr.u32 	%r388, %r387, 31;
	add.s32 	%r389, %r387, %r388;
	setp.eq.s32 	%p14, %r386, %r389;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r375, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r375, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r376, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r376, %r375;
	setp.gt.s32 	%p17, %r376, 256;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r377, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r376, %r375;
	and.b32  	%r390, %r6, 31;
	setp.ne.s32 	%p19, %r390, 0;
	setp.lt.s32 	%p20, %r377, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r378, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r378, %r377;
	setp.gt.s32 	%p23, %r378, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r391, %r378, %r377;
	and.b32  	%r392, %r391, 31;
	setp.eq.s32 	%p25, %r392, 0;
	setp.eq.s32 	%p26, %r391, %r6;
	and.pred  	%p27, %p25, %p26;
	@%p27 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_13;
$L__BB0_204:                            // %pass162
	and.b32  	%r226, %r1, 3;
	shr.u32 	%r227, %r1, 2;
	mul.lo.s32 	%r393, %r226, %r227;
	and.b32  	%r394, %r393, 7;
	cvt.rn.f32.s32 	%f201, %r394;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p28, %f785, 0f40000000;
	setp.gtu.f32 	%p332, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p28 bra 	$L__BB0_216;
// %bb.205:
	@%p332 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_206;
$L__BB0_212:
	mov.b32 	%r229, %f785;
	and.b32  	%r395, %r229, 8388607;
	or.b32  	%r3750, %r395, 1065353216;
	mov.b32 	%f780, %r3750;
	add.s32 	%r396, %r229, -1073741824;
	and.b32  	%r3751, %r396, -8388608;
	setp.eq.s32 	%p35, %r3751, 0;
	@%p35 bra 	$L__BB0_215;
// %bb.213:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_214:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r3751, 192937984;
	add.s32 	%r398, %r3750, %r397;
	mov.b32 	%f213, %r398;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3751, %r3751, %r397;
	mov.b32 	%r3750, %f780;
	setp.ne.s32 	%p36, %r3751, 0;
	setp.ne.s32 	%p37, %r3750, 0;
	and.pred  	%p38, %p36, %p37;
	@%p38 bra 	$L__BB0_214;
$L__BB0_215:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p39, %r229, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p39;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_216;
$L__BB0_206:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r228, %f172;
	setp.lt.u32 	%p30, %r228, 1073741824;
	@%p30 bra 	$L__BB0_211;
// %bb.207:
	setp.lt.u32 	%p31, %r228, -2147483647;
	@%p31 bra 	$L__BB0_209;
// %bb.208:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p34, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p34;
	bra.uni 	$L__BB0_211;
$L__BB0_209:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p32, %f172, 0f40800000;
	@%p32 bra 	$L__BB0_211;
// %bb.210:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p33, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p33;
$L__BB0_211:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_216:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p40, %f222, 0f7F800000;
	mov.b32 	%r399, %f169;
	and.b32  	%r236, %r399, -2147483648;
	@%p40 bra 	$L__BB0_218;
// %bb.217:
	mov.b32 	%r400, %f781;
	or.b32  	%r401, %r236, %r400;
	mov.b32 	%f781, %r401;
$L__BB0_218:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r239, %r1, 1;
	and.b32  	%r240, %r239, 6;
	or.b32  	%r241, %r240, 1;
	setp.eq.s32 	%p48, %r240, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3648, %r240, %r227;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p48 bra 	$L__BB0_29;
// %bb.14:                              // %L493
	cvt.u16.u32 	%rs1, %r3648;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p49, %f733, 0f40000000;
	@%p49 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p50, %f733, 0f4B800000;
	@%p50 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r417, %r8, 8388607;
	or.b32  	%r3652, %r417, 1065353216;
	mov.b32 	%f732, %r3652;
	add.s32 	%r418, %r8, -1073741824;
	and.b32  	%r3653, %r418, -8388608;
	setp.eq.s32 	%p56, %r3653, 0;
	@%p56 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3653, 192937984;
	add.s32 	%r420, %r3652, %r419;
	mov.b32 	%f267, %r420;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3653, %r3653, %r419;
	mov.b32 	%r3652, %f732;
	setp.ne.s32 	%p57, %r3653, 0;
	setp.ne.s32 	%p58, %r3652, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p60, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i964
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p51, %r7, 1073741824;
	@%p51 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p52, %r7, -2147483647;
	@%p52 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p55, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p55;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p53, %f4, 0f40800000;
	@%p53 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p54, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p54;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p61, %f276, 0f7F800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r421, %f1;
	and.b32  	%r422, %r421, -2147483648;
	mov.b32 	%r423, %f733;
	or.b32  	%r424, %r422, %r423;
	mov.b32 	%f733, %r424;
$L__BB0_28:                             // %__nv_fmodf.exit991
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r425, %f277;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f278, %r427;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p62, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p62;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p63, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p63;
	cvt.rzi.s32.f32 	%r428, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p64, %r429, 1;
	selp.f32 	%f296, %f294, %f295, %p64;
	selp.f32 	%f297, %f295, %f294, %p64;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p65, %r430, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p65;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p66, %r432, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p66;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p67, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p67;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p68, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p68;
$L__BB0_29:                             // %L527
	setp.gt.u32 	%p69, %r241, 5;
	mul.lo.s32 	%r3649, %r241, %r227;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p69 bra 	$L__BB0_45;
// %bb.30:                              // %L531
	mul.hi.u32 	%r434, %r3649, -1431655765;
	shr.u32 	%r435, %r434, 5;
	mul.lo.s32 	%r436, %r435, 48;
	sub.s32 	%r437, %r3649, %r436;
	cvt.rn.f32.s32 	%f308, %r437;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p70, %f739, 0f40000000;
	@%p70 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p71, %f739, 0f4B800000;
	@%p71 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r438, %r16, 8388607;
	or.b32  	%r3654, %r438, 1065353216;
	mov.b32 	%f738, %r3654;
	add.s32 	%r439, %r16, -1073741824;
	and.b32  	%r3655, %r439, -8388608;
	setp.eq.s32 	%p77, %r3655, 0;
	@%p77 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3655, 192937984;
	add.s32 	%r441, %r3654, %r440;
	mov.b32 	%f320, %r441;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3655, %r3655, %r440;
	mov.b32 	%r3654, %f738;
	setp.ne.s32 	%p78, %r3655, 0;
	setp.ne.s32 	%p79, %r3654, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p81, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i995
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p72, %r15, 1073741824;
	@%p72 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p73, %r15, -2147483647;
	@%p73 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p76, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p76;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p74, %f25, 0f40800000;
	@%p74 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p75, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p75;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p82, %f329, 0f7F800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r442, %f22;
	and.b32  	%r443, %r442, -2147483648;
	mov.b32 	%r444, %f739;
	or.b32  	%r445, %r443, %r444;
	mov.b32 	%f739, %r445;
$L__BB0_44:                             // %__nv_fmodf.exit1022
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r446, %f330;
	and.b32  	%r447, %r446, -2147483648;
	or.b32  	%r448, %r447, 1056964608;
	mov.b32 	%f331, %r448;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p83, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p83;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p84, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p84;
	cvt.rzi.s32.f32 	%r449, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r450, %r449, 1;
	setp.eq.b32 	%p85, %r450, 1;
	selp.f32 	%f349, %f347, %f348, %p85;
	selp.f32 	%f350, %f348, %f347, %p85;
	and.b32  	%r451, %r449, 2;
	setp.eq.s32 	%p86, %r451, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p86;
	add.s32 	%r452, %r449, 1;
	and.b32  	%r453, %r452, 2;
	setp.eq.s32 	%p87, %r453, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p87;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p88, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p88;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p89, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p89;
$L__BB0_45:                             // %L565
	setp.gt.u32 	%p91, %r1, 23;
	or.pred  	%p1, %p48, %p91;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L603
	cvt.u16.u32 	%rs8, %r3648;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p92, %f745, 0f40000000;
	@%p92 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p93, %f745, 0f4B800000;
	@%p93 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r461, %r26, 8388607;
	or.b32  	%r3656, %r461, 1065353216;
	mov.b32 	%f744, %r3656;
	add.s32 	%r462, %r26, -1073741824;
	and.b32  	%r3657, %r462, -8388608;
	setp.eq.s32 	%p99, %r3657, 0;
	@%p99 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r463, %r3657, 192937984;
	add.s32 	%r464, %r3656, %r463;
	mov.b32 	%f373, %r464;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3657, %r3657, %r463;
	mov.b32 	%r3656, %f744;
	setp.ne.s32 	%p100, %r3657, 0;
	setp.ne.s32 	%p101, %r3656, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p103, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1026
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p94, %r25, 1073741824;
	@%p94 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p95, %r25, -2147483647;
	@%p95 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p98, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p98;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p96, %f46, 0f40800000;
	@%p96 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p97, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p97;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p104, %f382, 0f7F800000;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r465, %f43;
	and.b32  	%r466, %r465, -2147483648;
	mov.b32 	%r467, %f745;
	or.b32  	%r468, %r466, %r467;
	mov.b32 	%f745, %r468;
$L__BB0_60:                             // %__nv_fmodf.exit1053
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r469, %f383;
	and.b32  	%r470, %r469, -2147483648;
	or.b32  	%r471, %r470, 1056964608;
	mov.b32 	%f384, %r471;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p105, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p105;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p106, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p106;
	cvt.rzi.s32.f32 	%r472, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r473, %r472, 1;
	setp.eq.b32 	%p107, %r473, 1;
	selp.f32 	%f402, %f400, %f401, %p107;
	selp.f32 	%f403, %f401, %f400, %p107;
	and.b32  	%r474, %r472, 2;
	setp.eq.s32 	%p108, %r474, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p108;
	add.s32 	%r475, %r472, 1;
	and.b32  	%r476, %r475, 2;
	setp.eq.s32 	%p109, %r476, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p109;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p110, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p110;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p111, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p111;
$L__BB0_61:                             // %L637
	or.pred  	%p2, %p69, %p91;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L645
	mul.hi.u32 	%r478, %r3649, -1431655765;
	shr.u32 	%r479, %r478, 2;
	mul.lo.s32 	%r480, %r479, 6;
	sub.s32 	%r481, %r3649, %r480;
	cvt.rn.f32.s32 	%f414, %r481;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p114, %f751, 0f40000000;
	@%p114 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p115, %f751, 0f4B800000;
	@%p115 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r482, %r34, 8388607;
	or.b32  	%r3658, %r482, 1065353216;
	mov.b32 	%f750, %r3658;
	add.s32 	%r483, %r34, -1073741824;
	and.b32  	%r3659, %r483, -8388608;
	setp.eq.s32 	%p121, %r3659, 0;
	@%p121 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1078.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1078
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r484, %r3659, 192937984;
	add.s32 	%r485, %r3658, %r484;
	mov.b32 	%f426, %r485;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3659, %r3659, %r484;
	mov.b32 	%r3658, %f750;
	setp.ne.s32 	%p122, %r3659, 0;
	setp.ne.s32 	%p123, %r3658, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1080
	setp.gt.u32 	%p125, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1057
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p116, %r33, 1073741824;
	@%p116 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p117, %r33, -2147483647;
	@%p117 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p120, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p120;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p118, %f67, 0f40800000;
	@%p118 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1061
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p119, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p119;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1064
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1083
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p126, %f435, 0f7F800000;
	@%p126 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r486, %f64;
	and.b32  	%r487, %r486, -2147483648;
	mov.b32 	%r488, %f751;
	or.b32  	%r489, %r487, %r488;
	mov.b32 	%f751, %r489;
$L__BB0_76:                             // %__nv_fmodf.exit1084
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r490, %f436;
	and.b32  	%r491, %r490, -2147483648;
	or.b32  	%r492, %r491, 1056964608;
	mov.b32 	%f437, %r492;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p127, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p127;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p128, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p128;
	cvt.rzi.s32.f32 	%r493, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r494, %r493, 1;
	setp.eq.b32 	%p129, %r494, 1;
	selp.f32 	%f455, %f453, %f454, %p129;
	selp.f32 	%f456, %f454, %f453, %p129;
	and.b32  	%r495, %r493, 2;
	setp.eq.s32 	%p130, %r495, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p130;
	add.s32 	%r496, %r493, 1;
	and.b32  	%r497, %r496, 2;
	setp.eq.s32 	%p131, %r497, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p131;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p132, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p132;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p133, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p133;
$L__BB0_77:                             // %L679
	@%p28 bra 	$L__BB0_226;
// %bb.78:
	@%p332 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_79;
$L__BB0_222:
	mov.b32 	%r243, %f785;
	and.b32  	%r510, %r243, 8388607;
	or.b32  	%r3752, %r510, 1065353216;
	mov.b32 	%f784, %r3752;
	add.s32 	%r511, %r243, -1073741824;
	and.b32  	%r3753, %r511, -8388608;
	setp.eq.s32 	%p141, %r3753, 0;
	@%p141 bra 	$L__BB0_225;
// %bb.223:                             // %__nv_fmaf_rn.exit4.i.i.i1109.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_224:                            // %__nv_fmaf_rn.exit4.i.i.i1109
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r512, %r3753, 192937984;
	add.s32 	%r513, %r3752, %r512;
	mov.b32 	%f476, %r513;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3753, %r3753, %r512;
	mov.b32 	%r3752, %f784;
	setp.ne.s32 	%p142, %r3753, 0;
	setp.ne.s32 	%p143, %r3752, 0;
	and.pred  	%p144, %p142, %p143;
	@%p144 bra 	$L__BB0_224;
$L__BB0_225:                            // %__internal_fmodf_slowpath_mod.exit.i.i1111
	setp.gt.u32 	%p145, %r243, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p145;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_226;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1088
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r242, %f187;
	setp.lt.u32 	%p136, %r242, 1073741824;
	@%p136 bra 	$L__BB0_221;
// %bb.80:
	setp.lt.u32 	%p137, %r242, -2147483647;
	@%p137 bra 	$L__BB0_219;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p140, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p140;
	bra.uni 	$L__BB0_221;
$L__BB0_219:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p138, %f187, 0f40800000;
	@%p138 bra 	$L__BB0_221;
// %bb.220:                             // %__nv_fmaf_rn.exit.i.i.i1092
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p139, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p139;
$L__BB0_221:                            // %__internal_fmodf_fastpath_quot.exit.i.i1095
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_226:                            // %__internal_fmodf_kernel.exit.i1114
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p146, %f485, 0f7F800000;
	@%p146 bra 	$L__BB0_228;
// %bb.227:
	mov.b32 	%r514, %f785;
	or.b32  	%r515, %r236, %r514;
	mov.b32 	%f785, %r515;
$L__BB0_228:                            // %__nv_fmodf.exit1115
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p48 bra 	$L__BB0_97;
// %bb.82:                              // %L781
	cvt.u16.u32 	%rs15, %r3648;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p155, %f757, 0f40000000;
	@%p155 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p156, %f757, 0f4B800000;
	@%p156 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r531, %r46, 8388607;
	or.b32  	%r3660, %r531, 1065353216;
	mov.b32 	%f756, %r3660;
	add.s32 	%r532, %r46, -1073741824;
	and.b32  	%r3661, %r532, -8388608;
	setp.eq.s32 	%p162, %r3661, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1140.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1140
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r533, %r3661, 192937984;
	add.s32 	%r534, %r3660, %r533;
	mov.b32 	%f530, %r534;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3661, %r3661, %r533;
	mov.b32 	%r3660, %f756;
	setp.ne.s32 	%p163, %r3661, 0;
	setp.ne.s32 	%p164, %r3660, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1142
	setp.gt.u32 	%p166, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1119
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p157, %r45, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r45, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1123
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1126
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1145
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p167, %f539, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r535, %f85;
	and.b32  	%r536, %r535, -2147483648;
	mov.b32 	%r537, %f757;
	or.b32  	%r538, %r536, %r537;
	mov.b32 	%f757, %r538;
$L__BB0_96:                             // %__nv_fmodf.exit1146
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r539, %f540;
	and.b32  	%r540, %r539, -2147483648;
	or.b32  	%r541, %r540, 1056964608;
	mov.b32 	%f541, %r541;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p168, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p168;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p169, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p169;
	cvt.rzi.s32.f32 	%r542, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r543, %r542, 1;
	setp.eq.b32 	%p170, %r543, 1;
	selp.f32 	%f559, %f557, %f558, %p170;
	selp.f32 	%f560, %f558, %f557, %p170;
	and.b32  	%r544, %r542, 2;
	setp.eq.s32 	%p171, %r544, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p171;
	add.s32 	%r545, %r542, 1;
	and.b32  	%r546, %r545, 2;
	setp.eq.s32 	%p172, %r546, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p172;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p173, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p173;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p174, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p174;
$L__BB0_97:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p69 bra 	$L__BB0_113;
// %bb.98:                              // %L819
	mul.hi.u32 	%r548, %r3649, -1431655765;
	shr.u32 	%r549, %r548, 5;
	mul.lo.s32 	%r550, %r549, 48;
	sub.s32 	%r551, %r3649, %r550;
	cvt.rn.f32.s32 	%f571, %r551;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p176, %f763, 0f40000000;
	@%p176 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p177, %f763, 0f4B800000;
	@%p177 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r552, %r54, 8388607;
	or.b32  	%r3662, %r552, 1065353216;
	mov.b32 	%f762, %r3662;
	add.s32 	%r553, %r54, -1073741824;
	and.b32  	%r3663, %r553, -8388608;
	setp.eq.s32 	%p183, %r3663, 0;
	@%p183 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1171.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1171
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r554, %r3663, 192937984;
	add.s32 	%r555, %r3662, %r554;
	mov.b32 	%f583, %r555;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3663, %r3663, %r554;
	mov.b32 	%r3662, %f762;
	setp.ne.s32 	%p184, %r3663, 0;
	setp.ne.s32 	%p185, %r3662, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1173
	setp.gt.u32 	%p187, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1150
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p178, %r53, 1073741824;
	@%p178 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p179, %r53, -2147483647;
	@%p179 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p182, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p182;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p180, %f109, 0f40800000;
	@%p180 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1154
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p181, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p181;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1157
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1176
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p188, %f592, 0f7F800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r556, %f106;
	and.b32  	%r557, %r556, -2147483648;
	mov.b32 	%r558, %f763;
	or.b32  	%r559, %r557, %r558;
	mov.b32 	%f763, %r559;
$L__BB0_112:                            // %__nv_fmodf.exit1177
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r560, %f593;
	and.b32  	%r561, %r560, -2147483648;
	or.b32  	%r562, %r561, 1056964608;
	mov.b32 	%f594, %r562;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p189, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p189;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p190, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p190;
	cvt.rzi.s32.f32 	%r563, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r564, %r563, 1;
	setp.eq.b32 	%p191, %r564, 1;
	selp.f32 	%f612, %f610, %f611, %p191;
	selp.f32 	%f613, %f611, %f610, %p191;
	and.b32  	%r565, %r563, 2;
	setp.eq.s32 	%p192, %r565, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p192;
	add.s32 	%r566, %r563, 1;
	and.b32  	%r567, %r566, 2;
	setp.eq.s32 	%p193, %r567, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p193;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p194, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p194;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p195, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p195;
$L__BB0_113:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L891
	cvt.u16.u32 	%rs22, %r3648;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p196, %f769, 0f40000000;
	@%p196 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p197, %f769, 0f4B800000;
	@%p197 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r575, %r64, 8388607;
	or.b32  	%r3664, %r575, 1065353216;
	mov.b32 	%f768, %r3664;
	add.s32 	%r576, %r64, -1073741824;
	and.b32  	%r3665, %r576, -8388608;
	setp.eq.s32 	%p203, %r3665, 0;
	@%p203 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1202.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1202
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r577, %r3665, 192937984;
	add.s32 	%r578, %r3664, %r577;
	mov.b32 	%f636, %r578;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3665, %r3665, %r577;
	mov.b32 	%r3664, %f768;
	setp.ne.s32 	%p204, %r3665, 0;
	setp.ne.s32 	%p205, %r3664, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1204
	setp.gt.u32 	%p207, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1181
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p198, %r63, 1073741824;
	@%p198 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p199, %r63, -2147483647;
	@%p199 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p202, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p202;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p200, %f130, 0f40800000;
	@%p200 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1185
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p201, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p201;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1188
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1207
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p208, %f645, 0f7F800000;
	@%p208 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r579, %f127;
	and.b32  	%r580, %r579, -2147483648;
	mov.b32 	%r581, %f769;
	or.b32  	%r582, %r580, %r581;
	mov.b32 	%f769, %r582;
$L__BB0_128:                            // %__nv_fmodf.exit1208
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r583, %f646;
	and.b32  	%r584, %r583, -2147483648;
	or.b32  	%r585, %r584, 1056964608;
	mov.b32 	%f647, %r585;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p209, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p209;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p210, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p210;
	cvt.rzi.s32.f32 	%r586, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r587, %r586, 1;
	setp.eq.b32 	%p211, %r587, 1;
	selp.f32 	%f665, %f663, %f664, %p211;
	selp.f32 	%f666, %f664, %f663, %p211;
	and.b32  	%r588, %r586, 2;
	setp.eq.s32 	%p212, %r588, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p212;
	add.s32 	%r589, %r586, 1;
	and.b32  	%r590, %r589, 2;
	setp.eq.s32 	%p213, %r590, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p213;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p214, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p214;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p215, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p215;
$L__BB0_129:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L933
	mul.hi.u32 	%r592, %r3649, -1431655765;
	shr.u32 	%r593, %r592, 2;
	mul.lo.s32 	%r594, %r593, 6;
	sub.s32 	%r595, %r3649, %r594;
	cvt.rn.f32.s32 	%f677, %r595;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p216, %f775, 0f40000000;
	@%p216 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p217, %f775, 0f4B800000;
	@%p217 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r596, %r72, 8388607;
	or.b32  	%r3666, %r596, 1065353216;
	mov.b32 	%f774, %r3666;
	add.s32 	%r597, %r72, -1073741824;
	and.b32  	%r3667, %r597, -8388608;
	setp.eq.s32 	%p223, %r3667, 0;
	@%p223 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1233.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1233
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r598, %r3667, 192937984;
	add.s32 	%r599, %r3666, %r598;
	mov.b32 	%f689, %r599;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3667, %r3667, %r598;
	mov.b32 	%r3666, %f774;
	setp.ne.s32 	%p224, %r3667, 0;
	setp.ne.s32 	%p225, %r3666, 0;
	and.pred  	%p226, %p224, %p225;
	@%p226 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1235
	setp.gt.u32 	%p227, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p227;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p218, %r71, 1073741824;
	@%p218 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p219, %r71, -2147483647;
	@%p219 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p222, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p222;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p220, %f151, 0f40800000;
	@%p220 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1216
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p221, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p221;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1219
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1238
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p228, %f698, 0f7F800000;
	@%p228 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r600, %f148;
	and.b32  	%r601, %r600, -2147483648;
	mov.b32 	%r602, %f775;
	or.b32  	%r603, %r601, %r602;
	mov.b32 	%f775, %r603;
$L__BB0_144:                            // %__nv_fmodf.exit1239
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r604, %f699;
	and.b32  	%r605, %r604, -2147483648;
	or.b32  	%r606, %r605, 1056964608;
	mov.b32 	%f700, %r606;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p229, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p229;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p230, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p230;
	cvt.rzi.s32.f32 	%r607, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r608, %r607, 1;
	setp.eq.b32 	%p231, %r608, 1;
	selp.f32 	%f718, %f716, %f717, %p231;
	selp.f32 	%f719, %f717, %f716, %p231;
	and.b32  	%r609, %r607, 2;
	setp.eq.s32 	%p232, %r609, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p232;
	add.s32 	%r610, %r607, 1;
	and.b32  	%r611, %r610, 2;
	setp.eq.s32 	%p233, %r611, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p233;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p234, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p234;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p235, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p235;
$L__BB0_145:                            // %L967
	mov.u32 	%r252, 999999999;
	cvt.u16.u32 	%rs241, %r1;
	@%p91 bra 	$L__BB0_230;
// %bb.146:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs241, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs241, %rs33;
	cvt.u32.u16 	%r625, %rs34;
	and.b32  	%r626, %r625, 255;
	mad.lo.s32 	%r627, %r626, 24, %r3;
	cvt.u16.u32 	%rs35, %r627;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r628, %rs39;
	mul.wide.u32 	%rd34, %r628, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r629, [%rd35];
	shl.b32 	%r630, %r629, 16;
	cvt.s32.s16 	%r83, %r629;
	shr.s32 	%r84, %r629, 16;
	or.b32  	%r631, %r630, 65535;
	setp.lt.u32 	%p237, %r631, 1638399;
	setp.lt.u32 	%p238, %r629, 1572864;
	and.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_229;
	bra.uni 	$L__BB0_147;
$L__BB0_229:                            // %L1245
	mul.lo.s32 	%r635, %r84, 801;
	mad.lo.s32 	%r252, %r83, 33, %r635;
$L__BB0_230:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r408, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r522, %f487;
	or.b32  	%r410, %r409, 1056964608;
	and.b32  	%r523, %r522, -2147483648;
	mov.b32 	%f225, %r410;
	or.b32  	%r524, %r523, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r524;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p41, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p41;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p42, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p148, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p42;
	selp.f32 	%f492, %f487, %f490, %p148;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p149, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p149;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r411, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r412, %r411, 1;
	cvt.rzi.s32.f32 	%r525, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p43, %r412, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r526, %r525, 1;
	selp.f32 	%f243, %f241, %f242, %p43;
	and.b32  	%r413, %r411, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p150, %r526, 1;
	setp.eq.s32 	%p44, %r413, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r414, %r411, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p150;
	and.b32  	%r527, %r525, 2;
	selp.f32 	%f244, %f242, %f241, %p43;
	selp.f32 	%f246, %f243, %f245, %p44;
	and.b32  	%r415, %r414, 2;
	setp.eq.f32 	%p46, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p151, %r527, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r528, %r525, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p45, %r415, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p46;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p150;
	selp.f32 	%f509, %f506, %f508, %p151;
	and.b32  	%r529, %r528, 2;
	setp.eq.f32 	%p153, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p45;
	setp.gt.f32 	%p47, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p152, %r529, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p153;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p47;
	selp.f32 	%f511, %f507, %f510, %p152;
	setp.gt.f32 	%p154, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r404, %f254;
	mov.b32 	%r407, %f251;
	selp.f32 	%f517, %f516, %f511, %p154;
	xor.b32  	%r403, %r407, -2147483648;
	mov.b32 	%r499, %f62;
	mov.b32 	%r500, %f83;
	mov.b32 	%r505, %f63;
	mov.b32 	%r506, %f84;
	mov.b32 	%r518, %f517;
	mov.b32 	%r521, %f514;
	mov.b32 	%r455, %f20;
	mov.b32 	%r456, %f41;
	mov.b32 	%r458, %f21;
	mov.b32 	%r459, %f42;
	xor.b32  	%r502, %r505, -2147483648;
	xor.b32  	%r503, %r506, -2147483648;
	xor.b32  	%r517, %r521, -2147483648;
	mov.b32 	%r569, %f104;
	mov.b32 	%r570, %f125;
	mov.b32 	%r572, %f105;
	mov.b32 	%r573, %f126;
	mov.b32 	%r613, %f146;
	mov.b32 	%r614, %f167;
	mov.b32 	%r619, %f147;
	xor.b32  	%r616, %r619, -2147483648;
	mov.b32 	%r620, %f168;
	xor.b32  	%r617, %r620, -2147483648;
	and.b32  	%r636, %r1, 24;
	setp.ne.s32 	%p240, %r636, 24;
	cvt.u16.u32 	%rs40, %r227;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r637, %rs44;
	and.b32  	%r253, %r637, 255;
	mul.lo.s32 	%r3668, %r2, 1152;
	@%p240 bra 	$L__BB0_148;
// %bb.231:                             // %pass503.L1505_crit_edge
	mov.u32 	%r87, 0;
	mov.u32 	%r88, %r87;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r638, %r253, 24;
	mul.lo.s32 	%r639, %r226, 144;
	or.b32  	%r640, %r3668, %r3;
	add.s32 	%r641, %r640, %r639;
	add.s32 	%r642, %r641, %r638;
	mul.wide.u32 	%rd41, %r642, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r87, [%rd42];
	or.b32  	%r643, %r3, 576;
	add.s32 	%r644, %r3668, %r643;
	add.s32 	%r645, %r644, %r639;
	add.s32 	%r646, %r645, %r638;
	mul.wide.u32 	%rd43, %r646, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r88, [%rd44];
$L__BB0_149:                            // %L1505
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r454, %r456, %r455;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r498, %r500, %r499;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r501, %r503, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r500, %r499;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r516, %r518, %r517;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r519, %r521, %r518;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r568, %r570, %r569;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r571, %r573, %r572;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r612, %r614, %r613;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r615, %r617, %r616;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r618, %r620, %r619;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r621, %r614, %r613;
	// end inline asm
	mov.u32 	%r120, 0;
	shl.b32 	%r649, %r371, 16;
	shl.b32 	%r650, %r375, 8;
	add.s32 	%r89, %r650, %r649;
	shl.b32 	%r651, %r1, 2;
	and.b32  	%r652, %r651, 60;
	shl.b32 	%r653, %r1, 3;
	and.b32  	%r654, %r653, 128;
	shl.b32 	%r655, %r2, 8;
	or.b32  	%r656, %r652, %r654;
	or.b32  	%r90, %r656, %r655;
	or.b32  	%r657, %r651, %r655;
	or.b32  	%r658, %r657, %r654;
	or.b32  	%r91, %r658, 64;
	add.s32 	%r92, %r3, 24;
	and.b32  	%r659, %r239, 30;
	shr.u32 	%r660, %r1, 4;
	or.b32  	%r661, %r659, %r660;
	mul.lo.s32 	%r93, %r661, 257;
	or.b32  	%r662, %r660, %r239;
	or.b32  	%r663, %r662, 32;
	mul.lo.s32 	%r94, %r663, 257;
	and.b16  	%rs46, %rs241, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs241, %rs49;
	cvt.u32.u16 	%r664, %rs50;
	and.b32  	%r95, %r664, 255;
	shr.u32 	%r665, %r3, 3;
	and.b32  	%r666, %r4, 224;
	mad.lo.s32 	%r96, %r665, 257, %r666;
	shr.u32 	%r667, %r92, 3;
	mad.lo.s32 	%r97, %r667, 257, %r666;
	add.s32 	%r668, %r3, 48;
	shr.u32 	%r669, %r668, 3;
	mad.lo.s32 	%r98, %r669, 257, %r666;
	add.s32 	%r670, %r3, 72;
	shr.u32 	%r671, %r670, 3;
	mad.lo.s32 	%r99, %r671, 257, %r666;
	or.b32  	%r672, %r665, 12;
	mad.lo.s32 	%r100, %r672, 257, %r666;
	add.s32 	%r673, %r3, 120;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r101, %r674, 257, %r666;
	add.s32 	%r675, %r3, 144;
	shr.u32 	%r676, %r675, 3;
	mad.lo.s32 	%r102, %r676, 257, %r666;
	add.s32 	%r677, %r3, 168;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r103, %r678, 257, %r666;
	or.b32  	%r679, %r665, 24;
	mad.lo.s32 	%r104, %r679, 257, %r666;
	add.s32 	%r680, %r3, 216;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r105, %r681, 257, %r666;
	add.s32 	%r682, %r3, 240;
	shr.u32 	%r683, %r682, 3;
	mad.lo.s32 	%r106, %r683, 257, %r666;
	add.s32 	%r684, %r3, 264;
	shr.u32 	%r685, %r684, 3;
	mad.lo.s32 	%r107, %r685, 257, %r666;
	or.b32  	%r686, %r665, 36;
	mad.lo.s32 	%r108, %r686, 257, %r666;
	add.s32 	%r687, %r3, 312;
	shr.u32 	%r688, %r687, 3;
	mad.lo.s32 	%r109, %r688, 257, %r666;
	add.s32 	%r689, %r3, 336;
	shr.u32 	%r690, %r689, 3;
	mad.lo.s32 	%r110, %r690, 257, %r666;
	add.s32 	%r691, %r3, 360;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r111, %r692, 257, %r666;
	or.b32  	%r693, %r665, 48;
	mad.lo.s32 	%r112, %r693, 257, %r666;
	add.s32 	%r694, %r3, 408;
	shr.u32 	%r695, %r694, 3;
	mad.lo.s32 	%r113, %r695, 257, %r666;
	add.s32 	%r696, %r3, 432;
	shr.u32 	%r697, %r696, 3;
	mad.lo.s32 	%r114, %r697, 257, %r666;
	add.s32 	%r698, %r3, 456;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r115, %r699, 257, %r666;
	or.b32  	%r700, %r665, 60;
	mad.lo.s32 	%r116, %r700, 257, %r666;
	add.s32 	%r701, %r3, 504;
	bfe.u32 	%r702, %r701, 3, 6;
	mad.lo.s32 	%r117, %r702, 257, %r666;
	mul.lo.s32 	%r703, %r3, 33;
	mad.lo.s32 	%r704, %r226, 4806, %r703;
	mad.lo.s32 	%r705, %r253, 801, %r704;
	shr.u32 	%r706, %r3, 4;
	bfe.s32 	%r707, %r3, 2, 1;
	and.b32  	%r708, %r707, 2056;
	mul.lo.s32 	%r709, %r226, 6;
	bfe.s32 	%r710, %r3, 3, 1;
	and.b32  	%r711, %r3, 8;
	setp.eq.s32 	%p241, %r711, 0;
	and.b32  	%r712, %r710, 1028;
	and.b32  	%r713, %r3, 1;
	neg.s32 	%r714, %r713;
	and.b32  	%r715, %r714, 8256;
	bfe.s32 	%r716, %r3, 1, 1;
	and.b32  	%r717, %r716, 4112;
	mad.lo.s32 	%r718, %r706, 514, %r709;
	add.s32 	%r719, %r718, %r708;
	add.s32 	%r720, %r719, %r712;
	add.s32 	%r721, %r720, %r715;
	add.s32 	%r722, %r721, %r717;
	add.s32 	%r723, %r722, %r253;
	mul.wide.u32 	%rd45, %r723, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	bfe.s32 	%r724, %r92, 4, 1;
	and.b32  	%r725, %r92, 16;
	setp.eq.s32 	%p242, %r725, 0;
	and.b32  	%r726, %r724, 514;
	shr.u32 	%r727, %r92, 5;
	selp.b32 	%r728, 1028, 0, %p241;
	mad.lo.s32 	%r729, %r727, 257, %r709;
	add.s32 	%r730, %r729, %r708;
	add.s32 	%r731, %r730, %r728;
	add.s32 	%r732, %r731, %r715;
	add.s32 	%r733, %r732, %r717;
	add.s32 	%r734, %r733, %r726;
	add.s32 	%r735, %r734, %r253;
	mul.wide.u32 	%rd47, %r735, 4;
	add.s64 	%rd8, %rd46, %rd47;
	add.s32 	%r736, %r723, 32;
	mul.wide.u32 	%rd48, %r736, 4;
	add.s64 	%rd9, %rd46, %rd48;
	selp.b32 	%r737, 32, 546, %p242;
	add.s32 	%r738, %r733, %r737;
	add.s32 	%r739, %r738, %r253;
	mul.wide.u32 	%rd49, %r739, 4;
	add.s64 	%rd10, %rd46, %rd49;
	mul.lo.s32 	%r740, %r373, 589824;
	mad.lo.s32 	%r741, %r377, 1152, %r740;
	mad.lo.s32 	%r742, %r3, 24, %r3668;
	add.s32 	%r118, %r742, %r95;
	cvt.s64.s32 	%rd11, %r741;
	cvt.u16.u32 	%rs51, %r92;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r743, %rs56;
	and.b32  	%r744, %r743, 255;
	or.b32  	%r745, %r3668, %r95;
	mad.lo.s32 	%r119, %r744, 24, %r745;
	mul.wide.u32 	%rd50, %r705, 4;
	add.s64 	%rd12, %rd46, %rd50;
	add.s32 	%r746, %r723, 64;
	mul.wide.u32 	%rd51, %r746, 4;
	add.s64 	%rd13, %rd46, %rd51;
	add.s32 	%r747, %r735, 64;
	mul.wide.u32 	%rd52, %r747, 4;
	add.s64 	%rd14, %rd46, %rd52;
	add.s32 	%r748, %r723, 96;
	mul.wide.u32 	%rd53, %r748, 4;
	add.s64 	%rd15, %rd46, %rd53;
	add.s32 	%r749, %r739, 64;
	mul.wide.u32 	%rd54, %r749, 4;
	add.s64 	%rd16, %rd46, %rd54;
	add.s32 	%r750, %r723, 128;
	mul.wide.u32 	%rd55, %r750, 4;
	add.s64 	%rd17, %rd46, %rd55;
	add.s32 	%r751, %r735, 128;
	mul.wide.u32 	%rd56, %r751, 4;
	add.s64 	%rd18, %rd46, %rd56;
	add.s32 	%r752, %r723, 160;
	mul.wide.u32 	%rd57, %r752, 4;
	add.s64 	%rd19, %rd46, %rd57;
	add.s32 	%r753, %r739, 128;
	mul.wide.u32 	%rd58, %r753, 4;
	add.s64 	%rd20, %rd46, %rd58;
	add.s32 	%r754, %r723, 192;
	mul.wide.u32 	%rd59, %r754, 4;
	add.s64 	%rd21, %rd46, %rd59;
	add.s32 	%r755, %r735, 192;
	mul.wide.u32 	%rd60, %r755, 4;
	add.s64 	%rd22, %rd46, %rd60;
	add.s32 	%r756, %r723, 224;
	mul.wide.u32 	%rd61, %r756, 4;
	add.s64 	%rd23, %rd46, %rd61;
	add.s32 	%r757, %r739, 192;
	mul.wide.u32 	%rd62, %r757, 4;
	add.s64 	%rd24, %rd46, %rd62;
	setp.lt.u32 	%p244, %r1, 16;
	setp.gt.u32 	%p273, %r3, 7;
	setp.lt.u32 	%p277, %r1, 24;
	mov.u32 	%r3701, %r120;
	mov.u32 	%r3702, %r120;
	mov.u32 	%r3703, %r120;
	mov.u32 	%r3704, %r120;
	bra.uni 	$L__BB0_150;
$L__BB0_202:                            // %L26541
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r225, %r120, 48;
	setp.ne.s32 	%p331, %r120, 960;
	mov.u32 	%r120, %r225;
	@%p331 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_203;
$L__BB0_150:                            // %L1508
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_190 Depth 2
	add.s32 	%r758, %r120, %r371;
	setp.lt.s32 	%p243, %r758, %r372;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_203;
$L__BB0_151:                            // %oksrem704
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r951, %r120, -1431655765;
	shr.u32 	%r952, %r951, 5;
	mul.lo.s32 	%r258, %r952, 48;
	add.s32 	%r953, %r258, %r3;
	cvt.u16.u32 	%rs57, %r953;
	shr.s16 	%rs58, %rs57, 15;
	shr.u16 	%rs59, %rs58, 6;
	add.s16 	%rs60, %rs57, %rs59;
	and.b16  	%rs61, %rs60, -1024;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r954, %rs62;
	shl.b32 	%r955, %r954, 16;
	or.b32  	%r956, %r955, %r90;
	add.s32 	%r957, %r89, %r956;
	shr.s32 	%r958, %r957, 31;
	shr.u32 	%r959, %r958, 6;
	add.s32 	%r960, %r957, %r959;
	shr.s32 	%r961, %r960, 26;
	setp.lt.s32 	%p245, %r957, 0;
	and.b32  	%r962, %r960, -67108864;
	setp.ne.s32 	%p246, %r962, %r957;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r963, 1, 0, %p247;
	sub.s32 	%r964, %r963, %r961;
	shl.b32 	%r965, %r964, 26;
	add.s32 	%r966, %r965, %r957;
	mul.wide.s32 	%rd63, %r966, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r967, %r968, %r969, %r970}, [%rd64];
	or.b32  	%r971, %r91, %r955;
	add.s32 	%r972, %r89, %r971;
	shr.s32 	%r973, %r972, 31;
	shr.u32 	%r974, %r973, 6;
	add.s32 	%r975, %r972, %r974;
	shr.u32 	%r976, %r975, 26;
	shr.u32 	%r977, %r972, 31;
	sub.s32 	%r978, %r977, %r976;
	shl.b32 	%r979, %r978, 26;
	or.b32  	%r980, %r972, 1;
	add.s32 	%r981, %r980, %r979;
	mul.wide.s32 	%rd65, %r981, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r982, %r983, %r984, %r985}, [%rd66+-4];
	add.s32 	%r986, %r92, %r258;
	cvt.u16.u32 	%rs63, %r986;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 6;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -1024;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r987, %rs68;
	shl.b32 	%r988, %r987, 16;
	or.b32  	%r989, %r988, %r90;
	add.s32 	%r990, %r89, %r989;
	shr.s32 	%r991, %r990, 31;
	shr.u32 	%r992, %r991, 6;
	add.s32 	%r993, %r990, %r992;
	shr.s32 	%r994, %r993, 26;
	setp.lt.s32 	%p248, %r990, 0;
	and.b32  	%r995, %r993, -67108864;
	setp.ne.s32 	%p249, %r995, %r990;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r996, 1, 0, %p250;
	sub.s32 	%r997, %r996, %r994;
	shl.b32 	%r998, %r997, 26;
	add.s32 	%r999, %r998, %r990;
	mul.wide.s32 	%rd67, %r999, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r1000, %r1001, %r1002, %r1003}, [%rd68];
	or.b32  	%r1004, %r91, %r988;
	add.s32 	%r1005, %r89, %r1004;
	shr.s32 	%r1006, %r1005, 31;
	shr.u32 	%r1007, %r1006, 6;
	add.s32 	%r1008, %r1005, %r1007;
	shr.u32 	%r1009, %r1008, 26;
	shr.u32 	%r1010, %r1005, 31;
	sub.s32 	%r1011, %r1010, %r1009;
	shl.b32 	%r1012, %r1011, 26;
	or.b32  	%r1013, %r1005, 1;
	add.s32 	%r1014, %r1013, %r1012;
	mul.wide.s32 	%rd69, %r1014, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r1015, %r1016, %r1017, %r1018}, [%rd70+-4];
	selp.b32 	%r1019, %r969, %r967, %p244;
	shfl.sync.bfly.b32	%r1020, %r1019, 16, 31, -1;
	selp.b32 	%r761, %r967, %r1020, %p244;
	selp.b32 	%r766, %r1020, %r969, %p244;
	selp.b32 	%r1021, %r970, %r968, %p244;
	shfl.sync.bfly.b32	%r1022, %r1021, 16, 31, -1;
	selp.b32 	%r769, %r968, %r1022, %p244;
	selp.b32 	%r774, %r1022, %r970, %p244;
	selp.b32 	%r1023, %r984, %r982, %p244;
	shfl.sync.bfly.b32	%r1024, %r1023, 16, 31, -1;
	selp.b32 	%r777, %r982, %r1024, %p244;
	selp.b32 	%r782, %r1024, %r984, %p244;
	selp.b32 	%r1025, %r985, %r983, %p244;
	shfl.sync.bfly.b32	%r1026, %r1025, 16, 31, -1;
	selp.b32 	%r785, %r983, %r1026, %p244;
	selp.b32 	%r790, %r1026, %r985, %p244;
	selp.b32 	%r1027, %r1002, %r1000, %p244;
	shfl.sync.bfly.b32	%r1028, %r1027, 16, 31, -1;
	selp.b32 	%r793, %r1000, %r1028, %p244;
	selp.b32 	%r798, %r1028, %r1002, %p244;
	selp.b32 	%r1029, %r1003, %r1001, %p244;
	shfl.sync.bfly.b32	%r1030, %r1029, 16, 31, -1;
	selp.b32 	%r801, %r1001, %r1030, %p244;
	selp.b32 	%r806, %r1030, %r1003, %p244;
	selp.b32 	%r1031, %r1017, %r1015, %p244;
	shfl.sync.bfly.b32	%r1032, %r1031, 16, 31, -1;
	selp.b32 	%r809, %r1015, %r1032, %p244;
	selp.b32 	%r814, %r1032, %r1017, %p244;
	selp.b32 	%r1033, %r1018, %r1016, %p244;
	shfl.sync.bfly.b32	%r1034, %r1033, 16, 31, -1;
	selp.b32 	%r817, %r1016, %r1034, %p244;
	selp.b32 	%r822, %r1034, %r1018, %p244;
	shl.b32 	%r762, %r766, 4;
	mov.u32 	%r760, 252645135;
	// begin inline asm
	lop3.b32 %r824, %r760, %r761, %r762, 202;
	// end inline asm
	shr.u32 	%r765, %r761, 4;
	// begin inline asm
	lop3.b32 %r840, %r760, %r765, %r766, 202;
	// end inline asm
	shl.b32 	%r770, %r774, 4;
	// begin inline asm
	lop3.b32 %r832, %r760, %r769, %r770, 202;
	// end inline asm
	shr.u32 	%r773, %r769, 4;
	// begin inline asm
	lop3.b32 %r848, %r760, %r773, %r774, 202;
	// end inline asm
	shl.b32 	%r778, %r782, 4;
	// begin inline asm
	lop3.b32 %r856, %r760, %r777, %r778, 202;
	// end inline asm
	shr.u32 	%r781, %r777, 4;
	// begin inline asm
	lop3.b32 %r872, %r760, %r781, %r782, 202;
	// end inline asm
	shl.b32 	%r786, %r790, 4;
	// begin inline asm
	lop3.b32 %r864, %r760, %r785, %r786, 202;
	// end inline asm
	shr.u32 	%r789, %r785, 4;
	// begin inline asm
	lop3.b32 %r880, %r760, %r789, %r790, 202;
	// end inline asm
	shl.b32 	%r794, %r798, 4;
	// begin inline asm
	lop3.b32 %r825, %r760, %r793, %r794, 202;
	// end inline asm
	shr.u32 	%r797, %r793, 4;
	// begin inline asm
	lop3.b32 %r841, %r760, %r797, %r798, 202;
	// end inline asm
	shl.b32 	%r802, %r806, 4;
	// begin inline asm
	lop3.b32 %r833, %r760, %r801, %r802, 202;
	// end inline asm
	shr.u32 	%r805, %r801, 4;
	// begin inline asm
	lop3.b32 %r849, %r760, %r805, %r806, 202;
	// end inline asm
	shl.b32 	%r810, %r814, 4;
	// begin inline asm
	lop3.b32 %r857, %r760, %r809, %r810, 202;
	// end inline asm
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r873, %r760, %r813, %r814, 202;
	// end inline asm
	shl.b32 	%r818, %r822, 4;
	// begin inline asm
	lop3.b32 %r865, %r760, %r817, %r818, 202;
	// end inline asm
	shr.u32 	%r821, %r817, 4;
	// begin inline asm
	lop3.b32 %r881, %r760, %r821, %r822, 202;
	// end inline asm
	mov.u32 	%r826, 25152;
	// begin inline asm
	prmt.b32 %r888, %r824, %r825, %r826;
	// end inline asm
	mov.u32 	%r830, 29521;
	// begin inline asm
	prmt.b32 %r920, %r824, %r825, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r832, %r833, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r928, %r832, %r833, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r840, %r841, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r840, %r841, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r848, %r849, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r848, %r849, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r856, %r857, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r936, %r856, %r857, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r864, %r865, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r944, %r864, %r865, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r872, %r873, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r872, %r873, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r880, %r881, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r880, %r881, %r830;
	// end inline asm
	mov.u32 	%r890, 21520;
	// begin inline asm
	prmt.b32 %r887, %r888, %r889, %r890;
	// end inline asm
	mov.u32 	%r894, 30258;
	// begin inline asm
	prmt.b32 %r891, %r888, %r889, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r896, %r897, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r899, %r896, %r897, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r904, %r905, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r904, %r905, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r912, %r913, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r915, %r912, %r913, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r920, %r921, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r923, %r920, %r921, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r928, %r929, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r931, %r928, %r929, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r935, %r936, %r937, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r939, %r936, %r937, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r943, %r944, %r945, %r890;
	// end inline asm
	// begin inline asm
	prmt.b32 %r947, %r944, %r945, %r894;
	// end inline asm
	mul.hi.s16 	%rs69, %rs57, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs57, %rs73;
	cvt.s32.s16 	%r1035, %rs74;
	add.s32 	%r1036, %r93, %r1035;
	mul.wide.s32 	%rd71, %r1036, 4;
	add.s64 	%rd73, %rd46, %rd71;
	st.shared.u32 	[%rd73], %r887;
	add.s32 	%r1037, %r1036, 128;
	mul.wide.u32 	%rd74, %r1037, 4;
	add.s64 	%rd75, %rd46, %rd74;
	st.shared.u32 	[%rd75], %r895;
	add.s32 	%r1038, %r1036, 64;
	mul.wide.u32 	%rd76, %r1038, 4;
	add.s64 	%rd77, %rd46, %rd76;
	st.shared.u32 	[%rd77], %r891;
	add.s32 	%r1039, %r1036, 192;
	mul.wide.u32 	%rd78, %r1039, 4;
	add.s64 	%rd79, %rd46, %rd78;
	st.shared.u32 	[%rd79], %r899;
	add.s32 	%r1040, %r94, %r1035;
	mul.wide.u32 	%rd80, %r1040, 4;
	add.s64 	%rd81, %rd46, %rd80;
	st.shared.u32 	[%rd81], %r903;
	add.s32 	%r1041, %r1040, 128;
	mul.wide.u32 	%rd82, %r1041, 4;
	add.s64 	%rd83, %rd46, %rd82;
	st.shared.u32 	[%rd83], %r911;
	add.s32 	%r1042, %r1040, 64;
	mul.wide.u32 	%rd84, %r1042, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r907;
	add.s32 	%r1043, %r1040, 192;
	mul.wide.u32 	%rd86, %r1043, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r915;
	add.s32 	%r1044, %r1036, 32;
	mul.wide.u32 	%rd88, %r1044, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r919;
	add.s32 	%r1045, %r1036, 160;
	mul.wide.u32 	%rd90, %r1045, 4;
	add.s64 	%rd91, %rd46, %rd90;
	st.shared.u32 	[%rd91], %r927;
	add.s32 	%r1046, %r1036, 96;
	mul.wide.u32 	%rd92, %r1046, 4;
	add.s64 	%rd93, %rd46, %rd92;
	st.shared.u32 	[%rd93], %r923;
	add.s32 	%r1047, %r1036, 224;
	mul.wide.u32 	%rd94, %r1047, 4;
	add.s64 	%rd95, %rd46, %rd94;
	st.shared.u32 	[%rd95], %r931;
	add.s32 	%r1048, %r1040, 32;
	mul.wide.u32 	%rd96, %r1048, 4;
	add.s64 	%rd97, %rd46, %rd96;
	st.shared.u32 	[%rd97], %r935;
	add.s32 	%r1049, %r1040, 160;
	mul.wide.u32 	%rd98, %r1049, 4;
	add.s64 	%rd99, %rd46, %rd98;
	st.shared.u32 	[%rd99], %r943;
	add.s32 	%r1050, %r1040, 96;
	mul.wide.u32 	%rd100, %r1050, 4;
	add.s64 	%rd101, %rd46, %rd100;
	st.shared.u32 	[%rd101], %r939;
	add.s32 	%r1051, %r1040, 224;
	mul.wide.u32 	%rd102, %r1051, 4;
	add.s64 	%rd103, %rd46, %rd102;
	st.shared.u32 	[%rd103], %r947;
	bar.sync 	0;
	add.s32 	%r1052, %r258, %r95;
	cvt.u16.u32 	%rs75, %r1052;
	mul.hi.s16 	%rs76, %rs75, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs75, %rs80;
	cvt.s32.s16 	%r259, %rs81;
	add.s32 	%r1053, %r96, %r259;
	mul.wide.s32 	%rd104, %r1053, 4;
	add.s64 	%rd105, %rd46, %rd104;
	ld.shared.u32 	%r260, [%rd105];
	add.s32 	%r1054, %r97, %r259;
	mul.wide.u32 	%rd106, %r1054, 4;
	add.s64 	%rd107, %rd46, %rd106;
	ld.shared.u32 	%r261, [%rd107];
	add.s32 	%r1055, %r98, %r259;
	mul.wide.u32 	%rd108, %r1055, 4;
	add.s64 	%rd109, %rd46, %rd108;
	ld.shared.u32 	%r262, [%rd109];
	add.s32 	%r1056, %r99, %r259;
	mul.wide.u32 	%rd110, %r1056, 4;
	add.s64 	%rd111, %rd46, %rd110;
	ld.shared.u32 	%r263, [%rd111];
	add.s32 	%r1057, %r100, %r259;
	mul.wide.u32 	%rd112, %r1057, 4;
	add.s64 	%rd113, %rd46, %rd112;
	ld.shared.u32 	%r264, [%rd113];
	add.s32 	%r1058, %r101, %r259;
	mul.wide.u32 	%rd114, %r1058, 4;
	add.s64 	%rd115, %rd46, %rd114;
	ld.shared.u32 	%r265, [%rd115];
	add.s32 	%r1059, %r102, %r259;
	mul.wide.u32 	%rd116, %r1059, 4;
	add.s64 	%rd117, %rd46, %rd116;
	ld.shared.u32 	%r266, [%rd117];
	add.s32 	%r1060, %r103, %r259;
	mul.wide.u32 	%rd118, %r1060, 4;
	add.s64 	%rd119, %rd46, %rd118;
	ld.shared.u32 	%r267, [%rd119];
	add.s32 	%r1061, %r104, %r259;
	mul.wide.u32 	%rd120, %r1061, 4;
	add.s64 	%rd121, %rd46, %rd120;
	ld.shared.u32 	%r268, [%rd121];
	add.s32 	%r1062, %r105, %r259;
	mul.wide.u32 	%rd122, %r1062, 4;
	add.s64 	%rd123, %rd46, %rd122;
	ld.shared.u32 	%r269, [%rd123];
	add.s32 	%r1063, %r106, %r259;
	mul.wide.u32 	%rd124, %r1063, 4;
	add.s64 	%rd125, %rd46, %rd124;
	ld.shared.u32 	%r270, [%rd125];
	add.s32 	%r1064, %r107, %r259;
	mul.wide.u32 	%rd126, %r1064, 4;
	add.s64 	%rd127, %rd46, %rd126;
	ld.shared.u32 	%r271, [%rd127];
	add.s32 	%r1065, %r108, %r259;
	mul.wide.u32 	%rd128, %r1065, 4;
	add.s64 	%rd129, %rd46, %rd128;
	ld.shared.u32 	%r272, [%rd129];
	add.s32 	%r1066, %r109, %r259;
	mul.wide.u32 	%rd130, %r1066, 4;
	add.s64 	%rd131, %rd46, %rd130;
	ld.shared.u32 	%r273, [%rd131];
	add.s32 	%r1067, %r110, %r259;
	mul.wide.u32 	%rd132, %r1067, 4;
	add.s64 	%rd133, %rd46, %rd132;
	ld.shared.u32 	%r274, [%rd133];
	add.s32 	%r1068, %r111, %r259;
	mul.wide.u32 	%rd134, %r1068, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r275, [%rd135];
	add.s32 	%r1069, %r112, %r259;
	mul.wide.u32 	%rd136, %r1069, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r276, [%rd137];
	add.s32 	%r1070, %r113, %r259;
	mul.wide.u32 	%rd138, %r1070, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r277, [%rd139];
	add.s32 	%r1071, %r114, %r259;
	mul.wide.u32 	%rd140, %r1071, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r278, [%rd141];
	add.s32 	%r1072, %r115, %r259;
	mul.wide.u32 	%rd142, %r1072, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r279, [%rd143];
	add.s32 	%r1073, %r116, %r259;
	mul.wide.u32 	%rd144, %r1073, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r280, [%rd145];
	add.s32 	%r1074, %r117, %r259;
	mul.wide.s32 	%rd146, %r1074, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r281, [%rd147];
	bar.sync 	0;
	shfl.sync.idx.b32	%r282, %r252, 0, 31, -1;
	shfl.sync.idx.b32	%r283, %r252, 1, 31, -1;
	shfl.sync.idx.b32	%r284, %r252, 2, 31, -1;
	shfl.sync.idx.b32	%r285, %r252, 3, 31, -1;
	shfl.sync.idx.b32	%r286, %r252, 4, 31, -1;
	shfl.sync.idx.b32	%r287, %r252, 5, 31, -1;
	shfl.sync.idx.b32	%r288, %r252, 6, 31, -1;
	shfl.sync.idx.b32	%r289, %r252, 7, 31, -1;
	shfl.sync.idx.b32	%r290, %r252, 8, 31, -1;
	shfl.sync.idx.b32	%r291, %r252, 9, 31, -1;
	shfl.sync.idx.b32	%r292, %r252, 10, 31, -1;
	shfl.sync.idx.b32	%r293, %r252, 11, 31, -1;
	shfl.sync.idx.b32	%r294, %r252, 12, 31, -1;
	shfl.sync.idx.b32	%r295, %r252, 13, 31, -1;
	shfl.sync.idx.b32	%r296, %r252, 14, 31, -1;
	shfl.sync.idx.b32	%r297, %r252, 15, 31, -1;
	shfl.sync.idx.b32	%r298, %r252, 16, 31, -1;
	shfl.sync.idx.b32	%r299, %r252, 17, 31, -1;
	shfl.sync.idx.b32	%r300, %r252, 18, 31, -1;
	shfl.sync.idx.b32	%r301, %r252, 19, 31, -1;
	shfl.sync.idx.b32	%r302, %r252, 20, 31, -1;
	shfl.sync.idx.b32	%r303, %r252, 21, 31, -1;
	shfl.sync.idx.b32	%r304, %r252, 22, 31, -1;
	shfl.sync.idx.b32	%r305, %r252, 23, 31, -1;
	setp.eq.s32 	%p251, %r282, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.232:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1075, %r282, %r259;
	mul.wide.s32 	%rd148, %r1075, 4;
	add.s64 	%rd150, %rd46, %rd148;
	st.shared.u32 	[%rd150], %r260;
	setp.eq.s32 	%p252, %r283, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.233:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1076, %r283, %r259;
	mul.wide.s32 	%rd151, %r1076, 4;
	add.s64 	%rd153, %rd46, %rd151;
	st.shared.u32 	[%rd153], %r261;
	setp.eq.s32 	%p253, %r284, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.234:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1077, %r284, %r259;
	mul.wide.s32 	%rd154, %r1077, 4;
	add.s64 	%rd156, %rd46, %rd154;
	st.shared.u32 	[%rd156], %r262;
	setp.eq.s32 	%p254, %r285, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.235:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1078, %r285, %r259;
	mul.wide.s32 	%rd157, %r1078, 4;
	add.s64 	%rd159, %rd46, %rd157;
	st.shared.u32 	[%rd159], %r263;
	setp.eq.s32 	%p255, %r286, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.236:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1079, %r286, %r259;
	mul.wide.s32 	%rd160, %r1079, 4;
	add.s64 	%rd162, %rd46, %rd160;
	st.shared.u32 	[%rd162], %r264;
	setp.eq.s32 	%p256, %r287, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.237:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1080, %r287, %r259;
	mul.wide.s32 	%rd163, %r1080, 4;
	add.s64 	%rd165, %rd46, %rd163;
	st.shared.u32 	[%rd165], %r265;
	setp.eq.s32 	%p257, %r288, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.238:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1081, %r288, %r259;
	mul.wide.s32 	%rd166, %r1081, 4;
	add.s64 	%rd168, %rd46, %rd166;
	st.shared.u32 	[%rd168], %r266;
	setp.eq.s32 	%p258, %r289, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.239:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1082, %r289, %r259;
	mul.wide.s32 	%rd169, %r1082, 4;
	add.s64 	%rd171, %rd46, %rd169;
	st.shared.u32 	[%rd171], %r267;
	setp.eq.s32 	%p259, %r290, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.240:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1083, %r290, %r259;
	mul.wide.s32 	%rd172, %r1083, 4;
	add.s64 	%rd174, %rd46, %rd172;
	st.shared.u32 	[%rd174], %r268;
	setp.eq.s32 	%p260, %r291, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.241:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1084, %r291, %r259;
	mul.wide.s32 	%rd175, %r1084, 4;
	add.s64 	%rd177, %rd46, %rd175;
	st.shared.u32 	[%rd177], %r269;
	setp.eq.s32 	%p261, %r292, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.242:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1085, %r292, %r259;
	mul.wide.s32 	%rd178, %r1085, 4;
	add.s64 	%rd180, %rd46, %rd178;
	st.shared.u32 	[%rd180], %r270;
	setp.eq.s32 	%p262, %r293, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.243:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1086, %r293, %r259;
	mul.wide.s32 	%rd181, %r1086, 4;
	add.s64 	%rd183, %rd46, %rd181;
	st.shared.u32 	[%rd183], %r271;
	setp.eq.s32 	%p263, %r294, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.244:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1087, %r294, %r259;
	mul.wide.s32 	%rd184, %r1087, 4;
	add.s64 	%rd186, %rd46, %rd184;
	st.shared.u32 	[%rd186], %r272;
	setp.eq.s32 	%p264, %r295, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.245:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1088, %r295, %r259;
	mul.wide.s32 	%rd187, %r1088, 4;
	add.s64 	%rd189, %rd46, %rd187;
	st.shared.u32 	[%rd189], %r273;
	setp.eq.s32 	%p265, %r296, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.246:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1089, %r296, %r259;
	mul.wide.s32 	%rd190, %r1089, 4;
	add.s64 	%rd192, %rd46, %rd190;
	st.shared.u32 	[%rd192], %r274;
	setp.eq.s32 	%p266, %r297, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.247:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1090, %r297, %r259;
	mul.wide.s32 	%rd193, %r1090, 4;
	add.s64 	%rd195, %rd46, %rd193;
	st.shared.u32 	[%rd195], %r275;
	setp.eq.s32 	%p267, %r298, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.248:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1091, %r298, %r259;
	mul.wide.s32 	%rd196, %r1091, 4;
	add.s64 	%rd198, %rd46, %rd196;
	st.shared.u32 	[%rd198], %r276;
	setp.eq.s32 	%p268, %r299, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.249:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1092, %r299, %r259;
	mul.wide.s32 	%rd199, %r1092, 4;
	add.s64 	%rd201, %rd46, %rd199;
	st.shared.u32 	[%rd201], %r277;
	setp.eq.s32 	%p269, %r300, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.250:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1093, %r300, %r259;
	mul.wide.s32 	%rd202, %r1093, 4;
	add.s64 	%rd204, %rd46, %rd202;
	st.shared.u32 	[%rd204], %r278;
	setp.eq.s32 	%p270, %r301, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.251:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1094, %r301, %r259;
	mul.wide.s32 	%rd205, %r1094, 4;
	add.s64 	%rd207, %rd46, %rd205;
	st.shared.u32 	[%rd207], %r279;
	setp.eq.s32 	%p271, %r302, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.252:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1095, %r302, %r259;
	mul.wide.s32 	%rd208, %r1095, 4;
	add.s64 	%rd210, %rd46, %rd208;
	st.shared.u32 	[%rd210], %r280;
	setp.eq.s32 	%p272, %r303, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.253:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1096, 0, %r281, %p273;
	add.s32 	%r1097, %r303, %r259;
	mul.wide.s32 	%rd211, %r1097, 4;
	add.s64 	%rd213, %rd46, %rd211;
	st.shared.u32 	[%rd213], %r1096;
	setp.eq.s32 	%p274, %r304, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.254:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1098, %r304, %r259;
	mul.wide.s32 	%rd214, %r1098, 4;
	add.s64 	%rd216, %rd46, %rd214;
	mov.u32 	%r3676, 0;
	st.shared.u32 	[%rd216], %r3676;
	setp.eq.s32 	%p275, %r305, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.255:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1101, %r305, %r259;
	mul.wide.s32 	%rd217, %r1101, 4;
	add.s64 	%rd219, %rd46, %rd217;
	st.shared.u32 	[%rd219], %r3676;
	bar.sync 	0;
	mov.u32 	%r3677, %r3676;
	mov.u32 	%r3678, %r3676;
	mov.u32 	%r3679, %r3676;
	mov.u32 	%r3680, %r3676;
	mov.u32 	%r3681, %r3676;
	mov.u32 	%r3682, %r3676;
	mov.u32 	%r3683, %r3676;
	mov.u32 	%r3684, %r3676;
	mov.u32 	%r3685, %r3676;
	mov.u32 	%r3686, %r3676;
	mov.u32 	%r3687, %r3676;
	mov.u32 	%r3688, %r3676;
	mov.u32 	%r3689, %r3676;
	mov.u32 	%r3690, %r3676;
	mov.u32 	%r3691, %r3676;
	mov.u32 	%r3692, %r3676;
	mov.u32 	%r3693, %r3676;
	mov.u32 	%r3694, %r3676;
	mov.u32 	%r3695, %r3676;
	mov.u32 	%r3696, %r3676;
	mov.u32 	%r3697, %r3676;
	mov.u32 	%r3698, %r3676;
	mov.u32 	%r3699, %r3676;
	@%p91 bra 	$L__BB0_176;
// %bb.256:                             // %oksrem4959
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs82, %r258;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r1102, %rs88;
	mul.wide.s32 	%rd220, %r1102, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3676, [%rd221];
	ld.shared.u32 	%r3677, [%rd12+4];
	ld.shared.u32 	%r3678, [%rd12+8];
	ld.shared.u32 	%r3679, [%rd12+12];
	ld.shared.u32 	%r3680, [%rd12+16];
	ld.shared.u32 	%r3681, [%rd12+20];
	ld.shared.u32 	%r3682, [%rd12+24];
	ld.shared.u32 	%r3683, [%rd12+28];
	ld.shared.u32 	%r3684, [%rd12+32];
	ld.shared.u32 	%r3685, [%rd12+36];
	ld.shared.u32 	%r3686, [%rd12+40];
	ld.shared.u32 	%r3687, [%rd12+44];
	ld.shared.u32 	%r3688, [%rd12+48];
	ld.shared.u32 	%r3689, [%rd12+52];
	ld.shared.u32 	%r3690, [%rd12+56];
	ld.shared.u32 	%r3691, [%rd12+60];
	add.s16 	%rs89, %rs82, 16;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1103, %rs95;
	mul.wide.s32 	%rd222, %r1103, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3692, [%rd223];
	add.s16 	%rs96, %rs82, 17;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1104, %rs102;
	mul.wide.s32 	%rd224, %r1104, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3693, [%rd225];
	add.s16 	%rs103, %rs82, 18;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1105, %rs109;
	mul.wide.s32 	%rd226, %r1105, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3694, [%rd227];
	add.s16 	%rs110, %rs82, 19;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1106, %rs116;
	mul.wide.s32 	%rd228, %r1106, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3695, [%rd229];
	add.s16 	%rs117, %rs82, 20;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1107, %rs123;
	mul.wide.s32 	%rd230, %r1107, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3696, [%rd231];
	add.s16 	%rs124, %rs82, 21;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1108, %rs130;
	mul.wide.s32 	%rd232, %r1108, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3697, [%rd233];
	add.s16 	%rs131, %rs82, 22;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1109, %rs137;
	mul.wide.s32 	%rd234, %r1109, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3698, [%rd235];
	add.s16 	%rs138, %rs82, 23;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1110, %rs144;
	mul.wide.s32 	%rd236, %r1110, 4;
	add.s64 	%rd237, %rd12, %rd236;
	ld.shared.u32 	%r3699, [%rd237];
$L__BB0_176:                            // %L14042
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3700, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_187:                            // %L20282
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3702, %r3702, 1;
	mov.u32 	%r3701, 0;
	mov.u32 	%r3703, %r3701;
	mov.u32 	%r3704, %r3701;
$L__BB0_188:                            // %L20283
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3700, %r3700, -4;
	setp.ne.s32 	%p303, %r3700, -12;
	@%p303 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_189;
$L__BB0_177:                            // %L14068
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3700, 12;
	selp.b32 	%r1649, %r3676, 0, %p278;
	setp.eq.s32 	%p279, %r3700, 8;
	selp.b32 	%r1650, %r3680, %r1649, %p279;
	setp.eq.s32 	%p280, %r3700, 4;
	selp.b32 	%r1651, %r3684, %r1650, %p280;
	setp.eq.s32 	%p281, %r3700, 0;
	selp.b32 	%r1652, %r3688, %r1651, %p281;
	setp.eq.s32 	%p282, %r3700, -4;
	selp.b32 	%r1653, %r3692, %r1652, %p282;
	setp.eq.s32 	%p283, %r3700, -8;
	selp.b32 	%r1654, %r3696, %r1653, %p283;
	selp.b32 	%r1655, %r3677, 0, %p278;
	selp.b32 	%r1656, %r3681, %r1655, %p279;
	selp.b32 	%r1657, %r3685, %r1656, %p280;
	selp.b32 	%r1658, %r3689, %r1657, %p281;
	selp.b32 	%r1659, %r3693, %r1658, %p282;
	selp.b32 	%r1660, %r3697, %r1659, %p283;
	selp.b32 	%r1661, %r3678, 0, %p278;
	selp.b32 	%r1662, %r3682, %r1661, %p279;
	selp.b32 	%r1663, %r3686, %r1662, %p280;
	selp.b32 	%r1664, %r3690, %r1663, %p281;
	selp.b32 	%r1665, %r3694, %r1664, %p282;
	selp.b32 	%r1666, %r3698, %r1665, %p283;
	selp.b32 	%r1667, %r3679, 0, %p278;
	selp.b32 	%r1668, %r3683, %r1667, %p279;
	selp.b32 	%r1669, %r3687, %r1668, %p280;
	selp.b32 	%r1670, %r3691, %r1669, %p281;
	selp.b32 	%r1671, %r3695, %r1670, %p282;
	selp.b32 	%r1672, %r3699, %r1671, %p283;
	mov.u16 	%rs182, 25600;
	// begin inline asm
	mov.b32 %r1117, {%rs182, %rs182};
	// end inline asm
	mov.u16 	%rs184, 21504;
	// begin inline asm
	mov.b32 %r1128, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1116, %r1654, -2004318072;
	mov.u32 	%r1253, 983055;
	// begin inline asm
	lop3.b32 %r1114, %r1253, %r1116, %r1117, 202;
	// end inline asm
	mov.u16 	%rs188, 18432;
	// begin inline asm
	mov.b32 %r1118, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1117, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	mov.u32 	%r1264, 15728880;
	// begin inline asm
	lop3.b32 %r1125, %r1264, %r1116, %r1128, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1129, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1130, %r1128, %r1129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1133, %r1125, %r1130;
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1174, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1162, %r1660, -2004318072;
	// begin inline asm
	lop3.b32 %r1160, %r1253, %r1162, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1165, %r1163, %r1164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1168, %r1160, %r1165;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1171, %r1264, %r1162, %r1174, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1175, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1176, %r1174, %r1175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1179, %r1171, %r1176;
	// end inline asm
	// begin inline asm
	mov.b32 %r1209, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1208, %r1666, -2004318072;
	// begin inline asm
	lop3.b32 %r1206, %r1253, %r1208, %r1209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1210, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1211, %r1209, %r1210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1214, %r1206, %r1211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1217, %r1264, %r1208, %r1220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1222, %r1220, %r1221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1225, %r1217, %r1222;
	// end inline asm
	// begin inline asm
	mov.b32 %r1255, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r1266, {%rs184, %rs184};
	// end inline asm
	xor.b32  	%r1254, %r1672, -2004318072;
	// begin inline asm
	lop3.b32 %r1252, %r1253, %r1254, %r1255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1256, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1257, %r1255, %r1256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1260, %r1252, %r1257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1263, %r1264, %r1254, %r1266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1267, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1268, %r1266, %r1267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1271, %r1263, %r1268;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1122;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1296, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1133;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1168;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1302, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1179;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1305, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1308, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1311, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1314, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1317, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1648, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r402, %r405}, {%r1296}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1392, %r1389}, {%r402, %r405}, {%r1299}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1398}, {%r402, %r405}, {%r1302}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r402, %r405}, {%r1305}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r402, %r405}, {%r1308}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1425}, {%r402, %r405}, {%r1311}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1434}, {%r402, %r405}, {%r1314}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1446, %r1443}, {%r402, %r405}, {%r1317}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r454, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1385, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r454, %r1392, %r1387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r1394, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r454, %r1401, %r1396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r454, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r454, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r1421, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r454, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r1430, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r454, %r1437, %r1432;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1439, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r1439, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r454, %r1446, %r1441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r457, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r454, %r1380, %r1448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r457, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r454, %r1389, %r1455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r457, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r454, %r1398, %r1462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r457, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r454, %r1407, %r1469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r457, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r454, %r1416, %r1476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1483, %r457, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r454, %r1425, %r1483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r457, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r454, %r1434, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r457, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r454, %r1443, %r1497;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1505}, {%r498, %r504, %r501, %r507}, {%r1381, %r1451}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1514, %r1515}, {%r498, %r504, %r501, %r507}, {%r1390, %r1458}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1524, %r1525}, {%r498, %r504, %r501, %r507}, {%r1399, %r1465}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1534, %r1535}, {%r498, %r504, %r501, %r507}, {%r1408, %r1472}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1544, %r1545}, {%r498, %r504, %r501, %r507}, {%r1417, %r1479}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1554, %r1555}, {%r498, %r504, %r501, %r507}, {%r1426, %r1486}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1564, %r1565}, {%r498, %r504, %r501, %r507}, {%r1435, %r1493}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1574, %r1575}, {%r498, %r504, %r501, %r507}, {%r1444, %r1500}, {%r1648, %r1648};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3705, %r1648;
	mov.u32 	%r3706, %r1648;
	mov.u32 	%r3707, %r1648;
	mov.u32 	%r3708, %r1648;
	@%p277 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_178;
$L__BB0_257:                            // %oksrem6461
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3705, [%rd7];
	ld.shared.u32 	%r3706, [%rd8];
	ld.shared.u32 	%r3707, [%rd9];
	ld.shared.u32 	%r3708, [%rd10];
$L__BB0_178:                            // %L15701
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1708, %r1705}, {%r516, %r519}, {%r3705}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1717, %r1714}, {%r516, %r519}, {%r3706}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1726, %r1723}, {%r516, %r519}, {%r3707}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r516, %r519}, {%r3708}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r568, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1710, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1712, %r1710, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r568, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1719, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1719, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r568, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r568, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r571, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r568, %r1705, %r1737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r571, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r568, %r1714, %r1744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r571, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r568, %r1723, %r1751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r571, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r568, %r1732, %r1758;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1809}, {%r612, %r618, %r615, %r621}, {%r1706, %r1740}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1828}, {%r612, %r618, %r615, %r621}, {%r1715, %r1747}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1813, %r1817}, {%r612, %r618, %r615, %r621}, {%r1724, %r1754}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1836}, {%r612, %r618, %r615, %r621}, {%r1733, %r1761}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1806, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1812;
	// end inline asm
	mov.u32 	%r1840, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1840, %r1816, %r3704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r1825, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1828, %r1828, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1835, %r3703;
	// end inline asm
	mov.u32 	%r3709, %r1648;
	mov.u32 	%r3710, %r1648;
	mov.u32 	%r3711, %r1648;
	mov.u32 	%r3712, %r1648;
	@%p277 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_179;
$L__BB0_258:                            // %oksrem7066
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3709, [%rd13];
	ld.shared.u32 	%r3710, [%rd14];
	ld.shared.u32 	%r3711, [%rd15];
	ld.shared.u32 	%r3712, [%rd16];
$L__BB0_179:                            // %L16920
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1879, %r1876}, {%r516, %r519}, {%r3709}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1888, %r1885}, {%r516, %r519}, {%r3710}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r516, %r519}, {%r3711}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1906, %r1903}, {%r516, %r519}, {%r3712}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1872, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1872, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r568, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r1881, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r568, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r568, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1899, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r568, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r571, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r568, %r1876, %r1908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r571, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r568, %r1885, %r1915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r571, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r568, %r1894, %r1922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r571, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r568, %r1903, %r1929;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1977, %r1980}, {%r612, %r618, %r615, %r621}, {%r1877, %r1911}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1996, %r1999}, {%r612, %r618, %r615, %r621}, {%r1886, %r1918}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1984, %r1988}, {%r612, %r618, %r615, %r621}, {%r1895, %r1925}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2003, %r2007}, {%r612, %r618, %r615, %r621}, {%r1904, %r1932}, {%r1648, %r1648};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r1977, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r1980, %r1980, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1984, %r1984, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1988, %r1988, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3758, %r1840, %r1987, %r1820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r1996, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3757, %r1840, %r2006, %r1839;
	// end inline asm
	add.s32 	%r3755, %r3701, 2;
	setp.eq.s32 	%p285, %r3755, 6;
	@%p285 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_183;
$L__BB0_180:                            // %pass7563
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_182;
// %bb.181:                             // %pass7573
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2014, %r3702, 589824;
	add.s32 	%r2015, %r118, %r2014;
	cvt.s64.s32 	%rd238, %r2015;
	add.s64 	%rd239, %rd238, %rd11;
	mul.hi.s64 	%rd240, %rd239, 1024819115206086201;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 25;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p287, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 603979776;
	setp.ne.s64 	%p288, %rd244, %rd239;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd245, -1, 0, %p289;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -603979776;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3758;
	add.s32 	%r2016, %r119, %r2014;
	cvt.s64.s32 	%rd251, %r2016;
	add.s64 	%rd252, %rd251, %rd11;
	mul.hi.s64 	%rd253, %rd252, 1024819115206086201;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 25;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p290, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 603979776;
	setp.ne.s64 	%p291, %rd257, %rd252;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd258, -1, 0, %p292;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -603979776;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r3757;
$L__BB0_182:                            // %L17452
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3702, %r3702, 1;
	mov.u32 	%r3755, 0;
	mov.u32 	%r3757, %r3755;
	mov.u32 	%r3758, %r3755;
$L__BB0_183:                            // %pass7739
                                        //   in Loop: Header=BB0_177 Depth=2
	mov.u32 	%r2018, 0;
	mov.u32 	%r3713, %r2018;
	mov.u32 	%r3714, %r2018;
	mov.u32 	%r3715, %r2018;
	mov.u32 	%r3716, %r2018;
	@%p91 bra 	$L__BB0_184;
// %bb.259:                             // %oksrem7841
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3713, [%rd17];
	ld.shared.u32 	%r3714, [%rd18];
	ld.shared.u32 	%r3715, [%rd19];
	ld.shared.u32 	%r3716, [%rd20];
$L__BB0_184:                            // %L18531
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2054, %r2051}, {%r516, %r519}, {%r3713}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2063, %r2060}, {%r516, %r519}, {%r3714}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2072, %r2069}, {%r516, %r519}, {%r3715}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2081, %r2078}, {%r516, %r519}, {%r3716}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2047, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r2047, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r568, %r2054, %r2049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2056, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r2056, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r568, %r2063, %r2058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2065, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r2065, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r568, %r2072, %r2067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2074, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r2074, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r568, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r571, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r568, %r2051, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r571, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r568, %r2060, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r571, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r568, %r2069, %r2097;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r571, %r2081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r568, %r2078, %r2104;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2155}, {%r612, %r618, %r615, %r621}, {%r2052, %r2086}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2171, %r2174}, {%r612, %r618, %r615, %r621}, {%r2061, %r2093}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2159, %r2163}, {%r612, %r618, %r615, %r621}, {%r2070, %r2100}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2178, %r2182}, {%r612, %r618, %r615, %r621}, {%r2079, %r2107}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r2152, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r2155, %r2155, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r2159, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r2163, %r2163, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r1840, %r2162, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2171, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r2174, %r2174, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r2178, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r2182, %r2182, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r1840, %r2181, %r3757;
	// end inline asm
	mov.u32 	%r3717, %r2018;
	mov.u32 	%r3718, %r2018;
	mov.u32 	%r3719, %r2018;
	mov.u32 	%r3720, %r2018;
	@%p277 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_185;
$L__BB0_260:                            // %oksrem8446
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3717, [%rd21];
	ld.shared.u32 	%r3718, [%rd22];
	ld.shared.u32 	%r3719, [%rd23];
	ld.shared.u32 	%r3720, [%rd24];
$L__BB0_185:                            // %L19750
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r516, %r519}, {%r3717}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r516, %r519}, {%r3718}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r516, %r519}, {%r3719}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2252, %r2249}, {%r516, %r519}, {%r3720}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r568, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r568, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r568, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2245, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r2245, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r568, %r2252, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r571, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r568, %r2222, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r571, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r568, %r2231, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r571, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r568, %r2240, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r571, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r568, %r2249, %r2275;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2326}, {%r612, %r618, %r615, %r621}, {%r2223, %r2257}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2342, %r2345}, {%r612, %r618, %r615, %r621}, {%r2232, %r2264}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2330, %r2334}, {%r612, %r618, %r615, %r621}, {%r2241, %r2271}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2349, %r2353}, {%r612, %r618, %r615, %r621}, {%r2250, %r2278}, {%r2018, %r2018};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2322, %r2323, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r2326, %r2326, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r2330, %r2330, %r2325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r2334, %r2334, %r2329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3704, %r1840, %r2333, %r2166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2341, %r2342, %r2342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2344, %r2345, %r2345, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r2349, %r2349, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2352, %r2353, %r2353, %r2348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3703, %r1840, %r2352, %r2185;
	// end inline asm
	add.s32 	%r3701, %r3755, 2;
	setp.eq.s32 	%p295, %r3701, 6;
	@%p295 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_188;
$L__BB0_186:                            // %pass8943
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p91 bra 	$L__BB0_187;
// %bb.261:                             // %pass8953
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2360, %r3702, 589824;
	add.s32 	%r2361, %r118, %r2360;
	cvt.s64.s32 	%rd264, %r2361;
	add.s64 	%rd265, %rd264, %rd11;
	mul.hi.s64 	%rd266, %rd265, 1024819115206086201;
	shr.u64 	%rd267, %rd266, 63;
	shr.s64 	%rd268, %rd266, 25;
	add.s64 	%rd269, %rd268, %rd267;
	setp.lt.s64 	%p297, %rd265, 0;
	mul.lo.s64 	%rd270, %rd269, 603979776;
	setp.ne.s64 	%p298, %rd270, %rd265;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd271, -1, 0, %p299;
	add.s64 	%rd272, %rd269, %rd271;
	mul.lo.s64 	%rd273, %rd272, -603979776;
	add.s64 	%rd274, %rd273, %rd265;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd4, %rd275;
	st.global.u32 	[%rd276], %r3704;
	add.s32 	%r2362, %r119, %r2360;
	cvt.s64.s32 	%rd277, %r2362;
	add.s64 	%rd278, %rd277, %rd11;
	mul.hi.s64 	%rd279, %rd278, 1024819115206086201;
	shr.u64 	%rd280, %rd279, 63;
	shr.s64 	%rd281, %rd279, 25;
	add.s64 	%rd282, %rd281, %rd280;
	setp.lt.s64 	%p300, %rd278, 0;
	mul.lo.s64 	%rd283, %rd282, 603979776;
	setp.ne.s64 	%p301, %rd283, %rd278;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd284, -1, 0, %p302;
	add.s64 	%rd285, %rd282, %rd284;
	mul.lo.s64 	%rd286, %rd285, -603979776;
	add.s64 	%rd287, %rd286, %rd278;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3703;
	bra.uni 	$L__BB0_187;
$L__BB0_189:                            // %L20308.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3725, 12;
	bra.uni 	$L__BB0_190;
$L__BB0_200:                            // %L26522
                                        //   in Loop: Header=BB0_190 Depth=2
	add.s32 	%r3702, %r3702, 1;
	mov.u32 	%r3701, 0;
	mov.u32 	%r3703, %r3701;
	mov.u32 	%r3704, %r3701;
$L__BB0_201:                            // %L26523
                                        //   in Loop: Header=BB0_190 Depth=2
	bar.sync 	0;
	add.s32 	%r3725, %r3725, -4;
	setp.ne.s32 	%p330, %r3725, -12;
	@%p330 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_202;
$L__BB0_190:                            // %L20308
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p305, %r3725, 12;
	selp.b32 	%r2902, %r3676, 0, %p305;
	setp.eq.s32 	%p306, %r3725, 8;
	selp.b32 	%r2903, %r3680, %r2902, %p306;
	setp.eq.s32 	%p307, %r3725, 4;
	selp.b32 	%r2904, %r3684, %r2903, %p307;
	setp.eq.s32 	%p308, %r3725, 0;
	selp.b32 	%r2905, %r3688, %r2904, %p308;
	setp.eq.s32 	%p309, %r3725, -4;
	selp.b32 	%r2906, %r3692, %r2905, %p309;
	setp.eq.s32 	%p310, %r3725, -8;
	selp.b32 	%r2907, %r3696, %r2906, %p310;
	selp.b32 	%r2908, %r3677, 0, %p305;
	selp.b32 	%r2909, %r3681, %r2908, %p306;
	selp.b32 	%r2910, %r3685, %r2909, %p307;
	selp.b32 	%r2911, %r3689, %r2910, %p308;
	selp.b32 	%r2912, %r3693, %r2911, %p309;
	selp.b32 	%r2913, %r3697, %r2912, %p310;
	selp.b32 	%r2914, %r3678, 0, %p305;
	selp.b32 	%r2915, %r3682, %r2914, %p306;
	selp.b32 	%r2916, %r3686, %r2915, %p307;
	selp.b32 	%r2917, %r3690, %r2916, %p308;
	selp.b32 	%r2918, %r3694, %r2917, %p309;
	selp.b32 	%r2919, %r3698, %r2918, %p310;
	selp.b32 	%r2920, %r3679, 0, %p305;
	selp.b32 	%r2921, %r3683, %r2920, %p306;
	selp.b32 	%r2922, %r3687, %r2921, %p307;
	selp.b32 	%r2923, %r3691, %r2922, %p308;
	selp.b32 	%r2924, %r3695, %r2923, %p309;
	selp.b32 	%r2925, %r3699, %r2924, %p310;
	// begin inline asm
	mov.b32 %r2392, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2926, %r2907, 8;
	xor.b32  	%r2402, %r2926, 8947848;
	// begin inline asm
	lop3.b32 %r2389, %r1253, %r2402, %r2392, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2392, %r2393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2397, %r2389, %r2394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2400, %r1264, %r2402, %r2403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2403, %r2404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2408, %r2400, %r2405;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2449, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2927, %r2913, 8;
	xor.b32  	%r2448, %r2927, 8947848;
	// begin inline asm
	lop3.b32 %r2435, %r1253, %r2448, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2438, %r2439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2443, %r2435, %r2440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2446, %r1264, %r2448, %r2449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2449, %r2450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2454, %r2446, %r2451;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2495, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2928, %r2919, 8;
	xor.b32  	%r2494, %r2928, 8947848;
	// begin inline asm
	lop3.b32 %r2481, %r1253, %r2494, %r2484, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2484, %r2485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2489, %r2481, %r2486;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2492, %r1264, %r2494, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2497, %r2495, %r2496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2500, %r2492, %r2497;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs184, %rs184};
	// end inline asm
	shr.u32 	%r2929, %r2925, 8;
	xor.b32  	%r2540, %r2929, 8947848;
	// begin inline asm
	lop3.b32 %r2527, %r1253, %r2540, %r2530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2532, %r2530, %r2531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2535, %r2527, %r2532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2538, %r1264, %r2540, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2543, %r2541, %r2542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2546, %r2538, %r2543;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2397;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2408;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2552, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2443;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2555, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2454;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2558, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2489;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2561, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2500;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2564, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2535;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2567, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2546;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2570, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2901, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2636, %r2633}, {%r402, %r405}, {%r2549}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2645, %r2642}, {%r402, %r405}, {%r2552}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2654, %r2651}, {%r402, %r405}, {%r2555}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2663, %r2660}, {%r402, %r405}, {%r2558}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2672, %r2669}, {%r402, %r405}, {%r2561}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2681, %r2678}, {%r402, %r405}, {%r2564}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2690, %r2687}, {%r402, %r405}, {%r2567}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2699, %r2696}, {%r402, %r405}, {%r2570}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2634, %r454, %r2636, %r2631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2643, %r454, %r2645, %r2640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r454, %r2654, %r2649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2661, %r454, %r2663, %r2658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r454, %r2672, %r2667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r454, %r2681, %r2676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r454, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r454, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r457, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r454, %r2633, %r2701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r457, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r454, %r2642, %r2708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r457, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r454, %r2651, %r2715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r457, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r454, %r2660, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r457, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r454, %r2669, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r457, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r454, %r2678, %r2736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r457, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r454, %r2687, %r2743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r457, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r454, %r2696, %r2750;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2757, %r2758}, {%r498, %r504, %r501, %r507}, {%r2634, %r2704}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2767, %r2768}, {%r498, %r504, %r501, %r507}, {%r2643, %r2711}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2778}, {%r498, %r504, %r501, %r507}, {%r2652, %r2718}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2787, %r2788}, {%r498, %r504, %r501, %r507}, {%r2661, %r2725}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2797, %r2798}, {%r498, %r504, %r501, %r507}, {%r2670, %r2732}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2807, %r2808}, {%r498, %r504, %r501, %r507}, {%r2679, %r2739}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2817, %r2818}, {%r498, %r504, %r501, %r507}, {%r2688, %r2746}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2827, %r2828}, {%r498, %r504, %r501, %r507}, {%r2697, %r2753}, {%r2901, %r2901};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3730, %r2901;
	mov.u32 	%r3731, %r2901;
	mov.u32 	%r3732, %r2901;
	mov.u32 	%r3733, %r2901;
	@%p277 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_191;
$L__BB0_262:                            // %oksrem9282
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3733, [%rd7];
	ld.shared.u32 	%r3732, [%rd8];
	ld.shared.u32 	%r3731, [%rd9];
	ld.shared.u32 	%r3730, [%rd10];
$L__BB0_191:                            // %L21941
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r516, %r519}, {%r3733}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2974, %r2971}, {%r516, %r519}, {%r3732}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2983, %r2980}, {%r516, %r519}, {%r3731}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2992, %r2989}, {%r516, %r519}, {%r3730}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r568, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2967, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2967, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r568, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2976, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r2976, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r568, %r2983, %r2978;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2985, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r2985, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r568, %r2992, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r571, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r568, %r2962, %r2994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r571, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r568, %r2971, %r3001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r571, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r568, %r2980, %r3008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r571, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r568, %r2989, %r3015;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3063, %r3066}, {%r612, %r618, %r615, %r621}, {%r2963, %r2997}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3085}, {%r612, %r618, %r615, %r621}, {%r2972, %r3004}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3070, %r3074}, {%r612, %r618, %r615, %r621}, {%r2981, %r3011}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3089, %r3093}, {%r612, %r618, %r615, %r621}, {%r2990, %r3018}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r3063, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r3070, %r3070, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r3074, %r3074, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r1840, %r3073, %r3704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3081, %r3082, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r3093, %r3093, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r1840, %r3092, %r3703;
	// end inline asm
	mov.u32 	%r3734, %r2901;
	mov.u32 	%r3735, %r2901;
	mov.u32 	%r3736, %r2901;
	mov.u32 	%r3737, %r2901;
	@%p277 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_192;
$L__BB0_263:                            // %oksrem9887
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3737, [%rd13];
	ld.shared.u32 	%r3736, [%rd14];
	ld.shared.u32 	%r3735, [%rd15];
	ld.shared.u32 	%r3734, [%rd16];
$L__BB0_192:                            // %L23160
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r516, %r519}, {%r3737}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3145, %r3142}, {%r516, %r519}, {%r3736}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3154, %r3151}, {%r516, %r519}, {%r3735}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3163, %r3160}, {%r516, %r519}, {%r3734}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r568, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3138, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r568, %r3145, %r3140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r3147, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r568, %r3154, %r3149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3158, %r3156, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r568, %r3163, %r3158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r571, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r568, %r3133, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3172, %r571, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r568, %r3142, %r3172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r571, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r568, %r3151, %r3179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r571, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r568, %r3160, %r3186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3237}, {%r612, %r618, %r615, %r621}, {%r3134, %r3168}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3256}, {%r612, %r618, %r615, %r621}, {%r3143, %r3175}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3241, %r3245}, {%r612, %r618, %r615, %r621}, {%r3152, %r3182}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3264}, {%r612, %r618, %r615, %r621}, {%r3161, %r3189}, {%r2901, %r2901};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r3234, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3237, %r3237, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r3241, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r3245, %r3245, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3762, %r1840, %r3244, %r3077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r3253, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r3264, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r1840, %r3263, %r3096;
	// end inline asm
	add.s32 	%r3759, %r3701, 2;
	setp.eq.s32 	%p312, %r3759, 6;
	@%p312 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_196;
$L__BB0_193:                            // %pass10384
                                        //   in Loop: Header=BB0_190 Depth=2
	@%p91 bra 	$L__BB0_195;
// %bb.194:                             // %pass10394
                                        //   in Loop: Header=BB0_190 Depth=2
	mul.lo.s32 	%r3271, %r3702, 589824;
	add.s32 	%r3272, %r118, %r3271;
	cvt.s64.s32 	%rd290, %r3272;
	add.s64 	%rd291, %rd290, %rd11;
	mul.hi.s64 	%rd292, %rd291, 1024819115206086201;
	shr.u64 	%rd293, %rd292, 63;
	shr.s64 	%rd294, %rd292, 25;
	add.s64 	%rd295, %rd294, %rd293;
	setp.lt.s64 	%p314, %rd291, 0;
	mul.lo.s64 	%rd296, %rd295, 603979776;
	setp.ne.s64 	%p315, %rd296, %rd291;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd297, -1, 0, %p316;
	add.s64 	%rd298, %rd295, %rd297;
	mul.lo.s64 	%rd299, %rd298, -603979776;
	add.s64 	%rd300, %rd299, %rd291;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r3762;
	add.s32 	%r3273, %r119, %r3271;
	cvt.s64.s32 	%rd303, %r3273;
	add.s64 	%rd304, %rd303, %rd11;
	mul.hi.s64 	%rd305, %rd304, 1024819115206086201;
	shr.u64 	%rd306, %rd305, 63;
	shr.s64 	%rd307, %rd305, 25;
	add.s64 	%rd308, %rd307, %rd306;
	setp.lt.s64 	%p317, %rd304, 0;
	mul.lo.s64 	%rd309, %rd308, 603979776;
	setp.ne.s64 	%p318, %rd309, %rd304;
	and.pred  	%p319, %p317, %p318;
	selp.s64 	%rd310, -1, 0, %p319;
	add.s64 	%rd311, %rd308, %rd310;
	mul.lo.s64 	%rd312, %rd311, -603979776;
	add.s64 	%rd313, %rd312, %rd304;
	shl.b64 	%rd314, %rd313, 2;
	add.s64 	%rd315, %rd4, %rd314;
	st.global.u32 	[%rd315], %r3761;
$L__BB0_195:                            // %L23692
                                        //   in Loop: Header=BB0_190 Depth=2
	add.s32 	%r3702, %r3702, 1;
	mov.u32 	%r3759, 0;
	mov.u32 	%r3761, %r3759;
	mov.u32 	%r3762, %r3759;
$L__BB0_196:                            // %pass10560
                                        //   in Loop: Header=BB0_190 Depth=2
	mov.u32 	%r3275, 0;
	mov.u32 	%r3738, %r3275;
	mov.u32 	%r3739, %r3275;
	mov.u32 	%r3740, %r3275;
	mov.u32 	%r3741, %r3275;
	@%p91 bra 	$L__BB0_197;
// %bb.264:                             // %oksrem10662
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3741, [%rd17];
	ld.shared.u32 	%r3740, [%rd18];
	ld.shared.u32 	%r3739, [%rd19];
	ld.shared.u32 	%r3738, [%rd20];
$L__BB0_197:                            // %L24771
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3311, %r3308}, {%r516, %r519}, {%r3741}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3320, %r3317}, {%r516, %r519}, {%r3740}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3329, %r3326}, {%r516, %r519}, {%r3739}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3338, %r3335}, {%r516, %r519}, {%r3738}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3304, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r3304, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r568, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3313, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r3313, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r568, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3322, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r3322, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r568, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3331, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3333, %r3331, %r3335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3336, %r568, %r3338, %r3333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3340, %r571, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r568, %r3308, %r3340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3347, %r571, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3350, %r568, %r3317, %r3347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3354, %r571, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3357, %r568, %r3326, %r3354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r571, %r3338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r568, %r3335, %r3361;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3409, %r3412}, {%r612, %r618, %r615, %r621}, {%r3309, %r3343}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3428, %r3431}, {%r612, %r618, %r615, %r621}, {%r3318, %r3350}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3416, %r3420}, {%r612, %r618, %r615, %r621}, {%r3327, %r3357}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3435, %r3439}, {%r612, %r618, %r615, %r621}, {%r3336, %r3364}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r3409, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r3412, %r3412, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r3416, %r3416, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r3420, %r3420, %r3415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r1840, %r3419, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3427, %r3428, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r3431, %r3431, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3434, %r3435, %r3435, %r3430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r3439, %r3439, %r3434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3442, %r1840, %r3438, %r3761;
	// end inline asm
	mov.u32 	%r3742, %r3275;
	mov.u32 	%r3743, %r3275;
	mov.u32 	%r3744, %r3275;
	mov.u32 	%r3745, %r3275;
	@%p277 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_198;
$L__BB0_265:                            // %oksrem11267
                                        //   in Loop: Header=BB0_190 Depth=2
	ld.shared.u32 	%r3745, [%rd21];
	ld.shared.u32 	%r3744, [%rd22];
	ld.shared.u32 	%r3743, [%rd23];
	ld.shared.u32 	%r3742, [%rd24];
$L__BB0_198:                            // %L25990
                                        //   in Loop: Header=BB0_190 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3482, %r3479}, {%r516, %r519}, {%r3745}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3491, %r3488}, {%r516, %r519}, {%r3744}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3500, %r3497}, {%r516, %r519}, {%r3743}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3509, %r3506}, {%r516, %r519}, {%r3742}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3475, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3477, %r3475, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r568, %r3482, %r3477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3484, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r3484, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r568, %r3491, %r3486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3493, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r3493, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r568, %r3500, %r3495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3502, %r571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3504, %r3502, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r568, %r3509, %r3504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r571, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r568, %r3479, %r3511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3518, %r571, %r3491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r568, %r3488, %r3518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3525, %r571, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r568, %r3497, %r3525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r571, %r3509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r568, %r3506, %r3532;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3580, %r3583}, {%r612, %r618, %r615, %r621}, {%r3480, %r3514}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3599, %r3602}, {%r612, %r618, %r615, %r621}, {%r3489, %r3521}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3587, %r3591}, {%r612, %r618, %r615, %r621}, {%r3498, %r3528}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3606, %r3610}, {%r612, %r618, %r615, %r621}, {%r3507, %r3535}, {%r3275, %r3275};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3579, %r3580, %r3580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r3583, %r3583, %r3579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r3587, %r3587, %r3582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r3591, %r3591, %r3586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3704, %r1840, %r3590, %r3423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3598, %r3599, %r3599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3601, %r3602, %r3602, %r3598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r3606, %r3606, %r3601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3609, %r3610, %r3610, %r3605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3703, %r1840, %r3609, %r3442;
	// end inline asm
	add.s32 	%r3701, %r3759, 2;
	setp.eq.s32 	%p322, %r3701, 6;
	@%p322 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_201;
$L__BB0_199:                            // %pass11764
                                        //   in Loop: Header=BB0_190 Depth=2
	@%p91 bra 	$L__BB0_200;
// %bb.266:                             // %pass11774
                                        //   in Loop: Header=BB0_190 Depth=2
	mul.lo.s32 	%r3617, %r3702, 589824;
	add.s32 	%r3618, %r118, %r3617;
	cvt.s64.s32 	%rd316, %r3618;
	add.s64 	%rd317, %rd316, %rd11;
	mul.hi.s64 	%rd318, %rd317, 1024819115206086201;
	shr.u64 	%rd319, %rd318, 63;
	shr.s64 	%rd320, %rd318, 25;
	add.s64 	%rd321, %rd320, %rd319;
	setp.lt.s64 	%p324, %rd317, 0;
	mul.lo.s64 	%rd322, %rd321, 603979776;
	setp.ne.s64 	%p325, %rd322, %rd317;
	and.pred  	%p326, %p324, %p325;
	selp.s64 	%rd323, -1, 0, %p326;
	add.s64 	%rd324, %rd321, %rd323;
	mul.lo.s64 	%rd325, %rd324, -603979776;
	add.s64 	%rd326, %rd325, %rd317;
	shl.b64 	%rd327, %rd326, 2;
	add.s64 	%rd328, %rd4, %rd327;
	st.global.u32 	[%rd328], %r3704;
	add.s32 	%r3619, %r119, %r3617;
	cvt.s64.s32 	%rd329, %r3619;
	add.s64 	%rd330, %rd329, %rd11;
	mul.hi.s64 	%rd331, %rd330, 1024819115206086201;
	shr.u64 	%rd332, %rd331, 63;
	shr.s64 	%rd333, %rd331, 25;
	add.s64 	%rd334, %rd333, %rd332;
	setp.lt.s64 	%p327, %rd330, 0;
	mul.lo.s64 	%rd335, %rd334, 603979776;
	setp.ne.s64 	%p328, %rd335, %rd330;
	and.pred  	%p329, %p327, %p328;
	selp.s64 	%rd336, -1, 0, %p329;
	add.s64 	%rd337, %rd334, %rd336;
	mul.lo.s64 	%rd338, %rd337, -603979776;
	add.s64 	%rd339, %rd338, %rd330;
	shl.b64 	%rd340, %rd339, 2;
	add.s64 	%rd341, %rd4, %rd340;
	st.global.u32 	[%rd341], %r3703;
	bra.uni 	$L__BB0_200;
$L__BB0_203:                            // %L26558
	mov.u32 	%r3621, 0;
	st.global.u32 	[%rd6], %r3621;
	ret;
$L__BB0_152:                            // %L7484
	mov.u32 	%r3645, 5;
	st.global.u32 	[%rd6], %r3645;
	mov.u64 	%rd388, exception2251;
	cvta.global.u64 	%rd389, %rd388;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd389;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7644
	mov.u32 	%r3644, 5;
	st.global.u32 	[%rd6], %r3644;
	mov.u64 	%rd386, exception2251;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7804
	mov.u32 	%r3643, 5;
	st.global.u32 	[%rd6], %r3643;
	mov.u64 	%rd384, exception2251;
	cvta.global.u64 	%rd385, %rd384;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd385;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7964
	mov.u32 	%r3642, 5;
	st.global.u32 	[%rd6], %r3642;
	mov.u64 	%rd382, exception2251;
	cvta.global.u64 	%rd383, %rd382;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd383;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8124
	mov.u32 	%r3641, 5;
	st.global.u32 	[%rd6], %r3641;
	mov.u64 	%rd380, exception2251;
	cvta.global.u64 	%rd381, %rd380;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd381;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8284
	mov.u32 	%r3640, 5;
	st.global.u32 	[%rd6], %r3640;
	mov.u64 	%rd378, exception2251;
	cvta.global.u64 	%rd379, %rd378;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd379;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8444
	mov.u32 	%r3639, 5;
	st.global.u32 	[%rd6], %r3639;
	mov.u64 	%rd376, exception2251;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8604
	mov.u32 	%r3638, 5;
	st.global.u32 	[%rd6], %r3638;
	mov.u64 	%rd374, exception2251;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8764
	mov.u32 	%r3637, 5;
	st.global.u32 	[%rd6], %r3637;
	mov.u64 	%rd372, exception2251;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8924
	mov.u32 	%r3636, 5;
	st.global.u32 	[%rd6], %r3636;
	mov.u64 	%rd370, exception2251;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9084
	mov.u32 	%r3635, 5;
	st.global.u32 	[%rd6], %r3635;
	mov.u64 	%rd368, exception2251;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9244
	mov.u32 	%r3634, 5;
	st.global.u32 	[%rd6], %r3634;
	mov.u64 	%rd366, exception2251;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9404
	mov.u32 	%r3633, 5;
	st.global.u32 	[%rd6], %r3633;
	mov.u64 	%rd364, exception2251;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9564
	mov.u32 	%r3632, 5;
	st.global.u32 	[%rd6], %r3632;
	mov.u64 	%rd362, exception2251;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9724
	mov.u32 	%r3631, 5;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd360, exception2251;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9884
	mov.u32 	%r3630, 5;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd358, exception2251;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10044
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd356, exception2251;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10204
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd354, exception2251;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10364
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd352, exception2251;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10524
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd350, exception2251;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10684
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd348, exception2251;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10870
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd346, exception2251;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11030
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd344, exception2251;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11190
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd342, exception2251;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3647, 2;
	st.global.u32 	[%rd6], %r3647;
	mov.u64 	%rd392, exception2251;
	cvta.global.u64 	%rd393, %rd392;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd393;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3646, 3;
	st.global.u32 	[%rd6], %r3646;
	mov.u64 	%rd390, exception2251;
	cvta.global.u64 	%rd391, %rd390;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd391;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1149
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r632, [retval0+0];
	} // callseq 61
	mov.u32 	%r634, 4;
	st.global.u32 	[%rd6], %r634;
	mov.u64 	%rd39, exception2251;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r370;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
