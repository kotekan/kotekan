// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2055[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<253>;
	.reg .b16 	%rs<316>;
	.reg .b32 	%r<2643>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<171>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r168, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd42, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r169, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r169, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd59, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd43, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r170, %r4, 9;
	or.b32  	%r171, %r3, %r1;
	or.b32  	%r172, %r171, %r170;
	mul.wide.u32 	%rd65, %r172, 4;
	add.s64 	%rd4, %rd59, %rd65;
	mov.u32 	%r173, 1;
	st.global.u32 	[%rd4], %r173;
	ld.global.u32 	%r5, [%rd43];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd47, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd47];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd51, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd51];
	sub.s32 	%r174, %r6, %r5;
	and.b32  	%r175, %r174, 255;
	setp.ne.s32 	%p6, %r175, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd55, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd55];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 512;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	sub.s32 	%r176, %r8, %r7;
	add.s32 	%r177, %r176, 3;
	and.b32  	%r178, %r177, 7;
	setp.eq.s32 	%p12, %r178, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass158
	bfe.u32 	%r121, %r1, 1, 1;
	and.b32  	%r122, %r1, 1;
	bfe.u32 	%r123, %r1, 2, 1;
	shl.b32 	%r184, %r123, 1;
	shl.b32 	%r185, %r122, 2;
	shl.b32 	%r186, %r121, 3;
	or.b32  	%r187, %r185, %r186;
	or.b32  	%r188, %r184, %r187;
	shr.u32 	%r124, %r1, 4;
	or.b32  	%r125, %r124, %r188;
	or.b32  	%r126, %r125, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f160, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r125;
	sub.f32 	%f187, %f186, %f160;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f162, %f187, %f216;
	setp.ne.f32 	%p18, %f162, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L549
	sin.approx.f32 	%f217, %f162;
	div.approx.f32 	%f889, %f217, %f162;
$L__BB0_10:                             // %L552
	cvt.rn.f32.s32 	%f220, %r126;
	sub.f32 	%f221, %f220, %f160;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L569
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f890, %f251, %f5;
$L__BB0_12:                             // %L572
	or.b32  	%r206, %r125, 32;
	or.b32  	%r10, %r125, 48;
	cvt.rn.f32.s32 	%f255, %r206;
	sub.f32 	%f256, %f255, %f160;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L651
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f891, %f286, %f9;
$L__BB0_14:                             // %L654
	cvt.rn.f32.s32 	%f289, %r10;
	sub.f32 	%f290, %f289, %f160;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L671
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f892, %f320, %f14;
$L__BB0_16:                             // %L674
	or.b32  	%r224, %r125, 64;
	or.b32  	%r12, %r125, 80;
	cvt.rn.f32.s32 	%f324, %r224;
	sub.f32 	%f325, %f324, %f160;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L753
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f893, %f355, %f18;
$L__BB0_18:                             // %L756
	cvt.rn.f32.s32 	%f358, %r12;
	sub.f32 	%f359, %f358, %f160;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L773
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f894, %f389, %f23;
$L__BB0_20:                             // %L776
	or.b32  	%r242, %r125, 96;
	or.b32  	%r14, %r125, 112;
	cvt.rn.f32.s32 	%f393, %r242;
	sub.f32 	%f394, %f393, %f160;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L855
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f895, %f424, %f27;
$L__BB0_22:                             // %L858
	cvt.rn.f32.s32 	%f427, %r14;
	sub.f32 	%f428, %f427, %f160;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L875
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f896, %f458, %f32;
$L__BB0_24:                             // %L878
	mul.lo.s32 	%r16, %r125, 31;
	cvt.rn.f32.s32 	%f461, %r16;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f899, %f35;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f899;
	and.b32  	%r260, %r18, 8388607;
	or.b32  	%r2611, %r260, 1065353216;
	mov.b32 	%f898, %r2611;
	add.s32 	%r261, %r18, -1073741824;
	and.b32  	%r2612, %r261, -8388608;
	setp.eq.s32 	%p68, %r2612, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r262, %r2612, 192937984;
	add.s32 	%r263, %r2611, %r262;
	mov.b32 	%f473, %r263;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2612, %r2612, %r262;
	mov.b32 	%r2611, %f898;
	setp.ne.s32 	%p69, %r2612, 0;
	setp.ne.s32 	%p70, %r2611, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f38, %f897, 0fC0000000, %f899;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r264, %f35;
	and.b32  	%r265, %r264, -2147483648;
	mov.b32 	%r266, %f899;
	or.b32  	%r267, %r265, %r266;
	mov.b32 	%f899, %r267;
$L__BB0_38:                             // %__nv_fmodf.exit
	add.s32 	%r276, %r16, 496;
	cvt.rn.f32.s32 	%f513, %r276;
	div.approx.f32 	%f54, %f513, %f216;
	abs.f32 	%f903, %f54;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f903;
	and.b32  	%r277, %r26, 8388607;
	or.b32  	%r2613, %r277, 1065353216;
	mov.b32 	%f902, %r2613;
	add.s32 	%r278, %r26, -1073741824;
	and.b32  	%r2614, %r278, -8388608;
	setp.eq.s32 	%p88, %r2614, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i623.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i623
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r2614, 192937984;
	add.s32 	%r280, %r2613, %r279;
	mov.b32 	%f525, %r280;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2614, %r2614, %r279;
	mov.b32 	%r2613, %f902;
	setp.ne.s32 	%p89, %r2614, 0;
	setp.ne.s32 	%p90, %r2613, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i625
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i602
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f57, %f901, 0fC0000000, %f903;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i606
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i609
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i628
	shr.u32 	%r120, %r1, 1;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r281, %f54;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f903;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f903, %r284;
$L__BB0_52:                             // %__nv_fmodf.exit629
	shr.u32 	%r35, %r1, 3;
	and.b32  	%r299, %r35, 2;
	or.b32  	%r36, %r123, %r299;
	and.b32  	%r300, %r120, 4;
	or.b32  	%r37, %r36, %r300;
	and.b32  	%r301, %r1, 3;
	mul.lo.s32 	%r302, %r301, %r37;
	shl.b32 	%r303, %r302, 1;
	neg.s32 	%r304, %r303;
	cvt.rn.f32.s32 	%f567, %r304;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f71, %f567, %f568;
	abs.f32 	%f907, %f71;
	setp.lt.f32 	%p101, %f907, 0f40000000;
	@%p101 bra 	$L__BB0_64;
// %bb.53:
	setp.gtu.f32 	%p102, %f907, 0f4B800000;
	@%p102 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_54;
$L__BB0_60:
	mov.b32 	%r39, %f907;
	and.b32  	%r305, %r39, 8388607;
	or.b32  	%r2615, %r305, 1065353216;
	mov.b32 	%f906, %r2615;
	add.s32 	%r306, %r39, -1073741824;
	and.b32  	%r2616, %r306, -8388608;
	setp.eq.s32 	%p108, %r2616, 0;
	@%p108 bra 	$L__BB0_63;
// %bb.61:                              // %__nv_fmaf_rn.exit4.i.i.i654.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
$L__BB0_62:                             // %__nv_fmaf_rn.exit4.i.i.i654
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r2616, 192937984;
	add.s32 	%r308, %r2615, %r307;
	mov.b32 	%f579, %r308;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2616, %r2616, %r307;
	mov.b32 	%r2615, %f906;
	setp.ne.s32 	%p109, %r2616, 0;
	setp.ne.s32 	%p110, %r2615, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_62;
$L__BB0_63:                             // %__internal_fmodf_slowpath_mod.exit.i.i656
	setp.gt.u32 	%p112, %r39, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	$L__BB0_64;
$L__BB0_54:                             // %__nv_fast_fdividef.exit.i.i.i633
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f74, %f905, 0fC0000000, %f907;
	mov.b32 	%r38, %f74;
	setp.lt.u32 	%p103, %r38, 1073741824;
	@%p103 bra 	$L__BB0_59;
// %bb.55:
	setp.lt.u32 	%p104, %r38, -2147483647;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p107, %f74, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p107;
	bra.uni 	$L__BB0_59;
$L__BB0_57:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p105, %f74, 0f40800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:                              // %__nv_fmaf_rn.exit.i.i.i637
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p106, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p106;
$L__BB0_59:                             // %__internal_fmodf_fastpath_quot.exit.i.i640
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
$L__BB0_64:                             // %__internal_fmodf_kernel.exit.i659
	shl.b32 	%r116, %r1, 1;
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p113, %f588, 0f7F800000;
	@%p113 bra 	$L__BB0_66;
// %bb.65:
	mov.b32 	%r309, %f71;
	and.b32  	%r310, %r309, -2147483648;
	mov.b32 	%r311, %f907;
	or.b32  	%r312, %r310, %r311;
	mov.b32 	%f907, %r312;
$L__BB0_66:                             // %__nv_fmodf.exit660
	and.b32  	%r321, %r116, 6;
	mov.u32 	%r322, -8;
	sub.s32 	%r323, %r322, %r321;
	mul.lo.s32 	%r324, %r37, %r323;
	cvt.rn.f32.s32 	%f619, %r324;
	div.approx.f32 	%f90, %f619, %f568;
	abs.f32 	%f911, %f90;
	setp.lt.f32 	%p121, %f911, 0f40000000;
	@%p121 bra 	$L__BB0_78;
// %bb.67:
	setp.gtu.f32 	%p122, %f911, 0f4B800000;
	@%p122 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_68;
$L__BB0_74:
	mov.b32 	%r47, %f911;
	and.b32  	%r325, %r47, 8388607;
	or.b32  	%r2617, %r325, 1065353216;
	mov.b32 	%f910, %r2617;
	add.s32 	%r326, %r47, -1073741824;
	and.b32  	%r2618, %r326, -8388608;
	setp.eq.s32 	%p128, %r2618, 0;
	@%p128 bra 	$L__BB0_77;
// %bb.75:                              // %__nv_fmaf_rn.exit4.i.i.i685.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
$L__BB0_76:                             // %__nv_fmaf_rn.exit4.i.i.i685
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r2618, 192937984;
	add.s32 	%r328, %r2617, %r327;
	mov.b32 	%f631, %r328;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2618, %r2618, %r327;
	mov.b32 	%r2617, %f910;
	setp.ne.s32 	%p129, %r2618, 0;
	setp.ne.s32 	%p130, %r2617, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_76;
$L__BB0_77:                             // %__internal_fmodf_slowpath_mod.exit.i.i687
	setp.gt.u32 	%p132, %r47, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	$L__BB0_78;
$L__BB0_68:                             // %__nv_fast_fdividef.exit.i.i.i664
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f93, %f909, 0fC0000000, %f911;
	mov.b32 	%r46, %f93;
	setp.lt.u32 	%p123, %r46, 1073741824;
	@%p123 bra 	$L__BB0_73;
// %bb.69:
	setp.lt.u32 	%p124, %r46, -2147483647;
	@%p124 bra 	$L__BB0_71;
// %bb.70:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p127, %f93, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p127;
	bra.uni 	$L__BB0_73;
$L__BB0_71:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p125, %f93, 0f40800000;
	@%p125 bra 	$L__BB0_73;
// %bb.72:                              // %__nv_fmaf_rn.exit.i.i.i668
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p126, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p126;
$L__BB0_73:                             // %__internal_fmodf_fastpath_quot.exit.i.i671
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
$L__BB0_78:                             // %__internal_fmodf_kernel.exit.i690
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p133, %f640, 0f7F800000;
	@%p133 bra 	$L__BB0_80;
// %bb.79:
	mov.b32 	%r329, %f90;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f911;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f911, %r332;
$L__BB0_80:                             // %__nv_fmodf.exit691
	shl.b32 	%r353, %r121, 1;
	neg.s32 	%r58, %r353;
	mul.lo.s32 	%r59, %r58, %r37;
	cvt.rn.f32.s32 	%f673, %r59;
	div.approx.f32 	%f107, %f673, %f216;
	abs.f32 	%f915, %f107;
	setp.lt.f32 	%p141, %f915, 0f40000000;
	@%p141 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p142, %f915, 0f4B800000;
	@%p142 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r61, %f915;
	and.b32  	%r354, %r61, 8388607;
	or.b32  	%r2619, %r354, 1065353216;
	mov.b32 	%f914, %r2619;
	add.s32 	%r355, %r61, -1073741824;
	and.b32  	%r2620, %r355, -8388608;
	setp.eq.s32 	%p148, %r2620, 0;
	@%p148 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i716.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i716
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r356, %r2620, 192937984;
	add.s32 	%r357, %r2619, %r356;
	mov.b32 	%f685, %r357;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2620, %r2620, %r356;
	mov.b32 	%r2619, %f914;
	setp.ne.s32 	%p149, %r2620, 0;
	setp.ne.s32 	%p150, %r2619, 0;
	and.pred  	%p151, %p149, %p150;
	@%p151 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i718
	setp.gt.u32 	%p152, %r61, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p152;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i695
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f110, %f913, 0fC0000000, %f915;
	mov.b32 	%r60, %f110;
	setp.lt.u32 	%p143, %r60, 1073741824;
	@%p143 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p144, %r60, -2147483647;
	@%p144 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p147, %f110, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p147;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p145, %f110, 0f40800000;
	@%p145 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i699
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p146, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p146;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i702
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i721
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p153, %f694, 0f7F800000;
	@%p153 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r358, %f107;
	and.b32  	%r359, %r358, -2147483648;
	mov.b32 	%r360, %f915;
	or.b32  	%r361, %r359, %r360;
	mov.b32 	%f915, %r361;
$L__BB0_94:                             // %__nv_fmodf.exit722
	shl.b32 	%r370, %r37, 2;
	sub.s32 	%r371, %r59, %r370;
	cvt.rn.f32.s32 	%f725, %r371;
	div.approx.f32 	%f126, %f725, %f216;
	abs.f32 	%f919, %f126;
	setp.lt.f32 	%p161, %f919, 0f40000000;
	@%p161 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p162, %f919, 0f4B800000;
	@%p162 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r69, %f919;
	and.b32  	%r372, %r69, 8388607;
	or.b32  	%r2621, %r372, 1065353216;
	mov.b32 	%f918, %r2621;
	add.s32 	%r373, %r69, -1073741824;
	and.b32  	%r2622, %r373, -8388608;
	setp.eq.s32 	%p168, %r2622, 0;
	@%p168 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i747.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i747
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r2622, 192937984;
	add.s32 	%r375, %r2621, %r374;
	mov.b32 	%f737, %r375;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2622, %r2622, %r374;
	mov.b32 	%r2621, %f918;
	setp.ne.s32 	%p169, %r2622, 0;
	setp.ne.s32 	%p170, %r2621, 0;
	and.pred  	%p171, %p169, %p170;
	@%p171 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i749
	setp.gt.u32 	%p172, %r69, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p172;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i726
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f129, %f917, 0fC0000000, %f919;
	mov.b32 	%r68, %f129;
	setp.lt.u32 	%p163, %r68, 1073741824;
	@%p163 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p164, %r68, -2147483647;
	@%p164 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p167, %f129, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p167;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p165, %f129, 0f40800000;
	@%p165 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i730
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p166, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p166;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i733
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i752
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p173, %f746, 0f7F800000;
	@%p173 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r376, %f126;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f919;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f919, %r379;
$L__BB0_108:                            // %__nv_fmodf.exit753
	mul.lo.s32 	%r79, %r58, %r36;
	cvt.rn.f32.s32 	%f779, %r79;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f143, %f779, %f780;
	abs.f32 	%f927, %f143;
	setp.lt.f32 	%p181, %f927, 0f40000000;
	@%p181 bra 	$L__BB0_141;
// %bb.109:
	setp.gtu.f32 	%p182, %f927, 0f4B800000;
	@%p182 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_110;
$L__BB0_137:
	mov.b32 	%r128, %f927;
	and.b32  	%r394, %r128, 8388607;
	or.b32  	%r2632, %r394, 1065353216;
	mov.b32 	%f926, %r2632;
	add.s32 	%r395, %r128, -1073741824;
	and.b32  	%r2633, %r395, -8388608;
	setp.eq.s32 	%p188, %r2633, 0;
	@%p188 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i809.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i809
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r2633, 192937984;
	add.s32 	%r397, %r2632, %r396;
	mov.b32 	%f791, %r397;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f926, %f791, %f797;
	sub.s32 	%r2633, %r2633, %r396;
	mov.b32 	%r2632, %f926;
	setp.ne.s32 	%p189, %r2633, 0;
	setp.ne.s32 	%p190, %r2632, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i811
	setp.gt.u32 	%p192, %r128, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f799, %f926, 0f34000000;
	mul.f32 	%f927, %f798, %f799;
	bra.uni 	$L__BB0_141;
$L__BB0_110:                            // %__nv_fast_fdividef.exit.i.i.i788
	div.approx.f32 	%f782, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f782;
	fma.rn.f32 	%f164, %f925, 0fC0000000, %f927;
	mov.b32 	%r127, %f164;
	setp.lt.u32 	%p183, %r127, 1073741824;
	@%p183 bra 	$L__BB0_136;
// %bb.111:
	setp.lt.u32 	%p184, %r127, -2147483647;
	@%p184 bra 	$L__BB0_134;
// %bb.112:
	add.f32 	%f787, %f925, 0fBF800000;
	setp.lt.f32 	%p187, %f164, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f925, %f788, %f787, %p187;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p185, %f164, 0f40800000;
	@%p185 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i792
	add.f32 	%f783, %f925, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f164;
	setp.ge.f32 	%p186, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f925, %f786, %f783, %p186;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i795
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i814
	abs.f32 	%f800, %f927;
	setp.gtu.f32 	%p193, %f800, 0f7F800000;
	@%p193 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r398, %f143;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f927;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f927, %r401;
$L__BB0_143:                            // %__nv_fmodf.exit815
	shl.b32 	%r410, %r36, 2;
	sub.s32 	%r411, %r79, %r410;
	cvt.rn.f32.s32 	%f833, %r411;
	div.approx.f32 	%f181, %f833, %f780;
	abs.f32 	%f923, %f181;
	setp.lt.f32 	%p202, %f923, 0f40000000;
	@%p202 bra 	$L__BB0_124;
// %bb.113:
	setp.gtu.f32 	%p203, %f923, 0f4B800000;
	@%p203 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_114;
$L__BB0_120:
	mov.b32 	%r81, %f923;
	and.b32  	%r412, %r81, 8388607;
	or.b32  	%r2623, %r412, 1065353216;
	mov.b32 	%f922, %r2623;
	add.s32 	%r413, %r81, -1073741824;
	and.b32  	%r2624, %r413, -8388608;
	setp.eq.s32 	%p209, %r2624, 0;
	@%p209 bra 	$L__BB0_123;
// %bb.121:                             // %__nv_fmaf_rn.exit4.i.i.i778.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
$L__BB0_122:                            // %__nv_fmaf_rn.exit4.i.i.i778
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r2624, 192937984;
	add.s32 	%r415, %r2623, %r414;
	mov.b32 	%f845, %r415;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f922, %f845, %f851;
	sub.s32 	%r2624, %r2624, %r414;
	mov.b32 	%r2623, %f922;
	setp.ne.s32 	%p210, %r2624, 0;
	setp.ne.s32 	%p211, %r2623, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	$L__BB0_122;
$L__BB0_123:                            // %__internal_fmodf_slowpath_mod.exit.i.i780
	setp.gt.u32 	%p213, %r81, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f853, %f922, 0f34000000;
	mul.f32 	%f923, %f852, %f853;
	bra.uni 	$L__BB0_124;
$L__BB0_114:                            // %__nv_fast_fdividef.exit.i.i.i757
	div.approx.f32 	%f836, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f836;
	fma.rn.f32 	%f146, %f921, 0fC0000000, %f923;
	mov.b32 	%r80, %f146;
	setp.lt.u32 	%p204, %r80, 1073741824;
	@%p204 bra 	$L__BB0_119;
// %bb.115:
	setp.lt.u32 	%p205, %r80, -2147483647;
	@%p205 bra 	$L__BB0_117;
// %bb.116:
	add.f32 	%f841, %f921, 0fBF800000;
	setp.lt.f32 	%p208, %f146, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f921, %f842, %f841, %p208;
	bra.uni 	$L__BB0_119;
$L__BB0_117:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p206, %f146, 0f40800000;
	@%p206 bra 	$L__BB0_119;
// %bb.118:                             // %__nv_fmaf_rn.exit.i.i.i761
	add.f32 	%f837, %f921, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f146;
	setp.ge.f32 	%p207, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f921, %f840, %f837, %p207;
$L__BB0_119:                            // %__internal_fmodf_fastpath_quot.exit.i.i764
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
$L__BB0_124:                            // %__internal_fmodf_kernel.exit.i783
	abs.f32 	%f854, %f923;
	setp.gtu.f32 	%p214, %f854, 0f7F800000;
	@%p214 bra 	$L__BB0_126;
// %bb.125:
	mov.b32 	%r416, %f181;
	and.b32  	%r417, %r416, -2147483648;
	mov.b32 	%r418, %f923;
	or.b32  	%r419, %r417, %r418;
	mov.b32 	%f923, %r419;
$L__BB0_126:                            // %__nv_fmodf.exit784
	setp.le.s32 	%p222, %r6, %r5;
	mov.u32 	%r2609, 0;
	@%p222 bra 	$L__BB0_133;
// %bb.127:                             // %L1595.lr.ph
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	div.approx.f32 	%f223, %f221, %f188;
	div.approx.f32 	%f258, %f256, %f188;
	div.approx.f32 	%f292, %f290, %f188;
	div.approx.f32 	%f327, %f325, %f188;
	div.approx.f32 	%f361, %f359, %f188;
	div.approx.f32 	%f396, %f394, %f188;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f190, %f189;
	abs.f32 	%f224, %f223;
	abs.f32 	%f259, %f258;
	abs.f32 	%f293, %f292;
	abs.f32 	%f328, %f327;
	abs.f32 	%f362, %f361;
	abs.f32 	%f397, %f396;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	selp.f32 	%f226, %f225, %f223, %p19;
	selp.f32 	%f261, %f260, %f258, %p25;
	selp.f32 	%f295, %f294, %f292, %p31;
	selp.f32 	%f330, %f329, %f327, %p37;
	selp.f32 	%f364, %f363, %f361, %p43;
	selp.f32 	%f399, %f398, %f396, %p49;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f589, %f907, %f907;
	add.f32 	%f641, %f911, %f911;
	cvt.u16.u32 	%rs1, %r1;
	add.f32 	%f193, %f192, %f192;
	add.f32 	%f227, %f226, %f226;
	add.f32 	%f262, %f261, %f261;
	add.f32 	%f296, %f295, %f295;
	add.f32 	%f331, %f330, %f330;
	add.f32 	%f365, %f364, %f364;
	add.f32 	%f400, %f399, %f399;
	add.f32 	%f434, %f433, %f433;
	add.f32 	%f483, %f899, %f899;
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r313, %f589;
	mov.b32 	%r345, %f641;
	add.f32 	%f695, %f915, %f915;
	add.f32 	%f747, %f919, %f919;
	shr.u16 	%rs2, %rs1, 8;
	shl.b16 	%rs3, %rs1, 8;
	mov.b32 	%r189, %f193;
	mov.b32 	%r196, %f227;
	mov.b32 	%r207, %f262;
	mov.b32 	%r214, %f296;
	mov.b32 	%r225, %f331;
	mov.b32 	%r232, %f365;
	mov.b32 	%r243, %f400;
	mov.b32 	%r250, %f434;
	mov.b32 	%r268, %f483;
	mov.b32 	%r291, %f535;
	and.b32  	%r314, %r313, -2147483648;
	and.b32  	%r346, %r345, -2147483648;
	mov.b32 	%r362, %f695;
	mov.b32 	%r386, %f747;
	add.f32 	%f801, %f927, %f927;
	or.b16  	%rs4, %rs3, %rs2;
	and.b32  	%r190, %r189, -2147483648;
	and.b32  	%r197, %r196, -2147483648;
	and.b32  	%r208, %r207, -2147483648;
	and.b32  	%r215, %r214, -2147483648;
	and.b32  	%r226, %r225, -2147483648;
	and.b32  	%r233, %r232, -2147483648;
	and.b32  	%r244, %r243, -2147483648;
	and.b32  	%r251, %r250, -2147483648;
	and.b32  	%r269, %r268, -2147483648;
	and.b32  	%r292, %r291, -2147483648;
	or.b32  	%r315, %r314, 1056964608;
	or.b32  	%r347, %r346, 1056964608;
	and.b32  	%r363, %r362, -2147483648;
	and.b32  	%r387, %r386, -2147483648;
	mov.b32 	%r402, %f801;
	shr.u16 	%rs6, %rs4, 4;
	or.b32  	%r191, %r190, 1056964608;
	or.b32  	%r198, %r197, 1056964608;
	or.b32  	%r209, %r208, 1056964608;
	or.b32  	%r216, %r215, 1056964608;
	or.b32  	%r227, %r226, 1056964608;
	or.b32  	%r234, %r233, 1056964608;
	or.b32  	%r245, %r244, 1056964608;
	or.b32  	%r252, %r251, 1056964608;
	or.b32  	%r270, %r269, 1056964608;
	or.b32  	%r293, %r292, 1056964608;
	mov.b32 	%f590, %r315;
	mov.b32 	%f642, %r347;
	or.b32  	%r364, %r363, 1056964608;
	or.b32  	%r388, %r387, 1056964608;
	and.b32  	%r403, %r402, -2147483648;
	shl.b16 	%rs5, %rs4, 4;
	and.b16  	%rs7, %rs6, 3840;
	mov.b32 	%f194, %r191;
	mov.b32 	%f228, %r198;
	mov.b32 	%f263, %r209;
	mov.b32 	%f297, %r216;
	mov.b32 	%f332, %r227;
	mov.b32 	%f366, %r234;
	mov.b32 	%f401, %r245;
	mov.b32 	%f435, %r252;
	mov.b32 	%f484, %r270;
	mov.b32 	%f536, %r293;
	add.f32 	%f591, %f589, %f590;
	abs.f32 	%f593, %f589;
	add.f32 	%f643, %f641, %f642;
	abs.f32 	%f645, %f641;
	mov.b32 	%f696, %r364;
	mov.b32 	%f748, %r388;
	or.b32  	%r404, %r403, 1056964608;
	or.b16  	%rs8, %rs7, %rs5;
	add.f32 	%f195, %f193, %f194;
	abs.f32 	%f197, %f193;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	add.f32 	%f264, %f262, %f263;
	abs.f32 	%f266, %f262;
	add.f32 	%f298, %f296, %f297;
	abs.f32 	%f300, %f296;
	add.f32 	%f333, %f331, %f332;
	abs.f32 	%f335, %f331;
	add.f32 	%f367, %f365, %f366;
	abs.f32 	%f369, %f365;
	add.f32 	%f402, %f400, %f401;
	abs.f32 	%f404, %f400;
	add.f32 	%f436, %f434, %f435;
	abs.f32 	%f438, %f434;
	add.f32 	%f485, %f483, %f484;
	abs.f32 	%f487, %f483;
	add.f32 	%f537, %f535, %f536;
	abs.f32 	%f539, %f535;
	cvt.rzi.f32.f32 	%f592, %f591;
	setp.gt.f32 	%p114, %f593, 0f4B000000;
	cvt.rzi.f32.f32 	%f644, %f643;
	setp.gt.f32 	%p134, %f645, 0f4B000000;
	add.f32 	%f697, %f695, %f696;
	abs.f32 	%f699, %f695;
	add.f32 	%f749, %f747, %f748;
	abs.f32 	%f751, %f747;
	mov.b32 	%f802, %r404;
	and.b16  	%rs9, %rs8, 13107;
	shr.u16 	%rs11, %rs8, 2;
	cvt.rzi.f32.f32 	%f196, %f195;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	cvt.rzi.f32.f32 	%f265, %f264;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	cvt.rzi.f32.f32 	%f299, %f298;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	cvt.rzi.f32.f32 	%f334, %f333;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	cvt.rzi.f32.f32 	%f368, %f367;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	cvt.rzi.f32.f32 	%f403, %f402;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	cvt.rzi.f32.f32 	%f437, %f436;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	cvt.rzi.f32.f32 	%f486, %f485;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	cvt.rzi.f32.f32 	%f538, %f537;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p114;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p115, %f593, 0f3F000000;
	selp.f32 	%f646, %f641, %f644, %p134;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p135, %f645, 0f3F000000;
	cvt.rzi.f32.f32 	%f698, %f697;
	setp.gt.f32 	%p154, %f699, 0f4B000000;
	cvt.rzi.f32.f32 	%f750, %f749;
	setp.gt.f32 	%p174, %f751, 0f4B000000;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	shl.b16 	%rs10, %rs9, 2;
	and.b16  	%rs12, %rs11, 13107;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p115;
	selp.f32 	%f648, %f647, %f646, %p135;
	selp.f32 	%f700, %f695, %f698, %p154;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p155, %f699, 0f3F000000;
	selp.f32 	%f752, %f747, %f750, %p174;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p175, %f751, 0f3F000000;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p195, %f805, 0f4B000000;
	or.b16  	%rs13, %rs12, %rs10;
	selp.f32 	%f200, %f199, %f198, %p15;
	selp.f32 	%f234, %f233, %f232, %p21;
	selp.f32 	%f269, %f268, %f267, %p27;
	selp.f32 	%f303, %f302, %f301, %p33;
	selp.f32 	%f338, %f337, %f336, %p39;
	selp.f32 	%f372, %f371, %f370, %p45;
	selp.f32 	%f407, %f406, %f405, %p51;
	selp.f32 	%f441, %f440, %f439, %p57;
	selp.f32 	%f490, %f489, %f488, %p75;
	selp.f32 	%f542, %f541, %f540, %p95;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	selp.f32 	%f702, %f701, %f700, %p155;
	selp.f32 	%f754, %f753, %f752, %p175;
	selp.f32 	%f806, %f801, %f804, %p195;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p196, %f805, 0f3F000000;
	and.b16  	%rs15, %rs13, 16384;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f598, %f597, %f597;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	selp.f32 	%f808, %f807, %f806, %p196;
	shr.u16 	%rs14, %rs13, 1;
	shl.b16 	%rs16, %rs15, 1;
	mul.f32 	%f202, %f201, %f201;
	mul.f32 	%f236, %f235, %f235;
	mul.f32 	%f271, %f270, %f270;
	mul.f32 	%f305, %f304, %f304;
	mul.f32 	%f340, %f339, %f339;
	mul.f32 	%f374, %f373, %f373;
	mul.f32 	%f409, %f408, %f408;
	mul.f32 	%f443, %f442, %f442;
	mul.f32 	%f492, %f491, %f491;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f704, %f703, %f703;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f927;
	or.b16  	%rs17, %rs14, %rs16;
	cvt.rzi.s32.f32 	%r192, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r199, %f234;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r210, %f269;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r217, %f303;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r228, %f338;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r235, %f372;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r246, %f407;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r253, %f441;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r316, %f596;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	cvt.rzi.s32.f32 	%r348, %f648;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f810, %f809, %f809;
	shr.u16 	%rs18, %rs17, 13;
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	add.s32 	%r211, %r210, 1;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	add.s32 	%r229, %r228, 1;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	add.s32 	%r236, %r235, 1;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	add.s32 	%r247, %r246, 1;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	add.s32 	%r254, %r253, 1;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	cvt.rzi.s32.f32 	%r271, %f490;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	cvt.rzi.s32.f32 	%r294, %f542;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	and.b32  	%r317, %r316, 1;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	and.b32  	%r349, %r348, 1;
	cvt.rzi.s32.f32 	%r365, %f702;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	cvt.rzi.s32.f32 	%r389, %f754;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	and.b16  	%rs19, %rs18, 6;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r212, %r211, 1;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r219, %r218, 1;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	and.b32  	%r230, %r229, 1;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	and.b32  	%r237, %r236, 1;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	and.b32  	%r248, %r247, 1;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	and.b32  	%r295, %r294, 1;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	setp.eq.b32 	%p116, %r317, 1;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	setp.eq.b32 	%p136, %r349, 1;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	and.b32  	%r366, %r365, 1;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	and.b32  	%r390, %r389, 1;
	cvt.rzi.s32.f32 	%r405, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	cvt.u32.u16 	%r179, %rs19;
	shl.b32 	%r115, %r4, 5;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r194, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r201, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r212, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r219, 1;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	setp.eq.b32 	%p40, %r230, 1;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	setp.eq.b32 	%p46, %r237, 1;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	setp.eq.b32 	%p52, %r248, 1;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	setp.eq.b32 	%p58, %r255, 1;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	setp.eq.b32 	%p76, %r272, 1;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	setp.eq.b32 	%p96, %r295, 1;
	selp.f32 	%f608, %f606, %f607, %p116;
	and.b32  	%r318, %r316, 2;
	selp.f32 	%f660, %f658, %f659, %p136;
	and.b32  	%r350, %r348, 2;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	setp.eq.b32 	%p156, %r366, 1;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	setp.eq.b32 	%p176, %r390, 1;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r406, %r405, 1;
	or.b32  	%r180, %r115, %r179;
	and.b32  	%r117, %r116, 8;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r195, %r193, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r202, %r200, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r213, %r211, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r220, %r218, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r231, %r229, 2;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r238, %r236, 2;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r249, %r247, 2;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r256, %r254, 2;
	selp.f32 	%f502, %f500, %f501, %p76;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f554, %f552, %f553, %p96;
	and.b32  	%r296, %r294, 2;
	setp.eq.s32 	%p117, %r318, 0;
	neg.f32 	%f610, %f608;
	add.s32 	%r319, %r316, 1;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.s32 	%p137, %r350, 0;
	neg.f32 	%f662, %f660;
	add.s32 	%r351, %r348, 1;
	cvt.rzi.f32.f32 	%f667, %f911;
	selp.f32 	%f714, %f712, %f713, %p156;
	and.b32  	%r367, %r365, 2;
	selp.f32 	%f766, %f764, %f765, %p176;
	and.b32  	%r391, %r389, 2;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p197, %r406, 1;
	or.b32  	%r181, %r180, %r117;
	and.b32  	%r118, %r1, 16;
	setp.eq.s32 	%p17, %r195, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r202, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r213, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r220, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r231, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r238, 0;
	sub.f32 	%f386, %f213, %f384;
	setp.eq.s32 	%p53, %r249, 0;
	sub.f32 	%f421, %f213, %f419;
	setp.eq.s32 	%p59, %r256, 0;
	sub.f32 	%f455, %f213, %f453;
	setp.eq.s32 	%p77, %r273, 0;
	neg.f32 	%f504, %f502;
	add.s32 	%r274, %r271, 1;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.s32 	%p97, %r296, 0;
	neg.f32 	%f556, %f554;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f561, %f903;
	selp.f32 	%f609, %f607, %f606, %p116;
	selp.f32 	%f611, %f608, %f610, %p117;
	and.b32  	%r320, %r319, 2;
	setp.eq.f32 	%p119, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f661, %f659, %f658, %p136;
	selp.f32 	%f663, %f660, %f662, %p137;
	and.b32  	%r352, %r351, 2;
	setp.eq.f32 	%p139, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	setp.eq.s32 	%p157, %r367, 0;
	neg.f32 	%f716, %f714;
	add.s32 	%r368, %r365, 1;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.s32 	%p177, %r391, 0;
	neg.f32 	%f768, %f766;
	add.s32 	%r392, %r389, 1;
	cvt.rzi.f32.f32 	%f773, %f919;
	selp.f32 	%f820, %f818, %f819, %p197;
	and.b32  	%r407, %r405, 2;
	or.b32  	%r182, %r181, %r118;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	selp.f32 	%f456, %f453, %f455, %p59;
	selp.f32 	%f503, %f501, %f500, %p76;
	selp.f32 	%f505, %f502, %f504, %p77;
	and.b32  	%r275, %r274, 2;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f555, %f553, %f552, %p96;
	selp.f32 	%f557, %f554, %f556, %p97;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	setp.eq.s32 	%p118, %r320, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f88, %f616, %f611, %p119;
	abs.f32 	%f617, %f907;
	setp.eq.s32 	%p138, %r352, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f669, %f668, %f663, %p139;
	abs.f32 	%f670, %f911;
	selp.f32 	%f715, %f713, %f712, %p156;
	selp.f32 	%f717, %f714, %f716, %p157;
	and.b32  	%r369, %r368, 2;
	setp.eq.f32 	%p159, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f767, %f765, %f764, %p176;
	selp.f32 	%f769, %f766, %f768, %p177;
	and.b32  	%r393, %r392, 2;
	setp.eq.f32 	%p179, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	setp.eq.s32 	%p198, %r407, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r408, %r405, 1;
	cvt.rzi.f32.f32 	%f827, %f927;
	shr.u32 	%r183, %r182, 1;
	mul.f32 	%f161, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	setp.eq.s32 	%p78, %r275, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f52, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.eq.s32 	%p98, %r298, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	selp.f32 	%f614, %f609, %f613, %p118;
	setp.gt.f32 	%p120, %f617, 0f4B800000;
	add.f32 	%f618, %f88, 0f3F800000;
	selp.f32 	%f666, %f661, %f665, %p138;
	setp.gt.f32 	%p140, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	setp.eq.s32 	%p158, %r369, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f124, %f722, %f717, %p159;
	abs.f32 	%f723, %f915;
	setp.eq.s32 	%p178, %r393, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f775, %f774, %f769, %p179;
	abs.f32 	%f776, %f919;
	selp.f32 	%f821, %f819, %f818, %p197;
	selp.f32 	%f823, %f820, %f822, %p198;
	and.b32  	%r409, %r408, 2;
	setp.eq.f32 	%p200, %f827, %f927;
	mul.f32 	%f828, %f927, 0f00000000;
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd66, %r183, 4;
	mul.f32 	%f219, %f161, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	selp.f32 	%f508, %f503, %f507, %p78;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f52, 0f3F800000;
	selp.f32 	%f560, %f555, %f559, %p98;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f89, %f618, %f614, %p120;
	selp.f32 	%f672, %f671, %f666, %p140;
	selp.f32 	%f720, %f715, %f719, %p158;
	setp.gt.f32 	%p160, %f723, 0f4B800000;
	add.f32 	%f724, %f124, 0f3F800000;
	selp.f32 	%f772, %f767, %f771, %p178;
	setp.gt.f32 	%p180, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	and.b32  	%r78, %r35, 1;
	setp.eq.s32 	%p199, %r409, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p200;
	abs.f32 	%f830, %f927;
	shl.b32 	%r112, %r1, 2;
	add.s64 	%rd67, %rd1, %rd66;
	mul.f32 	%f3, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f12, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f21, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f30, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	selp.f32 	%f53, %f512, %f508, %p80;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r335, %f672;
	mov.b32 	%r334, %f89;
	mov.b32 	%r341, %f669;
	mov.b32 	%r340, %f88;
	selp.f32 	%f125, %f724, %f720, %p160;
	selp.f32 	%f778, %f777, %f772, %p180;
	setp.eq.s32 	%p194, %r78, %r122;
	selp.f32 	%f826, %f821, %f825, %p199;
	setp.gt.f32 	%p201, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	and.b32  	%r113, %r112, 4;
	and.b32  	%r114, %r1, 2;
	ld.global.u32 	%r119, [%rd67];
	mov.b32 	%r205, %f254;
	mov.b32 	%r204, %f3;
	mov.b32 	%r223, %f323;
	mov.b32 	%r222, %f12;
	mov.b32 	%r241, %f392;
	mov.b32 	%r240, %f21;
	mov.b32 	%r259, %f460;
	mov.b32 	%r258, %f30;
	mov.b32 	%r287, %f566;
	mov.b32 	%r286, %f53;
	mov.b32 	%r290, %f563;
	mov.b32 	%r289, %f52;
	xor.b32  	%r338, %r341, -2147483648;
	xor.b32  	%r337, %r340, -2147483648;
	mov.b32 	%r382, %f778;
	mov.b32 	%r381, %f125;
	mov.b32 	%r385, %f775;
	mov.b32 	%r384, %f124;
	selp.f32 	%f832, %f831, %f826, %p201;
	selp.f32 	%f178, 0f3F800000, 0f00000000, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r203, %r205, %r204;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r221, %r223, %r222;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r239, %r241, %r240;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r289;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r380, %r382, %r381;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r383, %r385, %r384;
	// end inline asm
	mul.f32 	%f179, %f832, %f178;
	mul.f32 	%f180, %f829, %f178;
	add.f32 	%f855, %f923, %f923;
	mov.b32 	%r432, %f855;
	and.b32  	%r433, %r432, -2147483648;
	or.b32  	%r434, %r433, 1056964608;
	mov.b32 	%f856, %r434;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p215, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p215;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p216, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p216;
	cvt.rzi.s32.f32 	%r435, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f923;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r436, %r435, 1;
	setp.eq.b32 	%p217, %r436, 1;
	selp.f32 	%f874, %f872, %f873, %p217;
	selp.f32 	%f875, %f873, %f872, %p217;
	and.b32  	%r437, %r435, 2;
	setp.eq.s32 	%p218, %r437, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p218;
	add.s32 	%r438, %r435, 1;
	and.b32  	%r439, %r438, 2;
	setp.eq.s32 	%p219, %r439, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p219;
	cvt.rzi.f32.f32 	%f881, %f923;
	setp.eq.f32 	%p220, %f881, %f923;
	mul.f32 	%f882, %f923, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p220;
	abs.f32 	%f884, %f923;
	setp.gt.f32 	%p221, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p221;
	mul.f32 	%f887, %f886, %f178;
	mul.f32 	%f888, %f883, %f178;
	mov.b32 	%r422, %f887;
	mov.b32 	%r421, %f179;
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	mov.b32 	%r428, %f888;
	xor.b32  	%r425, %r428, -2147483648;
	mov.b32 	%r427, %f180;
	xor.b32  	%r424, %r427, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r427;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r422, %r421;
	// end inline asm
	shl.b32 	%r441, %r5, 12;
	shl.b32 	%r442, %r4, 10;
	and.b32  	%r443, %r442, 3072;
	and.b32  	%r444, %r112, 12;
	and.b32  	%r445, %r112, 16;
	and.b32  	%r446, %r2, 7;
	shl.b32 	%r447, %r2, 2;
	and.b32  	%r92, %r447, 32;
	or.b32  	%r93, %r446, %r92;
	or.b32  	%r448, %r443, %r444;
	or.b32  	%r449, %r448, %r445;
	and.b32  	%r94, %r116, 16;
	and.b32  	%r95, %r120, 8;
	or.b32  	%r96, %r449, %r441;
	and.b32  	%r97, %r1, 8;
	shl.b32 	%r450, %r1, 4;
	or.b32  	%r451, %r97, %r450;
	shr.u32 	%r452, %r451, 2;
	and.b32  	%r453, %r452, 14;
	or.b32  	%r454, %r453, %r445;
	and.b32  	%r455, %r3, 32;
	or.b32  	%r98, %r124, %r444;
	and.b32  	%r99, %r120, 2;
	shr.u32 	%r456, %r2, 1;
	or.b32  	%r457, %r455, %r456;
	or.b32  	%r100, %r457, %r94;
	or.b32  	%r101, %r100, 8;
	or.b32  	%r458, %r113, %r115;
	or.b32  	%r459, %r458, %r114;
	or.b32  	%r460, %r459, %r117;
	or.b32  	%r461, %r460, %r118;
	bfe.u32 	%r462, %r461, 1, 4;
	mul.lo.s32 	%r463, %r462, 65;
	add.s32 	%r464, %r100, %r463;
	add.s32 	%r465, %r101, %r463;
	shl.b32 	%r466, %r2, 1;
	and.b32  	%r467, %r466, 14;
	shl.b32 	%r468, %r7, 17;
	add.s32 	%r469, %r468, -393216;
	and.b32  	%r470, %r447, 28;
	or.b32  	%r471, %r470, %r115;
	or.b32  	%r472, %r471, %r35;
	shl.b32 	%r473, %r472, 5;
	and.b32  	%r474, %r112, 28;
	or.b32  	%r102, %r474, %r473;
	cvt.s64.s32 	%rd5, %r469;
	shr.u32 	%r475, %r2, 3;
	setp.gt.u32 	%p223, %r1, 15;
	or.b32  	%r476, %r475, 2;
	or.b32  	%r477, %r475, 4;
	or.b32  	%r478, %r475, 6;
	and.b32  	%r479, %r2, 1;
	neg.s32 	%r480, %r479;
	and.b32  	%r481, %r480, 520;
	bfe.s32 	%r482, %r2, 1, 1;
	and.b32  	%r483, %r482, 260;
	mul.lo.s32 	%r484, %r475, 1057;
	selp.b32 	%r485, 65, 0, %p223;
	bfe.s32 	%r486, %r2, 2, 1;
	and.b32  	%r487, %r486, 130;
	add.s32 	%r488, %r481, %r454;
	add.s32 	%r489, %r488, %r483;
	add.s32 	%r490, %r489, %r484;
	add.s32 	%r491, %r490, %r485;
	add.s32 	%r492, %r491, %r487;
	mul.wide.u32 	%rd68, %r492, 4;
	mov.u64 	%rd69, shmem;
	add.s64 	%rd6, %rd69, %rd68;
	add.s32 	%r493, %r489, 32;
	add.s32 	%r494, %r493, %r484;
	add.s32 	%r495, %r494, %r485;
	add.s32 	%r496, %r495, %r487;
	mul.wide.u32 	%rd70, %r496, 4;
	add.s64 	%rd7, %rd69, %rd70;
	or.b32  	%r497, %r489, 1;
	add.s32 	%r498, %r497, %r484;
	add.s32 	%r499, %r498, %r485;
	add.s32 	%r500, %r499, %r487;
	mul.wide.u32 	%rd71, %r500, 4;
	add.s64 	%rd8, %rd69, %rd71;
	add.s32 	%r501, %r489, 33;
	add.s32 	%r502, %r501, %r484;
	add.s32 	%r503, %r502, %r485;
	add.s32 	%r504, %r503, %r487;
	mul.wide.u32 	%rd72, %r504, 4;
	add.s64 	%rd9, %rd69, %rd72;
	mul.lo.s32 	%r505, %r476, 1057;
	mul.lo.s32 	%r506, %r124, 65;
	add.s32 	%r507, %r489, %r505;
	add.s32 	%r508, %r507, %r506;
	add.s32 	%r509, %r508, %r487;
	mul.wide.u32 	%rd73, %r509, 4;
	add.s64 	%rd10, %rd69, %rd73;
	add.s32 	%r510, %r493, %r505;
	add.s32 	%r511, %r510, %r506;
	add.s32 	%r512, %r511, %r487;
	mul.wide.u32 	%rd74, %r512, 4;
	add.s64 	%rd11, %rd69, %rd74;
	add.s32 	%r513, %r497, %r505;
	add.s32 	%r514, %r513, %r506;
	add.s32 	%r515, %r514, %r487;
	mul.wide.u32 	%rd75, %r515, 4;
	add.s64 	%rd12, %rd69, %rd75;
	add.s32 	%r516, %r501, %r505;
	add.s32 	%r517, %r516, %r506;
	add.s32 	%r518, %r517, %r487;
	mul.wide.u32 	%rd76, %r518, 4;
	add.s64 	%rd13, %rd69, %rd76;
	mul.lo.s32 	%r519, %r477, 1057;
	add.s32 	%r520, %r489, %r519;
	add.s32 	%r521, %r520, %r506;
	add.s32 	%r522, %r521, %r487;
	mul.wide.u32 	%rd77, %r522, 4;
	add.s64 	%rd14, %rd69, %rd77;
	add.s32 	%r523, %r493, %r519;
	add.s32 	%r524, %r523, %r506;
	add.s32 	%r525, %r524, %r487;
	mul.wide.u32 	%rd78, %r525, 4;
	add.s64 	%rd15, %rd69, %rd78;
	add.s32 	%r526, %r497, %r519;
	add.s32 	%r527, %r526, %r506;
	add.s32 	%r528, %r527, %r487;
	mul.wide.u32 	%rd79, %r528, 4;
	add.s64 	%rd16, %rd69, %rd79;
	add.s32 	%r529, %r501, %r519;
	add.s32 	%r530, %r529, %r506;
	add.s32 	%r531, %r530, %r487;
	mul.wide.u32 	%rd80, %r531, 4;
	add.s64 	%rd17, %rd69, %rd80;
	mul.lo.s32 	%r532, %r478, 1057;
	add.s32 	%r533, %r489, %r532;
	add.s32 	%r534, %r533, %r506;
	add.s32 	%r535, %r534, %r487;
	mul.wide.u32 	%rd81, %r535, 4;
	add.s64 	%rd18, %rd69, %rd81;
	add.s32 	%r536, %r493, %r532;
	add.s32 	%r537, %r536, %r506;
	add.s32 	%r538, %r537, %r487;
	mul.wide.u32 	%rd82, %r538, 4;
	add.s64 	%rd19, %rd69, %rd82;
	add.s32 	%r539, %r497, %r532;
	add.s32 	%r540, %r539, %r506;
	add.s32 	%r541, %r540, %r487;
	mul.wide.u32 	%rd83, %r541, 4;
	add.s64 	%rd20, %rd69, %rd83;
	add.s32 	%r542, %r501, %r532;
	add.s32 	%r543, %r542, %r506;
	add.s32 	%r544, %r543, %r487;
	mul.wide.u32 	%rd84, %r544, 4;
	add.s64 	%rd21, %rd69, %rd84;
	or.b32  	%r545, %r467, %r124;
	mul.lo.s32 	%r546, %r545, 65;
	add.s32 	%r547, %r454, %r546;
	add.s32 	%r548, %r547, %r484;
	mul.wide.u32 	%rd85, %r548, 4;
	add.s64 	%rd22, %rd69, %rd85;
	cvt.u64.u32 	%rd86, %r484;
	cvt.u64.u32 	%rd87, %r453;
	cvt.u64.u32 	%rd88, %r546;
	cvt.u64.u32 	%rd89, %r445;
	add.s64 	%rd90, %rd89, %rd88;
	add.s64 	%rd91, %rd90, %rd87;
	add.s64 	%rd92, %rd91, %rd86;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd23, %rd69, %rd93;
	cvt.u64.u32 	%rd94, %r454;
	add.s64 	%rd95, %rd94, %rd88;
	add.s64 	%rd96, %rd95, %rd86;
	shl.b64 	%rd97, %rd96, 2;
	add.s64 	%rd24, %rd69, %rd97;
	add.s32 	%r549, %r547, %r505;
	mul.wide.u32 	%rd98, %r549, 4;
	add.s64 	%rd25, %rd69, %rd98;
	cvt.u64.u32 	%rd99, %r505;
	add.s64 	%rd100, %rd91, %rd99;
	shl.b64 	%rd101, %rd100, 2;
	add.s64 	%rd26, %rd69, %rd101;
	add.s64 	%rd102, %rd95, %rd99;
	shl.b64 	%rd103, %rd102, 2;
	add.s64 	%rd27, %rd69, %rd103;
	add.s32 	%r550, %r547, %r519;
	mul.wide.u32 	%rd104, %r550, 4;
	add.s64 	%rd28, %rd69, %rd104;
	cvt.u64.u32 	%rd105, %r519;
	add.s64 	%rd106, %rd91, %rd105;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd29, %rd69, %rd107;
	add.s64 	%rd108, %rd95, %rd105;
	shl.b64 	%rd109, %rd108, 2;
	add.s64 	%rd30, %rd69, %rd109;
	add.s32 	%r551, %r547, %r532;
	mul.wide.u32 	%rd110, %r551, 4;
	add.s64 	%rd31, %rd69, %rd110;
	cvt.u64.u32 	%rd111, %r532;
	add.s64 	%rd112, %rd91, %rd111;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd32, %rd69, %rd113;
	add.s64 	%rd114, %rd95, %rd111;
	shl.b64 	%rd115, %rd114, 2;
	add.s64 	%rd33, %rd69, %rd115;
	mul.wide.u32 	%rd116, %r465, 4;
	add.s64 	%rd34, %rd69, %rd116;
	mul.wide.u32 	%rd117, %r464, 4;
	add.s64 	%rd35, %rd69, %rd117;
	setp.eq.s32 	%p224, %r97, 0;
	mov.u16 	%rs307, 25600;
	mov.u16 	%rs255, 21504;
	mov.u16 	%rs315, 18432;
	mov.u16 	%rs293, -14592;
	setp.gt.u32 	%p238, %r2, 7;
	mov.u32 	%r2625, %r2609;
	mov.u32 	%r2626, %r2609;
	mov.u32 	%r2627, %r2609;
	mov.u32 	%r2628, %r2609;
	mov.u32 	%r2635, %r2609;
	mov.u32 	%r2636, %r2609;
	mov.u32 	%r109, %r2609;
	bra.uni 	$L__BB0_128;
$L__BB0_132:                            // %pass10014
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2603, %r2642, %r102;
	or.b32  	%r2604, %r2603, 524288;
	cvt.s64.s32 	%rd143, %r2604;
	add.s64 	%rd144, %rd143, %rd5;
	shr.u64 	%rd145, %rd144, 39;
	add.s64 	%rd146, %rd144, %rd145;
	shr.s64 	%rd147, %rd146, 25;
	setp.lt.s64 	%p244, %rd144, 0;
	and.b64  	%rd148, %rd146, -33554432;
	setp.ne.s64 	%p245, %rd148, %rd144;
	and.pred  	%p246, %p244, %p245;
	selp.u64 	%rd149, 1, 0, %p246;
	sub.s64 	%rd150, %rd149, %rd147;
	shl.b64 	%rd151, %rd150, 25;
	add.s64 	%rd152, %rd151, %rd144;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd154, %rd3, %rd153;
	st.global.v4.u32 	[%rd154], {%r159, %r161, %r160, %r162};
	or.b32  	%r2605, %r2603, 786432;
	cvt.s64.s32 	%rd155, %r2605;
	add.s64 	%rd156, %rd155, %rd5;
	shr.u64 	%rd157, %rd156, 39;
	add.s64 	%rd158, %rd156, %rd157;
	shr.s64 	%rd159, %rd158, 25;
	setp.lt.s64 	%p247, %rd156, 0;
	and.b64  	%rd160, %rd158, -33554432;
	setp.ne.s64 	%p248, %rd160, %rd156;
	and.pred  	%p249, %p247, %p248;
	selp.u64 	%rd161, 1, 0, %p249;
	sub.s64 	%rd162, %rd161, %rd159;
	shl.b64 	%rd163, %rd162, 25;
	add.s64 	%rd164, %rd163, %rd156;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd166, %rd3, %rd165;
	st.global.v4.u32 	[%rd166], {%r163, %r165, %r164, %r166};
	setp.ne.s32 	%p250, %r109, 7936;
	add.s32 	%r109, %r109, 256;
	add.s32 	%r2606, %r109, %r5;
	setp.gt.s32 	%p251, %r6, %r2606;
	and.pred  	%p252, %p250, %p251;
	@%p252 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_133;
$L__BB0_128:                            // %L1595
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_129 Depth 2
	or.b32  	%r617, %r109, %r93;
	or.b32  	%r618, %r617, %r94;
	or.b32  	%r619, %r618, %r95;
	shl.b32 	%r620, %r619, 12;
	add.s32 	%r621, %r96, %r620;
	shr.s32 	%r622, %r621, 31;
	shr.u32 	%r623, %r622, 7;
	add.s32 	%r624, %r621, %r623;
	shr.s32 	%r625, %r624, 25;
	setp.lt.s32 	%p225, %r621, 0;
	and.b32  	%r626, %r624, -33554432;
	setp.ne.s32 	%p226, %r626, %r621;
	and.pred  	%p227, %p225, %p226;
	selp.u32 	%r627, 1, 0, %p227;
	sub.s32 	%r628, %r627, %r625;
	shl.b32 	%r629, %r628, 25;
	add.s32 	%r630, %r629, %r621;
	mul.wide.s32 	%rd118, %r630, 4;
	add.s64 	%rd119, %rd2, %rd118;
	ld.global.v4.u32 	{%r631, %r632, %r633, %r634}, [%rd119];
	or.b32  	%r635, %r620, 262144;
	add.s32 	%r636, %r96, %r635;
	shr.s32 	%r637, %r636, 31;
	shr.u32 	%r638, %r637, 7;
	add.s32 	%r639, %r636, %r638;
	shr.s32 	%r640, %r639, 25;
	setp.lt.s32 	%p228, %r636, 0;
	and.b32  	%r641, %r639, -33554432;
	setp.ne.s32 	%p229, %r641, %r636;
	and.pred  	%p230, %p228, %p229;
	selp.u32 	%r642, 1, 0, %p230;
	sub.s32 	%r643, %r642, %r640;
	shl.b32 	%r644, %r643, 25;
	add.s32 	%r645, %r644, %r636;
	mul.wide.s32 	%rd120, %r645, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r646, %r647, %r648, %r649}, [%rd121];
	or.b32  	%r650, %r620, 524288;
	add.s32 	%r651, %r96, %r650;
	shr.s32 	%r652, %r651, 31;
	shr.u32 	%r653, %r652, 7;
	add.s32 	%r654, %r651, %r653;
	shr.s32 	%r655, %r654, 25;
	setp.lt.s32 	%p231, %r651, 0;
	and.b32  	%r656, %r654, -33554432;
	setp.ne.s32 	%p232, %r656, %r651;
	and.pred  	%p233, %p231, %p232;
	selp.u32 	%r657, 1, 0, %p233;
	sub.s32 	%r658, %r657, %r655;
	shl.b32 	%r659, %r658, 25;
	add.s32 	%r660, %r659, %r651;
	mul.wide.s32 	%rd122, %r660, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r661, %r662, %r663, %r664}, [%rd123];
	or.b32  	%r665, %r620, 786432;
	add.s32 	%r666, %r96, %r665;
	shr.s32 	%r667, %r666, 31;
	shr.u32 	%r668, %r667, 7;
	add.s32 	%r669, %r666, %r668;
	shr.s32 	%r670, %r669, 25;
	setp.lt.s32 	%p234, %r666, 0;
	and.b32  	%r671, %r669, -33554432;
	setp.ne.s32 	%p235, %r671, %r666;
	and.pred  	%p236, %p234, %p235;
	selp.u32 	%r672, 1, 0, %p236;
	sub.s32 	%r673, %r672, %r670;
	shl.b32 	%r674, %r673, 25;
	add.s32 	%r675, %r674, %r666;
	mul.wide.s32 	%rd124, %r675, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r676, %r677, %r678, %r679}, [%rd125];
	selp.b32 	%r680, %r633, %r631, %p224;
	shfl.sync.bfly.b32	%r681, %r680, 8, 31, -1;
	selp.b32 	%r553, %r631, %r681, %p224;
	selp.b32 	%r554, %r681, %r633, %p224;
	selp.b32 	%r682, %r634, %r632, %p224;
	shfl.sync.bfly.b32	%r683, %r682, 8, 31, -1;
	selp.b32 	%r561, %r632, %r683, %p224;
	selp.b32 	%r562, %r683, %r634, %p224;
	selp.b32 	%r684, %r648, %r646, %p224;
	shfl.sync.bfly.b32	%r685, %r684, 8, 31, -1;
	selp.b32 	%r569, %r646, %r685, %p224;
	selp.b32 	%r570, %r685, %r648, %p224;
	selp.b32 	%r686, %r649, %r647, %p224;
	shfl.sync.bfly.b32	%r687, %r686, 8, 31, -1;
	selp.b32 	%r577, %r647, %r687, %p224;
	selp.b32 	%r578, %r687, %r649, %p224;
	selp.b32 	%r688, %r663, %r661, %p224;
	shfl.sync.bfly.b32	%r689, %r688, 8, 31, -1;
	selp.b32 	%r585, %r661, %r689, %p224;
	selp.b32 	%r586, %r689, %r663, %p224;
	selp.b32 	%r690, %r664, %r662, %p224;
	shfl.sync.bfly.b32	%r691, %r690, 8, 31, -1;
	selp.b32 	%r593, %r662, %r691, %p224;
	selp.b32 	%r594, %r691, %r664, %p224;
	selp.b32 	%r692, %r678, %r676, %p224;
	shfl.sync.bfly.b32	%r693, %r692, 8, 31, -1;
	selp.b32 	%r601, %r676, %r693, %p224;
	selp.b32 	%r602, %r693, %r678, %p224;
	selp.b32 	%r694, %r679, %r677, %p224;
	shfl.sync.bfly.b32	%r695, %r694, 8, 31, -1;
	selp.b32 	%r609, %r677, %r695, %p224;
	selp.b32 	%r610, %r695, %r679, %p224;
	mov.u32 	%r611, 21520;
	// begin inline asm
	prmt.b32 %r552, %r553, %r554, %r611;
	// end inline asm
	mov.u32 	%r615, 30258;
	// begin inline asm
	prmt.b32 %r556, %r553, %r554, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r560, %r561, %r562, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r561, %r562, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r577, %r578, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r577, %r578, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r585, %r586, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r585, %r586, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r593, %r594, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r593, %r594, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r601, %r602, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r601, %r602, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r609, %r610, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r609, %r610, %r615;
	// end inline asm
	st.shared.u32 	[%rd6], %r552;
	st.shared.u32 	[%rd7], %r556;
	st.shared.u32 	[%rd8], %r560;
	st.shared.u32 	[%rd9], %r564;
	st.shared.u32 	[%rd10], %r568;
	st.shared.u32 	[%rd11], %r572;
	st.shared.u32 	[%rd12], %r576;
	st.shared.u32 	[%rd13], %r580;
	st.shared.u32 	[%rd14], %r584;
	st.shared.u32 	[%rd15], %r588;
	st.shared.u32 	[%rd16], %r592;
	st.shared.u32 	[%rd17], %r596;
	st.shared.u32 	[%rd18], %r600;
	st.shared.u32 	[%rd19], %r604;
	st.shared.u32 	[%rd20], %r608;
	st.shared.u32 	[%rd21], %r612;
	bar.sync 	0;
	or.b32  	%r696, %r109, %r98;
	or.b32  	%r110, %r696, %r99;
	shr.u32 	%r2634, %r110, 5;
	mov.u64 	%rd169, %rd35;
	mov.u64 	%rd170, %rd34;
	mov.u32 	%r2637, %r2609;
	mov.u32 	%r2638, %r2628;
	mov.u32 	%r2639, %r2627;
	mov.u32 	%r2640, %r2626;
	mov.u32 	%r2641, %r2625;
$L__BB0_129:                            // %pass5727
                                        //   Parent Loop BB0_128 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2626, %r2636;
	mov.u32 	%r2625, %r2635;
	add.s32 	%r2493, %r110, %r2637;
	and.b32  	%r2494, %r2493, 1;
	neg.s32 	%r2495, %r2494;
	and.b32  	%r2496, %r2495, 520;
	bfe.s32 	%r2497, %r2493, 1, 1;
	and.b32  	%r2498, %r2497, 260;
	and.b32  	%r2499, %r2634, 7;
	mul.lo.s32 	%r2500, %r2499, 1057;
	bfe.s32 	%r2501, %r2493, 3, 1;
	and.b32  	%r2502, %r2501, 65;
	bfe.s32 	%r2503, %r2493, 2, 1;
	and.b32  	%r2504, %r2503, 130;
	or.b32  	%r2505, %r100, %r2496;
	add.s32 	%r2506, %r2505, %r2498;
	add.s32 	%r2507, %r2506, %r2500;
	add.s32 	%r2508, %r2507, %r2502;
	add.s32 	%r2509, %r2508, %r2504;
	mul.wide.u32 	%rd126, %r2509, 4;
	add.s64 	%rd128, %rd69, %rd126;
	ld.shared.u32 	%r2627, [%rd128];
	add.s32 	%r2510, %r101, %r2496;
	add.s32 	%r2511, %r2510, %r2498;
	add.s32 	%r2512, %r2511, %r2500;
	add.s32 	%r2513, %r2512, %r2502;
	add.s32 	%r2514, %r2513, %r2504;
	mul.wide.u32 	%rd129, %r2514, 4;
	add.s64 	%rd130, %rd69, %rd129;
	ld.shared.u32 	%r2628, [%rd130];
	// begin inline asm
	mov.b32 %r702, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r713, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r701, %r2627, -2004318072;
	mov.u32 	%r700, 983055;
	// begin inline asm
	lop3.b32 %r699, %r700, %r701, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r703, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r704, %r702, %r703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r707, %r699, %r704;
	// end inline asm
	mov.u32 	%r711, 15728880;
	// begin inline asm
	lop3.b32 %r710, %r711, %r701, %r713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r715, %r713, %r714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r718, %r710, %r715;
	// end inline asm
	shr.u32 	%r723, %r701, 8;
	// begin inline asm
	lop3.b32 %r721, %r700, %r723, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r702, %r725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r729, %r721, %r726;
	// end inline asm
	// begin inline asm
	lop3.b32 %r732, %r711, %r723, %r713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r736, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r737, %r713, %r736;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r740, %r732, %r737;
	// end inline asm
	// begin inline asm
	mov.b32 %r748, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r759, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r747, %r2628, -2004318072;
	// begin inline asm
	lop3.b32 %r745, %r700, %r747, %r748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r749, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r750, %r748, %r749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r753, %r745, %r750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r756, %r711, %r747, %r759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r761, %r759, %r760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r764, %r756, %r761;
	// end inline asm
	shr.u32 	%r769, %r747, 8;
	// begin inline asm
	lop3.b32 %r767, %r700, %r769, %r748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r772, %r748, %r771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r775, %r767, %r772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r778, %r711, %r769, %r759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r782, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r783, %r759, %r782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r778, %r783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r789, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r791, %r789, %r707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r794, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r796, %r794, %r718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r799, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r801, %r799, %r729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r804, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r806, %r804, %r740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r809, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r811, %r809, %r753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r814, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r816, %r814, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r819, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r821, %r819, %r775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r824, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r826, %r824, %r786;
	// end inline asm
	// begin inline asm
	mov.b32 %r834, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r833, %r2641, -2004318072;
	// begin inline asm
	lop3.b32 %r831, %r700, %r833, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r835, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r836, %r834, %r835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r839, %r831, %r836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r842, %r711, %r833, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r847, %r845, %r846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r850, %r842, %r847;
	// end inline asm
	shr.u32 	%r855, %r833, 8;
	// begin inline asm
	lop3.b32 %r853, %r700, %r855, %r834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r857, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r834, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r864, %r711, %r855, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r868, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r869, %r845, %r868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r872, %r864, %r869;
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r879, %r2640, -2004318072;
	// begin inline asm
	lop3.b32 %r877, %r700, %r879, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r880, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r888, %r711, %r879, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r893, %r891, %r892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r896, %r888, %r893;
	// end inline asm
	shr.u32 	%r901, %r879, 8;
	// begin inline asm
	lop3.b32 %r899, %r700, %r901, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r880, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r910, %r711, %r901, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r891, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r921, %r203, %r839, %r791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r925, %r203, %r850, %r796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r929, %r203, %r861, %r801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r933, %r203, %r872, %r806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r937, %r203, %r885, %r811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r941, %r203, %r896, %r816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r945, %r203, %r907, %r821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r949, %r203, %r918, %r826;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r957, %r2639, -2004318072;
	// begin inline asm
	lop3.b32 %r955, %r700, %r957, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r958, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r966, %r711, %r957, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	shr.u32 	%r979, %r957, 8;
	// begin inline asm
	lop3.b32 %r977, %r700, %r979, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r958, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r988, %r711, %r979, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r969, %r992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r996, %r988, %r993;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r1003, %r2638, -2004318072;
	// begin inline asm
	lop3.b32 %r1001, %r700, %r1003, %r1004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r1004, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r711, %r1003, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	shr.u32 	%r1025, %r1003, 8;
	// begin inline asm
	lop3.b32 %r1023, %r700, %r1025, %r1004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1004, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1034, %r711, %r1025, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1038, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1039, %r1015, %r1038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1042, %r1034, %r1039;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1045, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1047, %r1045, %r963, %r921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1051, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1053, %r1051, %r974, %r925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1057, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1059, %r1057, %r985, %r929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1063, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1065, %r1063, %r996, %r933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r1069, %r1009, %r937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r1075, %r1020, %r941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r1081, %r1031, %r945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r1087, %r1042, %r949;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1109, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r1097, %r2625, -2004318072;
	// begin inline asm
	lop3.b32 %r1095, %r700, %r1097, %r1098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1100, %r1098, %r1099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1103, %r1095, %r1100;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1106, %r711, %r1097, %r1109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1110, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1111, %r1109, %r1110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1114, %r1106, %r1111;
	// end inline asm
	shr.u32 	%r1119, %r1097, 8;
	// begin inline asm
	lop3.b32 %r1117, %r700, %r1119, %r1098, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1121, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1122, %r1098, %r1121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1125, %r1117, %r1122;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1128, %r711, %r1119, %r1109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1132, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1133, %r1109, %r1132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1136, %r1128, %r1133;
	// end inline asm
	// begin inline asm
	mov.b32 %r1144, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1155, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r1143, %r2626, -2004318072;
	// begin inline asm
	lop3.b32 %r1141, %r700, %r1143, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1144, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1152, %r711, %r1143, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1157, %r1155, %r1156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1160, %r1152, %r1157;
	// end inline asm
	shr.u32 	%r1165, %r1143, 8;
	// begin inline asm
	lop3.b32 %r1163, %r700, %r1165, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1144, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1174, %r711, %r1165, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1155, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r239, %r1103, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r239, %r1114, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r239, %r1125, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r239, %r1136, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r239, %r1149, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r239, %r1160, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r239, %r1171, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r239, %r1182, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1217, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r1217, %r1221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r285, %r1224, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1226, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r1226, %r1230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r285, %r1233, %r1228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1235, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r1235, %r1239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r285, %r1242, %r1237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1244, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1246, %r1244, %r1248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1249, %r285, %r1251, %r1246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1253, %r288, %r1224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r285, %r1221, %r1253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r288, %r1233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r285, %r1230, %r1260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r288, %r1242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r285, %r1239, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r288, %r1251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r285, %r1248, %r1274;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1328, %r1325}, {%r333, %r339, %r336, %r342}, {%r1222, %r1256}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1334}, {%r333, %r339, %r336, %r342}, {%r1231, %r1263}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1346, %r1343}, {%r333, %r339, %r336, %r342}, {%r1240, %r1270}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1352}, {%r333, %r339, %r336, %r342}, {%r1249, %r1277}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1321, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1323, %r1321, %r1325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1326, %r380, %r1328, %r1323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1330, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r1330, %r1334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r380, %r1337, %r1332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1339, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1341, %r1339, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1344, %r380, %r1346, %r1341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1348, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r1348, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r380, %r1355, %r1350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1357, %r383, %r1328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1360, %r380, %r1325, %r1357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1364, %r383, %r1337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r380, %r1334, %r1364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1371, %r383, %r1346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r380, %r1343, %r1371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r383, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r380, %r1352, %r1378;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1385, %r1386}, {%r420, %r426, %r423, %r429}, {%r1326, %r1360}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r420, %r426, %r423, %r429}, {%r1335, %r1367}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r420, %r426, %r423, %r429}, {%r1344, %r1374}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1415, %r1416}, {%r420, %r426, %r423, %r429}, {%r1353, %r1381}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1425, %r119, %r1385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1428, %r119, %r1386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r119, %r1395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1434, %r119, %r1396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r119, %r1405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r119, %r1406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r119, %r1415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r119, %r1416;
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs293, %rs293};
	// end inline asm
	mov.u16 	%rs118, 18176;
	// begin inline asm
	mov.b32 %r1450, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1451, %r1425, %r1449;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1454, %r1451, %r1450;
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1459, %r1428, %r1457;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1462, %r1459, %r1458;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1467, %r1431, %r1465;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1470, %r1467, %r1466;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1474, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1475, %r1434, %r1473;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1478, %r1475, %r1474;
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1483, %r1437, %r1481;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1486, %r1483, %r1482;
	// end inline asm
	// begin inline asm
	mov.b32 %r1489, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1491, %r1440, %r1489;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1494, %r1491, %r1490;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1499, %r1443, %r1497;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1502, %r1499, %r1498;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1507, %r1446, %r1505;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1510, %r1507, %r1506;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1515, %r1516, %r1514;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1454, %r1515;
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1522, %r1516, %r1521;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1525, %r1462, %r1522;
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1529, %r1516, %r1528;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1532, %r1470, %r1529;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1536, %r1516, %r1535;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1478, %r1536;
	// end inline asm
	mov.u32 	%r1545, 25152;
	// begin inline asm
	prmt.b32 %r1542, %r1518, %r1532, %r1545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1546, %r1525, %r1539, %r1545;
	// end inline asm
	shl.b32 	%r1553, %r1546, 4;
	mov.u32 	%r1551, 252645135;
	// begin inline asm
	lop3.b32 %r1550, %r1551, %r1542, %r1553, 202;
	// end inline asm
	xor.b32  	%r2515, %r1550, -2004318072;
	// begin inline asm
	mov.b32 %r1557, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1555, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1556, %r1557, %r1555;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1559, %r1486, %r1556;
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1563, %r1557, %r1562;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1566, %r1494, %r1563;
	// end inline asm
	// begin inline asm
	mov.b32 %r1569, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1570, %r1557, %r1569;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1502, %r1570;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1557, %r1576;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1510, %r1577;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1583, %r1559, %r1573, %r1545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1587, %r1566, %r1580, %r1545;
	// end inline asm
	shl.b32 	%r1594, %r1587, 4;
	// begin inline asm
	lop3.b32 %r1591, %r1551, %r1583, %r1594, 202;
	// end inline asm
	xor.b32  	%r2516, %r1591, -2004318072;
	st.shared.u32 	[%rd169], %r2515;
	st.shared.u32 	[%rd170], %r2516;
	ld.shared.u32 	%r2635, [%rd128];
	ld.shared.u32 	%r2636, [%rd130];
	// begin inline asm
	mov.b32 %r1600, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r1599, %r2635, -2004318072;
	// begin inline asm
	lop3.b32 %r1597, %r700, %r1599, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1601, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1602, %r1600, %r1601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1605, %r1597, %r1602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1608, %r711, %r1599, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1612, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1613, %r1611, %r1612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1616, %r1608, %r1613;
	// end inline asm
	shr.u32 	%r1621, %r1599, 8;
	// begin inline asm
	lop3.b32 %r1619, %r700, %r1621, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1623, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1624, %r1600, %r1623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1627, %r1619, %r1624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1630, %r711, %r1621, %r1611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1634, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1635, %r1611, %r1634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1638, %r1630, %r1635;
	// end inline asm
	// begin inline asm
	mov.b32 %r1646, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1657, {%rs255, %rs255};
	// end inline asm
	xor.b32  	%r1645, %r2636, -2004318072;
	// begin inline asm
	lop3.b32 %r1643, %r700, %r1645, %r1646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1647, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1648, %r1646, %r1647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1651, %r1643, %r1648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1654, %r711, %r1645, %r1657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1658, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1659, %r1657, %r1658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1662, %r1654, %r1659;
	// end inline asm
	shr.u32 	%r1667, %r1645, 8;
	// begin inline asm
	lop3.b32 %r1665, %r700, %r1667, %r1646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1669, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1670, %r1646, %r1669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1673, %r1665, %r1670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1676, %r711, %r1667, %r1657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1680, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1681, %r1657, %r1680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1684, %r1676, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1687, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1689, %r1687, %r1605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1697, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1697, %r1627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1717, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1684;
	// end inline asm
	// begin inline asm
	mov.b32 %r1732, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1743, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1729, %r700, %r957, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1733, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1734, %r1732, %r1733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1737, %r1729, %r1734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1740, %r711, %r957, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1744, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1745, %r1743, %r1744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1748, %r1740, %r1745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1751, %r700, %r979, %r1732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1755, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1756, %r1732, %r1755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1759, %r1751, %r1756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1762, %r711, %r979, %r1743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1766, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1767, %r1743, %r1766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1770, %r1762, %r1767;
	// end inline asm
	// begin inline asm
	mov.b32 %r1778, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1789, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1775, %r700, %r1003, %r1778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1779, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1780, %r1778, %r1779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1783, %r1775, %r1780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1786, %r711, %r1003, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1790, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1791, %r1789, %r1790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1794, %r1786, %r1791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1797, %r700, %r1025, %r1778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1801, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1802, %r1778, %r1801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1805, %r1797, %r1802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1808, %r711, %r1025, %r1789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1812, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1813, %r1789, %r1812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1816, %r1808, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r203, %r1737, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r203, %r1748, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r203, %r1759, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r203, %r1770, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r203, %r1783, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r203, %r1794, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r203, %r1805, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r203, %r1816, %r1724;
	// end inline asm
	// begin inline asm
	mov.b32 %r1856, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1853, %r700, %r1097, %r1856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1857, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1858, %r1856, %r1857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1861, %r1853, %r1858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1864, %r711, %r1097, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1868, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1869, %r1867, %r1868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1872, %r1864, %r1869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1875, %r700, %r1119, %r1856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1879, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1880, %r1856, %r1879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1883, %r1875, %r1880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1886, %r711, %r1119, %r1867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1890, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1891, %r1867, %r1890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1894, %r1886, %r1891;
	// end inline asm
	// begin inline asm
	mov.b32 %r1902, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r1913, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1899, %r700, %r1143, %r1902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1903, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1904, %r1902, %r1903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1907, %r1899, %r1904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1910, %r711, %r1143, %r1913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1914, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1915, %r1913, %r1914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1918, %r1910, %r1915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1921, %r700, %r1165, %r1902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1925, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1926, %r1902, %r1925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1929, %r1921, %r1926;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1932, %r711, %r1165, %r1913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1936, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1937, %r1913, %r1936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1940, %r1932, %r1937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1943, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r1943, %r1861, %r1819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1949, %r1872, %r1823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1955, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1955, %r1883, %r1827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1961, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r1961, %r1894, %r1831;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1967, %r1907, %r1835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1973, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1973, %r1918, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1979, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1979, %r1929, %r1843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1985, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1985, %r1940, %r1847;
	// end inline asm
	// begin inline asm
	mov.b32 %r1996, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r2007, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1993, %r700, %r701, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1998, %r1996, %r1997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2001, %r1993, %r1998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2004, %r711, %r701, %r2007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2008, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2009, %r2007, %r2008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2012, %r2004, %r2009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2015, %r700, %r723, %r1996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2020, %r1996, %r2019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2023, %r2015, %r2020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2026, %r711, %r723, %r2007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2031, %r2007, %r2030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2034, %r2026, %r2031;
	// end inline asm
	// begin inline asm
	mov.b32 %r2042, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r2053, {%rs255, %rs255};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2039, %r700, %r747, %r2042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2044, %r2042, %r2043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2047, %r2039, %r2044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2050, %r711, %r747, %r2053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2054, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2055, %r2053, %r2054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2058, %r2050, %r2055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2061, %r700, %r769, %r2042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2066, %r2042, %r2065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2069, %r2061, %r2066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2072, %r711, %r769, %r2053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2077, %r2053, %r2076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2080, %r2072, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r239, %r2001, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r239, %r2012, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r239, %r2023, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r239, %r2034, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r239, %r2047, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r239, %r2058, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r239, %r2069, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r239, %r2080, %r1987;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2115, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r2115, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r285, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2124, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2124, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r285, %r2131, %r2126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2133, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r2133, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r285, %r2140, %r2135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2142, %r288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2142, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r285, %r2149, %r2144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r288, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r285, %r2119, %r2151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r288, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r285, %r2128, %r2158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r288, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r285, %r2137, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r288, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r285, %r2146, %r2172;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2226, %r2223}, {%r333, %r339, %r336, %r342}, {%r2120, %r2154}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2235, %r2232}, {%r333, %r339, %r336, %r342}, {%r2129, %r2161}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2244, %r2241}, {%r333, %r339, %r336, %r342}, {%r2138, %r2168}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2253, %r2250}, {%r333, %r339, %r336, %r342}, {%r2147, %r2175}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2219, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2219, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r380, %r2226, %r2221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2228, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r2228, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r380, %r2235, %r2230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2237, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2239, %r2237, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2242, %r380, %r2244, %r2239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2246, %r383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r2246, %r2250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r380, %r2253, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r383, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r380, %r2223, %r2255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r383, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r380, %r2232, %r2262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r383, %r2244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2272, %r380, %r2241, %r2269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2276, %r383, %r2253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2279, %r380, %r2250, %r2276;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2283, %r2284}, {%r420, %r426, %r423, %r429}, {%r2224, %r2258}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2293, %r2294}, {%r420, %r426, %r423, %r429}, {%r2233, %r2265}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2303, %r2304}, {%r420, %r426, %r423, %r429}, {%r2242, %r2272}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2313, %r2314}, {%r420, %r426, %r423, %r429}, {%r2251, %r2279}, {%r2609, %r2609};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2323, %r119, %r2283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2326, %r119, %r2284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r119, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2332, %r119, %r2294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2335, %r119, %r2303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r119, %r2304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2341, %r119, %r2313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2344, %r119, %r2314;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2349, %r2323, %r2347;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2352, %r2349, %r2348;
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2357, %r2326, %r2355;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2360, %r2357, %r2356;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2365, %r2329, %r2363;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2368, %r2365, %r2364;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2373, %r2332, %r2371;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2376, %r2373, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2380, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2381, %r2335, %r2379;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2384, %r2381, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2389, %r2338, %r2387;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2392, %r2389, %r2388;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2397, %r2341, %r2395;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2400, %r2397, %r2396;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs293, %rs293};
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2405, %r2344, %r2403;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2408, %r2405, %r2404;
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2414, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2352, %r2413;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2414, %r2419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2360, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2414, %r2426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2368, %r2427;
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2414, %r2433;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2376, %r2434;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2416, %r2430, %r1545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2423, %r2437, %r1545;
	// end inline asm
	shl.b32 	%r2451, %r2444, 4;
	// begin inline asm
	lop3.b32 %r2448, %r1551, %r2440, %r2451, 202;
	// end inline asm
	xor.b32  	%r2517, %r2448, -2004318072;
	// begin inline asm
	mov.b32 %r2455, {%rs307, %rs307};
	// end inline asm
	// begin inline asm
	mov.b32 %r2453, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2454, %r2455, %r2453;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2457, %r2384, %r2454;
	// end inline asm
	// begin inline asm
	mov.b32 %r2460, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2461, %r2455, %r2460;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2464, %r2392, %r2461;
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2455, %r2467;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2471, %r2400, %r2468;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs315, %rs315};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2455, %r2474;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2408, %r2475;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2481, %r2457, %r2471, %r1545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2485, %r2464, %r2478, %r1545;
	// end inline asm
	shl.b32 	%r2492, %r2485, 4;
	// begin inline asm
	lop3.b32 %r2489, %r1551, %r2481, %r2492, 202;
	// end inline asm
	xor.b32  	%r2518, %r2489, -2004318072;
	st.shared.u32 	[%rd169], %r2517;
	st.shared.u32 	[%rd170], %r2518;
	add.s32 	%r2637, %r2637, 32;
	add.s64 	%rd170, %rd170, 4228;
	add.s64 	%rd169, %rd169, 4228;
	add.s32 	%r2634, %r2634, 1;
	setp.eq.s32 	%p237, %r2637, 256;
	mov.u32 	%r2638, %r2628;
	mov.u32 	%r2639, %r2627;
	mov.u32 	%r2640, %r2626;
	mov.u32 	%r2641, %r2625;
	@%p237 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;
$L__BB0_130:                            // %guard_exit10385
                                        //   in Loop: Header=BB0_128 Depth=1
	bar.sync 	0;
	or.b32  	%r152, %r109, %r92;
	ld.shared.u32 	%r2524, [%rd22];
	ld.shared.u32 	%r2525, [%rd23+128];
	ld.shared.u32 	%r2532, [%rd24+4];
	ld.shared.u32 	%r2533, [%rd23+132];
	ld.shared.u32 	%r2540, [%rd25];
	ld.shared.u32 	%r2541, [%rd26+128];
	ld.shared.u32 	%r2548, [%rd27+4];
	ld.shared.u32 	%r2549, [%rd26+132];
	ld.shared.u32 	%r2556, [%rd28];
	ld.shared.u32 	%r2557, [%rd29+128];
	ld.shared.u32 	%r2564, [%rd30+4];
	ld.shared.u32 	%r2565, [%rd29+132];
	ld.shared.u32 	%r2572, [%rd31];
	ld.shared.u32 	%r2573, [%rd32+128];
	ld.shared.u32 	%r2580, [%rd33+4];
	ld.shared.u32 	%r2581, [%rd32+132];
	// begin inline asm
	prmt.b32 %r2519, %r2524, %r2525, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2523, %r2524, %r2525, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2527, %r2532, %r2533, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2531, %r2532, %r2533, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2535, %r2540, %r2541, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2539, %r2540, %r2541, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2543, %r2548, %r2549, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2547, %r2548, %r2549, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2551, %r2556, %r2557, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2555, %r2556, %r2557, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2559, %r2564, %r2565, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2563, %r2564, %r2565, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2567, %r2572, %r2573, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2571, %r2572, %r2573, %r615;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2575, %r2580, %r2581, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2579, %r2580, %r2581, %r615;
	// end inline asm
	selp.b32 	%r2583, %r2523, %r2519, %p224;
	shfl.sync.bfly.b32	%r2584, %r2583, 8, 31, -1;
	selp.b32 	%r2585, %r2531, %r2527, %p224;
	shfl.sync.bfly.b32	%r2586, %r2585, 8, 31, -1;
	selp.b32 	%r2587, %r2539, %r2535, %p224;
	shfl.sync.bfly.b32	%r157, %r2587, 8, 31, -1;
	selp.b32 	%r2588, %r2547, %r2543, %p224;
	shfl.sync.bfly.b32	%r158, %r2588, 8, 31, -1;
	selp.b32 	%r2589, %r2555, %r2551, %p224;
	shfl.sync.bfly.b32	%r2590, %r2589, 8, 31, -1;
	selp.b32 	%r159, %r2551, %r2590, %p224;
	selp.b32 	%r160, %r2590, %r2555, %p224;
	selp.b32 	%r2591, %r2563, %r2559, %p224;
	shfl.sync.bfly.b32	%r2592, %r2591, 8, 31, -1;
	selp.b32 	%r161, %r2559, %r2592, %p224;
	selp.b32 	%r162, %r2592, %r2563, %p224;
	selp.b32 	%r2593, %r2571, %r2567, %p224;
	shfl.sync.bfly.b32	%r2594, %r2593, 8, 31, -1;
	selp.b32 	%r163, %r2567, %r2594, %p224;
	selp.b32 	%r164, %r2594, %r2571, %p224;
	selp.b32 	%r2595, %r2579, %r2575, %p224;
	shfl.sync.bfly.b32	%r2596, %r2595, 8, 31, -1;
	selp.b32 	%r165, %r2575, %r2596, %p224;
	selp.b32 	%r166, %r2596, %r2579, %p224;
	shl.b32 	%r2642, %r152, 12;
	@%p238 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_132;
$L__BB0_131:                            // %pass9912
                                        //   in Loop: Header=BB0_128 Depth=1
	selp.b32 	%r2597, %r158, %r2547, %p224;
	selp.b32 	%r2598, %r2543, %r158, %p224;
	selp.b32 	%r2599, %r157, %r2539, %p224;
	selp.b32 	%r2600, %r2535, %r157, %p224;
	or.b32  	%r2601, %r2642, %r102;
	or.b32  	%r2602, %r2601, 262144;
	cvt.s64.s32 	%rd131, %r2602;
	add.s64 	%rd132, %rd131, %rd5;
	shr.u64 	%rd133, %rd132, 39;
	add.s64 	%rd134, %rd132, %rd133;
	shr.s64 	%rd135, %rd134, 25;
	setp.lt.s64 	%p241, %rd132, 0;
	and.b64  	%rd136, %rd134, -33554432;
	setp.ne.s64 	%p242, %rd136, %rd132;
	and.pred  	%p243, %p241, %p242;
	selp.u64 	%rd137, 1, 0, %p243;
	sub.s64 	%rd138, %rd137, %rd135;
	shl.b64 	%rd139, %rd138, 25;
	add.s64 	%rd140, %rd139, %rd132;
	shl.b64 	%rd141, %rd140, 2;
	add.s64 	%rd142, %rd3, %rd141;
	st.global.v4.u32 	[%rd142], {%r2600, %r2598, %r2599, %r2597};
	bra.uni 	$L__BB0_132;
$L__BB0_133:                            // %L22594
	st.global.u32 	[%rd4], %r2609;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r2608, 2;
	st.global.u32 	[%rd4], %r2608;
	mov.u64 	%rd167, exception2055;
	cvta.global.u64 	%rd168, %rd167;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd168;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd42;
	st.param.b32 	[param0+8], %r168;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd63, exception1;
	cvta.global.u64 	%rd64, %rd63;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd64;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd42;
	st.param.b32 	[param0+8], %r168;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
