// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2039[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<260>;
	.reg .b16 	%rs<311>;
	.reg .f32 	%f<929>;
	.reg .b32 	%r<2681>;
	.reg .b64 	%rd<237>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r163, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd74, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r164, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r164, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd91, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd75, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r165, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r166, %r165, %r2;
	or.b32  	%r167, %r166, %r4;
	mul.wide.u32 	%rd97, %r167, 4;
	add.s64 	%rd4, %rd91, %rd97;
	mov.u32 	%r168, 1;
	st.global.u32 	[%rd4], %r168;
	ld.global.u32 	%r5, [%rd75];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L231
	ld.param.u64 	%rd79, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd79];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L241
	ld.param.u64 	%rd83, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd83];
	sub.s32 	%r169, %r6, %r5;
	and.b32  	%r170, %r169, 255;
	setp.ne.s32 	%p6, %r170, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L247
	ld.param.u64 	%rd87, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd87];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L257
	sub.s32 	%r171, %r8, %r7;
	add.s32 	%r172, %r171, 3;
	and.b32  	%r173, %r172, 7;
	setp.eq.s32 	%p12, %r173, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %L379
	bfe.u32 	%r16, %r4, 1, 1;
	and.b32  	%r17, %r4, 1;
	bfe.u32 	%r18, %r4, 2, 1;
	shl.b32 	%r181, %r18, 1;
	shl.b32 	%r182, %r17, 2;
	shl.b32 	%r183, %r16, 3;
	or.b32  	%r184, %r182, %r183;
	or.b32  	%r185, %r181, %r184;
	shr.u32 	%r19, %r4, 4;
	or.b32  	%r20, %r19, %r185;
	or.b32  	%r21, %r20, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r20;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r186, %f193;
	and.b32  	%r187, %r186, -2147483648;
	or.b32  	%r188, %r187, 1056964608;
	mov.b32 	%f194, %r188;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p18, %f3, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	LBB0_10;
// %bb.9:                               // %L613
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f889, %f217, %f3;
LBB0_10:                                // %L616
	cvt.rzi.s32.f32 	%r189, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r21;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p19;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r193, %f227;
	and.b32  	%r194, %r193, -2147483648;
	or.b32  	%r195, %r194, 1056964608;
	mov.b32 	%f228, %r195;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p21;
	cvt.rzi.s32.f32 	%r196, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p24, %f8, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L633
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f890, %f251, %f8;
LBB0_12:                                // %L636
	add.s32 	%r190, %r189, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r197, %r196, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r203, %r20, 32;
	or.b32  	%r23, %r20, 48;
	cvt.rn.f32.s32 	%f255, %r203;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p25;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r204, %f262;
	and.b32  	%r205, %r204, -2147483648;
	or.b32  	%r206, %r205, 1056964608;
	mov.b32 	%f263, %r206;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p27;
	cvt.rzi.s32.f32 	%r207, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r208, %r207, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p30, %f12, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L722
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f891, %f286, %f12;
LBB0_14:                                // %L725
	shl.b32 	%r9, %r4, 2;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r191, %r190, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r198, %r197, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r209, %r208, 1;
	cvt.rn.f32.s32 	%f289, %r23;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p31;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r211, %f296;
	and.b32  	%r212, %r211, -2147483648;
	or.b32  	%r213, %r212, 1056964608;
	mov.b32 	%f297, %r213;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p33;
	cvt.rzi.s32.f32 	%r214, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r215, %r214, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r216, %r215, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p36, %f17, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L742
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f892, %f320, %f17;
LBB0_16:                                // %L745
	and.b32  	%r174, %r9, 4;
	shl.b32 	%r10, %r3, 5;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r191, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r198, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r209, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r216, 1;
	or.b32  	%r221, %r20, 64;
	or.b32  	%r25, %r20, 80;
	cvt.rn.f32.s32 	%f324, %r221;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p37;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r222, %f331;
	and.b32  	%r223, %r222, -2147483648;
	or.b32  	%r224, %r223, 1056964608;
	mov.b32 	%f332, %r224;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p39;
	cvt.rzi.s32.f32 	%r225, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r226, %r225, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r227, %r226, 1;
	setp.eq.b32 	%p40, %r227, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p42, %f21, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L831
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f893, %f355, %f21;
LBB0_18:                                // %L834
	or.b32  	%r175, %r10, %r174;
	and.b32  	%r11, %r4, 16;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r192, %r190, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r199, %r197, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r210, %r208, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r217, %r215, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r228, %r226, 2;
	cvt.rn.f32.s32 	%f358, %r25;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p43;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r229, %f365;
	and.b32  	%r230, %r229, -2147483648;
	or.b32  	%r231, %r230, 1056964608;
	mov.b32 	%f366, %r231;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p45;
	cvt.rzi.s32.f32 	%r232, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r233, %r232, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r234, %r233, 1;
	setp.eq.b32 	%p46, %r234, 1;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r235, %r233, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p48, %f26, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L851
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f894, %f389, %f26;
LBB0_20:                                // %L854
	or.b32  	%r176, %r11, %r175;
	and.b32  	%r177, %r4, 2;
	shl.b32 	%r12, %r4, 1;
	setp.eq.s32 	%p17, %r192, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r199, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r210, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r217, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r228, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r235, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r239, %r20, 96;
	or.b32  	%r27, %r20, 112;
	cvt.rn.f32.s32 	%f393, %r239;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p49;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r240, %f400;
	and.b32  	%r241, %r240, -2147483648;
	or.b32  	%r242, %r241, 1056964608;
	mov.b32 	%f401, %r242;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p51;
	cvt.rzi.s32.f32 	%r243, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r244, %r243, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r245, %r244, 1;
	setp.eq.b32 	%p52, %r245, 1;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r246, %r244, 2;
	setp.eq.s32 	%p53, %r246, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p54, %f30, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L940
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f895, %f424, %f30;
LBB0_22:                                // %L943
	or.b32  	%r178, %r177, %r176;
	and.b32  	%r13, %r12, 8;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	cvt.rn.f32.s32 	%f427, %r27;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r247, %f434;
	and.b32  	%r248, %r247, -2147483648;
	or.b32  	%r249, %r248, 1056964608;
	mov.b32 	%f435, %r249;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p57;
	cvt.rzi.s32.f32 	%r250, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r251, %r250, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r252, %r251, 1;
	setp.eq.b32 	%p58, %r252, 1;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r253, %r251, 2;
	setp.eq.s32 	%p59, %r253, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p59;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p60, %f35, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L960
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f896, %f458, %f35;
LBB0_24:                                // %L963
	or.b32  	%r179, %r13, %r178;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r29, %r20, 31;
	cvt.rn.f32.s32 	%f461, %r29;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f899, %f38;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r31, %f899;
	and.b32  	%r257, %r31, 8388607;
	or.b32  	%r2650, %r257, 1065353216;
	mov.b32 	%f898, %r2650;
	add.s32 	%r258, %r31, -1073741824;
	and.b32  	%r2651, %r258, -8388608;
	setp.eq.s32 	%p68, %r2651, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %.lr.ph1838.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_34:                                // %.lr.ph1838
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r259, %r2651, 192937984;
	add.s32 	%r260, %r259, %r2650;
	mov.b32 	%f473, %r260;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2651, %r2651, %r259;
	mov.b32 	%r2650, %f898;
	setp.ne.s32 	%p69, %r2651, 0;
	setp.ne.s32 	%p70, %r2650, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r31, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f40, %f464;
	fma.rn.f32 	%f41, %f40, 0fC0000000, %f899;
	mov.b32 	%r30, %f41;
	setp.lt.u32 	%p63, %r30, 1073741824;
	mov.f32 	%f897, %f40;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r30, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f469, %f40, 0fBF800000;
	setp.lt.f32 	%p67, %f41, 0fC0000000;
	selp.f32 	%f470, %f469, %f40, %p67;
	add.f32 	%f897, %f470, 0fBF800000;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f897, %f40, 0f3F800000;
	setp.ltu.f32 	%p65, %f41, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f466, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p66, %f466, 0f00000000;
	selp.f32 	%f467, %f897, %f40, %p66;
	add.f32 	%f468, %f467, 0f3F800000;
	add.f32 	%f897, %f468, 0f3F800000;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r180, %r179, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r261, %f38;
	and.b32  	%r262, %r261, -2147483648;
	mov.b32 	%r263, %f899;
	or.b32  	%r264, %r262, %r263;
	mov.b32 	%f899, %r264;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd98, %r180, 4;
	mul.f32 	%f6, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f15, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f24, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f33, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	add.f32 	%f483, %f899, %f899;
	mov.b32 	%r265, %f483;
	and.b32  	%r266, %r265, -2147483648;
	or.b32  	%r267, %r266, 1056964608;
	mov.b32 	%f484, %r267;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p75;
	cvt.rzi.s32.f32 	%r268, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r269, %r268, 1;
	setp.eq.b32 	%p76, %r269, 1;
	selp.f32 	%f502, %f500, %f501, %p76;
	selp.f32 	%f503, %f501, %f500, %p76;
	and.b32  	%r270, %r268, 2;
	setp.eq.s32 	%p77, %r270, 0;
	neg.f32 	%f504, %f502;
	selp.f32 	%f505, %f502, %f504, %p77;
	add.s32 	%r271, %r268, 1;
	and.b32  	%r272, %r271, 2;
	setp.eq.s32 	%p78, %r272, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f508, %f503, %f507, %p78;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f55, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f55, 0f3F800000;
	add.s32 	%r273, %r29, 496;
	cvt.rn.f32.s32 	%f513, %r273;
	div.approx.f32 	%f57, %f513, %f216;
	abs.f32 	%f903, %f57;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r39, %f903;
	and.b32  	%r274, %r39, 8388607;
	or.b32  	%r2652, %r274, 1065353216;
	mov.b32 	%f902, %r2652;
	add.s32 	%r275, %r39, -1073741824;
	and.b32  	%r2653, %r275, -8388608;
	setp.eq.s32 	%p88, %r2653, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %.lr.ph1833.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
LBB0_48:                                // %.lr.ph1833
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r276, %r2653, 192937984;
	add.s32 	%r277, %r276, %r2652;
	mov.b32 	%f525, %r277;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2653, %r2653, %r276;
	mov.b32 	%r2652, %f902;
	setp.ne.s32 	%p89, %r2653, 0;
	setp.ne.s32 	%p90, %r2652, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i1063
	setp.gt.u32 	%p92, %r39, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i1029
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f59, %f516;
	fma.rn.f32 	%f60, %f59, 0fC0000000, %f903;
	mov.b32 	%r38, %f60;
	setp.lt.u32 	%p83, %r38, 1073741824;
	mov.f32 	%f901, %f59;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r38, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f521, %f59, 0fBF800000;
	setp.lt.f32 	%p87, %f60, 0fC0000000;
	selp.f32 	%f522, %f521, %f59, %p87;
	add.f32 	%f901, %f522, 0fBF800000;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f901, %f59, 0f3F800000;
	setp.ltu.f32 	%p85, %f60, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i1034
	fma.rn.f32 	%f518, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p86, %f518, 0f00000000;
	selp.f32 	%f519, %f901, %f59, %p86;
	add.f32 	%f520, %f519, 0f3F800000;
	add.f32 	%f901, %f520, 0f3F800000;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i1066
	add.s64 	%rd99, %rd1, %rd98;
	mov.b32 	%r202, %f254;
	mov.b32 	%r201, %f6;
	mov.b32 	%r220, %f323;
	mov.b32 	%r219, %f15;
	mov.b32 	%r238, %f392;
	mov.b32 	%r237, %f24;
	mov.b32 	%r256, %f460;
	mov.b32 	%r255, %f33;
	selp.f32 	%f56, %f512, %f508, %p80;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r278, %f57;
	and.b32  	%r279, %r278, -2147483648;
	mov.b32 	%r280, %f903;
	or.b32  	%r281, %r279, %r280;
	mov.b32 	%f903, %r281;
LBB0_52:                                // %__nv_fmodf.exit1069
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.global.u32 	%r14, [%rd99];
	shr.u32 	%r15, %r4, 1;
	// begin inline asm
	cvt.rn.f16x2.f32 %r200, %r202, %r201;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r236, %r238, %r237;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r254, %r256, %r255;
	// end inline asm
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r288, %f535;
	and.b32  	%r289, %r288, -2147483648;
	or.b32  	%r290, %r289, 1056964608;
	mov.b32 	%f536, %r290;
	add.f32 	%f537, %f535, %f536;
	cvt.rzi.f32.f32 	%f538, %f537;
	abs.f32 	%f539, %f535;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f542, %f541, %f540, %p95;
	cvt.rzi.s32.f32 	%r291, %f542;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	and.b32  	%r292, %r291, 1;
	setp.eq.b32 	%p96, %r292, 1;
	selp.f32 	%f554, %f552, %f553, %p96;
	selp.f32 	%f555, %f553, %f552, %p96;
	and.b32  	%r293, %r291, 2;
	setp.eq.s32 	%p97, %r293, 0;
	neg.f32 	%f556, %f554;
	selp.f32 	%f557, %f554, %f556, %p97;
	add.s32 	%r294, %r291, 1;
	and.b32  	%r295, %r294, 2;
	setp.eq.s32 	%p98, %r295, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f560, %f555, %f559, %p98;
	cvt.rzi.f32.f32 	%f561, %f903;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r284, %f566;
	mov.b32 	%r283, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r46, %r284, %r283;
	// end inline asm
	mov.b32 	%r287, %f563;
	mov.b32 	%r286, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r47, %r287, %r286;
	// end inline asm
	mov.u64 	%rd224, 2;
	mov.u64 	%rd223, -2;
LBB0_53:                                // %L1085.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd224, %rd224, %rd224;
	add.s64 	%rd8, %rd223, 1;
	setp.ge.u64 	%p101, %rd8, %rd223;
	mov.u64 	%rd223, %rd8;
	@%p101 bra 	LBB0_53;
// %bb.54:                              // %L1092
	and.b64  	%rd102, %rd224, 9223372036854775807;
	setp.ne.s64 	%p102, %rd102, 16;
	@%p102 bra 	LBB0_132;
// %bb.55:                              // %L1094
	shr.u32 	%r48, %r4, 3;
	and.b32  	%r296, %r48, 2;
	or.b32  	%r49, %r18, %r296;
	and.b32  	%r297, %r15, 4;
	or.b32  	%r50, %r49, %r297;
	and.b32  	%r298, %r4, 3;
	mul.lo.s32 	%r299, %r298, %r50;
	shl.b32 	%r300, %r299, 1;
	neg.s32 	%r301, %r300;
	cvt.rn.f32.s32 	%f567, %r301;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f74, %f567, %f568;
	abs.f32 	%f907, %f74;
	setp.lt.f32 	%p103, %f907, 0f40000000;
	@%p103 bra 	LBB0_67;
// %bb.56:
	setp.gtu.f32 	%p104, %f907, 0f4B800000;
	@%p104 bra 	LBB0_63;
	bra.uni 	LBB0_57;
LBB0_63:
	mov.b32 	%r52, %f907;
	and.b32  	%r302, %r52, 8388607;
	or.b32  	%r2654, %r302, 1065353216;
	mov.b32 	%f906, %r2654;
	add.s32 	%r303, %r52, -1073741824;
	and.b32  	%r2655, %r303, -8388608;
	setp.eq.s32 	%p110, %r2655, 0;
	@%p110 bra 	LBB0_66;
// %bb.64:                              // %.lr.ph1818.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
LBB0_65:                                // %.lr.ph1818
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r304, %r2655, 192937984;
	add.s32 	%r305, %r304, %r2654;
	mov.b32 	%f579, %r305;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2655, %r2655, %r304;
	mov.b32 	%r2654, %f906;
	setp.ne.s32 	%p111, %r2655, 0;
	setp.ne.s32 	%p112, %r2654, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_65;
LBB0_66:                                // %__internal_fmodf_slowpath_mod.exit.i.i1116
	setp.gt.u32 	%p114, %r52, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	LBB0_67;
LBB0_57:                                // %__nv_fast_fdividef.exit.i.i.i1082
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f76, %f570;
	fma.rn.f32 	%f77, %f76, 0fC0000000, %f907;
	mov.b32 	%r51, %f77;
	setp.lt.u32 	%p105, %r51, 1073741824;
	mov.f32 	%f905, %f76;
	@%p105 bra 	LBB0_62;
// %bb.58:
	setp.lt.u32 	%p106, %r51, -2147483647;
	@%p106 bra 	LBB0_60;
// %bb.59:
	add.f32 	%f575, %f76, 0fBF800000;
	setp.lt.f32 	%p109, %f77, 0fC0000000;
	selp.f32 	%f576, %f575, %f76, %p109;
	add.f32 	%f905, %f576, 0fBF800000;
	bra.uni 	LBB0_62;
LBB0_60:
	add.f32 	%f905, %f76, 0f3F800000;
	setp.ltu.f32 	%p107, %f77, 0f40800000;
	@%p107 bra 	LBB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1087
	fma.rn.f32 	%f572, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p108, %f572, 0f00000000;
	selp.f32 	%f573, %f905, %f76, %p108;
	add.f32 	%f574, %f573, 0f3F800000;
	add.f32 	%f905, %f574, 0f3F800000;
LBB0_62:                                // %__internal_fmodf_fastpath_quot.exit.i.i1090
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_67:                                // %__internal_fmodf_kernel.exit.i1119
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p115, %f588, 0f7F800000;
	@%p115 bra 	LBB0_69;
// %bb.68:
	mov.b32 	%r306, %f74;
	and.b32  	%r307, %r306, -2147483648;
	mov.b32 	%r308, %f907;
	or.b32  	%r309, %r307, %r308;
	mov.b32 	%f907, %r309;
LBB0_69:                                // %__nv_fmodf.exit1122
	add.f32 	%f589, %f907, %f907;
	mov.b32 	%r310, %f589;
	and.b32  	%r311, %r310, -2147483648;
	or.b32  	%r312, %r311, 1056964608;
	mov.b32 	%f590, %r312;
	add.f32 	%f591, %f589, %f590;
	cvt.rzi.f32.f32 	%f592, %f591;
	abs.f32 	%f593, %f589;
	setp.gt.f32 	%p116, %f593, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p116;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p117, %f593, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p117;
	cvt.rzi.s32.f32 	%r313, %f596;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	mul.f32 	%f598, %f597, %f597;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	and.b32  	%r314, %r313, 1;
	setp.eq.b32 	%p118, %r314, 1;
	selp.f32 	%f608, %f606, %f607, %p118;
	selp.f32 	%f609, %f607, %f606, %p118;
	and.b32  	%r315, %r313, 2;
	setp.eq.s32 	%p119, %r315, 0;
	neg.f32 	%f610, %f608;
	selp.f32 	%f611, %f608, %f610, %p119;
	add.s32 	%r316, %r313, 1;
	and.b32  	%r317, %r316, 2;
	setp.eq.s32 	%p120, %r317, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f614, %f609, %f613, %p120;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.f32 	%p121, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f91, %f616, %f611, %p121;
	abs.f32 	%f617, %f907;
	setp.gt.f32 	%p122, %f617, 0f4B800000;
	add.f32 	%f618, %f91, 0f3F800000;
	and.b32  	%r318, %r12, 6;
	mov.u32 	%r319, -8;
	sub.s32 	%r320, %r319, %r318;
	mul.lo.s32 	%r321, %r50, %r320;
	cvt.rn.f32.s32 	%f619, %r321;
	div.approx.f32 	%f93, %f619, %f568;
	abs.f32 	%f911, %f93;
	setp.lt.f32 	%p123, %f911, 0f40000000;
	@%p123 bra 	LBB0_81;
// %bb.70:
	setp.gtu.f32 	%p124, %f911, 0f4B800000;
	@%p124 bra 	LBB0_77;
	bra.uni 	LBB0_71;
LBB0_77:
	mov.b32 	%r60, %f911;
	and.b32  	%r322, %r60, 8388607;
	or.b32  	%r2656, %r322, 1065353216;
	mov.b32 	%f910, %r2656;
	add.s32 	%r323, %r60, -1073741824;
	and.b32  	%r2657, %r323, -8388608;
	setp.eq.s32 	%p130, %r2657, 0;
	@%p130 bra 	LBB0_80;
// %bb.78:                              // %.lr.ph1808.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
LBB0_79:                                // %.lr.ph1808
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r324, %r2657, 192937984;
	add.s32 	%r325, %r324, %r2656;
	mov.b32 	%f631, %r325;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2657, %r2657, %r324;
	mov.b32 	%r2656, %f910;
	setp.ne.s32 	%p131, %r2657, 0;
	setp.ne.s32 	%p132, %r2656, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_79;
LBB0_80:                                // %__internal_fmodf_slowpath_mod.exit.i.i1169
	setp.gt.u32 	%p134, %r60, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	LBB0_81;
LBB0_71:                                // %__nv_fast_fdividef.exit.i.i.i1135
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f95, %f622;
	fma.rn.f32 	%f96, %f95, 0fC0000000, %f911;
	mov.b32 	%r59, %f96;
	setp.lt.u32 	%p125, %r59, 1073741824;
	mov.f32 	%f909, %f95;
	@%p125 bra 	LBB0_76;
// %bb.72:
	setp.lt.u32 	%p126, %r59, -2147483647;
	@%p126 bra 	LBB0_74;
// %bb.73:
	add.f32 	%f627, %f95, 0fBF800000;
	setp.lt.f32 	%p129, %f96, 0fC0000000;
	selp.f32 	%f628, %f627, %f95, %p129;
	add.f32 	%f909, %f628, 0fBF800000;
	bra.uni 	LBB0_76;
LBB0_74:
	add.f32 	%f909, %f95, 0f3F800000;
	setp.ltu.f32 	%p127, %f96, 0f40800000;
	@%p127 bra 	LBB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i1140
	fma.rn.f32 	%f624, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p128, %f624, 0f00000000;
	selp.f32 	%f625, %f909, %f95, %p128;
	add.f32 	%f626, %f625, 0f3F800000;
	add.f32 	%f909, %f626, 0f3F800000;
LBB0_76:                                // %__internal_fmodf_fastpath_quot.exit.i.i1143
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_81:                                // %__internal_fmodf_kernel.exit.i1172
	selp.f32 	%f92, %f618, %f614, %p122;
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p135, %f640, 0f7F800000;
	@%p135 bra 	LBB0_83;
// %bb.82:
	mov.b32 	%r326, %f93;
	and.b32  	%r327, %r326, -2147483648;
	mov.b32 	%r328, %f911;
	or.b32  	%r329, %r327, %r328;
	mov.b32 	%f911, %r329;
LBB0_83:                                // %__nv_fmodf.exit1175
	add.f32 	%f641, %f911, %f911;
	mov.b32 	%r342, %f641;
	and.b32  	%r343, %r342, -2147483648;
	or.b32  	%r344, %r343, 1056964608;
	mov.b32 	%f642, %r344;
	add.f32 	%f643, %f641, %f642;
	cvt.rzi.f32.f32 	%f644, %f643;
	abs.f32 	%f645, %f641;
	setp.gt.f32 	%p136, %f645, 0f4B000000;
	selp.f32 	%f646, %f641, %f644, %p136;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p137, %f645, 0f3F000000;
	selp.f32 	%f648, %f647, %f646, %p137;
	cvt.rzi.s32.f32 	%r345, %f648;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	and.b32  	%r346, %r345, 1;
	setp.eq.b32 	%p138, %r346, 1;
	selp.f32 	%f660, %f658, %f659, %p138;
	selp.f32 	%f661, %f659, %f658, %p138;
	and.b32  	%r347, %r345, 2;
	setp.eq.s32 	%p139, %r347, 0;
	neg.f32 	%f662, %f660;
	selp.f32 	%f663, %f660, %f662, %p139;
	add.s32 	%r348, %r345, 1;
	and.b32  	%r349, %r348, 2;
	setp.eq.s32 	%p140, %r349, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f666, %f661, %f665, %p140;
	cvt.rzi.f32.f32 	%f667, %f911;
	setp.eq.f32 	%p141, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	selp.f32 	%f669, %f668, %f663, %p141;
	abs.f32 	%f670, %f911;
	setp.gt.f32 	%p142, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	selp.f32 	%f672, %f671, %f666, %p142;
	mov.b32 	%r332, %f672;
	mov.b32 	%r331, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r67, %r332, %r331;
	// end inline asm
	mov.b32 	%r338, %f669;
	xor.b32  	%r335, %r338, -2147483648;
	mov.b32 	%r337, %f91;
	xor.b32  	%r334, %r337, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r68, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r69, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r70, %r332, %r331;
	// end inline asm
	mov.u64 	%rd226, 2;
	mov.u64 	%rd225, -2;
LBB0_84:                                // %L1276.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd226, %rd226, %rd226;
	add.s64 	%rd12, %rd225, 1;
	setp.ge.u64 	%p143, %rd12, %rd225;
	mov.u64 	%rd225, %rd12;
	@%p143 bra 	LBB0_84;
// %bb.85:                              // %L1283
	and.b64  	%rd107, %rd226, 9223372036854775807;
	setp.ne.s64 	%p144, %rd107, 16;
	@%p144 bra 	LBB0_131;
// %bb.86:                              // %L1285
	shl.b32 	%r350, %r16, 1;
	neg.s32 	%r71, %r350;
	mov.u64 	%rd228, 2;
	mov.u64 	%rd227, -2;
LBB0_87:                                // %L1352.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd228, %rd228, %rd228;
	add.s64 	%rd16, %rd227, 1;
	setp.ge.u64 	%p145, %rd16, %rd227;
	mov.u64 	%rd227, %rd16;
	@%p145 bra 	LBB0_87;
// %bb.88:                              // %L1359
	mul.lo.s32 	%r72, %r71, %r50;
	cvt.rn.f32.s32 	%f673, %r72;
	shl.b64 	%rd112, %rd228, 1;
	cvt.rn.f32.s64 	%f674, %rd112;
	div.approx.f32 	%f110, %f673, %f674;
	abs.f32 	%f915, %f110;
	setp.lt.f32 	%p146, %f915, 0f40000000;
	@%p146 bra 	LBB0_100;
// %bb.89:
	setp.gtu.f32 	%p147, %f915, 0f4B800000;
	@%p147 bra 	LBB0_96;
	bra.uni 	LBB0_90;
LBB0_96:
	mov.b32 	%r74, %f915;
	and.b32  	%r351, %r74, 8388607;
	or.b32  	%r2658, %r351, 1065353216;
	mov.b32 	%f914, %r2658;
	add.s32 	%r352, %r74, -1073741824;
	and.b32  	%r2659, %r352, -8388608;
	setp.eq.s32 	%p153, %r2659, 0;
	@%p153 bra 	LBB0_99;
// %bb.97:                              // %.lr.ph1793.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
LBB0_98:                                // %.lr.ph1793
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r2659, 192937984;
	add.s32 	%r354, %r353, %r2658;
	mov.b32 	%f685, %r354;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2659, %r2659, %r353;
	mov.b32 	%r2658, %f914;
	setp.ne.s32 	%p154, %r2659, 0;
	setp.ne.s32 	%p155, %r2658, 0;
	and.pred  	%p156, %p154, %p155;
	@%p156 bra 	LBB0_98;
LBB0_99:                                // %__internal_fmodf_slowpath_mod.exit.i.i1222
	setp.gt.u32 	%p157, %r74, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p157;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	LBB0_100;
LBB0_90:                                // %__nv_fast_fdividef.exit.i.i.i1188
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f112, %f676;
	fma.rn.f32 	%f113, %f112, 0fC0000000, %f915;
	mov.b32 	%r73, %f113;
	setp.lt.u32 	%p148, %r73, 1073741824;
	mov.f32 	%f913, %f112;
	@%p148 bra 	LBB0_95;
// %bb.91:
	setp.lt.u32 	%p149, %r73, -2147483647;
	@%p149 bra 	LBB0_93;
// %bb.92:
	add.f32 	%f681, %f112, 0fBF800000;
	setp.lt.f32 	%p152, %f113, 0fC0000000;
	selp.f32 	%f682, %f681, %f112, %p152;
	add.f32 	%f913, %f682, 0fBF800000;
	bra.uni 	LBB0_95;
LBB0_93:
	add.f32 	%f913, %f112, 0f3F800000;
	setp.ltu.f32 	%p150, %f113, 0f40800000;
	@%p150 bra 	LBB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i1193
	fma.rn.f32 	%f678, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p151, %f678, 0f00000000;
	selp.f32 	%f679, %f913, %f112, %p151;
	add.f32 	%f680, %f679, 0f3F800000;
	add.f32 	%f913, %f680, 0f3F800000;
LBB0_95:                                // %__internal_fmodf_fastpath_quot.exit.i.i1196
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_100:                               // %__internal_fmodf_kernel.exit.i1225
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p158, %f694, 0f7F800000;
	@%p158 bra 	LBB0_102;
// %bb.101:
	mov.b32 	%r355, %f110;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f915;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f915, %r358;
LBB0_102:                               // %__nv_fmodf.exit1228
	add.f32 	%f695, %f915, %f915;
	mov.b32 	%r359, %f695;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f696, %r361;
	add.f32 	%f697, %f695, %f696;
	cvt.rzi.f32.f32 	%f698, %f697;
	abs.f32 	%f699, %f695;
	setp.gt.f32 	%p159, %f699, 0f4B000000;
	selp.f32 	%f700, %f695, %f698, %p159;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p160, %f699, 0f3F000000;
	selp.f32 	%f702, %f701, %f700, %p160;
	cvt.rzi.s32.f32 	%r362, %f702;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p161, %r363, 1;
	selp.f32 	%f714, %f712, %f713, %p161;
	selp.f32 	%f715, %f713, %f712, %p161;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p162, %r364, 0;
	neg.f32 	%f716, %f714;
	selp.f32 	%f717, %f714, %f716, %p162;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p163, %r366, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f720, %f715, %f719, %p163;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.f32 	%p164, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f127, %f722, %f717, %p164;
	abs.f32 	%f723, %f915;
	setp.gt.f32 	%p165, %f723, 0f4B800000;
	add.f32 	%f724, %f127, 0f3F800000;
	selp.f32 	%f128, %f724, %f720, %p165;
	mov.u64 	%rd230, 2;
	mov.u64 	%rd229, -2;
LBB0_103:                               // %L1394.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd230, %rd230, %rd230;
	add.s64 	%rd20, %rd229, 1;
	setp.ge.u64 	%p166, %rd20, %rd229;
	mov.u64 	%rd229, %rd20;
	@%p166 bra 	LBB0_103;
// %bb.104:                             // %L1401
	shl.b32 	%r367, %r50, 2;
	sub.s32 	%r368, %r72, %r367;
	cvt.rn.f32.s32 	%f725, %r368;
	shl.b64 	%rd115, %rd230, 1;
	cvt.rn.f32.s64 	%f726, %rd115;
	div.approx.f32 	%f129, %f725, %f726;
	abs.f32 	%f919, %f129;
	setp.lt.f32 	%p167, %f919, 0f40000000;
	@%p167 bra 	LBB0_116;
// %bb.105:
	setp.gtu.f32 	%p168, %f919, 0f4B800000;
	@%p168 bra 	LBB0_112;
	bra.uni 	LBB0_106;
LBB0_112:
	mov.b32 	%r82, %f919;
	and.b32  	%r369, %r82, 8388607;
	or.b32  	%r2660, %r369, 1065353216;
	mov.b32 	%f918, %r2660;
	add.s32 	%r370, %r82, -1073741824;
	and.b32  	%r2661, %r370, -8388608;
	setp.eq.s32 	%p174, %r2661, 0;
	@%p174 bra 	LBB0_115;
// %bb.113:                             // %.lr.ph1783.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
LBB0_114:                               // %.lr.ph1783
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r2661, 192937984;
	add.s32 	%r372, %r371, %r2660;
	mov.b32 	%f737, %r372;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2661, %r2661, %r371;
	mov.b32 	%r2660, %f918;
	setp.ne.s32 	%p175, %r2661, 0;
	setp.ne.s32 	%p176, %r2660, 0;
	and.pred  	%p177, %p175, %p176;
	@%p177 bra 	LBB0_114;
LBB0_115:                               // %__internal_fmodf_slowpath_mod.exit.i.i1275
	setp.gt.u32 	%p178, %r82, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p178;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	LBB0_116;
LBB0_106:                               // %__nv_fast_fdividef.exit.i.i.i1241
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f131, %f728;
	fma.rn.f32 	%f132, %f131, 0fC0000000, %f919;
	mov.b32 	%r81, %f132;
	setp.lt.u32 	%p169, %r81, 1073741824;
	mov.f32 	%f917, %f131;
	@%p169 bra 	LBB0_111;
// %bb.107:
	setp.lt.u32 	%p170, %r81, -2147483647;
	@%p170 bra 	LBB0_109;
// %bb.108:
	add.f32 	%f733, %f131, 0fBF800000;
	setp.lt.f32 	%p173, %f132, 0fC0000000;
	selp.f32 	%f734, %f733, %f131, %p173;
	add.f32 	%f917, %f734, 0fBF800000;
	bra.uni 	LBB0_111;
LBB0_109:
	add.f32 	%f917, %f131, 0f3F800000;
	setp.ltu.f32 	%p171, %f132, 0f40800000;
	@%p171 bra 	LBB0_111;
// %bb.110:                             // %__nv_fmaf_rn.exit.i.i.i1246
	fma.rn.f32 	%f730, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p172, %f730, 0f00000000;
	selp.f32 	%f731, %f917, %f131, %p172;
	add.f32 	%f732, %f731, 0f3F800000;
	add.f32 	%f917, %f732, 0f3F800000;
LBB0_111:                               // %__internal_fmodf_fastpath_quot.exit.i.i1249
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_116:                               // %__internal_fmodf_kernel.exit.i1278
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p179, %f746, 0f7F800000;
	@%p179 bra 	LBB0_118;
// %bb.117:
	mov.b32 	%r373, %f129;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f919;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f919, %r376;
LBB0_118:                               // %__nv_fmodf.exit1281
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r383, %f747;
	and.b32  	%r384, %r383, -2147483648;
	or.b32  	%r385, %r384, 1056964608;
	mov.b32 	%f748, %r385;
	add.f32 	%f749, %f747, %f748;
	cvt.rzi.f32.f32 	%f750, %f749;
	abs.f32 	%f751, %f747;
	setp.gt.f32 	%p180, %f751, 0f4B000000;
	selp.f32 	%f752, %f747, %f750, %p180;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p181, %f751, 0f3F000000;
	selp.f32 	%f754, %f753, %f752, %p181;
	cvt.rzi.s32.f32 	%r386, %f754;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	and.b32  	%r387, %r386, 1;
	setp.eq.b32 	%p182, %r387, 1;
	selp.f32 	%f766, %f764, %f765, %p182;
	selp.f32 	%f767, %f765, %f764, %p182;
	and.b32  	%r388, %r386, 2;
	setp.eq.s32 	%p183, %r388, 0;
	neg.f32 	%f768, %f766;
	selp.f32 	%f769, %f766, %f768, %p183;
	add.s32 	%r389, %r386, 1;
	and.b32  	%r390, %r389, 2;
	setp.eq.s32 	%p184, %r390, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f772, %f767, %f771, %p184;
	cvt.rzi.f32.f32 	%f773, %f919;
	setp.eq.f32 	%p185, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	selp.f32 	%f775, %f774, %f769, %p185;
	abs.f32 	%f776, %f919;
	setp.gt.f32 	%p186, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	selp.f32 	%f778, %f777, %f772, %p186;
	mov.b32 	%r379, %f778;
	mov.b32 	%r378, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r89, %r379, %r378;
	// end inline asm
	mov.b32 	%r382, %f775;
	mov.b32 	%r381, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r90, %r382, %r381;
	// end inline asm
	mov.u64 	%rd232, 2;
	mov.u64 	%rd231, -2;
LBB0_119:                               // %L1440.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd232, %rd232, %rd232;
	add.s64 	%rd24, %rd231, 1;
	setp.ge.u64 	%p187, %rd24, %rd231;
	mov.u64 	%rd231, %rd24;
	@%p187 bra 	LBB0_119;
// %bb.120:                             // %L1447
	and.b64  	%rd118, %rd232, 9223372036854775807;
	setp.ne.s64 	%p188, %rd118, 16;
	@%p188 bra 	LBB0_130;
// %bb.121:                             // %L1449
	mul.lo.s32 	%r92, %r71, %r49;
	cvt.rn.f32.s32 	%f779, %r92;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f146, %f779, %f780;
	abs.f32 	%f923, %f146;
	setp.lt.f32 	%p189, %f923, 0f40000000;
	@%p189 bra 	LBB0_140;
// %bb.122:
	setp.gtu.f32 	%p190, %f923, 0f4B800000;
	@%p190 bra 	LBB0_136;
	bra.uni 	LBB0_123;
LBB0_136:
	mov.b32 	%r114, %f923;
	and.b32  	%r391, %r114, 8388607;
	or.b32  	%r2676, %r391, 1065353216;
	mov.b32 	%f922, %r2676;
	add.s32 	%r392, %r114, -1073741824;
	and.b32  	%r2677, %r392, -8388608;
	setp.eq.s32 	%p196, %r2677, 0;
	@%p196 bra 	LBB0_139;
// %bb.137:                             // %.lr.ph1773.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
LBB0_138:                               // %.lr.ph1773
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r2677, 192937984;
	add.s32 	%r394, %r393, %r2676;
	mov.b32 	%f791, %r394;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f922, %f791, %f797;
	sub.s32 	%r2677, %r2677, %r393;
	mov.b32 	%r2676, %f922;
	setp.ne.s32 	%p197, %r2677, 0;
	setp.ne.s32 	%p198, %r2676, 0;
	and.pred  	%p199, %p197, %p198;
	@%p199 bra 	LBB0_138;
LBB0_139:                               // %__internal_fmodf_slowpath_mod.exit.i.i1328
	setp.gt.u32 	%p200, %r114, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p200;
	mul.f32 	%f799, %f922, 0f34000000;
	mul.f32 	%f923, %f798, %f799;
	bra.uni 	LBB0_140;
LBB0_123:                               // %__nv_fast_fdividef.exit.i.i.i1294
	div.approx.f32 	%f782, %f923, %f184;
	cvt.rzi.f32.f32 	%f148, %f782;
	fma.rn.f32 	%f149, %f148, 0fC0000000, %f923;
	mov.b32 	%r113, %f149;
	setp.lt.u32 	%p191, %r113, 1073741824;
	mov.f32 	%f921, %f148;
	@%p191 bra 	LBB0_135;
// %bb.124:
	setp.lt.u32 	%p192, %r113, -2147483647;
	@%p192 bra 	LBB0_133;
// %bb.125:
	add.f32 	%f787, %f148, 0fBF800000;
	setp.lt.f32 	%p195, %f149, 0fC0000000;
	selp.f32 	%f788, %f787, %f148, %p195;
	add.f32 	%f921, %f788, 0fBF800000;
	bra.uni 	LBB0_135;
LBB0_133:
	add.f32 	%f921, %f148, 0f3F800000;
	setp.ltu.f32 	%p193, %f149, 0f40800000;
	@%p193 bra 	LBB0_135;
// %bb.134:                             // %__nv_fmaf_rn.exit.i.i.i1299
	fma.rn.f32 	%f784, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p194, %f784, 0f00000000;
	selp.f32 	%f785, %f921, %f148, %p194;
	add.f32 	%f786, %f785, 0f3F800000;
	add.f32 	%f921, %f786, 0f3F800000;
LBB0_135:                               // %__internal_fmodf_fastpath_quot.exit.i.i1302
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_140:                               // %__internal_fmodf_kernel.exit.i1331
	abs.f32 	%f800, %f923;
	setp.gtu.f32 	%p201, %f800, 0f7F800000;
	@%p201 bra 	LBB0_142;
// %bb.141:
	mov.b32 	%r395, %f146;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f923;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f923, %r398;
LBB0_142:                               // %__nv_fmodf.exit1334
	shl.b32 	%r407, %r49, 2;
	sub.s32 	%r408, %r92, %r407;
	cvt.rn.f32.s32 	%f833, %r408;
	div.approx.f32 	%f166, %f833, %f780;
	abs.f32 	%f927, %f166;
	setp.lt.f32 	%p210, %f927, 0f40000000;
	@%p210 bra 	LBB0_154;
// %bb.143:
	setp.gtu.f32 	%p211, %f927, 0f4B800000;
	@%p211 bra 	LBB0_150;
	bra.uni 	LBB0_144;
LBB0_150:
	mov.b32 	%r122, %f927;
	and.b32  	%r409, %r122, 8388607;
	or.b32  	%r2678, %r409, 1065353216;
	mov.b32 	%f926, %r2678;
	add.s32 	%r410, %r122, -1073741824;
	and.b32  	%r2679, %r410, -8388608;
	setp.eq.s32 	%p217, %r2679, 0;
	@%p217 bra 	LBB0_153;
// %bb.151:                             // %.lr.ph.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
LBB0_152:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r411, %r2679, 192937984;
	add.s32 	%r412, %r411, %r2678;
	mov.b32 	%f845, %r412;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f926, %f845, %f851;
	sub.s32 	%r2679, %r2679, %r411;
	mov.b32 	%r2678, %f926;
	setp.ne.s32 	%p218, %r2679, 0;
	setp.ne.s32 	%p219, %r2678, 0;
	and.pred  	%p220, %p218, %p219;
	@%p220 bra 	LBB0_152;
LBB0_153:                               // %__internal_fmodf_slowpath_mod.exit.i.i1381
	setp.gt.u32 	%p221, %r122, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p221;
	mul.f32 	%f853, %f926, 0f34000000;
	mul.f32 	%f927, %f852, %f853;
	bra.uni 	LBB0_154;
LBB0_144:                               // %__nv_fast_fdividef.exit.i.i.i1347
	div.approx.f32 	%f836, %f927, %f184;
	cvt.rzi.f32.f32 	%f168, %f836;
	fma.rn.f32 	%f169, %f168, 0fC0000000, %f927;
	mov.b32 	%r121, %f169;
	setp.lt.u32 	%p212, %r121, 1073741824;
	mov.f32 	%f925, %f168;
	@%p212 bra 	LBB0_149;
// %bb.145:
	setp.lt.u32 	%p213, %r121, -2147483647;
	@%p213 bra 	LBB0_147;
// %bb.146:
	add.f32 	%f841, %f168, 0fBF800000;
	setp.lt.f32 	%p216, %f169, 0fC0000000;
	selp.f32 	%f842, %f841, %f168, %p216;
	add.f32 	%f925, %f842, 0fBF800000;
	bra.uni 	LBB0_149;
LBB0_147:
	add.f32 	%f925, %f168, 0f3F800000;
	setp.ltu.f32 	%p214, %f169, 0f40800000;
	@%p214 bra 	LBB0_149;
// %bb.148:                             // %__nv_fmaf_rn.exit.i.i.i1352
	fma.rn.f32 	%f838, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p215, %f838, 0f00000000;
	selp.f32 	%f839, %f925, %f168, %p215;
	add.f32 	%f840, %f839, 0f3F800000;
	add.f32 	%f925, %f840, 0f3F800000;
LBB0_149:                               // %__internal_fmodf_fastpath_quot.exit.i.i1355
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_154:                               // %__internal_fmodf_kernel.exit.i1384
	abs.f32 	%f854, %f927;
	setp.gtu.f32 	%p222, %f854, 0f7F800000;
	@%p222 bra 	LBB0_156;
// %bb.155:
	mov.b32 	%r413, %f166;
	and.b32  	%r414, %r413, -2147483648;
	mov.b32 	%r415, %f927;
	or.b32  	%r416, %r414, %r415;
	mov.b32 	%f927, %r416;
LBB0_156:                               // %__nv_fmodf.exit1387
	setp.le.s32 	%p230, %r6, %r5;
	mov.u32 	%r2648, 0;
	@%p230 bra 	LBB0_160;
// %bb.157:                             // %L1571.lr.ph
	add.f32 	%f801, %f923, %f923;
	mov.b32 	%r399, %f801;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f802, %r401;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p203, %f805, 0f4B000000;
	selp.f32 	%f806, %f801, %f804, %p203;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p204, %f805, 0f3F000000;
	selp.f32 	%f808, %f807, %f806, %p204;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f923;
	mul.f32 	%f810, %f809, %f809;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r402, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r403, %r402, 1;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p205, %r403, 1;
	selp.f32 	%f820, %f818, %f819, %p205;
	and.b32  	%r404, %r402, 2;
	setp.eq.s32 	%p206, %r404, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f827, %f923;
	selp.f32 	%f821, %f819, %f818, %p205;
	selp.f32 	%f823, %f820, %f822, %p206;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p208, %f827, %f923;
	mul.f32 	%f828, %f923, 0f00000000;
	and.b32  	%r91, %r48, 1;
	setp.eq.s32 	%p207, %r406, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p208;
	abs.f32 	%f830, %f923;
	setp.eq.s32 	%p202, %r91, %r17;
	selp.f32 	%f826, %f821, %f825, %p207;
	setp.gt.f32 	%p209, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	selp.f32 	%f832, %f831, %f826, %p209;
	selp.f32 	%f163, 0f3F800000, 0f00000000, %p202;
	mul.f32 	%f164, %f832, %f163;
	mul.f32 	%f165, %f829, %f163;
	add.f32 	%f855, %f927, %f927;
	mov.b32 	%r429, %f855;
	and.b32  	%r430, %r429, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%f856, %r431;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p223, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p223;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p224, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p224;
	cvt.rzi.s32.f32 	%r432, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f927;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r433, %r432, 1;
	setp.eq.b32 	%p225, %r433, 1;
	selp.f32 	%f874, %f872, %f873, %p225;
	selp.f32 	%f875, %f873, %f872, %p225;
	and.b32  	%r434, %r432, 2;
	setp.eq.s32 	%p226, %r434, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p226;
	add.s32 	%r435, %r432, 1;
	and.b32  	%r436, %r435, 2;
	setp.eq.s32 	%p227, %r436, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p227;
	cvt.rzi.f32.f32 	%f881, %f927;
	setp.eq.f32 	%p228, %f881, %f927;
	mul.f32 	%f882, %f927, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p228;
	abs.f32 	%f884, %f927;
	setp.gt.f32 	%p229, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p229;
	mul.f32 	%f887, %f886, %f163;
	mul.f32 	%f888, %f883, %f163;
	mov.b32 	%r419, %f887;
	mov.b32 	%r418, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r417, %r419, %r418;
	// end inline asm
	mov.b32 	%r425, %f888;
	xor.b32  	%r422, %r425, -2147483648;
	mov.b32 	%r424, %f165;
	xor.b32  	%r421, %r424, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r419, %r418;
	// end inline asm
	shl.b32 	%r438, %r5, 12;
	and.b32  	%r439, %r9, 16;
	and.b32  	%r133, %r9, 12;
	shl.b32 	%r440, %r3, 10;
	and.b32  	%r441, %r440, 3072;
	and.b32  	%r134, %r12, 16;
	and.b32  	%r135, %r15, 8;
	and.b32  	%r136, %r1, 7;
	shl.b32 	%r442, %r1, 2;
	and.b32  	%r137, %r442, 32;
	or.b32  	%r443, %r439, %r438;
	or.b32  	%r444, %r443, %r133;
	or.b32  	%r138, %r444, %r441;
	add.s32 	%r139, %r138, 262144;
	add.s32 	%r140, %r138, 524288;
	add.s32 	%r141, %r138, 786432;
	and.b32  	%r142, %r4, 8;
	and.b32  	%r445, %r1, 1;
	mul.lo.s32 	%r446, %r445, 520;
	bfe.u32 	%r447, %r1, 2, 1;
	shr.u32 	%r448, %r1, 3;
	mul.lo.s32 	%r449, %r448, 1057;
	shr.u32 	%r450, %r1, 1;
	bfe.u32 	%r451, %r1, 1, 1;
	mul.lo.s32 	%r452, %r451, 260;
	shl.b32 	%r453, %r4, 4;
	or.b32  	%r454, %r453, %r142;
	shr.u32 	%r455, %r454, 2;
	and.b32  	%r456, %r455, 14;
	mad.lo.s32 	%r457, %r447, 130, %r446;
	mad.lo.s32 	%r458, %r19, 65, %r457;
	add.s32 	%r459, %r458, %r449;
	add.s32 	%r460, %r459, %r439;
	add.s32 	%r461, %r460, %r452;
	add.s32 	%r462, %r461, %r456;
	mul.wide.u32 	%rd121, %r462, 4;
	mov.u64 	%rd122, shmem;
	add.s64 	%rd37, %rd122, %rd121;
	add.s32 	%r463, %r458, 32;
	add.s32 	%r464, %r463, %r449;
	add.s32 	%r465, %r464, %r439;
	add.s32 	%r466, %r465, %r452;
	add.s32 	%r467, %r466, %r456;
	mul.wide.u32 	%rd123, %r467, 4;
	add.s64 	%rd38, %rd122, %rd123;
	add.s32 	%r468, %r458, 1;
	add.s32 	%r469, %r468, %r449;
	add.s32 	%r470, %r469, %r439;
	add.s32 	%r471, %r470, %r452;
	add.s32 	%r472, %r471, %r456;
	mul.wide.u32 	%rd124, %r472, 4;
	add.s64 	%rd39, %rd122, %rd124;
	add.s32 	%r473, %r458, 33;
	add.s32 	%r474, %r473, %r449;
	add.s32 	%r475, %r474, %r439;
	add.s32 	%r476, %r475, %r452;
	add.s32 	%r477, %r476, %r456;
	mul.wide.u32 	%rd125, %r477, 4;
	add.s64 	%rd40, %rd122, %rd125;
	or.b32  	%r478, %r448, 2;
	mul.lo.s32 	%r479, %r478, 1057;
	add.s32 	%r480, %r458, %r479;
	add.s32 	%r481, %r480, %r439;
	add.s32 	%r482, %r481, %r452;
	add.s32 	%r483, %r482, %r456;
	mul.wide.s32 	%rd126, %r483, 4;
	add.s64 	%rd41, %rd122, %rd126;
	add.s32 	%r484, %r463, %r479;
	add.s32 	%r485, %r484, %r439;
	add.s32 	%r486, %r485, %r452;
	add.s32 	%r487, %r486, %r456;
	mul.wide.s32 	%rd127, %r487, 4;
	add.s64 	%rd42, %rd122, %rd127;
	add.s32 	%r488, %r468, %r479;
	add.s32 	%r489, %r488, %r439;
	add.s32 	%r490, %r489, %r452;
	add.s32 	%r491, %r490, %r456;
	mul.wide.s32 	%rd128, %r491, 4;
	add.s64 	%rd43, %rd122, %rd128;
	add.s32 	%r492, %r473, %r479;
	add.s32 	%r493, %r492, %r439;
	add.s32 	%r494, %r493, %r452;
	add.s32 	%r495, %r494, %r456;
	mul.wide.s32 	%rd129, %r495, 4;
	add.s64 	%rd44, %rd122, %rd129;
	or.b32  	%r496, %r448, 4;
	mul.lo.s32 	%r497, %r496, 1057;
	add.s32 	%r498, %r458, %r497;
	add.s32 	%r499, %r498, %r439;
	add.s32 	%r500, %r499, %r452;
	add.s32 	%r501, %r500, %r456;
	mul.wide.s32 	%rd130, %r501, 4;
	add.s64 	%rd45, %rd122, %rd130;
	add.s32 	%r502, %r463, %r497;
	add.s32 	%r503, %r502, %r439;
	add.s32 	%r504, %r503, %r452;
	add.s32 	%r505, %r504, %r456;
	mul.wide.s32 	%rd131, %r505, 4;
	add.s64 	%rd46, %rd122, %rd131;
	add.s32 	%r506, %r468, %r497;
	add.s32 	%r507, %r506, %r439;
	add.s32 	%r508, %r507, %r452;
	add.s32 	%r509, %r508, %r456;
	mul.wide.s32 	%rd132, %r509, 4;
	add.s64 	%rd47, %rd122, %rd132;
	add.s32 	%r510, %r473, %r497;
	add.s32 	%r511, %r510, %r439;
	add.s32 	%r512, %r511, %r452;
	add.s32 	%r513, %r512, %r456;
	mul.wide.s32 	%rd133, %r513, 4;
	add.s64 	%rd48, %rd122, %rd133;
	or.b32  	%r514, %r448, 6;
	mul.lo.s32 	%r515, %r514, 1057;
	add.s32 	%r516, %r458, %r515;
	add.s32 	%r517, %r516, %r439;
	add.s32 	%r518, %r517, %r452;
	add.s32 	%r519, %r518, %r456;
	mul.wide.s32 	%rd134, %r519, 4;
	add.s64 	%rd49, %rd122, %rd134;
	add.s32 	%r520, %r463, %r515;
	add.s32 	%r521, %r520, %r439;
	add.s32 	%r522, %r521, %r452;
	add.s32 	%r523, %r522, %r456;
	mul.wide.s32 	%rd135, %r523, 4;
	add.s64 	%rd50, %rd122, %rd135;
	add.s32 	%r524, %r468, %r515;
	add.s32 	%r525, %r524, %r439;
	add.s32 	%r526, %r525, %r452;
	add.s32 	%r527, %r526, %r456;
	mul.wide.s32 	%rd136, %r527, 4;
	add.s64 	%rd51, %rd122, %rd136;
	add.s32 	%r528, %r473, %r515;
	add.s32 	%r529, %r528, %r439;
	add.s32 	%r530, %r529, %r452;
	add.s32 	%r531, %r530, %r456;
	mul.wide.s32 	%rd137, %r531, 4;
	add.s64 	%rd52, %rd122, %rd137;
	mul.lo.s32 	%r532, %r19, 520;
	mul.lo.s32 	%r533, %r17, 130;
	mul.lo.s32 	%r534, %r16, 65;
	mul.lo.s32 	%r535, %r18, 260;
	and.b32  	%r536, %r2, 32;
	or.b32  	%r537, %r450, 8;
	cvt.u16.u32 	%rs1, %r4;
	shr.u16 	%rs2, %rs1, 8;
	shl.b16 	%rs3, %rs1, 8;
	or.b16  	%rs4, %rs3, %rs2;
	shl.b16 	%rs5, %rs4, 4;
	shl.b16 	%rs6, %rs1, 4;
	and.b16  	%rs7, %rs6, 768;
	or.b16  	%rs8, %rs7, %rs5;
	and.b16  	%rs9, %rs8, 13104;
	shl.b16 	%rs10, %rs9, 3;
	shl.b16 	%rs11, %rs9, 1;
	and.b16  	%rs12, %rs11, 16384;
	or.b16  	%rs13, %rs12, %rs10;
	shr.u16 	%rs14, %rs13, 13;
	cvt.u32.u16 	%r538, %rs14;
	or.b32  	%r539, %r11, %r538;
	or.b32  	%r540, %r539, %r13;
	shr.u32 	%r541, %r540, 1;
	mul.lo.s32 	%r542, %r541, 65;
	shl.b32 	%r543, %r1, 1;
	and.b32  	%r544, %r543, 14;
	or.b32  	%r545, %r19, %r544;
	mul.lo.s32 	%r546, %r545, 65;
	add.s32 	%r547, %r449, %r546;
	add.s32 	%r548, %r547, %r439;
	add.s32 	%r549, %r548, %r456;
	mul.wide.u32 	%rd138, %r549, 4;
	add.s64 	%rd53, %rd122, %rd138;
	add.s32 	%r550, %r546, 32;
	add.s32 	%r551, %r550, %r449;
	add.s32 	%r552, %r551, %r439;
	add.s32 	%r553, %r552, %r456;
	mul.wide.s32 	%rd139, %r553, 4;
	add.s64 	%rd54, %rd122, %rd139;
	cvt.u64.u32 	%rd140, %r456;
	cvt.u64.u32 	%rd141, %r439;
	cvt.u64.u32 	%rd142, %r449;
	cvt.u64.u32 	%rd143, %r546;
	add.s64 	%rd144, %rd143, %rd142;
	add.s64 	%rd145, %rd144, %rd141;
	add.s64 	%rd146, %rd145, %rd140;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd55, %rd122, %rd147;
	add.s32 	%r554, %r546, 33;
	add.s32 	%r555, %r554, %r449;
	add.s32 	%r556, %r555, %r439;
	add.s32 	%r557, %r556, %r456;
	mul.wide.s32 	%rd148, %r557, 4;
	add.s64 	%rd56, %rd122, %rd148;
	add.s32 	%r558, %r479, %r546;
	add.s32 	%r559, %r558, %r439;
	add.s32 	%r560, %r559, %r456;
	mul.wide.u32 	%rd149, %r560, 4;
	add.s64 	%rd57, %rd122, %rd149;
	add.s32 	%r561, %r550, %r479;
	add.s32 	%r562, %r561, %r439;
	add.s32 	%r563, %r562, %r456;
	mul.wide.s32 	%rd150, %r563, 4;
	add.s64 	%rd58, %rd122, %rd150;
	cvt.u64.u32 	%rd151, %r479;
	add.s64 	%rd152, %rd143, %rd151;
	add.s64 	%rd153, %rd152, %rd141;
	add.s64 	%rd154, %rd153, %rd140;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd59, %rd122, %rd155;
	add.s32 	%r564, %r554, %r479;
	add.s32 	%r565, %r564, %r439;
	add.s32 	%r566, %r565, %r456;
	mul.wide.s32 	%rd156, %r566, 4;
	add.s64 	%rd60, %rd122, %rd156;
	add.s32 	%r567, %r497, %r546;
	add.s32 	%r568, %r567, %r439;
	add.s32 	%r569, %r568, %r456;
	mul.wide.u32 	%rd157, %r569, 4;
	add.s64 	%rd61, %rd122, %rd157;
	add.s32 	%r570, %r550, %r497;
	add.s32 	%r571, %r570, %r439;
	add.s32 	%r572, %r571, %r456;
	mul.wide.s32 	%rd158, %r572, 4;
	add.s64 	%rd62, %rd122, %rd158;
	cvt.u64.u32 	%rd159, %r497;
	add.s64 	%rd160, %rd143, %rd159;
	add.s64 	%rd161, %rd160, %rd141;
	add.s64 	%rd162, %rd161, %rd140;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd63, %rd122, %rd163;
	add.s32 	%r573, %r554, %r497;
	add.s32 	%r574, %r573, %r439;
	add.s32 	%r575, %r574, %r456;
	mul.wide.s32 	%rd164, %r575, 4;
	add.s64 	%rd64, %rd122, %rd164;
	add.s32 	%r576, %r515, %r546;
	add.s32 	%r577, %r576, %r439;
	add.s32 	%r578, %r577, %r456;
	mul.wide.u32 	%rd165, %r578, 4;
	add.s64 	%rd65, %rd122, %rd165;
	add.s32 	%r579, %r550, %r515;
	add.s32 	%r580, %r579, %r439;
	add.s32 	%r581, %r580, %r456;
	mul.wide.s32 	%rd166, %r581, 4;
	add.s64 	%rd66, %rd122, %rd166;
	cvt.u64.u32 	%rd167, %r515;
	add.s64 	%rd168, %rd143, %rd167;
	add.s64 	%rd169, %rd168, %rd141;
	add.s64 	%rd170, %rd169, %rd140;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd67, %rd122, %rd171;
	add.s32 	%r582, %r554, %r515;
	add.s32 	%r583, %r582, %r439;
	add.s32 	%r584, %r583, %r456;
	mul.wide.s32 	%rd172, %r584, 4;
	add.s64 	%rd68, %rd122, %rd172;
	and.b32  	%r143, %r1, 8;
	shl.b32 	%r585, %r7, 17;
	add.s32 	%r586, %r585, -393216;
	and.b32  	%r587, %r442, 28;
	or.b32  	%r588, %r10, %r587;
	or.b32  	%r589, %r48, %r588;
	shl.b32 	%r590, %r589, 5;
	shl.b32 	%r591, %r1, 14;
	and.b32  	%r144, %r591, 131072;
	or.b32  	%r145, %r590, %r439;
	cvt.s64.s32 	%rd69, %r586;
	add.s32 	%r592, %r537, %r542;
	add.s32 	%r593, %r592, %r536;
	add.s32 	%r594, %r593, %r134;
	mul.wide.u32 	%rd173, %r594, 4;
	add.s64 	%rd70, %rd122, %rd173;
	add.s32 	%r595, %r450, %r542;
	add.s32 	%r596, %r595, %r536;
	add.s32 	%r597, %r596, %r134;
	mul.wide.u32 	%rd174, %r597, 4;
	add.s64 	%rd71, %rd122, %rd174;
	add.s32 	%r598, %r537, %r532;
	add.s32 	%r599, %r598, %r535;
	add.s32 	%r600, %r599, %r533;
	add.s32 	%r601, %r600, %r534;
	add.s32 	%r602, %r601, %r536;
	add.s32 	%r603, %r602, %r134;
	mul.wide.u32 	%rd175, %r603, 4;
	add.s64 	%rd72, %rd122, %rd175;
	add.s32 	%r604, %r450, %r532;
	add.s32 	%r605, %r604, %r535;
	add.s32 	%r606, %r605, %r533;
	add.s32 	%r607, %r606, %r534;
	add.s32 	%r608, %r607, %r536;
	add.s32 	%r609, %r608, %r134;
	mul.wide.u32 	%rd176, %r609, 4;
	add.s64 	%rd73, %rd122, %rd176;
	setp.eq.s32 	%p231, %r142, 0;
	mov.u16 	%rs302, 25600;
	mov.u16 	%rs250, 21504;
	setp.ne.s32 	%p245, %r143, 0;
	mov.u32 	%r93, %r2648;
	mov.u32 	%r2675, %r2648;
	mov.u32 	%r2674, %r2648;
	mov.u32 	%r2665, %r2648;
	mov.u32 	%r2666, %r2648;
	mov.u32 	%r2667, %r2648;
	mov.u32 	%r2668, %r2648;
	bra.uni 	LBB0_126;
LBB0_158:                               // %L24626
                                        //   in Loop: Header=BB0_126 Depth=1
	selp.b32 	%r2630, %r153, %r2580, %p231;
	selp.b32 	%r2631, %r2576, %r153, %p231;
	selp.b32 	%r2632, %r152, %r2572, %p231;
	selp.b32 	%r2633, %r2568, %r152, %p231;
	or.b32  	%r2680, %r144, %r2649;
	or.b32  	%r2635, %r2680, %r145;
	or.b32  	%r2636, %r2635, %r133;
	or.b32  	%r2637, %r2636, 262144;
	cvt.s64.s32 	%rd185, %r2637;
	add.s64 	%rd186, %rd185, %rd69;
	shr.u64 	%rd187, %rd186, 35;
	add.s64 	%rd188, %rd186, %rd187;
	shr.s64 	%rd189, %rd188, 29;
	and.b64  	%rd190, %rd188, -536870912;
	setp.ne.s64 	%p248, %rd190, %rd186;
	setp.lt.s64 	%p249, %rd186, 0;
	and.pred  	%p250, %p249, %p248;
	selp.u64 	%rd191, 1, 0, %p250;
	sub.s64 	%rd192, %rd191, %rd189;
	shl.b64 	%rd193, %rd192, 29;
	add.s64 	%rd194, %rd193, %rd186;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd3, %rd195;
	st.global.v4.u32 	[%rd196], {%r2633, %r2631, %r2632, %r2630};
LBB0_159:                               // %pass8788
                                        //   in Loop: Header=BB0_126 Depth=1
	add.s32 	%r2639, %r2680, 524288;
	or.b32  	%r2640, %r2639, %r145;
	or.b32  	%r2641, %r2640, %r133;
	cvt.s64.s32 	%rd197, %r2641;
	add.s64 	%rd198, %rd197, %rd69;
	shr.u64 	%rd199, %rd198, 35;
	add.s64 	%rd200, %rd198, %rd199;
	shr.s64 	%rd201, %rd200, 29;
	and.b64  	%rd202, %rd200, -536870912;
	setp.ne.s64 	%p251, %rd202, %rd198;
	setp.lt.s64 	%p252, %rd198, 0;
	and.pred  	%p253, %p252, %p251;
	selp.u64 	%rd203, 1, 0, %p253;
	sub.s64 	%rd204, %rd203, %rd201;
	shl.b64 	%rd205, %rd204, 29;
	add.s64 	%rd206, %rd205, %rd198;
	shl.b64 	%rd207, %rd206, 2;
	add.s64 	%rd208, %rd3, %rd207;
	st.global.v4.u32 	[%rd208], {%r154, %r156, %r155, %r157};
	add.s32 	%r2642, %r2680, 786432;
	or.b32  	%r2643, %r2642, %r145;
	or.b32  	%r2644, %r2643, %r133;
	cvt.s64.s32 	%rd209, %r2644;
	add.s64 	%rd210, %rd209, %rd69;
	shr.u64 	%rd211, %rd210, 35;
	add.s64 	%rd212, %rd210, %rd211;
	shr.s64 	%rd213, %rd212, 29;
	and.b64  	%rd214, %rd212, -536870912;
	setp.ne.s64 	%p254, %rd214, %rd210;
	setp.lt.s64 	%p255, %rd210, 0;
	and.pred  	%p256, %p255, %p254;
	selp.u64 	%rd215, 1, 0, %p256;
	sub.s64 	%rd216, %rd215, %rd213;
	shl.b64 	%rd217, %rd216, 29;
	add.s64 	%rd218, %rd217, %rd210;
	shl.b64 	%rd219, %rd218, 2;
	add.s64 	%rd220, %rd3, %rd219;
	st.global.v4.u32 	[%rd220], {%r158, %r160, %r159, %r161};
	setp.ne.s32 	%p257, %r93, 130816;
	add.s32 	%r93, %r93, 256;
	add.s32 	%r2645, %r93, %r5;
	setp.gt.s32 	%p258, %r6, %r2645;
	and.pred  	%p259, %p257, %p258;
	@%p259 bra 	LBB0_126;
	bra.uni 	LBB0_160;
LBB0_126:                               // %L1571
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_127 Depth 2
	or.b32  	%r675, %r134, %r93;
	or.b32  	%r676, %r675, %r135;
	or.b32  	%r677, %r676, %r136;
	or.b32  	%r678, %r677, %r137;
	shl.b32 	%r679, %r678, 12;
	add.s32 	%r680, %r138, %r679;
	shr.s32 	%r681, %r680, 31;
	shr.u32 	%r682, %r681, 3;
	add.s32 	%r683, %r680, %r682;
	shr.s32 	%r684, %r683, 29;
	and.b32  	%r685, %r683, -536870912;
	setp.ne.s32 	%p232, %r685, %r680;
	setp.lt.s32 	%p233, %r680, 0;
	and.pred  	%p234, %p233, %p232;
	selp.u32 	%r686, 1, 0, %p234;
	sub.s32 	%r687, %r686, %r684;
	shl.b32 	%r688, %r687, 29;
	add.s32 	%r689, %r688, %r680;
	mul.wide.s32 	%rd177, %r689, 4;
	add.s64 	%rd178, %rd2, %rd177;
	ld.global.v4.u32 	{%r690, %r691, %r692, %r693}, [%rd178];
	add.s32 	%r694, %r139, %r679;
	shr.s32 	%r695, %r694, 31;
	shr.u32 	%r696, %r695, 3;
	add.s32 	%r697, %r694, %r696;
	shr.s32 	%r698, %r697, 29;
	and.b32  	%r699, %r697, -536870912;
	setp.ne.s32 	%p235, %r699, %r694;
	setp.lt.s32 	%p236, %r694, 0;
	and.pred  	%p237, %p236, %p235;
	selp.u32 	%r700, 1, 0, %p237;
	sub.s32 	%r701, %r700, %r698;
	shl.b32 	%r702, %r701, 29;
	add.s32 	%r703, %r702, %r694;
	mul.wide.s32 	%rd179, %r703, 4;
	add.s64 	%rd180, %rd2, %rd179;
	ld.global.v4.u32 	{%r704, %r705, %r706, %r707}, [%rd180];
	add.s32 	%r708, %r140, %r679;
	shr.s32 	%r709, %r708, 31;
	shr.u32 	%r710, %r709, 3;
	add.s32 	%r711, %r708, %r710;
	shr.s32 	%r712, %r711, 29;
	and.b32  	%r713, %r711, -536870912;
	setp.ne.s32 	%p238, %r713, %r708;
	setp.lt.s32 	%p239, %r708, 0;
	and.pred  	%p240, %p239, %p238;
	selp.u32 	%r714, 1, 0, %p240;
	sub.s32 	%r715, %r714, %r712;
	shl.b32 	%r716, %r715, 29;
	add.s32 	%r717, %r716, %r708;
	mul.wide.s32 	%rd181, %r717, 4;
	add.s64 	%rd182, %rd2, %rd181;
	ld.global.v4.u32 	{%r718, %r719, %r720, %r721}, [%rd182];
	add.s32 	%r722, %r141, %r679;
	shr.s32 	%r723, %r722, 31;
	shr.u32 	%r724, %r723, 3;
	add.s32 	%r725, %r722, %r724;
	shr.s32 	%r726, %r725, 29;
	and.b32  	%r727, %r725, -536870912;
	setp.ne.s32 	%p241, %r727, %r722;
	setp.lt.s32 	%p242, %r722, 0;
	and.pred  	%p243, %p242, %p241;
	selp.u32 	%r728, 1, 0, %p243;
	sub.s32 	%r729, %r728, %r726;
	shl.b32 	%r730, %r729, 29;
	add.s32 	%r731, %r730, %r722;
	mul.wide.s32 	%rd183, %r731, 4;
	add.s64 	%rd184, %rd2, %rd183;
	ld.global.v4.u32 	{%r732, %r733, %r734, %r735}, [%rd184];
	selp.b32 	%r736, %r692, %r690, %p231;
	shfl.sync.bfly.b32	%r737, %r736, 8, 31, -1;
	selp.b32 	%r611, %r690, %r737, %p231;
	selp.b32 	%r612, %r737, %r692, %p231;
	selp.b32 	%r738, %r693, %r691, %p231;
	shfl.sync.bfly.b32	%r739, %r738, 8, 31, -1;
	selp.b32 	%r619, %r691, %r739, %p231;
	selp.b32 	%r620, %r739, %r693, %p231;
	selp.b32 	%r740, %r706, %r704, %p231;
	shfl.sync.bfly.b32	%r741, %r740, 8, 31, -1;
	selp.b32 	%r627, %r704, %r741, %p231;
	selp.b32 	%r628, %r741, %r706, %p231;
	selp.b32 	%r742, %r707, %r705, %p231;
	shfl.sync.bfly.b32	%r743, %r742, 8, 31, -1;
	selp.b32 	%r635, %r705, %r743, %p231;
	selp.b32 	%r636, %r743, %r707, %p231;
	selp.b32 	%r744, %r720, %r718, %p231;
	shfl.sync.bfly.b32	%r745, %r744, 8, 31, -1;
	selp.b32 	%r643, %r718, %r745, %p231;
	selp.b32 	%r644, %r745, %r720, %p231;
	selp.b32 	%r746, %r721, %r719, %p231;
	shfl.sync.bfly.b32	%r747, %r746, 8, 31, -1;
	selp.b32 	%r651, %r719, %r747, %p231;
	selp.b32 	%r652, %r747, %r721, %p231;
	selp.b32 	%r748, %r734, %r732, %p231;
	shfl.sync.bfly.b32	%r749, %r748, 8, 31, -1;
	selp.b32 	%r659, %r732, %r749, %p231;
	selp.b32 	%r660, %r749, %r734, %p231;
	selp.b32 	%r750, %r735, %r733, %p231;
	shfl.sync.bfly.b32	%r751, %r750, 8, 31, -1;
	selp.b32 	%r667, %r733, %r751, %p231;
	selp.b32 	%r668, %r751, %r735, %p231;
	mov.u32 	%r669, 21520;
	// begin inline asm
	prmt.b32 %r610, %r611, %r612, %r669;
	// end inline asm
	mov.u32 	%r673, 30258;
	// begin inline asm
	prmt.b32 %r614, %r611, %r612, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r619, %r620, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r619, %r620, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r627, %r628, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r627, %r628, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r634, %r635, %r636, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r635, %r636, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r643, %r644, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r643, %r644, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r651, %r652, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r651, %r652, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r659, %r660, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r659, %r660, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r667, %r668, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r667, %r668, %r673;
	// end inline asm
	st.shared.u32 	[%rd37], %r610;
	st.shared.u32 	[%rd38], %r614;
	st.shared.u32 	[%rd39], %r618;
	st.shared.u32 	[%rd40], %r622;
	st.shared.u32 	[%rd41], %r626;
	st.shared.u32 	[%rd42], %r630;
	st.shared.u32 	[%rd43], %r634;
	st.shared.u32 	[%rd44], %r638;
	st.shared.u32 	[%rd45], %r642;
	st.shared.u32 	[%rd46], %r646;
	st.shared.u32 	[%rd47], %r650;
	st.shared.u32 	[%rd48], %r654;
	st.shared.u32 	[%rd49], %r658;
	st.shared.u32 	[%rd50], %r662;
	st.shared.u32 	[%rd51], %r666;
	st.shared.u32 	[%rd52], %r670;
	bar.sync 	0;
	mov.u32 	%r2669, 256;
	mov.u64 	%rd233, %rd73;
	mov.u64 	%rd234, %rd72;
	mov.u64 	%rd235, %rd71;
	mov.u64 	%rd236, %rd70;
	mov.u32 	%r2670, %r2668;
	mov.u32 	%r2671, %r2667;
	mov.u32 	%r2672, %r2666;
	mov.u32 	%r2673, %r2665;
LBB0_127:                               // %L13398
                                        //   Parent Loop BB0_126 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2667, %r2675;
	mov.u32 	%r2668, %r2674;
	ld.shared.u32 	%r2666, [%rd233];
	ld.shared.u32 	%r2665, [%rd234];
	// begin inline asm
	mov.b32 %r757, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r756, %r2666, -2004318072;
	mov.u32 	%r755, 983055;
	// begin inline asm
	lop3.b32 %r754, %r755, %r756, %r757, 202;
	// end inline asm
	mov.u16 	%rs19, 18432;
	// begin inline asm
	mov.b32 %r758, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	mov.u32 	%r766, 15728880;
	// begin inline asm
	lop3.b32 %r765, %r766, %r756, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r768, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	shr.u32 	%r778, %r756, 8;
	// begin inline asm
	lop3.b32 %r776, %r755, %r778, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	lop3.b32 %r787, %r766, %r778, %r768, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r792, %r768, %r791;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r795, %r787, %r792;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r814, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r802, %r2665, -2004318072;
	// begin inline asm
	lop3.b32 %r800, %r755, %r802, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r811, %r766, %r802, %r814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r814, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	shr.u32 	%r824, %r802, 8;
	// begin inline asm
	lop3.b32 %r822, %r755, %r824, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r803, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	lop3.b32 %r833, %r766, %r824, %r814, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r838, %r814, %r837;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r841, %r833, %r838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r849, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r851, %r849, %r773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r795;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r841;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r888, %r2670, -2004318072;
	// begin inline asm
	lop3.b32 %r886, %r755, %r888, %r889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r891, %r889, %r890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r894, %r886, %r891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r897, %r766, %r888, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r902, %r900, %r901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r905, %r897, %r902;
	// end inline asm
	shr.u32 	%r910, %r888, 8;
	// begin inline asm
	lop3.b32 %r908, %r755, %r910, %r889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r889, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r919, %r766, %r910, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r900, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r934, %r2671, -2004318072;
	// begin inline asm
	lop3.b32 %r932, %r755, %r934, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r937, %r935, %r936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r940, %r932, %r937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r943, %r766, %r934, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r946, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	shr.u32 	%r956, %r934, 8;
	// begin inline asm
	lop3.b32 %r954, %r755, %r956, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r959, %r935, %r958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r962, %r954, %r959;
	// end inline asm
	// begin inline asm
	lop3.b32 %r965, %r766, %r956, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r970, %r946, %r969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r973, %r965, %r970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r976, %r200, %r894, %r846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r980, %r200, %r905, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r984, %r200, %r916, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r988, %r200, %r927, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r992, %r200, %r940, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r996, %r200, %r951, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1000, %r200, %r962, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1004, %r200, %r973, %r881;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1012, %r2672, -2004318072;
	// begin inline asm
	lop3.b32 %r1010, %r755, %r1012, %r1013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1015, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1018, %r1010, %r1015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1021, %r766, %r1012, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1026, %r1024, %r1025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1029, %r1021, %r1026;
	// end inline asm
	shr.u32 	%r1034, %r1012, 8;
	// begin inline asm
	lop3.b32 %r1032, %r755, %r1034, %r1013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1037, %r1013, %r1036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1040, %r1032, %r1037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1043, %r766, %r1034, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1048, %r1024, %r1047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1051, %r1043, %r1048;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1058, %r2673, -2004318072;
	// begin inline asm
	lop3.b32 %r1056, %r755, %r1058, %r1059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1061, %r1059, %r1060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1064, %r1056, %r1061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1067, %r766, %r1058, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1072, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1075, %r1067, %r1072;
	// end inline asm
	shr.u32 	%r1080, %r1058, 8;
	// begin inline asm
	lop3.b32 %r1078, %r755, %r1080, %r1059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1083, %r1059, %r1082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1086, %r1078, %r1083;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1089, %r766, %r1080, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1094, %r1070, %r1093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1097, %r1089, %r1094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1100, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r1100, %r1018, %r976;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1106, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r1106, %r1029, %r980;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r1112, %r1040, %r984;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1118, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r1118, %r1051, %r988;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1124, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r1124, %r1064, %r992;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r1130, %r1075, %r996;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1136, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r1136, %r1086, %r1000;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r1142, %r1097, %r1004;
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1152, %r2668, -2004318072;
	// begin inline asm
	lop3.b32 %r1150, %r755, %r1152, %r1153, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1154, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1155, %r1153, %r1154;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1158, %r1150, %r1155;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1161, %r766, %r1152, %r1164, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1165, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1166, %r1164, %r1165;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1169, %r1161, %r1166;
	// end inline asm
	shr.u32 	%r1174, %r1152, 8;
	// begin inline asm
	lop3.b32 %r1172, %r755, %r1174, %r1153, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1176, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1177, %r1153, %r1176;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1180, %r1172, %r1177;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1183, %r766, %r1174, %r1164, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1187, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1188, %r1164, %r1187;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1191, %r1183, %r1188;
	// end inline asm
	// begin inline asm
	mov.b32 %r1199, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1210, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1198, %r2667, -2004318072;
	// begin inline asm
	lop3.b32 %r1196, %r755, %r1198, %r1199, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1201, %r1199, %r1200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1204, %r1196, %r1201;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1207, %r766, %r1198, %r1210, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1212, %r1210, %r1211;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1215, %r1207, %r1212;
	// end inline asm
	shr.u32 	%r1220, %r1198, 8;
	// begin inline asm
	lop3.b32 %r1218, %r755, %r1220, %r1199, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1223, %r1199, %r1222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1226, %r1218, %r1223;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1229, %r766, %r1220, %r1210, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1233, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1234, %r1210, %r1233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1237, %r1229, %r1234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r236, %r1158, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r236, %r1169, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r236, %r1180, %r1114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r236, %r1191, %r1120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r236, %r1204, %r1126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1294, %r236, %r1215, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r236, %r1226, %r1138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r236, %r1237, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1272, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r1272, %r1276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r46, %r1279, %r1274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1281, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r1281, %r1285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r46, %r1288, %r1283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1290, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r1290, %r1294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r46, %r1297, %r1292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r1299, %r1303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r46, %r1306, %r1301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r47, %r1279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1311, %r46, %r1276, %r1308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1315, %r47, %r1288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r46, %r1285, %r1315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r47, %r1297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r46, %r1294, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r47, %r1306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r46, %r1303, %r1329;
	// end inline asm
	mov.u32 	%r1344, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r67, %r69, %r68, %r70}, {%r1277, %r1311}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1392, %r1389}, {%r67, %r69, %r68, %r70}, {%r1286, %r1318}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1401, %r1398}, {%r67, %r69, %r68, %r70}, {%r1295, %r1325}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r67, %r69, %r68, %r70}, {%r1304, %r1332}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r89, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1385, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r89, %r1392, %r1387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r1394, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r89, %r1401, %r1396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r89, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r90, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r89, %r1380, %r1412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r90, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r89, %r1389, %r1419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r90, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r89, %r1398, %r1426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r90, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r89, %r1407, %r1433;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1440, %r1441}, {%r417, %r423, %r420, %r426}, {%r1381, %r1415}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1451}, {%r417, %r423, %r420, %r426}, {%r1390, %r1422}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1460, %r1461}, {%r417, %r423, %r420, %r426}, {%r1399, %r1429}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1470, %r1471}, {%r417, %r423, %r420, %r426}, {%r1408, %r1436}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r14, %r1440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1483, %r14, %r1441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r14, %r1450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r14, %r1451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1492, %r14, %r1460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r14, %r1461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r14, %r1470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r14, %r1471;
	// end inline asm
	mov.u16 	%rs111, -14592;
	// begin inline asm
	mov.b32 %r1504, {%rs111, %rs111};
	// end inline asm
	mov.u16 	%rs113, 18176;
	// begin inline asm
	mov.b32 %r1505, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1506, %r1480, %r1504;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1509, %r1506, %r1505;
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1514, %r1483, %r1512;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1517, %r1514, %r1513;
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1522, %r1486, %r1520;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1525, %r1522, %r1521;
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1530, %r1489, %r1528;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1533, %r1530, %r1529;
	// end inline asm
	// begin inline asm
	mov.b32 %r1536, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1538, %r1492, %r1536;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1541, %r1538, %r1537;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1546, %r1495, %r1544;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1549, %r1546, %r1545;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1553, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1554, %r1498, %r1552;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1557, %r1554, %r1553;
	// end inline asm
	// begin inline asm
	mov.b32 %r1560, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1562, %r1501, %r1560;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1565, %r1562, %r1561;
	// end inline asm
	// begin inline asm
	mov.b32 %r1571, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1569, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1570, %r1571, %r1569;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1509, %r1570;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1571, %r1576;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1517, %r1577;
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1584, %r1571, %r1583;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1587, %r1525, %r1584;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1591, %r1571, %r1590;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1594, %r1533, %r1591;
	// end inline asm
	mov.u32 	%r1600, 25152;
	// begin inline asm
	prmt.b32 %r1597, %r1573, %r1587, %r1600;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1601, %r1580, %r1594, %r1600;
	// end inline asm
	shl.b32 	%r1608, %r1601, 4;
	mov.u32 	%r1606, 252645135;
	// begin inline asm
	lop3.b32 %r1605, %r1606, %r1597, %r1608, 202;
	// end inline asm
	xor.b32  	%r2548, %r1605, -2004318072;
	// begin inline asm
	mov.b32 %r1612, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1611, %r1612, %r1610;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1614, %r1541, %r1611;
	// end inline asm
	// begin inline asm
	mov.b32 %r1617, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1618, %r1612, %r1617;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1549, %r1618;
	// end inline asm
	// begin inline asm
	mov.b32 %r1624, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1625, %r1612, %r1624;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1628, %r1557, %r1625;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1612, %r1631;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1635, %r1565, %r1632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1638, %r1614, %r1628, %r1600;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1642, %r1621, %r1635, %r1600;
	// end inline asm
	shl.b32 	%r1649, %r1642, 4;
	// begin inline asm
	lop3.b32 %r1646, %r1606, %r1638, %r1649, 202;
	// end inline asm
	xor.b32  	%r2549, %r1646, -2004318072;
	st.shared.u32 	[%rd235], %r2548;
	st.shared.u32 	[%rd236], %r2549;
	ld.shared.u32 	%r2674, [%rd233];
	ld.shared.u32 	%r2675, [%rd234];
	// begin inline asm
	mov.b32 %r1655, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1666, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1654, %r2674, -2004318072;
	// begin inline asm
	lop3.b32 %r1652, %r755, %r1654, %r1655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1656, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1657, %r1655, %r1656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1660, %r1652, %r1657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1663, %r766, %r1654, %r1666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1667, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1668, %r1666, %r1667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1671, %r1663, %r1668;
	// end inline asm
	shr.u32 	%r1676, %r1654, 8;
	// begin inline asm
	lop3.b32 %r1674, %r755, %r1676, %r1655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1678, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1679, %r1655, %r1678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1682, %r1674, %r1679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1685, %r766, %r1676, %r1666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1689, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1690, %r1666, %r1689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1693, %r1685, %r1690;
	// end inline asm
	// begin inline asm
	mov.b32 %r1701, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1712, {%rs250, %rs250};
	// end inline asm
	xor.b32  	%r1700, %r2675, -2004318072;
	// begin inline asm
	lop3.b32 %r1698, %r755, %r1700, %r1701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1702, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1703, %r1701, %r1702;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1706, %r1698, %r1703;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1709, %r766, %r1700, %r1712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1713, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1714, %r1712, %r1713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1717, %r1709, %r1714;
	// end inline asm
	shr.u32 	%r1722, %r1700, 8;
	// begin inline asm
	lop3.b32 %r1720, %r755, %r1722, %r1701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1724, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1725, %r1701, %r1724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1728, %r1720, %r1725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1731, %r766, %r1722, %r1712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1735, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1736, %r1712, %r1735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1739, %r1731, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1742, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r1742, %r1660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r1747, %r1671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r1762, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1772, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1772, %r1728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1777, %r254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1777, %r1739;
	// end inline asm
	// begin inline asm
	mov.b32 %r1787, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1798, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1784, %r755, %r1012, %r1787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1788, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1789, %r1787, %r1788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1792, %r1784, %r1789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1795, %r766, %r1012, %r1798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1799, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1800, %r1798, %r1799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1803, %r1795, %r1800;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1806, %r755, %r1034, %r1787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1810, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1811, %r1787, %r1810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1814, %r1806, %r1811;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1817, %r766, %r1034, %r1798, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1821, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1822, %r1798, %r1821;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1825, %r1817, %r1822;
	// end inline asm
	// begin inline asm
	mov.b32 %r1833, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1844, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1830, %r755, %r1058, %r1833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1834, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1835, %r1833, %r1834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1838, %r1830, %r1835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1841, %r766, %r1058, %r1844, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1845, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1846, %r1844, %r1845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1849, %r1841, %r1846;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1852, %r755, %r1080, %r1833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1856, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1857, %r1833, %r1856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1860, %r1852, %r1857;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1863, %r766, %r1080, %r1844, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1867, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1868, %r1844, %r1867;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1871, %r1863, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r200, %r1792, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r200, %r1803, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r200, %r1814, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r200, %r1825, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r200, %r1838, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r200, %r1849, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r200, %r1860, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r200, %r1871, %r1779;
	// end inline asm
	// begin inline asm
	mov.b32 %r1911, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1922, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1908, %r755, %r1152, %r1911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1912, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1913, %r1911, %r1912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1916, %r1908, %r1913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1919, %r766, %r1152, %r1922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1923, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1924, %r1922, %r1923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1927, %r1919, %r1924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1930, %r755, %r1174, %r1911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1935, %r1911, %r1934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1938, %r1930, %r1935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1941, %r766, %r1174, %r1922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1946, %r1922, %r1945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1949, %r1941, %r1946;
	// end inline asm
	// begin inline asm
	mov.b32 %r1957, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1954, %r755, %r1198, %r1957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1959, %r1957, %r1958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1962, %r1954, %r1959;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1965, %r766, %r1198, %r1968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1969, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1970, %r1968, %r1969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1973, %r1965, %r1970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1976, %r755, %r1220, %r1957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1957, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1987, %r766, %r1220, %r1968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1992, %r1968, %r1991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1995, %r1987, %r1992;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1998, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r1998, %r1916, %r1874;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2004, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2004, %r1927, %r1878;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2010, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r2010, %r1938, %r1882;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2016, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r2016, %r1949, %r1886;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2022, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r2022, %r1962, %r1890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2028, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r2028, %r1973, %r1894;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2034, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r2034, %r1984, %r1898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2040, %r1995, %r1902;
	// end inline asm
	// begin inline asm
	mov.b32 %r2051, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2048, %r755, %r756, %r2051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2052, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2053, %r2051, %r2052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2056, %r2048, %r2053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2059, %r766, %r756, %r2062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2063, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2064, %r2062, %r2063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2067, %r2059, %r2064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2070, %r755, %r778, %r2051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2074, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2075, %r2051, %r2074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2078, %r2070, %r2075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2081, %r766, %r778, %r2062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2085, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2086, %r2062, %r2085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2089, %r2081, %r2086;
	// end inline asm
	// begin inline asm
	mov.b32 %r2097, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2108, {%rs250, %rs250};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2094, %r755, %r802, %r2097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2098, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2099, %r2097, %r2098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2102, %r2094, %r2099;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2105, %r766, %r802, %r2108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2109, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2110, %r2108, %r2109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2113, %r2105, %r2110;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2116, %r755, %r824, %r2097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2120, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2121, %r2097, %r2120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2124, %r2116, %r2121;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2127, %r766, %r824, %r2108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2131, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2132, %r2108, %r2131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2135, %r2127, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r236, %r2056, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r236, %r2067, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r236, %r2078, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r236, %r2089, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r236, %r2102, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2192, %r236, %r2113, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r236, %r2124, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2201, %r236, %r2135, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r46, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r46, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r46, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r47;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r46, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r47, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r46, %r2174, %r2206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r47, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r46, %r2183, %r2213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r47, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r46, %r2192, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r47, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r46, %r2201, %r2227;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2281, %r2278}, {%r67, %r69, %r68, %r70}, {%r2175, %r2209}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2290, %r2287}, {%r67, %r69, %r68, %r70}, {%r2184, %r2216}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2299, %r2296}, {%r67, %r69, %r68, %r70}, {%r2193, %r2223}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2308, %r2305}, {%r67, %r69, %r68, %r70}, {%r2202, %r2230}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2274, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2276, %r2274, %r2278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2279, %r89, %r2281, %r2276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2283, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r2283, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r89, %r2290, %r2285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2292, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r2292, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2297, %r89, %r2299, %r2294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2301, %r90;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2303, %r2301, %r2305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2306, %r89, %r2308, %r2303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r90, %r2281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r89, %r2278, %r2310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2317, %r90, %r2290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2320, %r89, %r2287, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r90, %r2299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r89, %r2296, %r2324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r90, %r2308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2334, %r89, %r2305, %r2331;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2338, %r2339}, {%r417, %r423, %r420, %r426}, {%r2279, %r2313}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2348, %r2349}, {%r417, %r423, %r420, %r426}, {%r2288, %r2320}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2358, %r2359}, {%r417, %r423, %r420, %r426}, {%r2297, %r2327}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2368, %r2369}, {%r417, %r423, %r420, %r426}, {%r2306, %r2334}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2378, %r14, %r2338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2381, %r14, %r2339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2384, %r14, %r2348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2387, %r14, %r2349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2390, %r14, %r2358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2393, %r14, %r2359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2396, %r14, %r2368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2399, %r14, %r2369;
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2404, %r2378, %r2402;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2407, %r2404, %r2403;
	// end inline asm
	// begin inline asm
	mov.b32 %r2410, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2412, %r2381, %r2410;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2415, %r2412, %r2411;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2420, %r2384, %r2418;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2423, %r2420, %r2419;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2427, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2428, %r2387, %r2426;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2431, %r2428, %r2427;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2435, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2436, %r2390, %r2434;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2439, %r2436, %r2435;
	// end inline asm
	// begin inline asm
	mov.b32 %r2442, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2443, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2444, %r2393, %r2442;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2447, %r2444, %r2443;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2452, %r2396, %r2450;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2455, %r2452, %r2451;
	// end inline asm
	// begin inline asm
	mov.b32 %r2458, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	mov.b32 %r2459, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2460, %r2399, %r2458;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2463, %r2460, %r2459;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2469, %r2467;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2471, %r2407, %r2468;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2475, %r2469, %r2474;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2415, %r2475;
	// end inline asm
	// begin inline asm
	mov.b32 %r2481, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2482, %r2469, %r2481;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2423, %r2482;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2469, %r2488;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2431, %r2489;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2495, %r2471, %r2485, %r1600;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2499, %r2478, %r2492, %r1600;
	// end inline asm
	shl.b32 	%r2506, %r2499, 4;
	// begin inline asm
	lop3.b32 %r2503, %r1606, %r2495, %r2506, 202;
	// end inline asm
	xor.b32  	%r2550, %r2503, -2004318072;
	// begin inline asm
	mov.b32 %r2510, {%rs302, %rs302};
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2510, %r2508;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2512, %r2439, %r2509;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2510, %r2515;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2519, %r2447, %r2516;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2523, %r2510, %r2522;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2526, %r2455, %r2523;
	// end inline asm
	// begin inline asm
	mov.b32 %r2529, {%rs19, %rs19};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2530, %r2510, %r2529;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2533, %r2463, %r2530;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2536, %r2512, %r2526, %r1600;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2540, %r2519, %r2533, %r1600;
	// end inline asm
	shl.b32 	%r2547, %r2540, 4;
	// begin inline asm
	lop3.b32 %r2544, %r1606, %r2536, %r2547, 202;
	// end inline asm
	xor.b32  	%r2551, %r2544, -2004318072;
	st.shared.u32 	[%rd235], %r2550;
	st.shared.u32 	[%rd236], %r2551;
	add.s32 	%r2669, %r2669, -32;
	add.s64 	%rd236, %rd236, 4228;
	add.s64 	%rd235, %rd235, 4228;
	add.s64 	%rd234, %rd234, 4228;
	add.s64 	%rd233, %rd233, 4228;
	setp.eq.s32 	%p244, %r2669, 0;
	mov.u32 	%r2670, %r2668;
	mov.u32 	%r2671, %r2667;
	mov.u32 	%r2672, %r2666;
	mov.u32 	%r2673, %r2665;
	@%p244 bra 	LBB0_128;
	bra.uni 	LBB0_127;
LBB0_128:                               // %guard_pass9096
                                        //   in Loop: Header=BB0_126 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2557, [%rd53];
	ld.shared.u32 	%r2558, [%rd54];
	ld.shared.u32 	%r2565, [%rd55+4];
	ld.shared.u32 	%r2566, [%rd56];
	ld.shared.u32 	%r2573, [%rd57];
	ld.shared.u32 	%r2574, [%rd58];
	ld.shared.u32 	%r2581, [%rd59+4];
	ld.shared.u32 	%r2582, [%rd60];
	ld.shared.u32 	%r2589, [%rd61];
	ld.shared.u32 	%r2590, [%rd62];
	ld.shared.u32 	%r2597, [%rd63+4];
	ld.shared.u32 	%r2598, [%rd64];
	ld.shared.u32 	%r2605, [%rd65];
	ld.shared.u32 	%r2606, [%rd66];
	ld.shared.u32 	%r2613, [%rd67+4];
	ld.shared.u32 	%r2614, [%rd68];
	// begin inline asm
	prmt.b32 %r2552, %r2557, %r2558, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2556, %r2557, %r2558, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2560, %r2565, %r2566, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2564, %r2565, %r2566, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2568, %r2573, %r2574, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2572, %r2573, %r2574, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2576, %r2581, %r2582, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2580, %r2581, %r2582, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2584, %r2589, %r2590, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2588, %r2589, %r2590, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2592, %r2597, %r2598, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2596, %r2597, %r2598, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2600, %r2605, %r2606, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2604, %r2605, %r2606, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2608, %r2613, %r2614, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2612, %r2613, %r2614, %r673;
	// end inline asm
	selp.b32 	%r2616, %r2556, %r2552, %p231;
	shfl.sync.bfly.b32	%r2617, %r2616, 8, 31, -1;
	selp.b32 	%r2618, %r2564, %r2560, %p231;
	shfl.sync.bfly.b32	%r2619, %r2618, 8, 31, -1;
	selp.b32 	%r2620, %r2572, %r2568, %p231;
	shfl.sync.bfly.b32	%r152, %r2620, 8, 31, -1;
	selp.b32 	%r2621, %r2580, %r2576, %p231;
	shfl.sync.bfly.b32	%r153, %r2621, 8, 31, -1;
	selp.b32 	%r2622, %r2588, %r2584, %p231;
	shfl.sync.bfly.b32	%r2623, %r2622, 8, 31, -1;
	selp.b32 	%r154, %r2584, %r2623, %p231;
	selp.b32 	%r155, %r2623, %r2588, %p231;
	selp.b32 	%r2624, %r2596, %r2592, %p231;
	shfl.sync.bfly.b32	%r2625, %r2624, 8, 31, -1;
	selp.b32 	%r156, %r2592, %r2625, %p231;
	selp.b32 	%r157, %r2625, %r2596, %p231;
	selp.b32 	%r2626, %r2604, %r2600, %p231;
	shfl.sync.bfly.b32	%r2627, %r2626, 8, 31, -1;
	selp.b32 	%r158, %r2600, %r2627, %p231;
	selp.b32 	%r159, %r2627, %r2604, %p231;
	selp.b32 	%r2628, %r2612, %r2608, %p231;
	shfl.sync.bfly.b32	%r2629, %r2628, 8, 31, -1;
	selp.b32 	%r160, %r2608, %r2629, %p231;
	selp.b32 	%r161, %r2629, %r2612, %p231;
	shl.b32 	%r2649, %r93, 12;
	@%p245 bra 	LBB0_158;
// %bb.129:                             // %guard_pass9096.pass8788_crit_edge
                                        //   in Loop: Header=BB0_126 Depth=1
	or.b32  	%r2680, %r144, %r2649;
	bra.uni 	LBB0_159;
LBB0_160:                               // %L25328
	st.global.u32 	[%rd4], %r2648;
	ret;
LBB0_7:                                 // %L273
	mov.u32 	%r2647, 2;
	st.global.u32 	[%rd4], %r2647;
	mov.u64 	%rd221, exception2039;
	cvta.global.u64 	%rd222, %rd221;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd222;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd95, exception1;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_132:                               // %L25439
	mov.u64 	%rd103, exception1;
	cvta.global.u64 	%rd104, %rd103;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd104;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_131:                               // %L25436
	mov.u64 	%rd108, exception1;
	cvta.global.u64 	%rd109, %rd108;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd109;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L25433
	mov.u64 	%rd119, exception1;
	cvta.global.u64 	%rd120, %rd119;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd120;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
