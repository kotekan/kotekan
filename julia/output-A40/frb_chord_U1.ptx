// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2823[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<276>;
	.reg .b16 	%rs<161>;
	.reg .b32 	%r<3712>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<256>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd66, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r293, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r293, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd67, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r294, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r295, %r294, %r2;
	add.s32 	%r296, %r295, %r4;
	mul.wide.u32 	%rd73, %r296, 4;
	add.s64 	%rd5, %rd67, %rd73;
	mov.u32 	%r297, 1;
	st.global.u32 	[%rd5], %r297;
	setp.lt.s32 	%p4, %r289, 0;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r290, %r289;
	setp.gt.s32 	%p6, %r290, 262144;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r291, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r290, %r289;
	mad.lo.s32 	%r298, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r299, %r298, %r298, 4;
	setp.gt.u32 	%p8, %r299, 89478484;
	setp.lt.s32 	%p9, %r291, 0;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r292, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r292, %r291;
	setp.lt.s32 	%p12, %r292, 8193;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_6;
$L__BB0_167:                            // %pass51
	sub.s32 	%r300, %r292, %r291;
	mul.hi.s32 	%r301, %r5, 1717986919;
	shr.u32 	%r302, %r301, 31;
	shr.s32 	%r303, %r301, 4;
	add.s32 	%r304, %r303, %r302;
	setp.ne.s32 	%p14, %r300, %r304;
	@%p14 bra 	$L__BB0_6;
// %bb.168:                             // %pass102
	and.b32  	%r199, %r2, 3;
	shr.u32 	%r200, %r2, 2;
	mul.lo.s32 	%r305, %r199, %r200;
	and.b32  	%r306, %r305, 7;
	cvt.rn.f32.s32 	%f201, %r306;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p15, %f785, 0f40000000;
	setp.gtu.f32 	%p275, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p15 bra 	$L__BB0_180;
// %bb.169:
	@%p275 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_170;
$L__BB0_176:
	mov.b32 	%r202, %f785;
	and.b32  	%r307, %r202, 8388607;
	or.b32  	%r3707, %r307, 1065353216;
	mov.b32 	%f780, %r3707;
	add.s32 	%r308, %r202, -1073741824;
	and.b32  	%r3708, %r308, -8388608;
	setp.eq.s32 	%p22, %r3708, 0;
	@%p22 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3708, 192937984;
	add.s32 	%r310, %r3707, %r309;
	mov.b32 	%f213, %r310;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3708, %r3708, %r309;
	mov.b32 	%r3707, %f780;
	setp.ne.s32 	%p23, %r3708, 0;
	setp.ne.s32 	%p24, %r3707, 0;
	and.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p26, %r202, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p26;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_180;
$L__BB0_170:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r201, %f172;
	setp.lt.u32 	%p17, %r201, 1073741824;
	@%p17 bra 	$L__BB0_175;
// %bb.171:
	setp.lt.u32 	%p18, %r201, -2147483647;
	@%p18 bra 	$L__BB0_173;
// %bb.172:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p21, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p21;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p19, %f172, 0f40800000;
	@%p19 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p20, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p20;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p27, %f222, 0f7F800000;
	mov.b32 	%r311, %f169;
	and.b32  	%r209, %r311, -2147483648;
	@%p27 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r312, %f781;
	or.b32  	%r313, %r209, %r312;
	mov.b32 	%f781, %r313;
$L__BB0_182:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r320, %f224;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f225, %r322;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p28, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p28;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p29, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p29;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r212, %r2, 1;
	and.b32  	%r213, %r212, 6;
	or.b32  	%r214, %r213, 1;
	setp.eq.s32 	%p35, %r213, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3604, %r213, %r200;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p35 bra 	$L__BB0_22;
// %bb.7:                               // %L340
	cvt.u16.u32 	%rs1, %r3604;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p36, %f733, 0f40000000;
	@%p36 bra 	$L__BB0_19;
// %bb.8:
	setp.gtu.f32 	%p37, %f733, 0f4B800000;
	@%p37 bra 	$L__BB0_15;
	bra.uni 	$L__BB0_9;
$L__BB0_15:
	mov.b32 	%r7, %f733;
	and.b32  	%r329, %r7, 8388607;
	or.b32  	%r3608, %r329, 1065353216;
	mov.b32 	%f732, %r3608;
	add.s32 	%r330, %r7, -1073741824;
	and.b32  	%r3609, %r330, -8388608;
	setp.eq.s32 	%p43, %r3609, 0;
	@%p43 bra 	$L__BB0_18;
// %bb.16:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_17:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3609, 192937984;
	add.s32 	%r332, %r3608, %r331;
	mov.b32 	%f267, %r332;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3609, %r3609, %r331;
	mov.b32 	%r3608, %f732;
	setp.ne.s32 	%p44, %r3609, 0;
	setp.ne.s32 	%p45, %r3608, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_17;
$L__BB0_18:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p47, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_19;
$L__BB0_9:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p38, %r6, 1073741824;
	@%p38 bra 	$L__BB0_14;
// %bb.10:
	setp.lt.u32 	%p39, %r6, -2147483647;
	@%p39 bra 	$L__BB0_12;
// %bb.11:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p42, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p42;
	bra.uni 	$L__BB0_14;
$L__BB0_12:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p40, %f4, 0f40800000;
	@%p40 bra 	$L__BB0_14;
// %bb.13:                              // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p41, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p41;
$L__BB0_14:                             // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_19:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p48, %f276, 0f7F800000;
	@%p48 bra 	$L__BB0_21;
// %bb.20:
	mov.b32 	%r333, %f1;
	and.b32  	%r334, %r333, -2147483648;
	mov.b32 	%r335, %f733;
	or.b32  	%r336, %r334, %r335;
	mov.b32 	%f733, %r336;
$L__BB0_21:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r337, %f277;
	and.b32  	%r338, %r337, -2147483648;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%f278, %r339;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p49, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p49;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p50, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p50;
	cvt.rzi.s32.f32 	%r340, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r341, %r340, 1;
	setp.eq.b32 	%p51, %r341, 1;
	selp.f32 	%f296, %f294, %f295, %p51;
	selp.f32 	%f297, %f295, %f294, %p51;
	and.b32  	%r342, %r340, 2;
	setp.eq.s32 	%p52, %r342, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p52;
	add.s32 	%r343, %r340, 1;
	and.b32  	%r344, %r343, 2;
	setp.eq.s32 	%p53, %r344, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p53;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p54, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p54;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p55, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p55;
$L__BB0_22:                             // %L374
	cvt.rzi.s32.f32 	%r323, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p56, %r214, 5;
	mul.lo.s32 	%r3605, %r214, %r200;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p56 bra 	$L__BB0_38;
// %bb.23:                              // %L378
	mul.hi.u32 	%r346, %r3605, -1431655765;
	shr.u32 	%r347, %r346, 5;
	mul.lo.s32 	%r348, %r347, 48;
	sub.s32 	%r349, %r3605, %r348;
	cvt.rn.f32.s32 	%f308, %r349;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p57, %f739, 0f40000000;
	@%p57 bra 	$L__BB0_35;
// %bb.24:
	setp.gtu.f32 	%p58, %f739, 0f4B800000;
	@%p58 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_25;
$L__BB0_31:
	mov.b32 	%r15, %f739;
	and.b32  	%r350, %r15, 8388607;
	or.b32  	%r3610, %r350, 1065353216;
	mov.b32 	%f738, %r3610;
	add.s32 	%r351, %r15, -1073741824;
	and.b32  	%r3611, %r351, -8388608;
	setp.eq.s32 	%p64, %r3611, 0;
	@%p64 bra 	$L__BB0_34;
// %bb.32:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_33:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r3611, 192937984;
	add.s32 	%r353, %r3610, %r352;
	mov.b32 	%f320, %r353;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3611, %r3611, %r352;
	mov.b32 	%r3610, %f738;
	setp.ne.s32 	%p65, %r3611, 0;
	setp.ne.s32 	%p66, %r3610, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_33;
$L__BB0_34:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p68, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_35;
$L__BB0_25:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p59, %r14, 1073741824;
	@%p59 bra 	$L__BB0_30;
// %bb.26:
	setp.lt.u32 	%p60, %r14, -2147483647;
	@%p60 bra 	$L__BB0_28;
// %bb.27:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p63, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p63;
	bra.uni 	$L__BB0_30;
$L__BB0_28:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p61, %f25, 0f40800000;
	@%p61 bra 	$L__BB0_30;
// %bb.29:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p62, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p62;
$L__BB0_30:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_35:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p69, %f329, 0f7F800000;
	@%p69 bra 	$L__BB0_37;
// %bb.36:
	mov.b32 	%r354, %f22;
	and.b32  	%r355, %r354, -2147483648;
	mov.b32 	%r356, %f739;
	or.b32  	%r357, %r355, %r356;
	mov.b32 	%f739, %r357;
$L__BB0_37:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r358, %f330;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f331, %r360;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p70, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p70;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p71, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p71;
	cvt.rzi.s32.f32 	%r361, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r362, %r361, 1;
	setp.eq.b32 	%p72, %r362, 1;
	selp.f32 	%f349, %f347, %f348, %p72;
	selp.f32 	%f350, %f348, %f347, %p72;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p73, %r363, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p73;
	add.s32 	%r364, %r361, 1;
	and.b32  	%r365, %r364, 2;
	setp.eq.s32 	%p74, %r365, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p74;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p75, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p75;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p76, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p76;
$L__BB0_38:                             // %L412
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r324, %r323, 1;
	setp.gt.u32 	%p78, %r2, 23;
	or.pred  	%p1, %p35, %p78;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_54;
// %bb.39:                              // %L450
	cvt.u16.u32 	%rs8, %r3604;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p79, %f745, 0f40000000;
	@%p79 bra 	$L__BB0_51;
// %bb.40:
	setp.gtu.f32 	%p80, %f745, 0f4B800000;
	@%p80 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_41;
$L__BB0_47:
	mov.b32 	%r25, %f745;
	and.b32  	%r373, %r25, 8388607;
	or.b32  	%r3612, %r373, 1065353216;
	mov.b32 	%f744, %r3612;
	add.s32 	%r374, %r25, -1073741824;
	and.b32  	%r3613, %r374, -8388608;
	setp.eq.s32 	%p86, %r3613, 0;
	@%p86 bra 	$L__BB0_50;
// %bb.48:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_49:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r375, %r3613, 192937984;
	add.s32 	%r376, %r3612, %r375;
	mov.b32 	%f373, %r376;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3613, %r3613, %r375;
	mov.b32 	%r3612, %f744;
	setp.ne.s32 	%p87, %r3613, 0;
	setp.ne.s32 	%p88, %r3612, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_49;
$L__BB0_50:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p90, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_51;
$L__BB0_41:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p81, %r24, 1073741824;
	@%p81 bra 	$L__BB0_46;
// %bb.42:
	setp.lt.u32 	%p82, %r24, -2147483647;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p85, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p85;
	bra.uni 	$L__BB0_46;
$L__BB0_44:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p83, %f46, 0f40800000;
	@%p83 bra 	$L__BB0_46;
// %bb.45:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p84, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p84;
$L__BB0_46:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_51:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p91, %f382, 0f7F800000;
	@%p91 bra 	$L__BB0_53;
// %bb.52:
	mov.b32 	%r377, %f43;
	and.b32  	%r378, %r377, -2147483648;
	mov.b32 	%r379, %f745;
	or.b32  	%r380, %r378, %r379;
	mov.b32 	%f745, %r380;
$L__BB0_53:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r381, %f383;
	and.b32  	%r382, %r381, -2147483648;
	or.b32  	%r383, %r382, 1056964608;
	mov.b32 	%f384, %r383;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p92, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p92;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p93, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p93;
	cvt.rzi.s32.f32 	%r384, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r385, %r384, 1;
	setp.eq.b32 	%p94, %r385, 1;
	selp.f32 	%f402, %f400, %f401, %p94;
	selp.f32 	%f403, %f401, %f400, %p94;
	and.b32  	%r386, %r384, 2;
	setp.eq.s32 	%p95, %r386, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p95;
	add.s32 	%r387, %r384, 1;
	and.b32  	%r388, %r387, 2;
	setp.eq.s32 	%p96, %r388, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p96;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p97, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p97;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p98, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p98;
$L__BB0_54:                             // %L484
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p30, %r324, 1;
	or.pred  	%p2, %p56, %p78;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_70;
// %bb.55:                              // %L492
	mul.hi.u32 	%r390, %r3605, -1431655765;
	shr.u32 	%r391, %r390, 2;
	mul.lo.s32 	%r392, %r391, 6;
	sub.s32 	%r393, %r3605, %r392;
	cvt.rn.f32.s32 	%f414, %r393;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p101, %f751, 0f40000000;
	@%p101 bra 	$L__BB0_67;
// %bb.56:
	setp.gtu.f32 	%p102, %f751, 0f4B800000;
	@%p102 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r33, %f751;
	and.b32  	%r394, %r33, 8388607;
	or.b32  	%r3614, %r394, 1065353216;
	mov.b32 	%f750, %r3614;
	add.s32 	%r395, %r33, -1073741824;
	and.b32  	%r3615, %r395, -8388608;
	setp.eq.s32 	%p108, %r3615, 0;
	@%p108 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r3615, 192937984;
	add.s32 	%r397, %r3614, %r396;
	mov.b32 	%f426, %r397;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3615, %r3615, %r396;
	mov.b32 	%r3614, %f750;
	setp.ne.s32 	%p109, %r3615, 0;
	setp.ne.s32 	%p110, %r3614, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p112, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p103, %r32, 1073741824;
	@%p103 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p104, %r32, -2147483647;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p107, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p107;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p105, %f67, 0f40800000;
	@%p105 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p106, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p106;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p113, %f435, 0f7F800000;
	@%p113 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r398, %f64;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f751;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f751, %r401;
$L__BB0_69:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r402, %f436;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f437, %r404;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p114, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p114;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p115, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p115;
	cvt.rzi.s32.f32 	%r405, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p116, %r406, 1;
	selp.f32 	%f455, %f453, %f454, %p116;
	selp.f32 	%f456, %f454, %f453, %p116;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p117, %r407, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p117;
	add.s32 	%r408, %r405, 1;
	and.b32  	%r409, %r408, 2;
	setp.eq.s32 	%p118, %r409, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p118;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p119, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p119;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p120, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p120;
$L__BB0_70:                             // %L526
	selp.f32 	%f243, %f241, %f242, %p30;
	and.b32  	%r325, %r323, 2;
	@%p15 bra 	$L__BB0_190;
// %bb.71:
	@%p275 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_72;
$L__BB0_186:
	mov.b32 	%r216, %f785;
	and.b32  	%r422, %r216, 8388607;
	or.b32  	%r3709, %r422, 1065353216;
	mov.b32 	%f784, %r3709;
	add.s32 	%r423, %r216, -1073741824;
	and.b32  	%r3710, %r423, -8388608;
	setp.eq.s32 	%p128, %r3710, 0;
	@%p128 bra 	$L__BB0_189;
// %bb.187:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_188:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3710, 192937984;
	add.s32 	%r425, %r3709, %r424;
	mov.b32 	%f476, %r425;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3710, %r3710, %r424;
	mov.b32 	%r3709, %f784;
	setp.ne.s32 	%p129, %r3710, 0;
	setp.ne.s32 	%p130, %r3709, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_188;
$L__BB0_189:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p132, %r216, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_190;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r215, %f187;
	setp.lt.u32 	%p123, %r215, 1073741824;
	@%p123 bra 	$L__BB0_185;
// %bb.73:
	setp.lt.u32 	%p124, %r215, -2147483647;
	@%p124 bra 	$L__BB0_183;
// %bb.74:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p127, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p127;
	bra.uni 	$L__BB0_185;
$L__BB0_183:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p125, %f187, 0f40800000;
	@%p125 bra 	$L__BB0_185;
// %bb.184:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p126, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p126;
$L__BB0_185:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_190:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p31, %r325, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p133, %f485, 0f7F800000;
	@%p133 bra 	$L__BB0_192;
// %bb.191:
	mov.b32 	%r426, %f785;
	or.b32  	%r427, %r209, %r426;
	mov.b32 	%f785, %r427;
$L__BB0_192:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p30;
	selp.f32 	%f246, %f243, %f245, %p31;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p33, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r434, %f487;
	and.b32  	%r435, %r434, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%f488, %r436;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p135, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p135;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p136, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p136;
	cvt.rzi.s32.f32 	%r437, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r438, %r437, 1;
	setp.eq.b32 	%p137, %r438, 1;
	selp.f32 	%f506, %f504, %f505, %p137;
	selp.f32 	%f507, %f505, %f504, %p137;
	and.b32  	%r439, %r437, 2;
	setp.eq.s32 	%p138, %r439, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p138;
	add.s32 	%r440, %r437, 1;
	and.b32  	%r441, %r440, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p140, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p35 bra 	$L__BB0_90;
// %bb.75:                              // %L628
	cvt.u16.u32 	%rs15, %r3604;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p142, %f757, 0f40000000;
	@%p142 bra 	$L__BB0_87;
// %bb.76:
	setp.gtu.f32 	%p143, %f757, 0f4B800000;
	@%p143 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r45, %f757;
	and.b32  	%r443, %r45, 8388607;
	or.b32  	%r3616, %r443, 1065353216;
	mov.b32 	%f756, %r3616;
	add.s32 	%r444, %r45, -1073741824;
	and.b32  	%r3617, %r444, -8388608;
	setp.eq.s32 	%p149, %r3617, 0;
	@%p149 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r445, %r3617, 192937984;
	add.s32 	%r446, %r3616, %r445;
	mov.b32 	%f530, %r446;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3617, %r3617, %r445;
	mov.b32 	%r3616, %f756;
	setp.ne.s32 	%p150, %r3617, 0;
	setp.ne.s32 	%p151, %r3616, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p153, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p144, %r44, 1073741824;
	@%p144 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p145, %r44, -2147483647;
	@%p145 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p148;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p147;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p154, %f539, 0f7F800000;
	@%p154 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r447, %f85;
	and.b32  	%r448, %r447, -2147483648;
	mov.b32 	%r449, %f757;
	or.b32  	%r450, %r448, %r449;
	mov.b32 	%f757, %r450;
$L__BB0_89:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r451, %f540;
	and.b32  	%r452, %r451, -2147483648;
	or.b32  	%r453, %r452, 1056964608;
	mov.b32 	%f541, %r453;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p155, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p155;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p156, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p156;
	cvt.rzi.s32.f32 	%r454, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r455, %r454, 1;
	setp.eq.b32 	%p157, %r455, 1;
	selp.f32 	%f559, %f557, %f558, %p157;
	selp.f32 	%f560, %f558, %f557, %p157;
	and.b32  	%r456, %r454, 2;
	setp.eq.s32 	%p158, %r456, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p158;
	add.s32 	%r457, %r454, 1;
	and.b32  	%r458, %r457, 2;
	setp.eq.s32 	%p159, %r458, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p159;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p160, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p160;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p161, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p161;
$L__BB0_90:                             // %L662
	setp.eq.s32 	%p32, %r327, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p33;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p139, %r441, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p140;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p56 bra 	$L__BB0_106;
// %bb.91:                              // %L666
	mul.hi.u32 	%r460, %r3605, -1431655765;
	shr.u32 	%r461, %r460, 5;
	mul.lo.s32 	%r462, %r461, 48;
	sub.s32 	%r463, %r3605, %r462;
	cvt.rn.f32.s32 	%f571, %r463;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p163, %f763, 0f40000000;
	@%p163 bra 	$L__BB0_103;
// %bb.92:
	setp.gtu.f32 	%p164, %f763, 0f4B800000;
	@%p164 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r53, %f763;
	and.b32  	%r464, %r53, 8388607;
	or.b32  	%r3618, %r464, 1065353216;
	mov.b32 	%f762, %r3618;
	add.s32 	%r465, %r53, -1073741824;
	and.b32  	%r3619, %r465, -8388608;
	setp.eq.s32 	%p170, %r3619, 0;
	@%p170 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3619, 192937984;
	add.s32 	%r467, %r3618, %r466;
	mov.b32 	%f583, %r467;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3619, %r3619, %r466;
	mov.b32 	%r3618, %f762;
	setp.ne.s32 	%p171, %r3619, 0;
	setp.ne.s32 	%p172, %r3618, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p174, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p165, %r52, 1073741824;
	@%p165 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p166, %r52, -2147483647;
	@%p166 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p169, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p169;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p167, %f109, 0f40800000;
	@%p167 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p168, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p168;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p175, %f592, 0f7F800000;
	@%p175 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r468, %f106;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f763;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f763, %r471;
$L__BB0_105:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r472, %f593;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f594, %r474;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p176, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p176;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p177, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p177;
	cvt.rzi.s32.f32 	%r475, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p178, %r476, 1;
	selp.f32 	%f612, %f610, %f611, %p178;
	selp.f32 	%f613, %f611, %f610, %p178;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p179, %r477, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p179;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p180, %r479, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p180;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p181, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p181;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p182, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p182;
$L__BB0_106:                            // %L700
	selp.f32 	%f248, %f244, %f247, %p32;
	setp.gt.f32 	%p34, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p139;
	setp.gt.f32 	%p141, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_122;
// %bb.107:                             // %L738
	cvt.u16.u32 	%rs22, %r3604;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p183, %f769, 0f40000000;
	@%p183 bra 	$L__BB0_119;
// %bb.108:
	setp.gtu.f32 	%p184, %f769, 0f4B800000;
	@%p184 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_109;
$L__BB0_115:
	mov.b32 	%r63, %f769;
	and.b32  	%r487, %r63, 8388607;
	or.b32  	%r3620, %r487, 1065353216;
	mov.b32 	%f768, %r3620;
	add.s32 	%r488, %r63, -1073741824;
	and.b32  	%r3621, %r488, -8388608;
	setp.eq.s32 	%p190, %r3621, 0;
	@%p190 bra 	$L__BB0_118;
// %bb.116:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_117:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3621, 192937984;
	add.s32 	%r490, %r3620, %r489;
	mov.b32 	%f636, %r490;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3621, %r3621, %r489;
	mov.b32 	%r3620, %f768;
	setp.ne.s32 	%p191, %r3621, 0;
	setp.ne.s32 	%p192, %r3620, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_117;
$L__BB0_118:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p194, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_119;
$L__BB0_109:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p185, %r62, 1073741824;
	@%p185 bra 	$L__BB0_114;
// %bb.110:
	setp.lt.u32 	%p186, %r62, -2147483647;
	@%p186 bra 	$L__BB0_112;
// %bb.111:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p189, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p189;
	bra.uni 	$L__BB0_114;
$L__BB0_112:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p187, %f130, 0f40800000;
	@%p187 bra 	$L__BB0_114;
// %bb.113:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p188, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p188;
$L__BB0_114:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_119:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p195, %f645, 0f7F800000;
	@%p195 bra 	$L__BB0_121;
// %bb.120:
	mov.b32 	%r491, %f127;
	and.b32  	%r492, %r491, -2147483648;
	mov.b32 	%r493, %f769;
	or.b32  	%r494, %r492, %r493;
	mov.b32 	%f769, %r494;
$L__BB0_121:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r495, %f646;
	and.b32  	%r496, %r495, -2147483648;
	or.b32  	%r497, %r496, 1056964608;
	mov.b32 	%f647, %r497;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p196, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p196;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p197, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p197;
	cvt.rzi.s32.f32 	%r498, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r499, %r498, 1;
	setp.eq.b32 	%p198, %r499, 1;
	selp.f32 	%f665, %f663, %f664, %p198;
	selp.f32 	%f666, %f664, %f663, %p198;
	and.b32  	%r500, %r498, 2;
	setp.eq.s32 	%p199, %r500, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p199;
	add.s32 	%r501, %r498, 1;
	and.b32  	%r502, %r501, 2;
	setp.eq.s32 	%p200, %r502, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p200;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p201, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p201;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p202, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p202;
$L__BB0_122:                            // %L772
	selp.f32 	%f254, %f253, %f248, %p34;
	selp.f32 	%f517, %f516, %f511, %p141;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_138;
// %bb.123:                             // %L780
	mul.hi.u32 	%r504, %r3605, -1431655765;
	shr.u32 	%r505, %r504, 2;
	mul.lo.s32 	%r506, %r505, 6;
	sub.s32 	%r507, %r3605, %r506;
	cvt.rn.f32.s32 	%f677, %r507;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p203, %f775, 0f40000000;
	@%p203 bra 	$L__BB0_135;
// %bb.124:
	setp.gtu.f32 	%p204, %f775, 0f4B800000;
	@%p204 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_125;
$L__BB0_131:
	mov.b32 	%r71, %f775;
	and.b32  	%r508, %r71, 8388607;
	or.b32  	%r3622, %r508, 1065353216;
	mov.b32 	%f774, %r3622;
	add.s32 	%r509, %r71, -1073741824;
	and.b32  	%r3623, %r509, -8388608;
	setp.eq.s32 	%p210, %r3623, 0;
	@%p210 bra 	$L__BB0_134;
// %bb.132:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_133:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r510, %r3623, 192937984;
	add.s32 	%r511, %r3622, %r510;
	mov.b32 	%f689, %r511;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3623, %r3623, %r510;
	mov.b32 	%r3622, %f774;
	setp.ne.s32 	%p211, %r3623, 0;
	setp.ne.s32 	%p212, %r3622, 0;
	and.pred  	%p213, %p211, %p212;
	@%p213 bra 	$L__BB0_133;
$L__BB0_134:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p214, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p214;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_135;
$L__BB0_125:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p205, %r70, 1073741824;
	@%p205 bra 	$L__BB0_130;
// %bb.126:
	setp.lt.u32 	%p206, %r70, -2147483647;
	@%p206 bra 	$L__BB0_128;
// %bb.127:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p209, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p209;
	bra.uni 	$L__BB0_130;
$L__BB0_128:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p207, %f151, 0f40800000;
	@%p207 bra 	$L__BB0_130;
// %bb.129:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p208, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p208;
$L__BB0_130:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_135:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p215, %f698, 0f7F800000;
	@%p215 bra 	$L__BB0_137;
// %bb.136:
	mov.b32 	%r512, %f148;
	and.b32  	%r513, %r512, -2147483648;
	mov.b32 	%r514, %f775;
	or.b32  	%r515, %r513, %r514;
	mov.b32 	%f775, %r515;
$L__BB0_137:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r516, %f699;
	and.b32  	%r517, %r516, -2147483648;
	or.b32  	%r518, %r517, 1056964608;
	mov.b32 	%f700, %r518;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p216, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p216;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p217, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p217;
	cvt.rzi.s32.f32 	%r519, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r520, %r519, 1;
	setp.eq.b32 	%p218, %r520, 1;
	selp.f32 	%f718, %f716, %f717, %p218;
	selp.f32 	%f719, %f717, %f716, %p218;
	and.b32  	%r521, %r519, 2;
	setp.eq.s32 	%p219, %r521, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p219;
	add.s32 	%r522, %r519, 1;
	and.b32  	%r523, %r522, 2;
	setp.eq.s32 	%p220, %r523, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p220;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p221, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p221;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p222, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p222;
$L__BB0_138:                            // %L814
	mov.b32 	%r316, %f254;
	mov.b32 	%r319, %f251;
	mov.b32 	%r411, %f747;
	mov.b32 	%r412, %f753;
	mov.b32 	%r417, %f748;
	mov.b32 	%r418, %f754;
	mov.b32 	%r430, %f517;
	mov.b32 	%r433, %f514;
	mov.b32 	%r525, %f771;
	mov.b32 	%r526, %f777;
	mov.b32 	%r531, %f772;
	mov.b32 	%r532, %f778;
	mov.u32 	%r3711, 999999999;
	cvt.u16.u32 	%rs159, %r2;
	@%p78 bra 	$L__BB0_140;
// %bb.139:                             // %L850
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b16  	%rs30, %rs159, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs159, %rs33;
	cvt.u32.u16 	%r537, %rs34;
	and.b32  	%r538, %r537, 255;
	mad.lo.s32 	%r539, %r538, 24, %r3;
	cvt.u16.u32 	%rs35, %r539;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r540, %rs39;
	mul.wide.u32 	%rd74, %r540, 4;
	add.s64 	%rd75, %rd1, %rd74;
	ld.global.u32 	%r541, [%rd75];
	cvt.s32.s16 	%r542, %r541;
	shr.s32 	%r543, %r541, 16;
	mul.lo.s32 	%r544, %r543, 801;
	mad.lo.s32 	%r3711, %r542, 33, %r544;
$L__BB0_140:                            // %pass400
	xor.b32  	%r315, %r319, -2147483648;
	mov.b32 	%r367, %f735;
	mov.b32 	%r368, %f741;
	mov.b32 	%r370, %f736;
	mov.b32 	%r371, %f742;
	xor.b32  	%r414, %r417, -2147483648;
	xor.b32  	%r415, %r418, -2147483648;
	xor.b32  	%r429, %r433, -2147483648;
	mov.b32 	%r481, %f759;
	mov.b32 	%r482, %f765;
	mov.b32 	%r484, %f760;
	mov.b32 	%r485, %f766;
	xor.b32  	%r528, %r531, -2147483648;
	xor.b32  	%r529, %r532, -2147483648;
	and.b32  	%r545, %r2, 24;
	setp.ne.s32 	%p224, %r545, 24;
	cvt.u16.u32 	%rs160, %r200;
	mul.lo.s32 	%r3624, %r1, 1152;
	@%p224 bra 	$L__BB0_141;
// %bb.193:                             // %pass400.L1184_crit_edge
	mul.lo.s16 	%rs47, %rs160, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs160, %rs49;
	cvt.u32.u16 	%r557, %rs50;
	and.b32  	%r3625, %r557, 255;
	mov.u32 	%r3626, 0;
	mov.u32 	%r3627, %r3626;
	bra.uni 	$L__BB0_142;
$L__BB0_141:                            // %pass426
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mul.lo.s32 	%r546, %r199, 144;
	mul.lo.s16 	%rs41, %rs160, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs160, %rs43;
	cvt.u32.u16 	%r547, %rs44;
	and.b32  	%r3625, %r547, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r548, %rs45, 24;
	or.b32  	%r549, %r3624, %r3;
	add.s32 	%r550, %r549, %r546;
	add.s32 	%r551, %r550, %r548;
	mul.wide.u32 	%rd76, %r551, 4;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.u32 	%r3626, [%rd77];
	or.b32  	%r552, %r3, 576;
	add.s32 	%r553, %r552, %r3624;
	add.s32 	%r554, %r553, %r546;
	add.s32 	%r555, %r554, %r548;
	mul.wide.u32 	%rd78, %r555, 4;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.u32 	%r3627, [%rd79];
$L__BB0_142:                            // %L1184
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r533, %r526, %r525;
	// end inline asm
	mov.u32 	%r3628, 0;
	shl.b32 	%r87, %r289, 12;
	shl.b32 	%r559, %r2, 3;
	and.b32  	%r88, %r559, 128;
	shl.b32 	%r560, %r2, 2;
	and.b32  	%r89, %r560, 60;
	shl.b32 	%r90, %r1, 8;
	or.b32  	%r561, %r560, %r90;
	or.b32  	%r91, %r561, 64;
	add.s32 	%r92, %r3, 24;
	and.b32  	%r562, %r212, 30;
	shr.u32 	%r563, %r2, 4;
	or.b32  	%r564, %r562, %r563;
	mul.lo.s32 	%r565, %r564, 257;
	or.b32  	%r566, %r563, %r212;
	or.b32  	%r567, %r566, 32;
	mul.lo.s32 	%r568, %r567, 257;
	and.b32  	%r569, %r4, 224;
	and.b16  	%rs52, %rs159, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs159, %rs55;
	cvt.u32.u16 	%r570, %rs56;
	and.b32  	%r93, %r570, 255;
	shr.u32 	%r571, %r3, 3;
	mad.lo.s32 	%r572, %r571, 257, %r569;
	shr.u32 	%r573, %r92, 3;
	mad.lo.s32 	%r574, %r573, 257, %r569;
	add.s32 	%r575, %r3, 48;
	shr.u32 	%r576, %r575, 3;
	mad.lo.s32 	%r577, %r576, 257, %r569;
	add.s32 	%r578, %r3, 72;
	shr.u32 	%r579, %r578, 3;
	mad.lo.s32 	%r580, %r579, 257, %r569;
	or.b32  	%r581, %r571, 12;
	mad.lo.s32 	%r582, %r581, 257, %r569;
	add.s32 	%r583, %r3, 120;
	shr.u32 	%r584, %r583, 3;
	mad.lo.s32 	%r585, %r584, 257, %r569;
	add.s32 	%r586, %r3, 144;
	shr.u32 	%r587, %r586, 3;
	mad.lo.s32 	%r588, %r587, 257, %r569;
	add.s32 	%r589, %r3, 168;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r591, %r590, 257, %r569;
	or.b32  	%r592, %r571, 24;
	mad.lo.s32 	%r593, %r592, 257, %r569;
	add.s32 	%r594, %r3, 216;
	shr.u32 	%r595, %r594, 3;
	mad.lo.s32 	%r596, %r595, 257, %r569;
	add.s32 	%r597, %r3, 240;
	shr.u32 	%r598, %r597, 3;
	mad.lo.s32 	%r599, %r598, 257, %r569;
	add.s32 	%r600, %r3, 264;
	shr.u32 	%r601, %r600, 3;
	mad.lo.s32 	%r602, %r601, 257, %r569;
	or.b32  	%r603, %r571, 36;
	mad.lo.s32 	%r604, %r603, 257, %r569;
	add.s32 	%r605, %r3, 312;
	shr.u32 	%r606, %r605, 3;
	mad.lo.s32 	%r607, %r606, 257, %r569;
	add.s32 	%r608, %r3, 336;
	shr.u32 	%r609, %r608, 3;
	mad.lo.s32 	%r610, %r609, 257, %r569;
	add.s32 	%r611, %r3, 360;
	shr.u32 	%r612, %r611, 3;
	mad.lo.s32 	%r613, %r612, 257, %r569;
	or.b32  	%r614, %r571, 48;
	mad.lo.s32 	%r615, %r614, 257, %r569;
	add.s32 	%r616, %r3, 408;
	shr.u32 	%r617, %r616, 3;
	mad.lo.s32 	%r618, %r617, 257, %r569;
	add.s32 	%r619, %r3, 432;
	shr.u32 	%r620, %r619, 3;
	mad.lo.s32 	%r621, %r620, 257, %r569;
	add.s32 	%r622, %r3, 456;
	shr.u32 	%r623, %r622, 3;
	mad.lo.s32 	%r624, %r623, 257, %r569;
	or.b32  	%r625, %r571, 60;
	mad.lo.s32 	%r626, %r625, 257, %r569;
	add.s32 	%r627, %r3, 504;
	bfe.u32 	%r628, %r627, 3, 6;
	mad.lo.s32 	%r629, %r628, 257, %r569;
	mul.lo.s32 	%r630, %r3, 33;
	mad.lo.s32 	%r631, %r199, 4806, %r630;
	mad.lo.s32 	%r632, %r3625, 801, %r631;
	bfe.s32 	%r633, %r2, 3, 1;
	and.b32  	%r634, %r633, 514;
	and.b32  	%r635, %r2, 1;
	neg.s32 	%r636, %r635;
	and.b32  	%r637, %r636, 4112;
	bfe.s32 	%r638, %r2, 1, 1;
	and.b32  	%r639, %r638, 2056;
	bfe.s32 	%r640, %r2, 2, 1;
	and.b32  	%r641, %r640, 1028;
	mul.lo.s32 	%r642, %r563, 257;
	add.s32 	%r643, %r642, %r3;
	add.s32 	%r644, %r643, %r634;
	add.s32 	%r645, %r644, %r637;
	add.s32 	%r646, %r645, %r639;
	add.s32 	%r647, %r646, %r641;
	mul.wide.u32 	%rd80, %r647, 4;
	mov.u64 	%rd81, shmem;
	add.s64 	%rd6, %rd81, %rd80;
	or.b32  	%r648, %r3, 8256;
	add.s32 	%r649, %r648, %r642;
	add.s32 	%r650, %r649, %r634;
	add.s32 	%r651, %r650, %r637;
	add.s32 	%r652, %r651, %r639;
	add.s32 	%r653, %r652, %r641;
	mul.wide.u32 	%rd82, %r653, 4;
	add.s64 	%rd7, %rd81, %rd82;
	or.b32  	%r654, %r3, 32;
	add.s32 	%r655, %r654, %r642;
	add.s32 	%r656, %r655, %r634;
	add.s32 	%r657, %r656, %r637;
	add.s32 	%r658, %r657, %r639;
	add.s32 	%r659, %r658, %r641;
	mul.wide.u32 	%rd83, %r659, 4;
	add.s64 	%rd8, %rd81, %rd83;
	or.b32  	%r660, %r3, 8288;
	add.s32 	%r661, %r660, %r642;
	add.s32 	%r662, %r661, %r634;
	add.s32 	%r663, %r662, %r637;
	add.s32 	%r664, %r663, %r639;
	add.s32 	%r665, %r664, %r641;
	mul.wide.u32 	%rd84, %r665, 4;
	add.s64 	%rd9, %rd81, %rd84;
	mul.lo.s32 	%r666, %r199, 6;
	shr.u32 	%r667, %r3, 4;
	bfe.s32 	%r668, %r3, 1, 1;
	and.b32  	%r669, %r668, 4112;
	bfe.s32 	%r670, %r3, 2, 1;
	and.b32  	%r671, %r670, 2056;
	and.b32  	%r672, %r3, 1;
	neg.s32 	%r673, %r672;
	and.b32  	%r674, %r673, 8256;
	bfe.s32 	%r675, %r3, 3, 1;
	and.b32  	%r676, %r3, 8;
	setp.eq.s32 	%p225, %r676, 0;
	and.b32  	%r677, %r675, 1028;
	mad.lo.s32 	%r678, %r667, 514, %r666;
	add.s32 	%r679, %r678, %r669;
	add.s32 	%r680, %r679, %r671;
	add.s32 	%r681, %r680, %r677;
	add.s32 	%r682, %r681, %r674;
	add.s32 	%r683, %r682, %r3625;
	mul.wide.u32 	%rd85, %r683, 4;
	add.s64 	%rd10, %rd81, %rd85;
	bfe.s32 	%r684, %r92, 4, 1;
	and.b32  	%r685, %r684, 514;
	selp.b32 	%r686, 1028, 0, %p225;
	shr.u32 	%r687, %r92, 5;
	add.s32 	%r688, %r669, %r666;
	add.s32 	%r689, %r688, %r671;
	add.s32 	%r690, %r689, %r686;
	add.s32 	%r691, %r690, %r674;
	mad.lo.s32 	%r692, %r687, 257, %r691;
	add.s32 	%r693, %r692, %r685;
	add.s32 	%r694, %r693, %r3625;
	mul.wide.u32 	%rd86, %r694, 4;
	add.s64 	%rd11, %rd81, %rd86;
	add.s32 	%r695, %r683, 32;
	mul.wide.u32 	%rd87, %r695, 4;
	add.s64 	%rd12, %rd81, %rd87;
	add.s32 	%r696, %r694, 32;
	mul.wide.u32 	%rd88, %r696, 4;
	add.s64 	%rd13, %rd81, %rd88;
	mul.lo.s32 	%r697, %r291, 18432;
	mul.lo.s32 	%r94, %r3, 24;
	or.b32  	%r95, %r3624, %r93;
	cvt.s64.s32 	%rd14, %r697;
	cvt.u16.u32 	%rs57, %r92;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r698, %rs62;
	and.b32  	%r699, %r698, 255;
	mad.lo.s32 	%r96, %r699, 24, %r95;
	add.s32 	%r700, %r3, %r565;
	mul.wide.u32 	%rd89, %r700, 4;
	add.s64 	%rd15, %rd81, %rd89;
	cvt.u64.u32 	%rd90, %r3;
	cvt.u64.u32 	%rd91, %r565;
	add.s64 	%rd92, %rd91, %rd90;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd16, %rd81, %rd93;
	add.s32 	%r701, %r3, %r568;
	mul.wide.u32 	%rd94, %r701, 4;
	add.s64 	%rd17, %rd81, %rd94;
	cvt.u64.u32 	%rd95, %r568;
	add.s64 	%rd96, %rd95, %rd90;
	shl.b64 	%rd97, %rd96, 2;
	add.s64 	%rd18, %rd81, %rd97;
	add.s32 	%r702, %r572, %r93;
	mul.wide.u32 	%rd98, %r702, 4;
	add.s64 	%rd19, %rd81, %rd98;
	add.s32 	%r703, %r574, %r93;
	mul.wide.u32 	%rd99, %r703, 4;
	add.s64 	%rd20, %rd81, %rd99;
	add.s32 	%r704, %r577, %r93;
	mul.wide.u32 	%rd100, %r704, 4;
	add.s64 	%rd21, %rd81, %rd100;
	add.s32 	%r705, %r580, %r93;
	mul.wide.u32 	%rd101, %r705, 4;
	add.s64 	%rd22, %rd81, %rd101;
	add.s32 	%r706, %r582, %r93;
	mul.wide.u32 	%rd102, %r706, 4;
	add.s64 	%rd23, %rd81, %rd102;
	add.s32 	%r707, %r585, %r93;
	mul.wide.u32 	%rd103, %r707, 4;
	add.s64 	%rd24, %rd81, %rd103;
	add.s32 	%r708, %r588, %r93;
	mul.wide.u32 	%rd104, %r708, 4;
	add.s64 	%rd25, %rd81, %rd104;
	add.s32 	%r709, %r591, %r93;
	mul.wide.u32 	%rd105, %r709, 4;
	add.s64 	%rd26, %rd81, %rd105;
	add.s32 	%r710, %r593, %r93;
	mul.wide.u32 	%rd106, %r710, 4;
	add.s64 	%rd27, %rd81, %rd106;
	add.s32 	%r711, %r596, %r93;
	mul.wide.u32 	%rd107, %r711, 4;
	add.s64 	%rd28, %rd81, %rd107;
	add.s32 	%r712, %r599, %r93;
	mul.wide.u32 	%rd108, %r712, 4;
	add.s64 	%rd29, %rd81, %rd108;
	add.s32 	%r713, %r602, %r93;
	mul.wide.u32 	%rd109, %r713, 4;
	add.s64 	%rd30, %rd81, %rd109;
	add.s32 	%r714, %r604, %r93;
	mul.wide.u32 	%rd110, %r714, 4;
	add.s64 	%rd31, %rd81, %rd110;
	add.s32 	%r715, %r607, %r93;
	mul.wide.u32 	%rd111, %r715, 4;
	add.s64 	%rd32, %rd81, %rd111;
	add.s32 	%r716, %r610, %r93;
	mul.wide.u32 	%rd112, %r716, 4;
	add.s64 	%rd33, %rd81, %rd112;
	add.s32 	%r717, %r613, %r93;
	mul.wide.u32 	%rd113, %r717, 4;
	add.s64 	%rd34, %rd81, %rd113;
	add.s32 	%r718, %r615, %r93;
	mul.wide.u32 	%rd114, %r718, 4;
	add.s64 	%rd35, %rd81, %rd114;
	add.s32 	%r719, %r618, %r93;
	mul.wide.u32 	%rd115, %r719, 4;
	add.s64 	%rd36, %rd81, %rd115;
	add.s32 	%r720, %r621, %r93;
	mul.wide.u32 	%rd116, %r720, 4;
	add.s64 	%rd37, %rd81, %rd116;
	add.s32 	%r721, %r624, %r93;
	mul.wide.u32 	%rd117, %r721, 4;
	add.s64 	%rd38, %rd81, %rd117;
	add.s32 	%r722, %r626, %r93;
	mul.wide.u32 	%rd118, %r722, 4;
	add.s64 	%rd39, %rd81, %rd118;
	add.s32 	%r723, %r629, %r93;
	mul.wide.u32 	%rd119, %r723, 4;
	add.s64 	%rd40, %rd81, %rd119;
	mul.wide.u32 	%rd120, %r632, 4;
	add.s64 	%rd41, %rd81, %rd120;
	add.s32 	%r724, %r647, 64;
	mul.wide.u32 	%rd121, %r724, 4;
	add.s64 	%rd42, %rd81, %rd121;
	add.s32 	%r725, %r653, 64;
	mul.wide.u32 	%rd122, %r725, 4;
	add.s64 	%rd43, %rd81, %rd122;
	add.s32 	%r726, %r659, 64;
	mul.wide.u32 	%rd123, %r726, 4;
	add.s64 	%rd44, %rd81, %rd123;
	add.s32 	%r727, %r665, 64;
	mul.wide.u32 	%rd124, %r727, 4;
	add.s64 	%rd45, %rd81, %rd124;
	add.s32 	%r728, %r647, 128;
	mul.wide.u32 	%rd125, %r728, 4;
	add.s64 	%rd46, %rd81, %rd125;
	add.s32 	%r729, %r653, 128;
	mul.wide.u32 	%rd126, %r729, 4;
	add.s64 	%rd47, %rd81, %rd126;
	add.s32 	%r730, %r659, 128;
	mul.wide.u32 	%rd127, %r730, 4;
	add.s64 	%rd48, %rd81, %rd127;
	add.s32 	%r731, %r665, 128;
	mul.wide.u32 	%rd128, %r731, 4;
	add.s64 	%rd49, %rd81, %rd128;
	add.s32 	%r732, %r647, 192;
	mul.wide.u32 	%rd129, %r732, 4;
	add.s64 	%rd50, %rd81, %rd129;
	add.s32 	%r733, %r653, 192;
	mul.wide.u32 	%rd130, %r733, 4;
	add.s64 	%rd51, %rd81, %rd130;
	add.s32 	%r734, %r659, 192;
	mul.wide.u32 	%rd131, %r734, 4;
	add.s64 	%rd52, %rd81, %rd131;
	add.s32 	%r735, %r665, 192;
	mul.wide.u32 	%rd132, %r735, 4;
	add.s64 	%rd53, %rd81, %rd132;
	add.s32 	%r736, %r683, 64;
	mul.wide.u32 	%rd133, %r736, 4;
	add.s64 	%rd54, %rd81, %rd133;
	add.s32 	%r737, %r694, 64;
	mul.wide.u32 	%rd134, %r737, 4;
	add.s64 	%rd55, %rd81, %rd134;
	add.s32 	%r738, %r683, 96;
	mul.wide.u32 	%rd135, %r738, 4;
	add.s64 	%rd56, %rd81, %rd135;
	add.s32 	%r739, %r694, 96;
	mul.wide.u32 	%rd136, %r739, 4;
	add.s64 	%rd57, %rd81, %rd136;
	add.s32 	%r740, %r683, 128;
	mul.wide.u32 	%rd137, %r740, 4;
	add.s64 	%rd58, %rd81, %rd137;
	add.s32 	%r741, %r694, 128;
	mul.wide.u32 	%rd138, %r741, 4;
	add.s64 	%rd59, %rd81, %rd138;
	add.s32 	%r742, %r683, 160;
	mul.wide.u32 	%rd139, %r742, 4;
	add.s64 	%rd60, %rd81, %rd139;
	add.s32 	%r743, %r694, 160;
	mul.wide.u32 	%rd140, %r743, 4;
	add.s64 	%rd61, %rd81, %rd140;
	add.s32 	%r744, %r683, 192;
	mul.wide.u32 	%rd141, %r744, 4;
	add.s64 	%rd62, %rd81, %rd141;
	add.s32 	%r745, %r694, 192;
	mul.wide.u32 	%rd142, %r745, 4;
	add.s64 	%rd63, %rd81, %rd142;
	add.s32 	%r746, %r683, 224;
	mul.wide.u32 	%rd143, %r746, 4;
	add.s64 	%rd64, %rd81, %rd143;
	add.s32 	%r747, %r694, 224;
	mul.wide.u32 	%rd144, %r747, 4;
	add.s64 	%rd65, %rd81, %rd144;
	setp.gt.u32 	%p227, %r3, 7;
	setp.lt.u32 	%p228, %r2, 16;
	setp.lt.u32 	%p236, %r2, 24;
	mov.u16 	%rs100, 25600;
	mov.u16 	%rs102, 21504;
	mov.u32 	%r3658, %r3628;
	mov.u32 	%r3659, %r3628;
	mov.u32 	%r3660, %r3628;
	mov.u32 	%r3661, %r3628;
	bra.uni 	$L__BB0_143;
$L__BB0_165:                            // %L30605
                                        //   in Loop: Header=BB0_143 Depth=1
	add.s32 	%r198, %r3628, 48;
	setp.ne.s32 	%p274, %r3628, 130992;
	mov.u32 	%r3628, %r198;
	@%p274 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_166;
$L__BB0_143:                            // %L1187
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_146 Depth 2
                                        //     Child Loop BB0_156 Depth 2
	add.s32 	%r748, %r3628, %r289;
	setp.lt.s32 	%p226, %r748, %r290;
	@%p226 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_166;
$L__BB0_144:                            // %pass619
                                        //   in Loop: Header=BB0_143 Depth=1
	mul.hi.u32 	%r942, %r3628, -1431655765;
	shr.u32 	%r943, %r942, 5;
	mul.lo.s32 	%r944, %r943, 48;
	add.s32 	%r945, %r944, %r3;
	shl.b32 	%r946, %r945, 12;
	or.b32  	%r947, %r946, %r88;
	or.b32  	%r948, %r947, %r89;
	or.b32  	%r949, %r948, %r90;
	add.s32 	%r950, %r949, %r87;
	shr.s32 	%r951, %r950, 31;
	shr.u32 	%r952, %r951, 3;
	add.s32 	%r953, %r950, %r952;
	shr.s32 	%r954, %r953, 29;
	setp.lt.s32 	%p230, %r950, 0;
	and.b32  	%r955, %r953, -536870912;
	setp.ne.s32 	%p231, %r955, %r950;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r956, 1, 0, %p232;
	sub.s32 	%r957, %r956, %r954;
	shl.b32 	%r958, %r957, 29;
	add.s32 	%r959, %r958, %r950;
	mul.wide.s32 	%rd145, %r959, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r960, %r961, %r962, %r963}, [%rd146];
	or.b32  	%r964, %r91, %r947;
	add.s32 	%r965, %r964, %r87;
	shr.s32 	%r966, %r965, 31;
	shr.u32 	%r967, %r966, 3;
	add.s32 	%r968, %r965, %r967;
	shr.u32 	%r969, %r968, 29;
	shr.u32 	%r970, %r965, 31;
	sub.s32 	%r971, %r970, %r969;
	shl.b32 	%r972, %r971, 29;
	add.s32 	%r973, %r972, %r965;
	mul.wide.s32 	%rd147, %r973, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r974, %r975, %r976, %r977}, [%rd148];
	add.s32 	%r978, %r92, %r944;
	shl.b32 	%r979, %r978, 12;
	or.b32  	%r980, %r979, %r88;
	or.b32  	%r981, %r980, %r89;
	or.b32  	%r982, %r981, %r90;
	add.s32 	%r983, %r982, %r87;
	shr.s32 	%r984, %r983, 31;
	shr.u32 	%r985, %r984, 3;
	add.s32 	%r986, %r983, %r985;
	shr.s32 	%r987, %r986, 29;
	setp.lt.s32 	%p233, %r983, 0;
	and.b32  	%r988, %r986, -536870912;
	setp.ne.s32 	%p234, %r988, %r983;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r989, 1, 0, %p235;
	sub.s32 	%r990, %r989, %r987;
	shl.b32 	%r991, %r990, 29;
	add.s32 	%r992, %r991, %r983;
	mul.wide.s32 	%rd149, %r992, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r993, %r994, %r995, %r996}, [%rd150];
	or.b32  	%r997, %r91, %r980;
	add.s32 	%r998, %r997, %r87;
	shr.s32 	%r999, %r998, 31;
	shr.u32 	%r1000, %r999, 3;
	add.s32 	%r1001, %r998, %r1000;
	shr.u32 	%r1002, %r1001, 29;
	shr.u32 	%r1003, %r998, 31;
	sub.s32 	%r1004, %r1003, %r1002;
	shl.b32 	%r1005, %r1004, 29;
	add.s32 	%r1006, %r1005, %r998;
	mul.wide.s32 	%rd151, %r1006, 4;
	add.s64 	%rd152, %rd3, %rd151;
	ld.global.v4.u32 	{%r1007, %r1008, %r1009, %r1010}, [%rd152];
	selp.b32 	%r1011, %r962, %r960, %p228;
	shfl.sync.bfly.b32	%r1012, %r1011, 16, 31, -1;
	selp.b32 	%r751, %r960, %r1012, %p228;
	selp.b32 	%r756, %r1012, %r962, %p228;
	selp.b32 	%r1013, %r963, %r961, %p228;
	shfl.sync.bfly.b32	%r1014, %r1013, 16, 31, -1;
	selp.b32 	%r759, %r961, %r1014, %p228;
	selp.b32 	%r764, %r1014, %r963, %p228;
	selp.b32 	%r1015, %r976, %r974, %p228;
	shfl.sync.bfly.b32	%r1016, %r1015, 16, 31, -1;
	selp.b32 	%r767, %r974, %r1016, %p228;
	selp.b32 	%r772, %r1016, %r976, %p228;
	selp.b32 	%r1017, %r977, %r975, %p228;
	shfl.sync.bfly.b32	%r1018, %r1017, 16, 31, -1;
	selp.b32 	%r775, %r975, %r1018, %p228;
	selp.b32 	%r780, %r1018, %r977, %p228;
	selp.b32 	%r1019, %r995, %r993, %p228;
	shfl.sync.bfly.b32	%r1020, %r1019, 16, 31, -1;
	selp.b32 	%r783, %r993, %r1020, %p228;
	selp.b32 	%r788, %r1020, %r995, %p228;
	selp.b32 	%r1021, %r996, %r994, %p228;
	shfl.sync.bfly.b32	%r1022, %r1021, 16, 31, -1;
	selp.b32 	%r791, %r994, %r1022, %p228;
	selp.b32 	%r796, %r1022, %r996, %p228;
	selp.b32 	%r1023, %r1009, %r1007, %p228;
	shfl.sync.bfly.b32	%r1024, %r1023, 16, 31, -1;
	selp.b32 	%r799, %r1007, %r1024, %p228;
	selp.b32 	%r804, %r1024, %r1009, %p228;
	selp.b32 	%r1025, %r1010, %r1008, %p228;
	shfl.sync.bfly.b32	%r1026, %r1025, 16, 31, -1;
	selp.b32 	%r807, %r1008, %r1026, %p228;
	selp.b32 	%r812, %r1026, %r1010, %p228;
	shl.b32 	%r752, %r756, 4;
	mov.u32 	%r750, 252645135;
	// begin inline asm
	lop3.b32 %r814, %r750, %r751, %r752, 202;
	// end inline asm
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r830, %r750, %r755, %r756, 202;
	// end inline asm
	shl.b32 	%r760, %r764, 4;
	// begin inline asm
	lop3.b32 %r822, %r750, %r759, %r760, 202;
	// end inline asm
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r838, %r750, %r763, %r764, 202;
	// end inline asm
	shl.b32 	%r768, %r772, 4;
	// begin inline asm
	lop3.b32 %r846, %r750, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r862, %r750, %r771, %r772, 202;
	// end inline asm
	shl.b32 	%r776, %r780, 4;
	// begin inline asm
	lop3.b32 %r854, %r750, %r775, %r776, 202;
	// end inline asm
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r870, %r750, %r779, %r780, 202;
	// end inline asm
	shl.b32 	%r784, %r788, 4;
	// begin inline asm
	lop3.b32 %r815, %r750, %r783, %r784, 202;
	// end inline asm
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r831, %r750, %r787, %r788, 202;
	// end inline asm
	shl.b32 	%r792, %r796, 4;
	// begin inline asm
	lop3.b32 %r823, %r750, %r791, %r792, 202;
	// end inline asm
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r839, %r750, %r795, %r796, 202;
	// end inline asm
	shl.b32 	%r800, %r804, 4;
	// begin inline asm
	lop3.b32 %r847, %r750, %r799, %r800, 202;
	// end inline asm
	shr.u32 	%r803, %r799, 4;
	// begin inline asm
	lop3.b32 %r863, %r750, %r803, %r804, 202;
	// end inline asm
	shl.b32 	%r808, %r812, 4;
	// begin inline asm
	lop3.b32 %r855, %r750, %r807, %r808, 202;
	// end inline asm
	shr.u32 	%r811, %r807, 4;
	// begin inline asm
	lop3.b32 %r871, %r750, %r811, %r812, 202;
	// end inline asm
	mov.u32 	%r816, 25152;
	// begin inline asm
	prmt.b32 %r878, %r814, %r815, %r816;
	// end inline asm
	mov.u32 	%r820, 29521;
	// begin inline asm
	prmt.b32 %r910, %r814, %r815, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r822, %r823, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r822, %r823, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r830, %r831, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r830, %r831, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r838, %r839, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r838, %r839, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r846, %r847, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r926, %r846, %r847, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r854, %r855, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r934, %r854, %r855, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r862, %r863, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r862, %r863, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r870, %r871, %r816;
	// end inline asm
	// begin inline asm
	prmt.b32 %r935, %r870, %r871, %r820;
	// end inline asm
	mov.u32 	%r936, 21520;
	// begin inline asm
	prmt.b32 %r877, %r878, %r879, %r936;
	// end inline asm
	mov.u32 	%r940, 30258;
	// begin inline asm
	prmt.b32 %r881, %r878, %r879, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r886, %r887, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r886, %r887, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r902, %r903, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r902, %r903, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r910, %r911, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r910, %r911, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r918, %r919, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r918, %r919, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r926, %r927, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r926, %r927, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r933, %r934, %r935, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r934, %r935, %r940;
	// end inline asm
	st.shared.u32 	[%rd15], %r877;
	st.shared.u32 	[%rd16+512], %r885;
	st.shared.u32 	[%rd16+256], %r881;
	st.shared.u32 	[%rd16+768], %r889;
	st.shared.u32 	[%rd17], %r893;
	st.shared.u32 	[%rd18+512], %r901;
	st.shared.u32 	[%rd18+256], %r897;
	st.shared.u32 	[%rd18+768], %r905;
	st.shared.u32 	[%rd16+128], %r909;
	st.shared.u32 	[%rd16+640], %r917;
	st.shared.u32 	[%rd16+384], %r913;
	st.shared.u32 	[%rd16+896], %r921;
	st.shared.u32 	[%rd18+128], %r925;
	st.shared.u32 	[%rd18+640], %r933;
	st.shared.u32 	[%rd18+384], %r929;
	st.shared.u32 	[%rd18+896], %r937;
	bar.sync 	0;
	ld.shared.u32 	%r1027, [%rd19];
	ld.shared.u32 	%r1028, [%rd20];
	ld.shared.u32 	%r1029, [%rd21];
	ld.shared.u32 	%r1030, [%rd22];
	ld.shared.u32 	%r1031, [%rd23];
	ld.shared.u32 	%r1032, [%rd24];
	ld.shared.u32 	%r1033, [%rd25];
	ld.shared.u32 	%r1034, [%rd26];
	ld.shared.u32 	%r1035, [%rd27];
	ld.shared.u32 	%r1036, [%rd28];
	ld.shared.u32 	%r1037, [%rd29];
	ld.shared.u32 	%r1038, [%rd30];
	ld.shared.u32 	%r1039, [%rd31];
	ld.shared.u32 	%r1040, [%rd32];
	ld.shared.u32 	%r1041, [%rd33];
	ld.shared.u32 	%r1042, [%rd34];
	ld.shared.u32 	%r1043, [%rd35];
	ld.shared.u32 	%r1044, [%rd36];
	ld.shared.u32 	%r1045, [%rd37];
	ld.shared.u32 	%r1046, [%rd38];
	ld.shared.u32 	%r1047, [%rd39];
	ld.shared.u32 	%r1048, [%rd40];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1049, %r3711, 0, 31, -1;
	shfl.sync.idx.b32	%r1050, %r3711, 1, 31, -1;
	shfl.sync.idx.b32	%r1051, %r3711, 2, 31, -1;
	shfl.sync.idx.b32	%r1052, %r3711, 3, 31, -1;
	shfl.sync.idx.b32	%r1053, %r3711, 4, 31, -1;
	shfl.sync.idx.b32	%r1054, %r3711, 5, 31, -1;
	shfl.sync.idx.b32	%r1055, %r3711, 6, 31, -1;
	shfl.sync.idx.b32	%r1056, %r3711, 7, 31, -1;
	shfl.sync.idx.b32	%r1057, %r3711, 8, 31, -1;
	shfl.sync.idx.b32	%r1058, %r3711, 9, 31, -1;
	shfl.sync.idx.b32	%r1059, %r3711, 10, 31, -1;
	shfl.sync.idx.b32	%r1060, %r3711, 11, 31, -1;
	shfl.sync.idx.b32	%r1061, %r3711, 12, 31, -1;
	shfl.sync.idx.b32	%r1062, %r3711, 13, 31, -1;
	shfl.sync.idx.b32	%r1063, %r3711, 14, 31, -1;
	shfl.sync.idx.b32	%r1064, %r3711, 15, 31, -1;
	shfl.sync.idx.b32	%r1065, %r3711, 16, 31, -1;
	shfl.sync.idx.b32	%r1066, %r3711, 17, 31, -1;
	shfl.sync.idx.b32	%r1067, %r3711, 18, 31, -1;
	shfl.sync.idx.b32	%r1068, %r3711, 19, 31, -1;
	shfl.sync.idx.b32	%r1069, %r3711, 20, 31, -1;
	shfl.sync.idx.b32	%r1070, %r3711, 21, 31, -1;
	shfl.sync.idx.b32	%r1071, %r3711, 22, 31, -1;
	shfl.sync.idx.b32	%r1072, %r3711, 23, 31, -1;
	add.s32 	%r1073, %r1049, %r93;
	mul.wide.s32 	%rd153, %r1073, 4;
	add.s64 	%rd155, %rd81, %rd153;
	st.shared.u32 	[%rd155], %r1027;
	add.s32 	%r1074, %r1050, %r93;
	mul.wide.s32 	%rd156, %r1074, 4;
	add.s64 	%rd157, %rd81, %rd156;
	st.shared.u32 	[%rd157], %r1028;
	add.s32 	%r1075, %r1051, %r93;
	mul.wide.s32 	%rd158, %r1075, 4;
	add.s64 	%rd159, %rd81, %rd158;
	st.shared.u32 	[%rd159], %r1029;
	add.s32 	%r1076, %r1052, %r93;
	mul.wide.s32 	%rd160, %r1076, 4;
	add.s64 	%rd161, %rd81, %rd160;
	st.shared.u32 	[%rd161], %r1030;
	add.s32 	%r1077, %r1053, %r93;
	mul.wide.s32 	%rd162, %r1077, 4;
	add.s64 	%rd163, %rd81, %rd162;
	st.shared.u32 	[%rd163], %r1031;
	add.s32 	%r1078, %r1054, %r93;
	mul.wide.s32 	%rd164, %r1078, 4;
	add.s64 	%rd165, %rd81, %rd164;
	st.shared.u32 	[%rd165], %r1032;
	add.s32 	%r1079, %r1055, %r93;
	mul.wide.s32 	%rd166, %r1079, 4;
	add.s64 	%rd167, %rd81, %rd166;
	st.shared.u32 	[%rd167], %r1033;
	add.s32 	%r1080, %r1056, %r93;
	mul.wide.s32 	%rd168, %r1080, 4;
	add.s64 	%rd169, %rd81, %rd168;
	st.shared.u32 	[%rd169], %r1034;
	add.s32 	%r1081, %r1057, %r93;
	mul.wide.s32 	%rd170, %r1081, 4;
	add.s64 	%rd171, %rd81, %rd170;
	st.shared.u32 	[%rd171], %r1035;
	add.s32 	%r1082, %r1058, %r93;
	mul.wide.s32 	%rd172, %r1082, 4;
	add.s64 	%rd173, %rd81, %rd172;
	st.shared.u32 	[%rd173], %r1036;
	add.s32 	%r1083, %r1059, %r93;
	mul.wide.s32 	%rd174, %r1083, 4;
	add.s64 	%rd175, %rd81, %rd174;
	st.shared.u32 	[%rd175], %r1037;
	add.s32 	%r1084, %r1060, %r93;
	mul.wide.s32 	%rd176, %r1084, 4;
	add.s64 	%rd177, %rd81, %rd176;
	st.shared.u32 	[%rd177], %r1038;
	add.s32 	%r1085, %r1061, %r93;
	mul.wide.s32 	%rd178, %r1085, 4;
	add.s64 	%rd179, %rd81, %rd178;
	st.shared.u32 	[%rd179], %r1039;
	add.s32 	%r1086, %r1062, %r93;
	mul.wide.s32 	%rd180, %r1086, 4;
	add.s64 	%rd181, %rd81, %rd180;
	st.shared.u32 	[%rd181], %r1040;
	add.s32 	%r1087, %r1063, %r93;
	mul.wide.s32 	%rd182, %r1087, 4;
	add.s64 	%rd183, %rd81, %rd182;
	st.shared.u32 	[%rd183], %r1041;
	add.s32 	%r1088, %r1064, %r93;
	mul.wide.s32 	%rd184, %r1088, 4;
	add.s64 	%rd185, %rd81, %rd184;
	st.shared.u32 	[%rd185], %r1042;
	add.s32 	%r1089, %r1065, %r93;
	mul.wide.s32 	%rd186, %r1089, 4;
	add.s64 	%rd187, %rd81, %rd186;
	st.shared.u32 	[%rd187], %r1043;
	add.s32 	%r1090, %r1066, %r93;
	mul.wide.s32 	%rd188, %r1090, 4;
	add.s64 	%rd189, %rd81, %rd188;
	st.shared.u32 	[%rd189], %r1044;
	add.s32 	%r1091, %r1067, %r93;
	mul.wide.s32 	%rd190, %r1091, 4;
	add.s64 	%rd191, %rd81, %rd190;
	st.shared.u32 	[%rd191], %r1045;
	add.s32 	%r1092, %r1068, %r93;
	mul.wide.s32 	%rd192, %r1092, 4;
	add.s64 	%rd193, %rd81, %rd192;
	st.shared.u32 	[%rd193], %r1046;
	add.s32 	%r1093, %r1069, %r93;
	mul.wide.s32 	%rd194, %r1093, 4;
	add.s64 	%rd195, %rd81, %rd194;
	st.shared.u32 	[%rd195], %r1047;
	selp.b32 	%r1094, 0, %r1048, %p227;
	add.s32 	%r1095, %r1070, %r93;
	mul.wide.s32 	%rd196, %r1095, 4;
	add.s64 	%rd197, %rd81, %rd196;
	st.shared.u32 	[%rd197], %r1094;
	add.s32 	%r1096, %r1071, %r93;
	mul.wide.s32 	%rd198, %r1096, 4;
	add.s64 	%rd199, %rd81, %rd198;
	mov.u32 	%r3633, 0;
	st.shared.u32 	[%rd199], %r3633;
	add.s32 	%r1097, %r1072, %r93;
	mul.wide.s32 	%rd200, %r1097, 4;
	add.s64 	%rd201, %rd81, %rd200;
	st.shared.u32 	[%rd201], %r3633;
	bar.sync 	0;
	mov.u32 	%r3634, %r3633;
	mov.u32 	%r3635, %r3633;
	mov.u32 	%r3636, %r3633;
	mov.u32 	%r3637, %r3633;
	mov.u32 	%r3638, %r3633;
	mov.u32 	%r3639, %r3633;
	mov.u32 	%r3640, %r3633;
	mov.u32 	%r3641, %r3633;
	mov.u32 	%r3642, %r3633;
	mov.u32 	%r3643, %r3633;
	mov.u32 	%r3644, %r3633;
	mov.u32 	%r3645, %r3633;
	mov.u32 	%r3646, %r3633;
	mov.u32 	%r3647, %r3633;
	mov.u32 	%r3648, %r3633;
	mov.u32 	%r3649, %r3633;
	mov.u32 	%r3650, %r3633;
	mov.u32 	%r3651, %r3633;
	mov.u32 	%r3652, %r3633;
	mov.u32 	%r3653, %r3633;
	mov.u32 	%r3654, %r3633;
	mov.u32 	%r3655, %r3633;
	mov.u32 	%r3656, %r3633;
	@%p78 bra 	$L__BB0_145;
// %bb.194:                             // %pass3912
                                        //   in Loop: Header=BB0_143 Depth=1
	ld.shared.u32 	%r3633, [%rd41];
	ld.shared.u32 	%r3634, [%rd41+4];
	ld.shared.u32 	%r3635, [%rd41+8];
	ld.shared.u32 	%r3636, [%rd41+12];
	ld.shared.u32 	%r3637, [%rd41+16];
	ld.shared.u32 	%r3638, [%rd41+20];
	ld.shared.u32 	%r3639, [%rd41+24];
	ld.shared.u32 	%r3640, [%rd41+28];
	ld.shared.u32 	%r3641, [%rd41+32];
	ld.shared.u32 	%r3642, [%rd41+36];
	ld.shared.u32 	%r3643, [%rd41+40];
	ld.shared.u32 	%r3644, [%rd41+44];
	ld.shared.u32 	%r3645, [%rd41+48];
	ld.shared.u32 	%r3646, [%rd41+52];
	ld.shared.u32 	%r3647, [%rd41+56];
	ld.shared.u32 	%r3648, [%rd41+60];
	ld.shared.u32 	%r3649, [%rd41+64];
	ld.shared.u32 	%r3650, [%rd41+68];
	ld.shared.u32 	%r3651, [%rd41+72];
	ld.shared.u32 	%r3652, [%rd41+76];
	ld.shared.u32 	%r3653, [%rd41+80];
	ld.shared.u32 	%r3654, [%rd41+84];
	ld.shared.u32 	%r3655, [%rd41+88];
	ld.shared.u32 	%r3656, [%rd41+92];
$L__BB0_145:                            // %L11334
                                        //   in Loop: Header=BB0_143 Depth=1
	bar.sync 	0;
	mov.u32 	%r3657, 12;
	bra.uni 	$L__BB0_146;
$L__BB0_153:                            // %L20960
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r3659, %r3659, 1;
	mov.u32 	%r3658, 0;
	mov.u32 	%r3660, %r3658;
	mov.u32 	%r3661, %r3658;
$L__BB0_154:                            // %L20961
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3657, %r3657, -4;
	setp.ne.s32 	%p254, %r3657, -12;
	@%p254 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_155;
$L__BB0_146:                            // %L11360
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p237, %r3657, 12;
	selp.b32 	%r1636, %r3633, 0, %p237;
	setp.eq.s32 	%p238, %r3657, 8;
	selp.b32 	%r1637, %r3637, %r1636, %p238;
	setp.eq.s32 	%p239, %r3657, 4;
	selp.b32 	%r1638, %r3641, %r1637, %p239;
	setp.eq.s32 	%p240, %r3657, 0;
	selp.b32 	%r1639, %r3645, %r1638, %p240;
	setp.eq.s32 	%p241, %r3657, -4;
	selp.b32 	%r1640, %r3649, %r1639, %p241;
	setp.eq.s32 	%p242, %r3657, -8;
	selp.b32 	%r1641, %r3653, %r1640, %p242;
	selp.b32 	%r1642, %r3634, 0, %p237;
	selp.b32 	%r1643, %r3638, %r1642, %p238;
	selp.b32 	%r1644, %r3642, %r1643, %p239;
	selp.b32 	%r1645, %r3646, %r1644, %p240;
	selp.b32 	%r1646, %r3650, %r1645, %p241;
	selp.b32 	%r1647, %r3654, %r1646, %p242;
	selp.b32 	%r1648, %r3635, 0, %p237;
	selp.b32 	%r1649, %r3639, %r1648, %p238;
	selp.b32 	%r1650, %r3643, %r1649, %p239;
	selp.b32 	%r1651, %r3647, %r1650, %p240;
	selp.b32 	%r1652, %r3651, %r1651, %p241;
	selp.b32 	%r1653, %r3655, %r1652, %p242;
	selp.b32 	%r1654, %r3636, 0, %p237;
	selp.b32 	%r1655, %r3640, %r1654, %p238;
	selp.b32 	%r1656, %r3644, %r1655, %p239;
	selp.b32 	%r1657, %r3648, %r1656, %p240;
	selp.b32 	%r1658, %r3652, %r1657, %p241;
	selp.b32 	%r1659, %r3656, %r1658, %p242;
	// begin inline asm
	mov.b32 %r1104, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r1115, {%rs102, %rs102};
	// end inline asm
	xor.b32  	%r1103, %r1641, -2004318072;
	mov.u32 	%r1240, 983055;
	// begin inline asm
	lop3.b32 %r1101, %r1240, %r1103, %r1104, 202;
	// end inline asm
	mov.u16 	%rs106, 18432;
	// begin inline asm
	mov.b32 %r1105, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1104, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	mov.u32 	%r1251, 15728880;
	// begin inline asm
	lop3.b32 %r1112, %r1251, %r1103, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs102, %rs102};
	// end inline asm
	xor.b32  	%r1149, %r1647, -2004318072;
	// begin inline asm
	lop3.b32 %r1147, %r1240, %r1149, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1151, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1152, %r1150, %r1151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1155, %r1147, %r1152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1158, %r1251, %r1149, %r1161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1163, %r1161, %r1162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1166, %r1158, %r1163;
	// end inline asm
	// begin inline asm
	mov.b32 %r1196, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs102, %rs102};
	// end inline asm
	xor.b32  	%r1195, %r1653, -2004318072;
	// begin inline asm
	lop3.b32 %r1193, %r1240, %r1195, %r1196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1197, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1198, %r1196, %r1197;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1201, %r1193, %r1198;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1204, %r1251, %r1195, %r1207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1208, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1209, %r1207, %r1208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1212, %r1204, %r1209;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs102, %rs102};
	// end inline asm
	xor.b32  	%r1241, %r1659, -2004318072;
	// begin inline asm
	lop3.b32 %r1239, %r1240, %r1241, %r1242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1243, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1244, %r1242, %r1243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1247, %r1239, %r1244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1250, %r1251, %r1241, %r1253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1254, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1255, %r1253, %r1254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1258, %r1250, %r1255;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r1109;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1283, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r1120;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1286, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r1155;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1289, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r1166;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1292, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r1201;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1295, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r1212;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1298, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r1247;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1301, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r1258;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1304, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1635, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1370, %r1367}, {%r314, %r317}, {%r1283}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1379, %r1376}, {%r314, %r317}, {%r1286}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1388, %r1385}, {%r314, %r317}, {%r1289}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1397, %r1394}, {%r314, %r317}, {%r1292}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1406, %r1403}, {%r314, %r317}, {%r1295}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1415, %r1412}, {%r314, %r317}, {%r1298}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1424, %r1421}, {%r314, %r317}, {%r1301}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1433, %r1430}, {%r314, %r317}, {%r1304}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r366, %r1370, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r1372, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r366, %r1379, %r1374;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1383, %r1381, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r366, %r1388, %r1383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r1390, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r366, %r1397, %r1392;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1401, %r1399, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r366, %r1406, %r1401;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r1408, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r366, %r1415, %r1410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r1417, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r366, %r1424, %r1419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1426, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1428, %r1426, %r1430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r366, %r1433, %r1428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r369, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r366, %r1367, %r1435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r369, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r366, %r1376, %r1442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r369, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r366, %r1385, %r1449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1456, %r369, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1459, %r366, %r1394, %r1456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r369, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r366, %r1403, %r1463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r369, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r366, %r1412, %r1470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1477, %r369, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r366, %r1421, %r1477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1484, %r369, %r1433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1487, %r366, %r1430, %r1484;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1572, %r1573}, {%r410, %r416, %r413, %r419}, {%r1368, %r1438}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1580, %r1581}, {%r410, %r416, %r413, %r419}, {%r1377, %r1445}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1588, %r1589}, {%r410, %r416, %r413, %r419}, {%r1386, %r1452}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1596, %r1597}, {%r410, %r416, %r413, %r419}, {%r1395, %r1459}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1604, %r1605}, {%r410, %r416, %r413, %r419}, {%r1404, %r1466}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1613}, {%r410, %r416, %r413, %r419}, {%r1413, %r1473}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1620, %r1621}, {%r410, %r416, %r413, %r419}, {%r1422, %r1480}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1628, %r1629}, {%r410, %r416, %r413, %r419}, {%r1431, %r1487}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1571, %r1572, %r1573, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1575, %r1572, %r1573, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1579, %r1580, %r1581, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1583, %r1580, %r1581, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1587, %r1588, %r1589, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1591, %r1588, %r1589, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1595, %r1596, %r1597, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1599, %r1596, %r1597, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1603, %r1604, %r1605, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1607, %r1604, %r1605, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1611, %r1612, %r1613, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1615, %r1612, %r1613, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1619, %r1620, %r1621, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1623, %r1620, %r1621, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1627, %r1628, %r1629, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1631, %r1628, %r1629, %r940;
	// end inline asm
	st.shared.u32 	[%rd6], %r1571;
	st.shared.u32 	[%rd7], %r1575;
	st.shared.u32 	[%rd8], %r1579;
	st.shared.u32 	[%rd9], %r1583;
	st.shared.u32 	[%rd42], %r1587;
	st.shared.u32 	[%rd43], %r1591;
	st.shared.u32 	[%rd44], %r1595;
	st.shared.u32 	[%rd45], %r1599;
	st.shared.u32 	[%rd46], %r1603;
	st.shared.u32 	[%rd47], %r1607;
	st.shared.u32 	[%rd48], %r1611;
	st.shared.u32 	[%rd49], %r1615;
	st.shared.u32 	[%rd50], %r1619;
	st.shared.u32 	[%rd51], %r1623;
	st.shared.u32 	[%rd52], %r1627;
	st.shared.u32 	[%rd53], %r1631;
	bar.sync 	0;
	mov.u32 	%r3662, %r1635;
	mov.u32 	%r3663, %r1635;
	mov.u32 	%r3664, %r1635;
	mov.u32 	%r3665, %r1635;
	@%p236 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_147;
$L__BB0_195:                            // %pass7517
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3662, [%rd10];
	ld.shared.u32 	%r3663, [%rd11];
	ld.shared.u32 	%r3664, [%rd12];
	ld.shared.u32 	%r3665, [%rd13];
$L__BB0_147:                            // %L16865
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1695, %r1692}, {%r428, %r431}, {%r3662}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1704, %r1701}, {%r428, %r431}, {%r3663}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1713, %r1710}, {%r428, %r431}, {%r3664}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1722, %r1719}, {%r428, %r431}, {%r3665}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r480, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1697, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1697, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r480, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1706, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r1706, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r480, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1715, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1715, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r480, %r1722, %r1717;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r483, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r480, %r1692, %r1724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r483, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r480, %r1701, %r1731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r483, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r480, %r1710, %r1738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r483, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r480, %r1719, %r1745;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1793, %r1796}, {%r524, %r530, %r527, %r533}, {%r1693, %r1727}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1812, %r1815}, {%r524, %r530, %r527, %r533}, {%r1702, %r1734}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1800, %r1804}, {%r524, %r530, %r527, %r533}, {%r1711, %r1741}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1819, %r1823}, {%r524, %r530, %r527, %r533}, {%r1720, %r1748}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r1793, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1804, %r1804, %r1799;
	// end inline asm
	mov.u32 	%r1827, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1827, %r1803, %r3661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1811, %r1812, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1815, %r1815, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1822, %r3660;
	// end inline asm
	mov.u32 	%r3666, %r1635;
	mov.u32 	%r3667, %r1635;
	mov.u32 	%r3668, %r1635;
	mov.u32 	%r3669, %r1635;
	@%p236 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_148;
$L__BB0_196:                            // %pass8122
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3666, [%rd54];
	ld.shared.u32 	%r3667, [%rd55];
	ld.shared.u32 	%r3668, [%rd56];
	ld.shared.u32 	%r3669, [%rd57];
$L__BB0_148:                            // %L18072
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1866, %r1863}, {%r428, %r431}, {%r3666}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1875, %r1872}, {%r428, %r431}, {%r3667}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1884, %r1881}, {%r428, %r431}, {%r3668}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1893, %r1890}, {%r428, %r431}, {%r3669}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1859, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1859, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r480, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1868, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r1868, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r480, %r1875, %r1870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1877, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1877, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r480, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1886, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r1886, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r480, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r483, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r480, %r1863, %r1895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1902, %r483, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r480, %r1872, %r1902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1909, %r483, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r480, %r1881, %r1909;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1916, %r483, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r480, %r1890, %r1916;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1964, %r1967}, {%r524, %r530, %r527, %r533}, {%r1864, %r1898}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1983, %r1986}, {%r524, %r530, %r527, %r533}, {%r1873, %r1905}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1971, %r1975}, {%r524, %r530, %r527, %r533}, {%r1882, %r1912}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1990, %r1994}, {%r524, %r530, %r527, %r533}, {%r1891, %r1919}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r1964, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1967, %r1967, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1971, %r1971, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r1975, %r1975, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r1827, %r1974, %r1807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r1983, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1986, %r1986, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1990, %r1990, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1994, %r1994, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r1827, %r1993, %r1826;
	// end inline asm
	mov.u32 	%r3670, %r1635;
	mov.u32 	%r3671, %r1635;
	mov.u32 	%r3672, %r1635;
	mov.u32 	%r3673, %r1635;
	@%p236 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_149;
$L__BB0_197:                            // %pass8727
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3670, [%rd58];
	ld.shared.u32 	%r3671, [%rd59];
	ld.shared.u32 	%r3672, [%rd60];
	ld.shared.u32 	%r3673, [%rd61];
$L__BB0_149:                            // %L19279
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2037, %r2034}, {%r428, %r431}, {%r3670}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2046, %r2043}, {%r428, %r431}, {%r3671}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2055, %r2052}, {%r428, %r431}, {%r3672}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2064, %r2061}, {%r428, %r431}, {%r3673}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2030, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r2030, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r480, %r2037, %r2032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2039, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r2039, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r480, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2048, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2048, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r480, %r2055, %r2050;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2057, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r2057, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r480, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2066, %r483, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r480, %r2034, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r483, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r480, %r2043, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r483, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r480, %r2052, %r2080;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2087, %r483, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r480, %r2061, %r2087;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2135, %r2138}, {%r524, %r530, %r527, %r533}, {%r2035, %r2069}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2154, %r2157}, {%r524, %r530, %r527, %r533}, {%r2044, %r2076}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2142, %r2146}, {%r524, %r530, %r527, %r533}, {%r2053, %r2083}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2161, %r2165}, {%r524, %r530, %r527, %r533}, {%r2062, %r2090}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r2135, %r2135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r2138, %r2138, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r2142, %r2142, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r2146, %r2146, %r2141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r1827, %r2145, %r1978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r2154, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r2157, %r2157, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r2161, %r2161, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r2165, %r2165, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r1827, %r2164, %r1997;
	// end inline asm
	mov.u32 	%r3674, %r1635;
	mov.u32 	%r3675, %r1635;
	mov.u32 	%r3676, %r1635;
	mov.u32 	%r3677, %r1635;
	@%p236 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_150;
$L__BB0_198:                            // %pass9332
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3674, [%rd62];
	ld.shared.u32 	%r3675, [%rd63];
	ld.shared.u32 	%r3676, [%rd64];
	ld.shared.u32 	%r3677, [%rd65];
$L__BB0_150:                            // %L20486
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2208, %r2205}, {%r428, %r431}, {%r3674}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2217, %r2214}, {%r428, %r431}, {%r3675}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2226, %r2223}, {%r428, %r431}, {%r3676}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2235, %r2232}, {%r428, %r431}, {%r3677}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2201, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r2201, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r480, %r2208, %r2203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2210, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r2210, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r480, %r2217, %r2212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2219, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2219, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r480, %r2226, %r2221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2228, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r2228, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r480, %r2235, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r483, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r480, %r2205, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r483, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r480, %r2214, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r483, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r480, %r2223, %r2251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r483, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r480, %r2232, %r2258;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2306, %r2309}, {%r524, %r530, %r527, %r533}, {%r2206, %r2240}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2325, %r2328}, {%r524, %r530, %r527, %r533}, {%r2215, %r2247}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2313, %r2317}, {%r524, %r530, %r527, %r533}, {%r2224, %r2254}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2332, %r2336}, {%r524, %r530, %r527, %r533}, {%r2233, %r2261}, {%r1635, %r1635};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2305, %r2306, %r2306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r2309, %r2309, %r2305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2312, %r2313, %r2313, %r2308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r2317, %r2317, %r2312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3661, %r1827, %r2316, %r2149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r2325, %r2325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r2328, %r2328, %r2324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2331, %r2332, %r2332, %r2327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2335, %r2336, %r2336, %r2331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3660, %r1827, %r2335, %r2168;
	// end inline asm
	add.s32 	%r3658, %r3658, 4;
	setp.ne.s32 	%p246, %r3658, 40;
	@%p246 bra 	$L__BB0_154;
// %bb.151:                             // %L20636
                                        //   in Loop: Header=BB0_146 Depth=2
	@%p78 bra 	$L__BB0_153;
// %bb.152:                             // %L20696
                                        //   in Loop: Header=BB0_146 Depth=2
	mul.lo.s32 	%r2343, %r3659, 18432;
	or.b32  	%r2344, %r2343, %r94;
	add.s32 	%r2345, %r95, %r2344;
	cvt.s64.s32 	%rd202, %r2345;
	add.s64 	%rd203, %rd202, %rd14;
	mul.hi.s64 	%rd204, %rd203, 1024819115206086201;
	shr.u64 	%rd205, %rd204, 63;
	shr.s64 	%rd206, %rd204, 22;
	add.s64 	%rd207, %rd206, %rd205;
	setp.lt.s64 	%p248, %rd203, 0;
	mul.lo.s64 	%rd208, %rd207, 75497472;
	setp.ne.s64 	%p249, %rd208, %rd203;
	and.pred  	%p250, %p248, %p249;
	selp.s64 	%rd209, -1, 0, %p250;
	add.s64 	%rd210, %rd207, %rd209;
	mul.lo.s64 	%rd211, %rd210, -75497472;
	add.s64 	%rd212, %rd211, %rd203;
	shl.b64 	%rd213, %rd212, 2;
	add.s64 	%rd214, %rd4, %rd213;
	st.global.u32 	[%rd214], %r3661;
	add.s32 	%r2346, %r96, %r2343;
	cvt.s64.s32 	%rd215, %r2346;
	add.s64 	%rd216, %rd215, %rd14;
	mul.hi.s64 	%rd217, %rd216, 1024819115206086201;
	shr.u64 	%rd218, %rd217, 63;
	shr.s64 	%rd219, %rd217, 22;
	add.s64 	%rd220, %rd219, %rd218;
	setp.lt.s64 	%p251, %rd216, 0;
	mul.lo.s64 	%rd221, %rd220, 75497472;
	setp.ne.s64 	%p252, %rd221, %rd216;
	and.pred  	%p253, %p251, %p252;
	selp.s64 	%rd222, -1, 0, %p253;
	add.s64 	%rd223, %rd220, %rd222;
	mul.lo.s64 	%rd224, %rd223, -75497472;
	add.s64 	%rd225, %rd224, %rd216;
	shl.b64 	%rd226, %rd225, 2;
	add.s64 	%rd227, %rd4, %rd226;
	st.global.u32 	[%rd227], %r3660;
	bra.uni 	$L__BB0_153;
$L__BB0_155:                            // %L20986.preheader
                                        //   in Loop: Header=BB0_143 Depth=1
	mov.u32 	%r3682, 12;
	bra.uni 	$L__BB0_156;
$L__BB0_163:                            // %L30586
                                        //   in Loop: Header=BB0_156 Depth=2
	add.s32 	%r3659, %r3659, 1;
	mov.u32 	%r3658, 0;
	mov.u32 	%r3660, %r3658;
	mov.u32 	%r3661, %r3658;
$L__BB0_164:                            // %L30587
                                        //   in Loop: Header=BB0_156 Depth=2
	bar.sync 	0;
	add.s32 	%r3682, %r3682, -4;
	setp.ne.s32 	%p273, %r3682, -12;
	@%p273 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_165;
$L__BB0_156:                            // %L20986
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p256, %r3682, 12;
	selp.b32 	%r2886, %r3633, 0, %p256;
	setp.eq.s32 	%p257, %r3682, 8;
	selp.b32 	%r2887, %r3637, %r2886, %p257;
	setp.eq.s32 	%p258, %r3682, 4;
	selp.b32 	%r2888, %r3641, %r2887, %p258;
	setp.eq.s32 	%p259, %r3682, 0;
	selp.b32 	%r2889, %r3645, %r2888, %p259;
	setp.eq.s32 	%p260, %r3682, -4;
	selp.b32 	%r2890, %r3649, %r2889, %p260;
	setp.eq.s32 	%p261, %r3682, -8;
	selp.b32 	%r2891, %r3653, %r2890, %p261;
	selp.b32 	%r2892, %r3634, 0, %p256;
	selp.b32 	%r2893, %r3638, %r2892, %p257;
	selp.b32 	%r2894, %r3642, %r2893, %p258;
	selp.b32 	%r2895, %r3646, %r2894, %p259;
	selp.b32 	%r2896, %r3650, %r2895, %p260;
	selp.b32 	%r2897, %r3654, %r2896, %p261;
	selp.b32 	%r2898, %r3635, 0, %p256;
	selp.b32 	%r2899, %r3639, %r2898, %p257;
	selp.b32 	%r2900, %r3643, %r2899, %p258;
	selp.b32 	%r2901, %r3647, %r2900, %p259;
	selp.b32 	%r2902, %r3651, %r2901, %p260;
	selp.b32 	%r2903, %r3655, %r2902, %p261;
	selp.b32 	%r2904, %r3636, 0, %p256;
	selp.b32 	%r2905, %r3640, %r2904, %p257;
	selp.b32 	%r2906, %r3644, %r2905, %p258;
	selp.b32 	%r2907, %r3648, %r2906, %p259;
	selp.b32 	%r2908, %r3652, %r2907, %p260;
	selp.b32 	%r2909, %r3656, %r2908, %p261;
	// begin inline asm
	mov.b32 %r2376, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs102, %rs102};
	// end inline asm
	shr.u32 	%r2910, %r2891, 8;
	xor.b32  	%r2386, %r2910, 8947848;
	// begin inline asm
	lop3.b32 %r2373, %r1240, %r2386, %r2376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2376, %r2377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2381, %r2373, %r2378;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2384, %r1251, %r2386, %r2387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2387, %r2388;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2392, %r2384, %r2389;
	// end inline asm
	// begin inline asm
	mov.b32 %r2422, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs102, %rs102};
	// end inline asm
	shr.u32 	%r2911, %r2897, 8;
	xor.b32  	%r2432, %r2911, 8947848;
	// begin inline asm
	lop3.b32 %r2419, %r1240, %r2432, %r2422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2422, %r2423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2427, %r2419, %r2424;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2430, %r1251, %r2432, %r2433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2433, %r2434;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2438, %r2430, %r2435;
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs102, %rs102};
	// end inline asm
	shr.u32 	%r2912, %r2903, 8;
	xor.b32  	%r2478, %r2912, 8947848;
	// begin inline asm
	lop3.b32 %r2465, %r1240, %r2478, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2468, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2476, %r1251, %r2478, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2479, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs100, %rs100};
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs102, %rs102};
	// end inline asm
	shr.u32 	%r2913, %r2909, 8;
	xor.b32  	%r2524, %r2913, 8947848;
	// begin inline asm
	lop3.b32 %r2511, %r1240, %r2524, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2514, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2522, %r1251, %r2524, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2525, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r2381;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2533, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r2392;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2536, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r2427;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2539, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r2438;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2542, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r2473;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2545, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r2484;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2548, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3626;
    mov.b32 {%r2re, %r2im}, %r2519;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2551, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3627;
    mov.b32 {%r2re, %r2im}, %r2530;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2554, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2885, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2620, %r2617}, {%r314, %r317}, {%r2533}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2629, %r2626}, {%r314, %r317}, {%r2536}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2638, %r2635}, {%r314, %r317}, {%r2539}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2644}, {%r314, %r317}, {%r2542}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2656, %r2653}, {%r314, %r317}, {%r2545}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2665, %r2662}, {%r314, %r317}, {%r2548}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2674, %r2671}, {%r314, %r317}, {%r2551}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2683, %r2680}, {%r314, %r317}, {%r2554}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2613, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2615, %r2613, %r2617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2618, %r366, %r2620, %r2615;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2627, %r366, %r2629, %r2624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r366, %r2638, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r366, %r2647, %r2642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r366, %r2656, %r2651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r366, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r366, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r366, %r2683, %r2678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r369, %r2620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r366, %r2617, %r2685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r369, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2695, %r366, %r2626, %r2692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r369, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r366, %r2635, %r2699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r369, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r366, %r2644, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r369, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r366, %r2653, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r369, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r366, %r2662, %r2720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r369, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r366, %r2671, %r2727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r369, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r366, %r2680, %r2734;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2822, %r2823}, {%r410, %r416, %r413, %r419}, {%r2618, %r2688}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2830, %r2831}, {%r410, %r416, %r413, %r419}, {%r2627, %r2695}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2838, %r2839}, {%r410, %r416, %r413, %r419}, {%r2636, %r2702}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2846, %r2847}, {%r410, %r416, %r413, %r419}, {%r2645, %r2709}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2854, %r2855}, {%r410, %r416, %r413, %r419}, {%r2654, %r2716}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2862, %r2863}, {%r410, %r416, %r413, %r419}, {%r2663, %r2723}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2870, %r2871}, {%r410, %r416, %r413, %r419}, {%r2672, %r2730}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2878, %r2879}, {%r410, %r416, %r413, %r419}, {%r2681, %r2737}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2821, %r2822, %r2823, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2825, %r2822, %r2823, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2829, %r2830, %r2831, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2833, %r2830, %r2831, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2837, %r2838, %r2839, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2841, %r2838, %r2839, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2845, %r2846, %r2847, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2849, %r2846, %r2847, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2853, %r2854, %r2855, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2857, %r2854, %r2855, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2861, %r2862, %r2863, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2865, %r2862, %r2863, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2869, %r2870, %r2871, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2873, %r2870, %r2871, %r940;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2877, %r2878, %r2879, %r936;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2881, %r2878, %r2879, %r940;
	// end inline asm
	st.shared.u32 	[%rd6], %r2821;
	st.shared.u32 	[%rd7], %r2825;
	st.shared.u32 	[%rd8], %r2829;
	st.shared.u32 	[%rd9], %r2833;
	st.shared.u32 	[%rd42], %r2837;
	st.shared.u32 	[%rd43], %r2841;
	st.shared.u32 	[%rd44], %r2845;
	st.shared.u32 	[%rd45], %r2849;
	st.shared.u32 	[%rd46], %r2853;
	st.shared.u32 	[%rd47], %r2857;
	st.shared.u32 	[%rd48], %r2861;
	st.shared.u32 	[%rd49], %r2865;
	st.shared.u32 	[%rd50], %r2869;
	st.shared.u32 	[%rd51], %r2873;
	st.shared.u32 	[%rd52], %r2877;
	st.shared.u32 	[%rd53], %r2881;
	bar.sync 	0;
	mov.u32 	%r3687, %r2885;
	mov.u32 	%r3688, %r2885;
	mov.u32 	%r3689, %r2885;
	mov.u32 	%r3690, %r2885;
	@%p236 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_157;
$L__BB0_199:                            // %pass12213
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3690, [%rd10];
	ld.shared.u32 	%r3689, [%rd11];
	ld.shared.u32 	%r3688, [%rd12];
	ld.shared.u32 	%r3687, [%rd13];
$L__BB0_157:                            // %L26491
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r428, %r431}, {%r3690}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r428, %r431}, {%r3689}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r428, %r431}, {%r3688}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2973}, {%r428, %r431}, {%r3687}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r480, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r480, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r480, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2969, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r2969, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r480, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r483, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r480, %r2946, %r2978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r483, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r480, %r2955, %r2985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2992, %r483, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r480, %r2964, %r2992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r483, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r480, %r2973, %r2999;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3047, %r3050}, {%r524, %r530, %r527, %r533}, {%r2947, %r2981}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3066, %r3069}, {%r524, %r530, %r527, %r533}, {%r2956, %r2988}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3054, %r3058}, {%r524, %r530, %r527, %r533}, {%r2965, %r2995}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3073, %r3077}, {%r524, %r530, %r527, %r533}, {%r2974, %r3002}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3046, %r3047, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r3050, %r3050, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3054, %r3054, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r3058, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r1827, %r3057, %r3661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3065, %r3066, %r3066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r3069, %r3069, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r3073, %r3073, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r3077, %r3077, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r1827, %r3076, %r3660;
	// end inline asm
	mov.u32 	%r3691, %r2885;
	mov.u32 	%r3692, %r2885;
	mov.u32 	%r3693, %r2885;
	mov.u32 	%r3694, %r2885;
	@%p236 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass12818
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3694, [%rd54];
	ld.shared.u32 	%r3693, [%rd55];
	ld.shared.u32 	%r3692, [%rd56];
	ld.shared.u32 	%r3691, [%rd57];
$L__BB0_158:                            // %L27698
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3120, %r3117}, {%r428, %r431}, {%r3694}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3129, %r3126}, {%r428, %r431}, {%r3693}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3138, %r3135}, {%r428, %r431}, {%r3692}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3147, %r3144}, {%r428, %r431}, {%r3691}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3113, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3115, %r3113, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r480, %r3120, %r3115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3122, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3122, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r480, %r3129, %r3124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3131, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r3131, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r480, %r3138, %r3133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3140, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r3140, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r480, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r483, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r480, %r3117, %r3149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r483, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r480, %r3126, %r3156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3163, %r483, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r480, %r3135, %r3163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r483, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r480, %r3144, %r3170;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3218, %r3221}, {%r524, %r530, %r527, %r533}, {%r3118, %r3152}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3237, %r3240}, {%r524, %r530, %r527, %r533}, {%r3127, %r3159}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3225, %r3229}, {%r524, %r530, %r527, %r533}, {%r3136, %r3166}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3244, %r3248}, {%r524, %r530, %r527, %r533}, {%r3145, %r3173}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r3218, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r3221, %r3221, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3229, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r1827, %r3228, %r3061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r3237, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3240, %r3240, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r3244, %r3244, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r3248, %r3248, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r1827, %r3247, %r3080;
	// end inline asm
	mov.u32 	%r3695, %r2885;
	mov.u32 	%r3696, %r2885;
	mov.u32 	%r3697, %r2885;
	mov.u32 	%r3698, %r2885;
	@%p236 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_159;
$L__BB0_201:                            // %pass13423
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3698, [%rd58];
	ld.shared.u32 	%r3697, [%rd59];
	ld.shared.u32 	%r3696, [%rd60];
	ld.shared.u32 	%r3695, [%rd61];
$L__BB0_159:                            // %L28905
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3291, %r3288}, {%r428, %r431}, {%r3698}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3300, %r3297}, {%r428, %r431}, {%r3697}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3309, %r3306}, {%r428, %r431}, {%r3696}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3318, %r3315}, {%r428, %r431}, {%r3695}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3284, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3286, %r3284, %r3288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3289, %r480, %r3291, %r3286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3293, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r3293, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r480, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3302, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r3302, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r480, %r3309, %r3304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3311, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3313, %r3311, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r480, %r3318, %r3313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r483, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r480, %r3288, %r3320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3327, %r483, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3330, %r480, %r3297, %r3327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3334, %r483, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r480, %r3306, %r3334;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3341, %r483, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r480, %r3315, %r3341;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3389, %r3392}, {%r524, %r530, %r527, %r533}, {%r3289, %r3323}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3408, %r3411}, {%r524, %r530, %r527, %r533}, {%r3298, %r3330}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3396, %r3400}, {%r524, %r530, %r527, %r533}, {%r3307, %r3337}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3415, %r3419}, {%r524, %r530, %r527, %r533}, {%r3316, %r3344}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3388, %r3389, %r3389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3391, %r3392, %r3392, %r3388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r3396, %r3396, %r3391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3399, %r3400, %r3400, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r1827, %r3399, %r3232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r3408, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r3411, %r3411, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r3415, %r3415, %r3410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r3419, %r3419, %r3414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r1827, %r3418, %r3251;
	// end inline asm
	mov.u32 	%r3699, %r2885;
	mov.u32 	%r3700, %r2885;
	mov.u32 	%r3701, %r2885;
	mov.u32 	%r3702, %r2885;
	@%p236 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_160;
$L__BB0_202:                            // %pass14028
                                        //   in Loop: Header=BB0_156 Depth=2
	ld.shared.u32 	%r3702, [%rd62];
	ld.shared.u32 	%r3701, [%rd63];
	ld.shared.u32 	%r3700, [%rd64];
	ld.shared.u32 	%r3699, [%rd65];
$L__BB0_160:                            // %L30112
                                        //   in Loop: Header=BB0_156 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3462, %r3459}, {%r428, %r431}, {%r3702}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3471, %r3468}, {%r428, %r431}, {%r3701}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3480, %r3477}, {%r428, %r431}, {%r3700}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3489, %r3486}, {%r428, %r431}, {%r3699}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3455, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3457, %r3455, %r3459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3460, %r480, %r3462, %r3457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3464, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3464, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r480, %r3471, %r3466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3473, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3473, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r480, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3482, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r3482, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r480, %r3489, %r3484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3491, %r483, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r480, %r3459, %r3491;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3498, %r483, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r480, %r3468, %r3498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r483, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r480, %r3477, %r3505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3512, %r483, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r480, %r3486, %r3512;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3560, %r3563}, {%r524, %r530, %r527, %r533}, {%r3460, %r3494}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3579, %r3582}, {%r524, %r530, %r527, %r533}, {%r3469, %r3501}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3567, %r3571}, {%r524, %r530, %r527, %r533}, {%r3478, %r3508}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3586, %r3590}, {%r524, %r530, %r527, %r533}, {%r3487, %r3515}, {%r2885, %r2885};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r3560, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r3563, %r3563, %r3559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r3567, %r3567, %r3562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r3571, %r3571, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3661, %r1827, %r3570, %r3403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r3579, %r3579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r3582, %r3582, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r3586, %r3586, %r3581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3589, %r3590, %r3590, %r3585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3660, %r1827, %r3589, %r3422;
	// end inline asm
	add.s32 	%r3658, %r3658, 4;
	setp.ne.s32 	%p265, %r3658, 40;
	@%p265 bra 	$L__BB0_164;
// %bb.161:                             // %L30262
                                        //   in Loop: Header=BB0_156 Depth=2
	@%p78 bra 	$L__BB0_163;
// %bb.162:                             // %L30322
                                        //   in Loop: Header=BB0_156 Depth=2
	mul.lo.s32 	%r3597, %r3659, 18432;
	or.b32  	%r3598, %r3597, %r94;
	add.s32 	%r3599, %r95, %r3598;
	cvt.s64.s32 	%rd228, %r3599;
	add.s64 	%rd229, %rd228, %rd14;
	mul.hi.s64 	%rd230, %rd229, 1024819115206086201;
	shr.u64 	%rd231, %rd230, 63;
	shr.s64 	%rd232, %rd230, 22;
	add.s64 	%rd233, %rd232, %rd231;
	setp.lt.s64 	%p267, %rd229, 0;
	mul.lo.s64 	%rd234, %rd233, 75497472;
	setp.ne.s64 	%p268, %rd234, %rd229;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd235, -1, 0, %p269;
	add.s64 	%rd236, %rd233, %rd235;
	mul.lo.s64 	%rd237, %rd236, -75497472;
	add.s64 	%rd238, %rd237, %rd229;
	shl.b64 	%rd239, %rd238, 2;
	add.s64 	%rd240, %rd4, %rd239;
	st.global.u32 	[%rd240], %r3661;
	add.s32 	%r3600, %r96, %r3597;
	cvt.s64.s32 	%rd241, %r3600;
	add.s64 	%rd242, %rd241, %rd14;
	mul.hi.s64 	%rd243, %rd242, 1024819115206086201;
	shr.u64 	%rd244, %rd243, 63;
	shr.s64 	%rd245, %rd243, 22;
	add.s64 	%rd246, %rd245, %rd244;
	setp.lt.s64 	%p270, %rd242, 0;
	mul.lo.s64 	%rd247, %rd246, 75497472;
	setp.ne.s64 	%p271, %rd247, %rd242;
	and.pred  	%p272, %p270, %p271;
	selp.s64 	%rd248, -1, 0, %p272;
	add.s64 	%rd249, %rd246, %rd248;
	mul.lo.s64 	%rd250, %rd249, -75497472;
	add.s64 	%rd251, %rd250, %rd242;
	shl.b64 	%rd252, %rd251, 2;
	add.s64 	%rd253, %rd4, %rd252;
	st.global.u32 	[%rd253], %r3660;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L30622
	mov.u32 	%r3602, 0;
	st.global.u32 	[%rd5], %r3602;
	ret;
$L__BB0_6:                              // %L159
	mov.u32 	%r3603, 2;
	st.global.u32 	[%rd5], %r3603;
	mov.u64 	%rd254, exception2823;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd66;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
