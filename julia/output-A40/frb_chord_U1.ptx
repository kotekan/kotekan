// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2169[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<314>;
	.reg .b16 	%rs<231>;
	.reg .b32 	%r<3744>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<353>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r358, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r367, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r367, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r359, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r368, %r1, 768, %r3;
	or.b32  	%r369, %r368, %r4;
	mul.wide.u32 	%rd33, %r369, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r370, 1;
	st.global.u32 	[%rd6], %r370;
	setp.gt.u32 	%p4, %r359, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r360, %r359;
	setp.gt.s32 	%p6, %r360, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r360, %r359;
	mad.lo.s32 	%r371, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r372, %r371, %r371, 4;
	setp.gt.u32 	%p8, %r372, 89478484;
	setp.gt.u32 	%p9, %r361, 8191;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r362, %r361;
	setp.lt.s32 	%p12, %r362, 16384;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r373, %r362, %r361;
	mul.hi.s32 	%r374, %r5, 1717986919;
	shr.u32 	%r375, %r374, 31;
	shr.s32 	%r376, %r374, 4;
	add.s32 	%r377, %r376, %r375;
	setp.eq.s32 	%p14, %r373, %r377;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r363, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L263
	ld.param.u32 	%r365, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r364, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r364, %r363;
	setp.gt.s32 	%p17, %r364, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r365, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L279
	ld.param.u32 	%r366, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r366, %r365;
	setp.gt.s32 	%p22, %r366, 48;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L289
	sub.s32 	%r378, %r366, %r365;
	sub.s32 	%r379, %r364, %r363;
	setp.eq.s32 	%p24, %r378, %r379;
	@%p24 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_12;
$L__BB0_197:                            // %pass149
	and.b32  	%r222, %r4, 3;
	shr.u32 	%r223, %r4, 2;
	mul.lo.s32 	%r380, %r222, %r223;
	and.b32  	%r381, %r380, 7;
	cvt.rn.f32.s32 	%f201, %r381;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p313, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_209;
// %bb.198:
	@%p313 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r225, %f785;
	and.b32  	%r382, %r225, 8388607;
	or.b32  	%r3739, %r382, 1065353216;
	mov.b32 	%f780, %r3739;
	add.s32 	%r383, %r225, -1073741824;
	and.b32  	%r3740, %r383, -8388608;
	setp.eq.s32 	%p32, %r3740, 0;
	@%p32 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3740, 192937984;
	add.s32 	%r385, %r3739, %r384;
	mov.b32 	%f213, %r385;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3740, %r3740, %r384;
	mov.b32 	%r3739, %f780;
	setp.ne.s32 	%p33, %r3740, 0;
	setp.ne.s32 	%p34, %r3739, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r225, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r224, %f172;
	setp.lt.u32 	%p27, %r224, 1073741824;
	@%p27 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p28, %r224, -2147483647;
	@%p28 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r386, %f169;
	and.b32  	%r232, %r386, -2147483648;
	@%p37 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r387, %f781;
	or.b32  	%r388, %r232, %r387;
	mov.b32 	%f781, %r388;
$L__BB0_211:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r235, %r4, 1;
	and.b32  	%r236, %r235, 6;
	or.b32  	%r237, %r236, 1;
	setp.eq.s32 	%p45, %r236, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3637, %r236, %r223;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L493
	cvt.u16.u32 	%rs1, %r3637;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r404, %r7, 8388607;
	or.b32  	%r3641, %r404, 1065353216;
	mov.b32 	%f732, %r3641;
	add.s32 	%r405, %r7, -1073741824;
	and.b32  	%r3642, %r405, -8388608;
	setp.eq.s32 	%p53, %r3642, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3642, 192937984;
	add.s32 	%r407, %r3641, %r406;
	mov.b32 	%f267, %r407;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3642, %r3642, %r406;
	mov.b32 	%r3641, %f732;
	setp.ne.s32 	%p54, %r3642, 0;
	setp.ne.s32 	%p55, %r3641, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r408, %f1;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f733;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f733, %r411;
$L__BB0_27:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r412, %f277;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f278, %r414;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r415, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p61, %r416, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p62, %r417, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p63, %r419, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L527
	setp.gt.u32 	%p66, %r237, 5;
	mul.lo.s32 	%r3638, %r237, %r223;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L531
	mul.hi.u32 	%r421, %r3638, -1431655765;
	shr.u32 	%r422, %r421, 5;
	mul.lo.s32 	%r423, %r422, 48;
	sub.s32 	%r424, %r3638, %r423;
	cvt.rn.f32.s32 	%f308, %r424;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r425, %r15, 8388607;
	or.b32  	%r3643, %r425, 1065353216;
	mov.b32 	%f738, %r3643;
	add.s32 	%r426, %r15, -1073741824;
	and.b32  	%r3644, %r426, -8388608;
	setp.eq.s32 	%p74, %r3644, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r3644, 192937984;
	add.s32 	%r428, %r3643, %r427;
	mov.b32 	%f320, %r428;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3644, %r3644, %r427;
	mov.b32 	%r3643, %f738;
	setp.ne.s32 	%p75, %r3644, 0;
	setp.ne.s32 	%p76, %r3643, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r429, %f22;
	and.b32  	%r430, %r429, -2147483648;
	mov.b32 	%r431, %f739;
	or.b32  	%r432, %r430, %r431;
	mov.b32 	%f739, %r432;
$L__BB0_43:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r433, %f330;
	and.b32  	%r434, %r433, -2147483648;
	or.b32  	%r435, %r434, 1056964608;
	mov.b32 	%f331, %r435;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r436, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r437, %r436, 1;
	setp.eq.b32 	%p82, %r437, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r438, %r436, 2;
	setp.eq.s32 	%p83, %r438, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r439, %r436, 1;
	and.b32  	%r440, %r439, 2;
	setp.eq.s32 	%p84, %r440, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L565
	setp.gt.u32 	%p88, %r4, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L603
	cvt.u16.u32 	%rs8, %r3637;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r448, %r25, 8388607;
	or.b32  	%r3645, %r448, 1065353216;
	mov.b32 	%f744, %r3645;
	add.s32 	%r449, %r25, -1073741824;
	and.b32  	%r3646, %r449, -8388608;
	setp.eq.s32 	%p96, %r3646, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r3646, 192937984;
	add.s32 	%r451, %r3645, %r450;
	mov.b32 	%f373, %r451;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3646, %r3646, %r450;
	mov.b32 	%r3645, %f744;
	setp.ne.s32 	%p97, %r3646, 0;
	setp.ne.s32 	%p98, %r3645, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r452, %f43;
	and.b32  	%r453, %r452, -2147483648;
	mov.b32 	%r454, %f745;
	or.b32  	%r455, %r453, %r454;
	mov.b32 	%f745, %r455;
$L__BB0_59:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r456, %f383;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f384, %r458;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r459, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p104, %r460, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p105, %r461, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	setp.eq.s32 	%p106, %r463, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L637
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L645
	mul.hi.u32 	%r465, %r3638, -1431655765;
	shr.u32 	%r466, %r465, 2;
	mul.lo.s32 	%r467, %r466, 6;
	sub.s32 	%r468, %r3638, %r467;
	cvt.rn.f32.s32 	%f414, %r468;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r469, %r33, 8388607;
	or.b32  	%r3647, %r469, 1065353216;
	mov.b32 	%f750, %r3647;
	add.s32 	%r470, %r33, -1073741824;
	and.b32  	%r3648, %r470, -8388608;
	setp.eq.s32 	%p118, %r3648, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r471, %r3648, 192937984;
	add.s32 	%r472, %r3647, %r471;
	mov.b32 	%f426, %r472;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3648, %r3648, %r471;
	mov.b32 	%r3647, %f750;
	setp.ne.s32 	%p119, %r3648, 0;
	setp.ne.s32 	%p120, %r3647, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r473, %f64;
	and.b32  	%r474, %r473, -2147483648;
	mov.b32 	%r475, %f751;
	or.b32  	%r476, %r474, %r475;
	mov.b32 	%f751, %r476;
$L__BB0_75:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r477, %f436;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f437, %r479;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r480, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p126, %r481, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p127, %r482, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p128, %r484, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L679
	@%p25 bra 	$L__BB0_219;
// %bb.77:
	@%p313 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_78;
$L__BB0_215:
	mov.b32 	%r239, %f785;
	and.b32  	%r497, %r239, 8388607;
	or.b32  	%r3741, %r497, 1065353216;
	mov.b32 	%f784, %r3741;
	add.s32 	%r498, %r239, -1073741824;
	and.b32  	%r3742, %r498, -8388608;
	setp.eq.s32 	%p138, %r3742, 0;
	@%p138 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r499, %r3742, 192937984;
	add.s32 	%r500, %r3741, %r499;
	mov.b32 	%f476, %r500;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3742, %r3742, %r499;
	mov.b32 	%r3741, %f784;
	setp.ne.s32 	%p139, %r3742, 0;
	setp.ne.s32 	%p140, %r3741, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p142, %r239, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_219;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r238, %f187;
	setp.lt.u32 	%p133, %r238, 1073741824;
	@%p133 bra 	$L__BB0_214;
// %bb.79:
	setp.lt.u32 	%p134, %r238, -2147483647;
	@%p134 bra 	$L__BB0_212;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r501, %f785;
	or.b32  	%r502, %r232, %r501;
	mov.b32 	%f785, %r502;
$L__BB0_221:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L781
	cvt.u16.u32 	%rs15, %r3637;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r518, %r45, 8388607;
	or.b32  	%r3649, %r518, 1065353216;
	mov.b32 	%f756, %r3649;
	add.s32 	%r519, %r45, -1073741824;
	and.b32  	%r3650, %r519, -8388608;
	setp.eq.s32 	%p159, %r3650, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r520, %r3650, 192937984;
	add.s32 	%r521, %r3649, %r520;
	mov.b32 	%f530, %r521;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3650, %r3650, %r520;
	mov.b32 	%r3649, %f756;
	setp.ne.s32 	%p160, %r3650, 0;
	setp.ne.s32 	%p161, %r3649, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r522, %f85;
	and.b32  	%r523, %r522, -2147483648;
	mov.b32 	%r524, %f757;
	or.b32  	%r525, %r523, %r524;
	mov.b32 	%f757, %r525;
$L__BB0_95:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r526, %f540;
	and.b32  	%r527, %r526, -2147483648;
	or.b32  	%r528, %r527, 1056964608;
	mov.b32 	%f541, %r528;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r529, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r530, %r529, 1;
	setp.eq.b32 	%p167, %r530, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r531, %r529, 2;
	setp.eq.s32 	%p168, %r531, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r532, %r529, 1;
	and.b32  	%r533, %r532, 2;
	setp.eq.s32 	%p169, %r533, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L819
	mul.hi.u32 	%r535, %r3638, -1431655765;
	shr.u32 	%r536, %r535, 5;
	mul.lo.s32 	%r537, %r536, 48;
	sub.s32 	%r538, %r3638, %r537;
	cvt.rn.f32.s32 	%f571, %r538;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r539, %r53, 8388607;
	or.b32  	%r3651, %r539, 1065353216;
	mov.b32 	%f762, %r3651;
	add.s32 	%r540, %r53, -1073741824;
	and.b32  	%r3652, %r540, -8388608;
	setp.eq.s32 	%p180, %r3652, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r541, %r3652, 192937984;
	add.s32 	%r542, %r3651, %r541;
	mov.b32 	%f583, %r542;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3652, %r3652, %r541;
	mov.b32 	%r3651, %f762;
	setp.ne.s32 	%p181, %r3652, 0;
	setp.ne.s32 	%p182, %r3651, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r543, %f106;
	and.b32  	%r544, %r543, -2147483648;
	mov.b32 	%r545, %f763;
	or.b32  	%r546, %r544, %r545;
	mov.b32 	%f763, %r546;
$L__BB0_111:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r547, %f593;
	and.b32  	%r548, %r547, -2147483648;
	or.b32  	%r549, %r548, 1056964608;
	mov.b32 	%f594, %r549;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r550, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r551, %r550, 1;
	setp.eq.b32 	%p188, %r551, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r552, %r550, 2;
	setp.eq.s32 	%p189, %r552, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r553, %r550, 1;
	and.b32  	%r554, %r553, 2;
	setp.eq.s32 	%p190, %r554, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L891
	cvt.u16.u32 	%rs22, %r3637;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r562, %r63, 8388607;
	or.b32  	%r3653, %r562, 1065353216;
	mov.b32 	%f768, %r3653;
	add.s32 	%r563, %r63, -1073741824;
	and.b32  	%r3654, %r563, -8388608;
	setp.eq.s32 	%p200, %r3654, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r564, %r3654, 192937984;
	add.s32 	%r565, %r3653, %r564;
	mov.b32 	%f636, %r565;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3654, %r3654, %r564;
	mov.b32 	%r3653, %f768;
	setp.ne.s32 	%p201, %r3654, 0;
	setp.ne.s32 	%p202, %r3653, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r566, %f127;
	and.b32  	%r567, %r566, -2147483648;
	mov.b32 	%r568, %f769;
	or.b32  	%r569, %r567, %r568;
	mov.b32 	%f769, %r569;
$L__BB0_127:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r570, %f646;
	and.b32  	%r571, %r570, -2147483648;
	or.b32  	%r572, %r571, 1056964608;
	mov.b32 	%f647, %r572;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r573, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r574, %r573, 1;
	setp.eq.b32 	%p208, %r574, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r575, %r573, 2;
	setp.eq.s32 	%p209, %r575, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r576, %r573, 1;
	and.b32  	%r577, %r576, 2;
	setp.eq.s32 	%p210, %r577, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L933
	mul.hi.u32 	%r579, %r3638, -1431655765;
	shr.u32 	%r580, %r579, 2;
	mul.lo.s32 	%r581, %r580, 6;
	sub.s32 	%r582, %r3638, %r581;
	cvt.rn.f32.s32 	%f677, %r582;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r583, %r71, 8388607;
	or.b32  	%r3655, %r583, 1065353216;
	mov.b32 	%f774, %r3655;
	add.s32 	%r584, %r71, -1073741824;
	and.b32  	%r3656, %r584, -8388608;
	setp.eq.s32 	%p220, %r3656, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r585, %r3656, 192937984;
	add.s32 	%r586, %r3655, %r585;
	mov.b32 	%f689, %r586;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3656, %r3656, %r585;
	mov.b32 	%r3655, %f774;
	setp.ne.s32 	%p221, %r3656, 0;
	setp.ne.s32 	%p222, %r3655, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r587, %f148;
	and.b32  	%r588, %r587, -2147483648;
	mov.b32 	%r589, %f775;
	or.b32  	%r590, %r588, %r589;
	mov.b32 	%f775, %r590;
$L__BB0_143:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r591, %f699;
	and.b32  	%r592, %r591, -2147483648;
	or.b32  	%r593, %r592, 1056964608;
	mov.b32 	%f700, %r593;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r594, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r595, %r594, 1;
	setp.eq.b32 	%p228, %r595, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r596, %r594, 2;
	setp.eq.s32 	%p229, %r596, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r597, %r594, 1;
	and.b32  	%r598, %r597, 2;
	setp.eq.s32 	%p230, %r598, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L967
	mov.u32 	%r248, 999999999;
	cvt.u16.u32 	%rs230, %r4;
	@%p88 bra 	$L__BB0_223;
// %bb.145:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs230, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs230, %rs33;
	cvt.u32.u16 	%r612, %rs34;
	and.b32  	%r613, %r612, 255;
	mad.lo.s32 	%r614, %r613, 24, %r2;
	cvt.u16.u32 	%rs35, %r614;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r615, %rs39;
	mul.wide.u32 	%rd34, %r615, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r616, [%rd35];
	shl.b32 	%r617, %r616, 16;
	cvt.s32.s16 	%r82, %r616;
	shr.s32 	%r83, %r616, 16;
	or.b32  	%r618, %r617, 65535;
	setp.lt.u32 	%p234, %r618, 1638399;
	setp.lt.u32 	%p235, %r616, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_146;
$L__BB0_222:                            // %L1247
	mul.lo.s32 	%r622, %r83, 801;
	mad.lo.s32 	%r248, %r82, 33, %r622;
$L__BB0_223:                            // %pass487
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r395, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r509, %f487;
	or.b32  	%r397, %r396, 1056964608;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%f225, %r397;
	or.b32  	%r511, %r510, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r511;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r398, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r399, %r398, 1;
	cvt.rzi.s32.f32 	%r512, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r399, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r513, %r512, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r400, %r398, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r513, 1;
	setp.eq.s32 	%p41, %r400, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r514, %r512, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r514, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r515, %r512, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r402, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r516, %r515, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r516, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r391, %f254;
	mov.b32 	%r394, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r390, %r394, -2147483648;
	mov.b32 	%r486, %f62;
	mov.b32 	%r487, %f83;
	mov.b32 	%r492, %f63;
	mov.b32 	%r493, %f84;
	mov.b32 	%r505, %f517;
	mov.b32 	%r508, %f514;
	mov.b32 	%r442, %f20;
	mov.b32 	%r443, %f41;
	mov.b32 	%r445, %f21;
	mov.b32 	%r446, %f42;
	xor.b32  	%r489, %r492, -2147483648;
	xor.b32  	%r490, %r493, -2147483648;
	xor.b32  	%r504, %r508, -2147483648;
	mov.b32 	%r556, %f104;
	mov.b32 	%r557, %f125;
	mov.b32 	%r559, %f105;
	mov.b32 	%r560, %f126;
	mov.b32 	%r600, %f146;
	mov.b32 	%r601, %f167;
	mov.b32 	%r606, %f147;
	xor.b32  	%r603, %r606, -2147483648;
	mov.b32 	%r607, %f168;
	xor.b32  	%r604, %r607, -2147483648;
	and.b32  	%r623, %r4, 24;
	setp.ne.s32 	%p237, %r623, 24;
	cvt.u16.u32 	%rs40, %r223;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r624, %rs44;
	and.b32  	%r249, %r624, 255;
	mul.lo.s32 	%r3657, %r1, 1152;
	@%p237 bra 	$L__BB0_147;
// %bb.224:                             // %pass487.L1509_crit_edge
	mov.u32 	%r86, 0;
	mov.u32 	%r87, %r86;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass502
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r625, %r249, 24;
	mul.lo.s32 	%r626, %r222, 144;
	or.b32  	%r627, %r3657, %r2;
	add.s32 	%r628, %r627, %r626;
	add.s32 	%r629, %r628, %r625;
	mul.wide.u32 	%rd41, %r629, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r86, [%rd42];
	or.b32  	%r630, %r2, 576;
	add.s32 	%r631, %r630, %r3657;
	add.s32 	%r632, %r631, %r626;
	add.s32 	%r633, %r632, %r625;
	mul.wide.u32 	%rd43, %r633, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r87, [%rd44];
$L__BB0_148:                            // %L1509
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r445;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r488, %r490, %r489;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r491, %r493, %r492;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r494, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r504;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r557, %r556;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r558, %r560, %r559;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r599, %r601, %r600;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r602, %r604, %r603;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r605, %r607, %r606;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r608, %r601, %r600;
	// end inline asm
	mov.u32 	%r120, 0;
	shl.b32 	%r636, %r4, 2;
	and.b32  	%r637, %r636, 60;
	shl.b32 	%r638, %r4, 3;
	and.b32  	%r88, %r638, 128;
	add.s32 	%r639, %r1, %r363;
	shl.b32 	%r640, %r639, 8;
	or.b32  	%r641, %r637, %r88;
	or.b32  	%r89, %r641, %r640;
	or.b32  	%r90, %r636, 64;
	mad.lo.s32 	%r91, %r359, 12288, %r640;
	add.s32 	%r92, %r2, 24;
	shr.u32 	%r642, %r4, 4;
	and.b32  	%r643, %r235, 30;
	or.b32  	%r644, %r643, %r642;
	mul.lo.s32 	%r93, %r644, 257;
	or.b32  	%r645, %r235, %r642;
	or.b32  	%r646, %r645, 32;
	mul.lo.s32 	%r94, %r646, 257;
	and.b16  	%rs46, %rs230, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs230, %rs49;
	cvt.u32.u16 	%r647, %rs50;
	and.b32  	%r95, %r647, 255;
	and.b32  	%r648, %r3, 224;
	shr.u32 	%r649, %r2, 3;
	mad.lo.s32 	%r96, %r649, 257, %r648;
	shr.u32 	%r650, %r92, 3;
	mad.lo.s32 	%r97, %r650, 257, %r648;
	add.s32 	%r651, %r2, 48;
	shr.u32 	%r652, %r651, 3;
	mad.lo.s32 	%r98, %r652, 257, %r648;
	add.s32 	%r653, %r2, 72;
	shr.u32 	%r654, %r653, 3;
	mad.lo.s32 	%r99, %r654, 257, %r648;
	or.b32  	%r655, %r649, 12;
	mad.lo.s32 	%r100, %r655, 257, %r648;
	add.s32 	%r656, %r2, 120;
	shr.u32 	%r657, %r656, 3;
	mad.lo.s32 	%r101, %r657, 257, %r648;
	add.s32 	%r658, %r2, 144;
	shr.u32 	%r659, %r658, 3;
	mad.lo.s32 	%r102, %r659, 257, %r648;
	add.s32 	%r660, %r2, 168;
	shr.u32 	%r661, %r660, 3;
	mad.lo.s32 	%r103, %r661, 257, %r648;
	or.b32  	%r662, %r649, 24;
	mad.lo.s32 	%r104, %r662, 257, %r648;
	add.s32 	%r663, %r2, 216;
	shr.u32 	%r664, %r663, 3;
	mad.lo.s32 	%r105, %r664, 257, %r648;
	add.s32 	%r665, %r2, 240;
	shr.u32 	%r666, %r665, 3;
	mad.lo.s32 	%r106, %r666, 257, %r648;
	add.s32 	%r667, %r2, 264;
	shr.u32 	%r668, %r667, 3;
	mad.lo.s32 	%r107, %r668, 257, %r648;
	or.b32  	%r669, %r649, 36;
	mad.lo.s32 	%r108, %r669, 257, %r648;
	add.s32 	%r670, %r2, 312;
	shr.u32 	%r671, %r670, 3;
	mad.lo.s32 	%r109, %r671, 257, %r648;
	add.s32 	%r672, %r2, 336;
	shr.u32 	%r673, %r672, 3;
	mad.lo.s32 	%r110, %r673, 257, %r648;
	add.s32 	%r674, %r2, 360;
	shr.u32 	%r675, %r674, 3;
	mad.lo.s32 	%r111, %r675, 257, %r648;
	or.b32  	%r676, %r649, 48;
	mad.lo.s32 	%r112, %r676, 257, %r648;
	add.s32 	%r677, %r2, 408;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r113, %r678, 257, %r648;
	add.s32 	%r679, %r2, 432;
	shr.u32 	%r680, %r679, 3;
	mad.lo.s32 	%r114, %r680, 257, %r648;
	add.s32 	%r681, %r2, 456;
	shr.u32 	%r682, %r681, 3;
	mad.lo.s32 	%r115, %r682, 257, %r648;
	or.b32  	%r683, %r649, 60;
	mad.lo.s32 	%r116, %r683, 257, %r648;
	add.s32 	%r684, %r2, 504;
	bfe.u32 	%r685, %r684, 3, 6;
	mad.lo.s32 	%r117, %r685, 257, %r648;
	mul.lo.s32 	%r686, %r2, 33;
	mad.lo.s32 	%r687, %r222, 4806, %r686;
	mad.lo.s32 	%r688, %r249, 801, %r687;
	bfe.s32 	%r689, %r2, 1, 1;
	and.b32  	%r690, %r689, 4112;
	bfe.s32 	%r691, %r2, 2, 1;
	and.b32  	%r692, %r691, 2056;
	bfe.s32 	%r693, %r2, 3, 1;
	and.b32  	%r694, %r2, 8;
	setp.eq.s32 	%p238, %r694, 0;
	and.b32  	%r695, %r693, 1028;
	mul.lo.s32 	%r696, %r222, 6;
	and.b32  	%r697, %r2, 1;
	neg.s32 	%r698, %r697;
	and.b32  	%r699, %r698, 8256;
	shr.u32 	%r700, %r2, 4;
	mul.lo.s32 	%r701, %r700, 514;
	or.b32  	%r702, %r690, %r692;
	add.s32 	%r703, %r695, %r696;
	add.s32 	%r704, %r703, %r702;
	or.b32  	%r705, %r704, %r699;
	add.s32 	%r706, %r701, %r249;
	add.s32 	%r707, %r706, %r705;
	mul.wide.u32 	%rd45, %r707, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	selp.b32 	%r708, 1028, 0, %p238;
	bfe.s32 	%r709, %r92, 4, 1;
	and.b32  	%r710, %r92, 16;
	setp.eq.s32 	%p239, %r710, 0;
	and.b32  	%r711, %r709, 514;
	shr.u32 	%r712, %r92, 5;
	mul.lo.s32 	%r713, %r712, 257;
	add.s32 	%r714, %r708, %r696;
	add.s32 	%r715, %r714, %r702;
	or.b32  	%r716, %r715, %r699;
	add.s32 	%r717, %r713, %r249;
	add.s32 	%r718, %r717, %r711;
	add.s32 	%r719, %r718, %r716;
	mul.wide.u32 	%rd47, %r719, 4;
	add.s64 	%rd8, %rd46, %rd47;
	cvt.u64.u32 	%rd48, %r705;
	cvt.u64.u32 	%rd49, %r249;
	cvt.u64.u32 	%rd50, %r701;
	add.s64 	%rd51, %rd50, %rd49;
	add.s64 	%rd52, %rd51, %rd48;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd46, %rd53;
	cvt.u64.u32 	%rd54, %r716;
	selp.b64 	%rd55, 0, 514, %p239;
	cvt.u64.u32 	%rd56, %r713;
	add.s64 	%rd57, %rd56, %rd49;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd10, %rd46, %rd60;
	add.s32 	%r720, %r703, %r701;
	add.s32 	%r721, %r720, %r699;
	add.s32 	%r722, %r721, %r702;
	add.s32 	%r723, %r722, %r249;
	or.b32  	%r724, %r714, %r699;
	add.s32 	%r725, %r724, %r713;
	add.s32 	%r726, %r725, %r702;
	add.s32 	%r727, %r726, %r249;
	add.s32 	%r728, %r727, %r711;
	or.b32  	%r729, %r696, 32;
	add.s32 	%r730, %r729, %r701;
	add.s32 	%r731, %r730, %r695;
	add.s32 	%r732, %r731, %r699;
	add.s32 	%r733, %r732, %r702;
	add.s32 	%r734, %r733, %r249;
	add.s32 	%r735, %r729, %r708;
	add.s32 	%r736, %r735, %r699;
	add.s32 	%r737, %r736, %r713;
	add.s32 	%r738, %r737, %r702;
	add.s32 	%r739, %r738, %r249;
	add.s32 	%r740, %r739, %r711;
	mul.lo.s32 	%r741, %r361, 55296;
	mad.lo.s32 	%r742, %r365, 1152, %r741;
	mad.lo.s32 	%r743, %r2, 24, %r3657;
	add.s32 	%r118, %r743, %r95;
	cvt.s64.s32 	%rd11, %r742;
	cvt.u16.u32 	%rs51, %r92;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r744, %rs56;
	and.b32  	%r745, %r744, 255;
	or.b32  	%r746, %r3657, %r95;
	mad.lo.s32 	%r119, %r745, 24, %r746;
	mul.wide.u32 	%rd61, %r688, 4;
	add.s64 	%rd12, %rd46, %rd61;
	add.s32 	%r747, %r723, 64;
	mul.wide.u32 	%rd62, %r747, 4;
	add.s64 	%rd13, %rd46, %rd62;
	add.s32 	%r748, %r728, 64;
	mul.wide.u32 	%rd63, %r748, 4;
	add.s64 	%rd14, %rd46, %rd63;
	add.s32 	%r749, %r734, 64;
	mul.wide.u32 	%rd64, %r749, 4;
	add.s64 	%rd15, %rd46, %rd64;
	add.s32 	%r750, %r740, 64;
	mul.wide.u32 	%rd65, %r750, 4;
	add.s64 	%rd16, %rd46, %rd65;
	add.s32 	%r751, %r723, 128;
	mul.wide.u32 	%rd66, %r751, 4;
	add.s64 	%rd17, %rd46, %rd66;
	add.s32 	%r752, %r728, 128;
	mul.wide.u32 	%rd67, %r752, 4;
	add.s64 	%rd18, %rd46, %rd67;
	add.s32 	%r753, %r734, 128;
	mul.wide.u32 	%rd68, %r753, 4;
	add.s64 	%rd19, %rd46, %rd68;
	add.s32 	%r754, %r740, 128;
	mul.wide.u32 	%rd69, %r754, 4;
	add.s64 	%rd20, %rd46, %rd69;
	add.s32 	%r755, %r723, 192;
	mul.wide.u32 	%rd70, %r755, 4;
	add.s64 	%rd21, %rd46, %rd70;
	add.s32 	%r756, %r728, 192;
	mul.wide.u32 	%rd71, %r756, 4;
	add.s64 	%rd22, %rd46, %rd71;
	add.s32 	%r757, %r734, 192;
	mul.wide.u32 	%rd72, %r757, 4;
	add.s64 	%rd23, %rd46, %rd72;
	add.s32 	%r758, %r740, 192;
	mul.wide.u32 	%rd73, %r758, 4;
	add.s64 	%rd24, %rd46, %rd73;
	setp.lt.u32 	%p241, %r4, 16;
	setp.gt.u32 	%p270, %r2, 7;
	setp.lt.u32 	%p274, %r4, 24;
	mov.u32 	%r3690, %r120;
	mov.u32 	%r3691, %r120;
	mov.u32 	%r3692, %r120;
	mov.u32 	%r3693, %r120;
	bra.uni 	$L__BB0_149;
$L__BB0_195:                            // %L25588
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r221, %r120, 48;
	setp.ne.s32 	%p312, %r120, 32688;
	mov.u32 	%r120, %r221;
	@%p312 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_196;
$L__BB0_149:                            // %L1512
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_186 Depth 2
	add.s32 	%r759, %r120, %r359;
	setp.lt.s32 	%p240, %r759, %r360;
	@%p240 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_196;
$L__BB0_150:                            // %oksrem646
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r952, %r120, -1431655765;
	shr.u32 	%r953, %r952, 5;
	mul.lo.s32 	%r254, %r953, 48;
	add.s32 	%r954, %r254, %r2;
	add.s32 	%r955, %r954, %r359;
	mad.lo.s32 	%r956, %r955, 12288, %r89;
	mul.hi.s32 	%r957, %r956, 715827883;
	shr.u32 	%r958, %r957, 31;
	shr.s32 	%r959, %r957, 26;
	add.s32 	%r960, %r959, %r958;
	setp.lt.s32 	%p242, %r956, 0;
	mul.lo.s32 	%r961, %r960, 402653184;
	setp.ne.s32 	%p243, %r961, %r956;
	and.pred  	%p244, %p242, %p243;
	selp.s32 	%r962, -1, 0, %p244;
	add.s32 	%r963, %r960, %r962;
	mad.lo.s32 	%r964, %r963, -402653184, %r956;
	mul.wide.s32 	%rd74, %r964, 4;
	add.s64 	%rd75, %rd3, %rd74;
	ld.global.v4.u32 	{%r965, %r966, %r967, %r968}, [%rd75];
	mul.lo.s32 	%r969, %r954, 12288;
	or.b32  	%r970, %r969, %r90;
	or.b32  	%r971, %r970, %r88;
	add.s32 	%r972, %r91, %r971;
	mul.hi.s32 	%r973, %r972, 715827883;
	shr.u32 	%r974, %r973, 31;
	shr.s32 	%r975, %r973, 26;
	add.s32 	%r976, %r975, %r974;
	shr.s32 	%r977, %r972, 31;
	add.s32 	%r978, %r977, %r976;
	or.b32  	%r979, %r972, 1;
	mad.lo.s32 	%r980, %r978, -402653184, %r979;
	mul.wide.s32 	%rd76, %r980, 4;
	add.s64 	%rd77, %rd3, %rd76;
	ld.global.v4.u32 	{%r981, %r982, %r983, %r984}, [%rd77+-4];
	add.s32 	%r985, %r92, %r254;
	add.s32 	%r986, %r985, %r359;
	mad.lo.s32 	%r987, %r986, 12288, %r89;
	mul.hi.s32 	%r988, %r987, 715827883;
	shr.u32 	%r989, %r988, 31;
	shr.s32 	%r990, %r988, 26;
	add.s32 	%r991, %r990, %r989;
	setp.lt.s32 	%p245, %r987, 0;
	mul.lo.s32 	%r992, %r991, 402653184;
	setp.ne.s32 	%p246, %r992, %r987;
	and.pred  	%p247, %p245, %p246;
	selp.s32 	%r993, -1, 0, %p247;
	add.s32 	%r994, %r991, %r993;
	mad.lo.s32 	%r995, %r994, -402653184, %r987;
	mul.wide.s32 	%rd78, %r995, 4;
	add.s64 	%rd79, %rd3, %rd78;
	ld.global.v4.u32 	{%r996, %r997, %r998, %r999}, [%rd79];
	mul.lo.s32 	%r1000, %r985, 12288;
	or.b32  	%r1001, %r1000, %r90;
	or.b32  	%r1002, %r1001, %r88;
	add.s32 	%r1003, %r91, %r1002;
	mul.hi.s32 	%r1004, %r1003, 715827883;
	shr.u32 	%r1005, %r1004, 31;
	shr.s32 	%r1006, %r1004, 26;
	add.s32 	%r1007, %r1006, %r1005;
	shr.s32 	%r1008, %r1003, 31;
	add.s32 	%r1009, %r1008, %r1007;
	or.b32  	%r1010, %r1003, 1;
	mad.lo.s32 	%r1011, %r1009, -402653184, %r1010;
	mul.wide.s32 	%rd80, %r1011, 4;
	add.s64 	%rd81, %rd3, %rd80;
	ld.global.v4.u32 	{%r1012, %r1013, %r1014, %r1015}, [%rd81+-4];
	selp.b32 	%r1016, %r967, %r965, %p241;
	shfl.sync.bfly.b32	%r1017, %r1016, 16, 31, -1;
	selp.b32 	%r762, %r965, %r1017, %p241;
	selp.b32 	%r767, %r1017, %r967, %p241;
	selp.b32 	%r1018, %r968, %r966, %p241;
	shfl.sync.bfly.b32	%r1019, %r1018, 16, 31, -1;
	selp.b32 	%r770, %r966, %r1019, %p241;
	selp.b32 	%r775, %r1019, %r968, %p241;
	selp.b32 	%r1020, %r983, %r981, %p241;
	shfl.sync.bfly.b32	%r1021, %r1020, 16, 31, -1;
	selp.b32 	%r778, %r981, %r1021, %p241;
	selp.b32 	%r783, %r1021, %r983, %p241;
	selp.b32 	%r1022, %r984, %r982, %p241;
	shfl.sync.bfly.b32	%r1023, %r1022, 16, 31, -1;
	selp.b32 	%r786, %r982, %r1023, %p241;
	selp.b32 	%r791, %r1023, %r984, %p241;
	selp.b32 	%r1024, %r998, %r996, %p241;
	shfl.sync.bfly.b32	%r1025, %r1024, 16, 31, -1;
	selp.b32 	%r794, %r996, %r1025, %p241;
	selp.b32 	%r799, %r1025, %r998, %p241;
	selp.b32 	%r1026, %r999, %r997, %p241;
	shfl.sync.bfly.b32	%r1027, %r1026, 16, 31, -1;
	selp.b32 	%r802, %r997, %r1027, %p241;
	selp.b32 	%r807, %r1027, %r999, %p241;
	selp.b32 	%r1028, %r1014, %r1012, %p241;
	shfl.sync.bfly.b32	%r1029, %r1028, 16, 31, -1;
	selp.b32 	%r810, %r1012, %r1029, %p241;
	selp.b32 	%r815, %r1029, %r1014, %p241;
	selp.b32 	%r1030, %r1015, %r1013, %p241;
	shfl.sync.bfly.b32	%r1031, %r1030, 16, 31, -1;
	selp.b32 	%r818, %r1013, %r1031, %p241;
	selp.b32 	%r823, %r1031, %r1015, %p241;
	shl.b32 	%r763, %r767, 4;
	mov.u32 	%r761, 252645135;
	// begin inline asm
	lop3.b32 %r825, %r761, %r762, %r763, 202;
	// end inline asm
	shr.u32 	%r766, %r762, 4;
	// begin inline asm
	lop3.b32 %r841, %r761, %r766, %r767, 202;
	// end inline asm
	shl.b32 	%r771, %r775, 4;
	// begin inline asm
	lop3.b32 %r833, %r761, %r770, %r771, 202;
	// end inline asm
	shr.u32 	%r774, %r770, 4;
	// begin inline asm
	lop3.b32 %r849, %r761, %r774, %r775, 202;
	// end inline asm
	shl.b32 	%r779, %r783, 4;
	// begin inline asm
	lop3.b32 %r857, %r761, %r778, %r779, 202;
	// end inline asm
	shr.u32 	%r782, %r778, 4;
	// begin inline asm
	lop3.b32 %r873, %r761, %r782, %r783, 202;
	// end inline asm
	shl.b32 	%r787, %r791, 4;
	// begin inline asm
	lop3.b32 %r865, %r761, %r786, %r787, 202;
	// end inline asm
	shr.u32 	%r790, %r786, 4;
	// begin inline asm
	lop3.b32 %r881, %r761, %r790, %r791, 202;
	// end inline asm
	shl.b32 	%r795, %r799, 4;
	// begin inline asm
	lop3.b32 %r826, %r761, %r794, %r795, 202;
	// end inline asm
	shr.u32 	%r798, %r794, 4;
	// begin inline asm
	lop3.b32 %r842, %r761, %r798, %r799, 202;
	// end inline asm
	shl.b32 	%r803, %r807, 4;
	// begin inline asm
	lop3.b32 %r834, %r761, %r802, %r803, 202;
	// end inline asm
	shr.u32 	%r806, %r802, 4;
	// begin inline asm
	lop3.b32 %r850, %r761, %r806, %r807, 202;
	// end inline asm
	shl.b32 	%r811, %r815, 4;
	// begin inline asm
	lop3.b32 %r858, %r761, %r810, %r811, 202;
	// end inline asm
	shr.u32 	%r814, %r810, 4;
	// begin inline asm
	lop3.b32 %r874, %r761, %r814, %r815, 202;
	// end inline asm
	shl.b32 	%r819, %r823, 4;
	// begin inline asm
	lop3.b32 %r866, %r761, %r818, %r819, 202;
	// end inline asm
	shr.u32 	%r822, %r818, 4;
	// begin inline asm
	lop3.b32 %r882, %r761, %r822, %r823, 202;
	// end inline asm
	mov.u32 	%r827, 25152;
	// begin inline asm
	prmt.b32 %r889, %r825, %r826, %r827;
	// end inline asm
	mov.u32 	%r831, 29521;
	// begin inline asm
	prmt.b32 %r921, %r825, %r826, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r833, %r834, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r833, %r834, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r841, %r842, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r841, %r842, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r849, %r850, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r930, %r849, %r850, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r857, %r858, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r857, %r858, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r865, %r866, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r865, %r866, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r873, %r874, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r938, %r873, %r874, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r881, %r882, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r946, %r881, %r882, %r831;
	// end inline asm
	mov.u32 	%r891, 21520;
	// begin inline asm
	prmt.b32 %r888, %r889, %r890, %r891;
	// end inline asm
	mov.u32 	%r895, 30258;
	// begin inline asm
	prmt.b32 %r892, %r889, %r890, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r897, %r898, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r900, %r897, %r898, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r905, %r906, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r908, %r905, %r906, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r912, %r913, %r914, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r916, %r913, %r914, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r920, %r921, %r922, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r924, %r921, %r922, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r928, %r929, %r930, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r932, %r929, %r930, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r936, %r937, %r938, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r940, %r937, %r938, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r944, %r945, %r946, %r891;
	// end inline asm
	// begin inline asm
	prmt.b32 %r948, %r945, %r946, %r895;
	// end inline asm
	cvt.u16.u32 	%rs57, %r954;
	mul.hi.s16 	%rs58, %rs57, 10923;
	shr.u16 	%rs59, %rs58, 15;
	shr.s16 	%rs60, %rs58, 2;
	add.s16 	%rs61, %rs60, %rs59;
	mul.lo.s16 	%rs62, %rs61, 24;
	sub.s16 	%rs63, %rs57, %rs62;
	cvt.s32.s16 	%r1032, %rs63;
	add.s32 	%r1033, %r93, %r1032;
	mul.wide.s32 	%rd82, %r1033, 4;
	add.s64 	%rd84, %rd46, %rd82;
	st.shared.u32 	[%rd84], %r888;
	add.s32 	%r1034, %r1033, 128;
	mul.wide.u32 	%rd85, %r1034, 4;
	add.s64 	%rd86, %rd46, %rd85;
	st.shared.u32 	[%rd86], %r896;
	add.s32 	%r1035, %r1033, 64;
	mul.wide.u32 	%rd87, %r1035, 4;
	add.s64 	%rd88, %rd46, %rd87;
	st.shared.u32 	[%rd88], %r892;
	add.s32 	%r1036, %r1033, 192;
	mul.wide.u32 	%rd89, %r1036, 4;
	add.s64 	%rd90, %rd46, %rd89;
	st.shared.u32 	[%rd90], %r900;
	add.s32 	%r1037, %r94, %r1032;
	mul.wide.u32 	%rd91, %r1037, 4;
	add.s64 	%rd92, %rd46, %rd91;
	st.shared.u32 	[%rd92], %r904;
	add.s32 	%r1038, %r1037, 128;
	mul.wide.u32 	%rd93, %r1038, 4;
	add.s64 	%rd94, %rd46, %rd93;
	st.shared.u32 	[%rd94], %r912;
	add.s32 	%r1039, %r1037, 64;
	mul.wide.u32 	%rd95, %r1039, 4;
	add.s64 	%rd96, %rd46, %rd95;
	st.shared.u32 	[%rd96], %r908;
	add.s32 	%r1040, %r1037, 192;
	mul.wide.u32 	%rd97, %r1040, 4;
	add.s64 	%rd98, %rd46, %rd97;
	st.shared.u32 	[%rd98], %r916;
	add.s32 	%r1041, %r1033, 32;
	mul.wide.u32 	%rd99, %r1041, 4;
	add.s64 	%rd100, %rd46, %rd99;
	st.shared.u32 	[%rd100], %r920;
	add.s32 	%r1042, %r1033, 160;
	mul.wide.u32 	%rd101, %r1042, 4;
	add.s64 	%rd102, %rd46, %rd101;
	st.shared.u32 	[%rd102], %r928;
	add.s32 	%r1043, %r1033, 96;
	mul.wide.u32 	%rd103, %r1043, 4;
	add.s64 	%rd104, %rd46, %rd103;
	st.shared.u32 	[%rd104], %r924;
	add.s32 	%r1044, %r1033, 224;
	mul.wide.u32 	%rd105, %r1044, 4;
	add.s64 	%rd106, %rd46, %rd105;
	st.shared.u32 	[%rd106], %r932;
	add.s32 	%r1045, %r1037, 32;
	mul.wide.u32 	%rd107, %r1045, 4;
	add.s64 	%rd108, %rd46, %rd107;
	st.shared.u32 	[%rd108], %r936;
	add.s32 	%r1046, %r1037, 160;
	mul.wide.u32 	%rd109, %r1046, 4;
	add.s64 	%rd110, %rd46, %rd109;
	st.shared.u32 	[%rd110], %r944;
	add.s32 	%r1047, %r1037, 96;
	mul.wide.u32 	%rd111, %r1047, 4;
	add.s64 	%rd112, %rd46, %rd111;
	st.shared.u32 	[%rd112], %r940;
	add.s32 	%r1048, %r1037, 224;
	mul.wide.u32 	%rd113, %r1048, 4;
	add.s64 	%rd114, %rd46, %rd113;
	st.shared.u32 	[%rd114], %r948;
	bar.sync 	0;
	add.s32 	%r1049, %r254, %r95;
	cvt.u16.u32 	%rs64, %r1049;
	mul.hi.s16 	%rs65, %rs64, 10923;
	shr.u16 	%rs66, %rs65, 15;
	shr.s16 	%rs67, %rs65, 2;
	add.s16 	%rs68, %rs67, %rs66;
	mul.lo.s16 	%rs69, %rs68, 24;
	sub.s16 	%rs70, %rs64, %rs69;
	cvt.s32.s16 	%r255, %rs70;
	add.s32 	%r1050, %r96, %r255;
	mul.wide.s32 	%rd115, %r1050, 4;
	add.s64 	%rd116, %rd46, %rd115;
	ld.shared.u32 	%r256, [%rd116];
	add.s32 	%r1051, %r97, %r255;
	mul.wide.u32 	%rd117, %r1051, 4;
	add.s64 	%rd118, %rd46, %rd117;
	ld.shared.u32 	%r257, [%rd118];
	add.s32 	%r1052, %r98, %r255;
	mul.wide.u32 	%rd119, %r1052, 4;
	add.s64 	%rd120, %rd46, %rd119;
	ld.shared.u32 	%r258, [%rd120];
	add.s32 	%r1053, %r99, %r255;
	mul.wide.u32 	%rd121, %r1053, 4;
	add.s64 	%rd122, %rd46, %rd121;
	ld.shared.u32 	%r259, [%rd122];
	add.s32 	%r1054, %r100, %r255;
	mul.wide.u32 	%rd123, %r1054, 4;
	add.s64 	%rd124, %rd46, %rd123;
	ld.shared.u32 	%r260, [%rd124];
	add.s32 	%r1055, %r101, %r255;
	mul.wide.u32 	%rd125, %r1055, 4;
	add.s64 	%rd126, %rd46, %rd125;
	ld.shared.u32 	%r261, [%rd126];
	add.s32 	%r1056, %r102, %r255;
	mul.wide.u32 	%rd127, %r1056, 4;
	add.s64 	%rd128, %rd46, %rd127;
	ld.shared.u32 	%r262, [%rd128];
	add.s32 	%r1057, %r103, %r255;
	mul.wide.u32 	%rd129, %r1057, 4;
	add.s64 	%rd130, %rd46, %rd129;
	ld.shared.u32 	%r263, [%rd130];
	add.s32 	%r1058, %r104, %r255;
	mul.wide.u32 	%rd131, %r1058, 4;
	add.s64 	%rd132, %rd46, %rd131;
	ld.shared.u32 	%r264, [%rd132];
	add.s32 	%r1059, %r105, %r255;
	mul.wide.u32 	%rd133, %r1059, 4;
	add.s64 	%rd134, %rd46, %rd133;
	ld.shared.u32 	%r265, [%rd134];
	add.s32 	%r1060, %r106, %r255;
	mul.wide.u32 	%rd135, %r1060, 4;
	add.s64 	%rd136, %rd46, %rd135;
	ld.shared.u32 	%r266, [%rd136];
	add.s32 	%r1061, %r107, %r255;
	mul.wide.u32 	%rd137, %r1061, 4;
	add.s64 	%rd138, %rd46, %rd137;
	ld.shared.u32 	%r267, [%rd138];
	add.s32 	%r1062, %r108, %r255;
	mul.wide.u32 	%rd139, %r1062, 4;
	add.s64 	%rd140, %rd46, %rd139;
	ld.shared.u32 	%r268, [%rd140];
	add.s32 	%r1063, %r109, %r255;
	mul.wide.u32 	%rd141, %r1063, 4;
	add.s64 	%rd142, %rd46, %rd141;
	ld.shared.u32 	%r269, [%rd142];
	add.s32 	%r1064, %r110, %r255;
	mul.wide.u32 	%rd143, %r1064, 4;
	add.s64 	%rd144, %rd46, %rd143;
	ld.shared.u32 	%r270, [%rd144];
	add.s32 	%r1065, %r111, %r255;
	mul.wide.u32 	%rd145, %r1065, 4;
	add.s64 	%rd146, %rd46, %rd145;
	ld.shared.u32 	%r271, [%rd146];
	add.s32 	%r1066, %r112, %r255;
	mul.wide.u32 	%rd147, %r1066, 4;
	add.s64 	%rd148, %rd46, %rd147;
	ld.shared.u32 	%r272, [%rd148];
	add.s32 	%r1067, %r113, %r255;
	mul.wide.u32 	%rd149, %r1067, 4;
	add.s64 	%rd150, %rd46, %rd149;
	ld.shared.u32 	%r273, [%rd150];
	add.s32 	%r1068, %r114, %r255;
	mul.wide.u32 	%rd151, %r1068, 4;
	add.s64 	%rd152, %rd46, %rd151;
	ld.shared.u32 	%r274, [%rd152];
	add.s32 	%r1069, %r115, %r255;
	mul.wide.u32 	%rd153, %r1069, 4;
	add.s64 	%rd154, %rd46, %rd153;
	ld.shared.u32 	%r275, [%rd154];
	add.s32 	%r1070, %r116, %r255;
	mul.wide.u32 	%rd155, %r1070, 4;
	add.s64 	%rd156, %rd46, %rd155;
	ld.shared.u32 	%r276, [%rd156];
	add.s32 	%r1071, %r117, %r255;
	mul.wide.s32 	%rd157, %r1071, 4;
	add.s64 	%rd158, %rd46, %rd157;
	ld.shared.u32 	%r277, [%rd158];
	bar.sync 	0;
	shfl.sync.idx.b32	%r278, %r248, 0, 31, -1;
	shfl.sync.idx.b32	%r279, %r248, 1, 31, -1;
	shfl.sync.idx.b32	%r280, %r248, 2, 31, -1;
	shfl.sync.idx.b32	%r281, %r248, 3, 31, -1;
	shfl.sync.idx.b32	%r282, %r248, 4, 31, -1;
	shfl.sync.idx.b32	%r283, %r248, 5, 31, -1;
	shfl.sync.idx.b32	%r284, %r248, 6, 31, -1;
	shfl.sync.idx.b32	%r285, %r248, 7, 31, -1;
	shfl.sync.idx.b32	%r286, %r248, 8, 31, -1;
	shfl.sync.idx.b32	%r287, %r248, 9, 31, -1;
	shfl.sync.idx.b32	%r288, %r248, 10, 31, -1;
	shfl.sync.idx.b32	%r289, %r248, 11, 31, -1;
	shfl.sync.idx.b32	%r290, %r248, 12, 31, -1;
	shfl.sync.idx.b32	%r291, %r248, 13, 31, -1;
	shfl.sync.idx.b32	%r292, %r248, 14, 31, -1;
	shfl.sync.idx.b32	%r293, %r248, 15, 31, -1;
	shfl.sync.idx.b32	%r294, %r248, 16, 31, -1;
	shfl.sync.idx.b32	%r295, %r248, 17, 31, -1;
	shfl.sync.idx.b32	%r296, %r248, 18, 31, -1;
	shfl.sync.idx.b32	%r297, %r248, 19, 31, -1;
	shfl.sync.idx.b32	%r298, %r248, 20, 31, -1;
	shfl.sync.idx.b32	%r299, %r248, 21, 31, -1;
	shfl.sync.idx.b32	%r300, %r248, 22, 31, -1;
	shfl.sync.idx.b32	%r301, %r248, 23, 31, -1;
	setp.eq.s32 	%p248, %r278, 999999999;
	@%p248 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem3274
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1072, %r278, %r255;
	mul.wide.s32 	%rd159, %r1072, 4;
	add.s64 	%rd161, %rd46, %rd159;
	st.shared.u32 	[%rd161], %r256;
	setp.eq.s32 	%p249, %r279, 999999999;
	@%p249 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3340
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1073, %r279, %r255;
	mul.wide.s32 	%rd162, %r1073, 4;
	add.s64 	%rd164, %rd46, %rd162;
	st.shared.u32 	[%rd164], %r257;
	setp.eq.s32 	%p250, %r280, 999999999;
	@%p250 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3406
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1074, %r280, %r255;
	mul.wide.s32 	%rd165, %r1074, 4;
	add.s64 	%rd167, %rd46, %rd165;
	st.shared.u32 	[%rd167], %r258;
	setp.eq.s32 	%p251, %r281, 999999999;
	@%p251 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3472
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1075, %r281, %r255;
	mul.wide.s32 	%rd168, %r1075, 4;
	add.s64 	%rd170, %rd46, %rd168;
	st.shared.u32 	[%rd170], %r259;
	setp.eq.s32 	%p252, %r282, 999999999;
	@%p252 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3538
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1076, %r282, %r255;
	mul.wide.s32 	%rd171, %r1076, 4;
	add.s64 	%rd173, %rd46, %rd171;
	st.shared.u32 	[%rd173], %r260;
	setp.eq.s32 	%p253, %r283, 999999999;
	@%p253 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3604
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1077, %r283, %r255;
	mul.wide.s32 	%rd174, %r1077, 4;
	add.s64 	%rd176, %rd46, %rd174;
	st.shared.u32 	[%rd176], %r261;
	setp.eq.s32 	%p254, %r284, 999999999;
	@%p254 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3670
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1078, %r284, %r255;
	mul.wide.s32 	%rd177, %r1078, 4;
	add.s64 	%rd179, %rd46, %rd177;
	st.shared.u32 	[%rd179], %r262;
	setp.eq.s32 	%p255, %r285, 999999999;
	@%p255 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3736
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1079, %r285, %r255;
	mul.wide.s32 	%rd180, %r1079, 4;
	add.s64 	%rd182, %rd46, %rd180;
	st.shared.u32 	[%rd182], %r263;
	setp.eq.s32 	%p256, %r286, 999999999;
	@%p256 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3802
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1080, %r286, %r255;
	mul.wide.s32 	%rd183, %r1080, 4;
	add.s64 	%rd185, %rd46, %rd183;
	st.shared.u32 	[%rd185], %r264;
	setp.eq.s32 	%p257, %r287, 999999999;
	@%p257 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3868
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1081, %r287, %r255;
	mul.wide.s32 	%rd186, %r1081, 4;
	add.s64 	%rd188, %rd46, %rd186;
	st.shared.u32 	[%rd188], %r265;
	setp.eq.s32 	%p258, %r288, 999999999;
	@%p258 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3934
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1082, %r288, %r255;
	mul.wide.s32 	%rd189, %r1082, 4;
	add.s64 	%rd191, %rd46, %rd189;
	st.shared.u32 	[%rd191], %r266;
	setp.eq.s32 	%p259, %r289, 999999999;
	@%p259 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4000
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1083, %r289, %r255;
	mul.wide.s32 	%rd192, %r1083, 4;
	add.s64 	%rd194, %rd46, %rd192;
	st.shared.u32 	[%rd194], %r267;
	setp.eq.s32 	%p260, %r290, 999999999;
	@%p260 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4066
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1084, %r290, %r255;
	mul.wide.s32 	%rd195, %r1084, 4;
	add.s64 	%rd197, %rd46, %rd195;
	st.shared.u32 	[%rd197], %r268;
	setp.eq.s32 	%p261, %r291, 999999999;
	@%p261 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4132
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1085, %r291, %r255;
	mul.wide.s32 	%rd198, %r1085, 4;
	add.s64 	%rd200, %rd46, %rd198;
	st.shared.u32 	[%rd200], %r269;
	setp.eq.s32 	%p262, %r292, 999999999;
	@%p262 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4198
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1086, %r292, %r255;
	mul.wide.s32 	%rd201, %r1086, 4;
	add.s64 	%rd203, %rd46, %rd201;
	st.shared.u32 	[%rd203], %r270;
	setp.eq.s32 	%p263, %r293, 999999999;
	@%p263 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4264
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1087, %r293, %r255;
	mul.wide.s32 	%rd204, %r1087, 4;
	add.s64 	%rd206, %rd46, %rd204;
	st.shared.u32 	[%rd206], %r271;
	setp.eq.s32 	%p264, %r294, 999999999;
	@%p264 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4330
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1088, %r294, %r255;
	mul.wide.s32 	%rd207, %r1088, 4;
	add.s64 	%rd209, %rd46, %rd207;
	st.shared.u32 	[%rd209], %r272;
	setp.eq.s32 	%p265, %r295, 999999999;
	@%p265 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4396
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1089, %r295, %r255;
	mul.wide.s32 	%rd210, %r1089, 4;
	add.s64 	%rd212, %rd46, %rd210;
	st.shared.u32 	[%rd212], %r273;
	setp.eq.s32 	%p266, %r296, 999999999;
	@%p266 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4462
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1090, %r296, %r255;
	mul.wide.s32 	%rd213, %r1090, 4;
	add.s64 	%rd215, %rd46, %rd213;
	st.shared.u32 	[%rd215], %r274;
	setp.eq.s32 	%p267, %r297, 999999999;
	@%p267 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4528
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1091, %r297, %r255;
	mul.wide.s32 	%rd216, %r1091, 4;
	add.s64 	%rd218, %rd46, %rd216;
	st.shared.u32 	[%rd218], %r275;
	setp.eq.s32 	%p268, %r298, 999999999;
	@%p268 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4594
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1092, %r298, %r255;
	mul.wide.s32 	%rd219, %r1092, 4;
	add.s64 	%rd221, %rd46, %rd219;
	st.shared.u32 	[%rd221], %r276;
	setp.eq.s32 	%p269, %r299, 999999999;
	@%p269 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4661
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1093, 0, %r277, %p270;
	add.s32 	%r1094, %r299, %r255;
	mul.wide.s32 	%rd222, %r1094, 4;
	add.s64 	%rd224, %rd46, %rd222;
	st.shared.u32 	[%rd224], %r1093;
	setp.eq.s32 	%p271, %r300, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4727
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1095, %r300, %r255;
	mul.wide.s32 	%rd225, %r1095, 4;
	add.s64 	%rd227, %rd46, %rd225;
	mov.u32 	%r3665, 0;
	st.shared.u32 	[%rd227], %r3665;
	setp.eq.s32 	%p272, %r301, 999999999;
	@%p272 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4792
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1098, %r301, %r255;
	mul.wide.s32 	%rd228, %r1098, 4;
	add.s64 	%rd230, %rd46, %rd228;
	st.shared.u32 	[%rd230], %r3665;
	bar.sync 	0;
	mov.u32 	%r3666, %r3665;
	mov.u32 	%r3667, %r3665;
	mov.u32 	%r3668, %r3665;
	mov.u32 	%r3669, %r3665;
	mov.u32 	%r3670, %r3665;
	mov.u32 	%r3671, %r3665;
	mov.u32 	%r3672, %r3665;
	mov.u32 	%r3673, %r3665;
	mov.u32 	%r3674, %r3665;
	mov.u32 	%r3675, %r3665;
	mov.u32 	%r3676, %r3665;
	mov.u32 	%r3677, %r3665;
	mov.u32 	%r3678, %r3665;
	mov.u32 	%r3679, %r3665;
	mov.u32 	%r3680, %r3665;
	mov.u32 	%r3681, %r3665;
	mov.u32 	%r3682, %r3665;
	mov.u32 	%r3683, %r3665;
	mov.u32 	%r3684, %r3665;
	mov.u32 	%r3685, %r3665;
	mov.u32 	%r3686, %r3665;
	mov.u32 	%r3687, %r3665;
	mov.u32 	%r3688, %r3665;
	@%p88 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4829
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs71, %r254;
	mul.hi.s16 	%rs72, %rs71, 10923;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 2;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 24;
	sub.s16 	%rs77, %rs71, %rs76;
	cvt.s32.s16 	%r1099, %rs77;
	mul.wide.s32 	%rd231, %r1099, 4;
	add.s64 	%rd232, %rd12, %rd231;
	ld.shared.u32 	%r3665, [%rd232];
	ld.shared.u32 	%r3666, [%rd12+4];
	ld.shared.u32 	%r3667, [%rd12+8];
	ld.shared.u32 	%r3668, [%rd12+12];
	ld.shared.u32 	%r3669, [%rd12+16];
	ld.shared.u32 	%r3670, [%rd12+20];
	ld.shared.u32 	%r3671, [%rd12+24];
	ld.shared.u32 	%r3672, [%rd12+28];
	ld.shared.u32 	%r3673, [%rd12+32];
	ld.shared.u32 	%r3674, [%rd12+36];
	ld.shared.u32 	%r3675, [%rd12+40];
	ld.shared.u32 	%r3676, [%rd12+44];
	ld.shared.u32 	%r3677, [%rd12+48];
	ld.shared.u32 	%r3678, [%rd12+52];
	ld.shared.u32 	%r3679, [%rd12+56];
	ld.shared.u32 	%r3680, [%rd12+60];
	add.s16 	%rs78, %rs71, 16;
	mul.hi.s16 	%rs79, %rs78, 10923;
	shr.u16 	%rs80, %rs79, 15;
	shr.s16 	%rs81, %rs79, 2;
	add.s16 	%rs82, %rs81, %rs80;
	mul.lo.s16 	%rs83, %rs82, 24;
	sub.s16 	%rs84, %rs78, %rs83;
	cvt.s32.s16 	%r1100, %rs84;
	mul.wide.s32 	%rd233, %r1100, 4;
	add.s64 	%rd234, %rd12, %rd233;
	ld.shared.u32 	%r3681, [%rd234];
	add.s16 	%rs85, %rs71, 17;
	mul.hi.s16 	%rs86, %rs85, 10923;
	shr.u16 	%rs87, %rs86, 15;
	shr.s16 	%rs88, %rs86, 2;
	add.s16 	%rs89, %rs88, %rs87;
	mul.lo.s16 	%rs90, %rs89, 24;
	sub.s16 	%rs91, %rs85, %rs90;
	cvt.s32.s16 	%r1101, %rs91;
	mul.wide.s32 	%rd235, %r1101, 4;
	add.s64 	%rd236, %rd12, %rd235;
	ld.shared.u32 	%r3682, [%rd236];
	add.s16 	%rs92, %rs71, 18;
	mul.hi.s16 	%rs93, %rs92, 10923;
	shr.u16 	%rs94, %rs93, 15;
	shr.s16 	%rs95, %rs93, 2;
	add.s16 	%rs96, %rs95, %rs94;
	mul.lo.s16 	%rs97, %rs96, 24;
	sub.s16 	%rs98, %rs92, %rs97;
	cvt.s32.s16 	%r1102, %rs98;
	mul.wide.s32 	%rd237, %r1102, 4;
	add.s64 	%rd238, %rd12, %rd237;
	ld.shared.u32 	%r3683, [%rd238];
	add.s16 	%rs99, %rs71, 19;
	mul.hi.s16 	%rs100, %rs99, 10923;
	shr.u16 	%rs101, %rs100, 15;
	shr.s16 	%rs102, %rs100, 2;
	add.s16 	%rs103, %rs102, %rs101;
	mul.lo.s16 	%rs104, %rs103, 24;
	sub.s16 	%rs105, %rs99, %rs104;
	cvt.s32.s16 	%r1103, %rs105;
	mul.wide.s32 	%rd239, %r1103, 4;
	add.s64 	%rd240, %rd12, %rd239;
	ld.shared.u32 	%r3684, [%rd240];
	add.s16 	%rs106, %rs71, 20;
	mul.hi.s16 	%rs107, %rs106, 10923;
	shr.u16 	%rs108, %rs107, 15;
	shr.s16 	%rs109, %rs107, 2;
	add.s16 	%rs110, %rs109, %rs108;
	mul.lo.s16 	%rs111, %rs110, 24;
	sub.s16 	%rs112, %rs106, %rs111;
	cvt.s32.s16 	%r1104, %rs112;
	mul.wide.s32 	%rd241, %r1104, 4;
	add.s64 	%rd242, %rd12, %rd241;
	ld.shared.u32 	%r3685, [%rd242];
	add.s16 	%rs113, %rs71, 21;
	mul.hi.s16 	%rs114, %rs113, 10923;
	shr.u16 	%rs115, %rs114, 15;
	shr.s16 	%rs116, %rs114, 2;
	add.s16 	%rs117, %rs116, %rs115;
	mul.lo.s16 	%rs118, %rs117, 24;
	sub.s16 	%rs119, %rs113, %rs118;
	cvt.s32.s16 	%r1105, %rs119;
	mul.wide.s32 	%rd243, %r1105, 4;
	add.s64 	%rd244, %rd12, %rd243;
	ld.shared.u32 	%r3686, [%rd244];
	add.s16 	%rs120, %rs71, 22;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	shr.s16 	%rs123, %rs121, 2;
	add.s16 	%rs124, %rs123, %rs122;
	mul.lo.s16 	%rs125, %rs124, 24;
	sub.s16 	%rs126, %rs120, %rs125;
	cvt.s32.s16 	%r1106, %rs126;
	mul.wide.s32 	%rd245, %r1106, 4;
	add.s64 	%rd246, %rd12, %rd245;
	ld.shared.u32 	%r3687, [%rd246];
	add.s16 	%rs127, %rs71, 23;
	mul.hi.s16 	%rs128, %rs127, 10923;
	shr.u16 	%rs129, %rs128, 15;
	shr.s16 	%rs130, %rs128, 2;
	add.s16 	%rs131, %rs130, %rs129;
	mul.lo.s16 	%rs132, %rs131, 24;
	sub.s16 	%rs133, %rs127, %rs132;
	cvt.s32.s16 	%r1107, %rs133;
	mul.wide.s32 	%rd247, %r1107, 4;
	add.s64 	%rd248, %rd12, %rd247;
	ld.shared.u32 	%r3688, [%rd248];
$L__BB0_175:                            // %L14073
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mov.u32 	%r3689, 12;
	bra.uni 	$L__BB0_176;
$L__BB0_183:                            // %L19821
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r3691, %r3691, 1;
	mov.u32 	%r3690, 0;
	mov.u32 	%r3692, %r3690;
	mov.u32 	%r3693, %r3690;
$L__BB0_184:                            // %L19822
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3689, %r3689, -4;
	setp.ne.s32 	%p292, %r3689, -12;
	@%p292 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_185;
$L__BB0_176:                            // %L14099
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3689, 12;
	selp.b32 	%r1646, %r3665, 0, %p275;
	setp.eq.s32 	%p276, %r3689, 8;
	selp.b32 	%r1647, %r3669, %r1646, %p276;
	setp.eq.s32 	%p277, %r3689, 4;
	selp.b32 	%r1648, %r3673, %r1647, %p277;
	setp.eq.s32 	%p278, %r3689, 0;
	selp.b32 	%r1649, %r3677, %r1648, %p278;
	setp.eq.s32 	%p279, %r3689, -4;
	selp.b32 	%r1650, %r3681, %r1649, %p279;
	setp.eq.s32 	%p280, %r3689, -8;
	selp.b32 	%r1651, %r3685, %r1650, %p280;
	selp.b32 	%r1652, %r3666, 0, %p275;
	selp.b32 	%r1653, %r3670, %r1652, %p276;
	selp.b32 	%r1654, %r3674, %r1653, %p277;
	selp.b32 	%r1655, %r3678, %r1654, %p278;
	selp.b32 	%r1656, %r3682, %r1655, %p279;
	selp.b32 	%r1657, %r3686, %r1656, %p280;
	selp.b32 	%r1658, %r3667, 0, %p275;
	selp.b32 	%r1659, %r3671, %r1658, %p276;
	selp.b32 	%r1660, %r3675, %r1659, %p277;
	selp.b32 	%r1661, %r3679, %r1660, %p278;
	selp.b32 	%r1662, %r3683, %r1661, %p279;
	selp.b32 	%r1663, %r3687, %r1662, %p280;
	selp.b32 	%r1664, %r3668, 0, %p275;
	selp.b32 	%r1665, %r3672, %r1664, %p276;
	selp.b32 	%r1666, %r3676, %r1665, %p277;
	selp.b32 	%r1667, %r3680, %r1666, %p278;
	selp.b32 	%r1668, %r3684, %r1667, %p279;
	selp.b32 	%r1669, %r3688, %r1668, %p280;
	mov.u16 	%rs171, 25600;
	// begin inline asm
	mov.b32 %r1114, {%rs171, %rs171};
	// end inline asm
	mov.u16 	%rs173, 21504;
	// begin inline asm
	mov.b32 %r1125, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1113, %r1651, -2004318072;
	mov.u32 	%r1250, 983055;
	// begin inline asm
	lop3.b32 %r1111, %r1250, %r1113, %r1114, 202;
	// end inline asm
	mov.u16 	%rs177, 18432;
	// begin inline asm
	mov.b32 %r1115, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1116, %r1114, %r1115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1119, %r1111, %r1116;
	// end inline asm
	mov.u32 	%r1261, 15728880;
	// begin inline asm
	lop3.b32 %r1122, %r1261, %r1113, %r1125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1126, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1127, %r1125, %r1126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1130, %r1122, %r1127;
	// end inline asm
	// begin inline asm
	mov.b32 %r1160, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1159, %r1657, -2004318072;
	// begin inline asm
	lop3.b32 %r1157, %r1250, %r1159, %r1160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1162, %r1160, %r1161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1165, %r1157, %r1162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1168, %r1261, %r1159, %r1171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1173, %r1171, %r1172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1176, %r1168, %r1173;
	// end inline asm
	// begin inline asm
	mov.b32 %r1206, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1205, %r1663, -2004318072;
	// begin inline asm
	lop3.b32 %r1203, %r1250, %r1205, %r1206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1208, %r1206, %r1207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1211, %r1203, %r1208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1214, %r1261, %r1205, %r1217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1219, %r1217, %r1218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1222, %r1214, %r1219;
	// end inline asm
	// begin inline asm
	mov.b32 %r1252, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1263, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1251, %r1669, -2004318072;
	// begin inline asm
	lop3.b32 %r1249, %r1250, %r1251, %r1252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1254, %r1252, %r1253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1257, %r1249, %r1254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1260, %r1261, %r1251, %r1263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1265, %r1263, %r1264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1268, %r1260, %r1265;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1119;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1293, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1130;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1296, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1165;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1176;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1302, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1211;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1305, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1308, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1257;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1311, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1314, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1645, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1380, %r1377}, {%r389, %r392}, {%r1293}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1389, %r1386}, {%r389, %r392}, {%r1296}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1398, %r1395}, {%r389, %r392}, {%r1299}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1407, %r1404}, {%r389, %r392}, {%r1302}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1416, %r1413}, {%r389, %r392}, {%r1305}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1425, %r1422}, {%r389, %r392}, {%r1308}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1434, %r1431}, {%r389, %r392}, {%r1311}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1443, %r1440}, {%r389, %r392}, {%r1314}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1373, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r1373, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r441, %r1380, %r1375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1382, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r1382, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r441, %r1389, %r1384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1391, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1393, %r1391, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1396, %r441, %r1398, %r1393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1400, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r1400, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r441, %r1407, %r1402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1409, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r1409, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r441, %r1416, %r1411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1418, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1420, %r1418, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r441, %r1425, %r1420;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1427, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1429, %r1427, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1432, %r441, %r1434, %r1429;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1436, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r1436, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r441, %r1443, %r1438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r444, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r441, %r1377, %r1445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r444, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r441, %r1386, %r1452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r444, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r441, %r1395, %r1459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r444, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r441, %r1404, %r1466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r444, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r441, %r1413, %r1473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r444, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r441, %r1422, %r1480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1487, %r444, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1490, %r441, %r1431, %r1487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1494, %r444, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1497, %r441, %r1440, %r1494;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1501, %r1502}, {%r485, %r491, %r488, %r494}, {%r1378, %r1448}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1511, %r1512}, {%r485, %r491, %r488, %r494}, {%r1387, %r1455}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1521, %r1522}, {%r485, %r491, %r488, %r494}, {%r1396, %r1462}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1531, %r1532}, {%r485, %r491, %r488, %r494}, {%r1405, %r1469}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1541, %r1542}, {%r485, %r491, %r488, %r494}, {%r1414, %r1476}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1551, %r1552}, {%r485, %r491, %r488, %r494}, {%r1423, %r1483}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1561, %r1562}, {%r485, %r491, %r488, %r494}, {%r1432, %r1490}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1571, %r1572}, {%r485, %r491, %r488, %r494}, {%r1441, %r1497}, {%r1645, %r1645};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3694, %r1645;
	mov.u32 	%r3695, %r1645;
	mov.u32 	%r3696, %r1645;
	mov.u32 	%r3697, %r1645;
	@%p274 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_177;
$L__BB0_250:                            // %oksrem6308
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3694, [%rd7];
	ld.shared.u32 	%r3695, [%rd8];
	ld.shared.u32 	%r3696, [%rd9+128];
	ld.shared.u32 	%r3697, [%rd10+128];
$L__BB0_177:                            // %L15720
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1705, %r1702}, {%r503, %r506}, {%r3694}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1714, %r1711}, {%r503, %r506}, {%r3695}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1723, %r1720}, {%r503, %r506}, {%r3696}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1732, %r1729}, {%r503, %r506}, {%r3697}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r555, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r555, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r555, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r555, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r558, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r555, %r1702, %r1734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r558, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r555, %r1711, %r1741;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r558, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r555, %r1720, %r1748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r558, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r555, %r1729, %r1755;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1806}, {%r599, %r605, %r602, %r608}, {%r1703, %r1737}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1825}, {%r599, %r605, %r602, %r608}, {%r1712, %r1744}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1814}, {%r599, %r605, %r602, %r608}, {%r1721, %r1751}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1833}, {%r599, %r605, %r602, %r608}, {%r1730, %r1758}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1803, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1814, %r1809;
	// end inline asm
	mov.u32 	%r1837, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1837, %r1813, %r3693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1822, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1833, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r1837, %r1832, %r3692;
	// end inline asm
	mov.u32 	%r3698, %r1645;
	mov.u32 	%r3699, %r1645;
	mov.u32 	%r3700, %r1645;
	mov.u32 	%r3701, %r1645;
	@%p274 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %oksrem6909
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3698, [%rd13];
	ld.shared.u32 	%r3699, [%rd14];
	ld.shared.u32 	%r3700, [%rd15];
	ld.shared.u32 	%r3701, [%rd16];
$L__BB0_178:                            // %L16927
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1876, %r1873}, {%r503, %r506}, {%r3698}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1885, %r1882}, {%r503, %r506}, {%r3699}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1894, %r1891}, {%r503, %r506}, {%r3700}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1903, %r1900}, {%r503, %r506}, {%r3701}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1869, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1869, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r555, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1878, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r1878, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r555, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1887, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r1887, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r555, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1896, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r1896, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r555, %r1903, %r1898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r558, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r555, %r1873, %r1905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r558, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r555, %r1882, %r1912;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r558, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r555, %r1891, %r1919;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r558, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r555, %r1900, %r1926;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1977}, {%r599, %r605, %r602, %r608}, {%r1874, %r1908}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1993, %r1996}, {%r599, %r605, %r602, %r608}, {%r1883, %r1915}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1985}, {%r599, %r605, %r602, %r608}, {%r1892, %r1922}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2000, %r2004}, {%r599, %r605, %r602, %r608}, {%r1901, %r1929}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1974, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r1837, %r1984, %r1817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r1993, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1996, %r1996, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r2000, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r2004, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r1837, %r2003, %r1836;
	// end inline asm
	mov.u32 	%r3702, %r1645;
	mov.u32 	%r3703, %r1645;
	mov.u32 	%r3704, %r1645;
	mov.u32 	%r3705, %r1645;
	@%p274 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %oksrem7510
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3702, [%rd17];
	ld.shared.u32 	%r3703, [%rd18];
	ld.shared.u32 	%r3704, [%rd19];
	ld.shared.u32 	%r3705, [%rd20];
$L__BB0_179:                            // %L18134
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2047, %r2044}, {%r503, %r506}, {%r3702}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2056, %r2053}, {%r503, %r506}, {%r3703}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2065, %r2062}, {%r503, %r506}, {%r3704}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2074, %r2071}, {%r503, %r506}, {%r3705}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2040, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r555, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2049, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2049, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r555, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2058, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r2058, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r555, %r2065, %r2060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2067, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r2067, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r555, %r2074, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r558, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r555, %r2044, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r558, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r555, %r2053, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r558, %r2065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r555, %r2062, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r558, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r555, %r2071, %r2097;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2145, %r2148}, {%r599, %r605, %r602, %r608}, {%r2045, %r2079}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2167}, {%r599, %r605, %r602, %r608}, {%r2054, %r2086}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2156}, {%r599, %r605, %r602, %r608}, {%r2063, %r2093}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2171, %r2175}, {%r599, %r605, %r602, %r608}, {%r2072, %r2100}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2145, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r2148, %r2148, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r2156, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r1837, %r2155, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2164, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r2167, %r2167, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r1837, %r2174, %r2007;
	// end inline asm
	mov.u32 	%r3706, %r1645;
	mov.u32 	%r3707, %r1645;
	mov.u32 	%r3708, %r1645;
	mov.u32 	%r3709, %r1645;
	@%p274 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %oksrem8111
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3706, [%rd21];
	ld.shared.u32 	%r3707, [%rd22];
	ld.shared.u32 	%r3708, [%rd23];
	ld.shared.u32 	%r3709, [%rd24];
$L__BB0_180:                            // %L19341
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2218, %r2215}, {%r503, %r506}, {%r3706}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2227, %r2224}, {%r503, %r506}, {%r3707}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2236, %r2233}, {%r503, %r506}, {%r3708}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2245, %r2242}, {%r503, %r506}, {%r3709}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r555, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r555, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2229, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r2229, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r555, %r2236, %r2231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2238, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r2238, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r555, %r2245, %r2240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r558, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r555, %r2215, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r558, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r555, %r2224, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r558, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r555, %r2233, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r558, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r555, %r2242, %r2268;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2316, %r2319}, {%r599, %r605, %r602, %r608}, {%r2216, %r2250}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2335, %r2338}, {%r599, %r605, %r602, %r608}, {%r2225, %r2257}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2327}, {%r599, %r605, %r602, %r608}, {%r2234, %r2264}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2342, %r2346}, {%r599, %r605, %r602, %r608}, {%r2243, %r2271}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r2316, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2318, %r2319, %r2319, %r2315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r2323, %r2323, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2326, %r2327, %r2327, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3693, %r1837, %r2326, %r2159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r2335, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2337, %r2338, %r2338, %r2334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r2342, %r2342, %r2337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2345, %r2346, %r2346, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3692, %r1837, %r2345, %r2178;
	// end inline asm
	add.s32 	%r3690, %r3690, 4;
	setp.ne.s32 	%p284, %r3690, 40;
	@%p284 bra 	$L__BB0_184;
// %bb.181:                             // %L19491
                                        //   in Loop: Header=BB0_176 Depth=2
	@%p88 bra 	$L__BB0_183;
// %bb.182:                             // %L19551
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2353, %r3691, 55296;
	add.s32 	%r2354, %r118, %r2353;
	cvt.s64.s32 	%rd249, %r2354;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 341606371735362067;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 23;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p286, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 452984832;
	setp.ne.s64 	%p287, %rd255, %rd250;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd256, -1, 0, %p288;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -452984832;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3693;
	add.s32 	%r2355, %r119, %r2353;
	cvt.s64.s32 	%rd262, %r2355;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 341606371735362067;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 23;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p289, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 452984832;
	setp.ne.s64 	%p290, %rd268, %rd263;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd269, -1, 0, %p291;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -452984832;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3692;
	bra.uni 	$L__BB0_183;
$L__BB0_185:                            // %L19847.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	mov.u32 	%r3714, 12;
	bra.uni 	$L__BB0_186;
$L__BB0_193:                            // %L25569
                                        //   in Loop: Header=BB0_186 Depth=2
	add.s32 	%r3691, %r3691, 1;
	mov.u32 	%r3690, 0;
	mov.u32 	%r3692, %r3690;
	mov.u32 	%r3693, %r3690;
$L__BB0_194:                            // %L25570
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	add.s32 	%r3714, %r3714, -4;
	setp.ne.s32 	%p311, %r3714, -12;
	@%p311 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_195;
$L__BB0_186:                            // %L19847
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p294, %r3714, 12;
	selp.b32 	%r2895, %r3665, 0, %p294;
	setp.eq.s32 	%p295, %r3714, 8;
	selp.b32 	%r2896, %r3669, %r2895, %p295;
	setp.eq.s32 	%p296, %r3714, 4;
	selp.b32 	%r2897, %r3673, %r2896, %p296;
	setp.eq.s32 	%p297, %r3714, 0;
	selp.b32 	%r2898, %r3677, %r2897, %p297;
	setp.eq.s32 	%p298, %r3714, -4;
	selp.b32 	%r2899, %r3681, %r2898, %p298;
	setp.eq.s32 	%p299, %r3714, -8;
	selp.b32 	%r2900, %r3685, %r2899, %p299;
	selp.b32 	%r2901, %r3666, 0, %p294;
	selp.b32 	%r2902, %r3670, %r2901, %p295;
	selp.b32 	%r2903, %r3674, %r2902, %p296;
	selp.b32 	%r2904, %r3678, %r2903, %p297;
	selp.b32 	%r2905, %r3682, %r2904, %p298;
	selp.b32 	%r2906, %r3686, %r2905, %p299;
	selp.b32 	%r2907, %r3667, 0, %p294;
	selp.b32 	%r2908, %r3671, %r2907, %p295;
	selp.b32 	%r2909, %r3675, %r2908, %p296;
	selp.b32 	%r2910, %r3679, %r2909, %p297;
	selp.b32 	%r2911, %r3683, %r2910, %p298;
	selp.b32 	%r2912, %r3687, %r2911, %p299;
	selp.b32 	%r2913, %r3668, 0, %p294;
	selp.b32 	%r2914, %r3672, %r2913, %p295;
	selp.b32 	%r2915, %r3676, %r2914, %p296;
	selp.b32 	%r2916, %r3680, %r2915, %p297;
	selp.b32 	%r2917, %r3684, %r2916, %p298;
	selp.b32 	%r2918, %r3688, %r2917, %p299;
	// begin inline asm
	mov.b32 %r2385, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2919, %r2900, 8;
	xor.b32  	%r2395, %r2919, 8947848;
	// begin inline asm
	lop3.b32 %r2382, %r1250, %r2395, %r2385, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2386, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2385, %r2386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2390, %r2382, %r2387;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2393, %r1261, %r2395, %r2396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2396, %r2397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2401, %r2393, %r2398;
	// end inline asm
	// begin inline asm
	mov.b32 %r2431, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2442, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2920, %r2906, 8;
	xor.b32  	%r2441, %r2920, 8947848;
	// begin inline asm
	lop3.b32 %r2428, %r1250, %r2441, %r2431, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2432, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2433, %r2431, %r2432;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2436, %r2428, %r2433;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2439, %r1261, %r2441, %r2442, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2443, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2444, %r2442, %r2443;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2447, %r2439, %r2444;
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2921, %r2912, 8;
	xor.b32  	%r2487, %r2921, 8947848;
	// begin inline asm
	lop3.b32 %r2474, %r1250, %r2487, %r2477, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2478, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2479, %r2477, %r2478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2482, %r2474, %r2479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2485, %r1261, %r2487, %r2488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2489, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2490, %r2488, %r2489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2493, %r2485, %r2490;
	// end inline asm
	// begin inline asm
	mov.b32 %r2523, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2534, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2922, %r2918, 8;
	xor.b32  	%r2533, %r2922, 8947848;
	// begin inline asm
	lop3.b32 %r2520, %r1250, %r2533, %r2523, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2524, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2525, %r2523, %r2524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2528, %r2520, %r2525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2531, %r1261, %r2533, %r2534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2535, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2536, %r2534, %r2535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2539, %r2531, %r2536;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2390;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2542, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2401;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2545, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2436;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2548, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2447;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2551, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2482;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2554, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2493;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2557, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2528;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2560, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2539;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2563, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2894, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2629, %r2626}, {%r389, %r392}, {%r2542}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2638, %r2635}, {%r389, %r392}, {%r2545}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2644}, {%r389, %r392}, {%r2548}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2656, %r2653}, {%r389, %r392}, {%r2551}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2665, %r2662}, {%r389, %r392}, {%r2554}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2674, %r2671}, {%r389, %r392}, {%r2557}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2683, %r2680}, {%r389, %r392}, {%r2560}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2692, %r2689}, {%r389, %r392}, {%r2563}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2627, %r441, %r2629, %r2624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r441, %r2638, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r441, %r2647, %r2642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r441, %r2656, %r2651;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r441, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r441, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r441, %r2683, %r2678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2690, %r441, %r2692, %r2687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r444, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r441, %r2626, %r2694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r444, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r441, %r2635, %r2701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r444, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r441, %r2644, %r2708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r444, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r441, %r2653, %r2715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r444, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r441, %r2662, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r444, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r441, %r2671, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r444, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r441, %r2680, %r2736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r444, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r441, %r2689, %r2743;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2750, %r2751}, {%r485, %r491, %r488, %r494}, {%r2627, %r2697}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2760, %r2761}, {%r485, %r491, %r488, %r494}, {%r2636, %r2704}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2770, %r2771}, {%r485, %r491, %r488, %r494}, {%r2645, %r2711}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2780, %r2781}, {%r485, %r491, %r488, %r494}, {%r2654, %r2718}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2790, %r2791}, {%r485, %r491, %r488, %r494}, {%r2663, %r2725}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2800, %r2801}, {%r485, %r491, %r488, %r494}, {%r2672, %r2732}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2810, %r2811}, {%r485, %r491, %r488, %r494}, {%r2681, %r2739}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2820, %r2821}, {%r485, %r491, %r488, %r494}, {%r2690, %r2746}, {%r2894, %r2894};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3719, %r2894;
	mov.u32 	%r3720, %r2894;
	mov.u32 	%r3721, %r2894;
	mov.u32 	%r3722, %r2894;
	@%p274 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_187;
$L__BB0_254:                            // %oksrem8906
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3722, [%rd7];
	ld.shared.u32 	%r3721, [%rd8];
	ld.shared.u32 	%r3720, [%rd9+128];
	ld.shared.u32 	%r3719, [%rd10+128];
$L__BB0_187:                            // %L21468
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r503, %r506}, {%r3722}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r503, %r506}, {%r3721}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2973}, {%r503, %r506}, {%r3720}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2985, %r2982}, {%r503, %r506}, {%r3719}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r555, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r555, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2969, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r2969, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r555, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2978, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r2978, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r555, %r2985, %r2980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r558, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r555, %r2955, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r558, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r555, %r2964, %r2994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r558, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r555, %r2973, %r3001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r558, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r555, %r2982, %r3008;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3056, %r3059}, {%r599, %r605, %r602, %r608}, {%r2956, %r2990}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3075, %r3078}, {%r599, %r605, %r602, %r608}, {%r2965, %r2997}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3063, %r3067}, {%r599, %r605, %r602, %r608}, {%r2974, %r3004}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3086}, {%r599, %r605, %r602, %r608}, {%r2983, %r3011}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r3056, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r3059, %r3059, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r3067, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3070, %r1837, %r3066, %r3693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3074, %r3075, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r3078, %r3078, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r1837, %r3085, %r3692;
	// end inline asm
	mov.u32 	%r3723, %r2894;
	mov.u32 	%r3724, %r2894;
	mov.u32 	%r3725, %r2894;
	mov.u32 	%r3726, %r2894;
	@%p274 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem9507
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3726, [%rd13];
	ld.shared.u32 	%r3725, [%rd14];
	ld.shared.u32 	%r3724, [%rd15];
	ld.shared.u32 	%r3723, [%rd16];
$L__BB0_188:                            // %L22675
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3129, %r3126}, {%r503, %r506}, {%r3726}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3138, %r3135}, {%r503, %r506}, {%r3725}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3147, %r3144}, {%r503, %r506}, {%r3724}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3156, %r3153}, {%r503, %r506}, {%r3723}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3122, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3122, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r555, %r3129, %r3124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3131, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r3131, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r555, %r3138, %r3133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3140, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r3140, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r555, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3149, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r3149, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r555, %r3156, %r3151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3158, %r558, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r555, %r3126, %r3158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r558, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r555, %r3135, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3172, %r558, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r555, %r3144, %r3172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r558, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r555, %r3153, %r3179;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3227, %r3230}, {%r599, %r605, %r602, %r608}, {%r3127, %r3161}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3246, %r3249}, {%r599, %r605, %r602, %r608}, {%r3136, %r3168}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3238}, {%r599, %r605, %r602, %r608}, {%r3145, %r3175}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3257}, {%r599, %r605, %r602, %r608}, {%r3154, %r3182}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r3227, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3230, %r3230, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3234, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r1837, %r3237, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r3246, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r3249, %r3249, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r3253, %r3253, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r1837, %r3256, %r3089;
	// end inline asm
	mov.u32 	%r3727, %r2894;
	mov.u32 	%r3728, %r2894;
	mov.u32 	%r3729, %r2894;
	mov.u32 	%r3730, %r2894;
	@%p274 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_189;
$L__BB0_256:                            // %oksrem10108
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3730, [%rd17];
	ld.shared.u32 	%r3729, [%rd18];
	ld.shared.u32 	%r3728, [%rd19];
	ld.shared.u32 	%r3727, [%rd20];
$L__BB0_189:                            // %L23882
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3300, %r3297}, {%r503, %r506}, {%r3730}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3309, %r3306}, {%r503, %r506}, {%r3729}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3318, %r3315}, {%r503, %r506}, {%r3728}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3327, %r3324}, {%r503, %r506}, {%r3727}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3293, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r3293, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r555, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3302, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r3302, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r555, %r3309, %r3304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3311, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3313, %r3311, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r555, %r3318, %r3313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3320, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r3320, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r555, %r3327, %r3322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r558, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r555, %r3297, %r3329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r558, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r555, %r3306, %r3336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3343, %r558, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r555, %r3315, %r3343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3350, %r558, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r555, %r3324, %r3350;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3398, %r3401}, {%r599, %r605, %r602, %r608}, {%r3298, %r3332}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3417, %r3420}, {%r599, %r605, %r602, %r608}, {%r3307, %r3339}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3405, %r3409}, {%r599, %r605, %r602, %r608}, {%r3316, %r3346}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3424, %r3428}, {%r599, %r605, %r602, %r608}, {%r3325, %r3353}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3397, %r3398, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r3401, %r3401, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r3405, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r3409, %r3409, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r1837, %r3408, %r3241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3416, %r3417, %r3417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r3420, %r3420, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r3424, %r3424, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r3428, %r3428, %r3423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r1837, %r3427, %r3260;
	// end inline asm
	mov.u32 	%r3731, %r2894;
	mov.u32 	%r3732, %r2894;
	mov.u32 	%r3733, %r2894;
	mov.u32 	%r3734, %r2894;
	@%p274 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_190;
$L__BB0_257:                            // %oksrem10709
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3734, [%rd21];
	ld.shared.u32 	%r3733, [%rd22];
	ld.shared.u32 	%r3732, [%rd23];
	ld.shared.u32 	%r3731, [%rd24];
$L__BB0_190:                            // %L25089
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3471, %r3468}, {%r503, %r506}, {%r3734}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3480, %r3477}, {%r503, %r506}, {%r3733}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3489, %r3486}, {%r503, %r506}, {%r3732}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3498, %r3495}, {%r503, %r506}, {%r3731}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3464, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3464, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r555, %r3471, %r3466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3473, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3473, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r555, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3482, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r3482, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r555, %r3489, %r3484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3491, %r558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r3491, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r555, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3500, %r558, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r555, %r3468, %r3500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3507, %r558, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r555, %r3477, %r3507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r558, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r555, %r3486, %r3514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3521, %r558, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r555, %r3495, %r3521;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3569, %r3572}, {%r599, %r605, %r602, %r608}, {%r3469, %r3503}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3588, %r3591}, {%r599, %r605, %r602, %r608}, {%r3478, %r3510}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3576, %r3580}, {%r599, %r605, %r602, %r608}, {%r3487, %r3517}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3595, %r3599}, {%r599, %r605, %r602, %r608}, {%r3496, %r3524}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r3569, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r3572, %r3572, %r3568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r3576, %r3576, %r3571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r3580, %r3580, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3693, %r1837, %r3579, %r3412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3587, %r3588, %r3588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r3591, %r3591, %r3587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r3595, %r3595, %r3590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r3599, %r3599, %r3594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3692, %r1837, %r3598, %r3431;
	// end inline asm
	add.s32 	%r3690, %r3690, 4;
	setp.ne.s32 	%p303, %r3690, 40;
	@%p303 bra 	$L__BB0_194;
// %bb.191:                             // %L25239
                                        //   in Loop: Header=BB0_186 Depth=2
	@%p88 bra 	$L__BB0_193;
// %bb.192:                             // %L25299
                                        //   in Loop: Header=BB0_186 Depth=2
	mul.lo.s32 	%r3606, %r3691, 55296;
	add.s32 	%r3607, %r118, %r3606;
	cvt.s64.s32 	%rd275, %r3607;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 341606371735362067;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 23;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p305, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 452984832;
	setp.ne.s64 	%p306, %rd281, %rd276;
	and.pred  	%p307, %p305, %p306;
	selp.s64 	%rd282, -1, 0, %p307;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -452984832;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3693;
	add.s32 	%r3608, %r119, %r3606;
	cvt.s64.s32 	%rd288, %r3608;
	add.s64 	%rd289, %rd288, %rd11;
	mul.hi.s64 	%rd290, %rd289, 341606371735362067;
	shr.u64 	%rd291, %rd290, 63;
	shr.s64 	%rd292, %rd290, 23;
	add.s64 	%rd293, %rd292, %rd291;
	setp.lt.s64 	%p308, %rd289, 0;
	mul.lo.s64 	%rd294, %rd293, 452984832;
	setp.ne.s64 	%p309, %rd294, %rd289;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd295, -1, 0, %p310;
	add.s64 	%rd296, %rd293, %rd295;
	mul.lo.s64 	%rd297, %rd296, -452984832;
	add.s64 	%rd298, %rd297, %rd289;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd300, %rd4, %rd299;
	st.global.u32 	[%rd300], %r3692;
	bra.uni 	$L__BB0_193;
$L__BB0_196:                            // %L25605
	mov.u32 	%r3610, 0;
	st.global.u32 	[%rd6], %r3610;
	ret;
$L__BB0_151:                            // %L7444
	mov.u32 	%r3634, 5;
	st.global.u32 	[%rd6], %r3634;
	mov.u64 	%rd347, exception2169;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7606
	mov.u32 	%r3633, 5;
	st.global.u32 	[%rd6], %r3633;
	mov.u64 	%rd345, exception2169;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7768
	mov.u32 	%r3632, 5;
	st.global.u32 	[%rd6], %r3632;
	mov.u64 	%rd343, exception2169;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7930
	mov.u32 	%r3631, 5;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd341, exception2169;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8092
	mov.u32 	%r3630, 5;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd339, exception2169;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8254
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd337, exception2169;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8416
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd335, exception2169;
	cvta.global.u64 	%rd336, %rd335;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd336;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8578
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd333, exception2169;
	cvta.global.u64 	%rd334, %rd333;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd334;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8740
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd331, exception2169;
	cvta.global.u64 	%rd332, %rd331;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd332;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8902
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd329, exception2169;
	cvta.global.u64 	%rd330, %rd329;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd330;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9064
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd327, exception2169;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9226
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd325, exception2169;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9388
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd323, exception2169;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9550
	mov.u32 	%r3621, 5;
	st.global.u32 	[%rd6], %r3621;
	mov.u64 	%rd321, exception2169;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9712
	mov.u32 	%r3620, 5;
	st.global.u32 	[%rd6], %r3620;
	mov.u64 	%rd319, exception2169;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9874
	mov.u32 	%r3619, 5;
	st.global.u32 	[%rd6], %r3619;
	mov.u64 	%rd317, exception2169;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10036
	mov.u32 	%r3618, 5;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd315, exception2169;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10198
	mov.u32 	%r3617, 5;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd313, exception2169;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10360
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd311, exception2169;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10522
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd309, exception2169;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10684
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd307, exception2169;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10872
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd305, exception2169;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11034
	mov.u32 	%r3612, 5;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd303, exception2169;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11196
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd301, exception2169;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r3636, 2;
	st.global.u32 	[%rd6], %r3636;
	mov.u64 	%rd351, exception2169;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L311
	mov.u32 	%r3635, 3;
	st.global.u32 	[%rd6], %r3635;
	mov.u64 	%rd349, exception2169;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1150
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r4, %r2};
	st.local.v2.u32 	[%rd5+8], {%r1, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r619, [retval0+0];
	} // callseq 61
	mov.u32 	%r621, 4;
	st.global.u32 	[%rd6], %r621;
	mov.u64 	%rd39, exception2169;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
