// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2816[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12827[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<277>;
	.reg .b16 	%rs<238>;
	.reg .b32 	%r<3721>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<278>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r315, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r315, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd31, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r311, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r316, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r317, %r316, %r2;
	add.s32 	%r318, %r317, %r4;
	mul.wide.u32 	%rd37, %r318, 4;
	add.s64 	%rd5, %rd31, %rd37;
	mov.u32 	%r319, 1;
	st.global.u32 	[%rd5], %r319;
	setp.lt.s32 	%p4, %r311, 0;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L115
	ld.param.u32 	%r312, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r312, %r311;
	setp.gt.s32 	%p6, %r312, 65536;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L125
	ld.param.u32 	%r313, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r312, %r311;
	mad.lo.s32 	%r320, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r321, %r320, %r320, 4;
	setp.gt.u32 	%p8, %r321, 89478484;
	setp.lt.s32 	%p9, %r313, 0;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L131
	ld.param.u32 	%r314, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r314, %r313;
	setp.lt.s32 	%p12, %r314, 16385;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_6;
$L__BB0_165:                            // %pass40
	sub.s32 	%r322, %r314, %r313;
	mul.hi.s32 	%r323, %r5, 1717986919;
	shr.u32 	%r324, %r323, 31;
	shr.s32 	%r325, %r323, 4;
	add.s32 	%r326, %r325, %r324;
	setp.ne.s32 	%p14, %r322, %r326;
	@%p14 bra 	$L__BB0_6;
// %bb.166:                             // %pass90
	and.b32  	%r220, %r2, 3;
	shr.u32 	%r221, %r2, 2;
	mul.lo.s32 	%r327, %r220, %r221;
	and.b32  	%r328, %r327, 7;
	cvt.rn.f32.s32 	%f201, %r328;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p15, %f785, 0f40000000;
	setp.gtu.f32 	%p276, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p15 bra 	$L__BB0_178;
// %bb.167:
	@%p276 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_168;
$L__BB0_174:
	mov.b32 	%r223, %f785;
	and.b32  	%r329, %r223, 8388607;
	or.b32  	%r3716, %r329, 1065353216;
	mov.b32 	%f780, %r3716;
	add.s32 	%r330, %r223, -1073741824;
	and.b32  	%r3717, %r330, -8388608;
	setp.eq.s32 	%p22, %r3717, 0;
	@%p22 bra 	$L__BB0_177;
// %bb.175:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_176:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3717, 192937984;
	add.s32 	%r332, %r3716, %r331;
	mov.b32 	%f213, %r332;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3717, %r3717, %r331;
	mov.b32 	%r3716, %f780;
	setp.ne.s32 	%p23, %r3717, 0;
	setp.ne.s32 	%p24, %r3716, 0;
	and.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_176;
$L__BB0_177:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p26, %r223, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p26;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_178;
$L__BB0_168:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r222, %f172;
	setp.lt.u32 	%p17, %r222, 1073741824;
	@%p17 bra 	$L__BB0_173;
// %bb.169:
	setp.lt.u32 	%p18, %r222, -2147483647;
	@%p18 bra 	$L__BB0_171;
// %bb.170:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p21, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p21;
	bra.uni 	$L__BB0_173;
$L__BB0_171:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p19, %f172, 0f40800000;
	@%p19 bra 	$L__BB0_173;
// %bb.172:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p20, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p20;
$L__BB0_173:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_178:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p27, %f222, 0f7F800000;
	mov.b32 	%r333, %f169;
	and.b32  	%r230, %r333, -2147483648;
	@%p27 bra 	$L__BB0_180;
// %bb.179:
	mov.b32 	%r334, %f781;
	or.b32  	%r335, %r230, %r334;
	mov.b32 	%f781, %r335;
$L__BB0_180:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r342, %f224;
	and.b32  	%r343, %r342, -2147483648;
	or.b32  	%r344, %r343, 1056964608;
	mov.b32 	%f225, %r344;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p28, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p28;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p29, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p29;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r233, %r2, 1;
	and.b32  	%r234, %r233, 6;
	or.b32  	%r235, %r234, 1;
	setp.eq.s32 	%p35, %r234, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3613, %r234, %r221;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p35 bra 	$L__BB0_22;
// %bb.7:                               // %L339
	cvt.u16.u32 	%rs1, %r3613;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p36, %f733, 0f40000000;
	@%p36 bra 	$L__BB0_19;
// %bb.8:
	setp.gtu.f32 	%p37, %f733, 0f4B800000;
	@%p37 bra 	$L__BB0_15;
	bra.uni 	$L__BB0_9;
$L__BB0_15:
	mov.b32 	%r7, %f733;
	and.b32  	%r351, %r7, 8388607;
	or.b32  	%r3617, %r351, 1065353216;
	mov.b32 	%f732, %r3617;
	add.s32 	%r352, %r7, -1073741824;
	and.b32  	%r3618, %r352, -8388608;
	setp.eq.s32 	%p43, %r3618, 0;
	@%p43 bra 	$L__BB0_18;
// %bb.16:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_17:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r3618, 192937984;
	add.s32 	%r354, %r3617, %r353;
	mov.b32 	%f267, %r354;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3618, %r3618, %r353;
	mov.b32 	%r3617, %f732;
	setp.ne.s32 	%p44, %r3618, 0;
	setp.ne.s32 	%p45, %r3617, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_17;
$L__BB0_18:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p47, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_19;
$L__BB0_9:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p38, %r6, 1073741824;
	@%p38 bra 	$L__BB0_14;
// %bb.10:
	setp.lt.u32 	%p39, %r6, -2147483647;
	@%p39 bra 	$L__BB0_12;
// %bb.11:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p42, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p42;
	bra.uni 	$L__BB0_14;
$L__BB0_12:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p40, %f4, 0f40800000;
	@%p40 bra 	$L__BB0_14;
// %bb.13:                              // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p41, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p41;
$L__BB0_14:                             // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_19:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p48, %f276, 0f7F800000;
	@%p48 bra 	$L__BB0_21;
// %bb.20:
	mov.b32 	%r355, %f1;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f733;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f733, %r358;
$L__BB0_21:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r359, %f277;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f278, %r361;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p49, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p49;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p50, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p50;
	cvt.rzi.s32.f32 	%r362, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p51, %r363, 1;
	selp.f32 	%f296, %f294, %f295, %p51;
	selp.f32 	%f297, %f295, %f294, %p51;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p52, %r364, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p52;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p53, %r366, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p53;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p54, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p54;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p55, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p55;
$L__BB0_22:                             // %L373
	cvt.rzi.s32.f32 	%r345, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p56, %r235, 5;
	mul.lo.s32 	%r3614, %r235, %r221;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p56 bra 	$L__BB0_38;
// %bb.23:                              // %L377
	mul.hi.u32 	%r368, %r3614, -1431655765;
	shr.u32 	%r369, %r368, 5;
	mul.lo.s32 	%r370, %r369, 48;
	sub.s32 	%r371, %r3614, %r370;
	cvt.rn.f32.s32 	%f308, %r371;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p57, %f739, 0f40000000;
	@%p57 bra 	$L__BB0_35;
// %bb.24:
	setp.gtu.f32 	%p58, %f739, 0f4B800000;
	@%p58 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_25;
$L__BB0_31:
	mov.b32 	%r15, %f739;
	and.b32  	%r372, %r15, 8388607;
	or.b32  	%r3619, %r372, 1065353216;
	mov.b32 	%f738, %r3619;
	add.s32 	%r373, %r15, -1073741824;
	and.b32  	%r3620, %r373, -8388608;
	setp.eq.s32 	%p64, %r3620, 0;
	@%p64 bra 	$L__BB0_34;
// %bb.32:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_33:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r3620, 192937984;
	add.s32 	%r375, %r3619, %r374;
	mov.b32 	%f320, %r375;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3620, %r3620, %r374;
	mov.b32 	%r3619, %f738;
	setp.ne.s32 	%p65, %r3620, 0;
	setp.ne.s32 	%p66, %r3619, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_33;
$L__BB0_34:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p68, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_35;
$L__BB0_25:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p59, %r14, 1073741824;
	@%p59 bra 	$L__BB0_30;
// %bb.26:
	setp.lt.u32 	%p60, %r14, -2147483647;
	@%p60 bra 	$L__BB0_28;
// %bb.27:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p63, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p63;
	bra.uni 	$L__BB0_30;
$L__BB0_28:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p61, %f25, 0f40800000;
	@%p61 bra 	$L__BB0_30;
// %bb.29:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p62, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p62;
$L__BB0_30:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_35:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p69, %f329, 0f7F800000;
	@%p69 bra 	$L__BB0_37;
// %bb.36:
	mov.b32 	%r376, %f22;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f739;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f739, %r379;
$L__BB0_37:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r380, %f330;
	and.b32  	%r381, %r380, -2147483648;
	or.b32  	%r382, %r381, 1056964608;
	mov.b32 	%f331, %r382;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p70, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p70;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p71, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p71;
	cvt.rzi.s32.f32 	%r383, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r384, %r383, 1;
	setp.eq.b32 	%p72, %r384, 1;
	selp.f32 	%f349, %f347, %f348, %p72;
	selp.f32 	%f350, %f348, %f347, %p72;
	and.b32  	%r385, %r383, 2;
	setp.eq.s32 	%p73, %r385, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p73;
	add.s32 	%r386, %r383, 1;
	and.b32  	%r387, %r386, 2;
	setp.eq.s32 	%p74, %r387, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p74;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p75, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p75;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p76, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p76;
$L__BB0_38:                             // %L411
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r346, %r345, 1;
	setp.gt.u32 	%p78, %r2, 23;
	or.pred  	%p1, %p35, %p78;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_54;
// %bb.39:                              // %L449
	cvt.u16.u32 	%rs8, %r3613;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p79, %f745, 0f40000000;
	@%p79 bra 	$L__BB0_51;
// %bb.40:
	setp.gtu.f32 	%p80, %f745, 0f4B800000;
	@%p80 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_41;
$L__BB0_47:
	mov.b32 	%r25, %f745;
	and.b32  	%r395, %r25, 8388607;
	or.b32  	%r3621, %r395, 1065353216;
	mov.b32 	%f744, %r3621;
	add.s32 	%r396, %r25, -1073741824;
	and.b32  	%r3622, %r396, -8388608;
	setp.eq.s32 	%p86, %r3622, 0;
	@%p86 bra 	$L__BB0_50;
// %bb.48:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_49:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r3622, 192937984;
	add.s32 	%r398, %r3621, %r397;
	mov.b32 	%f373, %r398;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3622, %r3622, %r397;
	mov.b32 	%r3621, %f744;
	setp.ne.s32 	%p87, %r3622, 0;
	setp.ne.s32 	%p88, %r3621, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_49;
$L__BB0_50:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p90, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_51;
$L__BB0_41:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p81, %r24, 1073741824;
	@%p81 bra 	$L__BB0_46;
// %bb.42:
	setp.lt.u32 	%p82, %r24, -2147483647;
	@%p82 bra 	$L__BB0_44;
// %bb.43:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p85, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p85;
	bra.uni 	$L__BB0_46;
$L__BB0_44:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p83, %f46, 0f40800000;
	@%p83 bra 	$L__BB0_46;
// %bb.45:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p84, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p84;
$L__BB0_46:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_51:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p91, %f382, 0f7F800000;
	@%p91 bra 	$L__BB0_53;
// %bb.52:
	mov.b32 	%r399, %f43;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r401, %f745;
	or.b32  	%r402, %r400, %r401;
	mov.b32 	%f745, %r402;
$L__BB0_53:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r403, %f383;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f384, %r405;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p92, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p92;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p93, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p93;
	cvt.rzi.s32.f32 	%r406, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p94, %r407, 1;
	selp.f32 	%f402, %f400, %f401, %p94;
	selp.f32 	%f403, %f401, %f400, %p94;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p95, %r408, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p95;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p96, %r410, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p96;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p97, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p97;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p98, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p98;
$L__BB0_54:                             // %L483
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p30, %r346, 1;
	or.pred  	%p2, %p56, %p78;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_70;
// %bb.55:                              // %L491
	mul.hi.u32 	%r412, %r3614, -1431655765;
	shr.u32 	%r413, %r412, 2;
	mul.lo.s32 	%r414, %r413, 6;
	sub.s32 	%r415, %r3614, %r414;
	cvt.rn.f32.s32 	%f414, %r415;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p101, %f751, 0f40000000;
	@%p101 bra 	$L__BB0_67;
// %bb.56:
	setp.gtu.f32 	%p102, %f751, 0f4B800000;
	@%p102 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r33, %f751;
	and.b32  	%r416, %r33, 8388607;
	or.b32  	%r3623, %r416, 1065353216;
	mov.b32 	%f750, %r3623;
	add.s32 	%r417, %r33, -1073741824;
	and.b32  	%r3624, %r417, -8388608;
	setp.eq.s32 	%p108, %r3624, 0;
	@%p108 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3624, 192937984;
	add.s32 	%r419, %r3623, %r418;
	mov.b32 	%f426, %r419;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3624, %r3624, %r418;
	mov.b32 	%r3623, %f750;
	setp.ne.s32 	%p109, %r3624, 0;
	setp.ne.s32 	%p110, %r3623, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p112, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p103, %r32, 1073741824;
	@%p103 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p104, %r32, -2147483647;
	@%p104 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p107, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p107;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p105, %f67, 0f40800000;
	@%p105 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p106, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p106;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p113, %f435, 0f7F800000;
	@%p113 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r420, %f64;
	and.b32  	%r421, %r420, -2147483648;
	mov.b32 	%r422, %f751;
	or.b32  	%r423, %r421, %r422;
	mov.b32 	%f751, %r423;
$L__BB0_69:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r424, %f436;
	and.b32  	%r425, %r424, -2147483648;
	or.b32  	%r426, %r425, 1056964608;
	mov.b32 	%f437, %r426;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p114, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p114;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p115, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p115;
	cvt.rzi.s32.f32 	%r427, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r428, %r427, 1;
	setp.eq.b32 	%p116, %r428, 1;
	selp.f32 	%f455, %f453, %f454, %p116;
	selp.f32 	%f456, %f454, %f453, %p116;
	and.b32  	%r429, %r427, 2;
	setp.eq.s32 	%p117, %r429, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p117;
	add.s32 	%r430, %r427, 1;
	and.b32  	%r431, %r430, 2;
	setp.eq.s32 	%p118, %r431, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p118;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p119, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p119;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p120, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p120;
$L__BB0_70:                             // %L525
	selp.f32 	%f243, %f241, %f242, %p30;
	and.b32  	%r347, %r345, 2;
	@%p15 bra 	$L__BB0_188;
// %bb.71:
	@%p276 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_72;
$L__BB0_184:
	mov.b32 	%r237, %f785;
	and.b32  	%r444, %r237, 8388607;
	or.b32  	%r3718, %r444, 1065353216;
	mov.b32 	%f784, %r3718;
	add.s32 	%r445, %r237, -1073741824;
	and.b32  	%r3719, %r445, -8388608;
	setp.eq.s32 	%p128, %r3719, 0;
	@%p128 bra 	$L__BB0_187;
// %bb.185:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_186:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r3719, 192937984;
	add.s32 	%r447, %r3718, %r446;
	mov.b32 	%f476, %r447;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3719, %r3719, %r446;
	mov.b32 	%r3718, %f784;
	setp.ne.s32 	%p129, %r3719, 0;
	setp.ne.s32 	%p130, %r3718, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_186;
$L__BB0_187:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p132, %r237, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_188;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r236, %f187;
	setp.lt.u32 	%p123, %r236, 1073741824;
	@%p123 bra 	$L__BB0_183;
// %bb.73:
	setp.lt.u32 	%p124, %r236, -2147483647;
	@%p124 bra 	$L__BB0_181;
// %bb.74:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p127, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p127;
	bra.uni 	$L__BB0_183;
$L__BB0_181:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p125, %f187, 0f40800000;
	@%p125 bra 	$L__BB0_183;
// %bb.182:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p126, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p126;
$L__BB0_183:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_188:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p31, %r347, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r348, %r345, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p133, %f485, 0f7F800000;
	@%p133 bra 	$L__BB0_190;
// %bb.189:
	mov.b32 	%r448, %f785;
	or.b32  	%r449, %r230, %r448;
	mov.b32 	%f785, %r449;
$L__BB0_190:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p30;
	selp.f32 	%f246, %f243, %f245, %p31;
	and.b32  	%r349, %r348, 2;
	setp.eq.f32 	%p33, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r456, %f487;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f488, %r458;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p135, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p135;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p136, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p136;
	cvt.rzi.s32.f32 	%r459, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p137, %r460, 1;
	selp.f32 	%f506, %f504, %f505, %p137;
	selp.f32 	%f507, %f505, %f504, %p137;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p138, %r461, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p138;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p140, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p35 bra 	$L__BB0_90;
// %bb.75:                              // %L627
	cvt.u16.u32 	%rs15, %r3613;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p142, %f757, 0f40000000;
	@%p142 bra 	$L__BB0_87;
// %bb.76:
	setp.gtu.f32 	%p143, %f757, 0f4B800000;
	@%p143 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r45, %f757;
	and.b32  	%r465, %r45, 8388607;
	or.b32  	%r3625, %r465, 1065353216;
	mov.b32 	%f756, %r3625;
	add.s32 	%r466, %r45, -1073741824;
	and.b32  	%r3626, %r466, -8388608;
	setp.eq.s32 	%p149, %r3626, 0;
	@%p149 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r467, %r3626, 192937984;
	add.s32 	%r468, %r3625, %r467;
	mov.b32 	%f530, %r468;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3626, %r3626, %r467;
	mov.b32 	%r3625, %f756;
	setp.ne.s32 	%p150, %r3626, 0;
	setp.ne.s32 	%p151, %r3625, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p153, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p144, %r44, 1073741824;
	@%p144 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p145, %r44, -2147483647;
	@%p145 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p148;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p147;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p154, %f539, 0f7F800000;
	@%p154 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r469, %f85;
	and.b32  	%r470, %r469, -2147483648;
	mov.b32 	%r471, %f757;
	or.b32  	%r472, %r470, %r471;
	mov.b32 	%f757, %r472;
$L__BB0_89:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r473, %f540;
	and.b32  	%r474, %r473, -2147483648;
	or.b32  	%r475, %r474, 1056964608;
	mov.b32 	%f541, %r475;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p155, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p155;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p156, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p156;
	cvt.rzi.s32.f32 	%r476, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r477, %r476, 1;
	setp.eq.b32 	%p157, %r477, 1;
	selp.f32 	%f559, %f557, %f558, %p157;
	selp.f32 	%f560, %f558, %f557, %p157;
	and.b32  	%r478, %r476, 2;
	setp.eq.s32 	%p158, %r478, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p158;
	add.s32 	%r479, %r476, 1;
	and.b32  	%r480, %r479, 2;
	setp.eq.s32 	%p159, %r480, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p159;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p160, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p160;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p161, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p161;
$L__BB0_90:                             // %L661
	setp.eq.s32 	%p32, %r349, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p33;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p139, %r463, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p140;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p56 bra 	$L__BB0_106;
// %bb.91:                              // %L665
	mul.hi.u32 	%r482, %r3614, -1431655765;
	shr.u32 	%r483, %r482, 5;
	mul.lo.s32 	%r484, %r483, 48;
	sub.s32 	%r485, %r3614, %r484;
	cvt.rn.f32.s32 	%f571, %r485;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p163, %f763, 0f40000000;
	@%p163 bra 	$L__BB0_103;
// %bb.92:
	setp.gtu.f32 	%p164, %f763, 0f4B800000;
	@%p164 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r53, %f763;
	and.b32  	%r486, %r53, 8388607;
	or.b32  	%r3627, %r486, 1065353216;
	mov.b32 	%f762, %r3627;
	add.s32 	%r487, %r53, -1073741824;
	and.b32  	%r3628, %r487, -8388608;
	setp.eq.s32 	%p170, %r3628, 0;
	@%p170 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r488, %r3628, 192937984;
	add.s32 	%r489, %r3627, %r488;
	mov.b32 	%f583, %r489;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3628, %r3628, %r488;
	mov.b32 	%r3627, %f762;
	setp.ne.s32 	%p171, %r3628, 0;
	setp.ne.s32 	%p172, %r3627, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p174, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p165, %r52, 1073741824;
	@%p165 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p166, %r52, -2147483647;
	@%p166 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p169, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p169;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p167, %f109, 0f40800000;
	@%p167 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p168, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p168;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p175, %f592, 0f7F800000;
	@%p175 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r490, %f106;
	and.b32  	%r491, %r490, -2147483648;
	mov.b32 	%r492, %f763;
	or.b32  	%r493, %r491, %r492;
	mov.b32 	%f763, %r493;
$L__BB0_105:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r494, %f593;
	and.b32  	%r495, %r494, -2147483648;
	or.b32  	%r496, %r495, 1056964608;
	mov.b32 	%f594, %r496;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p176, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p176;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p177, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p177;
	cvt.rzi.s32.f32 	%r497, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r498, %r497, 1;
	setp.eq.b32 	%p178, %r498, 1;
	selp.f32 	%f612, %f610, %f611, %p178;
	selp.f32 	%f613, %f611, %f610, %p178;
	and.b32  	%r499, %r497, 2;
	setp.eq.s32 	%p179, %r499, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p179;
	add.s32 	%r500, %r497, 1;
	and.b32  	%r501, %r500, 2;
	setp.eq.s32 	%p180, %r501, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p180;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p181, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p181;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p182, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p182;
$L__BB0_106:                            // %L699
	selp.f32 	%f248, %f244, %f247, %p32;
	setp.gt.f32 	%p34, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p139;
	setp.gt.f32 	%p141, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_122;
// %bb.107:                             // %L737
	cvt.u16.u32 	%rs22, %r3613;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p183, %f769, 0f40000000;
	@%p183 bra 	$L__BB0_119;
// %bb.108:
	setp.gtu.f32 	%p184, %f769, 0f4B800000;
	@%p184 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_109;
$L__BB0_115:
	mov.b32 	%r63, %f769;
	and.b32  	%r509, %r63, 8388607;
	or.b32  	%r3629, %r509, 1065353216;
	mov.b32 	%f768, %r3629;
	add.s32 	%r510, %r63, -1073741824;
	and.b32  	%r3630, %r510, -8388608;
	setp.eq.s32 	%p190, %r3630, 0;
	@%p190 bra 	$L__BB0_118;
// %bb.116:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_117:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r511, %r3630, 192937984;
	add.s32 	%r512, %r3629, %r511;
	mov.b32 	%f636, %r512;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3630, %r3630, %r511;
	mov.b32 	%r3629, %f768;
	setp.ne.s32 	%p191, %r3630, 0;
	setp.ne.s32 	%p192, %r3629, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_117;
$L__BB0_118:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p194, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_119;
$L__BB0_109:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p185, %r62, 1073741824;
	@%p185 bra 	$L__BB0_114;
// %bb.110:
	setp.lt.u32 	%p186, %r62, -2147483647;
	@%p186 bra 	$L__BB0_112;
// %bb.111:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p189, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p189;
	bra.uni 	$L__BB0_114;
$L__BB0_112:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p187, %f130, 0f40800000;
	@%p187 bra 	$L__BB0_114;
// %bb.113:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p188, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p188;
$L__BB0_114:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_119:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p195, %f645, 0f7F800000;
	@%p195 bra 	$L__BB0_121;
// %bb.120:
	mov.b32 	%r513, %f127;
	and.b32  	%r514, %r513, -2147483648;
	mov.b32 	%r515, %f769;
	or.b32  	%r516, %r514, %r515;
	mov.b32 	%f769, %r516;
$L__BB0_121:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r517, %f646;
	and.b32  	%r518, %r517, -2147483648;
	or.b32  	%r519, %r518, 1056964608;
	mov.b32 	%f647, %r519;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p196, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p196;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p197, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p197;
	cvt.rzi.s32.f32 	%r520, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r521, %r520, 1;
	setp.eq.b32 	%p198, %r521, 1;
	selp.f32 	%f665, %f663, %f664, %p198;
	selp.f32 	%f666, %f664, %f663, %p198;
	and.b32  	%r522, %r520, 2;
	setp.eq.s32 	%p199, %r522, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p199;
	add.s32 	%r523, %r520, 1;
	and.b32  	%r524, %r523, 2;
	setp.eq.s32 	%p200, %r524, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p200;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p201, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p201;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p202, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p202;
$L__BB0_122:                            // %L771
	selp.f32 	%f254, %f253, %f248, %p34;
	selp.f32 	%f517, %f516, %f511, %p141;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_138;
// %bb.123:                             // %L779
	mul.hi.u32 	%r526, %r3614, -1431655765;
	shr.u32 	%r527, %r526, 2;
	mul.lo.s32 	%r528, %r527, 6;
	sub.s32 	%r529, %r3614, %r528;
	cvt.rn.f32.s32 	%f677, %r529;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p203, %f775, 0f40000000;
	@%p203 bra 	$L__BB0_135;
// %bb.124:
	setp.gtu.f32 	%p204, %f775, 0f4B800000;
	@%p204 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_125;
$L__BB0_131:
	mov.b32 	%r71, %f775;
	and.b32  	%r530, %r71, 8388607;
	or.b32  	%r3631, %r530, 1065353216;
	mov.b32 	%f774, %r3631;
	add.s32 	%r531, %r71, -1073741824;
	and.b32  	%r3632, %r531, -8388608;
	setp.eq.s32 	%p210, %r3632, 0;
	@%p210 bra 	$L__BB0_134;
// %bb.132:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_133:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r532, %r3632, 192937984;
	add.s32 	%r533, %r3631, %r532;
	mov.b32 	%f689, %r533;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3632, %r3632, %r532;
	mov.b32 	%r3631, %f774;
	setp.ne.s32 	%p211, %r3632, 0;
	setp.ne.s32 	%p212, %r3631, 0;
	and.pred  	%p213, %p211, %p212;
	@%p213 bra 	$L__BB0_133;
$L__BB0_134:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p214, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p214;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_135;
$L__BB0_125:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p205, %r70, 1073741824;
	@%p205 bra 	$L__BB0_130;
// %bb.126:
	setp.lt.u32 	%p206, %r70, -2147483647;
	@%p206 bra 	$L__BB0_128;
// %bb.127:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p209, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p209;
	bra.uni 	$L__BB0_130;
$L__BB0_128:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p207, %f151, 0f40800000;
	@%p207 bra 	$L__BB0_130;
// %bb.129:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p208, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p208;
$L__BB0_130:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_135:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p215, %f698, 0f7F800000;
	@%p215 bra 	$L__BB0_137;
// %bb.136:
	mov.b32 	%r534, %f148;
	and.b32  	%r535, %r534, -2147483648;
	mov.b32 	%r536, %f775;
	or.b32  	%r537, %r535, %r536;
	mov.b32 	%f775, %r537;
$L__BB0_137:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r538, %f699;
	and.b32  	%r539, %r538, -2147483648;
	or.b32  	%r540, %r539, 1056964608;
	mov.b32 	%f700, %r540;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p216, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p216;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p217, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p217;
	cvt.rzi.s32.f32 	%r541, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r542, %r541, 1;
	setp.eq.b32 	%p218, %r542, 1;
	selp.f32 	%f718, %f716, %f717, %p218;
	selp.f32 	%f719, %f717, %f716, %p218;
	and.b32  	%r543, %r541, 2;
	setp.eq.s32 	%p219, %r543, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p219;
	add.s32 	%r544, %r541, 1;
	and.b32  	%r545, %r544, 2;
	setp.eq.s32 	%p220, %r545, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p220;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p221, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p221;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p222, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p222;
$L__BB0_138:                            // %L813
	mov.b32 	%r338, %f254;
	mov.b32 	%r341, %f251;
	mov.b32 	%r433, %f747;
	mov.b32 	%r434, %f753;
	mov.b32 	%r439, %f748;
	mov.b32 	%r440, %f754;
	mov.b32 	%r452, %f517;
	mov.b32 	%r455, %f514;
	mov.b32 	%r547, %f771;
	mov.b32 	%r548, %f777;
	mov.b32 	%r553, %f772;
	mov.b32 	%r554, %f778;
	mov.u32 	%r3720, 999999999;
	cvt.u16.u32 	%rs236, %r2;
	@%p78 bra 	$L__BB0_140;
// %bb.139:                             // %L849
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	and.b16  	%rs30, %rs236, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs236, %rs33;
	cvt.u32.u16 	%r559, %rs34;
	and.b32  	%r560, %r559, 255;
	mad.lo.s32 	%r561, %r560, 24, %r3;
	cvt.u16.u32 	%rs35, %r561;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r562, %rs39;
	mul.wide.u32 	%rd38, %r562, 4;
	add.s64 	%rd39, %rd1, %rd38;
	ld.global.u32 	%r563, [%rd39];
	cvt.s32.s16 	%r564, %r563;
	shr.s32 	%r565, %r563, 16;
	mul.lo.s32 	%r566, %r565, 801;
	mad.lo.s32 	%r3720, %r564, 33, %r566;
$L__BB0_140:                            // %pass386
	xor.b32  	%r337, %r341, -2147483648;
	mov.b32 	%r389, %f735;
	mov.b32 	%r390, %f741;
	mov.b32 	%r392, %f736;
	mov.b32 	%r393, %f742;
	xor.b32  	%r436, %r439, -2147483648;
	xor.b32  	%r437, %r440, -2147483648;
	xor.b32  	%r451, %r455, -2147483648;
	mov.b32 	%r503, %f759;
	mov.b32 	%r504, %f765;
	mov.b32 	%r506, %f760;
	mov.b32 	%r507, %f766;
	xor.b32  	%r550, %r553, -2147483648;
	xor.b32  	%r551, %r554, -2147483648;
	and.b32  	%r567, %r2, 24;
	setp.ne.s32 	%p224, %r567, 24;
	cvt.u16.u32 	%rs237, %r221;
	mul.lo.s32 	%r3633, %r1, 1152;
	@%p224 bra 	$L__BB0_141;
// %bb.191:                             // %pass386.L1186_crit_edge
	mul.lo.s16 	%rs47, %rs237, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs237, %rs49;
	cvt.u32.u16 	%r579, %rs50;
	and.b32  	%r3634, %r579, 255;
	mov.u32 	%r3635, 0;
	mov.u32 	%r3636, %r3635;
	bra.uni 	$L__BB0_142;
$L__BB0_141:                            // %pass423
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mul.lo.s32 	%r568, %r220, 144;
	mul.lo.s16 	%rs41, %rs237, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs237, %rs43;
	cvt.u32.u16 	%r569, %rs44;
	and.b32  	%r3634, %r569, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r570, %rs45, 24;
	or.b32  	%r571, %r3633, %r3;
	add.s32 	%r572, %r571, %r568;
	add.s32 	%r573, %r572, %r570;
	mul.wide.u32 	%rd40, %r573, 4;
	add.s64 	%rd41, %rd2, %rd40;
	ld.global.u32 	%r3635, [%rd41];
	or.b32  	%r574, %r3, 576;
	add.s32 	%r575, %r574, %r3633;
	add.s32 	%r576, %r575, %r568;
	add.s32 	%r577, %r576, %r570;
	mul.wide.u32 	%rd42, %r577, 4;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r3636, [%rd43];
$L__BB0_142:                            // %L1186
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r450, %r452, %r451;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r453, %r455, %r452;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r502, %r504, %r503;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r505, %r507, %r506;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r546, %r548, %r547;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r549, %r551, %r550;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r552, %r554, %r553;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r548, %r547;
	// end inline asm
	mov.u32 	%r3637, 0;
	shl.b32 	%r581, %r2, 2;
	and.b32  	%r582, %r581, 60;
	shl.b32 	%r583, %r1, 8;
	shl.b32 	%r584, %r2, 3;
	and.b32  	%r585, %r584, 128;
	or.b32  	%r586, %r582, %r583;
	or.b32  	%r87, %r586, %r585;
	or.b32  	%r587, %r583, %r581;
	or.b32  	%r588, %r587, %r585;
	or.b32  	%r88, %r588, 64;
	add.s32 	%r89, %r3, 24;
	and.b32  	%r589, %r233, 30;
	shr.u32 	%r590, %r2, 4;
	or.b32  	%r591, %r589, %r590;
	mul.lo.s32 	%r90, %r591, 257;
	or.b32  	%r592, %r590, %r233;
	or.b32  	%r593, %r592, 32;
	mul.lo.s32 	%r91, %r593, 257;
	and.b16  	%rs52, %rs236, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs236, %rs55;
	cvt.u32.u16 	%r594, %rs56;
	and.b32  	%r92, %r594, 255;
	and.b32  	%r595, %r4, 224;
	shr.u32 	%r596, %r3, 3;
	mad.lo.s32 	%r93, %r596, 257, %r595;
	shr.u32 	%r597, %r89, 3;
	mad.lo.s32 	%r94, %r597, 257, %r595;
	add.s32 	%r598, %r3, 48;
	shr.u32 	%r599, %r598, 3;
	mad.lo.s32 	%r95, %r599, 257, %r595;
	add.s32 	%r600, %r3, 72;
	shr.u32 	%r601, %r600, 3;
	mad.lo.s32 	%r96, %r601, 257, %r595;
	or.b32  	%r602, %r596, 12;
	mad.lo.s32 	%r97, %r602, 257, %r595;
	add.s32 	%r603, %r3, 120;
	shr.u32 	%r604, %r603, 3;
	mad.lo.s32 	%r98, %r604, 257, %r595;
	add.s32 	%r605, %r3, 144;
	shr.u32 	%r606, %r605, 3;
	mad.lo.s32 	%r99, %r606, 257, %r595;
	add.s32 	%r607, %r3, 168;
	shr.u32 	%r608, %r607, 3;
	mad.lo.s32 	%r100, %r608, 257, %r595;
	or.b32  	%r609, %r596, 24;
	mad.lo.s32 	%r101, %r609, 257, %r595;
	add.s32 	%r610, %r3, 216;
	shr.u32 	%r611, %r610, 3;
	mad.lo.s32 	%r102, %r611, 257, %r595;
	add.s32 	%r612, %r3, 240;
	shr.u32 	%r613, %r612, 3;
	mad.lo.s32 	%r103, %r613, 257, %r595;
	add.s32 	%r614, %r3, 264;
	shr.u32 	%r615, %r614, 3;
	mad.lo.s32 	%r104, %r615, 257, %r595;
	or.b32  	%r616, %r596, 36;
	mad.lo.s32 	%r105, %r616, 257, %r595;
	add.s32 	%r617, %r3, 312;
	shr.u32 	%r618, %r617, 3;
	mad.lo.s32 	%r106, %r618, 257, %r595;
	add.s32 	%r619, %r3, 336;
	shr.u32 	%r620, %r619, 3;
	mad.lo.s32 	%r107, %r620, 257, %r595;
	add.s32 	%r621, %r3, 360;
	shr.u32 	%r622, %r621, 3;
	mad.lo.s32 	%r108, %r622, 257, %r595;
	or.b32  	%r623, %r596, 48;
	mad.lo.s32 	%r109, %r623, 257, %r595;
	add.s32 	%r624, %r3, 408;
	shr.u32 	%r625, %r624, 3;
	mad.lo.s32 	%r110, %r625, 257, %r595;
	add.s32 	%r626, %r3, 432;
	shr.u32 	%r627, %r626, 3;
	mad.lo.s32 	%r111, %r627, 257, %r595;
	add.s32 	%r628, %r3, 456;
	shr.u32 	%r629, %r628, 3;
	mad.lo.s32 	%r112, %r629, 257, %r595;
	or.b32  	%r630, %r596, 60;
	mad.lo.s32 	%r113, %r630, 257, %r595;
	add.s32 	%r631, %r3, 504;
	bfe.u32 	%r632, %r631, 3, 6;
	mad.lo.s32 	%r114, %r632, 257, %r595;
	mul.lo.s32 	%r633, %r3, 33;
	mad.lo.s32 	%r634, %r220, 4806, %r633;
	mad.lo.s32 	%r635, %r3634, 801, %r634;
	bfe.s32 	%r636, %r2, 3, 1;
	and.b32  	%r637, %r636, 514;
	and.b32  	%r638, %r2, 1;
	neg.s32 	%r639, %r638;
	and.b32  	%r640, %r639, 4112;
	bfe.s32 	%r641, %r2, 1, 1;
	and.b32  	%r642, %r641, 2056;
	mul.lo.s32 	%r643, %r590, 257;
	bfe.s32 	%r644, %r2, 2, 1;
	and.b32  	%r645, %r2, 4;
	setp.eq.s32 	%p225, %r645, 0;
	and.b32  	%r646, %r644, 1028;
	or.b32  	%r647, %r637, %r640;
	add.s32 	%r648, %r643, %r3;
	add.s32 	%r649, %r648, %r642;
	add.s32 	%r650, %r649, %r646;
	add.s32 	%r651, %r650, %r647;
	mul.wide.u32 	%rd44, %r651, 4;
	mov.u64 	%rd45, shmem;
	add.s64 	%rd6, %rd45, %rd44;
	add.s32 	%r652, %r642, %r3;
	add.s32 	%r653, %r652, %r647;
	or.b32  	%r654, %r653, 8256;
	add.s32 	%r655, %r646, %r643;
	add.s32 	%r656, %r655, %r654;
	mul.wide.u32 	%rd46, %r656, 4;
	add.s64 	%rd7, %rd45, %rd46;
	or.b32  	%r657, %r3, 32;
	add.s32 	%r658, %r657, %r643;
	add.s32 	%r659, %r658, %r642;
	add.s32 	%r660, %r659, %r646;
	add.s32 	%r661, %r660, %r647;
	mul.wide.u32 	%rd47, %r661, 4;
	add.s64 	%rd8, %rd45, %rd47;
	cvt.u64.u32 	%rd48, %r654;
	selp.b64 	%rd49, 0, 1028, %p225;
	cvt.u64.u32 	%rd50, %r643;
	add.s64 	%rd51, %rd50, %rd49;
	add.s64 	%rd52, %rd51, %rd48;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd45, %rd53;
	or.b32  	%r662, %r3, 8256;
	add.s32 	%r663, %r662, %r643;
	add.s32 	%r664, %r663, %r642;
	add.s32 	%r665, %r664, %r646;
	add.s32 	%r666, %r665, %r647;
	or.b32  	%r667, %r3, 8288;
	add.s32 	%r668, %r667, %r643;
	add.s32 	%r669, %r668, %r642;
	add.s32 	%r670, %r669, %r646;
	add.s32 	%r671, %r670, %r647;
	shr.u32 	%r672, %r3, 4;
	bfe.s32 	%r673, %r3, 1, 1;
	and.b32  	%r674, %r673, 4112;
	bfe.s32 	%r675, %r3, 2, 1;
	and.b32  	%r676, %r675, 2056;
	mul.lo.s32 	%r677, %r220, 6;
	and.b32  	%r678, %r3, 1;
	neg.s32 	%r679, %r678;
	and.b32  	%r680, %r679, 8256;
	bfe.s32 	%r681, %r3, 3, 1;
	and.b32  	%r682, %r3, 8;
	setp.eq.s32 	%p226, %r682, 0;
	and.b32  	%r683, %r681, 1028;
	mad.lo.s32 	%r684, %r672, 514, %r677;
	add.s32 	%r685, %r684, %r674;
	add.s32 	%r686, %r685, %r676;
	add.s32 	%r687, %r686, %r680;
	add.s32 	%r688, %r687, %r683;
	add.s32 	%r689, %r688, %r3634;
	mul.wide.u32 	%rd54, %r689, 4;
	add.s64 	%rd10, %rd45, %rd54;
	bfe.s32 	%r690, %r89, 4, 1;
	and.b32  	%r691, %r690, 514;
	shr.u32 	%r692, %r89, 5;
	selp.b32 	%r693, 1028, 0, %p226;
	or.b32  	%r694, %r674, %r691;
	add.s32 	%r695, %r676, %r677;
	or.b32  	%r696, %r695, %r680;
	mad.lo.s32 	%r697, %r692, 257, %r696;
	add.s32 	%r698, %r697, %r693;
	add.s32 	%r699, %r698, %r3634;
	add.s32 	%r700, %r699, %r694;
	mul.wide.u32 	%rd55, %r700, 4;
	add.s64 	%rd11, %rd45, %rd55;
	add.s32 	%r701, %r689, 32;
	mul.wide.u32 	%rd56, %r701, 4;
	add.s64 	%rd12, %rd45, %rd56;
	add.s32 	%r702, %r700, 32;
	mul.wide.u32 	%rd57, %r702, 4;
	add.s64 	%rd13, %rd45, %rd57;
	mul.lo.s32 	%r703, %r313, 55296;
	mad.lo.s32 	%r704, %r3, 24, %r3633;
	add.s32 	%r115, %r704, %r92;
	cvt.s64.s32 	%rd14, %r703;
	or.b32  	%r705, %r3633, %r92;
	cvt.u16.u32 	%rs57, %r89;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r706, %rs62;
	and.b32  	%r707, %r706, 255;
	mad.lo.s32 	%r116, %r707, 24, %r705;
	mul.wide.u32 	%rd58, %r635, 4;
	add.s64 	%rd15, %rd45, %rd58;
	mul.wide.u32 	%rd59, %r666, 4;
	add.s64 	%rd16, %rd45, %rd59;
	mul.wide.u32 	%rd60, %r671, 4;
	add.s64 	%rd17, %rd45, %rd60;
	add.s32 	%r708, %r689, 64;
	mul.wide.u32 	%rd61, %r708, 4;
	add.s64 	%rd18, %rd45, %rd61;
	add.s32 	%r709, %r700, 64;
	mul.wide.u32 	%rd62, %r709, 4;
	add.s64 	%rd19, %rd45, %rd62;
	add.s32 	%r710, %r689, 96;
	mul.wide.u32 	%rd63, %r710, 4;
	add.s64 	%rd20, %rd45, %rd63;
	add.s32 	%r711, %r700, 96;
	mul.wide.u32 	%rd64, %r711, 4;
	add.s64 	%rd21, %rd45, %rd64;
	add.s32 	%r712, %r689, 128;
	mul.wide.u32 	%rd65, %r712, 4;
	add.s64 	%rd22, %rd45, %rd65;
	add.s32 	%r713, %r700, 128;
	mul.wide.u32 	%rd66, %r713, 4;
	add.s64 	%rd23, %rd45, %rd66;
	add.s32 	%r714, %r689, 160;
	mul.wide.u32 	%rd67, %r714, 4;
	add.s64 	%rd24, %rd45, %rd67;
	add.s32 	%r715, %r700, 160;
	mul.wide.u32 	%rd68, %r715, 4;
	add.s64 	%rd25, %rd45, %rd68;
	add.s32 	%r716, %r689, 192;
	mul.wide.u32 	%rd69, %r716, 4;
	add.s64 	%rd26, %rd45, %rd69;
	add.s32 	%r717, %r700, 192;
	mul.wide.u32 	%rd70, %r717, 4;
	add.s64 	%rd27, %rd45, %rd70;
	add.s32 	%r718, %r689, 224;
	mul.wide.u32 	%rd71, %r718, 4;
	add.s64 	%rd28, %rd45, %rd71;
	add.s32 	%r719, %r700, 224;
	mul.wide.u32 	%rd72, %r719, 4;
	add.s64 	%rd29, %rd45, %rd72;
	setp.gt.u32 	%p228, %r3, 7;
	setp.lt.u32 	%p229, %r2, 16;
	setp.lt.u32 	%p237, %r2, 24;
	mov.u32 	%r3667, %r3637;
	mov.u32 	%r3668, %r3637;
	mov.u32 	%r3669, %r3637;
	mov.u32 	%r3670, %r3637;
	bra.uni 	$L__BB0_143;
$L__BB0_163:                            // %L30761
                                        //   in Loop: Header=BB0_143 Depth=1
	add.s32 	%r219, %r3637, 48;
	setp.ne.s32 	%p275, %r3637, 32688;
	mov.u32 	%r3637, %r219;
	@%p275 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_164;
$L__BB0_143:                            // %L1189
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_146 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r122, %r3637, %r311;
	setp.lt.s32 	%p227, %r122, %r312;
	@%p227 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_164;
$L__BB0_144:                            // %oksrem578
                                        //   in Loop: Header=BB0_143 Depth=1
	mul.hi.u32 	%r913, %r3637, -1431655765;
	shr.u32 	%r914, %r913, 5;
	mul.lo.s32 	%r253, %r914, 48;
	add.s32 	%r915, %r253, %r3;
	add.s32 	%r916, %r915, %r311;
	mul.lo.s32 	%r917, %r916, 12288;
	add.s32 	%r918, %r87, %r917;
	mul.hi.s32 	%r919, %r918, 715827883;
	shr.u32 	%r920, %r919, 31;
	shr.s32 	%r921, %r919, 26;
	add.s32 	%r922, %r921, %r920;
	setp.lt.s32 	%p231, %r918, 0;
	mul.lo.s32 	%r923, %r922, 402653184;
	setp.ne.s32 	%p232, %r923, %r918;
	and.pred  	%p233, %p231, %p232;
	selp.s32 	%r924, -1, 0, %p233;
	add.s32 	%r925, %r922, %r924;
	mad.lo.s32 	%r926, %r925, -402653184, %r918;
	mul.wide.s32 	%rd73, %r926, 4;
	add.s64 	%rd74, %rd3, %rd73;
	ld.global.v4.u32 	{%r927, %r928, %r929, %r930}, [%rd74];
	add.s32 	%r931, %r917, %r88;
	mul.hi.s32 	%r932, %r931, 715827883;
	shr.u32 	%r933, %r932, 31;
	shr.s32 	%r934, %r932, 26;
	add.s32 	%r935, %r934, %r933;
	shr.s32 	%r936, %r931, 31;
	add.s32 	%r937, %r936, %r935;
	or.b32  	%r938, %r931, 1;
	mad.lo.s32 	%r939, %r937, -402653184, %r938;
	mul.wide.s32 	%rd75, %r939, 4;
	add.s64 	%rd76, %rd3, %rd75;
	ld.global.v4.u32 	{%r940, %r941, %r942, %r943}, [%rd76+-4];
	add.s32 	%r944, %r122, %r89;
	mul.lo.s32 	%r945, %r944, 12288;
	add.s32 	%r946, %r87, %r945;
	mul.hi.s32 	%r947, %r946, 715827883;
	shr.u32 	%r948, %r947, 31;
	shr.s32 	%r949, %r947, 26;
	add.s32 	%r950, %r949, %r948;
	setp.lt.s32 	%p234, %r946, 0;
	mul.lo.s32 	%r951, %r950, 402653184;
	setp.ne.s32 	%p235, %r951, %r946;
	and.pred  	%p236, %p234, %p235;
	selp.s32 	%r952, -1, 0, %p236;
	add.s32 	%r953, %r950, %r952;
	mad.lo.s32 	%r954, %r953, -402653184, %r946;
	mul.wide.s32 	%rd77, %r954, 4;
	add.s64 	%rd78, %rd3, %rd77;
	ld.global.v4.u32 	{%r955, %r956, %r957, %r958}, [%rd78];
	add.s32 	%r959, %r945, %r88;
	mul.hi.s32 	%r960, %r959, 715827883;
	shr.u32 	%r961, %r960, 31;
	shr.s32 	%r962, %r960, 26;
	add.s32 	%r963, %r962, %r961;
	shr.s32 	%r964, %r959, 31;
	add.s32 	%r965, %r964, %r963;
	or.b32  	%r966, %r959, 1;
	mad.lo.s32 	%r967, %r965, -402653184, %r966;
	mul.wide.s32 	%rd79, %r967, 4;
	add.s64 	%rd80, %rd3, %rd79;
	ld.global.v4.u32 	{%r968, %r969, %r970, %r971}, [%rd80+-4];
	selp.b32 	%r972, %r929, %r927, %p229;
	shfl.sync.bfly.b32	%r973, %r972, 16, 31, -1;
	selp.b32 	%r722, %r927, %r973, %p229;
	selp.b32 	%r727, %r973, %r929, %p229;
	selp.b32 	%r974, %r930, %r928, %p229;
	shfl.sync.bfly.b32	%r975, %r974, 16, 31, -1;
	selp.b32 	%r730, %r928, %r975, %p229;
	selp.b32 	%r735, %r975, %r930, %p229;
	selp.b32 	%r976, %r942, %r940, %p229;
	shfl.sync.bfly.b32	%r977, %r976, 16, 31, -1;
	selp.b32 	%r738, %r940, %r977, %p229;
	selp.b32 	%r743, %r977, %r942, %p229;
	selp.b32 	%r978, %r943, %r941, %p229;
	shfl.sync.bfly.b32	%r979, %r978, 16, 31, -1;
	selp.b32 	%r746, %r941, %r979, %p229;
	selp.b32 	%r751, %r979, %r943, %p229;
	selp.b32 	%r980, %r957, %r955, %p229;
	shfl.sync.bfly.b32	%r981, %r980, 16, 31, -1;
	selp.b32 	%r754, %r955, %r981, %p229;
	selp.b32 	%r759, %r981, %r957, %p229;
	selp.b32 	%r982, %r958, %r956, %p229;
	shfl.sync.bfly.b32	%r983, %r982, 16, 31, -1;
	selp.b32 	%r762, %r956, %r983, %p229;
	selp.b32 	%r767, %r983, %r958, %p229;
	selp.b32 	%r984, %r970, %r968, %p229;
	shfl.sync.bfly.b32	%r985, %r984, 16, 31, -1;
	selp.b32 	%r770, %r968, %r985, %p229;
	selp.b32 	%r775, %r985, %r970, %p229;
	selp.b32 	%r986, %r971, %r969, %p229;
	shfl.sync.bfly.b32	%r987, %r986, 16, 31, -1;
	selp.b32 	%r778, %r969, %r987, %p229;
	selp.b32 	%r783, %r987, %r971, %p229;
	shl.b32 	%r723, %r727, 4;
	mov.u32 	%r721, 252645135;
	// begin inline asm
	lop3.b32 %r785, %r721, %r722, %r723, 202;
	// end inline asm
	shr.u32 	%r726, %r722, 4;
	// begin inline asm
	lop3.b32 %r801, %r721, %r726, %r727, 202;
	// end inline asm
	shl.b32 	%r731, %r735, 4;
	// begin inline asm
	lop3.b32 %r793, %r721, %r730, %r731, 202;
	// end inline asm
	shr.u32 	%r734, %r730, 4;
	// begin inline asm
	lop3.b32 %r809, %r721, %r734, %r735, 202;
	// end inline asm
	shl.b32 	%r739, %r743, 4;
	// begin inline asm
	lop3.b32 %r817, %r721, %r738, %r739, 202;
	// end inline asm
	shr.u32 	%r742, %r738, 4;
	// begin inline asm
	lop3.b32 %r833, %r721, %r742, %r743, 202;
	// end inline asm
	shl.b32 	%r747, %r751, 4;
	// begin inline asm
	lop3.b32 %r825, %r721, %r746, %r747, 202;
	// end inline asm
	shr.u32 	%r750, %r746, 4;
	// begin inline asm
	lop3.b32 %r841, %r721, %r750, %r751, 202;
	// end inline asm
	shl.b32 	%r755, %r759, 4;
	// begin inline asm
	lop3.b32 %r786, %r721, %r754, %r755, 202;
	// end inline asm
	shr.u32 	%r758, %r754, 4;
	// begin inline asm
	lop3.b32 %r802, %r721, %r758, %r759, 202;
	// end inline asm
	shl.b32 	%r763, %r767, 4;
	// begin inline asm
	lop3.b32 %r794, %r721, %r762, %r763, 202;
	// end inline asm
	shr.u32 	%r766, %r762, 4;
	// begin inline asm
	lop3.b32 %r810, %r721, %r766, %r767, 202;
	// end inline asm
	shl.b32 	%r771, %r775, 4;
	// begin inline asm
	lop3.b32 %r818, %r721, %r770, %r771, 202;
	// end inline asm
	shr.u32 	%r774, %r770, 4;
	// begin inline asm
	lop3.b32 %r834, %r721, %r774, %r775, 202;
	// end inline asm
	shl.b32 	%r779, %r783, 4;
	// begin inline asm
	lop3.b32 %r826, %r721, %r778, %r779, 202;
	// end inline asm
	shr.u32 	%r782, %r778, 4;
	// begin inline asm
	lop3.b32 %r842, %r721, %r782, %r783, 202;
	// end inline asm
	mov.u32 	%r787, 25152;
	// begin inline asm
	prmt.b32 %r849, %r785, %r786, %r787;
	// end inline asm
	mov.u32 	%r791, 29521;
	// begin inline asm
	prmt.b32 %r881, %r785, %r786, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r857, %r793, %r794, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r793, %r794, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r850, %r801, %r802, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r801, %r802, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r858, %r809, %r810, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r809, %r810, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r817, %r818, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r817, %r818, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r825, %r826, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r825, %r826, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r866, %r833, %r834, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r833, %r834, %r791;
	// end inline asm
	// begin inline asm
	prmt.b32 %r874, %r841, %r842, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r841, %r842, %r791;
	// end inline asm
	mov.u32 	%r907, 21520;
	// begin inline asm
	prmt.b32 %r848, %r849, %r850, %r907;
	// end inline asm
	mov.u32 	%r911, 30258;
	// begin inline asm
	prmt.b32 %r852, %r849, %r850, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r856, %r857, %r858, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r860, %r857, %r858, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r865, %r866, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r868, %r865, %r866, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r873, %r874, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r876, %r873, %r874, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r881, %r882, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r884, %r881, %r882, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r889, %r890, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r892, %r889, %r890, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r897, %r898, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r900, %r897, %r898, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r905, %r906, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r908, %r905, %r906, %r911;
	// end inline asm
	cvt.u16.u32 	%rs63, %r915;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r988, %rs69;
	add.s32 	%r989, %r90, %r988;
	mul.wide.s32 	%rd81, %r989, 4;
	add.s64 	%rd83, %rd45, %rd81;
	st.shared.u32 	[%rd83], %r848;
	add.s32 	%r990, %r989, 128;
	mul.wide.u32 	%rd84, %r990, 4;
	add.s64 	%rd85, %rd45, %rd84;
	st.shared.u32 	[%rd85], %r856;
	add.s32 	%r991, %r989, 64;
	mul.wide.u32 	%rd86, %r991, 4;
	add.s64 	%rd87, %rd45, %rd86;
	st.shared.u32 	[%rd87], %r852;
	add.s32 	%r992, %r989, 192;
	mul.wide.u32 	%rd88, %r992, 4;
	add.s64 	%rd89, %rd45, %rd88;
	st.shared.u32 	[%rd89], %r860;
	add.s32 	%r993, %r91, %r988;
	mul.wide.u32 	%rd90, %r993, 4;
	add.s64 	%rd91, %rd45, %rd90;
	st.shared.u32 	[%rd91], %r864;
	add.s32 	%r994, %r993, 128;
	mul.wide.u32 	%rd92, %r994, 4;
	add.s64 	%rd93, %rd45, %rd92;
	st.shared.u32 	[%rd93], %r872;
	add.s32 	%r995, %r993, 64;
	mul.wide.u32 	%rd94, %r995, 4;
	add.s64 	%rd95, %rd45, %rd94;
	st.shared.u32 	[%rd95], %r868;
	add.s32 	%r996, %r993, 192;
	mul.wide.u32 	%rd96, %r996, 4;
	add.s64 	%rd97, %rd45, %rd96;
	st.shared.u32 	[%rd97], %r876;
	add.s32 	%r997, %r989, 32;
	mul.wide.u32 	%rd98, %r997, 4;
	add.s64 	%rd99, %rd45, %rd98;
	st.shared.u32 	[%rd99], %r880;
	add.s32 	%r998, %r989, 160;
	mul.wide.u32 	%rd100, %r998, 4;
	add.s64 	%rd101, %rd45, %rd100;
	st.shared.u32 	[%rd101], %r888;
	add.s32 	%r999, %r989, 96;
	mul.wide.u32 	%rd102, %r999, 4;
	add.s64 	%rd103, %rd45, %rd102;
	st.shared.u32 	[%rd103], %r884;
	add.s32 	%r1000, %r989, 224;
	mul.wide.u32 	%rd104, %r1000, 4;
	add.s64 	%rd105, %rd45, %rd104;
	st.shared.u32 	[%rd105], %r892;
	add.s32 	%r1001, %r993, 32;
	mul.wide.u32 	%rd106, %r1001, 4;
	add.s64 	%rd107, %rd45, %rd106;
	st.shared.u32 	[%rd107], %r896;
	add.s32 	%r1002, %r993, 160;
	mul.wide.u32 	%rd108, %r1002, 4;
	add.s64 	%rd109, %rd45, %rd108;
	st.shared.u32 	[%rd109], %r904;
	add.s32 	%r1003, %r993, 96;
	mul.wide.u32 	%rd110, %r1003, 4;
	add.s64 	%rd111, %rd45, %rd110;
	st.shared.u32 	[%rd111], %r900;
	add.s32 	%r1004, %r993, 224;
	mul.wide.u32 	%rd112, %r1004, 4;
	add.s64 	%rd113, %rd45, %rd112;
	st.shared.u32 	[%rd113], %r908;
	bar.sync 	0;
	add.s32 	%r1005, %r253, %r92;
	cvt.u16.u32 	%rs70, %r1005;
	mul.hi.s16 	%rs71, %rs70, 10923;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 2;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.s32.s16 	%r1006, %rs76;
	add.s32 	%r1007, %r93, %r1006;
	mul.wide.s32 	%rd114, %r1007, 4;
	add.s64 	%rd115, %rd45, %rd114;
	ld.shared.u32 	%r1008, [%rd115];
	add.s32 	%r1009, %r94, %r1006;
	mul.wide.u32 	%rd116, %r1009, 4;
	add.s64 	%rd117, %rd45, %rd116;
	ld.shared.u32 	%r1010, [%rd117];
	add.s32 	%r1011, %r95, %r1006;
	mul.wide.u32 	%rd118, %r1011, 4;
	add.s64 	%rd119, %rd45, %rd118;
	ld.shared.u32 	%r1012, [%rd119];
	add.s32 	%r1013, %r96, %r1006;
	mul.wide.u32 	%rd120, %r1013, 4;
	add.s64 	%rd121, %rd45, %rd120;
	ld.shared.u32 	%r1014, [%rd121];
	add.s32 	%r1015, %r97, %r1006;
	mul.wide.u32 	%rd122, %r1015, 4;
	add.s64 	%rd123, %rd45, %rd122;
	ld.shared.u32 	%r1016, [%rd123];
	add.s32 	%r1017, %r98, %r1006;
	mul.wide.u32 	%rd124, %r1017, 4;
	add.s64 	%rd125, %rd45, %rd124;
	ld.shared.u32 	%r1018, [%rd125];
	add.s32 	%r1019, %r99, %r1006;
	mul.wide.u32 	%rd126, %r1019, 4;
	add.s64 	%rd127, %rd45, %rd126;
	ld.shared.u32 	%r1020, [%rd127];
	add.s32 	%r1021, %r100, %r1006;
	mul.wide.u32 	%rd128, %r1021, 4;
	add.s64 	%rd129, %rd45, %rd128;
	ld.shared.u32 	%r1022, [%rd129];
	add.s32 	%r1023, %r101, %r1006;
	mul.wide.u32 	%rd130, %r1023, 4;
	add.s64 	%rd131, %rd45, %rd130;
	ld.shared.u32 	%r1024, [%rd131];
	add.s32 	%r1025, %r102, %r1006;
	mul.wide.u32 	%rd132, %r1025, 4;
	add.s64 	%rd133, %rd45, %rd132;
	ld.shared.u32 	%r1026, [%rd133];
	add.s32 	%r1027, %r103, %r1006;
	mul.wide.u32 	%rd134, %r1027, 4;
	add.s64 	%rd135, %rd45, %rd134;
	ld.shared.u32 	%r1028, [%rd135];
	add.s32 	%r1029, %r104, %r1006;
	mul.wide.u32 	%rd136, %r1029, 4;
	add.s64 	%rd137, %rd45, %rd136;
	ld.shared.u32 	%r1030, [%rd137];
	add.s32 	%r1031, %r105, %r1006;
	mul.wide.u32 	%rd138, %r1031, 4;
	add.s64 	%rd139, %rd45, %rd138;
	ld.shared.u32 	%r1032, [%rd139];
	add.s32 	%r1033, %r106, %r1006;
	mul.wide.u32 	%rd140, %r1033, 4;
	add.s64 	%rd141, %rd45, %rd140;
	ld.shared.u32 	%r1034, [%rd141];
	add.s32 	%r1035, %r107, %r1006;
	mul.wide.u32 	%rd142, %r1035, 4;
	add.s64 	%rd143, %rd45, %rd142;
	ld.shared.u32 	%r1036, [%rd143];
	add.s32 	%r1037, %r108, %r1006;
	mul.wide.u32 	%rd144, %r1037, 4;
	add.s64 	%rd145, %rd45, %rd144;
	ld.shared.u32 	%r1038, [%rd145];
	add.s32 	%r1039, %r109, %r1006;
	mul.wide.u32 	%rd146, %r1039, 4;
	add.s64 	%rd147, %rd45, %rd146;
	ld.shared.u32 	%r1040, [%rd147];
	add.s32 	%r1041, %r110, %r1006;
	mul.wide.u32 	%rd148, %r1041, 4;
	add.s64 	%rd149, %rd45, %rd148;
	ld.shared.u32 	%r1042, [%rd149];
	add.s32 	%r1043, %r111, %r1006;
	mul.wide.u32 	%rd150, %r1043, 4;
	add.s64 	%rd151, %rd45, %rd150;
	ld.shared.u32 	%r1044, [%rd151];
	add.s32 	%r1045, %r112, %r1006;
	mul.wide.u32 	%rd152, %r1045, 4;
	add.s64 	%rd153, %rd45, %rd152;
	ld.shared.u32 	%r1046, [%rd153];
	add.s32 	%r1047, %r113, %r1006;
	mul.wide.u32 	%rd154, %r1047, 4;
	add.s64 	%rd155, %rd45, %rd154;
	ld.shared.u32 	%r1048, [%rd155];
	add.s32 	%r1049, %r114, %r1006;
	mul.wide.s32 	%rd156, %r1049, 4;
	add.s64 	%rd157, %rd45, %rd156;
	ld.shared.u32 	%r1050, [%rd157];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1051, %r3720, 0, 31, -1;
	shfl.sync.idx.b32	%r1052, %r3720, 1, 31, -1;
	shfl.sync.idx.b32	%r1053, %r3720, 2, 31, -1;
	shfl.sync.idx.b32	%r1054, %r3720, 3, 31, -1;
	shfl.sync.idx.b32	%r1055, %r3720, 4, 31, -1;
	shfl.sync.idx.b32	%r1056, %r3720, 5, 31, -1;
	shfl.sync.idx.b32	%r1057, %r3720, 6, 31, -1;
	shfl.sync.idx.b32	%r1058, %r3720, 7, 31, -1;
	shfl.sync.idx.b32	%r1059, %r3720, 8, 31, -1;
	shfl.sync.idx.b32	%r1060, %r3720, 9, 31, -1;
	shfl.sync.idx.b32	%r1061, %r3720, 10, 31, -1;
	shfl.sync.idx.b32	%r1062, %r3720, 11, 31, -1;
	shfl.sync.idx.b32	%r1063, %r3720, 12, 31, -1;
	shfl.sync.idx.b32	%r1064, %r3720, 13, 31, -1;
	shfl.sync.idx.b32	%r1065, %r3720, 14, 31, -1;
	shfl.sync.idx.b32	%r1066, %r3720, 15, 31, -1;
	shfl.sync.idx.b32	%r1067, %r3720, 16, 31, -1;
	shfl.sync.idx.b32	%r1068, %r3720, 17, 31, -1;
	shfl.sync.idx.b32	%r1069, %r3720, 18, 31, -1;
	shfl.sync.idx.b32	%r1070, %r3720, 19, 31, -1;
	shfl.sync.idx.b32	%r1071, %r3720, 20, 31, -1;
	shfl.sync.idx.b32	%r1072, %r3720, 21, 31, -1;
	shfl.sync.idx.b32	%r1073, %r3720, 22, 31, -1;
	shfl.sync.idx.b32	%r1074, %r3720, 23, 31, -1;
	add.s32 	%r1075, %r1051, %r1006;
	mul.wide.s32 	%rd158, %r1075, 4;
	add.s64 	%rd159, %rd45, %rd158;
	st.shared.u32 	[%rd159], %r1008;
	add.s32 	%r1076, %r1052, %r1006;
	mul.wide.s32 	%rd160, %r1076, 4;
	add.s64 	%rd161, %rd45, %rd160;
	st.shared.u32 	[%rd161], %r1010;
	add.s32 	%r1077, %r1053, %r1006;
	mul.wide.s32 	%rd162, %r1077, 4;
	add.s64 	%rd163, %rd45, %rd162;
	st.shared.u32 	[%rd163], %r1012;
	add.s32 	%r1078, %r1054, %r1006;
	mul.wide.s32 	%rd164, %r1078, 4;
	add.s64 	%rd165, %rd45, %rd164;
	st.shared.u32 	[%rd165], %r1014;
	add.s32 	%r1079, %r1055, %r1006;
	mul.wide.s32 	%rd166, %r1079, 4;
	add.s64 	%rd167, %rd45, %rd166;
	st.shared.u32 	[%rd167], %r1016;
	add.s32 	%r1080, %r1056, %r1006;
	mul.wide.s32 	%rd168, %r1080, 4;
	add.s64 	%rd169, %rd45, %rd168;
	st.shared.u32 	[%rd169], %r1018;
	add.s32 	%r1081, %r1057, %r1006;
	mul.wide.s32 	%rd170, %r1081, 4;
	add.s64 	%rd171, %rd45, %rd170;
	st.shared.u32 	[%rd171], %r1020;
	add.s32 	%r1082, %r1058, %r1006;
	mul.wide.s32 	%rd172, %r1082, 4;
	add.s64 	%rd173, %rd45, %rd172;
	st.shared.u32 	[%rd173], %r1022;
	add.s32 	%r1083, %r1059, %r1006;
	mul.wide.s32 	%rd174, %r1083, 4;
	add.s64 	%rd175, %rd45, %rd174;
	st.shared.u32 	[%rd175], %r1024;
	add.s32 	%r1084, %r1060, %r1006;
	mul.wide.s32 	%rd176, %r1084, 4;
	add.s64 	%rd177, %rd45, %rd176;
	st.shared.u32 	[%rd177], %r1026;
	add.s32 	%r1085, %r1061, %r1006;
	mul.wide.s32 	%rd178, %r1085, 4;
	add.s64 	%rd179, %rd45, %rd178;
	st.shared.u32 	[%rd179], %r1028;
	add.s32 	%r1086, %r1062, %r1006;
	mul.wide.s32 	%rd180, %r1086, 4;
	add.s64 	%rd181, %rd45, %rd180;
	st.shared.u32 	[%rd181], %r1030;
	add.s32 	%r1087, %r1063, %r1006;
	mul.wide.s32 	%rd182, %r1087, 4;
	add.s64 	%rd183, %rd45, %rd182;
	st.shared.u32 	[%rd183], %r1032;
	add.s32 	%r1088, %r1064, %r1006;
	mul.wide.s32 	%rd184, %r1088, 4;
	add.s64 	%rd185, %rd45, %rd184;
	st.shared.u32 	[%rd185], %r1034;
	add.s32 	%r1089, %r1065, %r1006;
	mul.wide.s32 	%rd186, %r1089, 4;
	add.s64 	%rd187, %rd45, %rd186;
	st.shared.u32 	[%rd187], %r1036;
	add.s32 	%r1090, %r1066, %r1006;
	mul.wide.s32 	%rd188, %r1090, 4;
	add.s64 	%rd189, %rd45, %rd188;
	st.shared.u32 	[%rd189], %r1038;
	add.s32 	%r1091, %r1067, %r1006;
	mul.wide.s32 	%rd190, %r1091, 4;
	add.s64 	%rd191, %rd45, %rd190;
	st.shared.u32 	[%rd191], %r1040;
	add.s32 	%r1092, %r1068, %r1006;
	mul.wide.s32 	%rd192, %r1092, 4;
	add.s64 	%rd193, %rd45, %rd192;
	st.shared.u32 	[%rd193], %r1042;
	add.s32 	%r1093, %r1069, %r1006;
	mul.wide.s32 	%rd194, %r1093, 4;
	add.s64 	%rd195, %rd45, %rd194;
	st.shared.u32 	[%rd195], %r1044;
	add.s32 	%r1094, %r1070, %r1006;
	mul.wide.s32 	%rd196, %r1094, 4;
	add.s64 	%rd197, %rd45, %rd196;
	st.shared.u32 	[%rd197], %r1046;
	add.s32 	%r1095, %r1071, %r1006;
	mul.wide.s32 	%rd198, %r1095, 4;
	add.s64 	%rd199, %rd45, %rd198;
	st.shared.u32 	[%rd199], %r1048;
	selp.b32 	%r1096, 0, %r1050, %p228;
	add.s32 	%r1097, %r1072, %r1006;
	mul.wide.s32 	%rd200, %r1097, 4;
	add.s64 	%rd201, %rd45, %rd200;
	st.shared.u32 	[%rd201], %r1096;
	add.s32 	%r1098, %r1073, %r1006;
	mul.wide.s32 	%rd202, %r1098, 4;
	add.s64 	%rd203, %rd45, %rd202;
	mov.u32 	%r3642, 0;
	st.shared.u32 	[%rd203], %r3642;
	add.s32 	%r1099, %r1074, %r1006;
	mul.wide.s32 	%rd204, %r1099, 4;
	add.s64 	%rd205, %rd45, %rd204;
	st.shared.u32 	[%rd205], %r3642;
	bar.sync 	0;
	mov.u32 	%r3643, %r3642;
	mov.u32 	%r3644, %r3642;
	mov.u32 	%r3645, %r3642;
	mov.u32 	%r3646, %r3642;
	mov.u32 	%r3647, %r3642;
	mov.u32 	%r3648, %r3642;
	mov.u32 	%r3649, %r3642;
	mov.u32 	%r3650, %r3642;
	mov.u32 	%r3651, %r3642;
	mov.u32 	%r3652, %r3642;
	mov.u32 	%r3653, %r3642;
	mov.u32 	%r3654, %r3642;
	mov.u32 	%r3655, %r3642;
	mov.u32 	%r3656, %r3642;
	mov.u32 	%r3657, %r3642;
	mov.u32 	%r3658, %r3642;
	mov.u32 	%r3659, %r3642;
	mov.u32 	%r3660, %r3642;
	mov.u32 	%r3661, %r3642;
	mov.u32 	%r3662, %r3642;
	mov.u32 	%r3663, %r3642;
	mov.u32 	%r3664, %r3642;
	mov.u32 	%r3665, %r3642;
	@%p78 bra 	$L__BB0_145;
// %bb.192:                             // %oksrem3803
                                        //   in Loop: Header=BB0_143 Depth=1
	cvt.u16.u32 	%rs77, %r253;
	mul.hi.s16 	%rs78, %rs77, 10923;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 2;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 24;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.s32.s16 	%r1100, %rs83;
	mul.wide.s32 	%rd206, %r1100, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.shared.u32 	%r3642, [%rd207];
	ld.shared.u32 	%r3643, [%rd15+4];
	ld.shared.u32 	%r3644, [%rd15+8];
	ld.shared.u32 	%r3645, [%rd15+12];
	ld.shared.u32 	%r3646, [%rd15+16];
	ld.shared.u32 	%r3647, [%rd15+20];
	ld.shared.u32 	%r3648, [%rd15+24];
	ld.shared.u32 	%r3649, [%rd15+28];
	ld.shared.u32 	%r3650, [%rd15+32];
	ld.shared.u32 	%r3651, [%rd15+36];
	ld.shared.u32 	%r3652, [%rd15+40];
	ld.shared.u32 	%r3653, [%rd15+44];
	ld.shared.u32 	%r3654, [%rd15+48];
	ld.shared.u32 	%r3655, [%rd15+52];
	ld.shared.u32 	%r3656, [%rd15+56];
	ld.shared.u32 	%r3657, [%rd15+60];
	add.s16 	%rs84, %rs77, 16;
	mul.hi.s16 	%rs85, %rs84, 10923;
	shr.u16 	%rs86, %rs85, 15;
	shr.s16 	%rs87, %rs85, 2;
	add.s16 	%rs88, %rs87, %rs86;
	mul.lo.s16 	%rs89, %rs88, 24;
	sub.s16 	%rs90, %rs84, %rs89;
	cvt.s32.s16 	%r1101, %rs90;
	mul.wide.s32 	%rd208, %r1101, 4;
	add.s64 	%rd209, %rd15, %rd208;
	ld.shared.u32 	%r3658, [%rd209];
	add.s16 	%rs91, %rs77, 17;
	mul.hi.s16 	%rs92, %rs91, 10923;
	shr.u16 	%rs93, %rs92, 15;
	shr.s16 	%rs94, %rs92, 2;
	add.s16 	%rs95, %rs94, %rs93;
	mul.lo.s16 	%rs96, %rs95, 24;
	sub.s16 	%rs97, %rs91, %rs96;
	cvt.s32.s16 	%r1102, %rs97;
	mul.wide.s32 	%rd210, %r1102, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.shared.u32 	%r3659, [%rd211];
	add.s16 	%rs98, %rs77, 18;
	mul.hi.s16 	%rs99, %rs98, 10923;
	shr.u16 	%rs100, %rs99, 15;
	shr.s16 	%rs101, %rs99, 2;
	add.s16 	%rs102, %rs101, %rs100;
	mul.lo.s16 	%rs103, %rs102, 24;
	sub.s16 	%rs104, %rs98, %rs103;
	cvt.s32.s16 	%r1103, %rs104;
	mul.wide.s32 	%rd212, %r1103, 4;
	add.s64 	%rd213, %rd15, %rd212;
	ld.shared.u32 	%r3660, [%rd213];
	add.s16 	%rs105, %rs77, 19;
	mul.hi.s16 	%rs106, %rs105, 10923;
	shr.u16 	%rs107, %rs106, 15;
	shr.s16 	%rs108, %rs106, 2;
	add.s16 	%rs109, %rs108, %rs107;
	mul.lo.s16 	%rs110, %rs109, 24;
	sub.s16 	%rs111, %rs105, %rs110;
	cvt.s32.s16 	%r1104, %rs111;
	mul.wide.s32 	%rd214, %r1104, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.shared.u32 	%r3661, [%rd215];
	add.s16 	%rs112, %rs77, 20;
	mul.hi.s16 	%rs113, %rs112, 10923;
	shr.u16 	%rs114, %rs113, 15;
	shr.s16 	%rs115, %rs113, 2;
	add.s16 	%rs116, %rs115, %rs114;
	mul.lo.s16 	%rs117, %rs116, 24;
	sub.s16 	%rs118, %rs112, %rs117;
	cvt.s32.s16 	%r1105, %rs118;
	mul.wide.s32 	%rd216, %r1105, 4;
	add.s64 	%rd217, %rd15, %rd216;
	ld.shared.u32 	%r3662, [%rd217];
	add.s16 	%rs119, %rs77, 21;
	mul.hi.s16 	%rs120, %rs119, 10923;
	shr.u16 	%rs121, %rs120, 15;
	shr.s16 	%rs122, %rs120, 2;
	add.s16 	%rs123, %rs122, %rs121;
	mul.lo.s16 	%rs124, %rs123, 24;
	sub.s16 	%rs125, %rs119, %rs124;
	cvt.s32.s16 	%r1106, %rs125;
	mul.wide.s32 	%rd218, %r1106, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.shared.u32 	%r3663, [%rd219];
	add.s16 	%rs126, %rs77, 22;
	mul.hi.s16 	%rs127, %rs126, 10923;
	shr.u16 	%rs128, %rs127, 15;
	shr.s16 	%rs129, %rs127, 2;
	add.s16 	%rs130, %rs129, %rs128;
	mul.lo.s16 	%rs131, %rs130, 24;
	sub.s16 	%rs132, %rs126, %rs131;
	cvt.s32.s16 	%r1107, %rs132;
	mul.wide.s32 	%rd220, %r1107, 4;
	add.s64 	%rd221, %rd15, %rd220;
	ld.shared.u32 	%r3664, [%rd221];
	add.s16 	%rs133, %rs77, 23;
	mul.hi.s16 	%rs134, %rs133, 10923;
	shr.u16 	%rs135, %rs134, 15;
	shr.s16 	%rs136, %rs134, 2;
	add.s16 	%rs137, %rs136, %rs135;
	mul.lo.s16 	%rs138, %rs137, 24;
	sub.s16 	%rs139, %rs133, %rs138;
	cvt.s32.s16 	%r1108, %rs139;
	mul.wide.s32 	%rd222, %r1108, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.shared.u32 	%r3665, [%rd223];
$L__BB0_145:                            // %L11422
                                        //   in Loop: Header=BB0_143 Depth=1
	bar.sync 	0;
	mov.u32 	%r3666, 12;
	bra.uni 	$L__BB0_146;
$L__BB0_152:                            // %L21082
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r3668, %r3668, 1;
	mov.u32 	%r3667, 0;
	mov.u32 	%r3669, %r3667;
	mov.u32 	%r3670, %r3667;
$L__BB0_153:                            // %L21083
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3666, %r3666, -4;
	setp.ne.s32 	%p255, %r3666, -12;
	@%p255 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_154;
$L__BB0_146:                            // %L11448
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p238, %r3666, 12;
	selp.b32 	%r1647, %r3642, 0, %p238;
	setp.eq.s32 	%p239, %r3666, 8;
	selp.b32 	%r1648, %r3646, %r1647, %p239;
	setp.eq.s32 	%p240, %r3666, 4;
	selp.b32 	%r1649, %r3650, %r1648, %p240;
	setp.eq.s32 	%p241, %r3666, 0;
	selp.b32 	%r1650, %r3654, %r1649, %p241;
	setp.eq.s32 	%p242, %r3666, -4;
	selp.b32 	%r1651, %r3658, %r1650, %p242;
	setp.eq.s32 	%p243, %r3666, -8;
	selp.b32 	%r1652, %r3662, %r1651, %p243;
	selp.b32 	%r1653, %r3643, 0, %p238;
	selp.b32 	%r1654, %r3647, %r1653, %p239;
	selp.b32 	%r1655, %r3651, %r1654, %p240;
	selp.b32 	%r1656, %r3655, %r1655, %p241;
	selp.b32 	%r1657, %r3659, %r1656, %p242;
	selp.b32 	%r1658, %r3663, %r1657, %p243;
	selp.b32 	%r1659, %r3644, 0, %p238;
	selp.b32 	%r1660, %r3648, %r1659, %p239;
	selp.b32 	%r1661, %r3652, %r1660, %p240;
	selp.b32 	%r1662, %r3656, %r1661, %p241;
	selp.b32 	%r1663, %r3660, %r1662, %p242;
	selp.b32 	%r1664, %r3664, %r1663, %p243;
	selp.b32 	%r1665, %r3645, 0, %p238;
	selp.b32 	%r1666, %r3649, %r1665, %p239;
	selp.b32 	%r1667, %r3653, %r1666, %p240;
	selp.b32 	%r1668, %r3657, %r1667, %p241;
	selp.b32 	%r1669, %r3661, %r1668, %p242;
	selp.b32 	%r1670, %r3665, %r1669, %p243;
	mov.u16 	%rs177, 25600;
	// begin inline asm
	mov.b32 %r1115, {%rs177, %rs177};
	// end inline asm
	mov.u16 	%rs179, 21504;
	// begin inline asm
	mov.b32 %r1126, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1114, %r1652, -2004318072;
	mov.u32 	%r1251, 983055;
	// begin inline asm
	lop3.b32 %r1112, %r1251, %r1114, %r1115, 202;
	// end inline asm
	mov.u16 	%rs183, 18432;
	// begin inline asm
	mov.b32 %r1116, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	mov.u32 	%r1262, 15728880;
	// begin inline asm
	lop3.b32 %r1123, %r1262, %r1114, %r1126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1127, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1128, %r1126, %r1127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1131, %r1123, %r1128;
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1160, %r1658, -2004318072;
	// begin inline asm
	lop3.b32 %r1158, %r1251, %r1160, %r1161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1163, %r1161, %r1162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1166, %r1158, %r1163;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1169, %r1262, %r1160, %r1172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1174, %r1172, %r1173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1177, %r1169, %r1174;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1206, %r1664, -2004318072;
	// begin inline asm
	lop3.b32 %r1204, %r1251, %r1206, %r1207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1208, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1209, %r1207, %r1208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1212, %r1204, %r1209;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1215, %r1262, %r1206, %r1218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1220, %r1218, %r1219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1223, %r1215, %r1220;
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1252, %r1670, -2004318072;
	// begin inline asm
	lop3.b32 %r1250, %r1251, %r1252, %r1253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1254, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1255, %r1253, %r1254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1258, %r1250, %r1255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1261, %r1262, %r1252, %r1264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1265, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1266, %r1264, %r1265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1269, %r1261, %r1266;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1120;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1294, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1131;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1297, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1166;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1300, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1177;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1303, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1212;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1306, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1223;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1309, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1258;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1312, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1269;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1315, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1646, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1381, %r1378}, {%r336, %r339}, {%r1294}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1390, %r1387}, {%r336, %r339}, {%r1297}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1396}, {%r336, %r339}, {%r1300}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1408, %r1405}, {%r336, %r339}, {%r1303}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1417, %r1414}, {%r336, %r339}, {%r1306}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r336, %r339}, {%r1309}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r336, %r339}, {%r1312}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1444, %r1441}, {%r336, %r339}, {%r1315}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1374, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1376, %r1374, %r1378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r388, %r1381, %r1376;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1383, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r1383, %r1387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r388, %r1390, %r1385;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r1392, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r388, %r1399, %r1394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r388, %r1408, %r1403;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1412, %r1410, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r388, %r1417, %r1412;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r388, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r388, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r388, %r1444, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r391, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r388, %r1378, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r391, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r388, %r1387, %r1453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r391, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r388, %r1396, %r1460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r391, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r388, %r1405, %r1467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r391, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r388, %r1414, %r1474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r391, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r388, %r1423, %r1481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1488, %r391, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r388, %r1432, %r1488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r391, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r388, %r1441, %r1495;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1583, %r1584}, {%r432, %r438, %r435, %r441}, {%r1379, %r1449}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1591, %r1592}, {%r432, %r438, %r435, %r441}, {%r1388, %r1456}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1599, %r1600}, {%r432, %r438, %r435, %r441}, {%r1397, %r1463}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1607, %r1608}, {%r432, %r438, %r435, %r441}, {%r1406, %r1470}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1615, %r1616}, {%r432, %r438, %r435, %r441}, {%r1415, %r1477}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1624}, {%r432, %r438, %r435, %r441}, {%r1424, %r1484}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1631, %r1632}, {%r432, %r438, %r435, %r441}, {%r1433, %r1491}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1639, %r1640}, {%r432, %r438, %r435, %r441}, {%r1442, %r1498}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1582, %r1583, %r1584, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1586, %r1583, %r1584, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1590, %r1591, %r1592, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1594, %r1591, %r1592, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1598, %r1599, %r1600, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1602, %r1599, %r1600, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1606, %r1607, %r1608, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1610, %r1607, %r1608, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1614, %r1615, %r1616, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1618, %r1615, %r1616, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1622, %r1623, %r1624, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1626, %r1623, %r1624, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1630, %r1631, %r1632, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1634, %r1631, %r1632, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1638, %r1639, %r1640, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1642, %r1639, %r1640, %r911;
	// end inline asm
	st.shared.u32 	[%rd6], %r1582;
	st.shared.u32 	[%rd7], %r1586;
	st.shared.u32 	[%rd8], %r1590;
	st.shared.u32 	[%rd9+128], %r1594;
	st.shared.u32 	[%rd6+256], %r1598;
	st.shared.u32 	[%rd16+256], %r1602;
	st.shared.u32 	[%rd8+256], %r1606;
	st.shared.u32 	[%rd17+256], %r1610;
	st.shared.u32 	[%rd6+512], %r1614;
	st.shared.u32 	[%rd16+512], %r1618;
	st.shared.u32 	[%rd8+512], %r1622;
	st.shared.u32 	[%rd17+512], %r1626;
	st.shared.u32 	[%rd6+768], %r1630;
	st.shared.u32 	[%rd16+768], %r1634;
	st.shared.u32 	[%rd8+768], %r1638;
	st.shared.u32 	[%rd17+768], %r1642;
	bar.sync 	0;
	mov.u32 	%r3671, %r1646;
	mov.u32 	%r3672, %r1646;
	mov.u32 	%r3673, %r1646;
	mov.u32 	%r3674, %r1646;
	@%p237 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_147;
$L__BB0_193:                            // %pass7398
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3671, [%rd10];
	ld.shared.u32 	%r3672, [%rd11];
	ld.shared.u32 	%r3673, [%rd12];
	ld.shared.u32 	%r3674, [%rd13];
$L__BB0_147:                            // %L16973
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1706, %r1703}, {%r450, %r453}, {%r3671}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1715, %r1712}, {%r450, %r453}, {%r3672}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1724, %r1721}, {%r450, %r453}, {%r3673}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1733, %r1730}, {%r450, %r453}, {%r3674}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1699, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r1699, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r502, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1708, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1710, %r1708, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r502, %r1715, %r1710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1717, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r502, %r1724, %r1719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r502, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r505, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r502, %r1703, %r1735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r505, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r502, %r1712, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r505, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r502, %r1721, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r505, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r502, %r1730, %r1756;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1804, %r1807}, {%r546, %r552, %r549, %r555}, {%r1704, %r1738}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1826}, {%r546, %r552, %r549, %r555}, {%r1713, %r1745}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1811, %r1815}, {%r546, %r552, %r549, %r555}, {%r1722, %r1752}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1830, %r1834}, {%r546, %r552, %r549, %r555}, {%r1731, %r1759}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r1804, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1807, %r1807, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1811, %r1811, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1815, %r1815, %r1810;
	// end inline asm
	mov.u32 	%r1838, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1838, %r1814, %r3670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1823, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r1826, %r1826, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r1830, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r1834, %r1834, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r1838, %r1833, %r3669;
	// end inline asm
	mov.u32 	%r3675, %r1646;
	mov.u32 	%r3676, %r1646;
	mov.u32 	%r3677, %r1646;
	mov.u32 	%r3678, %r1646;
	@%p237 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_148;
$L__BB0_194:                            // %pass7999
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3675, [%rd18];
	ld.shared.u32 	%r3676, [%rd19];
	ld.shared.u32 	%r3677, [%rd20];
	ld.shared.u32 	%r3678, [%rd21];
$L__BB0_148:                            // %L18184
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1877, %r1874}, {%r450, %r453}, {%r3675}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1886, %r1883}, {%r450, %r453}, {%r3676}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1895, %r1892}, {%r450, %r453}, {%r3677}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r450, %r453}, {%r3678}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1870, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1872, %r1870, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r502, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1879, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r1879, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r502, %r1886, %r1881;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1888, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1888, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r502, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r502, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r505, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r502, %r1874, %r1906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r505, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r502, %r1883, %r1913;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1920, %r505, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r502, %r1892, %r1920;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1927, %r505, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1930, %r502, %r1901, %r1927;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1975, %r1978}, {%r546, %r552, %r549, %r555}, {%r1875, %r1909}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1994, %r1997}, {%r546, %r552, %r549, %r555}, {%r1884, %r1916}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1982, %r1986}, {%r546, %r552, %r549, %r555}, {%r1893, %r1923}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2001, %r2005}, {%r546, %r552, %r549, %r555}, {%r1902, %r1930}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r1975, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1986, %r1986, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1838, %r1985, %r1818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r1994, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r1997, %r1997, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r2001, %r2001, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r2005, %r2005, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r1838, %r2004, %r1837;
	// end inline asm
	mov.u32 	%r3679, %r1646;
	mov.u32 	%r3680, %r1646;
	mov.u32 	%r3681, %r1646;
	mov.u32 	%r3682, %r1646;
	@%p237 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_149;
$L__BB0_195:                            // %pass8600
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3679, [%rd22];
	ld.shared.u32 	%r3680, [%rd23];
	ld.shared.u32 	%r3681, [%rd24];
	ld.shared.u32 	%r3682, [%rd25];
$L__BB0_149:                            // %L19395
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2048, %r2045}, {%r450, %r453}, {%r3679}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2057, %r2054}, {%r450, %r453}, {%r3680}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2066, %r2063}, {%r450, %r453}, {%r3681}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2075, %r2072}, {%r450, %r453}, {%r3682}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2041, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r2041, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r502, %r2048, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2050, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2050, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r502, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2059, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2059, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r502, %r2066, %r2061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2068, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r2068, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r502, %r2075, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r505, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r502, %r2045, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2084, %r505, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r502, %r2054, %r2084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r505, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r502, %r2063, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r505, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r502, %r2072, %r2098;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2146, %r2149}, {%r546, %r552, %r549, %r555}, {%r2046, %r2080}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2165, %r2168}, {%r546, %r552, %r549, %r555}, {%r2055, %r2087}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2153, %r2157}, {%r546, %r552, %r549, %r555}, {%r2064, %r2094}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2176}, {%r546, %r552, %r549, %r555}, {%r2073, %r2101}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2146, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r2149, %r2149, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r2153, %r2153, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r2157, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r1838, %r2156, %r1989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r2165, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r2168, %r2168, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r2172, %r2172, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r2176, %r2176, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2179, %r1838, %r2175, %r2008;
	// end inline asm
	mov.u32 	%r3683, %r1646;
	mov.u32 	%r3684, %r1646;
	mov.u32 	%r3685, %r1646;
	mov.u32 	%r3686, %r1646;
	@%p237 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %pass9201
                                        //   in Loop: Header=BB0_146 Depth=2
	ld.shared.u32 	%r3683, [%rd26];
	ld.shared.u32 	%r3684, [%rd27];
	ld.shared.u32 	%r3685, [%rd28];
	ld.shared.u32 	%r3686, [%rd29];
$L__BB0_150:                            // %L20606
                                        //   in Loop: Header=BB0_146 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2219, %r2216}, {%r450, %r453}, {%r3683}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2228, %r2225}, {%r450, %r453}, {%r3684}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2237, %r2234}, {%r450, %r453}, {%r3685}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2246, %r2243}, {%r450, %r453}, {%r3686}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2212, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r2212, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r502, %r2219, %r2214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2221, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r2221, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r502, %r2228, %r2223;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2230, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r2230, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r502, %r2237, %r2232;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2239, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2241, %r2239, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r502, %r2246, %r2241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r505, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2251, %r502, %r2216, %r2248;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r505, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r502, %r2225, %r2255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r505, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r502, %r2234, %r2262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r505, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2272, %r502, %r2243, %r2269;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2317, %r2320}, {%r546, %r552, %r549, %r555}, {%r2217, %r2251}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2336, %r2339}, {%r546, %r552, %r549, %r555}, {%r2226, %r2258}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2324, %r2328}, {%r546, %r552, %r549, %r555}, {%r2235, %r2265}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2343, %r2347}, {%r546, %r552, %r549, %r555}, {%r2244, %r2272}, {%r1646, %r1646};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2316, %r2317, %r2317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2319, %r2320, %r2320, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r2324, %r2324, %r2319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r2328, %r2328, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r1838, %r2327, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2335, %r2336, %r2336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2338, %r2339, %r2339, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2342, %r2343, %r2343, %r2338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2346, %r2347, %r2347, %r2342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r1838, %r2346, %r2179;
	// end inline asm
	add.s32 	%r3667, %r3667, 4;
	setp.ne.s32 	%p247, %r3667, 40;
	@%p247 bra 	$L__BB0_153;
// %bb.151:                             // %L20756
                                        //   in Loop: Header=BB0_146 Depth=2
	@%p237 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_152;
$L__BB0_197:                            // %pass9676
                                        //   in Loop: Header=BB0_146 Depth=2
	mul.lo.s32 	%r2354, %r3668, 55296;
	add.s32 	%r2355, %r115, %r2354;
	cvt.s64.s32 	%rd224, %r2355;
	add.s64 	%rd225, %rd224, %rd14;
	mul.hi.s64 	%rd226, %rd225, 341606371735362067;
	shr.u64 	%rd227, %rd226, 63;
	shr.s64 	%rd228, %rd226, 23;
	add.s64 	%rd229, %rd228, %rd227;
	setp.lt.s64 	%p249, %rd225, 0;
	mul.lo.s64 	%rd230, %rd229, 452984832;
	setp.ne.s64 	%p250, %rd230, %rd225;
	and.pred  	%p251, %p249, %p250;
	selp.s64 	%rd231, -1, 0, %p251;
	add.s64 	%rd232, %rd229, %rd231;
	mul.lo.s64 	%rd233, %rd232, -452984832;
	add.s64 	%rd234, %rd233, %rd225;
	shl.b64 	%rd235, %rd234, 2;
	add.s64 	%rd236, %rd4, %rd235;
	st.global.u32 	[%rd236], %r3670;
	add.s32 	%r2356, %r116, %r2354;
	cvt.s64.s32 	%rd237, %r2356;
	add.s64 	%rd238, %rd237, %rd14;
	mul.hi.s64 	%rd239, %rd238, 341606371735362067;
	shr.u64 	%rd240, %rd239, 63;
	shr.s64 	%rd241, %rd239, 23;
	add.s64 	%rd242, %rd241, %rd240;
	setp.lt.s64 	%p252, %rd238, 0;
	mul.lo.s64 	%rd243, %rd242, 452984832;
	setp.ne.s64 	%p253, %rd243, %rd238;
	and.pred  	%p254, %p252, %p253;
	selp.s64 	%rd244, -1, 0, %p254;
	add.s64 	%rd245, %rd242, %rd244;
	mul.lo.s64 	%rd246, %rd245, -452984832;
	add.s64 	%rd247, %rd246, %rd238;
	shl.b64 	%rd248, %rd247, 2;
	add.s64 	%rd249, %rd4, %rd248;
	st.global.u32 	[%rd249], %r3669;
	bra.uni 	$L__BB0_152;
$L__BB0_154:                            // %L21108.preheader
                                        //   in Loop: Header=BB0_143 Depth=1
	mov.u32 	%r3691, 12;
	bra.uni 	$L__BB0_155;
$L__BB0_161:                            // %L30742
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3668, %r3668, 1;
	mov.u32 	%r3667, 0;
	mov.u32 	%r3669, %r3667;
	mov.u32 	%r3670, %r3667;
$L__BB0_162:                            // %L30743
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3691, %r3691, -4;
	setp.ne.s32 	%p274, %r3691, -12;
	@%p274 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_163;
$L__BB0_155:                            // %L21108
                                        //   Parent Loop BB0_143 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p257, %r3691, 12;
	selp.b32 	%r2896, %r3642, 0, %p257;
	setp.eq.s32 	%p258, %r3691, 8;
	selp.b32 	%r2897, %r3646, %r2896, %p258;
	setp.eq.s32 	%p259, %r3691, 4;
	selp.b32 	%r2898, %r3650, %r2897, %p259;
	setp.eq.s32 	%p260, %r3691, 0;
	selp.b32 	%r2899, %r3654, %r2898, %p260;
	setp.eq.s32 	%p261, %r3691, -4;
	selp.b32 	%r2900, %r3658, %r2899, %p261;
	setp.eq.s32 	%p262, %r3691, -8;
	selp.b32 	%r2901, %r3662, %r2900, %p262;
	selp.b32 	%r2902, %r3643, 0, %p257;
	selp.b32 	%r2903, %r3647, %r2902, %p258;
	selp.b32 	%r2904, %r3651, %r2903, %p259;
	selp.b32 	%r2905, %r3655, %r2904, %p260;
	selp.b32 	%r2906, %r3659, %r2905, %p261;
	selp.b32 	%r2907, %r3663, %r2906, %p262;
	selp.b32 	%r2908, %r3644, 0, %p257;
	selp.b32 	%r2909, %r3648, %r2908, %p258;
	selp.b32 	%r2910, %r3652, %r2909, %p259;
	selp.b32 	%r2911, %r3656, %r2910, %p260;
	selp.b32 	%r2912, %r3660, %r2911, %p261;
	selp.b32 	%r2913, %r3664, %r2912, %p262;
	selp.b32 	%r2914, %r3645, 0, %p257;
	selp.b32 	%r2915, %r3649, %r2914, %p258;
	selp.b32 	%r2916, %r3653, %r2915, %p259;
	selp.b32 	%r2917, %r3657, %r2916, %p260;
	selp.b32 	%r2918, %r3661, %r2917, %p261;
	selp.b32 	%r2919, %r3665, %r2918, %p262;
	// begin inline asm
	mov.b32 %r2386, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2920, %r2901, 8;
	xor.b32  	%r2396, %r2920, 8947848;
	// begin inline asm
	lop3.b32 %r2383, %r1251, %r2396, %r2386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2387, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2386, %r2387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2391, %r2383, %r2388;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2394, %r1262, %r2396, %r2397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2398, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2397, %r2398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2402, %r2394, %r2399;
	// end inline asm
	// begin inline asm
	mov.b32 %r2432, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2443, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2921, %r2907, 8;
	xor.b32  	%r2442, %r2921, 8947848;
	// begin inline asm
	lop3.b32 %r2429, %r1251, %r2442, %r2432, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2432, %r2433;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2437, %r2429, %r2434;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2440, %r1262, %r2442, %r2443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2444, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2445, %r2443, %r2444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2448, %r2440, %r2445;
	// end inline asm
	// begin inline asm
	mov.b32 %r2478, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2489, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2922, %r2913, 8;
	xor.b32  	%r2488, %r2922, 8947848;
	// begin inline asm
	lop3.b32 %r2475, %r1251, %r2488, %r2478, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2480, %r2478, %r2479;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2483, %r2475, %r2480;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2486, %r1262, %r2488, %r2489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2490, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2491, %r2489, %r2490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2494, %r2486, %r2491;
	// end inline asm
	// begin inline asm
	mov.b32 %r2524, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2535, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2923, %r2919, 8;
	xor.b32  	%r2534, %r2923, 8947848;
	// begin inline asm
	lop3.b32 %r2521, %r1251, %r2534, %r2524, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2526, %r2524, %r2525;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2529, %r2521, %r2526;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2532, %r1262, %r2534, %r2535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2536, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2537, %r2535, %r2536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2540, %r2532, %r2537;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2391;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2543, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2402;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2546, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2437;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2448;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2552, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2483;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2555, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2494;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2558, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2529;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2561, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2540;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2564, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2895, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2630, %r2627}, {%r336, %r339}, {%r2543}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2639, %r2636}, {%r336, %r339}, {%r2546}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2648, %r2645}, {%r336, %r339}, {%r2549}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2657, %r2654}, {%r336, %r339}, {%r2552}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2666, %r2663}, {%r336, %r339}, {%r2555}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2675, %r2672}, {%r336, %r339}, {%r2558}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2684, %r2681}, {%r336, %r339}, {%r2561}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2690}, {%r336, %r339}, {%r2564}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2623, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2625, %r2623, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2628, %r388, %r2630, %r2625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2632, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2634, %r2632, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2637, %r388, %r2639, %r2634;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2646, %r388, %r2648, %r2643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2655, %r388, %r2657, %r2652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r388, %r2666, %r2661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r388, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r388, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r388, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r391, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r388, %r2627, %r2695;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r391, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r388, %r2636, %r2702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r391, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r388, %r2645, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r391, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r388, %r2654, %r2716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r391, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r388, %r2663, %r2723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r391, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r388, %r2672, %r2730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r391, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r388, %r2681, %r2737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r391, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r388, %r2690, %r2744;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2832, %r2833}, {%r432, %r438, %r435, %r441}, {%r2628, %r2698}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2840, %r2841}, {%r432, %r438, %r435, %r441}, {%r2637, %r2705}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2848, %r2849}, {%r432, %r438, %r435, %r441}, {%r2646, %r2712}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2856, %r2857}, {%r432, %r438, %r435, %r441}, {%r2655, %r2719}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2864, %r2865}, {%r432, %r438, %r435, %r441}, {%r2664, %r2726}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2872, %r2873}, {%r432, %r438, %r435, %r441}, {%r2673, %r2733}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2880, %r2881}, {%r432, %r438, %r435, %r441}, {%r2682, %r2740}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2888, %r2889}, {%r432, %r438, %r435, %r441}, {%r2691, %r2747}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2831, %r2832, %r2833, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2835, %r2832, %r2833, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2839, %r2840, %r2841, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2843, %r2840, %r2841, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2847, %r2848, %r2849, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2851, %r2848, %r2849, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2855, %r2856, %r2857, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2859, %r2856, %r2857, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2863, %r2864, %r2865, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2867, %r2864, %r2865, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2871, %r2872, %r2873, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2875, %r2872, %r2873, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2879, %r2880, %r2881, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2883, %r2880, %r2881, %r911;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2887, %r2888, %r2889, %r907;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2891, %r2888, %r2889, %r911;
	// end inline asm
	st.shared.u32 	[%rd6], %r2831;
	st.shared.u32 	[%rd7], %r2835;
	st.shared.u32 	[%rd8], %r2839;
	st.shared.u32 	[%rd9+128], %r2843;
	st.shared.u32 	[%rd6+256], %r2847;
	st.shared.u32 	[%rd16+256], %r2851;
	st.shared.u32 	[%rd8+256], %r2855;
	st.shared.u32 	[%rd17+256], %r2859;
	st.shared.u32 	[%rd6+512], %r2863;
	st.shared.u32 	[%rd16+512], %r2867;
	st.shared.u32 	[%rd8+512], %r2871;
	st.shared.u32 	[%rd17+512], %r2875;
	st.shared.u32 	[%rd6+768], %r2879;
	st.shared.u32 	[%rd16+768], %r2883;
	st.shared.u32 	[%rd8+768], %r2887;
	st.shared.u32 	[%rd17+768], %r2891;
	bar.sync 	0;
	mov.u32 	%r3696, %r2895;
	mov.u32 	%r3697, %r2895;
	mov.u32 	%r3698, %r2895;
	mov.u32 	%r3699, %r2895;
	@%p237 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_156;
$L__BB0_198:                            // %pass12060
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3699, [%rd10];
	ld.shared.u32 	%r3698, [%rd11];
	ld.shared.u32 	%r3697, [%rd12];
	ld.shared.u32 	%r3696, [%rd13];
$L__BB0_156:                            // %L26633
                                        //   in Loop: Header=BB0_155 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2959, %r2956}, {%r450, %r453}, {%r3699}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2968, %r2965}, {%r450, %r453}, {%r3698}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2977, %r2974}, {%r450, %r453}, {%r3697}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2986, %r2983}, {%r450, %r453}, {%r3696}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2952, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r2952, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r502, %r2959, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2961, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r2961, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r502, %r2968, %r2963;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2970, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2972, %r2970, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r502, %r2977, %r2972;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2979, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2981, %r2979, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r502, %r2986, %r2981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2988, %r505, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2991, %r502, %r2956, %r2988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2995, %r505, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r502, %r2965, %r2995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3002, %r505, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r502, %r2974, %r3002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3009, %r505, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3012, %r502, %r2983, %r3009;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3057, %r3060}, {%r546, %r552, %r549, %r555}, {%r2957, %r2991}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3076, %r3079}, {%r546, %r552, %r549, %r555}, {%r2966, %r2998}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3064, %r3068}, {%r546, %r552, %r549, %r555}, {%r2975, %r3005}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3083, %r3087}, {%r546, %r552, %r549, %r555}, {%r2984, %r3012}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r3057, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r3060, %r3060, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r3068, %r3068, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r1838, %r3067, %r3670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3075, %r3076, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3078, %r3079, %r3079, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r3083, %r3083, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3086, %r3087, %r3087, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r1838, %r3086, %r3669;
	// end inline asm
	mov.u32 	%r3700, %r2895;
	mov.u32 	%r3701, %r2895;
	mov.u32 	%r3702, %r2895;
	mov.u32 	%r3703, %r2895;
	@%p237 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_157;
$L__BB0_199:                            // %pass12661
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3703, [%rd18];
	ld.shared.u32 	%r3702, [%rd19];
	ld.shared.u32 	%r3701, [%rd20];
	ld.shared.u32 	%r3700, [%rd21];
$L__BB0_157:                            // %L27844
                                        //   in Loop: Header=BB0_155 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3130, %r3127}, {%r450, %r453}, {%r3703}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3139, %r3136}, {%r450, %r453}, {%r3702}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3148, %r3145}, {%r450, %r453}, {%r3701}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3157, %r3154}, {%r450, %r453}, {%r3700}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3123, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3125, %r3123, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r502, %r3130, %r3125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3132, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3134, %r3132, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r502, %r3139, %r3134;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r3141, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r502, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r3150, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r502, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r505, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r502, %r3127, %r3159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3166, %r505, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r502, %r3136, %r3166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3173, %r505, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r502, %r3145, %r3173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3180, %r505, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r502, %r3154, %r3180;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3228, %r3231}, {%r546, %r552, %r549, %r555}, {%r3128, %r3162}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3247, %r3250}, {%r546, %r552, %r549, %r555}, {%r3137, %r3169}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3235, %r3239}, {%r546, %r552, %r549, %r555}, {%r3146, %r3176}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3254, %r3258}, {%r546, %r552, %r549, %r555}, {%r3155, %r3183}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r3228, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r3231, %r3231, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r3235, %r3235, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r3239, %r3239, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r1838, %r3238, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3246, %r3247, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r3250, %r3250, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r3254, %r3254, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r3258, %r3258, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r1838, %r3257, %r3090;
	// end inline asm
	mov.u32 	%r3704, %r2895;
	mov.u32 	%r3705, %r2895;
	mov.u32 	%r3706, %r2895;
	mov.u32 	%r3707, %r2895;
	@%p237 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13262
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3707, [%rd22];
	ld.shared.u32 	%r3706, [%rd23];
	ld.shared.u32 	%r3705, [%rd24];
	ld.shared.u32 	%r3704, [%rd25];
$L__BB0_158:                            // %L29055
                                        //   in Loop: Header=BB0_155 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3301, %r3298}, {%r450, %r453}, {%r3707}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3310, %r3307}, {%r450, %r453}, {%r3706}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3319, %r3316}, {%r450, %r453}, {%r3705}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3328, %r3325}, {%r450, %r453}, {%r3704}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3294, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3296, %r3294, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r502, %r3301, %r3296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3303, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3305, %r3303, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r502, %r3310, %r3305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3312, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r3312, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r502, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3321, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3323, %r3321, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3326, %r502, %r3328, %r3323;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3330, %r505, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r502, %r3298, %r3330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3337, %r505, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3340, %r502, %r3307, %r3337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3344, %r505, %r3319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r502, %r3316, %r3344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3351, %r505, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3354, %r502, %r3325, %r3351;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3399, %r3402}, {%r546, %r552, %r549, %r555}, {%r3299, %r3333}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3418, %r3421}, {%r546, %r552, %r549, %r555}, {%r3308, %r3340}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3406, %r3410}, {%r546, %r552, %r549, %r555}, {%r3317, %r3347}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3425, %r3429}, {%r546, %r552, %r549, %r555}, {%r3326, %r3354}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3398, %r3399, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r3402, %r3402, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r3406, %r3406, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r3410, %r3410, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3413, %r1838, %r3409, %r3242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3417, %r3418, %r3418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3420, %r3421, %r3421, %r3417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3424, %r3425, %r3425, %r3420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3428, %r3429, %r3429, %r3424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3432, %r1838, %r3428, %r3261;
	// end inline asm
	mov.u32 	%r3708, %r2895;
	mov.u32 	%r3709, %r2895;
	mov.u32 	%r3710, %r2895;
	mov.u32 	%r3711, %r2895;
	@%p237 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_159;
$L__BB0_201:                            // %pass13863
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3711, [%rd26];
	ld.shared.u32 	%r3710, [%rd27];
	ld.shared.u32 	%r3709, [%rd28];
	ld.shared.u32 	%r3708, [%rd29];
$L__BB0_159:                            // %L30266
                                        //   in Loop: Header=BB0_155 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3472, %r3469}, {%r450, %r453}, {%r3711}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3481, %r3478}, {%r450, %r453}, {%r3710}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3490, %r3487}, {%r450, %r453}, {%r3709}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3499, %r3496}, {%r450, %r453}, {%r3708}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3465, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3467, %r3465, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r502, %r3472, %r3467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3474, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3476, %r3474, %r3478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r502, %r3481, %r3476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3483, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3485, %r3483, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r502, %r3490, %r3485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3492, %r505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3494, %r3492, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r502, %r3499, %r3494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3501, %r505, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r502, %r3469, %r3501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3508, %r505, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r502, %r3478, %r3508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3515, %r505, %r3490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r502, %r3487, %r3515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3522, %r505, %r3499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r502, %r3496, %r3522;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3570, %r3573}, {%r546, %r552, %r549, %r555}, {%r3470, %r3504}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3589, %r3592}, {%r546, %r552, %r549, %r555}, {%r3479, %r3511}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3577, %r3581}, {%r546, %r552, %r549, %r555}, {%r3488, %r3518}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3596, %r3600}, {%r546, %r552, %r549, %r555}, {%r3497, %r3525}, {%r2895, %r2895};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r3570, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r3573, %r3573, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r3577, %r3577, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r3581, %r3581, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r1838, %r3580, %r3413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3588, %r3589, %r3589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r3592, %r3592, %r3588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r3596, %r3596, %r3591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r3600, %r3600, %r3595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r1838, %r3599, %r3432;
	// end inline asm
	add.s32 	%r3667, %r3667, 4;
	setp.ne.s32 	%p266, %r3667, 40;
	@%p266 bra 	$L__BB0_162;
// %bb.160:                             // %L30416
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p237 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_161;
$L__BB0_202:                            // %pass14338
                                        //   in Loop: Header=BB0_155 Depth=2
	mul.lo.s32 	%r3607, %r3668, 55296;
	add.s32 	%r3608, %r115, %r3607;
	cvt.s64.s32 	%rd250, %r3608;
	add.s64 	%rd251, %rd250, %rd14;
	mul.hi.s64 	%rd252, %rd251, 341606371735362067;
	shr.u64 	%rd253, %rd252, 63;
	shr.s64 	%rd254, %rd252, 23;
	add.s64 	%rd255, %rd254, %rd253;
	setp.lt.s64 	%p268, %rd251, 0;
	mul.lo.s64 	%rd256, %rd255, 452984832;
	setp.ne.s64 	%p269, %rd256, %rd251;
	and.pred  	%p270, %p268, %p269;
	selp.s64 	%rd257, -1, 0, %p270;
	add.s64 	%rd258, %rd255, %rd257;
	mul.lo.s64 	%rd259, %rd258, -452984832;
	add.s64 	%rd260, %rd259, %rd251;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3670;
	add.s32 	%r3609, %r116, %r3607;
	cvt.s64.s32 	%rd263, %r3609;
	add.s64 	%rd264, %rd263, %rd14;
	mul.hi.s64 	%rd265, %rd264, 341606371735362067;
	shr.u64 	%rd266, %rd265, 63;
	shr.s64 	%rd267, %rd265, 23;
	add.s64 	%rd268, %rd267, %rd266;
	setp.lt.s64 	%p271, %rd264, 0;
	mul.lo.s64 	%rd269, %rd268, 452984832;
	setp.ne.s64 	%p272, %rd269, %rd264;
	and.pred  	%p273, %p271, %p272;
	selp.s64 	%rd270, -1, 0, %p273;
	add.s64 	%rd271, %rd268, %rd270;
	mul.lo.s64 	%rd272, %rd271, -452984832;
	add.s64 	%rd273, %rd272, %rd264;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd4, %rd274;
	st.global.u32 	[%rd275], %r3669;
	bra.uni 	$L__BB0_161;
$L__BB0_164:                            // %L30778
	mov.u32 	%r3611, 0;
	st.global.u32 	[%rd5], %r3611;
	ret;
$L__BB0_6:                              // %L157
	mov.u32 	%r3612, 2;
	st.global.u32 	[%rd5], %r3612;
	mov.u64 	%rd276, exception2816;
	cvta.global.u64 	%rd277, %rd276;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd277;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r310;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception12827;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r310;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
