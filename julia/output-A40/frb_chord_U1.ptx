// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<315>;
	.reg .b16 	%rs<238>;
	.reg .b32 	%r<3808>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<362>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r388, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r397, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r397, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd36, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r389, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r398, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r399, %r398, %r2;
	add.s32 	%r400, %r399, %r4;
	mul.wide.u32 	%rd43, %r400, 4;
	add.s64 	%rd6, %rd36, %rd43;
	mov.u32 	%r401, 1;
	st.global.u32 	[%rd6], %r401;
	setp.gt.u32 	%p4, %r389, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r390, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r390, %r389;
	setp.gt.s32 	%p6, %r390, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r391, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r390, %r389;
	mad.lo.s32 	%r402, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r403, %r402, %r402, 4;
	setp.gt.u32 	%p8, %r403, 89478484;
	setp.gt.u32 	%p9, %r391, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r392, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r392, %r391;
	setp.lt.s32 	%p12, %r392, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r404, %r392, %r391;
	mul.hi.s32 	%r405, %r5, 715827883;
	shr.u32 	%r406, %r405, 31;
	shr.s32 	%r407, %r405, 5;
	add.s32 	%r408, %r407, %r406;
	setp.eq.s32 	%p14, %r404, %r408;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r393, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r393, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r395, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r394, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r394, %r393;
	setp.gt.s32 	%p17, %r394, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r395, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r396, %r395;
	setp.gt.s32 	%p22, %r396, 512;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r409, %r396, %r395;
	sub.s32 	%r410, %r394, %r393;
	setp.eq.s32 	%p24, %r409, %r410;
	@%p24 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_12;
$L__BB0_197:                            // %pass162
	and.b32  	%r253, %r2, 3;
	shr.u32 	%r254, %r2, 2;
	mul.lo.s32 	%r411, %r253, %r254;
	and.b32  	%r412, %r411, 7;
	cvt.rn.f32.s32 	%f201, %r412;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p314, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_209;
// %bb.198:
	@%p314 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r256, %f785;
	and.b32  	%r413, %r256, 8388607;
	or.b32  	%r3803, %r413, 1065353216;
	mov.b32 	%f780, %r3803;
	add.s32 	%r414, %r256, -1073741824;
	and.b32  	%r3804, %r414, -8388608;
	setp.eq.s32 	%p32, %r3804, 0;
	@%p32 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r3804, 192937984;
	add.s32 	%r416, %r3803, %r415;
	mov.b32 	%f213, %r416;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3804, %r3804, %r415;
	mov.b32 	%r3803, %f780;
	setp.ne.s32 	%p33, %r3804, 0;
	setp.ne.s32 	%p34, %r3803, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r256, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r255, %f172;
	setp.lt.u32 	%p27, %r255, 1073741824;
	@%p27 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p28, %r255, -2147483647;
	@%p28 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r417, %f169;
	and.b32  	%r263, %r417, -2147483648;
	@%p37 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r418, %f781;
	or.b32  	%r419, %r263, %r418;
	mov.b32 	%f781, %r419;
$L__BB0_211:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r266, %r2, 1;
	and.b32  	%r267, %r266, 6;
	or.b32  	%r268, %r267, 1;
	setp.eq.s32 	%p45, %r267, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3702, %r267, %r254;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3702;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r435, %r7, 8388607;
	or.b32  	%r3705, %r435, 1065353216;
	mov.b32 	%f732, %r3705;
	add.s32 	%r436, %r7, -1073741824;
	and.b32  	%r3706, %r436, -8388608;
	setp.eq.s32 	%p53, %r3706, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1020.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1020
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3706, 192937984;
	add.s32 	%r438, %r3705, %r437;
	mov.b32 	%f267, %r438;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3706, %r3706, %r437;
	mov.b32 	%r3705, %f732;
	setp.ne.s32 	%p54, %r3706, 0;
	setp.ne.s32 	%p55, %r3705, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1022
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i999
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1003
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1006
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1025
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r439, %f1;
	and.b32  	%r440, %r439, -2147483648;
	mov.b32 	%r441, %f733;
	or.b32  	%r442, %r440, %r441;
	mov.b32 	%f733, %r442;
$L__BB0_27:                             // %__nv_fmodf.exit1026
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r443, %f277;
	and.b32  	%r444, %r443, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%f278, %r445;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r446, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r447, %r446, 1;
	setp.eq.b32 	%p61, %r447, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r448, %r446, 2;
	setp.eq.s32 	%p62, %r448, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r449, %r446, 1;
	and.b32  	%r450, %r449, 2;
	setp.eq.s32 	%p63, %r450, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p66, %r268, 5;
	mul.lo.s32 	%r3703, %r268, %r254;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r452, %r3703, -1431655765;
	shr.u32 	%r453, %r452, 5;
	mul.lo.s32 	%r454, %r453, 48;
	sub.s32 	%r455, %r3703, %r454;
	cvt.rn.f32.s32 	%f308, %r455;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r456, %r15, 8388607;
	or.b32  	%r3707, %r456, 1065353216;
	mov.b32 	%f738, %r3707;
	add.s32 	%r457, %r15, -1073741824;
	and.b32  	%r3708, %r457, -8388608;
	setp.eq.s32 	%p74, %r3708, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1051.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1051
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r458, %r3708, 192937984;
	add.s32 	%r459, %r3707, %r458;
	mov.b32 	%f320, %r459;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3708, %r3708, %r458;
	mov.b32 	%r3707, %f738;
	setp.ne.s32 	%p75, %r3708, 0;
	setp.ne.s32 	%p76, %r3707, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1053
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i1030
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1034
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1037
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r460, %f22;
	and.b32  	%r461, %r460, -2147483648;
	mov.b32 	%r462, %f739;
	or.b32  	%r463, %r461, %r462;
	mov.b32 	%f739, %r463;
$L__BB0_43:                             // %__nv_fmodf.exit1057
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r464, %f330;
	and.b32  	%r465, %r464, -2147483648;
	or.b32  	%r466, %r465, 1056964608;
	mov.b32 	%f331, %r466;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r467, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r468, %r467, 1;
	setp.eq.b32 	%p82, %r468, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r469, %r467, 2;
	setp.eq.s32 	%p83, %r469, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r470, %r467, 1;
	and.b32  	%r471, %r470, 2;
	setp.eq.s32 	%p84, %r471, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p88, %r2, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3702;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r479, %r25, 8388607;
	or.b32  	%r3709, %r479, 1065353216;
	mov.b32 	%f744, %r3709;
	add.s32 	%r480, %r25, -1073741824;
	and.b32  	%r3710, %r480, -8388608;
	setp.eq.s32 	%p96, %r3710, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1082.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1082
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r481, %r3710, 192937984;
	add.s32 	%r482, %r3709, %r481;
	mov.b32 	%f373, %r482;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3710, %r3710, %r481;
	mov.b32 	%r3709, %f744;
	setp.ne.s32 	%p97, %r3710, 0;
	setp.ne.s32 	%p98, %r3709, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1084
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1061
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1065
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1068
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1087
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r483, %f43;
	and.b32  	%r484, %r483, -2147483648;
	mov.b32 	%r485, %f745;
	or.b32  	%r486, %r484, %r485;
	mov.b32 	%f745, %r486;
$L__BB0_59:                             // %__nv_fmodf.exit1088
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r487, %f383;
	and.b32  	%r488, %r487, -2147483648;
	or.b32  	%r489, %r488, 1056964608;
	mov.b32 	%f384, %r489;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r490, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r491, %r490, 1;
	setp.eq.b32 	%p104, %r491, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r492, %r490, 2;
	setp.eq.s32 	%p105, %r492, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r493, %r490, 1;
	and.b32  	%r494, %r493, 2;
	setp.eq.s32 	%p106, %r494, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r496, %r3703, -1431655765;
	shr.u32 	%r497, %r496, 2;
	mul.lo.s32 	%r498, %r497, 6;
	sub.s32 	%r499, %r3703, %r498;
	cvt.rn.f32.s32 	%f414, %r499;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r500, %r33, 8388607;
	or.b32  	%r3711, %r500, 1065353216;
	mov.b32 	%f750, %r3711;
	add.s32 	%r501, %r33, -1073741824;
	and.b32  	%r3712, %r501, -8388608;
	setp.eq.s32 	%p118, %r3712, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1113.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1113
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r502, %r3712, 192937984;
	add.s32 	%r503, %r3711, %r502;
	mov.b32 	%f426, %r503;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3712, %r3712, %r502;
	mov.b32 	%r3711, %f750;
	setp.ne.s32 	%p119, %r3712, 0;
	setp.ne.s32 	%p120, %r3711, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1115
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1092
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1096
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1099
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1118
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r504, %f64;
	and.b32  	%r505, %r504, -2147483648;
	mov.b32 	%r506, %f751;
	or.b32  	%r507, %r505, %r506;
	mov.b32 	%f751, %r507;
$L__BB0_75:                             // %__nv_fmodf.exit1119
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r508, %f436;
	and.b32  	%r509, %r508, -2147483648;
	or.b32  	%r510, %r509, 1056964608;
	mov.b32 	%f437, %r510;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r511, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r512, %r511, 1;
	setp.eq.b32 	%p126, %r512, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r513, %r511, 2;
	setp.eq.s32 	%p127, %r513, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r514, %r511, 1;
	and.b32  	%r515, %r514, 2;
	setp.eq.s32 	%p128, %r515, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L673
	@%p25 bra 	$L__BB0_219;
// %bb.77:
	@%p314 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_78;
$L__BB0_215:
	mov.b32 	%r270, %f785;
	and.b32  	%r528, %r270, 8388607;
	or.b32  	%r3805, %r528, 1065353216;
	mov.b32 	%f784, %r3805;
	add.s32 	%r529, %r270, -1073741824;
	and.b32  	%r3806, %r529, -8388608;
	setp.eq.s32 	%p138, %r3806, 0;
	@%p138 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i1144.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i1144
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r530, %r3806, 192937984;
	add.s32 	%r531, %r3805, %r530;
	mov.b32 	%f476, %r531;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3806, %r3806, %r530;
	mov.b32 	%r3805, %f784;
	setp.ne.s32 	%p139, %r3806, 0;
	setp.ne.s32 	%p140, %r3805, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i1146
	setp.gt.u32 	%p142, %r270, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_219;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1123
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r269, %f187;
	setp.lt.u32 	%p133, %r269, 1073741824;
	@%p133 bra 	$L__BB0_214;
// %bb.79:
	setp.lt.u32 	%p134, %r269, -2147483647;
	@%p134 bra 	$L__BB0_212;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i1127
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i1130
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i1149
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r532, %f785;
	or.b32  	%r533, %r263, %r532;
	mov.b32 	%f785, %r533;
$L__BB0_221:                            // %__nv_fmodf.exit1150
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3702;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r549, %r45, 8388607;
	or.b32  	%r3713, %r549, 1065353216;
	mov.b32 	%f756, %r3713;
	add.s32 	%r550, %r45, -1073741824;
	and.b32  	%r3714, %r550, -8388608;
	setp.eq.s32 	%p159, %r3714, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1175.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1175
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r551, %r3714, 192937984;
	add.s32 	%r552, %r3713, %r551;
	mov.b32 	%f530, %r552;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3714, %r3714, %r551;
	mov.b32 	%r3713, %f756;
	setp.ne.s32 	%p160, %r3714, 0;
	setp.ne.s32 	%p161, %r3713, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1177
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1154
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1158
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1161
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1180
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r553, %f85;
	and.b32  	%r554, %r553, -2147483648;
	mov.b32 	%r555, %f757;
	or.b32  	%r556, %r554, %r555;
	mov.b32 	%f757, %r556;
$L__BB0_95:                             // %__nv_fmodf.exit1181
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r557, %f540;
	and.b32  	%r558, %r557, -2147483648;
	or.b32  	%r559, %r558, 1056964608;
	mov.b32 	%f541, %r559;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r560, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r561, %r560, 1;
	setp.eq.b32 	%p167, %r561, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r562, %r560, 2;
	setp.eq.s32 	%p168, %r562, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r563, %r560, 1;
	and.b32  	%r564, %r563, 2;
	setp.eq.s32 	%p169, %r564, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r566, %r3703, -1431655765;
	shr.u32 	%r567, %r566, 5;
	mul.lo.s32 	%r568, %r567, 48;
	sub.s32 	%r569, %r3703, %r568;
	cvt.rn.f32.s32 	%f571, %r569;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r570, %r53, 8388607;
	or.b32  	%r3715, %r570, 1065353216;
	mov.b32 	%f762, %r3715;
	add.s32 	%r571, %r53, -1073741824;
	and.b32  	%r3716, %r571, -8388608;
	setp.eq.s32 	%p180, %r3716, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1206.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1206
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r572, %r3716, 192937984;
	add.s32 	%r573, %r3715, %r572;
	mov.b32 	%f583, %r573;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3716, %r3716, %r572;
	mov.b32 	%r3715, %f762;
	setp.ne.s32 	%p181, %r3716, 0;
	setp.ne.s32 	%p182, %r3715, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1208
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1185
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1189
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1192
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1211
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r574, %f106;
	and.b32  	%r575, %r574, -2147483648;
	mov.b32 	%r576, %f763;
	or.b32  	%r577, %r575, %r576;
	mov.b32 	%f763, %r577;
$L__BB0_111:                            // %__nv_fmodf.exit1212
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r578, %f593;
	and.b32  	%r579, %r578, -2147483648;
	or.b32  	%r580, %r579, 1056964608;
	mov.b32 	%f594, %r580;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r581, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r582, %r581, 1;
	setp.eq.b32 	%p188, %r582, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r583, %r581, 2;
	setp.eq.s32 	%p189, %r583, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r584, %r581, 1;
	and.b32  	%r585, %r584, 2;
	setp.eq.s32 	%p190, %r585, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3702;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r593, %r63, 8388607;
	or.b32  	%r3717, %r593, 1065353216;
	mov.b32 	%f768, %r3717;
	add.s32 	%r594, %r63, -1073741824;
	and.b32  	%r3718, %r594, -8388608;
	setp.eq.s32 	%p200, %r3718, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1237.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r595, %r3718, 192937984;
	add.s32 	%r596, %r3717, %r595;
	mov.b32 	%f636, %r596;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3718, %r3718, %r595;
	mov.b32 	%r3717, %f768;
	setp.ne.s32 	%p201, %r3718, 0;
	setp.ne.s32 	%p202, %r3717, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1239
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1216
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1220
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1223
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1242
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r597, %f127;
	and.b32  	%r598, %r597, -2147483648;
	mov.b32 	%r599, %f769;
	or.b32  	%r600, %r598, %r599;
	mov.b32 	%f769, %r600;
$L__BB0_127:                            // %__nv_fmodf.exit1243
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r601, %f646;
	and.b32  	%r602, %r601, -2147483648;
	or.b32  	%r603, %r602, 1056964608;
	mov.b32 	%f647, %r603;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r604, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r605, %r604, 1;
	setp.eq.b32 	%p208, %r605, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r606, %r604, 2;
	setp.eq.s32 	%p209, %r606, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r607, %r604, 1;
	and.b32  	%r608, %r607, 2;
	setp.eq.s32 	%p210, %r608, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r610, %r3703, -1431655765;
	shr.u32 	%r611, %r610, 2;
	mul.lo.s32 	%r612, %r611, 6;
	sub.s32 	%r613, %r3703, %r612;
	cvt.rn.f32.s32 	%f677, %r613;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r614, %r71, 8388607;
	or.b32  	%r3719, %r614, 1065353216;
	mov.b32 	%f774, %r3719;
	add.s32 	%r615, %r71, -1073741824;
	and.b32  	%r3720, %r615, -8388608;
	setp.eq.s32 	%p220, %r3720, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1268.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1268
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r616, %r3720, 192937984;
	add.s32 	%r617, %r3719, %r616;
	mov.b32 	%f689, %r617;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3720, %r3720, %r616;
	mov.b32 	%r3719, %f774;
	setp.ne.s32 	%p221, %r3720, 0;
	setp.ne.s32 	%p222, %r3719, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1270
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1247
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1251
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1254
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1273
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r618, %f148;
	and.b32  	%r619, %r618, -2147483648;
	mov.b32 	%r620, %f775;
	or.b32  	%r621, %r619, %r620;
	mov.b32 	%f775, %r621;
$L__BB0_143:                            // %__nv_fmodf.exit1274
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r622, %f699;
	and.b32  	%r623, %r622, -2147483648;
	or.b32  	%r624, %r623, 1056964608;
	mov.b32 	%f700, %r624;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r625, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r626, %r625, 1;
	setp.eq.b32 	%p228, %r626, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r627, %r625, 2;
	setp.eq.s32 	%p229, %r627, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r628, %r625, 1;
	and.b32  	%r629, %r628, 2;
	setp.eq.s32 	%p230, %r629, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L961
	mov.u32 	%r279, 999999999;
	cvt.u16.u32 	%rs236, %r2;
	@%p88 bra 	$L__BB0_223;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs236, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs236, %rs33;
	cvt.u32.u16 	%r643, %rs34;
	and.b32  	%r644, %r643, 255;
	mad.lo.s32 	%r645, %r644, 24, %r3;
	cvt.u16.u32 	%rs35, %r645;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r646, %rs39;
	mul.wide.u32 	%rd44, %r646, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.u32 	%r647, [%rd45];
	shl.b32 	%r648, %r647, 16;
	cvt.s32.s16 	%r82, %r647;
	shr.s32 	%r83, %r647, 16;
	or.b32  	%r649, %r648, 65535;
	setp.lt.u32 	%p234, %r649, 1638399;
	setp.lt.u32 	%p235, %r647, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_146;
$L__BB0_222:                            // %L1237
	mul.lo.s32 	%r653, %r83, 801;
	mad.lo.s32 	%r279, %r82, 33, %r653;
$L__BB0_223:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r426, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r427, %r426, -2147483648;
	mov.b32 	%r540, %f487;
	or.b32  	%r428, %r427, 1056964608;
	and.b32  	%r541, %r540, -2147483648;
	mov.b32 	%f225, %r428;
	or.b32  	%r542, %r541, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r542;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r429, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r430, %r429, 1;
	cvt.rzi.s32.f32 	%r543, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r430, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r544, %r543, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r431, %r429, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r544, 1;
	setp.eq.s32 	%p41, %r431, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r432, %r429, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r545, %r543, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r433, %r432, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r545, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r546, %r543, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r433, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r547, %r546, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r547, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r422, %f254;
	mov.b32 	%r425, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r421, %r425, -2147483648;
	mov.b32 	%r517, %f62;
	mov.b32 	%r518, %f83;
	mov.b32 	%r523, %f63;
	mov.b32 	%r524, %f84;
	mov.b32 	%r536, %f517;
	mov.b32 	%r539, %f514;
	mov.b32 	%r473, %f20;
	mov.b32 	%r474, %f41;
	mov.b32 	%r476, %f21;
	mov.b32 	%r477, %f42;
	xor.b32  	%r520, %r523, -2147483648;
	xor.b32  	%r521, %r524, -2147483648;
	xor.b32  	%r535, %r539, -2147483648;
	mov.b32 	%r587, %f104;
	mov.b32 	%r588, %f125;
	mov.b32 	%r590, %f105;
	mov.b32 	%r591, %f126;
	mov.b32 	%r631, %f146;
	mov.b32 	%r632, %f167;
	mov.b32 	%r637, %f147;
	xor.b32  	%r634, %r637, -2147483648;
	mov.b32 	%r638, %f168;
	xor.b32  	%r635, %r638, -2147483648;
	and.b32  	%r654, %r2, 24;
	setp.ne.s32 	%p237, %r654, 24;
	cvt.u16.u32 	%rs237, %r254;
	@%p237 bra 	$L__BB0_147;
// %bb.224:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs237, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs237, %rs49;
	cvt.u32.u16 	%r668, %rs50;
	and.b32  	%r3721, %r668, 255;
	mov.u32 	%r86, 0;
	mov.u32 	%r87, %r86;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	and.b32  	%r655, %r1, 15;
	mul.lo.s32 	%r656, %r655, 1152;
	mul.lo.s32 	%r657, %r253, 144;
	mul.lo.s16 	%rs41, %rs237, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs237, %rs43;
	cvt.u32.u16 	%r658, %rs44;
	and.b32  	%r3721, %r658, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r659, %rs45, 24;
	or.b32  	%r660, %r656, %r3;
	add.s32 	%r661, %r660, %r657;
	add.s32 	%r662, %r661, %r659;
	mul.wide.u32 	%rd51, %r662, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r86, [%rd52];
	or.b32  	%r663, %r3, 576;
	add.s32 	%r664, %r663, %r656;
	add.s32 	%r665, %r664, %r657;
	add.s32 	%r666, %r665, %r659;
	mul.wide.u32 	%rd53, %r666, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.u32 	%r87, [%rd54];
$L__BB0_148:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r422;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r472, %r474, %r473;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r475, %r477, %r476;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r516, %r518, %r517;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r519, %r521, %r520;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r522, %r524, %r523;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r525, %r518, %r517;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r537, %r539, %r536;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r586, %r588, %r587;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r589, %r591, %r590;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r630, %r632, %r631;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r633, %r635, %r634;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r636, %r638, %r637;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r639, %r632, %r631;
	// end inline asm
	mov.u32 	%r119, 0;
	shl.b32 	%r670, %r2, 2;
	and.b32  	%r671, %r670, 60;
	shl.b32 	%r672, %r2, 3;
	and.b32  	%r673, %r672, 128;
	or.b32  	%r674, %r671, %r673;
	add.s32 	%r675, %r1, %r393;
	shl.b32 	%r676, %r675, 8;
	or.b32  	%r88, %r674, %r676;
	or.b32  	%r89, %r670, %r673;
	mad.lo.s32 	%r90, %r389, 12288, %r676;
	add.s32 	%r91, %r3, 24;
	shr.u32 	%r677, %r2, 4;
	and.b32  	%r678, %r266, 30;
	or.b32  	%r679, %r678, %r677;
	mul.lo.s32 	%r92, %r679, 257;
	or.b32  	%r680, %r266, %r677;
	or.b32  	%r681, %r680, 32;
	mul.lo.s32 	%r93, %r681, 257;
	and.b16  	%rs52, %rs236, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs236, %rs55;
	cvt.u32.u16 	%r682, %rs56;
	and.b32  	%r94, %r682, 255;
	shr.u32 	%r683, %r3, 3;
	and.b32  	%r684, %r4, 224;
	mad.lo.s32 	%r95, %r683, 257, %r684;
	shr.u32 	%r685, %r91, 3;
	mad.lo.s32 	%r96, %r685, 257, %r684;
	add.s32 	%r686, %r3, 48;
	shr.u32 	%r687, %r686, 3;
	mad.lo.s32 	%r97, %r687, 257, %r684;
	add.s32 	%r688, %r3, 72;
	shr.u32 	%r689, %r688, 3;
	mad.lo.s32 	%r98, %r689, 257, %r684;
	or.b32  	%r690, %r683, 12;
	mad.lo.s32 	%r99, %r690, 257, %r684;
	add.s32 	%r691, %r3, 120;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r100, %r692, 257, %r684;
	add.s32 	%r693, %r3, 144;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r101, %r694, 257, %r684;
	add.s32 	%r695, %r3, 168;
	shr.u32 	%r696, %r695, 3;
	mad.lo.s32 	%r102, %r696, 257, %r684;
	or.b32  	%r697, %r683, 24;
	mad.lo.s32 	%r103, %r697, 257, %r684;
	add.s32 	%r698, %r3, 216;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r104, %r699, 257, %r684;
	add.s32 	%r700, %r3, 240;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r105, %r701, 257, %r684;
	add.s32 	%r702, %r3, 264;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r106, %r703, 257, %r684;
	or.b32  	%r704, %r683, 36;
	mad.lo.s32 	%r107, %r704, 257, %r684;
	add.s32 	%r705, %r3, 312;
	shr.u32 	%r706, %r705, 3;
	mad.lo.s32 	%r108, %r706, 257, %r684;
	add.s32 	%r707, %r3, 336;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r109, %r708, 257, %r684;
	add.s32 	%r709, %r3, 360;
	shr.u32 	%r710, %r709, 3;
	mad.lo.s32 	%r110, %r710, 257, %r684;
	or.b32  	%r711, %r683, 48;
	mad.lo.s32 	%r111, %r711, 257, %r684;
	add.s32 	%r712, %r3, 408;
	shr.u32 	%r713, %r712, 3;
	mad.lo.s32 	%r112, %r713, 257, %r684;
	add.s32 	%r714, %r3, 432;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r113, %r715, 257, %r684;
	add.s32 	%r716, %r3, 456;
	shr.u32 	%r717, %r716, 3;
	mad.lo.s32 	%r114, %r717, 257, %r684;
	or.b32  	%r718, %r683, 60;
	mad.lo.s32 	%r115, %r718, 257, %r684;
	add.s32 	%r719, %r3, 504;
	bfe.u32 	%r720, %r719, 3, 6;
	mad.lo.s32 	%r116, %r720, 257, %r684;
	mul.lo.s32 	%r721, %r3, 33;
	mad.lo.s32 	%r722, %r253, 4806, %r721;
	mad.lo.s32 	%r723, %r3721, 801, %r722;
	and.b32  	%r724, %r2, 1;
	neg.s32 	%r725, %r724;
	and.b32  	%r726, %r725, 4112;
	bfe.s32 	%r727, %r2, 3, 1;
	and.b32  	%r728, %r727, 514;
	mul.lo.s32 	%r729, %r677, 257;
	bfe.s32 	%r730, %r2, 1, 1;
	and.b32  	%r731, %r730, 2056;
	bfe.s32 	%r732, %r2, 2, 1;
	and.b32  	%r733, %r732, 1028;
	add.s32 	%r734, %r729, %r3;
	add.s32 	%r735, %r734, %r728;
	add.s32 	%r736, %r735, %r726;
	add.s32 	%r737, %r736, %r731;
	add.s32 	%r738, %r737, %r733;
	mul.wide.u32 	%rd55, %r738, 4;
	mov.u64 	%rd56, shmem;
	add.s64 	%rd7, %rd56, %rd55;
	or.b32  	%r739, %r3, 8256;
	add.s32 	%r740, %r739, %r729;
	add.s32 	%r741, %r740, %r728;
	add.s32 	%r742, %r741, %r726;
	add.s32 	%r743, %r742, %r731;
	add.s32 	%r744, %r743, %r733;
	mul.wide.u32 	%rd57, %r744, 4;
	add.s64 	%rd8, %rd56, %rd57;
	or.b32  	%r745, %r726, %r728;
	or.b32  	%r746, %r3, 32;
	add.s32 	%r747, %r746, %r729;
	add.s32 	%r748, %r747, %r731;
	add.s32 	%r749, %r748, %r733;
	add.s32 	%r750, %r749, %r745;
	mul.wide.u32 	%rd58, %r750, 4;
	add.s64 	%rd9, %rd56, %rd58;
	or.b32  	%r751, %r3, 8288;
	add.s32 	%r752, %r751, %r729;
	add.s32 	%r753, %r752, %r731;
	add.s32 	%r754, %r753, %r733;
	add.s32 	%r755, %r754, %r745;
	mul.wide.u32 	%rd59, %r755, 4;
	add.s64 	%rd10, %rd56, %rd59;
	bfe.s32 	%r756, %r3, 1, 1;
	and.b32  	%r757, %r756, 4112;
	mul.lo.s32 	%r758, %r253, 6;
	shr.u32 	%r759, %r3, 4;
	mul.lo.s32 	%r760, %r759, 514;
	bfe.s32 	%r761, %r3, 2, 1;
	and.b32  	%r762, %r761, 2056;
	bfe.s32 	%r763, %r3, 3, 1;
	and.b32  	%r764, %r3, 8;
	setp.eq.s32 	%p238, %r764, 0;
	and.b32  	%r765, %r763, 1028;
	and.b32  	%r766, %r3, 1;
	neg.s32 	%r767, %r766;
	and.b32  	%r768, %r767, 8256;
	add.s32 	%r769, %r760, %r758;
	add.s32 	%r770, %r769, %r757;
	add.s32 	%r771, %r770, %r762;
	add.s32 	%r772, %r771, %r765;
	add.s32 	%r773, %r772, %r768;
	add.s32 	%r774, %r773, %r3721;
	mul.wide.u32 	%rd60, %r774, 4;
	add.s64 	%rd11, %rd56, %rd60;
	bfe.s32 	%r775, %r91, 4, 1;
	and.b32  	%r776, %r775, 514;
	shr.u32 	%r777, %r91, 5;
	mul.lo.s32 	%r778, %r777, 257;
	selp.b32 	%r779, 1028, 0, %p238;
	add.s32 	%r780, %r757, %r758;
	add.s32 	%r781, %r780, %r778;
	add.s32 	%r782, %r781, %r762;
	add.s32 	%r783, %r782, %r779;
	add.s32 	%r784, %r783, %r768;
	add.s32 	%r785, %r784, %r3721;
	add.s32 	%r786, %r785, %r776;
	mul.wide.u32 	%rd61, %r786, 4;
	add.s64 	%rd12, %rd56, %rd61;
	add.s32 	%r787, %r780, 32;
	add.s32 	%r788, %r787, %r760;
	add.s32 	%r789, %r788, %r762;
	add.s32 	%r790, %r789, %r765;
	add.s32 	%r791, %r790, %r768;
	add.s32 	%r792, %r791, %r3721;
	mul.wide.u32 	%rd62, %r792, 4;
	add.s64 	%rd13, %rd56, %rd62;
	add.s32 	%r793, %r787, %r778;
	add.s32 	%r794, %r793, %r762;
	add.s32 	%r795, %r794, %r779;
	add.s32 	%r796, %r795, %r768;
	add.s32 	%r797, %r796, %r3721;
	add.s32 	%r798, %r797, %r776;
	mul.wide.u32 	%rd63, %r798, 4;
	add.s64 	%rd14, %rd56, %rd63;
	mul.lo.s32 	%r799, %r391, 589824;
	mad.lo.s32 	%r800, %r395, 1152, %r799;
	mul.lo.s32 	%r801, %r1, 1152;
	mad.lo.s32 	%r802, %r3, 24, %r801;
	add.s32 	%r117, %r802, %r94;
	cvt.s64.s32 	%rd15, %r800;
	cvt.u16.u32 	%rs57, %r91;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r803, %rs62;
	and.b32  	%r804, %r803, 255;
	or.b32  	%r805, %r801, %r94;
	mad.lo.s32 	%r118, %r804, 24, %r805;
	mul.wide.u32 	%rd64, %r723, 4;
	add.s64 	%rd16, %rd56, %rd64;
	add.s32 	%r806, %r738, 64;
	mul.wide.u32 	%rd65, %r806, 4;
	add.s64 	%rd17, %rd56, %rd65;
	add.s32 	%r807, %r744, 64;
	mul.wide.u32 	%rd66, %r807, 4;
	add.s64 	%rd18, %rd56, %rd66;
	add.s32 	%r808, %r738, 128;
	mul.wide.u32 	%rd67, %r808, 4;
	add.s64 	%rd19, %rd56, %rd67;
	add.s32 	%r809, %r744, 128;
	mul.wide.u32 	%rd68, %r809, 4;
	add.s64 	%rd20, %rd56, %rd68;
	add.s32 	%r810, %r738, 192;
	mul.wide.u32 	%rd69, %r810, 4;
	add.s64 	%rd21, %rd56, %rd69;
	add.s32 	%r811, %r744, 192;
	mul.wide.u32 	%rd70, %r811, 4;
	add.s64 	%rd22, %rd56, %rd70;
	add.s32 	%r812, %r774, 64;
	mul.wide.u32 	%rd71, %r812, 4;
	add.s64 	%rd23, %rd56, %rd71;
	add.s32 	%r813, %r786, 64;
	mul.wide.u32 	%rd72, %r813, 4;
	add.s64 	%rd24, %rd56, %rd72;
	add.s32 	%r814, %r792, 64;
	mul.wide.u32 	%rd73, %r814, 4;
	add.s64 	%rd25, %rd56, %rd73;
	add.s32 	%r815, %r798, 64;
	mul.wide.u32 	%rd74, %r815, 4;
	add.s64 	%rd26, %rd56, %rd74;
	add.s32 	%r816, %r774, 128;
	mul.wide.u32 	%rd75, %r816, 4;
	add.s64 	%rd27, %rd56, %rd75;
	add.s32 	%r817, %r786, 128;
	mul.wide.u32 	%rd76, %r817, 4;
	add.s64 	%rd28, %rd56, %rd76;
	add.s32 	%r818, %r792, 128;
	mul.wide.u32 	%rd77, %r818, 4;
	add.s64 	%rd29, %rd56, %rd77;
	add.s32 	%r819, %r798, 128;
	mul.wide.u32 	%rd78, %r819, 4;
	add.s64 	%rd30, %rd56, %rd78;
	add.s32 	%r820, %r774, 192;
	mul.wide.u32 	%rd79, %r820, 4;
	add.s64 	%rd31, %rd56, %rd79;
	add.s32 	%r821, %r786, 192;
	mul.wide.u32 	%rd80, %r821, 4;
	add.s64 	%rd32, %rd56, %rd80;
	add.s32 	%r822, %r792, 192;
	mul.wide.u32 	%rd81, %r822, 4;
	add.s64 	%rd33, %rd56, %rd81;
	add.s32 	%r823, %r798, 192;
	mul.wide.u32 	%rd82, %r823, 4;
	add.s64 	%rd34, %rd56, %rd82;
	setp.lt.u32 	%p240, %r2, 16;
	setp.gt.u32 	%p269, %r3, 7;
	setp.lt.u32 	%p273, %r2, 24;
	mov.u32 	%r3754, %r119;
	mov.u32 	%r3755, %r119;
	mov.u32 	%r3756, %r119;
	mov.u32 	%r3757, %r119;
	bra.uni 	$L__BB0_149;
$L__BB0_195:                            // %L41253
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r252, %r119, 48;
	setp.ne.s32 	%p313, %r119, 32688;
	mov.u32 	%r119, %r252;
	@%p313 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_196;
$L__BB0_149:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_186 Depth 2
	add.s32 	%r824, %r119, %r389;
	setp.lt.s32 	%p239, %r824, %r390;
	@%p239 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_196;
$L__BB0_150:                            // %oksrem693
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r1017, %r119, -1431655765;
	shr.u32 	%r1018, %r1017, 5;
	mul.lo.s32 	%r284, %r1018, 48;
	add.s32 	%r1019, %r284, %r3;
	add.s32 	%r1020, %r1019, %r389;
	mad.lo.s32 	%r1021, %r1020, 12288, %r88;
	mul.hi.s32 	%r1022, %r1021, 715827883;
	shr.u32 	%r1023, %r1022, 31;
	shr.s32 	%r1024, %r1022, 26;
	add.s32 	%r1025, %r1024, %r1023;
	setp.lt.s32 	%p241, %r1021, 0;
	mul.lo.s32 	%r1026, %r1025, 402653184;
	setp.ne.s32 	%p242, %r1026, %r1021;
	and.pred  	%p243, %p241, %p242;
	selp.s32 	%r1027, -1, 0, %p243;
	add.s32 	%r1028, %r1025, %r1027;
	mad.lo.s32 	%r1029, %r1028, -402653184, %r1021;
	mul.wide.s32 	%rd83, %r1029, 4;
	add.s64 	%rd84, %rd3, %rd83;
	ld.global.v4.u32 	{%r1030, %r1031, %r1032, %r1033}, [%rd84];
	mul.lo.s32 	%r1034, %r1019, 12288;
	or.b32  	%r1035, %r1034, %r89;
	or.b32  	%r1036, %r1035, 64;
	add.s32 	%r1037, %r90, %r1036;
	mul.hi.s32 	%r1038, %r1037, 715827883;
	shr.u32 	%r1039, %r1038, 31;
	shr.s32 	%r1040, %r1038, 26;
	add.s32 	%r1041, %r1040, %r1039;
	shr.s32 	%r1042, %r1037, 31;
	add.s32 	%r1043, %r1042, %r1041;
	or.b32  	%r1044, %r1037, 1;
	mad.lo.s32 	%r1045, %r1043, -402653184, %r1044;
	mul.wide.s32 	%rd85, %r1045, 4;
	add.s64 	%rd86, %rd3, %rd85;
	ld.global.v4.u32 	{%r1046, %r1047, %r1048, %r1049}, [%rd86+-4];
	add.s32 	%r1050, %r91, %r284;
	add.s32 	%r1051, %r1050, %r389;
	mad.lo.s32 	%r1052, %r1051, 12288, %r88;
	mul.hi.s32 	%r1053, %r1052, 715827883;
	shr.u32 	%r1054, %r1053, 31;
	shr.s32 	%r1055, %r1053, 26;
	add.s32 	%r1056, %r1055, %r1054;
	setp.lt.s32 	%p244, %r1052, 0;
	mul.lo.s32 	%r1057, %r1056, 402653184;
	setp.ne.s32 	%p245, %r1057, %r1052;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r1058, -1, 0, %p246;
	add.s32 	%r1059, %r1056, %r1058;
	mad.lo.s32 	%r1060, %r1059, -402653184, %r1052;
	mul.wide.s32 	%rd87, %r1060, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r1061, %r1062, %r1063, %r1064}, [%rd88];
	mul.lo.s32 	%r1065, %r1050, 12288;
	or.b32  	%r1066, %r1065, %r89;
	or.b32  	%r1067, %r1066, 64;
	add.s32 	%r1068, %r90, %r1067;
	mul.hi.s32 	%r1069, %r1068, 715827883;
	shr.u32 	%r1070, %r1069, 31;
	shr.s32 	%r1071, %r1069, 26;
	add.s32 	%r1072, %r1071, %r1070;
	shr.s32 	%r1073, %r1068, 31;
	add.s32 	%r1074, %r1073, %r1072;
	or.b32  	%r1075, %r1068, 1;
	mad.lo.s32 	%r1076, %r1074, -402653184, %r1075;
	mul.wide.s32 	%rd89, %r1076, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r1077, %r1078, %r1079, %r1080}, [%rd90+-4];
	selp.b32 	%r1081, %r1032, %r1030, %p240;
	shfl.sync.bfly.b32	%r1082, %r1081, 16, 31, -1;
	selp.b32 	%r827, %r1030, %r1082, %p240;
	selp.b32 	%r832, %r1082, %r1032, %p240;
	selp.b32 	%r1083, %r1033, %r1031, %p240;
	shfl.sync.bfly.b32	%r1084, %r1083, 16, 31, -1;
	selp.b32 	%r835, %r1031, %r1084, %p240;
	selp.b32 	%r840, %r1084, %r1033, %p240;
	selp.b32 	%r1085, %r1048, %r1046, %p240;
	shfl.sync.bfly.b32	%r1086, %r1085, 16, 31, -1;
	selp.b32 	%r843, %r1046, %r1086, %p240;
	selp.b32 	%r848, %r1086, %r1048, %p240;
	selp.b32 	%r1087, %r1049, %r1047, %p240;
	shfl.sync.bfly.b32	%r1088, %r1087, 16, 31, -1;
	selp.b32 	%r851, %r1047, %r1088, %p240;
	selp.b32 	%r856, %r1088, %r1049, %p240;
	selp.b32 	%r1089, %r1063, %r1061, %p240;
	shfl.sync.bfly.b32	%r1090, %r1089, 16, 31, -1;
	selp.b32 	%r859, %r1061, %r1090, %p240;
	selp.b32 	%r864, %r1090, %r1063, %p240;
	selp.b32 	%r1091, %r1064, %r1062, %p240;
	shfl.sync.bfly.b32	%r1092, %r1091, 16, 31, -1;
	selp.b32 	%r867, %r1062, %r1092, %p240;
	selp.b32 	%r872, %r1092, %r1064, %p240;
	selp.b32 	%r1093, %r1079, %r1077, %p240;
	shfl.sync.bfly.b32	%r1094, %r1093, 16, 31, -1;
	selp.b32 	%r875, %r1077, %r1094, %p240;
	selp.b32 	%r880, %r1094, %r1079, %p240;
	selp.b32 	%r1095, %r1080, %r1078, %p240;
	shfl.sync.bfly.b32	%r1096, %r1095, 16, 31, -1;
	selp.b32 	%r883, %r1078, %r1096, %p240;
	selp.b32 	%r888, %r1096, %r1080, %p240;
	shl.b32 	%r828, %r832, 4;
	mov.u32 	%r826, 252645135;
	// begin inline asm
	lop3.b32 %r890, %r826, %r827, %r828, 202;
	// end inline asm
	shr.u32 	%r831, %r827, 4;
	// begin inline asm
	lop3.b32 %r906, %r826, %r831, %r832, 202;
	// end inline asm
	shl.b32 	%r836, %r840, 4;
	// begin inline asm
	lop3.b32 %r898, %r826, %r835, %r836, 202;
	// end inline asm
	shr.u32 	%r839, %r835, 4;
	// begin inline asm
	lop3.b32 %r914, %r826, %r839, %r840, 202;
	// end inline asm
	shl.b32 	%r844, %r848, 4;
	// begin inline asm
	lop3.b32 %r922, %r826, %r843, %r844, 202;
	// end inline asm
	shr.u32 	%r847, %r843, 4;
	// begin inline asm
	lop3.b32 %r938, %r826, %r847, %r848, 202;
	// end inline asm
	shl.b32 	%r852, %r856, 4;
	// begin inline asm
	lop3.b32 %r930, %r826, %r851, %r852, 202;
	// end inline asm
	shr.u32 	%r855, %r851, 4;
	// begin inline asm
	lop3.b32 %r946, %r826, %r855, %r856, 202;
	// end inline asm
	shl.b32 	%r860, %r864, 4;
	// begin inline asm
	lop3.b32 %r891, %r826, %r859, %r860, 202;
	// end inline asm
	shr.u32 	%r863, %r859, 4;
	// begin inline asm
	lop3.b32 %r907, %r826, %r863, %r864, 202;
	// end inline asm
	shl.b32 	%r868, %r872, 4;
	// begin inline asm
	lop3.b32 %r899, %r826, %r867, %r868, 202;
	// end inline asm
	shr.u32 	%r871, %r867, 4;
	// begin inline asm
	lop3.b32 %r915, %r826, %r871, %r872, 202;
	// end inline asm
	shl.b32 	%r876, %r880, 4;
	// begin inline asm
	lop3.b32 %r923, %r826, %r875, %r876, 202;
	// end inline asm
	shr.u32 	%r879, %r875, 4;
	// begin inline asm
	lop3.b32 %r939, %r826, %r879, %r880, 202;
	// end inline asm
	shl.b32 	%r884, %r888, 4;
	// begin inline asm
	lop3.b32 %r931, %r826, %r883, %r884, 202;
	// end inline asm
	shr.u32 	%r887, %r883, 4;
	// begin inline asm
	lop3.b32 %r947, %r826, %r887, %r888, 202;
	// end inline asm
	mov.u32 	%r892, 25152;
	// begin inline asm
	prmt.b32 %r954, %r890, %r891, %r892;
	// end inline asm
	mov.u32 	%r896, 29521;
	// begin inline asm
	prmt.b32 %r986, %r890, %r891, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r962, %r898, %r899, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r994, %r898, %r899, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r906, %r907, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r906, %r907, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r914, %r915, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r914, %r915, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r970, %r922, %r923, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1002, %r922, %r923, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r978, %r930, %r931, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1010, %r930, %r931, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r938, %r939, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r938, %r939, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r946, %r947, %r892;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r946, %r947, %r896;
	// end inline asm
	mov.u32 	%r1012, 21520;
	// begin inline asm
	prmt.b32 %r953, %r954, %r955, %r1012;
	// end inline asm
	mov.u32 	%r1016, 30258;
	// begin inline asm
	prmt.b32 %r957, %r954, %r955, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r962, %r963, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r965, %r962, %r963, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r970, %r971, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r973, %r970, %r971, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r978, %r979, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r981, %r978, %r979, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r986, %r987, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r989, %r986, %r987, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r994, %r995, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r997, %r994, %r995, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r1002, %r1003, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1005, %r1002, %r1003, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r1010, %r1011, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1013, %r1010, %r1011, %r1016;
	// end inline asm
	cvt.u16.u32 	%rs63, %r1019;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r1097, %rs69;
	add.s32 	%r1098, %r92, %r1097;
	mul.wide.s32 	%rd91, %r1098, 4;
	add.s64 	%rd93, %rd56, %rd91;
	st.shared.u32 	[%rd93], %r953;
	add.s32 	%r1099, %r1098, 128;
	mul.wide.u32 	%rd94, %r1099, 4;
	add.s64 	%rd95, %rd56, %rd94;
	st.shared.u32 	[%rd95], %r961;
	add.s32 	%r1100, %r1098, 64;
	mul.wide.u32 	%rd96, %r1100, 4;
	add.s64 	%rd97, %rd56, %rd96;
	st.shared.u32 	[%rd97], %r957;
	add.s32 	%r1101, %r1098, 192;
	mul.wide.u32 	%rd98, %r1101, 4;
	add.s64 	%rd99, %rd56, %rd98;
	st.shared.u32 	[%rd99], %r965;
	add.s32 	%r1102, %r93, %r1097;
	mul.wide.u32 	%rd100, %r1102, 4;
	add.s64 	%rd101, %rd56, %rd100;
	st.shared.u32 	[%rd101], %r969;
	add.s32 	%r1103, %r1102, 128;
	mul.wide.u32 	%rd102, %r1103, 4;
	add.s64 	%rd103, %rd56, %rd102;
	st.shared.u32 	[%rd103], %r977;
	add.s32 	%r1104, %r1102, 64;
	mul.wide.u32 	%rd104, %r1104, 4;
	add.s64 	%rd105, %rd56, %rd104;
	st.shared.u32 	[%rd105], %r973;
	add.s32 	%r1105, %r1102, 192;
	mul.wide.u32 	%rd106, %r1105, 4;
	add.s64 	%rd107, %rd56, %rd106;
	st.shared.u32 	[%rd107], %r981;
	add.s32 	%r1106, %r1098, 32;
	mul.wide.u32 	%rd108, %r1106, 4;
	add.s64 	%rd109, %rd56, %rd108;
	st.shared.u32 	[%rd109], %r985;
	add.s32 	%r1107, %r1098, 160;
	mul.wide.u32 	%rd110, %r1107, 4;
	add.s64 	%rd111, %rd56, %rd110;
	st.shared.u32 	[%rd111], %r993;
	add.s32 	%r1108, %r1098, 96;
	mul.wide.u32 	%rd112, %r1108, 4;
	add.s64 	%rd113, %rd56, %rd112;
	st.shared.u32 	[%rd113], %r989;
	add.s32 	%r1109, %r1098, 224;
	mul.wide.u32 	%rd114, %r1109, 4;
	add.s64 	%rd115, %rd56, %rd114;
	st.shared.u32 	[%rd115], %r997;
	add.s32 	%r1110, %r1102, 32;
	mul.wide.u32 	%rd116, %r1110, 4;
	add.s64 	%rd117, %rd56, %rd116;
	st.shared.u32 	[%rd117], %r1001;
	add.s32 	%r1111, %r1102, 160;
	mul.wide.u32 	%rd118, %r1111, 4;
	add.s64 	%rd119, %rd56, %rd118;
	st.shared.u32 	[%rd119], %r1009;
	add.s32 	%r1112, %r1102, 96;
	mul.wide.u32 	%rd120, %r1112, 4;
	add.s64 	%rd121, %rd56, %rd120;
	st.shared.u32 	[%rd121], %r1005;
	add.s32 	%r1113, %r1102, 224;
	mul.wide.u32 	%rd122, %r1113, 4;
	add.s64 	%rd123, %rd56, %rd122;
	st.shared.u32 	[%rd123], %r1013;
	bar.sync 	0;
	add.s32 	%r1114, %r284, %r94;
	cvt.u16.u32 	%rs70, %r1114;
	mul.hi.s16 	%rs71, %rs70, 10923;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 2;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.s32.s16 	%r285, %rs76;
	add.s32 	%r1115, %r95, %r285;
	mul.wide.s32 	%rd124, %r1115, 4;
	add.s64 	%rd125, %rd56, %rd124;
	ld.shared.u32 	%r286, [%rd125];
	add.s32 	%r1116, %r96, %r285;
	mul.wide.u32 	%rd126, %r1116, 4;
	add.s64 	%rd127, %rd56, %rd126;
	ld.shared.u32 	%r287, [%rd127];
	add.s32 	%r1117, %r97, %r285;
	mul.wide.u32 	%rd128, %r1117, 4;
	add.s64 	%rd129, %rd56, %rd128;
	ld.shared.u32 	%r288, [%rd129];
	add.s32 	%r1118, %r98, %r285;
	mul.wide.u32 	%rd130, %r1118, 4;
	add.s64 	%rd131, %rd56, %rd130;
	ld.shared.u32 	%r289, [%rd131];
	add.s32 	%r1119, %r99, %r285;
	mul.wide.u32 	%rd132, %r1119, 4;
	add.s64 	%rd133, %rd56, %rd132;
	ld.shared.u32 	%r290, [%rd133];
	add.s32 	%r1120, %r100, %r285;
	mul.wide.u32 	%rd134, %r1120, 4;
	add.s64 	%rd135, %rd56, %rd134;
	ld.shared.u32 	%r291, [%rd135];
	add.s32 	%r1121, %r101, %r285;
	mul.wide.u32 	%rd136, %r1121, 4;
	add.s64 	%rd137, %rd56, %rd136;
	ld.shared.u32 	%r292, [%rd137];
	add.s32 	%r1122, %r102, %r285;
	mul.wide.u32 	%rd138, %r1122, 4;
	add.s64 	%rd139, %rd56, %rd138;
	ld.shared.u32 	%r293, [%rd139];
	add.s32 	%r1123, %r103, %r285;
	mul.wide.u32 	%rd140, %r1123, 4;
	add.s64 	%rd141, %rd56, %rd140;
	ld.shared.u32 	%r294, [%rd141];
	add.s32 	%r1124, %r104, %r285;
	mul.wide.u32 	%rd142, %r1124, 4;
	add.s64 	%rd143, %rd56, %rd142;
	ld.shared.u32 	%r295, [%rd143];
	add.s32 	%r1125, %r105, %r285;
	mul.wide.u32 	%rd144, %r1125, 4;
	add.s64 	%rd145, %rd56, %rd144;
	ld.shared.u32 	%r296, [%rd145];
	add.s32 	%r1126, %r106, %r285;
	mul.wide.u32 	%rd146, %r1126, 4;
	add.s64 	%rd147, %rd56, %rd146;
	ld.shared.u32 	%r297, [%rd147];
	add.s32 	%r1127, %r107, %r285;
	mul.wide.u32 	%rd148, %r1127, 4;
	add.s64 	%rd149, %rd56, %rd148;
	ld.shared.u32 	%r298, [%rd149];
	add.s32 	%r1128, %r108, %r285;
	mul.wide.u32 	%rd150, %r1128, 4;
	add.s64 	%rd151, %rd56, %rd150;
	ld.shared.u32 	%r299, [%rd151];
	add.s32 	%r1129, %r109, %r285;
	mul.wide.u32 	%rd152, %r1129, 4;
	add.s64 	%rd153, %rd56, %rd152;
	ld.shared.u32 	%r300, [%rd153];
	add.s32 	%r1130, %r110, %r285;
	mul.wide.u32 	%rd154, %r1130, 4;
	add.s64 	%rd155, %rd56, %rd154;
	ld.shared.u32 	%r301, [%rd155];
	add.s32 	%r1131, %r111, %r285;
	mul.wide.u32 	%rd156, %r1131, 4;
	add.s64 	%rd157, %rd56, %rd156;
	ld.shared.u32 	%r302, [%rd157];
	add.s32 	%r1132, %r112, %r285;
	mul.wide.u32 	%rd158, %r1132, 4;
	add.s64 	%rd159, %rd56, %rd158;
	ld.shared.u32 	%r303, [%rd159];
	add.s32 	%r1133, %r113, %r285;
	mul.wide.u32 	%rd160, %r1133, 4;
	add.s64 	%rd161, %rd56, %rd160;
	ld.shared.u32 	%r304, [%rd161];
	add.s32 	%r1134, %r114, %r285;
	mul.wide.u32 	%rd162, %r1134, 4;
	add.s64 	%rd163, %rd56, %rd162;
	ld.shared.u32 	%r305, [%rd163];
	add.s32 	%r1135, %r115, %r285;
	mul.wide.u32 	%rd164, %r1135, 4;
	add.s64 	%rd165, %rd56, %rd164;
	ld.shared.u32 	%r306, [%rd165];
	add.s32 	%r1136, %r116, %r285;
	mul.wide.s32 	%rd166, %r1136, 4;
	add.s64 	%rd167, %rd56, %rd166;
	ld.shared.u32 	%r307, [%rd167];
	bar.sync 	0;
	shfl.sync.idx.b32	%r308, %r279, 0, 31, -1;
	shfl.sync.idx.b32	%r309, %r279, 1, 31, -1;
	shfl.sync.idx.b32	%r310, %r279, 2, 31, -1;
	shfl.sync.idx.b32	%r311, %r279, 3, 31, -1;
	shfl.sync.idx.b32	%r312, %r279, 4, 31, -1;
	shfl.sync.idx.b32	%r313, %r279, 5, 31, -1;
	shfl.sync.idx.b32	%r314, %r279, 6, 31, -1;
	shfl.sync.idx.b32	%r315, %r279, 7, 31, -1;
	shfl.sync.idx.b32	%r316, %r279, 8, 31, -1;
	shfl.sync.idx.b32	%r317, %r279, 9, 31, -1;
	shfl.sync.idx.b32	%r318, %r279, 10, 31, -1;
	shfl.sync.idx.b32	%r319, %r279, 11, 31, -1;
	shfl.sync.idx.b32	%r320, %r279, 12, 31, -1;
	shfl.sync.idx.b32	%r321, %r279, 13, 31, -1;
	shfl.sync.idx.b32	%r322, %r279, 14, 31, -1;
	shfl.sync.idx.b32	%r323, %r279, 15, 31, -1;
	shfl.sync.idx.b32	%r324, %r279, 16, 31, -1;
	shfl.sync.idx.b32	%r325, %r279, 17, 31, -1;
	shfl.sync.idx.b32	%r326, %r279, 18, 31, -1;
	shfl.sync.idx.b32	%r327, %r279, 19, 31, -1;
	shfl.sync.idx.b32	%r328, %r279, 20, 31, -1;
	shfl.sync.idx.b32	%r329, %r279, 21, 31, -1;
	shfl.sync.idx.b32	%r330, %r279, 22, 31, -1;
	shfl.sync.idx.b32	%r331, %r279, 23, 31, -1;
	setp.eq.s32 	%p247, %r308, 999999999;
	@%p247 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem3332
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1137, %r308, %r285;
	mul.wide.s32 	%rd168, %r1137, 4;
	add.s64 	%rd170, %rd56, %rd168;
	st.shared.u32 	[%rd170], %r286;
	setp.eq.s32 	%p248, %r309, 999999999;
	@%p248 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3400
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1138, %r309, %r285;
	mul.wide.s32 	%rd171, %r1138, 4;
	add.s64 	%rd173, %rd56, %rd171;
	st.shared.u32 	[%rd173], %r287;
	setp.eq.s32 	%p249, %r310, 999999999;
	@%p249 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3468
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1139, %r310, %r285;
	mul.wide.s32 	%rd174, %r1139, 4;
	add.s64 	%rd176, %rd56, %rd174;
	st.shared.u32 	[%rd176], %r288;
	setp.eq.s32 	%p250, %r311, 999999999;
	@%p250 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3536
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1140, %r311, %r285;
	mul.wide.s32 	%rd177, %r1140, 4;
	add.s64 	%rd179, %rd56, %rd177;
	st.shared.u32 	[%rd179], %r289;
	setp.eq.s32 	%p251, %r312, 999999999;
	@%p251 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3604
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1141, %r312, %r285;
	mul.wide.s32 	%rd180, %r1141, 4;
	add.s64 	%rd182, %rd56, %rd180;
	st.shared.u32 	[%rd182], %r290;
	setp.eq.s32 	%p252, %r313, 999999999;
	@%p252 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3672
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1142, %r313, %r285;
	mul.wide.s32 	%rd183, %r1142, 4;
	add.s64 	%rd185, %rd56, %rd183;
	st.shared.u32 	[%rd185], %r291;
	setp.eq.s32 	%p253, %r314, 999999999;
	@%p253 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3740
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1143, %r314, %r285;
	mul.wide.s32 	%rd186, %r1143, 4;
	add.s64 	%rd188, %rd56, %rd186;
	st.shared.u32 	[%rd188], %r292;
	setp.eq.s32 	%p254, %r315, 999999999;
	@%p254 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3808
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1144, %r315, %r285;
	mul.wide.s32 	%rd189, %r1144, 4;
	add.s64 	%rd191, %rd56, %rd189;
	st.shared.u32 	[%rd191], %r293;
	setp.eq.s32 	%p255, %r316, 999999999;
	@%p255 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3876
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1145, %r316, %r285;
	mul.wide.s32 	%rd192, %r1145, 4;
	add.s64 	%rd194, %rd56, %rd192;
	st.shared.u32 	[%rd194], %r294;
	setp.eq.s32 	%p256, %r317, 999999999;
	@%p256 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3944
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1146, %r317, %r285;
	mul.wide.s32 	%rd195, %r1146, 4;
	add.s64 	%rd197, %rd56, %rd195;
	st.shared.u32 	[%rd197], %r295;
	setp.eq.s32 	%p257, %r318, 999999999;
	@%p257 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem4012
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1147, %r318, %r285;
	mul.wide.s32 	%rd198, %r1147, 4;
	add.s64 	%rd200, %rd56, %rd198;
	st.shared.u32 	[%rd200], %r296;
	setp.eq.s32 	%p258, %r319, 999999999;
	@%p258 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4080
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1148, %r319, %r285;
	mul.wide.s32 	%rd201, %r1148, 4;
	add.s64 	%rd203, %rd56, %rd201;
	st.shared.u32 	[%rd203], %r297;
	setp.eq.s32 	%p259, %r320, 999999999;
	@%p259 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4148
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1149, %r320, %r285;
	mul.wide.s32 	%rd204, %r1149, 4;
	add.s64 	%rd206, %rd56, %rd204;
	st.shared.u32 	[%rd206], %r298;
	setp.eq.s32 	%p260, %r321, 999999999;
	@%p260 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4216
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1150, %r321, %r285;
	mul.wide.s32 	%rd207, %r1150, 4;
	add.s64 	%rd209, %rd56, %rd207;
	st.shared.u32 	[%rd209], %r299;
	setp.eq.s32 	%p261, %r322, 999999999;
	@%p261 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4284
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1151, %r322, %r285;
	mul.wide.s32 	%rd210, %r1151, 4;
	add.s64 	%rd212, %rd56, %rd210;
	st.shared.u32 	[%rd212], %r300;
	setp.eq.s32 	%p262, %r323, 999999999;
	@%p262 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4352
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1152, %r323, %r285;
	mul.wide.s32 	%rd213, %r1152, 4;
	add.s64 	%rd215, %rd56, %rd213;
	st.shared.u32 	[%rd215], %r301;
	setp.eq.s32 	%p263, %r324, 999999999;
	@%p263 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4420
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1153, %r324, %r285;
	mul.wide.s32 	%rd216, %r1153, 4;
	add.s64 	%rd218, %rd56, %rd216;
	st.shared.u32 	[%rd218], %r302;
	setp.eq.s32 	%p264, %r325, 999999999;
	@%p264 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4488
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1154, %r325, %r285;
	mul.wide.s32 	%rd219, %r1154, 4;
	add.s64 	%rd221, %rd56, %rd219;
	st.shared.u32 	[%rd221], %r303;
	setp.eq.s32 	%p265, %r326, 999999999;
	@%p265 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4556
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1155, %r326, %r285;
	mul.wide.s32 	%rd222, %r1155, 4;
	add.s64 	%rd224, %rd56, %rd222;
	st.shared.u32 	[%rd224], %r304;
	setp.eq.s32 	%p266, %r327, 999999999;
	@%p266 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4624
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1156, %r327, %r285;
	mul.wide.s32 	%rd225, %r1156, 4;
	add.s64 	%rd227, %rd56, %rd225;
	st.shared.u32 	[%rd227], %r305;
	setp.eq.s32 	%p267, %r328, 999999999;
	@%p267 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4692
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1157, %r328, %r285;
	mul.wide.s32 	%rd228, %r1157, 4;
	add.s64 	%rd230, %rd56, %rd228;
	st.shared.u32 	[%rd230], %r306;
	setp.eq.s32 	%p268, %r329, 999999999;
	@%p268 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4761
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1158, 0, %r307, %p269;
	add.s32 	%r1159, %r329, %r285;
	mul.wide.s32 	%rd231, %r1159, 4;
	add.s64 	%rd233, %rd56, %rd231;
	st.shared.u32 	[%rd233], %r1158;
	setp.eq.s32 	%p270, %r330, 999999999;
	@%p270 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4829
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1160, %r330, %r285;
	mul.wide.s32 	%rd234, %r1160, 4;
	add.s64 	%rd236, %rd56, %rd234;
	mov.u32 	%r3729, 0;
	st.shared.u32 	[%rd236], %r3729;
	setp.eq.s32 	%p271, %r331, 999999999;
	@%p271 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4896
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1163, %r331, %r285;
	mul.wide.s32 	%rd237, %r1163, 4;
	add.s64 	%rd239, %rd56, %rd237;
	st.shared.u32 	[%rd239], %r3729;
	bar.sync 	0;
	mov.u32 	%r3730, %r3729;
	mov.u32 	%r3731, %r3729;
	mov.u32 	%r3732, %r3729;
	mov.u32 	%r3733, %r3729;
	mov.u32 	%r3734, %r3729;
	mov.u32 	%r3735, %r3729;
	mov.u32 	%r3736, %r3729;
	mov.u32 	%r3737, %r3729;
	mov.u32 	%r3738, %r3729;
	mov.u32 	%r3739, %r3729;
	mov.u32 	%r3740, %r3729;
	mov.u32 	%r3741, %r3729;
	mov.u32 	%r3742, %r3729;
	mov.u32 	%r3743, %r3729;
	mov.u32 	%r3744, %r3729;
	mov.u32 	%r3745, %r3729;
	mov.u32 	%r3746, %r3729;
	mov.u32 	%r3747, %r3729;
	mov.u32 	%r3748, %r3729;
	mov.u32 	%r3749, %r3729;
	mov.u32 	%r3750, %r3729;
	mov.u32 	%r3751, %r3729;
	mov.u32 	%r3752, %r3729;
	@%p88 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4959
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs77, %r284;
	mul.hi.s16 	%rs78, %rs77, 10923;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 2;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 24;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.s32.s16 	%r1164, %rs83;
	mul.wide.s32 	%rd240, %r1164, 4;
	add.s64 	%rd241, %rd16, %rd240;
	ld.shared.u32 	%r3729, [%rd241];
	ld.shared.u32 	%r3730, [%rd16+4];
	ld.shared.u32 	%r3731, [%rd16+8];
	ld.shared.u32 	%r3732, [%rd16+12];
	ld.shared.u32 	%r3733, [%rd16+16];
	ld.shared.u32 	%r3734, [%rd16+20];
	ld.shared.u32 	%r3735, [%rd16+24];
	ld.shared.u32 	%r3736, [%rd16+28];
	ld.shared.u32 	%r3737, [%rd16+32];
	ld.shared.u32 	%r3738, [%rd16+36];
	ld.shared.u32 	%r3739, [%rd16+40];
	ld.shared.u32 	%r3740, [%rd16+44];
	ld.shared.u32 	%r3741, [%rd16+48];
	ld.shared.u32 	%r3742, [%rd16+52];
	ld.shared.u32 	%r3743, [%rd16+56];
	ld.shared.u32 	%r3744, [%rd16+60];
	add.s16 	%rs84, %rs77, 16;
	mul.hi.s16 	%rs85, %rs84, 10923;
	shr.u16 	%rs86, %rs85, 15;
	shr.s16 	%rs87, %rs85, 2;
	add.s16 	%rs88, %rs87, %rs86;
	mul.lo.s16 	%rs89, %rs88, 24;
	sub.s16 	%rs90, %rs84, %rs89;
	cvt.s32.s16 	%r1165, %rs90;
	mul.wide.s32 	%rd242, %r1165, 4;
	add.s64 	%rd243, %rd16, %rd242;
	ld.shared.u32 	%r3745, [%rd243];
	add.s16 	%rs91, %rs77, 17;
	mul.hi.s16 	%rs92, %rs91, 10923;
	shr.u16 	%rs93, %rs92, 15;
	shr.s16 	%rs94, %rs92, 2;
	add.s16 	%rs95, %rs94, %rs93;
	mul.lo.s16 	%rs96, %rs95, 24;
	sub.s16 	%rs97, %rs91, %rs96;
	cvt.s32.s16 	%r1166, %rs97;
	mul.wide.s32 	%rd244, %r1166, 4;
	add.s64 	%rd245, %rd16, %rd244;
	ld.shared.u32 	%r3746, [%rd245];
	add.s16 	%rs98, %rs77, 18;
	mul.hi.s16 	%rs99, %rs98, 10923;
	shr.u16 	%rs100, %rs99, 15;
	shr.s16 	%rs101, %rs99, 2;
	add.s16 	%rs102, %rs101, %rs100;
	mul.lo.s16 	%rs103, %rs102, 24;
	sub.s16 	%rs104, %rs98, %rs103;
	cvt.s32.s16 	%r1167, %rs104;
	mul.wide.s32 	%rd246, %r1167, 4;
	add.s64 	%rd247, %rd16, %rd246;
	ld.shared.u32 	%r3747, [%rd247];
	add.s16 	%rs105, %rs77, 19;
	mul.hi.s16 	%rs106, %rs105, 10923;
	shr.u16 	%rs107, %rs106, 15;
	shr.s16 	%rs108, %rs106, 2;
	add.s16 	%rs109, %rs108, %rs107;
	mul.lo.s16 	%rs110, %rs109, 24;
	sub.s16 	%rs111, %rs105, %rs110;
	cvt.s32.s16 	%r1168, %rs111;
	mul.wide.s32 	%rd248, %r1168, 4;
	add.s64 	%rd249, %rd16, %rd248;
	ld.shared.u32 	%r3748, [%rd249];
	add.s16 	%rs112, %rs77, 20;
	mul.hi.s16 	%rs113, %rs112, 10923;
	shr.u16 	%rs114, %rs113, 15;
	shr.s16 	%rs115, %rs113, 2;
	add.s16 	%rs116, %rs115, %rs114;
	mul.lo.s16 	%rs117, %rs116, 24;
	sub.s16 	%rs118, %rs112, %rs117;
	cvt.s32.s16 	%r1169, %rs118;
	mul.wide.s32 	%rd250, %r1169, 4;
	add.s64 	%rd251, %rd16, %rd250;
	ld.shared.u32 	%r3749, [%rd251];
	add.s16 	%rs119, %rs77, 21;
	mul.hi.s16 	%rs120, %rs119, 10923;
	shr.u16 	%rs121, %rs120, 15;
	shr.s16 	%rs122, %rs120, 2;
	add.s16 	%rs123, %rs122, %rs121;
	mul.lo.s16 	%rs124, %rs123, 24;
	sub.s16 	%rs125, %rs119, %rs124;
	cvt.s32.s16 	%r1170, %rs125;
	mul.wide.s32 	%rd252, %r1170, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3750, [%rd253];
	add.s16 	%rs126, %rs77, 22;
	mul.hi.s16 	%rs127, %rs126, 10923;
	shr.u16 	%rs128, %rs127, 15;
	shr.s16 	%rs129, %rs127, 2;
	add.s16 	%rs130, %rs129, %rs128;
	mul.lo.s16 	%rs131, %rs130, 24;
	sub.s16 	%rs132, %rs126, %rs131;
	cvt.s32.s16 	%r1171, %rs132;
	mul.wide.s32 	%rd254, %r1171, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3751, [%rd255];
	add.s16 	%rs133, %rs77, 23;
	mul.hi.s16 	%rs134, %rs133, 10923;
	shr.u16 	%rs135, %rs134, 15;
	shr.s16 	%rs136, %rs134, 2;
	add.s16 	%rs137, %rs136, %rs135;
	mul.lo.s16 	%rs138, %rs137, 24;
	sub.s16 	%rs139, %rs133, %rs138;
	cvt.s32.s16 	%r1172, %rs139;
	mul.wide.s32 	%rd256, %r1172, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3752, [%rd257];
$L__BB0_175:                            // %L13906
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mov.u32 	%r3753, 12;
	bra.uni 	$L__BB0_176;
$L__BB0_183:                            // %L27570
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r3755, %r3755, 1;
	mov.u32 	%r3754, 0;
	mov.u32 	%r3756, %r3754;
	mov.u32 	%r3757, %r3754;
$L__BB0_184:                            // %L27571
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3753, %r3753, -4;
	setp.ne.s32 	%p292, %r3753, -12;
	@%p292 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_185;
$L__BB0_176:                            // %L13932
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3753, 12;
	selp.b32 	%r1710, %r3729, 0, %p274;
	setp.eq.s32 	%p275, %r3753, 8;
	selp.b32 	%r1711, %r3733, %r1710, %p275;
	setp.eq.s32 	%p276, %r3753, 4;
	selp.b32 	%r1712, %r3737, %r1711, %p276;
	setp.eq.s32 	%p277, %r3753, 0;
	selp.b32 	%r1713, %r3741, %r1712, %p277;
	setp.eq.s32 	%p278, %r3753, -4;
	selp.b32 	%r1714, %r3745, %r1713, %p278;
	setp.eq.s32 	%p279, %r3753, -8;
	selp.b32 	%r1715, %r3749, %r1714, %p279;
	selp.b32 	%r1716, %r3730, 0, %p274;
	selp.b32 	%r1717, %r3734, %r1716, %p275;
	selp.b32 	%r1718, %r3738, %r1717, %p276;
	selp.b32 	%r1719, %r3742, %r1718, %p277;
	selp.b32 	%r1720, %r3746, %r1719, %p278;
	selp.b32 	%r1721, %r3750, %r1720, %p279;
	selp.b32 	%r1722, %r3731, 0, %p274;
	selp.b32 	%r1723, %r3735, %r1722, %p275;
	selp.b32 	%r1724, %r3739, %r1723, %p276;
	selp.b32 	%r1725, %r3743, %r1724, %p277;
	selp.b32 	%r1726, %r3747, %r1725, %p278;
	selp.b32 	%r1727, %r3751, %r1726, %p279;
	selp.b32 	%r1728, %r3732, 0, %p274;
	selp.b32 	%r1729, %r3736, %r1728, %p275;
	selp.b32 	%r1730, %r3740, %r1729, %p276;
	selp.b32 	%r1731, %r3744, %r1730, %p277;
	selp.b32 	%r1732, %r3748, %r1731, %p278;
	selp.b32 	%r1733, %r3752, %r1732, %p279;
	mov.u16 	%rs177, 25600;
	// begin inline asm
	mov.b32 %r1179, {%rs177, %rs177};
	// end inline asm
	mov.u16 	%rs179, 21504;
	// begin inline asm
	mov.b32 %r1190, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1178, %r1715, -2004318072;
	mov.u32 	%r1315, 983055;
	// begin inline asm
	lop3.b32 %r1176, %r1315, %r1178, %r1179, 202;
	// end inline asm
	mov.u16 	%rs183, 18432;
	// begin inline asm
	mov.b32 %r1180, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1179, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	mov.u32 	%r1326, 15728880;
	// begin inline asm
	lop3.b32 %r1187, %r1326, %r1178, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1224, %r1721, -2004318072;
	// begin inline asm
	lop3.b32 %r1222, %r1315, %r1224, %r1225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1225, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1233, %r1326, %r1224, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1270, %r1727, -2004318072;
	// begin inline asm
	lop3.b32 %r1268, %r1315, %r1270, %r1271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1271, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1279, %r1326, %r1270, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	mov.b32 %r1317, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r1328, {%rs179, %rs179};
	// end inline asm
	xor.b32  	%r1316, %r1733, -2004318072;
	// begin inline asm
	lop3.b32 %r1314, %r1315, %r1316, %r1317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1318, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1319, %r1317, %r1318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1322, %r1314, %r1319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1325, %r1326, %r1316, %r1328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1330, %r1328, %r1329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1333, %r1325, %r1330;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1184;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1358, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1195;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1361, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1230;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1364, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1241;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1367, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1276;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1370, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1287;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1373, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1322;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1376, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1333;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1379, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1645, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1445, %r1442}, {%r420, %r423}, {%r1358}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1454, %r1451}, {%r420, %r423}, {%r1361}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1463, %r1460}, {%r420, %r423}, {%r1364}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1472, %r1469}, {%r420, %r423}, {%r1367}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1481, %r1478}, {%r420, %r423}, {%r1370}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1490, %r1487}, {%r420, %r423}, {%r1373}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1499, %r1496}, {%r420, %r423}, {%r1376}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1508, %r1505}, {%r420, %r423}, {%r1379}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1438, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r1438, %r1442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r472, %r1445, %r1440;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1447, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r1447, %r1451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r472, %r1454, %r1449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1456, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r1456, %r1460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r472, %r1463, %r1458;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1465, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r1465, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r472, %r1472, %r1467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1474, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r1474, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r472, %r1481, %r1476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1483, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r1483, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r472, %r1490, %r1485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1492, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1494, %r1492, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1497, %r472, %r1499, %r1494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1501, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r1501, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r472, %r1508, %r1503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r475, %r1445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r472, %r1442, %r1510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r475, %r1454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r472, %r1451, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r475, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r472, %r1460, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r475, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r472, %r1469, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r475, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r472, %r1478, %r1538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r475, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r472, %r1487, %r1545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r475, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r472, %r1496, %r1552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1559, %r475, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r472, %r1505, %r1559;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1647, %r1648}, {%r516, %r522, %r519, %r525}, {%r1443, %r1513}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1655, %r1656}, {%r516, %r522, %r519, %r525}, {%r1452, %r1520}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1663, %r1664}, {%r516, %r522, %r519, %r525}, {%r1461, %r1527}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1671, %r1672}, {%r516, %r522, %r519, %r525}, {%r1470, %r1534}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1679, %r1680}, {%r516, %r522, %r519, %r525}, {%r1479, %r1541}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1687, %r1688}, {%r516, %r522, %r519, %r525}, {%r1488, %r1548}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1696}, {%r516, %r522, %r519, %r525}, {%r1497, %r1555}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1703, %r1704}, {%r516, %r522, %r519, %r525}, {%r1506, %r1562}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1646, %r1647, %r1648, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1650, %r1647, %r1648, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1654, %r1655, %r1656, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1658, %r1655, %r1656, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1662, %r1663, %r1664, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1666, %r1663, %r1664, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1670, %r1671, %r1672, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1674, %r1671, %r1672, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1678, %r1679, %r1680, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1682, %r1679, %r1680, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1686, %r1687, %r1688, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1690, %r1687, %r1688, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1694, %r1695, %r1696, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1698, %r1695, %r1696, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1702, %r1703, %r1704, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1706, %r1703, %r1704, %r1016;
	// end inline asm
	st.shared.u32 	[%rd7], %r1646;
	st.shared.u32 	[%rd8], %r1650;
	st.shared.u32 	[%rd9], %r1654;
	st.shared.u32 	[%rd10], %r1658;
	st.shared.u32 	[%rd17], %r1662;
	st.shared.u32 	[%rd18], %r1666;
	st.shared.u32 	[%rd9+256], %r1670;
	st.shared.u32 	[%rd10+256], %r1674;
	st.shared.u32 	[%rd19], %r1678;
	st.shared.u32 	[%rd20], %r1682;
	st.shared.u32 	[%rd9+512], %r1686;
	st.shared.u32 	[%rd10+512], %r1690;
	st.shared.u32 	[%rd21], %r1694;
	st.shared.u32 	[%rd22], %r1698;
	st.shared.u32 	[%rd9+768], %r1702;
	st.shared.u32 	[%rd10+768], %r1706;
	@%p273 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_177;
$L__BB0_250:                            // %pass8539
                                        //   in Loop: Header=BB0_176 Depth=2
	st.shared.u32 	[%rd7], %r1646;
	st.shared.u32 	[%rd8], %r1650;
	st.shared.u32 	[%rd9], %r1654;
	st.shared.u32 	[%rd10], %r1658;
	st.shared.u32 	[%rd17], %r1662;
	st.shared.u32 	[%rd18], %r1666;
	st.shared.u32 	[%rd9+256], %r1670;
	st.shared.u32 	[%rd10+256], %r1674;
	st.shared.u32 	[%rd19], %r1678;
	st.shared.u32 	[%rd20], %r1682;
	st.shared.u32 	[%rd9+512], %r1686;
	st.shared.u32 	[%rd10+512], %r1690;
	st.shared.u32 	[%rd21], %r1694;
	st.shared.u32 	[%rd22], %r1698;
	st.shared.u32 	[%rd9+768], %r1702;
	st.shared.u32 	[%rd10+768], %r1706;
$L__BB0_177:                            // %L22306
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	mov.u32 	%r3758, %r1645;
	mov.u32 	%r3759, %r1645;
	mov.u32 	%r3760, %r1645;
	mov.u32 	%r3761, %r1645;
	@%p273 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass10634
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3758, [%rd11];
	ld.shared.u32 	%r3759, [%rd12];
	ld.shared.u32 	%r3760, [%rd13];
	ld.shared.u32 	%r3761, [%rd14];
$L__BB0_178:                            // %L23381
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r534, %r537}, {%r3758}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1779, %r1776}, {%r534, %r537}, {%r3759}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1788, %r1785}, {%r534, %r537}, {%r3760}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1797, %r1794}, {%r534, %r537}, {%r3761}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r586, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1772, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1772, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r586, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1781, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r1781, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r586, %r1788, %r1783;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1790, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r1790, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r586, %r1797, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r589, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r586, %r1767, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r589, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r586, %r1776, %r1806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r589, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r586, %r1785, %r1813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1820, %r589, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r586, %r1794, %r1820;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1868, %r1871}, {%r630, %r636, %r633, %r639}, {%r1768, %r1802}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1887, %r1890}, {%r630, %r636, %r633, %r639}, {%r1777, %r1809}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1875, %r1879}, {%r630, %r636, %r633, %r639}, {%r1786, %r1816}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1894, %r1898}, {%r630, %r636, %r633, %r639}, {%r1795, %r1823}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1867, %r1868, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r1871, %r1871, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r1875, %r1875, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1879, %r1879, %r1874;
	// end inline asm
	mov.u32 	%r1902, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1902, %r1878, %r3757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r1887, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1890, %r1890, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r1894, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r1898, %r1898, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1902, %r1897, %r3756;
	// end inline asm
	mov.u32 	%r3762, %r1645;
	mov.u32 	%r3763, %r1645;
	mov.u32 	%r3764, %r1645;
	mov.u32 	%r3765, %r1645;
	@%p273 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass11239
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3762, [%rd23];
	ld.shared.u32 	%r3763, [%rd24];
	ld.shared.u32 	%r3764, [%rd25];
	ld.shared.u32 	%r3765, [%rd26];
$L__BB0_179:                            // %L24600
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1941, %r1938}, {%r534, %r537}, {%r3762}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1950, %r1947}, {%r534, %r537}, {%r3763}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1959, %r1956}, {%r534, %r537}, {%r3764}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1968, %r1965}, {%r534, %r537}, {%r3765}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1934, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1936, %r1934, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r586, %r1941, %r1936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1943, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r1943, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r586, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1952, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r1952, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r586, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1961, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r1961, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r586, %r1968, %r1963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r589, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r586, %r1938, %r1970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1977, %r589, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r586, %r1947, %r1977;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r589, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r586, %r1956, %r1984;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1991, %r589, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r586, %r1965, %r1991;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2042}, {%r630, %r636, %r633, %r639}, {%r1939, %r1973}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2058, %r2061}, {%r630, %r636, %r633, %r639}, {%r1948, %r1980}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2050}, {%r630, %r636, %r633, %r639}, {%r1957, %r1987}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2065, %r2069}, {%r630, %r636, %r633, %r639}, {%r1966, %r1994}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r2039, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r2042, %r2042, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r2046, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r2050, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r1902, %r2049, %r1882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2057, %r2058, %r2058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r2061, %r2061, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r2065, %r2065, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r2069, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r1902, %r2068, %r1901;
	// end inline asm
	mov.u32 	%r3766, %r1645;
	mov.u32 	%r3767, %r1645;
	mov.u32 	%r3768, %r1645;
	mov.u32 	%r3769, %r1645;
	@%p273 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass11844
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3766, [%rd27];
	ld.shared.u32 	%r3767, [%rd28];
	ld.shared.u32 	%r3768, [%rd29];
	ld.shared.u32 	%r3769, [%rd30];
$L__BB0_180:                            // %L25819
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2112, %r2109}, {%r534, %r537}, {%r3766}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2121, %r2118}, {%r534, %r537}, {%r3767}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2130, %r2127}, {%r534, %r537}, {%r3768}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2139, %r2136}, {%r534, %r537}, {%r3769}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r2105, %r2109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r586, %r2112, %r2107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2114, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r2114, %r2118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r586, %r2121, %r2116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2123, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2123, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r586, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2132, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r2132, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r586, %r2139, %r2134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r589, %r2112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r586, %r2109, %r2141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r589, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r586, %r2118, %r2148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r589, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r586, %r2127, %r2155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r589, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r586, %r2136, %r2162;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2210, %r2213}, {%r630, %r636, %r633, %r639}, {%r2110, %r2144}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2229, %r2232}, {%r630, %r636, %r633, %r639}, {%r2119, %r2151}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2217, %r2221}, {%r630, %r636, %r633, %r639}, {%r2128, %r2158}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2236, %r2240}, {%r630, %r636, %r633, %r639}, {%r2137, %r2165}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r2210, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r2213, %r2213, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r2217, %r2217, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r2221, %r2221, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r1902, %r2220, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2229, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r2232, %r2232, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r2236, %r2236, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r2240, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r1902, %r2239, %r2072;
	// end inline asm
	mov.u32 	%r3770, %r1645;
	mov.u32 	%r3771, %r1645;
	mov.u32 	%r3772, %r1645;
	mov.u32 	%r3773, %r1645;
	@%p273 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %pass12449
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3770, [%rd31];
	ld.shared.u32 	%r3771, [%rd32];
	ld.shared.u32 	%r3772, [%rd33];
	ld.shared.u32 	%r3773, [%rd34];
$L__BB0_181:                            // %L27038
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2283, %r2280}, {%r534, %r537}, {%r3770}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2292, %r2289}, {%r534, %r537}, {%r3771}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2301, %r2298}, {%r534, %r537}, {%r3772}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2310, %r2307}, {%r534, %r537}, {%r3773}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2276, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r2276, %r2280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r586, %r2283, %r2278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2285, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r2285, %r2289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r586, %r2292, %r2287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2294, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2296, %r2294, %r2298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r586, %r2301, %r2296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2303, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2305, %r2303, %r2307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r586, %r2310, %r2305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2312, %r589, %r2283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2315, %r586, %r2280, %r2312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2319, %r589, %r2292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r586, %r2289, %r2319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2326, %r589, %r2301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2329, %r586, %r2298, %r2326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2333, %r589, %r2310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2336, %r586, %r2307, %r2333;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2381, %r2384}, {%r630, %r636, %r633, %r639}, {%r2281, %r2315}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2403}, {%r630, %r636, %r633, %r639}, {%r2290, %r2322}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2388, %r2392}, {%r630, %r636, %r633, %r639}, {%r2299, %r2329}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2411}, {%r630, %r636, %r633, %r639}, {%r2308, %r2336}, {%r1645, %r1645};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2380, %r2381, %r2381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2383, %r2384, %r2384, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r2388, %r2388, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2391, %r2392, %r2392, %r2387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3757, %r1902, %r2391, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2399, %r2400, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2402, %r2403, %r2403, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2406, %r2407, %r2407, %r2402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r2411, %r2411, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3756, %r1902, %r2410, %r2243;
	// end inline asm
	add.s32 	%r3754, %r3754, 4;
	setp.eq.s32 	%p284, %r3754, 192;
	@%p284 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_184;
$L__BB0_182:                            // %pass12918
                                        //   in Loop: Header=BB0_176 Depth=2
	@%p88 bra 	$L__BB0_183;
// %bb.255:                             // %pass12928
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2418, %r3755, 589824;
	add.s32 	%r2419, %r117, %r2418;
	cvt.u64.u32 	%rd258, %r2419;
	add.s64 	%rd259, %rd258, %rd15;
	mul.hi.s64 	%rd260, %rd259, 1024819115206086201;
	shr.u64 	%rd261, %rd260, 63;
	shr.s64 	%rd262, %rd260, 25;
	add.s64 	%rd263, %rd262, %rd261;
	setp.lt.s64 	%p286, %rd259, 0;
	mul.lo.s64 	%rd264, %rd263, 603979776;
	setp.ne.s64 	%p287, %rd264, %rd259;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd265, -1, 0, %p288;
	add.s64 	%rd266, %rd263, %rd265;
	mul.lo.s64 	%rd267, %rd266, -603979776;
	add.s64 	%rd268, %rd267, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3757;
	add.s32 	%r2420, %r118, %r2418;
	cvt.u64.u32 	%rd271, %r2420;
	add.s64 	%rd272, %rd271, %rd15;
	mul.hi.s64 	%rd273, %rd272, 1024819115206086201;
	shr.u64 	%rd274, %rd273, 63;
	shr.s64 	%rd275, %rd273, 25;
	add.s64 	%rd276, %rd275, %rd274;
	setp.lt.s64 	%p289, %rd272, 0;
	mul.lo.s64 	%rd277, %rd276, 603979776;
	setp.ne.s64 	%p290, %rd277, %rd272;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd278, -1, 0, %p291;
	add.s64 	%rd279, %rd276, %rd278;
	mul.lo.s64 	%rd280, %rd279, -603979776;
	add.s64 	%rd281, %rd280, %rd272;
	shl.b64 	%rd282, %rd281, 2;
	add.s64 	%rd283, %rd4, %rd282;
	st.global.u32 	[%rd283], %r3756;
	bra.uni 	$L__BB0_183;
$L__BB0_185:                            // %L27596.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	mov.u32 	%r3778, 12;
	bra.uni 	$L__BB0_186;
$L__BB0_193:                            // %L41234
                                        //   in Loop: Header=BB0_186 Depth=2
	add.s32 	%r3755, %r3755, 1;
	mov.u32 	%r3754, 0;
	mov.u32 	%r3756, %r3754;
	mov.u32 	%r3757, %r3754;
$L__BB0_194:                            // %L41235
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	add.s32 	%r3778, %r3778, -4;
	setp.ne.s32 	%p312, %r3778, -12;
	@%p312 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_195;
$L__BB0_186:                            // %L27596
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p294, %r3778, 12;
	selp.b32 	%r2959, %r3729, 0, %p294;
	setp.eq.s32 	%p295, %r3778, 8;
	selp.b32 	%r2960, %r3733, %r2959, %p295;
	setp.eq.s32 	%p296, %r3778, 4;
	selp.b32 	%r2961, %r3737, %r2960, %p296;
	setp.eq.s32 	%p297, %r3778, 0;
	selp.b32 	%r2962, %r3741, %r2961, %p297;
	setp.eq.s32 	%p298, %r3778, -4;
	selp.b32 	%r2963, %r3745, %r2962, %p298;
	setp.eq.s32 	%p299, %r3778, -8;
	selp.b32 	%r2964, %r3749, %r2963, %p299;
	selp.b32 	%r2965, %r3730, 0, %p294;
	selp.b32 	%r2966, %r3734, %r2965, %p295;
	selp.b32 	%r2967, %r3738, %r2966, %p296;
	selp.b32 	%r2968, %r3742, %r2967, %p297;
	selp.b32 	%r2969, %r3746, %r2968, %p298;
	selp.b32 	%r2970, %r3750, %r2969, %p299;
	selp.b32 	%r2971, %r3731, 0, %p294;
	selp.b32 	%r2972, %r3735, %r2971, %p295;
	selp.b32 	%r2973, %r3739, %r2972, %p296;
	selp.b32 	%r2974, %r3743, %r2973, %p297;
	selp.b32 	%r2975, %r3747, %r2974, %p298;
	selp.b32 	%r2976, %r3751, %r2975, %p299;
	selp.b32 	%r2977, %r3732, 0, %p294;
	selp.b32 	%r2978, %r3736, %r2977, %p295;
	selp.b32 	%r2979, %r3740, %r2978, %p296;
	selp.b32 	%r2980, %r3744, %r2979, %p297;
	selp.b32 	%r2981, %r3748, %r2980, %p298;
	selp.b32 	%r2982, %r3752, %r2981, %p299;
	// begin inline asm
	mov.b32 %r2450, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2983, %r2964, 8;
	xor.b32  	%r2460, %r2983, 8947848;
	// begin inline asm
	lop3.b32 %r2447, %r1315, %r2460, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2452, %r2450, %r2451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2455, %r2447, %r2452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2458, %r1326, %r2460, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2461, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2984, %r2970, 8;
	xor.b32  	%r2506, %r2984, 8947848;
	// begin inline asm
	lop3.b32 %r2493, %r1315, %r2506, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2496, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r1326, %r2506, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2507, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2985, %r2976, 8;
	xor.b32  	%r2552, %r2985, 8947848;
	// begin inline asm
	lop3.b32 %r2539, %r1315, %r2552, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2542, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r1326, %r2552, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2553, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs179, %rs179};
	// end inline asm
	shr.u32 	%r2986, %r2982, 8;
	xor.b32  	%r2598, %r2986, 8947848;
	// begin inline asm
	lop3.b32 %r2585, %r1315, %r2598, %r2588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2589, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2590, %r2588, %r2589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2593, %r2585, %r2590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2596, %r1326, %r2598, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs183, %rs183};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2599, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2455;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2607, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2466;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2610, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2501;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2613, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2512;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2616, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2547;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2619, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2558;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2622, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2593;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2625, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2604;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2628, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2894, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2694, %r2691}, {%r420, %r423}, {%r2607}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2703, %r2700}, {%r420, %r423}, {%r2610}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2712, %r2709}, {%r420, %r423}, {%r2613}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2721, %r2718}, {%r420, %r423}, {%r2616}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2730, %r2727}, {%r420, %r423}, {%r2619}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2739, %r2736}, {%r420, %r423}, {%r2622}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2748, %r2745}, {%r420, %r423}, {%r2625}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2757, %r2754}, {%r420, %r423}, {%r2628}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2687, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r2687, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r472, %r2694, %r2689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2696, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2696, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r472, %r2703, %r2698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2710, %r472, %r2712, %r2707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2714, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2714, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r472, %r2721, %r2716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2723, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r2723, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r472, %r2730, %r2725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2732, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r2732, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r472, %r2739, %r2734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2741, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r2741, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r472, %r2748, %r2743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2750, %r475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r2750, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r472, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r475, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r472, %r2691, %r2759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r475, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r472, %r2700, %r2766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r475, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r472, %r2709, %r2773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r475, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r472, %r2718, %r2780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2787, %r475, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r472, %r2727, %r2787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r475, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r472, %r2736, %r2794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r475, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r472, %r2745, %r2801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2808, %r475, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r472, %r2754, %r2808;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2896, %r2897}, {%r516, %r522, %r519, %r525}, {%r2692, %r2762}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2904, %r2905}, {%r516, %r522, %r519, %r525}, {%r2701, %r2769}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2912, %r2913}, {%r516, %r522, %r519, %r525}, {%r2710, %r2776}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2920, %r2921}, {%r516, %r522, %r519, %r525}, {%r2719, %r2783}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2928, %r2929}, {%r516, %r522, %r519, %r525}, {%r2728, %r2790}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2936, %r2937}, {%r516, %r522, %r519, %r525}, {%r2737, %r2797}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2944, %r2945}, {%r516, %r522, %r519, %r525}, {%r2746, %r2804}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2952, %r2953}, {%r516, %r522, %r519, %r525}, {%r2755, %r2811}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2895, %r2896, %r2897, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2899, %r2896, %r2897, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2903, %r2904, %r2905, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2907, %r2904, %r2905, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2911, %r2912, %r2913, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2915, %r2912, %r2913, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2919, %r2920, %r2921, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2923, %r2920, %r2921, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2927, %r2928, %r2929, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2931, %r2928, %r2929, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2935, %r2936, %r2937, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2939, %r2936, %r2937, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2943, %r2944, %r2945, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2947, %r2944, %r2945, %r1016;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2951, %r2952, %r2953, %r1012;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2955, %r2952, %r2953, %r1016;
	// end inline asm
	st.shared.u32 	[%rd7], %r2895;
	st.shared.u32 	[%rd8], %r2899;
	st.shared.u32 	[%rd9], %r2903;
	st.shared.u32 	[%rd10], %r2907;
	st.shared.u32 	[%rd17], %r2911;
	st.shared.u32 	[%rd18], %r2915;
	st.shared.u32 	[%rd9+256], %r2919;
	st.shared.u32 	[%rd10+256], %r2923;
	st.shared.u32 	[%rd19], %r2927;
	st.shared.u32 	[%rd20], %r2931;
	st.shared.u32 	[%rd9+512], %r2935;
	st.shared.u32 	[%rd10+512], %r2939;
	st.shared.u32 	[%rd21], %r2943;
	st.shared.u32 	[%rd22], %r2947;
	st.shared.u32 	[%rd9+768], %r2951;
	st.shared.u32 	[%rd10+768], %r2955;
	@%p273 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_187;
$L__BB0_256:                            // %pass15335
                                        //   in Loop: Header=BB0_186 Depth=2
	st.shared.u32 	[%rd7], %r2895;
	st.shared.u32 	[%rd8], %r2899;
	st.shared.u32 	[%rd9], %r2903;
	st.shared.u32 	[%rd10], %r2907;
	st.shared.u32 	[%rd17], %r2911;
	st.shared.u32 	[%rd18], %r2915;
	st.shared.u32 	[%rd9+256], %r2919;
	st.shared.u32 	[%rd10+256], %r2923;
	st.shared.u32 	[%rd19], %r2927;
	st.shared.u32 	[%rd20], %r2931;
	st.shared.u32 	[%rd9+512], %r2935;
	st.shared.u32 	[%rd10+512], %r2939;
	st.shared.u32 	[%rd21], %r2943;
	st.shared.u32 	[%rd22], %r2947;
	st.shared.u32 	[%rd9+768], %r2951;
	st.shared.u32 	[%rd10+768], %r2955;
$L__BB0_187:                            // %L35970
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	mov.u32 	%r3783, %r2894;
	mov.u32 	%r3784, %r2894;
	mov.u32 	%r3785, %r2894;
	mov.u32 	%r3786, %r2894;
	@%p273 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass17430
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3786, [%rd11];
	ld.shared.u32 	%r3785, [%rd12];
	ld.shared.u32 	%r3784, [%rd13];
	ld.shared.u32 	%r3783, [%rd14];
$L__BB0_188:                            // %L37045
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3023, %r3020}, {%r534, %r537}, {%r3786}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3032, %r3029}, {%r534, %r537}, {%r3785}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3041, %r3038}, {%r534, %r537}, {%r3784}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3050, %r3047}, {%r534, %r537}, {%r3783}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3016, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3018, %r3016, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3021, %r586, %r3023, %r3018;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3025, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3027, %r3025, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r586, %r3032, %r3027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3034, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3036, %r3034, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r586, %r3041, %r3036;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3043, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3045, %r3043, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r586, %r3050, %r3045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r589, %r3023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r586, %r3020, %r3052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3059, %r589, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r586, %r3029, %r3059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3066, %r589, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r586, %r3038, %r3066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3073, %r589, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r586, %r3047, %r3073;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3121, %r3124}, {%r630, %r636, %r633, %r639}, {%r3021, %r3055}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3140, %r3143}, {%r630, %r636, %r633, %r639}, {%r3030, %r3062}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3128, %r3132}, {%r630, %r636, %r633, %r639}, {%r3039, %r3069}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3147, %r3151}, {%r630, %r636, %r633, %r639}, {%r3048, %r3076}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3120, %r3121, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3123, %r3124, %r3124, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3128, %r3128, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r1902, %r3131, %r3757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3139, %r3140, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3143, %r3143, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r3151, %r3151, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r1902, %r3150, %r3756;
	// end inline asm
	mov.u32 	%r3787, %r2894;
	mov.u32 	%r3788, %r2894;
	mov.u32 	%r3789, %r2894;
	mov.u32 	%r3790, %r2894;
	@%p273 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass18035
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3790, [%rd23];
	ld.shared.u32 	%r3789, [%rd24];
	ld.shared.u32 	%r3788, [%rd25];
	ld.shared.u32 	%r3787, [%rd26];
$L__BB0_189:                            // %L38264
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3194, %r3191}, {%r534, %r537}, {%r3790}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3203, %r3200}, {%r534, %r537}, {%r3789}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3212, %r3209}, {%r534, %r537}, {%r3788}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3221, %r3218}, {%r534, %r537}, {%r3787}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3187, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3189, %r3187, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r586, %r3194, %r3189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3196, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3198, %r3196, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r586, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3205, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3205, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r586, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3214, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r3214, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r586, %r3221, %r3216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r589, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r586, %r3191, %r3223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3230, %r589, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r586, %r3200, %r3230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3237, %r589, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r586, %r3209, %r3237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3244, %r589, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r586, %r3218, %r3244;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3292, %r3295}, {%r630, %r636, %r633, %r639}, {%r3192, %r3226}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3311, %r3314}, {%r630, %r636, %r633, %r639}, {%r3201, %r3233}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3299, %r3303}, {%r630, %r636, %r633, %r639}, {%r3210, %r3240}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3318, %r3322}, {%r630, %r636, %r633, %r639}, {%r3219, %r3247}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3291, %r3292, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3294, %r3295, %r3295, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r3299, %r3299, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r3303, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r1902, %r3302, %r3135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3310, %r3311, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r3314, %r3314, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r3318, %r3318, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r3322, %r3322, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r1902, %r3321, %r3154;
	// end inline asm
	mov.u32 	%r3791, %r2894;
	mov.u32 	%r3792, %r2894;
	mov.u32 	%r3793, %r2894;
	mov.u32 	%r3794, %r2894;
	@%p273 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass18640
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3794, [%rd27];
	ld.shared.u32 	%r3793, [%rd28];
	ld.shared.u32 	%r3792, [%rd29];
	ld.shared.u32 	%r3791, [%rd30];
$L__BB0_190:                            // %L39483
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3365, %r3362}, {%r534, %r537}, {%r3794}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3374, %r3371}, {%r534, %r537}, {%r3793}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3383, %r3380}, {%r534, %r537}, {%r3792}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3392, %r3389}, {%r534, %r537}, {%r3791}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3358, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3360, %r3358, %r3362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r586, %r3365, %r3360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3367, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3369, %r3367, %r3371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3372, %r586, %r3374, %r3369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3376, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3378, %r3376, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3381, %r586, %r3383, %r3378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3385, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3387, %r3385, %r3389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r586, %r3392, %r3387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3394, %r589, %r3365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r586, %r3362, %r3394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3401, %r589, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r586, %r3371, %r3401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r589, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r586, %r3380, %r3408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3415, %r589, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r586, %r3389, %r3415;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3466}, {%r630, %r636, %r633, %r639}, {%r3363, %r3397}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3482, %r3485}, {%r630, %r636, %r633, %r639}, {%r3372, %r3404}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3470, %r3474}, {%r630, %r636, %r633, %r639}, {%r3381, %r3411}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3489, %r3493}, {%r630, %r636, %r633, %r639}, {%r3390, %r3418}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3462, %r3463, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3465, %r3466, %r3466, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r3470, %r3470, %r3465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r3474, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r1902, %r3473, %r3306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3481, %r3482, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r3485, %r3485, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r3489, %r3489, %r3484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r3493, %r3493, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r1902, %r3492, %r3325;
	// end inline asm
	mov.u32 	%r3795, %r2894;
	mov.u32 	%r3796, %r2894;
	mov.u32 	%r3797, %r2894;
	mov.u32 	%r3798, %r2894;
	@%p273 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_191;
$L__BB0_260:                            // %pass19245
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3798, [%rd31];
	ld.shared.u32 	%r3797, [%rd32];
	ld.shared.u32 	%r3796, [%rd33];
	ld.shared.u32 	%r3795, [%rd34];
$L__BB0_191:                            // %L40702
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3536, %r3533}, {%r534, %r537}, {%r3798}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3545, %r3542}, {%r534, %r537}, {%r3797}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3554, %r3551}, {%r534, %r537}, {%r3796}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3563, %r3560}, {%r534, %r537}, {%r3795}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3529, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3531, %r3529, %r3533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r586, %r3536, %r3531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3538, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3540, %r3538, %r3542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r586, %r3545, %r3540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3547, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3549, %r3547, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r586, %r3554, %r3549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3556, %r589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3558, %r3556, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r586, %r3563, %r3558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3565, %r589, %r3536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r586, %r3533, %r3565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3572, %r589, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r586, %r3542, %r3572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3579, %r589, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3582, %r586, %r3551, %r3579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3586, %r589, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3589, %r586, %r3560, %r3586;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3634, %r3637}, {%r630, %r636, %r633, %r639}, {%r3534, %r3568}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3653, %r3656}, {%r630, %r636, %r633, %r639}, {%r3543, %r3575}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3641, %r3645}, {%r630, %r636, %r633, %r639}, {%r3552, %r3582}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3660, %r3664}, {%r630, %r636, %r633, %r639}, {%r3561, %r3589}, {%r2894, %r2894};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3633, %r3634, %r3634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3636, %r3637, %r3637, %r3633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3640, %r3641, %r3641, %r3636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3644, %r3645, %r3645, %r3640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3757, %r1902, %r3644, %r3477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3652, %r3653, %r3653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3655, %r3656, %r3656, %r3652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3659, %r3660, %r3660, %r3655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3663, %r3664, %r3664, %r3659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3756, %r1902, %r3663, %r3496;
	// end inline asm
	add.s32 	%r3754, %r3754, 4;
	setp.eq.s32 	%p304, %r3754, 192;
	@%p304 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_194;
$L__BB0_192:                            // %pass19714
                                        //   in Loop: Header=BB0_186 Depth=2
	@%p88 bra 	$L__BB0_193;
// %bb.261:                             // %pass19724
                                        //   in Loop: Header=BB0_186 Depth=2
	mul.lo.s32 	%r3671, %r3755, 589824;
	add.s32 	%r3672, %r117, %r3671;
	cvt.u64.u32 	%rd284, %r3672;
	add.s64 	%rd285, %rd284, %rd15;
	mul.hi.s64 	%rd286, %rd285, 1024819115206086201;
	shr.u64 	%rd287, %rd286, 63;
	shr.s64 	%rd288, %rd286, 25;
	add.s64 	%rd289, %rd288, %rd287;
	setp.lt.s64 	%p306, %rd285, 0;
	mul.lo.s64 	%rd290, %rd289, 603979776;
	setp.ne.s64 	%p307, %rd290, %rd285;
	and.pred  	%p308, %p306, %p307;
	selp.s64 	%rd291, -1, 0, %p308;
	add.s64 	%rd292, %rd289, %rd291;
	mul.lo.s64 	%rd293, %rd292, -603979776;
	add.s64 	%rd294, %rd293, %rd285;
	shl.b64 	%rd295, %rd294, 2;
	add.s64 	%rd296, %rd4, %rd295;
	st.global.u32 	[%rd296], %r3757;
	add.s32 	%r3673, %r118, %r3671;
	cvt.u64.u32 	%rd297, %r3673;
	add.s64 	%rd298, %rd297, %rd15;
	mul.hi.s64 	%rd299, %rd298, 1024819115206086201;
	shr.u64 	%rd300, %rd299, 63;
	shr.s64 	%rd301, %rd299, 25;
	add.s64 	%rd302, %rd301, %rd300;
	setp.lt.s64 	%p309, %rd298, 0;
	mul.lo.s64 	%rd303, %rd302, 603979776;
	setp.ne.s64 	%p310, %rd303, %rd298;
	and.pred  	%p311, %p309, %p310;
	selp.s64 	%rd304, -1, 0, %p311;
	add.s64 	%rd305, %rd302, %rd304;
	mul.lo.s64 	%rd306, %rd305, -603979776;
	add.s64 	%rd307, %rd306, %rd298;
	shl.b64 	%rd308, %rd307, 2;
	add.s64 	%rd309, %rd4, %rd308;
	st.global.u32 	[%rd309], %r3756;
	bra.uni 	$L__BB0_193;
$L__BB0_196:                            // %L41270
	mov.u32 	%r3675, 0;
	st.global.u32 	[%rd6], %r3675;
	ret;
$L__BB0_151:                            // %L7443
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7599
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7755
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7911
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8067
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8223
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8379
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8535
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8691
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8847
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9003
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9159
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9315
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9471
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9627
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9783
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9939
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10095
	mov.u32 	%r3682, 5;
	st.global.u32 	[%rd6], %r3682;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10251
	mov.u32 	%r3681, 5;
	st.global.u32 	[%rd6], %r3681;
	mov.u64 	%rd320, exception3856;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10407
	mov.u32 	%r3680, 5;
	st.global.u32 	[%rd6], %r3680;
	mov.u64 	%rd318, exception3856;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10563
	mov.u32 	%r3679, 5;
	st.global.u32 	[%rd6], %r3679;
	mov.u64 	%rd316, exception3856;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10745
	mov.u32 	%r3678, 5;
	st.global.u32 	[%rd6], %r3678;
	mov.u64 	%rd314, exception3856;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10901
	mov.u32 	%r3677, 5;
	st.global.u32 	[%rd6], %r3677;
	mov.u64 	%rd312, exception3856;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11057
	mov.u32 	%r3676, 5;
	st.global.u32 	[%rd6], %r3676;
	mov.u64 	%rd310, exception3856;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3701, 2;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3700, 3;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd40, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r2, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd46, __unnamed_1;
	cvta.global.u64 	%rd47, %rd46;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd47;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r650, [retval0+0];
	} // callseq 61
	mov.u32 	%r652, 4;
	st.global.u32 	[%rd6], %r652;
	mov.u64 	%rd49, exception3856;
	cvta.global.u64 	%rd50, %rd49;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd50;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r388;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
