// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2191[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<313>;
	.reg .b16 	%rs<231>;
	.reg .b32 	%r<3718>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<342>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r355, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r364, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r364, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r356, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r365, %r3, %r1;
	mad.lo.s32 	%r366, %r4, 768, %r365;
	mul.wide.u32 	%rd33, %r366, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r367, 1;
	st.global.u32 	[%rd6], %r367;
	setp.gt.u32 	%p4, %r356, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r357, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r357, %r356;
	setp.gt.s32 	%p6, %r357, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r358, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r357, %r356;
	mad.lo.s32 	%r368, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r369, %r368, %r368, 4;
	setp.gt.u32 	%p8, %r369, 89478484;
	setp.gt.u32 	%p9, %r358, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r359, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r359, %r358;
	setp.lt.s32 	%p12, %r359, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r370, %r359, %r358;
	mul.hi.s32 	%r371, %r5, 715827883;
	shr.u32 	%r372, %r371, 31;
	shr.s32 	%r373, %r371, 5;
	add.s32 	%r374, %r373, %r372;
	setp.eq.s32 	%p14, %r370, %r374;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r360, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r361, %r360;
	setp.gt.s32 	%p17, %r361, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r362, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r363, %r362;
	setp.gt.s32 	%p22, %r363, 512;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r375, %r363, %r362;
	sub.s32 	%r376, %r361, %r360;
	setp.eq.s32 	%p24, %r375, %r376;
	@%p24 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_12;
$L__BB0_194:                            // %pass162
	and.b32  	%r221, %r1, 3;
	shr.u32 	%r222, %r1, 2;
	mul.lo.s32 	%r377, %r221, %r222;
	and.b32  	%r378, %r377, 7;
	cvt.rn.f32.s32 	%f201, %r378;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p312, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_206;
// %bb.195:
	@%p312 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_196;
$L__BB0_202:
	mov.b32 	%r224, %f785;
	and.b32  	%r379, %r224, 8388607;
	or.b32  	%r3713, %r379, 1065353216;
	mov.b32 	%f780, %r3713;
	add.s32 	%r380, %r224, -1073741824;
	and.b32  	%r3714, %r380, -8388608;
	setp.eq.s32 	%p32, %r3714, 0;
	@%p32 bra 	$L__BB0_205;
// %bb.203:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_204:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3714, 192937984;
	add.s32 	%r382, %r3713, %r381;
	mov.b32 	%f213, %r382;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3714, %r3714, %r381;
	mov.b32 	%r3713, %f780;
	setp.ne.s32 	%p33, %r3714, 0;
	setp.ne.s32 	%p34, %r3713, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_204;
$L__BB0_205:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r224, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_206;
$L__BB0_196:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r223, %f172;
	setp.lt.u32 	%p27, %r223, 1073741824;
	@%p27 bra 	$L__BB0_201;
// %bb.197:
	setp.lt.u32 	%p28, %r223, -2147483647;
	@%p28 bra 	$L__BB0_199;
// %bb.198:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_201;
$L__BB0_199:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_201;
// %bb.200:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_201:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_206:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r383, %f169;
	and.b32  	%r231, %r383, -2147483648;
	@%p37 bra 	$L__BB0_208;
// %bb.207:
	mov.b32 	%r384, %f781;
	or.b32  	%r385, %r231, %r384;
	mov.b32 	%f781, %r385;
$L__BB0_208:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r234, %r1, 1;
	and.b32  	%r235, %r234, 6;
	or.b32  	%r236, %r235, 1;
	setp.eq.s32 	%p45, %r235, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3614, %r235, %r222;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3614;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r401, %r7, 8388607;
	or.b32  	%r3616, %r401, 1065353216;
	mov.b32 	%f732, %r3616;
	add.s32 	%r402, %r7, -1073741824;
	and.b32  	%r3617, %r402, -8388608;
	setp.eq.s32 	%p53, %r3617, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3617, 192937984;
	add.s32 	%r404, %r3616, %r403;
	mov.b32 	%f267, %r404;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3617, %r3617, %r403;
	mov.b32 	%r3616, %f732;
	setp.ne.s32 	%p54, %r3617, 0;
	setp.ne.s32 	%p55, %r3616, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r405, %f1;
	and.b32  	%r406, %r405, -2147483648;
	mov.b32 	%r407, %f733;
	or.b32  	%r408, %r406, %r407;
	mov.b32 	%f733, %r408;
$L__BB0_27:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r409, %f277;
	and.b32  	%r410, %r409, -2147483648;
	or.b32  	%r411, %r410, 1056964608;
	mov.b32 	%f278, %r411;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r412, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r413, %r412, 1;
	setp.eq.b32 	%p61, %r413, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r414, %r412, 2;
	setp.eq.s32 	%p62, %r414, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r415, %r412, 1;
	and.b32  	%r416, %r415, 2;
	setp.eq.s32 	%p63, %r416, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p66, %r236, 5;
	mul.lo.s32 	%r3615, %r236, %r222;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r418, %r3615, -1431655765;
	shr.u32 	%r419, %r418, 5;
	mul.lo.s32 	%r420, %r419, 48;
	sub.s32 	%r421, %r3615, %r420;
	cvt.rn.f32.s32 	%f308, %r421;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r422, %r15, 8388607;
	or.b32  	%r3618, %r422, 1065353216;
	mov.b32 	%f738, %r3618;
	add.s32 	%r423, %r15, -1073741824;
	and.b32  	%r3619, %r423, -8388608;
	setp.eq.s32 	%p74, %r3619, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3619, 192937984;
	add.s32 	%r425, %r3618, %r424;
	mov.b32 	%f320, %r425;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3619, %r3619, %r424;
	mov.b32 	%r3618, %f738;
	setp.ne.s32 	%p75, %r3619, 0;
	setp.ne.s32 	%p76, %r3618, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r426, %f22;
	and.b32  	%r427, %r426, -2147483648;
	mov.b32 	%r428, %f739;
	or.b32  	%r429, %r427, %r428;
	mov.b32 	%f739, %r429;
$L__BB0_43:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r430, %f330;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f331, %r432;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r433, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p82, %r434, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p83, %r435, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p84, %r437, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p88, %r1, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3614;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r445, %r25, 8388607;
	or.b32  	%r3620, %r445, 1065353216;
	mov.b32 	%f744, %r3620;
	add.s32 	%r446, %r25, -1073741824;
	and.b32  	%r3621, %r446, -8388608;
	setp.eq.s32 	%p96, %r3621, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r447, %r3621, 192937984;
	add.s32 	%r448, %r3620, %r447;
	mov.b32 	%f373, %r448;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3621, %r3621, %r447;
	mov.b32 	%r3620, %f744;
	setp.ne.s32 	%p97, %r3621, 0;
	setp.ne.s32 	%p98, %r3620, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r449, %f43;
	and.b32  	%r450, %r449, -2147483648;
	mov.b32 	%r451, %f745;
	or.b32  	%r452, %r450, %r451;
	mov.b32 	%f745, %r452;
$L__BB0_59:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r453, %f383;
	and.b32  	%r454, %r453, -2147483648;
	or.b32  	%r455, %r454, 1056964608;
	mov.b32 	%f384, %r455;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r456, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r457, %r456, 1;
	setp.eq.b32 	%p104, %r457, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r458, %r456, 2;
	setp.eq.s32 	%p105, %r458, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r459, %r456, 1;
	and.b32  	%r460, %r459, 2;
	setp.eq.s32 	%p106, %r460, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r462, %r3615, -1431655765;
	shr.u32 	%r463, %r462, 2;
	mul.lo.s32 	%r464, %r463, 6;
	sub.s32 	%r465, %r3615, %r464;
	cvt.rn.f32.s32 	%f414, %r465;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r466, %r33, 8388607;
	or.b32  	%r3622, %r466, 1065353216;
	mov.b32 	%f750, %r3622;
	add.s32 	%r467, %r33, -1073741824;
	and.b32  	%r3623, %r467, -8388608;
	setp.eq.s32 	%p118, %r3623, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r468, %r3623, 192937984;
	add.s32 	%r469, %r3622, %r468;
	mov.b32 	%f426, %r469;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3623, %r3623, %r468;
	mov.b32 	%r3622, %f750;
	setp.ne.s32 	%p119, %r3623, 0;
	setp.ne.s32 	%p120, %r3622, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r470, %f64;
	and.b32  	%r471, %r470, -2147483648;
	mov.b32 	%r472, %f751;
	or.b32  	%r473, %r471, %r472;
	mov.b32 	%f751, %r473;
$L__BB0_75:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r474, %f436;
	and.b32  	%r475, %r474, -2147483648;
	or.b32  	%r476, %r475, 1056964608;
	mov.b32 	%f437, %r476;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r477, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r478, %r477, 1;
	setp.eq.b32 	%p126, %r478, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r479, %r477, 2;
	setp.eq.s32 	%p127, %r479, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r480, %r477, 1;
	and.b32  	%r481, %r480, 2;
	setp.eq.s32 	%p128, %r481, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L673
	@%p25 bra 	$L__BB0_216;
// %bb.77:
	@%p312 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_78;
$L__BB0_212:
	mov.b32 	%r238, %f785;
	and.b32  	%r494, %r238, 8388607;
	or.b32  	%r3715, %r494, 1065353216;
	mov.b32 	%f784, %r3715;
	add.s32 	%r495, %r238, -1073741824;
	and.b32  	%r3716, %r495, -8388608;
	setp.eq.s32 	%p138, %r3716, 0;
	@%p138 bra 	$L__BB0_215;
// %bb.213:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_214:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r496, %r3716, 192937984;
	add.s32 	%r497, %r3715, %r496;
	mov.b32 	%f476, %r497;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3716, %r3716, %r496;
	mov.b32 	%r3715, %f784;
	setp.ne.s32 	%p139, %r3716, 0;
	setp.ne.s32 	%p140, %r3715, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_214;
$L__BB0_215:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p142, %r238, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_216;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r237, %f187;
	setp.lt.u32 	%p133, %r237, 1073741824;
	@%p133 bra 	$L__BB0_211;
// %bb.79:
	setp.lt.u32 	%p134, %r237, -2147483647;
	@%p134 bra 	$L__BB0_209;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_211;
$L__BB0_209:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_211;
// %bb.210:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_211:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_216:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_218;
// %bb.217:
	mov.b32 	%r498, %f785;
	or.b32  	%r499, %r231, %r498;
	mov.b32 	%f785, %r499;
$L__BB0_218:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3614;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r515, %r45, 8388607;
	or.b32  	%r3624, %r515, 1065353216;
	mov.b32 	%f756, %r3624;
	add.s32 	%r516, %r45, -1073741824;
	and.b32  	%r3625, %r516, -8388608;
	setp.eq.s32 	%p159, %r3625, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r517, %r3625, 192937984;
	add.s32 	%r518, %r3624, %r517;
	mov.b32 	%f530, %r518;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3625, %r3625, %r517;
	mov.b32 	%r3624, %f756;
	setp.ne.s32 	%p160, %r3625, 0;
	setp.ne.s32 	%p161, %r3624, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r519, %f85;
	and.b32  	%r520, %r519, -2147483648;
	mov.b32 	%r521, %f757;
	or.b32  	%r522, %r520, %r521;
	mov.b32 	%f757, %r522;
$L__BB0_95:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r523, %f540;
	and.b32  	%r524, %r523, -2147483648;
	or.b32  	%r525, %r524, 1056964608;
	mov.b32 	%f541, %r525;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r526, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r527, %r526, 1;
	setp.eq.b32 	%p167, %r527, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r528, %r526, 2;
	setp.eq.s32 	%p168, %r528, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r529, %r526, 1;
	and.b32  	%r530, %r529, 2;
	setp.eq.s32 	%p169, %r530, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r532, %r3615, -1431655765;
	shr.u32 	%r533, %r532, 5;
	mul.lo.s32 	%r534, %r533, 48;
	sub.s32 	%r535, %r3615, %r534;
	cvt.rn.f32.s32 	%f571, %r535;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r536, %r53, 8388607;
	or.b32  	%r3626, %r536, 1065353216;
	mov.b32 	%f762, %r3626;
	add.s32 	%r537, %r53, -1073741824;
	and.b32  	%r3627, %r537, -8388608;
	setp.eq.s32 	%p180, %r3627, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r538, %r3627, 192937984;
	add.s32 	%r539, %r3626, %r538;
	mov.b32 	%f583, %r539;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3627, %r3627, %r538;
	mov.b32 	%r3626, %f762;
	setp.ne.s32 	%p181, %r3627, 0;
	setp.ne.s32 	%p182, %r3626, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r540, %f106;
	and.b32  	%r541, %r540, -2147483648;
	mov.b32 	%r542, %f763;
	or.b32  	%r543, %r541, %r542;
	mov.b32 	%f763, %r543;
$L__BB0_111:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r544, %f593;
	and.b32  	%r545, %r544, -2147483648;
	or.b32  	%r546, %r545, 1056964608;
	mov.b32 	%f594, %r546;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r547, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r548, %r547, 1;
	setp.eq.b32 	%p188, %r548, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r549, %r547, 2;
	setp.eq.s32 	%p189, %r549, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r550, %r547, 1;
	and.b32  	%r551, %r550, 2;
	setp.eq.s32 	%p190, %r551, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3614;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r559, %r63, 8388607;
	or.b32  	%r3628, %r559, 1065353216;
	mov.b32 	%f768, %r3628;
	add.s32 	%r560, %r63, -1073741824;
	and.b32  	%r3629, %r560, -8388608;
	setp.eq.s32 	%p200, %r3629, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r561, %r3629, 192937984;
	add.s32 	%r562, %r3628, %r561;
	mov.b32 	%f636, %r562;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3629, %r3629, %r561;
	mov.b32 	%r3628, %f768;
	setp.ne.s32 	%p201, %r3629, 0;
	setp.ne.s32 	%p202, %r3628, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r563, %f127;
	and.b32  	%r564, %r563, -2147483648;
	mov.b32 	%r565, %f769;
	or.b32  	%r566, %r564, %r565;
	mov.b32 	%f769, %r566;
$L__BB0_127:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r567, %f646;
	and.b32  	%r568, %r567, -2147483648;
	or.b32  	%r569, %r568, 1056964608;
	mov.b32 	%f647, %r569;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r570, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r571, %r570, 1;
	setp.eq.b32 	%p208, %r571, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r572, %r570, 2;
	setp.eq.s32 	%p209, %r572, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r573, %r570, 1;
	and.b32  	%r574, %r573, 2;
	setp.eq.s32 	%p210, %r574, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r576, %r3615, -1431655765;
	shr.u32 	%r577, %r576, 2;
	mul.lo.s32 	%r578, %r577, 6;
	sub.s32 	%r579, %r3615, %r578;
	cvt.rn.f32.s32 	%f677, %r579;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r580, %r71, 8388607;
	or.b32  	%r3630, %r580, 1065353216;
	mov.b32 	%f774, %r3630;
	add.s32 	%r581, %r71, -1073741824;
	and.b32  	%r3631, %r581, -8388608;
	setp.eq.s32 	%p220, %r3631, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r582, %r3631, 192937984;
	add.s32 	%r583, %r3630, %r582;
	mov.b32 	%f689, %r583;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3631, %r3631, %r582;
	mov.b32 	%r3630, %f774;
	setp.ne.s32 	%p221, %r3631, 0;
	setp.ne.s32 	%p222, %r3630, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r584, %f148;
	and.b32  	%r585, %r584, -2147483648;
	mov.b32 	%r586, %f775;
	or.b32  	%r587, %r585, %r586;
	mov.b32 	%f775, %r587;
$L__BB0_143:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r588, %f699;
	and.b32  	%r589, %r588, -2147483648;
	or.b32  	%r590, %r589, 1056964608;
	mov.b32 	%f700, %r590;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r591, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r592, %r591, 1;
	setp.eq.b32 	%p228, %r592, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r593, %r591, 2;
	setp.eq.s32 	%p229, %r593, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r594, %r591, 1;
	and.b32  	%r595, %r594, 2;
	setp.eq.s32 	%p230, %r595, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L961
	mov.u32 	%r247, 999999999;
	cvt.u16.u32 	%rs230, %r1;
	@%p88 bra 	$L__BB0_220;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs230, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs230, %rs33;
	cvt.u32.u16 	%r609, %rs34;
	and.b32  	%r610, %r609, 255;
	mad.lo.s32 	%r611, %r610, 24, %r2;
	cvt.u16.u32 	%rs35, %r611;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r612, %rs39;
	mul.wide.u32 	%rd34, %r612, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r613, [%rd35];
	shl.b32 	%r614, %r613, 16;
	cvt.s32.s16 	%r82, %r613;
	shr.s32 	%r83, %r613, 16;
	or.b32  	%r615, %r614, 65535;
	setp.lt.u32 	%p234, %r615, 1638399;
	setp.lt.u32 	%p235, %r613, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_146;
$L__BB0_219:                            // %L1237
	mul.lo.s32 	%r619, %r83, 801;
	mad.lo.s32 	%r247, %r82, 33, %r619;
$L__BB0_220:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r392, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r393, %r392, -2147483648;
	mov.b32 	%r506, %f487;
	or.b32  	%r394, %r393, 1056964608;
	and.b32  	%r507, %r506, -2147483648;
	mov.b32 	%f225, %r394;
	or.b32  	%r508, %r507, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r508;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r395, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r396, %r395, 1;
	cvt.rzi.s32.f32 	%r509, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r396, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r510, %r509, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r397, %r395, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r510, 1;
	setp.eq.s32 	%p41, %r397, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r398, %r395, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r511, %r509, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r399, %r398, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r511, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r512, %r509, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r399, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r513, %r512, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r513, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r388, %f254;
	mov.b32 	%r391, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r387, %r391, -2147483648;
	mov.b32 	%r483, %f62;
	mov.b32 	%r484, %f83;
	mov.b32 	%r489, %f63;
	mov.b32 	%r490, %f84;
	mov.b32 	%r502, %f517;
	mov.b32 	%r505, %f514;
	mov.b32 	%r439, %f20;
	mov.b32 	%r440, %f41;
	mov.b32 	%r442, %f21;
	mov.b32 	%r443, %f42;
	xor.b32  	%r486, %r489, -2147483648;
	xor.b32  	%r487, %r490, -2147483648;
	xor.b32  	%r501, %r505, -2147483648;
	mov.b32 	%r553, %f104;
	mov.b32 	%r554, %f125;
	mov.b32 	%r556, %f105;
	mov.b32 	%r557, %f126;
	mov.b32 	%r597, %f146;
	mov.b32 	%r598, %f167;
	mov.b32 	%r603, %f147;
	xor.b32  	%r600, %r603, -2147483648;
	mov.b32 	%r604, %f168;
	xor.b32  	%r601, %r604, -2147483648;
	and.b32  	%r621, %r1, 24;
	setp.eq.s32 	%p237, %r621, 24;
	cvt.u16.u32 	%rs40, %r222;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs40, %rs43;
	cvt.u32.u16 	%r622, %rs44;
	and.b32  	%r248, %r622, 255;
	mov.u32 	%r119, 0;
	mov.u32 	%r85, %r119;
	mov.u32 	%r86, %r119;
	@%p237 bra 	$L__BB0_147;
// %bb.221:                             // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r623, %r248, 24;
	mul.lo.s32 	%r624, %r221, 144;
	and.b32  	%r625, %r4, 15;
	mul.lo.s32 	%r626, %r625, 1152;
	add.s32 	%r627, %r624, %r2;
	add.s32 	%r628, %r627, %r626;
	add.s32 	%r629, %r628, %r623;
	mul.wide.u32 	%rd41, %r629, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r85, [%rd42];
	or.b32  	%r630, %r2, 576;
	add.s32 	%r631, %r630, %r624;
	add.s32 	%r632, %r631, %r626;
	add.s32 	%r633, %r632, %r623;
	mul.wide.u32 	%rd43, %r633, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r86, [%rd44];
$L__BB0_147:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r488, %r490, %r489;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r491, %r484, %r483;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r500, %r502, %r501;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r552, %r554, %r553;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r555, %r557, %r556;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r596, %r598, %r597;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r599, %r601, %r600;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r602, %r604, %r603;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r605, %r598, %r597;
	// end inline asm
	shl.b32 	%r635, %r360, 8;
	shl.b32 	%r636, %r4, 8;
	shl.b32 	%r637, %r1, 3;
	and.b32  	%r638, %r637, 128;
	shl.b32 	%r639, %r1, 2;
	and.b32  	%r640, %r639, 60;
	or.b32  	%r641, %r640, %r636;
	or.b32  	%r642, %r641, %r638;
	add.s32 	%r87, %r642, %r635;
	mad.lo.s32 	%r88, %r356, 12288, %r635;
	or.b32  	%r89, %r638, %r636;
	or.b32  	%r90, %r639, 64;
	add.s32 	%r91, %r2, 24;
	shr.u32 	%r643, %r1, 4;
	and.b32  	%r644, %r234, 30;
	or.b32  	%r645, %r644, %r643;
	mul.lo.s32 	%r92, %r645, 257;
	or.b32  	%r646, %r234, %r643;
	or.b32  	%r647, %r646, 32;
	mul.lo.s32 	%r93, %r647, 257;
	and.b32  	%r648, %r3, 224;
	and.b16  	%rs46, %rs230, 255;
	mul.lo.s16 	%rs47, %rs46, 171;
	shr.u16 	%rs48, %rs47, 12;
	mul.lo.s16 	%rs49, %rs48, 24;
	sub.s16 	%rs50, %rs230, %rs49;
	cvt.u32.u16 	%r649, %rs50;
	and.b32  	%r94, %r649, 255;
	shr.u32 	%r650, %r2, 3;
	mad.lo.s32 	%r95, %r650, 257, %r648;
	shr.u32 	%r651, %r91, 3;
	mad.lo.s32 	%r96, %r651, 257, %r648;
	add.s32 	%r652, %r2, 48;
	shr.u32 	%r653, %r652, 3;
	mad.lo.s32 	%r97, %r653, 257, %r648;
	add.s32 	%r654, %r2, 72;
	shr.u32 	%r655, %r654, 3;
	mad.lo.s32 	%r98, %r655, 257, %r648;
	or.b32  	%r656, %r650, 12;
	mad.lo.s32 	%r99, %r656, 257, %r648;
	add.s32 	%r657, %r2, 120;
	shr.u32 	%r658, %r657, 3;
	mad.lo.s32 	%r100, %r658, 257, %r648;
	add.s32 	%r659, %r2, 144;
	shr.u32 	%r660, %r659, 3;
	mad.lo.s32 	%r101, %r660, 257, %r648;
	add.s32 	%r661, %r2, 168;
	shr.u32 	%r662, %r661, 3;
	mad.lo.s32 	%r102, %r662, 257, %r648;
	or.b32  	%r663, %r650, 24;
	mad.lo.s32 	%r103, %r663, 257, %r648;
	add.s32 	%r664, %r2, 216;
	shr.u32 	%r665, %r664, 3;
	mad.lo.s32 	%r104, %r665, 257, %r648;
	add.s32 	%r666, %r2, 240;
	shr.u32 	%r667, %r666, 3;
	mad.lo.s32 	%r105, %r667, 257, %r648;
	add.s32 	%r668, %r2, 264;
	shr.u32 	%r669, %r668, 3;
	mad.lo.s32 	%r106, %r669, 257, %r648;
	or.b32  	%r670, %r650, 36;
	mad.lo.s32 	%r107, %r670, 257, %r648;
	add.s32 	%r671, %r2, 312;
	shr.u32 	%r672, %r671, 3;
	mad.lo.s32 	%r108, %r672, 257, %r648;
	add.s32 	%r673, %r2, 336;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r109, %r674, 257, %r648;
	add.s32 	%r675, %r2, 360;
	shr.u32 	%r676, %r675, 3;
	mad.lo.s32 	%r110, %r676, 257, %r648;
	or.b32  	%r677, %r650, 48;
	mad.lo.s32 	%r111, %r677, 257, %r648;
	add.s32 	%r678, %r2, 408;
	shr.u32 	%r679, %r678, 3;
	mad.lo.s32 	%r112, %r679, 257, %r648;
	add.s32 	%r680, %r2, 432;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r113, %r681, 257, %r648;
	add.s32 	%r682, %r2, 456;
	shr.u32 	%r683, %r682, 3;
	mad.lo.s32 	%r114, %r683, 257, %r648;
	or.b32  	%r684, %r650, 60;
	mad.lo.s32 	%r115, %r684, 257, %r648;
	add.s32 	%r685, %r2, 504;
	bfe.u32 	%r686, %r685, 3, 6;
	mad.lo.s32 	%r116, %r686, 257, %r648;
	mul.lo.s32 	%r687, %r2, 33;
	mad.lo.s32 	%r688, %r221, 4806, %r687;
	mad.lo.s32 	%r689, %r248, 801, %r688;
	bfe.s32 	%r690, %r2, 1, 1;
	and.b32  	%r691, %r690, 4112;
	shr.u32 	%r692, %r2, 4;
	bfe.s32 	%r693, %r2, 2, 1;
	and.b32  	%r694, %r693, 2056;
	mul.lo.s32 	%r695, %r221, 6;
	bfe.s32 	%r696, %r2, 3, 1;
	and.b32  	%r697, %r2, 8;
	setp.eq.s32 	%p238, %r697, 0;
	and.b32  	%r698, %r696, 1028;
	and.b32  	%r699, %r2, 1;
	neg.s32 	%r700, %r699;
	and.b32  	%r701, %r700, 8256;
	mad.lo.s32 	%r702, %r692, 514, %r695;
	add.s32 	%r703, %r702, %r691;
	add.s32 	%r704, %r703, %r694;
	add.s32 	%r705, %r704, %r698;
	add.s32 	%r706, %r705, %r701;
	add.s32 	%r707, %r706, %r248;
	mul.wide.u32 	%rd45, %r707, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	shr.u32 	%r708, %r91, 5;
	bfe.s32 	%r709, %r91, 4, 1;
	and.b32  	%r710, %r709, 514;
	selp.b32 	%r711, 1028, 0, %p238;
	mad.lo.s32 	%r712, %r708, 257, %r695;
	add.s32 	%r713, %r712, %r691;
	add.s32 	%r714, %r713, %r694;
	add.s32 	%r715, %r714, %r711;
	add.s32 	%r716, %r715, %r701;
	add.s32 	%r717, %r716, %r710;
	add.s32 	%r718, %r717, %r248;
	mul.wide.u32 	%rd47, %r718, 4;
	add.s64 	%rd8, %rd46, %rd47;
	add.s32 	%r719, %r707, 32;
	mul.wide.u32 	%rd48, %r719, 4;
	add.s64 	%rd9, %rd46, %rd48;
	add.s32 	%r720, %r718, 32;
	mul.wide.u32 	%rd49, %r720, 4;
	add.s64 	%rd10, %rd46, %rd49;
	mul.lo.s32 	%r721, %r358, 589824;
	mad.lo.s32 	%r722, %r362, 1152, %r721;
	mul.lo.s32 	%r723, %r4, 1152;
	mad.lo.s32 	%r724, %r2, 24, %r723;
	add.s32 	%r117, %r724, %r94;
	cvt.s64.s32 	%rd11, %r722;
	cvt.u16.u32 	%rs51, %r91;
	and.b16  	%rs52, %rs51, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 13;
	mul.lo.s16 	%rs55, %rs54, 48;
	sub.s16 	%rs56, %rs51, %rs55;
	cvt.u32.u16 	%r725, %rs56;
	and.b32  	%r726, %r725, 255;
	or.b32  	%r727, %r723, %r94;
	mad.lo.s32 	%r118, %r726, 24, %r727;
	mul.wide.u32 	%rd50, %r689, 4;
	add.s64 	%rd12, %rd46, %rd50;
	add.s32 	%r728, %r707, 64;
	mul.wide.u32 	%rd51, %r728, 4;
	add.s64 	%rd13, %rd46, %rd51;
	add.s32 	%r729, %r718, 64;
	mul.wide.u32 	%rd52, %r729, 4;
	add.s64 	%rd14, %rd46, %rd52;
	add.s32 	%r730, %r707, 96;
	mul.wide.u32 	%rd53, %r730, 4;
	add.s64 	%rd15, %rd46, %rd53;
	add.s32 	%r731, %r718, 96;
	mul.wide.u32 	%rd54, %r731, 4;
	add.s64 	%rd16, %rd46, %rd54;
	add.s32 	%r732, %r707, 128;
	mul.wide.u32 	%rd55, %r732, 4;
	add.s64 	%rd17, %rd46, %rd55;
	add.s32 	%r733, %r718, 128;
	mul.wide.u32 	%rd56, %r733, 4;
	add.s64 	%rd18, %rd46, %rd56;
	add.s32 	%r734, %r707, 160;
	mul.wide.u32 	%rd57, %r734, 4;
	add.s64 	%rd19, %rd46, %rd57;
	add.s32 	%r735, %r718, 160;
	mul.wide.u32 	%rd58, %r735, 4;
	add.s64 	%rd20, %rd46, %rd58;
	add.s32 	%r736, %r707, 192;
	mul.wide.u32 	%rd59, %r736, 4;
	add.s64 	%rd21, %rd46, %rd59;
	add.s32 	%r737, %r718, 192;
	mul.wide.u32 	%rd60, %r737, 4;
	add.s64 	%rd22, %rd46, %rd60;
	add.s32 	%r738, %r707, 224;
	mul.wide.u32 	%rd61, %r738, 4;
	add.s64 	%rd23, %rd46, %rd61;
	add.s32 	%r739, %r718, 224;
	mul.wide.u32 	%rd62, %r739, 4;
	add.s64 	%rd24, %rd46, %rd62;
	setp.lt.u32 	%p240, %r1, 16;
	setp.gt.u32 	%p269, %r2, 7;
	setp.lt.u32 	%p273, %r1, 24;
	mov.u32 	%r3664, %r119;
	mov.u32 	%r3665, %r119;
	mov.u32 	%r3666, %r119;
	mov.u32 	%r3667, %r119;
	bra.uni 	$L__BB0_148;
$L__BB0_192:                            // %L25621
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r220, %r119, 48;
	setp.ne.s32 	%p311, %r119, 32688;
	mov.u32 	%r119, %r220;
	@%p311 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_193;
$L__BB0_148:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_175 Depth 2
                                        //     Child Loop BB0_184 Depth 2
	add.s32 	%r740, %r119, %r356;
	setp.lt.s32 	%p239, %r740, %r357;
	@%p239 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_193;
$L__BB0_149:                            // %oksrem690
                                        //   in Loop: Header=BB0_148 Depth=1
	mul.hi.u32 	%r933, %r119, -1431655765;
	shr.u32 	%r934, %r933, 5;
	mul.lo.s32 	%r251, %r934, 48;
	add.s32 	%r935, %r251, %r2;
	add.s32 	%r936, %r935, %r356;
	mad.lo.s32 	%r937, %r936, 12288, %r87;
	mul.hi.s32 	%r938, %r937, 715827883;
	shr.u32 	%r939, %r938, 31;
	shr.s32 	%r940, %r938, 26;
	add.s32 	%r941, %r940, %r939;
	setp.lt.s32 	%p241, %r937, 0;
	mul.lo.s32 	%r942, %r941, 402653184;
	setp.ne.s32 	%p242, %r942, %r937;
	and.pred  	%p243, %p241, %p242;
	selp.s32 	%r943, -1, 0, %p243;
	add.s32 	%r944, %r941, %r943;
	mad.lo.s32 	%r945, %r944, -402653184, %r937;
	mul.wide.s32 	%rd63, %r945, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r946, %r947, %r948, %r949}, [%rd64];
	mad.lo.s32 	%r950, %r935, 12288, %r89;
	or.b32  	%r951, %r90, %r950;
	add.s32 	%r952, %r88, %r951;
	mul.hi.s32 	%r953, %r952, 715827883;
	shr.u32 	%r954, %r953, 31;
	shr.s32 	%r955, %r953, 26;
	add.s32 	%r956, %r955, %r954;
	shr.s32 	%r957, %r952, 31;
	add.s32 	%r958, %r957, %r956;
	mad.lo.s32 	%r959, %r958, -402653184, %r952;
	mul.wide.s32 	%rd65, %r959, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r960, %r961, %r962, %r963}, [%rd66];
	add.s32 	%r964, %r91, %r251;
	add.s32 	%r965, %r964, %r356;
	mad.lo.s32 	%r966, %r965, 12288, %r87;
	mul.hi.s32 	%r967, %r966, 715827883;
	shr.u32 	%r968, %r967, 31;
	shr.s32 	%r969, %r967, 26;
	add.s32 	%r970, %r969, %r968;
	setp.lt.s32 	%p244, %r966, 0;
	mul.lo.s32 	%r971, %r970, 402653184;
	setp.ne.s32 	%p245, %r971, %r966;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r972, -1, 0, %p246;
	add.s32 	%r973, %r970, %r972;
	mad.lo.s32 	%r974, %r973, -402653184, %r966;
	mul.wide.s32 	%rd67, %r974, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r975, %r976, %r977, %r978}, [%rd68];
	mad.lo.s32 	%r979, %r964, 12288, %r89;
	or.b32  	%r980, %r90, %r979;
	add.s32 	%r981, %r88, %r980;
	mul.hi.s32 	%r982, %r981, 715827883;
	shr.u32 	%r983, %r982, 31;
	shr.s32 	%r984, %r982, 26;
	add.s32 	%r985, %r984, %r983;
	shr.s32 	%r986, %r981, 31;
	add.s32 	%r987, %r986, %r985;
	mad.lo.s32 	%r988, %r987, -402653184, %r981;
	mul.wide.s32 	%rd69, %r988, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r989, %r990, %r991, %r992}, [%rd70];
	selp.b32 	%r993, %r948, %r946, %p240;
	shfl.sync.bfly.b32	%r994, %r993, 16, 31, -1;
	selp.b32 	%r743, %r946, %r994, %p240;
	selp.b32 	%r748, %r994, %r948, %p240;
	selp.b32 	%r995, %r949, %r947, %p240;
	shfl.sync.bfly.b32	%r996, %r995, 16, 31, -1;
	selp.b32 	%r751, %r947, %r996, %p240;
	selp.b32 	%r756, %r996, %r949, %p240;
	selp.b32 	%r997, %r962, %r960, %p240;
	shfl.sync.bfly.b32	%r998, %r997, 16, 31, -1;
	selp.b32 	%r759, %r960, %r998, %p240;
	selp.b32 	%r764, %r998, %r962, %p240;
	selp.b32 	%r999, %r963, %r961, %p240;
	shfl.sync.bfly.b32	%r1000, %r999, 16, 31, -1;
	selp.b32 	%r767, %r961, %r1000, %p240;
	selp.b32 	%r772, %r1000, %r963, %p240;
	selp.b32 	%r1001, %r977, %r975, %p240;
	shfl.sync.bfly.b32	%r1002, %r1001, 16, 31, -1;
	selp.b32 	%r775, %r975, %r1002, %p240;
	selp.b32 	%r780, %r1002, %r977, %p240;
	selp.b32 	%r1003, %r978, %r976, %p240;
	shfl.sync.bfly.b32	%r1004, %r1003, 16, 31, -1;
	selp.b32 	%r783, %r976, %r1004, %p240;
	selp.b32 	%r788, %r1004, %r978, %p240;
	selp.b32 	%r1005, %r991, %r989, %p240;
	shfl.sync.bfly.b32	%r1006, %r1005, 16, 31, -1;
	selp.b32 	%r791, %r989, %r1006, %p240;
	selp.b32 	%r796, %r1006, %r991, %p240;
	selp.b32 	%r1007, %r992, %r990, %p240;
	shfl.sync.bfly.b32	%r1008, %r1007, 16, 31, -1;
	selp.b32 	%r799, %r990, %r1008, %p240;
	selp.b32 	%r804, %r1008, %r992, %p240;
	shl.b32 	%r744, %r748, 4;
	mov.u32 	%r742, 252645135;
	// begin inline asm
	lop3.b32 %r806, %r742, %r743, %r744, 202;
	// end inline asm
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r822, %r742, %r747, %r748, 202;
	// end inline asm
	shl.b32 	%r752, %r756, 4;
	// begin inline asm
	lop3.b32 %r814, %r742, %r751, %r752, 202;
	// end inline asm
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r830, %r742, %r755, %r756, 202;
	// end inline asm
	shl.b32 	%r760, %r764, 4;
	// begin inline asm
	lop3.b32 %r838, %r742, %r759, %r760, 202;
	// end inline asm
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r854, %r742, %r763, %r764, 202;
	// end inline asm
	shl.b32 	%r768, %r772, 4;
	// begin inline asm
	lop3.b32 %r846, %r742, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r862, %r742, %r771, %r772, 202;
	// end inline asm
	shl.b32 	%r776, %r780, 4;
	// begin inline asm
	lop3.b32 %r807, %r742, %r775, %r776, 202;
	// end inline asm
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r823, %r742, %r779, %r780, 202;
	// end inline asm
	shl.b32 	%r784, %r788, 4;
	// begin inline asm
	lop3.b32 %r815, %r742, %r783, %r784, 202;
	// end inline asm
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r831, %r742, %r787, %r788, 202;
	// end inline asm
	shl.b32 	%r792, %r796, 4;
	// begin inline asm
	lop3.b32 %r839, %r742, %r791, %r792, 202;
	// end inline asm
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r855, %r742, %r795, %r796, 202;
	// end inline asm
	shl.b32 	%r800, %r804, 4;
	// begin inline asm
	lop3.b32 %r847, %r742, %r799, %r800, 202;
	// end inline asm
	shr.u32 	%r803, %r799, 4;
	// begin inline asm
	lop3.b32 %r863, %r742, %r803, %r804, 202;
	// end inline asm
	mov.u32 	%r808, 25152;
	// begin inline asm
	prmt.b32 %r870, %r806, %r807, %r808;
	// end inline asm
	mov.u32 	%r812, 29521;
	// begin inline asm
	prmt.b32 %r902, %r806, %r807, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r814, %r815, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r814, %r815, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r822, %r823, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r822, %r823, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r830, %r831, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r830, %r831, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r838, %r839, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r838, %r839, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r846, %r847, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r926, %r846, %r847, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r854, %r855, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r854, %r855, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r862, %r863, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r862, %r863, %r812;
	// end inline asm
	mov.u32 	%r872, 21520;
	// begin inline asm
	prmt.b32 %r869, %r870, %r871, %r872;
	// end inline asm
	mov.u32 	%r876, 30258;
	// begin inline asm
	prmt.b32 %r873, %r870, %r871, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r878, %r879, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r878, %r879, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r886, %r887, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r886, %r887, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r902, %r903, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r902, %r903, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r910, %r911, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r910, %r911, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r918, %r919, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r918, %r919, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r926, %r927, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r926, %r927, %r876;
	// end inline asm
	cvt.u16.u32 	%rs57, %r935;
	mul.hi.s16 	%rs58, %rs57, 10923;
	shr.u16 	%rs59, %rs58, 15;
	shr.s16 	%rs60, %rs58, 2;
	add.s16 	%rs61, %rs60, %rs59;
	mul.lo.s16 	%rs62, %rs61, 24;
	sub.s16 	%rs63, %rs57, %rs62;
	cvt.s32.s16 	%r1009, %rs63;
	add.s32 	%r1010, %r92, %r1009;
	mul.wide.s32 	%rd71, %r1010, 4;
	add.s64 	%rd73, %rd46, %rd71;
	st.shared.u32 	[%rd73], %r869;
	add.s32 	%r1011, %r1010, 128;
	mul.wide.u32 	%rd74, %r1011, 4;
	add.s64 	%rd75, %rd46, %rd74;
	st.shared.u32 	[%rd75], %r877;
	add.s32 	%r1012, %r1010, 64;
	mul.wide.u32 	%rd76, %r1012, 4;
	add.s64 	%rd77, %rd46, %rd76;
	st.shared.u32 	[%rd77], %r873;
	add.s32 	%r1013, %r1010, 192;
	mul.wide.u32 	%rd78, %r1013, 4;
	add.s64 	%rd79, %rd46, %rd78;
	st.shared.u32 	[%rd79], %r881;
	add.s32 	%r1014, %r93, %r1009;
	mul.wide.u32 	%rd80, %r1014, 4;
	add.s64 	%rd81, %rd46, %rd80;
	st.shared.u32 	[%rd81], %r885;
	add.s32 	%r1015, %r1014, 128;
	mul.wide.u32 	%rd82, %r1015, 4;
	add.s64 	%rd83, %rd46, %rd82;
	st.shared.u32 	[%rd83], %r893;
	add.s32 	%r1016, %r1014, 64;
	mul.wide.u32 	%rd84, %r1016, 4;
	add.s64 	%rd85, %rd46, %rd84;
	st.shared.u32 	[%rd85], %r889;
	add.s32 	%r1017, %r1014, 192;
	mul.wide.u32 	%rd86, %r1017, 4;
	add.s64 	%rd87, %rd46, %rd86;
	st.shared.u32 	[%rd87], %r897;
	add.s32 	%r1018, %r1010, 32;
	mul.wide.u32 	%rd88, %r1018, 4;
	add.s64 	%rd89, %rd46, %rd88;
	st.shared.u32 	[%rd89], %r901;
	add.s32 	%r1019, %r1010, 160;
	mul.wide.u32 	%rd90, %r1019, 4;
	add.s64 	%rd91, %rd46, %rd90;
	st.shared.u32 	[%rd91], %r909;
	add.s32 	%r1020, %r1010, 96;
	mul.wide.u32 	%rd92, %r1020, 4;
	add.s64 	%rd93, %rd46, %rd92;
	st.shared.u32 	[%rd93], %r905;
	add.s32 	%r1021, %r1010, 224;
	mul.wide.u32 	%rd94, %r1021, 4;
	add.s64 	%rd95, %rd46, %rd94;
	st.shared.u32 	[%rd95], %r913;
	add.s32 	%r1022, %r1014, 32;
	mul.wide.u32 	%rd96, %r1022, 4;
	add.s64 	%rd97, %rd46, %rd96;
	st.shared.u32 	[%rd97], %r917;
	add.s32 	%r1023, %r1014, 160;
	mul.wide.u32 	%rd98, %r1023, 4;
	add.s64 	%rd99, %rd46, %rd98;
	st.shared.u32 	[%rd99], %r925;
	add.s32 	%r1024, %r1014, 96;
	mul.wide.u32 	%rd100, %r1024, 4;
	add.s64 	%rd101, %rd46, %rd100;
	st.shared.u32 	[%rd101], %r921;
	add.s32 	%r1025, %r1014, 224;
	mul.wide.u32 	%rd102, %r1025, 4;
	add.s64 	%rd103, %rd46, %rd102;
	st.shared.u32 	[%rd103], %r929;
	bar.sync 	0;
	add.s32 	%r1026, %r251, %r94;
	cvt.u16.u32 	%rs64, %r1026;
	mul.hi.s16 	%rs65, %rs64, 10923;
	shr.u16 	%rs66, %rs65, 15;
	shr.s16 	%rs67, %rs65, 2;
	add.s16 	%rs68, %rs67, %rs66;
	mul.lo.s16 	%rs69, %rs68, 24;
	sub.s16 	%rs70, %rs64, %rs69;
	cvt.s32.s16 	%r252, %rs70;
	add.s32 	%r1027, %r95, %r252;
	mul.wide.s32 	%rd104, %r1027, 4;
	add.s64 	%rd105, %rd46, %rd104;
	ld.shared.u32 	%r253, [%rd105];
	add.s32 	%r1028, %r96, %r252;
	mul.wide.u32 	%rd106, %r1028, 4;
	add.s64 	%rd107, %rd46, %rd106;
	ld.shared.u32 	%r254, [%rd107];
	add.s32 	%r1029, %r97, %r252;
	mul.wide.u32 	%rd108, %r1029, 4;
	add.s64 	%rd109, %rd46, %rd108;
	ld.shared.u32 	%r255, [%rd109];
	add.s32 	%r1030, %r98, %r252;
	mul.wide.u32 	%rd110, %r1030, 4;
	add.s64 	%rd111, %rd46, %rd110;
	ld.shared.u32 	%r256, [%rd111];
	add.s32 	%r1031, %r99, %r252;
	mul.wide.u32 	%rd112, %r1031, 4;
	add.s64 	%rd113, %rd46, %rd112;
	ld.shared.u32 	%r257, [%rd113];
	add.s32 	%r1032, %r100, %r252;
	mul.wide.u32 	%rd114, %r1032, 4;
	add.s64 	%rd115, %rd46, %rd114;
	ld.shared.u32 	%r258, [%rd115];
	add.s32 	%r1033, %r101, %r252;
	mul.wide.u32 	%rd116, %r1033, 4;
	add.s64 	%rd117, %rd46, %rd116;
	ld.shared.u32 	%r259, [%rd117];
	add.s32 	%r1034, %r102, %r252;
	mul.wide.u32 	%rd118, %r1034, 4;
	add.s64 	%rd119, %rd46, %rd118;
	ld.shared.u32 	%r260, [%rd119];
	add.s32 	%r1035, %r103, %r252;
	mul.wide.u32 	%rd120, %r1035, 4;
	add.s64 	%rd121, %rd46, %rd120;
	ld.shared.u32 	%r261, [%rd121];
	add.s32 	%r1036, %r104, %r252;
	mul.wide.u32 	%rd122, %r1036, 4;
	add.s64 	%rd123, %rd46, %rd122;
	ld.shared.u32 	%r262, [%rd123];
	add.s32 	%r1037, %r105, %r252;
	mul.wide.u32 	%rd124, %r1037, 4;
	add.s64 	%rd125, %rd46, %rd124;
	ld.shared.u32 	%r263, [%rd125];
	add.s32 	%r1038, %r106, %r252;
	mul.wide.u32 	%rd126, %r1038, 4;
	add.s64 	%rd127, %rd46, %rd126;
	ld.shared.u32 	%r264, [%rd127];
	add.s32 	%r1039, %r107, %r252;
	mul.wide.u32 	%rd128, %r1039, 4;
	add.s64 	%rd129, %rd46, %rd128;
	ld.shared.u32 	%r265, [%rd129];
	add.s32 	%r1040, %r108, %r252;
	mul.wide.u32 	%rd130, %r1040, 4;
	add.s64 	%rd131, %rd46, %rd130;
	ld.shared.u32 	%r266, [%rd131];
	add.s32 	%r1041, %r109, %r252;
	mul.wide.u32 	%rd132, %r1041, 4;
	add.s64 	%rd133, %rd46, %rd132;
	ld.shared.u32 	%r267, [%rd133];
	add.s32 	%r1042, %r110, %r252;
	mul.wide.u32 	%rd134, %r1042, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r268, [%rd135];
	add.s32 	%r1043, %r111, %r252;
	mul.wide.u32 	%rd136, %r1043, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r269, [%rd137];
	add.s32 	%r1044, %r112, %r252;
	mul.wide.u32 	%rd138, %r1044, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r270, [%rd139];
	add.s32 	%r1045, %r113, %r252;
	mul.wide.u32 	%rd140, %r1045, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r271, [%rd141];
	add.s32 	%r1046, %r114, %r252;
	mul.wide.u32 	%rd142, %r1046, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r272, [%rd143];
	add.s32 	%r1047, %r115, %r252;
	mul.wide.u32 	%rd144, %r1047, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r273, [%rd145];
	add.s32 	%r1048, %r116, %r252;
	mul.wide.s32 	%rd146, %r1048, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r274, [%rd147];
	bar.sync 	0;
	shfl.sync.idx.b32	%r275, %r247, 0, 31, -1;
	shfl.sync.idx.b32	%r276, %r247, 1, 31, -1;
	shfl.sync.idx.b32	%r277, %r247, 2, 31, -1;
	shfl.sync.idx.b32	%r278, %r247, 3, 31, -1;
	shfl.sync.idx.b32	%r279, %r247, 4, 31, -1;
	shfl.sync.idx.b32	%r280, %r247, 5, 31, -1;
	shfl.sync.idx.b32	%r281, %r247, 6, 31, -1;
	shfl.sync.idx.b32	%r282, %r247, 7, 31, -1;
	shfl.sync.idx.b32	%r283, %r247, 8, 31, -1;
	shfl.sync.idx.b32	%r284, %r247, 9, 31, -1;
	shfl.sync.idx.b32	%r285, %r247, 10, 31, -1;
	shfl.sync.idx.b32	%r286, %r247, 11, 31, -1;
	shfl.sync.idx.b32	%r287, %r247, 12, 31, -1;
	shfl.sync.idx.b32	%r288, %r247, 13, 31, -1;
	shfl.sync.idx.b32	%r289, %r247, 14, 31, -1;
	shfl.sync.idx.b32	%r290, %r247, 15, 31, -1;
	shfl.sync.idx.b32	%r291, %r247, 16, 31, -1;
	shfl.sync.idx.b32	%r292, %r247, 17, 31, -1;
	shfl.sync.idx.b32	%r293, %r247, 18, 31, -1;
	shfl.sync.idx.b32	%r294, %r247, 19, 31, -1;
	shfl.sync.idx.b32	%r295, %r247, 20, 31, -1;
	shfl.sync.idx.b32	%r296, %r247, 21, 31, -1;
	shfl.sync.idx.b32	%r297, %r247, 22, 31, -1;
	shfl.sync.idx.b32	%r298, %r247, 23, 31, -1;
	setp.eq.s32 	%p247, %r275, 999999999;
	@%p247 bra 	$L__BB0_150;
// %bb.222:                             // %oksrem3326
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1049, %r275, %r252;
	mul.wide.s32 	%rd148, %r1049, 4;
	add.s64 	%rd150, %rd46, %rd148;
	st.shared.u32 	[%rd150], %r253;
	setp.eq.s32 	%p248, %r276, 999999999;
	@%p248 bra 	$L__BB0_151;
// %bb.223:                             // %oksrem3394
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1050, %r276, %r252;
	mul.wide.s32 	%rd151, %r1050, 4;
	add.s64 	%rd153, %rd46, %rd151;
	st.shared.u32 	[%rd153], %r254;
	setp.eq.s32 	%p249, %r277, 999999999;
	@%p249 bra 	$L__BB0_152;
// %bb.224:                             // %oksrem3462
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1051, %r277, %r252;
	mul.wide.s32 	%rd154, %r1051, 4;
	add.s64 	%rd156, %rd46, %rd154;
	st.shared.u32 	[%rd156], %r255;
	setp.eq.s32 	%p250, %r278, 999999999;
	@%p250 bra 	$L__BB0_153;
// %bb.225:                             // %oksrem3530
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1052, %r278, %r252;
	mul.wide.s32 	%rd157, %r1052, 4;
	add.s64 	%rd159, %rd46, %rd157;
	st.shared.u32 	[%rd159], %r256;
	setp.eq.s32 	%p251, %r279, 999999999;
	@%p251 bra 	$L__BB0_154;
// %bb.226:                             // %oksrem3598
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1053, %r279, %r252;
	mul.wide.s32 	%rd160, %r1053, 4;
	add.s64 	%rd162, %rd46, %rd160;
	st.shared.u32 	[%rd162], %r257;
	setp.eq.s32 	%p252, %r280, 999999999;
	@%p252 bra 	$L__BB0_155;
// %bb.227:                             // %oksrem3666
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1054, %r280, %r252;
	mul.wide.s32 	%rd163, %r1054, 4;
	add.s64 	%rd165, %rd46, %rd163;
	st.shared.u32 	[%rd165], %r258;
	setp.eq.s32 	%p253, %r281, 999999999;
	@%p253 bra 	$L__BB0_156;
// %bb.228:                             // %oksrem3734
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1055, %r281, %r252;
	mul.wide.s32 	%rd166, %r1055, 4;
	add.s64 	%rd168, %rd46, %rd166;
	st.shared.u32 	[%rd168], %r259;
	setp.eq.s32 	%p254, %r282, 999999999;
	@%p254 bra 	$L__BB0_157;
// %bb.229:                             // %oksrem3802
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1056, %r282, %r252;
	mul.wide.s32 	%rd169, %r1056, 4;
	add.s64 	%rd171, %rd46, %rd169;
	st.shared.u32 	[%rd171], %r260;
	setp.eq.s32 	%p255, %r283, 999999999;
	@%p255 bra 	$L__BB0_158;
// %bb.230:                             // %oksrem3870
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1057, %r283, %r252;
	mul.wide.s32 	%rd172, %r1057, 4;
	add.s64 	%rd174, %rd46, %rd172;
	st.shared.u32 	[%rd174], %r261;
	setp.eq.s32 	%p256, %r284, 999999999;
	@%p256 bra 	$L__BB0_159;
// %bb.231:                             // %oksrem3938
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1058, %r284, %r252;
	mul.wide.s32 	%rd175, %r1058, 4;
	add.s64 	%rd177, %rd46, %rd175;
	st.shared.u32 	[%rd177], %r262;
	setp.eq.s32 	%p257, %r285, 999999999;
	@%p257 bra 	$L__BB0_160;
// %bb.232:                             // %oksrem4006
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1059, %r285, %r252;
	mul.wide.s32 	%rd178, %r1059, 4;
	add.s64 	%rd180, %rd46, %rd178;
	st.shared.u32 	[%rd180], %r263;
	setp.eq.s32 	%p258, %r286, 999999999;
	@%p258 bra 	$L__BB0_161;
// %bb.233:                             // %oksrem4074
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1060, %r286, %r252;
	mul.wide.s32 	%rd181, %r1060, 4;
	add.s64 	%rd183, %rd46, %rd181;
	st.shared.u32 	[%rd183], %r264;
	setp.eq.s32 	%p259, %r287, 999999999;
	@%p259 bra 	$L__BB0_162;
// %bb.234:                             // %oksrem4142
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1061, %r287, %r252;
	mul.wide.s32 	%rd184, %r1061, 4;
	add.s64 	%rd186, %rd46, %rd184;
	st.shared.u32 	[%rd186], %r265;
	setp.eq.s32 	%p260, %r288, 999999999;
	@%p260 bra 	$L__BB0_163;
// %bb.235:                             // %oksrem4210
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1062, %r288, %r252;
	mul.wide.s32 	%rd187, %r1062, 4;
	add.s64 	%rd189, %rd46, %rd187;
	st.shared.u32 	[%rd189], %r266;
	setp.eq.s32 	%p261, %r289, 999999999;
	@%p261 bra 	$L__BB0_164;
// %bb.236:                             // %oksrem4278
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1063, %r289, %r252;
	mul.wide.s32 	%rd190, %r1063, 4;
	add.s64 	%rd192, %rd46, %rd190;
	st.shared.u32 	[%rd192], %r267;
	setp.eq.s32 	%p262, %r290, 999999999;
	@%p262 bra 	$L__BB0_165;
// %bb.237:                             // %oksrem4346
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1064, %r290, %r252;
	mul.wide.s32 	%rd193, %r1064, 4;
	add.s64 	%rd195, %rd46, %rd193;
	st.shared.u32 	[%rd195], %r268;
	setp.eq.s32 	%p263, %r291, 999999999;
	@%p263 bra 	$L__BB0_166;
// %bb.238:                             // %oksrem4414
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1065, %r291, %r252;
	mul.wide.s32 	%rd196, %r1065, 4;
	add.s64 	%rd198, %rd46, %rd196;
	st.shared.u32 	[%rd198], %r269;
	setp.eq.s32 	%p264, %r292, 999999999;
	@%p264 bra 	$L__BB0_167;
// %bb.239:                             // %oksrem4482
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1066, %r292, %r252;
	mul.wide.s32 	%rd199, %r1066, 4;
	add.s64 	%rd201, %rd46, %rd199;
	st.shared.u32 	[%rd201], %r270;
	setp.eq.s32 	%p265, %r293, 999999999;
	@%p265 bra 	$L__BB0_168;
// %bb.240:                             // %oksrem4550
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1067, %r293, %r252;
	mul.wide.s32 	%rd202, %r1067, 4;
	add.s64 	%rd204, %rd46, %rd202;
	st.shared.u32 	[%rd204], %r271;
	setp.eq.s32 	%p266, %r294, 999999999;
	@%p266 bra 	$L__BB0_169;
// %bb.241:                             // %oksrem4618
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1068, %r294, %r252;
	mul.wide.s32 	%rd205, %r1068, 4;
	add.s64 	%rd207, %rd46, %rd205;
	st.shared.u32 	[%rd207], %r272;
	setp.eq.s32 	%p267, %r295, 999999999;
	@%p267 bra 	$L__BB0_170;
// %bb.242:                             // %oksrem4686
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1069, %r295, %r252;
	mul.wide.s32 	%rd208, %r1069, 4;
	add.s64 	%rd210, %rd46, %rd208;
	st.shared.u32 	[%rd210], %r273;
	setp.eq.s32 	%p268, %r296, 999999999;
	@%p268 bra 	$L__BB0_171;
// %bb.243:                             // %oksrem4755
                                        //   in Loop: Header=BB0_148 Depth=1
	selp.b32 	%r1070, 0, %r274, %p269;
	add.s32 	%r1071, %r296, %r252;
	mul.wide.s32 	%rd211, %r1071, 4;
	add.s64 	%rd213, %rd46, %rd211;
	st.shared.u32 	[%rd213], %r1070;
	setp.eq.s32 	%p270, %r297, 999999999;
	@%p270 bra 	$L__BB0_172;
// %bb.244:                             // %oksrem4823
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1072, %r297, %r252;
	mul.wide.s32 	%rd214, %r1072, 4;
	add.s64 	%rd216, %rd46, %rd214;
	mov.u32 	%r3639, 0;
	st.shared.u32 	[%rd216], %r3639;
	setp.eq.s32 	%p271, %r298, 999999999;
	@%p271 bra 	$L__BB0_173;
// %bb.245:                             // %oksrem4890
                                        //   in Loop: Header=BB0_148 Depth=1
	add.s32 	%r1075, %r298, %r252;
	mul.wide.s32 	%rd217, %r1075, 4;
	add.s64 	%rd219, %rd46, %rd217;
	st.shared.u32 	[%rd219], %r3639;
	bar.sync 	0;
	mov.u32 	%r3640, %r3639;
	mov.u32 	%r3641, %r3639;
	mov.u32 	%r3642, %r3639;
	mov.u32 	%r3643, %r3639;
	mov.u32 	%r3644, %r3639;
	mov.u32 	%r3645, %r3639;
	mov.u32 	%r3646, %r3639;
	mov.u32 	%r3647, %r3639;
	mov.u32 	%r3648, %r3639;
	mov.u32 	%r3649, %r3639;
	mov.u32 	%r3650, %r3639;
	mov.u32 	%r3651, %r3639;
	mov.u32 	%r3652, %r3639;
	mov.u32 	%r3653, %r3639;
	mov.u32 	%r3654, %r3639;
	mov.u32 	%r3655, %r3639;
	mov.u32 	%r3656, %r3639;
	mov.u32 	%r3657, %r3639;
	mov.u32 	%r3658, %r3639;
	mov.u32 	%r3659, %r3639;
	mov.u32 	%r3660, %r3639;
	mov.u32 	%r3661, %r3639;
	mov.u32 	%r3662, %r3639;
	@%p88 bra 	$L__BB0_174;
// %bb.246:                             // %oksrem4970
                                        //   in Loop: Header=BB0_148 Depth=1
	cvt.u16.u32 	%rs71, %r251;
	mul.hi.s16 	%rs72, %rs71, 10923;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 2;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 24;
	sub.s16 	%rs77, %rs71, %rs76;
	cvt.s32.s16 	%r1076, %rs77;
	mul.wide.s32 	%rd220, %r1076, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3639, [%rd221];
	ld.shared.u32 	%r3640, [%rd12+4];
	ld.shared.u32 	%r3641, [%rd12+8];
	ld.shared.u32 	%r3642, [%rd12+12];
	ld.shared.u32 	%r3643, [%rd12+16];
	ld.shared.u32 	%r3644, [%rd12+20];
	ld.shared.u32 	%r3645, [%rd12+24];
	ld.shared.u32 	%r3646, [%rd12+28];
	ld.shared.u32 	%r3647, [%rd12+32];
	ld.shared.u32 	%r3648, [%rd12+36];
	ld.shared.u32 	%r3649, [%rd12+40];
	ld.shared.u32 	%r3650, [%rd12+44];
	ld.shared.u32 	%r3651, [%rd12+48];
	ld.shared.u32 	%r3652, [%rd12+52];
	ld.shared.u32 	%r3653, [%rd12+56];
	ld.shared.u32 	%r3654, [%rd12+60];
	add.s16 	%rs78, %rs71, 16;
	mul.hi.s16 	%rs79, %rs78, 10923;
	shr.u16 	%rs80, %rs79, 15;
	shr.s16 	%rs81, %rs79, 2;
	add.s16 	%rs82, %rs81, %rs80;
	mul.lo.s16 	%rs83, %rs82, 24;
	sub.s16 	%rs84, %rs78, %rs83;
	cvt.s32.s16 	%r1077, %rs84;
	mul.wide.s32 	%rd222, %r1077, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3655, [%rd223];
	add.s16 	%rs85, %rs71, 17;
	mul.hi.s16 	%rs86, %rs85, 10923;
	shr.u16 	%rs87, %rs86, 15;
	shr.s16 	%rs88, %rs86, 2;
	add.s16 	%rs89, %rs88, %rs87;
	mul.lo.s16 	%rs90, %rs89, 24;
	sub.s16 	%rs91, %rs85, %rs90;
	cvt.s32.s16 	%r1078, %rs91;
	mul.wide.s32 	%rd224, %r1078, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3656, [%rd225];
	add.s16 	%rs92, %rs71, 18;
	mul.hi.s16 	%rs93, %rs92, 10923;
	shr.u16 	%rs94, %rs93, 15;
	shr.s16 	%rs95, %rs93, 2;
	add.s16 	%rs96, %rs95, %rs94;
	mul.lo.s16 	%rs97, %rs96, 24;
	sub.s16 	%rs98, %rs92, %rs97;
	cvt.s32.s16 	%r1079, %rs98;
	mul.wide.s32 	%rd226, %r1079, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3657, [%rd227];
	add.s16 	%rs99, %rs71, 19;
	mul.hi.s16 	%rs100, %rs99, 10923;
	shr.u16 	%rs101, %rs100, 15;
	shr.s16 	%rs102, %rs100, 2;
	add.s16 	%rs103, %rs102, %rs101;
	mul.lo.s16 	%rs104, %rs103, 24;
	sub.s16 	%rs105, %rs99, %rs104;
	cvt.s32.s16 	%r1080, %rs105;
	mul.wide.s32 	%rd228, %r1080, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3658, [%rd229];
	add.s16 	%rs106, %rs71, 20;
	mul.hi.s16 	%rs107, %rs106, 10923;
	shr.u16 	%rs108, %rs107, 15;
	shr.s16 	%rs109, %rs107, 2;
	add.s16 	%rs110, %rs109, %rs108;
	mul.lo.s16 	%rs111, %rs110, 24;
	sub.s16 	%rs112, %rs106, %rs111;
	cvt.s32.s16 	%r1081, %rs112;
	mul.wide.s32 	%rd230, %r1081, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3659, [%rd231];
	add.s16 	%rs113, %rs71, 21;
	mul.hi.s16 	%rs114, %rs113, 10923;
	shr.u16 	%rs115, %rs114, 15;
	shr.s16 	%rs116, %rs114, 2;
	add.s16 	%rs117, %rs116, %rs115;
	mul.lo.s16 	%rs118, %rs117, 24;
	sub.s16 	%rs119, %rs113, %rs118;
	cvt.s32.s16 	%r1082, %rs119;
	mul.wide.s32 	%rd232, %r1082, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3660, [%rd233];
	add.s16 	%rs120, %rs71, 22;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	shr.s16 	%rs123, %rs121, 2;
	add.s16 	%rs124, %rs123, %rs122;
	mul.lo.s16 	%rs125, %rs124, 24;
	sub.s16 	%rs126, %rs120, %rs125;
	cvt.s32.s16 	%r1083, %rs126;
	mul.wide.s32 	%rd234, %r1083, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3661, [%rd235];
	add.s16 	%rs127, %rs71, 23;
	mul.hi.s16 	%rs128, %rs127, 10923;
	shr.u16 	%rs129, %rs128, 15;
	shr.s16 	%rs130, %rs128, 2;
	add.s16 	%rs131, %rs130, %rs129;
	mul.lo.s16 	%rs132, %rs131, 24;
	sub.s16 	%rs133, %rs127, %rs132;
	cvt.s32.s16 	%r1084, %rs133;
	mul.wide.s32 	%rd236, %r1084, 4;
	add.s64 	%rd237, %rd12, %rd236;
	ld.shared.u32 	%r3662, [%rd237];
$L__BB0_174:                            // %L13906
                                        //   in Loop: Header=BB0_148 Depth=1
	bar.sync 	0;
	mov.u32 	%r3663, 12;
	bra.uni 	$L__BB0_175;
$L__BB0_181:                            // %L19754
                                        //   in Loop: Header=BB0_175 Depth=2
	add.s32 	%r3665, %r3665, 1;
	mov.u32 	%r3664, 0;
	mov.u32 	%r3666, %r3664;
	mov.u32 	%r3667, %r3664;
$L__BB0_182:                            // %L19755
                                        //   in Loop: Header=BB0_175 Depth=2
	bar.sync 	0;
	add.s32 	%r3663, %r3663, -4;
	setp.ne.s32 	%p291, %r3663, -12;
	@%p291 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_183;
$L__BB0_175:                            // %L13932
                                        //   Parent Loop BB0_148 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3663, 12;
	selp.b32 	%r1623, %r3639, 0, %p274;
	setp.eq.s32 	%p275, %r3663, 8;
	selp.b32 	%r1624, %r3643, %r1623, %p275;
	setp.eq.s32 	%p276, %r3663, 4;
	selp.b32 	%r1625, %r3647, %r1624, %p276;
	setp.eq.s32 	%p277, %r3663, 0;
	selp.b32 	%r1626, %r3651, %r1625, %p277;
	setp.eq.s32 	%p278, %r3663, -4;
	selp.b32 	%r1627, %r3655, %r1626, %p278;
	setp.eq.s32 	%p279, %r3663, -8;
	selp.b32 	%r1628, %r3659, %r1627, %p279;
	selp.b32 	%r1629, %r3640, 0, %p274;
	selp.b32 	%r1630, %r3644, %r1629, %p275;
	selp.b32 	%r1631, %r3648, %r1630, %p276;
	selp.b32 	%r1632, %r3652, %r1631, %p277;
	selp.b32 	%r1633, %r3656, %r1632, %p278;
	selp.b32 	%r1634, %r3660, %r1633, %p279;
	selp.b32 	%r1635, %r3641, 0, %p274;
	selp.b32 	%r1636, %r3645, %r1635, %p275;
	selp.b32 	%r1637, %r3649, %r1636, %p276;
	selp.b32 	%r1638, %r3653, %r1637, %p277;
	selp.b32 	%r1639, %r3657, %r1638, %p278;
	selp.b32 	%r1640, %r3661, %r1639, %p279;
	selp.b32 	%r1641, %r3642, 0, %p274;
	selp.b32 	%r1642, %r3646, %r1641, %p275;
	selp.b32 	%r1643, %r3650, %r1642, %p276;
	selp.b32 	%r1644, %r3654, %r1643, %p277;
	selp.b32 	%r1645, %r3658, %r1644, %p278;
	selp.b32 	%r1646, %r3662, %r1645, %p279;
	mov.u16 	%rs171, 25600;
	// begin inline asm
	mov.b32 %r1091, {%rs171, %rs171};
	// end inline asm
	mov.u16 	%rs173, 21504;
	// begin inline asm
	mov.b32 %r1102, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1090, %r1628, -2004318072;
	mov.u32 	%r1227, 983055;
	// begin inline asm
	lop3.b32 %r1088, %r1227, %r1090, %r1091, 202;
	// end inline asm
	mov.u16 	%rs177, 18432;
	// begin inline asm
	mov.b32 %r1092, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1091, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	mov.u32 	%r1238, 15728880;
	// begin inline asm
	lop3.b32 %r1099, %r1238, %r1090, %r1102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1104, %r1102, %r1103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1107, %r1099, %r1104;
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1148, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1136, %r1634, -2004318072;
	// begin inline asm
	lop3.b32 %r1134, %r1227, %r1136, %r1137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1139, %r1137, %r1138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1142, %r1134, %r1139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1145, %r1238, %r1136, %r1148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1149, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1150, %r1148, %r1149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1153, %r1145, %r1150;
	// end inline asm
	// begin inline asm
	mov.b32 %r1183, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1194, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1182, %r1640, -2004318072;
	// begin inline asm
	lop3.b32 %r1180, %r1227, %r1182, %r1183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1185, %r1183, %r1184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1188, %r1180, %r1185;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1191, %r1238, %r1182, %r1194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1196, %r1194, %r1195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1199, %r1191, %r1196;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs173, %rs173};
	// end inline asm
	xor.b32  	%r1228, %r1646, -2004318072;
	// begin inline asm
	lop3.b32 %r1226, %r1227, %r1228, %r1229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1231, %r1229, %r1230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1234, %r1226, %r1231;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1237, %r1238, %r1228, %r1240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1242, %r1240, %r1241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1245, %r1237, %r1242;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1096;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1270, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1107;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1273, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1142;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1276, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1153;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1279, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1188;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1282, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1199;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1285, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r1234;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1288, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1291, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1622, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1357, %r1354}, {%r386, %r389}, {%r1270}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1366, %r1363}, {%r386, %r389}, {%r1273}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1375, %r1372}, {%r386, %r389}, {%r1276}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1384, %r1381}, {%r386, %r389}, {%r1279}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1390}, {%r386, %r389}, {%r1282}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1402, %r1399}, {%r386, %r389}, {%r1285}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1411, %r1408}, {%r386, %r389}, {%r1288}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1420, %r1417}, {%r386, %r389}, {%r1291}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r1350, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r438, %r1357, %r1352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r438, %r1366, %r1361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r1368, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r438, %r1375, %r1370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1377, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r438, %r1384, %r1379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r438, %r1393, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r438, %r1402, %r1397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r1404, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r438, %r1411, %r1406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r438, %r1420, %r1415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1422, %r441, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r438, %r1354, %r1422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1429, %r441, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1432, %r438, %r1363, %r1429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r441, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r438, %r1372, %r1436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r441, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r438, %r1381, %r1443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r441, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r438, %r1390, %r1450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r441, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r438, %r1399, %r1457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r441, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r438, %r1408, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r441, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r438, %r1417, %r1471;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1478, %r1479}, {%r482, %r488, %r485, %r491}, {%r1355, %r1425}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1489}, {%r482, %r488, %r485, %r491}, {%r1364, %r1432}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1499}, {%r482, %r488, %r485, %r491}, {%r1373, %r1439}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1508, %r1509}, {%r482, %r488, %r485, %r491}, {%r1382, %r1446}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1518, %r1519}, {%r482, %r488, %r485, %r491}, {%r1391, %r1453}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1528, %r1529}, {%r482, %r488, %r485, %r491}, {%r1400, %r1460}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1538, %r1539}, {%r482, %r488, %r485, %r491}, {%r1409, %r1467}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1548, %r1549}, {%r482, %r488, %r485, %r491}, {%r1418, %r1474}, {%r1622, %r1622};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3668, %r1622;
	mov.u32 	%r3669, %r1622;
	mov.u32 	%r3670, %r1622;
	mov.u32 	%r3671, %r1622;
	@%p273 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_176;
$L__BB0_247:                            // %oksrem6465
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3668, [%rd7];
	ld.shared.u32 	%r3669, [%rd8];
	ld.shared.u32 	%r3670, [%rd9];
	ld.shared.u32 	%r3671, [%rd10];
$L__BB0_176:                            // %L15565
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1682, %r1679}, {%r500, %r503}, {%r3668}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1691, %r1688}, {%r500, %r503}, {%r3669}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1700, %r1697}, {%r500, %r503}, {%r3670}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1709, %r1706}, {%r500, %r503}, {%r3671}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1675, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1675, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r552, %r1682, %r1677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r552, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r552, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r552, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r555, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r552, %r1679, %r1711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r555, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r552, %r1688, %r1718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r555, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r552, %r1697, %r1725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r555, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r552, %r1706, %r1732;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1780, %r1783}, {%r596, %r602, %r599, %r605}, {%r1680, %r1714}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1802}, {%r596, %r602, %r599, %r605}, {%r1689, %r1721}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1787, %r1791}, {%r596, %r602, %r599, %r605}, {%r1698, %r1728}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1810}, {%r596, %r602, %r599, %r605}, {%r1707, %r1735}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1780, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	mov.u32 	%r1814, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1814, %r1790, %r3667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1799, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1809, %r3666;
	// end inline asm
	mov.u32 	%r3672, %r1622;
	mov.u32 	%r3673, %r1622;
	mov.u32 	%r3674, %r1622;
	mov.u32 	%r3675, %r1622;
	@%p273 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_177;
$L__BB0_248:                            // %oksrem7070
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3672, [%rd13];
	ld.shared.u32 	%r3673, [%rd14];
	ld.shared.u32 	%r3674, [%rd15];
	ld.shared.u32 	%r3675, [%rd16];
$L__BB0_177:                            // %L16784
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r500, %r503}, {%r3672}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r500, %r503}, {%r3673}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r500, %r503}, {%r3674}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1880, %r1877}, {%r500, %r503}, {%r3675}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r552, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r552, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r552, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1873, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1873, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r552, %r1880, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r555, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r552, %r1850, %r1882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r555, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r552, %r1859, %r1889;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r555, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r552, %r1868, %r1896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r555, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r552, %r1877, %r1903;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1951, %r1954}, {%r596, %r602, %r599, %r605}, {%r1851, %r1885}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1970, %r1973}, {%r596, %r602, %r599, %r605}, {%r1860, %r1892}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1962}, {%r596, %r602, %r599, %r605}, {%r1869, %r1899}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1977, %r1981}, {%r596, %r602, %r599, %r605}, {%r1878, %r1906}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1951, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r1954, %r1954, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1814, %r1961, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1970, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r1973, %r1973, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1814, %r1980, %r1813;
	// end inline asm
	mov.u32 	%r3676, %r1622;
	mov.u32 	%r3677, %r1622;
	mov.u32 	%r3678, %r1622;
	mov.u32 	%r3679, %r1622;
	@%p273 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_178;
$L__BB0_249:                            // %oksrem7675
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3676, [%rd17];
	ld.shared.u32 	%r3677, [%rd18];
	ld.shared.u32 	%r3678, [%rd19];
	ld.shared.u32 	%r3679, [%rd20];
$L__BB0_178:                            // %L18003
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2024, %r2021}, {%r500, %r503}, {%r3676}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2033, %r2030}, {%r500, %r503}, {%r3677}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2042, %r2039}, {%r500, %r503}, {%r3678}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2051, %r2048}, {%r500, %r503}, {%r3679}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2017, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2019, %r2017, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r552, %r2024, %r2019;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2026, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r2026, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r552, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2035, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2035, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r552, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2044, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r2044, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r552, %r2051, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r555, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r552, %r2021, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r555, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r552, %r2030, %r2060;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r555, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r552, %r2039, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2074, %r555, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r552, %r2048, %r2074;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2122, %r2125}, {%r596, %r602, %r599, %r605}, {%r2022, %r2056}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2141, %r2144}, {%r596, %r602, %r599, %r605}, {%r2031, %r2063}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2129, %r2133}, {%r596, %r602, %r599, %r605}, {%r2040, %r2070}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2148, %r2152}, {%r596, %r602, %r599, %r605}, {%r2049, %r2077}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2121, %r2122, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2124, %r2125, %r2125, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r2129, %r2129, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r2133, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r1814, %r2132, %r1965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r2141, %r2141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r2144, %r2144, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r2148, %r2148, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r1814, %r2151, %r1984;
	// end inline asm
	mov.u32 	%r3680, %r1622;
	mov.u32 	%r3681, %r1622;
	mov.u32 	%r3682, %r1622;
	mov.u32 	%r3683, %r1622;
	@%p273 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_179;
$L__BB0_250:                            // %oksrem8280
                                        //   in Loop: Header=BB0_175 Depth=2
	ld.shared.u32 	%r3680, [%rd21];
	ld.shared.u32 	%r3681, [%rd22];
	ld.shared.u32 	%r3682, [%rd23];
	ld.shared.u32 	%r3683, [%rd24];
$L__BB0_179:                            // %L19222
                                        //   in Loop: Header=BB0_175 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r500, %r503}, {%r3680}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r500, %r503}, {%r3681}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r500, %r503}, {%r3682}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r500, %r503}, {%r3683}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r552, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r552, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r552, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r552, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r555, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r552, %r2192, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r555, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r552, %r2201, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r555, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r552, %r2210, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r555, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r552, %r2219, %r2245;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2293, %r2296}, {%r596, %r602, %r599, %r605}, {%r2193, %r2227}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2312, %r2315}, {%r596, %r602, %r599, %r605}, {%r2202, %r2234}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2300, %r2304}, {%r596, %r602, %r599, %r605}, {%r2211, %r2241}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2319, %r2323}, {%r596, %r602, %r599, %r605}, {%r2220, %r2248}, {%r1622, %r1622};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r2293, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r2296, %r2296, %r2292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r2300, %r2300, %r2295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r2304, %r2304, %r2299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3667, %r1814, %r2303, %r2136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2311, %r2312, %r2312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2314, %r2315, %r2315, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2318, %r2319, %r2319, %r2314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r2323, %r2323, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3666, %r1814, %r2322, %r2155;
	// end inline asm
	add.s32 	%r3664, %r3664, 4;
	setp.eq.s32 	%p283, %r3664, 192;
	@%p283 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_182;
$L__BB0_180:                            // %pass8773
                                        //   in Loop: Header=BB0_175 Depth=2
	@%p88 bra 	$L__BB0_181;
// %bb.251:                             // %pass8783
                                        //   in Loop: Header=BB0_175 Depth=2
	mul.lo.s32 	%r2330, %r3665, 589824;
	add.s32 	%r2331, %r117, %r2330;
	cvt.u64.u32 	%rd238, %r2331;
	add.s64 	%rd239, %rd238, %rd11;
	mul.hi.s64 	%rd240, %rd239, 1024819115206086201;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 25;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p285, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 603979776;
	setp.ne.s64 	%p286, %rd244, %rd239;
	and.pred  	%p287, %p285, %p286;
	selp.s64 	%rd245, -1, 0, %p287;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -603979776;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3667;
	add.s32 	%r2332, %r118, %r2330;
	cvt.u64.u32 	%rd251, %r2332;
	add.s64 	%rd252, %rd251, %rd11;
	mul.hi.s64 	%rd253, %rd252, 1024819115206086201;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 25;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p288, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 603979776;
	setp.ne.s64 	%p289, %rd257, %rd252;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd258, -1, 0, %p290;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -603979776;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r3666;
	bra.uni 	$L__BB0_181;
$L__BB0_183:                            // %L19780.preheader
                                        //   in Loop: Header=BB0_148 Depth=1
	mov.u32 	%r3688, 12;
	bra.uni 	$L__BB0_184;
$L__BB0_190:                            // %L25602
                                        //   in Loop: Header=BB0_184 Depth=2
	add.s32 	%r3665, %r3665, 1;
	mov.u32 	%r3664, 0;
	mov.u32 	%r3666, %r3664;
	mov.u32 	%r3667, %r3664;
$L__BB0_191:                            // %L25603
                                        //   in Loop: Header=BB0_184 Depth=2
	bar.sync 	0;
	add.s32 	%r3688, %r3688, -4;
	setp.ne.s32 	%p310, %r3688, -12;
	@%p310 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_192;
$L__BB0_184:                            // %L19780
                                        //   Parent Loop BB0_148 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p293, %r3688, 12;
	selp.b32 	%r2872, %r3639, 0, %p293;
	setp.eq.s32 	%p294, %r3688, 8;
	selp.b32 	%r2873, %r3643, %r2872, %p294;
	setp.eq.s32 	%p295, %r3688, 4;
	selp.b32 	%r2874, %r3647, %r2873, %p295;
	setp.eq.s32 	%p296, %r3688, 0;
	selp.b32 	%r2875, %r3651, %r2874, %p296;
	setp.eq.s32 	%p297, %r3688, -4;
	selp.b32 	%r2876, %r3655, %r2875, %p297;
	setp.eq.s32 	%p298, %r3688, -8;
	selp.b32 	%r2877, %r3659, %r2876, %p298;
	selp.b32 	%r2878, %r3640, 0, %p293;
	selp.b32 	%r2879, %r3644, %r2878, %p294;
	selp.b32 	%r2880, %r3648, %r2879, %p295;
	selp.b32 	%r2881, %r3652, %r2880, %p296;
	selp.b32 	%r2882, %r3656, %r2881, %p297;
	selp.b32 	%r2883, %r3660, %r2882, %p298;
	selp.b32 	%r2884, %r3641, 0, %p293;
	selp.b32 	%r2885, %r3645, %r2884, %p294;
	selp.b32 	%r2886, %r3649, %r2885, %p295;
	selp.b32 	%r2887, %r3653, %r2886, %p296;
	selp.b32 	%r2888, %r3657, %r2887, %p297;
	selp.b32 	%r2889, %r3661, %r2888, %p298;
	selp.b32 	%r2890, %r3642, 0, %p293;
	selp.b32 	%r2891, %r3646, %r2890, %p294;
	selp.b32 	%r2892, %r3650, %r2891, %p295;
	selp.b32 	%r2893, %r3654, %r2892, %p296;
	selp.b32 	%r2894, %r3658, %r2893, %p297;
	selp.b32 	%r2895, %r3662, %r2894, %p298;
	// begin inline asm
	mov.b32 %r2362, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2896, %r2877, 8;
	xor.b32  	%r2372, %r2896, 8947848;
	// begin inline asm
	lop3.b32 %r2359, %r1227, %r2372, %r2362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2362, %r2363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2367, %r2359, %r2364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2370, %r1238, %r2372, %r2373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2374, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2373, %r2374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2378, %r2370, %r2375;
	// end inline asm
	// begin inline asm
	mov.b32 %r2408, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2897, %r2883, 8;
	xor.b32  	%r2418, %r2897, 8947848;
	// begin inline asm
	lop3.b32 %r2405, %r1227, %r2418, %r2408, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2410, %r2408, %r2409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2413, %r2405, %r2410;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2416, %r1238, %r2418, %r2419, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2420, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2421, %r2419, %r2420;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2424, %r2416, %r2421;
	// end inline asm
	// begin inline asm
	mov.b32 %r2454, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2465, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2898, %r2889, 8;
	xor.b32  	%r2464, %r2898, 8947848;
	// begin inline asm
	lop3.b32 %r2451, %r1227, %r2464, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2455, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2454, %r2455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2459, %r2451, %r2456;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2462, %r1238, %r2464, %r2465, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2467, %r2465, %r2466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2470, %r2462, %r2467;
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs171, %rs171};
	// end inline asm
	// begin inline asm
	mov.b32 %r2511, {%rs173, %rs173};
	// end inline asm
	shr.u32 	%r2899, %r2895, 8;
	xor.b32  	%r2510, %r2899, 8947848;
	// begin inline asm
	lop3.b32 %r2497, %r1227, %r2510, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2500, %r2501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2505, %r2497, %r2502;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2508, %r1238, %r2510, %r2511, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs177, %rs177};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2513, %r2511, %r2512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2516, %r2508, %r2513;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2367;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2519, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2378;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2522, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2413;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2525, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2424;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2528, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2459;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2531, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2470;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2534, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r85;
    mov.b32 {%r2re, %r2im}, %r2505;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2537, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2516;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2540, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2871, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2606, %r2603}, {%r386, %r389}, {%r2519}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2615, %r2612}, {%r386, %r389}, {%r2522}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r386, %r389}, {%r2525}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r386, %r389}, {%r2528}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r386, %r389}, {%r2531}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2651, %r2648}, {%r386, %r389}, {%r2534}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2660, %r2657}, {%r386, %r389}, {%r2537}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2669, %r2666}, {%r386, %r389}, {%r2540}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2599, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2601, %r2599, %r2603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2604, %r438, %r2606, %r2601;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2608, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2610, %r2608, %r2612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2613, %r438, %r2615, %r2610;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r438, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r438, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r438, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r438, %r2651, %r2646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r438, %r2660, %r2655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2667, %r438, %r2669, %r2664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r441, %r2606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2674, %r438, %r2603, %r2671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r441, %r2615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r438, %r2612, %r2678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r441, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r438, %r2621, %r2685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r441, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2695, %r438, %r2630, %r2692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r441, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r438, %r2639, %r2699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r441, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r438, %r2648, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r441, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r438, %r2657, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r441, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r438, %r2666, %r2720;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2727, %r2728}, {%r482, %r488, %r485, %r491}, {%r2604, %r2674}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2738}, {%r482, %r488, %r485, %r491}, {%r2613, %r2681}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2747, %r2748}, {%r482, %r488, %r485, %r491}, {%r2622, %r2688}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2757, %r2758}, {%r482, %r488, %r485, %r491}, {%r2631, %r2695}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2767, %r2768}, {%r482, %r488, %r485, %r491}, {%r2640, %r2702}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2778}, {%r482, %r488, %r485, %r491}, {%r2649, %r2709}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2787, %r2788}, {%r482, %r488, %r485, %r491}, {%r2658, %r2716}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2797, %r2798}, {%r482, %r488, %r485, %r491}, {%r2667, %r2723}, {%r2871, %r2871};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3693, %r2871;
	mov.u32 	%r3694, %r2871;
	mov.u32 	%r3695, %r2871;
	mov.u32 	%r3696, %r2871;
	@%p273 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_185;
$L__BB0_252:                            // %oksrem9116
                                        //   in Loop: Header=BB0_184 Depth=2
	ld.shared.u32 	%r3696, [%rd7];
	ld.shared.u32 	%r3695, [%rd8];
	ld.shared.u32 	%r3694, [%rd9];
	ld.shared.u32 	%r3693, [%rd10];
$L__BB0_185:                            // %L21413
                                        //   in Loop: Header=BB0_184 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2935, %r2932}, {%r500, %r503}, {%r3696}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r500, %r503}, {%r3695}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2953, %r2950}, {%r500, %r503}, {%r3694}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2962, %r2959}, {%r500, %r503}, {%r3693}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r552, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r552, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2946, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2946, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r552, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2955, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r2955, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r552, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2964, %r555, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2967, %r552, %r2932, %r2964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r555, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r552, %r2941, %r2971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r555, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r552, %r2950, %r2978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r555, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r552, %r2959, %r2985;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3033, %r3036}, {%r596, %r602, %r599, %r605}, {%r2933, %r2967}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3052, %r3055}, {%r596, %r602, %r599, %r605}, {%r2942, %r2974}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3040, %r3044}, {%r596, %r602, %r599, %r605}, {%r2951, %r2981}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3059, %r3063}, {%r596, %r602, %r599, %r605}, {%r2960, %r2988}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3033, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r3036, %r3036, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r3040, %r3040, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r3044, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r1814, %r3043, %r3667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3051, %r3052, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r3055, %r3055, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r3059, %r3059, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r1814, %r3062, %r3666;
	// end inline asm
	mov.u32 	%r3697, %r2871;
	mov.u32 	%r3698, %r2871;
	mov.u32 	%r3699, %r2871;
	mov.u32 	%r3700, %r2871;
	@%p273 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_186;
$L__BB0_253:                            // %oksrem9721
                                        //   in Loop: Header=BB0_184 Depth=2
	ld.shared.u32 	%r3700, [%rd13];
	ld.shared.u32 	%r3699, [%rd14];
	ld.shared.u32 	%r3698, [%rd15];
	ld.shared.u32 	%r3697, [%rd16];
$L__BB0_186:                            // %L22632
                                        //   in Loop: Header=BB0_184 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3103}, {%r500, %r503}, {%r3700}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3112}, {%r500, %r503}, {%r3699}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3124, %r3121}, {%r500, %r503}, {%r3698}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r500, %r503}, {%r3697}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3099, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3099, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r552, %r3106, %r3101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3108, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3108, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r552, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3117, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r3117, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r552, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r552, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r555, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r552, %r3103, %r3135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r555, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r552, %r3112, %r3142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r555, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r552, %r3121, %r3149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r555, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r552, %r3130, %r3156;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3207}, {%r596, %r602, %r599, %r605}, {%r3104, %r3138}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3223, %r3226}, {%r596, %r602, %r599, %r605}, {%r3113, %r3145}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3211, %r3215}, {%r596, %r602, %r599, %r605}, {%r3122, %r3152}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3230, %r3234}, {%r596, %r602, %r599, %r605}, {%r3131, %r3159}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3203, %r3204, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3207, %r3207, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3211, %r3211, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3215, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r1814, %r3214, %r3047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3222, %r3223, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r3226, %r3226, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3230, %r3230, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3234, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r1814, %r3233, %r3066;
	// end inline asm
	mov.u32 	%r3701, %r2871;
	mov.u32 	%r3702, %r2871;
	mov.u32 	%r3703, %r2871;
	mov.u32 	%r3704, %r2871;
	@%p273 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_187;
$L__BB0_254:                            // %oksrem10326
                                        //   in Loop: Header=BB0_184 Depth=2
	ld.shared.u32 	%r3704, [%rd17];
	ld.shared.u32 	%r3703, [%rd18];
	ld.shared.u32 	%r3702, [%rd19];
	ld.shared.u32 	%r3701, [%rd20];
$L__BB0_187:                            // %L23851
                                        //   in Loop: Header=BB0_184 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3277, %r3274}, {%r500, %r503}, {%r3704}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3286, %r3283}, {%r500, %r503}, {%r3703}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3295, %r3292}, {%r500, %r503}, {%r3702}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3304, %r3301}, {%r500, %r503}, {%r3701}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3270, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r3270, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r552, %r3277, %r3272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3279, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3281, %r3279, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r552, %r3286, %r3281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3288, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3288, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r552, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3297, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3299, %r3297, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r552, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r555, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r552, %r3274, %r3306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3313, %r555, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r552, %r3283, %r3313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r555, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r552, %r3292, %r3320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3327, %r555, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3330, %r552, %r3301, %r3327;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3375, %r3378}, {%r596, %r602, %r599, %r605}, {%r3275, %r3309}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3394, %r3397}, {%r596, %r602, %r599, %r605}, {%r3284, %r3316}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3382, %r3386}, {%r596, %r602, %r599, %r605}, {%r3293, %r3323}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3401, %r3405}, {%r596, %r602, %r599, %r605}, {%r3302, %r3330}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3374, %r3375, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r3378, %r3378, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3381, %r3382, %r3382, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r3386, %r3386, %r3381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3389, %r1814, %r3385, %r3218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3394, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r3397, %r3397, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r3401, %r3401, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r3405, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r1814, %r3404, %r3237;
	// end inline asm
	mov.u32 	%r3705, %r2871;
	mov.u32 	%r3706, %r2871;
	mov.u32 	%r3707, %r2871;
	mov.u32 	%r3708, %r2871;
	@%p273 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem10931
                                        //   in Loop: Header=BB0_184 Depth=2
	ld.shared.u32 	%r3708, [%rd21];
	ld.shared.u32 	%r3707, [%rd22];
	ld.shared.u32 	%r3706, [%rd23];
	ld.shared.u32 	%r3705, [%rd24];
$L__BB0_188:                            // %L25070
                                        //   in Loop: Header=BB0_184 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3448, %r3445}, {%r500, %r503}, {%r3708}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3457, %r3454}, {%r500, %r503}, {%r3707}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3466, %r3463}, {%r500, %r503}, {%r3706}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3475, %r3472}, {%r500, %r503}, {%r3705}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3441, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3443, %r3441, %r3445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3446, %r552, %r3448, %r3443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3450, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3452, %r3450, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3455, %r552, %r3457, %r3452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3459, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3461, %r3459, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r552, %r3466, %r3461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3468, %r555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3470, %r3468, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r552, %r3475, %r3470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3477, %r555, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r552, %r3445, %r3477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r555, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r552, %r3454, %r3484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3491, %r555, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r552, %r3463, %r3491;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3498, %r555, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r552, %r3472, %r3498;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3546, %r3549}, {%r596, %r602, %r599, %r605}, {%r3446, %r3480}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3565, %r3568}, {%r596, %r602, %r599, %r605}, {%r3455, %r3487}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3553, %r3557}, {%r596, %r602, %r599, %r605}, {%r3464, %r3494}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3572, %r3576}, {%r596, %r602, %r599, %r605}, {%r3473, %r3501}, {%r2871, %r2871};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3545, %r3546, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r3549, %r3549, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r3553, %r3553, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r3557, %r3557, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3667, %r1814, %r3556, %r3389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r3565, %r3565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r3568, %r3568, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r3572, %r3572, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r3576, %r3576, %r3571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3666, %r1814, %r3575, %r3408;
	// end inline asm
	add.s32 	%r3664, %r3664, 4;
	setp.eq.s32 	%p302, %r3664, 192;
	@%p302 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_191;
$L__BB0_189:                            // %pass11424
                                        //   in Loop: Header=BB0_184 Depth=2
	@%p88 bra 	$L__BB0_190;
// %bb.256:                             // %pass11434
                                        //   in Loop: Header=BB0_184 Depth=2
	mul.lo.s32 	%r3583, %r3665, 589824;
	add.s32 	%r3584, %r117, %r3583;
	cvt.u64.u32 	%rd264, %r3584;
	add.s64 	%rd265, %rd264, %rd11;
	mul.hi.s64 	%rd266, %rd265, 1024819115206086201;
	shr.u64 	%rd267, %rd266, 63;
	shr.s64 	%rd268, %rd266, 25;
	add.s64 	%rd269, %rd268, %rd267;
	setp.lt.s64 	%p304, %rd265, 0;
	mul.lo.s64 	%rd270, %rd269, 603979776;
	setp.ne.s64 	%p305, %rd270, %rd265;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd271, -1, 0, %p306;
	add.s64 	%rd272, %rd269, %rd271;
	mul.lo.s64 	%rd273, %rd272, -603979776;
	add.s64 	%rd274, %rd273, %rd265;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd4, %rd275;
	st.global.u32 	[%rd276], %r3667;
	add.s32 	%r3585, %r118, %r3583;
	cvt.u64.u32 	%rd277, %r3585;
	add.s64 	%rd278, %rd277, %rd11;
	mul.hi.s64 	%rd279, %rd278, 1024819115206086201;
	shr.u64 	%rd280, %rd279, 63;
	shr.s64 	%rd281, %rd279, 25;
	add.s64 	%rd282, %rd281, %rd280;
	setp.lt.s64 	%p307, %rd278, 0;
	mul.lo.s64 	%rd283, %rd282, 603979776;
	setp.ne.s64 	%p308, %rd283, %rd278;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd284, -1, 0, %p309;
	add.s64 	%rd285, %rd282, %rd284;
	mul.lo.s64 	%rd286, %rd285, -603979776;
	add.s64 	%rd287, %rd286, %rd278;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3666;
	bra.uni 	$L__BB0_190;
$L__BB0_193:                            // %L25638
	mov.u32 	%r3587, 0;
	st.global.u32 	[%rd6], %r3587;
	ret;
$L__BB0_150:                            // %L7443
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd336, exception2191;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L7599
	mov.u32 	%r3610, 5;
	st.global.u32 	[%rd6], %r3610;
	mov.u64 	%rd334, exception2191;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7755
	mov.u32 	%r3609, 5;
	st.global.u32 	[%rd6], %r3609;
	mov.u64 	%rd332, exception2191;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7911
	mov.u32 	%r3608, 5;
	st.global.u32 	[%rd6], %r3608;
	mov.u64 	%rd330, exception2191;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L8067
	mov.u32 	%r3607, 5;
	st.global.u32 	[%rd6], %r3607;
	mov.u64 	%rd328, exception2191;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8223
	mov.u32 	%r3606, 5;
	st.global.u32 	[%rd6], %r3606;
	mov.u64 	%rd326, exception2191;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8379
	mov.u32 	%r3605, 5;
	st.global.u32 	[%rd6], %r3605;
	mov.u64 	%rd324, exception2191;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8535
	mov.u32 	%r3604, 5;
	st.global.u32 	[%rd6], %r3604;
	mov.u64 	%rd322, exception2191;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8691
	mov.u32 	%r3603, 5;
	st.global.u32 	[%rd6], %r3603;
	mov.u64 	%rd320, exception2191;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8847
	mov.u32 	%r3602, 5;
	st.global.u32 	[%rd6], %r3602;
	mov.u64 	%rd318, exception2191;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L9003
	mov.u32 	%r3601, 5;
	st.global.u32 	[%rd6], %r3601;
	mov.u64 	%rd316, exception2191;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9159
	mov.u32 	%r3600, 5;
	st.global.u32 	[%rd6], %r3600;
	mov.u64 	%rd314, exception2191;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9315
	mov.u32 	%r3599, 5;
	st.global.u32 	[%rd6], %r3599;
	mov.u64 	%rd312, exception2191;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9471
	mov.u32 	%r3598, 5;
	st.global.u32 	[%rd6], %r3598;
	mov.u64 	%rd310, exception2191;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9627
	mov.u32 	%r3597, 5;
	st.global.u32 	[%rd6], %r3597;
	mov.u64 	%rd308, exception2191;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9783
	mov.u32 	%r3596, 5;
	st.global.u32 	[%rd6], %r3596;
	mov.u64 	%rd306, exception2191;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9939
	mov.u32 	%r3595, 5;
	st.global.u32 	[%rd6], %r3595;
	mov.u64 	%rd304, exception2191;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10095
	mov.u32 	%r3594, 5;
	st.global.u32 	[%rd6], %r3594;
	mov.u64 	%rd302, exception2191;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10251
	mov.u32 	%r3593, 5;
	st.global.u32 	[%rd6], %r3593;
	mov.u64 	%rd300, exception2191;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10407
	mov.u32 	%r3592, 5;
	st.global.u32 	[%rd6], %r3592;
	mov.u64 	%rd298, exception2191;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10563
	mov.u32 	%r3591, 5;
	st.global.u32 	[%rd6], %r3591;
	mov.u64 	%rd296, exception2191;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10745
	mov.u32 	%r3590, 5;
	st.global.u32 	[%rd6], %r3590;
	mov.u64 	%rd294, exception2191;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10901
	mov.u32 	%r3589, 5;
	st.global.u32 	[%rd6], %r3589;
	mov.u64 	%rd292, exception2191;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11057
	mov.u32 	%r3588, 5;
	st.global.u32 	[%rd6], %r3588;
	mov.u64 	%rd290, exception2191;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3613, 2;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd340, exception2191;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3612, 3;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd338, exception2191;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r616, [retval0+0];
	} // callseq 61
	mov.u32 	%r618, 4;
	st.global.u32 	[%rd6], %r618;
	mov.u64 	%rd39, exception2191;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r355;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
