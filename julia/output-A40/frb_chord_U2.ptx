// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2191[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<317>;
	.reg .b16 	%rs<248>;
	.reg .b32 	%r<3726>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<340>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r369, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r369, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r370, %r2, 768;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r371, %r370, %r1;
	add.s32 	%r372, %r371, %r4;
	mul.wide.u32 	%rd33, %r372, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r373, 1;
	st.global.u32 	[%rd6], %r373;
	setp.gt.u32 	%p4, %r361, 16383;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r362, %r361;
	setp.gt.s32 	%p6, %r362, 32767;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r362, %r361;
	mad.lo.s32 	%r374, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r375, %r374, %r374, 4;
	setp.gt.u32 	%p8, %r375, 89478484;
	setp.gt.u32 	%p9, %r363, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r364, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r364, %r363;
	setp.lt.s32 	%p12, %r364, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r376, %r364, %r363;
	mul.hi.s32 	%r377, %r5, 715827883;
	shr.u32 	%r378, %r377, 31;
	shr.s32 	%r379, %r377, 4;
	add.s32 	%r380, %r379, %r378;
	setp.eq.s32 	%p14, %r376, %r380;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r365, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r365, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r366, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r366, %r365;
	setp.gt.s32 	%p17, %r366, 32;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r367, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r366, %r365;
	and.b32  	%r381, %r6, 1;
	setp.eq.b32 	%p19, %r381, 1;
	setp.lt.s32 	%p20, %r367, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r368, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r368, %r367;
	setp.gt.s32 	%p23, %r368, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r382, %r368, %r367;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p25, %r383, 1;
	not.pred 	%p26, %p25;
	setp.eq.s32 	%p27, %r382, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_13;
$L__BB0_196:                            // %pass162
	and.b32  	%r223, %r1, 3;
	shr.u32 	%r224, %r1, 2;
	mul.lo.s32 	%r384, %r223, %r224;
	and.b32  	%r385, %r384, 7;
	cvt.rn.f32.s32 	%f201, %r385;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p316, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_208;
// %bb.197:
	@%p316 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_198;
$L__BB0_204:
	mov.b32 	%r226, %f785;
	and.b32  	%r386, %r226, 8388607;
	or.b32  	%r3721, %r386, 1065353216;
	mov.b32 	%f780, %r3721;
	add.s32 	%r387, %r226, -1073741824;
	and.b32  	%r3722, %r387, -8388608;
	setp.eq.s32 	%p36, %r3722, 0;
	@%p36 bra 	$L__BB0_207;
// %bb.205:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_206:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3722, 192937984;
	add.s32 	%r389, %r3721, %r388;
	mov.b32 	%f213, %r389;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3722, %r3722, %r388;
	mov.b32 	%r3721, %f780;
	setp.ne.s32 	%p37, %r3722, 0;
	setp.ne.s32 	%p38, %r3721, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_206;
$L__BB0_207:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r226, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_208;
$L__BB0_198:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r225, %f172;
	setp.lt.u32 	%p31, %r225, 1073741824;
	@%p31 bra 	$L__BB0_203;
// %bb.199:
	setp.lt.u32 	%p32, %r225, -2147483647;
	@%p32 bra 	$L__BB0_201;
// %bb.200:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_203;
$L__BB0_201:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_203;
// %bb.202:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_203:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_208:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r390, %f169;
	and.b32  	%r233, %r390, -2147483648;
	@%p41 bra 	$L__BB0_210;
// %bb.209:
	mov.b32 	%r391, %f781;
	or.b32  	%r392, %r233, %r391;
	mov.b32 	%f781, %r392;
$L__BB0_210:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r236, %r1, 1;
	and.b32  	%r237, %r236, 6;
	or.b32  	%r238, %r237, 1;
	setp.eq.s32 	%p49, %r237, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3618, %r237, %r224;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3618;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r408, %r8, 8388607;
	or.b32  	%r3622, %r408, 1065353216;
	mov.b32 	%f732, %r3622;
	add.s32 	%r409, %r8, -1073741824;
	and.b32  	%r3623, %r409, -8388608;
	setp.eq.s32 	%p57, %r3623, 0;
	@%p57 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r410, %r3623, 192937984;
	add.s32 	%r411, %r3622, %r410;
	mov.b32 	%f267, %r411;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3623, %r3623, %r410;
	mov.b32 	%r3622, %f732;
	setp.ne.s32 	%p58, %r3623, 0;
	setp.ne.s32 	%p59, %r3622, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r412, %f1;
	and.b32  	%r413, %r412, -2147483648;
	mov.b32 	%r414, %f733;
	or.b32  	%r415, %r413, %r414;
	mov.b32 	%f733, %r415;
$L__BB0_28:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r416, %f277;
	and.b32  	%r417, %r416, -2147483648;
	or.b32  	%r418, %r417, 1056964608;
	mov.b32 	%f278, %r418;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r419, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r420, %r419, 1;
	setp.eq.b32 	%p65, %r420, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r421, %r419, 2;
	setp.eq.s32 	%p66, %r421, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r422, %r419, 1;
	and.b32  	%r423, %r422, 2;
	setp.eq.s32 	%p67, %r423, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p70, %r238, 5;
	mul.lo.s32 	%r3619, %r238, %r224;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r425, %r3619, -1431655765;
	shr.u32 	%r426, %r425, 5;
	mul.lo.s32 	%r427, %r426, 48;
	sub.s32 	%r428, %r3619, %r427;
	cvt.rn.f32.s32 	%f308, %r428;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r429, %r16, 8388607;
	or.b32  	%r3624, %r429, 1065353216;
	mov.b32 	%f738, %r3624;
	add.s32 	%r430, %r16, -1073741824;
	and.b32  	%r3625, %r430, -8388608;
	setp.eq.s32 	%p78, %r3625, 0;
	@%p78 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r431, %r3625, 192937984;
	add.s32 	%r432, %r3624, %r431;
	mov.b32 	%f320, %r432;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3625, %r3625, %r431;
	mov.b32 	%r3624, %f738;
	setp.ne.s32 	%p79, %r3625, 0;
	setp.ne.s32 	%p80, %r3624, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r433, %f22;
	and.b32  	%r434, %r433, -2147483648;
	mov.b32 	%r435, %f739;
	or.b32  	%r436, %r434, %r435;
	mov.b32 	%f739, %r436;
$L__BB0_44:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r437, %f330;
	and.b32  	%r438, %r437, -2147483648;
	or.b32  	%r439, %r438, 1056964608;
	mov.b32 	%f331, %r439;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r440, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r441, %r440, 1;
	setp.eq.b32 	%p86, %r441, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r442, %r440, 2;
	setp.eq.s32 	%p87, %r442, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r443, %r440, 1;
	and.b32  	%r444, %r443, 2;
	setp.eq.s32 	%p88, %r444, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p92, %r1, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3618;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r452, %r26, 8388607;
	or.b32  	%r3626, %r452, 1065353216;
	mov.b32 	%f744, %r3626;
	add.s32 	%r453, %r26, -1073741824;
	and.b32  	%r3627, %r453, -8388608;
	setp.eq.s32 	%p100, %r3627, 0;
	@%p100 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3627, 192937984;
	add.s32 	%r455, %r3626, %r454;
	mov.b32 	%f373, %r455;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3627, %r3627, %r454;
	mov.b32 	%r3626, %f744;
	setp.ne.s32 	%p101, %r3627, 0;
	setp.ne.s32 	%p102, %r3626, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r456, %f43;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f745;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f745, %r459;
$L__BB0_60:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r460, %f383;
	and.b32  	%r461, %r460, -2147483648;
	or.b32  	%r462, %r461, 1056964608;
	mov.b32 	%f384, %r462;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r463, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r464, %r463, 1;
	setp.eq.b32 	%p108, %r464, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r465, %r463, 2;
	setp.eq.s32 	%p109, %r465, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r466, %r463, 1;
	and.b32  	%r467, %r466, 2;
	setp.eq.s32 	%p110, %r467, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r469, %r3619, -1431655765;
	shr.u32 	%r470, %r469, 2;
	mul.lo.s32 	%r471, %r470, 6;
	sub.s32 	%r472, %r3619, %r471;
	cvt.rn.f32.s32 	%f414, %r472;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r473, %r34, 8388607;
	or.b32  	%r3628, %r473, 1065353216;
	mov.b32 	%f750, %r3628;
	add.s32 	%r474, %r34, -1073741824;
	and.b32  	%r3629, %r474, -8388608;
	setp.eq.s32 	%p122, %r3629, 0;
	@%p122 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3629, 192937984;
	add.s32 	%r476, %r3628, %r475;
	mov.b32 	%f426, %r476;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3629, %r3629, %r475;
	mov.b32 	%r3628, %f750;
	setp.ne.s32 	%p123, %r3629, 0;
	setp.ne.s32 	%p124, %r3628, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r477, %f64;
	and.b32  	%r478, %r477, -2147483648;
	mov.b32 	%r479, %f751;
	or.b32  	%r480, %r478, %r479;
	mov.b32 	%f751, %r480;
$L__BB0_76:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r481, %f436;
	and.b32  	%r482, %r481, -2147483648;
	or.b32  	%r483, %r482, 1056964608;
	mov.b32 	%f437, %r483;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r484, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r485, %r484, 1;
	setp.eq.b32 	%p130, %r485, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r486, %r484, 2;
	setp.eq.s32 	%p131, %r486, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r487, %r484, 1;
	and.b32  	%r488, %r487, 2;
	setp.eq.s32 	%p132, %r488, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_77:                             // %L673
	@%p29 bra 	$L__BB0_218;
// %bb.78:
	@%p316 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_79;
$L__BB0_214:
	mov.b32 	%r240, %f785;
	and.b32  	%r501, %r240, 8388607;
	or.b32  	%r3723, %r501, 1065353216;
	mov.b32 	%f784, %r3723;
	add.s32 	%r502, %r240, -1073741824;
	and.b32  	%r3724, %r502, -8388608;
	setp.eq.s32 	%p142, %r3724, 0;
	@%p142 bra 	$L__BB0_217;
// %bb.215:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_216:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r503, %r3724, 192937984;
	add.s32 	%r504, %r3723, %r503;
	mov.b32 	%f476, %r504;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3724, %r3724, %r503;
	mov.b32 	%r3723, %f784;
	setp.ne.s32 	%p143, %r3724, 0;
	setp.ne.s32 	%p144, %r3723, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_216;
$L__BB0_217:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p146, %r240, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_218;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r239, %f187;
	setp.lt.u32 	%p137, %r239, 1073741824;
	@%p137 bra 	$L__BB0_213;
// %bb.80:
	setp.lt.u32 	%p138, %r239, -2147483647;
	@%p138 bra 	$L__BB0_211;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_213;
$L__BB0_211:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_213;
// %bb.212:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_213:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_218:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_220;
// %bb.219:
	mov.b32 	%r505, %f785;
	or.b32  	%r506, %r233, %r505;
	mov.b32 	%f785, %r506;
$L__BB0_220:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3618;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r522, %r46, 8388607;
	or.b32  	%r3630, %r522, 1065353216;
	mov.b32 	%f756, %r3630;
	add.s32 	%r523, %r46, -1073741824;
	and.b32  	%r3631, %r523, -8388608;
	setp.eq.s32 	%p163, %r3631, 0;
	@%p163 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r524, %r3631, 192937984;
	add.s32 	%r525, %r3630, %r524;
	mov.b32 	%f530, %r525;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3631, %r3631, %r524;
	mov.b32 	%r3630, %f756;
	setp.ne.s32 	%p164, %r3631, 0;
	setp.ne.s32 	%p165, %r3630, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r526, %f85;
	and.b32  	%r527, %r526, -2147483648;
	mov.b32 	%r528, %f757;
	or.b32  	%r529, %r527, %r528;
	mov.b32 	%f757, %r529;
$L__BB0_96:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r530, %f540;
	and.b32  	%r531, %r530, -2147483648;
	or.b32  	%r532, %r531, 1056964608;
	mov.b32 	%f541, %r532;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r533, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r534, %r533, 1;
	setp.eq.b32 	%p171, %r534, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r535, %r533, 2;
	setp.eq.s32 	%p172, %r535, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r536, %r533, 1;
	and.b32  	%r537, %r536, 2;
	setp.eq.s32 	%p173, %r537, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r539, %r3619, -1431655765;
	shr.u32 	%r540, %r539, 5;
	mul.lo.s32 	%r541, %r540, 48;
	sub.s32 	%r542, %r3619, %r541;
	cvt.rn.f32.s32 	%f571, %r542;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r543, %r54, 8388607;
	or.b32  	%r3632, %r543, 1065353216;
	mov.b32 	%f762, %r3632;
	add.s32 	%r544, %r54, -1073741824;
	and.b32  	%r3633, %r544, -8388608;
	setp.eq.s32 	%p184, %r3633, 0;
	@%p184 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r545, %r3633, 192937984;
	add.s32 	%r546, %r3632, %r545;
	mov.b32 	%f583, %r546;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3633, %r3633, %r545;
	mov.b32 	%r3632, %f762;
	setp.ne.s32 	%p185, %r3633, 0;
	setp.ne.s32 	%p186, %r3632, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r547, %f106;
	and.b32  	%r548, %r547, -2147483648;
	mov.b32 	%r549, %f763;
	or.b32  	%r550, %r548, %r549;
	mov.b32 	%f763, %r550;
$L__BB0_112:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r551, %f593;
	and.b32  	%r552, %r551, -2147483648;
	or.b32  	%r553, %r552, 1056964608;
	mov.b32 	%f594, %r553;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r554, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r555, %r554, 1;
	setp.eq.b32 	%p192, %r555, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r556, %r554, 2;
	setp.eq.s32 	%p193, %r556, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r557, %r554, 1;
	and.b32  	%r558, %r557, 2;
	setp.eq.s32 	%p194, %r558, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3618;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r566, %r64, 8388607;
	or.b32  	%r3634, %r566, 1065353216;
	mov.b32 	%f768, %r3634;
	add.s32 	%r567, %r64, -1073741824;
	and.b32  	%r3635, %r567, -8388608;
	setp.eq.s32 	%p204, %r3635, 0;
	@%p204 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r568, %r3635, 192937984;
	add.s32 	%r569, %r3634, %r568;
	mov.b32 	%f636, %r569;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3635, %r3635, %r568;
	mov.b32 	%r3634, %f768;
	setp.ne.s32 	%p205, %r3635, 0;
	setp.ne.s32 	%p206, %r3634, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r570, %f127;
	and.b32  	%r571, %r570, -2147483648;
	mov.b32 	%r572, %f769;
	or.b32  	%r573, %r571, %r572;
	mov.b32 	%f769, %r573;
$L__BB0_128:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r574, %f646;
	and.b32  	%r575, %r574, -2147483648;
	or.b32  	%r576, %r575, 1056964608;
	mov.b32 	%f647, %r576;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r577, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r578, %r577, 1;
	setp.eq.b32 	%p212, %r578, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r579, %r577, 2;
	setp.eq.s32 	%p213, %r579, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r580, %r577, 1;
	and.b32  	%r581, %r580, 2;
	setp.eq.s32 	%p214, %r581, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r583, %r3619, -1431655765;
	shr.u32 	%r584, %r583, 2;
	mul.lo.s32 	%r585, %r584, 6;
	sub.s32 	%r586, %r3619, %r585;
	cvt.rn.f32.s32 	%f677, %r586;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r587, %r72, 8388607;
	or.b32  	%r3636, %r587, 1065353216;
	mov.b32 	%f774, %r3636;
	add.s32 	%r588, %r72, -1073741824;
	and.b32  	%r3637, %r588, -8388608;
	setp.eq.s32 	%p224, %r3637, 0;
	@%p224 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r589, %r3637, 192937984;
	add.s32 	%r590, %r3636, %r589;
	mov.b32 	%f689, %r590;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3637, %r3637, %r589;
	mov.b32 	%r3636, %f774;
	setp.ne.s32 	%p225, %r3637, 0;
	setp.ne.s32 	%p226, %r3636, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r591, %f148;
	and.b32  	%r592, %r591, -2147483648;
	mov.b32 	%r593, %f775;
	or.b32  	%r594, %r592, %r593;
	mov.b32 	%f775, %r594;
$L__BB0_144:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r595, %f699;
	and.b32  	%r596, %r595, -2147483648;
	or.b32  	%r597, %r596, 1056964608;
	mov.b32 	%f700, %r597;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r598, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r599, %r598, 1;
	setp.eq.b32 	%p232, %r599, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r600, %r598, 2;
	setp.eq.s32 	%p233, %r600, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r601, %r598, 1;
	and.b32  	%r602, %r601, 2;
	setp.eq.s32 	%p234, %r602, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_145:                            // %L961
	mov.u32 	%r249, 999999999;
	cvt.u16.u32 	%rs246, %r1;
	@%p92 bra 	$L__BB0_222;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs246, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs246, %rs33;
	cvt.u32.u16 	%r616, %rs34;
	and.b32  	%r617, %r616, 255;
	mad.lo.s32 	%r618, %r617, 24, %r3;
	cvt.u16.u32 	%rs35, %r618;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r619, %rs39;
	mul.wide.u32 	%rd34, %r619, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r620, [%rd35];
	shl.b32 	%r621, %r620, 16;
	cvt.s32.s16 	%r83, %r620;
	shr.s32 	%r84, %r620, 16;
	or.b32  	%r622, %r621, 65535;
	setp.lt.u32 	%p238, %r622, 1638399;
	setp.lt.u32 	%p239, %r620, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_147;
$L__BB0_221:                            // %L1237
	mul.lo.s32 	%r626, %r84, 801;
	mad.lo.s32 	%r249, %r83, 33, %r626;
$L__BB0_222:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r399, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r513, %f487;
	or.b32  	%r401, %r400, 1056964608;
	and.b32  	%r514, %r513, -2147483648;
	mov.b32 	%f225, %r401;
	or.b32  	%r515, %r514, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r515;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r402, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r403, %r402, 1;
	cvt.rzi.s32.f32 	%r516, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r403, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r517, %r516, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r404, %r402, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r517, 1;
	setp.eq.s32 	%p45, %r404, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r518, %r516, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r518, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r519, %r516, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r406, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r520, %r519, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r520, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r395, %f254;
	mov.b32 	%r398, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r394, %r398, -2147483648;
	mov.b32 	%r490, %f62;
	mov.b32 	%r491, %f83;
	mov.b32 	%r496, %f63;
	mov.b32 	%r497, %f84;
	mov.b32 	%r509, %f517;
	mov.b32 	%r512, %f514;
	mov.b32 	%r446, %f20;
	mov.b32 	%r447, %f41;
	mov.b32 	%r449, %f21;
	mov.b32 	%r450, %f42;
	xor.b32  	%r493, %r496, -2147483648;
	xor.b32  	%r494, %r497, -2147483648;
	xor.b32  	%r508, %r512, -2147483648;
	mov.b32 	%r560, %f104;
	mov.b32 	%r561, %f125;
	mov.b32 	%r563, %f105;
	mov.b32 	%r564, %f126;
	mov.b32 	%r604, %f146;
	mov.b32 	%r605, %f167;
	mov.b32 	%r610, %f147;
	xor.b32  	%r607, %r610, -2147483648;
	mov.b32 	%r611, %f168;
	xor.b32  	%r608, %r611, -2147483648;
	and.b32  	%r627, %r1, 24;
	setp.ne.s32 	%p241, %r627, 24;
	cvt.u16.u32 	%rs247, %r224;
	mul.lo.s32 	%r3638, %r2, 1152;
	@%p241 bra 	$L__BB0_148;
// %bb.223:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs46, %rs247, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs247, %rs48;
	cvt.u32.u16 	%r633, %rs49;
	and.b32  	%r3639, %r633, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s16 	%rs41, %rs247, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs247, %rs43;
	cvt.u32.u16 	%r628, %rs44;
	and.b32  	%r3639, %r628, 255;
	or.b32  	%r629, %r3638, %r3;
	mad.lo.s32 	%r630, %r223, 144, %r629;
	mad.lo.s32 	%r631, %r3639, 24, %r630;
	mul.wide.u32 	%rd41, %r631, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r88, [%rd42];
	ld.global.u32 	%r89, [%rd42+2304];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r395;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r445, %r447, %r446;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r448, %r450, %r449;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r489, %r491, %r490;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r492, %r494, %r493;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r495, %r497, %r496;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r498, %r491, %r490;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r510, %r512, %r509;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r559, %r561, %r560;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r562, %r564, %r563;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r603, %r605, %r604;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r606, %r608, %r607;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r609, %r611, %r610;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r612, %r605, %r604;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r635, %r361, 13;
	shl.b32 	%r636, %r365, 8;
	add.s32 	%r90, %r636, %r635;
	shl.b32 	%r637, %r2, 8;
	shl.b32 	%r638, %r1, 3;
	and.b32  	%r639, %r638, 128;
	shl.b32 	%r640, %r1, 2;
	and.b32  	%r641, %r640, 60;
	or.b32  	%r642, %r639, %r637;
	or.b32  	%r91, %r642, %r641;
	or.b32  	%r643, %r640, %r642;
	or.b32  	%r92, %r643, 64;
	add.s32 	%r93, %r3, 24;
	shr.u32 	%r644, %r1, 4;
	and.b32  	%r645, %r236, 30;
	or.b32  	%r646, %r645, %r644;
	mul.lo.s32 	%r94, %r646, 257;
	or.b32  	%r647, %r236, %r644;
	or.b32  	%r648, %r647, 32;
	mul.lo.s32 	%r95, %r648, 257;
	and.b16  	%rs51, %rs246, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs246, %rs54;
	cvt.u32.u16 	%r649, %rs55;
	and.b32  	%r96, %r649, 255;
	and.b32  	%r650, %r4, 224;
	shr.u32 	%r651, %r3, 3;
	mad.lo.s32 	%r97, %r651, 257, %r650;
	shr.u32 	%r652, %r93, 3;
	mad.lo.s32 	%r98, %r652, 257, %r650;
	add.s32 	%r653, %r3, 48;
	shr.u32 	%r654, %r653, 3;
	mad.lo.s32 	%r99, %r654, 257, %r650;
	add.s32 	%r655, %r3, 72;
	shr.u32 	%r656, %r655, 3;
	mad.lo.s32 	%r100, %r656, 257, %r650;
	or.b32  	%r657, %r651, 12;
	mad.lo.s32 	%r101, %r657, 257, %r650;
	add.s32 	%r658, %r3, 120;
	shr.u32 	%r659, %r658, 3;
	mad.lo.s32 	%r102, %r659, 257, %r650;
	add.s32 	%r660, %r3, 144;
	shr.u32 	%r661, %r660, 3;
	mad.lo.s32 	%r103, %r661, 257, %r650;
	add.s32 	%r662, %r3, 168;
	shr.u32 	%r663, %r662, 3;
	mad.lo.s32 	%r104, %r663, 257, %r650;
	or.b32  	%r664, %r651, 24;
	mad.lo.s32 	%r105, %r664, 257, %r650;
	add.s32 	%r665, %r3, 216;
	shr.u32 	%r666, %r665, 3;
	mad.lo.s32 	%r106, %r666, 257, %r650;
	add.s32 	%r667, %r3, 240;
	shr.u32 	%r668, %r667, 3;
	mad.lo.s32 	%r107, %r668, 257, %r650;
	add.s32 	%r669, %r3, 264;
	shr.u32 	%r670, %r669, 3;
	mad.lo.s32 	%r108, %r670, 257, %r650;
	or.b32  	%r671, %r651, 36;
	mad.lo.s32 	%r109, %r671, 257, %r650;
	add.s32 	%r672, %r3, 312;
	shr.u32 	%r673, %r672, 3;
	mad.lo.s32 	%r110, %r673, 257, %r650;
	add.s32 	%r674, %r3, 336;
	shr.u32 	%r675, %r674, 3;
	mad.lo.s32 	%r111, %r675, 257, %r650;
	add.s32 	%r676, %r3, 360;
	shr.u32 	%r677, %r676, 3;
	mad.lo.s32 	%r112, %r677, 257, %r650;
	or.b32  	%r678, %r651, 48;
	mad.lo.s32 	%r113, %r678, 257, %r650;
	add.s32 	%r679, %r3, 408;
	shr.u32 	%r680, %r679, 3;
	mad.lo.s32 	%r114, %r680, 257, %r650;
	add.s32 	%r681, %r3, 432;
	shr.u32 	%r682, %r681, 3;
	mad.lo.s32 	%r115, %r682, 257, %r650;
	add.s32 	%r683, %r3, 456;
	shr.u32 	%r684, %r683, 3;
	mad.lo.s32 	%r116, %r684, 257, %r650;
	or.b32  	%r685, %r651, 60;
	mad.lo.s32 	%r117, %r685, 257, %r650;
	add.s32 	%r686, %r3, 504;
	bfe.u32 	%r687, %r686, 3, 6;
	mad.lo.s32 	%r118, %r687, 257, %r650;
	mul.lo.s32 	%r688, %r3, 33;
	mad.lo.s32 	%r689, %r223, 4806, %r688;
	mad.lo.s32 	%r690, %r3639, 801, %r689;
	bfe.s32 	%r691, %r3, 1, 1;
	and.b32  	%r692, %r691, 4112;
	shr.u32 	%r693, %r3, 4;
	bfe.s32 	%r694, %r3, 2, 1;
	and.b32  	%r695, %r694, 2056;
	mul.lo.s32 	%r696, %r223, 6;
	bfe.s32 	%r697, %r3, 3, 1;
	and.b32  	%r698, %r3, 8;
	setp.eq.s32 	%p242, %r698, 0;
	and.b32  	%r699, %r697, 1028;
	and.b32  	%r700, %r3, 1;
	neg.s32 	%r701, %r700;
	and.b32  	%r702, %r701, 8256;
	mad.lo.s32 	%r703, %r693, 514, %r696;
	add.s32 	%r704, %r703, %r692;
	add.s32 	%r705, %r704, %r695;
	add.s32 	%r706, %r705, %r699;
	add.s32 	%r707, %r706, %r702;
	add.s32 	%r708, %r707, %r3639;
	mul.wide.u32 	%rd43, %r708, 4;
	mov.u64 	%rd44, shmem;
	add.s64 	%rd7, %rd44, %rd43;
	shr.u32 	%r709, %r93, 5;
	bfe.s32 	%r710, %r93, 4, 1;
	and.b32  	%r711, %r710, 514;
	selp.b32 	%r712, 1028, 0, %p242;
	mad.lo.s32 	%r713, %r709, 257, %r696;
	add.s32 	%r714, %r713, %r692;
	add.s32 	%r715, %r714, %r695;
	add.s32 	%r716, %r715, %r712;
	add.s32 	%r717, %r716, %r702;
	add.s32 	%r718, %r717, %r711;
	add.s32 	%r719, %r718, %r3639;
	mul.wide.u32 	%rd45, %r719, 4;
	add.s64 	%rd8, %rd44, %rd45;
	add.s32 	%r720, %r708, 32;
	mul.wide.u32 	%rd46, %r720, 4;
	add.s64 	%rd9, %rd44, %rd46;
	add.s32 	%r721, %r719, 32;
	mul.wide.u32 	%rd47, %r721, 4;
	add.s64 	%rd10, %rd44, %rd47;
	mul.lo.s32 	%r722, %r363, 589824;
	mad.lo.s32 	%r723, %r367, 1152, %r722;
	mad.lo.s32 	%r724, %r3, 24, %r3638;
	add.s32 	%r119, %r724, %r96;
	cvt.s64.s32 	%rd11, %r723;
	cvt.u16.u32 	%rs56, %r93;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r725, %rs61;
	and.b32  	%r726, %r725, 255;
	or.b32  	%r727, %r3638, %r96;
	mad.lo.s32 	%r120, %r726, 24, %r727;
	mul.wide.u32 	%rd48, %r690, 4;
	add.s64 	%rd12, %rd44, %rd48;
	add.s32 	%r728, %r708, 64;
	mul.wide.u32 	%rd49, %r728, 4;
	add.s64 	%rd13, %rd44, %rd49;
	add.s32 	%r729, %r719, 64;
	mul.wide.u32 	%rd50, %r729, 4;
	add.s64 	%rd14, %rd44, %rd50;
	add.s32 	%r730, %r708, 96;
	mul.wide.u32 	%rd51, %r730, 4;
	add.s64 	%rd15, %rd44, %rd51;
	add.s32 	%r731, %r719, 96;
	mul.wide.u32 	%rd52, %r731, 4;
	add.s64 	%rd16, %rd44, %rd52;
	add.s32 	%r732, %r708, 128;
	mul.wide.u32 	%rd53, %r732, 4;
	add.s64 	%rd17, %rd44, %rd53;
	add.s32 	%r733, %r719, 128;
	mul.wide.u32 	%rd54, %r733, 4;
	add.s64 	%rd18, %rd44, %rd54;
	add.s32 	%r734, %r708, 160;
	mul.wide.u32 	%rd55, %r734, 4;
	add.s64 	%rd19, %rd44, %rd55;
	add.s32 	%r735, %r719, 160;
	mul.wide.u32 	%rd56, %r735, 4;
	add.s64 	%rd20, %rd44, %rd56;
	add.s32 	%r736, %r708, 192;
	mul.wide.u32 	%rd57, %r736, 4;
	add.s64 	%rd21, %rd44, %rd57;
	add.s32 	%r737, %r719, 192;
	mul.wide.u32 	%rd58, %r737, 4;
	add.s64 	%rd22, %rd44, %rd58;
	add.s32 	%r738, %r708, 224;
	mul.wide.u32 	%rd59, %r738, 4;
	add.s64 	%rd23, %rd44, %rd59;
	add.s32 	%r739, %r719, 224;
	mul.wide.u32 	%rd60, %r739, 4;
	add.s64 	%rd24, %rd44, %rd60;
	setp.lt.u32 	%p244, %r1, 16;
	setp.gt.u32 	%p273, %r3, 7;
	setp.lt.u32 	%p277, %r1, 24;
	mov.u32 	%r3672, %r121;
	mov.u32 	%r3673, %r121;
	mov.u32 	%r3674, %r121;
	mov.u32 	%r3675, %r121;
	bra.uni 	$L__BB0_150;
$L__BB0_194:                            // %L25621
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r222, %r121, 48;
	setp.ne.s32 	%p315, %r121, 16320;
	mov.u32 	%r121, %r222;
	@%p315 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_195;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_186 Depth 2
	add.s32 	%r740, %r121, %r361;
	setp.lt.s32 	%p243, %r740, %r362;
	@%p243 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_195;
$L__BB0_151:                            // %oksrem704
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r933, %r121, -1431655765;
	shr.u32 	%r934, %r933, 5;
	mul.lo.s32 	%r256, %r934, 48;
	add.s32 	%r935, %r256, %r3;
	cvt.u16.u32 	%rs62, %r935;
	shr.s16 	%rs63, %rs62, 15;
	shr.u16 	%rs64, %rs63, 2;
	add.s16 	%rs65, %rs62, %rs64;
	and.b16  	%rs66, %rs65, -16384;
	sub.s16 	%rs67, %rs62, %rs66;
	mul.wide.s16 	%r936, %rs67, 8192;
	or.b32  	%r937, %r936, %r91;
	add.s32 	%r938, %r90, %r937;
	shr.s32 	%r939, %r938, 31;
	shr.u32 	%r940, %r939, 5;
	add.s32 	%r941, %r938, %r940;
	shr.s32 	%r942, %r941, 27;
	setp.lt.s32 	%p245, %r938, 0;
	and.b32  	%r943, %r941, -134217728;
	setp.ne.s32 	%p246, %r943, %r938;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r944, 1, 0, %p247;
	sub.s32 	%r945, %r944, %r942;
	shl.b32 	%r946, %r945, 27;
	add.s32 	%r947, %r946, %r938;
	mul.wide.s32 	%rd61, %r947, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r948, %r949, %r950, %r951}, [%rd62];
	or.b32  	%r952, %r92, %r936;
	add.s32 	%r953, %r90, %r952;
	shr.s32 	%r954, %r953, 31;
	shr.u32 	%r955, %r954, 5;
	add.s32 	%r956, %r953, %r955;
	shr.u32 	%r957, %r956, 27;
	shr.u32 	%r958, %r953, 31;
	sub.s32 	%r959, %r958, %r957;
	shl.b32 	%r960, %r959, 27;
	add.s32 	%r961, %r960, %r953;
	mul.wide.s32 	%rd63, %r961, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r962, %r963, %r964, %r965}, [%rd64];
	add.s32 	%r966, %r93, %r256;
	cvt.u16.u32 	%rs68, %r966;
	shr.s16 	%rs69, %rs68, 15;
	shr.u16 	%rs70, %rs69, 2;
	add.s16 	%rs71, %rs68, %rs70;
	and.b16  	%rs72, %rs71, -16384;
	sub.s16 	%rs73, %rs68, %rs72;
	mul.wide.s16 	%r967, %rs73, 8192;
	or.b32  	%r968, %r967, %r91;
	add.s32 	%r969, %r90, %r968;
	shr.s32 	%r970, %r969, 31;
	shr.u32 	%r971, %r970, 5;
	add.s32 	%r972, %r969, %r971;
	shr.s32 	%r973, %r972, 27;
	setp.lt.s32 	%p248, %r969, 0;
	and.b32  	%r974, %r972, -134217728;
	setp.ne.s32 	%p249, %r974, %r969;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r975, 1, 0, %p250;
	sub.s32 	%r976, %r975, %r973;
	shl.b32 	%r977, %r976, 27;
	add.s32 	%r978, %r977, %r969;
	mul.wide.s32 	%rd65, %r978, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r979, %r980, %r981, %r982}, [%rd66];
	or.b32  	%r983, %r92, %r967;
	add.s32 	%r984, %r90, %r983;
	shr.s32 	%r985, %r984, 31;
	shr.u32 	%r986, %r985, 5;
	add.s32 	%r987, %r984, %r986;
	shr.u32 	%r988, %r987, 27;
	shr.u32 	%r989, %r984, 31;
	sub.s32 	%r990, %r989, %r988;
	shl.b32 	%r991, %r990, 27;
	add.s32 	%r992, %r991, %r984;
	mul.wide.s32 	%rd67, %r992, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r993, %r994, %r995, %r996}, [%rd68];
	selp.b32 	%r997, %r950, %r948, %p244;
	shfl.sync.bfly.b32	%r998, %r997, 16, 31, -1;
	selp.b32 	%r743, %r948, %r998, %p244;
	selp.b32 	%r748, %r998, %r950, %p244;
	selp.b32 	%r999, %r951, %r949, %p244;
	shfl.sync.bfly.b32	%r1000, %r999, 16, 31, -1;
	selp.b32 	%r751, %r949, %r1000, %p244;
	selp.b32 	%r756, %r1000, %r951, %p244;
	selp.b32 	%r1001, %r964, %r962, %p244;
	shfl.sync.bfly.b32	%r1002, %r1001, 16, 31, -1;
	selp.b32 	%r759, %r962, %r1002, %p244;
	selp.b32 	%r764, %r1002, %r964, %p244;
	selp.b32 	%r1003, %r965, %r963, %p244;
	shfl.sync.bfly.b32	%r1004, %r1003, 16, 31, -1;
	selp.b32 	%r767, %r963, %r1004, %p244;
	selp.b32 	%r772, %r1004, %r965, %p244;
	selp.b32 	%r1005, %r981, %r979, %p244;
	shfl.sync.bfly.b32	%r1006, %r1005, 16, 31, -1;
	selp.b32 	%r775, %r979, %r1006, %p244;
	selp.b32 	%r780, %r1006, %r981, %p244;
	selp.b32 	%r1007, %r982, %r980, %p244;
	shfl.sync.bfly.b32	%r1008, %r1007, 16, 31, -1;
	selp.b32 	%r783, %r980, %r1008, %p244;
	selp.b32 	%r788, %r1008, %r982, %p244;
	selp.b32 	%r1009, %r995, %r993, %p244;
	shfl.sync.bfly.b32	%r1010, %r1009, 16, 31, -1;
	selp.b32 	%r791, %r993, %r1010, %p244;
	selp.b32 	%r796, %r1010, %r995, %p244;
	selp.b32 	%r1011, %r996, %r994, %p244;
	shfl.sync.bfly.b32	%r1012, %r1011, 16, 31, -1;
	selp.b32 	%r799, %r994, %r1012, %p244;
	selp.b32 	%r804, %r1012, %r996, %p244;
	shl.b32 	%r744, %r748, 4;
	mov.u32 	%r742, 252645135;
	// begin inline asm
	lop3.b32 %r806, %r742, %r743, %r744, 202;
	// end inline asm
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r822, %r742, %r747, %r748, 202;
	// end inline asm
	shl.b32 	%r752, %r756, 4;
	// begin inline asm
	lop3.b32 %r814, %r742, %r751, %r752, 202;
	// end inline asm
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r830, %r742, %r755, %r756, 202;
	// end inline asm
	shl.b32 	%r760, %r764, 4;
	// begin inline asm
	lop3.b32 %r838, %r742, %r759, %r760, 202;
	// end inline asm
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r854, %r742, %r763, %r764, 202;
	// end inline asm
	shl.b32 	%r768, %r772, 4;
	// begin inline asm
	lop3.b32 %r846, %r742, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r862, %r742, %r771, %r772, 202;
	// end inline asm
	shl.b32 	%r776, %r780, 4;
	// begin inline asm
	lop3.b32 %r807, %r742, %r775, %r776, 202;
	// end inline asm
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r823, %r742, %r779, %r780, 202;
	// end inline asm
	shl.b32 	%r784, %r788, 4;
	// begin inline asm
	lop3.b32 %r815, %r742, %r783, %r784, 202;
	// end inline asm
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r831, %r742, %r787, %r788, 202;
	// end inline asm
	shl.b32 	%r792, %r796, 4;
	// begin inline asm
	lop3.b32 %r839, %r742, %r791, %r792, 202;
	// end inline asm
	shr.u32 	%r795, %r791, 4;
	// begin inline asm
	lop3.b32 %r855, %r742, %r795, %r796, 202;
	// end inline asm
	shl.b32 	%r800, %r804, 4;
	// begin inline asm
	lop3.b32 %r847, %r742, %r799, %r800, 202;
	// end inline asm
	shr.u32 	%r803, %r799, 4;
	// begin inline asm
	lop3.b32 %r863, %r742, %r803, %r804, 202;
	// end inline asm
	mov.u32 	%r808, 25152;
	// begin inline asm
	prmt.b32 %r870, %r806, %r807, %r808;
	// end inline asm
	mov.u32 	%r812, 29521;
	// begin inline asm
	prmt.b32 %r902, %r806, %r807, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r814, %r815, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r814, %r815, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r822, %r823, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r822, %r823, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r830, %r831, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r830, %r831, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r838, %r839, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r918, %r838, %r839, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r846, %r847, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r926, %r846, %r847, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r854, %r855, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r919, %r854, %r855, %r812;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r862, %r863, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r927, %r862, %r863, %r812;
	// end inline asm
	mov.u32 	%r872, 21520;
	// begin inline asm
	prmt.b32 %r869, %r870, %r871, %r872;
	// end inline asm
	mov.u32 	%r876, 30258;
	// begin inline asm
	prmt.b32 %r873, %r870, %r871, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r878, %r879, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r878, %r879, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r886, %r887, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r886, %r887, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r902, %r903, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r902, %r903, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r910, %r911, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r910, %r911, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r918, %r919, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r918, %r919, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r926, %r927, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r926, %r927, %r876;
	// end inline asm
	mul.hi.s16 	%rs74, %rs62, 10923;
	shr.u16 	%rs75, %rs74, 15;
	shr.s16 	%rs76, %rs74, 2;
	add.s16 	%rs77, %rs76, %rs75;
	mul.lo.s16 	%rs78, %rs77, 24;
	sub.s16 	%rs79, %rs62, %rs78;
	cvt.s32.s16 	%r1013, %rs79;
	add.s32 	%r1014, %r94, %r1013;
	mul.wide.s32 	%rd69, %r1014, 4;
	add.s64 	%rd71, %rd44, %rd69;
	st.shared.u32 	[%rd71], %r869;
	add.s32 	%r1015, %r1014, 128;
	mul.wide.u32 	%rd72, %r1015, 4;
	add.s64 	%rd73, %rd44, %rd72;
	st.shared.u32 	[%rd73], %r877;
	add.s32 	%r1016, %r1014, 64;
	mul.wide.u32 	%rd74, %r1016, 4;
	add.s64 	%rd75, %rd44, %rd74;
	st.shared.u32 	[%rd75], %r873;
	add.s32 	%r1017, %r1014, 192;
	mul.wide.u32 	%rd76, %r1017, 4;
	add.s64 	%rd77, %rd44, %rd76;
	st.shared.u32 	[%rd77], %r881;
	add.s32 	%r1018, %r95, %r1013;
	mul.wide.u32 	%rd78, %r1018, 4;
	add.s64 	%rd79, %rd44, %rd78;
	st.shared.u32 	[%rd79], %r885;
	add.s32 	%r1019, %r1018, 128;
	mul.wide.u32 	%rd80, %r1019, 4;
	add.s64 	%rd81, %rd44, %rd80;
	st.shared.u32 	[%rd81], %r893;
	add.s32 	%r1020, %r1018, 64;
	mul.wide.u32 	%rd82, %r1020, 4;
	add.s64 	%rd83, %rd44, %rd82;
	st.shared.u32 	[%rd83], %r889;
	add.s32 	%r1021, %r1018, 192;
	mul.wide.u32 	%rd84, %r1021, 4;
	add.s64 	%rd85, %rd44, %rd84;
	st.shared.u32 	[%rd85], %r897;
	add.s32 	%r1022, %r1014, 32;
	mul.wide.u32 	%rd86, %r1022, 4;
	add.s64 	%rd87, %rd44, %rd86;
	st.shared.u32 	[%rd87], %r901;
	add.s32 	%r1023, %r1014, 160;
	mul.wide.u32 	%rd88, %r1023, 4;
	add.s64 	%rd89, %rd44, %rd88;
	st.shared.u32 	[%rd89], %r909;
	add.s32 	%r1024, %r1014, 96;
	mul.wide.u32 	%rd90, %r1024, 4;
	add.s64 	%rd91, %rd44, %rd90;
	st.shared.u32 	[%rd91], %r905;
	add.s32 	%r1025, %r1014, 224;
	mul.wide.u32 	%rd92, %r1025, 4;
	add.s64 	%rd93, %rd44, %rd92;
	st.shared.u32 	[%rd93], %r913;
	add.s32 	%r1026, %r1018, 32;
	mul.wide.u32 	%rd94, %r1026, 4;
	add.s64 	%rd95, %rd44, %rd94;
	st.shared.u32 	[%rd95], %r917;
	add.s32 	%r1027, %r1018, 160;
	mul.wide.u32 	%rd96, %r1027, 4;
	add.s64 	%rd97, %rd44, %rd96;
	st.shared.u32 	[%rd97], %r925;
	add.s32 	%r1028, %r1018, 96;
	mul.wide.u32 	%rd98, %r1028, 4;
	add.s64 	%rd99, %rd44, %rd98;
	st.shared.u32 	[%rd99], %r921;
	add.s32 	%r1029, %r1018, 224;
	mul.wide.u32 	%rd100, %r1029, 4;
	add.s64 	%rd101, %rd44, %rd100;
	st.shared.u32 	[%rd101], %r929;
	bar.sync 	0;
	add.s32 	%r1030, %r256, %r96;
	cvt.u16.u32 	%rs80, %r1030;
	mul.hi.s16 	%rs81, %rs80, 10923;
	shr.u16 	%rs82, %rs81, 15;
	shr.s16 	%rs83, %rs81, 2;
	add.s16 	%rs84, %rs83, %rs82;
	mul.lo.s16 	%rs85, %rs84, 24;
	sub.s16 	%rs86, %rs80, %rs85;
	cvt.s32.s16 	%r257, %rs86;
	add.s32 	%r1031, %r97, %r257;
	mul.wide.s32 	%rd102, %r1031, 4;
	add.s64 	%rd103, %rd44, %rd102;
	ld.shared.u32 	%r258, [%rd103];
	add.s32 	%r1032, %r98, %r257;
	mul.wide.u32 	%rd104, %r1032, 4;
	add.s64 	%rd105, %rd44, %rd104;
	ld.shared.u32 	%r259, [%rd105];
	add.s32 	%r1033, %r99, %r257;
	mul.wide.u32 	%rd106, %r1033, 4;
	add.s64 	%rd107, %rd44, %rd106;
	ld.shared.u32 	%r260, [%rd107];
	add.s32 	%r1034, %r100, %r257;
	mul.wide.u32 	%rd108, %r1034, 4;
	add.s64 	%rd109, %rd44, %rd108;
	ld.shared.u32 	%r261, [%rd109];
	add.s32 	%r1035, %r101, %r257;
	mul.wide.u32 	%rd110, %r1035, 4;
	add.s64 	%rd111, %rd44, %rd110;
	ld.shared.u32 	%r262, [%rd111];
	add.s32 	%r1036, %r102, %r257;
	mul.wide.u32 	%rd112, %r1036, 4;
	add.s64 	%rd113, %rd44, %rd112;
	ld.shared.u32 	%r263, [%rd113];
	add.s32 	%r1037, %r103, %r257;
	mul.wide.u32 	%rd114, %r1037, 4;
	add.s64 	%rd115, %rd44, %rd114;
	ld.shared.u32 	%r264, [%rd115];
	add.s32 	%r1038, %r104, %r257;
	mul.wide.u32 	%rd116, %r1038, 4;
	add.s64 	%rd117, %rd44, %rd116;
	ld.shared.u32 	%r265, [%rd117];
	add.s32 	%r1039, %r105, %r257;
	mul.wide.u32 	%rd118, %r1039, 4;
	add.s64 	%rd119, %rd44, %rd118;
	ld.shared.u32 	%r266, [%rd119];
	add.s32 	%r1040, %r106, %r257;
	mul.wide.u32 	%rd120, %r1040, 4;
	add.s64 	%rd121, %rd44, %rd120;
	ld.shared.u32 	%r267, [%rd121];
	add.s32 	%r1041, %r107, %r257;
	mul.wide.u32 	%rd122, %r1041, 4;
	add.s64 	%rd123, %rd44, %rd122;
	ld.shared.u32 	%r268, [%rd123];
	add.s32 	%r1042, %r108, %r257;
	mul.wide.u32 	%rd124, %r1042, 4;
	add.s64 	%rd125, %rd44, %rd124;
	ld.shared.u32 	%r269, [%rd125];
	add.s32 	%r1043, %r109, %r257;
	mul.wide.u32 	%rd126, %r1043, 4;
	add.s64 	%rd127, %rd44, %rd126;
	ld.shared.u32 	%r270, [%rd127];
	add.s32 	%r1044, %r110, %r257;
	mul.wide.u32 	%rd128, %r1044, 4;
	add.s64 	%rd129, %rd44, %rd128;
	ld.shared.u32 	%r271, [%rd129];
	add.s32 	%r1045, %r111, %r257;
	mul.wide.u32 	%rd130, %r1045, 4;
	add.s64 	%rd131, %rd44, %rd130;
	ld.shared.u32 	%r272, [%rd131];
	add.s32 	%r1046, %r112, %r257;
	mul.wide.u32 	%rd132, %r1046, 4;
	add.s64 	%rd133, %rd44, %rd132;
	ld.shared.u32 	%r273, [%rd133];
	add.s32 	%r1047, %r113, %r257;
	mul.wide.u32 	%rd134, %r1047, 4;
	add.s64 	%rd135, %rd44, %rd134;
	ld.shared.u32 	%r274, [%rd135];
	add.s32 	%r1048, %r114, %r257;
	mul.wide.u32 	%rd136, %r1048, 4;
	add.s64 	%rd137, %rd44, %rd136;
	ld.shared.u32 	%r275, [%rd137];
	add.s32 	%r1049, %r115, %r257;
	mul.wide.u32 	%rd138, %r1049, 4;
	add.s64 	%rd139, %rd44, %rd138;
	ld.shared.u32 	%r276, [%rd139];
	add.s32 	%r1050, %r116, %r257;
	mul.wide.u32 	%rd140, %r1050, 4;
	add.s64 	%rd141, %rd44, %rd140;
	ld.shared.u32 	%r277, [%rd141];
	add.s32 	%r1051, %r117, %r257;
	mul.wide.u32 	%rd142, %r1051, 4;
	add.s64 	%rd143, %rd44, %rd142;
	ld.shared.u32 	%r278, [%rd143];
	add.s32 	%r1052, %r118, %r257;
	mul.wide.s32 	%rd144, %r1052, 4;
	add.s64 	%rd145, %rd44, %rd144;
	ld.shared.u32 	%r279, [%rd145];
	bar.sync 	0;
	shfl.sync.idx.b32	%r280, %r249, 0, 31, -1;
	shfl.sync.idx.b32	%r281, %r249, 1, 31, -1;
	shfl.sync.idx.b32	%r282, %r249, 2, 31, -1;
	shfl.sync.idx.b32	%r283, %r249, 3, 31, -1;
	shfl.sync.idx.b32	%r284, %r249, 4, 31, -1;
	shfl.sync.idx.b32	%r285, %r249, 5, 31, -1;
	shfl.sync.idx.b32	%r286, %r249, 6, 31, -1;
	shfl.sync.idx.b32	%r287, %r249, 7, 31, -1;
	shfl.sync.idx.b32	%r288, %r249, 8, 31, -1;
	shfl.sync.idx.b32	%r289, %r249, 9, 31, -1;
	shfl.sync.idx.b32	%r290, %r249, 10, 31, -1;
	shfl.sync.idx.b32	%r291, %r249, 11, 31, -1;
	shfl.sync.idx.b32	%r292, %r249, 12, 31, -1;
	shfl.sync.idx.b32	%r293, %r249, 13, 31, -1;
	shfl.sync.idx.b32	%r294, %r249, 14, 31, -1;
	shfl.sync.idx.b32	%r295, %r249, 15, 31, -1;
	shfl.sync.idx.b32	%r296, %r249, 16, 31, -1;
	shfl.sync.idx.b32	%r297, %r249, 17, 31, -1;
	shfl.sync.idx.b32	%r298, %r249, 18, 31, -1;
	shfl.sync.idx.b32	%r299, %r249, 19, 31, -1;
	shfl.sync.idx.b32	%r300, %r249, 20, 31, -1;
	shfl.sync.idx.b32	%r301, %r249, 21, 31, -1;
	shfl.sync.idx.b32	%r302, %r249, 22, 31, -1;
	shfl.sync.idx.b32	%r303, %r249, 23, 31, -1;
	setp.eq.s32 	%p251, %r280, 999999999;
	@%p251 bra 	$L__BB0_152;
// %bb.224:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1053, %r280, %r257;
	mul.wide.s32 	%rd146, %r1053, 4;
	add.s64 	%rd148, %rd44, %rd146;
	st.shared.u32 	[%rd148], %r258;
	setp.eq.s32 	%p252, %r281, 999999999;
	@%p252 bra 	$L__BB0_153;
// %bb.225:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1054, %r281, %r257;
	mul.wide.s32 	%rd149, %r1054, 4;
	add.s64 	%rd151, %rd44, %rd149;
	st.shared.u32 	[%rd151], %r259;
	setp.eq.s32 	%p253, %r282, 999999999;
	@%p253 bra 	$L__BB0_154;
// %bb.226:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1055, %r282, %r257;
	mul.wide.s32 	%rd152, %r1055, 4;
	add.s64 	%rd154, %rd44, %rd152;
	st.shared.u32 	[%rd154], %r260;
	setp.eq.s32 	%p254, %r283, 999999999;
	@%p254 bra 	$L__BB0_155;
// %bb.227:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1056, %r283, %r257;
	mul.wide.s32 	%rd155, %r1056, 4;
	add.s64 	%rd157, %rd44, %rd155;
	st.shared.u32 	[%rd157], %r261;
	setp.eq.s32 	%p255, %r284, 999999999;
	@%p255 bra 	$L__BB0_156;
// %bb.228:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1057, %r284, %r257;
	mul.wide.s32 	%rd158, %r1057, 4;
	add.s64 	%rd160, %rd44, %rd158;
	st.shared.u32 	[%rd160], %r262;
	setp.eq.s32 	%p256, %r285, 999999999;
	@%p256 bra 	$L__BB0_157;
// %bb.229:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1058, %r285, %r257;
	mul.wide.s32 	%rd161, %r1058, 4;
	add.s64 	%rd163, %rd44, %rd161;
	st.shared.u32 	[%rd163], %r263;
	setp.eq.s32 	%p257, %r286, 999999999;
	@%p257 bra 	$L__BB0_158;
// %bb.230:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1059, %r286, %r257;
	mul.wide.s32 	%rd164, %r1059, 4;
	add.s64 	%rd166, %rd44, %rd164;
	st.shared.u32 	[%rd166], %r264;
	setp.eq.s32 	%p258, %r287, 999999999;
	@%p258 bra 	$L__BB0_159;
// %bb.231:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1060, %r287, %r257;
	mul.wide.s32 	%rd167, %r1060, 4;
	add.s64 	%rd169, %rd44, %rd167;
	st.shared.u32 	[%rd169], %r265;
	setp.eq.s32 	%p259, %r288, 999999999;
	@%p259 bra 	$L__BB0_160;
// %bb.232:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1061, %r288, %r257;
	mul.wide.s32 	%rd170, %r1061, 4;
	add.s64 	%rd172, %rd44, %rd170;
	st.shared.u32 	[%rd172], %r266;
	setp.eq.s32 	%p260, %r289, 999999999;
	@%p260 bra 	$L__BB0_161;
// %bb.233:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1062, %r289, %r257;
	mul.wide.s32 	%rd173, %r1062, 4;
	add.s64 	%rd175, %rd44, %rd173;
	st.shared.u32 	[%rd175], %r267;
	setp.eq.s32 	%p261, %r290, 999999999;
	@%p261 bra 	$L__BB0_162;
// %bb.234:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1063, %r290, %r257;
	mul.wide.s32 	%rd176, %r1063, 4;
	add.s64 	%rd178, %rd44, %rd176;
	st.shared.u32 	[%rd178], %r268;
	setp.eq.s32 	%p262, %r291, 999999999;
	@%p262 bra 	$L__BB0_163;
// %bb.235:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1064, %r291, %r257;
	mul.wide.s32 	%rd179, %r1064, 4;
	add.s64 	%rd181, %rd44, %rd179;
	st.shared.u32 	[%rd181], %r269;
	setp.eq.s32 	%p263, %r292, 999999999;
	@%p263 bra 	$L__BB0_164;
// %bb.236:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1065, %r292, %r257;
	mul.wide.s32 	%rd182, %r1065, 4;
	add.s64 	%rd184, %rd44, %rd182;
	st.shared.u32 	[%rd184], %r270;
	setp.eq.s32 	%p264, %r293, 999999999;
	@%p264 bra 	$L__BB0_165;
// %bb.237:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1066, %r293, %r257;
	mul.wide.s32 	%rd185, %r1066, 4;
	add.s64 	%rd187, %rd44, %rd185;
	st.shared.u32 	[%rd187], %r271;
	setp.eq.s32 	%p265, %r294, 999999999;
	@%p265 bra 	$L__BB0_166;
// %bb.238:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1067, %r294, %r257;
	mul.wide.s32 	%rd188, %r1067, 4;
	add.s64 	%rd190, %rd44, %rd188;
	st.shared.u32 	[%rd190], %r272;
	setp.eq.s32 	%p266, %r295, 999999999;
	@%p266 bra 	$L__BB0_167;
// %bb.239:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1068, %r295, %r257;
	mul.wide.s32 	%rd191, %r1068, 4;
	add.s64 	%rd193, %rd44, %rd191;
	st.shared.u32 	[%rd193], %r273;
	setp.eq.s32 	%p267, %r296, 999999999;
	@%p267 bra 	$L__BB0_168;
// %bb.240:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1069, %r296, %r257;
	mul.wide.s32 	%rd194, %r1069, 4;
	add.s64 	%rd196, %rd44, %rd194;
	st.shared.u32 	[%rd196], %r274;
	setp.eq.s32 	%p268, %r297, 999999999;
	@%p268 bra 	$L__BB0_169;
// %bb.241:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1070, %r297, %r257;
	mul.wide.s32 	%rd197, %r1070, 4;
	add.s64 	%rd199, %rd44, %rd197;
	st.shared.u32 	[%rd199], %r275;
	setp.eq.s32 	%p269, %r298, 999999999;
	@%p269 bra 	$L__BB0_170;
// %bb.242:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1071, %r298, %r257;
	mul.wide.s32 	%rd200, %r1071, 4;
	add.s64 	%rd202, %rd44, %rd200;
	st.shared.u32 	[%rd202], %r276;
	setp.eq.s32 	%p270, %r299, 999999999;
	@%p270 bra 	$L__BB0_171;
// %bb.243:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1072, %r299, %r257;
	mul.wide.s32 	%rd203, %r1072, 4;
	add.s64 	%rd205, %rd44, %rd203;
	st.shared.u32 	[%rd205], %r277;
	setp.eq.s32 	%p271, %r300, 999999999;
	@%p271 bra 	$L__BB0_172;
// %bb.244:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1073, %r300, %r257;
	mul.wide.s32 	%rd206, %r1073, 4;
	add.s64 	%rd208, %rd44, %rd206;
	st.shared.u32 	[%rd208], %r278;
	setp.eq.s32 	%p272, %r301, 999999999;
	@%p272 bra 	$L__BB0_173;
// %bb.245:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1074, 0, %r279, %p273;
	add.s32 	%r1075, %r301, %r257;
	mul.wide.s32 	%rd209, %r1075, 4;
	add.s64 	%rd211, %rd44, %rd209;
	st.shared.u32 	[%rd211], %r1074;
	setp.eq.s32 	%p274, %r302, 999999999;
	@%p274 bra 	$L__BB0_174;
// %bb.246:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1076, %r302, %r257;
	mul.wide.s32 	%rd212, %r1076, 4;
	add.s64 	%rd214, %rd44, %rd212;
	mov.u32 	%r3647, 0;
	st.shared.u32 	[%rd214], %r3647;
	setp.eq.s32 	%p275, %r303, 999999999;
	@%p275 bra 	$L__BB0_175;
// %bb.247:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1079, %r303, %r257;
	mul.wide.s32 	%rd215, %r1079, 4;
	add.s64 	%rd217, %rd44, %rd215;
	st.shared.u32 	[%rd217], %r3647;
	bar.sync 	0;
	mov.u32 	%r3648, %r3647;
	mov.u32 	%r3649, %r3647;
	mov.u32 	%r3650, %r3647;
	mov.u32 	%r3651, %r3647;
	mov.u32 	%r3652, %r3647;
	mov.u32 	%r3653, %r3647;
	mov.u32 	%r3654, %r3647;
	mov.u32 	%r3655, %r3647;
	mov.u32 	%r3656, %r3647;
	mov.u32 	%r3657, %r3647;
	mov.u32 	%r3658, %r3647;
	mov.u32 	%r3659, %r3647;
	mov.u32 	%r3660, %r3647;
	mov.u32 	%r3661, %r3647;
	mov.u32 	%r3662, %r3647;
	mov.u32 	%r3663, %r3647;
	mov.u32 	%r3664, %r3647;
	mov.u32 	%r3665, %r3647;
	mov.u32 	%r3666, %r3647;
	mov.u32 	%r3667, %r3647;
	mov.u32 	%r3668, %r3647;
	mov.u32 	%r3669, %r3647;
	mov.u32 	%r3670, %r3647;
	@%p92 bra 	$L__BB0_176;
// %bb.248:                             // %oksrem4970
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs87, %r256;
	mul.hi.s16 	%rs88, %rs87, 10923;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 2;
	add.s16 	%rs91, %rs90, %rs89;
	mul.lo.s16 	%rs92, %rs91, 24;
	sub.s16 	%rs93, %rs87, %rs92;
	cvt.s32.s16 	%r1080, %rs93;
	mul.wide.s32 	%rd218, %r1080, 4;
	add.s64 	%rd219, %rd12, %rd218;
	ld.shared.u32 	%r3647, [%rd219];
	ld.shared.u32 	%r3648, [%rd12+4];
	ld.shared.u32 	%r3649, [%rd12+8];
	ld.shared.u32 	%r3650, [%rd12+12];
	ld.shared.u32 	%r3651, [%rd12+16];
	ld.shared.u32 	%r3652, [%rd12+20];
	ld.shared.u32 	%r3653, [%rd12+24];
	ld.shared.u32 	%r3654, [%rd12+28];
	ld.shared.u32 	%r3655, [%rd12+32];
	ld.shared.u32 	%r3656, [%rd12+36];
	ld.shared.u32 	%r3657, [%rd12+40];
	ld.shared.u32 	%r3658, [%rd12+44];
	ld.shared.u32 	%r3659, [%rd12+48];
	ld.shared.u32 	%r3660, [%rd12+52];
	ld.shared.u32 	%r3661, [%rd12+56];
	ld.shared.u32 	%r3662, [%rd12+60];
	add.s16 	%rs94, %rs87, 16;
	mul.hi.s16 	%rs95, %rs94, 10923;
	shr.u16 	%rs96, %rs95, 15;
	shr.s16 	%rs97, %rs95, 2;
	add.s16 	%rs98, %rs97, %rs96;
	mul.lo.s16 	%rs99, %rs98, 24;
	sub.s16 	%rs100, %rs94, %rs99;
	cvt.s32.s16 	%r1081, %rs100;
	mul.wide.s32 	%rd220, %r1081, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3663, [%rd221];
	add.s16 	%rs101, %rs87, 17;
	mul.hi.s16 	%rs102, %rs101, 10923;
	shr.u16 	%rs103, %rs102, 15;
	shr.s16 	%rs104, %rs102, 2;
	add.s16 	%rs105, %rs104, %rs103;
	mul.lo.s16 	%rs106, %rs105, 24;
	sub.s16 	%rs107, %rs101, %rs106;
	cvt.s32.s16 	%r1082, %rs107;
	mul.wide.s32 	%rd222, %r1082, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3664, [%rd223];
	add.s16 	%rs108, %rs87, 18;
	mul.hi.s16 	%rs109, %rs108, 10923;
	shr.u16 	%rs110, %rs109, 15;
	shr.s16 	%rs111, %rs109, 2;
	add.s16 	%rs112, %rs111, %rs110;
	mul.lo.s16 	%rs113, %rs112, 24;
	sub.s16 	%rs114, %rs108, %rs113;
	cvt.s32.s16 	%r1083, %rs114;
	mul.wide.s32 	%rd224, %r1083, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3665, [%rd225];
	add.s16 	%rs115, %rs87, 19;
	mul.hi.s16 	%rs116, %rs115, 10923;
	shr.u16 	%rs117, %rs116, 15;
	shr.s16 	%rs118, %rs116, 2;
	add.s16 	%rs119, %rs118, %rs117;
	mul.lo.s16 	%rs120, %rs119, 24;
	sub.s16 	%rs121, %rs115, %rs120;
	cvt.s32.s16 	%r1084, %rs121;
	mul.wide.s32 	%rd226, %r1084, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3666, [%rd227];
	add.s16 	%rs122, %rs87, 20;
	mul.hi.s16 	%rs123, %rs122, 10923;
	shr.u16 	%rs124, %rs123, 15;
	shr.s16 	%rs125, %rs123, 2;
	add.s16 	%rs126, %rs125, %rs124;
	mul.lo.s16 	%rs127, %rs126, 24;
	sub.s16 	%rs128, %rs122, %rs127;
	cvt.s32.s16 	%r1085, %rs128;
	mul.wide.s32 	%rd228, %r1085, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3667, [%rd229];
	add.s16 	%rs129, %rs87, 21;
	mul.hi.s16 	%rs130, %rs129, 10923;
	shr.u16 	%rs131, %rs130, 15;
	shr.s16 	%rs132, %rs130, 2;
	add.s16 	%rs133, %rs132, %rs131;
	mul.lo.s16 	%rs134, %rs133, 24;
	sub.s16 	%rs135, %rs129, %rs134;
	cvt.s32.s16 	%r1086, %rs135;
	mul.wide.s32 	%rd230, %r1086, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3668, [%rd231];
	add.s16 	%rs136, %rs87, 22;
	mul.hi.s16 	%rs137, %rs136, 10923;
	shr.u16 	%rs138, %rs137, 15;
	shr.s16 	%rs139, %rs137, 2;
	add.s16 	%rs140, %rs139, %rs138;
	mul.lo.s16 	%rs141, %rs140, 24;
	sub.s16 	%rs142, %rs136, %rs141;
	cvt.s32.s16 	%r1087, %rs142;
	mul.wide.s32 	%rd232, %r1087, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3669, [%rd233];
	add.s16 	%rs143, %rs87, 23;
	mul.hi.s16 	%rs144, %rs143, 10923;
	shr.u16 	%rs145, %rs144, 15;
	shr.s16 	%rs146, %rs144, 2;
	add.s16 	%rs147, %rs146, %rs145;
	mul.lo.s16 	%rs148, %rs147, 24;
	sub.s16 	%rs149, %rs143, %rs148;
	cvt.s32.s16 	%r1088, %rs149;
	mul.wide.s32 	%rd234, %r1088, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3670, [%rd235];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3671, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_183:                            // %L19754
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3673, %r3673, 1;
	mov.u32 	%r3672, 0;
	mov.u32 	%r3674, %r3672;
	mov.u32 	%r3675, %r3672;
$L__BB0_184:                            // %L19755
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3671, %r3671, -4;
	setp.ne.s32 	%p295, %r3671, -12;
	@%p295 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_185;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p278, %r3671, 12;
	selp.b32 	%r1627, %r3647, 0, %p278;
	setp.eq.s32 	%p279, %r3671, 8;
	selp.b32 	%r1628, %r3651, %r1627, %p279;
	setp.eq.s32 	%p280, %r3671, 4;
	selp.b32 	%r1629, %r3655, %r1628, %p280;
	setp.eq.s32 	%p281, %r3671, 0;
	selp.b32 	%r1630, %r3659, %r1629, %p281;
	setp.eq.s32 	%p282, %r3671, -4;
	selp.b32 	%r1631, %r3663, %r1630, %p282;
	setp.eq.s32 	%p283, %r3671, -8;
	selp.b32 	%r1632, %r3667, %r1631, %p283;
	selp.b32 	%r1633, %r3648, 0, %p278;
	selp.b32 	%r1634, %r3652, %r1633, %p279;
	selp.b32 	%r1635, %r3656, %r1634, %p280;
	selp.b32 	%r1636, %r3660, %r1635, %p281;
	selp.b32 	%r1637, %r3664, %r1636, %p282;
	selp.b32 	%r1638, %r3668, %r1637, %p283;
	selp.b32 	%r1639, %r3649, 0, %p278;
	selp.b32 	%r1640, %r3653, %r1639, %p279;
	selp.b32 	%r1641, %r3657, %r1640, %p280;
	selp.b32 	%r1642, %r3661, %r1641, %p281;
	selp.b32 	%r1643, %r3665, %r1642, %p282;
	selp.b32 	%r1644, %r3669, %r1643, %p283;
	selp.b32 	%r1645, %r3650, 0, %p278;
	selp.b32 	%r1646, %r3654, %r1645, %p279;
	selp.b32 	%r1647, %r3658, %r1646, %p280;
	selp.b32 	%r1648, %r3662, %r1647, %p281;
	selp.b32 	%r1649, %r3666, %r1648, %p282;
	selp.b32 	%r1650, %r3670, %r1649, %p283;
	mov.u16 	%rs187, 25600;
	// begin inline asm
	mov.b32 %r1095, {%rs187, %rs187};
	// end inline asm
	mov.u16 	%rs189, 21504;
	// begin inline asm
	mov.b32 %r1106, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1094, %r1632, -2004318072;
	mov.u32 	%r1231, 983055;
	// begin inline asm
	lop3.b32 %r1092, %r1231, %r1094, %r1095, 202;
	// end inline asm
	mov.u16 	%rs193, 18432;
	// begin inline asm
	mov.b32 %r1096, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1097, %r1095, %r1096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1100, %r1092, %r1097;
	// end inline asm
	mov.u32 	%r1242, 15728880;
	// begin inline asm
	lop3.b32 %r1103, %r1242, %r1094, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1108, %r1106, %r1107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1111, %r1103, %r1108;
	// end inline asm
	// begin inline asm
	mov.b32 %r1141, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1152, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1140, %r1638, -2004318072;
	// begin inline asm
	lop3.b32 %r1138, %r1231, %r1140, %r1141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1142, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1143, %r1141, %r1142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1146, %r1138, %r1143;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1149, %r1242, %r1140, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1154, %r1152, %r1153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1157, %r1149, %r1154;
	// end inline asm
	// begin inline asm
	mov.b32 %r1187, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1198, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1186, %r1644, -2004318072;
	// begin inline asm
	lop3.b32 %r1184, %r1231, %r1186, %r1187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1188, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1189, %r1187, %r1188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1192, %r1184, %r1189;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1195, %r1242, %r1186, %r1198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1199, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1200, %r1198, %r1199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1203, %r1195, %r1200;
	// end inline asm
	// begin inline asm
	mov.b32 %r1233, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r1244, {%rs189, %rs189};
	// end inline asm
	xor.b32  	%r1232, %r1650, -2004318072;
	// begin inline asm
	lop3.b32 %r1230, %r1231, %r1232, %r1233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1235, %r1233, %r1234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1238, %r1230, %r1235;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1241, %r1242, %r1232, %r1244, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1245, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1246, %r1244, %r1245;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1249, %r1241, %r1246;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1100;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1274, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1111;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1277, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1146;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1280, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1157;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1283, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1192;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1286, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1203;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1289, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1238;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1292, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1249;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1295, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1626, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1361, %r1358}, {%r393, %r396}, {%r1274}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1370, %r1367}, {%r393, %r396}, {%r1277}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1379, %r1376}, {%r393, %r396}, {%r1280}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1388, %r1385}, {%r393, %r396}, {%r1283}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1397, %r1394}, {%r393, %r396}, {%r1286}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1406, %r1403}, {%r393, %r396}, {%r1289}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1415, %r1412}, {%r393, %r396}, {%r1292}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1424, %r1421}, {%r393, %r396}, {%r1295}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r1354, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r445, %r1361, %r1356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r445, %r1370, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r1372, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r445, %r1379, %r1374;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1383, %r1381, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r445, %r1388, %r1383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r1390, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r445, %r1397, %r1392;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1401, %r1399, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r445, %r1406, %r1401;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r1408, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r445, %r1415, %r1410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r1417, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r445, %r1424, %r1419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r448, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r445, %r1358, %r1426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r448, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r445, %r1367, %r1433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r448, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r445, %r1376, %r1440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1447, %r448, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r445, %r1385, %r1447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r448, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r445, %r1394, %r1454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r448, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r445, %r1403, %r1461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r448, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r445, %r1412, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r448, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r445, %r1421, %r1475;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1482, %r1483}, {%r489, %r495, %r492, %r498}, {%r1359, %r1429}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1492, %r1493}, {%r489, %r495, %r492, %r498}, {%r1368, %r1436}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1502, %r1503}, {%r489, %r495, %r492, %r498}, {%r1377, %r1443}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1512, %r1513}, {%r489, %r495, %r492, %r498}, {%r1386, %r1450}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1522, %r1523}, {%r489, %r495, %r492, %r498}, {%r1395, %r1457}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1532, %r1533}, {%r489, %r495, %r492, %r498}, {%r1404, %r1464}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1542, %r1543}, {%r489, %r495, %r492, %r498}, {%r1413, %r1471}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1552, %r1553}, {%r489, %r495, %r492, %r498}, {%r1422, %r1478}, {%r1626, %r1626};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3676, %r1626;
	mov.u32 	%r3677, %r1626;
	mov.u32 	%r3678, %r1626;
	mov.u32 	%r3679, %r1626;
	@%p277 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_178;
$L__BB0_249:                            // %oksrem6465
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3676, [%rd7];
	ld.shared.u32 	%r3677, [%rd8];
	ld.shared.u32 	%r3678, [%rd9];
	ld.shared.u32 	%r3679, [%rd10];
$L__BB0_178:                            // %L15565
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1686, %r1683}, {%r507, %r510}, {%r3676}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1695, %r1692}, {%r507, %r510}, {%r3677}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1704, %r1701}, {%r507, %r510}, {%r3678}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1713, %r1710}, {%r507, %r510}, {%r3679}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1679, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1681, %r1679, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r559, %r1686, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r559, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1697, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1697, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r559, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1706, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r1706, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r559, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r562, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r559, %r1683, %r1715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r562, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r559, %r1692, %r1722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r562, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r559, %r1701, %r1729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r562, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r559, %r1710, %r1736;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1787}, {%r603, %r609, %r606, %r612}, {%r1684, %r1718}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1806}, {%r603, %r609, %r606, %r612}, {%r1693, %r1725}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1791, %r1795}, {%r603, %r609, %r606, %r612}, {%r1702, %r1732}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1814}, {%r603, %r609, %r606, %r612}, {%r1711, %r1739}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r1784, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1790;
	// end inline asm
	mov.u32 	%r1818, 357897557;
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1818, %r1794, %r3675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1803, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1818, %r1813, %r3674;
	// end inline asm
	mov.u32 	%r3680, %r1626;
	mov.u32 	%r3681, %r1626;
	mov.u32 	%r3682, %r1626;
	mov.u32 	%r3683, %r1626;
	@%p277 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_179;
$L__BB0_250:                            // %oksrem7070
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3680, [%rd13];
	ld.shared.u32 	%r3681, [%rd14];
	ld.shared.u32 	%r3682, [%rd15];
	ld.shared.u32 	%r3683, [%rd16];
$L__BB0_179:                            // %L16784
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1857, %r1854}, {%r507, %r510}, {%r3680}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1866, %r1863}, {%r507, %r510}, {%r3681}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1875, %r1872}, {%r507, %r510}, {%r3682}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1884, %r1881}, {%r507, %r510}, {%r3683}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1852, %r1850, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r559, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1859, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1859, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r559, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1868, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r1868, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r559, %r1875, %r1870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1877, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1877, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r559, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r562, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r559, %r1854, %r1886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1893, %r562, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r559, %r1863, %r1893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1900, %r562, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r559, %r1872, %r1900;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r562, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r559, %r1881, %r1907;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1958}, {%r603, %r609, %r606, %r612}, {%r1855, %r1889}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1977}, {%r603, %r609, %r606, %r612}, {%r1864, %r1896}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1966}, {%r603, %r609, %r606, %r612}, {%r1873, %r1903}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1985}, {%r603, %r609, %r606, %r612}, {%r1882, %r1910}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r1955, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1966, %r1966, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1818, %r1965, %r1798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1974, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r1818, %r1984, %r1817;
	// end inline asm
	mov.u32 	%r3684, %r1626;
	mov.u32 	%r3685, %r1626;
	mov.u32 	%r3686, %r1626;
	mov.u32 	%r3687, %r1626;
	@%p277 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_180;
$L__BB0_251:                            // %oksrem7675
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3684, [%rd17];
	ld.shared.u32 	%r3685, [%rd18];
	ld.shared.u32 	%r3686, [%rd19];
	ld.shared.u32 	%r3687, [%rd20];
$L__BB0_180:                            // %L18003
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2028, %r2025}, {%r507, %r510}, {%r3684}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2037, %r2034}, {%r507, %r510}, {%r3685}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2046, %r2043}, {%r507, %r510}, {%r3686}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2055, %r2052}, {%r507, %r510}, {%r3687}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2021, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r2021, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r559, %r2028, %r2023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2030, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r2030, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r559, %r2037, %r2032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2039, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r2039, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r559, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2048, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2048, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r559, %r2055, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2057, %r562, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r559, %r2025, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r562, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r559, %r2034, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r562, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r559, %r2043, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r562, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r559, %r2052, %r2078;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2126, %r2129}, {%r603, %r609, %r606, %r612}, {%r2026, %r2060}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2145, %r2148}, {%r603, %r609, %r606, %r612}, {%r2035, %r2067}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2133, %r2137}, {%r603, %r609, %r606, %r612}, {%r2044, %r2074}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2152, %r2156}, {%r603, %r609, %r606, %r612}, {%r2053, %r2081}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2126, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r2129, %r2129, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r2133, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r2137, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r1818, %r2136, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2145, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r2148, %r2148, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r2156, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r1818, %r2155, %r1988;
	// end inline asm
	mov.u32 	%r3688, %r1626;
	mov.u32 	%r3689, %r1626;
	mov.u32 	%r3690, %r1626;
	mov.u32 	%r3691, %r1626;
	@%p277 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_181;
$L__BB0_252:                            // %oksrem8280
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3688, [%rd21];
	ld.shared.u32 	%r3689, [%rd22];
	ld.shared.u32 	%r3690, [%rd23];
	ld.shared.u32 	%r3691, [%rd24];
$L__BB0_181:                            // %L19222
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2199, %r2196}, {%r507, %r510}, {%r3688}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2208, %r2205}, {%r507, %r510}, {%r3689}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2217, %r2214}, {%r507, %r510}, {%r3690}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2226, %r2223}, {%r507, %r510}, {%r3691}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2192, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2194, %r2192, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r559, %r2199, %r2194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2201, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r2201, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r559, %r2208, %r2203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2210, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r2210, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r559, %r2217, %r2212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2219, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2221, %r2219, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r559, %r2226, %r2221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r562, %r2199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r559, %r2196, %r2228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r562, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r559, %r2205, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r562, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r559, %r2214, %r2242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r562, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r559, %r2223, %r2249;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2297, %r2300}, {%r603, %r609, %r606, %r612}, {%r2197, %r2231}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2316, %r2319}, {%r603, %r609, %r606, %r612}, {%r2206, %r2238}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2304, %r2308}, {%r603, %r609, %r606, %r612}, {%r2215, %r2245}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2327}, {%r603, %r609, %r606, %r612}, {%r2224, %r2252}, {%r1626, %r1626};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2296, %r2297, %r2297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r2300, %r2300, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r2304, %r2304, %r2299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2307, %r2308, %r2308, %r2303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1818, %r2307, %r2140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r2316, %r2316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2318, %r2319, %r2319, %r2315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r2323, %r2323, %r2318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2326, %r2327, %r2327, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3674, %r1818, %r2326, %r2159;
	// end inline asm
	add.s32 	%r3672, %r3672, 4;
	setp.eq.s32 	%p287, %r3672, 96;
	@%p287 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_184;
$L__BB0_182:                            // %pass8773
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p92 bra 	$L__BB0_183;
// %bb.253:                             // %pass8783
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2334, %r3673, 589824;
	add.s32 	%r2335, %r119, %r2334;
	cvt.s64.s32 	%rd236, %r2335;
	add.s64 	%rd237, %rd236, %rd11;
	mul.hi.s64 	%rd238, %rd237, 1024819115206086201;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 25;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p289, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 603979776;
	setp.ne.s64 	%p290, %rd242, %rd237;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd243, -1, 0, %p291;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -603979776;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3675;
	add.s32 	%r2336, %r120, %r2334;
	cvt.s64.s32 	%rd249, %r2336;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 1024819115206086201;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 25;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p292, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 603979776;
	setp.ne.s64 	%p293, %rd255, %rd250;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd256, -1, 0, %p294;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -603979776;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3674;
	bra.uni 	$L__BB0_183;
$L__BB0_185:                            // %L19780.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3696, 12;
	bra.uni 	$L__BB0_186;
$L__BB0_192:                            // %L25602
                                        //   in Loop: Header=BB0_186 Depth=2
	add.s32 	%r3673, %r3673, 1;
	mov.u32 	%r3672, 0;
	mov.u32 	%r3674, %r3672;
	mov.u32 	%r3675, %r3672;
$L__BB0_193:                            // %L25603
                                        //   in Loop: Header=BB0_186 Depth=2
	bar.sync 	0;
	add.s32 	%r3696, %r3696, -4;
	setp.ne.s32 	%p314, %r3696, -12;
	@%p314 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_194;
$L__BB0_186:                            // %L19780
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p297, %r3696, 12;
	selp.b32 	%r2876, %r3647, 0, %p297;
	setp.eq.s32 	%p298, %r3696, 8;
	selp.b32 	%r2877, %r3651, %r2876, %p298;
	setp.eq.s32 	%p299, %r3696, 4;
	selp.b32 	%r2878, %r3655, %r2877, %p299;
	setp.eq.s32 	%p300, %r3696, 0;
	selp.b32 	%r2879, %r3659, %r2878, %p300;
	setp.eq.s32 	%p301, %r3696, -4;
	selp.b32 	%r2880, %r3663, %r2879, %p301;
	setp.eq.s32 	%p302, %r3696, -8;
	selp.b32 	%r2881, %r3667, %r2880, %p302;
	selp.b32 	%r2882, %r3648, 0, %p297;
	selp.b32 	%r2883, %r3652, %r2882, %p298;
	selp.b32 	%r2884, %r3656, %r2883, %p299;
	selp.b32 	%r2885, %r3660, %r2884, %p300;
	selp.b32 	%r2886, %r3664, %r2885, %p301;
	selp.b32 	%r2887, %r3668, %r2886, %p302;
	selp.b32 	%r2888, %r3649, 0, %p297;
	selp.b32 	%r2889, %r3653, %r2888, %p298;
	selp.b32 	%r2890, %r3657, %r2889, %p299;
	selp.b32 	%r2891, %r3661, %r2890, %p300;
	selp.b32 	%r2892, %r3665, %r2891, %p301;
	selp.b32 	%r2893, %r3669, %r2892, %p302;
	selp.b32 	%r2894, %r3650, 0, %p297;
	selp.b32 	%r2895, %r3654, %r2894, %p298;
	selp.b32 	%r2896, %r3658, %r2895, %p299;
	selp.b32 	%r2897, %r3662, %r2896, %p300;
	selp.b32 	%r2898, %r3666, %r2897, %p301;
	selp.b32 	%r2899, %r3670, %r2898, %p302;
	// begin inline asm
	mov.b32 %r2366, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2900, %r2881, 8;
	xor.b32  	%r2376, %r2900, 8947848;
	// begin inline asm
	lop3.b32 %r2363, %r1231, %r2376, %r2366, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2367, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2366, %r2367;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2371, %r2363, %r2368;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2374, %r1242, %r2376, %r2377, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2377, %r2378;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2382, %r2374, %r2379;
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2901, %r2887, 8;
	xor.b32  	%r2422, %r2901, 8947848;
	// begin inline asm
	lop3.b32 %r2409, %r1231, %r2422, %r2412, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2413, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2414, %r2412, %r2413;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2417, %r2409, %r2414;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2420, %r1242, %r2422, %r2423, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2424, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2425, %r2423, %r2424;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2428, %r2420, %r2425;
	// end inline asm
	// begin inline asm
	mov.b32 %r2458, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2902, %r2893, 8;
	xor.b32  	%r2468, %r2902, 8947848;
	// begin inline asm
	lop3.b32 %r2455, %r1231, %r2468, %r2458, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2459, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2460, %r2458, %r2459;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2463, %r2455, %r2460;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2466, %r1242, %r2468, %r2469, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2470, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2471, %r2469, %r2470;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2474, %r2466, %r2471;
	// end inline asm
	// begin inline asm
	mov.b32 %r2504, {%rs187, %rs187};
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs189, %rs189};
	// end inline asm
	shr.u32 	%r2903, %r2899, 8;
	xor.b32  	%r2514, %r2903, 8947848;
	// begin inline asm
	lop3.b32 %r2501, %r1231, %r2514, %r2504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2505, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2506, %r2504, %r2505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2509, %r2501, %r2506;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2512, %r1242, %r2514, %r2515, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2516, {%rs193, %rs193};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2517, %r2515, %r2516;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2520, %r2512, %r2517;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2371;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2523, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2382;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2526, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2417;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2529, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2428;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2532, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2463;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2535, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2474;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2538, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2509;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2541, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2520;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2544, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2875, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2610, %r2607}, {%r393, %r396}, {%r2523}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2619, %r2616}, {%r393, %r396}, {%r2526}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2628, %r2625}, {%r393, %r396}, {%r2529}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2637, %r2634}, {%r393, %r396}, {%r2532}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2646, %r2643}, {%r393, %r396}, {%r2535}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2655, %r2652}, {%r393, %r396}, {%r2538}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2664, %r2661}, {%r393, %r396}, {%r2541}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2673, %r2670}, {%r393, %r396}, {%r2544}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2603, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r2603, %r2607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r445, %r2610, %r2605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2612, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2614, %r2612, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2617, %r445, %r2619, %r2614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2621, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r2621, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r445, %r2628, %r2623;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2630, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2632, %r2630, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2635, %r445, %r2637, %r2632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2639, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2641, %r2639, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2644, %r445, %r2646, %r2641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2648, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2648, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2653, %r445, %r2655, %r2650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r445, %r2664, %r2659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r445, %r2673, %r2668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r448, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r445, %r2607, %r2675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r448, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r445, %r2616, %r2682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r448, %r2628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r445, %r2625, %r2689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r448, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2699, %r445, %r2634, %r2696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r448, %r2646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r445, %r2643, %r2703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r448, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2713, %r445, %r2652, %r2710;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r448, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r445, %r2661, %r2717;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r448, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r445, %r2670, %r2724;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2731, %r2732}, {%r489, %r495, %r492, %r498}, {%r2608, %r2678}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2741, %r2742}, {%r489, %r495, %r492, %r498}, {%r2617, %r2685}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2751, %r2752}, {%r489, %r495, %r492, %r498}, {%r2626, %r2692}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2761, %r2762}, {%r489, %r495, %r492, %r498}, {%r2635, %r2699}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2771, %r2772}, {%r489, %r495, %r492, %r498}, {%r2644, %r2706}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2781, %r2782}, {%r489, %r495, %r492, %r498}, {%r2653, %r2713}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2791, %r2792}, {%r489, %r495, %r492, %r498}, {%r2662, %r2720}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2801, %r2802}, {%r489, %r495, %r492, %r498}, {%r2671, %r2727}, {%r2875, %r2875};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3701, %r2875;
	mov.u32 	%r3702, %r2875;
	mov.u32 	%r3703, %r2875;
	mov.u32 	%r3704, %r2875;
	@%p277 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_187;
$L__BB0_254:                            // %oksrem9116
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3704, [%rd7];
	ld.shared.u32 	%r3703, [%rd8];
	ld.shared.u32 	%r3702, [%rd9];
	ld.shared.u32 	%r3701, [%rd10];
$L__BB0_187:                            // %L21413
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2939, %r2936}, {%r507, %r510}, {%r3704}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2948, %r2945}, {%r507, %r510}, {%r3703}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2957, %r2954}, {%r507, %r510}, {%r3702}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2966, %r2963}, {%r507, %r510}, {%r3701}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2932, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r2932, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r559, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2941, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r2941, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r559, %r2948, %r2943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2950, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2952, %r2950, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r559, %r2957, %r2952;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2959, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2961, %r2959, %r2963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r559, %r2966, %r2961;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r562, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r559, %r2936, %r2968;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2975, %r562, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r559, %r2945, %r2975;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2982, %r562, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r559, %r2954, %r2982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2989, %r562, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2992, %r559, %r2963, %r2989;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3037, %r3040}, {%r603, %r609, %r606, %r612}, {%r2937, %r2971}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3056, %r3059}, {%r603, %r609, %r606, %r612}, {%r2946, %r2978}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3044, %r3048}, {%r603, %r609, %r606, %r612}, {%r2955, %r2985}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3063, %r3067}, {%r603, %r609, %r606, %r612}, {%r2964, %r2992}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3036, %r3037, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r3040, %r3040, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r3044, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r3048, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r1818, %r3047, %r3675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r3056, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r3059, %r3059, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r3067, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3070, %r1818, %r3066, %r3674;
	// end inline asm
	mov.u32 	%r3705, %r2875;
	mov.u32 	%r3706, %r2875;
	mov.u32 	%r3707, %r2875;
	mov.u32 	%r3708, %r2875;
	@%p277 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem9721
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3708, [%rd13];
	ld.shared.u32 	%r3707, [%rd14];
	ld.shared.u32 	%r3706, [%rd15];
	ld.shared.u32 	%r3705, [%rd16];
$L__BB0_188:                            // %L22632
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3110, %r3107}, {%r507, %r510}, {%r3708}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3119, %r3116}, {%r507, %r510}, {%r3707}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3128, %r3125}, {%r507, %r510}, {%r3706}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3137, %r3134}, {%r507, %r510}, {%r3705}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3103, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3105, %r3103, %r3107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r559, %r3110, %r3105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3112, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3114, %r3112, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3117, %r559, %r3119, %r3114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3121, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3123, %r3121, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3126, %r559, %r3128, %r3123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3130, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3130, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r559, %r3137, %r3132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3139, %r562, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r559, %r3107, %r3139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r562, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r559, %r3116, %r3146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3153, %r562, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r559, %r3125, %r3153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r562, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r559, %r3134, %r3160;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3208, %r3211}, {%r603, %r609, %r606, %r612}, {%r3108, %r3142}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3227, %r3230}, {%r603, %r609, %r606, %r612}, {%r3117, %r3149}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3215, %r3219}, {%r603, %r609, %r606, %r612}, {%r3126, %r3156}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3238}, {%r603, %r609, %r606, %r612}, {%r3135, %r3163}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3208, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3211, %r3211, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3215, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3219, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r1818, %r3218, %r3051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r3227, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3230, %r3230, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3234, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r1818, %r3237, %r3070;
	// end inline asm
	mov.u32 	%r3709, %r2875;
	mov.u32 	%r3710, %r2875;
	mov.u32 	%r3711, %r2875;
	mov.u32 	%r3712, %r2875;
	@%p277 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_189;
$L__BB0_256:                            // %oksrem10326
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3712, [%rd17];
	ld.shared.u32 	%r3711, [%rd18];
	ld.shared.u32 	%r3710, [%rd19];
	ld.shared.u32 	%r3709, [%rd20];
$L__BB0_189:                            // %L23851
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3281, %r3278}, {%r507, %r510}, {%r3712}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3290, %r3287}, {%r507, %r510}, {%r3711}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3299, %r3296}, {%r507, %r510}, {%r3710}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3308, %r3305}, {%r507, %r510}, {%r3709}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3274, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3276, %r3274, %r3278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3279, %r559, %r3281, %r3276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3283, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3285, %r3283, %r3287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r559, %r3290, %r3285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3292, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3294, %r3292, %r3296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r559, %r3299, %r3294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3301, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3303, %r3301, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r559, %r3308, %r3303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3310, %r562, %r3281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r559, %r3278, %r3310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3317, %r562, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r559, %r3287, %r3317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r562, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r559, %r3296, %r3324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3331, %r562, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r559, %r3305, %r3331;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3379, %r3382}, {%r603, %r609, %r606, %r612}, {%r3279, %r3313}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3398, %r3401}, {%r603, %r609, %r606, %r612}, {%r3288, %r3320}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3386, %r3390}, {%r603, %r609, %r606, %r612}, {%r3297, %r3327}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3405, %r3409}, {%r603, %r609, %r606, %r612}, {%r3306, %r3334}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3378, %r3379, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3381, %r3382, %r3382, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r3386, %r3386, %r3381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3389, %r3390, %r3390, %r3385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r1818, %r3389, %r3222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3397, %r3398, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r3401, %r3401, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r3405, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r3409, %r3409, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r1818, %r3408, %r3241;
	// end inline asm
	mov.u32 	%r3713, %r2875;
	mov.u32 	%r3714, %r2875;
	mov.u32 	%r3715, %r2875;
	mov.u32 	%r3716, %r2875;
	@%p277 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_190;
$L__BB0_257:                            // %oksrem10931
                                        //   in Loop: Header=BB0_186 Depth=2
	ld.shared.u32 	%r3716, [%rd21];
	ld.shared.u32 	%r3715, [%rd22];
	ld.shared.u32 	%r3714, [%rd23];
	ld.shared.u32 	%r3713, [%rd24];
$L__BB0_190:                            // %L25070
                                        //   in Loop: Header=BB0_186 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3452, %r3449}, {%r507, %r510}, {%r3716}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3461, %r3458}, {%r507, %r510}, {%r3715}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3470, %r3467}, {%r507, %r510}, {%r3714}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3479, %r3476}, {%r507, %r510}, {%r3713}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3445, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3447, %r3445, %r3449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3450, %r559, %r3452, %r3447;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3454, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3456, %r3454, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3459, %r559, %r3461, %r3456;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3463, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3465, %r3463, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3468, %r559, %r3470, %r3465;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3472, %r562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3474, %r3472, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r559, %r3479, %r3474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3481, %r562, %r3452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r559, %r3449, %r3481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3488, %r562, %r3461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r559, %r3458, %r3488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r562, %r3470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r559, %r3467, %r3495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r562, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r559, %r3476, %r3502;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3550, %r3553}, {%r603, %r609, %r606, %r612}, {%r3450, %r3484}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3569, %r3572}, {%r603, %r609, %r606, %r612}, {%r3459, %r3491}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3557, %r3561}, {%r603, %r609, %r606, %r612}, {%r3468, %r3498}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3576, %r3580}, {%r603, %r609, %r606, %r612}, {%r3477, %r3505}, {%r2875, %r2875};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3549, %r3550, %r3550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r3553, %r3553, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r3557, %r3557, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r3561, %r3561, %r3556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3675, %r1818, %r3560, %r3393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r3569, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r3572, %r3572, %r3568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r3576, %r3576, %r3571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r3580, %r3580, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3674, %r1818, %r3579, %r3412;
	// end inline asm
	add.s32 	%r3672, %r3672, 4;
	setp.eq.s32 	%p306, %r3672, 96;
	@%p306 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_193;
$L__BB0_191:                            // %pass11424
                                        //   in Loop: Header=BB0_186 Depth=2
	@%p92 bra 	$L__BB0_192;
// %bb.258:                             // %pass11434
                                        //   in Loop: Header=BB0_186 Depth=2
	mul.lo.s32 	%r3587, %r3673, 589824;
	add.s32 	%r3588, %r119, %r3587;
	cvt.s64.s32 	%rd262, %r3588;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 1024819115206086201;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 25;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p308, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 603979776;
	setp.ne.s64 	%p309, %rd268, %rd263;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd269, -1, 0, %p310;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -603979776;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3675;
	add.s32 	%r3589, %r120, %r3587;
	cvt.s64.s32 	%rd275, %r3589;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 1024819115206086201;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 25;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p311, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 603979776;
	setp.ne.s64 	%p312, %rd281, %rd276;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd282, -1, 0, %p313;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -603979776;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3674;
	bra.uni 	$L__BB0_192;
$L__BB0_195:                            // %L25638
	mov.u32 	%r3591, 0;
	st.global.u32 	[%rd6], %r3591;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd334, exception2191;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd332, exception2191;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd330, exception2191;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3612, 5;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd328, exception2191;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd326, exception2191;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3610, 5;
	st.global.u32 	[%rd6], %r3610;
	mov.u64 	%rd324, exception2191;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3609, 5;
	st.global.u32 	[%rd6], %r3609;
	mov.u64 	%rd322, exception2191;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3608, 5;
	st.global.u32 	[%rd6], %r3608;
	mov.u64 	%rd320, exception2191;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3607, 5;
	st.global.u32 	[%rd6], %r3607;
	mov.u64 	%rd318, exception2191;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3606, 5;
	st.global.u32 	[%rd6], %r3606;
	mov.u64 	%rd316, exception2191;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3605, 5;
	st.global.u32 	[%rd6], %r3605;
	mov.u64 	%rd314, exception2191;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3604, 5;
	st.global.u32 	[%rd6], %r3604;
	mov.u64 	%rd312, exception2191;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3603, 5;
	st.global.u32 	[%rd6], %r3603;
	mov.u64 	%rd310, exception2191;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3602, 5;
	st.global.u32 	[%rd6], %r3602;
	mov.u64 	%rd308, exception2191;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3601, 5;
	st.global.u32 	[%rd6], %r3601;
	mov.u64 	%rd306, exception2191;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3600, 5;
	st.global.u32 	[%rd6], %r3600;
	mov.u64 	%rd304, exception2191;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3599, 5;
	st.global.u32 	[%rd6], %r3599;
	mov.u64 	%rd302, exception2191;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3598, 5;
	st.global.u32 	[%rd6], %r3598;
	mov.u64 	%rd300, exception2191;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3597, 5;
	st.global.u32 	[%rd6], %r3597;
	mov.u64 	%rd298, exception2191;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3596, 5;
	st.global.u32 	[%rd6], %r3596;
	mov.u64 	%rd296, exception2191;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3595, 5;
	st.global.u32 	[%rd6], %r3595;
	mov.u64 	%rd294, exception2191;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3594, 5;
	st.global.u32 	[%rd6], %r3594;
	mov.u64 	%rd292, exception2191;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3593, 5;
	st.global.u32 	[%rd6], %r3593;
	mov.u64 	%rd290, exception2191;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3592, 5;
	st.global.u32 	[%rd6], %r3592;
	mov.u64 	%rd288, exception2191;
	cvta.global.u64 	%rd289, %rd288;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd289;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3617, 2;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd338, exception2191;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3616, 3;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd336, exception2191;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception1;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r3};
	st.local.v2.u32 	[%rd5+8], {%r2, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r623, [retval0+0];
	} // callseq 61
	mov.u32 	%r625, 4;
	st.global.u32 	[%rd6], %r625;
	mov.u64 	%rd39, exception2191;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r360;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
