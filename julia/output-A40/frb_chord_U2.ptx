// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3856[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<320>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3816>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<374>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r395, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r404, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r404, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r396, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r405, %r3, 768, %r2;
	or.b32  	%r406, %r405, %r4;
	mul.wide.u32 	%rd49, %r406, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r407, 1;
	st.global.u32 	[%rd6], %r407;
	setp.gt.u32 	%p4, %r396, 16383;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r397, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r397, %r396;
	setp.gt.s32 	%p6, %r397, 32767;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r398, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r397, %r396;
	mad.lo.s32 	%r408, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r409, %r408, %r408, 4;
	setp.gt.u32 	%p8, %r409, 89478484;
	setp.gt.u32 	%p9, %r398, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r399, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r399, %r398;
	setp.lt.s32 	%p12, %r399, 2048;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r410, %r399, %r398;
	mul.hi.s32 	%r411, %r5, 715827883;
	shr.u32 	%r412, %r411, 31;
	shr.s32 	%r413, %r411, 4;
	add.s32 	%r414, %r413, %r412;
	setp.eq.s32 	%p14, %r410, %r414;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r400, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r400, 0;
	@%p15 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r401, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r401, %r400;
	setp.gt.s32 	%p17, %r401, 32;
	or.pred  	%p18, %p16, %p17;
	@%p18 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r402, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r401, %r400;
	and.b32  	%r415, %r6, 1;
	setp.eq.b32 	%p19, %r415, 1;
	setp.lt.s32 	%p20, %r402, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r403, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r403, %r402;
	setp.gt.s32 	%p23, %r403, 512;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r416, %r403, %r402;
	and.b32  	%r417, %r416, 1;
	setp.eq.b32 	%p25, %r417, 1;
	not.pred 	%p26, %p25;
	setp.eq.s32 	%p27, %r416, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_13;
$L__BB0_198:                            // %pass162
	and.b32  	%r258, %r4, 3;
	shr.u32 	%r259, %r4, 2;
	mul.lo.s32 	%r418, %r258, %r259;
	and.b32  	%r419, %r418, 7;
	cvt.rn.f32.s32 	%f201, %r419;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p319, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_210;
// %bb.199:
	@%p319 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_200;
$L__BB0_206:
	mov.b32 	%r261, %f785;
	and.b32  	%r420, %r261, 8388607;
	or.b32  	%r3811, %r420, 1065353216;
	mov.b32 	%f780, %r3811;
	add.s32 	%r421, %r261, -1073741824;
	and.b32  	%r3812, %r421, -8388608;
	setp.eq.s32 	%p36, %r3812, 0;
	@%p36 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r422, %r3812, 192937984;
	add.s32 	%r423, %r3811, %r422;
	mov.b32 	%f213, %r423;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3812, %r3812, %r422;
	mov.b32 	%r3811, %f780;
	setp.ne.s32 	%p37, %r3812, 0;
	setp.ne.s32 	%p38, %r3811, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r261, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_210;
$L__BB0_200:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r260, %f172;
	setp.lt.u32 	%p31, %r260, 1073741824;
	@%p31 bra 	$L__BB0_205;
// %bb.201:
	setp.lt.u32 	%p32, %r260, -2147483647;
	@%p32 bra 	$L__BB0_203;
// %bb.202:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r424, %f169;
	and.b32  	%r268, %r424, -2147483648;
	@%p41 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r425, %f781;
	or.b32  	%r426, %r268, %r425;
	mov.b32 	%f781, %r426;
$L__BB0_212:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r271, %r4, 1;
	and.b32  	%r272, %r271, 6;
	or.b32  	%r273, %r272, 1;
	setp.eq.s32 	%p49, %r272, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3708, %r272, %r259;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_29;
// %bb.14:                              // %L487
	cvt.u16.u32 	%rs1, %r3708;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_26;
// %bb.15:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_16;
$L__BB0_22:
	mov.b32 	%r8, %f733;
	and.b32  	%r442, %r8, 8388607;
	or.b32  	%r3712, %r442, 1065353216;
	mov.b32 	%f732, %r3712;
	add.s32 	%r443, %r8, -1073741824;
	and.b32  	%r3713, %r443, -8388608;
	setp.eq.s32 	%p57, %r3713, 0;
	@%p57 bra 	$L__BB0_25;
// %bb.23:                              // %__nv_fmaf_rn.exit4.i.i.i1044.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_24:                             // %__nv_fmaf_rn.exit4.i.i.i1044
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r3713, 192937984;
	add.s32 	%r445, %r3712, %r444;
	mov.b32 	%f267, %r445;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3713, %r3713, %r444;
	mov.b32 	%r3712, %f732;
	setp.ne.s32 	%p58, %r3713, 0;
	setp.ne.s32 	%p59, %r3712, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_24;
$L__BB0_25:                             // %__internal_fmodf_slowpath_mod.exit.i.i1046
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_26;
$L__BB0_16:                             // %__nv_fast_fdividef.exit.i.i.i1023
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_21;
// %bb.17:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_19;
// %bb.18:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_21;
// %bb.20:                              // %__nv_fmaf_rn.exit.i.i.i1027
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_21:                             // %__internal_fmodf_fastpath_quot.exit.i.i1030
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_26:                             // %__internal_fmodf_kernel.exit.i1049
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_28;
// %bb.27:
	mov.b32 	%r446, %f1;
	and.b32  	%r447, %r446, -2147483648;
	mov.b32 	%r448, %f733;
	or.b32  	%r449, %r447, %r448;
	mov.b32 	%f733, %r449;
$L__BB0_28:                             // %__nv_fmodf.exit1050
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r450, %f277;
	and.b32  	%r451, %r450, -2147483648;
	or.b32  	%r452, %r451, 1056964608;
	mov.b32 	%f278, %r452;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r453, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r454, %r453, 1;
	setp.eq.b32 	%p65, %r454, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r455, %r453, 2;
	setp.eq.s32 	%p66, %r455, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r456, %r453, 1;
	and.b32  	%r457, %r456, 2;
	setp.eq.s32 	%p67, %r457, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_29:                             // %L521
	setp.gt.u32 	%p70, %r273, 5;
	mul.lo.s32 	%r3709, %r273, %r259;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_45;
// %bb.30:                              // %L525
	mul.hi.u32 	%r459, %r3709, -1431655765;
	shr.u32 	%r460, %r459, 5;
	mul.lo.s32 	%r461, %r460, 48;
	sub.s32 	%r462, %r3709, %r461;
	cvt.rn.f32.s32 	%f308, %r462;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_42;
// %bb.31:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_32;
$L__BB0_38:
	mov.b32 	%r16, %f739;
	and.b32  	%r463, %r16, 8388607;
	or.b32  	%r3714, %r463, 1065353216;
	mov.b32 	%f738, %r3714;
	add.s32 	%r464, %r16, -1073741824;
	and.b32  	%r3715, %r464, -8388608;
	setp.eq.s32 	%p78, %r3715, 0;
	@%p78 bra 	$L__BB0_41;
// %bb.39:                              // %__nv_fmaf_rn.exit4.i.i.i1075.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_40:                             // %__nv_fmaf_rn.exit4.i.i.i1075
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r465, %r3715, 192937984;
	add.s32 	%r466, %r3714, %r465;
	mov.b32 	%f320, %r466;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3715, %r3715, %r465;
	mov.b32 	%r3714, %f738;
	setp.ne.s32 	%p79, %r3715, 0;
	setp.ne.s32 	%p80, %r3714, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_40;
$L__BB0_41:                             // %__internal_fmodf_slowpath_mod.exit.i.i1077
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_42;
$L__BB0_32:                             // %__nv_fast_fdividef.exit.i.i.i1054
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_37;
// %bb.33:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_35;
// %bb.34:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_37;
$L__BB0_35:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_37;
// %bb.36:                              // %__nv_fmaf_rn.exit.i.i.i1058
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_37:                             // %__internal_fmodf_fastpath_quot.exit.i.i1061
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_42:                             // %__internal_fmodf_kernel.exit.i1080
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_44;
// %bb.43:
	mov.b32 	%r467, %f22;
	and.b32  	%r468, %r467, -2147483648;
	mov.b32 	%r469, %f739;
	or.b32  	%r470, %r468, %r469;
	mov.b32 	%f739, %r470;
$L__BB0_44:                             // %__nv_fmodf.exit1081
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r471, %f330;
	and.b32  	%r472, %r471, -2147483648;
	or.b32  	%r473, %r472, 1056964608;
	mov.b32 	%f331, %r473;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r474, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r475, %r474, 1;
	setp.eq.b32 	%p86, %r475, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r476, %r474, 2;
	setp.eq.s32 	%p87, %r476, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r477, %r474, 1;
	and.b32  	%r478, %r477, 2;
	setp.eq.s32 	%p88, %r478, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_45:                             // %L559
	setp.gt.u32 	%p92, %r4, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_61;
// %bb.46:                              // %L597
	cvt.u16.u32 	%rs8, %r3708;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r26, %f745;
	and.b32  	%r486, %r26, 8388607;
	or.b32  	%r3716, %r486, 1065353216;
	mov.b32 	%f744, %r3716;
	add.s32 	%r487, %r26, -1073741824;
	and.b32  	%r3717, %r487, -8388608;
	setp.eq.s32 	%p100, %r3717, 0;
	@%p100 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i1106.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i1106
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r488, %r3717, 192937984;
	add.s32 	%r489, %r3716, %r488;
	mov.b32 	%f373, %r489;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3717, %r3717, %r488;
	mov.b32 	%r3716, %f744;
	setp.ne.s32 	%p101, %r3717, 0;
	setp.ne.s32 	%p102, %r3716, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i1108
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i1085
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i1089
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i1092
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i1111
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r490, %f43;
	and.b32  	%r491, %r490, -2147483648;
	mov.b32 	%r492, %f745;
	or.b32  	%r493, %r491, %r492;
	mov.b32 	%f745, %r493;
$L__BB0_60:                             // %__nv_fmodf.exit1112
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r494, %f383;
	and.b32  	%r495, %r494, -2147483648;
	or.b32  	%r496, %r495, 1056964608;
	mov.b32 	%f384, %r496;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r497, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r498, %r497, 1;
	setp.eq.b32 	%p108, %r498, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r499, %r497, 2;
	setp.eq.s32 	%p109, %r499, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r500, %r497, 1;
	and.b32  	%r501, %r500, 2;
	setp.eq.s32 	%p110, %r501, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_61:                             // %L631
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_77;
// %bb.62:                              // %L639
	mul.hi.u32 	%r503, %r3709, -1431655765;
	shr.u32 	%r504, %r503, 2;
	mul.lo.s32 	%r505, %r504, 6;
	sub.s32 	%r506, %r3709, %r505;
	cvt.rn.f32.s32 	%f414, %r506;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_74;
// %bb.63:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_64;
$L__BB0_70:
	mov.b32 	%r34, %f751;
	and.b32  	%r507, %r34, 8388607;
	or.b32  	%r3718, %r507, 1065353216;
	mov.b32 	%f750, %r3718;
	add.s32 	%r508, %r34, -1073741824;
	and.b32  	%r3719, %r508, -8388608;
	setp.eq.s32 	%p122, %r3719, 0;
	@%p122 bra 	$L__BB0_73;
// %bb.71:                              // %__nv_fmaf_rn.exit4.i.i.i1137.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_72:                             // %__nv_fmaf_rn.exit4.i.i.i1137
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r509, %r3719, 192937984;
	add.s32 	%r510, %r3718, %r509;
	mov.b32 	%f426, %r510;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3719, %r3719, %r509;
	mov.b32 	%r3718, %f750;
	setp.ne.s32 	%p123, %r3719, 0;
	setp.ne.s32 	%p124, %r3718, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_72;
$L__BB0_73:                             // %__internal_fmodf_slowpath_mod.exit.i.i1139
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_74;
$L__BB0_64:                             // %__nv_fast_fdividef.exit.i.i.i1116
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_69;
// %bb.65:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_67;
// %bb.66:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_69;
$L__BB0_67:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_69;
// %bb.68:                              // %__nv_fmaf_rn.exit.i.i.i1120
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_69:                             // %__internal_fmodf_fastpath_quot.exit.i.i1123
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_74:                             // %__internal_fmodf_kernel.exit.i1142
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_76;
// %bb.75:
	mov.b32 	%r511, %f64;
	and.b32  	%r512, %r511, -2147483648;
	mov.b32 	%r513, %f751;
	or.b32  	%r514, %r512, %r513;
	mov.b32 	%f751, %r514;
$L__BB0_76:                             // %__nv_fmodf.exit1143
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r515, %f436;
	and.b32  	%r516, %r515, -2147483648;
	or.b32  	%r517, %r516, 1056964608;
	mov.b32 	%f437, %r517;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r518, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r519, %r518, 1;
	setp.eq.b32 	%p130, %r519, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r520, %r518, 2;
	setp.eq.s32 	%p131, %r520, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r521, %r518, 1;
	and.b32  	%r522, %r521, 2;
	setp.eq.s32 	%p132, %r522, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_77:                             // %L673
	@%p29 bra 	$L__BB0_220;
// %bb.78:
	@%p319 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_79;
$L__BB0_216:
	mov.b32 	%r275, %f785;
	and.b32  	%r535, %r275, 8388607;
	or.b32  	%r3813, %r535, 1065353216;
	mov.b32 	%f784, %r3813;
	add.s32 	%r536, %r275, -1073741824;
	and.b32  	%r3814, %r536, -8388608;
	setp.eq.s32 	%p142, %r3814, 0;
	@%p142 bra 	$L__BB0_219;
// %bb.217:                             // %__nv_fmaf_rn.exit4.i.i.i1168.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_218:                            // %__nv_fmaf_rn.exit4.i.i.i1168
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r537, %r3814, 192937984;
	add.s32 	%r538, %r3813, %r537;
	mov.b32 	%f476, %r538;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3814, %r3814, %r537;
	mov.b32 	%r3813, %f784;
	setp.ne.s32 	%p143, %r3814, 0;
	setp.ne.s32 	%p144, %r3813, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_218;
$L__BB0_219:                            // %__internal_fmodf_slowpath_mod.exit.i.i1170
	setp.gt.u32 	%p146, %r275, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_220;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i1147
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r274, %f187;
	setp.lt.u32 	%p137, %r274, 1073741824;
	@%p137 bra 	$L__BB0_215;
// %bb.80:
	setp.lt.u32 	%p138, %r274, -2147483647;
	@%p138 bra 	$L__BB0_213;
// %bb.81:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_215;
$L__BB0_213:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_215;
// %bb.214:                             // %__nv_fmaf_rn.exit.i.i.i1151
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_215:                            // %__internal_fmodf_fastpath_quot.exit.i.i1154
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_220:                            // %__internal_fmodf_kernel.exit.i1173
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_222;
// %bb.221:
	mov.b32 	%r539, %f785;
	or.b32  	%r540, %r268, %r539;
	mov.b32 	%f785, %r540;
$L__BB0_222:                            // %__nv_fmodf.exit1174
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_97;
// %bb.82:                              // %L775
	cvt.u16.u32 	%rs15, %r3708;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_94;
// %bb.83:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r46, %f757;
	and.b32  	%r556, %r46, 8388607;
	or.b32  	%r3720, %r556, 1065353216;
	mov.b32 	%f756, %r3720;
	add.s32 	%r557, %r46, -1073741824;
	and.b32  	%r3721, %r557, -8388608;
	setp.eq.s32 	%p163, %r3721, 0;
	@%p163 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i1199.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i1199
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r558, %r3721, 192937984;
	add.s32 	%r559, %r3720, %r558;
	mov.b32 	%f530, %r559;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3721, %r3721, %r558;
	mov.b32 	%r3720, %f756;
	setp.ne.s32 	%p164, %r3721, 0;
	setp.ne.s32 	%p165, %r3720, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i1201
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i1178
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i1182
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i1185
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i1204
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r560, %f85;
	and.b32  	%r561, %r560, -2147483648;
	mov.b32 	%r562, %f757;
	or.b32  	%r563, %r561, %r562;
	mov.b32 	%f757, %r563;
$L__BB0_96:                             // %__nv_fmodf.exit1205
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r564, %f540;
	and.b32  	%r565, %r564, -2147483648;
	or.b32  	%r566, %r565, 1056964608;
	mov.b32 	%f541, %r566;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r567, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r568, %r567, 1;
	setp.eq.b32 	%p171, %r568, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r569, %r567, 2;
	setp.eq.s32 	%p172, %r569, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r570, %r567, 1;
	and.b32  	%r571, %r570, 2;
	setp.eq.s32 	%p173, %r571, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_97:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_113;
// %bb.98:                              // %L813
	mul.hi.u32 	%r573, %r3709, -1431655765;
	shr.u32 	%r574, %r573, 5;
	mul.lo.s32 	%r575, %r574, 48;
	sub.s32 	%r576, %r3709, %r575;
	cvt.rn.f32.s32 	%f571, %r576;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r54, %f763;
	and.b32  	%r577, %r54, 8388607;
	or.b32  	%r3722, %r577, 1065353216;
	mov.b32 	%f762, %r3722;
	add.s32 	%r578, %r54, -1073741824;
	and.b32  	%r3723, %r578, -8388608;
	setp.eq.s32 	%p184, %r3723, 0;
	@%p184 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i1230.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i1230
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r579, %r3723, 192937984;
	add.s32 	%r580, %r3722, %r579;
	mov.b32 	%f583, %r580;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3723, %r3723, %r579;
	mov.b32 	%r3722, %f762;
	setp.ne.s32 	%p185, %r3723, 0;
	setp.ne.s32 	%p186, %r3722, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i1232
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i1209
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i1213
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i1216
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i1235
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r581, %f106;
	and.b32  	%r582, %r581, -2147483648;
	mov.b32 	%r583, %f763;
	or.b32  	%r584, %r582, %r583;
	mov.b32 	%f763, %r584;
$L__BB0_112:                            // %__nv_fmodf.exit1236
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r585, %f593;
	and.b32  	%r586, %r585, -2147483648;
	or.b32  	%r587, %r586, 1056964608;
	mov.b32 	%f594, %r587;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r588, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r589, %r588, 1;
	setp.eq.b32 	%p192, %r589, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r590, %r588, 2;
	setp.eq.s32 	%p193, %r590, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r591, %r588, 1;
	and.b32  	%r592, %r591, 2;
	setp.eq.s32 	%p194, %r592, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_113:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_129;
// %bb.114:                             // %L885
	cvt.u16.u32 	%rs22, %r3708;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r64, %f769;
	and.b32  	%r600, %r64, 8388607;
	or.b32  	%r3724, %r600, 1065353216;
	mov.b32 	%f768, %r3724;
	add.s32 	%r601, %r64, -1073741824;
	and.b32  	%r3725, %r601, -8388608;
	setp.eq.s32 	%p204, %r3725, 0;
	@%p204 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i1261.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i1261
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r602, %r3725, 192937984;
	add.s32 	%r603, %r3724, %r602;
	mov.b32 	%f636, %r603;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3725, %r3725, %r602;
	mov.b32 	%r3724, %f768;
	setp.ne.s32 	%p205, %r3725, 0;
	setp.ne.s32 	%p206, %r3724, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i1263
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i1240
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i1244
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i1247
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i1266
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r604, %f127;
	and.b32  	%r605, %r604, -2147483648;
	mov.b32 	%r606, %f769;
	or.b32  	%r607, %r605, %r606;
	mov.b32 	%f769, %r607;
$L__BB0_128:                            // %__nv_fmodf.exit1267
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r608, %f646;
	and.b32  	%r609, %r608, -2147483648;
	or.b32  	%r610, %r609, 1056964608;
	mov.b32 	%f647, %r610;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r611, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r612, %r611, 1;
	setp.eq.b32 	%p212, %r612, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r613, %r611, 2;
	setp.eq.s32 	%p213, %r613, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r614, %r611, 1;
	and.b32  	%r615, %r614, 2;
	setp.eq.s32 	%p214, %r615, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_129:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_145;
// %bb.130:                             // %L927
	mul.hi.u32 	%r617, %r3709, -1431655765;
	shr.u32 	%r618, %r617, 2;
	mul.lo.s32 	%r619, %r618, 6;
	sub.s32 	%r620, %r3709, %r619;
	cvt.rn.f32.s32 	%f677, %r620;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_142;
// %bb.131:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_132;
$L__BB0_138:
	mov.b32 	%r72, %f775;
	and.b32  	%r621, %r72, 8388607;
	or.b32  	%r3726, %r621, 1065353216;
	mov.b32 	%f774, %r3726;
	add.s32 	%r622, %r72, -1073741824;
	and.b32  	%r3727, %r622, -8388608;
	setp.eq.s32 	%p224, %r3727, 0;
	@%p224 bra 	$L__BB0_141;
// %bb.139:                             // %__nv_fmaf_rn.exit4.i.i.i1292.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_140:                            // %__nv_fmaf_rn.exit4.i.i.i1292
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r623, %r3727, 192937984;
	add.s32 	%r624, %r3726, %r623;
	mov.b32 	%f689, %r624;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3727, %r3727, %r623;
	mov.b32 	%r3726, %f774;
	setp.ne.s32 	%p225, %r3727, 0;
	setp.ne.s32 	%p226, %r3726, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_140;
$L__BB0_141:                            // %__internal_fmodf_slowpath_mod.exit.i.i1294
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_142;
$L__BB0_132:                            // %__nv_fast_fdividef.exit.i.i.i1271
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_137;
// %bb.133:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_135;
// %bb.134:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_137;
$L__BB0_135:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_137;
// %bb.136:                             // %__nv_fmaf_rn.exit.i.i.i1275
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_137:                            // %__internal_fmodf_fastpath_quot.exit.i.i1278
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_142:                            // %__internal_fmodf_kernel.exit.i1297
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_144;
// %bb.143:
	mov.b32 	%r625, %f148;
	and.b32  	%r626, %r625, -2147483648;
	mov.b32 	%r627, %f775;
	or.b32  	%r628, %r626, %r627;
	mov.b32 	%f775, %r628;
$L__BB0_144:                            // %__nv_fmodf.exit1298
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r629, %f699;
	and.b32  	%r630, %r629, -2147483648;
	or.b32  	%r631, %r630, 1056964608;
	mov.b32 	%f700, %r631;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r632, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r633, %r632, 1;
	setp.eq.b32 	%p232, %r633, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r634, %r632, 2;
	setp.eq.s32 	%p233, %r634, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r635, %r632, 1;
	and.b32  	%r636, %r635, 2;
	setp.eq.s32 	%p234, %r636, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_145:                            // %L961
	mov.u32 	%r284, 999999999;
	cvt.u16.u32 	%rs247, %r4;
	@%p92 bra 	$L__BB0_224;
// %bb.146:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r650, %rs34;
	and.b32  	%r651, %r650, 255;
	mad.lo.s32 	%r652, %r651, 24, %r1;
	cvt.u16.u32 	%rs35, %r652;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r653, %rs39;
	mul.wide.u32 	%rd50, %r653, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r654, [%rd51];
	shl.b32 	%r655, %r654, 16;
	cvt.s32.s16 	%r83, %r654;
	shr.s32 	%r84, %r654, 16;
	or.b32  	%r656, %r655, 65535;
	setp.lt.u32 	%p238, %r656, 1638399;
	setp.lt.u32 	%p239, %r654, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_147;
$L__BB0_223:                            // %L1237
	mul.lo.s32 	%r660, %r84, 801;
	mad.lo.s32 	%r284, %r83, 33, %r660;
$L__BB0_224:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r433, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r434, %r433, -2147483648;
	mov.b32 	%r547, %f487;
	or.b32  	%r435, %r434, 1056964608;
	and.b32  	%r548, %r547, -2147483648;
	mov.b32 	%f225, %r435;
	or.b32  	%r549, %r548, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r549;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r436, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r437, %r436, 1;
	cvt.rzi.s32.f32 	%r550, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r437, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r551, %r550, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r438, %r436, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r551, 1;
	setp.eq.s32 	%p45, %r438, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r439, %r436, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r552, %r550, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r440, %r439, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r552, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r553, %r550, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r440, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r554, %r553, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r554, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r429, %f254;
	mov.b32 	%r432, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r428, %r432, -2147483648;
	mov.b32 	%r524, %f62;
	mov.b32 	%r525, %f83;
	mov.b32 	%r530, %f63;
	mov.b32 	%r531, %f84;
	mov.b32 	%r543, %f517;
	mov.b32 	%r546, %f514;
	mov.b32 	%r480, %f20;
	mov.b32 	%r481, %f41;
	mov.b32 	%r483, %f21;
	mov.b32 	%r484, %f42;
	xor.b32  	%r527, %r530, -2147483648;
	xor.b32  	%r528, %r531, -2147483648;
	xor.b32  	%r542, %r546, -2147483648;
	mov.b32 	%r594, %f104;
	mov.b32 	%r595, %f125;
	mov.b32 	%r597, %f105;
	mov.b32 	%r598, %f126;
	mov.b32 	%r638, %f146;
	mov.b32 	%r639, %f167;
	mov.b32 	%r644, %f147;
	xor.b32  	%r641, %r644, -2147483648;
	mov.b32 	%r645, %f168;
	xor.b32  	%r642, %r645, -2147483648;
	and.b32  	%r661, %r4, 24;
	setp.ne.s32 	%p241, %r661, 24;
	cvt.u16.u32 	%rs248, %r259;
	mul.lo.s32 	%r3728, %r3, 1152;
	@%p241 bra 	$L__BB0_148;
// %bb.225:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r673, %rs50;
	and.b32  	%r3729, %r673, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_149;
$L__BB0_148:                            // %pass518
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r662, %r258, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r663, %rs44;
	and.b32  	%r3729, %r663, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r664, %rs45, 24;
	or.b32  	%r665, %r3728, %r1;
	add.s32 	%r666, %r665, %r662;
	add.s32 	%r667, %r666, %r664;
	mul.wide.u32 	%rd57, %r667, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r88, [%rd58];
	or.b32  	%r668, %r1, 576;
	add.s32 	%r669, %r668, %r3728;
	add.s32 	%r670, %r669, %r662;
	add.s32 	%r671, %r670, %r664;
	mul.wide.u32 	%rd59, %r671, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r89, [%rd60];
$L__BB0_149:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r523, %r525, %r524;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r526, %r528, %r527;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r529, %r531, %r530;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r532, %r525, %r524;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r541, %r543, %r542;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r544, %r546, %r543;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r593, %r595, %r594;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r596, %r598, %r597;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r637, %r639, %r638;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r640, %r642, %r641;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r643, %r645, %r644;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r646, %r639, %r638;
	// end inline asm
	mov.u32 	%r124, 0;
	shl.b32 	%r675, %r396, 13;
	shl.b32 	%r676, %r400, 8;
	add.s32 	%r90, %r676, %r675;
	shl.b32 	%r677, %r4, 2;
	and.b32  	%r91, %r677, 60;
	shl.b32 	%r678, %r4, 3;
	and.b32  	%r92, %r678, 128;
	shl.b32 	%r93, %r3, 8;
	or.b32  	%r94, %r677, 64;
	or.b32  	%r95, %r92, %r93;
	add.s32 	%r96, %r1, 24;
	shr.u32 	%r679, %r4, 4;
	and.b32  	%r680, %r271, 30;
	or.b32  	%r681, %r680, %r679;
	mul.lo.s32 	%r97, %r681, 257;
	or.b32  	%r682, %r271, %r679;
	or.b32  	%r683, %r682, 32;
	mul.lo.s32 	%r98, %r683, 257;
	and.b32  	%r684, %r2, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r685, %rs56;
	and.b32  	%r99, %r685, 255;
	shr.u32 	%r686, %r1, 3;
	mad.lo.s32 	%r100, %r686, 257, %r684;
	shr.u32 	%r687, %r96, 3;
	mad.lo.s32 	%r101, %r687, 257, %r684;
	add.s32 	%r688, %r1, 48;
	shr.u32 	%r689, %r688, 3;
	mad.lo.s32 	%r102, %r689, 257, %r684;
	add.s32 	%r690, %r1, 72;
	shr.u32 	%r691, %r690, 3;
	mad.lo.s32 	%r103, %r691, 257, %r684;
	or.b32  	%r692, %r686, 12;
	mad.lo.s32 	%r104, %r692, 257, %r684;
	add.s32 	%r693, %r1, 120;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r105, %r694, 257, %r684;
	add.s32 	%r695, %r1, 144;
	shr.u32 	%r696, %r695, 3;
	mad.lo.s32 	%r106, %r696, 257, %r684;
	add.s32 	%r697, %r1, 168;
	shr.u32 	%r698, %r697, 3;
	mad.lo.s32 	%r107, %r698, 257, %r684;
	or.b32  	%r699, %r686, 24;
	mad.lo.s32 	%r108, %r699, 257, %r684;
	add.s32 	%r700, %r1, 216;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r109, %r701, 257, %r684;
	add.s32 	%r702, %r1, 240;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r110, %r703, 257, %r684;
	add.s32 	%r704, %r1, 264;
	shr.u32 	%r705, %r704, 3;
	mad.lo.s32 	%r111, %r705, 257, %r684;
	or.b32  	%r706, %r686, 36;
	mad.lo.s32 	%r112, %r706, 257, %r684;
	add.s32 	%r707, %r1, 312;
	shr.u32 	%r708, %r707, 3;
	mad.lo.s32 	%r113, %r708, 257, %r684;
	add.s32 	%r709, %r1, 336;
	shr.u32 	%r710, %r709, 3;
	mad.lo.s32 	%r114, %r710, 257, %r684;
	add.s32 	%r711, %r1, 360;
	shr.u32 	%r712, %r711, 3;
	mad.lo.s32 	%r115, %r712, 257, %r684;
	or.b32  	%r713, %r686, 48;
	mad.lo.s32 	%r116, %r713, 257, %r684;
	add.s32 	%r714, %r1, 408;
	shr.u32 	%r715, %r714, 3;
	mad.lo.s32 	%r117, %r715, 257, %r684;
	add.s32 	%r716, %r1, 432;
	shr.u32 	%r717, %r716, 3;
	mad.lo.s32 	%r118, %r717, 257, %r684;
	add.s32 	%r718, %r1, 456;
	shr.u32 	%r719, %r718, 3;
	mad.lo.s32 	%r119, %r719, 257, %r684;
	or.b32  	%r720, %r686, 60;
	mad.lo.s32 	%r120, %r720, 257, %r684;
	add.s32 	%r721, %r1, 504;
	bfe.u32 	%r722, %r721, 3, 6;
	mad.lo.s32 	%r121, %r722, 257, %r684;
	mul.lo.s32 	%r723, %r1, 33;
	mad.lo.s32 	%r724, %r258, 4806, %r723;
	mad.lo.s32 	%r725, %r3729, 801, %r724;
	bfe.s32 	%r726, %r4, 2, 1;
	and.b32  	%r727, %r4, 4;
	setp.eq.s32 	%p242, %r727, 0;
	and.b32  	%r728, %r726, 1028;
	bfe.s32 	%r729, %r4, 3, 1;
	and.b32  	%r730, %r729, 514;
	bfe.s32 	%r731, %r4, 1, 1;
	and.b32  	%r732, %r731, 2056;
	and.b32  	%r733, %r4, 1;
	neg.s32 	%r734, %r733;
	and.b32  	%r735, %r734, 4112;
	mul.lo.s32 	%r736, %r679, 257;
	add.s32 	%r737, %r736, %r1;
	add.s32 	%r738, %r737, %r730;
	add.s32 	%r739, %r738, %r728;
	add.s32 	%r740, %r739, %r732;
	add.s32 	%r741, %r740, %r735;
	mul.wide.u32 	%rd61, %r741, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	selp.b32 	%r742, 8256, 9284, %p242;
	add.s32 	%r743, %r738, %r742;
	add.s32 	%r744, %r743, %r732;
	add.s32 	%r745, %r744, %r735;
	mul.wide.u32 	%rd63, %r745, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r746, %r1, 32;
	add.s32 	%r747, %r746, %r736;
	add.s32 	%r748, %r747, %r730;
	add.s32 	%r749, %r748, %r728;
	add.s32 	%r750, %r749, %r732;
	add.s32 	%r751, %r750, %r735;
	mul.wide.u32 	%rd64, %r751, 4;
	add.s64 	%rd9, %rd62, %rd64;
	add.s32 	%r752, %r748, %r742;
	add.s32 	%r753, %r752, %r732;
	add.s32 	%r754, %r753, %r735;
	mul.wide.u32 	%rd65, %r754, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r755, %r1, 3, 1;
	and.b32  	%r756, %r1, 8;
	setp.eq.s32 	%p243, %r756, 0;
	and.b32  	%r757, %r755, 1028;
	mul.lo.s32 	%r758, %r258, 6;
	and.b32  	%r759, %r1, 1;
	neg.s32 	%r760, %r759;
	and.b32  	%r761, %r760, 8256;
	shr.u32 	%r762, %r1, 4;
	mul.lo.s32 	%r763, %r762, 514;
	bfe.s32 	%r764, %r1, 2, 1;
	and.b32  	%r765, %r764, 2056;
	bfe.s32 	%r766, %r1, 1, 1;
	and.b32  	%r767, %r766, 4112;
	add.s32 	%r768, %r763, %r758;
	add.s32 	%r769, %r768, %r757;
	add.s32 	%r770, %r769, %r761;
	add.s32 	%r771, %r770, %r765;
	add.s32 	%r772, %r771, %r767;
	add.s32 	%r773, %r772, %r3729;
	mul.wide.u32 	%rd66, %r773, 4;
	add.s64 	%rd11, %rd62, %rd66;
	selp.b32 	%r774, 1028, 0, %p243;
	bfe.s32 	%r775, %r96, 4, 1;
	and.b32  	%r776, %r775, 514;
	shr.u32 	%r777, %r96, 5;
	mul.lo.s32 	%r778, %r777, 257;
	add.s32 	%r779, %r774, %r758;
	or.b32  	%r780, %r779, %r761;
	add.s32 	%r781, %r780, %r765;
	add.s32 	%r782, %r781, %r767;
	add.s32 	%r783, %r782, %r778;
	add.s32 	%r784, %r783, %r776;
	add.s32 	%r785, %r784, %r3729;
	mul.wide.u32 	%rd67, %r785, 4;
	add.s64 	%rd12, %rd62, %rd67;
	or.b32  	%r786, %r758, 32;
	add.s32 	%r787, %r786, %r763;
	add.s32 	%r788, %r787, %r757;
	add.s32 	%r789, %r788, %r761;
	add.s32 	%r790, %r789, %r765;
	add.s32 	%r791, %r790, %r767;
	add.s32 	%r792, %r791, %r3729;
	mul.wide.u32 	%rd68, %r792, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r793, %r786, %r774;
	add.s32 	%r794, %r793, %r761;
	add.s32 	%r795, %r794, %r765;
	add.s32 	%r796, %r795, %r767;
	add.s32 	%r797, %r796, %r778;
	add.s32 	%r798, %r797, %r776;
	add.s32 	%r799, %r798, %r3729;
	mul.wide.u32 	%rd69, %r799, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r800, %r398, 589824;
	mad.lo.s32 	%r801, %r402, 1152, %r800;
	mad.lo.s32 	%r802, %r1, 24, %r3728;
	add.s32 	%r122, %r802, %r99;
	cvt.s64.s32 	%rd15, %r801;
	cvt.u16.u32 	%rs57, %r96;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r803, %rs62;
	and.b32  	%r804, %r803, 255;
	or.b32  	%r805, %r3728, %r99;
	mad.lo.s32 	%r123, %r804, 24, %r805;
	mul.wide.u32 	%rd70, %r725, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r806, %r741, 64;
	mul.wide.u32 	%rd71, %r806, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r807, %r745, 64;
	mul.wide.u32 	%rd72, %r807, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r808, %r751, 64;
	mul.wide.u32 	%rd73, %r808, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r809, %r754, 64;
	mul.wide.u32 	%rd74, %r809, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r810, %r741, 128;
	mul.wide.u32 	%rd75, %r810, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r811, %r745, 128;
	mul.wide.u32 	%rd76, %r811, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r812, %r751, 128;
	mul.wide.u32 	%rd77, %r812, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r813, %r754, 128;
	mul.wide.u32 	%rd78, %r813, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r814, %r741, 192;
	mul.wide.u32 	%rd79, %r814, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r815, %r745, 192;
	mul.wide.u32 	%rd80, %r815, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r816, %r751, 192;
	mul.wide.u32 	%rd81, %r816, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r817, %r754, 192;
	mul.wide.u32 	%rd82, %r817, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r818, %r773, 64;
	mul.wide.u32 	%rd83, %r818, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r819, %r785, 64;
	mul.wide.u32 	%rd84, %r819, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r820, %r792, 64;
	mul.wide.u32 	%rd85, %r820, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r821, %r799, 64;
	mul.wide.u32 	%rd86, %r821, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r822, %r773, 128;
	mul.wide.u32 	%rd87, %r822, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r823, %r785, 128;
	mul.wide.u32 	%rd88, %r823, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r824, %r792, 128;
	mul.wide.u32 	%rd89, %r824, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r825, %r799, 128;
	mul.wide.u32 	%rd90, %r825, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r826, %r773, 192;
	mul.wide.u32 	%rd91, %r826, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r827, %r785, 192;
	mul.wide.u32 	%rd92, %r827, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r828, %r792, 192;
	mul.wide.u32 	%rd93, %r828, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r829, %r799, 192;
	mul.wide.u32 	%rd94, %r829, 4;
	add.s64 	%rd40, %rd62, %rd94;
	setp.lt.u32 	%p245, %r4, 16;
	setp.gt.u32 	%p274, %r1, 7;
	setp.lt.u32 	%p278, %r4, 24;
	mov.u32 	%r3762, %r124;
	mov.u32 	%r3763, %r124;
	mov.u32 	%r3764, %r124;
	mov.u32 	%r3765, %r124;
	bra.uni 	$L__BB0_150;
$L__BB0_196:                            // %L41269
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r257, %r124, 48;
	setp.ne.s32 	%p318, %r124, 16320;
	mov.u32 	%r124, %r257;
	@%p318 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_197;
$L__BB0_150:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_177 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r830, %r124, %r396;
	setp.lt.s32 	%p244, %r830, %r397;
	@%p244 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_197;
$L__BB0_151:                            // %oksrem665
                                        //   in Loop: Header=BB0_150 Depth=1
	mul.hi.u32 	%r1023, %r124, -1431655765;
	shr.u32 	%r1024, %r1023, 5;
	mul.lo.s32 	%r291, %r1024, 48;
	add.s32 	%r1025, %r291, %r1;
	cvt.u16.u32 	%rs63, %r1025;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 2;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -16384;
	sub.s16 	%rs68, %rs63, %rs67;
	mul.wide.s16 	%r1026, %rs68, 8192;
	or.b32  	%r1027, %r1026, %r91;
	or.b32  	%r1028, %r1027, %r92;
	or.b32  	%r1029, %r1028, %r93;
	add.s32 	%r1030, %r90, %r1029;
	shr.s32 	%r1031, %r1030, 31;
	shr.u32 	%r1032, %r1031, 5;
	add.s32 	%r1033, %r1030, %r1032;
	shr.s32 	%r1034, %r1033, 27;
	setp.lt.s32 	%p246, %r1030, 0;
	and.b32  	%r1035, %r1033, -134217728;
	setp.ne.s32 	%p247, %r1035, %r1030;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r1036, 1, 0, %p248;
	sub.s32 	%r1037, %r1036, %r1034;
	shl.b32 	%r1038, %r1037, 27;
	add.s32 	%r1039, %r1038, %r1030;
	mul.wide.s32 	%rd95, %r1039, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1040, %r1041, %r1042, %r1043}, [%rd96];
	or.b32  	%r1044, %r1026, %r94;
	or.b32  	%r1045, %r95, %r1044;
	add.s32 	%r1046, %r90, %r1045;
	shr.s32 	%r1047, %r1046, 31;
	shr.u32 	%r1048, %r1047, 5;
	add.s32 	%r1049, %r1046, %r1048;
	shr.u32 	%r1050, %r1049, 27;
	shr.u32 	%r1051, %r1046, 31;
	sub.s32 	%r1052, %r1051, %r1050;
	shl.b32 	%r1053, %r1052, 27;
	or.b32  	%r1054, %r1046, 1;
	add.s32 	%r1055, %r1054, %r1053;
	mul.wide.s32 	%rd97, %r1055, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1056, %r1057, %r1058, %r1059}, [%rd98+-4];
	add.s32 	%r1060, %r96, %r291;
	cvt.u16.u32 	%rs69, %r1060;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 2;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -16384;
	sub.s16 	%rs74, %rs69, %rs73;
	mul.wide.s16 	%r1061, %rs74, 8192;
	or.b32  	%r1062, %r1061, %r91;
	or.b32  	%r1063, %r1062, %r92;
	or.b32  	%r1064, %r1063, %r93;
	add.s32 	%r1065, %r90, %r1064;
	shr.s32 	%r1066, %r1065, 31;
	shr.u32 	%r1067, %r1066, 5;
	add.s32 	%r1068, %r1065, %r1067;
	shr.s32 	%r1069, %r1068, 27;
	setp.lt.s32 	%p249, %r1065, 0;
	and.b32  	%r1070, %r1068, -134217728;
	setp.ne.s32 	%p250, %r1070, %r1065;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r1071, 1, 0, %p251;
	sub.s32 	%r1072, %r1071, %r1069;
	shl.b32 	%r1073, %r1072, 27;
	add.s32 	%r1074, %r1073, %r1065;
	mul.wide.s32 	%rd99, %r1074, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1075, %r1076, %r1077, %r1078}, [%rd100];
	or.b32  	%r1079, %r1061, %r94;
	or.b32  	%r1080, %r95, %r1079;
	add.s32 	%r1081, %r90, %r1080;
	shr.s32 	%r1082, %r1081, 31;
	shr.u32 	%r1083, %r1082, 5;
	add.s32 	%r1084, %r1081, %r1083;
	shr.u32 	%r1085, %r1084, 27;
	shr.u32 	%r1086, %r1081, 31;
	sub.s32 	%r1087, %r1086, %r1085;
	shl.b32 	%r1088, %r1087, 27;
	or.b32  	%r1089, %r1081, 1;
	add.s32 	%r1090, %r1089, %r1088;
	mul.wide.s32 	%rd101, %r1090, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1091, %r1092, %r1093, %r1094}, [%rd102+-4];
	selp.b32 	%r1095, %r1042, %r1040, %p245;
	shfl.sync.bfly.b32	%r1096, %r1095, 16, 31, -1;
	selp.b32 	%r833, %r1040, %r1096, %p245;
	selp.b32 	%r838, %r1096, %r1042, %p245;
	selp.b32 	%r1097, %r1043, %r1041, %p245;
	shfl.sync.bfly.b32	%r1098, %r1097, 16, 31, -1;
	selp.b32 	%r841, %r1041, %r1098, %p245;
	selp.b32 	%r846, %r1098, %r1043, %p245;
	selp.b32 	%r1099, %r1058, %r1056, %p245;
	shfl.sync.bfly.b32	%r1100, %r1099, 16, 31, -1;
	selp.b32 	%r849, %r1056, %r1100, %p245;
	selp.b32 	%r854, %r1100, %r1058, %p245;
	selp.b32 	%r1101, %r1059, %r1057, %p245;
	shfl.sync.bfly.b32	%r1102, %r1101, 16, 31, -1;
	selp.b32 	%r857, %r1057, %r1102, %p245;
	selp.b32 	%r862, %r1102, %r1059, %p245;
	selp.b32 	%r1103, %r1077, %r1075, %p245;
	shfl.sync.bfly.b32	%r1104, %r1103, 16, 31, -1;
	selp.b32 	%r865, %r1075, %r1104, %p245;
	selp.b32 	%r870, %r1104, %r1077, %p245;
	selp.b32 	%r1105, %r1078, %r1076, %p245;
	shfl.sync.bfly.b32	%r1106, %r1105, 16, 31, -1;
	selp.b32 	%r873, %r1076, %r1106, %p245;
	selp.b32 	%r878, %r1106, %r1078, %p245;
	selp.b32 	%r1107, %r1093, %r1091, %p245;
	shfl.sync.bfly.b32	%r1108, %r1107, 16, 31, -1;
	selp.b32 	%r881, %r1091, %r1108, %p245;
	selp.b32 	%r886, %r1108, %r1093, %p245;
	selp.b32 	%r1109, %r1094, %r1092, %p245;
	shfl.sync.bfly.b32	%r1110, %r1109, 16, 31, -1;
	selp.b32 	%r889, %r1092, %r1110, %p245;
	selp.b32 	%r894, %r1110, %r1094, %p245;
	shl.b32 	%r834, %r838, 4;
	mov.u32 	%r832, 252645135;
	// begin inline asm
	lop3.b32 %r896, %r832, %r833, %r834, 202;
	// end inline asm
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r912, %r832, %r837, %r838, 202;
	// end inline asm
	shl.b32 	%r842, %r846, 4;
	// begin inline asm
	lop3.b32 %r904, %r832, %r841, %r842, 202;
	// end inline asm
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r920, %r832, %r845, %r846, 202;
	// end inline asm
	shl.b32 	%r850, %r854, 4;
	// begin inline asm
	lop3.b32 %r928, %r832, %r849, %r850, 202;
	// end inline asm
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r944, %r832, %r853, %r854, 202;
	// end inline asm
	shl.b32 	%r858, %r862, 4;
	// begin inline asm
	lop3.b32 %r936, %r832, %r857, %r858, 202;
	// end inline asm
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r952, %r832, %r861, %r862, 202;
	// end inline asm
	shl.b32 	%r866, %r870, 4;
	// begin inline asm
	lop3.b32 %r897, %r832, %r865, %r866, 202;
	// end inline asm
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r913, %r832, %r869, %r870, 202;
	// end inline asm
	shl.b32 	%r874, %r878, 4;
	// begin inline asm
	lop3.b32 %r905, %r832, %r873, %r874, 202;
	// end inline asm
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r921, %r832, %r877, %r878, 202;
	// end inline asm
	shl.b32 	%r882, %r886, 4;
	// begin inline asm
	lop3.b32 %r929, %r832, %r881, %r882, 202;
	// end inline asm
	shr.u32 	%r885, %r881, 4;
	// begin inline asm
	lop3.b32 %r945, %r832, %r885, %r886, 202;
	// end inline asm
	shl.b32 	%r890, %r894, 4;
	// begin inline asm
	lop3.b32 %r937, %r832, %r889, %r890, 202;
	// end inline asm
	shr.u32 	%r893, %r889, 4;
	// begin inline asm
	lop3.b32 %r953, %r832, %r893, %r894, 202;
	// end inline asm
	mov.u32 	%r898, 25152;
	// begin inline asm
	prmt.b32 %r960, %r896, %r897, %r898;
	// end inline asm
	mov.u32 	%r902, 29521;
	// begin inline asm
	prmt.b32 %r992, %r896, %r897, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r968, %r904, %r905, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1000, %r904, %r905, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r912, %r913, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r912, %r913, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r920, %r921, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r920, %r921, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r976, %r928, %r929, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1008, %r928, %r929, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r984, %r936, %r937, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1016, %r936, %r937, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r944, %r945, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1009, %r944, %r945, %r902;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r952, %r953, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1017, %r952, %r953, %r902;
	// end inline asm
	mov.u32 	%r1018, 21520;
	// begin inline asm
	prmt.b32 %r959, %r960, %r961, %r1018;
	// end inline asm
	mov.u32 	%r1022, 30258;
	// begin inline asm
	prmt.b32 %r963, %r960, %r961, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r968, %r969, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r968, %r969, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r976, %r977, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r976, %r977, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r984, %r985, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r984, %r985, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r992, %r993, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r992, %r993, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r1000, %r1001, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r1000, %r1001, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1007, %r1008, %r1009, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1011, %r1008, %r1009, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1015, %r1016, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1019, %r1016, %r1017, %r1022;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1111, %rs80;
	add.s32 	%r1112, %r97, %r1111;
	mul.wide.s32 	%rd103, %r1112, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r959;
	add.s32 	%r1113, %r1112, 128;
	mul.wide.u32 	%rd106, %r1113, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r967;
	add.s32 	%r1114, %r1112, 64;
	mul.wide.u32 	%rd108, %r1114, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r963;
	add.s32 	%r1115, %r1112, 192;
	mul.wide.u32 	%rd110, %r1115, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r971;
	add.s32 	%r1116, %r98, %r1111;
	mul.wide.u32 	%rd112, %r1116, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r975;
	add.s32 	%r1117, %r1116, 128;
	mul.wide.u32 	%rd114, %r1117, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r983;
	add.s32 	%r1118, %r1116, 64;
	mul.wide.u32 	%rd116, %r1118, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r979;
	add.s32 	%r1119, %r1116, 192;
	mul.wide.u32 	%rd118, %r1119, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r987;
	add.s32 	%r1120, %r1112, 32;
	mul.wide.u32 	%rd120, %r1120, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r991;
	add.s32 	%r1121, %r1112, 160;
	mul.wide.u32 	%rd122, %r1121, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r999;
	add.s32 	%r1122, %r1112, 96;
	mul.wide.u32 	%rd124, %r1122, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r995;
	add.s32 	%r1123, %r1112, 224;
	mul.wide.u32 	%rd126, %r1123, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r1003;
	add.s32 	%r1124, %r1116, 32;
	mul.wide.u32 	%rd128, %r1124, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r1007;
	add.s32 	%r1125, %r1116, 160;
	mul.wide.u32 	%rd130, %r1125, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r1015;
	add.s32 	%r1126, %r1116, 96;
	mul.wide.u32 	%rd132, %r1126, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r1011;
	add.s32 	%r1127, %r1116, 224;
	mul.wide.u32 	%rd134, %r1127, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1019;
	bar.sync 	0;
	add.s32 	%r1128, %r291, %r99;
	cvt.u16.u32 	%rs81, %r1128;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r292, %rs87;
	add.s32 	%r1129, %r100, %r292;
	mul.wide.s32 	%rd136, %r1129, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r293, [%rd137];
	add.s32 	%r1130, %r101, %r292;
	mul.wide.u32 	%rd138, %r1130, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r294, [%rd139];
	add.s32 	%r1131, %r102, %r292;
	mul.wide.u32 	%rd140, %r1131, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r295, [%rd141];
	add.s32 	%r1132, %r103, %r292;
	mul.wide.u32 	%rd142, %r1132, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r296, [%rd143];
	add.s32 	%r1133, %r104, %r292;
	mul.wide.u32 	%rd144, %r1133, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r297, [%rd145];
	add.s32 	%r1134, %r105, %r292;
	mul.wide.u32 	%rd146, %r1134, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r298, [%rd147];
	add.s32 	%r1135, %r106, %r292;
	mul.wide.u32 	%rd148, %r1135, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r299, [%rd149];
	add.s32 	%r1136, %r107, %r292;
	mul.wide.u32 	%rd150, %r1136, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r300, [%rd151];
	add.s32 	%r1137, %r108, %r292;
	mul.wide.u32 	%rd152, %r1137, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r301, [%rd153];
	add.s32 	%r1138, %r109, %r292;
	mul.wide.u32 	%rd154, %r1138, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r302, [%rd155];
	add.s32 	%r1139, %r110, %r292;
	mul.wide.u32 	%rd156, %r1139, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r303, [%rd157];
	add.s32 	%r1140, %r111, %r292;
	mul.wide.u32 	%rd158, %r1140, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r304, [%rd159];
	add.s32 	%r1141, %r112, %r292;
	mul.wide.u32 	%rd160, %r1141, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r305, [%rd161];
	add.s32 	%r1142, %r113, %r292;
	mul.wide.u32 	%rd162, %r1142, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r306, [%rd163];
	add.s32 	%r1143, %r114, %r292;
	mul.wide.u32 	%rd164, %r1143, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r307, [%rd165];
	add.s32 	%r1144, %r115, %r292;
	mul.wide.u32 	%rd166, %r1144, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r308, [%rd167];
	add.s32 	%r1145, %r116, %r292;
	mul.wide.u32 	%rd168, %r1145, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r309, [%rd169];
	add.s32 	%r1146, %r117, %r292;
	mul.wide.u32 	%rd170, %r1146, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r310, [%rd171];
	add.s32 	%r1147, %r118, %r292;
	mul.wide.u32 	%rd172, %r1147, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r311, [%rd173];
	add.s32 	%r1148, %r119, %r292;
	mul.wide.u32 	%rd174, %r1148, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r312, [%rd175];
	add.s32 	%r1149, %r120, %r292;
	mul.wide.u32 	%rd176, %r1149, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r313, [%rd177];
	add.s32 	%r1150, %r121, %r292;
	mul.wide.s32 	%rd178, %r1150, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r314, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r315, %r284, 0, 31, -1;
	shfl.sync.idx.b32	%r316, %r284, 1, 31, -1;
	shfl.sync.idx.b32	%r317, %r284, 2, 31, -1;
	shfl.sync.idx.b32	%r318, %r284, 3, 31, -1;
	shfl.sync.idx.b32	%r319, %r284, 4, 31, -1;
	shfl.sync.idx.b32	%r320, %r284, 5, 31, -1;
	shfl.sync.idx.b32	%r321, %r284, 6, 31, -1;
	shfl.sync.idx.b32	%r322, %r284, 7, 31, -1;
	shfl.sync.idx.b32	%r323, %r284, 8, 31, -1;
	shfl.sync.idx.b32	%r324, %r284, 9, 31, -1;
	shfl.sync.idx.b32	%r325, %r284, 10, 31, -1;
	shfl.sync.idx.b32	%r326, %r284, 11, 31, -1;
	shfl.sync.idx.b32	%r327, %r284, 12, 31, -1;
	shfl.sync.idx.b32	%r328, %r284, 13, 31, -1;
	shfl.sync.idx.b32	%r329, %r284, 14, 31, -1;
	shfl.sync.idx.b32	%r330, %r284, 15, 31, -1;
	shfl.sync.idx.b32	%r331, %r284, 16, 31, -1;
	shfl.sync.idx.b32	%r332, %r284, 17, 31, -1;
	shfl.sync.idx.b32	%r333, %r284, 18, 31, -1;
	shfl.sync.idx.b32	%r334, %r284, 19, 31, -1;
	shfl.sync.idx.b32	%r335, %r284, 20, 31, -1;
	shfl.sync.idx.b32	%r336, %r284, 21, 31, -1;
	shfl.sync.idx.b32	%r337, %r284, 22, 31, -1;
	shfl.sync.idx.b32	%r338, %r284, 23, 31, -1;
	setp.eq.s32 	%p252, %r315, 999999999;
	@%p252 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem3332
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1151, %r315, %r292;
	mul.wide.s32 	%rd180, %r1151, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r293;
	setp.eq.s32 	%p253, %r316, 999999999;
	@%p253 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem3400
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1152, %r316, %r292;
	mul.wide.s32 	%rd183, %r1152, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r294;
	setp.eq.s32 	%p254, %r317, 999999999;
	@%p254 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem3468
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1153, %r317, %r292;
	mul.wide.s32 	%rd186, %r1153, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r295;
	setp.eq.s32 	%p255, %r318, 999999999;
	@%p255 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem3536
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1154, %r318, %r292;
	mul.wide.s32 	%rd189, %r1154, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r296;
	setp.eq.s32 	%p256, %r319, 999999999;
	@%p256 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem3604
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1155, %r319, %r292;
	mul.wide.s32 	%rd192, %r1155, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r297;
	setp.eq.s32 	%p257, %r320, 999999999;
	@%p257 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem3672
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1156, %r320, %r292;
	mul.wide.s32 	%rd195, %r1156, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r298;
	setp.eq.s32 	%p258, %r321, 999999999;
	@%p258 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3740
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1157, %r321, %r292;
	mul.wide.s32 	%rd198, %r1157, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r299;
	setp.eq.s32 	%p259, %r322, 999999999;
	@%p259 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3808
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1158, %r322, %r292;
	mul.wide.s32 	%rd201, %r1158, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r300;
	setp.eq.s32 	%p260, %r323, 999999999;
	@%p260 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3876
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1159, %r323, %r292;
	mul.wide.s32 	%rd204, %r1159, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r301;
	setp.eq.s32 	%p261, %r324, 999999999;
	@%p261 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3944
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1160, %r324, %r292;
	mul.wide.s32 	%rd207, %r1160, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r302;
	setp.eq.s32 	%p262, %r325, 999999999;
	@%p262 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem4012
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1161, %r325, %r292;
	mul.wide.s32 	%rd210, %r1161, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r303;
	setp.eq.s32 	%p263, %r326, 999999999;
	@%p263 bra 	$L__BB0_163;
// %bb.237:                             // %oksrem4080
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1162, %r326, %r292;
	mul.wide.s32 	%rd213, %r1162, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r304;
	setp.eq.s32 	%p264, %r327, 999999999;
	@%p264 bra 	$L__BB0_164;
// %bb.238:                             // %oksrem4148
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1163, %r327, %r292;
	mul.wide.s32 	%rd216, %r1163, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r305;
	setp.eq.s32 	%p265, %r328, 999999999;
	@%p265 bra 	$L__BB0_165;
// %bb.239:                             // %oksrem4216
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1164, %r328, %r292;
	mul.wide.s32 	%rd219, %r1164, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r306;
	setp.eq.s32 	%p266, %r329, 999999999;
	@%p266 bra 	$L__BB0_166;
// %bb.240:                             // %oksrem4284
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1165, %r329, %r292;
	mul.wide.s32 	%rd222, %r1165, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r307;
	setp.eq.s32 	%p267, %r330, 999999999;
	@%p267 bra 	$L__BB0_167;
// %bb.241:                             // %oksrem4352
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1166, %r330, %r292;
	mul.wide.s32 	%rd225, %r1166, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r308;
	setp.eq.s32 	%p268, %r331, 999999999;
	@%p268 bra 	$L__BB0_168;
// %bb.242:                             // %oksrem4420
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1167, %r331, %r292;
	mul.wide.s32 	%rd228, %r1167, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r309;
	setp.eq.s32 	%p269, %r332, 999999999;
	@%p269 bra 	$L__BB0_169;
// %bb.243:                             // %oksrem4488
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1168, %r332, %r292;
	mul.wide.s32 	%rd231, %r1168, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r310;
	setp.eq.s32 	%p270, %r333, 999999999;
	@%p270 bra 	$L__BB0_170;
// %bb.244:                             // %oksrem4556
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1169, %r333, %r292;
	mul.wide.s32 	%rd234, %r1169, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r311;
	setp.eq.s32 	%p271, %r334, 999999999;
	@%p271 bra 	$L__BB0_171;
// %bb.245:                             // %oksrem4624
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1170, %r334, %r292;
	mul.wide.s32 	%rd237, %r1170, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r312;
	setp.eq.s32 	%p272, %r335, 999999999;
	@%p272 bra 	$L__BB0_172;
// %bb.246:                             // %oksrem4692
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1171, %r335, %r292;
	mul.wide.s32 	%rd240, %r1171, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r313;
	setp.eq.s32 	%p273, %r336, 999999999;
	@%p273 bra 	$L__BB0_173;
// %bb.247:                             // %oksrem4761
                                        //   in Loop: Header=BB0_150 Depth=1
	selp.b32 	%r1172, 0, %r314, %p274;
	add.s32 	%r1173, %r336, %r292;
	mul.wide.s32 	%rd243, %r1173, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1172;
	setp.eq.s32 	%p275, %r337, 999999999;
	@%p275 bra 	$L__BB0_174;
// %bb.248:                             // %oksrem4829
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1174, %r337, %r292;
	mul.wide.s32 	%rd246, %r1174, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r3737, 0;
	st.shared.u32 	[%rd248], %r3737;
	setp.eq.s32 	%p276, %r338, 999999999;
	@%p276 bra 	$L__BB0_175;
// %bb.249:                             // %oksrem4896
                                        //   in Loop: Header=BB0_150 Depth=1
	add.s32 	%r1177, %r338, %r292;
	mul.wide.s32 	%rd249, %r1177, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r3737;
	bar.sync 	0;
	mov.u32 	%r3738, %r3737;
	mov.u32 	%r3739, %r3737;
	mov.u32 	%r3740, %r3737;
	mov.u32 	%r3741, %r3737;
	mov.u32 	%r3742, %r3737;
	mov.u32 	%r3743, %r3737;
	mov.u32 	%r3744, %r3737;
	mov.u32 	%r3745, %r3737;
	mov.u32 	%r3746, %r3737;
	mov.u32 	%r3747, %r3737;
	mov.u32 	%r3748, %r3737;
	mov.u32 	%r3749, %r3737;
	mov.u32 	%r3750, %r3737;
	mov.u32 	%r3751, %r3737;
	mov.u32 	%r3752, %r3737;
	mov.u32 	%r3753, %r3737;
	mov.u32 	%r3754, %r3737;
	mov.u32 	%r3755, %r3737;
	mov.u32 	%r3756, %r3737;
	mov.u32 	%r3757, %r3737;
	mov.u32 	%r3758, %r3737;
	mov.u32 	%r3759, %r3737;
	mov.u32 	%r3760, %r3737;
	@%p92 bra 	$L__BB0_176;
// %bb.250:                             // %oksrem4934
                                        //   in Loop: Header=BB0_150 Depth=1
	cvt.u16.u32 	%rs88, %r291;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1178, %rs94;
	mul.wide.s32 	%rd252, %r1178, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3737, [%rd253];
	ld.shared.u32 	%r3738, [%rd16+4];
	ld.shared.u32 	%r3739, [%rd16+8];
	ld.shared.u32 	%r3740, [%rd16+12];
	ld.shared.u32 	%r3741, [%rd16+16];
	ld.shared.u32 	%r3742, [%rd16+20];
	ld.shared.u32 	%r3743, [%rd16+24];
	ld.shared.u32 	%r3744, [%rd16+28];
	ld.shared.u32 	%r3745, [%rd16+32];
	ld.shared.u32 	%r3746, [%rd16+36];
	ld.shared.u32 	%r3747, [%rd16+40];
	ld.shared.u32 	%r3748, [%rd16+44];
	ld.shared.u32 	%r3749, [%rd16+48];
	ld.shared.u32 	%r3750, [%rd16+52];
	ld.shared.u32 	%r3751, [%rd16+56];
	ld.shared.u32 	%r3752, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1179, %rs101;
	mul.wide.s32 	%rd254, %r1179, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3753, [%rd255];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1180, %rs108;
	mul.wide.s32 	%rd256, %r1180, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3754, [%rd257];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1181, %rs115;
	mul.wide.s32 	%rd258, %r1181, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3755, [%rd259];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1182, %rs122;
	mul.wide.s32 	%rd260, %r1182, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3756, [%rd261];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1183, %rs129;
	mul.wide.s32 	%rd262, %r1183, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3757, [%rd263];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1184, %rs136;
	mul.wide.s32 	%rd264, %r1184, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3758, [%rd265];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1185, %rs143;
	mul.wide.s32 	%rd266, %r1185, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3759, [%rd267];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1186, %rs150;
	mul.wide.s32 	%rd268, %r1186, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3760, [%rd269];
$L__BB0_176:                            // %L13906
                                        //   in Loop: Header=BB0_150 Depth=1
	bar.sync 	0;
	mov.u32 	%r3761, 12;
	bra.uni 	$L__BB0_177;
$L__BB0_184:                            // %L27578
                                        //   in Loop: Header=BB0_177 Depth=2
	add.s32 	%r3763, %r3763, 1;
	mov.u32 	%r3762, 0;
	mov.u32 	%r3764, %r3762;
	mov.u32 	%r3765, %r3762;
$L__BB0_185:                            // %L27579
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	add.s32 	%r3761, %r3761, -4;
	setp.ne.s32 	%p297, %r3761, -12;
	@%p297 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_186;
$L__BB0_177:                            // %L13932
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r3761, 12;
	selp.b32 	%r1724, %r3737, 0, %p279;
	setp.eq.s32 	%p280, %r3761, 8;
	selp.b32 	%r1725, %r3741, %r1724, %p280;
	setp.eq.s32 	%p281, %r3761, 4;
	selp.b32 	%r1726, %r3745, %r1725, %p281;
	setp.eq.s32 	%p282, %r3761, 0;
	selp.b32 	%r1727, %r3749, %r1726, %p282;
	setp.eq.s32 	%p283, %r3761, -4;
	selp.b32 	%r1728, %r3753, %r1727, %p283;
	setp.eq.s32 	%p284, %r3761, -8;
	selp.b32 	%r1192, %r3757, %r1728, %p284;
	selp.b32 	%r1729, %r3738, 0, %p279;
	selp.b32 	%r1730, %r3742, %r1729, %p280;
	selp.b32 	%r1731, %r3746, %r1730, %p281;
	selp.b32 	%r1732, %r3750, %r1731, %p282;
	selp.b32 	%r1733, %r3754, %r1732, %p283;
	selp.b32 	%r1238, %r3758, %r1733, %p284;
	selp.b32 	%r1734, %r3739, 0, %p279;
	selp.b32 	%r1735, %r3743, %r1734, %p280;
	selp.b32 	%r1736, %r3747, %r1735, %p281;
	selp.b32 	%r1737, %r3751, %r1736, %p282;
	selp.b32 	%r1738, %r3755, %r1737, %p283;
	selp.b32 	%r1284, %r3759, %r1738, %p284;
	selp.b32 	%r1739, %r3740, 0, %p279;
	selp.b32 	%r1740, %r3744, %r1739, %p280;
	selp.b32 	%r1741, %r3748, %r1740, %p281;
	selp.b32 	%r1742, %r3752, %r1741, %p282;
	selp.b32 	%r1743, %r3756, %r1742, %p283;
	selp.b32 	%r1330, %r3760, %r1743, %p284;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1193, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1204, {%rs190, %rs190};
	// end inline asm
	mov.u32 	%r1329, 983055;
	// begin inline asm
	lop3.b32 %r1190, %r1329, %r1192, %r1193, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1194, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1195, %r1193, %r1194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1198, %r1190, %r1195;
	// end inline asm
	mov.u32 	%r1340, 15728880;
	// begin inline asm
	lop3.b32 %r1201, %r1340, %r1192, %r1204, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1205, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1206, %r1204, %r1205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1209, %r1201, %r1206;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1236, %r1329, %r1238, %r1239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1241, %r1239, %r1240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1244, %r1236, %r1241;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1247, %r1340, %r1238, %r1250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1251, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1252, %r1250, %r1251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1255, %r1247, %r1252;
	// end inline asm
	// begin inline asm
	mov.b32 %r1285, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1282, %r1329, %r1284, %r1285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1286, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1287, %r1285, %r1286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1290, %r1282, %r1287;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1293, %r1340, %r1284, %r1296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1297, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1298, %r1296, %r1297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1301, %r1293, %r1298;
	// end inline asm
	// begin inline asm
	mov.b32 %r1331, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1328, %r1329, %r1330, %r1331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1332, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1333, %r1331, %r1332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1336, %r1328, %r1333;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1339, %r1340, %r1330, %r1342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1343, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1344, %r1342, %r1343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1347, %r1339, %r1344;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1209;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1198;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1255;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1244;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1301;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1290;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1347;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1390, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1336;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1393, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1659, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1459, %r1456}, {%r427, %r430}, {%r1372}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1468, %r1465}, {%r427, %r430}, {%r1375}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1477, %r1474}, {%r427, %r430}, {%r1378}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1486, %r1483}, {%r427, %r430}, {%r1381}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1495, %r1492}, {%r427, %r430}, {%r1384}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1504, %r1501}, {%r427, %r430}, {%r1387}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1513, %r1510}, {%r427, %r430}, {%r1390}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1522, %r1519}, {%r427, %r430}, {%r1393}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1452, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r1452, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r479, %r1459, %r1454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1461, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r1461, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r479, %r1468, %r1463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1470, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r1470, %r1474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r479, %r1477, %r1472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1479, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r1479, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r479, %r1486, %r1481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1488, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r1488, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r479, %r1495, %r1490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1497, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r1497, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r479, %r1504, %r1499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1506, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1508, %r1506, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1511, %r479, %r1513, %r1508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1515, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r1515, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r479, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r482, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r479, %r1456, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r482, %r1468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r479, %r1465, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r482, %r1477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r479, %r1474, %r1538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r482, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r479, %r1483, %r1545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r482, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r479, %r1492, %r1552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1559, %r482, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r479, %r1501, %r1559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r482, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r479, %r1510, %r1566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1573, %r482, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r479, %r1519, %r1573;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1661, %r1662}, {%r523, %r529, %r526, %r532}, {%r1457, %r1527}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1669, %r1670}, {%r523, %r529, %r526, %r532}, {%r1466, %r1534}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1677, %r1678}, {%r523, %r529, %r526, %r532}, {%r1475, %r1541}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1686}, {%r523, %r529, %r526, %r532}, {%r1484, %r1548}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1693, %r1694}, {%r523, %r529, %r526, %r532}, {%r1493, %r1555}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1702}, {%r523, %r529, %r526, %r532}, {%r1502, %r1562}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1709, %r1710}, {%r523, %r529, %r526, %r532}, {%r1511, %r1569}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1717, %r1718}, {%r523, %r529, %r526, %r532}, {%r1520, %r1576}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1660, %r1661, %r1662, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1664, %r1661, %r1662, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1668, %r1669, %r1670, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1672, %r1669, %r1670, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1676, %r1677, %r1678, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1680, %r1677, %r1678, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1684, %r1685, %r1686, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1688, %r1685, %r1686, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1692, %r1693, %r1694, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1696, %r1693, %r1694, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1700, %r1701, %r1702, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1704, %r1701, %r1702, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1708, %r1709, %r1710, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1712, %r1709, %r1710, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1716, %r1717, %r1718, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1720, %r1717, %r1718, %r1022;
	// end inline asm
	st.shared.u32 	[%rd7], %r1660;
	st.shared.u32 	[%rd8], %r1664;
	st.shared.u32 	[%rd9], %r1668;
	st.shared.u32 	[%rd10], %r1672;
	st.shared.u32 	[%rd17], %r1676;
	st.shared.u32 	[%rd18], %r1680;
	st.shared.u32 	[%rd19], %r1684;
	st.shared.u32 	[%rd20], %r1688;
	st.shared.u32 	[%rd21], %r1692;
	st.shared.u32 	[%rd22], %r1696;
	st.shared.u32 	[%rd23], %r1700;
	st.shared.u32 	[%rd24], %r1704;
	st.shared.u32 	[%rd25], %r1708;
	st.shared.u32 	[%rd26], %r1712;
	st.shared.u32 	[%rd27], %r1716;
	st.shared.u32 	[%rd28], %r1720;
	@%p278 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_178;
$L__BB0_251:                            // %pass8557
                                        //   in Loop: Header=BB0_177 Depth=2
	st.shared.u32 	[%rd7], %r1660;
	st.shared.u32 	[%rd8], %r1664;
	st.shared.u32 	[%rd9], %r1668;
	st.shared.u32 	[%rd10], %r1672;
	st.shared.u32 	[%rd17], %r1676;
	st.shared.u32 	[%rd18], %r1680;
	st.shared.u32 	[%rd19], %r1684;
	st.shared.u32 	[%rd20], %r1688;
	st.shared.u32 	[%rd21], %r1692;
	st.shared.u32 	[%rd22], %r1696;
	st.shared.u32 	[%rd23], %r1700;
	st.shared.u32 	[%rd24], %r1704;
	st.shared.u32 	[%rd25], %r1708;
	st.shared.u32 	[%rd26], %r1712;
	st.shared.u32 	[%rd27], %r1716;
	st.shared.u32 	[%rd28], %r1720;
$L__BB0_178:                            // %L22314
                                        //   in Loop: Header=BB0_177 Depth=2
	bar.sync 	0;
	mov.u32 	%r3766, %r1659;
	mov.u32 	%r3767, %r1659;
	mov.u32 	%r3768, %r1659;
	mov.u32 	%r3769, %r1659;
	@%p278 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_179;
$L__BB0_252:                            // %pass10652
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3766, [%rd11];
	ld.shared.u32 	%r3767, [%rd12];
	ld.shared.u32 	%r3768, [%rd13];
	ld.shared.u32 	%r3769, [%rd14];
$L__BB0_179:                            // %L23389
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1780, %r1777}, {%r541, %r544}, {%r3766}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1789, %r1786}, {%r541, %r544}, {%r3767}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1798, %r1795}, {%r541, %r544}, {%r3768}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1807, %r1804}, {%r541, %r544}, {%r3769}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1773, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r1773, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r593, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1782, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r1782, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r593, %r1789, %r1784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1791, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r1791, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r593, %r1798, %r1793;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1800, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1800, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r593, %r1807, %r1802;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r596, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r593, %r1777, %r1809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r596, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r593, %r1786, %r1816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1823, %r596, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r593, %r1795, %r1823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1830, %r596, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r593, %r1804, %r1830;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1878, %r1881}, {%r637, %r643, %r640, %r646}, {%r1778, %r1812}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1897, %r1900}, {%r637, %r643, %r640, %r646}, {%r1787, %r1819}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1885, %r1889}, {%r637, %r643, %r640, %r646}, {%r1796, %r1826}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1908}, {%r637, %r643, %r640, %r646}, {%r1805, %r1833}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r1878, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1881, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1885, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1889, %r1889, %r1884;
	// end inline asm
	mov.u32 	%r1912, 357897557;
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1912, %r1888, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1897, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r1900, %r1900, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r1904, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r1908, %r1908, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r1912, %r1907, %r3764;
	// end inline asm
	mov.u32 	%r3770, %r1659;
	mov.u32 	%r3771, %r1659;
	mov.u32 	%r3772, %r1659;
	mov.u32 	%r3773, %r1659;
	@%p278 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_180;
$L__BB0_253:                            // %pass11257
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3770, [%rd29];
	ld.shared.u32 	%r3771, [%rd30];
	ld.shared.u32 	%r3772, [%rd31];
	ld.shared.u32 	%r3773, [%rd32];
$L__BB0_180:                            // %L24608
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1951, %r1948}, {%r541, %r544}, {%r3770}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1960, %r1957}, {%r541, %r544}, {%r3771}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1969, %r1966}, {%r541, %r544}, {%r3772}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1978, %r1975}, {%r541, %r544}, {%r3773}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1944, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r1944, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r593, %r1951, %r1946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1953, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r1953, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r593, %r1960, %r1955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1962, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r1962, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r593, %r1969, %r1964;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1971, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1971, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r593, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r596, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r593, %r1948, %r1980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r596, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r593, %r1957, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r596, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r593, %r1966, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r596, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r593, %r1975, %r2001;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2049, %r2052}, {%r637, %r643, %r640, %r646}, {%r1949, %r1983}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2068, %r2071}, {%r637, %r643, %r640, %r646}, {%r1958, %r1990}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2056, %r2060}, {%r637, %r643, %r640, %r646}, {%r1967, %r1997}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2075, %r2079}, {%r637, %r643, %r640, %r646}, {%r1976, %r2004}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2048, %r2049, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2051, %r2052, %r2052, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r2056, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r2060, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r1912, %r2059, %r1892;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r2068, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r2071, %r2071, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r2075, %r2075, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r2079, %r2079, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r1912, %r2078, %r1911;
	// end inline asm
	mov.u32 	%r3774, %r1659;
	mov.u32 	%r3775, %r1659;
	mov.u32 	%r3776, %r1659;
	mov.u32 	%r3777, %r1659;
	@%p278 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_181;
$L__BB0_254:                            // %pass11862
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3774, [%rd33];
	ld.shared.u32 	%r3775, [%rd34];
	ld.shared.u32 	%r3776, [%rd35];
	ld.shared.u32 	%r3777, [%rd36];
$L__BB0_181:                            // %L25827
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2122, %r2119}, {%r541, %r544}, {%r3774}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2131, %r2128}, {%r541, %r544}, {%r3775}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2140, %r2137}, {%r541, %r544}, {%r3776}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2149, %r2146}, {%r541, %r544}, {%r3777}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2115, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r2115, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r593, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2124, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2124, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r593, %r2131, %r2126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2133, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r2133, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r593, %r2140, %r2135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2142, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2142, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r593, %r2149, %r2144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r596, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r593, %r2119, %r2151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r596, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r593, %r2128, %r2158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r596, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r593, %r2137, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r596, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r593, %r2146, %r2172;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2220, %r2223}, {%r637, %r643, %r640, %r646}, {%r2120, %r2154}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2239, %r2242}, {%r637, %r643, %r640, %r646}, {%r2129, %r2161}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2227, %r2231}, {%r637, %r643, %r640, %r646}, {%r2138, %r2168}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2246, %r2250}, {%r637, %r643, %r640, %r646}, {%r2147, %r2175}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2220, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r2223, %r2223, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r2227, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r2231, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r1912, %r2230, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2239, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r2242, %r2242, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r2246, %r2246, %r2241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r2250, %r2250, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r1912, %r2249, %r2082;
	// end inline asm
	mov.u32 	%r3778, %r1659;
	mov.u32 	%r3779, %r1659;
	mov.u32 	%r3780, %r1659;
	mov.u32 	%r3781, %r1659;
	@%p278 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_182;
$L__BB0_255:                            // %pass12467
                                        //   in Loop: Header=BB0_177 Depth=2
	ld.shared.u32 	%r3778, [%rd37];
	ld.shared.u32 	%r3779, [%rd38];
	ld.shared.u32 	%r3780, [%rd39];
	ld.shared.u32 	%r3781, [%rd40];
$L__BB0_182:                            // %L27046
                                        //   in Loop: Header=BB0_177 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2293, %r2290}, {%r541, %r544}, {%r3778}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2302, %r2299}, {%r541, %r544}, {%r3779}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2311, %r2308}, {%r541, %r544}, {%r3780}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2320, %r2317}, {%r541, %r544}, {%r3781}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2286, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2288, %r2286, %r2290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2291, %r593, %r2293, %r2288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2295, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2297, %r2295, %r2299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2300, %r593, %r2302, %r2297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2304, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r2304, %r2308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r593, %r2311, %r2306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2313, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r2313, %r2317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2318, %r593, %r2320, %r2315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2322, %r596, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r593, %r2290, %r2322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r596, %r2302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r593, %r2299, %r2329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2336, %r596, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2339, %r593, %r2308, %r2336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2343, %r596, %r2320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2346, %r593, %r2317, %r2343;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2391, %r2394}, {%r637, %r643, %r640, %r646}, {%r2291, %r2325}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2410, %r2413}, {%r637, %r643, %r640, %r646}, {%r2300, %r2332}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2398, %r2402}, {%r637, %r643, %r640, %r646}, {%r2309, %r2339}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2417, %r2421}, {%r637, %r643, %r640, %r646}, {%r2318, %r2346}, {%r1659, %r1659};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2390, %r2391, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2393, %r2394, %r2394, %r2390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2397, %r2398, %r2398, %r2393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2401, %r2402, %r2402, %r2397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3765, %r1912, %r2401, %r2234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2409, %r2410, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2412, %r2413, %r2413, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2416, %r2417, %r2417, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2420, %r2421, %r2421, %r2416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3764, %r1912, %r2420, %r2253;
	// end inline asm
	add.s32 	%r3762, %r3762, 4;
	setp.eq.s32 	%p289, %r3762, 96;
	@%p289 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_185;
$L__BB0_183:                            // %pass12930
                                        //   in Loop: Header=BB0_177 Depth=2
	@%p92 bra 	$L__BB0_184;
// %bb.256:                             // %pass12940
                                        //   in Loop: Header=BB0_177 Depth=2
	mul.lo.s32 	%r2428, %r3763, 589824;
	add.s32 	%r2429, %r122, %r2428;
	cvt.s64.s32 	%rd270, %r2429;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p291, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p292, %rd276, %rd271;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd277, -1, 0, %p293;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3765;
	add.s32 	%r2430, %r123, %r2428;
	cvt.s64.s32 	%rd283, %r2430;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p294, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p295, %rd289, %rd284;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd290, -1, 0, %p296;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3764;
	bra.uni 	$L__BB0_184;
$L__BB0_186:                            // %L27604.preheader
                                        //   in Loop: Header=BB0_150 Depth=1
	mov.u32 	%r3786, 12;
	bra.uni 	$L__BB0_187;
$L__BB0_194:                            // %L41250
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r3763, %r3763, 1;
	mov.u32 	%r3762, 0;
	mov.u32 	%r3764, %r3762;
	mov.u32 	%r3765, %r3762;
$L__BB0_195:                            // %L41251
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	add.s32 	%r3786, %r3786, -4;
	setp.ne.s32 	%p317, %r3786, -12;
	@%p317 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_196;
$L__BB0_187:                            // %L27604
                                        //   Parent Loop BB0_150 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p299, %r3786, 12;
	selp.b32 	%r2969, %r3737, 0, %p299;
	setp.eq.s32 	%p300, %r3786, 8;
	selp.b32 	%r2970, %r3741, %r2969, %p300;
	setp.eq.s32 	%p301, %r3786, 4;
	selp.b32 	%r2971, %r3745, %r2970, %p301;
	setp.eq.s32 	%p302, %r3786, 0;
	selp.b32 	%r2972, %r3749, %r2971, %p302;
	setp.eq.s32 	%p303, %r3786, -4;
	selp.b32 	%r2973, %r3753, %r2972, %p303;
	setp.eq.s32 	%p304, %r3786, -8;
	selp.b32 	%r2974, %r3757, %r2973, %p304;
	selp.b32 	%r2975, %r3738, 0, %p299;
	selp.b32 	%r2976, %r3742, %r2975, %p300;
	selp.b32 	%r2977, %r3746, %r2976, %p301;
	selp.b32 	%r2978, %r3750, %r2977, %p302;
	selp.b32 	%r2979, %r3754, %r2978, %p303;
	selp.b32 	%r2980, %r3758, %r2979, %p304;
	selp.b32 	%r2981, %r3739, 0, %p299;
	selp.b32 	%r2982, %r3743, %r2981, %p300;
	selp.b32 	%r2983, %r3747, %r2982, %p301;
	selp.b32 	%r2984, %r3751, %r2983, %p302;
	selp.b32 	%r2985, %r3755, %r2984, %p303;
	selp.b32 	%r2986, %r3759, %r2985, %p304;
	selp.b32 	%r2987, %r3740, 0, %p299;
	selp.b32 	%r2988, %r3744, %r2987, %p300;
	selp.b32 	%r2989, %r3748, %r2988, %p301;
	selp.b32 	%r2990, %r3752, %r2989, %p302;
	selp.b32 	%r2991, %r3756, %r2990, %p303;
	selp.b32 	%r2992, %r3760, %r2991, %p304;
	// begin inline asm
	mov.b32 %r2460, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2471, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2459, %r2974, 8;
	// begin inline asm
	lop3.b32 %r2457, %r1329, %r2459, %r2460, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2462, %r2460, %r2461;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2465, %r2457, %r2462;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2468, %r1340, %r2459, %r2471, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2472, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2473, %r2471, %r2472;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2476, %r2468, %r2473;
	// end inline asm
	// begin inline asm
	mov.b32 %r2506, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2517, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2505, %r2980, 8;
	// begin inline asm
	lop3.b32 %r2503, %r1329, %r2505, %r2506, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2508, %r2506, %r2507;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2511, %r2503, %r2508;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2514, %r1340, %r2505, %r2517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2518, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2519, %r2517, %r2518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2522, %r2514, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r2552, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2563, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2551, %r2986, 8;
	// begin inline asm
	lop3.b32 %r2549, %r1329, %r2551, %r2552, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2554, %r2552, %r2553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2557, %r2549, %r2554;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2560, %r1340, %r2551, %r2563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2564, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2565, %r2563, %r2564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2568, %r2560, %r2565;
	// end inline asm
	// begin inline asm
	mov.b32 %r2598, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2609, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2597, %r2992, 8;
	// begin inline asm
	lop3.b32 %r2595, %r1329, %r2597, %r2598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2600, %r2598, %r2599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2603, %r2595, %r2600;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2606, %r1340, %r2597, %r2609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2610, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2611, %r2609, %r2610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2614, %r2606, %r2611;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2476;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2617, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2465;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2620, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2522;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2623, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2511;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2626, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2568;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2629, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2557;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2632, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2614;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2635, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2603;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2638, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2904, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2704, %r2701}, {%r427, %r430}, {%r2617}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2713, %r2710}, {%r427, %r430}, {%r2620}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2722, %r2719}, {%r427, %r430}, {%r2623}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2731, %r2728}, {%r427, %r430}, {%r2626}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r427, %r430}, {%r2629}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2749, %r2746}, {%r427, %r430}, {%r2632}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2758, %r2755}, {%r427, %r430}, {%r2635}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2767, %r2764}, {%r427, %r430}, {%r2638}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2697, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r2697, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r479, %r2704, %r2699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2706, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2706, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r479, %r2713, %r2708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2715, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2715, %r2719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r479, %r2722, %r2717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r479, %r2731, %r2726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r479, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2742, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r2742, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r479, %r2749, %r2744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2751, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r2751, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r479, %r2758, %r2753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2760, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2762, %r2760, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r479, %r2767, %r2762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r482, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r479, %r2701, %r2769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r482, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r479, %r2710, %r2776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r482, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r479, %r2719, %r2783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r482, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r479, %r2728, %r2790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r482, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r479, %r2737, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r482, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r479, %r2746, %r2804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r482, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r479, %r2755, %r2811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2818, %r482, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2821, %r479, %r2764, %r2818;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2906, %r2907}, {%r523, %r529, %r526, %r532}, {%r2702, %r2772}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2914, %r2915}, {%r523, %r529, %r526, %r532}, {%r2711, %r2779}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2922, %r2923}, {%r523, %r529, %r526, %r532}, {%r2720, %r2786}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2931}, {%r523, %r529, %r526, %r532}, {%r2729, %r2793}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2938, %r2939}, {%r523, %r529, %r526, %r532}, {%r2738, %r2800}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2947}, {%r523, %r529, %r526, %r532}, {%r2747, %r2807}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2955}, {%r523, %r529, %r526, %r532}, {%r2756, %r2814}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2963}, {%r523, %r529, %r526, %r532}, {%r2765, %r2821}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2905, %r2906, %r2907, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2909, %r2906, %r2907, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2913, %r2914, %r2915, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2917, %r2914, %r2915, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2921, %r2922, %r2923, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2925, %r2922, %r2923, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2929, %r2930, %r2931, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2933, %r2930, %r2931, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2937, %r2938, %r2939, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2941, %r2938, %r2939, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2945, %r2946, %r2947, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2949, %r2946, %r2947, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2953, %r2954, %r2955, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2957, %r2954, %r2955, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2961, %r2962, %r2963, %r1018;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2965, %r2962, %r2963, %r1022;
	// end inline asm
	st.shared.u32 	[%rd7], %r2905;
	st.shared.u32 	[%rd8], %r2909;
	st.shared.u32 	[%rd9], %r2913;
	st.shared.u32 	[%rd10], %r2917;
	st.shared.u32 	[%rd17], %r2921;
	st.shared.u32 	[%rd18], %r2925;
	st.shared.u32 	[%rd19], %r2929;
	st.shared.u32 	[%rd20], %r2933;
	st.shared.u32 	[%rd21], %r2937;
	st.shared.u32 	[%rd22], %r2941;
	st.shared.u32 	[%rd23], %r2945;
	st.shared.u32 	[%rd24], %r2949;
	st.shared.u32 	[%rd25], %r2953;
	st.shared.u32 	[%rd26], %r2957;
	st.shared.u32 	[%rd27], %r2961;
	st.shared.u32 	[%rd28], %r2965;
	@%p278 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_188;
$L__BB0_257:                            // %pass15365
                                        //   in Loop: Header=BB0_187 Depth=2
	st.shared.u32 	[%rd7], %r2905;
	st.shared.u32 	[%rd8], %r2909;
	st.shared.u32 	[%rd9], %r2913;
	st.shared.u32 	[%rd10], %r2917;
	st.shared.u32 	[%rd17], %r2921;
	st.shared.u32 	[%rd18], %r2925;
	st.shared.u32 	[%rd19], %r2929;
	st.shared.u32 	[%rd20], %r2933;
	st.shared.u32 	[%rd21], %r2937;
	st.shared.u32 	[%rd22], %r2941;
	st.shared.u32 	[%rd23], %r2945;
	st.shared.u32 	[%rd24], %r2949;
	st.shared.u32 	[%rd25], %r2953;
	st.shared.u32 	[%rd26], %r2957;
	st.shared.u32 	[%rd27], %r2961;
	st.shared.u32 	[%rd28], %r2965;
$L__BB0_188:                            // %L35986
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	mov.u32 	%r3791, %r2904;
	mov.u32 	%r3792, %r2904;
	mov.u32 	%r3793, %r2904;
	mov.u32 	%r3794, %r2904;
	@%p278 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_189;
$L__BB0_258:                            // %pass17460
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3794, [%rd11];
	ld.shared.u32 	%r3793, [%rd12];
	ld.shared.u32 	%r3792, [%rd13];
	ld.shared.u32 	%r3791, [%rd14];
$L__BB0_189:                            // %L37061
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3029, %r3026}, {%r541, %r544}, {%r3794}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3038, %r3035}, {%r541, %r544}, {%r3793}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3047, %r3044}, {%r541, %r544}, {%r3792}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3056, %r3053}, {%r541, %r544}, {%r3791}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3022, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r3022, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r593, %r3029, %r3024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3031, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r593, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3040, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3040, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r593, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3049, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3051, %r3049, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r593, %r3056, %r3051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3058, %r596, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r593, %r3026, %r3058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3065, %r596, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r593, %r3035, %r3065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r596, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r593, %r3044, %r3072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3079, %r596, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r593, %r3053, %r3079;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3127, %r3130}, {%r637, %r643, %r640, %r646}, {%r3027, %r3061}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3146, %r3149}, {%r637, %r643, %r640, %r646}, {%r3036, %r3068}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3134, %r3138}, {%r637, %r643, %r640, %r646}, {%r3045, %r3075}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3153, %r3157}, {%r637, %r643, %r640, %r646}, {%r3054, %r3082}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3126, %r3127, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r3130, %r3130, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r3134, %r3134, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r3138, %r3138, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r1912, %r3137, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r3146, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r3149, %r3149, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r3153, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r3157, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r1912, %r3156, %r3764;
	// end inline asm
	mov.u32 	%r3795, %r2904;
	mov.u32 	%r3796, %r2904;
	mov.u32 	%r3797, %r2904;
	mov.u32 	%r3798, %r2904;
	@%p278 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_190;
$L__BB0_259:                            // %pass18065
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3798, [%rd29];
	ld.shared.u32 	%r3797, [%rd30];
	ld.shared.u32 	%r3796, [%rd31];
	ld.shared.u32 	%r3795, [%rd32];
$L__BB0_190:                            // %L38280
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3200, %r3197}, {%r541, %r544}, {%r3798}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3209, %r3206}, {%r541, %r544}, {%r3797}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3218, %r3215}, {%r541, %r544}, {%r3796}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3227, %r3224}, {%r541, %r544}, {%r3795}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3193, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3195, %r3193, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r593, %r3200, %r3195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3202, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r3202, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r593, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3211, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3213, %r3211, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3216, %r593, %r3218, %r3213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3220, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3222, %r3220, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r593, %r3227, %r3222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r596, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r593, %r3197, %r3229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r596, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r593, %r3206, %r3236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r596, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r593, %r3215, %r3243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3250, %r596, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r593, %r3224, %r3250;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3298, %r3301}, {%r637, %r643, %r640, %r646}, {%r3198, %r3232}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3317, %r3320}, {%r637, %r643, %r640, %r646}, {%r3207, %r3239}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3305, %r3309}, {%r637, %r643, %r640, %r646}, {%r3216, %r3246}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3324, %r3328}, {%r637, %r643, %r640, %r646}, {%r3225, %r3253}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3298, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r3301, %r3301, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r3305, %r3305, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r3309, %r3309, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3312, %r1912, %r3308, %r3141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3316, %r3317, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r3320, %r3320, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r3324, %r3324, %r3319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r3328, %r3328, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r1912, %r3327, %r3160;
	// end inline asm
	mov.u32 	%r3799, %r2904;
	mov.u32 	%r3800, %r2904;
	mov.u32 	%r3801, %r2904;
	mov.u32 	%r3802, %r2904;
	@%p278 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_191;
$L__BB0_260:                            // %pass18670
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3802, [%rd33];
	ld.shared.u32 	%r3801, [%rd34];
	ld.shared.u32 	%r3800, [%rd35];
	ld.shared.u32 	%r3799, [%rd36];
$L__BB0_191:                            // %L39499
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3371, %r3368}, {%r541, %r544}, {%r3802}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3380, %r3377}, {%r541, %r544}, {%r3801}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3389, %r3386}, {%r541, %r544}, {%r3800}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3398, %r3395}, {%r541, %r544}, {%r3799}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3364, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3366, %r3364, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r593, %r3371, %r3366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3373, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3375, %r3373, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r593, %r3380, %r3375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3382, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3384, %r3382, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r593, %r3389, %r3384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3391, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3391, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r593, %r3398, %r3393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r596, %r3371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r593, %r3368, %r3400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r596, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r593, %r3377, %r3407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3414, %r596, %r3389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r593, %r3386, %r3414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3421, %r596, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3424, %r593, %r3395, %r3421;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3469, %r3472}, {%r637, %r643, %r640, %r646}, {%r3369, %r3403}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3488, %r3491}, {%r637, %r643, %r640, %r646}, {%r3378, %r3410}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3476, %r3480}, {%r637, %r643, %r640, %r646}, {%r3387, %r3417}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3495, %r3499}, {%r637, %r643, %r640, %r646}, {%r3396, %r3424}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3468, %r3469, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r3472, %r3472, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3475, %r3476, %r3476, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r3480, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3483, %r1912, %r3479, %r3312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3487, %r3488, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r3491, %r3491, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r3495, %r3495, %r3490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r3499, %r3499, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1912, %r3498, %r3331;
	// end inline asm
	mov.u32 	%r3803, %r2904;
	mov.u32 	%r3804, %r2904;
	mov.u32 	%r3805, %r2904;
	mov.u32 	%r3806, %r2904;
	@%p278 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_192;
$L__BB0_261:                            // %pass19275
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3806, [%rd37];
	ld.shared.u32 	%r3805, [%rd38];
	ld.shared.u32 	%r3804, [%rd39];
	ld.shared.u32 	%r3803, [%rd40];
$L__BB0_192:                            // %L40718
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3542, %r3539}, {%r541, %r544}, {%r3806}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3551, %r3548}, {%r541, %r544}, {%r3805}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3560, %r3557}, {%r541, %r544}, {%r3804}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3569, %r3566}, {%r541, %r544}, {%r3803}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3535, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3537, %r3535, %r3539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r593, %r3542, %r3537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3544, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3546, %r3544, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r593, %r3551, %r3546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3553, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3555, %r3553, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r593, %r3560, %r3555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3562, %r596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r3562, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r593, %r3569, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r596, %r3542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r593, %r3539, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r596, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r593, %r3548, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r596, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r593, %r3557, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r596, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r593, %r3566, %r3592;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3640, %r3643}, {%r637, %r643, %r640, %r646}, {%r3540, %r3574}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3659, %r3662}, {%r637, %r643, %r640, %r646}, {%r3549, %r3581}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3647, %r3651}, {%r637, %r643, %r640, %r646}, {%r3558, %r3588}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3666, %r3670}, {%r637, %r643, %r640, %r646}, {%r3567, %r3595}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3639, %r3640, %r3640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3642, %r3643, %r3643, %r3639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3646, %r3647, %r3647, %r3642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3650, %r3651, %r3651, %r3646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3765, %r1912, %r3650, %r3483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3658, %r3659, %r3659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3661, %r3662, %r3662, %r3658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3665, %r3666, %r3666, %r3661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r3670, %r3670, %r3665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3764, %r1912, %r3669, %r3502;
	// end inline asm
	add.s32 	%r3762, %r3762, 4;
	setp.eq.s32 	%p309, %r3762, 96;
	@%p309 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_195;
$L__BB0_193:                            // %pass19738
                                        //   in Loop: Header=BB0_187 Depth=2
	@%p92 bra 	$L__BB0_194;
// %bb.262:                             // %pass19748
                                        //   in Loop: Header=BB0_187 Depth=2
	mul.lo.s32 	%r3677, %r3763, 589824;
	add.s32 	%r3678, %r122, %r3677;
	cvt.s64.s32 	%rd296, %r3678;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p311, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p312, %rd302, %rd297;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd303, -1, 0, %p313;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r3765;
	add.s32 	%r3679, %r123, %r3677;
	cvt.s64.s32 	%rd309, %r3679;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p314, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p315, %rd315, %rd310;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd316, -1, 0, %p316;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3764;
	bra.uni 	$L__BB0_194;
$L__BB0_197:                            // %L41286
	mov.u32 	%r3681, 0;
	st.global.u32 	[%rd6], %r3681;
	ret;
$L__BB0_152:                            // %L7443
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd368, exception3856;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7599
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd366, exception3856;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7755
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd364, exception3856;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L7911
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd362, exception3856;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8067
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd360, exception3856;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8223
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd358, exception3856;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8379
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd356, exception3856;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8535
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd354, exception3856;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8691
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd352, exception3856;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8847
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd350, exception3856;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9003
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd348, exception3856;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9159
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd346, exception3856;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9315
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd344, exception3856;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9471
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd342, exception3856;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9627
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd340, exception3856;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9783
	mov.u32 	%r3690, 5;
	st.global.u32 	[%rd6], %r3690;
	mov.u64 	%rd338, exception3856;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L9939
	mov.u32 	%r3689, 5;
	st.global.u32 	[%rd6], %r3689;
	mov.u64 	%rd336, exception3856;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10095
	mov.u32 	%r3688, 5;
	st.global.u32 	[%rd6], %r3688;
	mov.u64 	%rd334, exception3856;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10251
	mov.u32 	%r3687, 5;
	st.global.u32 	[%rd6], %r3687;
	mov.u64 	%rd332, exception3856;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10407
	mov.u32 	%r3686, 5;
	st.global.u32 	[%rd6], %r3686;
	mov.u64 	%rd330, exception3856;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10563
	mov.u32 	%r3685, 5;
	st.global.u32 	[%rd6], %r3685;
	mov.u64 	%rd328, exception3856;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10745
	mov.u32 	%r3684, 5;
	st.global.u32 	[%rd6], %r3684;
	mov.u64 	%rd326, exception3856;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L10901
	mov.u32 	%r3683, 5;
	st.global.u32 	[%rd6], %r3683;
	mov.u64 	%rd324, exception3856;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_175:                            // %L11057
	mov.u32 	%r3682, 5;
	st.global.u32 	[%rd6], %r3682;
	mov.u64 	%rd322, exception3856;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3707, 2;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd372, exception3856;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3706, 3;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd370, exception3856;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r4, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r657, [retval0+0];
	} // callseq 61
	mov.u32 	%r659, 4;
	st.global.u32 	[%rd6], %r659;
	mov.u64 	%rd55, exception3856;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r395;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
