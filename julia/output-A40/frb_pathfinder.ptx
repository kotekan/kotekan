// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2634[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<257>;
	.reg .b16 	%rs<190>;
	.reg .b32 	%r<3076>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<261>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r261, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd18, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r262, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r262, 13919;
	@%p4 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_1;
$L__BB0_158:                            // %L10
	ld.param.u64 	%rd19, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r263, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r264, %r3, %r263;
	add.s32 	%r265, %r264, %r5;
	mul.wide.u32 	%rd25, %r265, 4;
	add.s64 	%rd5, %rd19, %rd25;
	mov.u32 	%r266, 1;
	st.global.u32 	[%rd5], %r266;
	and.b32  	%r6, %r263, 3;
	shr.u32 	%r7, %r263, 2;
	mul.lo.s32 	%r267, %r6, %r7;
	and.b32  	%r268, %r267, 7;
	cvt.rn.f32.s32 	%f205, %r268;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f1, %f205, %f206;
	abs.f32 	%f788, %f1;
	setp.lt.f32 	%p5, %f788, 0f40000000;
	setp.gtu.f32 	%p256, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p5 bra 	$L__BB0_170;
// %bb.159:
	@%p256 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r154, %f788;
	and.b32  	%r269, %r154, 8388607;
	or.b32  	%r3059, %r269, 1065353216;
	mov.b32 	%f783, %r3059;
	add.s32 	%r270, %r154, -1073741824;
	and.b32  	%r3060, %r270, -8388608;
	setp.eq.s32 	%p12, %r3060, 0;
	@%p12 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r271, %r3060, 192937984;
	add.s32 	%r272, %r3059, %r271;
	mov.b32 	%f217, %r272;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3060, %r3060, %r271;
	mov.b32 	%r3059, %f783;
	setp.ne.s32 	%p13, %r3060, 0;
	setp.ne.s32 	%p14, %r3059, 0;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p16, %r154, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p16;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r153, %f172;
	setp.lt.u32 	%p7, %r153, 1073741824;
	@%p7 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p8, %r153, -2147483647;
	@%p8 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p11, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p11;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p9, %f172, 0f40800000;
	@%p9 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p10, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p10;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p17, %f226, 0f7F800000;
	mov.b32 	%r273, %f1;
	and.b32  	%r161, %r273, -2147483648;
	@%p17 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r274, %f784;
	or.b32  	%r275, %r161, %r274;
	mov.b32 	%f784, %r275;
$L__BB0_172:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r282, %f227;
	and.b32  	%r283, %r282, -2147483648;
	or.b32  	%r284, %r283, 1056964608;
	mov.b32 	%f228, %r284;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p18, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p18;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p19, %f231, 0f3F000000;
	shl.b32 	%r164, %r263, 1;
	and.b32  	%r165, %r164, 2;
	mul.lo.s32 	%r290, %r165, %r7;
	cvt.rn.f32.s32 	%f259, %r290;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p25, %f734, 0f40000000;
	@%p25 bra 	$L__BB0_13;
// %bb.2:
	setp.gtu.f32 	%p26, %f734, 0f4B800000;
	@%p26 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f734;
	and.b32  	%r291, %r9, 8388607;
	or.b32  	%r3007, %r291, 1065353216;
	mov.b32 	%f733, %r3007;
	add.s32 	%r292, %r9, -1073741824;
	and.b32  	%r3008, %r292, -8388608;
	setp.eq.s32 	%p32, %r3008, 0;
	@%p32 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r3008, 192937984;
	add.s32 	%r294, %r3007, %r293;
	mov.b32 	%f271, %r294;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3008, %r3008, %r293;
	mov.b32 	%r3007, %f733;
	setp.ne.s32 	%p33, %r3008, 0;
	setp.ne.s32 	%p34, %r3007, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p36, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f4, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p27, %r8, 1073741824;
	@%p27 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p28, %r8, -2147483647;
	@%p28 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p31, %f4, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p31;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p29, %f4, 0f40800000;
	@%p29 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f4;
	setp.ge.f32 	%p30, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p30;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p19;
	or.b32  	%r166, %r165, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p37, %f280, 0f7F800000;
	@%p37 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r295, %f186;
	and.b32  	%r296, %r295, -2147483648;
	mov.b32 	%r297, %f734;
	or.b32  	%r298, %r296, %r297;
	mov.b32 	%f734, %r298;
$L__BB0_15:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r299, %f282;
	and.b32  	%r300, %r299, -2147483648;
	or.b32  	%r301, %r300, 1056964608;
	mov.b32 	%f283, %r301;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p38, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p38;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p39, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p39;
	setp.eq.s32 	%p45, %r166, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p45 bra 	$L__BB0_31;
// %bb.16:                              // %L242
	mul.lo.s32 	%r307, %r166, %r7;
	mul.hi.u32 	%r308, %r307, -1431655765;
	shr.u32 	%r309, %r308, 4;
	mul.lo.s32 	%r310, %r309, 24;
	sub.s32 	%r311, %r307, %r310;
	cvt.rn.f32.s32 	%f311, %r311;
	div.approx.f32 	%f20, %f311, %f260;
	abs.f32 	%f738, %f20;
	setp.lt.f32 	%p46, %f738, 0f40000000;
	@%p46 bra 	$L__BB0_28;
// %bb.17:
	setp.gtu.f32 	%p47, %f738, 0f4B800000;
	@%p47 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_18;
$L__BB0_24:
	mov.b32 	%r17, %f738;
	and.b32  	%r312, %r17, 8388607;
	or.b32  	%r3009, %r312, 1065353216;
	mov.b32 	%f737, %r3009;
	add.s32 	%r313, %r17, -1073741824;
	and.b32  	%r3010, %r313, -8388608;
	setp.eq.s32 	%p53, %r3010, 0;
	@%p53 bra 	$L__BB0_27;
// %bb.25:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_26:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r314, %r3010, 192937984;
	add.s32 	%r315, %r3009, %r314;
	mov.b32 	%f323, %r315;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3010, %r3010, %r314;
	mov.b32 	%r3009, %f737;
	setp.ne.s32 	%p54, %r3010, 0;
	setp.ne.s32 	%p55, %r3009, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_26;
$L__BB0_27:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p57, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_28;
$L__BB0_18:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f23, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f23;
	setp.lt.u32 	%p48, %r16, 1073741824;
	@%p48 bra 	$L__BB0_23;
// %bb.19:
	setp.lt.u32 	%p49, %r16, -2147483647;
	@%p49 bra 	$L__BB0_21;
// %bb.20:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p52, %f23, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p52;
	bra.uni 	$L__BB0_23;
$L__BB0_21:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p50, %f23, 0f40800000;
	@%p50 bra 	$L__BB0_23;
// %bb.22:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f23;
	setp.ge.f32 	%p51, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p51;
$L__BB0_23:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_28:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p58, %f332, 0f7F800000;
	@%p58 bra 	$L__BB0_30;
// %bb.29:
	mov.b32 	%r316, %f20;
	and.b32  	%r317, %r316, -2147483648;
	mov.b32 	%r318, %f738;
	or.b32  	%r319, %r317, %r318;
	mov.b32 	%f738, %r319;
$L__BB0_30:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r320, %f333;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f334, %r322;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p59, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p59;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p60, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p60;
	cvt.rzi.s32.f32 	%r323, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r324, %r323, 1;
	setp.eq.b32 	%p61, %r324, 1;
	selp.f32 	%f352, %f350, %f351, %p61;
	selp.f32 	%f353, %f351, %f350, %p61;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p62, %r325, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p62;
	add.s32 	%r326, %r323, 1;
	and.b32  	%r327, %r326, 2;
	setp.eq.s32 	%p63, %r327, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p63;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p64, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p64;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p65, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p65;
$L__BB0_31:                             // %L276
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r26, %r7, 3;
	setp.eq.s32 	%p66, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p66 bra 	$L__BB0_47;
// %bb.32:                              // %L314
	mul.lo.s32 	%r334, %r165, %r26;
	cvt.u16.u32 	%rs6, %r334;
	mul.lo.s16 	%rs7, %rs6, 171;
	shr.u16 	%rs8, %rs7, 9;
	mul.lo.s16 	%rs9, %rs8, 3;
	sub.s16 	%rs10, %rs6, %rs9;
	and.b16  	%rs11, %rs10, 255;
	cvt.rn.f32.u16 	%f364, %rs11;
	div.approx.f32 	%f41, %f364, %f731;
	abs.f32 	%f744, %f41;
	setp.lt.f32 	%p67, %f744, 0f40000000;
	@%p67 bra 	$L__BB0_44;
// %bb.33:
	setp.gtu.f32 	%p68, %f744, 0f4B800000;
	@%p68 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_34;
$L__BB0_40:
	mov.b32 	%r28, %f744;
	and.b32  	%r335, %r28, 8388607;
	or.b32  	%r3011, %r335, 1065353216;
	mov.b32 	%f743, %r3011;
	add.s32 	%r336, %r28, -1073741824;
	and.b32  	%r3012, %r336, -8388608;
	setp.eq.s32 	%p74, %r3012, 0;
	@%p74 bra 	$L__BB0_43;
// %bb.41:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_42:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r337, %r3012, 192937984;
	add.s32 	%r338, %r3011, %r337;
	mov.b32 	%f376, %r338;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3012, %r3012, %r337;
	mov.b32 	%r3011, %f743;
	setp.ne.s32 	%p75, %r3012, 0;
	setp.ne.s32 	%p76, %r3011, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_42;
$L__BB0_43:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p78, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_44;
$L__BB0_34:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f44, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f44;
	setp.lt.u32 	%p69, %r27, 1073741824;
	@%p69 bra 	$L__BB0_39;
// %bb.35:
	setp.lt.u32 	%p70, %r27, -2147483647;
	@%p70 bra 	$L__BB0_37;
// %bb.36:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p73, %f44, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p73;
	bra.uni 	$L__BB0_39;
$L__BB0_37:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p71, %f44, 0f40800000;
	@%p71 bra 	$L__BB0_39;
// %bb.38:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f44;
	setp.ge.f32 	%p72, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p72;
$L__BB0_39:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_44:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p79, %f385, 0f7F800000;
	@%p79 bra 	$L__BB0_46;
// %bb.45:
	mov.b32 	%r339, %f41;
	and.b32  	%r340, %r339, -2147483648;
	mov.b32 	%r341, %f744;
	or.b32  	%r342, %r340, %r341;
	mov.b32 	%f744, %r342;
$L__BB0_46:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r343, %f386;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f387, %r345;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p80, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p80;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p81, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p81;
	cvt.rzi.s32.f32 	%r346, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r347, %r346, 1;
	setp.eq.b32 	%p82, %r347, 1;
	selp.f32 	%f405, %f403, %f404, %p82;
	selp.f32 	%f406, %f404, %f403, %p82;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p83, %r348, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p83;
	add.s32 	%r349, %r346, 1;
	and.b32  	%r350, %r349, 2;
	setp.eq.s32 	%p84, %r350, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p84;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p85, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p85;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p86, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p86;
$L__BB0_47:                             // %L348
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p89, %p45, %p66;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p89 bra 	$L__BB0_63;
// %bb.48:                              // %L356
	mul.lo.s32 	%r351, %r166, %r26;
	mul.hi.u32 	%r352, %r351, -1431655765;
	shr.u32 	%r353, %r352, 1;
	mul.lo.s32 	%r354, %r353, 3;
	sub.s32 	%r355, %r351, %r354;
	cvt.rn.f32.s32 	%f417, %r355;
	div.approx.f32 	%f62, %f417, %f731;
	abs.f32 	%f750, %f62;
	setp.lt.f32 	%p90, %f750, 0f40000000;
	@%p90 bra 	$L__BB0_60;
// %bb.49:
	setp.gtu.f32 	%p91, %f750, 0f4B800000;
	@%p91 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r36, %f750;
	and.b32  	%r356, %r36, 8388607;
	or.b32  	%r3013, %r356, 1065353216;
	mov.b32 	%f749, %r3013;
	add.s32 	%r357, %r36, -1073741824;
	and.b32  	%r3014, %r357, -8388608;
	setp.eq.s32 	%p97, %r3014, 0;
	@%p97 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r358, %r3014, 192937984;
	add.s32 	%r359, %r3013, %r358;
	mov.b32 	%f429, %r359;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3014, %r3014, %r358;
	mov.b32 	%r3013, %f749;
	setp.ne.s32 	%p98, %r3014, 0;
	setp.ne.s32 	%p99, %r3013, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p101, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f65, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f65;
	setp.lt.u32 	%p92, %r35, 1073741824;
	@%p92 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p93, %r35, -2147483647;
	@%p93 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p96, %f65, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p96;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p94, %f65, 0f40800000;
	@%p94 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f65;
	setp.ge.f32 	%p95, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p95;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p102, %f438, 0f7F800000;
	@%p102 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r360, %f62;
	and.b32  	%r361, %r360, -2147483648;
	mov.b32 	%r362, %f750;
	or.b32  	%r363, %r361, %r362;
	mov.b32 	%f750, %r363;
$L__BB0_62:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r364, %f439;
	and.b32  	%r365, %r364, -2147483648;
	or.b32  	%r366, %r365, 1056964608;
	mov.b32 	%f440, %r366;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p103, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p103;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p104, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p104;
	cvt.rzi.s32.f32 	%r367, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r368, %r367, 1;
	setp.eq.b32 	%p105, %r368, 1;
	selp.f32 	%f458, %f456, %f457, %p105;
	selp.f32 	%f459, %f457, %f456, %p105;
	and.b32  	%r369, %r367, 2;
	setp.eq.s32 	%p106, %r369, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p106;
	add.s32 	%r370, %r367, 1;
	and.b32  	%r371, %r370, 2;
	setp.eq.s32 	%p107, %r371, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p107;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p108, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p108;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p109, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p109;
$L__BB0_63:                             // %L390
	cvt.rzi.s32.f32 	%r285, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r43, %r263, 2;
	setp.eq.s32 	%p110, %r43, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p110 bra 	$L__BB0_65;
// %bb.64:                              // %L399
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_65:                             // %L401
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r286, %r285, 1;
	cvt.rzi.s32.f32 	%r302, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p5 bra 	$L__BB0_180;
// %bb.66:
	@%p256 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_67;
$L__BB0_176:
	mov.b32 	%r168, %f788;
	and.b32  	%r378, %r168, 8388607;
	or.b32  	%r3061, %r378, 1065353216;
	mov.b32 	%f787, %r3061;
	add.s32 	%r379, %r168, -1073741824;
	and.b32  	%r3062, %r379, -8388608;
	setp.eq.s32 	%p118, %r3062, 0;
	@%p118 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r380, %r3062, 192937984;
	add.s32 	%r381, %r3061, %r380;
	mov.b32 	%f479, %r381;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3062, %r3062, %r380;
	mov.b32 	%r3061, %f787;
	setp.ne.s32 	%p119, %r3062, 0;
	setp.ne.s32 	%p120, %r3061, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p122, %r168, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_180;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r167, %f189;
	setp.lt.u32 	%p113, %r167, 1073741824;
	@%p113 bra 	$L__BB0_175;
// %bb.68:
	setp.lt.u32 	%p114, %r167, -2147483647;
	@%p114 bra 	$L__BB0_173;
// %bb.69:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p117, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p117;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p115, %f189, 0f40800000;
	@%p115 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p116, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p116;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p20, %r286, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r303, %r302, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p123, %f488, 0f7F800000;
	@%p123 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r382, %f788;
	or.b32  	%r383, %r161, %r382;
	mov.b32 	%f788, %r383;
$L__BB0_182:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p20;
	and.b32  	%r287, %r285, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p40, %r303, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r390, %f489;
	and.b32  	%r391, %r390, -2147483648;
	or.b32  	%r392, %r391, 1056964608;
	mov.b32 	%f490, %r392;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p124, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p124;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p125, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p125;
	cvt.rzi.s32.f32 	%r393, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r394, %r393, 1;
	setp.eq.b32 	%p126, %r394, 1;
	selp.f32 	%f508, %f506, %f507, %p126;
	and.b32  	%r395, %r393, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p131, %f760, 0f40000000;
	@%p131 bra 	$L__BB0_81;
// %bb.70:
	setp.gtu.f32 	%p132, %f760, 0f4B800000;
	@%p132 bra 	$L__BB0_77;
	bra.uni 	$L__BB0_71;
$L__BB0_77:
	mov.b32 	%r47, %f760;
	and.b32  	%r398, %r47, 8388607;
	or.b32  	%r3015, %r398, 1065353216;
	mov.b32 	%f759, %r3015;
	add.s32 	%r399, %r47, -1073741824;
	and.b32  	%r3016, %r399, -8388608;
	setp.eq.s32 	%p138, %r3016, 0;
	@%p138 bra 	$L__BB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_79:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3016, 192937984;
	add.s32 	%r401, %r3015, %r400;
	mov.b32 	%f532, %r401;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3016, %r3016, %r400;
	mov.b32 	%r3015, %f759;
	setp.ne.s32 	%p139, %r3016, 0;
	setp.ne.s32 	%p140, %r3015, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_79;
$L__BB0_80:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p142, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_81;
$L__BB0_71:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f90, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f90;
	setp.lt.u32 	%p133, %r46, 1073741824;
	@%p133 bra 	$L__BB0_76;
// %bb.72:
	setp.lt.u32 	%p134, %r46, -2147483647;
	@%p134 bra 	$L__BB0_74;
// %bb.73:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p137;
	bra.uni 	$L__BB0_76;
$L__BB0_74:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p136;
$L__BB0_76:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_81:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p21, %r287, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r288, %r285, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p40;
	and.b32  	%r304, %r302, 2;
	setp.eq.s32 	%p127, %r395, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r396, %r393, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p143, %f541, 0f7F800000;
	@%p143 bra 	$L__BB0_83;
// %bb.82:
	mov.b32 	%r402, %f203;
	and.b32  	%r403, %r402, -2147483648;
	mov.b32 	%r404, %f760;
	or.b32  	%r405, %r403, %r404;
	mov.b32 	%f760, %r405;
$L__BB0_83:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p20;
	selp.f32 	%f249, %f246, %f248, %p21;
	and.b32  	%r289, %r288, 2;
	setp.eq.f32 	%p23, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p41, %r304, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r305, %r302, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p126;
	selp.f32 	%f511, %f508, %f510, %p127;
	and.b32  	%r397, %r396, 2;
	setp.eq.f32 	%p129, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r406, %f542;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f543, %r408;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p144, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p144;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p145, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p145;
	cvt.rzi.s32.f32 	%r409, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p146, %r410, 1;
	selp.f32 	%f561, %f559, %f560, %p146;
	and.b32  	%r411, %r409, 2;
	setp.eq.s32 	%p147, %r411, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r7;
	div.approx.f32 	%f106, %f572, %f521;
	abs.f32 	%f764, %f106;
	setp.lt.f32 	%p151, %f764, 0f40000000;
	@%p151 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p152, %f764, 0f4B800000;
	@%p152 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r55, %f764;
	and.b32  	%r414, %r55, 8388607;
	or.b32  	%r3017, %r414, 1065353216;
	mov.b32 	%f763, %r3017;
	add.s32 	%r415, %r55, -1073741824;
	and.b32  	%r3018, %r415, -8388608;
	setp.eq.s32 	%p158, %r3018, 0;
	@%p158 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r3018, 192937984;
	add.s32 	%r417, %r3017, %r416;
	mov.b32 	%f584, %r417;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3018, %r3018, %r416;
	mov.b32 	%r3017, %f763;
	setp.ne.s32 	%p159, %r3018, 0;
	setp.ne.s32 	%p160, %r3017, 0;
	and.pred  	%p161, %p159, %p160;
	@%p161 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p162, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p162;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f109, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f109;
	setp.lt.u32 	%p153, %r54, 1073741824;
	@%p153 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p154, %r54, -2147483647;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p157, %f109, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p157;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p155, %f109, 0f40800000;
	@%p155 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f109;
	setp.ge.f32 	%p156, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p156;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p22, %r289, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p23;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p40;
	selp.f32 	%f304, %f301, %f303, %p41;
	and.b32  	%r306, %r305, 2;
	setp.eq.f32 	%p43, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p128, %r397, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p129;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p146;
	selp.f32 	%f564, %f561, %f563, %p147;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p149, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p163, %f593, 0f7F800000;
	@%p163 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r418, %f106;
	and.b32  	%r419, %r418, -2147483648;
	mov.b32 	%r420, %f764;
	or.b32  	%r421, %r419, %r420;
	mov.b32 	%f764, %r421;
$L__BB0_97:                             // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p22;
	setp.gt.f32 	%p24, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p42, %r306, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f18, %f308, %f304, %p43;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p128;
	setp.gt.f32 	%p130, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p148, %r413, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f104, %f569, %f564, %p149;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r428, %f595;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f596, %r430;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p164, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p164;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p165, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p165;
	cvt.rzi.s32.f32 	%r431, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p166, %r432, 1;
	selp.f32 	%f614, %f612, %f613, %p166;
	selp.f32 	%f615, %f613, %f612, %p166;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p167, %r433, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p167;
	add.s32 	%r434, %r431, 1;
	and.b32  	%r435, %r434, 2;
	setp.eq.s32 	%p168, %r435, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p169, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p169;
	abs.f32 	%f623, %f764;
	and.b32  	%r65, %r263, 1;
	shr.u32 	%r66, %r263, 4;
	setp.ne.s32 	%p171, %r65, %r66;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p171 bra 	$L__BB0_113;
// %bb.98:                              // %L606
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f123, %f627, %f626;
	abs.f32 	%f768, %f123;
	setp.lt.f32 	%p172, %f768, 0f40000000;
	@%p172 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p173, %f768, 0f4B800000;
	@%p173 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r68, %f768;
	and.b32  	%r436, %r68, 8388607;
	or.b32  	%r3019, %r436, 1065353216;
	mov.b32 	%f767, %r3019;
	add.s32 	%r437, %r68, -1073741824;
	and.b32  	%r3020, %r437, -8388608;
	setp.eq.s32 	%p179, %r3020, 0;
	@%p179 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r3020, 192937984;
	add.s32 	%r439, %r3019, %r438;
	mov.b32 	%f638, %r439;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3020, %r3020, %r438;
	mov.b32 	%r3019, %f767;
	setp.ne.s32 	%p180, %r3020, 0;
	setp.ne.s32 	%p181, %r3019, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p183, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f126, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f126;
	setp.lt.u32 	%p174, %r67, 1073741824;
	@%p174 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p175, %r67, -2147483647;
	@%p175 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p178, %f126, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p178;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p176, %f126, 0f40800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f126;
	setp.ge.f32 	%p177, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p177;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p184, %f647, 0f7F800000;
	@%p184 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r440, %f123;
	and.b32  	%r441, %r440, -2147483648;
	mov.b32 	%r442, %f768;
	or.b32  	%r443, %r441, %r442;
	mov.b32 	%f768, %r443;
$L__BB0_112:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r444, %f648;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f649, %r446;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p185, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p185;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p186, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p186;
	cvt.rzi.s32.f32 	%r447, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p187, %r448, 1;
	selp.f32 	%f667, %f665, %f666, %p187;
	selp.f32 	%f668, %f666, %f665, %p187;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p188, %r449, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p188;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p189, %r451, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p189;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p190, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p190;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p191, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p191;
$L__BB0_113:                            // %L645
	selp.f32 	%f258, %f257, %f252, %p24;
	selp.f32 	%f306, %f302, %f305, %p42;
	setp.gt.f32 	%p44, %f309, 0f4B800000;
	add.f32 	%f310, %f18, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p130;
	selp.f32 	%f567, %f562, %f566, %p148;
	setp.gt.f32 	%p150, %f570, 0f4B800000;
	add.f32 	%f571, %f104, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p168;
	setp.gt.f32 	%p170, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r64, %r7, 1;
	mov.f32 	%f781, %f776;
	@%p171 bra 	$L__BB0_129;
// %bb.114:                             // %L648
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f144, %f679, %f680;
	abs.f32 	%f774, %f144;
	setp.lt.f32 	%p193, %f774, 0f40000000;
	@%p193 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p194, %f774, 0f4B800000;
	@%p194 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r76, %f774;
	and.b32  	%r452, %r76, 8388607;
	or.b32  	%r3021, %r452, 1065353216;
	mov.b32 	%f773, %r3021;
	add.s32 	%r453, %r76, -1073741824;
	and.b32  	%r3022, %r453, -8388608;
	setp.eq.s32 	%p200, %r3022, 0;
	@%p200 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3022, 192937984;
	add.s32 	%r455, %r3021, %r454;
	mov.b32 	%f691, %r455;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3022, %r3022, %r454;
	mov.b32 	%r3021, %f773;
	setp.ne.s32 	%p201, %r3022, 0;
	setp.ne.s32 	%p202, %r3021, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p204, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f147, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f147;
	setp.lt.u32 	%p195, %r75, 1073741824;
	@%p195 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p196, %r75, -2147483647;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p199, %f147, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p199;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p197, %f147, 0f40800000;
	@%p197 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f147;
	setp.ge.f32 	%p198, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p198;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p205, %f700, 0f7F800000;
	@%p205 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r456, %f144;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f774;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f774, %r459;
$L__BB0_128:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r460, %f701;
	and.b32  	%r461, %r460, -2147483648;
	or.b32  	%r462, %r461, 1056964608;
	mov.b32 	%f702, %r462;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p206, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p206;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p207, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p207;
	cvt.rzi.s32.f32 	%r463, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r464, %r463, 1;
	setp.eq.b32 	%p208, %r464, 1;
	selp.f32 	%f720, %f718, %f719, %p208;
	selp.f32 	%f721, %f719, %f718, %p208;
	and.b32  	%r465, %r463, 2;
	setp.eq.s32 	%p209, %r465, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p209;
	add.s32 	%r466, %r463, 1;
	and.b32  	%r467, %r466, 2;
	setp.eq.s32 	%p210, %r467, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p210;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p211, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p211;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p212, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p212;
$L__BB0_129:                            // %L682
	mov.b32 	%r278, %f258;
	mov.b32 	%r281, %f255;
	selp.f32 	%f19, %f310, %f306, %p44;
	mov.b32 	%r386, %f520;
	mov.b32 	%r389, %f517;
	selp.f32 	%f105, %f571, %f567, %p150;
	selp.f32 	%f625, %f624, %f619, %p170;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p110 bra 	$L__BB0_131;
// %bb.130:                             // %L691
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_131:                            // %L693
	xor.b32  	%r277, %r281, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r329, %f19;
	mov.b32 	%r330, %f740;
	mov.b32 	%r332, %f18;
	mov.b32 	%r333, %f741;
	mov.b32 	%r373, %f754;
	mov.b32 	%r374, %f756;
	mov.b32 	%r376, %f755;
	mov.b32 	%r377, %f757;
	xor.b32  	%r385, %r389, -2147483648;
	mov.b32 	%r424, %f625;
	mov.b32 	%r423, %f105;
	mov.b32 	%r427, %f622;
	mov.b32 	%r426, %f104;
	mov.b32 	%r469, %f778;
	mov.b32 	%r470, %f780;
	mov.b32 	%r472, %f779;
	mov.b32 	%r473, %f781;
	setp.gt.u32 	%p214, %r263, 15;
	mov.u32 	%r177, 999999999;
	@%p214 bra 	$L__BB0_133;
// %bb.132:                             // %L723
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	mad.lo.s32 	%r475, %r263, 6, %r2;
	cvt.u16.u32 	%rs12, %r475;
	and.b16  	%rs13, %rs12, 255;
	mul.lo.s16 	%rs14, %rs13, 171;
	shr.u16 	%rs15, %rs14, 14;
	mul.lo.s16 	%rs16, %rs15, 96;
	sub.s16 	%rs17, %rs12, %rs16;
	cvt.u32.u16 	%r476, %rs17;
	and.b32  	%r477, %r476, 255;
	mul.wide.u32 	%rd26, %r477, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.u32 	%r478, [%rd27];
	cvt.s32.s16 	%r479, %r478;
	shr.s32 	%r480, %r478, 16;
	mul.lo.s32 	%r481, %r480, 290;
	mad.lo.s32 	%r177, %r479, 33, %r481;
$L__BB0_133:                            // %pass388
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r278, %r277;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r278;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r385;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r468, %r470, %r469;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r471, %r473, %r472;
	// end inline asm
	shl.b32 	%r483, %r2, 1;
	and.b32  	%r484, %r483, 2;
	shr.u32 	%r178, %r263, 3;
	bfe.u32 	%r485, %r263, 3, 1;
	or.b32  	%r486, %r484, %r485;
	mul.lo.s32 	%r487, %r6, 24;
	and.b32  	%r488, %r178, 2;
	or.b32  	%r179, %r488, %r64;
	cvt.u16.u32 	%rs19, %r179;
	mul.lo.s16 	%rs20, %rs19, 171;
	shr.u16 	%rs21, %rs20, 9;
	mul.lo.s16 	%rs22, %rs21, 3;
	sub.s16 	%rs23, %rs19, %rs22;
	cvt.u32.u16 	%r489, %rs23;
	and.b32  	%r490, %r489, 255;
	and.b16  	%rs24, %rs23, 255;
	mul.wide.u16 	%r491, %rs24, 8;
	add.s32 	%r492, %r487, %r5;
	or.b32  	%r493, %r492, %r486;
	add.s32 	%r494, %r493, %r491;
	mul.wide.u32 	%rd28, %r494, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r180, [%rd29];
	cvt.u64.u32 	%rd30, %r491;
	cvt.u64.u32 	%rd31, %r486;
	cvt.u64.u32 	%rd32, %r487;
	cvt.u64.u32 	%rd33, %r5;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r181, [%rd38+16];
	ld.global.u32 	%r182, [%rd38+384];
	ld.global.u32 	%r183, [%rd38+400];
	shl.b32 	%r495, %r263, 2;
	and.b32  	%r184, %r495, 16;
	and.b32  	%r496, %r495, 12;
	shl.b32 	%r497, %r4, 5;
	shl.b32 	%r185, %r2, 2;
	or.b32  	%r186, %r496, %r497;
	and.b32  	%r187, %r263, 4;
	bfe.s32 	%r498, %r263, 2, 1;
	and.b32  	%r499, %r164, 8;
	shl.b32 	%r500, %r263, 4;
	or.b32  	%r501, %r499, %r500;
	bfe.u32 	%r502, %r501, 3, 3;
	mul.lo.s32 	%r188, %r502, 260;
	cvt.u16.u32 	%rs25, %r263;
	and.b16  	%rs26, %rs25, 255;
	mul.lo.s16 	%rs27, %rs26, 171;
	shr.u16 	%rs28, %rs27, 12;
	mul.lo.s16 	%rs29, %rs28, 24;
	sub.s16 	%rs5, %rs25, %rs29;
	add.s32 	%r503, %r3, 192;
	and.b32  	%r504, %r503, 224;
	add.s32 	%r505, %r2, 6;
	shr.u32 	%r506, %r505, 3;
	mad.lo.s32 	%r189, %r506, 260, %r504;
	add.s32 	%r507, %r3, 128;
	and.b32  	%r508, %r507, 224;
	add.s32 	%r509, %r2, 12;
	shr.u32 	%r510, %r509, 3;
	mad.lo.s32 	%r190, %r510, 260, %r508;
	add.s32 	%r511, %r3, 64;
	and.b32  	%r512, %r511, 224;
	add.s32 	%r513, %r2, 18;
	shr.u32 	%r514, %r513, 3;
	mad.lo.s32 	%r191, %r514, 260, %r512;
	or.b32  	%r192, %r3, 780;
	add.s32 	%r515, %r2, 30;
	shr.u32 	%r516, %r515, 3;
	mad.lo.s32 	%r193, %r516, 260, %r504;
	add.s32 	%r517, %r2, 36;
	shr.u32 	%r518, %r517, 3;
	mad.lo.s32 	%r194, %r518, 260, %r508;
	add.s32 	%r519, %r2, 42;
	shr.u32 	%r520, %r519, 3;
	mad.lo.s32 	%r195, %r520, 260, %r512;
	or.b32  	%r196, %r3, 1560;
	add.s32 	%r521, %r2, 54;
	shr.u32 	%r522, %r521, 3;
	mad.lo.s32 	%r197, %r522, 260, %r504;
	add.s32 	%r523, %r2, 60;
	bfe.u32 	%r524, %r523, 3, 3;
	mad.lo.s32 	%r198, %r524, 260, %r508;
	shr.u32 	%r525, %r2, 1;
	cvt.u16.u32 	%rs30, %r525;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 9;
	mul.lo.s16 	%rs34, %rs33, 3;
	sub.s16 	%rs35, %rs30, %rs34;
	cvt.u32.u16 	%r526, %rs35;
	and.b32  	%r199, %r526, 255;
	mul.lo.s32 	%r527, %r6, 870;
	mad.lo.s32 	%r528, %r486, 33, %r527;
	mad.lo.s32 	%r200, %r490, 290, %r528;
	add.s32 	%r201, %r200, 132;
	setp.lt.u32 	%p216, %r263, 4;
	setp.eq.s32 	%p217, %r7, 1;
	setp.eq.s32 	%p218, %r7, 4;
	setp.eq.s32 	%p219, %r7, 5;
	and.b32  	%r202, %r498, 196;
	selp.b32 	%r203, 0, 392, %p110;
	bfe.s32 	%r529, %r263, 3, 1;
	and.b32  	%r204, %r529, 98;
	or.b32  	%r205, %r484, %r66;
	setp.eq.s32 	%p220, %r65, 0;
	selp.b32 	%r206, 0, 784, %p220;
	add.s32 	%r530, %r202, %r203;
	add.s32 	%r531, %r530, %r204;
	add.s32 	%r532, %r531, %r205;
	add.s32 	%r207, %r532, %r206;
	or.b32  	%r208, %r205, 4;
	add.s32 	%r533, %r531, %r208;
	add.s32 	%r209, %r533, %r206;
	and.b32  	%r534, %r164, 6;
	bfe.s32 	%r535, %r2, 1, 1;
	and.b32  	%r536, %r535, 196;
	and.b32  	%r537, %r2, 1;
	neg.s32 	%r538, %r537;
	and.b32  	%r539, %r538, 392;
	and.b32  	%r540, %r529, 1576;
	shr.u32 	%r541, %r2, 2;
	or.b32  	%r542, %r64, %r534;
	mad.lo.s32 	%r543, %r541, 98, %r542;
	mad.lo.s32 	%r544, %r66, 784, %r543;
	add.s32 	%r545, %r544, %r536;
	add.s32 	%r546, %r545, %r539;
	add.s32 	%r210, %r546, %r540;
	add.s32 	%r211, %r210, 8;
	and.b32  	%r547, %r263, 7;
	or.b32  	%r548, %r185, %r178;
	cvt.u16.u32 	%rs36, %r548;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 9;
	and.b16  	%rs40, %rs39, 24;
	add.s16 	%rs41, %rs36, %rs40;
	shl.b16 	%rs42, %rs41, 3;
	cvt.u32.u16 	%r549, %rs42;
	and.b32  	%r550, %r549, 248;
	mul.lo.s32 	%r551, %r4, 576;
	or.b32  	%r552, %r551, %r547;
	add.s32 	%r212, %r552, %r550;
	add.s32 	%r553, %r200, %r199;
	mul.wide.u32 	%rd39, %r553, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd12, %rd40, %rd39;
	add.s32 	%r554, %r201, %r199;
	mul.wide.u32 	%rd41, %r554, 4;
	add.s64 	%rd13, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r200;
	cvt.u64.u16 	%rd43, %rs35;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd14, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r201;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd15, %rd40, %rd49;
	or.pred  	%p221, %p216, %p217;
	and.b32  	%r555, %r263, 24;
	setp.eq.s32 	%p222, %r555, 8;
	or.pred  	%p223, %p221, %p222;
	or.pred  	%p224, %p223, %p218;
	setp.eq.s32 	%p225, %r555, 24;
	or.pred  	%p226, %p219, %p225;
	selp.b32 	%r213, 1145324612, -286331154, %p223;
	or.pred  	%p1, %p224, %p226;
	selp.b32 	%r214, 1145324612, -286331154, %p221;
	add.s32 	%r556, %r7, -1;
	setp.lt.u32 	%p227, %r556, 3;
	or.pred  	%p2, %p216, %p227;
	setp.eq.s32 	%p228, %r555, 16;
	or.pred  	%p3, %p228, %p225;
	selp.b32 	%r215, 1145324612, -286331154, %p228;
	or.b32  	%r86, %r199, 24;
	mov.u32 	%r482, 0;
	mov.u16 	%rs1, 24;
	selp.b32 	%r238, %r214, %r215, %p2;
	or.pred  	%p236, %p2, %p3;
	mov.u32 	%r87, %r199;
	mov.u32 	%r88, %r482;
	mov.u32 	%r109, %r482;
	mov.u32 	%r110, %r482;
	mov.u32 	%r111, %r482;
	bra.uni 	$L__BB0_134;
$L__BB0_156:                            // %L30566
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r150, %r88, 48;
	add.s32 	%r87, %r87, 48;
	add.s16 	%rs1, %rs1, 48;
	add.s32 	%r86, %r86, 48;
	setp.ne.s32 	%p255, %r88, 96;
	mov.u32 	%r88, %r150;
	@%p255 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_157;
$L__BB0_134:                            // %L1478
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_136 Depth 2
                                        //     Child Loop BB0_146 Depth 2
	setp.ne.s32 	%p229, %r179, 3;
	setp.gt.u32 	%p230, %r2, 3;
	setp.eq.s32 	%p231, %r187, 0;
	mul.hi.u32 	%r654, %r88, -1431655765;
	shr.u32 	%r655, %r654, 5;
	mul.lo.s32 	%r656, %r655, 48;
	add.s32 	%r657, %r656, %r185;
	or.b32  	%r658, %r657, %r178;
	mul.hi.s32 	%r659, %r658, 954437177;
	shr.u32 	%r660, %r659, 31;
	shr.u32 	%r661, %r659, 5;
	add.s32 	%r662, %r661, %r660;
	mul.lo.s32 	%r663, %r662, 144;
	sub.s32 	%r664, %r658, %r663;
	shl.b32 	%r665, %r664, 16;
	or.b32  	%r666, %r665, %r184;
	or.b32  	%r667, %r186, %r666;
	mul.wide.s32 	%rd50, %r667, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r668, %r669, %r670, %r671}, [%rd51];
	add.s32 	%r672, %r657, 24;
	or.b32  	%r673, %r672, %r178;
	mul.hi.s32 	%r674, %r673, 954437177;
	shr.u32 	%r675, %r674, 31;
	shr.u32 	%r676, %r674, 5;
	add.s32 	%r677, %r676, %r675;
	mul.lo.s32 	%r678, %r677, 144;
	sub.s32 	%r679, %r673, %r678;
	shl.b32 	%r680, %r679, 16;
	or.b32  	%r681, %r680, %r184;
	or.b32  	%r682, %r186, %r681;
	mul.wide.s32 	%rd52, %r682, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r683, %r684, %r685, %r686}, [%rd53];
	selp.b32 	%r687, %r670, %r668, %p231;
	shfl.sync.bfly.b32	%r688, %r687, 4, 31, -1;
	selp.b32 	%r559, %r668, %r688, %p231;
	selp.b32 	%r564, %r688, %r670, %p231;
	selp.b32 	%r689, %r671, %r669, %p231;
	shfl.sync.bfly.b32	%r690, %r689, 4, 31, -1;
	selp.b32 	%r567, %r669, %r690, %p231;
	selp.b32 	%r572, %r690, %r671, %p231;
	selp.b32 	%r691, %r685, %r683, %p231;
	shfl.sync.bfly.b32	%r692, %r691, 4, 31, -1;
	selp.b32 	%r575, %r683, %r692, %p231;
	selp.b32 	%r580, %r692, %r685, %p231;
	selp.b32 	%r693, %r686, %r684, %p231;
	shfl.sync.bfly.b32	%r694, %r693, 4, 31, -1;
	selp.b32 	%r583, %r684, %r694, %p231;
	selp.b32 	%r588, %r694, %r686, %p231;
	shl.b32 	%r560, %r564, 4;
	mov.u32 	%r558, 252645135;
	// begin inline asm
	lop3.b32 %r590, %r558, %r559, %r560, 202;
	// end inline asm
	shr.u32 	%r563, %r559, 4;
	// begin inline asm
	lop3.b32 %r606, %r558, %r563, %r564, 202;
	// end inline asm
	shl.b32 	%r568, %r572, 4;
	// begin inline asm
	lop3.b32 %r598, %r558, %r567, %r568, 202;
	// end inline asm
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r614, %r558, %r571, %r572, 202;
	// end inline asm
	shl.b32 	%r576, %r580, 4;
	// begin inline asm
	lop3.b32 %r591, %r558, %r575, %r576, 202;
	// end inline asm
	shr.u32 	%r579, %r575, 4;
	// begin inline asm
	lop3.b32 %r607, %r558, %r579, %r580, 202;
	// end inline asm
	shl.b32 	%r584, %r588, 4;
	// begin inline asm
	lop3.b32 %r599, %r558, %r583, %r584, 202;
	// end inline asm
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r615, %r558, %r587, %r588, 202;
	// end inline asm
	mov.u32 	%r592, 25152;
	// begin inline asm
	prmt.b32 %r622, %r590, %r591, %r592;
	// end inline asm
	mov.u32 	%r596, 29521;
	// begin inline asm
	prmt.b32 %r638, %r590, %r591, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r598, %r599, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r598, %r599, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r623, %r606, %r607, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r639, %r606, %r607, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r631, %r614, %r615, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r647, %r614, %r615, %r596;
	// end inline asm
	mov.u32 	%r648, 21520;
	// begin inline asm
	prmt.b32 %r621, %r622, %r623, %r648;
	// end inline asm
	mov.u32 	%r652, 30258;
	// begin inline asm
	prmt.b32 %r625, %r622, %r623, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r629, %r630, %r631, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r633, %r630, %r631, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r637, %r638, %r639, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r638, %r639, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r646, %r647, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r646, %r647, %r652;
	// end inline asm
	mul.hi.s32 	%r695, %r658, 715827883;
	shr.u32 	%r696, %r695, 31;
	shr.s32 	%r697, %r695, 2;
	add.s32 	%r698, %r697, %r696;
	mul.lo.s32 	%r699, %r698, 24;
	sub.s32 	%r700, %r658, %r699;
	add.s32 	%r701, %r700, %r188;
	mul.wide.s32 	%rd54, %r701, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r621;
	add.s32 	%r702, %r701, 128;
	mul.wide.u32 	%rd57, %r702, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r629;
	add.s32 	%r703, %r701, 64;
	mul.wide.u32 	%rd59, %r703, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r625;
	add.s32 	%r704, %r701, 192;
	mul.wide.u32 	%rd61, %r704, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r633;
	add.s32 	%r705, %r701, 32;
	mul.wide.u32 	%rd63, %r705, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r637;
	add.s32 	%r706, %r701, 160;
	mul.wide.u32 	%rd65, %r706, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r645;
	add.s32 	%r707, %r701, 96;
	mul.wide.u32 	%rd67, %r707, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r641;
	add.s32 	%r708, %r701, 224;
	mul.wide.u32 	%rd69, %r708, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r649;
	bar.sync 	0;
	cvt.u16.u32 	%rs43, %r656;
	add.s16 	%rs44, %rs5, %rs43;
	cvt.s16.s8 	%rs45, %rs44;
	mul.lo.s16 	%rs46, %rs45, 43;
	shr.u16 	%rs47, %rs46, 15;
	shr.s16 	%rs48, %rs46, 8;
	shr.u16 	%rs49, %rs48, 2;
	add.s16 	%rs50, %rs49, %rs47;
	mul.lo.s16 	%rs51, %rs50, 24;
	sub.s16 	%rs52, %rs44, %rs51;
	cvt.u32.u16 	%r709, %rs52;
	cvt.s32.s8 	%r710, %r709;
	add.s32 	%r711, %r3, %r710;
	mul.wide.s32 	%rd71, %r711, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r712, [%rd72];
	add.s32 	%r713, %r189, %r710;
	mul.wide.s32 	%rd73, %r713, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r714, [%rd74];
	add.s32 	%r715, %r190, %r710;
	mul.wide.u32 	%rd75, %r715, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r716, [%rd76];
	add.s32 	%r717, %r191, %r710;
	mul.wide.u32 	%rd77, %r717, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r718, [%rd78];
	add.s32 	%r719, %r192, %r710;
	mul.wide.u32 	%rd79, %r719, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r720, [%rd80];
	add.s32 	%r721, %r193, %r710;
	mul.wide.u32 	%rd81, %r721, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r722, [%rd82];
	add.s32 	%r723, %r194, %r710;
	mul.wide.u32 	%rd83, %r723, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r724, [%rd84];
	add.s32 	%r725, %r195, %r710;
	mul.wide.u32 	%rd85, %r725, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r726, [%rd86];
	add.s32 	%r727, %r196, %r710;
	mul.wide.u32 	%rd87, %r727, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r728, [%rd88];
	add.s32 	%r729, %r197, %r710;
	mul.wide.u32 	%rd89, %r729, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r730, [%rd90];
	add.s32 	%r731, %r198, %r710;
	mul.wide.s32 	%rd91, %r731, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r732, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r733, %r177, 0, 31, -1;
	shfl.sync.idx.b32	%r734, %r177, 1, 31, -1;
	shfl.sync.idx.b32	%r735, %r177, 2, 31, -1;
	shfl.sync.idx.b32	%r736, %r177, 3, 31, -1;
	shfl.sync.idx.b32	%r737, %r177, 4, 31, -1;
	shfl.sync.idx.b32	%r738, %r177, 5, 31, -1;
	shfl.sync.idx.b32	%r739, %r177, 6, 31, -1;
	shfl.sync.idx.b32	%r740, %r177, 7, 31, -1;
	shfl.sync.idx.b32	%r741, %r177, 8, 31, -1;
	shfl.sync.idx.b32	%r742, %r177, 9, 31, -1;
	shfl.sync.idx.b32	%r743, %r177, 10, 31, -1;
	shfl.sync.idx.b32	%r744, %r177, 11, 31, -1;
	shfl.sync.idx.b32	%r745, %r177, 12, 31, -1;
	shfl.sync.idx.b32	%r746, %r177, 13, 31, -1;
	shfl.sync.idx.b32	%r747, %r177, 14, 31, -1;
	shfl.sync.idx.b32	%r748, %r177, 15, 31, -1;
	add.s32 	%r749, %r733, %r710;
	mul.wide.s32 	%rd93, %r749, 4;
	add.s64 	%rd94, %rd40, %rd93;
	st.shared.u32 	[%rd94], %r712;
	add.s32 	%r750, %r734, %r710;
	mul.wide.s32 	%rd95, %r750, 4;
	add.s64 	%rd96, %rd40, %rd95;
	st.shared.u32 	[%rd96], %r714;
	add.s32 	%r751, %r735, %r710;
	mul.wide.s32 	%rd97, %r751, 4;
	add.s64 	%rd98, %rd40, %rd97;
	st.shared.u32 	[%rd98], %r716;
	add.s32 	%r752, %r736, %r710;
	mul.wide.s32 	%rd99, %r752, 4;
	add.s64 	%rd100, %rd40, %rd99;
	st.shared.u32 	[%rd100], %r718;
	add.s32 	%r753, %r737, %r710;
	mul.wide.s32 	%rd101, %r753, 4;
	add.s64 	%rd102, %rd40, %rd101;
	st.shared.u32 	[%rd102], %r720;
	add.s32 	%r754, %r738, %r710;
	mul.wide.s32 	%rd103, %r754, 4;
	add.s64 	%rd104, %rd40, %rd103;
	st.shared.u32 	[%rd104], %r722;
	add.s32 	%r755, %r739, %r710;
	mul.wide.s32 	%rd105, %r755, 4;
	add.s64 	%rd106, %rd40, %rd105;
	st.shared.u32 	[%rd106], %r724;
	add.s32 	%r756, %r740, %r710;
	mul.wide.s32 	%rd107, %r756, 4;
	add.s64 	%rd108, %rd40, %rd107;
	st.shared.u32 	[%rd108], %r726;
	add.s32 	%r757, %r741, %r710;
	mul.wide.s32 	%rd109, %r757, 4;
	add.s64 	%rd110, %rd40, %rd109;
	st.shared.u32 	[%rd110], %r728;
	add.s32 	%r758, %r742, %r710;
	mul.wide.s32 	%rd111, %r758, 4;
	add.s64 	%rd112, %rd40, %rd111;
	st.shared.u32 	[%rd112], %r730;
	selp.b32 	%r759, 0, %r732, %p230;
	add.s32 	%r760, %r743, %r710;
	mul.wide.s32 	%rd113, %r760, 4;
	add.s64 	%rd114, %rd40, %rd113;
	st.shared.u32 	[%rd114], %r759;
	add.s32 	%r761, %r744, %r710;
	mul.wide.s32 	%rd115, %r761, 4;
	add.s64 	%rd116, %rd40, %rd115;
	st.shared.u32 	[%rd116], %r482;
	add.s32 	%r762, %r745, %r710;
	mul.wide.s32 	%rd117, %r762, 4;
	add.s64 	%rd118, %rd40, %rd117;
	st.shared.u32 	[%rd118], %r482;
	add.s32 	%r763, %r746, %r710;
	mul.wide.s32 	%rd119, %r763, 4;
	add.s64 	%rd120, %rd40, %rd119;
	st.shared.u32 	[%rd120], %r482;
	add.s32 	%r764, %r747, %r710;
	mul.wide.s32 	%rd121, %r764, 4;
	add.s64 	%rd122, %rd40, %rd121;
	st.shared.u32 	[%rd122], %r482;
	add.s32 	%r765, %r748, %r710;
	mul.wide.s32 	%rd123, %r765, 4;
	add.s64 	%rd124, %rd40, %rd123;
	st.shared.u32 	[%rd124], %r482;
	bar.sync 	0;
	mov.u32 	%r93, %r482;
	mov.u32 	%r94, %r482;
	mov.u32 	%r95, %r482;
	mov.u32 	%r96, %r482;
	mov.u32 	%r97, %r482;
	mov.u32 	%r98, %r482;
	mov.u32 	%r99, %r482;
	mov.u32 	%r100, %r482;
	mov.u32 	%r101, %r482;
	mov.u32 	%r102, %r482;
	mov.u32 	%r103, %r482;
	mov.u32 	%r104, %r482;
	mov.u32 	%r105, %r482;
	mov.u32 	%r106, %r482;
	mov.u32 	%r107, %r482;
	mov.u32 	%r108, %r482;
	@%p229 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %oksrem2560
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r92, %r656, %r199;
	ld.shared.u32 	%r93, [%rd12];
	ld.shared.u32 	%r94, [%rd13];
	ld.shared.u32 	%r95, [%rd14+12];
	ld.shared.u32 	%r96, [%rd15+12];
	ld.shared.u32 	%r97, [%rd14+24];
	ld.shared.u32 	%r98, [%rd15+24];
	ld.shared.u32 	%r99, [%rd14+36];
	ld.shared.u32 	%r100, [%rd15+36];
	add.s32 	%r766, %r92, 12;
	mul.hi.u32 	%r767, %r766, -1431655765;
	shr.u32 	%r768, %r767, 4;
	mul.lo.s32 	%r769, %r768, 24;
	sub.s32 	%r770, %r766, %r769;
	add.s32 	%r771, %r200, %r770;
	mul.wide.u32 	%rd125, %r771, 4;
	add.s64 	%rd127, %rd40, %rd125;
	ld.shared.u32 	%r101, [%rd127];
	add.s32 	%r772, %r201, %r770;
	mul.wide.u32 	%rd128, %r772, 4;
	add.s64 	%rd129, %rd40, %rd128;
	ld.shared.u32 	%r102, [%rd129];
	cvt.u16.u32 	%rs53, %r92;
	add.s16 	%rs54, %rs53, 15;
	cvt.s16.s8 	%rs55, %rs54;
	mul.lo.s16 	%rs56, %rs55, 43;
	shr.u16 	%rs57, %rs56, 15;
	shr.s16 	%rs58, %rs56, 10;
	add.s16 	%rs59, %rs58, %rs57;
	mul.lo.s16 	%rs60, %rs59, 24;
	sub.s16 	%rs61, %rs54, %rs60;
	cvt.u32.u16 	%r773, %rs61;
	cvt.s32.s8 	%r774, %r773;
	add.s32 	%r775, %r200, %r774;
	mul.wide.s32 	%rd130, %r775, 4;
	add.s64 	%rd131, %rd40, %rd130;
	ld.shared.u32 	%r103, [%rd131];
	add.s32 	%r776, %r201, %r774;
	mul.wide.u32 	%rd132, %r776, 4;
	add.s64 	%rd133, %rd40, %rd132;
	ld.shared.u32 	%r104, [%rd133];
	add.s16 	%rs62, %rs53, 18;
	cvt.s16.s8 	%rs63, %rs62;
	mul.lo.s16 	%rs64, %rs63, 43;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 10;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs62, %rs68;
	cvt.u32.u16 	%r777, %rs69;
	cvt.s32.s8 	%r778, %r777;
	add.s32 	%r779, %r200, %r778;
	mul.wide.s32 	%rd134, %r779, 4;
	add.s64 	%rd135, %rd40, %rd134;
	ld.shared.u32 	%r105, [%rd135];
	add.s32 	%r780, %r201, %r778;
	mul.wide.u32 	%rd136, %r780, 4;
	add.s64 	%rd137, %rd40, %rd136;
	ld.shared.u32 	%r106, [%rd137];
	add.s16 	%rs70, %rs53, 21;
	cvt.s16.s8 	%rs71, %rs70;
	mul.lo.s16 	%rs72, %rs71, 43;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 10;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 24;
	sub.s16 	%rs77, %rs70, %rs76;
	cvt.u32.u16 	%r781, %rs77;
	cvt.s32.s8 	%r782, %r781;
	add.s32 	%r783, %r200, %r782;
	mul.wide.s32 	%rd138, %r783, 4;
	add.s64 	%rd139, %rd40, %rd138;
	ld.shared.u32 	%r107, [%rd139];
	add.s32 	%r784, %r201, %r782;
	mul.wide.u32 	%rd140, %r784, 4;
	add.s64 	%rd141, %rd40, %rd140;
	ld.shared.u32 	%r108, [%rd141];
$L__BB0_135:                            // %L8579
                                        //   in Loop: Header=BB0_134 Depth=1
	bar.sync 	0;
	mov.u32 	%r112, %r482;
	bra.uni 	$L__BB0_136;
$L__BB0_143:                            // %L19562
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, 0;
	mov.u32 	%r111, %r109;
$L__BB0_144:                            // %L19563
                                        //   in Loop: Header=BB0_136 Depth=2
	bar.sync 	0;
	add.s32 	%r112, %r112, 6;
	setp.ne.s32 	%p243, %r112, 24;
	@%p243 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_145;
$L__BB0_136:                            // %L8597
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r112, 0;
	selp.b32 	%r1178, %r93, 0, %p232;
	setp.eq.s32 	%p233, %r112, 6;
	selp.b32 	%r1179, %r97, %r1178, %p233;
	setp.eq.s32 	%p234, %r112, 12;
	selp.b32 	%r1180, %r101, %r1179, %p234;
	setp.eq.s32 	%p235, %r112, 18;
	selp.b32 	%r1181, %r105, %r1180, %p235;
	selp.b32 	%r1182, %r94, 0, %p232;
	selp.b32 	%r1183, %r98, %r1182, %p233;
	selp.b32 	%r1184, %r102, %r1183, %p234;
	selp.b32 	%r1185, %r106, %r1184, %p235;
	selp.b32 	%r1186, %r95, 0, %p232;
	selp.b32 	%r1187, %r99, %r1186, %p233;
	selp.b32 	%r1188, %r103, %r1187, %p234;
	selp.b32 	%r1189, %r107, %r1188, %p235;
	selp.b32 	%r1190, %r96, 0, %p232;
	selp.b32 	%r1191, %r100, %r1190, %p233;
	selp.b32 	%r1192, %r104, %r1191, %p234;
	selp.b32 	%r1193, %r108, %r1192, %p235;
	mov.u16 	%rs115, 25600;
	// begin inline asm
	mov.b32 %r791, {%rs115, %rs115};
	// end inline asm
	mov.u16 	%rs117, 21504;
	// begin inline asm
	mov.b32 %r802, {%rs117, %rs117};
	// end inline asm
	xor.b32  	%r790, %r1181, -2004318072;
	mov.u32 	%r927, 983055;
	// begin inline asm
	lop3.b32 %r788, %r927, %r790, %r791, 202;
	// end inline asm
	mov.u16 	%rs121, 18432;
	// begin inline asm
	mov.b32 %r792, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r791, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	mov.u32 	%r938, 15728880;
	// begin inline asm
	lop3.b32 %r799, %r938, %r790, %r802, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r804, %r802, %r803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r807, %r799, %r804;
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs117, %rs117};
	// end inline asm
	xor.b32  	%r836, %r1185, -2004318072;
	// begin inline asm
	lop3.b32 %r834, %r927, %r836, %r837, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r839, %r837, %r838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r842, %r834, %r839;
	// end inline asm
	// begin inline asm
	lop3.b32 %r845, %r938, %r836, %r848, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r849, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r850, %r848, %r849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r853, %r845, %r850;
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs117, %rs117};
	// end inline asm
	xor.b32  	%r882, %r1189, -2004318072;
	// begin inline asm
	lop3.b32 %r880, %r927, %r882, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	lop3.b32 %r891, %r938, %r882, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r896, %r894, %r895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r899, %r891, %r896;
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs117, %rs117};
	// end inline asm
	xor.b32  	%r928, %r1193, -2004318072;
	// begin inline asm
	lop3.b32 %r926, %r927, %r928, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r937, %r938, %r928, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r796;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r970, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r842;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r973, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r807;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r976, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r853;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r979, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r982, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r985, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r899;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r988, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r945;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r991, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r994, %r995}, {%r276, %r279}, {%r970}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1001, %r1002}, {%r276, %r279}, {%r973}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1008, %r1009}, {%r276, %r279}, {%r976}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1015, %r1016}, {%r276, %r279}, {%r979}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1022, %r1023}, {%r276, %r279}, {%r982}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1029, %r1030}, {%r276, %r279}, {%r985}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1036, %r1037}, {%r276, %r279}, {%r988}, {%r482, %r482};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1043, %r1044}, {%r276, %r279}, {%r991}, {%r482, %r482};
	// end inline asm
	@%p1 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_137;
$L__BB0_184:                            // %pass3911
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1050, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1052, %r1050, %r995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1055, %r328, %r994, %r1052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1059, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1061, %r1059, %r1002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1064, %r328, %r1001, %r1061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1068, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1070, %r1068, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r328, %r1008, %r1070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1077, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1079, %r1077, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1082, %r328, %r1015, %r1079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1086, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1088, %r1086, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r328, %r1022, %r1088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1095, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1097, %r1095, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r328, %r1029, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1104, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1106, %r1104, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r328, %r1036, %r1106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1113, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1115, %r1113, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r328, %r1043, %r1115;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r331, %r994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r328, %r995, %r1122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1129, %r331, %r1001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r328, %r1002, %r1129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r331, %r1008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r328, %r1009, %r1136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1143, %r331, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r328, %r1016, %r1143;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r331, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r328, %r1023, %r1150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r331, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r328, %r1030, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r331, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r328, %r1037, %r1164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r331, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r328, %r1044, %r1171;
	// end inline asm
	mov.u32 	%r1343, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1267, %r1268}, {%r372, %r375}, {%r1055, %r1125}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1275, %r1276}, {%r372, %r375}, {%r1064, %r1132}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1283, %r1284}, {%r372, %r375}, {%r1073, %r1139}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1291, %r1292}, {%r372, %r375}, {%r1082, %r1146}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1299, %r1300}, {%r372, %r375}, {%r1091, %r1153}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1307, %r1308}, {%r372, %r375}, {%r1100, %r1160}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1315, %r1316}, {%r372, %r375}, {%r1109, %r1167}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r372, %r375}, {%r1118, %r1174}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1267, %r1268, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1267, %r1268, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1275, %r1276, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1275, %r1276, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1283, %r1284, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1283, %r1284, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1291, %r1292, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1291, %r1292, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1299, %r1300, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1299, %r1300, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1307, %r1308, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1307, %r1308, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1323, %r1324, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1323, %r1324, %r652;
	// end inline asm
	add.s32 	%r1376, %r87, %r112;
	mul.hi.u32 	%r1377, %r1376, -1431655765;
	shr.u32 	%r1378, %r1377, 2;
	mul.lo.s32 	%r1379, %r1378, 6;
	sub.s32 	%r1380, %r1376, %r1379;
	shl.b32 	%r1381, %r1380, 4;
	add.s32 	%r1382, %r207, %r1381;
	mul.wide.u32 	%rd144, %r1382, 4;
	add.s64 	%rd146, %rd40, %rd144;
	st.shared.u32 	[%rd146], %r1266;
	cvt.u64.u32 	%rd147, %r1381;
	cvt.u64.u32 	%rd148, %r206;
	cvt.u64.u32 	%rd149, %r205;
	cvt.u64.u32 	%rd150, %r204;
	cvt.u64.u32 	%rd151, %r202;
	cvt.u64.u32 	%rd152, %r203;
	add.s64 	%rd153, %rd152, %rd151;
	add.s64 	%rd154, %rd153, %rd150;
	add.s64 	%rd155, %rd154, %rd149;
	add.s64 	%rd16, %rd155, %rd148;
	add.s64 	%rd156, %rd16, %rd147;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd158, %rd40, %rd157;
	st.shared.u32 	[%rd158+6304], %r1270;
	add.s32 	%r1383, %r209, %r1381;
	mul.wide.u32 	%rd159, %r1383, 4;
	add.s64 	%rd160, %rd40, %rd159;
	st.shared.u32 	[%rd160], %r1274;
	cvt.u64.u32 	%rd161, %r208;
	add.s64 	%rd162, %rd154, %rd161;
	add.s64 	%rd17, %rd162, %rd148;
	add.s64 	%rd163, %rd17, %rd147;
	shl.b64 	%rd164, %rd163, 2;
	add.s64 	%rd165, %rd40, %rd164;
	st.shared.u32 	[%rd165+6304], %r1278;
	st.shared.u32 	[%rd158+32], %r1282;
	st.shared.u32 	[%rd158+6336], %r1286;
	st.shared.u32 	[%rd165+32], %r1290;
	st.shared.u32 	[%rd165+6336], %r1294;
	add.s32 	%r1384, %r1376, 3;
	mul.hi.u32 	%r1385, %r1384, -1431655765;
	shr.u32 	%r1386, %r1385, 2;
	mul.lo.s32 	%r1387, %r1386, 6;
	sub.s32 	%r1388, %r1384, %r1387;
	shl.b32 	%r1389, %r1388, 4;
	add.s32 	%r1390, %r207, %r1389;
	mul.wide.u32 	%rd166, %r1390, 4;
	add.s64 	%rd167, %rd40, %rd166;
	st.shared.u32 	[%rd167], %r1298;
	cvt.u64.u32 	%rd168, %r1389;
	add.s64 	%rd169, %rd16, %rd168;
	shl.b64 	%rd170, %rd169, 2;
	add.s64 	%rd171, %rd40, %rd170;
	st.shared.u32 	[%rd171+6304], %r1302;
	add.s32 	%r1391, %r209, %r1389;
	mul.wide.u32 	%rd172, %r1391, 4;
	add.s64 	%rd173, %rd40, %rd172;
	st.shared.u32 	[%rd173], %r1306;
	add.s64 	%rd174, %rd17, %rd168;
	shl.b64 	%rd175, %rd174, 2;
	add.s64 	%rd176, %rd40, %rd175;
	st.shared.u32 	[%rd176+6304], %r1310;
	st.shared.u32 	[%rd171+32], %r1314;
	st.shared.u32 	[%rd171+6336], %r1318;
	st.shared.u32 	[%rd176+32], %r1322;
	st.shared.u32 	[%rd176+6336], %r1326;
	bar.sync 	0;
	add.s32 	%r233, %r88, %r112;
	cvt.u16.u32 	%rs126, %r233;
	cvt.s16.s8 	%rs127, %rs126;
	mul.lo.s16 	%rs128, %rs127, 43;
	shr.u16 	%rs129, %rs128, 15;
	shr.u16 	%rs130, %rs128, 8;
	add.s16 	%rs131, %rs130, %rs129;
	mul.lo.s16 	%rs132, %rs131, 6;
	sub.s16 	%rs133, %rs126, %rs132;
	cvt.s16.s8 	%rs134, %rs133;
	mul.wide.s16 	%r1392, %rs134, 16;
	add.s32 	%r1393, %r210, %r1392;
	mul.wide.s32 	%rd177, %r1393, 4;
	add.s64 	%rd178, %rd40, %rd177;
	ld.shared.u32 	%r1334, [%rd178];
	add.s32 	%r1394, %r211, %r1392;
	mul.wide.s32 	%rd179, %r1394, 4;
	add.s64 	%rd180, %rd40, %rd179;
	ld.shared.u32 	%r1341, [%rd180];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1330, %r1331}, {%r384, %r387}, {%r1334}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r384, %r387}, {%r1341}, {%r1343, %r1343};
	// end inline asm
	@%p236 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_185;
$L__BB0_187:                            // %pass6551
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1344, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1346, %r1344, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r422, %r1330, %r1346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1353, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1355, %r1353, %r1338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1358, %r422, %r1337, %r1355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1362, %r425, %r1330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r422, %r1331, %r1362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r425, %r1337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r422, %r1338, %r1369;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1414, %r1417}, {%r468, %r471}, {%r1349, %r1365}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1425}, {%r468, %r471}, {%r1358, %r1372}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1413, %r1414, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r1417, %r1417, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r1421, %r1421, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r1425, %r1425, %r1420;
	// end inline asm
	mov.u32 	%r1512, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1428, %r1512, %r1424, %r111;
	// end inline asm
	add.s32 	%r1515, %r233, 1;
	mul.hi.u32 	%r1516, %r1515, -1431655765;
	shr.u32 	%r1517, %r1516, 2;
	mul.lo.s32 	%r1518, %r1517, 6;
	sub.s32 	%r1519, %r1515, %r1518;
	shl.b32 	%r1520, %r1519, 4;
	add.s32 	%r1521, %r210, %r1520;
	mul.wide.u32 	%rd183, %r1521, 4;
	add.s64 	%rd185, %rd40, %rd183;
	ld.shared.u32 	%r1436, [%rd185];
	add.s32 	%r1522, %r211, %r1520;
	mul.wide.u32 	%rd186, %r1522, 4;
	add.s64 	%rd187, %rd40, %rd186;
	ld.shared.u32 	%r1443, [%rd187];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1453, %r1450}, {%r384, %r387}, {%r1436}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1462, %r1459}, {%r384, %r387}, {%r1443}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1446, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r1446, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r422, %r1453, %r1448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1455, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1457, %r1455, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1460, %r422, %r1462, %r1457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1464, %r425, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r422, %r1450, %r1464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r425, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r422, %r1459, %r1471;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1497, %r1500}, {%r468, %r471}, {%r1451, %r1467}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1508}, {%r468, %r471}, {%r1460, %r1474}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r1497, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r1500, %r1500, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r1504, %r1504, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r1508, %r1508, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r1512, %r1507, %r1428;
	// end inline asm
	add.s32 	%r3064, %r109, 2;
	setp.eq.s32 	%p237, %r3064, 40;
	@%p237 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_188;
$L__BB0_138:                            // %L15473
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p238, %r263, 8;
	@%p238 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_139;
$L__BB0_186:                            // %pass6989
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1523, %r110, 192, %r212;
	mul.wide.u32 	%rd188, %r1523, 4;
	add.s64 	%rd6, %rd4, %rd188;
	st.global.u32 	[%rd6], %r3066;
$L__BB0_139:                            // %L15672
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3064, 0;
	mov.u32 	%r3066, %r3064;
$L__BB0_188:                            // %oksrem7170
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1691, %r233, 2;
	mul.hi.u32 	%r1692, %r1691, -1431655765;
	shr.u32 	%r1693, %r1692, 2;
	mul.lo.s32 	%r1694, %r1693, 6;
	sub.s32 	%r1695, %r1691, %r1694;
	shl.b32 	%r1696, %r1695, 4;
	add.s32 	%r1697, %r210, %r1696;
	mul.wide.u32 	%rd189, %r1697, 4;
	add.s64 	%rd191, %rd40, %rd189;
	ld.shared.u32 	%r1529, [%rd191];
	add.s32 	%r1698, %r211, %r1696;
	mul.wide.u32 	%rd192, %r1698, 4;
	add.s64 	%rd193, %rd40, %rd192;
	ld.shared.u32 	%r1536, [%rd193];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1546, %r1543}, {%r384, %r387}, {%r1529}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1555, %r1552}, {%r384, %r387}, {%r1536}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1539, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1541, %r1539, %r1543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1544, %r422, %r1546, %r1541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1548, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r1548, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r422, %r1555, %r1550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r425, %r1546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r422, %r1543, %r1557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r425, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r422, %r1552, %r1564;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1590, %r1593}, {%r468, %r471}, {%r1544, %r1560}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1597, %r1601}, {%r468, %r471}, {%r1553, %r1567}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1589, %r1590, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1592, %r1593, %r1593, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r1597, %r1597, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1512, %r1600, %r3066;
	// end inline asm
	add.s32 	%r1699, %r233, 3;
	mul.hi.u32 	%r1700, %r1699, -1431655765;
	shr.u32 	%r1701, %r1700, 2;
	mul.lo.s32 	%r1702, %r1701, 6;
	sub.s32 	%r1703, %r1699, %r1702;
	shl.b32 	%r1704, %r1703, 4;
	add.s32 	%r1705, %r210, %r1704;
	mul.wide.u32 	%rd194, %r1705, 4;
	add.s64 	%rd195, %rd40, %rd194;
	ld.shared.u32 	%r1612, [%rd195];
	add.s32 	%r1706, %r211, %r1704;
	mul.wide.u32 	%rd196, %r1706, 4;
	add.s64 	%rd197, %rd40, %rd196;
	ld.shared.u32 	%r1619, [%rd197];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1629, %r1626}, {%r384, %r387}, {%r1612}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1638, %r1635}, {%r384, %r387}, {%r1619}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1622, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1624, %r1622, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r422, %r1629, %r1624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1631, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1633, %r1631, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1636, %r422, %r1638, %r1633;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r425, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r422, %r1626, %r1640;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r425, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r422, %r1635, %r1647;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1673, %r1676}, {%r468, %r471}, {%r1627, %r1643}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1680, %r1684}, {%r468, %r471}, {%r1636, %r1650}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1672, %r1673, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r1676, %r1676, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r1680, %r1680, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r1512, %r1683, %r1604;
	// end inline asm
	add.s32 	%r3067, %r3064, 2;
	setp.eq.s32 	%p239, %r3067, 40;
	@%p239 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_189;
$L__BB0_140:                            // %L17418
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p240, %r263, 8;
	@%p240 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_141;
$L__BB0_194:                            // %pass7842
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1707, %r110, 192, %r212;
	mul.wide.u32 	%rd198, %r1707, 4;
	add.s64 	%rd7, %rd4, %rd198;
	st.global.u32 	[%rd7], %r3069;
$L__BB0_141:                            // %L17617
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3067, 0;
	mov.u32 	%r3069, %r3067;
$L__BB0_189:                            // %oksrem8023
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1875, %r233, 4;
	mul.hi.u32 	%r1876, %r1875, -1431655765;
	shr.u32 	%r1877, %r1876, 2;
	mul.lo.s32 	%r1878, %r1877, 6;
	sub.s32 	%r1879, %r1875, %r1878;
	shl.b32 	%r1880, %r1879, 4;
	add.s32 	%r1881, %r210, %r1880;
	mul.wide.u32 	%rd199, %r1881, 4;
	add.s64 	%rd201, %rd40, %rd199;
	ld.shared.u32 	%r1713, [%rd201];
	add.s32 	%r1882, %r211, %r1880;
	mul.wide.u32 	%rd202, %r1882, 4;
	add.s64 	%rd203, %rd40, %rd202;
	ld.shared.u32 	%r1720, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1730, %r1727}, {%r384, %r387}, {%r1713}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1739, %r1736}, {%r384, %r387}, {%r1720}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1723, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r1723, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r422, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r1732, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r422, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r425, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r422, %r1727, %r1741;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r425, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r422, %r1736, %r1748;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1774, %r1777}, {%r468, %r471}, {%r1728, %r1744}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1781, %r1785}, {%r468, %r471}, {%r1737, %r1751}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1774, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r1777, %r1777, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r1781, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1785, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1512, %r1784, %r3069;
	// end inline asm
	add.s32 	%r1883, %r233, 5;
	mul.hi.u32 	%r1884, %r1883, -1431655765;
	shr.u32 	%r1885, %r1884, 2;
	mul.lo.s32 	%r1886, %r1885, 6;
	sub.s32 	%r1887, %r1883, %r1886;
	shl.b32 	%r1888, %r1887, 4;
	add.s32 	%r1889, %r210, %r1888;
	mul.wide.u32 	%rd204, %r1889, 4;
	add.s64 	%rd205, %rd40, %rd204;
	ld.shared.u32 	%r1796, [%rd205];
	add.s32 	%r1890, %r211, %r1888;
	mul.wide.u32 	%rd206, %r1890, 4;
	add.s64 	%rd207, %rd40, %rd206;
	ld.shared.u32 	%r1803, [%rd207];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1813, %r1810}, {%r384, %r387}, {%r1796}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1822, %r1819}, {%r384, %r387}, {%r1803}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1806, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r1806, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r422, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1815, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1815, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r422, %r1822, %r1817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r425, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r422, %r1810, %r1824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1831, %r425, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r422, %r1819, %r1831;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1857, %r1860}, {%r468, %r471}, {%r1811, %r1827}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1864, %r1868}, {%r468, %r471}, {%r1820, %r1834}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r1857, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r1860, %r1860, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1864, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1512, %r1867, %r1788;
	// end inline asm
	add.s32 	%r109, %r3067, 2;
	setp.eq.s32 	%p241, %r109, 40;
	@%p241 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_144;
$L__BB0_142:                            // %L19363
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p242, %r263, 8;
	@%p242 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass8695
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1891, %r110, 192, %r212;
	mul.wide.u32 	%rd208, %r1891, 4;
	add.s64 	%rd8, %rd4, %rd208;
	st.global.u32 	[%rd8], %r111;
	bra.uni 	$L__BB0_143;
$L__BB0_145:                            // %L19584.preheader
                                        //   in Loop: Header=BB0_134 Depth=1
	mov.u16 	%rs189, %rs1;
	mov.u32 	%r3055, %r1343;
	bra.uni 	$L__BB0_146;
$L__BB0_154:                            // %L30549
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, %r2783;
	mov.u32 	%r111, %r2783;
$L__BB0_155:                            // %L30550
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r3055, %r3055, 6;
	add.s16 	%rs189, %rs189, 6;
	setp.ne.s32 	%p254, %r3055, 24;
	@%p254 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_156;
$L__BB0_146:                            // %L19584
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p244, %r3055, 0;
	selp.b32 	%r2588, %r93, 0, %p244;
	setp.eq.s32 	%p245, %r3055, 6;
	selp.b32 	%r2589, %r97, %r2588, %p245;
	setp.eq.s32 	%p246, %r3055, 12;
	selp.b32 	%r2590, %r101, %r2589, %p246;
	setp.eq.s32 	%p247, %r3055, 18;
	selp.b32 	%r2591, %r105, %r2590, %p247;
	selp.b32 	%r2592, %r94, 0, %p244;
	selp.b32 	%r2593, %r98, %r2592, %p245;
	selp.b32 	%r2594, %r102, %r2593, %p246;
	selp.b32 	%r2595, %r106, %r2594, %p247;
	selp.b32 	%r2596, %r95, 0, %p244;
	selp.b32 	%r2597, %r99, %r2596, %p245;
	selp.b32 	%r2598, %r103, %r2597, %p246;
	selp.b32 	%r2599, %r107, %r2598, %p247;
	selp.b32 	%r2600, %r96, 0, %p244;
	selp.b32 	%r2601, %r100, %r2600, %p245;
	selp.b32 	%r2602, %r104, %r2601, %p246;
	selp.b32 	%r2603, %r108, %r2602, %p247;
	// begin inline asm
	mov.b32 %r1921, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r1932, {%rs117, %rs117};
	// end inline asm
	shr.u32 	%r2604, %r2591, 8;
	xor.b32  	%r1931, %r2604, 8947848;
	// begin inline asm
	lop3.b32 %r1918, %r927, %r1931, %r1921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1922, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1923, %r1921, %r1922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1926, %r1918, %r1923;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1929, %r938, %r1931, %r1932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1934, %r1932, %r1933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1937, %r1929, %r1934;
	// end inline asm
	// begin inline asm
	mov.b32 %r1967, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r1978, {%rs117, %rs117};
	// end inline asm
	shr.u32 	%r2605, %r2595, 8;
	xor.b32  	%r1977, %r2605, 8947848;
	// begin inline asm
	lop3.b32 %r1964, %r927, %r1977, %r1967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1969, %r1967, %r1968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1972, %r1964, %r1969;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1975, %r938, %r1977, %r1978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1980, %r1978, %r1979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1983, %r1975, %r1980;
	// end inline asm
	// begin inline asm
	mov.b32 %r2013, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r2024, {%rs117, %rs117};
	// end inline asm
	shr.u32 	%r2606, %r2599, 8;
	xor.b32  	%r2023, %r2606, 8947848;
	// begin inline asm
	lop3.b32 %r2010, %r927, %r2023, %r2013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2014, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2015, %r2013, %r2014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2018, %r2010, %r2015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2021, %r938, %r2023, %r2024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2025, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2026, %r2024, %r2025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2029, %r2021, %r2026;
	// end inline asm
	// begin inline asm
	mov.b32 %r2059, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	mov.b32 %r2070, {%rs117, %rs117};
	// end inline asm
	shr.u32 	%r2607, %r2603, 8;
	xor.b32  	%r2069, %r2607, 8947848;
	// begin inline asm
	lop3.b32 %r2056, %r927, %r2069, %r2059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2060, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2061, %r2059, %r2060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2064, %r2056, %r2061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2067, %r938, %r2069, %r2070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2071, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2072, %r2070, %r2071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2075, %r2067, %r2072;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1926;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r1972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2081, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r1937;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2084, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r1983;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2087, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2018;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2090, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r2064;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2093, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2029;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2096, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2075;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2099, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2165, %r2162}, {%r276, %r279}, {%r2078}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2174, %r2171}, {%r276, %r279}, {%r2081}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2183, %r2180}, {%r276, %r279}, {%r2084}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2192, %r2189}, {%r276, %r279}, {%r2087}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2201, %r2198}, {%r276, %r279}, {%r2090}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2210, %r2207}, {%r276, %r279}, {%r2093}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2219, %r2216}, {%r276, %r279}, {%r2096}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2228, %r2225}, {%r276, %r279}, {%r2099}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2158, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2160, %r2158, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r328, %r2165, %r2160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2167, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r2167, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r328, %r2174, %r2169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2176, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r2176, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r328, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2185, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r2185, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r328, %r2192, %r2187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2194, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r2194, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r328, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2203, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2205, %r2203, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2208, %r328, %r2210, %r2205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2212, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2214, %r2212, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r328, %r2219, %r2214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2221, %r331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r2221, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r328, %r2228, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r331, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r328, %r2162, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r331, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r328, %r2171, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r331, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r328, %r2180, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r331, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r328, %r2189, %r2251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r331, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r328, %r2198, %r2258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r331, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r328, %r2207, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r331, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r328, %r2216, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r331, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r328, %r2225, %r2279;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2359, %r2360}, {%r372, %r375}, {%r2163, %r2233}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2367, %r2368}, {%r372, %r375}, {%r2172, %r2240}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2375, %r2376}, {%r372, %r375}, {%r2181, %r2247}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2383, %r2384}, {%r372, %r375}, {%r2190, %r2254}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2391, %r2392}, {%r372, %r375}, {%r2199, %r2261}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2399, %r2400}, {%r372, %r375}, {%r2208, %r2268}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2408}, {%r372, %r375}, {%r2217, %r2275}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2415, %r2416}, {%r372, %r375}, {%r2226, %r2282}, {%r1343, %r1343}, %r213, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2358, %r2359, %r2360, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2362, %r2359, %r2360, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2366, %r2367, %r2368, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2370, %r2367, %r2368, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2374, %r2375, %r2376, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2375, %r2376, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2383, %r2384, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2386, %r2383, %r2384, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2390, %r2391, %r2392, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2394, %r2391, %r2392, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2399, %r2400, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2399, %r2400, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2407, %r2408, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2407, %r2408, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2415, %r2416, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2415, %r2416, %r652;
	// end inline asm
	add.s32 	%r2608, %r86, %r3055;
	mul.hi.u32 	%r2609, %r2608, -1431655765;
	shr.u32 	%r2610, %r2609, 2;
	mul.lo.s32 	%r2611, %r2610, 6;
	sub.s32 	%r2612, %r2608, %r2611;
	shl.b32 	%r2613, %r2612, 4;
	add.s32 	%r2614, %r207, %r2613;
	mul.wide.u32 	%rd209, %r2614, 4;
	add.s64 	%rd211, %rd40, %rd209;
	st.shared.u32 	[%rd211], %r2358;
	cvt.u64.u32 	%rd212, %r2613;
	add.s64 	%rd213, %rd16, %rd212;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd40, %rd214;
	st.shared.u32 	[%rd215+6304], %r2362;
	add.s32 	%r2615, %r209, %r2613;
	mul.wide.u32 	%rd216, %r2615, 4;
	add.s64 	%rd217, %rd40, %rd216;
	st.shared.u32 	[%rd217], %r2366;
	add.s64 	%rd218, %rd17, %rd212;
	shl.b64 	%rd219, %rd218, 2;
	add.s64 	%rd220, %rd40, %rd219;
	st.shared.u32 	[%rd220+6304], %r2370;
	st.shared.u32 	[%rd215+32], %r2374;
	st.shared.u32 	[%rd215+6336], %r2378;
	st.shared.u32 	[%rd220+32], %r2382;
	st.shared.u32 	[%rd220+6336], %r2386;
	add.s32 	%r2616, %r87, %r3055;
	add.s32 	%r2617, %r2616, 27;
	mul.hi.u32 	%r2618, %r2617, -1431655765;
	shr.u32 	%r2619, %r2618, 2;
	mul.lo.s32 	%r2620, %r2619, 6;
	sub.s32 	%r2621, %r2617, %r2620;
	shl.b32 	%r2622, %r2621, 4;
	add.s32 	%r2623, %r207, %r2622;
	mul.wide.u32 	%rd221, %r2623, 4;
	add.s64 	%rd222, %rd40, %rd221;
	st.shared.u32 	[%rd222], %r2390;
	cvt.u64.u32 	%rd223, %r2622;
	add.s64 	%rd224, %rd16, %rd223;
	shl.b64 	%rd225, %rd224, 2;
	add.s64 	%rd226, %rd40, %rd225;
	st.shared.u32 	[%rd226+6304], %r2394;
	add.s32 	%r2624, %r209, %r2622;
	mul.wide.u32 	%rd227, %r2624, 4;
	add.s64 	%rd228, %rd40, %rd227;
	st.shared.u32 	[%rd228], %r2398;
	add.s64 	%rd229, %rd17, %rd223;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd231, %rd40, %rd230;
	st.shared.u32 	[%rd231+6304], %r2402;
	st.shared.u32 	[%rd226+32], %r2406;
	st.shared.u32 	[%rd226+6336], %r2410;
	st.shared.u32 	[%rd231+32], %r2414;
	st.shared.u32 	[%rd231+6336], %r2418;
	bar.sync 	0;
	mul.hi.s16 	%rs183, %rs189, 10923;
	shr.u16 	%rs184, %rs183, 15;
	add.s16 	%rs185, %rs183, %rs184;
	mul.lo.s16 	%rs186, %rs185, 6;
	sub.s16 	%rs187, %rs189, %rs186;
	mul.wide.s16 	%r2625, %rs187, 16;
	add.s32 	%r2626, %r210, %r2625;
	mul.wide.s32 	%rd232, %r2626, 4;
	add.s64 	%rd233, %rd40, %rd232;
	ld.shared.u32 	%r2426, [%rd233];
	add.s32 	%r2627, %r211, %r2625;
	mul.wide.s32 	%rd234, %r2627, 4;
	add.s64 	%rd235, %rd40, %rd234;
	ld.shared.u32 	%r2433, [%rd235];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2443, %r2440}, {%r384, %r387}, {%r2426}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2452, %r2449}, {%r384, %r387}, {%r2433}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2436, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2438, %r2436, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2441, %r422, %r2443, %r2438;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2445, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2447, %r2445, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2450, %r422, %r2452, %r2447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r425, %r2443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r422, %r2440, %r2454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2461, %r425, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r422, %r2449, %r2461;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2487, %r2490}, {%r468, %r471}, {%r2441, %r2457}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2494, %r2498}, {%r468, %r471}, {%r2450, %r2464}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r2487, %r2487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r2490, %r2490, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r2494, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r2498, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r1512, %r2497, %r111;
	// end inline asm
	add.s32 	%r140, %r88, %r3055;
	add.s32 	%r2628, %r140, 25;
	mul.hi.u32 	%r2629, %r2628, -1431655765;
	shr.u32 	%r2630, %r2629, 2;
	mul.lo.s32 	%r2631, %r2630, 6;
	sub.s32 	%r2632, %r2628, %r2631;
	shl.b32 	%r2633, %r2632, 4;
	add.s32 	%r2634, %r210, %r2633;
	mul.wide.u32 	%rd236, %r2634, 4;
	add.s64 	%rd237, %rd40, %rd236;
	ld.shared.u32 	%r2509, [%rd237];
	add.s32 	%r2635, %r211, %r2633;
	mul.wide.u32 	%rd238, %r2635, 4;
	add.s64 	%rd239, %rd40, %rd238;
	ld.shared.u32 	%r2516, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2526, %r2523}, {%r384, %r387}, {%r2509}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2535, %r2532}, {%r384, %r387}, {%r2516}, {%r1343, %r1343};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2519, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r2519, %r2523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r422, %r2526, %r2521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2528, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2530, %r2528, %r2532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2533, %r422, %r2535, %r2530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2537, %r425, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2540, %r422, %r2523, %r2537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r425, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r422, %r2532, %r2544;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2570, %r2573}, {%r468, %r471}, {%r2524, %r2540}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2577, %r2581}, {%r468, %r471}, {%r2533, %r2547}, {%r1343, %r1343}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2569, %r2570, %r2570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r2573, %r2573, %r2569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2576, %r2577, %r2577, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r2581, %r2581, %r2576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r1512, %r2580, %r2501;
	// end inline asm
	add.s32 	%r3070, %r109, 2;
	setp.ne.s32 	%p248, %r3070, 40;
	@%p248 bra 	$L__BB0_149;
// %bb.147:                             // %L26460
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p249, %r263, 8;
	@%p249 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_148;
$L__BB0_191:                            // %pass11877
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2636, %r110, 192, %r212;
	mul.wide.u32 	%rd240, %r2636, 4;
	add.s64 	%rd9, %rd4, %rd240;
	st.global.u32 	[%rd9], %r3072;
$L__BB0_148:                            // %L26659
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3070, 0;
	mov.u32 	%r3072, %r3070;
$L__BB0_149:                            // %oksrem12058
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r2804, %r140, 26;
	mul.hi.u32 	%r2805, %r2804, -1431655765;
	shr.u32 	%r2806, %r2805, 2;
	mul.lo.s32 	%r2807, %r2806, 6;
	sub.s32 	%r2808, %r2804, %r2807;
	shl.b32 	%r2809, %r2808, 4;
	add.s32 	%r2810, %r210, %r2809;
	mul.wide.u32 	%rd241, %r2810, 4;
	add.s64 	%rd243, %rd40, %rd241;
	ld.shared.u32 	%r2642, [%rd243];
	add.s32 	%r2811, %r211, %r2809;
	mul.wide.u32 	%rd244, %r2811, 4;
	add.s64 	%rd245, %rd40, %rd244;
	ld.shared.u32 	%r2649, [%rd245];
	mov.u32 	%r2783, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2659, %r2656}, {%r384, %r387}, {%r2642}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2668, %r2665}, {%r384, %r387}, {%r2649}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r422, %r2659, %r2654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r422, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r425, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r422, %r2656, %r2670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r425, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2680, %r422, %r2665, %r2677;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2703, %r2706}, {%r468, %r471}, {%r2657, %r2673}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2710, %r2714}, {%r468, %r471}, {%r2666, %r2680}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2703, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r2706, %r2706, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r2710, %r2710, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2713, %r2714, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2717, %r1512, %r2713, %r3072;
	// end inline asm
	add.s32 	%r2812, %r140, 27;
	mul.hi.u32 	%r2813, %r2812, -1431655765;
	shr.u32 	%r2814, %r2813, 2;
	mul.lo.s32 	%r2815, %r2814, 6;
	sub.s32 	%r2816, %r2812, %r2815;
	shl.b32 	%r2817, %r2816, 4;
	add.s32 	%r2818, %r210, %r2817;
	mul.wide.u32 	%rd246, %r2818, 4;
	add.s64 	%rd247, %rd40, %rd246;
	ld.shared.u32 	%r2725, [%rd247];
	add.s32 	%r2819, %r211, %r2817;
	mul.wide.u32 	%rd248, %r2819, 4;
	add.s64 	%rd249, %rd40, %rd248;
	ld.shared.u32 	%r2732, [%rd249];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2742, %r2739}, {%r384, %r387}, {%r2725}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2751, %r2748}, {%r384, %r387}, {%r2732}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2735, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r2735, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r422, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2744, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2744, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r422, %r2751, %r2746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2753, %r425, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r422, %r2739, %r2753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2760, %r425, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r422, %r2748, %r2760;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2786, %r2789}, {%r468, %r471}, {%r2740, %r2756}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2793, %r2797}, {%r468, %r471}, {%r2749, %r2763}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r2786, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r2789, %r2789, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r2793, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2796, %r2797, %r2797, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r1512, %r2796, %r2717;
	// end inline asm
	add.s32 	%r3073, %r3070, 2;
	setp.eq.s32 	%p250, %r3073, 40;
	@%p250 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_152;
$L__BB0_150:                            // %L28405
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p251, %r263, 8;
	@%p251 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12730
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2820, %r110, 192, %r212;
	mul.wide.u32 	%rd250, %r2820, 4;
	add.s64 	%rd10, %rd4, %rd250;
	st.global.u32 	[%rd10], %r3075;
$L__BB0_151:                            // %L28604
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3073, 0;
	mov.u32 	%r3075, %r3073;
$L__BB0_152:                            // %oksrem12911
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r2988, %r140, 28;
	mul.hi.u32 	%r2989, %r2988, -1431655765;
	shr.u32 	%r2990, %r2989, 2;
	mul.lo.s32 	%r2991, %r2990, 6;
	sub.s32 	%r2992, %r2988, %r2991;
	shl.b32 	%r2993, %r2992, 4;
	add.s32 	%r2994, %r210, %r2993;
	mul.wide.u32 	%rd251, %r2994, 4;
	add.s64 	%rd253, %rd40, %rd251;
	ld.shared.u32 	%r2826, [%rd253];
	add.s32 	%r2995, %r211, %r2993;
	mul.wide.u32 	%rd254, %r2995, 4;
	add.s64 	%rd255, %rd40, %rd254;
	ld.shared.u32 	%r2833, [%rd255];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2843, %r2840}, {%r384, %r387}, {%r2826}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2852, %r2849}, {%r384, %r387}, {%r2833}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2836, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r2836, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r422, %r2843, %r2838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2845, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2847, %r2845, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r422, %r2852, %r2847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2854, %r425, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r422, %r2840, %r2854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2861, %r425, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r422, %r2849, %r2861;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2887, %r2890}, {%r468, %r471}, {%r2841, %r2857}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2894, %r2898}, {%r468, %r471}, {%r2850, %r2864}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r2887, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r2890, %r2890, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r2894, %r2894, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r2898, %r2898, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r1512, %r2897, %r3075;
	// end inline asm
	add.s32 	%r2996, %r140, 29;
	mul.hi.u32 	%r2997, %r2996, -1431655765;
	shr.u32 	%r2998, %r2997, 2;
	mul.lo.s32 	%r2999, %r2998, 6;
	sub.s32 	%r3000, %r2996, %r2999;
	shl.b32 	%r3001, %r3000, 4;
	add.s32 	%r3002, %r210, %r3001;
	mul.wide.u32 	%rd256, %r3002, 4;
	add.s64 	%rd257, %rd40, %rd256;
	ld.shared.u32 	%r2909, [%rd257];
	add.s32 	%r3003, %r211, %r3001;
	mul.wide.u32 	%rd258, %r3003, 4;
	add.s64 	%rd259, %rd40, %rd258;
	ld.shared.u32 	%r2916, [%rd259];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2926, %r2923}, {%r384, %r387}, {%r2909}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2935, %r2932}, {%r384, %r387}, {%r2916}, {%r2783, %r2783};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2919, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r2919, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r422, %r2926, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r422, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2937, %r425, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r422, %r2923, %r2937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r425, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r422, %r2932, %r2944;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2970, %r2973}, {%r468, %r471}, {%r2924, %r2940}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2977, %r2981}, {%r468, %r471}, {%r2933, %r2947}, {%r2783, %r2783}, %r238, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2970, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r2973, %r2973, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r2977, %r2977, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r2981, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1512, %r2980, %r2901;
	// end inline asm
	add.s32 	%r109, %r3073, 2;
	setp.eq.s32 	%p252, %r109, 40;
	@%p252 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_155;
$L__BB0_153:                            // %L30350
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p253, %r263, 8;
	@%p253 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_154;
$L__BB0_193:                            // %pass13583
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r3004, %r110, 192, %r212;
	mul.wide.u32 	%rd260, %r3004, 4;
	add.s64 	%rd11, %rd4, %rd260;
	st.global.u32 	[%rd11], %r111;
	bra.uni 	$L__BB0_154;
$L__BB0_157:                            // %L30581
	st.global.u32 	[%rd5], %r2783;
	ret;
$L__BB0_137:                            // %post_box_union
	mov.u64 	%rd142, exception2634;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd143;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_185:                            // %post_box_union6546
	mov.u64 	%rd181, exception2634;
	cvta.global.u64 	%rd182, %rd181;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd182;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
