// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2634[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<257>;
	.reg .b16 	%rs<268>;
	.reg .b32 	%r<3064>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<265>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r259, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd16, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r260, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r260, 13919;
	@%p4 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_1;
$L__BB0_164:                            // %L10
	ld.param.u64 	%rd17, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r261, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r262, %r2, %r261;
	add.s32 	%r263, %r262, %r5;
	mul.wide.u32 	%rd23, %r263, 4;
	add.s64 	%rd5, %rd17, %rd23;
	mov.u32 	%r264, 1;
	st.global.u32 	[%rd5], %r264;
	and.b32  	%r6, %r261, 3;
	shr.u32 	%r7, %r261, 2;
	mul.lo.s32 	%r265, %r6, %r7;
	and.b32  	%r266, %r265, 7;
	cvt.rn.f32.s32 	%f205, %r266;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f1, %f205, %f206;
	abs.f32 	%f788, %f1;
	setp.lt.f32 	%p5, %f788, 0f40000000;
	setp.gtu.f32 	%p256, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p5 bra 	$L__BB0_176;
// %bb.165:
	@%p256 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_166;
$L__BB0_172:
	mov.b32 	%r151, %f788;
	and.b32  	%r267, %r151, 8388607;
	or.b32  	%r3047, %r267, 1065353216;
	mov.b32 	%f783, %r3047;
	add.s32 	%r268, %r151, -1073741824;
	and.b32  	%r3048, %r268, -8388608;
	setp.eq.s32 	%p12, %r3048, 0;
	@%p12 bra 	$L__BB0_175;
// %bb.173:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_174:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r269, %r3048, 192937984;
	add.s32 	%r270, %r3047, %r269;
	mov.b32 	%f217, %r270;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3048, %r3048, %r269;
	mov.b32 	%r3047, %f783;
	setp.ne.s32 	%p13, %r3048, 0;
	setp.ne.s32 	%p14, %r3047, 0;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_174;
$L__BB0_175:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p16, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p16;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_176;
$L__BB0_166:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p7, %r150, 1073741824;
	@%p7 bra 	$L__BB0_171;
// %bb.167:
	setp.lt.u32 	%p8, %r150, -2147483647;
	@%p8 bra 	$L__BB0_169;
// %bb.168:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p11, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p11;
	bra.uni 	$L__BB0_171;
$L__BB0_169:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p9, %f172, 0f40800000;
	@%p9 bra 	$L__BB0_171;
// %bb.170:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p10, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p10;
$L__BB0_171:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_176:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p17, %f226, 0f7F800000;
	mov.b32 	%r271, %f1;
	and.b32  	%r158, %r271, -2147483648;
	@%p17 bra 	$L__BB0_178;
// %bb.177:
	mov.b32 	%r272, %f784;
	or.b32  	%r273, %r158, %r272;
	mov.b32 	%f784, %r273;
$L__BB0_178:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r280, %f227;
	and.b32  	%r281, %r280, -2147483648;
	or.b32  	%r282, %r281, 1056964608;
	mov.b32 	%f228, %r282;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p18, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p18;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p19, %f231, 0f3F000000;
	shl.b32 	%r161, %r261, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r288, %r162, %r7;
	cvt.rn.f32.s32 	%f259, %r288;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p25, %f734, 0f40000000;
	@%p25 bra 	$L__BB0_13;
// %bb.2:
	setp.gtu.f32 	%p26, %f734, 0f4B800000;
	@%p26 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f734;
	and.b32  	%r289, %r9, 8388607;
	or.b32  	%r2996, %r289, 1065353216;
	mov.b32 	%f733, %r2996;
	add.s32 	%r290, %r9, -1073741824;
	and.b32  	%r2997, %r290, -8388608;
	setp.eq.s32 	%p32, %r2997, 0;
	@%p32 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r291, %r2997, 192937984;
	add.s32 	%r292, %r2996, %r291;
	mov.b32 	%f271, %r292;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2997, %r2997, %r291;
	mov.b32 	%r2996, %f733;
	setp.ne.s32 	%p33, %r2997, 0;
	setp.ne.s32 	%p34, %r2996, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p36, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f4, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p27, %r8, 1073741824;
	@%p27 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p28, %r8, -2147483647;
	@%p28 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p31, %f4, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p31;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p29, %f4, 0f40800000;
	@%p29 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f4;
	setp.ge.f32 	%p30, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p30;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p19;
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p37, %f280, 0f7F800000;
	@%p37 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r293, %f186;
	and.b32  	%r294, %r293, -2147483648;
	mov.b32 	%r295, %f734;
	or.b32  	%r296, %r294, %r295;
	mov.b32 	%f734, %r296;
$L__BB0_15:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r297, %f282;
	and.b32  	%r298, %r297, -2147483648;
	or.b32  	%r299, %r298, 1056964608;
	mov.b32 	%f283, %r299;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p38, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p38;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p39, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p39;
	setp.eq.s32 	%p45, %r163, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p45 bra 	$L__BB0_31;
// %bb.16:                              // %L242
	mul.lo.s32 	%r305, %r163, %r7;
	mul.hi.u32 	%r306, %r305, -1431655765;
	shr.u32 	%r307, %r306, 4;
	mul.lo.s32 	%r308, %r307, 24;
	sub.s32 	%r309, %r305, %r308;
	cvt.rn.f32.s32 	%f311, %r309;
	div.approx.f32 	%f20, %f311, %f260;
	abs.f32 	%f738, %f20;
	setp.lt.f32 	%p46, %f738, 0f40000000;
	@%p46 bra 	$L__BB0_28;
// %bb.17:
	setp.gtu.f32 	%p47, %f738, 0f4B800000;
	@%p47 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_18;
$L__BB0_24:
	mov.b32 	%r17, %f738;
	and.b32  	%r310, %r17, 8388607;
	or.b32  	%r2998, %r310, 1065353216;
	mov.b32 	%f737, %r2998;
	add.s32 	%r311, %r17, -1073741824;
	and.b32  	%r2999, %r311, -8388608;
	setp.eq.s32 	%p53, %r2999, 0;
	@%p53 bra 	$L__BB0_27;
// %bb.25:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_26:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r2999, 192937984;
	add.s32 	%r313, %r2998, %r312;
	mov.b32 	%f323, %r313;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2999, %r2999, %r312;
	mov.b32 	%r2998, %f737;
	setp.ne.s32 	%p54, %r2999, 0;
	setp.ne.s32 	%p55, %r2998, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_26;
$L__BB0_27:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p57, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_28;
$L__BB0_18:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f23, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f23;
	setp.lt.u32 	%p48, %r16, 1073741824;
	@%p48 bra 	$L__BB0_23;
// %bb.19:
	setp.lt.u32 	%p49, %r16, -2147483647;
	@%p49 bra 	$L__BB0_21;
// %bb.20:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p52, %f23, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p52;
	bra.uni 	$L__BB0_23;
$L__BB0_21:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p50, %f23, 0f40800000;
	@%p50 bra 	$L__BB0_23;
// %bb.22:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f23;
	setp.ge.f32 	%p51, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p51;
$L__BB0_23:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_28:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p58, %f332, 0f7F800000;
	@%p58 bra 	$L__BB0_30;
// %bb.29:
	mov.b32 	%r314, %f20;
	and.b32  	%r315, %r314, -2147483648;
	mov.b32 	%r316, %f738;
	or.b32  	%r317, %r315, %r316;
	mov.b32 	%f738, %r317;
$L__BB0_30:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r318, %f333;
	and.b32  	%r319, %r318, -2147483648;
	or.b32  	%r320, %r319, 1056964608;
	mov.b32 	%f334, %r320;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p59, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p59;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p60, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p60;
	cvt.rzi.s32.f32 	%r321, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r322, %r321, 1;
	setp.eq.b32 	%p61, %r322, 1;
	selp.f32 	%f352, %f350, %f351, %p61;
	selp.f32 	%f353, %f351, %f350, %p61;
	and.b32  	%r323, %r321, 2;
	setp.eq.s32 	%p62, %r323, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p62;
	add.s32 	%r324, %r321, 1;
	and.b32  	%r325, %r324, 2;
	setp.eq.s32 	%p63, %r325, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p63;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p64, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p64;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p65, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p65;
$L__BB0_31:                             // %L276
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r26, %r7, 3;
	setp.eq.s32 	%p66, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p66 bra 	$L__BB0_47;
// %bb.32:                              // %L314
	mul.lo.s32 	%r332, %r162, %r26;
	cvt.u16.u32 	%rs8, %r332;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 9;
	mul.lo.s16 	%rs11, %rs10, 3;
	sub.s16 	%rs12, %rs8, %rs11;
	and.b16  	%rs13, %rs12, 255;
	cvt.rn.f32.u16 	%f364, %rs13;
	div.approx.f32 	%f41, %f364, %f731;
	abs.f32 	%f744, %f41;
	setp.lt.f32 	%p67, %f744, 0f40000000;
	@%p67 bra 	$L__BB0_44;
// %bb.33:
	setp.gtu.f32 	%p68, %f744, 0f4B800000;
	@%p68 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_34;
$L__BB0_40:
	mov.b32 	%r28, %f744;
	and.b32  	%r333, %r28, 8388607;
	or.b32  	%r3000, %r333, 1065353216;
	mov.b32 	%f743, %r3000;
	add.s32 	%r334, %r28, -1073741824;
	and.b32  	%r3001, %r334, -8388608;
	setp.eq.s32 	%p74, %r3001, 0;
	@%p74 bra 	$L__BB0_43;
// %bb.41:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_42:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r335, %r3001, 192937984;
	add.s32 	%r336, %r3000, %r335;
	mov.b32 	%f376, %r336;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3001, %r3001, %r335;
	mov.b32 	%r3000, %f743;
	setp.ne.s32 	%p75, %r3001, 0;
	setp.ne.s32 	%p76, %r3000, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_42;
$L__BB0_43:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p78, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_44;
$L__BB0_34:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f44, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f44;
	setp.lt.u32 	%p69, %r27, 1073741824;
	@%p69 bra 	$L__BB0_39;
// %bb.35:
	setp.lt.u32 	%p70, %r27, -2147483647;
	@%p70 bra 	$L__BB0_37;
// %bb.36:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p73, %f44, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p73;
	bra.uni 	$L__BB0_39;
$L__BB0_37:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p71, %f44, 0f40800000;
	@%p71 bra 	$L__BB0_39;
// %bb.38:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f44;
	setp.ge.f32 	%p72, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p72;
$L__BB0_39:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_44:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p79, %f385, 0f7F800000;
	@%p79 bra 	$L__BB0_46;
// %bb.45:
	mov.b32 	%r337, %f41;
	and.b32  	%r338, %r337, -2147483648;
	mov.b32 	%r339, %f744;
	or.b32  	%r340, %r338, %r339;
	mov.b32 	%f744, %r340;
$L__BB0_46:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r341, %f386;
	and.b32  	%r342, %r341, -2147483648;
	or.b32  	%r343, %r342, 1056964608;
	mov.b32 	%f387, %r343;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p80, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p80;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p81, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p81;
	cvt.rzi.s32.f32 	%r344, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r345, %r344, 1;
	setp.eq.b32 	%p82, %r345, 1;
	selp.f32 	%f405, %f403, %f404, %p82;
	selp.f32 	%f406, %f404, %f403, %p82;
	and.b32  	%r346, %r344, 2;
	setp.eq.s32 	%p83, %r346, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p83;
	add.s32 	%r347, %r344, 1;
	and.b32  	%r348, %r347, 2;
	setp.eq.s32 	%p84, %r348, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p84;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p85, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p85;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p86, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p86;
$L__BB0_47:                             // %L348
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p89, %p45, %p66;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p89 bra 	$L__BB0_63;
// %bb.48:                              // %L356
	mul.lo.s32 	%r349, %r163, %r26;
	mul.hi.u32 	%r350, %r349, -1431655765;
	shr.u32 	%r351, %r350, 1;
	mul.lo.s32 	%r352, %r351, 3;
	sub.s32 	%r353, %r349, %r352;
	cvt.rn.f32.s32 	%f417, %r353;
	div.approx.f32 	%f62, %f417, %f731;
	abs.f32 	%f750, %f62;
	setp.lt.f32 	%p90, %f750, 0f40000000;
	@%p90 bra 	$L__BB0_60;
// %bb.49:
	setp.gtu.f32 	%p91, %f750, 0f4B800000;
	@%p91 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r36, %f750;
	and.b32  	%r354, %r36, 8388607;
	or.b32  	%r3002, %r354, 1065353216;
	mov.b32 	%f749, %r3002;
	add.s32 	%r355, %r36, -1073741824;
	and.b32  	%r3003, %r355, -8388608;
	setp.eq.s32 	%p97, %r3003, 0;
	@%p97 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r356, %r3003, 192937984;
	add.s32 	%r357, %r3002, %r356;
	mov.b32 	%f429, %r357;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3003, %r3003, %r356;
	mov.b32 	%r3002, %f749;
	setp.ne.s32 	%p98, %r3003, 0;
	setp.ne.s32 	%p99, %r3002, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p101, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f65, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f65;
	setp.lt.u32 	%p92, %r35, 1073741824;
	@%p92 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p93, %r35, -2147483647;
	@%p93 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p96, %f65, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p96;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p94, %f65, 0f40800000;
	@%p94 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f65;
	setp.ge.f32 	%p95, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p95;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p102, %f438, 0f7F800000;
	@%p102 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r358, %f62;
	and.b32  	%r359, %r358, -2147483648;
	mov.b32 	%r360, %f750;
	or.b32  	%r361, %r359, %r360;
	mov.b32 	%f750, %r361;
$L__BB0_62:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r362, %f439;
	and.b32  	%r363, %r362, -2147483648;
	or.b32  	%r364, %r363, 1056964608;
	mov.b32 	%f440, %r364;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p103, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p103;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p104, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p104;
	cvt.rzi.s32.f32 	%r365, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r366, %r365, 1;
	setp.eq.b32 	%p105, %r366, 1;
	selp.f32 	%f458, %f456, %f457, %p105;
	selp.f32 	%f459, %f457, %f456, %p105;
	and.b32  	%r367, %r365, 2;
	setp.eq.s32 	%p106, %r367, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p106;
	add.s32 	%r368, %r365, 1;
	and.b32  	%r369, %r368, 2;
	setp.eq.s32 	%p107, %r369, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p107;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p108, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p108;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p109, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p109;
$L__BB0_63:                             // %L390
	cvt.rzi.s32.f32 	%r283, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r43, %r261, 2;
	setp.eq.s32 	%p110, %r43, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p110 bra 	$L__BB0_65;
// %bb.64:                              // %L399
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_65:                             // %L401
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r284, %r283, 1;
	cvt.rzi.s32.f32 	%r300, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p5 bra 	$L__BB0_186;
// %bb.66:
	@%p256 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_67;
$L__BB0_182:
	mov.b32 	%r165, %f788;
	and.b32  	%r376, %r165, 8388607;
	or.b32  	%r3049, %r376, 1065353216;
	mov.b32 	%f787, %r3049;
	add.s32 	%r377, %r165, -1073741824;
	and.b32  	%r3050, %r377, -8388608;
	setp.eq.s32 	%p118, %r3050, 0;
	@%p118 bra 	$L__BB0_185;
// %bb.183:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_184:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r3050, 192937984;
	add.s32 	%r379, %r3049, %r378;
	mov.b32 	%f479, %r379;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3050, %r3050, %r378;
	mov.b32 	%r3049, %f787;
	setp.ne.s32 	%p119, %r3050, 0;
	setp.ne.s32 	%p120, %r3049, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_184;
$L__BB0_185:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p122, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_186;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p113, %r164, 1073741824;
	@%p113 bra 	$L__BB0_181;
// %bb.68:
	setp.lt.u32 	%p114, %r164, -2147483647;
	@%p114 bra 	$L__BB0_179;
// %bb.69:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p117, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p117;
	bra.uni 	$L__BB0_181;
$L__BB0_179:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p115, %f189, 0f40800000;
	@%p115 bra 	$L__BB0_181;
// %bb.180:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p116, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p116;
$L__BB0_181:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_186:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p20, %r284, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r301, %r300, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p123, %f488, 0f7F800000;
	@%p123 bra 	$L__BB0_188;
// %bb.187:
	mov.b32 	%r380, %f788;
	or.b32  	%r381, %r158, %r380;
	mov.b32 	%f788, %r381;
$L__BB0_188:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p20;
	and.b32  	%r285, %r283, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p40, %r301, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r388, %f489;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f490, %r390;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p124, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p124;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p125, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p125;
	cvt.rzi.s32.f32 	%r391, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r392, %r391, 1;
	setp.eq.b32 	%p126, %r392, 1;
	selp.f32 	%f508, %f506, %f507, %p126;
	and.b32  	%r393, %r391, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p131, %f760, 0f40000000;
	@%p131 bra 	$L__BB0_81;
// %bb.70:
	setp.gtu.f32 	%p132, %f760, 0f4B800000;
	@%p132 bra 	$L__BB0_77;
	bra.uni 	$L__BB0_71;
$L__BB0_77:
	mov.b32 	%r47, %f760;
	and.b32  	%r396, %r47, 8388607;
	or.b32  	%r3004, %r396, 1065353216;
	mov.b32 	%f759, %r3004;
	add.s32 	%r397, %r47, -1073741824;
	and.b32  	%r3005, %r397, -8388608;
	setp.eq.s32 	%p138, %r3005, 0;
	@%p138 bra 	$L__BB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_79:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3005, 192937984;
	add.s32 	%r399, %r3004, %r398;
	mov.b32 	%f532, %r399;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3005, %r3005, %r398;
	mov.b32 	%r3004, %f759;
	setp.ne.s32 	%p139, %r3005, 0;
	setp.ne.s32 	%p140, %r3004, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_79;
$L__BB0_80:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p142, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_81;
$L__BB0_71:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f90, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f90;
	setp.lt.u32 	%p133, %r46, 1073741824;
	@%p133 bra 	$L__BB0_76;
// %bb.72:
	setp.lt.u32 	%p134, %r46, -2147483647;
	@%p134 bra 	$L__BB0_74;
// %bb.73:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p137;
	bra.uni 	$L__BB0_76;
$L__BB0_74:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p136;
$L__BB0_76:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_81:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p21, %r285, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r286, %r283, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p40;
	and.b32  	%r302, %r300, 2;
	setp.eq.s32 	%p127, %r393, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r394, %r391, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p143, %f541, 0f7F800000;
	@%p143 bra 	$L__BB0_83;
// %bb.82:
	mov.b32 	%r400, %f203;
	and.b32  	%r401, %r400, -2147483648;
	mov.b32 	%r402, %f760;
	or.b32  	%r403, %r401, %r402;
	mov.b32 	%f760, %r403;
$L__BB0_83:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p20;
	selp.f32 	%f249, %f246, %f248, %p21;
	and.b32  	%r287, %r286, 2;
	setp.eq.f32 	%p23, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p41, %r302, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r303, %r300, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p126;
	selp.f32 	%f511, %f508, %f510, %p127;
	and.b32  	%r395, %r394, 2;
	setp.eq.f32 	%p129, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r404, %f542;
	and.b32  	%r405, %r404, -2147483648;
	or.b32  	%r406, %r405, 1056964608;
	mov.b32 	%f543, %r406;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p144, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p144;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p145, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p145;
	cvt.rzi.s32.f32 	%r407, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r408, %r407, 1;
	setp.eq.b32 	%p146, %r408, 1;
	selp.f32 	%f561, %f559, %f560, %p146;
	and.b32  	%r409, %r407, 2;
	setp.eq.s32 	%p147, %r409, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r410, %r407, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r7;
	div.approx.f32 	%f106, %f572, %f521;
	abs.f32 	%f764, %f106;
	setp.lt.f32 	%p151, %f764, 0f40000000;
	@%p151 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p152, %f764, 0f4B800000;
	@%p152 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r55, %f764;
	and.b32  	%r412, %r55, 8388607;
	or.b32  	%r3006, %r412, 1065353216;
	mov.b32 	%f763, %r3006;
	add.s32 	%r413, %r55, -1073741824;
	and.b32  	%r3007, %r413, -8388608;
	setp.eq.s32 	%p158, %r3007, 0;
	@%p158 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r3007, 192937984;
	add.s32 	%r415, %r3006, %r414;
	mov.b32 	%f584, %r415;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3007, %r3007, %r414;
	mov.b32 	%r3006, %f763;
	setp.ne.s32 	%p159, %r3007, 0;
	setp.ne.s32 	%p160, %r3006, 0;
	and.pred  	%p161, %p159, %p160;
	@%p161 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p162, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p162;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f109, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f109;
	setp.lt.u32 	%p153, %r54, 1073741824;
	@%p153 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p154, %r54, -2147483647;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p157, %f109, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p157;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p155, %f109, 0f40800000;
	@%p155 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f109;
	setp.ge.f32 	%p156, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p156;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p22, %r287, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p23;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p40;
	selp.f32 	%f304, %f301, %f303, %p41;
	and.b32  	%r304, %r303, 2;
	setp.eq.f32 	%p43, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p128, %r395, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p129;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p146;
	selp.f32 	%f564, %f561, %f563, %p147;
	and.b32  	%r411, %r410, 2;
	setp.eq.f32 	%p149, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p163, %f593, 0f7F800000;
	@%p163 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r416, %f106;
	and.b32  	%r417, %r416, -2147483648;
	mov.b32 	%r418, %f764;
	or.b32  	%r419, %r417, %r418;
	mov.b32 	%f764, %r419;
$L__BB0_97:                             // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p22;
	setp.gt.f32 	%p24, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p42, %r304, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f18, %f308, %f304, %p43;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p128;
	setp.gt.f32 	%p130, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p148, %r411, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f104, %f569, %f564, %p149;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r426, %f595;
	and.b32  	%r427, %r426, -2147483648;
	or.b32  	%r428, %r427, 1056964608;
	mov.b32 	%f596, %r428;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p164, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p164;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p165, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p165;
	cvt.rzi.s32.f32 	%r429, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r430, %r429, 1;
	setp.eq.b32 	%p166, %r430, 1;
	selp.f32 	%f614, %f612, %f613, %p166;
	selp.f32 	%f615, %f613, %f612, %p166;
	and.b32  	%r431, %r429, 2;
	setp.eq.s32 	%p167, %r431, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p167;
	add.s32 	%r432, %r429, 1;
	and.b32  	%r433, %r432, 2;
	setp.eq.s32 	%p168, %r433, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p169, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p169;
	abs.f32 	%f623, %f764;
	and.b32  	%r65, %r261, 1;
	shr.u32 	%r66, %r261, 4;
	setp.ne.s32 	%p171, %r65, %r66;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p171 bra 	$L__BB0_113;
// %bb.98:                              // %L606
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f123, %f627, %f626;
	abs.f32 	%f768, %f123;
	setp.lt.f32 	%p172, %f768, 0f40000000;
	@%p172 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p173, %f768, 0f4B800000;
	@%p173 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r68, %f768;
	and.b32  	%r434, %r68, 8388607;
	or.b32  	%r3008, %r434, 1065353216;
	mov.b32 	%f767, %r3008;
	add.s32 	%r435, %r68, -1073741824;
	and.b32  	%r3009, %r435, -8388608;
	setp.eq.s32 	%p179, %r3009, 0;
	@%p179 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r436, %r3009, 192937984;
	add.s32 	%r437, %r3008, %r436;
	mov.b32 	%f638, %r437;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3009, %r3009, %r436;
	mov.b32 	%r3008, %f767;
	setp.ne.s32 	%p180, %r3009, 0;
	setp.ne.s32 	%p181, %r3008, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p183, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f126, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f126;
	setp.lt.u32 	%p174, %r67, 1073741824;
	@%p174 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p175, %r67, -2147483647;
	@%p175 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p178, %f126, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p178;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p176, %f126, 0f40800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f126;
	setp.ge.f32 	%p177, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p177;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p184, %f647, 0f7F800000;
	@%p184 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r438, %f123;
	and.b32  	%r439, %r438, -2147483648;
	mov.b32 	%r440, %f768;
	or.b32  	%r441, %r439, %r440;
	mov.b32 	%f768, %r441;
$L__BB0_112:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r442, %f648;
	and.b32  	%r443, %r442, -2147483648;
	or.b32  	%r444, %r443, 1056964608;
	mov.b32 	%f649, %r444;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p185, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p185;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p186, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p186;
	cvt.rzi.s32.f32 	%r445, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r446, %r445, 1;
	setp.eq.b32 	%p187, %r446, 1;
	selp.f32 	%f667, %f665, %f666, %p187;
	selp.f32 	%f668, %f666, %f665, %p187;
	and.b32  	%r447, %r445, 2;
	setp.eq.s32 	%p188, %r447, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p188;
	add.s32 	%r448, %r445, 1;
	and.b32  	%r449, %r448, 2;
	setp.eq.s32 	%p189, %r449, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p189;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p190, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p190;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p191, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p191;
$L__BB0_113:                            // %L645
	selp.f32 	%f258, %f257, %f252, %p24;
	selp.f32 	%f306, %f302, %f305, %p42;
	setp.gt.f32 	%p44, %f309, 0f4B800000;
	add.f32 	%f310, %f18, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p130;
	selp.f32 	%f567, %f562, %f566, %p148;
	setp.gt.f32 	%p150, %f570, 0f4B800000;
	add.f32 	%f571, %f104, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p168;
	setp.gt.f32 	%p170, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r64, %r7, 1;
	mov.f32 	%f781, %f776;
	@%p171 bra 	$L__BB0_129;
// %bb.114:                             // %L648
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f144, %f679, %f680;
	abs.f32 	%f774, %f144;
	setp.lt.f32 	%p193, %f774, 0f40000000;
	@%p193 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p194, %f774, 0f4B800000;
	@%p194 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r76, %f774;
	and.b32  	%r450, %r76, 8388607;
	or.b32  	%r3010, %r450, 1065353216;
	mov.b32 	%f773, %r3010;
	add.s32 	%r451, %r76, -1073741824;
	and.b32  	%r3011, %r451, -8388608;
	setp.eq.s32 	%p200, %r3011, 0;
	@%p200 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r3011, 192937984;
	add.s32 	%r453, %r3010, %r452;
	mov.b32 	%f691, %r453;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3011, %r3011, %r452;
	mov.b32 	%r3010, %f773;
	setp.ne.s32 	%p201, %r3011, 0;
	setp.ne.s32 	%p202, %r3010, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p204, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f147, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f147;
	setp.lt.u32 	%p195, %r75, 1073741824;
	@%p195 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p196, %r75, -2147483647;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p199, %f147, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p199;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p197, %f147, 0f40800000;
	@%p197 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f147;
	setp.ge.f32 	%p198, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p198;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p205, %f700, 0f7F800000;
	@%p205 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r454, %f144;
	and.b32  	%r455, %r454, -2147483648;
	mov.b32 	%r456, %f774;
	or.b32  	%r457, %r455, %r456;
	mov.b32 	%f774, %r457;
$L__BB0_128:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r458, %f701;
	and.b32  	%r459, %r458, -2147483648;
	or.b32  	%r460, %r459, 1056964608;
	mov.b32 	%f702, %r460;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p206, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p206;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p207, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p207;
	cvt.rzi.s32.f32 	%r461, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r462, %r461, 1;
	setp.eq.b32 	%p208, %r462, 1;
	selp.f32 	%f720, %f718, %f719, %p208;
	selp.f32 	%f721, %f719, %f718, %p208;
	and.b32  	%r463, %r461, 2;
	setp.eq.s32 	%p209, %r463, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p209;
	add.s32 	%r464, %r461, 1;
	and.b32  	%r465, %r464, 2;
	setp.eq.s32 	%p210, %r465, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p210;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p211, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p211;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p212, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p212;
$L__BB0_129:                            // %L682
	mov.b32 	%r276, %f258;
	mov.b32 	%r279, %f255;
	selp.f32 	%f19, %f310, %f306, %p44;
	mov.b32 	%r384, %f520;
	mov.b32 	%r387, %f517;
	selp.f32 	%f105, %f571, %f567, %p150;
	selp.f32 	%f625, %f624, %f619, %p170;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p110 bra 	$L__BB0_131;
// %bb.130:                             // %L691
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_131:                            // %L693
	xor.b32  	%r275, %r279, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r327, %f19;
	mov.b32 	%r328, %f740;
	mov.b32 	%r330, %f18;
	mov.b32 	%r331, %f741;
	mov.b32 	%r371, %f754;
	mov.b32 	%r372, %f756;
	mov.b32 	%r374, %f755;
	mov.b32 	%r375, %f757;
	xor.b32  	%r383, %r387, -2147483648;
	mov.b32 	%r422, %f625;
	mov.b32 	%r421, %f105;
	mov.b32 	%r425, %f622;
	mov.b32 	%r424, %f104;
	mov.b32 	%r467, %f778;
	mov.b32 	%r468, %f780;
	mov.b32 	%r470, %f779;
	mov.b32 	%r471, %f781;
	setp.gt.u32 	%p214, %r261, 15;
	mov.u32 	%r174, 999999999;
	@%p214 bra 	$L__BB0_133;
// %bb.132:                             // %L723
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	mad.lo.s32 	%r473, %r261, 6, %r4;
	cvt.u16.u32 	%rs14, %r473;
	and.b16  	%rs15, %rs14, 255;
	mul.lo.s16 	%rs16, %rs15, 171;
	shr.u16 	%rs17, %rs16, 14;
	mul.lo.s16 	%rs18, %rs17, 96;
	sub.s16 	%rs19, %rs14, %rs18;
	cvt.u32.u16 	%r474, %rs19;
	and.b32  	%r475, %r474, 255;
	mul.wide.u32 	%rd24, %r475, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.global.u32 	%r476, [%rd25];
	cvt.s32.s16 	%r477, %r476;
	shr.s32 	%r478, %r476, 16;
	mul.lo.s32 	%r479, %r478, 290;
	mad.lo.s32 	%r174, %r477, 33, %r479;
$L__BB0_133:                            // %pass382
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r276, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r277, %r279, %r276;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r382, %r384, %r383;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r385, %r387, %r384;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r466, %r468, %r467;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r469, %r471, %r470;
	// end inline asm
	shr.u32 	%r481, %r261, 3;
	bfe.u32 	%r482, %r261, 3, 1;
	shl.b32 	%r483, %r4, 1;
	and.b32  	%r484, %r483, 2;
	or.b32  	%r485, %r482, %r484;
	and.b32  	%r486, %r481, 2;
	or.b32  	%r175, %r64, %r486;
	cvt.u16.u32 	%rs21, %r175;
	mul.lo.s16 	%rs22, %rs21, 171;
	shr.u16 	%rs23, %rs22, 9;
	mul.lo.s16 	%rs24, %rs23, 3;
	sub.s16 	%rs25, %rs21, %rs24;
	cvt.u32.u16 	%r487, %rs25;
	and.b32  	%r488, %r487, 255;
	and.b16  	%rs26, %rs25, 255;
	mul.wide.u16 	%r489, %rs26, 8;
	mul.lo.s32 	%r490, %r6, 24;
	add.s32 	%r491, %r490, %r2;
	or.b32  	%r492, %r491, %r485;
	add.s32 	%r493, %r492, %r489;
	mul.wide.u32 	%rd26, %r493, 4;
	add.s64 	%rd27, %rd2, %rd26;
	ld.global.u32 	%r176, [%rd27];
	cvt.u64.u32 	%rd28, %r489;
	cvt.u64.u32 	%rd29, %r485;
	cvt.u64.u32 	%rd30, %r490;
	cvt.u64.u32 	%rd31, %r2;
	add.s64 	%rd32, %rd31, %rd30;
	add.s64 	%rd33, %rd32, %rd29;
	add.s64 	%rd34, %rd33, %rd28;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r177, [%rd36+16];
	ld.global.u32 	%r178, [%rd36+384];
	ld.global.u32 	%r179, [%rd36+400];
	shl.b32 	%r494, %r4, 2;
	or.b32  	%r180, %r494, %r481;
	shl.b32 	%r495, %r261, 2;
	and.b32  	%r181, %r495, 12;
	and.b32  	%r182, %r495, 16;
	shl.b32 	%r183, %r1, 5;
	add.s32 	%r496, %r494, 24;
	or.b32  	%r184, %r496, %r481;
	and.b32  	%r185, %r261, 4;
	bfe.s32 	%r497, %r261, 2, 1;
	shl.b32 	%r498, %r261, 4;
	and.b32  	%r499, %r161, 8;
	or.b32  	%r500, %r499, %r498;
	bfe.u32 	%r501, %r500, 3, 3;
	mul.lo.s32 	%r186, %r501, 260;
	cvt.u16.u32 	%rs27, %r261;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 12;
	mul.lo.s16 	%rs31, %rs30, 24;
	sub.s16 	%rs5, %rs27, %rs31;
	add.s32 	%r502, %r4, 6;
	shr.u32 	%r503, %r502, 3;
	add.s32 	%r504, %r5, 192;
	and.b32  	%r505, %r504, 224;
	mad.lo.s32 	%r187, %r503, 260, %r505;
	add.s32 	%r506, %r4, 12;
	shr.u32 	%r507, %r506, 3;
	add.s32 	%r508, %r5, 128;
	and.b32  	%r509, %r508, 224;
	mad.lo.s32 	%r188, %r507, 260, %r509;
	add.s32 	%r510, %r4, 18;
	shr.u32 	%r511, %r510, 3;
	add.s32 	%r512, %r5, 64;
	and.b32  	%r513, %r512, 224;
	mad.lo.s32 	%r189, %r511, 260, %r513;
	or.b32  	%r190, %r5, 780;
	add.s32 	%r514, %r4, 30;
	shr.u32 	%r515, %r514, 3;
	mad.lo.s32 	%r191, %r515, 260, %r505;
	add.s32 	%r516, %r4, 36;
	shr.u32 	%r517, %r516, 3;
	mad.lo.s32 	%r192, %r517, 260, %r509;
	add.s32 	%r518, %r4, 42;
	shr.u32 	%r519, %r518, 3;
	mad.lo.s32 	%r193, %r519, 260, %r513;
	or.b32  	%r194, %r5, 1560;
	add.s32 	%r520, %r4, 54;
	shr.u32 	%r521, %r520, 3;
	mad.lo.s32 	%r195, %r521, 260, %r505;
	add.s32 	%r522, %r4, 60;
	bfe.u32 	%r523, %r522, 3, 3;
	mad.lo.s32 	%r196, %r523, 260, %r509;
	mul.lo.s32 	%r524, %r6, 870;
	shr.u32 	%r525, %r4, 1;
	cvt.u16.u32 	%rs32, %r525;
	and.b16  	%rs33, %rs32, 255;
	mul.lo.s16 	%rs34, %rs33, 171;
	shr.u16 	%rs35, %rs34, 9;
	mul.lo.s16 	%rs36, %rs35, 3;
	sub.s16 	%rs37, %rs32, %rs36;
	cvt.u32.u16 	%r526, %rs37;
	and.b32  	%r197, %r526, 255;
	mad.lo.s32 	%r527, %r485, 33, %r524;
	mad.lo.s32 	%r198, %r488, 290, %r527;
	add.s32 	%r199, %r198, 132;
	setp.lt.u32 	%p216, %r261, 4;
	setp.eq.s32 	%p217, %r7, 1;
	setp.eq.s32 	%p218, %r7, 4;
	setp.eq.s32 	%p219, %r7, 5;
	or.b32  	%r200, %r484, %r66;
	selp.b32 	%r528, 0, 392, %p110;
	setp.eq.s32 	%p220, %r65, 0;
	selp.b32 	%r529, 0, 784, %p220;
	and.b32  	%r530, %r497, 196;
	bfe.s32 	%r531, %r261, 3, 1;
	and.b32  	%r532, %r531, 98;
	add.s32 	%r533, %r529, %r528;
	add.s32 	%r534, %r533, %r530;
	add.s32 	%r201, %r534, %r532;
	or.b32  	%r535, %r200, 1576;
	add.s32 	%r202, %r201, %r535;
	or.b32  	%r203, %r200, 4;
	or.b32  	%r536, %r483, %r66;
	or.b32  	%r537, %r536, 1580;
	add.s32 	%r204, %r201, %r537;
	or.b32  	%r205, %r200, 8;
	or.b32  	%r538, %r200, %r528;
	or.b32  	%r539, %r538, 1584;
	add.s32 	%r540, %r539, %r529;
	add.s32 	%r541, %r540, %r530;
	add.s32 	%r206, %r541, %r532;
	or.b32  	%r207, %r536, 12;
	add.s32 	%r542, %r537, 8;
	or.b32  	%r543, %r542, %r528;
	add.s32 	%r544, %r543, %r529;
	add.s32 	%r545, %r544, %r530;
	add.s32 	%r208, %r545, %r532;
	and.b32  	%r546, %r531, 1576;
	and.b32  	%r547, %r4, 1;
	neg.s32 	%r548, %r547;
	and.b32  	%r549, %r548, 392;
	mul.lo.s32 	%r550, %r66, 784;
	bfe.s32 	%r551, %r4, 1, 1;
	and.b32  	%r552, %r551, 196;
	and.b32  	%r553, %r161, 6;
	shr.u32 	%r554, %r4, 2;
	or.b32  	%r555, %r550, %r64;
	or.b32  	%r556, %r555, %r553;
	mad.lo.s32 	%r557, %r554, 98, %r556;
	add.s32 	%r558, %r557, %r546;
	add.s32 	%r559, %r558, %r549;
	add.s32 	%r209, %r559, %r552;
	add.s32 	%r210, %r209, 8;
	and.b32  	%r560, %r261, 7;
	cvt.u16.u32 	%rs38, %r180;
	and.b16  	%rs39, %rs38, 255;
	mul.lo.s16 	%rs40, %rs39, 171;
	shr.u16 	%rs41, %rs40, 9;
	and.b16  	%rs42, %rs41, 24;
	add.s16 	%rs43, %rs38, %rs42;
	shl.b16 	%rs44, %rs43, 3;
	cvt.u32.u16 	%r561, %rs44;
	and.b32  	%r562, %r561, 248;
	mul.lo.s32 	%r563, %r1, 576;
	or.b32  	%r564, %r563, %r560;
	add.s32 	%r211, %r564, %r562;
	add.s32 	%r565, %r198, %r197;
	mul.wide.u32 	%rd37, %r565, 4;
	mov.u64 	%rd38, shmem;
	add.s64 	%rd12, %rd38, %rd37;
	add.s32 	%r566, %r199, %r197;
	mul.wide.u32 	%rd39, %r566, 4;
	add.s64 	%rd13, %rd38, %rd39;
	cvt.u64.u32 	%rd40, %r198;
	cvt.u64.u16 	%rd41, %rs37;
	and.b64  	%rd42, %rd41, 255;
	add.s64 	%rd43, %rd40, %rd42;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd14, %rd38, %rd44;
	cvt.u64.u32 	%rd45, %r199;
	add.s64 	%rd46, %rd45, %rd42;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd15, %rd38, %rd47;
	or.pred  	%p221, %p216, %p217;
	and.b32  	%r567, %r261, 24;
	setp.eq.s32 	%p222, %r567, 8;
	or.pred  	%p223, %p221, %p222;
	or.pred  	%p224, %p223, %p218;
	setp.eq.s32 	%p225, %r567, 24;
	or.pred  	%p226, %p219, %p225;
	selp.b32 	%r212, 1145324612, -286331154, %p223;
	or.pred  	%p1, %p224, %p226;
	selp.b32 	%r213, 1145324612, -286331154, %p221;
	add.s32 	%r568, %r7, -1;
	setp.lt.u32 	%p227, %r568, 3;
	or.pred  	%p2, %p216, %p227;
	setp.eq.s32 	%p228, %r567, 16;
	or.pred  	%p3, %p228, %p225;
	selp.b32 	%r214, 1145324612, -286331154, %p228;
	and.b16  	%rs6, %rs37, 255;
	or.b16  	%rs7, %rs6, 24;
	mov.u32 	%r480, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r236, %r213, %r214, %p2;
	or.pred  	%p236, %p2, %p3;
	mov.u32 	%r86, %r197;
	mov.u32 	%r87, %r480;
	mov.u32 	%r108, %r480;
	mov.u32 	%r109, %r480;
	mov.u32 	%r110, %r480;
	bra.uni 	$L__BB0_134;
$L__BB0_162:                            // %L30538
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r148, %r87, 48;
	add.s32 	%r86, %r86, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p255, %r87, 96;
	mov.u32 	%r87, %r148;
	@%p255 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_163;
$L__BB0_134:                            // %L1478
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_136 Depth 2
                                        //     Child Loop BB0_149 Depth 2
	setp.ne.s32 	%p229, %r175, 3;
	setp.gt.u32 	%p230, %r4, 3;
	setp.eq.s32 	%p231, %r185, 0;
	mul.hi.u32 	%r666, %r87, -1431655765;
	shr.u32 	%r667, %r666, 5;
	mul.lo.s32 	%r668, %r667, 48;
	add.s32 	%r669, %r668, %r180;
	cvt.u16.u32 	%rs45, %r669;
	mul.hi.s16 	%rs46, %rs45, 3641;
	shr.u16 	%rs47, %rs46, 15;
	shr.s16 	%rs48, %rs46, 3;
	add.s16 	%rs49, %rs48, %rs47;
	mul.lo.s16 	%rs50, %rs49, 144;
	sub.s16 	%rs51, %rs45, %rs50;
	cvt.u32.u16 	%r670, %rs51;
	shl.b32 	%r671, %r670, 16;
	or.b32  	%r672, %r671, %r182;
	or.b32  	%r673, %r672, %r181;
	or.b32  	%r674, %r673, %r183;
	mul.wide.s32 	%rd48, %r674, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r675, %r676, %r677, %r678}, [%rd49];
	add.s32 	%r679, %r668, %r184;
	cvt.u16.u32 	%rs52, %r679;
	mul.hi.s16 	%rs53, %rs52, 3641;
	shr.u16 	%rs54, %rs53, 15;
	shr.s16 	%rs55, %rs53, 3;
	add.s16 	%rs56, %rs55, %rs54;
	mul.lo.s16 	%rs57, %rs56, 144;
	sub.s16 	%rs58, %rs52, %rs57;
	cvt.u32.u16 	%r680, %rs58;
	shl.b32 	%r681, %r680, 16;
	or.b32  	%r682, %r681, %r182;
	or.b32  	%r683, %r682, %r181;
	or.b32  	%r684, %r683, %r183;
	mul.wide.s32 	%rd50, %r684, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r685, %r686, %r687, %r688}, [%rd51];
	selp.b32 	%r689, %r677, %r675, %p231;
	shfl.sync.bfly.b32	%r690, %r689, 4, 31, -1;
	selp.b32 	%r571, %r675, %r690, %p231;
	selp.b32 	%r576, %r690, %r677, %p231;
	selp.b32 	%r691, %r678, %r676, %p231;
	shfl.sync.bfly.b32	%r692, %r691, 4, 31, -1;
	selp.b32 	%r579, %r676, %r692, %p231;
	selp.b32 	%r584, %r692, %r678, %p231;
	selp.b32 	%r693, %r687, %r685, %p231;
	shfl.sync.bfly.b32	%r694, %r693, 4, 31, -1;
	selp.b32 	%r587, %r685, %r694, %p231;
	selp.b32 	%r592, %r694, %r687, %p231;
	selp.b32 	%r695, %r688, %r686, %p231;
	shfl.sync.bfly.b32	%r696, %r695, 4, 31, -1;
	selp.b32 	%r595, %r686, %r696, %p231;
	selp.b32 	%r600, %r696, %r688, %p231;
	shl.b32 	%r572, %r576, 4;
	mov.u32 	%r570, 252645135;
	// begin inline asm
	lop3.b32 %r602, %r570, %r571, %r572, 202;
	// end inline asm
	shr.u32 	%r575, %r571, 4;
	// begin inline asm
	lop3.b32 %r618, %r570, %r575, %r576, 202;
	// end inline asm
	shl.b32 	%r580, %r584, 4;
	// begin inline asm
	lop3.b32 %r610, %r570, %r579, %r580, 202;
	// end inline asm
	shr.u32 	%r583, %r579, 4;
	// begin inline asm
	lop3.b32 %r626, %r570, %r583, %r584, 202;
	// end inline asm
	shl.b32 	%r588, %r592, 4;
	// begin inline asm
	lop3.b32 %r603, %r570, %r587, %r588, 202;
	// end inline asm
	shr.u32 	%r591, %r587, 4;
	// begin inline asm
	lop3.b32 %r619, %r570, %r591, %r592, 202;
	// end inline asm
	shl.b32 	%r596, %r600, 4;
	// begin inline asm
	lop3.b32 %r611, %r570, %r595, %r596, 202;
	// end inline asm
	shr.u32 	%r599, %r595, 4;
	// begin inline asm
	lop3.b32 %r627, %r570, %r599, %r600, 202;
	// end inline asm
	mov.u32 	%r604, 25152;
	// begin inline asm
	prmt.b32 %r634, %r602, %r603, %r604;
	// end inline asm
	mov.u32 	%r608, 29521;
	// begin inline asm
	prmt.b32 %r650, %r602, %r603, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r610, %r611, %r604;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r610, %r611, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r635, %r618, %r619, %r604;
	// end inline asm
	// begin inline asm
	prmt.b32 %r651, %r618, %r619, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r626, %r627, %r604;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r626, %r627, %r608;
	// end inline asm
	mov.u32 	%r660, 21520;
	// begin inline asm
	prmt.b32 %r633, %r634, %r635, %r660;
	// end inline asm
	mov.u32 	%r664, 30258;
	// begin inline asm
	prmt.b32 %r637, %r634, %r635, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r642, %r643, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r642, %r643, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r650, %r651, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r653, %r650, %r651, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r658, %r659, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r658, %r659, %r664;
	// end inline asm
	cvt.s16.s8 	%rs59, %rs45;
	mul.lo.s16 	%rs60, %rs59, 43;
	shr.u16 	%rs61, %rs60, 15;
	shr.s16 	%rs62, %rs60, 8;
	shr.u16 	%rs63, %rs62, 2;
	add.s16 	%rs64, %rs63, %rs61;
	mul.lo.s16 	%rs65, %rs64, 24;
	sub.s16 	%rs66, %rs45, %rs65;
	cvt.u32.u16 	%r697, %rs66;
	cvt.s32.s8 	%r698, %r697;
	add.s32 	%r699, %r186, %r698;
	mul.wide.s32 	%rd52, %r699, 4;
	add.s64 	%rd54, %rd38, %rd52;
	st.shared.u32 	[%rd54], %r633;
	add.s32 	%r700, %r699, 128;
	mul.wide.u32 	%rd55, %r700, 4;
	add.s64 	%rd56, %rd38, %rd55;
	st.shared.u32 	[%rd56], %r641;
	add.s32 	%r701, %r699, 64;
	mul.wide.u32 	%rd57, %r701, 4;
	add.s64 	%rd58, %rd38, %rd57;
	st.shared.u32 	[%rd58], %r637;
	add.s32 	%r702, %r699, 192;
	mul.wide.u32 	%rd59, %r702, 4;
	add.s64 	%rd60, %rd38, %rd59;
	st.shared.u32 	[%rd60], %r645;
	add.s32 	%r703, %r699, 32;
	mul.wide.u32 	%rd61, %r703, 4;
	add.s64 	%rd62, %rd38, %rd61;
	st.shared.u32 	[%rd62], %r649;
	add.s32 	%r704, %r699, 160;
	mul.wide.u32 	%rd63, %r704, 4;
	add.s64 	%rd64, %rd38, %rd63;
	st.shared.u32 	[%rd64], %r657;
	add.s32 	%r705, %r699, 96;
	mul.wide.u32 	%rd65, %r705, 4;
	add.s64 	%rd66, %rd38, %rd65;
	st.shared.u32 	[%rd66], %r653;
	add.s32 	%r706, %r699, 224;
	mul.wide.u32 	%rd67, %r706, 4;
	add.s64 	%rd68, %rd38, %rd67;
	st.shared.u32 	[%rd68], %r661;
	bar.sync 	0;
	cvt.u16.u32 	%rs67, %r668;
	add.s16 	%rs68, %rs5, %rs67;
	cvt.s16.s8 	%rs69, %rs68;
	mul.lo.s16 	%rs70, %rs69, 43;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 8;
	shr.u16 	%rs73, %rs72, 2;
	add.s16 	%rs74, %rs73, %rs71;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs68, %rs75;
	cvt.u32.u16 	%r707, %rs76;
	cvt.s32.s8 	%r708, %r707;
	add.s32 	%r709, %r5, %r708;
	mul.wide.s32 	%rd69, %r709, 4;
	add.s64 	%rd70, %rd38, %rd69;
	ld.shared.u32 	%r710, [%rd70];
	add.s32 	%r711, %r187, %r708;
	mul.wide.s32 	%rd71, %r711, 4;
	add.s64 	%rd72, %rd38, %rd71;
	ld.shared.u32 	%r712, [%rd72];
	add.s32 	%r713, %r188, %r708;
	mul.wide.u32 	%rd73, %r713, 4;
	add.s64 	%rd74, %rd38, %rd73;
	ld.shared.u32 	%r714, [%rd74];
	add.s32 	%r715, %r189, %r708;
	mul.wide.u32 	%rd75, %r715, 4;
	add.s64 	%rd76, %rd38, %rd75;
	ld.shared.u32 	%r716, [%rd76];
	add.s32 	%r717, %r190, %r708;
	mul.wide.u32 	%rd77, %r717, 4;
	add.s64 	%rd78, %rd38, %rd77;
	ld.shared.u32 	%r718, [%rd78];
	add.s32 	%r719, %r191, %r708;
	mul.wide.u32 	%rd79, %r719, 4;
	add.s64 	%rd80, %rd38, %rd79;
	ld.shared.u32 	%r720, [%rd80];
	add.s32 	%r721, %r192, %r708;
	mul.wide.u32 	%rd81, %r721, 4;
	add.s64 	%rd82, %rd38, %rd81;
	ld.shared.u32 	%r722, [%rd82];
	add.s32 	%r723, %r193, %r708;
	mul.wide.u32 	%rd83, %r723, 4;
	add.s64 	%rd84, %rd38, %rd83;
	ld.shared.u32 	%r724, [%rd84];
	add.s32 	%r725, %r194, %r708;
	mul.wide.u32 	%rd85, %r725, 4;
	add.s64 	%rd86, %rd38, %rd85;
	ld.shared.u32 	%r726, [%rd86];
	add.s32 	%r727, %r195, %r708;
	mul.wide.u32 	%rd87, %r727, 4;
	add.s64 	%rd88, %rd38, %rd87;
	ld.shared.u32 	%r728, [%rd88];
	add.s32 	%r729, %r196, %r708;
	mul.wide.s32 	%rd89, %r729, 4;
	add.s64 	%rd90, %rd38, %rd89;
	ld.shared.u32 	%r730, [%rd90];
	bar.sync 	0;
	shfl.sync.idx.b32	%r731, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r732, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r733, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r734, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r735, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r736, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r737, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r738, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r739, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r740, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r741, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r742, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r743, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r744, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r745, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r746, %r174, 15, 31, -1;
	add.s32 	%r747, %r731, %r708;
	mul.wide.s32 	%rd91, %r747, 4;
	add.s64 	%rd92, %rd38, %rd91;
	st.shared.u32 	[%rd92], %r710;
	add.s32 	%r748, %r732, %r708;
	mul.wide.s32 	%rd93, %r748, 4;
	add.s64 	%rd94, %rd38, %rd93;
	st.shared.u32 	[%rd94], %r712;
	add.s32 	%r749, %r733, %r708;
	mul.wide.s32 	%rd95, %r749, 4;
	add.s64 	%rd96, %rd38, %rd95;
	st.shared.u32 	[%rd96], %r714;
	add.s32 	%r750, %r734, %r708;
	mul.wide.s32 	%rd97, %r750, 4;
	add.s64 	%rd98, %rd38, %rd97;
	st.shared.u32 	[%rd98], %r716;
	add.s32 	%r751, %r735, %r708;
	mul.wide.s32 	%rd99, %r751, 4;
	add.s64 	%rd100, %rd38, %rd99;
	st.shared.u32 	[%rd100], %r718;
	add.s32 	%r752, %r736, %r708;
	mul.wide.s32 	%rd101, %r752, 4;
	add.s64 	%rd102, %rd38, %rd101;
	st.shared.u32 	[%rd102], %r720;
	add.s32 	%r753, %r737, %r708;
	mul.wide.s32 	%rd103, %r753, 4;
	add.s64 	%rd104, %rd38, %rd103;
	st.shared.u32 	[%rd104], %r722;
	add.s32 	%r754, %r738, %r708;
	mul.wide.s32 	%rd105, %r754, 4;
	add.s64 	%rd106, %rd38, %rd105;
	st.shared.u32 	[%rd106], %r724;
	add.s32 	%r755, %r739, %r708;
	mul.wide.s32 	%rd107, %r755, 4;
	add.s64 	%rd108, %rd38, %rd107;
	st.shared.u32 	[%rd108], %r726;
	add.s32 	%r756, %r740, %r708;
	mul.wide.s32 	%rd109, %r756, 4;
	add.s64 	%rd110, %rd38, %rd109;
	st.shared.u32 	[%rd110], %r728;
	selp.b32 	%r757, 0, %r730, %p230;
	add.s32 	%r758, %r741, %r708;
	mul.wide.s32 	%rd111, %r758, 4;
	add.s64 	%rd112, %rd38, %rd111;
	st.shared.u32 	[%rd112], %r757;
	add.s32 	%r759, %r742, %r708;
	mul.wide.s32 	%rd113, %r759, 4;
	add.s64 	%rd114, %rd38, %rd113;
	st.shared.u32 	[%rd114], %r480;
	add.s32 	%r760, %r743, %r708;
	mul.wide.s32 	%rd115, %r760, 4;
	add.s64 	%rd116, %rd38, %rd115;
	st.shared.u32 	[%rd116], %r480;
	add.s32 	%r761, %r744, %r708;
	mul.wide.s32 	%rd117, %r761, 4;
	add.s64 	%rd118, %rd38, %rd117;
	st.shared.u32 	[%rd118], %r480;
	add.s32 	%r762, %r745, %r708;
	mul.wide.s32 	%rd119, %r762, 4;
	add.s64 	%rd120, %rd38, %rd119;
	st.shared.u32 	[%rd120], %r480;
	add.s32 	%r763, %r746, %r708;
	mul.wide.s32 	%rd121, %r763, 4;
	add.s64 	%rd122, %rd38, %rd121;
	st.shared.u32 	[%rd122], %r480;
	bar.sync 	0;
	mov.u32 	%r92, %r480;
	mov.u32 	%r93, %r480;
	mov.u32 	%r94, %r480;
	mov.u32 	%r95, %r480;
	mov.u32 	%r96, %r480;
	mov.u32 	%r97, %r480;
	mov.u32 	%r98, %r480;
	mov.u32 	%r99, %r480;
	mov.u32 	%r100, %r480;
	mov.u32 	%r101, %r480;
	mov.u32 	%r102, %r480;
	mov.u32 	%r103, %r480;
	mov.u32 	%r104, %r480;
	mov.u32 	%r105, %r480;
	mov.u32 	%r106, %r480;
	mov.u32 	%r107, %r480;
	@%p229 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_135;
$L__BB0_189:                            // %oksrem2585
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r91, %r668, %r197;
	ld.shared.u32 	%r92, [%rd12];
	ld.shared.u32 	%r93, [%rd13];
	ld.shared.u32 	%r94, [%rd14+12];
	ld.shared.u32 	%r95, [%rd15+12];
	ld.shared.u32 	%r96, [%rd14+24];
	ld.shared.u32 	%r97, [%rd15+24];
	ld.shared.u32 	%r98, [%rd14+36];
	ld.shared.u32 	%r99, [%rd15+36];
	add.s32 	%r764, %r91, 12;
	mul.hi.u32 	%r765, %r764, -1431655765;
	shr.u32 	%r766, %r765, 4;
	mul.lo.s32 	%r767, %r766, 24;
	sub.s32 	%r768, %r764, %r767;
	add.s32 	%r769, %r198, %r768;
	mul.wide.u32 	%rd123, %r769, 4;
	add.s64 	%rd125, %rd38, %rd123;
	ld.shared.u32 	%r100, [%rd125];
	add.s32 	%r770, %r199, %r768;
	mul.wide.u32 	%rd126, %r770, 4;
	add.s64 	%rd127, %rd38, %rd126;
	ld.shared.u32 	%r101, [%rd127];
	ld.shared.u32 	%r102, [%rd14+60];
	ld.shared.u32 	%r103, [%rd15+60];
	cvt.u16.u32 	%rs77, %r91;
	add.s16 	%rs78, %rs77, 18;
	cvt.s16.s8 	%rs79, %rs78;
	mul.lo.s16 	%rs80, %rs79, 43;
	shr.u16 	%rs81, %rs80, 15;
	shr.s16 	%rs82, %rs80, 10;
	add.s16 	%rs83, %rs82, %rs81;
	mul.lo.s16 	%rs84, %rs83, 24;
	sub.s16 	%rs85, %rs78, %rs84;
	cvt.u32.u16 	%r771, %rs85;
	cvt.s32.s8 	%r772, %r771;
	add.s32 	%r773, %r198, %r772;
	mul.wide.s32 	%rd128, %r773, 4;
	add.s64 	%rd129, %rd38, %rd128;
	ld.shared.u32 	%r104, [%rd129];
	add.s32 	%r774, %r199, %r772;
	mul.wide.u32 	%rd130, %r774, 4;
	add.s64 	%rd131, %rd38, %rd130;
	ld.shared.u32 	%r105, [%rd131];
	add.s16 	%rs86, %rs77, 21;
	cvt.s16.s8 	%rs87, %rs86;
	mul.lo.s16 	%rs88, %rs87, 43;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 10;
	add.s16 	%rs91, %rs90, %rs89;
	mul.lo.s16 	%rs92, %rs91, 24;
	sub.s16 	%rs93, %rs86, %rs92;
	cvt.u32.u16 	%r775, %rs93;
	cvt.s32.s8 	%r776, %r775;
	add.s32 	%r777, %r198, %r776;
	mul.wide.s32 	%rd132, %r777, 4;
	add.s64 	%rd133, %rd38, %rd132;
	ld.shared.u32 	%r106, [%rd133];
	add.s32 	%r778, %r199, %r776;
	mul.wide.u32 	%rd134, %r778, 4;
	add.s64 	%rd135, %rd38, %rd134;
	ld.shared.u32 	%r107, [%rd135];
$L__BB0_135:                            // %L8575
                                        //   in Loop: Header=BB0_134 Depth=1
	bar.sync 	0;
	mov.u32 	%r111, %r480;
	bra.uni 	$L__BB0_136;
$L__BB0_146:                            // %L19546
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
$L__BB0_147:                            // %L19547
                                        //   in Loop: Header=BB0_136 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	setp.ne.s32 	%p243, %r111, 24;
	@%p243 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_148;
$L__BB0_136:                            // %L8593
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r111, 0;
	selp.b32 	%r1172, %r92, 0, %p232;
	setp.eq.s32 	%p233, %r111, 6;
	selp.b32 	%r1173, %r96, %r1172, %p233;
	setp.eq.s32 	%p234, %r111, 12;
	selp.b32 	%r1174, %r100, %r1173, %p234;
	setp.eq.s32 	%p235, %r111, 18;
	selp.b32 	%r1175, %r104, %r1174, %p235;
	selp.b32 	%r1176, %r93, 0, %p232;
	selp.b32 	%r1177, %r97, %r1176, %p233;
	selp.b32 	%r1178, %r101, %r1177, %p234;
	selp.b32 	%r1179, %r105, %r1178, %p235;
	selp.b32 	%r1180, %r94, 0, %p232;
	selp.b32 	%r1181, %r98, %r1180, %p233;
	selp.b32 	%r1182, %r102, %r1181, %p234;
	selp.b32 	%r1183, %r106, %r1182, %p235;
	selp.b32 	%r1184, %r95, 0, %p232;
	selp.b32 	%r1185, %r99, %r1184, %p233;
	selp.b32 	%r1186, %r103, %r1185, %p234;
	selp.b32 	%r1187, %r107, %r1186, %p235;
	mov.u16 	%rs131, 25600;
	// begin inline asm
	mov.b32 %r785, {%rs131, %rs131};
	// end inline asm
	mov.u16 	%rs133, 21504;
	// begin inline asm
	mov.b32 %r796, {%rs133, %rs133};
	// end inline asm
	xor.b32  	%r784, %r1175, -2004318072;
	mov.u32 	%r921, 983055;
	// begin inline asm
	lop3.b32 %r782, %r921, %r784, %r785, 202;
	// end inline asm
	mov.u16 	%rs137, 18432;
	// begin inline asm
	mov.b32 %r786, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r787, %r785, %r786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r790, %r782, %r787;
	// end inline asm
	mov.u32 	%r932, 15728880;
	// begin inline asm
	lop3.b32 %r793, %r932, %r784, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	// begin inline asm
	mov.b32 %r831, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs133, %rs133};
	// end inline asm
	xor.b32  	%r830, %r1179, -2004318072;
	// begin inline asm
	lop3.b32 %r828, %r921, %r830, %r831, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r832, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r833, %r831, %r832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r836, %r828, %r833;
	// end inline asm
	// begin inline asm
	lop3.b32 %r839, %r932, %r830, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	// begin inline asm
	mov.b32 %r877, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs133, %rs133};
	// end inline asm
	xor.b32  	%r876, %r1183, -2004318072;
	// begin inline asm
	lop3.b32 %r874, %r921, %r876, %r877, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r878, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r879, %r877, %r878;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r882, %r874, %r879;
	// end inline asm
	// begin inline asm
	lop3.b32 %r885, %r932, %r876, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs133, %rs133};
	// end inline asm
	xor.b32  	%r922, %r1187, -2004318072;
	// begin inline asm
	lop3.b32 %r920, %r921, %r922, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	lop3.b32 %r931, %r932, %r922, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r790;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r964, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r836;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r967, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r801;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r970, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r847;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r973, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r882;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r976, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r928;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r979, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r893;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r982, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r939;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r985, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r988, %r989}, {%r274, %r277}, {%r964}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r995, %r996}, {%r274, %r277}, {%r967}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1002, %r1003}, {%r274, %r277}, {%r970}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1009, %r1010}, {%r274, %r277}, {%r973}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1016, %r1017}, {%r274, %r277}, {%r976}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1023, %r1024}, {%r274, %r277}, {%r979}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1030, %r1031}, {%r274, %r277}, {%r982}, {%r480, %r480};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1037, %r1038}, {%r274, %r277}, {%r985}, {%r480, %r480};
	// end inline asm
	@%p1 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_137;
$L__BB0_190:                            // %pass3911
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1044, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1046, %r1044, %r989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1049, %r326, %r988, %r1046;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1053, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1055, %r1053, %r996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1058, %r326, %r995, %r1055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1062, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1064, %r1062, %r1003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1067, %r326, %r1002, %r1064;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1071, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1073, %r1071, %r1010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1076, %r326, %r1009, %r1073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1080, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1082, %r1080, %r1017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r326, %r1016, %r1082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1089, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1091, %r1089, %r1024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1094, %r326, %r1023, %r1091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1098, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1100, %r1098, %r1031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r326, %r1030, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1107, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r326, %r1037, %r1109;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1116, %r329, %r988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r326, %r989, %r1116;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r329, %r995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r326, %r996, %r1123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r329, %r1002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r326, %r1003, %r1130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r329, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r326, %r1010, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r329, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r326, %r1017, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r329, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r326, %r1024, %r1151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r329, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r326, %r1031, %r1158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r329, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r326, %r1038, %r1165;
	// end inline asm
	mov.u32 	%r1337, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1261, %r1262}, {%r370, %r373}, {%r1049, %r1119}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1269, %r1270}, {%r370, %r373}, {%r1058, %r1126}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1277, %r1278}, {%r370, %r373}, {%r1067, %r1133}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1285, %r1286}, {%r370, %r373}, {%r1076, %r1140}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1294}, {%r370, %r373}, {%r1085, %r1147}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1301, %r1302}, {%r370, %r373}, {%r1094, %r1154}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r370, %r373}, {%r1103, %r1161}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r370, %r373}, {%r1112, %r1168}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1260, %r1261, %r1262, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1264, %r1261, %r1262, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1268, %r1269, %r1270, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1272, %r1269, %r1270, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r1277, %r1278, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1277, %r1278, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1285, %r1286, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1285, %r1286, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1293, %r1294, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1293, %r1294, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1301, %r1302, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1301, %r1302, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1309, %r1310, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1309, %r1310, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1317, %r1318, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1317, %r1318, %r664;
	// end inline asm
	add.s32 	%r1370, %r86, %r111;
	cvt.u16.u32 	%rs142, %r1370;
	cvt.s16.s8 	%rs143, %rs142;
	mul.lo.s16 	%rs144, %rs143, 43;
	shr.u16 	%rs145, %rs144, 15;
	shr.u16 	%rs146, %rs144, 8;
	add.s16 	%rs147, %rs146, %rs145;
	mul.lo.s16 	%rs148, %rs147, 6;
	sub.s16 	%rs149, %rs142, %rs148;
	cvt.s16.s8 	%rs150, %rs149;
	mul.wide.s16 	%r1371, %rs150, 16;
	or.b32  	%r1372, %r200, %r1371;
	add.s32 	%r1373, %r201, %r1372;
	mul.wide.s32 	%rd138, %r1373, 4;
	add.s64 	%rd140, %rd38, %rd138;
	st.shared.u32 	[%rd140], %r1260;
	add.s32 	%r1374, %r202, %r1371;
	mul.wide.u32 	%rd141, %r1374, 4;
	add.s64 	%rd142, %rd38, %rd141;
	st.shared.u32 	[%rd142], %r1264;
	or.b32  	%r1375, %r203, %r1371;
	add.s32 	%r1376, %r201, %r1375;
	mul.wide.s32 	%rd143, %r1376, 4;
	add.s64 	%rd144, %rd38, %rd143;
	st.shared.u32 	[%rd144], %r1268;
	add.s32 	%r1377, %r204, %r1371;
	mul.wide.u32 	%rd145, %r1377, 4;
	add.s64 	%rd146, %rd38, %rd145;
	st.shared.u32 	[%rd146], %r1272;
	or.b32  	%r1378, %r205, %r1371;
	add.s32 	%r1379, %r201, %r1378;
	mul.wide.s32 	%rd147, %r1379, 4;
	add.s64 	%rd148, %rd38, %rd147;
	st.shared.u32 	[%rd148], %r1276;
	add.s32 	%r1380, %r206, %r1371;
	mul.wide.u32 	%rd149, %r1380, 4;
	add.s64 	%rd150, %rd38, %rd149;
	st.shared.u32 	[%rd150], %r1280;
	or.b32  	%r1381, %r207, %r1371;
	add.s32 	%r1382, %r201, %r1381;
	mul.wide.s32 	%rd151, %r1382, 4;
	add.s64 	%rd152, %rd38, %rd151;
	st.shared.u32 	[%rd152], %r1284;
	add.s32 	%r1383, %r208, %r1371;
	mul.wide.u32 	%rd153, %r1383, 4;
	add.s64 	%rd154, %rd38, %rd153;
	st.shared.u32 	[%rd154], %r1288;
	add.s16 	%rs151, %rs142, 3;
	cvt.s16.s8 	%rs152, %rs151;
	mul.lo.s16 	%rs153, %rs152, 43;
	shr.u16 	%rs154, %rs153, 15;
	shr.u16 	%rs155, %rs153, 8;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 6;
	sub.s16 	%rs158, %rs151, %rs157;
	cvt.s16.s8 	%rs159, %rs158;
	mul.wide.s16 	%r1384, %rs159, 16;
	or.b32  	%r1385, %r200, %r1384;
	add.s32 	%r1386, %r201, %r1385;
	mul.wide.s32 	%rd155, %r1386, 4;
	add.s64 	%rd156, %rd38, %rd155;
	st.shared.u32 	[%rd156], %r1292;
	add.s32 	%r1387, %r202, %r1384;
	mul.wide.u32 	%rd157, %r1387, 4;
	add.s64 	%rd158, %rd38, %rd157;
	st.shared.u32 	[%rd158], %r1296;
	or.b32  	%r1388, %r203, %r1384;
	add.s32 	%r1389, %r201, %r1388;
	mul.wide.s32 	%rd159, %r1389, 4;
	add.s64 	%rd160, %rd38, %rd159;
	st.shared.u32 	[%rd160], %r1300;
	add.s32 	%r1390, %r204, %r1384;
	mul.wide.u32 	%rd161, %r1390, 4;
	add.s64 	%rd162, %rd38, %rd161;
	st.shared.u32 	[%rd162], %r1304;
	or.b32  	%r1391, %r205, %r1384;
	add.s32 	%r1392, %r201, %r1391;
	mul.wide.s32 	%rd163, %r1392, 4;
	add.s64 	%rd164, %rd38, %rd163;
	st.shared.u32 	[%rd164], %r1308;
	add.s32 	%r1393, %r206, %r1384;
	mul.wide.u32 	%rd165, %r1393, 4;
	add.s64 	%rd166, %rd38, %rd165;
	st.shared.u32 	[%rd166], %r1312;
	or.b32  	%r1394, %r207, %r1384;
	add.s32 	%r1395, %r201, %r1394;
	mul.wide.s32 	%rd167, %r1395, 4;
	add.s64 	%rd168, %rd38, %rd167;
	st.shared.u32 	[%rd168], %r1316;
	add.s32 	%r1396, %r208, %r1384;
	mul.wide.u32 	%rd169, %r1396, 4;
	add.s64 	%rd170, %rd38, %rd169;
	st.shared.u32 	[%rd170], %r1320;
	bar.sync 	0;
	add.s32 	%r231, %r87, %r111;
	cvt.u16.u32 	%rs160, %r231;
	cvt.s16.s8 	%rs161, %rs160;
	mul.lo.s16 	%rs162, %rs161, 43;
	shr.u16 	%rs163, %rs162, 15;
	shr.u16 	%rs164, %rs162, 8;
	add.s16 	%rs165, %rs164, %rs163;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs160, %rs166;
	cvt.s16.s8 	%rs168, %rs167;
	mul.wide.s16 	%r1397, %rs168, 16;
	add.s32 	%r1398, %r209, %r1397;
	mul.wide.s32 	%rd171, %r1398, 4;
	add.s64 	%rd172, %rd38, %rd171;
	ld.shared.u32 	%r1328, [%rd172];
	add.s32 	%r1399, %r210, %r1397;
	mul.wide.s32 	%rd173, %r1399, 4;
	add.s64 	%rd174, %rd38, %rd173;
	ld.shared.u32 	%r1335, [%rd174];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1324, %r1325}, {%r382, %r385}, {%r1328}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r382, %r385}, {%r1335}, {%r1337, %r1337};
	// end inline asm
	@%p236 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_191;
$L__BB0_192:                            // %pass6551
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1338, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r1338, %r1325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r420, %r1324, %r1340;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1347, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1349, %r1347, %r1332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r420, %r1331, %r1349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r423, %r1324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r420, %r1325, %r1356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r423, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r420, %r1332, %r1363;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1419, %r1422}, {%r466, %r469}, {%r1343, %r1359}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1426, %r1430}, {%r466, %r469}, {%r1352, %r1366}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r1419, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r1422, %r1422, %r1418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1426, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r1430, %r1430, %r1425;
	// end inline asm
	mov.u32 	%r1517, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1433, %r1517, %r1429, %r110;
	// end inline asm
	add.s32 	%r1520, %r231, 1;
	mul.hi.u32 	%r1521, %r1520, -1431655765;
	shr.u32 	%r1522, %r1521, 2;
	mul.lo.s32 	%r1523, %r1522, 6;
	sub.s32 	%r1524, %r1520, %r1523;
	shl.b32 	%r1525, %r1524, 4;
	add.s32 	%r1526, %r209, %r1525;
	mul.wide.u32 	%rd177, %r1526, 4;
	add.s64 	%rd179, %rd38, %rd177;
	ld.shared.u32 	%r1441, [%rd179];
	add.s32 	%r1527, %r210, %r1525;
	mul.wide.u32 	%rd180, %r1527, 4;
	add.s64 	%rd181, %rd38, %rd180;
	ld.shared.u32 	%r1448, [%rd181];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1458, %r1455}, {%r382, %r385}, {%r1441}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r382, %r385}, {%r1448}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1451, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r1451, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r420, %r1458, %r1453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r420, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r423, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r420, %r1455, %r1469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r423, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r420, %r1464, %r1476;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1502, %r1505}, {%r466, %r469}, {%r1456, %r1472}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1509, %r1513}, {%r466, %r469}, {%r1465, %r1479}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r1502, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r1505, %r1505, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r1509, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r1513, %r1513, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r1517, %r1512, %r1433;
	// end inline asm
	add.s32 	%r3052, %r108, 2;
	setp.eq.s32 	%p237, %r3052, 40;
	@%p237 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_193;
$L__BB0_138:                            // %L15465
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p238, %r261, 7;
	@%p238 bra 	$L__BB0_140;
// %bb.139:                             // %L15525
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1528, %r109, 192, %r211;
	mul.wide.u32 	%rd182, %r1528, 4;
	add.s64 	%rd6, %rd4, %rd182;
	st.global.u32 	[%rd6], %r3054;
$L__BB0_140:                            // %L15664
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3052, 0;
	mov.u32 	%r3054, %r3052;
$L__BB0_193:                            // %oksrem7076
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1696, %r231, 2;
	mul.hi.u32 	%r1697, %r1696, -1431655765;
	shr.u32 	%r1698, %r1697, 2;
	mul.lo.s32 	%r1699, %r1698, 6;
	sub.s32 	%r1700, %r1696, %r1699;
	shl.b32 	%r1701, %r1700, 4;
	add.s32 	%r1702, %r209, %r1701;
	mul.wide.u32 	%rd183, %r1702, 4;
	add.s64 	%rd185, %rd38, %rd183;
	ld.shared.u32 	%r1534, [%rd185];
	add.s32 	%r1703, %r210, %r1701;
	mul.wide.u32 	%rd186, %r1703, 4;
	add.s64 	%rd187, %rd38, %rd186;
	ld.shared.u32 	%r1541, [%rd187];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1551, %r1548}, {%r382, %r385}, {%r1534}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1560, %r1557}, {%r382, %r385}, {%r1541}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1544, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1546, %r1544, %r1548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r420, %r1551, %r1546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1553, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1553, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r420, %r1560, %r1555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r423, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r420, %r1548, %r1562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r423, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r420, %r1557, %r1569;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1595, %r1598}, {%r466, %r469}, {%r1549, %r1565}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1606}, {%r466, %r469}, {%r1558, %r1572}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1594, %r1595, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1606, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r1517, %r1605, %r3054;
	// end inline asm
	add.s32 	%r1704, %r231, 3;
	mul.hi.u32 	%r1705, %r1704, -1431655765;
	shr.u32 	%r1706, %r1705, 2;
	mul.lo.s32 	%r1707, %r1706, 6;
	sub.s32 	%r1708, %r1704, %r1707;
	shl.b32 	%r1709, %r1708, 4;
	add.s32 	%r1710, %r209, %r1709;
	mul.wide.u32 	%rd188, %r1710, 4;
	add.s64 	%rd189, %rd38, %rd188;
	ld.shared.u32 	%r1617, [%rd189];
	add.s32 	%r1711, %r210, %r1709;
	mul.wide.u32 	%rd190, %r1711, 4;
	add.s64 	%rd191, %rd38, %rd190;
	ld.shared.u32 	%r1624, [%rd191];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1634, %r1631}, {%r382, %r385}, {%r1617}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1643, %r1640}, {%r382, %r385}, {%r1624}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1627, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r1627, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r420, %r1634, %r1629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1636, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1636, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r420, %r1643, %r1638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r423, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r420, %r1631, %r1645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r423, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r420, %r1640, %r1652;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1678, %r1681}, {%r466, %r469}, {%r1632, %r1648}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1689}, {%r466, %r469}, {%r1641, %r1655}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1678, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r1681, %r1681, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r1685, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r1689, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r1517, %r1688, %r1609;
	// end inline asm
	add.s32 	%r3055, %r3052, 2;
	setp.eq.s32 	%p239, %r3055, 40;
	@%p239 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_194;
$L__BB0_141:                            // %L17406
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p240, %r261, 7;
	@%p240 bra 	$L__BB0_143;
// %bb.142:                             // %L17466
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1712, %r109, 192, %r211;
	mul.wide.u32 	%rd192, %r1712, 4;
	add.s64 	%rd7, %rd4, %rd192;
	st.global.u32 	[%rd7], %r3057;
$L__BB0_143:                            // %L17605
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3055, 0;
	mov.u32 	%r3057, %r3055;
$L__BB0_194:                            // %oksrem7929
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r1880, %r231, 4;
	mul.hi.u32 	%r1881, %r1880, -1431655765;
	shr.u32 	%r1882, %r1881, 2;
	mul.lo.s32 	%r1883, %r1882, 6;
	sub.s32 	%r1884, %r1880, %r1883;
	shl.b32 	%r1885, %r1884, 4;
	add.s32 	%r1886, %r209, %r1885;
	mul.wide.u32 	%rd193, %r1886, 4;
	add.s64 	%rd195, %rd38, %rd193;
	ld.shared.u32 	%r1718, [%rd195];
	add.s32 	%r1887, %r210, %r1885;
	mul.wide.u32 	%rd196, %r1887, 4;
	add.s64 	%rd197, %rd38, %rd196;
	ld.shared.u32 	%r1725, [%rd197];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r382, %r385}, {%r1718}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r382, %r385}, {%r1725}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r420, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r420, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r423, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r420, %r1732, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r423, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r420, %r1741, %r1753;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1782}, {%r466, %r469}, {%r1733, %r1749}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1786, %r1790}, {%r466, %r469}, {%r1742, %r1756}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1779, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1517, %r1789, %r3057;
	// end inline asm
	add.s32 	%r1888, %r231, 5;
	mul.hi.u32 	%r1889, %r1888, -1431655765;
	shr.u32 	%r1890, %r1889, 2;
	mul.lo.s32 	%r1891, %r1890, 6;
	sub.s32 	%r1892, %r1888, %r1891;
	shl.b32 	%r1893, %r1892, 4;
	add.s32 	%r1894, %r209, %r1893;
	mul.wide.u32 	%rd198, %r1894, 4;
	add.s64 	%rd199, %rd38, %rd198;
	ld.shared.u32 	%r1801, [%rd199];
	add.s32 	%r1895, %r210, %r1893;
	mul.wide.u32 	%rd200, %r1895, 4;
	add.s64 	%rd201, %rd38, %rd200;
	ld.shared.u32 	%r1808, [%rd201];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1818, %r1815}, {%r382, %r385}, {%r1801}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1827, %r1824}, {%r382, %r385}, {%r1808}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1811, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1811, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r420, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1820, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r420, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r423, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r420, %r1815, %r1829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r423, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r420, %r1824, %r1836;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1865}, {%r466, %r469}, {%r1816, %r1832}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1873}, {%r466, %r469}, {%r1825, %r1839}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1862, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1517, %r1872, %r1793;
	// end inline asm
	add.s32 	%r108, %r3055, 2;
	setp.eq.s32 	%p241, %r108, 40;
	@%p241 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_147;
$L__BB0_144:                            // %L19347
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.gt.u32 	%p242, %r261, 7;
	@%p242 bra 	$L__BB0_146;
// %bb.145:                             // %L19407
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1896, %r109, 192, %r211;
	mul.wide.u32 	%rd202, %r1896, 4;
	add.s64 	%rd8, %rd4, %rd202;
	st.global.u32 	[%rd8], %r110;
	bra.uni 	$L__BB0_146;
$L__BB0_148:                            // %L19568.preheader
                                        //   in Loop: Header=BB0_134 Depth=1
	mov.u16 	%rs267, %rs1;
	mov.u32 	%r3043, %r1337;
	bra.uni 	$L__BB0_149;
$L__BB0_160:                            // %L30521
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2792;
	mov.u32 	%r110, %r2792;
$L__BB0_161:                            // %L30522
                                        //   in Loop: Header=BB0_149 Depth=2
	bar.sync 	0;
	add.s32 	%r3043, %r3043, 6;
	add.s16 	%rs267, %rs267, 6;
	setp.ne.s32 	%p254, %r3043, 24;
	@%p254 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_162;
$L__BB0_149:                            // %L19568
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p244, %r3043, 0;
	selp.b32 	%r2593, %r92, 0, %p244;
	setp.eq.s32 	%p245, %r3043, 6;
	selp.b32 	%r2594, %r96, %r2593, %p245;
	setp.eq.s32 	%p246, %r3043, 12;
	selp.b32 	%r2595, %r100, %r2594, %p246;
	setp.eq.s32 	%p247, %r3043, 18;
	selp.b32 	%r2596, %r104, %r2595, %p247;
	selp.b32 	%r2597, %r93, 0, %p244;
	selp.b32 	%r2598, %r97, %r2597, %p245;
	selp.b32 	%r2599, %r101, %r2598, %p246;
	selp.b32 	%r2600, %r105, %r2599, %p247;
	selp.b32 	%r2601, %r94, 0, %p244;
	selp.b32 	%r2602, %r98, %r2601, %p245;
	selp.b32 	%r2603, %r102, %r2602, %p246;
	selp.b32 	%r2604, %r106, %r2603, %p247;
	selp.b32 	%r2605, %r95, 0, %p244;
	selp.b32 	%r2606, %r99, %r2605, %p245;
	selp.b32 	%r2607, %r103, %r2606, %p246;
	selp.b32 	%r2608, %r107, %r2607, %p247;
	// begin inline asm
	mov.b32 %r1926, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs133, %rs133};
	// end inline asm
	shr.u32 	%r2609, %r2596, 8;
	xor.b32  	%r1936, %r2609, 8947848;
	// begin inline asm
	lop3.b32 %r1923, %r921, %r1936, %r1926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1927, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1928, %r1926, %r1927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1931, %r1923, %r1928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1934, %r932, %r1936, %r1937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1939, %r1937, %r1938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1942, %r1934, %r1939;
	// end inline asm
	// begin inline asm
	mov.b32 %r1972, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs133, %rs133};
	// end inline asm
	shr.u32 	%r2610, %r2600, 8;
	xor.b32  	%r1982, %r2610, 8947848;
	// begin inline asm
	lop3.b32 %r1969, %r921, %r1982, %r1972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1974, %r1972, %r1973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1977, %r1969, %r1974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1980, %r932, %r1982, %r1983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1985, %r1983, %r1984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1988, %r1980, %r1985;
	// end inline asm
	// begin inline asm
	mov.b32 %r2018, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r2029, {%rs133, %rs133};
	// end inline asm
	shr.u32 	%r2611, %r2604, 8;
	xor.b32  	%r2028, %r2611, 8947848;
	// begin inline asm
	lop3.b32 %r2015, %r921, %r2028, %r2018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2020, %r2018, %r2019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2023, %r2015, %r2020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2026, %r932, %r2028, %r2029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2031, %r2029, %r2030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2034, %r2026, %r2031;
	// end inline asm
	// begin inline asm
	mov.b32 %r2064, {%rs131, %rs131};
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs133, %rs133};
	// end inline asm
	shr.u32 	%r2612, %r2608, 8;
	xor.b32  	%r2074, %r2612, 8947848;
	// begin inline asm
	lop3.b32 %r2061, %r921, %r2074, %r2064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2066, %r2064, %r2065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2069, %r2061, %r2066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2072, %r932, %r2074, %r2075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs137, %rs137};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2077, %r2075, %r2076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2080, %r2072, %r2077;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2083, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2086, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1942;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2089, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1988;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2092, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2069;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2034;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2080;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2170, %r2167}, {%r274, %r277}, {%r2083}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2179, %r2176}, {%r274, %r277}, {%r2086}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2188, %r2185}, {%r274, %r277}, {%r2089}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2197, %r2194}, {%r274, %r277}, {%r2092}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r274, %r277}, {%r2095}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r274, %r277}, {%r2098}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r274, %r277}, {%r2101}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r274, %r277}, {%r2104}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2163, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r2163, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r326, %r2170, %r2165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2172, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r2172, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r326, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2181, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r326, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r2190, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r326, %r2197, %r2192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r326, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r326, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r326, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r326, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r329, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r326, %r2167, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r329, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r326, %r2176, %r2242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r329, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r326, %r2185, %r2249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r329, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r326, %r2194, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r329, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r326, %r2203, %r2263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r329, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2273, %r326, %r2212, %r2270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r329, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2280, %r326, %r2221, %r2277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r329, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r326, %r2230, %r2284;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2364, %r2365}, {%r370, %r373}, {%r2168, %r2238}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2372, %r2373}, {%r370, %r373}, {%r2177, %r2245}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2380, %r2381}, {%r370, %r373}, {%r2186, %r2252}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2388, %r2389}, {%r370, %r373}, {%r2195, %r2259}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2396, %r2397}, {%r370, %r373}, {%r2204, %r2266}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2404, %r2405}, {%r370, %r373}, {%r2213, %r2273}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2412, %r2413}, {%r370, %r373}, {%r2222, %r2280}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2420, %r2421}, {%r370, %r373}, {%r2231, %r2287}, {%r1337, %r1337}, %r212, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2363, %r2364, %r2365, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2367, %r2364, %r2365, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2371, %r2372, %r2373, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2375, %r2372, %r2373, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2379, %r2380, %r2381, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2383, %r2380, %r2381, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2387, %r2388, %r2389, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2391, %r2388, %r2389, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2395, %r2396, %r2397, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2399, %r2396, %r2397, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2404, %r2405, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2407, %r2404, %r2405, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2411, %r2412, %r2413, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2415, %r2412, %r2413, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2419, %r2420, %r2421, %r660;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2420, %r2421, %r664;
	// end inline asm
	add.s16 	%rs217, %rs7, %rs267;
	add.s16 	%rs218, %rs217, -29;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2613, %rs223, 16;
	or.b32  	%r2614, %r200, %r2613;
	add.s32 	%r2615, %r201, %r2614;
	mul.wide.s32 	%rd203, %r2615, 4;
	add.s64 	%rd205, %rd38, %rd203;
	st.shared.u32 	[%rd205], %r2363;
	add.s32 	%r2616, %r202, %r2613;
	mul.wide.u32 	%rd206, %r2616, 4;
	add.s64 	%rd207, %rd38, %rd206;
	st.shared.u32 	[%rd207], %r2367;
	or.b32  	%r2617, %r203, %r2613;
	add.s32 	%r2618, %r201, %r2617;
	mul.wide.s32 	%rd208, %r2618, 4;
	add.s64 	%rd209, %rd38, %rd208;
	st.shared.u32 	[%rd209], %r2371;
	add.s32 	%r2619, %r204, %r2613;
	mul.wide.u32 	%rd210, %r2619, 4;
	add.s64 	%rd211, %rd38, %rd210;
	st.shared.u32 	[%rd211], %r2375;
	or.b32  	%r2620, %r205, %r2613;
	add.s32 	%r2621, %r201, %r2620;
	mul.wide.s32 	%rd212, %r2621, 4;
	add.s64 	%rd213, %rd38, %rd212;
	st.shared.u32 	[%rd213], %r2379;
	add.s32 	%r2622, %r206, %r2613;
	mul.wide.u32 	%rd214, %r2622, 4;
	add.s64 	%rd215, %rd38, %rd214;
	st.shared.u32 	[%rd215], %r2383;
	or.b32  	%r2623, %r207, %r2613;
	add.s32 	%r2624, %r201, %r2623;
	mul.wide.s32 	%rd216, %r2624, 4;
	add.s64 	%rd217, %rd38, %rd216;
	st.shared.u32 	[%rd217], %r2387;
	add.s32 	%r2625, %r208, %r2613;
	mul.wide.u32 	%rd218, %r2625, 4;
	add.s64 	%rd219, %rd38, %rd218;
	st.shared.u32 	[%rd219], %r2391;
	add.s16 	%rs224, %rs6, %rs267;
	add.s16 	%rs225, %rs224, -2;
	mul.hi.s16 	%rs226, %rs225, 10923;
	shr.u16 	%rs227, %rs226, 15;
	add.s16 	%rs228, %rs226, %rs227;
	mul.lo.s16 	%rs229, %rs228, 6;
	sub.s16 	%rs230, %rs225, %rs229;
	mul.wide.s16 	%r2626, %rs230, 16;
	or.b32  	%r2627, %r200, %r2626;
	add.s32 	%r2628, %r201, %r2627;
	mul.wide.s32 	%rd220, %r2628, 4;
	add.s64 	%rd221, %rd38, %rd220;
	st.shared.u32 	[%rd221], %r2395;
	add.s32 	%r2629, %r202, %r2626;
	mul.wide.u32 	%rd222, %r2629, 4;
	add.s64 	%rd223, %rd38, %rd222;
	st.shared.u32 	[%rd223], %r2399;
	or.b32  	%r2630, %r203, %r2626;
	add.s32 	%r2631, %r201, %r2630;
	mul.wide.s32 	%rd224, %r2631, 4;
	add.s64 	%rd225, %rd38, %rd224;
	st.shared.u32 	[%rd225], %r2403;
	add.s32 	%r2632, %r204, %r2626;
	mul.wide.u32 	%rd226, %r2632, 4;
	add.s64 	%rd227, %rd38, %rd226;
	st.shared.u32 	[%rd227], %r2407;
	or.b32  	%r2633, %r205, %r2626;
	add.s32 	%r2634, %r201, %r2633;
	mul.wide.s32 	%rd228, %r2634, 4;
	add.s64 	%rd229, %rd38, %rd228;
	st.shared.u32 	[%rd229], %r2411;
	add.s32 	%r2635, %r206, %r2626;
	mul.wide.u32 	%rd230, %r2635, 4;
	add.s64 	%rd231, %rd38, %rd230;
	st.shared.u32 	[%rd231], %r2415;
	or.b32  	%r2636, %r207, %r2626;
	add.s32 	%r2637, %r201, %r2636;
	mul.wide.s32 	%rd232, %r2637, 4;
	add.s64 	%rd233, %rd38, %rd232;
	st.shared.u32 	[%rd233], %r2419;
	add.s32 	%r2638, %r208, %r2626;
	mul.wide.u32 	%rd234, %r2638, 4;
	add.s64 	%rd235, %rd38, %rd234;
	st.shared.u32 	[%rd235], %r2423;
	bar.sync 	0;
	add.s16 	%rs231, %rs267, -5;
	mul.hi.s16 	%rs232, %rs231, 10923;
	shr.u16 	%rs233, %rs232, 15;
	add.s16 	%rs234, %rs232, %rs233;
	mul.lo.s16 	%rs235, %rs234, 6;
	sub.s16 	%rs236, %rs231, %rs235;
	mul.wide.s16 	%r2639, %rs236, 16;
	add.s32 	%r2640, %r209, %r2639;
	mul.wide.s32 	%rd236, %r2640, 4;
	add.s64 	%rd237, %rd38, %rd236;
	ld.shared.u32 	%r2431, [%rd237];
	add.s32 	%r2641, %r210, %r2639;
	mul.wide.s32 	%rd238, %r2641, 4;
	add.s64 	%rd239, %rd38, %rd238;
	ld.shared.u32 	%r2438, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2448, %r2445}, {%r382, %r385}, {%r2431}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2457, %r2454}, {%r382, %r385}, {%r2438}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2441, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r2441, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r420, %r2448, %r2443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2450, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2452, %r2450, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2455, %r420, %r2457, %r2452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r423, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r420, %r2445, %r2459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r423, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r420, %r2454, %r2466;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2492, %r2495}, {%r466, %r469}, {%r2446, %r2462}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2499, %r2503}, {%r466, %r469}, {%r2455, %r2469}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2491, %r2492, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2494, %r2495, %r2495, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r2499, %r2499, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r2503, %r2503, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r1517, %r2502, %r110;
	// end inline asm
	add.s16 	%rs237, %rs267, -4;
	mul.hi.s16 	%rs238, %rs237, 10923;
	shr.u16 	%rs239, %rs238, 15;
	add.s16 	%rs240, %rs238, %rs239;
	mul.lo.s16 	%rs241, %rs240, 6;
	sub.s16 	%rs242, %rs237, %rs241;
	mul.wide.s16 	%r2642, %rs242, 16;
	add.s32 	%r2643, %r209, %r2642;
	mul.wide.s32 	%rd240, %r2643, 4;
	add.s64 	%rd241, %rd38, %rd240;
	ld.shared.u32 	%r2514, [%rd241];
	add.s32 	%r2644, %r210, %r2642;
	mul.wide.s32 	%rd242, %r2644, 4;
	add.s64 	%rd243, %rd38, %rd242;
	ld.shared.u32 	%r2521, [%rd243];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2531, %r2528}, {%r382, %r385}, {%r2514}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2540, %r2537}, {%r382, %r385}, {%r2521}, {%r1337, %r1337};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2524, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2526, %r2524, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2529, %r420, %r2531, %r2526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2533, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r2533, %r2537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r420, %r2540, %r2535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r423, %r2531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r420, %r2528, %r2542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2549, %r423, %r2540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r420, %r2537, %r2549;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2575, %r2578}, {%r466, %r469}, {%r2529, %r2545}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2582, %r2586}, {%r466, %r469}, {%r2538, %r2552}, {%r1337, %r1337}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2574, %r2575, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2577, %r2578, %r2578, %r2574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2581, %r2582, %r2582, %r2577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2585, %r2586, %r2586, %r2581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r1517, %r2585, %r2506;
	// end inline asm
	add.s32 	%r3058, %r108, 2;
	setp.ne.s32 	%p248, %r3058, 40;
	@%p248 bra 	$L__BB0_153;
// %bb.150:                             // %L26440
                                        //   in Loop: Header=BB0_149 Depth=2
	setp.gt.u32 	%p249, %r261, 7;
	@%p249 bra 	$L__BB0_152;
// %bb.151:                             // %L26500
                                        //   in Loop: Header=BB0_149 Depth=2
	mad.lo.s32 	%r2645, %r109, 192, %r211;
	mul.wide.u32 	%rd244, %r2645, 4;
	add.s64 	%rd9, %rd4, %rd244;
	st.global.u32 	[%rd9], %r3060;
$L__BB0_152:                            // %L26639
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3058, 0;
	mov.u32 	%r3060, %r3058;
$L__BB0_153:                            // %oksrem11964
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s16 	%rs243, %rs267, -3;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2813, %rs248, 16;
	add.s32 	%r2814, %r209, %r2813;
	mul.wide.s32 	%rd245, %r2814, 4;
	add.s64 	%rd247, %rd38, %rd245;
	ld.shared.u32 	%r2651, [%rd247];
	add.s32 	%r2815, %r210, %r2813;
	mul.wide.s32 	%rd248, %r2815, 4;
	add.s64 	%rd249, %rd38, %rd248;
	ld.shared.u32 	%r2658, [%rd249];
	mov.u32 	%r2792, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2668, %r2665}, {%r382, %r385}, {%r2651}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2677, %r2674}, {%r382, %r385}, {%r2658}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r420, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r420, %r2677, %r2672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r423, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r420, %r2665, %r2679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r423, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r420, %r2674, %r2686;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2712, %r2715}, {%r466, %r469}, {%r2666, %r2682}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2719, %r2723}, {%r466, %r469}, {%r2675, %r2689}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2712, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r2715, %r2715, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r2719, %r2719, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r2723, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r1517, %r2722, %r3060;
	// end inline asm
	add.s16 	%rs249, %rs267, -2;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r2816, %rs254, 16;
	add.s32 	%r2817, %r209, %r2816;
	mul.wide.s32 	%rd250, %r2817, 4;
	add.s64 	%rd251, %rd38, %rd250;
	ld.shared.u32 	%r2734, [%rd251];
	add.s32 	%r2818, %r210, %r2816;
	mul.wide.s32 	%rd252, %r2818, 4;
	add.s64 	%rd253, %rd38, %rd252;
	ld.shared.u32 	%r2741, [%rd253];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2751, %r2748}, {%r382, %r385}, {%r2734}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2760, %r2757}, {%r382, %r385}, {%r2741}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2744, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2744, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r420, %r2751, %r2746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2753, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2753, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r420, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2762, %r423, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r420, %r2748, %r2762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r423, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r420, %r2757, %r2769;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2795, %r2798}, {%r466, %r469}, {%r2749, %r2765}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2802, %r2806}, {%r466, %r469}, {%r2758, %r2772}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2795, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r2806, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r1517, %r2805, %r2726;
	// end inline asm
	add.s32 	%r3061, %r3058, 2;
	setp.eq.s32 	%p250, %r3061, 40;
	@%p250 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_157;
$L__BB0_154:                            // %L28381
                                        //   in Loop: Header=BB0_149 Depth=2
	setp.gt.u32 	%p251, %r261, 7;
	@%p251 bra 	$L__BB0_156;
// %bb.155:                             // %L28441
                                        //   in Loop: Header=BB0_149 Depth=2
	mad.lo.s32 	%r2819, %r109, 192, %r211;
	mul.wide.u32 	%rd254, %r2819, 4;
	add.s64 	%rd10, %rd4, %rd254;
	st.global.u32 	[%rd10], %r3063;
$L__BB0_156:                            // %L28580
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3061, 0;
	mov.u32 	%r3063, %r3061;
$L__BB0_157:                            // %oksrem12817
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s16 	%rs255, %rs267, -1;
	mul.hi.s16 	%rs256, %rs255, 10923;
	shr.u16 	%rs257, %rs256, 15;
	add.s16 	%rs258, %rs256, %rs257;
	mul.lo.s16 	%rs259, %rs258, 6;
	sub.s16 	%rs260, %rs255, %rs259;
	mul.wide.s16 	%r2987, %rs260, 16;
	add.s32 	%r2988, %r209, %r2987;
	mul.wide.s32 	%rd255, %r2988, 4;
	add.s64 	%rd257, %rd38, %rd255;
	ld.shared.u32 	%r2825, [%rd257];
	add.s32 	%r2989, %r210, %r2987;
	mul.wide.s32 	%rd258, %r2989, 4;
	add.s64 	%rd259, %rd38, %rd258;
	ld.shared.u32 	%r2832, [%rd259];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2842, %r2839}, {%r382, %r385}, {%r2825}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2851, %r2848}, {%r382, %r385}, {%r2832}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2835, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r2835, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r420, %r2842, %r2837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2844, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2846, %r2844, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r420, %r2851, %r2846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2853, %r423, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2856, %r420, %r2839, %r2853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r423, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r420, %r2848, %r2860;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2886, %r2889}, {%r466, %r469}, {%r2840, %r2856}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2897}, {%r466, %r469}, {%r2849, %r2863}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r2886, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r2889, %r2889, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r2893, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r2897, %r2897, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r1517, %r2896, %r3063;
	// end inline asm
	mul.hi.s16 	%rs261, %rs267, 10923;
	shr.u16 	%rs262, %rs261, 15;
	add.s16 	%rs263, %rs261, %rs262;
	mul.lo.s16 	%rs264, %rs263, 6;
	sub.s16 	%rs265, %rs267, %rs264;
	mul.wide.s16 	%r2990, %rs265, 16;
	add.s32 	%r2991, %r209, %r2990;
	mul.wide.s32 	%rd260, %r2991, 4;
	add.s64 	%rd261, %rd38, %rd260;
	ld.shared.u32 	%r2908, [%rd261];
	add.s32 	%r2992, %r210, %r2990;
	mul.wide.s32 	%rd262, %r2992, 4;
	add.s64 	%rd263, %rd38, %rd262;
	ld.shared.u32 	%r2915, [%rd263];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2925, %r2922}, {%r382, %r385}, {%r2908}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2934, %r2931}, {%r382, %r385}, {%r2915}, {%r2792, %r2792};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2918, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r2918, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r420, %r2925, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2927, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2927, %r2931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r420, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r423, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r420, %r2922, %r2936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r423, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r420, %r2931, %r2943;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2969, %r2972}, {%r466, %r469}, {%r2923, %r2939}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2980}, {%r466, %r469}, {%r2932, %r2946}, {%r2792, %r2792}, %r236, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r2969, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r2972, %r2972, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r2976, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r2980, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1517, %r2979, %r2900;
	// end inline asm
	add.s32 	%r108, %r3061, 2;
	setp.eq.s32 	%p252, %r108, 40;
	@%p252 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_161;
$L__BB0_158:                            // %L30322
                                        //   in Loop: Header=BB0_149 Depth=2
	setp.gt.u32 	%p253, %r261, 7;
	@%p253 bra 	$L__BB0_160;
// %bb.159:                             // %L30382
                                        //   in Loop: Header=BB0_149 Depth=2
	mad.lo.s32 	%r2993, %r109, 192, %r211;
	mul.wide.u32 	%rd264, %r2993, 4;
	add.s64 	%rd11, %rd4, %rd264;
	st.global.u32 	[%rd11], %r110;
	bra.uni 	$L__BB0_160;
$L__BB0_163:                            // %L30553
	st.global.u32 	[%rd5], %r2792;
	ret;
$L__BB0_137:                            // %post_box_union
	mov.u64 	%rd136, exception2634;
	cvta.global.u64 	%rd137, %rd136;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd137;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_191:                            // %post_box_union6546
	mov.u64 	%rd175, exception2634;
	cvta.global.u64 	%rd176, %rd175;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd176;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd16;
	st.param.b32 	[param0+8], %r259;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
