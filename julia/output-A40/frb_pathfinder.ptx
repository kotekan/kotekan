// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2612[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2652[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<288>;
	.reg .b32 	%r<3039>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<388>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r262, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r263, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r263, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd30, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9];
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r264, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r265, %r3, %r264;
	add.s32 	%r266, %r265, %r5;
	mul.wide.u32 	%rd36, %r266, 4;
	add.s64 	%rd5, %rd30, %rd36;
	mov.u32 	%r267, 1;
	st.global.u32 	[%rd5], %r267;
	ld.global.u32 	%r6, [%rd14];
	setp.lt.s32 	%p5, %r6, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L205
	ld.param.u64 	%rd18, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd18];
	setp.lt.s32 	%p6, %r7, %r6;
	setp.gt.s32 	%p7, %r7, 1024;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L215
	ld.param.u64 	%rd22, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r8, [%rd22];
	sub.s32 	%r10, %r7, %r6;
	mad.lo.s32 	%r268, %r10, -1431655765, 715827872;
	shf.r.wrap.b32 	%r269, %r268, %r268, 4;
	setp.gt.u32 	%p9, %r269, 89478484;
	setp.lt.s32 	%p10, %r8, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L221
	ld.param.u64 	%rd26, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd26];
	setp.ge.s32 	%p12, %r9, %r8;
	setp.lt.s32 	%p13, %r9, 33;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass75
	sub.s32 	%r270, %r9, %r8;
	mul.hi.s32 	%r271, %r10, 1717986919;
	shr.u32 	%r272, %r271, 31;
	shr.s32 	%r273, %r271, 4;
	add.s32 	%r274, %r273, %r272;
	setp.ne.s32 	%p15, %r270, %r274;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass126
	and.b32  	%r150, %r264, 3;
	shr.u32 	%r151, %r264, 2;
	mul.lo.s32 	%r275, %r150, %r151;
	and.b32  	%r276, %r275, 7;
	cvt.rn.f32.s32 	%f205, %r276;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p292 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r153, %f788;
	and.b32  	%r277, %r153, 8388607;
	or.b32  	%r3022, %r277, 1065353216;
	mov.b32 	%f783, %r3022;
	add.s32 	%r278, %r153, -1073741824;
	and.b32  	%r3023, %r278, -8388608;
	setp.eq.s32 	%p23, %r3023, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r3023, 192937984;
	add.s32 	%r280, %r3022, %r279;
	mov.b32 	%f217, %r280;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3023, %r3023, %r279;
	mov.b32 	%r3022, %f783;
	setp.ne.s32 	%p24, %r3023, 0;
	setp.ne.s32 	%p25, %r3022, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r153, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r152, %f172;
	setp.lt.u32 	%p18, %r152, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r152, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r281, %f169;
	and.b32  	%r160, %r281, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r282, %f784;
	or.b32  	%r283, %r160, %r282;
	mov.b32 	%f784, %r283;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r290, %f227;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f228, %r292;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r163, %r264, 1;
	and.b32  	%r164, %r163, 2;
	mul.lo.s32 	%r298, %r164, %r151;
	cvt.rn.f32.s32 	%f259, %r298;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r12, %f734;
	and.b32  	%r299, %r12, 8388607;
	or.b32  	%r2972, %r299, 1065353216;
	mov.b32 	%f733, %r2972;
	add.s32 	%r300, %r12, -1073741824;
	and.b32  	%r2973, %r300, -8388608;
	setp.eq.s32 	%p43, %r2973, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i2027.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i2027
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r2973, 192937984;
	add.s32 	%r302, %r2972, %r301;
	mov.b32 	%f271, %r302;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2973, %r2973, %r301;
	mov.b32 	%r2972, %f733;
	setp.ne.s32 	%p44, %r2973, 0;
	setp.ne.s32 	%p45, %r2972, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i2029
	setp.gt.u32 	%p47, %r12, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i2006
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r11, %f2;
	setp.lt.u32 	%p38, %r11, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r11, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i2010
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i2013
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i2032
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r165, %r164, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r303, %f186;
	and.b32  	%r304, %r303, -2147483648;
	mov.b32 	%r305, %f734;
	or.b32  	%r306, %r304, %r305;
	mov.b32 	%f734, %r306;
$L__BB0_20:                             // %__nv_fmodf.exit2033
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r307, %f282;
	and.b32  	%r308, %r307, -2147483648;
	or.b32  	%r309, %r308, 1056964608;
	mov.b32 	%f283, %r309;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r165, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L466
	mul.lo.s32 	%r315, %r165, %r151;
	mul.hi.u32 	%r316, %r315, -1431655765;
	shr.u32 	%r317, %r316, 4;
	mul.lo.s32 	%r318, %r317, 24;
	sub.s32 	%r319, %r315, %r318;
	cvt.rn.f32.s32 	%f311, %r319;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r20, %f738;
	and.b32  	%r320, %r20, 8388607;
	or.b32  	%r2974, %r320, 1065353216;
	mov.b32 	%f737, %r2974;
	add.s32 	%r321, %r20, -1073741824;
	and.b32  	%r2975, %r321, -8388608;
	setp.eq.s32 	%p64, %r2975, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2058.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2058
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r322, %r2975, 192937984;
	add.s32 	%r323, %r2974, %r322;
	mov.b32 	%f323, %r323;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2975, %r2975, %r322;
	mov.b32 	%r2974, %f737;
	setp.ne.s32 	%p65, %r2975, 0;
	setp.ne.s32 	%p66, %r2974, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2060
	setp.gt.u32 	%p68, %r20, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2037
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r19, %f21;
	setp.lt.u32 	%p59, %r19, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r19, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2041
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2044
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2063
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r324, %f18;
	and.b32  	%r325, %r324, -2147483648;
	mov.b32 	%r326, %f738;
	or.b32  	%r327, %r325, %r326;
	mov.b32 	%f738, %r327;
$L__BB0_35:                             // %__nv_fmodf.exit2064
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r328, %f333;
	and.b32  	%r329, %r328, -2147483648;
	or.b32  	%r330, %r329, 1056964608;
	mov.b32 	%f334, %r330;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r331, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r332, %r331, 1;
	setp.eq.b32 	%p72, %r332, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r333, %r331, 2;
	setp.eq.s32 	%p73, %r333, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r334, %r331, 1;
	and.b32  	%r335, %r334, 2;
	setp.eq.s32 	%p74, %r335, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L500
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r29, %r151, 3;
	setp.eq.s32 	%p77, %r29, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L538
	mul.lo.s32 	%r342, %r164, %r29;
	cvt.u16.u32 	%rs11, %r342;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r31, %f744;
	and.b32  	%r343, %r31, 8388607;
	or.b32  	%r2976, %r343, 1065353216;
	mov.b32 	%f743, %r2976;
	add.s32 	%r344, %r31, -1073741824;
	and.b32  	%r2977, %r344, -8388608;
	setp.eq.s32 	%p85, %r2977, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2089.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2089
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r2977, 192937984;
	add.s32 	%r346, %r2976, %r345;
	mov.b32 	%f376, %r346;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2977, %r2977, %r345;
	mov.b32 	%r2976, %f743;
	setp.ne.s32 	%p86, %r2977, 0;
	setp.ne.s32 	%p87, %r2976, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2091
	setp.gt.u32 	%p89, %r31, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2068
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r30, %f42;
	setp.lt.u32 	%p80, %r30, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r30, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2072
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2075
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2094
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r347, %f39;
	and.b32  	%r348, %r347, -2147483648;
	mov.b32 	%r349, %f744;
	or.b32  	%r350, %r348, %r349;
	mov.b32 	%f744, %r350;
$L__BB0_51:                             // %__nv_fmodf.exit2095
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r351, %f386;
	and.b32  	%r352, %r351, -2147483648;
	or.b32  	%r353, %r352, 1056964608;
	mov.b32 	%f387, %r353;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r354, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r355, %r354, 1;
	setp.eq.b32 	%p93, %r355, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r356, %r354, 2;
	setp.eq.s32 	%p94, %r356, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r357, %r354, 1;
	and.b32  	%r358, %r357, 2;
	setp.eq.s32 	%p95, %r358, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L572
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L580
	mul.lo.s32 	%r359, %r165, %r29;
	mul.hi.u32 	%r360, %r359, -1431655765;
	shr.u32 	%r361, %r360, 1;
	mul.lo.s32 	%r362, %r361, 3;
	sub.s32 	%r363, %r359, %r362;
	cvt.rn.f32.s32 	%f417, %r363;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r39, %f750;
	and.b32  	%r364, %r39, 8388607;
	or.b32  	%r2978, %r364, 1065353216;
	mov.b32 	%f749, %r2978;
	add.s32 	%r365, %r39, -1073741824;
	and.b32  	%r2979, %r365, -8388608;
	setp.eq.s32 	%p108, %r2979, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2120.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2120
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r366, %r2979, 192937984;
	add.s32 	%r367, %r2978, %r366;
	mov.b32 	%f429, %r367;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2979, %r2979, %r366;
	mov.b32 	%r2978, %f749;
	setp.ne.s32 	%p109, %r2979, 0;
	setp.ne.s32 	%p110, %r2978, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2122
	setp.gt.u32 	%p112, %r39, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2099
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r38, %f63;
	setp.lt.u32 	%p103, %r38, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r38, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2103
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2106
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2125
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r368, %f60;
	and.b32  	%r369, %r368, -2147483648;
	mov.b32 	%r370, %f750;
	or.b32  	%r371, %r369, %r370;
	mov.b32 	%f750, %r371;
$L__BB0_67:                             // %__nv_fmodf.exit2126
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r372, %f439;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f440, %r374;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r375, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r376, %r375, 1;
	setp.eq.b32 	%p116, %r376, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p117, %r377, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r378, %r375, 1;
	and.b32  	%r379, %r378, 2;
	setp.eq.s32 	%p118, %r379, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L614
	cvt.rzi.s32.f32 	%r293, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r46, %r264, 2;
	setp.eq.s32 	%p121, %r46, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L623
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L625
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r294, %r293, 1;
	cvt.rzi.s32.f32 	%r310, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p292 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r167, %f788;
	and.b32  	%r386, %r167, 8388607;
	or.b32  	%r3024, %r386, 1065353216;
	mov.b32 	%f787, %r3024;
	add.s32 	%r387, %r167, -1073741824;
	and.b32  	%r3025, %r387, -8388608;
	setp.eq.s32 	%p129, %r3025, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2151.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2151
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3025, 192937984;
	add.s32 	%r389, %r3024, %r388;
	mov.b32 	%f479, %r389;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3025, %r3025, %r388;
	mov.b32 	%r3024, %f787;
	setp.ne.s32 	%p130, %r3025, 0;
	setp.ne.s32 	%p131, %r3024, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2153
	setp.gt.u32 	%p133, %r167, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2130
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r166, %f189;
	setp.lt.u32 	%p124, %r166, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r166, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2134
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2137
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2156
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r294, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r311, %r310, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r390, %f788;
	or.b32  	%r391, %r160, %r390;
	mov.b32 	%f788, %r391;
$L__BB0_187:                            // %__nv_fmodf.exit2157
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r295, %r293, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r311, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r398, %f489;
	and.b32  	%r399, %r398, -2147483648;
	or.b32  	%r400, %r399, 1056964608;
	mov.b32 	%f490, %r400;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r401, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r402, %r401, 1;
	setp.eq.b32 	%p137, %r402, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r403, %r401, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f760;
	and.b32  	%r406, %r50, 8388607;
	or.b32  	%r2980, %r406, 1065353216;
	mov.b32 	%f759, %r2980;
	add.s32 	%r407, %r50, -1073741824;
	and.b32  	%r2981, %r407, -8388608;
	setp.eq.s32 	%p149, %r2981, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2182.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2182
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r408, %r2981, 192937984;
	add.s32 	%r409, %r2980, %r408;
	mov.b32 	%f532, %r409;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2981, %r2981, %r408;
	mov.b32 	%r2980, %f759;
	setp.ne.s32 	%p150, %r2981, 0;
	setp.ne.s32 	%p151, %r2980, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2184
	setp.gt.u32 	%p153, %r50, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2161
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r49, %f88;
	setp.lt.u32 	%p144, %r49, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r49, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2165
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2168
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2187
	setp.eq.s32 	%p32, %r295, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r296, %r293, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r312, %r310, 2;
	setp.eq.s32 	%p138, %r403, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r404, %r401, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r410, %f203;
	and.b32  	%r411, %r410, -2147483648;
	mov.b32 	%r412, %f760;
	or.b32  	%r413, %r411, %r412;
	mov.b32 	%f760, %r413;
$L__BB0_88:                             // %__nv_fmodf.exit2188
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r297, %r296, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r312, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r313, %r310, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r405, %r404, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r414, %f542;
	and.b32  	%r415, %r414, -2147483648;
	or.b32  	%r416, %r415, 1056964608;
	mov.b32 	%f543, %r416;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r417, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r418, %r417, 1;
	setp.eq.b32 	%p157, %r418, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r419, %r417, 2;
	setp.eq.s32 	%p158, %r419, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r420, %r417, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r151;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f764;
	and.b32  	%r422, %r58, 8388607;
	or.b32  	%r2982, %r422, 1065353216;
	mov.b32 	%f763, %r2982;
	add.s32 	%r423, %r58, -1073741824;
	and.b32  	%r2983, %r423, -8388608;
	setp.eq.s32 	%p169, %r2983, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2213.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2213
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r2983, 192937984;
	add.s32 	%r425, %r2982, %r424;
	mov.b32 	%f584, %r425;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2983, %r2983, %r424;
	mov.b32 	%r2982, %f763;
	setp.ne.s32 	%p170, %r2983, 0;
	setp.ne.s32 	%p171, %r2982, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2215
	setp.gt.u32 	%p173, %r58, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2192
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p164, %r57, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r57, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2196
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2199
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2218
	setp.eq.s32 	%p33, %r297, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r314, %r313, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r405, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r421, %r420, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r426, %f104;
	and.b32  	%r427, %r426, -2147483648;
	mov.b32 	%r428, %f764;
	or.b32  	%r429, %r427, %r428;
	mov.b32 	%f764, %r429;
$L__BB0_102:                            // %__nv_fmodf.exit2219
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r314, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r421, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r436, %f595;
	and.b32  	%r437, %r436, -2147483648;
	or.b32  	%r438, %r437, 1056964608;
	mov.b32 	%f596, %r438;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r439, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r440, %r439, 1;
	setp.eq.b32 	%p177, %r440, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r441, %r439, 2;
	setp.eq.s32 	%p178, %r441, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r442, %r439, 1;
	and.b32  	%r443, %r442, 2;
	setp.eq.s32 	%p179, %r443, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r68, %r264, 1;
	shr.u32 	%r69, %r264, 4;
	setp.ne.s32 	%p182, %r68, %r69;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L830
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r71, %f768;
	and.b32  	%r444, %r71, 8388607;
	or.b32  	%r2984, %r444, 1065353216;
	mov.b32 	%f767, %r2984;
	add.s32 	%r445, %r71, -1073741824;
	and.b32  	%r2985, %r445, -8388608;
	setp.eq.s32 	%p190, %r2985, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2244.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2244
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r2985, 192937984;
	add.s32 	%r447, %r2984, %r446;
	mov.b32 	%f638, %r447;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2985, %r2985, %r446;
	mov.b32 	%r2984, %f767;
	setp.ne.s32 	%p191, %r2985, 0;
	setp.ne.s32 	%p192, %r2984, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2246
	setp.gt.u32 	%p194, %r71, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2223
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r70, %f124;
	setp.lt.u32 	%p185, %r70, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r70, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2227
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2230
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2249
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r448, %f121;
	and.b32  	%r449, %r448, -2147483648;
	mov.b32 	%r450, %f768;
	or.b32  	%r451, %r449, %r450;
	mov.b32 	%f768, %r451;
$L__BB0_117:                            // %__nv_fmodf.exit2250
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r452, %f648;
	and.b32  	%r453, %r452, -2147483648;
	or.b32  	%r454, %r453, 1056964608;
	mov.b32 	%f649, %r454;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r455, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r456, %r455, 1;
	setp.eq.b32 	%p198, %r456, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r457, %r455, 2;
	setp.eq.s32 	%p199, %r457, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r458, %r455, 1;
	and.b32  	%r459, %r458, 2;
	setp.eq.s32 	%p200, %r459, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L869
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r67, %r151, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L872
	cvt.rn.f32.s32 	%f679, %r67;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r79, %f774;
	and.b32  	%r460, %r79, 8388607;
	or.b32  	%r2986, %r460, 1065353216;
	mov.b32 	%f773, %r2986;
	add.s32 	%r461, %r79, -1073741824;
	and.b32  	%r2987, %r461, -8388608;
	setp.eq.s32 	%p211, %r2987, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2275.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2275
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r462, %r2987, 192937984;
	add.s32 	%r463, %r2986, %r462;
	mov.b32 	%f691, %r463;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2987, %r2987, %r462;
	mov.b32 	%r2986, %f773;
	setp.ne.s32 	%p212, %r2987, 0;
	setp.ne.s32 	%p213, %r2986, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2277
	setp.gt.u32 	%p215, %r79, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2254
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r78, %f145;
	setp.lt.u32 	%p206, %r78, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r78, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2258
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2261
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2280
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r464, %f142;
	and.b32  	%r465, %r464, -2147483648;
	mov.b32 	%r466, %f774;
	or.b32  	%r467, %r465, %r466;
	mov.b32 	%f774, %r467;
$L__BB0_133:                            // %__nv_fmodf.exit2281
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r468, %f701;
	and.b32  	%r469, %r468, -2147483648;
	or.b32  	%r470, %r469, 1056964608;
	mov.b32 	%f702, %r470;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r471, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r472, %r471, 1;
	setp.eq.b32 	%p219, %r472, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r473, %r471, 2;
	setp.eq.s32 	%p220, %r473, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r474, %r471, 1;
	and.b32  	%r475, %r474, 2;
	setp.eq.s32 	%p221, %r475, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L906
	mov.b32 	%r286, %f258;
	mov.b32 	%r289, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r394, %f520;
	mov.b32 	%r397, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L915
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L917
	xor.b32  	%r285, %r289, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	mov.b32 	%r337, %f17;
	mov.b32 	%r338, %f740;
	mov.b32 	%r340, %f16;
	mov.b32 	%r341, %f741;
	mov.b32 	%r381, %f754;
	mov.b32 	%r382, %f756;
	mov.b32 	%r384, %f755;
	mov.b32 	%r385, %f757;
	xor.b32  	%r393, %r397, -2147483648;
	mov.b32 	%r432, %f625;
	mov.b32 	%r431, %f103;
	mov.b32 	%r435, %f622;
	mov.b32 	%r434, %f102;
	mov.b32 	%r477, %f778;
	mov.b32 	%r478, %f780;
	mov.b32 	%r480, %f779;
	mov.b32 	%r481, %f781;
	setp.gt.u32 	%p225, %r264, 15;
	mov.u32 	%r176, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L947
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mad.lo.s32 	%r483, %r264, 6, %r4;
	cvt.u16.u32 	%rs17, %r483;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r484, %rs22;
	and.b32  	%r485, %r484, 255;
	mul.wide.u32 	%rd37, %r485, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.u32 	%r486, [%rd38];
	cvt.s32.s16 	%r487, %r486;
	shr.s32 	%r488, %r486, 16;
	mul.lo.s32 	%r489, %r488, 290;
	mad.lo.s32 	%r176, %r487, 33, %r489;
$L__BB0_138:                            // %pass509
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r380, %r382, %r381;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r383, %r385, %r384;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r476, %r478, %r477;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	shl.b32 	%r491, %r4, 1;
	and.b32  	%r492, %r491, 2;
	mul.lo.s32 	%r493, %r150, 24;
	shr.u32 	%r494, %r264, 3;
	and.b32  	%r495, %r494, 2;
	or.b32  	%r177, %r495, %r67;
	cvt.u16.u32 	%rs25, %r177;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r496, %rs29;
	and.b32  	%r497, %r496, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r498, %rs30, 8;
	bfe.u32 	%r499, %r264, 3, 1;
	or.b32  	%r500, %r492, %r499;
	add.s32 	%r501, %r493, %r3;
	or.b32  	%r502, %r501, %r500;
	add.s32 	%r503, %r502, %r498;
	mul.wide.u32 	%rd39, %r503, 4;
	add.s64 	%rd40, %rd2, %rd39;
	ld.global.u32 	%r178, [%rd40];
	or.b32  	%r504, %r3, %r499;
	or.b32  	%r505, %r504, %r492;
	cvt.u64.u32 	%rd41, %r498;
	cvt.u64.u32 	%rd42, %r493;
	cvt.u64.u32 	%rd43, %r505;
	add.s64 	%rd44, %rd43, %rd42;
	add.s64 	%rd45, %rd44, %rd41;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.u32 	%r179, [%rd47+16];
	cvt.u64.u32 	%rd48, %r500;
	cvt.u64.u32 	%rd49, %r3;
	add.s64 	%rd50, %rd49, %rd42;
	add.s64 	%rd51, %rd50, %rd48;
	add.s64 	%rd52, %rd51, %rd41;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.u32 	%r180, [%rd54+384];
	cvt.u64.u32 	%rd55, %r492;
	cvt.u64.u32 	%rd56, %r499;
	add.s64 	%rd57, %rd49, %rd56;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd42;
	add.s64 	%rd60, %rd59, %rd41;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.u32 	%r181, [%rd62+400];
	shl.b32 	%r182, %r6, 16;
	shl.b32 	%r506, %r264, 2;
	shl.b32 	%r507, %r2, 5;
	shl.b32 	%r508, %r4, 2;
	or.b32  	%r183, %r508, %r494;
	and.b32  	%r509, %r506, 28;
	or.b32  	%r184, %r509, %r507;
	and.b32  	%r185, %r264, 4;
	bfe.s32 	%r510, %r264, 2, 1;
	shl.b32 	%r511, %r264, 4;
	and.b32  	%r512, %r163, 8;
	or.b32  	%r513, %r512, %r511;
	bfe.u32 	%r514, %r513, 3, 3;
	mul.lo.s32 	%r186, %r514, 260;
	cvt.u16.u32 	%rs31, %r264;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r515, %rs36;
	and.b32  	%r187, %r515, 255;
	add.s32 	%r516, %r4, 6;
	shr.u32 	%r517, %r516, 3;
	add.s32 	%r518, %r5, 192;
	and.b32  	%r519, %r518, 224;
	mad.lo.s32 	%r188, %r517, 260, %r519;
	add.s32 	%r520, %r4, 12;
	shr.u32 	%r521, %r520, 3;
	add.s32 	%r522, %r5, 128;
	and.b32  	%r523, %r522, 224;
	mad.lo.s32 	%r189, %r521, 260, %r523;
	add.s32 	%r524, %r4, 18;
	shr.u32 	%r525, %r524, 3;
	add.s32 	%r526, %r5, 64;
	and.b32  	%r527, %r526, 224;
	mad.lo.s32 	%r190, %r525, 260, %r527;
	or.b32  	%r191, %r5, 780;
	add.s32 	%r528, %r4, 30;
	shr.u32 	%r529, %r528, 3;
	mad.lo.s32 	%r192, %r529, 260, %r519;
	add.s32 	%r530, %r4, 36;
	shr.u32 	%r531, %r530, 3;
	mad.lo.s32 	%r193, %r531, 260, %r523;
	add.s32 	%r532, %r4, 42;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r194, %r533, 260, %r527;
	or.b32  	%r195, %r5, 1560;
	add.s32 	%r534, %r4, 54;
	shr.u32 	%r535, %r534, 3;
	mad.lo.s32 	%r196, %r535, 260, %r519;
	add.s32 	%r536, %r4, 60;
	bfe.u32 	%r537, %r536, 3, 3;
	mad.lo.s32 	%r197, %r537, 260, %r523;
	mul.lo.s32 	%r538, %r150, 870;
	shr.u32 	%r539, %r4, 1;
	cvt.u16.u32 	%rs37, %r539;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r540, %rs42;
	and.b32  	%r198, %r540, 255;
	mad.lo.s32 	%r541, %r500, 33, %r538;
	mad.lo.s32 	%r199, %r497, 290, %r541;
	add.s32 	%r200, %r199, 132;
	setp.lt.u32 	%p227, %r264, 4;
	setp.eq.s32 	%p228, %r151, 1;
	setp.eq.s32 	%p229, %r151, 4;
	setp.eq.s32 	%p230, %r151, 5;
	setp.eq.s32 	%p231, %r68, 0;
	selp.b32 	%r542, 0, 784, %p231;
	or.b32  	%r543, %r492, %r69;
	selp.b32 	%r201, 0, 392, %p121;
	bfe.s32 	%r544, %r264, 3, 1;
	and.b32  	%r202, %r544, 98;
	and.b32  	%r203, %r510, 196;
	or.b32  	%r204, %r543, %r542;
	or.b32  	%r545, %r202, %r201;
	add.s32 	%r546, %r545, %r203;
	add.s32 	%r205, %r546, %r204;
	add.s32 	%r547, %r546, 1576;
	add.s32 	%r206, %r547, %r204;
	or.b32  	%r207, %r204, 4;
	add.s32 	%r208, %r546, %r207;
	add.s32 	%r209, %r547, %r207;
	add.s32 	%r548, %r546, 1584;
	add.s32 	%r210, %r548, %r204;
	add.s32 	%r211, %r548, %r207;
	mul.lo.s32 	%r549, %r69, 784;
	and.b32  	%r550, %r4, 1;
	neg.s32 	%r551, %r550;
	and.b32  	%r552, %r551, 392;
	shr.u32 	%r553, %r4, 2;
	and.b32  	%r554, %r163, 6;
	and.b32  	%r555, %r544, 1576;
	bfe.s32 	%r556, %r4, 1, 1;
	and.b32  	%r557, %r556, 196;
	or.b32  	%r558, %r67, %r549;
	mad.lo.s32 	%r559, %r553, 98, %r558;
	add.s32 	%r560, %r559, %r554;
	add.s32 	%r561, %r560, %r552;
	add.s32 	%r562, %r561, %r555;
	add.s32 	%r212, %r562, %r557;
	add.s32 	%r213, %r212, 8;
	mul.lo.s32 	%r563, %r8, 393216;
	and.b32  	%r564, %r264, 7;
	cvt.u16.u32 	%rs43, %r183;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r565, %rs49;
	and.b32  	%r566, %r565, 248;
	or.b32  	%r567, %r564, %r3;
	add.s32 	%r214, %r567, %r566;
	cvt.s64.s32 	%rd6, %r563;
	add.s32 	%r568, %r199, %r198;
	mul.wide.u32 	%rd63, %r568, 4;
	mov.u64 	%rd64, shmem;
	add.s64 	%rd7, %rd64, %rd63;
	add.s32 	%r569, %r200, %r198;
	mul.wide.u32 	%rd65, %r569, 4;
	add.s64 	%rd8, %rd64, %rd65;
	cvt.u64.u32 	%rd66, %r199;
	cvt.u64.u16 	%rd67, %rs42;
	and.b64  	%rd68, %rd67, 255;
	add.s64 	%rd69, %rd66, %rd68;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd9, %rd64, %rd70;
	cvt.u64.u32 	%rd71, %r200;
	add.s64 	%rd72, %rd71, %rd68;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd10, %rd64, %rd73;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r570, %r264, 24;
	setp.eq.s32 	%p233, %r570, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r570, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r215, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r216, 1145324612, -286331154, %p232;
	add.s32 	%r571, %r151, -1;
	setp.lt.u32 	%p238, %r571, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r570, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r217, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r89, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r239, %r216, %r217, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r109, %r89;
	mov.u32 	%r110, %r89;
	mov.u32 	%r111, %r89;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30906
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r149, %r89, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r89, 432;
	mov.u32 	%r89, %r149;
	@%p291 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1702
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r572, %r89, %r6;
	setp.gt.s32 	%p240, %r7, %r572;
	@%p240 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem824
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p241, %r177, 3;
	setp.gt.u32 	%p242, %r4, 3;
	setp.eq.s32 	%p243, %r185, 0;
	mul.hi.u32 	%r670, %r89, -1431655765;
	shr.u32 	%r671, %r670, 5;
	mul.lo.s32 	%r672, %r671, 48;
	add.s32 	%r673, %r672, %r183;
	cvt.u16.u32 	%rs50, %r673;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 7;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -512;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.u32.u16 	%r674, %rs55;
	shl.b32 	%r675, %r674, 16;
	or.b32  	%r676, %r184, %r675;
	add.s32 	%r677, %r676, %r182;
	shr.s32 	%r678, %r677, 31;
	shr.u32 	%r679, %r678, 7;
	add.s32 	%r680, %r677, %r679;
	shr.s32 	%r681, %r680, 25;
	setp.lt.s32 	%p244, %r677, 0;
	and.b32  	%r682, %r680, -33554432;
	setp.ne.s32 	%p245, %r682, %r677;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r683, 1, 0, %p246;
	sub.s32 	%r684, %r683, %r681;
	shl.b32 	%r685, %r684, 25;
	add.s32 	%r686, %r685, %r677;
	mul.wide.s32 	%rd74, %r686, 4;
	add.s64 	%rd75, %rd3, %rd74;
	ld.global.v4.u32 	{%r687, %r688, %r689, %r690}, [%rd75];
	add.s16 	%rs56, %rs50, 24;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 7;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -512;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r691, %rs61;
	shl.b32 	%r692, %r691, 16;
	or.b32  	%r693, %r184, %r692;
	add.s32 	%r694, %r693, %r182;
	shr.s32 	%r695, %r694, 31;
	shr.u32 	%r696, %r695, 7;
	add.s32 	%r697, %r694, %r696;
	shr.s32 	%r698, %r697, 25;
	setp.lt.s32 	%p247, %r694, 0;
	and.b32  	%r699, %r697, -33554432;
	setp.ne.s32 	%p248, %r699, %r694;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r700, 1, 0, %p249;
	sub.s32 	%r701, %r700, %r698;
	shl.b32 	%r702, %r701, 25;
	add.s32 	%r703, %r702, %r694;
	mul.wide.s32 	%rd76, %r703, 4;
	add.s64 	%rd77, %rd3, %rd76;
	ld.global.v4.u32 	{%r704, %r705, %r706, %r707}, [%rd77];
	selp.b32 	%r708, %r689, %r687, %p243;
	shfl.sync.bfly.b32	%r709, %r708, 4, 31, -1;
	selp.b32 	%r575, %r687, %r709, %p243;
	selp.b32 	%r580, %r709, %r689, %p243;
	selp.b32 	%r710, %r690, %r688, %p243;
	shfl.sync.bfly.b32	%r711, %r710, 4, 31, -1;
	selp.b32 	%r583, %r688, %r711, %p243;
	selp.b32 	%r588, %r711, %r690, %p243;
	selp.b32 	%r712, %r706, %r704, %p243;
	shfl.sync.bfly.b32	%r713, %r712, 4, 31, -1;
	selp.b32 	%r591, %r704, %r713, %p243;
	selp.b32 	%r596, %r713, %r706, %p243;
	selp.b32 	%r714, %r707, %r705, %p243;
	shfl.sync.bfly.b32	%r715, %r714, 4, 31, -1;
	selp.b32 	%r599, %r705, %r715, %p243;
	selp.b32 	%r604, %r715, %r707, %p243;
	shl.b32 	%r576, %r580, 4;
	mov.u32 	%r574, 252645135;
	// begin inline asm
	lop3.b32 %r606, %r574, %r575, %r576, 202;
	// end inline asm
	shr.u32 	%r579, %r575, 4;
	// begin inline asm
	lop3.b32 %r622, %r574, %r579, %r580, 202;
	// end inline asm
	shl.b32 	%r584, %r588, 4;
	// begin inline asm
	lop3.b32 %r614, %r574, %r583, %r584, 202;
	// end inline asm
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r630, %r574, %r587, %r588, 202;
	// end inline asm
	shl.b32 	%r592, %r596, 4;
	// begin inline asm
	lop3.b32 %r607, %r574, %r591, %r592, 202;
	// end inline asm
	shr.u32 	%r595, %r591, 4;
	// begin inline asm
	lop3.b32 %r623, %r574, %r595, %r596, 202;
	// end inline asm
	shl.b32 	%r600, %r604, 4;
	// begin inline asm
	lop3.b32 %r615, %r574, %r599, %r600, 202;
	// end inline asm
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r631, %r574, %r603, %r604, 202;
	// end inline asm
	mov.u32 	%r608, 25152;
	// begin inline asm
	prmt.b32 %r638, %r606, %r607, %r608;
	// end inline asm
	mov.u32 	%r612, 29521;
	// begin inline asm
	prmt.b32 %r654, %r606, %r607, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r614, %r615, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r614, %r615, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r639, %r622, %r623, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r622, %r623, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r647, %r630, %r631, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r630, %r631, %r612;
	// end inline asm
	mov.u32 	%r664, 21520;
	// begin inline asm
	prmt.b32 %r637, %r638, %r639, %r664;
	// end inline asm
	mov.u32 	%r668, 30258;
	// begin inline asm
	prmt.b32 %r641, %r638, %r639, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r646, %r647, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r646, %r647, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r653, %r654, %r655, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r654, %r655, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r662, %r663, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r662, %r663, %r668;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r716, %rs67;
	add.s32 	%r717, %r186, %r716;
	mul.wide.s32 	%rd78, %r717, 4;
	add.s64 	%rd80, %rd64, %rd78;
	st.shared.u32 	[%rd80], %r637;
	add.s32 	%r718, %r717, 128;
	mul.wide.u32 	%rd81, %r718, 4;
	add.s64 	%rd82, %rd64, %rd81;
	st.shared.u32 	[%rd82], %r645;
	add.s32 	%r719, %r717, 64;
	mul.wide.u32 	%rd83, %r719, 4;
	add.s64 	%rd84, %rd64, %rd83;
	st.shared.u32 	[%rd84], %r641;
	add.s32 	%r720, %r717, 192;
	mul.wide.u32 	%rd85, %r720, 4;
	add.s64 	%rd86, %rd64, %rd85;
	st.shared.u32 	[%rd86], %r649;
	add.s32 	%r721, %r717, 32;
	mul.wide.u32 	%rd87, %r721, 4;
	add.s64 	%rd88, %rd64, %rd87;
	st.shared.u32 	[%rd88], %r653;
	add.s32 	%r722, %r717, 160;
	mul.wide.u32 	%rd89, %r722, 4;
	add.s64 	%rd90, %rd64, %rd89;
	st.shared.u32 	[%rd90], %r661;
	add.s32 	%r723, %r717, 96;
	mul.wide.u32 	%rd91, %r723, 4;
	add.s64 	%rd92, %rd64, %rd91;
	st.shared.u32 	[%rd92], %r657;
	add.s32 	%r724, %r717, 224;
	mul.wide.u32 	%rd93, %r724, 4;
	add.s64 	%rd94, %rd64, %rd93;
	st.shared.u32 	[%rd94], %r665;
	bar.sync 	0;
	add.s32 	%r725, %r672, %r187;
	cvt.u16.u32 	%rs68, %r725;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r726, %rs74;
	add.s32 	%r727, %r5, %r726;
	mul.wide.s32 	%rd95, %r727, 4;
	add.s64 	%rd96, %rd64, %rd95;
	ld.shared.u32 	%r728, [%rd96];
	add.s32 	%r729, %r188, %r726;
	mul.wide.s32 	%rd97, %r729, 4;
	add.s64 	%rd98, %rd64, %rd97;
	ld.shared.u32 	%r730, [%rd98];
	add.s32 	%r731, %r189, %r726;
	mul.wide.u32 	%rd99, %r731, 4;
	add.s64 	%rd100, %rd64, %rd99;
	ld.shared.u32 	%r732, [%rd100];
	add.s32 	%r733, %r190, %r726;
	mul.wide.u32 	%rd101, %r733, 4;
	add.s64 	%rd102, %rd64, %rd101;
	ld.shared.u32 	%r734, [%rd102];
	add.s32 	%r735, %r191, %r726;
	mul.wide.u32 	%rd103, %r735, 4;
	add.s64 	%rd104, %rd64, %rd103;
	ld.shared.u32 	%r736, [%rd104];
	add.s32 	%r737, %r192, %r726;
	mul.wide.u32 	%rd105, %r737, 4;
	add.s64 	%rd106, %rd64, %rd105;
	ld.shared.u32 	%r738, [%rd106];
	add.s32 	%r739, %r193, %r726;
	mul.wide.u32 	%rd107, %r739, 4;
	add.s64 	%rd108, %rd64, %rd107;
	ld.shared.u32 	%r740, [%rd108];
	add.s32 	%r741, %r194, %r726;
	mul.wide.u32 	%rd109, %r741, 4;
	add.s64 	%rd110, %rd64, %rd109;
	ld.shared.u32 	%r742, [%rd110];
	add.s32 	%r743, %r195, %r726;
	mul.wide.u32 	%rd111, %r743, 4;
	add.s64 	%rd112, %rd64, %rd111;
	ld.shared.u32 	%r744, [%rd112];
	add.s32 	%r745, %r196, %r726;
	mul.wide.u32 	%rd113, %r745, 4;
	add.s64 	%rd114, %rd64, %rd113;
	ld.shared.u32 	%r746, [%rd114];
	add.s32 	%r747, %r197, %r726;
	mul.wide.s32 	%rd115, %r747, 4;
	add.s64 	%rd116, %rd64, %rd115;
	ld.shared.u32 	%r748, [%rd116];
	bar.sync 	0;
	shfl.sync.idx.b32	%r749, %r176, 0, 31, -1;
	shfl.sync.idx.b32	%r750, %r176, 1, 31, -1;
	shfl.sync.idx.b32	%r751, %r176, 2, 31, -1;
	shfl.sync.idx.b32	%r752, %r176, 3, 31, -1;
	shfl.sync.idx.b32	%r753, %r176, 4, 31, -1;
	shfl.sync.idx.b32	%r754, %r176, 5, 31, -1;
	shfl.sync.idx.b32	%r755, %r176, 6, 31, -1;
	shfl.sync.idx.b32	%r756, %r176, 7, 31, -1;
	shfl.sync.idx.b32	%r757, %r176, 8, 31, -1;
	shfl.sync.idx.b32	%r758, %r176, 9, 31, -1;
	shfl.sync.idx.b32	%r759, %r176, 10, 31, -1;
	shfl.sync.idx.b32	%r760, %r176, 11, 31, -1;
	shfl.sync.idx.b32	%r761, %r176, 12, 31, -1;
	shfl.sync.idx.b32	%r762, %r176, 13, 31, -1;
	shfl.sync.idx.b32	%r763, %r176, 14, 31, -1;
	shfl.sync.idx.b32	%r764, %r176, 15, 31, -1;
	add.s32 	%r765, %r749, %r726;
	mul.wide.s32 	%rd117, %r765, 4;
	add.s64 	%rd118, %rd64, %rd117;
	st.shared.u32 	[%rd118], %r728;
	add.s32 	%r766, %r750, %r726;
	mul.wide.s32 	%rd119, %r766, 4;
	add.s64 	%rd120, %rd64, %rd119;
	st.shared.u32 	[%rd120], %r730;
	add.s32 	%r767, %r751, %r726;
	mul.wide.s32 	%rd121, %r767, 4;
	add.s64 	%rd122, %rd64, %rd121;
	st.shared.u32 	[%rd122], %r732;
	add.s32 	%r768, %r752, %r726;
	mul.wide.s32 	%rd123, %r768, 4;
	add.s64 	%rd124, %rd64, %rd123;
	st.shared.u32 	[%rd124], %r734;
	add.s32 	%r769, %r753, %r726;
	mul.wide.s32 	%rd125, %r769, 4;
	add.s64 	%rd126, %rd64, %rd125;
	st.shared.u32 	[%rd126], %r736;
	add.s32 	%r770, %r754, %r726;
	mul.wide.s32 	%rd127, %r770, 4;
	add.s64 	%rd128, %rd64, %rd127;
	st.shared.u32 	[%rd128], %r738;
	add.s32 	%r771, %r755, %r726;
	mul.wide.s32 	%rd129, %r771, 4;
	add.s64 	%rd130, %rd64, %rd129;
	st.shared.u32 	[%rd130], %r740;
	add.s32 	%r772, %r756, %r726;
	mul.wide.s32 	%rd131, %r772, 4;
	add.s64 	%rd132, %rd64, %rd131;
	st.shared.u32 	[%rd132], %r742;
	add.s32 	%r773, %r757, %r726;
	mul.wide.s32 	%rd133, %r773, 4;
	add.s64 	%rd134, %rd64, %rd133;
	st.shared.u32 	[%rd134], %r744;
	add.s32 	%r774, %r758, %r726;
	mul.wide.s32 	%rd135, %r774, 4;
	add.s64 	%rd136, %rd64, %rd135;
	st.shared.u32 	[%rd136], %r746;
	selp.b32 	%r775, 0, %r748, %p242;
	add.s32 	%r776, %r759, %r726;
	mul.wide.s32 	%rd137, %r776, 4;
	add.s64 	%rd138, %rd64, %rd137;
	st.shared.u32 	[%rd138], %r775;
	add.s32 	%r777, %r760, %r726;
	mul.wide.s32 	%rd139, %r777, 4;
	add.s64 	%rd140, %rd64, %rd139;
	mov.u32 	%r669, 0;
	st.shared.u32 	[%rd140], %r669;
	add.s32 	%r778, %r761, %r726;
	mul.wide.s32 	%rd141, %r778, 4;
	add.s64 	%rd142, %rd64, %rd141;
	st.shared.u32 	[%rd142], %r669;
	add.s32 	%r779, %r762, %r726;
	mul.wide.s32 	%rd143, %r779, 4;
	add.s64 	%rd144, %rd64, %rd143;
	st.shared.u32 	[%rd144], %r669;
	add.s32 	%r780, %r763, %r726;
	mul.wide.s32 	%rd145, %r780, 4;
	add.s64 	%rd146, %rd64, %rd145;
	st.shared.u32 	[%rd146], %r669;
	add.s32 	%r781, %r764, %r726;
	mul.wide.s32 	%rd147, %r781, 4;
	add.s64 	%rd148, %rd64, %rd147;
	st.shared.u32 	[%rd148], %r669;
	bar.sync 	0;
	mov.u32 	%r93, %r669;
	mov.u32 	%r94, %r669;
	mov.u32 	%r95, %r669;
	mov.u32 	%r96, %r669;
	mov.u32 	%r97, %r669;
	mov.u32 	%r98, %r669;
	mov.u32 	%r99, %r669;
	mov.u32 	%r100, %r669;
	mov.u32 	%r101, %r669;
	mov.u32 	%r102, %r669;
	mov.u32 	%r103, %r669;
	mov.u32 	%r104, %r669;
	mov.u32 	%r105, %r669;
	mov.u32 	%r106, %r669;
	mov.u32 	%r107, %r669;
	mov.u32 	%r108, %r669;
	@%p241 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2711
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r218, %r672, %r198;
	ld.shared.u32 	%r93, [%rd7];
	ld.shared.u32 	%r94, [%rd8];
	ld.shared.u32 	%r95, [%rd9+12];
	ld.shared.u32 	%r96, [%rd10+12];
	ld.shared.u32 	%r97, [%rd9+24];
	ld.shared.u32 	%r98, [%rd10+24];
	ld.shared.u32 	%r99, [%rd9+36];
	ld.shared.u32 	%r100, [%rd10+36];
	add.s32 	%r782, %r218, 12;
	mul.hi.u32 	%r783, %r782, -1431655765;
	shr.u32 	%r784, %r783, 4;
	mul.lo.s32 	%r785, %r784, 24;
	sub.s32 	%r786, %r782, %r785;
	add.s32 	%r787, %r199, %r786;
	mul.wide.u32 	%rd149, %r787, 4;
	add.s64 	%rd151, %rd64, %rd149;
	ld.shared.u32 	%r101, [%rd151];
	add.s32 	%r788, %r200, %r786;
	mul.wide.u32 	%rd152, %r788, 4;
	add.s64 	%rd153, %rd64, %rd152;
	ld.shared.u32 	%r102, [%rd153];
	cvt.u16.u32 	%rs75, %r218;
	add.s16 	%rs76, %rs75, 15;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r789, %rs82;
	add.s32 	%r790, %r199, %r789;
	mul.wide.s32 	%rd154, %r790, 4;
	add.s64 	%rd155, %rd64, %rd154;
	ld.shared.u32 	%r103, [%rd155];
	add.s32 	%r791, %r200, %r789;
	mul.wide.u32 	%rd156, %r791, 4;
	add.s64 	%rd157, %rd64, %rd156;
	ld.shared.u32 	%r104, [%rd157];
	add.s16 	%rs83, %rs75, 18;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r792, %rs89;
	add.s32 	%r793, %r199, %r792;
	mul.wide.s32 	%rd158, %r793, 4;
	add.s64 	%rd159, %rd64, %rd158;
	ld.shared.u32 	%r105, [%rd159];
	add.s32 	%r794, %r200, %r792;
	mul.wide.u32 	%rd160, %r794, 4;
	add.s64 	%rd161, %rd64, %rd160;
	ld.shared.u32 	%r106, [%rd161];
	add.s16 	%rs90, %rs75, 21;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r795, %rs96;
	add.s32 	%r796, %r199, %r795;
	mul.wide.s32 	%rd162, %r796, 4;
	add.s64 	%rd163, %rd64, %rd162;
	ld.shared.u32 	%r107, [%rd163];
	add.s32 	%r797, %r200, %r795;
	mul.wide.u32 	%rd164, %r797, 4;
	add.s64 	%rd165, %rd64, %rd164;
	ld.shared.u32 	%r108, [%rd165];
$L__BB0_139:                            // %L8829
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r112, %r669;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19857
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, 0;
	mov.u32 	%r111, %r109;
$L__BB0_148:                            // %L19858
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r112, %r112, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r112, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8847
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r112, 0;
	selp.b32 	%r1191, %r93, 0, %p250;
	setp.eq.s32 	%p251, %r112, 6;
	selp.b32 	%r1192, %r97, %r1191, %p251;
	setp.eq.s32 	%p252, %r112, 12;
	selp.b32 	%r1193, %r101, %r1192, %p252;
	setp.eq.s32 	%p253, %r112, 18;
	selp.b32 	%r1194, %r105, %r1193, %p253;
	selp.b32 	%r1195, %r94, 0, %p250;
	selp.b32 	%r1196, %r98, %r1195, %p251;
	selp.b32 	%r1197, %r102, %r1196, %p252;
	selp.b32 	%r1198, %r106, %r1197, %p253;
	selp.b32 	%r1199, %r95, 0, %p250;
	selp.b32 	%r1200, %r99, %r1199, %p251;
	selp.b32 	%r1201, %r103, %r1200, %p252;
	selp.b32 	%r1202, %r107, %r1201, %p253;
	selp.b32 	%r1203, %r96, 0, %p250;
	selp.b32 	%r1204, %r100, %r1203, %p251;
	selp.b32 	%r1205, %r104, %r1204, %p252;
	selp.b32 	%r1206, %r108, %r1205, %p253;
	mov.u16 	%rs134, 25600;
	// begin inline asm
	mov.b32 %r804, {%rs134, %rs134};
	// end inline asm
	mov.u16 	%rs136, 21504;
	// begin inline asm
	mov.b32 %r815, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r803, %r1194, -2004318072;
	mov.u32 	%r940, 983055;
	// begin inline asm
	lop3.b32 %r801, %r940, %r803, %r804, 202;
	// end inline asm
	mov.u16 	%rs140, 18432;
	// begin inline asm
	mov.b32 %r805, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r806, %r804, %r805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r809, %r801, %r806;
	// end inline asm
	mov.u32 	%r951, 15728880;
	// begin inline asm
	lop3.b32 %r812, %r951, %r803, %r815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r816, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r817, %r815, %r816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r820, %r812, %r817;
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r861, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r849, %r1198, -2004318072;
	// begin inline asm
	lop3.b32 %r847, %r940, %r849, %r850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r852, %r850, %r851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r855, %r847, %r852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r858, %r951, %r849, %r861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r862, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r863, %r861, %r862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r866, %r858, %r863;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r895, %r1202, -2004318072;
	// begin inline asm
	lop3.b32 %r893, %r940, %r895, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r904, %r951, %r895, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r909, %r907, %r908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r912, %r904, %r909;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs136, %rs136};
	// end inline asm
	xor.b32  	%r941, %r1206, -2004318072;
	// begin inline asm
	lop3.b32 %r939, %r940, %r941, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r950, %r951, %r941, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r809;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r983, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r855;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r986, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r820;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r866;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r901;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r995, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r998, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r912;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1001, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r958;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1004, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1007, %r1008}, {%r284, %r287}, {%r983}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1014, %r1015}, {%r284, %r287}, {%r986}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1021, %r1022}, {%r284, %r287}, {%r989}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1028, %r1029}, {%r284, %r287}, {%r992}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1035, %r1036}, {%r284, %r287}, {%r995}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1042, %r1043}, {%r284, %r287}, {%r998}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1049, %r1050}, {%r284, %r287}, {%r1001}, {%r669, %r669};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1056, %r1057}, {%r284, %r287}, {%r1004}, {%r669, %r669};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass4028
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1063, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1065, %r1063, %r1008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1068, %r336, %r1007, %r1065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1072, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1074, %r1072, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r336, %r1014, %r1074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1083, %r1081, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1086, %r336, %r1021, %r1083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1090, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1092, %r1090, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r336, %r1028, %r1092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1099, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1101, %r1099, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r336, %r1035, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1108, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1110, %r1108, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r336, %r1042, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1117, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1119, %r1117, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r336, %r1049, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1126, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1128, %r1126, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r336, %r1056, %r1128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1135, %r339, %r1007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r336, %r1008, %r1135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r339, %r1014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r336, %r1015, %r1142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r339, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r336, %r1022, %r1149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1156, %r339, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r336, %r1029, %r1156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r339, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r336, %r1036, %r1163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r339, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r336, %r1043, %r1170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r339, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r336, %r1050, %r1177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r339, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r336, %r1057, %r1184;
	// end inline asm
	mov.u32 	%r1356, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1280, %r1281}, {%r380, %r383}, {%r1068, %r1138}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1288, %r1289}, {%r380, %r383}, {%r1077, %r1145}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1296, %r1297}, {%r380, %r383}, {%r1086, %r1152}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1304, %r1305}, {%r380, %r383}, {%r1095, %r1159}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1312, %r1313}, {%r380, %r383}, {%r1104, %r1166}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r380, %r383}, {%r1113, %r1173}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1328, %r1329}, {%r380, %r383}, {%r1122, %r1180}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1336, %r1337}, {%r380, %r383}, {%r1131, %r1187}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1279, %r1280, %r1281, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1283, %r1280, %r1281, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1287, %r1288, %r1289, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1291, %r1288, %r1289, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1295, %r1296, %r1297, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1299, %r1296, %r1297, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1303, %r1304, %r1305, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r1304, %r1305, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1311, %r1312, %r1313, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1315, %r1312, %r1313, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1319, %r1320, %r1321, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1323, %r1320, %r1321, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1327, %r1328, %r1329, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1331, %r1328, %r1329, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1335, %r1336, %r1337, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1339, %r1336, %r1337, %r668;
	// end inline asm
	add.s16 	%rs145, %rs9, %rs3;
	add.s16 	%rs146, %rs145, -5;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	add.s16 	%rs149, %rs147, %rs148;
	mul.lo.s16 	%rs150, %rs149, 6;
	sub.s16 	%rs151, %rs146, %rs150;
	mul.wide.s16 	%r1389, %rs151, 16;
	add.s32 	%r1390, %r205, %r1389;
	mul.wide.s32 	%rd168, %r1390, 4;
	add.s64 	%rd170, %rd64, %rd168;
	st.shared.u32 	[%rd170], %r1279;
	add.s32 	%r1391, %r206, %r1389;
	mul.wide.u32 	%rd171, %r1391, 4;
	add.s64 	%rd172, %rd64, %rd171;
	st.shared.u32 	[%rd172], %r1283;
	add.s32 	%r1392, %r208, %r1389;
	mul.wide.s32 	%rd173, %r1392, 4;
	add.s64 	%rd174, %rd64, %rd173;
	st.shared.u32 	[%rd174], %r1287;
	add.s32 	%r1393, %r209, %r1389;
	mul.wide.u32 	%rd175, %r1393, 4;
	add.s64 	%rd176, %rd64, %rd175;
	st.shared.u32 	[%rd176], %r1291;
	cvt.s64.s32 	%rd177, %r1389;
	cvt.u64.u32 	%rd178, %r204;
	cvt.u64.u32 	%rd179, %r203;
	cvt.u64.u32 	%rd180, %r202;
	cvt.u64.u32 	%rd181, %r201;
	add.s64 	%rd182, %rd181, %rd180;
	add.s64 	%rd183, %rd182, %rd179;
	add.s64 	%rd11, %rd183, %rd178;
	add.s64 	%rd184, %rd11, %rd177;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd64, %rd185;
	st.shared.u32 	[%rd186+32], %r1295;
	add.s32 	%r1394, %r210, %r1389;
	mul.wide.u32 	%rd187, %r1394, 4;
	add.s64 	%rd188, %rd64, %rd187;
	st.shared.u32 	[%rd188], %r1299;
	cvt.u64.u32 	%rd189, %r207;
	add.s64 	%rd12, %rd183, %rd189;
	add.s64 	%rd190, %rd12, %rd177;
	shl.b64 	%rd191, %rd190, 2;
	add.s64 	%rd192, %rd64, %rd191;
	st.shared.u32 	[%rd192+32], %r1303;
	add.s32 	%r1395, %r211, %r1389;
	mul.wide.u32 	%rd193, %r1395, 4;
	add.s64 	%rd194, %rd64, %rd193;
	st.shared.u32 	[%rd194], %r1307;
	add.s16 	%rs152, %rs145, -2;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	add.s16 	%rs155, %rs153, %rs154;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs152, %rs156;
	mul.wide.s16 	%r1396, %rs157, 16;
	add.s32 	%r1397, %r205, %r1396;
	mul.wide.s32 	%rd195, %r1397, 4;
	add.s64 	%rd196, %rd64, %rd195;
	st.shared.u32 	[%rd196], %r1311;
	add.s32 	%r1398, %r206, %r1396;
	mul.wide.u32 	%rd197, %r1398, 4;
	add.s64 	%rd198, %rd64, %rd197;
	st.shared.u32 	[%rd198], %r1315;
	add.s32 	%r1399, %r208, %r1396;
	mul.wide.s32 	%rd199, %r1399, 4;
	add.s64 	%rd200, %rd64, %rd199;
	st.shared.u32 	[%rd200], %r1319;
	add.s32 	%r1400, %r209, %r1396;
	mul.wide.u32 	%rd201, %r1400, 4;
	add.s64 	%rd202, %rd64, %rd201;
	st.shared.u32 	[%rd202], %r1323;
	cvt.s64.s32 	%rd203, %r1396;
	add.s64 	%rd204, %rd11, %rd203;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd64, %rd205;
	st.shared.u32 	[%rd206+32], %r1327;
	add.s32 	%r1401, %r210, %r1396;
	mul.wide.u32 	%rd207, %r1401, 4;
	add.s64 	%rd208, %rd64, %rd207;
	st.shared.u32 	[%rd208], %r1331;
	add.s64 	%rd209, %rd12, %rd203;
	shl.b64 	%rd210, %rd209, 2;
	add.s64 	%rd211, %rd64, %rd210;
	st.shared.u32 	[%rd211+32], %r1335;
	add.s32 	%r1402, %r211, %r1396;
	mul.wide.u32 	%rd212, %r1402, 4;
	add.s64 	%rd213, %rd64, %rd212;
	st.shared.u32 	[%rd213], %r1339;
	bar.sync 	0;
	add.s16 	%rs158, %rs3, -5;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r1403, %rs163, 16;
	add.s32 	%r1404, %r212, %r1403;
	mul.wide.s32 	%rd214, %r1404, 4;
	add.s64 	%rd215, %rd64, %rd214;
	ld.shared.u32 	%r1347, [%rd215];
	add.s32 	%r1405, %r213, %r1403;
	mul.wide.s32 	%rd216, %r1405, 4;
	add.s64 	%rd217, %rd64, %rd216;
	ld.shared.u32 	%r1354, [%rd217];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r392, %r395}, {%r1347}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1350, %r1351}, {%r392, %r395}, {%r1354}, {%r1356, %r1356};
	// end inline asm
	@%p254 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6668
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1357, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r1357, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r430, %r1343, %r1359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1366, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r1366, %r1351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r430, %r1350, %r1368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r433, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r430, %r1344, %r1375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r433, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r430, %r1351, %r1382;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1425, %r1428}, {%r476, %r479}, {%r1362, %r1378}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1432, %r1436}, {%r476, %r479}, {%r1371, %r1385}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1425, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1428, %r1428, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1432, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r1436, %r1436, %r1431;
	// end inline asm
	mov.u32 	%r1523, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1439, %r1523, %r1435, %r111;
	// end inline asm
	add.s32 	%r1526, %r89, %r112;
	add.s32 	%r1527, %r1526, 1;
	mul.hi.u32 	%r1528, %r1527, -1431655765;
	shr.u32 	%r1529, %r1528, 2;
	mul.lo.s32 	%r1530, %r1529, 6;
	sub.s32 	%r1531, %r1527, %r1530;
	shl.b32 	%r1532, %r1531, 4;
	add.s32 	%r1533, %r212, %r1532;
	mul.wide.u32 	%rd220, %r1533, 4;
	add.s64 	%rd222, %rd64, %rd220;
	ld.shared.u32 	%r1447, [%rd222];
	add.s32 	%r1534, %r213, %r1532;
	mul.wide.u32 	%rd223, %r1534, 4;
	add.s64 	%rd224, %rd64, %rd223;
	ld.shared.u32 	%r1454, [%rd224];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1464, %r1461}, {%r392, %r395}, {%r1447}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1473, %r1470}, {%r392, %r395}, {%r1454}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1457, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r1457, %r1461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r430, %r1464, %r1459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1466, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r1466, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r430, %r1473, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r433, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r430, %r1461, %r1475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r433, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r430, %r1470, %r1482;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1508, %r1511}, {%r476, %r479}, {%r1462, %r1478}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1515, %r1519}, {%r476, %r479}, {%r1471, %r1485}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1508, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1511, %r1511, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r1515, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r1519, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3029, %r1523, %r1518, %r1439;
	// end inline asm
	add.s32 	%r3027, %r109, 2;
	setp.eq.s32 	%p255, %r3027, 40;
	setp.lt.u32 	%p297, %r264, 8;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15723
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass7111
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1535, %r110, 393216, %r214;
	cvt.u64.u32 	%rd225, %r1535;
	add.s64 	%rd226, %rd225, %rd6;
	mul.hi.s64 	%rd227, %rd226, 3074457345618258603;
	shr.u64 	%rd228, %rd227, 63;
	shr.s64 	%rd229, %rd227, 20;
	add.s64 	%rd230, %rd229, %rd228;
	setp.lt.s64 	%p257, %rd226, 0;
	mul.lo.s64 	%rd231, %rd230, 6291456;
	setp.ne.s64 	%p258, %rd231, %rd226;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd232, -1, 0, %p259;
	add.s64 	%rd233, %rd230, %rd232;
	mul.lo.s64 	%rd234, %rd233, -6291456;
	add.s64 	%rd235, %rd234, %rd226;
	shl.b64 	%rd236, %rd235, 2;
	add.s64 	%rd237, %rd4, %rd236;
	st.global.u32 	[%rd237], %r3029;
$L__BB0_143:                            // %L15937
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3027, 0;
	mov.u32 	%r3029, %r3027;
$L__BB0_195:                            // %oksrem7184
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs164, %rs3, -3;
	mul.hi.s16 	%rs165, %rs164, 10923;
	shr.u16 	%rs166, %rs165, 15;
	add.s16 	%rs167, %rs165, %rs166;
	mul.lo.s16 	%rs168, %rs167, 6;
	sub.s16 	%rs169, %rs164, %rs168;
	mul.wide.s16 	%r1703, %rs169, 16;
	add.s32 	%r1704, %r212, %r1703;
	mul.wide.s32 	%rd238, %r1704, 4;
	add.s64 	%rd240, %rd64, %rd238;
	ld.shared.u32 	%r1541, [%rd240];
	add.s32 	%r1705, %r213, %r1703;
	mul.wide.s32 	%rd241, %r1705, 4;
	add.s64 	%rd242, %rd64, %rd241;
	ld.shared.u32 	%r1548, [%rd242];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1558, %r1555}, {%r392, %r395}, {%r1541}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1567, %r1564}, {%r392, %r395}, {%r1548}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1551, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r1551, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r430, %r1558, %r1553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1560, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1562, %r1560, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r430, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r433, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r430, %r1555, %r1569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r433, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r430, %r1564, %r1576;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1605}, {%r476, %r479}, {%r1556, %r1572}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1609, %r1613}, {%r476, %r479}, {%r1565, %r1579}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1602, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1613, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r1523, %r1612, %r3029;
	// end inline asm
	add.s16 	%rs170, %rs3, -2;
	mul.hi.s16 	%rs171, %rs170, 10923;
	shr.u16 	%rs172, %rs171, 15;
	add.s16 	%rs173, %rs171, %rs172;
	mul.lo.s16 	%rs174, %rs173, 6;
	sub.s16 	%rs175, %rs170, %rs174;
	mul.wide.s16 	%r1706, %rs175, 16;
	add.s32 	%r1707, %r212, %r1706;
	mul.wide.s32 	%rd243, %r1707, 4;
	add.s64 	%rd244, %rd64, %rd243;
	ld.shared.u32 	%r1624, [%rd244];
	add.s32 	%r1708, %r213, %r1706;
	mul.wide.s32 	%rd245, %r1708, 4;
	add.s64 	%rd246, %rd64, %rd245;
	ld.shared.u32 	%r1631, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1641, %r1638}, {%r392, %r395}, {%r1624}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1650, %r1647}, {%r392, %r395}, {%r1631}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1634, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1636, %r1634, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r430, %r1641, %r1636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1643, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r1643, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r430, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r433, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r430, %r1638, %r1652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r433, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r430, %r1647, %r1659;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1688}, {%r476, %r479}, {%r1639, %r1655}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1696}, {%r476, %r479}, {%r1648, %r1662}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r1685, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r1696, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r1523, %r1695, %r1616;
	// end inline asm
	add.s32 	%r3030, %r3027, 2;
	setp.eq.s32 	%p260, %r3030, 40;
	@%p260 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17683
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7967
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1709, %r110, 393216, %r214;
	cvt.u64.u32 	%rd247, %r1709;
	add.s64 	%rd248, %rd247, %rd6;
	mul.hi.s64 	%rd249, %rd248, 3074457345618258603;
	shr.u64 	%rd250, %rd249, 63;
	shr.s64 	%rd251, %rd249, 20;
	add.s64 	%rd252, %rd251, %rd250;
	setp.lt.s64 	%p262, %rd248, 0;
	mul.lo.s64 	%rd253, %rd252, 6291456;
	setp.ne.s64 	%p263, %rd253, %rd248;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd254, -1, 0, %p264;
	add.s64 	%rd255, %rd252, %rd254;
	mul.lo.s64 	%rd256, %rd255, -6291456;
	add.s64 	%rd257, %rd256, %rd248;
	shl.b64 	%rd258, %rd257, 2;
	add.s64 	%rd259, %rd4, %rd258;
	st.global.u32 	[%rd259], %r3032;
$L__BB0_145:                            // %L17897
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3030, 0;
	mov.u32 	%r3032, %r3030;
$L__BB0_196:                            // %oksrem8040
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs176, %rs3, -1;
	mul.hi.s16 	%rs177, %rs176, 10923;
	shr.u16 	%rs178, %rs177, 15;
	add.s16 	%rs179, %rs177, %rs178;
	mul.lo.s16 	%rs180, %rs179, 6;
	sub.s16 	%rs181, %rs176, %rs180;
	mul.wide.s16 	%r1877, %rs181, 16;
	add.s32 	%r1878, %r212, %r1877;
	mul.wide.s32 	%rd260, %r1878, 4;
	add.s64 	%rd262, %rd64, %rd260;
	ld.shared.u32 	%r1715, [%rd262];
	add.s32 	%r1879, %r213, %r1877;
	mul.wide.s32 	%rd263, %r1879, 4;
	add.s64 	%rd264, %rd64, %rd263;
	ld.shared.u32 	%r1722, [%rd264];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1732, %r1729}, {%r392, %r395}, {%r1715}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1741, %r1738}, {%r392, %r395}, {%r1722}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r430, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r430, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r433, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r430, %r1729, %r1743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r433, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r430, %r1738, %r1750;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1776, %r1779}, {%r476, %r479}, {%r1730, %r1746}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1783, %r1787}, {%r476, %r479}, {%r1739, %r1753}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r1776, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1523, %r1786, %r3032;
	// end inline asm
	mul.hi.s16 	%rs182, %rs3, 10923;
	shr.u16 	%rs183, %rs182, 15;
	add.s16 	%rs184, %rs182, %rs183;
	mul.lo.s16 	%rs185, %rs184, 6;
	sub.s16 	%rs186, %rs3, %rs185;
	mul.wide.s16 	%r1880, %rs186, 16;
	add.s32 	%r1881, %r212, %r1880;
	mul.wide.s32 	%rd265, %r1881, 4;
	add.s64 	%rd266, %rd64, %rd265;
	ld.shared.u32 	%r1798, [%rd266];
	add.s32 	%r1882, %r213, %r1880;
	mul.wide.s32 	%rd267, %r1882, 4;
	add.s64 	%rd268, %rd64, %rd267;
	ld.shared.u32 	%r1805, [%rd268];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1815, %r1812}, {%r392, %r395}, {%r1798}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1824, %r1821}, {%r392, %r395}, {%r1805}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1808, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r1808, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r430, %r1815, %r1810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1817, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r1817, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r430, %r1824, %r1819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1826, %r433, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r430, %r1812, %r1826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r433, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r430, %r1821, %r1833;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1859, %r1862}, {%r476, %r479}, {%r1813, %r1829}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1866, %r1870}, {%r476, %r479}, {%r1822, %r1836}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r1859, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r1862, %r1862, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1866, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1870, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1523, %r1869, %r1790;
	// end inline asm
	add.s32 	%r109, %r3030, 2;
	setp.eq.s32 	%p265, %r109, 40;
	@%p265 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19643
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8823
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1883, %r110, 393216, %r214;
	cvt.u64.u32 	%rd269, %r1883;
	add.s64 	%rd270, %rd269, %rd6;
	mul.hi.s64 	%rd271, %rd270, 3074457345618258603;
	shr.u64 	%rd272, %rd271, 63;
	shr.s64 	%rd273, %rd271, 20;
	add.s64 	%rd274, %rd273, %rd272;
	setp.lt.s64 	%p267, %rd270, 0;
	mul.lo.s64 	%rd275, %rd274, 6291456;
	setp.ne.s64 	%p268, %rd275, %rd270;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd276, -1, 0, %p269;
	add.s64 	%rd277, %rd274, %rd276;
	mul.lo.s64 	%rd278, %rd277, -6291456;
	add.s64 	%rd279, %rd278, %rd270;
	shl.b64 	%rd280, %rd279, 2;
	add.s64 	%rd281, %rd4, %rd280;
	st.global.u32 	[%rd281], %r111;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19879.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs287, %rs1;
	mov.u32 	%r3018, %r1356;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30889
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, %r2767;
	mov.u32 	%r111, %r2767;
$L__BB0_159:                            // %L30890
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3018, %r3018, 6;
	add.s16 	%rs287, %rs287, 6;
	setp.ne.s32 	%p290, %r3018, 24;
	@%p290 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19879
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3018, 0;
	selp.b32 	%r2580, %r93, 0, %p271;
	setp.eq.s32 	%p272, %r3018, 6;
	selp.b32 	%r2581, %r97, %r2580, %p272;
	setp.eq.s32 	%p273, %r3018, 12;
	selp.b32 	%r2582, %r101, %r2581, %p273;
	setp.eq.s32 	%p274, %r3018, 18;
	selp.b32 	%r2583, %r105, %r2582, %p274;
	selp.b32 	%r2584, %r94, 0, %p271;
	selp.b32 	%r2585, %r98, %r2584, %p272;
	selp.b32 	%r2586, %r102, %r2585, %p273;
	selp.b32 	%r2587, %r106, %r2586, %p274;
	selp.b32 	%r2588, %r95, 0, %p271;
	selp.b32 	%r2589, %r99, %r2588, %p272;
	selp.b32 	%r2590, %r103, %r2589, %p273;
	selp.b32 	%r2591, %r107, %r2590, %p274;
	selp.b32 	%r2592, %r96, 0, %p271;
	selp.b32 	%r2593, %r100, %r2592, %p272;
	selp.b32 	%r2594, %r104, %r2593, %p273;
	selp.b32 	%r2595, %r108, %r2594, %p274;
	// begin inline asm
	mov.b32 %r1913, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1924, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2596, %r2583, 8;
	xor.b32  	%r1923, %r2596, 8947848;
	// begin inline asm
	lop3.b32 %r1910, %r940, %r1923, %r1913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1914, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1915, %r1913, %r1914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1918, %r1910, %r1915;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1921, %r951, %r1923, %r1924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1925, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1926, %r1924, %r1925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1929, %r1921, %r1926;
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2597, %r2587, 8;
	xor.b32  	%r1969, %r2597, 8947848;
	// begin inline asm
	lop3.b32 %r1956, %r940, %r1969, %r1959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1960, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1961, %r1959, %r1960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1964, %r1956, %r1961;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1967, %r951, %r1969, %r1970, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1971, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1972, %r1970, %r1971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1975, %r1967, %r1972;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2598, %r2591, 8;
	xor.b32  	%r2015, %r2598, 8947848;
	// begin inline asm
	lop3.b32 %r2002, %r940, %r2015, %r2005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2006, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2007, %r2005, %r2006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2010, %r2002, %r2007;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2013, %r951, %r2015, %r2016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2017, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2018, %r2016, %r2017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2021, %r2013, %r2018;
	// end inline asm
	// begin inline asm
	mov.b32 %r2051, {%rs134, %rs134};
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs136, %rs136};
	// end inline asm
	shr.u32 	%r2599, %r2595, 8;
	xor.b32  	%r2061, %r2599, 8947848;
	// begin inline asm
	lop3.b32 %r2048, %r940, %r2061, %r2051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2052, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2053, %r2051, %r2052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2056, %r2048, %r2053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2059, %r951, %r2061, %r2062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2063, {%rs140, %rs140};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2064, %r2062, %r2063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2067, %r2059, %r2064;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1918;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2070, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1929;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r1975;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2079, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2010;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2082, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2056;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2085, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2021;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2088, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r2067;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2091, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2157, %r2154}, {%r284, %r287}, {%r2070}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2166, %r2163}, {%r284, %r287}, {%r2073}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2175, %r2172}, {%r284, %r287}, {%r2076}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2184, %r2181}, {%r284, %r287}, {%r2079}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2193, %r2190}, {%r284, %r287}, {%r2082}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2202, %r2199}, {%r284, %r287}, {%r2085}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2211, %r2208}, {%r284, %r287}, {%r2088}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2220, %r2217}, {%r284, %r287}, {%r2091}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2150, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r2150, %r2154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r336, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2159, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r2159, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r336, %r2166, %r2161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2168, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2168, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r336, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2177, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r2177, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r336, %r2184, %r2179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2186, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r2186, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r336, %r2193, %r2188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2195, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2197, %r2195, %r2199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2200, %r336, %r2202, %r2197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2204, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r2204, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r336, %r2211, %r2206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2213, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r2213, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r336, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r339, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r336, %r2154, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r339, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r336, %r2163, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r339, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r336, %r2172, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r339, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r336, %r2181, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r339, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r336, %r2190, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r339, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r336, %r2199, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r339, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r336, %r2208, %r2264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r339, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r336, %r2217, %r2271;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2351, %r2352}, {%r380, %r383}, {%r2155, %r2225}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2359, %r2360}, {%r380, %r383}, {%r2164, %r2232}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2367, %r2368}, {%r380, %r383}, {%r2173, %r2239}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2375, %r2376}, {%r380, %r383}, {%r2182, %r2246}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2383, %r2384}, {%r380, %r383}, {%r2191, %r2253}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2391, %r2392}, {%r380, %r383}, {%r2200, %r2260}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2399, %r2400}, {%r380, %r383}, {%r2209, %r2267}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2408}, {%r380, %r383}, {%r2218, %r2274}, {%r1356, %r1356}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2350, %r2351, %r2352, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2354, %r2351, %r2352, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2358, %r2359, %r2360, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2362, %r2359, %r2360, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2366, %r2367, %r2368, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2370, %r2367, %r2368, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2374, %r2375, %r2376, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2375, %r2376, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2383, %r2384, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2386, %r2383, %r2384, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2390, %r2391, %r2392, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2394, %r2391, %r2392, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2398, %r2399, %r2400, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2402, %r2399, %r2400, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2407, %r2408, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2407, %r2408, %r668;
	// end inline asm
	add.s16 	%rs235, %rs10, %rs287;
	add.s16 	%rs236, %rs235, -29;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r2600, %rs241, 16;
	add.s32 	%r2601, %r205, %r2600;
	mul.wide.s32 	%rd282, %r2601, 4;
	add.s64 	%rd284, %rd64, %rd282;
	st.shared.u32 	[%rd284], %r2350;
	add.s32 	%r2602, %r206, %r2600;
	mul.wide.u32 	%rd285, %r2602, 4;
	add.s64 	%rd286, %rd64, %rd285;
	st.shared.u32 	[%rd286], %r2354;
	add.s32 	%r2603, %r208, %r2600;
	mul.wide.s32 	%rd287, %r2603, 4;
	add.s64 	%rd288, %rd64, %rd287;
	st.shared.u32 	[%rd288], %r2358;
	add.s32 	%r2604, %r209, %r2600;
	mul.wide.u32 	%rd289, %r2604, 4;
	add.s64 	%rd290, %rd64, %rd289;
	st.shared.u32 	[%rd290], %r2362;
	cvt.s64.s32 	%rd291, %r2600;
	add.s64 	%rd292, %rd11, %rd291;
	shl.b64 	%rd293, %rd292, 2;
	add.s64 	%rd294, %rd64, %rd293;
	st.shared.u32 	[%rd294+32], %r2366;
	add.s32 	%r2605, %r210, %r2600;
	mul.wide.u32 	%rd295, %r2605, 4;
	add.s64 	%rd296, %rd64, %rd295;
	st.shared.u32 	[%rd296], %r2370;
	add.s64 	%rd297, %rd12, %rd291;
	shl.b64 	%rd298, %rd297, 2;
	add.s64 	%rd299, %rd64, %rd298;
	st.shared.u32 	[%rd299+32], %r2374;
	add.s32 	%r2606, %r211, %r2600;
	mul.wide.u32 	%rd300, %r2606, 4;
	add.s64 	%rd301, %rd64, %rd300;
	st.shared.u32 	[%rd301], %r2378;
	add.s16 	%rs242, %rs9, %rs287;
	add.s16 	%rs243, %rs242, -2;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2607, %rs248, 16;
	add.s32 	%r2608, %r205, %r2607;
	mul.wide.s32 	%rd302, %r2608, 4;
	add.s64 	%rd303, %rd64, %rd302;
	st.shared.u32 	[%rd303], %r2382;
	add.s32 	%r2609, %r206, %r2607;
	mul.wide.u32 	%rd304, %r2609, 4;
	add.s64 	%rd305, %rd64, %rd304;
	st.shared.u32 	[%rd305], %r2386;
	add.s32 	%r2610, %r208, %r2607;
	mul.wide.s32 	%rd306, %r2610, 4;
	add.s64 	%rd307, %rd64, %rd306;
	st.shared.u32 	[%rd307], %r2390;
	add.s32 	%r2611, %r209, %r2607;
	mul.wide.u32 	%rd308, %r2611, 4;
	add.s64 	%rd309, %rd64, %rd308;
	st.shared.u32 	[%rd309], %r2394;
	cvt.s64.s32 	%rd310, %r2607;
	add.s64 	%rd311, %rd11, %rd310;
	shl.b64 	%rd312, %rd311, 2;
	add.s64 	%rd313, %rd64, %rd312;
	st.shared.u32 	[%rd313+32], %r2398;
	add.s32 	%r2612, %r210, %r2607;
	mul.wide.u32 	%rd314, %r2612, 4;
	add.s64 	%rd315, %rd64, %rd314;
	st.shared.u32 	[%rd315], %r2402;
	add.s64 	%rd316, %rd12, %rd310;
	shl.b64 	%rd317, %rd316, 2;
	add.s64 	%rd318, %rd64, %rd317;
	st.shared.u32 	[%rd318+32], %r2406;
	add.s32 	%r2613, %r211, %r2607;
	mul.wide.u32 	%rd319, %r2613, 4;
	add.s64 	%rd320, %rd64, %rd319;
	st.shared.u32 	[%rd320], %r2410;
	bar.sync 	0;
	add.s16 	%rs249, %rs287, -5;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r2614, %rs254, 16;
	add.s32 	%r2615, %r212, %r2614;
	mul.wide.s32 	%rd321, %r2615, 4;
	add.s64 	%rd322, %rd64, %rd321;
	ld.shared.u32 	%r2418, [%rd322];
	add.s32 	%r2616, %r213, %r2614;
	mul.wide.s32 	%rd323, %r2616, 4;
	add.s64 	%rd324, %rd64, %rd323;
	ld.shared.u32 	%r2425, [%rd324];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2435, %r2432}, {%r392, %r395}, {%r2418}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2444, %r2441}, {%r392, %r395}, {%r2425}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2428, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2430, %r2428, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2433, %r430, %r2435, %r2430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2437, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r2437, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r430, %r2444, %r2439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r433, %r2435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r430, %r2432, %r2446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r433, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r430, %r2441, %r2453;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2479, %r2482}, {%r476, %r479}, {%r2433, %r2449}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2486, %r2490}, {%r476, %r479}, {%r2442, %r2456}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r2479, %r2479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r2482, %r2482, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2485, %r2486, %r2486, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r2490, %r2490, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r1523, %r2489, %r111;
	// end inline asm
	add.s16 	%rs255, %rs287, -4;
	mul.hi.s16 	%rs256, %rs255, 10923;
	shr.u16 	%rs257, %rs256, 15;
	add.s16 	%rs258, %rs256, %rs257;
	mul.lo.s16 	%rs259, %rs258, 6;
	sub.s16 	%rs260, %rs255, %rs259;
	mul.wide.s16 	%r2617, %rs260, 16;
	add.s32 	%r2618, %r212, %r2617;
	mul.wide.s32 	%rd325, %r2618, 4;
	add.s64 	%rd326, %rd64, %rd325;
	ld.shared.u32 	%r2501, [%rd326];
	add.s32 	%r2619, %r213, %r2617;
	mul.wide.s32 	%rd327, %r2619, 4;
	add.s64 	%rd328, %rd64, %rd327;
	ld.shared.u32 	%r2508, [%rd328];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2518, %r2515}, {%r392, %r395}, {%r2501}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2527, %r2524}, {%r392, %r395}, {%r2508}, {%r1356, %r1356};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2511, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r2511, %r2515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r430, %r2518, %r2513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2520, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r2520, %r2524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r430, %r2527, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r433, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r430, %r2515, %r2529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r433, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r430, %r2524, %r2536;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2562, %r2565}, {%r476, %r479}, {%r2516, %r2532}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2569, %r2573}, {%r476, %r479}, {%r2525, %r2539}, {%r1356, %r1356}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2561, %r2562, %r2562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2564, %r2565, %r2565, %r2561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2568, %r2569, %r2569, %r2564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r2573, %r2573, %r2568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r1523, %r2572, %r2493;
	// end inline asm
	add.s32 	%r3033, %r109, 2;
	setp.ne.s32 	%p275, %r3033, 40;
	@%p275 bra 	$L__BB0_153;
// %bb.151:                             // %L26755
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass12008
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2620, %r110, 393216, %r214;
	cvt.u64.u32 	%rd329, %r2620;
	add.s64 	%rd330, %rd329, %rd6;
	mul.hi.s64 	%rd331, %rd330, 3074457345618258603;
	shr.u64 	%rd332, %rd331, 63;
	shr.s64 	%rd333, %rd331, 20;
	add.s64 	%rd334, %rd333, %rd332;
	setp.lt.s64 	%p277, %rd330, 0;
	mul.lo.s64 	%rd335, %rd334, 6291456;
	setp.ne.s64 	%p278, %rd335, %rd330;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd336, -1, 0, %p279;
	add.s64 	%rd337, %rd334, %rd336;
	mul.lo.s64 	%rd338, %rd337, -6291456;
	add.s64 	%rd339, %rd338, %rd330;
	shl.b64 	%rd340, %rd339, 2;
	add.s64 	%rd341, %rd4, %rd340;
	st.global.u32 	[%rd341], %r3035;
$L__BB0_152:                            // %L26969
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3033, 0;
	mov.u32 	%r3035, %r3033;
$L__BB0_153:                            // %oksrem12081
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs261, %rs287, -3;
	mul.hi.s16 	%rs262, %rs261, 10923;
	shr.u16 	%rs263, %rs262, 15;
	add.s16 	%rs264, %rs262, %rs263;
	mul.lo.s16 	%rs265, %rs264, 6;
	sub.s16 	%rs266, %rs261, %rs265;
	mul.wide.s16 	%r2788, %rs266, 16;
	add.s32 	%r2789, %r212, %r2788;
	mul.wide.s32 	%rd342, %r2789, 4;
	add.s64 	%rd344, %rd64, %rd342;
	ld.shared.u32 	%r2626, [%rd344];
	add.s32 	%r2790, %r213, %r2788;
	mul.wide.s32 	%rd345, %r2790, 4;
	add.s64 	%rd346, %rd64, %rd345;
	ld.shared.u32 	%r2633, [%rd346];
	mov.u32 	%r2767, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2643, %r2640}, {%r392, %r395}, {%r2626}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2652, %r2649}, {%r392, %r395}, {%r2633}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2636, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r2636, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2641, %r430, %r2643, %r2638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2650, %r430, %r2652, %r2647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r433, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r430, %r2640, %r2654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r433, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r430, %r2649, %r2661;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2687, %r2690}, {%r476, %r479}, {%r2641, %r2657}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2694, %r2698}, {%r476, %r479}, {%r2650, %r2664}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2687, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r2690, %r2690, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r2694, %r2694, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r2698, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r1523, %r2697, %r3035;
	// end inline asm
	add.s16 	%rs267, %rs287, -2;
	mul.hi.s16 	%rs268, %rs267, 10923;
	shr.u16 	%rs269, %rs268, 15;
	add.s16 	%rs270, %rs268, %rs269;
	mul.lo.s16 	%rs271, %rs270, 6;
	sub.s16 	%rs272, %rs267, %rs271;
	mul.wide.s16 	%r2791, %rs272, 16;
	add.s32 	%r2792, %r212, %r2791;
	mul.wide.s32 	%rd347, %r2792, 4;
	add.s64 	%rd348, %rd64, %rd347;
	ld.shared.u32 	%r2709, [%rd348];
	add.s32 	%r2793, %r213, %r2791;
	mul.wide.s32 	%rd349, %r2793, 4;
	add.s64 	%rd350, %rd64, %rd349;
	ld.shared.u32 	%r2716, [%rd350];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2726, %r2723}, {%r392, %r395}, {%r2709}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2735, %r2732}, {%r392, %r395}, {%r2716}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2719, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r2719, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r430, %r2726, %r2721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2728, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2728, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r430, %r2735, %r2730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r433, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r430, %r2723, %r2737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r433, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r430, %r2732, %r2744;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2770, %r2773}, {%r476, %r479}, {%r2724, %r2740}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2781}, {%r476, %r479}, {%r2733, %r2747}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r2770, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r2773, %r2773, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r2777, %r2777, %r2772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r2781, %r2781, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r1523, %r2780, %r2701;
	// end inline asm
	add.s32 	%r3036, %r3033, 2;
	setp.eq.s32 	%p280, %r3036, 40;
	@%p280 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28715
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12864
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2794, %r110, 393216, %r214;
	cvt.u64.u32 	%rd351, %r2794;
	add.s64 	%rd352, %rd351, %rd6;
	mul.hi.s64 	%rd353, %rd352, 3074457345618258603;
	shr.u64 	%rd354, %rd353, 63;
	shr.s64 	%rd355, %rd353, 20;
	add.s64 	%rd356, %rd355, %rd354;
	setp.lt.s64 	%p282, %rd352, 0;
	mul.lo.s64 	%rd357, %rd356, 6291456;
	setp.ne.s64 	%p283, %rd357, %rd352;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd358, -1, 0, %p284;
	add.s64 	%rd359, %rd356, %rd358;
	mul.lo.s64 	%rd360, %rd359, -6291456;
	add.s64 	%rd361, %rd360, %rd352;
	shl.b64 	%rd362, %rd361, 2;
	add.s64 	%rd363, %rd4, %rd362;
	st.global.u32 	[%rd363], %r3038;
$L__BB0_155:                            // %L28929
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r3036, 0;
	mov.u32 	%r3038, %r3036;
$L__BB0_156:                            // %oksrem12937
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs273, %rs287, -1;
	mul.hi.s16 	%rs274, %rs273, 10923;
	shr.u16 	%rs275, %rs274, 15;
	add.s16 	%rs276, %rs274, %rs275;
	mul.lo.s16 	%rs277, %rs276, 6;
	sub.s16 	%rs278, %rs273, %rs277;
	mul.wide.s16 	%r2962, %rs278, 16;
	add.s32 	%r2963, %r212, %r2962;
	mul.wide.s32 	%rd364, %r2963, 4;
	add.s64 	%rd366, %rd64, %rd364;
	ld.shared.u32 	%r2800, [%rd366];
	add.s32 	%r2964, %r213, %r2962;
	mul.wide.s32 	%rd367, %r2964, 4;
	add.s64 	%rd368, %rd64, %rd367;
	ld.shared.u32 	%r2807, [%rd368];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2817, %r2814}, {%r392, %r395}, {%r2800}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2826, %r2823}, {%r392, %r395}, {%r2807}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2810, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r2810, %r2814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r430, %r2817, %r2812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2819, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2821, %r2819, %r2823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r430, %r2826, %r2821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r433, %r2817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r430, %r2814, %r2828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r433, %r2826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r430, %r2823, %r2835;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2861, %r2864}, {%r476, %r479}, {%r2815, %r2831}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2868, %r2872}, {%r476, %r479}, {%r2824, %r2838}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2861, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r2864, %r2864, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r2868, %r2868, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r2872, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r1523, %r2871, %r3038;
	// end inline asm
	mul.hi.s16 	%rs279, %rs287, 10923;
	shr.u16 	%rs280, %rs279, 15;
	add.s16 	%rs281, %rs279, %rs280;
	mul.lo.s16 	%rs282, %rs281, 6;
	sub.s16 	%rs283, %rs287, %rs282;
	mul.wide.s16 	%r2965, %rs283, 16;
	add.s32 	%r2966, %r212, %r2965;
	mul.wide.s32 	%rd369, %r2966, 4;
	add.s64 	%rd370, %rd64, %rd369;
	ld.shared.u32 	%r2883, [%rd370];
	add.s32 	%r2967, %r213, %r2965;
	mul.wide.s32 	%rd371, %r2967, 4;
	add.s64 	%rd372, %rd64, %rd371;
	ld.shared.u32 	%r2890, [%rd372];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2900, %r2897}, {%r392, %r395}, {%r2883}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2909, %r2906}, {%r392, %r395}, {%r2890}, {%r2767, %r2767};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2893, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r2893, %r2897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r430, %r2900, %r2895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2902, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2904, %r2902, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r430, %r2909, %r2904;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2911, %r433, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r430, %r2897, %r2911;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2918, %r433, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r430, %r2906, %r2918;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2944, %r2947}, {%r476, %r479}, {%r2898, %r2914}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2951, %r2955}, {%r476, %r479}, {%r2907, %r2921}, {%r2767, %r2767}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r2944, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r2947, %r2947, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r2951, %r2951, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r2955, %r2955, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1523, %r2954, %r2875;
	// end inline asm
	add.s32 	%r109, %r3036, 2;
	setp.eq.s32 	%p285, %r109, 40;
	@%p285 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30675
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13720
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2968, %r110, 393216, %r214;
	cvt.u64.u32 	%rd373, %r2968;
	add.s64 	%rd374, %rd373, %rd6;
	mul.hi.s64 	%rd375, %rd374, 3074457345618258603;
	shr.u64 	%rd376, %rd375, 63;
	shr.s64 	%rd377, %rd375, 20;
	add.s64 	%rd378, %rd377, %rd376;
	setp.lt.s64 	%p287, %rd374, 0;
	mul.lo.s64 	%rd379, %rd378, 6291456;
	setp.ne.s64 	%p288, %rd379, %rd374;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd380, -1, 0, %p289;
	add.s64 	%rd381, %rd378, %rd380;
	mul.lo.s64 	%rd382, %rd381, -6291456;
	add.s64 	%rd383, %rd382, %rd374;
	shl.b64 	%rd384, %rd383, 2;
	add.s64 	%rd385, %rd4, %rd384;
	st.global.u32 	[%rd385], %r111;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30921
	mov.u32 	%r2970, 0;
	st.global.u32 	[%rd5], %r2970;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd166, exception2652;
	cvta.global.u64 	%rd167, %rd166;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd167;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6663
	mov.u64 	%rd218, exception2652;
	cvta.global.u64 	%rd219, %rd218;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd219;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L247
	mov.u32 	%r2971, 2;
	st.global.u32 	[%rd5], %r2971;
	mov.u64 	%rd386, exception2612;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd34, exception1;
	cvta.global.u64 	%rd35, %rd34;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd35;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
