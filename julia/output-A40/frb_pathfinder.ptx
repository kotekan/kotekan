// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2634[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12646[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<257>;
	.reg .b16 	%rs<314>;
	.reg .b32 	%r<3006>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<300>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r258, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd18, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r259, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r259, 13919;
	@%p4 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_1;
$L__BB0_158:                            // %L10
	ld.param.u64 	%rd19, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r260, %tid.x;
	add.s32 	%r261, %r2, %r4;
	or.b32  	%r262, %r261, %r260;
	mul.wide.u32 	%rd25, %r262, 4;
	add.s64 	%rd5, %rd19, %rd25;
	mov.u32 	%r263, 1;
	st.global.u32 	[%rd5], %r263;
	and.b32  	%r6, %r260, 3;
	shr.u32 	%r7, %r260, 2;
	mul.lo.s32 	%r264, %r6, %r7;
	and.b32  	%r265, %r264, 7;
	cvt.rn.f32.s32 	%f205, %r265;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f1, %f205, %f206;
	abs.f32 	%f788, %f1;
	setp.lt.f32 	%p5, %f788, 0f40000000;
	setp.gtu.f32 	%p256, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p5 bra 	$L__BB0_170;
// %bb.159:
	@%p256 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r151, %f788;
	and.b32  	%r266, %r151, 8388607;
	or.b32  	%r2989, %r266, 1065353216;
	mov.b32 	%f783, %r2989;
	add.s32 	%r267, %r151, -1073741824;
	and.b32  	%r2990, %r267, -8388608;
	setp.eq.s32 	%p12, %r2990, 0;
	@%p12 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r268, %r2990, 192937984;
	add.s32 	%r269, %r2989, %r268;
	mov.b32 	%f217, %r269;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r2990, %r2990, %r268;
	mov.b32 	%r2989, %f783;
	setp.ne.s32 	%p13, %r2990, 0;
	setp.ne.s32 	%p14, %r2989, 0;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p16, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p16;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p7, %r150, 1073741824;
	@%p7 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p8, %r150, -2147483647;
	@%p8 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p11, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p11;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p9, %f172, 0f40800000;
	@%p9 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p10, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p10;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p17, %f226, 0f7F800000;
	mov.b32 	%r270, %f1;
	and.b32  	%r158, %r270, -2147483648;
	@%p17 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r271, %f784;
	or.b32  	%r272, %r158, %r271;
	mov.b32 	%f784, %r272;
$L__BB0_172:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r279, %f227;
	and.b32  	%r280, %r279, -2147483648;
	or.b32  	%r281, %r280, 1056964608;
	mov.b32 	%f228, %r281;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p18, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p18;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p19, %f231, 0f3F000000;
	shl.b32 	%r161, %r260, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r287, %r162, %r7;
	cvt.rn.f32.s32 	%f259, %r287;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p25, %f734, 0f40000000;
	@%p25 bra 	$L__BB0_13;
// %bb.2:
	setp.gtu.f32 	%p26, %f734, 0f4B800000;
	@%p26 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f734;
	and.b32  	%r288, %r9, 8388607;
	or.b32  	%r2938, %r288, 1065353216;
	mov.b32 	%f733, %r2938;
	add.s32 	%r289, %r9, -1073741824;
	and.b32  	%r2939, %r289, -8388608;
	setp.eq.s32 	%p32, %r2939, 0;
	@%p32 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r290, %r2939, 192937984;
	add.s32 	%r291, %r2938, %r290;
	mov.b32 	%f271, %r291;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2939, %r2939, %r290;
	mov.b32 	%r2938, %f733;
	setp.ne.s32 	%p33, %r2939, 0;
	setp.ne.s32 	%p34, %r2938, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p36, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f4, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p27, %r8, 1073741824;
	@%p27 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p28, %r8, -2147483647;
	@%p28 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p31, %f4, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p31;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p29, %f4, 0f40800000;
	@%p29 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f4;
	setp.ge.f32 	%p30, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p30;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p19;
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p37, %f280, 0f7F800000;
	@%p37 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r292, %f186;
	and.b32  	%r293, %r292, -2147483648;
	mov.b32 	%r294, %f734;
	or.b32  	%r295, %r293, %r294;
	mov.b32 	%f734, %r295;
$L__BB0_15:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r296, %f282;
	and.b32  	%r297, %r296, -2147483648;
	or.b32  	%r298, %r297, 1056964608;
	mov.b32 	%f283, %r298;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p38, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p38;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p39, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p39;
	setp.eq.s32 	%p45, %r163, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p45 bra 	$L__BB0_31;
// %bb.16:                              // %L242
	mul.lo.s32 	%r304, %r163, %r7;
	mul.hi.u32 	%r305, %r304, -1431655765;
	shr.u32 	%r306, %r305, 4;
	mul.lo.s32 	%r307, %r306, 24;
	sub.s32 	%r308, %r304, %r307;
	cvt.rn.f32.s32 	%f311, %r308;
	div.approx.f32 	%f20, %f311, %f260;
	abs.f32 	%f738, %f20;
	setp.lt.f32 	%p46, %f738, 0f40000000;
	@%p46 bra 	$L__BB0_28;
// %bb.17:
	setp.gtu.f32 	%p47, %f738, 0f4B800000;
	@%p47 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_18;
$L__BB0_24:
	mov.b32 	%r17, %f738;
	and.b32  	%r309, %r17, 8388607;
	or.b32  	%r2940, %r309, 1065353216;
	mov.b32 	%f737, %r2940;
	add.s32 	%r310, %r17, -1073741824;
	and.b32  	%r2941, %r310, -8388608;
	setp.eq.s32 	%p53, %r2941, 0;
	@%p53 bra 	$L__BB0_27;
// %bb.25:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_26:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r311, %r2941, 192937984;
	add.s32 	%r312, %r2940, %r311;
	mov.b32 	%f323, %r312;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2941, %r2941, %r311;
	mov.b32 	%r2940, %f737;
	setp.ne.s32 	%p54, %r2941, 0;
	setp.ne.s32 	%p55, %r2940, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_26;
$L__BB0_27:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p57, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_28;
$L__BB0_18:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f23, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f23;
	setp.lt.u32 	%p48, %r16, 1073741824;
	@%p48 bra 	$L__BB0_23;
// %bb.19:
	setp.lt.u32 	%p49, %r16, -2147483647;
	@%p49 bra 	$L__BB0_21;
// %bb.20:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p52, %f23, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p52;
	bra.uni 	$L__BB0_23;
$L__BB0_21:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p50, %f23, 0f40800000;
	@%p50 bra 	$L__BB0_23;
// %bb.22:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f23;
	setp.ge.f32 	%p51, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p51;
$L__BB0_23:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_28:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p58, %f332, 0f7F800000;
	@%p58 bra 	$L__BB0_30;
// %bb.29:
	mov.b32 	%r313, %f20;
	and.b32  	%r314, %r313, -2147483648;
	mov.b32 	%r315, %f738;
	or.b32  	%r316, %r314, %r315;
	mov.b32 	%f738, %r316;
$L__BB0_30:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r317, %f333;
	and.b32  	%r318, %r317, -2147483648;
	or.b32  	%r319, %r318, 1056964608;
	mov.b32 	%f334, %r319;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p59, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p59;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p60, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p60;
	cvt.rzi.s32.f32 	%r320, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r321, %r320, 1;
	setp.eq.b32 	%p61, %r321, 1;
	selp.f32 	%f352, %f350, %f351, %p61;
	selp.f32 	%f353, %f351, %f350, %p61;
	and.b32  	%r322, %r320, 2;
	setp.eq.s32 	%p62, %r322, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p62;
	add.s32 	%r323, %r320, 1;
	and.b32  	%r324, %r323, 2;
	setp.eq.s32 	%p63, %r324, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p63;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p64, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p64;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p65, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p65;
$L__BB0_31:                             // %L276
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r26, %r7, 3;
	setp.eq.s32 	%p66, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p66 bra 	$L__BB0_47;
// %bb.32:                              // %L314
	mul.lo.s32 	%r331, %r162, %r26;
	cvt.u16.u32 	%rs8, %r331;
	mul.lo.s16 	%rs9, %rs8, 171;
	shr.u16 	%rs10, %rs9, 9;
	mul.lo.s16 	%rs11, %rs10, 3;
	sub.s16 	%rs12, %rs8, %rs11;
	and.b16  	%rs13, %rs12, 255;
	cvt.rn.f32.u16 	%f364, %rs13;
	div.approx.f32 	%f41, %f364, %f731;
	abs.f32 	%f744, %f41;
	setp.lt.f32 	%p67, %f744, 0f40000000;
	@%p67 bra 	$L__BB0_44;
// %bb.33:
	setp.gtu.f32 	%p68, %f744, 0f4B800000;
	@%p68 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_34;
$L__BB0_40:
	mov.b32 	%r28, %f744;
	and.b32  	%r332, %r28, 8388607;
	or.b32  	%r2942, %r332, 1065353216;
	mov.b32 	%f743, %r2942;
	add.s32 	%r333, %r28, -1073741824;
	and.b32  	%r2943, %r333, -8388608;
	setp.eq.s32 	%p74, %r2943, 0;
	@%p74 bra 	$L__BB0_43;
// %bb.41:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_42:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r334, %r2943, 192937984;
	add.s32 	%r335, %r2942, %r334;
	mov.b32 	%f376, %r335;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2943, %r2943, %r334;
	mov.b32 	%r2942, %f743;
	setp.ne.s32 	%p75, %r2943, 0;
	setp.ne.s32 	%p76, %r2942, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_42;
$L__BB0_43:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p78, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_44;
$L__BB0_34:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f44, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f44;
	setp.lt.u32 	%p69, %r27, 1073741824;
	@%p69 bra 	$L__BB0_39;
// %bb.35:
	setp.lt.u32 	%p70, %r27, -2147483647;
	@%p70 bra 	$L__BB0_37;
// %bb.36:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p73, %f44, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p73;
	bra.uni 	$L__BB0_39;
$L__BB0_37:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p71, %f44, 0f40800000;
	@%p71 bra 	$L__BB0_39;
// %bb.38:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f44;
	setp.ge.f32 	%p72, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p72;
$L__BB0_39:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_44:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p79, %f385, 0f7F800000;
	@%p79 bra 	$L__BB0_46;
// %bb.45:
	mov.b32 	%r336, %f41;
	and.b32  	%r337, %r336, -2147483648;
	mov.b32 	%r338, %f744;
	or.b32  	%r339, %r337, %r338;
	mov.b32 	%f744, %r339;
$L__BB0_46:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r340, %f386;
	and.b32  	%r341, %r340, -2147483648;
	or.b32  	%r342, %r341, 1056964608;
	mov.b32 	%f387, %r342;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p80, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p80;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p81, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p81;
	cvt.rzi.s32.f32 	%r343, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r344, %r343, 1;
	setp.eq.b32 	%p82, %r344, 1;
	selp.f32 	%f405, %f403, %f404, %p82;
	selp.f32 	%f406, %f404, %f403, %p82;
	and.b32  	%r345, %r343, 2;
	setp.eq.s32 	%p83, %r345, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p83;
	add.s32 	%r346, %r343, 1;
	and.b32  	%r347, %r346, 2;
	setp.eq.s32 	%p84, %r347, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p84;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p85, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p85;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p86, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p86;
$L__BB0_47:                             // %L348
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p89, %p45, %p66;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p89 bra 	$L__BB0_63;
// %bb.48:                              // %L356
	mul.lo.s32 	%r348, %r163, %r26;
	mul.hi.u32 	%r349, %r348, -1431655765;
	shr.u32 	%r350, %r349, 1;
	mul.lo.s32 	%r351, %r350, 3;
	sub.s32 	%r352, %r348, %r351;
	cvt.rn.f32.s32 	%f417, %r352;
	div.approx.f32 	%f62, %f417, %f731;
	abs.f32 	%f750, %f62;
	setp.lt.f32 	%p90, %f750, 0f40000000;
	@%p90 bra 	$L__BB0_60;
// %bb.49:
	setp.gtu.f32 	%p91, %f750, 0f4B800000;
	@%p91 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r36, %f750;
	and.b32  	%r353, %r36, 8388607;
	or.b32  	%r2944, %r353, 1065353216;
	mov.b32 	%f749, %r2944;
	add.s32 	%r354, %r36, -1073741824;
	and.b32  	%r2945, %r354, -8388608;
	setp.eq.s32 	%p97, %r2945, 0;
	@%p97 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r2945, 192937984;
	add.s32 	%r356, %r2944, %r355;
	mov.b32 	%f429, %r356;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2945, %r2945, %r355;
	mov.b32 	%r2944, %f749;
	setp.ne.s32 	%p98, %r2945, 0;
	setp.ne.s32 	%p99, %r2944, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p101, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f65, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f65;
	setp.lt.u32 	%p92, %r35, 1073741824;
	@%p92 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p93, %r35, -2147483647;
	@%p93 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p96, %f65, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p96;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p94, %f65, 0f40800000;
	@%p94 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f65;
	setp.ge.f32 	%p95, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p95;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p102, %f438, 0f7F800000;
	@%p102 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r357, %f62;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f750;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f750, %r360;
$L__BB0_62:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r361, %f439;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f440, %r363;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p103, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p103;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p104, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p104;
	cvt.rzi.s32.f32 	%r364, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r365, %r364, 1;
	setp.eq.b32 	%p105, %r365, 1;
	selp.f32 	%f458, %f456, %f457, %p105;
	selp.f32 	%f459, %f457, %f456, %p105;
	and.b32  	%r366, %r364, 2;
	setp.eq.s32 	%p106, %r366, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p106;
	add.s32 	%r367, %r364, 1;
	and.b32  	%r368, %r367, 2;
	setp.eq.s32 	%p107, %r368, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p107;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p108, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p108;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p109, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p109;
$L__BB0_63:                             // %L390
	cvt.rzi.s32.f32 	%r282, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r43, %r260, 2;
	setp.eq.s32 	%p110, %r43, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p110 bra 	$L__BB0_65;
// %bb.64:                              // %L399
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_65:                             // %L401
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r283, %r282, 1;
	cvt.rzi.s32.f32 	%r299, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p5 bra 	$L__BB0_180;
// %bb.66:
	@%p256 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_67;
$L__BB0_176:
	mov.b32 	%r165, %f788;
	and.b32  	%r375, %r165, 8388607;
	or.b32  	%r2991, %r375, 1065353216;
	mov.b32 	%f787, %r2991;
	add.s32 	%r376, %r165, -1073741824;
	and.b32  	%r2992, %r376, -8388608;
	setp.eq.s32 	%p118, %r2992, 0;
	@%p118 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r377, %r2992, 192937984;
	add.s32 	%r378, %r2991, %r377;
	mov.b32 	%f479, %r378;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r2992, %r2992, %r377;
	mov.b32 	%r2991, %f787;
	setp.ne.s32 	%p119, %r2992, 0;
	setp.ne.s32 	%p120, %r2991, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p122, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_180;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p113, %r164, 1073741824;
	@%p113 bra 	$L__BB0_175;
// %bb.68:
	setp.lt.u32 	%p114, %r164, -2147483647;
	@%p114 bra 	$L__BB0_173;
// %bb.69:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p117, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p117;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p115, %f189, 0f40800000;
	@%p115 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p116, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p116;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p20, %r283, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r300, %r299, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p123, %f488, 0f7F800000;
	@%p123 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r379, %f788;
	or.b32  	%r380, %r158, %r379;
	mov.b32 	%f788, %r380;
$L__BB0_182:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p20;
	and.b32  	%r284, %r282, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p40, %r300, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r387, %f489;
	and.b32  	%r388, %r387, -2147483648;
	or.b32  	%r389, %r388, 1056964608;
	mov.b32 	%f490, %r389;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p124, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p124;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p125, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p125;
	cvt.rzi.s32.f32 	%r390, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r391, %r390, 1;
	setp.eq.b32 	%p126, %r391, 1;
	selp.f32 	%f508, %f506, %f507, %p126;
	and.b32  	%r392, %r390, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p131, %f760, 0f40000000;
	@%p131 bra 	$L__BB0_81;
// %bb.70:
	setp.gtu.f32 	%p132, %f760, 0f4B800000;
	@%p132 bra 	$L__BB0_77;
	bra.uni 	$L__BB0_71;
$L__BB0_77:
	mov.b32 	%r47, %f760;
	and.b32  	%r395, %r47, 8388607;
	or.b32  	%r2946, %r395, 1065353216;
	mov.b32 	%f759, %r2946;
	add.s32 	%r396, %r47, -1073741824;
	and.b32  	%r2947, %r396, -8388608;
	setp.eq.s32 	%p138, %r2947, 0;
	@%p138 bra 	$L__BB0_80;
// %bb.78:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_79:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r2947, 192937984;
	add.s32 	%r398, %r2946, %r397;
	mov.b32 	%f532, %r398;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2947, %r2947, %r397;
	mov.b32 	%r2946, %f759;
	setp.ne.s32 	%p139, %r2947, 0;
	setp.ne.s32 	%p140, %r2946, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_79;
$L__BB0_80:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p142, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_81;
$L__BB0_71:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f90, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f90;
	setp.lt.u32 	%p133, %r46, 1073741824;
	@%p133 bra 	$L__BB0_76;
// %bb.72:
	setp.lt.u32 	%p134, %r46, -2147483647;
	@%p134 bra 	$L__BB0_74;
// %bb.73:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p137;
	bra.uni 	$L__BB0_76;
$L__BB0_74:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p136;
$L__BB0_76:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_81:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p21, %r284, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r285, %r282, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p40;
	and.b32  	%r301, %r299, 2;
	setp.eq.s32 	%p127, %r392, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r393, %r390, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p143, %f541, 0f7F800000;
	@%p143 bra 	$L__BB0_83;
// %bb.82:
	mov.b32 	%r399, %f203;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r401, %f760;
	or.b32  	%r402, %r400, %r401;
	mov.b32 	%f760, %r402;
$L__BB0_83:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p20;
	selp.f32 	%f249, %f246, %f248, %p21;
	and.b32  	%r286, %r285, 2;
	setp.eq.f32 	%p23, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p41, %r301, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r302, %r299, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p126;
	selp.f32 	%f511, %f508, %f510, %p127;
	and.b32  	%r394, %r393, 2;
	setp.eq.f32 	%p129, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r403, %f542;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f543, %r405;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p144, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p144;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p145, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p145;
	cvt.rzi.s32.f32 	%r406, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p146, %r407, 1;
	selp.f32 	%f561, %f559, %f560, %p146;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p147, %r408, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r409, %r406, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r7;
	div.approx.f32 	%f106, %f572, %f521;
	abs.f32 	%f764, %f106;
	setp.lt.f32 	%p151, %f764, 0f40000000;
	@%p151 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p152, %f764, 0f4B800000;
	@%p152 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r55, %f764;
	and.b32  	%r411, %r55, 8388607;
	or.b32  	%r2948, %r411, 1065353216;
	mov.b32 	%f763, %r2948;
	add.s32 	%r412, %r55, -1073741824;
	and.b32  	%r2949, %r412, -8388608;
	setp.eq.s32 	%p158, %r2949, 0;
	@%p158 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r413, %r2949, 192937984;
	add.s32 	%r414, %r2948, %r413;
	mov.b32 	%f584, %r414;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2949, %r2949, %r413;
	mov.b32 	%r2948, %f763;
	setp.ne.s32 	%p159, %r2949, 0;
	setp.ne.s32 	%p160, %r2948, 0;
	and.pred  	%p161, %p159, %p160;
	@%p161 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p162, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p162;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f109, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f109;
	setp.lt.u32 	%p153, %r54, 1073741824;
	@%p153 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p154, %r54, -2147483647;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p157, %f109, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p157;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p155, %f109, 0f40800000;
	@%p155 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f109;
	setp.ge.f32 	%p156, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p156;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p22, %r286, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p23;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p40;
	selp.f32 	%f304, %f301, %f303, %p41;
	and.b32  	%r303, %r302, 2;
	setp.eq.f32 	%p43, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p128, %r394, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p129;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p146;
	selp.f32 	%f564, %f561, %f563, %p147;
	and.b32  	%r410, %r409, 2;
	setp.eq.f32 	%p149, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p163, %f593, 0f7F800000;
	@%p163 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r415, %f106;
	and.b32  	%r416, %r415, -2147483648;
	mov.b32 	%r417, %f764;
	or.b32  	%r418, %r416, %r417;
	mov.b32 	%f764, %r418;
$L__BB0_97:                             // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p22;
	setp.gt.f32 	%p24, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p42, %r303, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f18, %f308, %f304, %p43;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p128;
	setp.gt.f32 	%p130, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p148, %r410, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f104, %f569, %f564, %p149;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r425, %f595;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f596, %r427;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p164, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p164;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p165, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p165;
	cvt.rzi.s32.f32 	%r428, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p166, %r429, 1;
	selp.f32 	%f614, %f612, %f613, %p166;
	selp.f32 	%f615, %f613, %f612, %p166;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p167, %r430, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p167;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p168, %r432, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p169, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p169;
	abs.f32 	%f623, %f764;
	and.b32  	%r65, %r260, 1;
	shr.u32 	%r66, %r260, 4;
	setp.ne.s32 	%p171, %r65, %r66;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p171 bra 	$L__BB0_113;
// %bb.98:                              // %L606
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f123, %f627, %f626;
	abs.f32 	%f768, %f123;
	setp.lt.f32 	%p172, %f768, 0f40000000;
	@%p172 bra 	$L__BB0_110;
// %bb.99:
	setp.gtu.f32 	%p173, %f768, 0f4B800000;
	@%p173 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_100;
$L__BB0_106:
	mov.b32 	%r68, %f768;
	and.b32  	%r433, %r68, 8388607;
	or.b32  	%r2950, %r433, 1065353216;
	mov.b32 	%f767, %r2950;
	add.s32 	%r434, %r68, -1073741824;
	and.b32  	%r2951, %r434, -8388608;
	setp.eq.s32 	%p179, %r2951, 0;
	@%p179 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r435, %r2951, 192937984;
	add.s32 	%r436, %r2950, %r435;
	mov.b32 	%f638, %r436;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2951, %r2951, %r435;
	mov.b32 	%r2950, %f767;
	setp.ne.s32 	%p180, %r2951, 0;
	setp.ne.s32 	%p181, %r2950, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p183, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_110;
$L__BB0_100:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f126, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f126;
	setp.lt.u32 	%p174, %r67, 1073741824;
	@%p174 bra 	$L__BB0_105;
// %bb.101:
	setp.lt.u32 	%p175, %r67, -2147483647;
	@%p175 bra 	$L__BB0_103;
// %bb.102:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p178, %f126, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p178;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p176, %f126, 0f40800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f126;
	setp.ge.f32 	%p177, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p177;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p184, %f647, 0f7F800000;
	@%p184 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r437, %f123;
	and.b32  	%r438, %r437, -2147483648;
	mov.b32 	%r439, %f768;
	or.b32  	%r440, %r438, %r439;
	mov.b32 	%f768, %r440;
$L__BB0_112:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r441, %f648;
	and.b32  	%r442, %r441, -2147483648;
	or.b32  	%r443, %r442, 1056964608;
	mov.b32 	%f649, %r443;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p185, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p185;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p186, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p186;
	cvt.rzi.s32.f32 	%r444, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r445, %r444, 1;
	setp.eq.b32 	%p187, %r445, 1;
	selp.f32 	%f667, %f665, %f666, %p187;
	selp.f32 	%f668, %f666, %f665, %p187;
	and.b32  	%r446, %r444, 2;
	setp.eq.s32 	%p188, %r446, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p188;
	add.s32 	%r447, %r444, 1;
	and.b32  	%r448, %r447, 2;
	setp.eq.s32 	%p189, %r448, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p189;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p190, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p190;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p191, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p191;
$L__BB0_113:                            // %L645
	selp.f32 	%f258, %f257, %f252, %p24;
	selp.f32 	%f306, %f302, %f305, %p42;
	setp.gt.f32 	%p44, %f309, 0f4B800000;
	add.f32 	%f310, %f18, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p130;
	selp.f32 	%f567, %f562, %f566, %p148;
	setp.gt.f32 	%p150, %f570, 0f4B800000;
	add.f32 	%f571, %f104, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p168;
	setp.gt.f32 	%p170, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r64, %r7, 1;
	mov.f32 	%f781, %f776;
	@%p171 bra 	$L__BB0_129;
// %bb.114:                             // %L648
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f144, %f679, %f680;
	abs.f32 	%f774, %f144;
	setp.lt.f32 	%p193, %f774, 0f40000000;
	@%p193 bra 	$L__BB0_126;
// %bb.115:
	setp.gtu.f32 	%p194, %f774, 0f4B800000;
	@%p194 bra 	$L__BB0_122;
	bra.uni 	$L__BB0_116;
$L__BB0_122:
	mov.b32 	%r76, %f774;
	and.b32  	%r449, %r76, 8388607;
	or.b32  	%r2952, %r449, 1065353216;
	mov.b32 	%f773, %r2952;
	add.s32 	%r450, %r76, -1073741824;
	and.b32  	%r2953, %r450, -8388608;
	setp.eq.s32 	%p200, %r2953, 0;
	@%p200 bra 	$L__BB0_125;
// %bb.123:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_124:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r451, %r2953, 192937984;
	add.s32 	%r452, %r2952, %r451;
	mov.b32 	%f691, %r452;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2953, %r2953, %r451;
	mov.b32 	%r2952, %f773;
	setp.ne.s32 	%p201, %r2953, 0;
	setp.ne.s32 	%p202, %r2952, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_124;
$L__BB0_125:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p204, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_126;
$L__BB0_116:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f147, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f147;
	setp.lt.u32 	%p195, %r75, 1073741824;
	@%p195 bra 	$L__BB0_121;
// %bb.117:
	setp.lt.u32 	%p196, %r75, -2147483647;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p199, %f147, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p199;
	bra.uni 	$L__BB0_121;
$L__BB0_119:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p197, %f147, 0f40800000;
	@%p197 bra 	$L__BB0_121;
// %bb.120:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f147;
	setp.ge.f32 	%p198, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p198;
$L__BB0_121:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_126:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p205, %f700, 0f7F800000;
	@%p205 bra 	$L__BB0_128;
// %bb.127:
	mov.b32 	%r453, %f144;
	and.b32  	%r454, %r453, -2147483648;
	mov.b32 	%r455, %f774;
	or.b32  	%r456, %r454, %r455;
	mov.b32 	%f774, %r456;
$L__BB0_128:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r457, %f701;
	and.b32  	%r458, %r457, -2147483648;
	or.b32  	%r459, %r458, 1056964608;
	mov.b32 	%f702, %r459;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p206, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p206;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p207, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p207;
	cvt.rzi.s32.f32 	%r460, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r461, %r460, 1;
	setp.eq.b32 	%p208, %r461, 1;
	selp.f32 	%f720, %f718, %f719, %p208;
	selp.f32 	%f721, %f719, %f718, %p208;
	and.b32  	%r462, %r460, 2;
	setp.eq.s32 	%p209, %r462, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p209;
	add.s32 	%r463, %r460, 1;
	and.b32  	%r464, %r463, 2;
	setp.eq.s32 	%p210, %r464, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p210;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p211, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p211;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p212, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p212;
$L__BB0_129:                            // %L682
	mov.b32 	%r275, %f258;
	mov.b32 	%r278, %f255;
	selp.f32 	%f19, %f310, %f306, %p44;
	mov.b32 	%r383, %f520;
	mov.b32 	%r386, %f517;
	selp.f32 	%f105, %f571, %f567, %p150;
	selp.f32 	%f625, %f624, %f619, %p170;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p110 bra 	$L__BB0_131;
// %bb.130:                             // %L691
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_131:                            // %L693
	xor.b32  	%r274, %r278, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r326, %f19;
	mov.b32 	%r327, %f740;
	mov.b32 	%r329, %f18;
	mov.b32 	%r330, %f741;
	mov.b32 	%r370, %f754;
	mov.b32 	%r371, %f756;
	mov.b32 	%r373, %f755;
	mov.b32 	%r374, %f757;
	xor.b32  	%r382, %r386, -2147483648;
	mov.b32 	%r421, %f625;
	mov.b32 	%r420, %f105;
	mov.b32 	%r424, %f622;
	mov.b32 	%r423, %f104;
	mov.b32 	%r466, %f778;
	mov.b32 	%r467, %f780;
	mov.b32 	%r469, %f779;
	mov.b32 	%r470, %f781;
	setp.gt.u32 	%p214, %r260, 15;
	mov.u32 	%r174, 999999999;
	@%p214 bra 	$L__BB0_133;
// %bb.132:                             // %L723
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	mad.lo.s32 	%r472, %r260, 6, %r1;
	cvt.u16.u32 	%rs14, %r472;
	and.b16  	%rs15, %rs14, 255;
	mul.lo.s16 	%rs16, %rs15, 171;
	shr.u16 	%rs17, %rs16, 14;
	mul.lo.s16 	%rs18, %rs17, 96;
	sub.s16 	%rs19, %rs14, %rs18;
	cvt.u32.u16 	%r473, %rs19;
	and.b32  	%r474, %r473, 255;
	mul.wide.u32 	%rd26, %r474, 4;
	add.s64 	%rd27, %rd1, %rd26;
	ld.global.u32 	%r475, [%rd27];
	cvt.s32.s16 	%r476, %r475;
	shr.s32 	%r477, %r475, 16;
	mul.lo.s32 	%r478, %r477, 290;
	mad.lo.s32 	%r174, %r476, 33, %r478;
$L__BB0_133:                            // %pass393
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r273, %r275, %r274;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r278, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r381, %r383, %r382;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r383;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r465, %r467, %r466;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r468, %r470, %r469;
	// end inline asm
	shr.u32 	%r480, %r260, 3;
	bfe.u32 	%r481, %r260, 3, 1;
	shl.b32 	%r482, %r1, 1;
	and.b32  	%r483, %r482, 2;
	or.b32  	%r484, %r481, %r483;
	mul.lo.s32 	%r485, %r6, 24;
	and.b32  	%r486, %r480, 2;
	or.b32  	%r175, %r64, %r486;
	cvt.u16.u32 	%rs21, %r175;
	mul.lo.s16 	%rs22, %rs21, 171;
	shr.u16 	%rs23, %rs22, 9;
	mul.lo.s16 	%rs24, %rs23, 3;
	sub.s16 	%rs25, %rs21, %rs24;
	cvt.u32.u16 	%r487, %rs25;
	and.b32  	%r488, %r487, 255;
	and.b16  	%rs26, %rs25, 255;
	mul.wide.u16 	%r489, %rs26, 8;
	add.s32 	%r490, %r485, %r4;
	or.b32  	%r491, %r490, %r484;
	add.s32 	%r492, %r491, %r489;
	mul.wide.u32 	%rd28, %r492, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r176, [%rd29];
	or.b32  	%r493, %r484, 4;
	cvt.u64.u32 	%rd30, %r489;
	cvt.u64.u32 	%rd31, %r490;
	cvt.u64.u32 	%rd32, %r484;
	add.s64 	%rd33, %rd31, %rd32;
	add.s64 	%rd34, %rd33, %rd30;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r177, [%rd36+16];
	cvt.u64.u32 	%rd37, %r485;
	cvt.u64.u32 	%rd38, %r4;
	add.s64 	%rd39, %rd38, %rd37;
	add.s64 	%rd40, %rd39, %rd32;
	add.s64 	%rd41, %rd40, %rd30;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.u32 	%r178, [%rd43+384];
	cvt.u64.u32 	%rd44, %r493;
	add.s64 	%rd45, %rd39, %rd44;
	add.s64 	%rd46, %rd45, %rd30;
	shl.b64 	%rd47, %rd46, 2;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.u32 	%r179, [%rd48+384];
	shl.b32 	%r494, %r3, 5;
	shl.b32 	%r495, %r260, 2;
	shl.b32 	%r496, %r1, 2;
	or.b32  	%r180, %r480, %r496;
	and.b32  	%r497, %r495, 28;
	or.b32  	%r181, %r497, %r494;
	and.b32  	%r182, %r260, 4;
	bfe.s32 	%r498, %r260, 2, 1;
	shl.b32 	%r499, %r260, 4;
	and.b32  	%r500, %r161, 8;
	or.b32  	%r501, %r500, %r499;
	bfe.u32 	%r502, %r501, 3, 3;
	mul.lo.s32 	%r183, %r502, 260;
	cvt.u16.u32 	%rs27, %r260;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 12;
	mul.lo.s16 	%rs31, %rs30, 24;
	sub.s16 	%rs5, %rs27, %rs31;
	add.s32 	%r503, %r1, 6;
	shr.u32 	%r504, %r503, 3;
	add.s32 	%r505, %r2, 192;
	and.b32  	%r506, %r505, 224;
	mad.lo.s32 	%r184, %r504, 260, %r506;
	add.s32 	%r507, %r1, 12;
	shr.u32 	%r508, %r507, 3;
	add.s32 	%r509, %r2, 128;
	and.b32  	%r510, %r509, 224;
	mad.lo.s32 	%r185, %r508, 260, %r510;
	add.s32 	%r511, %r1, 18;
	shr.u32 	%r512, %r511, 3;
	add.s32 	%r513, %r2, 64;
	and.b32  	%r514, %r513, 224;
	mad.lo.s32 	%r186, %r512, 260, %r514;
	or.b32  	%r187, %r2, 780;
	add.s32 	%r515, %r1, 30;
	shr.u32 	%r516, %r515, 3;
	mad.lo.s32 	%r188, %r516, 260, %r506;
	add.s32 	%r517, %r1, 36;
	shr.u32 	%r518, %r517, 3;
	mad.lo.s32 	%r189, %r518, 260, %r510;
	add.s32 	%r519, %r1, 42;
	shr.u32 	%r520, %r519, 3;
	mad.lo.s32 	%r190, %r520, 260, %r514;
	or.b32  	%r191, %r2, 1560;
	add.s32 	%r521, %r1, 54;
	shr.u32 	%r522, %r521, 3;
	mad.lo.s32 	%r192, %r522, 260, %r506;
	add.s32 	%r523, %r1, 60;
	bfe.u32 	%r524, %r523, 3, 3;
	mad.lo.s32 	%r193, %r524, 260, %r510;
	mul.lo.s32 	%r525, %r6, 870;
	shr.u32 	%r526, %r1, 1;
	cvt.u16.u32 	%rs32, %r526;
	and.b16  	%rs33, %rs32, 255;
	mul.lo.s16 	%rs34, %rs33, 171;
	shr.u16 	%rs35, %rs34, 9;
	mul.lo.s16 	%rs36, %rs35, 3;
	sub.s16 	%rs37, %rs32, %rs36;
	cvt.u32.u16 	%r527, %rs37;
	and.b32  	%r194, %r527, 255;
	mad.lo.s32 	%r528, %r484, 33, %r525;
	mad.lo.s32 	%r195, %r488, 290, %r528;
	add.s32 	%r196, %r195, 132;
	setp.lt.u32 	%p216, %r260, 4;
	setp.eq.s32 	%p217, %r7, 1;
	setp.eq.s32 	%p218, %r7, 4;
	setp.eq.s32 	%p219, %r7, 5;
	or.b32  	%r529, %r483, %r66;
	selp.b32 	%r530, 0, 392, %p110;
	bfe.s32 	%r531, %r260, 3, 1;
	and.b32  	%r197, %r531, 98;
	and.b32  	%r198, %r498, 196;
	setp.eq.s32 	%p220, %r65, 0;
	selp.b32 	%r199, 0, 784, %p220;
	or.b32  	%r200, %r529, %r530;
	add.s32 	%r532, %r198, %r197;
	add.s32 	%r533, %r532, %r199;
	add.s32 	%r201, %r533, %r200;
	add.s32 	%r202, %r201, 1576;
	or.b32  	%r203, %r200, 4;
	add.s32 	%r204, %r533, %r203;
	add.s32 	%r205, %r201, 1580;
	add.s32 	%r206, %r201, 1584;
	add.s32 	%r207, %r201, 1588;
	and.b32  	%r534, %r1, 1;
	neg.s32 	%r535, %r534;
	and.b32  	%r536, %r535, 392;
	and.b32  	%r537, %r531, 1576;
	shr.u32 	%r538, %r1, 2;
	and.b32  	%r539, %r161, 6;
	bfe.s32 	%r540, %r1, 1, 1;
	and.b32  	%r541, %r540, 196;
	mad.lo.s32 	%r542, %r538, 98, %r539;
	or.b32  	%r543, %r542, %r64;
	mad.lo.s32 	%r544, %r66, 784, %r543;
	add.s32 	%r545, %r544, %r537;
	add.s32 	%r546, %r545, %r536;
	add.s32 	%r208, %r546, %r541;
	add.s32 	%r209, %r208, 8;
	mul.lo.s32 	%r547, %r3, 576;
	cvt.u16.u32 	%rs38, %r180;
	and.b16  	%rs39, %rs38, 255;
	mul.lo.s16 	%rs40, %rs39, 171;
	shr.u16 	%rs41, %rs40, 9;
	and.b16  	%rs42, %rs41, 24;
	add.s16 	%rs43, %rs38, %rs42;
	shl.b16 	%rs44, %rs43, 3;
	cvt.u32.u16 	%r548, %rs44;
	and.b32  	%r549, %r548, 248;
	and.b32  	%r550, %r260, 7;
	or.b32  	%r551, %r550, %r547;
	add.s32 	%r210, %r551, %r549;
	add.s32 	%r552, %r195, %r194;
	mul.wide.u32 	%rd49, %r552, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd12, %rd50, %rd49;
	add.s32 	%r553, %r196, %r194;
	mul.wide.u32 	%rd51, %r553, 4;
	add.s64 	%rd13, %rd50, %rd51;
	cvt.u64.u32 	%rd52, %r195;
	cvt.u64.u16 	%rd53, %rs37;
	and.b64  	%rd54, %rd53, 255;
	add.s64 	%rd55, %rd52, %rd54;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd14, %rd50, %rd56;
	cvt.u64.u32 	%rd57, %r196;
	add.s64 	%rd58, %rd57, %rd54;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd15, %rd50, %rd59;
	or.pred  	%p221, %p216, %p217;
	and.b32  	%r554, %r260, 24;
	setp.eq.s32 	%p222, %r554, 8;
	or.pred  	%p223, %p221, %p222;
	or.pred  	%p224, %p223, %p218;
	setp.eq.s32 	%p225, %r554, 24;
	or.pred  	%p226, %p219, %p225;
	selp.b32 	%r211, 1145324612, -286331154, %p223;
	or.pred  	%p1, %p224, %p226;
	selp.b32 	%r212, 1145324612, -286331154, %p221;
	add.s32 	%r555, %r7, -1;
	setp.lt.u32 	%p227, %r555, 3;
	or.pred  	%p2, %p216, %p227;
	setp.eq.s32 	%p228, %r554, 16;
	or.pred  	%p3, %p228, %p225;
	selp.b32 	%r213, 1145324612, -286331154, %p228;
	and.b16  	%rs6, %rs37, 255;
	or.b16  	%rs7, %rs6, 24;
	mov.u32 	%r479, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r235, %r212, %r213, %p2;
	or.pred  	%p236, %p2, %p3;
	mov.u32 	%r86, %r194;
	mov.u32 	%r87, %r479;
	mov.u32 	%r108, %r479;
	mov.u32 	%r109, %r479;
	mov.u32 	%r110, %r479;
	bra.uni 	$L__BB0_134;
$L__BB0_156:                            // %L30562
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r148, %r87, 48;
	add.s32 	%r86, %r86, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p255, %r87, 96;
	mov.u32 	%r87, %r148;
	@%p255 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_157;
$L__BB0_134:                            // %L1478
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_136 Depth 2
                                        //     Child Loop BB0_146 Depth 2
	setp.ne.s32 	%p229, %r175, 3;
	setp.gt.u32 	%p230, %r1, 3;
	setp.eq.s32 	%p231, %r182, 0;
	mul.hi.u32 	%r653, %r87, -1431655765;
	shr.u32 	%r654, %r653, 5;
	mul.lo.s32 	%r655, %r654, 48;
	add.s32 	%r656, %r655, %r180;
	cvt.u16.u32 	%rs45, %r656;
	mul.hi.s16 	%rs46, %rs45, 3641;
	shr.u16 	%rs47, %rs46, 15;
	shr.s16 	%rs48, %rs46, 3;
	add.s16 	%rs49, %rs48, %rs47;
	mul.lo.s16 	%rs50, %rs49, 144;
	sub.s16 	%rs51, %rs45, %rs50;
	cvt.u32.u16 	%r657, %rs51;
	shl.b32 	%r658, %r657, 16;
	or.b32  	%r659, %r658, %r181;
	mul.wide.s32 	%rd60, %r659, 4;
	add.s64 	%rd61, %rd3, %rd60;
	ld.global.v4.u32 	{%r660, %r661, %r662, %r663}, [%rd61];
	add.s16 	%rs52, %rs45, 24;
	mul.hi.s16 	%rs53, %rs52, 3641;
	shr.u16 	%rs54, %rs53, 15;
	shr.s16 	%rs55, %rs53, 3;
	add.s16 	%rs56, %rs55, %rs54;
	mul.lo.s16 	%rs57, %rs56, 144;
	sub.s16 	%rs58, %rs52, %rs57;
	cvt.u32.u16 	%r664, %rs58;
	shl.b32 	%r665, %r664, 16;
	or.b32  	%r666, %r665, %r181;
	mul.wide.s32 	%rd62, %r666, 4;
	add.s64 	%rd63, %rd3, %rd62;
	ld.global.v4.u32 	{%r667, %r668, %r669, %r670}, [%rd63];
	selp.b32 	%r671, %r662, %r660, %p231;
	shfl.sync.bfly.b32	%r672, %r671, 4, 31, -1;
	selp.b32 	%r558, %r660, %r672, %p231;
	selp.b32 	%r563, %r672, %r662, %p231;
	selp.b32 	%r673, %r663, %r661, %p231;
	shfl.sync.bfly.b32	%r674, %r673, 4, 31, -1;
	selp.b32 	%r566, %r661, %r674, %p231;
	selp.b32 	%r571, %r674, %r663, %p231;
	selp.b32 	%r675, %r669, %r667, %p231;
	shfl.sync.bfly.b32	%r676, %r675, 4, 31, -1;
	selp.b32 	%r574, %r667, %r676, %p231;
	selp.b32 	%r579, %r676, %r669, %p231;
	selp.b32 	%r677, %r670, %r668, %p231;
	shfl.sync.bfly.b32	%r678, %r677, 4, 31, -1;
	selp.b32 	%r582, %r668, %r678, %p231;
	selp.b32 	%r587, %r678, %r670, %p231;
	shl.b32 	%r559, %r563, 4;
	mov.u32 	%r557, 252645135;
	// begin inline asm
	lop3.b32 %r589, %r557, %r558, %r559, 202;
	// end inline asm
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r605, %r557, %r562, %r563, 202;
	// end inline asm
	shl.b32 	%r567, %r571, 4;
	// begin inline asm
	lop3.b32 %r597, %r557, %r566, %r567, 202;
	// end inline asm
	shr.u32 	%r570, %r566, 4;
	// begin inline asm
	lop3.b32 %r613, %r557, %r570, %r571, 202;
	// end inline asm
	shl.b32 	%r575, %r579, 4;
	// begin inline asm
	lop3.b32 %r590, %r557, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r606, %r557, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r598, %r557, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r614, %r557, %r586, %r587, 202;
	// end inline asm
	mov.u32 	%r591, 25152;
	// begin inline asm
	prmt.b32 %r621, %r589, %r590, %r591;
	// end inline asm
	mov.u32 	%r595, 29521;
	// begin inline asm
	prmt.b32 %r637, %r589, %r590, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r629, %r597, %r598, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r597, %r598, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r605, %r606, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r605, %r606, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r613, %r614, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r613, %r614, %r595;
	// end inline asm
	mov.u32 	%r647, 21520;
	// begin inline asm
	prmt.b32 %r620, %r621, %r622, %r647;
	// end inline asm
	mov.u32 	%r651, 30258;
	// begin inline asm
	prmt.b32 %r624, %r621, %r622, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r629, %r630, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r632, %r629, %r630, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r636, %r637, %r638, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r637, %r638, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r645, %r646, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r645, %r646, %r651;
	// end inline asm
	cvt.s16.s8 	%rs59, %rs45;
	mul.lo.s16 	%rs60, %rs59, 43;
	shr.u16 	%rs61, %rs60, 15;
	shr.s16 	%rs62, %rs60, 8;
	shr.u16 	%rs63, %rs62, 2;
	add.s16 	%rs64, %rs63, %rs61;
	mul.lo.s16 	%rs65, %rs64, 24;
	sub.s16 	%rs66, %rs45, %rs65;
	cvt.u32.u16 	%r679, %rs66;
	cvt.s32.s8 	%r680, %r679;
	add.s32 	%r681, %r183, %r680;
	mul.wide.s32 	%rd64, %r681, 4;
	add.s64 	%rd66, %rd50, %rd64;
	st.shared.u32 	[%rd66], %r620;
	add.s32 	%r682, %r681, 128;
	mul.wide.u32 	%rd67, %r682, 4;
	add.s64 	%rd68, %rd50, %rd67;
	st.shared.u32 	[%rd68], %r628;
	add.s32 	%r683, %r681, 64;
	mul.wide.u32 	%rd69, %r683, 4;
	add.s64 	%rd70, %rd50, %rd69;
	st.shared.u32 	[%rd70], %r624;
	add.s32 	%r684, %r681, 192;
	mul.wide.u32 	%rd71, %r684, 4;
	add.s64 	%rd72, %rd50, %rd71;
	st.shared.u32 	[%rd72], %r632;
	add.s32 	%r685, %r681, 32;
	mul.wide.u32 	%rd73, %r685, 4;
	add.s64 	%rd74, %rd50, %rd73;
	st.shared.u32 	[%rd74], %r636;
	add.s32 	%r686, %r681, 160;
	mul.wide.u32 	%rd75, %r686, 4;
	add.s64 	%rd76, %rd50, %rd75;
	st.shared.u32 	[%rd76], %r644;
	add.s32 	%r687, %r681, 96;
	mul.wide.u32 	%rd77, %r687, 4;
	add.s64 	%rd78, %rd50, %rd77;
	st.shared.u32 	[%rd78], %r640;
	add.s32 	%r688, %r681, 224;
	mul.wide.u32 	%rd79, %r688, 4;
	add.s64 	%rd80, %rd50, %rd79;
	st.shared.u32 	[%rd80], %r648;
	bar.sync 	0;
	cvt.u16.u32 	%rs67, %r655;
	add.s16 	%rs68, %rs5, %rs67;
	cvt.s16.s8 	%rs69, %rs68;
	mul.lo.s16 	%rs70, %rs69, 43;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 8;
	shr.u16 	%rs73, %rs72, 2;
	add.s16 	%rs74, %rs73, %rs71;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs68, %rs75;
	cvt.u32.u16 	%r689, %rs76;
	cvt.s32.s8 	%r690, %r689;
	add.s32 	%r691, %r2, %r690;
	mul.wide.s32 	%rd81, %r691, 4;
	add.s64 	%rd82, %rd50, %rd81;
	ld.shared.u32 	%r692, [%rd82];
	add.s32 	%r693, %r184, %r690;
	mul.wide.s32 	%rd83, %r693, 4;
	add.s64 	%rd84, %rd50, %rd83;
	ld.shared.u32 	%r694, [%rd84];
	add.s32 	%r695, %r185, %r690;
	mul.wide.u32 	%rd85, %r695, 4;
	add.s64 	%rd86, %rd50, %rd85;
	ld.shared.u32 	%r696, [%rd86];
	add.s32 	%r697, %r186, %r690;
	mul.wide.u32 	%rd87, %r697, 4;
	add.s64 	%rd88, %rd50, %rd87;
	ld.shared.u32 	%r698, [%rd88];
	add.s32 	%r699, %r187, %r690;
	mul.wide.u32 	%rd89, %r699, 4;
	add.s64 	%rd90, %rd50, %rd89;
	ld.shared.u32 	%r700, [%rd90];
	add.s32 	%r701, %r188, %r690;
	mul.wide.u32 	%rd91, %r701, 4;
	add.s64 	%rd92, %rd50, %rd91;
	ld.shared.u32 	%r702, [%rd92];
	add.s32 	%r703, %r189, %r690;
	mul.wide.u32 	%rd93, %r703, 4;
	add.s64 	%rd94, %rd50, %rd93;
	ld.shared.u32 	%r704, [%rd94];
	add.s32 	%r705, %r190, %r690;
	mul.wide.u32 	%rd95, %r705, 4;
	add.s64 	%rd96, %rd50, %rd95;
	ld.shared.u32 	%r706, [%rd96];
	add.s32 	%r707, %r191, %r690;
	mul.wide.u32 	%rd97, %r707, 4;
	add.s64 	%rd98, %rd50, %rd97;
	ld.shared.u32 	%r708, [%rd98];
	add.s32 	%r709, %r192, %r690;
	mul.wide.u32 	%rd99, %r709, 4;
	add.s64 	%rd100, %rd50, %rd99;
	ld.shared.u32 	%r710, [%rd100];
	add.s32 	%r711, %r193, %r690;
	mul.wide.s32 	%rd101, %r711, 4;
	add.s64 	%rd102, %rd50, %rd101;
	ld.shared.u32 	%r712, [%rd102];
	bar.sync 	0;
	shfl.sync.idx.b32	%r713, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r714, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r715, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r716, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r717, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r718, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r719, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r720, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r721, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r722, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r723, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r724, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r725, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r726, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r727, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r728, %r174, 15, 31, -1;
	add.s32 	%r729, %r713, %r690;
	mul.wide.s32 	%rd103, %r729, 4;
	add.s64 	%rd104, %rd50, %rd103;
	st.shared.u32 	[%rd104], %r692;
	add.s32 	%r730, %r714, %r690;
	mul.wide.s32 	%rd105, %r730, 4;
	add.s64 	%rd106, %rd50, %rd105;
	st.shared.u32 	[%rd106], %r694;
	add.s32 	%r731, %r715, %r690;
	mul.wide.s32 	%rd107, %r731, 4;
	add.s64 	%rd108, %rd50, %rd107;
	st.shared.u32 	[%rd108], %r696;
	add.s32 	%r732, %r716, %r690;
	mul.wide.s32 	%rd109, %r732, 4;
	add.s64 	%rd110, %rd50, %rd109;
	st.shared.u32 	[%rd110], %r698;
	add.s32 	%r733, %r717, %r690;
	mul.wide.s32 	%rd111, %r733, 4;
	add.s64 	%rd112, %rd50, %rd111;
	st.shared.u32 	[%rd112], %r700;
	add.s32 	%r734, %r718, %r690;
	mul.wide.s32 	%rd113, %r734, 4;
	add.s64 	%rd114, %rd50, %rd113;
	st.shared.u32 	[%rd114], %r702;
	add.s32 	%r735, %r719, %r690;
	mul.wide.s32 	%rd115, %r735, 4;
	add.s64 	%rd116, %rd50, %rd115;
	st.shared.u32 	[%rd116], %r704;
	add.s32 	%r736, %r720, %r690;
	mul.wide.s32 	%rd117, %r736, 4;
	add.s64 	%rd118, %rd50, %rd117;
	st.shared.u32 	[%rd118], %r706;
	add.s32 	%r737, %r721, %r690;
	mul.wide.s32 	%rd119, %r737, 4;
	add.s64 	%rd120, %rd50, %rd119;
	st.shared.u32 	[%rd120], %r708;
	add.s32 	%r738, %r722, %r690;
	mul.wide.s32 	%rd121, %r738, 4;
	add.s64 	%rd122, %rd50, %rd121;
	st.shared.u32 	[%rd122], %r710;
	selp.b32 	%r739, 0, %r712, %p230;
	add.s32 	%r740, %r723, %r690;
	mul.wide.s32 	%rd123, %r740, 4;
	add.s64 	%rd124, %rd50, %rd123;
	st.shared.u32 	[%rd124], %r739;
	add.s32 	%r741, %r724, %r690;
	mul.wide.s32 	%rd125, %r741, 4;
	add.s64 	%rd126, %rd50, %rd125;
	st.shared.u32 	[%rd126], %r479;
	add.s32 	%r742, %r725, %r690;
	mul.wide.s32 	%rd127, %r742, 4;
	add.s64 	%rd128, %rd50, %rd127;
	st.shared.u32 	[%rd128], %r479;
	add.s32 	%r743, %r726, %r690;
	mul.wide.s32 	%rd129, %r743, 4;
	add.s64 	%rd130, %rd50, %rd129;
	st.shared.u32 	[%rd130], %r479;
	add.s32 	%r744, %r727, %r690;
	mul.wide.s32 	%rd131, %r744, 4;
	add.s64 	%rd132, %rd50, %rd131;
	st.shared.u32 	[%rd132], %r479;
	add.s32 	%r745, %r728, %r690;
	mul.wide.s32 	%rd133, %r745, 4;
	add.s64 	%rd134, %rd50, %rd133;
	st.shared.u32 	[%rd134], %r479;
	bar.sync 	0;
	mov.u32 	%r92, %r479;
	mov.u32 	%r93, %r479;
	mov.u32 	%r94, %r479;
	mov.u32 	%r95, %r479;
	mov.u32 	%r96, %r479;
	mov.u32 	%r97, %r479;
	mov.u32 	%r98, %r479;
	mov.u32 	%r99, %r479;
	mov.u32 	%r100, %r479;
	mov.u32 	%r101, %r479;
	mov.u32 	%r102, %r479;
	mov.u32 	%r103, %r479;
	mov.u32 	%r104, %r479;
	mov.u32 	%r105, %r479;
	mov.u32 	%r106, %r479;
	mov.u32 	%r107, %r479;
	@%p229 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %oksrem2571
                                        //   in Loop: Header=BB0_134 Depth=1
	add.s32 	%r91, %r655, %r194;
	ld.shared.u32 	%r92, [%rd12];
	ld.shared.u32 	%r93, [%rd13];
	ld.shared.u32 	%r94, [%rd14+12];
	ld.shared.u32 	%r95, [%rd15+12];
	ld.shared.u32 	%r96, [%rd14+24];
	ld.shared.u32 	%r97, [%rd15+24];
	ld.shared.u32 	%r98, [%rd14+36];
	ld.shared.u32 	%r99, [%rd15+36];
	add.s32 	%r746, %r91, 12;
	mul.hi.u32 	%r747, %r746, -1431655765;
	shr.u32 	%r748, %r747, 4;
	mul.lo.s32 	%r749, %r748, 24;
	sub.s32 	%r750, %r746, %r749;
	add.s32 	%r751, %r195, %r750;
	mul.wide.u32 	%rd135, %r751, 4;
	add.s64 	%rd137, %rd50, %rd135;
	ld.shared.u32 	%r100, [%rd137];
	add.s32 	%r752, %r196, %r750;
	mul.wide.u32 	%rd138, %r752, 4;
	add.s64 	%rd139, %rd50, %rd138;
	ld.shared.u32 	%r101, [%rd139];
	cvt.u16.u32 	%rs77, %r91;
	add.s16 	%rs78, %rs77, 15;
	cvt.s16.s8 	%rs79, %rs78;
	mul.lo.s16 	%rs80, %rs79, 43;
	shr.u16 	%rs81, %rs80, 15;
	shr.s16 	%rs82, %rs80, 10;
	add.s16 	%rs83, %rs82, %rs81;
	mul.lo.s16 	%rs84, %rs83, 24;
	sub.s16 	%rs85, %rs78, %rs84;
	cvt.u32.u16 	%r753, %rs85;
	cvt.s32.s8 	%r754, %r753;
	add.s32 	%r755, %r195, %r754;
	mul.wide.s32 	%rd140, %r755, 4;
	add.s64 	%rd141, %rd50, %rd140;
	ld.shared.u32 	%r102, [%rd141];
	add.s32 	%r756, %r196, %r754;
	mul.wide.u32 	%rd142, %r756, 4;
	add.s64 	%rd143, %rd50, %rd142;
	ld.shared.u32 	%r103, [%rd143];
	add.s16 	%rs86, %rs77, 18;
	cvt.s16.s8 	%rs87, %rs86;
	mul.lo.s16 	%rs88, %rs87, 43;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 10;
	add.s16 	%rs91, %rs90, %rs89;
	mul.lo.s16 	%rs92, %rs91, 24;
	sub.s16 	%rs93, %rs86, %rs92;
	cvt.u32.u16 	%r757, %rs93;
	cvt.s32.s8 	%r758, %r757;
	add.s32 	%r759, %r195, %r758;
	mul.wide.s32 	%rd144, %r759, 4;
	add.s64 	%rd145, %rd50, %rd144;
	ld.shared.u32 	%r104, [%rd145];
	add.s32 	%r760, %r196, %r758;
	mul.wide.u32 	%rd146, %r760, 4;
	add.s64 	%rd147, %rd50, %rd146;
	ld.shared.u32 	%r105, [%rd147];
	add.s16 	%rs94, %rs77, 21;
	cvt.s16.s8 	%rs95, %rs94;
	mul.lo.s16 	%rs96, %rs95, 43;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 10;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs94, %rs100;
	cvt.u32.u16 	%r761, %rs101;
	cvt.s32.s8 	%r762, %r761;
	add.s32 	%r763, %r195, %r762;
	mul.wide.s32 	%rd148, %r763, 4;
	add.s64 	%rd149, %rd50, %rd148;
	ld.shared.u32 	%r106, [%rd149];
	add.s32 	%r764, %r196, %r762;
	mul.wide.u32 	%rd150, %r764, 4;
	add.s64 	%rd151, %rd50, %rd150;
	ld.shared.u32 	%r107, [%rd151];
$L__BB0_135:                            // %L8575
                                        //   in Loop: Header=BB0_134 Depth=1
	bar.sync 	0;
	mov.u32 	%r111, %r479;
	bra.uni 	$L__BB0_136;
$L__BB0_143:                            // %L19558
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
$L__BB0_144:                            // %L19559
                                        //   in Loop: Header=BB0_136 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	setp.ne.s32 	%p243, %r111, 24;
	@%p243 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_145;
$L__BB0_136:                            // %L8593
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r111, 0;
	selp.b32 	%r1158, %r92, 0, %p232;
	setp.eq.s32 	%p233, %r111, 6;
	selp.b32 	%r1159, %r96, %r1158, %p233;
	setp.eq.s32 	%p234, %r111, 12;
	selp.b32 	%r1160, %r100, %r1159, %p234;
	setp.eq.s32 	%p235, %r111, 18;
	selp.b32 	%r1161, %r104, %r1160, %p235;
	selp.b32 	%r1162, %r93, 0, %p232;
	selp.b32 	%r1163, %r97, %r1162, %p233;
	selp.b32 	%r1164, %r101, %r1163, %p234;
	selp.b32 	%r1165, %r105, %r1164, %p235;
	selp.b32 	%r1166, %r94, 0, %p232;
	selp.b32 	%r1167, %r98, %r1166, %p233;
	selp.b32 	%r1168, %r102, %r1167, %p234;
	selp.b32 	%r1169, %r106, %r1168, %p235;
	selp.b32 	%r1170, %r95, 0, %p232;
	selp.b32 	%r1171, %r99, %r1170, %p233;
	selp.b32 	%r1172, %r103, %r1171, %p234;
	selp.b32 	%r1173, %r107, %r1172, %p235;
	mov.u16 	%rs139, 25600;
	// begin inline asm
	mov.b32 %r771, {%rs139, %rs139};
	// end inline asm
	mov.u16 	%rs141, 21504;
	// begin inline asm
	mov.b32 %r782, {%rs141, %rs141};
	// end inline asm
	xor.b32  	%r770, %r1161, -2004318072;
	mov.u32 	%r907, 983055;
	// begin inline asm
	lop3.b32 %r768, %r907, %r770, %r771, 202;
	// end inline asm
	mov.u16 	%rs145, 18432;
	// begin inline asm
	mov.b32 %r772, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r773, %r771, %r772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r776, %r768, %r773;
	// end inline asm
	mov.u32 	%r918, 15728880;
	// begin inline asm
	lop3.b32 %r779, %r918, %r770, %r782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r784, %r782, %r783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r787, %r779, %r784;
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r828, {%rs141, %rs141};
	// end inline asm
	xor.b32  	%r816, %r1165, -2004318072;
	// begin inline asm
	lop3.b32 %r814, %r907, %r816, %r817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r818, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r819, %r817, %r818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r822, %r814, %r819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r825, %r918, %r816, %r828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r830, %r828, %r829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r833, %r825, %r830;
	// end inline asm
	// begin inline asm
	mov.b32 %r863, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r874, {%rs141, %rs141};
	// end inline asm
	xor.b32  	%r862, %r1169, -2004318072;
	// begin inline asm
	lop3.b32 %r860, %r907, %r862, %r863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r864, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r865, %r863, %r864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r868, %r860, %r865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r871, %r918, %r862, %r874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r875, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r876, %r874, %r875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r879, %r871, %r876;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs141, %rs141};
	// end inline asm
	xor.b32  	%r908, %r1173, -2004318072;
	// begin inline asm
	lop3.b32 %r906, %r907, %r908, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r911, %r909, %r910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r914, %r906, %r911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r917, %r918, %r908, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r922, %r920, %r921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r925, %r917, %r922;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r776;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r950, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r822;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r953, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r787;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r956, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r833;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r959, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r868;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r962, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r914;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r965, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r879;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r968, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r925;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r971, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r974, %r975}, {%r273, %r276}, {%r950}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r981, %r982}, {%r273, %r276}, {%r953}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r988, %r989}, {%r273, %r276}, {%r956}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r995, %r996}, {%r273, %r276}, {%r959}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1002, %r1003}, {%r273, %r276}, {%r962}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1009, %r1010}, {%r273, %r276}, {%r965}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1016, %r1017}, {%r273, %r276}, {%r968}, {%r479, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1023, %r1024}, {%r273, %r276}, {%r971}, {%r479, %r479};
	// end inline asm
	@%p1 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_137;
$L__BB0_184:                            // %pass3911
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1030, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1032, %r1030, %r975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1035, %r325, %r974, %r1032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1039, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1041, %r1039, %r982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1044, %r325, %r981, %r1041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1048, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1050, %r1048, %r989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1053, %r325, %r988, %r1050;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1057, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1059, %r1057, %r996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1062, %r325, %r995, %r1059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1066, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1068, %r1066, %r1003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r325, %r1002, %r1068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1077, %r1075, %r1010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1080, %r325, %r1009, %r1077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1084, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1086, %r1084, %r1017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r325, %r1016, %r1086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1095, %r1093, %r1024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r325, %r1023, %r1095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1102, %r328, %r974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r325, %r975, %r1102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r328, %r981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r325, %r982, %r1109;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1116, %r328, %r988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r325, %r989, %r1116;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r328, %r995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r325, %r996, %r1123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r328, %r1002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r325, %r1003, %r1130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r328, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r325, %r1010, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r328, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r325, %r1017, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r328, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r325, %r1024, %r1151;
	// end inline asm
	mov.u32 	%r1323, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1247, %r1248}, {%r369, %r372}, {%r1035, %r1105}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1255, %r1256}, {%r369, %r372}, {%r1044, %r1112}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1263, %r1264}, {%r369, %r372}, {%r1053, %r1119}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1271, %r1272}, {%r369, %r372}, {%r1062, %r1126}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1280}, {%r369, %r372}, {%r1071, %r1133}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1287, %r1288}, {%r369, %r372}, {%r1080, %r1140}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1295, %r1296}, {%r369, %r372}, {%r1089, %r1147}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1303, %r1304}, {%r369, %r372}, {%r1098, %r1154}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1246, %r1247, %r1248, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1250, %r1247, %r1248, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1254, %r1255, %r1256, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1258, %r1255, %r1256, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1262, %r1263, %r1264, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1263, %r1264, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1271, %r1272, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1271, %r1272, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1279, %r1280, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1279, %r1280, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1287, %r1288, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1287, %r1288, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1295, %r1296, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1295, %r1296, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1303, %r1304, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1303, %r1304, %r651;
	// end inline asm
	add.s32 	%r1356, %r86, %r111;
	cvt.u16.u32 	%rs150, %r1356;
	cvt.s16.s8 	%rs151, %rs150;
	mul.lo.s16 	%rs152, %rs151, 43;
	shr.u16 	%rs153, %rs152, 15;
	shr.u16 	%rs154, %rs152, 8;
	add.s16 	%rs155, %rs154, %rs153;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs150, %rs156;
	cvt.s16.s8 	%rs158, %rs157;
	mul.wide.s16 	%r1357, %rs158, 16;
	add.s32 	%r1358, %r201, %r1357;
	mul.wide.s32 	%rd154, %r1358, 4;
	add.s64 	%rd156, %rd50, %rd154;
	st.shared.u32 	[%rd156], %r1246;
	add.s32 	%r1359, %r202, %r1357;
	mul.wide.u32 	%rd157, %r1359, 4;
	add.s64 	%rd158, %rd50, %rd157;
	st.shared.u32 	[%rd158], %r1250;
	add.s32 	%r1360, %r204, %r1357;
	mul.wide.s32 	%rd159, %r1360, 4;
	add.s64 	%rd160, %rd50, %rd159;
	st.shared.u32 	[%rd160], %r1254;
	add.s32 	%r1361, %r205, %r1357;
	mul.wide.u32 	%rd161, %r1361, 4;
	add.s64 	%rd162, %rd50, %rd161;
	st.shared.u32 	[%rd162], %r1258;
	cvt.s64.s32 	%rd163, %r1357;
	cvt.u64.u32 	%rd164, %r200;
	cvt.u64.u32 	%rd165, %r199;
	cvt.u64.u32 	%rd166, %r198;
	cvt.u64.u32 	%rd167, %r197;
	add.s64 	%rd168, %rd167, %rd166;
	add.s64 	%rd169, %rd168, %rd165;
	add.s64 	%rd16, %rd169, %rd164;
	add.s64 	%rd170, %rd16, %rd163;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd50, %rd171;
	st.shared.u32 	[%rd172+32], %r1262;
	add.s32 	%r1362, %r206, %r1357;
	mul.wide.u32 	%rd173, %r1362, 4;
	add.s64 	%rd174, %rd50, %rd173;
	st.shared.u32 	[%rd174], %r1266;
	cvt.u64.u32 	%rd175, %r203;
	add.s64 	%rd17, %rd169, %rd175;
	add.s64 	%rd176, %rd17, %rd163;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd50, %rd177;
	st.shared.u32 	[%rd178+32], %r1270;
	add.s32 	%r1363, %r207, %r1357;
	mul.wide.u32 	%rd179, %r1363, 4;
	add.s64 	%rd180, %rd50, %rd179;
	st.shared.u32 	[%rd180], %r1274;
	add.s16 	%rs159, %rs150, 3;
	cvt.s16.s8 	%rs160, %rs159;
	mul.lo.s16 	%rs161, %rs160, 43;
	shr.u16 	%rs162, %rs161, 15;
	shr.u16 	%rs163, %rs161, 8;
	add.s16 	%rs164, %rs163, %rs162;
	mul.lo.s16 	%rs165, %rs164, 6;
	sub.s16 	%rs166, %rs159, %rs165;
	cvt.s16.s8 	%rs167, %rs166;
	mul.wide.s16 	%r1364, %rs167, 16;
	add.s32 	%r1365, %r201, %r1364;
	mul.wide.s32 	%rd181, %r1365, 4;
	add.s64 	%rd182, %rd50, %rd181;
	st.shared.u32 	[%rd182], %r1278;
	add.s32 	%r1366, %r202, %r1364;
	mul.wide.u32 	%rd183, %r1366, 4;
	add.s64 	%rd184, %rd50, %rd183;
	st.shared.u32 	[%rd184], %r1282;
	add.s32 	%r1367, %r204, %r1364;
	mul.wide.s32 	%rd185, %r1367, 4;
	add.s64 	%rd186, %rd50, %rd185;
	st.shared.u32 	[%rd186], %r1286;
	add.s32 	%r1368, %r205, %r1364;
	mul.wide.u32 	%rd187, %r1368, 4;
	add.s64 	%rd188, %rd50, %rd187;
	st.shared.u32 	[%rd188], %r1290;
	cvt.s64.s32 	%rd189, %r1364;
	add.s64 	%rd190, %rd16, %rd189;
	shl.b64 	%rd191, %rd190, 2;
	add.s64 	%rd192, %rd50, %rd191;
	st.shared.u32 	[%rd192+32], %r1294;
	add.s32 	%r1369, %r206, %r1364;
	mul.wide.u32 	%rd193, %r1369, 4;
	add.s64 	%rd194, %rd50, %rd193;
	st.shared.u32 	[%rd194], %r1298;
	add.s64 	%rd195, %rd17, %rd189;
	shl.b64 	%rd196, %rd195, 2;
	add.s64 	%rd197, %rd50, %rd196;
	st.shared.u32 	[%rd197+32], %r1302;
	add.s32 	%r1370, %r207, %r1364;
	mul.wide.u32 	%rd198, %r1370, 4;
	add.s64 	%rd199, %rd50, %rd198;
	st.shared.u32 	[%rd199], %r1306;
	bar.sync 	0;
	add.s32 	%r230, %r87, %r111;
	cvt.u16.u32 	%rs168, %r230;
	cvt.s16.s8 	%rs169, %rs168;
	mul.lo.s16 	%rs170, %rs169, 43;
	shr.u16 	%rs171, %rs170, 15;
	shr.u16 	%rs172, %rs170, 8;
	add.s16 	%rs173, %rs172, %rs171;
	mul.lo.s16 	%rs174, %rs173, 6;
	sub.s16 	%rs175, %rs168, %rs174;
	cvt.s16.s8 	%rs176, %rs175;
	mul.wide.s16 	%r1371, %rs176, 16;
	add.s32 	%r1372, %r208, %r1371;
	mul.wide.s32 	%rd200, %r1372, 4;
	add.s64 	%rd201, %rd50, %rd200;
	ld.shared.u32 	%r1314, [%rd201];
	add.s32 	%r1373, %r209, %r1371;
	mul.wide.s32 	%rd202, %r1373, 4;
	add.s64 	%rd203, %rd50, %rd202;
	ld.shared.u32 	%r1321, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1310, %r1311}, {%r381, %r384}, {%r1314}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r381, %r384}, {%r1321}, {%r1323, %r1323};
	// end inline asm
	@%p236 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_185;
$L__BB0_187:                            // %pass6551
                                        //   in Loop: Header=BB0_136 Depth=2
	// begin inline asm
	neg.f16x2 %r1324, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1326, %r1324, %r1311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1329, %r419, %r1310, %r1326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1333, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1335, %r1333, %r1318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r419, %r1317, %r1335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1342, %r422, %r1310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1345, %r419, %r1311, %r1342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1349, %r422, %r1317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r419, %r1318, %r1349;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1396}, {%r465, %r468}, {%r1329, %r1345}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1400, %r1404}, {%r465, %r468}, {%r1338, %r1352}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r1393, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1396, %r1396, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r1400, %r1400, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r1404, %r1404, %r1399;
	// end inline asm
	mov.u32 	%r1491, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1491, %r1403, %r110;
	// end inline asm
	add.s32 	%r1494, %r230, 1;
	mul.hi.u32 	%r1495, %r1494, -1431655765;
	shr.u32 	%r1496, %r1495, 2;
	mul.lo.s32 	%r1497, %r1496, 6;
	sub.s32 	%r1498, %r1494, %r1497;
	shl.b32 	%r1499, %r1498, 4;
	add.s32 	%r1500, %r208, %r1499;
	mul.wide.u32 	%rd206, %r1500, 4;
	add.s64 	%rd208, %rd50, %rd206;
	ld.shared.u32 	%r1415, [%rd208];
	add.s32 	%r1501, %r209, %r1499;
	mul.wide.u32 	%rd209, %r1501, 4;
	add.s64 	%rd210, %rd50, %rd209;
	ld.shared.u32 	%r1422, [%rd210];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1432, %r1429}, {%r381, %r384}, {%r1415}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1441, %r1438}, {%r381, %r384}, {%r1422}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r1425, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r419, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r1434, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r419, %r1441, %r1436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r422, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r419, %r1429, %r1443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r422, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r419, %r1438, %r1450;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1476, %r1479}, {%r465, %r468}, {%r1430, %r1446}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1483, %r1487}, {%r465, %r468}, {%r1439, %r1453}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r1476, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r1479, %r1479, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r1483, %r1483, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r1487, %r1487, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r1491, %r1486, %r1407;
	// end inline asm
	add.s32 	%r2994, %r108, 2;
	setp.eq.s32 	%p237, %r2994, 40;
	@%p237 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_188;
$L__BB0_138:                            // %L15469
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p238, %r260, 8;
	@%p238 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_139;
$L__BB0_186:                            // %pass6986
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1502, %r109, 192, %r210;
	mul.wide.u32 	%rd211, %r1502, 4;
	add.s64 	%rd6, %rd4, %rd211;
	st.global.u32 	[%rd6], %r2996;
$L__BB0_139:                            // %L15668
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r2994, 0;
	mov.u32 	%r2996, %r2994;
$L__BB0_188:                            // %oksrem7178
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs178, %rs168, 2;
	cvt.s16.s8 	%rs179, %rs178;
	mul.lo.s16 	%rs180, %rs179, 43;
	shr.u16 	%rs181, %rs180, 15;
	shr.u16 	%rs182, %rs180, 8;
	add.s16 	%rs183, %rs182, %rs181;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs178, %rs184;
	cvt.s16.s8 	%rs186, %rs185;
	mul.wide.s16 	%r1670, %rs186, 16;
	add.s32 	%r1671, %r208, %r1670;
	mul.wide.s32 	%rd212, %r1671, 4;
	add.s64 	%rd214, %rd50, %rd212;
	ld.shared.u32 	%r1508, [%rd214];
	add.s32 	%r1672, %r209, %r1670;
	mul.wide.s32 	%rd215, %r1672, 4;
	add.s64 	%rd216, %rd50, %rd215;
	ld.shared.u32 	%r1515, [%rd216];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1525, %r1522}, {%r381, %r384}, {%r1508}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1534, %r1531}, {%r381, %r384}, {%r1515}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1518, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r1518, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r419, %r1525, %r1520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1527, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r1527, %r1531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r419, %r1534, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r422, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r419, %r1522, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r422, %r1534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r419, %r1531, %r1543;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1569, %r1572}, {%r465, %r468}, {%r1523, %r1539}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1576, %r1580}, {%r465, %r468}, {%r1532, %r1546}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1568, %r1569, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r1572, %r1572, %r1568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r1576, %r1576, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r1580, %r1580, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r1491, %r1579, %r2996;
	// end inline asm
	add.s16 	%rs187, %rs168, 3;
	cvt.s16.s8 	%rs188, %rs187;
	mul.lo.s16 	%rs189, %rs188, 43;
	shr.u16 	%rs190, %rs189, 15;
	shr.u16 	%rs191, %rs189, 8;
	add.s16 	%rs192, %rs191, %rs190;
	mul.lo.s16 	%rs193, %rs192, 6;
	sub.s16 	%rs194, %rs187, %rs193;
	cvt.s16.s8 	%rs195, %rs194;
	mul.wide.s16 	%r1673, %rs195, 16;
	add.s32 	%r1674, %r208, %r1673;
	mul.wide.s32 	%rd217, %r1674, 4;
	add.s64 	%rd218, %rd50, %rd217;
	ld.shared.u32 	%r1591, [%rd218];
	add.s32 	%r1675, %r209, %r1673;
	mul.wide.s32 	%rd219, %r1675, 4;
	add.s64 	%rd220, %rd50, %rd219;
	ld.shared.u32 	%r1598, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1608, %r1605}, {%r381, %r384}, {%r1591}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1617, %r1614}, {%r381, %r384}, {%r1598}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1601, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r1601, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r419, %r1608, %r1603;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1610, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1612, %r1610, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r419, %r1617, %r1612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1619, %r422, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r419, %r1605, %r1619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1626, %r422, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r419, %r1614, %r1626;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1652, %r1655}, {%r465, %r468}, {%r1606, %r1622}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1659, %r1663}, {%r465, %r468}, {%r1615, %r1629}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1652, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1663, %r1663, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2999, %r1491, %r1662, %r1583;
	// end inline asm
	add.s32 	%r2997, %r2994, 2;
	setp.eq.s32 	%p239, %r2997, 40;
	@%p239 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_189;
$L__BB0_140:                            // %L17414
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p240, %r260, 8;
	@%p240 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_141;
$L__BB0_194:                            // %pass7839
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1676, %r109, 192, %r210;
	mul.wide.u32 	%rd221, %r1676, 4;
	add.s64 	%rd7, %rd4, %rd221;
	st.global.u32 	[%rd7], %r2999;
$L__BB0_141:                            // %L17613
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r2997, 0;
	mov.u32 	%r2999, %r2997;
$L__BB0_189:                            // %oksrem8031
                                        //   in Loop: Header=BB0_136 Depth=2
	add.s16 	%rs197, %rs168, 4;
	cvt.s16.s8 	%rs198, %rs197;
	mul.lo.s16 	%rs199, %rs198, 43;
	shr.u16 	%rs200, %rs199, 15;
	shr.u16 	%rs201, %rs199, 8;
	add.s16 	%rs202, %rs201, %rs200;
	mul.lo.s16 	%rs203, %rs202, 6;
	sub.s16 	%rs204, %rs197, %rs203;
	cvt.s16.s8 	%rs205, %rs204;
	mul.wide.s16 	%r1844, %rs205, 16;
	add.s32 	%r1845, %r208, %r1844;
	mul.wide.s32 	%rd222, %r1845, 4;
	add.s64 	%rd224, %rd50, %rd222;
	ld.shared.u32 	%r1682, [%rd224];
	add.s32 	%r1846, %r209, %r1844;
	mul.wide.s32 	%rd225, %r1846, 4;
	add.s64 	%rd226, %rd50, %rd225;
	ld.shared.u32 	%r1689, [%rd226];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1699, %r1696}, {%r381, %r384}, {%r1682}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1708, %r1705}, {%r381, %r384}, {%r1689}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r419, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r419, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1710, %r422, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r419, %r1696, %r1710;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r422, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r419, %r1705, %r1717;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1743, %r1746}, {%r465, %r468}, {%r1697, %r1713}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1750, %r1754}, {%r465, %r468}, {%r1706, %r1720}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1743, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r1746, %r1746, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r1750, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r1754, %r1754, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r1491, %r1753, %r2999;
	// end inline asm
	add.s16 	%rs206, %rs168, 5;
	cvt.s16.s8 	%rs207, %rs206;
	mul.lo.s16 	%rs208, %rs207, 43;
	shr.u16 	%rs209, %rs208, 15;
	shr.u16 	%rs210, %rs208, 8;
	add.s16 	%rs211, %rs210, %rs209;
	mul.lo.s16 	%rs212, %rs211, 6;
	sub.s16 	%rs213, %rs206, %rs212;
	cvt.s16.s8 	%rs214, %rs213;
	mul.wide.s16 	%r1847, %rs214, 16;
	add.s32 	%r1848, %r208, %r1847;
	mul.wide.s32 	%rd227, %r1848, 4;
	add.s64 	%rd228, %rd50, %rd227;
	ld.shared.u32 	%r1765, [%rd228];
	add.s32 	%r1849, %r209, %r1847;
	mul.wide.s32 	%rd229, %r1849, 4;
	add.s64 	%rd230, %rd50, %rd229;
	ld.shared.u32 	%r1772, [%rd230];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1782, %r1779}, {%r381, %r384}, {%r1765}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1791, %r1788}, {%r381, %r384}, {%r1772}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1775, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r1775, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r419, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1784, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r1784, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r419, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r422, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r419, %r1779, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r422, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r419, %r1788, %r1800;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1826, %r1829}, {%r465, %r468}, {%r1780, %r1796}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1833, %r1837}, {%r465, %r468}, {%r1789, %r1803}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1826, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1833, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r1837, %r1837, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1491, %r1836, %r1757;
	// end inline asm
	add.s32 	%r108, %r2997, 2;
	setp.eq.s32 	%p241, %r108, 40;
	@%p241 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_144;
$L__BB0_142:                            // %L19359
                                        //   in Loop: Header=BB0_136 Depth=2
	setp.lt.u32 	%p242, %r260, 8;
	@%p242 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass8692
                                        //   in Loop: Header=BB0_136 Depth=2
	mad.lo.s32 	%r1850, %r109, 192, %r210;
	mul.wide.u32 	%rd231, %r1850, 4;
	add.s64 	%rd8, %rd4, %rd231;
	st.global.u32 	[%rd8], %r110;
	bra.uni 	$L__BB0_143;
$L__BB0_145:                            // %L19580.preheader
                                        //   in Loop: Header=BB0_134 Depth=1
	mov.u16 	%rs313, %rs1;
	mov.u32 	%r2985, %r1323;
	bra.uni 	$L__BB0_146;
$L__BB0_154:                            // %L30545
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2734;
	mov.u32 	%r110, %r2734;
$L__BB0_155:                            // %L30546
                                        //   in Loop: Header=BB0_146 Depth=2
	bar.sync 	0;
	add.s32 	%r2985, %r2985, 6;
	add.s16 	%rs313, %rs313, 6;
	setp.ne.s32 	%p254, %r2985, 24;
	@%p254 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_156;
$L__BB0_146:                            // %L19580
                                        //   Parent Loop BB0_134 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p244, %r2985, 0;
	selp.b32 	%r2547, %r92, 0, %p244;
	setp.eq.s32 	%p245, %r2985, 6;
	selp.b32 	%r2548, %r96, %r2547, %p245;
	setp.eq.s32 	%p246, %r2985, 12;
	selp.b32 	%r2549, %r100, %r2548, %p246;
	setp.eq.s32 	%p247, %r2985, 18;
	selp.b32 	%r2550, %r104, %r2549, %p247;
	selp.b32 	%r2551, %r93, 0, %p244;
	selp.b32 	%r2552, %r97, %r2551, %p245;
	selp.b32 	%r2553, %r101, %r2552, %p246;
	selp.b32 	%r2554, %r105, %r2553, %p247;
	selp.b32 	%r2555, %r94, 0, %p244;
	selp.b32 	%r2556, %r98, %r2555, %p245;
	selp.b32 	%r2557, %r102, %r2556, %p246;
	selp.b32 	%r2558, %r106, %r2557, %p247;
	selp.b32 	%r2559, %r95, 0, %p244;
	selp.b32 	%r2560, %r99, %r2559, %p245;
	selp.b32 	%r2561, %r103, %r2560, %p246;
	selp.b32 	%r2562, %r107, %r2561, %p247;
	// begin inline asm
	mov.b32 %r1880, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r1891, {%rs141, %rs141};
	// end inline asm
	shr.u32 	%r2563, %r2550, 8;
	xor.b32  	%r1890, %r2563, 8947848;
	// begin inline asm
	lop3.b32 %r1877, %r907, %r1890, %r1880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1881, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1882, %r1880, %r1881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1885, %r1877, %r1882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1888, %r918, %r1890, %r1891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1892, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1893, %r1891, %r1892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1896, %r1888, %r1893;
	// end inline asm
	// begin inline asm
	mov.b32 %r1926, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r1937, {%rs141, %rs141};
	// end inline asm
	shr.u32 	%r2564, %r2554, 8;
	xor.b32  	%r1936, %r2564, 8947848;
	// begin inline asm
	lop3.b32 %r1923, %r907, %r1936, %r1926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1927, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1928, %r1926, %r1927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1931, %r1923, %r1928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1934, %r918, %r1936, %r1937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1939, %r1937, %r1938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1942, %r1934, %r1939;
	// end inline asm
	// begin inline asm
	mov.b32 %r1972, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs141, %rs141};
	// end inline asm
	shr.u32 	%r2565, %r2558, 8;
	xor.b32  	%r1982, %r2565, 8947848;
	// begin inline asm
	lop3.b32 %r1969, %r907, %r1982, %r1972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1974, %r1972, %r1973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1977, %r1969, %r1974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1980, %r918, %r1982, %r1983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1985, %r1983, %r1984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1988, %r1980, %r1985;
	// end inline asm
	// begin inline asm
	mov.b32 %r2018, {%rs139, %rs139};
	// end inline asm
	// begin inline asm
	mov.b32 %r2029, {%rs141, %rs141};
	// end inline asm
	shr.u32 	%r2566, %r2562, 8;
	xor.b32  	%r2028, %r2566, 8947848;
	// begin inline asm
	lop3.b32 %r2015, %r907, %r2028, %r2018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2020, %r2018, %r2019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2023, %r2015, %r2020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2026, %r918, %r2028, %r2029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs145, %rs145};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2031, %r2029, %r2030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2034, %r2026, %r2031;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1885;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2037, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2040, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1896;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2043, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1942;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2046, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2049, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2052, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1988;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2055, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2034;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2058, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2124, %r2121}, {%r273, %r276}, {%r2037}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2133, %r2130}, {%r273, %r276}, {%r2040}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2142, %r2139}, {%r273, %r276}, {%r2043}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2151, %r2148}, {%r273, %r276}, {%r2046}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2160, %r2157}, {%r273, %r276}, {%r2049}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2169, %r2166}, {%r273, %r276}, {%r2052}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2178, %r2175}, {%r273, %r276}, {%r2055}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2187, %r2184}, {%r273, %r276}, {%r2058}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2117, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r2117, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2122, %r325, %r2124, %r2119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2126, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r2126, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r325, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2135, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r2135, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r325, %r2142, %r2137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2144, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r2144, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r325, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2153, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r2153, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r325, %r2160, %r2155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2162, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r2162, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r325, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2171, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2173, %r2171, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r325, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2180, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r2180, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r325, %r2187, %r2182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2189, %r328, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2192, %r325, %r2121, %r2189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r328, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r325, %r2130, %r2196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r328, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r325, %r2139, %r2203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r328, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r325, %r2148, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r328, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r325, %r2157, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r328, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r325, %r2166, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r328, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r325, %r2175, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r328, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r325, %r2184, %r2238;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2318, %r2319}, {%r369, %r372}, {%r2122, %r2192}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2326, %r2327}, {%r369, %r372}, {%r2131, %r2199}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2334, %r2335}, {%r369, %r372}, {%r2140, %r2206}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2342, %r2343}, {%r369, %r372}, {%r2149, %r2213}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2350, %r2351}, {%r369, %r372}, {%r2158, %r2220}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2358, %r2359}, {%r369, %r372}, {%r2167, %r2227}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2366, %r2367}, {%r369, %r372}, {%r2176, %r2234}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2374, %r2375}, {%r369, %r372}, {%r2185, %r2241}, {%r1323, %r1323}, %r211, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2317, %r2318, %r2319, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2321, %r2318, %r2319, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2325, %r2326, %r2327, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2329, %r2326, %r2327, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2333, %r2334, %r2335, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2337, %r2334, %r2335, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2341, %r2342, %r2343, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2345, %r2342, %r2343, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2349, %r2350, %r2351, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2353, %r2350, %r2351, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2357, %r2358, %r2359, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2361, %r2358, %r2359, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2365, %r2366, %r2367, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2369, %r2366, %r2367, %r651;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2373, %r2374, %r2375, %r647;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2374, %r2375, %r651;
	// end inline asm
	add.s16 	%rs263, %rs7, %rs313;
	add.s16 	%rs264, %rs263, -29;
	mul.hi.s16 	%rs265, %rs264, 10923;
	shr.u16 	%rs266, %rs265, 15;
	add.s16 	%rs267, %rs265, %rs266;
	mul.lo.s16 	%rs268, %rs267, 6;
	sub.s16 	%rs269, %rs264, %rs268;
	mul.wide.s16 	%r2567, %rs269, 16;
	add.s32 	%r2568, %r201, %r2567;
	mul.wide.s32 	%rd232, %r2568, 4;
	add.s64 	%rd234, %rd50, %rd232;
	st.shared.u32 	[%rd234], %r2317;
	add.s32 	%r2569, %r202, %r2567;
	mul.wide.u32 	%rd235, %r2569, 4;
	add.s64 	%rd236, %rd50, %rd235;
	st.shared.u32 	[%rd236], %r2321;
	add.s32 	%r2570, %r204, %r2567;
	mul.wide.s32 	%rd237, %r2570, 4;
	add.s64 	%rd238, %rd50, %rd237;
	st.shared.u32 	[%rd238], %r2325;
	add.s32 	%r2571, %r205, %r2567;
	mul.wide.u32 	%rd239, %r2571, 4;
	add.s64 	%rd240, %rd50, %rd239;
	st.shared.u32 	[%rd240], %r2329;
	cvt.s64.s32 	%rd241, %r2567;
	add.s64 	%rd242, %rd16, %rd241;
	shl.b64 	%rd243, %rd242, 2;
	add.s64 	%rd244, %rd50, %rd243;
	st.shared.u32 	[%rd244+32], %r2333;
	add.s32 	%r2572, %r206, %r2567;
	mul.wide.u32 	%rd245, %r2572, 4;
	add.s64 	%rd246, %rd50, %rd245;
	st.shared.u32 	[%rd246], %r2337;
	add.s64 	%rd247, %rd17, %rd241;
	shl.b64 	%rd248, %rd247, 2;
	add.s64 	%rd249, %rd50, %rd248;
	st.shared.u32 	[%rd249+32], %r2341;
	add.s32 	%r2573, %r207, %r2567;
	mul.wide.u32 	%rd250, %r2573, 4;
	add.s64 	%rd251, %rd50, %rd250;
	st.shared.u32 	[%rd251], %r2345;
	add.s16 	%rs270, %rs6, %rs313;
	add.s16 	%rs271, %rs270, -2;
	mul.hi.s16 	%rs272, %rs271, 10923;
	shr.u16 	%rs273, %rs272, 15;
	add.s16 	%rs274, %rs272, %rs273;
	mul.lo.s16 	%rs275, %rs274, 6;
	sub.s16 	%rs276, %rs271, %rs275;
	mul.wide.s16 	%r2574, %rs276, 16;
	add.s32 	%r2575, %r201, %r2574;
	mul.wide.s32 	%rd252, %r2575, 4;
	add.s64 	%rd253, %rd50, %rd252;
	st.shared.u32 	[%rd253], %r2349;
	add.s32 	%r2576, %r202, %r2574;
	mul.wide.u32 	%rd254, %r2576, 4;
	add.s64 	%rd255, %rd50, %rd254;
	st.shared.u32 	[%rd255], %r2353;
	add.s32 	%r2577, %r204, %r2574;
	mul.wide.s32 	%rd256, %r2577, 4;
	add.s64 	%rd257, %rd50, %rd256;
	st.shared.u32 	[%rd257], %r2357;
	add.s32 	%r2578, %r205, %r2574;
	mul.wide.u32 	%rd258, %r2578, 4;
	add.s64 	%rd259, %rd50, %rd258;
	st.shared.u32 	[%rd259], %r2361;
	cvt.s64.s32 	%rd260, %r2574;
	add.s64 	%rd261, %rd16, %rd260;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd50, %rd262;
	st.shared.u32 	[%rd263+32], %r2365;
	add.s32 	%r2579, %r206, %r2574;
	mul.wide.u32 	%rd264, %r2579, 4;
	add.s64 	%rd265, %rd50, %rd264;
	st.shared.u32 	[%rd265], %r2369;
	add.s64 	%rd266, %rd17, %rd260;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd268, %rd50, %rd267;
	st.shared.u32 	[%rd268+32], %r2373;
	add.s32 	%r2580, %r207, %r2574;
	mul.wide.u32 	%rd269, %r2580, 4;
	add.s64 	%rd270, %rd50, %rd269;
	st.shared.u32 	[%rd270], %r2377;
	bar.sync 	0;
	add.s16 	%rs277, %rs313, -5;
	mul.hi.s16 	%rs278, %rs277, 10923;
	shr.u16 	%rs279, %rs278, 15;
	add.s16 	%rs280, %rs278, %rs279;
	mul.lo.s16 	%rs281, %rs280, 6;
	sub.s16 	%rs282, %rs277, %rs281;
	mul.wide.s16 	%r2581, %rs282, 16;
	add.s32 	%r2582, %r208, %r2581;
	mul.wide.s32 	%rd271, %r2582, 4;
	add.s64 	%rd272, %rd50, %rd271;
	ld.shared.u32 	%r2385, [%rd272];
	add.s32 	%r2583, %r209, %r2581;
	mul.wide.s32 	%rd273, %r2583, 4;
	add.s64 	%rd274, %rd50, %rd273;
	ld.shared.u32 	%r2392, [%rd274];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2402, %r2399}, {%r381, %r384}, {%r2385}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2411, %r2408}, {%r381, %r384}, {%r2392}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2395, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2397, %r2395, %r2399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2400, %r419, %r2402, %r2397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2404, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2406, %r2404, %r2408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2409, %r419, %r2411, %r2406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2413, %r422, %r2402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2416, %r419, %r2399, %r2413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2420, %r422, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r419, %r2408, %r2420;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2446, %r2449}, {%r465, %r468}, {%r2400, %r2416}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2453, %r2457}, {%r465, %r468}, {%r2409, %r2423}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2446, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r2449, %r2449, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r2453, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r2457, %r2457, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r1491, %r2456, %r110;
	// end inline asm
	add.s16 	%rs283, %rs313, -4;
	mul.hi.s16 	%rs284, %rs283, 10923;
	shr.u16 	%rs285, %rs284, 15;
	add.s16 	%rs286, %rs284, %rs285;
	mul.lo.s16 	%rs287, %rs286, 6;
	sub.s16 	%rs288, %rs283, %rs287;
	mul.wide.s16 	%r2584, %rs288, 16;
	add.s32 	%r2585, %r208, %r2584;
	mul.wide.s32 	%rd275, %r2585, 4;
	add.s64 	%rd276, %rd50, %rd275;
	ld.shared.u32 	%r2468, [%rd276];
	add.s32 	%r2586, %r209, %r2584;
	mul.wide.s32 	%rd277, %r2586, 4;
	add.s64 	%rd278, %rd50, %rd277;
	ld.shared.u32 	%r2475, [%rd278];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2485, %r2482}, {%r381, %r384}, {%r2468}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2494, %r2491}, {%r381, %r384}, {%r2475}, {%r1323, %r1323};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2478, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r2478, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r419, %r2485, %r2480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2487, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2489, %r2487, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2492, %r419, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2496, %r422, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r419, %r2482, %r2496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2503, %r422, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r419, %r2491, %r2503;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2529, %r2532}, {%r465, %r468}, {%r2483, %r2499}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2536, %r2540}, {%r465, %r468}, {%r2492, %r2506}, {%r1323, %r1323}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r2529, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r2532, %r2532, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r2536, %r2536, %r2531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r2540, %r2540, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r1491, %r2539, %r2460;
	// end inline asm
	add.s32 	%r3000, %r108, 2;
	setp.ne.s32 	%p248, %r3000, 40;
	@%p248 bra 	$L__BB0_149;
// %bb.147:                             // %L26456
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p249, %r260, 8;
	@%p249 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_148;
$L__BB0_191:                            // %pass11874
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2587, %r109, 192, %r210;
	mul.wide.u32 	%rd279, %r2587, 4;
	add.s64 	%rd9, %rd4, %rd279;
	st.global.u32 	[%rd9], %r3002;
$L__BB0_148:                            // %L26655
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3000, 0;
	mov.u32 	%r3002, %r3000;
$L__BB0_149:                            // %oksrem12066
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s16 	%rs289, %rs313, -3;
	mul.hi.s16 	%rs290, %rs289, 10923;
	shr.u16 	%rs291, %rs290, 15;
	add.s16 	%rs292, %rs290, %rs291;
	mul.lo.s16 	%rs293, %rs292, 6;
	sub.s16 	%rs294, %rs289, %rs293;
	mul.wide.s16 	%r2755, %rs294, 16;
	add.s32 	%r2756, %r208, %r2755;
	mul.wide.s32 	%rd280, %r2756, 4;
	add.s64 	%rd282, %rd50, %rd280;
	ld.shared.u32 	%r2593, [%rd282];
	add.s32 	%r2757, %r209, %r2755;
	mul.wide.s32 	%rd283, %r2757, 4;
	add.s64 	%rd284, %rd50, %rd283;
	ld.shared.u32 	%r2600, [%rd284];
	mov.u32 	%r2734, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2610, %r2607}, {%r381, %r384}, {%r2593}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2619, %r2616}, {%r381, %r384}, {%r2600}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2603, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r2603, %r2607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r419, %r2610, %r2605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2612, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2614, %r2612, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2617, %r419, %r2619, %r2614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2621, %r422, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2624, %r419, %r2607, %r2621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r422, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r419, %r2616, %r2628;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2657}, {%r465, %r468}, {%r2608, %r2624}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2665}, {%r465, %r468}, {%r2617, %r2631}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2654, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r2657, %r2657, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2660, %r2661, %r2661, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r2665, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2668, %r1491, %r2664, %r3002;
	// end inline asm
	add.s16 	%rs295, %rs313, -2;
	mul.hi.s16 	%rs296, %rs295, 10923;
	shr.u16 	%rs297, %rs296, 15;
	add.s16 	%rs298, %rs296, %rs297;
	mul.lo.s16 	%rs299, %rs298, 6;
	sub.s16 	%rs300, %rs295, %rs299;
	mul.wide.s16 	%r2758, %rs300, 16;
	add.s32 	%r2759, %r208, %r2758;
	mul.wide.s32 	%rd285, %r2759, 4;
	add.s64 	%rd286, %rd50, %rd285;
	ld.shared.u32 	%r2676, [%rd286];
	add.s32 	%r2760, %r209, %r2758;
	mul.wide.s32 	%rd287, %r2760, 4;
	add.s64 	%rd288, %rd50, %rd287;
	ld.shared.u32 	%r2683, [%rd288];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2690}, {%r381, %r384}, {%r2676}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r381, %r384}, {%r2683}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r419, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r419, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r422, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r419, %r2690, %r2704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r422, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r419, %r2699, %r2711;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2740}, {%r465, %r468}, {%r2691, %r2707}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2744, %r2748}, {%r465, %r468}, {%r2700, %r2714}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r2737, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r2740, %r2740, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r2744, %r2744, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r2748, %r2748, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r1491, %r2747, %r2668;
	// end inline asm
	add.s32 	%r3003, %r3000, 2;
	setp.eq.s32 	%p250, %r3003, 40;
	@%p250 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_152;
$L__BB0_150:                            // %L28401
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p251, %r260, 8;
	@%p251 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12727
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2761, %r109, 192, %r210;
	mul.wide.u32 	%rd289, %r2761, 4;
	add.s64 	%rd10, %rd4, %rd289;
	st.global.u32 	[%rd10], %r3005;
$L__BB0_151:                            // %L28600
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3003, 0;
	mov.u32 	%r3005, %r3003;
$L__BB0_152:                            // %oksrem12919
                                        //   in Loop: Header=BB0_146 Depth=2
	add.s16 	%rs301, %rs313, -1;
	mul.hi.s16 	%rs302, %rs301, 10923;
	shr.u16 	%rs303, %rs302, 15;
	add.s16 	%rs304, %rs302, %rs303;
	mul.lo.s16 	%rs305, %rs304, 6;
	sub.s16 	%rs306, %rs301, %rs305;
	mul.wide.s16 	%r2929, %rs306, 16;
	add.s32 	%r2930, %r208, %r2929;
	mul.wide.s32 	%rd290, %r2930, 4;
	add.s64 	%rd292, %rd50, %rd290;
	ld.shared.u32 	%r2767, [%rd292];
	add.s32 	%r2931, %r209, %r2929;
	mul.wide.s32 	%rd293, %r2931, 4;
	add.s64 	%rd294, %rd50, %rd293;
	ld.shared.u32 	%r2774, [%rd294];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2784, %r2781}, {%r381, %r384}, {%r2767}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2793, %r2790}, {%r381, %r384}, {%r2774}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2777, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2779, %r2777, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2782, %r419, %r2784, %r2779;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2786, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r2786, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r419, %r2793, %r2788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2795, %r422, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2798, %r419, %r2781, %r2795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2802, %r422, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r419, %r2790, %r2802;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2828, %r2831}, {%r465, %r468}, {%r2782, %r2798}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2835, %r2839}, {%r465, %r468}, {%r2791, %r2805}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r2828, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r2831, %r2831, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r2835, %r2835, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r2839, %r2839, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2842, %r1491, %r2838, %r3005;
	// end inline asm
	mul.hi.s16 	%rs307, %rs313, 10923;
	shr.u16 	%rs308, %rs307, 15;
	add.s16 	%rs309, %rs307, %rs308;
	mul.lo.s16 	%rs310, %rs309, 6;
	sub.s16 	%rs311, %rs313, %rs310;
	mul.wide.s16 	%r2932, %rs311, 16;
	add.s32 	%r2933, %r208, %r2932;
	mul.wide.s32 	%rd295, %r2933, 4;
	add.s64 	%rd296, %rd50, %rd295;
	ld.shared.u32 	%r2850, [%rd296];
	add.s32 	%r2934, %r209, %r2932;
	mul.wide.s32 	%rd297, %r2934, 4;
	add.s64 	%rd298, %rd50, %rd297;
	ld.shared.u32 	%r2857, [%rd298];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2867, %r2864}, {%r381, %r384}, {%r2850}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2876, %r2873}, {%r381, %r384}, {%r2857}, {%r2734, %r2734};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2860, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2862, %r2860, %r2864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r419, %r2867, %r2862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2869, %r422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r2869, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r419, %r2876, %r2871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2878, %r422, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r419, %r2864, %r2878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r422, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r419, %r2873, %r2885;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2911, %r2914}, {%r465, %r468}, {%r2865, %r2881}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2918, %r2922}, {%r465, %r468}, {%r2874, %r2888}, {%r2734, %r2734}, %r235, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2910, %r2911, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r2914, %r2914, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r2918, %r2918, %r2913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r2922, %r2922, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1491, %r2921, %r2842;
	// end inline asm
	add.s32 	%r108, %r3003, 2;
	setp.eq.s32 	%p252, %r108, 40;
	@%p252 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_155;
$L__BB0_153:                            // %L30346
                                        //   in Loop: Header=BB0_146 Depth=2
	setp.lt.u32 	%p253, %r260, 8;
	@%p253 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_154;
$L__BB0_193:                            // %pass13580
                                        //   in Loop: Header=BB0_146 Depth=2
	mad.lo.s32 	%r2935, %r109, 192, %r210;
	mul.wide.u32 	%rd299, %r2935, 4;
	add.s64 	%rd11, %rd4, %rd299;
	st.global.u32 	[%rd11], %r110;
	bra.uni 	$L__BB0_154;
$L__BB0_157:                            // %L30577
	st.global.u32 	[%rd5], %r2734;
	ret;
$L__BB0_137:                            // %post_box_union
	mov.u64 	%rd152, exception2634;
	cvta.global.u64 	%rd153, %rd152;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd153;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r258;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_185:                            // %post_box_union6546
	mov.u64 	%rd204, exception2634;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r258;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd23, exception12646;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd18;
	st.param.b32 	[param0+8], %r258;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
