// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2612[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2652[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<299>;
	.reg .b16 	%rs<251>;
	.reg .b32 	%r<3099>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<364>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r262, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd11, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r263, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r263, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd28, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9];
	ld.param.u64 	%rd12, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r264, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r265, %r3, %r264;
	add.s32 	%r266, %r265, %r5;
	mul.wide.u32 	%rd34, %r266, 4;
	add.s64 	%rd5, %rd28, %rd34;
	mov.u32 	%r267, 1;
	st.global.u32 	[%rd5], %r267;
	ld.global.u32 	%r6, [%rd12];
	setp.lt.s32 	%p5, %r6, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L205
	ld.param.u64 	%rd16, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd16];
	setp.lt.s32 	%p6, %r7, %r6;
	setp.gt.s32 	%p7, %r7, 1024;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L215
	ld.param.u64 	%rd20, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r8, [%rd20];
	sub.s32 	%r10, %r7, %r6;
	mad.lo.s32 	%r268, %r10, -1431655765, 715827872;
	shf.r.wrap.b32 	%r269, %r268, %r268, 4;
	setp.gt.u32 	%p9, %r269, 89478484;
	setp.lt.s32 	%p10, %r8, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L221
	ld.param.u64 	%rd24, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd24];
	setp.ge.s32 	%p12, %r9, %r8;
	setp.lt.s32 	%p13, %r9, 33;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass75
	sub.s32 	%r270, %r9, %r8;
	mul.hi.s32 	%r271, %r10, 1717986919;
	shr.u32 	%r272, %r271, 31;
	shr.s32 	%r273, %r271, 4;
	add.s32 	%r274, %r273, %r272;
	setp.ne.s32 	%p15, %r270, %r274;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass126
	and.b32  	%r152, %r264, 3;
	shr.u32 	%r153, %r264, 2;
	mul.lo.s32 	%r275, %r152, %r153;
	and.b32  	%r276, %r275, 7;
	cvt.rn.f32.s32 	%f205, %r276;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p293, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p293 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r155, %f788;
	and.b32  	%r277, %r155, 8388607;
	or.b32  	%r3082, %r277, 1065353216;
	mov.b32 	%f783, %r3082;
	add.s32 	%r278, %r155, -1073741824;
	and.b32  	%r3083, %r278, -8388608;
	setp.eq.s32 	%p23, %r3083, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r3083, 192937984;
	add.s32 	%r280, %r3082, %r279;
	mov.b32 	%f217, %r280;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3083, %r3083, %r279;
	mov.b32 	%r3082, %f783;
	setp.ne.s32 	%p24, %r3083, 0;
	setp.ne.s32 	%p25, %r3082, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r155, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r154, %f172;
	setp.lt.u32 	%p18, %r154, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r154, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r281, %f169;
	and.b32  	%r162, %r281, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r282, %f784;
	or.b32  	%r283, %r162, %r282;
	mov.b32 	%f784, %r283;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r290, %f227;
	and.b32  	%r291, %r290, -2147483648;
	or.b32  	%r292, %r291, 1056964608;
	mov.b32 	%f228, %r292;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r165, %r264, 1;
	and.b32  	%r166, %r165, 2;
	mul.lo.s32 	%r298, %r166, %r153;
	cvt.rn.f32.s32 	%f259, %r298;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r12, %f734;
	and.b32  	%r299, %r12, 8388607;
	or.b32  	%r3031, %r299, 1065353216;
	mov.b32 	%f733, %r3031;
	add.s32 	%r300, %r12, -1073741824;
	and.b32  	%r3032, %r300, -8388608;
	setp.eq.s32 	%p43, %r3032, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i2027.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i2027
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r301, %r3032, 192937984;
	add.s32 	%r302, %r3031, %r301;
	mov.b32 	%f271, %r302;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3032, %r3032, %r301;
	mov.b32 	%r3031, %f733;
	setp.ne.s32 	%p44, %r3032, 0;
	setp.ne.s32 	%p45, %r3031, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i2029
	setp.gt.u32 	%p47, %r12, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i2006
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r11, %f2;
	setp.lt.u32 	%p38, %r11, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r11, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i2010
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i2013
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i2032
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r167, %r166, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r303, %f186;
	and.b32  	%r304, %r303, -2147483648;
	mov.b32 	%r305, %f734;
	or.b32  	%r306, %r304, %r305;
	mov.b32 	%f734, %r306;
$L__BB0_20:                             // %__nv_fmodf.exit2033
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r307, %f282;
	and.b32  	%r308, %r307, -2147483648;
	or.b32  	%r309, %r308, 1056964608;
	mov.b32 	%f283, %r309;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r167, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L466
	mul.lo.s32 	%r315, %r167, %r153;
	mul.hi.u32 	%r316, %r315, -1431655765;
	shr.u32 	%r317, %r316, 4;
	mul.lo.s32 	%r318, %r317, 24;
	sub.s32 	%r319, %r315, %r318;
	cvt.rn.f32.s32 	%f311, %r319;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r20, %f738;
	and.b32  	%r320, %r20, 8388607;
	or.b32  	%r3033, %r320, 1065353216;
	mov.b32 	%f737, %r3033;
	add.s32 	%r321, %r20, -1073741824;
	and.b32  	%r3034, %r321, -8388608;
	setp.eq.s32 	%p64, %r3034, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2058.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2058
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r322, %r3034, 192937984;
	add.s32 	%r323, %r3033, %r322;
	mov.b32 	%f323, %r323;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3034, %r3034, %r322;
	mov.b32 	%r3033, %f737;
	setp.ne.s32 	%p65, %r3034, 0;
	setp.ne.s32 	%p66, %r3033, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2060
	setp.gt.u32 	%p68, %r20, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2037
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r19, %f21;
	setp.lt.u32 	%p59, %r19, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r19, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2041
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2044
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2063
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r324, %f18;
	and.b32  	%r325, %r324, -2147483648;
	mov.b32 	%r326, %f738;
	or.b32  	%r327, %r325, %r326;
	mov.b32 	%f738, %r327;
$L__BB0_35:                             // %__nv_fmodf.exit2064
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r328, %f333;
	and.b32  	%r329, %r328, -2147483648;
	or.b32  	%r330, %r329, 1056964608;
	mov.b32 	%f334, %r330;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r331, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r332, %r331, 1;
	setp.eq.b32 	%p72, %r332, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r333, %r331, 2;
	setp.eq.s32 	%p73, %r333, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r334, %r331, 1;
	and.b32  	%r335, %r334, 2;
	setp.eq.s32 	%p74, %r335, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L500
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r29, %r153, 3;
	setp.eq.s32 	%p77, %r29, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L538
	mul.lo.s32 	%r342, %r166, %r29;
	cvt.u16.u32 	%rs11, %r342;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r31, %f744;
	and.b32  	%r343, %r31, 8388607;
	or.b32  	%r3035, %r343, 1065353216;
	mov.b32 	%f743, %r3035;
	add.s32 	%r344, %r31, -1073741824;
	and.b32  	%r3036, %r344, -8388608;
	setp.eq.s32 	%p85, %r3036, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2089.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2089
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r3036, 192937984;
	add.s32 	%r346, %r3035, %r345;
	mov.b32 	%f376, %r346;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3036, %r3036, %r345;
	mov.b32 	%r3035, %f743;
	setp.ne.s32 	%p86, %r3036, 0;
	setp.ne.s32 	%p87, %r3035, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2091
	setp.gt.u32 	%p89, %r31, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2068
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r30, %f42;
	setp.lt.u32 	%p80, %r30, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r30, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2072
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2075
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2094
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r347, %f39;
	and.b32  	%r348, %r347, -2147483648;
	mov.b32 	%r349, %f744;
	or.b32  	%r350, %r348, %r349;
	mov.b32 	%f744, %r350;
$L__BB0_51:                             // %__nv_fmodf.exit2095
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r351, %f386;
	and.b32  	%r352, %r351, -2147483648;
	or.b32  	%r353, %r352, 1056964608;
	mov.b32 	%f387, %r353;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r354, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r355, %r354, 1;
	setp.eq.b32 	%p93, %r355, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r356, %r354, 2;
	setp.eq.s32 	%p94, %r356, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r357, %r354, 1;
	and.b32  	%r358, %r357, 2;
	setp.eq.s32 	%p95, %r358, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L572
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L580
	mul.lo.s32 	%r359, %r167, %r29;
	mul.hi.u32 	%r360, %r359, -1431655765;
	shr.u32 	%r361, %r360, 1;
	mul.lo.s32 	%r362, %r361, 3;
	sub.s32 	%r363, %r359, %r362;
	cvt.rn.f32.s32 	%f417, %r363;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r39, %f750;
	and.b32  	%r364, %r39, 8388607;
	or.b32  	%r3037, %r364, 1065353216;
	mov.b32 	%f749, %r3037;
	add.s32 	%r365, %r39, -1073741824;
	and.b32  	%r3038, %r365, -8388608;
	setp.eq.s32 	%p108, %r3038, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2120.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2120
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r366, %r3038, 192937984;
	add.s32 	%r367, %r3037, %r366;
	mov.b32 	%f429, %r367;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3038, %r3038, %r366;
	mov.b32 	%r3037, %f749;
	setp.ne.s32 	%p109, %r3038, 0;
	setp.ne.s32 	%p110, %r3037, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2122
	setp.gt.u32 	%p112, %r39, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2099
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r38, %f63;
	setp.lt.u32 	%p103, %r38, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r38, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2103
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2106
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2125
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r368, %f60;
	and.b32  	%r369, %r368, -2147483648;
	mov.b32 	%r370, %f750;
	or.b32  	%r371, %r369, %r370;
	mov.b32 	%f750, %r371;
$L__BB0_67:                             // %__nv_fmodf.exit2126
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r372, %f439;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f440, %r374;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r375, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r376, %r375, 1;
	setp.eq.b32 	%p116, %r376, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p117, %r377, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r378, %r375, 1;
	and.b32  	%r379, %r378, 2;
	setp.eq.s32 	%p118, %r379, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L614
	cvt.rzi.s32.f32 	%r293, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r46, %r264, 2;
	setp.eq.s32 	%p121, %r46, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L623
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L625
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r294, %r293, 1;
	cvt.rzi.s32.f32 	%r310, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p293 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r169, %f788;
	and.b32  	%r386, %r169, 8388607;
	or.b32  	%r3084, %r386, 1065353216;
	mov.b32 	%f787, %r3084;
	add.s32 	%r387, %r169, -1073741824;
	and.b32  	%r3085, %r387, -8388608;
	setp.eq.s32 	%p129, %r3085, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2151.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2151
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3085, 192937984;
	add.s32 	%r389, %r3084, %r388;
	mov.b32 	%f479, %r389;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3085, %r3085, %r388;
	mov.b32 	%r3084, %f787;
	setp.ne.s32 	%p130, %r3085, 0;
	setp.ne.s32 	%p131, %r3084, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2153
	setp.gt.u32 	%p133, %r169, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2130
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r168, %f189;
	setp.lt.u32 	%p124, %r168, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r168, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2134
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2137
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2156
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r294, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r311, %r310, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r390, %f788;
	or.b32  	%r391, %r162, %r390;
	mov.b32 	%f788, %r391;
$L__BB0_187:                            // %__nv_fmodf.exit2157
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r295, %r293, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r311, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r398, %f489;
	and.b32  	%r399, %r398, -2147483648;
	or.b32  	%r400, %r399, 1056964608;
	mov.b32 	%f490, %r400;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r401, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r402, %r401, 1;
	setp.eq.b32 	%p137, %r402, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r403, %r401, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f760;
	and.b32  	%r406, %r50, 8388607;
	or.b32  	%r3039, %r406, 1065353216;
	mov.b32 	%f759, %r3039;
	add.s32 	%r407, %r50, -1073741824;
	and.b32  	%r3040, %r407, -8388608;
	setp.eq.s32 	%p149, %r3040, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2182.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2182
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r408, %r3040, 192937984;
	add.s32 	%r409, %r3039, %r408;
	mov.b32 	%f532, %r409;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3040, %r3040, %r408;
	mov.b32 	%r3039, %f759;
	setp.ne.s32 	%p150, %r3040, 0;
	setp.ne.s32 	%p151, %r3039, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2184
	setp.gt.u32 	%p153, %r50, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2161
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r49, %f88;
	setp.lt.u32 	%p144, %r49, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r49, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2165
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2168
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2187
	setp.eq.s32 	%p32, %r295, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r296, %r293, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r312, %r310, 2;
	setp.eq.s32 	%p138, %r403, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r404, %r401, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r410, %f203;
	and.b32  	%r411, %r410, -2147483648;
	mov.b32 	%r412, %f760;
	or.b32  	%r413, %r411, %r412;
	mov.b32 	%f760, %r413;
$L__BB0_88:                             // %__nv_fmodf.exit2188
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r297, %r296, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r312, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r313, %r310, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r405, %r404, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r414, %f542;
	and.b32  	%r415, %r414, -2147483648;
	or.b32  	%r416, %r415, 1056964608;
	mov.b32 	%f543, %r416;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r417, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r418, %r417, 1;
	setp.eq.b32 	%p157, %r418, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r419, %r417, 2;
	setp.eq.s32 	%p158, %r419, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r420, %r417, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r153;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f764;
	and.b32  	%r422, %r58, 8388607;
	or.b32  	%r3041, %r422, 1065353216;
	mov.b32 	%f763, %r3041;
	add.s32 	%r423, %r58, -1073741824;
	and.b32  	%r3042, %r423, -8388608;
	setp.eq.s32 	%p169, %r3042, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2213.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2213
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3042, 192937984;
	add.s32 	%r425, %r3041, %r424;
	mov.b32 	%f584, %r425;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3042, %r3042, %r424;
	mov.b32 	%r3041, %f763;
	setp.ne.s32 	%p170, %r3042, 0;
	setp.ne.s32 	%p171, %r3041, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2215
	setp.gt.u32 	%p173, %r58, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2192
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p164, %r57, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r57, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2196
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2199
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2218
	setp.eq.s32 	%p33, %r297, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r314, %r313, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r405, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r421, %r420, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r426, %f104;
	and.b32  	%r427, %r426, -2147483648;
	mov.b32 	%r428, %f764;
	or.b32  	%r429, %r427, %r428;
	mov.b32 	%f764, %r429;
$L__BB0_102:                            // %__nv_fmodf.exit2219
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r314, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r421, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r436, %f595;
	and.b32  	%r437, %r436, -2147483648;
	or.b32  	%r438, %r437, 1056964608;
	mov.b32 	%f596, %r438;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r439, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r440, %r439, 1;
	setp.eq.b32 	%p177, %r440, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r441, %r439, 2;
	setp.eq.s32 	%p178, %r441, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r442, %r439, 1;
	and.b32  	%r443, %r442, 2;
	setp.eq.s32 	%p179, %r443, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r68, %r264, 1;
	shr.u32 	%r69, %r264, 4;
	setp.ne.s32 	%p182, %r68, %r69;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L830
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r71, %f768;
	and.b32  	%r444, %r71, 8388607;
	or.b32  	%r3043, %r444, 1065353216;
	mov.b32 	%f767, %r3043;
	add.s32 	%r445, %r71, -1073741824;
	and.b32  	%r3044, %r445, -8388608;
	setp.eq.s32 	%p190, %r3044, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2244.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2244
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r3044, 192937984;
	add.s32 	%r447, %r3043, %r446;
	mov.b32 	%f638, %r447;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3044, %r3044, %r446;
	mov.b32 	%r3043, %f767;
	setp.ne.s32 	%p191, %r3044, 0;
	setp.ne.s32 	%p192, %r3043, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2246
	setp.gt.u32 	%p194, %r71, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2223
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r70, %f124;
	setp.lt.u32 	%p185, %r70, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r70, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2227
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2230
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2249
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r448, %f121;
	and.b32  	%r449, %r448, -2147483648;
	mov.b32 	%r450, %f768;
	or.b32  	%r451, %r449, %r450;
	mov.b32 	%f768, %r451;
$L__BB0_117:                            // %__nv_fmodf.exit2250
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r452, %f648;
	and.b32  	%r453, %r452, -2147483648;
	or.b32  	%r454, %r453, 1056964608;
	mov.b32 	%f649, %r454;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r455, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r456, %r455, 1;
	setp.eq.b32 	%p198, %r456, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r457, %r455, 2;
	setp.eq.s32 	%p199, %r457, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r458, %r455, 1;
	and.b32  	%r459, %r458, 2;
	setp.eq.s32 	%p200, %r459, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L869
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r67, %r153, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L872
	cvt.rn.f32.s32 	%f679, %r67;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r79, %f774;
	and.b32  	%r460, %r79, 8388607;
	or.b32  	%r3045, %r460, 1065353216;
	mov.b32 	%f773, %r3045;
	add.s32 	%r461, %r79, -1073741824;
	and.b32  	%r3046, %r461, -8388608;
	setp.eq.s32 	%p211, %r3046, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2275.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2275
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r462, %r3046, 192937984;
	add.s32 	%r463, %r3045, %r462;
	mov.b32 	%f691, %r463;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3046, %r3046, %r462;
	mov.b32 	%r3045, %f773;
	setp.ne.s32 	%p212, %r3046, 0;
	setp.ne.s32 	%p213, %r3045, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2277
	setp.gt.u32 	%p215, %r79, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2254
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r78, %f145;
	setp.lt.u32 	%p206, %r78, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r78, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2258
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2261
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2280
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r464, %f142;
	and.b32  	%r465, %r464, -2147483648;
	mov.b32 	%r466, %f774;
	or.b32  	%r467, %r465, %r466;
	mov.b32 	%f774, %r467;
$L__BB0_133:                            // %__nv_fmodf.exit2281
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r468, %f701;
	and.b32  	%r469, %r468, -2147483648;
	or.b32  	%r470, %r469, 1056964608;
	mov.b32 	%f702, %r470;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r471, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r472, %r471, 1;
	setp.eq.b32 	%p219, %r472, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r473, %r471, 2;
	setp.eq.s32 	%p220, %r473, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r474, %r471, 1;
	and.b32  	%r475, %r474, 2;
	setp.eq.s32 	%p221, %r475, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L906
	mov.b32 	%r286, %f258;
	mov.b32 	%r289, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r394, %f520;
	mov.b32 	%r397, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L915
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L917
	xor.b32  	%r285, %r289, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	mov.b32 	%r337, %f17;
	mov.b32 	%r338, %f740;
	mov.b32 	%r340, %f16;
	mov.b32 	%r341, %f741;
	mov.b32 	%r381, %f754;
	mov.b32 	%r382, %f756;
	mov.b32 	%r384, %f755;
	mov.b32 	%r385, %f757;
	xor.b32  	%r393, %r397, -2147483648;
	mov.b32 	%r432, %f625;
	mov.b32 	%r431, %f103;
	mov.b32 	%r435, %f622;
	mov.b32 	%r434, %f102;
	mov.b32 	%r477, %f778;
	mov.b32 	%r478, %f780;
	mov.b32 	%r480, %f779;
	mov.b32 	%r481, %f781;
	setp.gt.u32 	%p225, %r264, 15;
	mov.u32 	%r178, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L947
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mad.lo.s32 	%r483, %r264, 6, %r2;
	cvt.u16.u32 	%rs17, %r483;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r484, %rs22;
	and.b32  	%r485, %r484, 255;
	mul.wide.u32 	%rd35, %r485, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.u32 	%r486, [%rd36];
	cvt.s32.s16 	%r487, %r486;
	shr.s32 	%r488, %r486, 16;
	mul.lo.s32 	%r489, %r488, 290;
	mad.lo.s32 	%r178, %r487, 33, %r489;
$L__BB0_138:                            // %pass454
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r380, %r382, %r381;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r383, %r385, %r384;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r476, %r478, %r477;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	mul.lo.s32 	%r491, %r152, 24;
	shr.u32 	%r179, %r264, 3;
	bfe.u32 	%r492, %r264, 3, 1;
	shl.b32 	%r493, %r2, 1;
	and.b32  	%r494, %r493, 2;
	or.b32  	%r495, %r492, %r494;
	and.b32  	%r496, %r179, 2;
	or.b32  	%r180, %r67, %r496;
	cvt.u16.u32 	%rs25, %r180;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r497, %rs29;
	and.b32  	%r498, %r497, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r499, %rs30, 8;
	add.s32 	%r500, %r491, %r5;
	or.b32  	%r501, %r500, %r495;
	add.s32 	%r502, %r501, %r499;
	mul.wide.u32 	%rd37, %r502, 4;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r181, [%rd38];
	or.b32  	%r503, %r495, 4;
	cvt.u64.u32 	%rd39, %r499;
	cvt.u64.u32 	%rd40, %r500;
	cvt.u64.u32 	%rd41, %r495;
	add.s64 	%rd42, %rd40, %rd41;
	add.s64 	%rd43, %rd42, %rd39;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.u32 	%r182, [%rd45+16];
	cvt.u64.u32 	%rd46, %r491;
	cvt.u64.u32 	%rd47, %r5;
	add.s64 	%rd48, %rd47, %rd46;
	add.s64 	%rd49, %rd48, %rd41;
	add.s64 	%rd50, %rd49, %rd39;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r183, [%rd52+384];
	cvt.u64.u32 	%rd53, %r503;
	add.s64 	%rd54, %rd48, %rd53;
	add.s64 	%rd55, %rd54, %rd39;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.u32 	%r184, [%rd57+384];
	shl.b32 	%r185, %r6, 16;
	shl.b32 	%r504, %r4, 5;
	shl.b32 	%r186, %r2, 2;
	shl.b32 	%r505, %r264, 2;
	and.b32  	%r506, %r505, 28;
	or.b32  	%r187, %r506, %r504;
	and.b32  	%r188, %r264, 4;
	bfe.s32 	%r507, %r264, 2, 1;
	and.b32  	%r508, %r165, 8;
	shl.b32 	%r509, %r264, 4;
	or.b32  	%r510, %r508, %r509;
	bfe.u32 	%r511, %r510, 3, 3;
	mul.lo.s32 	%r189, %r511, 260;
	cvt.u16.u32 	%rs31, %r264;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r512, %rs36;
	and.b32  	%r190, %r512, 255;
	add.s32 	%r513, %r2, 6;
	shr.u32 	%r514, %r513, 3;
	add.s32 	%r515, %r3, 192;
	and.b32  	%r516, %r515, 224;
	mad.lo.s32 	%r191, %r514, 260, %r516;
	add.s32 	%r517, %r2, 12;
	shr.u32 	%r518, %r517, 3;
	add.s32 	%r519, %r3, 128;
	and.b32  	%r520, %r519, 224;
	mad.lo.s32 	%r192, %r518, 260, %r520;
	add.s32 	%r521, %r2, 18;
	shr.u32 	%r522, %r521, 3;
	add.s32 	%r523, %r3, 64;
	and.b32  	%r524, %r523, 224;
	mad.lo.s32 	%r193, %r522, 260, %r524;
	or.b32  	%r194, %r3, 780;
	add.s32 	%r525, %r2, 30;
	shr.u32 	%r526, %r525, 3;
	mad.lo.s32 	%r195, %r526, 260, %r516;
	add.s32 	%r527, %r2, 36;
	shr.u32 	%r528, %r527, 3;
	mad.lo.s32 	%r196, %r528, 260, %r520;
	add.s32 	%r529, %r2, 42;
	shr.u32 	%r530, %r529, 3;
	mad.lo.s32 	%r197, %r530, 260, %r524;
	or.b32  	%r198, %r3, 1560;
	add.s32 	%r531, %r2, 54;
	shr.u32 	%r532, %r531, 3;
	mad.lo.s32 	%r199, %r532, 260, %r516;
	add.s32 	%r533, %r2, 60;
	bfe.u32 	%r534, %r533, 3, 3;
	mad.lo.s32 	%r200, %r534, 260, %r520;
	mul.lo.s32 	%r535, %r152, 870;
	shr.u32 	%r536, %r2, 1;
	cvt.u16.u32 	%rs37, %r536;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r537, %rs42;
	and.b32  	%r201, %r537, 255;
	mad.lo.s32 	%r538, %r495, 33, %r535;
	mad.lo.s32 	%r202, %r498, 290, %r538;
	add.s32 	%r203, %r202, 132;
	setp.lt.u32 	%p227, %r264, 4;
	setp.eq.s32 	%p228, %r153, 1;
	setp.eq.s32 	%p229, %r153, 4;
	setp.eq.s32 	%p230, %r153, 5;
	bfe.s32 	%r539, %r264, 3, 1;
	and.b32  	%r540, %r264, 8;
	setp.eq.s32 	%p231, %r540, 0;
	and.b32  	%r541, %r539, 98;
	or.b32  	%r542, %r494, %r69;
	setp.eq.s32 	%p232, %r68, 0;
	selp.b32 	%r543, 0, 784, %p232;
	and.b32  	%r544, %r507, 196;
	selp.b32 	%r545, 0, 392, %p121;
	add.s32 	%r546, %r541, %r542;
	or.b32  	%r547, %r546, %r543;
	add.s32 	%r548, %r545, %r544;
	add.s32 	%r204, %r548, %r547;
	selp.b32 	%r549, 1576, 1674, %p231;
	add.s32 	%r550, %r549, %r542;
	add.s32 	%r551, %r550, %r543;
	add.s32 	%r205, %r548, %r551;
	or.b32  	%r552, %r542, 4;
	add.s32 	%r553, %r541, %r552;
	or.b32  	%r554, %r553, %r543;
	add.s32 	%r206, %r548, %r554;
	add.s32 	%r555, %r549, %r552;
	add.s32 	%r556, %r555, %r543;
	add.s32 	%r207, %r548, %r556;
	selp.b32 	%r557, 8, 106, %p231;
	add.s32 	%r558, %r557, %r542;
	or.b32  	%r559, %r558, %r543;
	add.s32 	%r208, %r548, %r559;
	selp.b32 	%r560, 1584, 1682, %p231;
	add.s32 	%r561, %r560, %r542;
	add.s32 	%r562, %r561, %r543;
	add.s32 	%r209, %r548, %r562;
	add.s32 	%r563, %r557, %r552;
	add.s32 	%r564, %r563, %r543;
	add.s32 	%r210, %r548, %r564;
	add.s32 	%r565, %r560, %r552;
	add.s32 	%r566, %r565, %r543;
	add.s32 	%r211, %r548, %r566;
	shr.u32 	%r567, %r2, 2;
	and.b32  	%r568, %r165, 6;
	and.b32  	%r569, %r539, 1576;
	bfe.s32 	%r570, %r2, 1, 1;
	and.b32  	%r571, %r570, 196;
	and.b32  	%r572, %r2, 1;
	neg.s32 	%r573, %r572;
	and.b32  	%r574, %r573, 392;
	mad.lo.s32 	%r575, %r567, 98, %r568;
	mad.lo.s32 	%r576, %r69, 784, %r575;
	or.b32  	%r577, %r576, %r67;
	add.s32 	%r578, %r577, %r569;
	add.s32 	%r579, %r578, %r571;
	add.s32 	%r212, %r579, %r574;
	add.s32 	%r213, %r212, 8;
	mul.lo.s32 	%r580, %r8, 393216;
	or.b32  	%r581, %r186, %r179;
	cvt.u16.u32 	%rs43, %r581;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r582, %rs49;
	and.b32  	%r583, %r582, 248;
	and.b32  	%r584, %r264, 7;
	or.b32  	%r585, %r5, %r584;
	add.s32 	%r214, %r585, %r583;
	cvt.s64.s32 	%rd6, %r580;
	add.s32 	%r586, %r202, %r201;
	mul.wide.u32 	%rd58, %r586, 4;
	mov.u64 	%rd59, shmem;
	add.s64 	%rd7, %rd59, %rd58;
	add.s32 	%r587, %r203, %r201;
	mul.wide.u32 	%rd60, %r587, 4;
	add.s64 	%rd8, %rd59, %rd60;
	cvt.u64.u32 	%rd61, %r202;
	cvt.u64.u16 	%rd62, %rs42;
	and.b64  	%rd63, %rd62, 255;
	add.s64 	%rd64, %rd61, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd9, %rd59, %rd65;
	cvt.u64.u32 	%rd66, %r203;
	add.s64 	%rd67, %rd66, %rd63;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd10, %rd59, %rd68;
	or.pred  	%p233, %p227, %p228;
	and.b32  	%r588, %r264, 24;
	setp.eq.s32 	%p234, %r588, 8;
	or.pred  	%p235, %p233, %p234;
	or.pred  	%p236, %p235, %p229;
	setp.eq.s32 	%p237, %r588, 24;
	or.pred  	%p238, %p230, %p237;
	selp.b32 	%r215, 1145324612, -286331154, %p235;
	or.pred  	%p1, %p236, %p238;
	selp.b32 	%r216, 1145324612, -286331154, %p233;
	add.s32 	%r589, %r153, -1;
	setp.lt.u32 	%p239, %r589, 3;
	or.pred  	%p2, %p227, %p239;
	setp.eq.s32 	%p240, %r588, 16;
	or.pred  	%p3, %p240, %p237;
	selp.b32 	%r217, 1145324612, -286331154, %p240;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r90, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r239, %r216, %r217, %p2;
	or.pred  	%p255, %p2, %p3;
	mov.u32 	%r89, %r201;
	mov.u32 	%r110, %r90;
	mov.u32 	%r111, %r90;
	mov.u32 	%r112, %r90;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30910
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r150, %r90, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s32 	%r89, %r89, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p292, %r90, 432;
	mov.u32 	%r90, %r150;
	@%p292 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1702
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r590, %r90, %r6;
	setp.gt.s32 	%p241, %r7, %r590;
	@%p241 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem795
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p242, %r180, 3;
	setp.gt.u32 	%p243, %r2, 3;
	setp.eq.s32 	%p244, %r188, 0;
	mul.hi.u32 	%r688, %r90, -1431655765;
	shr.u32 	%r689, %r688, 5;
	mul.lo.s32 	%r690, %r689, 48;
	or.b32  	%r691, %r690, %r179;
	add.s32 	%r692, %r691, %r186;
	shr.s32 	%r693, %r692, 31;
	shr.u32 	%r694, %r693, 23;
	add.s32 	%r695, %r692, %r694;
	and.b32  	%r696, %r695, 65024;
	sub.s32 	%r697, %r692, %r696;
	shl.b32 	%r698, %r697, 16;
	or.b32  	%r699, %r187, %r698;
	add.s32 	%r700, %r699, %r185;
	shr.s32 	%r701, %r700, 31;
	shr.u32 	%r702, %r701, 7;
	add.s32 	%r703, %r700, %r702;
	shr.s32 	%r704, %r703, 25;
	setp.lt.s32 	%p245, %r700, 0;
	and.b32  	%r705, %r703, -33554432;
	setp.ne.s32 	%p246, %r705, %r700;
	and.pred  	%p247, %p245, %p246;
	selp.u32 	%r706, 1, 0, %p247;
	sub.s32 	%r707, %r706, %r704;
	shl.b32 	%r708, %r707, 25;
	add.s32 	%r709, %r708, %r700;
	mul.wide.s32 	%rd69, %r709, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r710, %r711, %r712, %r713}, [%rd70];
	add.s32 	%r714, %r690, 24;
	or.b32  	%r715, %r714, %r179;
	add.s32 	%r716, %r715, %r186;
	shr.s32 	%r717, %r716, 31;
	shr.u32 	%r718, %r717, 23;
	add.s32 	%r719, %r716, %r718;
	and.b32  	%r720, %r719, 65024;
	sub.s32 	%r721, %r716, %r720;
	shl.b32 	%r722, %r721, 16;
	or.b32  	%r723, %r187, %r722;
	add.s32 	%r724, %r723, %r185;
	shr.s32 	%r725, %r724, 31;
	shr.u32 	%r726, %r725, 7;
	add.s32 	%r727, %r724, %r726;
	shr.s32 	%r728, %r727, 25;
	setp.lt.s32 	%p248, %r724, 0;
	and.b32  	%r729, %r727, -33554432;
	setp.ne.s32 	%p249, %r729, %r724;
	and.pred  	%p250, %p248, %p249;
	selp.u32 	%r730, 1, 0, %p250;
	sub.s32 	%r731, %r730, %r728;
	shl.b32 	%r732, %r731, 25;
	add.s32 	%r733, %r732, %r724;
	mul.wide.s32 	%rd71, %r733, 4;
	add.s64 	%rd72, %rd3, %rd71;
	ld.global.v4.u32 	{%r734, %r735, %r736, %r737}, [%rd72];
	selp.b32 	%r738, %r712, %r710, %p244;
	shfl.sync.bfly.b32	%r739, %r738, 4, 31, -1;
	selp.b32 	%r593, %r710, %r739, %p244;
	selp.b32 	%r598, %r739, %r712, %p244;
	selp.b32 	%r740, %r713, %r711, %p244;
	shfl.sync.bfly.b32	%r741, %r740, 4, 31, -1;
	selp.b32 	%r601, %r711, %r741, %p244;
	selp.b32 	%r606, %r741, %r713, %p244;
	selp.b32 	%r742, %r736, %r734, %p244;
	shfl.sync.bfly.b32	%r743, %r742, 4, 31, -1;
	selp.b32 	%r609, %r734, %r743, %p244;
	selp.b32 	%r614, %r743, %r736, %p244;
	selp.b32 	%r744, %r737, %r735, %p244;
	shfl.sync.bfly.b32	%r745, %r744, 4, 31, -1;
	selp.b32 	%r617, %r735, %r745, %p244;
	selp.b32 	%r622, %r745, %r737, %p244;
	shl.b32 	%r594, %r598, 4;
	mov.u32 	%r592, 252645135;
	// begin inline asm
	lop3.b32 %r624, %r592, %r593, %r594, 202;
	// end inline asm
	shr.u32 	%r597, %r593, 4;
	// begin inline asm
	lop3.b32 %r640, %r592, %r597, %r598, 202;
	// end inline asm
	shl.b32 	%r602, %r606, 4;
	// begin inline asm
	lop3.b32 %r632, %r592, %r601, %r602, 202;
	// end inline asm
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r648, %r592, %r605, %r606, 202;
	// end inline asm
	shl.b32 	%r610, %r614, 4;
	// begin inline asm
	lop3.b32 %r625, %r592, %r609, %r610, 202;
	// end inline asm
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r641, %r592, %r613, %r614, 202;
	// end inline asm
	shl.b32 	%r618, %r622, 4;
	// begin inline asm
	lop3.b32 %r633, %r592, %r617, %r618, 202;
	// end inline asm
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r649, %r592, %r621, %r622, 202;
	// end inline asm
	mov.u32 	%r626, 25152;
	// begin inline asm
	prmt.b32 %r656, %r624, %r625, %r626;
	// end inline asm
	mov.u32 	%r630, 29521;
	// begin inline asm
	prmt.b32 %r672, %r624, %r625, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r632, %r633, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r632, %r633, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r640, %r641, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r640, %r641, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r648, %r649, %r626;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r648, %r649, %r630;
	// end inline asm
	mov.u32 	%r682, 21520;
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r682;
	// end inline asm
	mov.u32 	%r686, 30258;
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r680, %r681, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r680, %r681, %r686;
	// end inline asm
	mul.hi.s32 	%r746, %r692, 715827883;
	shr.u32 	%r747, %r746, 31;
	shr.s32 	%r748, %r746, 2;
	add.s32 	%r749, %r748, %r747;
	mul.lo.s32 	%r750, %r749, 24;
	sub.s32 	%r751, %r692, %r750;
	add.s32 	%r752, %r751, %r189;
	mul.wide.s32 	%rd73, %r752, 4;
	add.s64 	%rd75, %rd59, %rd73;
	st.shared.u32 	[%rd75], %r655;
	add.s32 	%r753, %r752, 128;
	mul.wide.u32 	%rd76, %r753, 4;
	add.s64 	%rd77, %rd59, %rd76;
	st.shared.u32 	[%rd77], %r663;
	add.s32 	%r754, %r752, 64;
	mul.wide.u32 	%rd78, %r754, 4;
	add.s64 	%rd79, %rd59, %rd78;
	st.shared.u32 	[%rd79], %r659;
	add.s32 	%r755, %r752, 192;
	mul.wide.u32 	%rd80, %r755, 4;
	add.s64 	%rd81, %rd59, %rd80;
	st.shared.u32 	[%rd81], %r667;
	add.s32 	%r756, %r752, 32;
	mul.wide.u32 	%rd82, %r756, 4;
	add.s64 	%rd83, %rd59, %rd82;
	st.shared.u32 	[%rd83], %r671;
	add.s32 	%r757, %r752, 160;
	mul.wide.u32 	%rd84, %r757, 4;
	add.s64 	%rd85, %rd59, %rd84;
	st.shared.u32 	[%rd85], %r679;
	add.s32 	%r758, %r752, 96;
	mul.wide.u32 	%rd86, %r758, 4;
	add.s64 	%rd87, %rd59, %rd86;
	st.shared.u32 	[%rd87], %r675;
	add.s32 	%r759, %r752, 224;
	mul.wide.u32 	%rd88, %r759, 4;
	add.s64 	%rd89, %rd59, %rd88;
	st.shared.u32 	[%rd89], %r683;
	bar.sync 	0;
	add.s32 	%r760, %r690, %r190;
	cvt.u16.u32 	%rs50, %r760;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r761, %rs56;
	add.s32 	%r762, %r3, %r761;
	mul.wide.s32 	%rd90, %r762, 4;
	add.s64 	%rd91, %rd59, %rd90;
	ld.shared.u32 	%r763, [%rd91];
	add.s32 	%r764, %r191, %r761;
	mul.wide.s32 	%rd92, %r764, 4;
	add.s64 	%rd93, %rd59, %rd92;
	ld.shared.u32 	%r765, [%rd93];
	add.s32 	%r766, %r192, %r761;
	mul.wide.u32 	%rd94, %r766, 4;
	add.s64 	%rd95, %rd59, %rd94;
	ld.shared.u32 	%r767, [%rd95];
	add.s32 	%r768, %r193, %r761;
	mul.wide.u32 	%rd96, %r768, 4;
	add.s64 	%rd97, %rd59, %rd96;
	ld.shared.u32 	%r769, [%rd97];
	add.s32 	%r770, %r194, %r761;
	mul.wide.u32 	%rd98, %r770, 4;
	add.s64 	%rd99, %rd59, %rd98;
	ld.shared.u32 	%r771, [%rd99];
	add.s32 	%r772, %r195, %r761;
	mul.wide.u32 	%rd100, %r772, 4;
	add.s64 	%rd101, %rd59, %rd100;
	ld.shared.u32 	%r773, [%rd101];
	add.s32 	%r774, %r196, %r761;
	mul.wide.u32 	%rd102, %r774, 4;
	add.s64 	%rd103, %rd59, %rd102;
	ld.shared.u32 	%r775, [%rd103];
	add.s32 	%r776, %r197, %r761;
	mul.wide.u32 	%rd104, %r776, 4;
	add.s64 	%rd105, %rd59, %rd104;
	ld.shared.u32 	%r777, [%rd105];
	add.s32 	%r778, %r198, %r761;
	mul.wide.u32 	%rd106, %r778, 4;
	add.s64 	%rd107, %rd59, %rd106;
	ld.shared.u32 	%r779, [%rd107];
	add.s32 	%r780, %r199, %r761;
	mul.wide.u32 	%rd108, %r780, 4;
	add.s64 	%rd109, %rd59, %rd108;
	ld.shared.u32 	%r781, [%rd109];
	add.s32 	%r782, %r200, %r761;
	mul.wide.s32 	%rd110, %r782, 4;
	add.s64 	%rd111, %rd59, %rd110;
	ld.shared.u32 	%r783, [%rd111];
	bar.sync 	0;
	shfl.sync.idx.b32	%r784, %r178, 0, 31, -1;
	shfl.sync.idx.b32	%r785, %r178, 1, 31, -1;
	shfl.sync.idx.b32	%r786, %r178, 2, 31, -1;
	shfl.sync.idx.b32	%r787, %r178, 3, 31, -1;
	shfl.sync.idx.b32	%r788, %r178, 4, 31, -1;
	shfl.sync.idx.b32	%r789, %r178, 5, 31, -1;
	shfl.sync.idx.b32	%r790, %r178, 6, 31, -1;
	shfl.sync.idx.b32	%r791, %r178, 7, 31, -1;
	shfl.sync.idx.b32	%r792, %r178, 8, 31, -1;
	shfl.sync.idx.b32	%r793, %r178, 9, 31, -1;
	shfl.sync.idx.b32	%r794, %r178, 10, 31, -1;
	shfl.sync.idx.b32	%r795, %r178, 11, 31, -1;
	shfl.sync.idx.b32	%r796, %r178, 12, 31, -1;
	shfl.sync.idx.b32	%r797, %r178, 13, 31, -1;
	shfl.sync.idx.b32	%r798, %r178, 14, 31, -1;
	shfl.sync.idx.b32	%r799, %r178, 15, 31, -1;
	add.s32 	%r800, %r784, %r761;
	mul.wide.s32 	%rd112, %r800, 4;
	add.s64 	%rd113, %rd59, %rd112;
	st.shared.u32 	[%rd113], %r763;
	add.s32 	%r801, %r785, %r761;
	mul.wide.s32 	%rd114, %r801, 4;
	add.s64 	%rd115, %rd59, %rd114;
	st.shared.u32 	[%rd115], %r765;
	add.s32 	%r802, %r786, %r761;
	mul.wide.s32 	%rd116, %r802, 4;
	add.s64 	%rd117, %rd59, %rd116;
	st.shared.u32 	[%rd117], %r767;
	add.s32 	%r803, %r787, %r761;
	mul.wide.s32 	%rd118, %r803, 4;
	add.s64 	%rd119, %rd59, %rd118;
	st.shared.u32 	[%rd119], %r769;
	add.s32 	%r804, %r788, %r761;
	mul.wide.s32 	%rd120, %r804, 4;
	add.s64 	%rd121, %rd59, %rd120;
	st.shared.u32 	[%rd121], %r771;
	add.s32 	%r805, %r789, %r761;
	mul.wide.s32 	%rd122, %r805, 4;
	add.s64 	%rd123, %rd59, %rd122;
	st.shared.u32 	[%rd123], %r773;
	add.s32 	%r806, %r790, %r761;
	mul.wide.s32 	%rd124, %r806, 4;
	add.s64 	%rd125, %rd59, %rd124;
	st.shared.u32 	[%rd125], %r775;
	add.s32 	%r807, %r791, %r761;
	mul.wide.s32 	%rd126, %r807, 4;
	add.s64 	%rd127, %rd59, %rd126;
	st.shared.u32 	[%rd127], %r777;
	add.s32 	%r808, %r792, %r761;
	mul.wide.s32 	%rd128, %r808, 4;
	add.s64 	%rd129, %rd59, %rd128;
	st.shared.u32 	[%rd129], %r779;
	add.s32 	%r809, %r793, %r761;
	mul.wide.s32 	%rd130, %r809, 4;
	add.s64 	%rd131, %rd59, %rd130;
	st.shared.u32 	[%rd131], %r781;
	selp.b32 	%r810, 0, %r783, %p243;
	add.s32 	%r811, %r794, %r761;
	mul.wide.s32 	%rd132, %r811, 4;
	add.s64 	%rd133, %rd59, %rd132;
	st.shared.u32 	[%rd133], %r810;
	add.s32 	%r812, %r795, %r761;
	mul.wide.s32 	%rd134, %r812, 4;
	add.s64 	%rd135, %rd59, %rd134;
	mov.u32 	%r687, 0;
	st.shared.u32 	[%rd135], %r687;
	add.s32 	%r813, %r796, %r761;
	mul.wide.s32 	%rd136, %r813, 4;
	add.s64 	%rd137, %rd59, %rd136;
	st.shared.u32 	[%rd137], %r687;
	add.s32 	%r814, %r797, %r761;
	mul.wide.s32 	%rd138, %r814, 4;
	add.s64 	%rd139, %rd59, %rd138;
	st.shared.u32 	[%rd139], %r687;
	add.s32 	%r815, %r798, %r761;
	mul.wide.s32 	%rd140, %r815, 4;
	add.s64 	%rd141, %rd59, %rd140;
	st.shared.u32 	[%rd141], %r687;
	add.s32 	%r816, %r799, %r761;
	mul.wide.s32 	%rd142, %r816, 4;
	add.s64 	%rd143, %rd59, %rd142;
	st.shared.u32 	[%rd143], %r687;
	bar.sync 	0;
	mov.u32 	%r94, %r687;
	mov.u32 	%r95, %r687;
	mov.u32 	%r96, %r687;
	mov.u32 	%r97, %r687;
	mov.u32 	%r98, %r687;
	mov.u32 	%r99, %r687;
	mov.u32 	%r100, %r687;
	mov.u32 	%r101, %r687;
	mov.u32 	%r102, %r687;
	mov.u32 	%r103, %r687;
	mov.u32 	%r104, %r687;
	mov.u32 	%r105, %r687;
	mov.u32 	%r106, %r687;
	mov.u32 	%r107, %r687;
	mov.u32 	%r108, %r687;
	mov.u32 	%r109, %r687;
	@%p242 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2688
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r218, %r690, %r201;
	ld.shared.u32 	%r94, [%rd7];
	ld.shared.u32 	%r95, [%rd8];
	ld.shared.u32 	%r96, [%rd9+12];
	ld.shared.u32 	%r97, [%rd10+12];
	ld.shared.u32 	%r98, [%rd9+24];
	ld.shared.u32 	%r99, [%rd10+24];
	ld.shared.u32 	%r100, [%rd9+36];
	ld.shared.u32 	%r101, [%rd10+36];
	add.s32 	%r817, %r218, 12;
	mul.hi.u32 	%r818, %r817, -1431655765;
	shr.u32 	%r819, %r818, 4;
	mul.lo.s32 	%r820, %r819, 24;
	sub.s32 	%r821, %r817, %r820;
	add.s32 	%r822, %r202, %r821;
	mul.wide.u32 	%rd144, %r822, 4;
	add.s64 	%rd146, %rd59, %rd144;
	ld.shared.u32 	%r102, [%rd146];
	add.s32 	%r823, %r203, %r821;
	mul.wide.u32 	%rd147, %r823, 4;
	add.s64 	%rd148, %rd59, %rd147;
	ld.shared.u32 	%r103, [%rd148];
	cvt.u16.u32 	%rs57, %r218;
	add.s16 	%rs58, %rs57, 15;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r824, %rs64;
	add.s32 	%r825, %r202, %r824;
	mul.wide.s32 	%rd149, %r825, 4;
	add.s64 	%rd150, %rd59, %rd149;
	ld.shared.u32 	%r104, [%rd150];
	add.s32 	%r826, %r203, %r824;
	mul.wide.u32 	%rd151, %r826, 4;
	add.s64 	%rd152, %rd59, %rd151;
	ld.shared.u32 	%r105, [%rd152];
	add.s16 	%rs65, %rs57, 18;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r827, %rs71;
	add.s32 	%r828, %r202, %r827;
	mul.wide.s32 	%rd153, %r828, 4;
	add.s64 	%rd154, %rd59, %rd153;
	ld.shared.u32 	%r106, [%rd154];
	add.s32 	%r829, %r203, %r827;
	mul.wide.u32 	%rd155, %r829, 4;
	add.s64 	%rd156, %rd59, %rd155;
	ld.shared.u32 	%r107, [%rd156];
	add.s16 	%rs72, %rs57, 21;
	mul.hi.s16 	%rs73, %rs72, 10923;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 2;
	add.s16 	%rs76, %rs75, %rs74;
	mul.lo.s16 	%rs77, %rs76, 24;
	sub.s16 	%rs78, %rs72, %rs77;
	cvt.s32.s16 	%r830, %rs78;
	add.s32 	%r831, %r202, %r830;
	mul.wide.s32 	%rd157, %r831, 4;
	add.s64 	%rd158, %rd59, %rd157;
	ld.shared.u32 	%r108, [%rd158];
	add.s32 	%r832, %r203, %r830;
	mul.wide.u32 	%rd159, %r832, 4;
	add.s64 	%rd160, %rd59, %rd159;
	ld.shared.u32 	%r109, [%rd160];
$L__BB0_139:                            // %L8833
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r113, %r687;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19861
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r110, 0;
	mov.u32 	%r112, %r110;
$L__BB0_148:                            // %L19862
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r113, %r113, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p271, %r113, 24;
	@%p271 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8851
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p251, %r113, 0;
	selp.b32 	%r1226, %r94, 0, %p251;
	setp.eq.s32 	%p252, %r113, 6;
	selp.b32 	%r1227, %r98, %r1226, %p252;
	setp.eq.s32 	%p253, %r113, 12;
	selp.b32 	%r1228, %r102, %r1227, %p253;
	setp.eq.s32 	%p254, %r113, 18;
	selp.b32 	%r1229, %r106, %r1228, %p254;
	selp.b32 	%r1230, %r95, 0, %p251;
	selp.b32 	%r1231, %r99, %r1230, %p252;
	selp.b32 	%r1232, %r103, %r1231, %p253;
	selp.b32 	%r1233, %r107, %r1232, %p254;
	selp.b32 	%r1234, %r96, 0, %p251;
	selp.b32 	%r1235, %r100, %r1234, %p252;
	selp.b32 	%r1236, %r104, %r1235, %p253;
	selp.b32 	%r1237, %r108, %r1236, %p254;
	selp.b32 	%r1238, %r97, 0, %p251;
	selp.b32 	%r1239, %r101, %r1238, %p252;
	selp.b32 	%r1240, %r105, %r1239, %p253;
	selp.b32 	%r1241, %r109, %r1240, %p254;
	mov.u16 	%rs116, 25600;
	// begin inline asm
	mov.b32 %r839, {%rs116, %rs116};
	// end inline asm
	mov.u16 	%rs118, 21504;
	// begin inline asm
	mov.b32 %r850, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r838, %r1229, -2004318072;
	mov.u32 	%r975, 983055;
	// begin inline asm
	lop3.b32 %r836, %r975, %r838, %r839, 202;
	// end inline asm
	mov.u16 	%rs122, 18432;
	// begin inline asm
	mov.b32 %r840, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r841, %r839, %r840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r844, %r836, %r841;
	// end inline asm
	mov.u32 	%r986, 15728880;
	// begin inline asm
	lop3.b32 %r847, %r986, %r838, %r850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r852, %r850, %r851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r855, %r847, %r852;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r884, %r1233, -2004318072;
	// begin inline asm
	lop3.b32 %r882, %r975, %r884, %r885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r887, %r885, %r886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r890, %r882, %r887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r893, %r986, %r884, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r930, %r1237, -2004318072;
	// begin inline asm
	lop3.b32 %r928, %r975, %r930, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r931, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r939, %r986, %r930, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r976, %r1241, -2004318072;
	// begin inline asm
	lop3.b32 %r974, %r975, %r976, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r985, %r986, %r976, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r844;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1018, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r890;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1021, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r855;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1024, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r901;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r936;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1036, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r993;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1039, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1042, %r1043}, {%r284, %r287}, {%r1018}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1049, %r1050}, {%r284, %r287}, {%r1021}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1056, %r1057}, {%r284, %r287}, {%r1024}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1063, %r1064}, {%r284, %r287}, {%r1027}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1070, %r1071}, {%r284, %r287}, {%r1030}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1077, %r1078}, {%r284, %r287}, {%r1033}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1084, %r1085}, {%r284, %r287}, {%r1036}, {%r687, %r687};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1091, %r1092}, {%r284, %r287}, {%r1039}, {%r687, %r687};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass4028
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1098, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1100, %r1098, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r336, %r1042, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1107, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r336, %r1049, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1116, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r1116, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r336, %r1056, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1125, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r1125, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r336, %r1063, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1134, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r1134, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r336, %r1070, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1143, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r336, %r1077, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r336, %r1084, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r336, %r1091, %r1163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r339, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r336, %r1043, %r1170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r339, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r336, %r1050, %r1177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r339, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r336, %r1057, %r1184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r339, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r336, %r1064, %r1191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r339, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r336, %r1071, %r1198;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1205, %r339, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1208, %r336, %r1078, %r1205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r339, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r336, %r1085, %r1212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r339, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r336, %r1092, %r1219;
	// end inline asm
	mov.u32 	%r1391, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1315, %r1316}, {%r380, %r383}, {%r1103, %r1173}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r380, %r383}, {%r1112, %r1180}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r380, %r383}, {%r1121, %r1187}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1339, %r1340}, {%r380, %r383}, {%r1130, %r1194}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r380, %r383}, {%r1139, %r1201}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r380, %r383}, {%r1148, %r1208}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r380, %r383}, {%r1157, %r1215}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1371, %r1372}, {%r380, %r383}, {%r1166, %r1222}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1323, %r1324, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1323, %r1324, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1330, %r1331, %r1332, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1334, %r1331, %r1332, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1338, %r1339, %r1340, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1342, %r1339, %r1340, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1346, %r1347, %r1348, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1350, %r1347, %r1348, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1354, %r1355, %r1356, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1358, %r1355, %r1356, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1362, %r1363, %r1364, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1366, %r1363, %r1364, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1370, %r1371, %r1372, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1374, %r1371, %r1372, %r686;
	// end inline asm
	add.s32 	%r1424, %r89, %r113;
	mul.hi.u32 	%r1425, %r1424, -1431655765;
	shr.u32 	%r1426, %r1425, 2;
	mul.lo.s32 	%r1427, %r1426, 6;
	sub.s32 	%r1428, %r1424, %r1427;
	shl.b32 	%r1429, %r1428, 4;
	add.s32 	%r1430, %r204, %r1429;
	mul.wide.u32 	%rd163, %r1430, 4;
	add.s64 	%rd165, %rd59, %rd163;
	st.shared.u32 	[%rd165], %r1314;
	add.s32 	%r1431, %r205, %r1429;
	mul.wide.u32 	%rd166, %r1431, 4;
	add.s64 	%rd167, %rd59, %rd166;
	st.shared.u32 	[%rd167], %r1318;
	add.s32 	%r1432, %r206, %r1429;
	mul.wide.u32 	%rd168, %r1432, 4;
	add.s64 	%rd169, %rd59, %rd168;
	st.shared.u32 	[%rd169], %r1322;
	add.s32 	%r1433, %r207, %r1429;
	mul.wide.u32 	%rd170, %r1433, 4;
	add.s64 	%rd171, %rd59, %rd170;
	st.shared.u32 	[%rd171], %r1326;
	add.s32 	%r1434, %r208, %r1429;
	mul.wide.u32 	%rd172, %r1434, 4;
	add.s64 	%rd173, %rd59, %rd172;
	st.shared.u32 	[%rd173], %r1330;
	add.s32 	%r1435, %r209, %r1429;
	mul.wide.u32 	%rd174, %r1435, 4;
	add.s64 	%rd175, %rd59, %rd174;
	st.shared.u32 	[%rd175], %r1334;
	add.s32 	%r1436, %r210, %r1429;
	mul.wide.u32 	%rd176, %r1436, 4;
	add.s64 	%rd177, %rd59, %rd176;
	st.shared.u32 	[%rd177], %r1338;
	add.s32 	%r1437, %r211, %r1429;
	mul.wide.u32 	%rd178, %r1437, 4;
	add.s64 	%rd179, %rd59, %rd178;
	st.shared.u32 	[%rd179], %r1342;
	add.s32 	%r1438, %r1424, 3;
	mul.hi.u32 	%r1439, %r1438, -1431655765;
	shr.u32 	%r1440, %r1439, 2;
	mul.lo.s32 	%r1441, %r1440, 6;
	sub.s32 	%r1442, %r1438, %r1441;
	shl.b32 	%r1443, %r1442, 4;
	add.s32 	%r1444, %r204, %r1443;
	mul.wide.u32 	%rd180, %r1444, 4;
	add.s64 	%rd181, %rd59, %rd180;
	st.shared.u32 	[%rd181], %r1346;
	add.s32 	%r1445, %r205, %r1443;
	mul.wide.u32 	%rd182, %r1445, 4;
	add.s64 	%rd183, %rd59, %rd182;
	st.shared.u32 	[%rd183], %r1350;
	add.s32 	%r1446, %r206, %r1443;
	mul.wide.u32 	%rd184, %r1446, 4;
	add.s64 	%rd185, %rd59, %rd184;
	st.shared.u32 	[%rd185], %r1354;
	add.s32 	%r1447, %r207, %r1443;
	mul.wide.u32 	%rd186, %r1447, 4;
	add.s64 	%rd187, %rd59, %rd186;
	st.shared.u32 	[%rd187], %r1358;
	add.s32 	%r1448, %r208, %r1443;
	mul.wide.u32 	%rd188, %r1448, 4;
	add.s64 	%rd189, %rd59, %rd188;
	st.shared.u32 	[%rd189], %r1362;
	add.s32 	%r1449, %r209, %r1443;
	mul.wide.u32 	%rd190, %r1449, 4;
	add.s64 	%rd191, %rd59, %rd190;
	st.shared.u32 	[%rd191], %r1366;
	add.s32 	%r1450, %r210, %r1443;
	mul.wide.u32 	%rd192, %r1450, 4;
	add.s64 	%rd193, %rd59, %rd192;
	st.shared.u32 	[%rd193], %r1370;
	add.s32 	%r1451, %r211, %r1443;
	mul.wide.u32 	%rd194, %r1451, 4;
	add.s64 	%rd195, %rd59, %rd194;
	st.shared.u32 	[%rd195], %r1374;
	bar.sync 	0;
	add.s16 	%rs127, %rs3, -5;
	mul.hi.s16 	%rs128, %rs127, 10923;
	shr.u16 	%rs129, %rs128, 15;
	add.s16 	%rs130, %rs128, %rs129;
	mul.lo.s16 	%rs131, %rs130, 6;
	sub.s16 	%rs132, %rs127, %rs131;
	mul.wide.s16 	%r1452, %rs132, 16;
	add.s32 	%r1453, %r212, %r1452;
	mul.wide.s32 	%rd196, %r1453, 4;
	add.s64 	%rd197, %rd59, %rd196;
	ld.shared.u32 	%r1382, [%rd197];
	add.s32 	%r1454, %r213, %r1452;
	mul.wide.s32 	%rd198, %r1454, 4;
	add.s64 	%rd199, %rd59, %rd198;
	ld.shared.u32 	%r1389, [%rd199];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1378, %r1379}, {%r392, %r395}, {%r1382}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1385, %r1386}, {%r392, %r395}, {%r1389}, {%r1391, %r1391};
	// end inline asm
	@%p255 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6668
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1392, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r1392, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r430, %r1378, %r1394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r430, %r1385, %r1403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r433, %r1378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r430, %r1379, %r1410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r433, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r430, %r1386, %r1417;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1474, %r1477}, {%r476, %r479}, {%r1397, %r1413}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1481, %r1485}, {%r476, %r479}, {%r1406, %r1420}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r1474, %r1474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r1477, %r1477, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r1481, %r1481, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r1485, %r1485, %r1480;
	// end inline asm
	mov.u32 	%r1572, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1488, %r1572, %r1484, %r112;
	// end inline asm
	add.s32 	%r1575, %r90, %r113;
	add.s32 	%r1576, %r1575, 1;
	mul.hi.u32 	%r1577, %r1576, -1431655765;
	shr.u32 	%r1578, %r1577, 2;
	mul.lo.s32 	%r1579, %r1578, 6;
	sub.s32 	%r1580, %r1576, %r1579;
	shl.b32 	%r1581, %r1580, 4;
	add.s32 	%r1582, %r212, %r1581;
	mul.wide.u32 	%rd202, %r1582, 4;
	add.s64 	%rd204, %rd59, %rd202;
	ld.shared.u32 	%r1496, [%rd204];
	add.s32 	%r1583, %r213, %r1581;
	mul.wide.u32 	%rd205, %r1583, 4;
	add.s64 	%rd206, %rd59, %rd205;
	ld.shared.u32 	%r1503, [%rd206];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1513, %r1510}, {%r392, %r395}, {%r1496}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1522, %r1519}, {%r392, %r395}, {%r1503}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1506, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1508, %r1506, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1511, %r430, %r1513, %r1508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1515, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r1515, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r430, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r433, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r430, %r1510, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r433, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r430, %r1519, %r1531;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1557, %r1560}, {%r476, %r479}, {%r1511, %r1527}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1564, %r1568}, {%r476, %r479}, {%r1520, %r1534}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r1557, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r1560, %r1560, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r1564, %r1564, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r1568, %r1568, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r1572, %r1567, %r1488;
	// end inline asm
	add.s32 	%r3087, %r110, 2;
	setp.eq.s32 	%p256, %r3087, 40;
	setp.lt.u32 	%p298, %r264, 8;
	@%p256 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15727
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p298 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass7111
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1584, %r111, 393216, %r214;
	cvt.u64.u32 	%rd207, %r1584;
	add.s64 	%rd208, %rd207, %rd6;
	mul.hi.s64 	%rd209, %rd208, 3074457345618258603;
	shr.u64 	%rd210, %rd209, 63;
	shr.s64 	%rd211, %rd209, 20;
	add.s64 	%rd212, %rd211, %rd210;
	setp.lt.s64 	%p258, %rd208, 0;
	mul.lo.s64 	%rd213, %rd212, 6291456;
	setp.ne.s64 	%p259, %rd213, %rd208;
	and.pred  	%p260, %p258, %p259;
	selp.s64 	%rd214, -1, 0, %p260;
	add.s64 	%rd215, %rd212, %rd214;
	mul.lo.s64 	%rd216, %rd215, -6291456;
	add.s64 	%rd217, %rd216, %rd208;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3089;
$L__BB0_143:                            // %L15941
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r3087, 0;
	mov.u32 	%r3089, %r3087;
$L__BB0_195:                            // %oksrem7253
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs133, %rs3, -3;
	mul.hi.s16 	%rs134, %rs133, 10923;
	shr.u16 	%rs135, %rs134, 15;
	add.s16 	%rs136, %rs134, %rs135;
	mul.lo.s16 	%rs137, %rs136, 6;
	sub.s16 	%rs138, %rs133, %rs137;
	mul.wide.s16 	%r1752, %rs138, 16;
	add.s32 	%r1753, %r212, %r1752;
	mul.wide.s32 	%rd220, %r1753, 4;
	add.s64 	%rd222, %rd59, %rd220;
	ld.shared.u32 	%r1590, [%rd222];
	add.s32 	%r1754, %r213, %r1752;
	mul.wide.s32 	%rd223, %r1754, 4;
	add.s64 	%rd224, %rd59, %rd223;
	ld.shared.u32 	%r1597, [%rd224];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1607, %r1604}, {%r392, %r395}, {%r1590}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1616, %r1613}, {%r392, %r395}, {%r1597}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1600, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1602, %r1600, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r430, %r1607, %r1602;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1609, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r1609, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r430, %r1616, %r1611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1618, %r433, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r430, %r1604, %r1618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1625, %r433, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r430, %r1613, %r1625;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1651, %r1654}, {%r476, %r479}, {%r1605, %r1621}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1658, %r1662}, {%r476, %r479}, {%r1614, %r1628}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1651, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r1654, %r1654, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1657, %r1658, %r1658, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1661, %r1662, %r1662, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r1572, %r1661, %r3089;
	// end inline asm
	add.s16 	%rs139, %rs3, -2;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	add.s16 	%rs142, %rs140, %rs141;
	mul.lo.s16 	%rs143, %rs142, 6;
	sub.s16 	%rs144, %rs139, %rs143;
	mul.wide.s16 	%r1755, %rs144, 16;
	add.s32 	%r1756, %r212, %r1755;
	mul.wide.s32 	%rd225, %r1756, 4;
	add.s64 	%rd226, %rd59, %rd225;
	ld.shared.u32 	%r1673, [%rd226];
	add.s32 	%r1757, %r213, %r1755;
	mul.wide.s32 	%rd227, %r1757, 4;
	add.s64 	%rd228, %rd59, %rd227;
	ld.shared.u32 	%r1680, [%rd228];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1690, %r1687}, {%r392, %r395}, {%r1673}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1699, %r1696}, {%r392, %r395}, {%r1680}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1683, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r1683, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r430, %r1690, %r1685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r430, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r433, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r430, %r1687, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r433, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r430, %r1696, %r1708;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1734, %r1737}, {%r476, %r479}, {%r1688, %r1704}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1741, %r1745}, {%r476, %r479}, {%r1697, %r1711}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1734, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r1737, %r1737, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r1741, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r1745, %r1745, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r1572, %r1744, %r1665;
	// end inline asm
	add.s32 	%r3090, %r3087, 2;
	setp.eq.s32 	%p261, %r3090, 40;
	@%p261 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17687
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p298 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7967
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1758, %r111, 393216, %r214;
	cvt.u64.u32 	%rd229, %r1758;
	add.s64 	%rd230, %rd229, %rd6;
	mul.hi.s64 	%rd231, %rd230, 3074457345618258603;
	shr.u64 	%rd232, %rd231, 63;
	shr.s64 	%rd233, %rd231, 20;
	add.s64 	%rd234, %rd233, %rd232;
	setp.lt.s64 	%p263, %rd230, 0;
	mul.lo.s64 	%rd235, %rd234, 6291456;
	setp.ne.s64 	%p264, %rd235, %rd230;
	and.pred  	%p265, %p263, %p264;
	selp.s64 	%rd236, -1, 0, %p265;
	add.s64 	%rd237, %rd234, %rd236;
	mul.lo.s64 	%rd238, %rd237, -6291456;
	add.s64 	%rd239, %rd238, %rd230;
	shl.b64 	%rd240, %rd239, 2;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3092;
$L__BB0_145:                            // %L17901
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r3090, 0;
	mov.u32 	%r3092, %r3090;
$L__BB0_196:                            // %oksrem8109
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs145, %rs3, -1;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	add.s16 	%rs148, %rs146, %rs147;
	mul.lo.s16 	%rs149, %rs148, 6;
	sub.s16 	%rs150, %rs145, %rs149;
	mul.wide.s16 	%r1926, %rs150, 16;
	add.s32 	%r1927, %r212, %r1926;
	mul.wide.s32 	%rd242, %r1927, 4;
	add.s64 	%rd244, %rd59, %rd242;
	ld.shared.u32 	%r1764, [%rd244];
	add.s32 	%r1928, %r213, %r1926;
	mul.wide.s32 	%rd245, %r1928, 4;
	add.s64 	%rd246, %rd59, %rd245;
	ld.shared.u32 	%r1771, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1781, %r1778}, {%r392, %r395}, {%r1764}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1790, %r1787}, {%r392, %r395}, {%r1771}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1774, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1774, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r430, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1783, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r1783, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r430, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r433, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r430, %r1778, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r433, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r430, %r1787, %r1799;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1828}, {%r476, %r479}, {%r1779, %r1795}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1836}, {%r476, %r479}, {%r1788, %r1802}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r1825, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1828, %r1828, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1572, %r1835, %r3092;
	// end inline asm
	mul.hi.s16 	%rs151, %rs3, 10923;
	shr.u16 	%rs152, %rs151, 15;
	add.s16 	%rs153, %rs151, %rs152;
	mul.lo.s16 	%rs154, %rs153, 6;
	sub.s16 	%rs155, %rs3, %rs154;
	mul.wide.s16 	%r1929, %rs155, 16;
	add.s32 	%r1930, %r212, %r1929;
	mul.wide.s32 	%rd247, %r1930, 4;
	add.s64 	%rd248, %rd59, %rd247;
	ld.shared.u32 	%r1847, [%rd248];
	add.s32 	%r1931, %r213, %r1929;
	mul.wide.s32 	%rd249, %r1931, 4;
	add.s64 	%rd250, %rd59, %rd249;
	ld.shared.u32 	%r1854, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1864, %r1861}, {%r392, %r395}, {%r1847}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1873, %r1870}, {%r392, %r395}, {%r1854}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1857, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r1857, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r430, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1866, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r1866, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r430, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r433, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r430, %r1861, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r433, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r430, %r1870, %r1882;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1908, %r1911}, {%r476, %r479}, {%r1862, %r1878}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1915, %r1919}, {%r476, %r479}, {%r1871, %r1885}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r1908, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r1911, %r1911, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1915, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r1919, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r112, %r1572, %r1918, %r1839;
	// end inline asm
	add.s32 	%r110, %r3090, 2;
	setp.eq.s32 	%p266, %r110, 40;
	@%p266 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19647
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p298 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8823
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1932, %r111, 393216, %r214;
	cvt.u64.u32 	%rd251, %r1932;
	add.s64 	%rd252, %rd251, %rd6;
	mul.hi.s64 	%rd253, %rd252, 3074457345618258603;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 20;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p268, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 6291456;
	setp.ne.s64 	%p269, %rd257, %rd252;
	and.pred  	%p270, %p268, %p269;
	selp.s64 	%rd258, -1, 0, %p270;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -6291456;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r112;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19883.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs250, %rs1;
	mov.u32 	%r3078, %r1391;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30893
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r110, %r2826;
	mov.u32 	%r112, %r2826;
$L__BB0_159:                            // %L30894
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3078, %r3078, 6;
	add.s16 	%rs250, %rs250, 6;
	setp.ne.s32 	%p291, %r3078, 24;
	@%p291 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19883
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p272, %r3078, 0;
	selp.b32 	%r2629, %r94, 0, %p272;
	setp.eq.s32 	%p273, %r3078, 6;
	selp.b32 	%r2630, %r98, %r2629, %p273;
	setp.eq.s32 	%p274, %r3078, 12;
	selp.b32 	%r2631, %r102, %r2630, %p274;
	setp.eq.s32 	%p275, %r3078, 18;
	selp.b32 	%r2632, %r106, %r2631, %p275;
	selp.b32 	%r2633, %r95, 0, %p272;
	selp.b32 	%r2634, %r99, %r2633, %p273;
	selp.b32 	%r2635, %r103, %r2634, %p274;
	selp.b32 	%r2636, %r107, %r2635, %p275;
	selp.b32 	%r2637, %r96, 0, %p272;
	selp.b32 	%r2638, %r100, %r2637, %p273;
	selp.b32 	%r2639, %r104, %r2638, %p274;
	selp.b32 	%r2640, %r108, %r2639, %p275;
	selp.b32 	%r2641, %r97, 0, %p272;
	selp.b32 	%r2642, %r101, %r2641, %p273;
	selp.b32 	%r2643, %r105, %r2642, %p274;
	selp.b32 	%r2644, %r109, %r2643, %p275;
	// begin inline asm
	mov.b32 %r1962, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2645, %r2632, 8;
	xor.b32  	%r1972, %r2645, 8947848;
	// begin inline asm
	lop3.b32 %r1959, %r975, %r1972, %r1962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1964, %r1962, %r1963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1967, %r1959, %r1964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1970, %r986, %r1972, %r1973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1975, %r1973, %r1974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1978, %r1970, %r1975;
	// end inline asm
	// begin inline asm
	mov.b32 %r2008, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2646, %r2636, 8;
	xor.b32  	%r2018, %r2646, 8947848;
	// begin inline asm
	lop3.b32 %r2005, %r975, %r2018, %r2008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2010, %r2008, %r2009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2013, %r2005, %r2010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2016, %r986, %r2018, %r2019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2021, %r2019, %r2020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2024, %r2016, %r2021;
	// end inline asm
	// begin inline asm
	mov.b32 %r2054, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2647, %r2640, 8;
	xor.b32  	%r2064, %r2647, 8947848;
	// begin inline asm
	lop3.b32 %r2051, %r975, %r2064, %r2054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2056, %r2054, %r2055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2059, %r2051, %r2056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2062, %r986, %r2064, %r2065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2067, %r2065, %r2066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2070, %r2062, %r2067;
	// end inline asm
	// begin inline asm
	mov.b32 %r2100, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2111, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2648, %r2644, 8;
	xor.b32  	%r2110, %r2648, 8947848;
	// begin inline asm
	lop3.b32 %r2097, %r975, %r2110, %r2100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2101, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2102, %r2100, %r2101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2105, %r2097, %r2102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2108, %r986, %r2110, %r2111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2112, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2113, %r2111, %r2112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2116, %r2108, %r2113;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r1967;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2013;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2122, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r1978;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2125, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r2024;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2128, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r2059;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2131, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2105;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2134, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2070;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2137, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r184;
    mov.b32 {%r2re, %r2im}, %r2116;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r284, %r287}, {%r2119}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r284, %r287}, {%r2122}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r284, %r287}, {%r2125}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r284, %r287}, {%r2128}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r284, %r287}, {%r2131}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r284, %r287}, {%r2134}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2260, %r2257}, {%r284, %r287}, {%r2137}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2269, %r2266}, {%r284, %r287}, {%r2140}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r336, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r336, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r336, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r336, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r336, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r336, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2253, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r2253, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r336, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2262, %r339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r2262, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r336, %r2269, %r2264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r339, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r336, %r2203, %r2271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r339, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r336, %r2212, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r339, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r336, %r2221, %r2285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r339, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r336, %r2230, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r339, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r336, %r2239, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r339, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r336, %r2248, %r2306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r339, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r336, %r2257, %r2313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r339, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r336, %r2266, %r2320;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2400, %r2401}, {%r380, %r383}, {%r2204, %r2274}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2408, %r2409}, {%r380, %r383}, {%r2213, %r2281}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2416, %r2417}, {%r380, %r383}, {%r2222, %r2288}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2424, %r2425}, {%r380, %r383}, {%r2231, %r2295}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2432, %r2433}, {%r380, %r383}, {%r2240, %r2302}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2440, %r2441}, {%r380, %r383}, {%r2249, %r2309}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2448, %r2449}, {%r380, %r383}, {%r2258, %r2316}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2456, %r2457}, {%r380, %r383}, {%r2267, %r2323}, {%r1391, %r1391}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2399, %r2400, %r2401, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2400, %r2401, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2407, %r2408, %r2409, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2411, %r2408, %r2409, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2415, %r2416, %r2417, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2419, %r2416, %r2417, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2424, %r2425, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2427, %r2424, %r2425, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2431, %r2432, %r2433, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2435, %r2432, %r2433, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2439, %r2440, %r2441, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2443, %r2440, %r2441, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2447, %r2448, %r2449, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2451, %r2448, %r2449, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2455, %r2456, %r2457, %r682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2459, %r2456, %r2457, %r686;
	// end inline asm
	add.s16 	%rs204, %rs10, %rs250;
	add.s16 	%rs205, %rs204, -29;
	mul.hi.s16 	%rs206, %rs205, 10923;
	shr.u16 	%rs207, %rs206, 15;
	add.s16 	%rs208, %rs206, %rs207;
	mul.lo.s16 	%rs209, %rs208, 6;
	sub.s16 	%rs210, %rs205, %rs209;
	mul.wide.s16 	%r2649, %rs210, 16;
	add.s32 	%r2650, %r204, %r2649;
	mul.wide.s32 	%rd264, %r2650, 4;
	add.s64 	%rd266, %rd59, %rd264;
	st.shared.u32 	[%rd266], %r2399;
	add.s32 	%r2651, %r205, %r2649;
	mul.wide.u32 	%rd267, %r2651, 4;
	add.s64 	%rd268, %rd59, %rd267;
	st.shared.u32 	[%rd268], %r2403;
	add.s32 	%r2652, %r206, %r2649;
	mul.wide.s32 	%rd269, %r2652, 4;
	add.s64 	%rd270, %rd59, %rd269;
	st.shared.u32 	[%rd270], %r2407;
	add.s32 	%r2653, %r207, %r2649;
	mul.wide.u32 	%rd271, %r2653, 4;
	add.s64 	%rd272, %rd59, %rd271;
	st.shared.u32 	[%rd272], %r2411;
	add.s32 	%r2654, %r208, %r2649;
	mul.wide.s32 	%rd273, %r2654, 4;
	add.s64 	%rd274, %rd59, %rd273;
	st.shared.u32 	[%rd274], %r2415;
	add.s32 	%r2655, %r209, %r2649;
	mul.wide.u32 	%rd275, %r2655, 4;
	add.s64 	%rd276, %rd59, %rd275;
	st.shared.u32 	[%rd276], %r2419;
	add.s32 	%r2656, %r210, %r2649;
	mul.wide.s32 	%rd277, %r2656, 4;
	add.s64 	%rd278, %rd59, %rd277;
	st.shared.u32 	[%rd278], %r2423;
	add.s32 	%r2657, %r211, %r2649;
	mul.wide.u32 	%rd279, %r2657, 4;
	add.s64 	%rd280, %rd59, %rd279;
	st.shared.u32 	[%rd280], %r2427;
	add.s16 	%rs211, %rs9, %rs250;
	add.s16 	%rs212, %rs211, -2;
	mul.hi.s16 	%rs213, %rs212, 10923;
	shr.u16 	%rs214, %rs213, 15;
	add.s16 	%rs215, %rs213, %rs214;
	mul.lo.s16 	%rs216, %rs215, 6;
	sub.s16 	%rs217, %rs212, %rs216;
	mul.wide.s16 	%r2658, %rs217, 16;
	add.s32 	%r2659, %r204, %r2658;
	mul.wide.s32 	%rd281, %r2659, 4;
	add.s64 	%rd282, %rd59, %rd281;
	st.shared.u32 	[%rd282], %r2431;
	add.s32 	%r2660, %r205, %r2658;
	mul.wide.u32 	%rd283, %r2660, 4;
	add.s64 	%rd284, %rd59, %rd283;
	st.shared.u32 	[%rd284], %r2435;
	add.s32 	%r2661, %r206, %r2658;
	mul.wide.s32 	%rd285, %r2661, 4;
	add.s64 	%rd286, %rd59, %rd285;
	st.shared.u32 	[%rd286], %r2439;
	add.s32 	%r2662, %r207, %r2658;
	mul.wide.u32 	%rd287, %r2662, 4;
	add.s64 	%rd288, %rd59, %rd287;
	st.shared.u32 	[%rd288], %r2443;
	add.s32 	%r2663, %r208, %r2658;
	mul.wide.s32 	%rd289, %r2663, 4;
	add.s64 	%rd290, %rd59, %rd289;
	st.shared.u32 	[%rd290], %r2447;
	add.s32 	%r2664, %r209, %r2658;
	mul.wide.u32 	%rd291, %r2664, 4;
	add.s64 	%rd292, %rd59, %rd291;
	st.shared.u32 	[%rd292], %r2451;
	add.s32 	%r2665, %r210, %r2658;
	mul.wide.s32 	%rd293, %r2665, 4;
	add.s64 	%rd294, %rd59, %rd293;
	st.shared.u32 	[%rd294], %r2455;
	add.s32 	%r2666, %r211, %r2658;
	mul.wide.u32 	%rd295, %r2666, 4;
	add.s64 	%rd296, %rd59, %rd295;
	st.shared.u32 	[%rd296], %r2459;
	bar.sync 	0;
	add.s16 	%rs218, %rs250, -5;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2667, %rs223, 16;
	add.s32 	%r2668, %r212, %r2667;
	mul.wide.s32 	%rd297, %r2668, 4;
	add.s64 	%rd298, %rd59, %rd297;
	ld.shared.u32 	%r2467, [%rd298];
	add.s32 	%r2669, %r213, %r2667;
	mul.wide.s32 	%rd299, %r2669, 4;
	add.s64 	%rd300, %rd59, %rd299;
	ld.shared.u32 	%r2474, [%rd300];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2484, %r2481}, {%r392, %r395}, {%r2467}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2493, %r2490}, {%r392, %r395}, {%r2474}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2477, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r2477, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r430, %r2484, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2486, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2488, %r2486, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2491, %r430, %r2493, %r2488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2495, %r433, %r2484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r430, %r2481, %r2495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r433, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r430, %r2490, %r2502;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2528, %r2531}, {%r476, %r479}, {%r2482, %r2498}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2535, %r2539}, {%r476, %r479}, {%r2491, %r2505}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r2528, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r2531, %r2531, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2534, %r2535, %r2535, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r2539, %r2539, %r2534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r1572, %r2538, %r112;
	// end inline asm
	add.s32 	%r2670, %r90, %r3078;
	add.s32 	%r2671, %r2670, 25;
	mul.hi.u32 	%r2672, %r2671, -1431655765;
	shr.u32 	%r2673, %r2672, 2;
	mul.lo.s32 	%r2674, %r2673, 6;
	sub.s32 	%r2675, %r2671, %r2674;
	shl.b32 	%r2676, %r2675, 4;
	add.s32 	%r2677, %r212, %r2676;
	mul.wide.u32 	%rd301, %r2677, 4;
	add.s64 	%rd302, %rd59, %rd301;
	ld.shared.u32 	%r2550, [%rd302];
	add.s32 	%r2678, %r213, %r2676;
	mul.wide.u32 	%rd303, %r2678, 4;
	add.s64 	%rd304, %rd59, %rd303;
	ld.shared.u32 	%r2557, [%rd304];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2567, %r2564}, {%r392, %r395}, {%r2550}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2576, %r2573}, {%r392, %r395}, {%r2557}, {%r1391, %r1391};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2560, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2562, %r2560, %r2564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r430, %r2567, %r2562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2569, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2571, %r2569, %r2573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2574, %r430, %r2576, %r2571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2578, %r433, %r2567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2581, %r430, %r2564, %r2578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2585, %r433, %r2576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2588, %r430, %r2573, %r2585;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2611, %r2614}, {%r476, %r479}, {%r2565, %r2581}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2618, %r2622}, {%r476, %r479}, {%r2574, %r2588}, {%r1391, %r1391}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2610, %r2611, %r2611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2613, %r2614, %r2614, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2617, %r2618, %r2618, %r2613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2621, %r2622, %r2622, %r2617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r1572, %r2621, %r2542;
	// end inline asm
	add.s32 	%r3093, %r110, 2;
	setp.ne.s32 	%p276, %r3093, 40;
	@%p276 bra 	$L__BB0_153;
// %bb.151:                             // %L26759
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p298 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass12008
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2679, %r111, 393216, %r214;
	cvt.u64.u32 	%rd305, %r2679;
	add.s64 	%rd306, %rd305, %rd6;
	mul.hi.s64 	%rd307, %rd306, 3074457345618258603;
	shr.u64 	%rd308, %rd307, 63;
	shr.s64 	%rd309, %rd307, 20;
	add.s64 	%rd310, %rd309, %rd308;
	setp.lt.s64 	%p278, %rd306, 0;
	mul.lo.s64 	%rd311, %rd310, 6291456;
	setp.ne.s64 	%p279, %rd311, %rd306;
	and.pred  	%p280, %p278, %p279;
	selp.s64 	%rd312, -1, 0, %p280;
	add.s64 	%rd313, %rd310, %rd312;
	mul.lo.s64 	%rd314, %rd313, -6291456;
	add.s64 	%rd315, %rd314, %rd306;
	shl.b64 	%rd316, %rd315, 2;
	add.s64 	%rd317, %rd4, %rd316;
	st.global.u32 	[%rd317], %r3095;
$L__BB0_152:                            // %L26973
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r3093, 0;
	mov.u32 	%r3095, %r3093;
$L__BB0_153:                            // %oksrem12150
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs224, %rs250, -3;
	mul.hi.s16 	%rs225, %rs224, 10923;
	shr.u16 	%rs226, %rs225, 15;
	add.s16 	%rs227, %rs225, %rs226;
	mul.lo.s16 	%rs228, %rs227, 6;
	sub.s16 	%rs229, %rs224, %rs228;
	mul.wide.s16 	%r2847, %rs229, 16;
	add.s32 	%r2848, %r212, %r2847;
	mul.wide.s32 	%rd318, %r2848, 4;
	add.s64 	%rd320, %rd59, %rd318;
	ld.shared.u32 	%r2685, [%rd320];
	add.s32 	%r2849, %r213, %r2847;
	mul.wide.s32 	%rd321, %r2849, 4;
	add.s64 	%rd322, %rd59, %rd321;
	ld.shared.u32 	%r2692, [%rd322];
	mov.u32 	%r2826, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r392, %r395}, {%r2685}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r392, %r395}, {%r2692}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r430, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r430, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r433, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r430, %r2699, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r433, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r430, %r2708, %r2720;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2746, %r2749}, {%r476, %r479}, {%r2700, %r2716}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2757}, {%r476, %r479}, {%r2709, %r2723}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r2746, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r2749, %r2749, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r2753, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r2757, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r1572, %r2756, %r3095;
	// end inline asm
	add.s16 	%rs230, %rs250, -2;
	mul.hi.s16 	%rs231, %rs230, 10923;
	shr.u16 	%rs232, %rs231, 15;
	add.s16 	%rs233, %rs231, %rs232;
	mul.lo.s16 	%rs234, %rs233, 6;
	sub.s16 	%rs235, %rs230, %rs234;
	mul.wide.s16 	%r2850, %rs235, 16;
	add.s32 	%r2851, %r212, %r2850;
	mul.wide.s32 	%rd323, %r2851, 4;
	add.s64 	%rd324, %rd59, %rd323;
	ld.shared.u32 	%r2768, [%rd324];
	add.s32 	%r2852, %r213, %r2850;
	mul.wide.s32 	%rd325, %r2852, 4;
	add.s64 	%rd326, %rd59, %rd325;
	ld.shared.u32 	%r2775, [%rd326];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2785, %r2782}, {%r392, %r395}, {%r2768}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2794, %r2791}, {%r392, %r395}, {%r2775}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2778, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r2778, %r2782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r430, %r2785, %r2780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2787, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2789, %r2787, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r430, %r2794, %r2789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r433, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r430, %r2782, %r2796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r433, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r430, %r2791, %r2803;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2829, %r2832}, {%r476, %r479}, {%r2783, %r2799}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2836, %r2840}, {%r476, %r479}, {%r2792, %r2806}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r2829, %r2829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r2832, %r2832, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r2836, %r2836, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r2840, %r2840, %r2835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3098, %r1572, %r2839, %r2760;
	// end inline asm
	add.s32 	%r3096, %r3093, 2;
	setp.eq.s32 	%p281, %r3096, 40;
	@%p281 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28719
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p298 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12864
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2853, %r111, 393216, %r214;
	cvt.u64.u32 	%rd327, %r2853;
	add.s64 	%rd328, %rd327, %rd6;
	mul.hi.s64 	%rd329, %rd328, 3074457345618258603;
	shr.u64 	%rd330, %rd329, 63;
	shr.s64 	%rd331, %rd329, 20;
	add.s64 	%rd332, %rd331, %rd330;
	setp.lt.s64 	%p283, %rd328, 0;
	mul.lo.s64 	%rd333, %rd332, 6291456;
	setp.ne.s64 	%p284, %rd333, %rd328;
	and.pred  	%p285, %p283, %p284;
	selp.s64 	%rd334, -1, 0, %p285;
	add.s64 	%rd335, %rd332, %rd334;
	mul.lo.s64 	%rd336, %rd335, -6291456;
	add.s64 	%rd337, %rd336, %rd328;
	shl.b64 	%rd338, %rd337, 2;
	add.s64 	%rd339, %rd4, %rd338;
	st.global.u32 	[%rd339], %r3098;
$L__BB0_155:                            // %L28933
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r111, %r111, 1;
	mov.u32 	%r3096, 0;
	mov.u32 	%r3098, %r3096;
$L__BB0_156:                            // %oksrem13006
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs236, %rs250, -1;
	mul.hi.s16 	%rs237, %rs236, 10923;
	shr.u16 	%rs238, %rs237, 15;
	add.s16 	%rs239, %rs237, %rs238;
	mul.lo.s16 	%rs240, %rs239, 6;
	sub.s16 	%rs241, %rs236, %rs240;
	mul.wide.s16 	%r3021, %rs241, 16;
	add.s32 	%r3022, %r212, %r3021;
	mul.wide.s32 	%rd340, %r3022, 4;
	add.s64 	%rd342, %rd59, %rd340;
	ld.shared.u32 	%r2859, [%rd342];
	add.s32 	%r3023, %r213, %r3021;
	mul.wide.s32 	%rd343, %r3023, 4;
	add.s64 	%rd344, %rd59, %rd343;
	ld.shared.u32 	%r2866, [%rd344];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2876, %r2873}, {%r392, %r395}, {%r2859}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2885, %r2882}, {%r392, %r395}, {%r2866}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2869, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r2869, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r430, %r2876, %r2871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2878, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r2878, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r430, %r2885, %r2880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r433, %r2876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r430, %r2873, %r2887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2894, %r433, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r430, %r2882, %r2894;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2920, %r2923}, {%r476, %r479}, {%r2874, %r2890}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2927, %r2931}, {%r476, %r479}, {%r2883, %r2897}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2919, %r2920, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r2923, %r2923, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r2927, %r2927, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r2931, %r2931, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r1572, %r2930, %r3098;
	// end inline asm
	mul.hi.s16 	%rs242, %rs250, 10923;
	shr.u16 	%rs243, %rs242, 15;
	add.s16 	%rs244, %rs242, %rs243;
	mul.lo.s16 	%rs245, %rs244, 6;
	sub.s16 	%rs246, %rs250, %rs245;
	mul.wide.s16 	%r3024, %rs246, 16;
	add.s32 	%r3025, %r212, %r3024;
	mul.wide.s32 	%rd345, %r3025, 4;
	add.s64 	%rd346, %rd59, %rd345;
	ld.shared.u32 	%r2942, [%rd346];
	add.s32 	%r3026, %r213, %r3024;
	mul.wide.s32 	%rd347, %r3026, 4;
	add.s64 	%rd348, %rd59, %rd347;
	ld.shared.u32 	%r2949, [%rd348];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2959, %r2956}, {%r392, %r395}, {%r2942}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2968, %r2965}, {%r392, %r395}, {%r2949}, {%r2826, %r2826};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2952, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r2952, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r430, %r2959, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2961, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r2961, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r430, %r2968, %r2963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r433, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r430, %r2956, %r2970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2977, %r433, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r430, %r2965, %r2977;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3003, %r3006}, {%r476, %r479}, {%r2957, %r2973}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3010, %r3014}, {%r476, %r479}, {%r2966, %r2980}, {%r2826, %r2826}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3002, %r3003, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r3006, %r3006, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r3010, %r3010, %r3005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r3014, %r3014, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r112, %r1572, %r3013, %r2934;
	// end inline asm
	add.s32 	%r110, %r3096, 2;
	setp.eq.s32 	%p286, %r110, 40;
	@%p286 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30679
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p298 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13720
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r3027, %r111, 393216, %r214;
	cvt.u64.u32 	%rd349, %r3027;
	add.s64 	%rd350, %rd349, %rd6;
	mul.hi.s64 	%rd351, %rd350, 3074457345618258603;
	shr.u64 	%rd352, %rd351, 63;
	shr.s64 	%rd353, %rd351, 20;
	add.s64 	%rd354, %rd353, %rd352;
	setp.lt.s64 	%p288, %rd350, 0;
	mul.lo.s64 	%rd355, %rd354, 6291456;
	setp.ne.s64 	%p289, %rd355, %rd350;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd356, -1, 0, %p290;
	add.s64 	%rd357, %rd354, %rd356;
	mul.lo.s64 	%rd358, %rd357, -6291456;
	add.s64 	%rd359, %rd358, %rd350;
	shl.b64 	%rd360, %rd359, 2;
	add.s64 	%rd361, %rd4, %rd360;
	st.global.u32 	[%rd361], %r112;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30925
	mov.u32 	%r3029, 0;
	st.global.u32 	[%rd5], %r3029;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd161, exception2652;
	cvta.global.u64 	%rd162, %rd161;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd162;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6663
	mov.u64 	%rd200, exception2652;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L247
	mov.u32 	%r3030, 2;
	st.global.u32 	[%rd5], %r3030;
	mov.u64 	%rd362, exception2612;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd32, exception1;
	cvta.global.u64 	%rd33, %rd32;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd33;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd11;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
