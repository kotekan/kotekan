// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2611[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<264>;
	.reg .b32 	%r<3078>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<368>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r267, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r267, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r268, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r269, %r2, %r268;
	add.s32 	%r270, %r269, %r5;
	mul.wide.u32 	%rd19, %r270, 4;
	add.s64 	%rd5, %rd13, %rd19;
	mov.u32 	%r271, 1;
	st.global.u32 	[%rd5], %r271;
	setp.lt.s32 	%p5, %r263, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r264, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r264, %r263;
	setp.gt.s32 	%p7, %r264, 8192;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r265, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r264, %r263;
	mad.lo.s32 	%r272, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r273, %r272, %r272, 4;
	setp.gt.u32 	%p9, %r273, 89478484;
	setp.lt.s32 	%p10, %r265, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r266, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r266, %r265;
	setp.lt.s32 	%p13, %r266, 257;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass51
	sub.s32 	%r274, %r266, %r265;
	mul.hi.s32 	%r275, %r6, 1717986919;
	shr.u32 	%r276, %r275, 31;
	shr.s32 	%r277, %r275, 4;
	add.s32 	%r278, %r277, %r276;
	setp.ne.s32 	%p15, %r274, %r278;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass102
	and.b32  	%r146, %r268, 3;
	shr.u32 	%r147, %r268, 2;
	mul.lo.s32 	%r279, %r146, %r147;
	and.b32  	%r280, %r279, 7;
	cvt.rn.f32.s32 	%f205, %r280;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p292 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r149, %f788;
	and.b32  	%r281, %r149, 8388607;
	or.b32  	%r3061, %r281, 1065353216;
	mov.b32 	%f783, %r3061;
	add.s32 	%r282, %r149, -1073741824;
	and.b32  	%r3062, %r282, -8388608;
	setp.eq.s32 	%p23, %r3062, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r283, %r3062, 192937984;
	add.s32 	%r284, %r3061, %r283;
	mov.b32 	%f217, %r284;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3062, %r3062, %r283;
	mov.b32 	%r3061, %f783;
	setp.ne.s32 	%p24, %r3062, 0;
	setp.ne.s32 	%p25, %r3061, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r149, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r148, %f172;
	setp.lt.u32 	%p18, %r148, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r148, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r285, %f169;
	and.b32  	%r156, %r285, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r286, %f784;
	or.b32  	%r287, %r156, %r286;
	mov.b32 	%f784, %r287;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r294, %f227;
	and.b32  	%r295, %r294, -2147483648;
	or.b32  	%r296, %r295, 1056964608;
	mov.b32 	%f228, %r296;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r159, %r268, 1;
	and.b32  	%r160, %r159, 2;
	mul.lo.s32 	%r302, %r160, %r147;
	cvt.rn.f32.s32 	%f259, %r302;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r303, %r8, 8388607;
	or.b32  	%r3011, %r303, 1065353216;
	mov.b32 	%f733, %r3011;
	add.s32 	%r304, %r8, -1073741824;
	and.b32  	%r3012, %r304, -8388608;
	setp.eq.s32 	%p43, %r3012, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r305, %r3012, 192937984;
	add.s32 	%r306, %r3011, %r305;
	mov.b32 	%f271, %r306;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3012, %r3012, %r305;
	mov.b32 	%r3011, %f733;
	setp.ne.s32 	%p44, %r3012, 0;
	setp.ne.s32 	%p45, %r3011, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r161, %r160, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r307, %f186;
	and.b32  	%r308, %r307, -2147483648;
	mov.b32 	%r309, %f734;
	or.b32  	%r310, %r308, %r309;
	mov.b32 	%f734, %r310;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r311, %f282;
	and.b32  	%r312, %r311, -2147483648;
	or.b32  	%r313, %r312, 1056964608;
	mov.b32 	%f283, %r313;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r161, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L378
	mul.lo.s32 	%r319, %r161, %r147;
	mul.hi.u32 	%r320, %r319, -1431655765;
	shr.u32 	%r321, %r320, 4;
	mul.lo.s32 	%r322, %r321, 24;
	sub.s32 	%r323, %r319, %r322;
	cvt.rn.f32.s32 	%f311, %r323;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r324, %r16, 8388607;
	or.b32  	%r3013, %r324, 1065353216;
	mov.b32 	%f737, %r3013;
	add.s32 	%r325, %r16, -1073741824;
	and.b32  	%r3014, %r325, -8388608;
	setp.eq.s32 	%p64, %r3014, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r3014, 192937984;
	add.s32 	%r327, %r3013, %r326;
	mov.b32 	%f323, %r327;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3014, %r3014, %r326;
	mov.b32 	%r3013, %f737;
	setp.ne.s32 	%p65, %r3014, 0;
	setp.ne.s32 	%p66, %r3013, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r328, %f18;
	and.b32  	%r329, %r328, -2147483648;
	mov.b32 	%r330, %f738;
	or.b32  	%r331, %r329, %r330;
	mov.b32 	%f738, %r331;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r332, %f333;
	and.b32  	%r333, %r332, -2147483648;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%f334, %r334;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r335, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r336, %r335, 1;
	setp.eq.b32 	%p72, %r336, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r337, %r335, 2;
	setp.eq.s32 	%p73, %r337, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r338, %r335, 1;
	and.b32  	%r339, %r338, 2;
	setp.eq.s32 	%p74, %r339, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L412
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r147, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L450
	mul.lo.s32 	%r346, %r160, %r25;
	cvt.u16.u32 	%rs11, %r346;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r347, %r27, 8388607;
	or.b32  	%r3015, %r347, 1065353216;
	mov.b32 	%f743, %r3015;
	add.s32 	%r348, %r27, -1073741824;
	and.b32  	%r3016, %r348, -8388608;
	setp.eq.s32 	%p85, %r3016, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r3016, 192937984;
	add.s32 	%r350, %r3015, %r349;
	mov.b32 	%f376, %r350;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3016, %r3016, %r349;
	mov.b32 	%r3015, %f743;
	setp.ne.s32 	%p86, %r3016, 0;
	setp.ne.s32 	%p87, %r3015, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r351, %f39;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f744;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f744, %r354;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r355, %f386;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f387, %r357;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r358, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p93, %r359, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p94, %r360, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p95, %r362, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L484
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L492
	mul.lo.s32 	%r363, %r161, %r25;
	mul.hi.u32 	%r364, %r363, -1431655765;
	shr.u32 	%r365, %r364, 1;
	mul.lo.s32 	%r366, %r365, 3;
	sub.s32 	%r367, %r363, %r366;
	cvt.rn.f32.s32 	%f417, %r367;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r368, %r35, 8388607;
	or.b32  	%r3017, %r368, 1065353216;
	mov.b32 	%f749, %r3017;
	add.s32 	%r369, %r35, -1073741824;
	and.b32  	%r3018, %r369, -8388608;
	setp.eq.s32 	%p108, %r3018, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r370, %r3018, 192937984;
	add.s32 	%r371, %r3017, %r370;
	mov.b32 	%f429, %r371;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3018, %r3018, %r370;
	mov.b32 	%r3017, %f749;
	setp.ne.s32 	%p109, %r3018, 0;
	setp.ne.s32 	%p110, %r3017, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r372, %f60;
	and.b32  	%r373, %r372, -2147483648;
	mov.b32 	%r374, %f750;
	or.b32  	%r375, %r373, %r374;
	mov.b32 	%f750, %r375;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r376, %f439;
	and.b32  	%r377, %r376, -2147483648;
	or.b32  	%r378, %r377, 1056964608;
	mov.b32 	%f440, %r378;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r379, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r380, %r379, 1;
	setp.eq.b32 	%p116, %r380, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r381, %r379, 2;
	setp.eq.s32 	%p117, %r381, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r382, %r379, 1;
	and.b32  	%r383, %r382, 2;
	setp.eq.s32 	%p118, %r383, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L526
	cvt.rzi.s32.f32 	%r297, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r268, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L535
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L537
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r298, %r297, 1;
	cvt.rzi.s32.f32 	%r314, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p292 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r163, %f788;
	and.b32  	%r390, %r163, 8388607;
	or.b32  	%r3063, %r390, 1065353216;
	mov.b32 	%f787, %r3063;
	add.s32 	%r391, %r163, -1073741824;
	and.b32  	%r3064, %r391, -8388608;
	setp.eq.s32 	%p129, %r3064, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3064, 192937984;
	add.s32 	%r393, %r3063, %r392;
	mov.b32 	%f479, %r393;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3064, %r3064, %r392;
	mov.b32 	%r3063, %f787;
	setp.ne.s32 	%p130, %r3064, 0;
	setp.ne.s32 	%p131, %r3063, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r163, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r162, %f189;
	setp.lt.u32 	%p124, %r162, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r162, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r298, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r315, %r314, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r394, %f788;
	or.b32  	%r395, %r156, %r394;
	mov.b32 	%f788, %r395;
$L__BB0_187:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r299, %r297, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r315, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r402, %f489;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f490, %r404;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r405, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p137, %r406, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r407, %r405, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r410, %r46, 8388607;
	or.b32  	%r3019, %r410, 1065353216;
	mov.b32 	%f759, %r3019;
	add.s32 	%r411, %r46, -1073741824;
	and.b32  	%r3020, %r411, -8388608;
	setp.eq.s32 	%p149, %r3020, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r412, %r3020, 192937984;
	add.s32 	%r413, %r3019, %r412;
	mov.b32 	%f532, %r413;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3020, %r3020, %r412;
	mov.b32 	%r3019, %f759;
	setp.ne.s32 	%p150, %r3020, 0;
	setp.ne.s32 	%p151, %r3019, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r299, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r300, %r297, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r316, %r314, 2;
	setp.eq.s32 	%p138, %r407, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r408, %r405, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r414, %f203;
	and.b32  	%r415, %r414, -2147483648;
	mov.b32 	%r416, %f760;
	or.b32  	%r417, %r415, %r416;
	mov.b32 	%f760, %r417;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r301, %r300, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r316, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r317, %r314, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r409, %r408, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r418, %f542;
	and.b32  	%r419, %r418, -2147483648;
	or.b32  	%r420, %r419, 1056964608;
	mov.b32 	%f543, %r420;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r421, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r422, %r421, 1;
	setp.eq.b32 	%p157, %r422, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r423, %r421, 2;
	setp.eq.s32 	%p158, %r423, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r424, %r421, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r147;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r426, %r54, 8388607;
	or.b32  	%r3021, %r426, 1065353216;
	mov.b32 	%f763, %r3021;
	add.s32 	%r427, %r54, -1073741824;
	and.b32  	%r3022, %r427, -8388608;
	setp.eq.s32 	%p169, %r3022, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r428, %r3022, 192937984;
	add.s32 	%r429, %r3021, %r428;
	mov.b32 	%f584, %r429;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3022, %r3022, %r428;
	mov.b32 	%r3021, %f763;
	setp.ne.s32 	%p170, %r3022, 0;
	setp.ne.s32 	%p171, %r3021, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r301, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r318, %r317, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r409, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r425, %r424, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r430, %f104;
	and.b32  	%r431, %r430, -2147483648;
	mov.b32 	%r432, %f764;
	or.b32  	%r433, %r431, %r432;
	mov.b32 	%f764, %r433;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r318, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r425, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r440, %f595;
	and.b32  	%r441, %r440, -2147483648;
	or.b32  	%r442, %r441, 1056964608;
	mov.b32 	%f596, %r442;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r443, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r444, %r443, 1;
	setp.eq.b32 	%p177, %r444, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r445, %r443, 2;
	setp.eq.s32 	%p178, %r445, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r446, %r443, 1;
	and.b32  	%r447, %r446, 2;
	setp.eq.s32 	%p179, %r447, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r268, 1;
	shr.u32 	%r65, %r268, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L742
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r448, %r67, 8388607;
	or.b32  	%r3023, %r448, 1065353216;
	mov.b32 	%f767, %r3023;
	add.s32 	%r449, %r67, -1073741824;
	and.b32  	%r3024, %r449, -8388608;
	setp.eq.s32 	%p190, %r3024, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r3024, 192937984;
	add.s32 	%r451, %r3023, %r450;
	mov.b32 	%f638, %r451;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3024, %r3024, %r450;
	mov.b32 	%r3023, %f767;
	setp.ne.s32 	%p191, %r3024, 0;
	setp.ne.s32 	%p192, %r3023, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r452, %f121;
	and.b32  	%r453, %r452, -2147483648;
	mov.b32 	%r454, %f768;
	or.b32  	%r455, %r453, %r454;
	mov.b32 	%f768, %r455;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r456, %f648;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f649, %r458;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r459, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p198, %r460, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p199, %r461, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	setp.eq.s32 	%p200, %r463, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L781
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r147, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L784
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r464, %r75, 8388607;
	or.b32  	%r3025, %r464, 1065353216;
	mov.b32 	%f773, %r3025;
	add.s32 	%r465, %r75, -1073741824;
	and.b32  	%r3026, %r465, -8388608;
	setp.eq.s32 	%p211, %r3026, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3026, 192937984;
	add.s32 	%r467, %r3025, %r466;
	mov.b32 	%f691, %r467;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3026, %r3026, %r466;
	mov.b32 	%r3025, %f773;
	setp.ne.s32 	%p212, %r3026, 0;
	setp.ne.s32 	%p213, %r3025, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r468, %f142;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f774;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f774, %r471;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r472, %f701;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f702, %r474;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r475, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p219, %r476, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p220, %r477, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p221, %r479, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L818
	mov.b32 	%r290, %f258;
	mov.b32 	%r293, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r398, %f520;
	mov.b32 	%r401, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L827
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L829
	xor.b32  	%r289, %r293, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r341, %f17;
	mov.b32 	%r342, %f740;
	mov.b32 	%r344, %f16;
	mov.b32 	%r345, %f741;
	mov.b32 	%r385, %f754;
	mov.b32 	%r386, %f756;
	mov.b32 	%r388, %f755;
	mov.b32 	%r389, %f757;
	xor.b32  	%r397, %r401, -2147483648;
	mov.b32 	%r436, %f625;
	mov.b32 	%r435, %f103;
	mov.b32 	%r439, %f622;
	mov.b32 	%r438, %f102;
	mov.b32 	%r481, %f778;
	mov.b32 	%r482, %f780;
	mov.b32 	%r484, %f779;
	mov.b32 	%r485, %f781;
	setp.gt.u32 	%p225, %r268, 15;
	mov.u32 	%r172, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L859
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r487, %r268, 6, %r1;
	cvt.u16.u32 	%rs17, %r487;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r488, %rs22;
	and.b32  	%r489, %r488, 255;
	mul.wide.u32 	%rd20, %r489, 4;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.u32 	%r490, [%rd21];
	cvt.s32.s16 	%r491, %r490;
	shr.s32 	%r492, %r490, 16;
	mul.lo.s32 	%r493, %r492, 290;
	mad.lo.s32 	%r172, %r491, 33, %r493;
$L__BB0_138:                            // %pass474
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r289;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r290;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r341;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r343, %r345, %r344;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r385;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	shl.b32 	%r495, %r1, 1;
	and.b32  	%r496, %r495, 2;
	mul.lo.s32 	%r497, %r146, 24;
	shr.u32 	%r173, %r268, 3;
	and.b32  	%r498, %r173, 2;
	or.b32  	%r174, %r63, %r498;
	cvt.u16.u32 	%rs25, %r174;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r499, %rs29;
	and.b32  	%r500, %r499, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r501, %rs30, 8;
	bfe.u32 	%r502, %r268, 3, 1;
	or.b32  	%r503, %r496, %r502;
	add.s32 	%r504, %r497, %r5;
	or.b32  	%r505, %r504, %r503;
	add.s32 	%r506, %r505, %r501;
	mul.wide.u32 	%rd22, %r506, 4;
	add.s64 	%rd23, %rd2, %rd22;
	ld.global.u32 	%r175, [%rd23];
	or.b32  	%r507, %r5, %r502;
	or.b32  	%r508, %r507, %r496;
	cvt.u64.u32 	%rd24, %r501;
	cvt.u64.u32 	%rd25, %r497;
	cvt.u64.u32 	%rd26, %r508;
	add.s64 	%rd27, %rd26, %rd25;
	add.s64 	%rd28, %rd27, %rd24;
	shl.b64 	%rd29, %rd28, 2;
	add.s64 	%rd30, %rd2, %rd29;
	ld.global.u32 	%r176, [%rd30+16];
	cvt.u64.u32 	%rd31, %r503;
	cvt.u64.u32 	%rd32, %r5;
	add.s64 	%rd33, %rd32, %rd25;
	add.s64 	%rd34, %rd33, %rd31;
	add.s64 	%rd35, %rd34, %rd24;
	shl.b64 	%rd36, %rd35, 2;
	add.s64 	%rd37, %rd2, %rd36;
	ld.global.u32 	%r177, [%rd37+384];
	cvt.u64.u32 	%rd38, %r496;
	cvt.u64.u32 	%rd39, %r502;
	add.s64 	%rd40, %rd32, %rd39;
	add.s64 	%rd41, %rd40, %rd38;
	add.s64 	%rd42, %rd41, %rd25;
	add.s64 	%rd43, %rd42, %rd24;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.u32 	%r178, [%rd45+400];
	shl.b32 	%r179, %r263, 16;
	shl.b32 	%r180, %r1, 2;
	shl.b32 	%r509, %r268, 2;
	and.b32  	%r181, %r509, 12;
	and.b32  	%r182, %r509, 16;
	shl.b32 	%r183, %r4, 5;
	and.b32  	%r184, %r268, 4;
	bfe.s32 	%r510, %r268, 2, 1;
	shl.b32 	%r511, %r268, 4;
	and.b32  	%r512, %r159, 8;
	or.b32  	%r513, %r512, %r511;
	bfe.u32 	%r514, %r513, 3, 3;
	mul.lo.s32 	%r185, %r514, 260;
	cvt.u16.u32 	%rs31, %r268;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r515, %rs36;
	and.b32  	%r186, %r515, 255;
	add.s32 	%r516, %r1, 6;
	add.s32 	%r517, %r2, 192;
	and.b32  	%r518, %r517, 224;
	shr.u32 	%r519, %r516, 3;
	mad.lo.s32 	%r187, %r519, 260, %r518;
	add.s32 	%r520, %r1, 12;
	add.s32 	%r521, %r2, 128;
	and.b32  	%r522, %r521, 224;
	shr.u32 	%r523, %r520, 3;
	mad.lo.s32 	%r188, %r523, 260, %r522;
	add.s32 	%r524, %r1, 18;
	add.s32 	%r525, %r2, 64;
	and.b32  	%r526, %r525, 224;
	shr.u32 	%r527, %r524, 3;
	mad.lo.s32 	%r189, %r527, 260, %r526;
	or.b32  	%r190, %r2, 780;
	add.s32 	%r528, %r1, 30;
	shr.u32 	%r529, %r528, 3;
	mad.lo.s32 	%r191, %r529, 260, %r518;
	add.s32 	%r530, %r1, 36;
	shr.u32 	%r531, %r530, 3;
	mad.lo.s32 	%r192, %r531, 260, %r522;
	add.s32 	%r532, %r1, 42;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r193, %r533, 260, %r526;
	or.b32  	%r194, %r2, 1560;
	add.s32 	%r534, %r1, 54;
	shr.u32 	%r535, %r534, 3;
	mad.lo.s32 	%r195, %r535, 260, %r518;
	add.s32 	%r536, %r1, 60;
	bfe.u32 	%r537, %r536, 3, 3;
	mad.lo.s32 	%r196, %r537, 260, %r522;
	mul.lo.s32 	%r538, %r146, 870;
	shr.u32 	%r539, %r1, 1;
	cvt.u16.u32 	%rs37, %r539;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r540, %rs42;
	and.b32  	%r197, %r540, 255;
	mad.lo.s32 	%r541, %r503, 33, %r538;
	mad.lo.s32 	%r198, %r500, 290, %r541;
	add.s32 	%r199, %r198, 132;
	setp.lt.u32 	%p227, %r268, 4;
	setp.eq.s32 	%p228, %r147, 1;
	setp.eq.s32 	%p229, %r147, 4;
	setp.eq.s32 	%p230, %r147, 5;
	bfe.s32 	%r542, %r268, 3, 1;
	and.b32  	%r200, %r542, 98;
	and.b32  	%r201, %r510, 196;
	or.b32  	%r202, %r496, %r65;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r203, 0, 784, %p231;
	selp.b32 	%r204, 0, 392, %p121;
	add.s32 	%r543, %r201, %r200;
	add.s32 	%r544, %r543, %r202;
	add.s32 	%r545, %r544, %r203;
	add.s32 	%r205, %r545, %r204;
	add.s32 	%r546, %r543, 1576;
	add.s32 	%r547, %r546, %r202;
	add.s32 	%r548, %r547, %r203;
	add.s32 	%r206, %r548, %r204;
	or.b32  	%r549, %r202, 4;
	add.s32 	%r550, %r543, %r549;
	add.s32 	%r551, %r550, %r203;
	add.s32 	%r207, %r551, %r204;
	add.s32 	%r552, %r546, %r549;
	add.s32 	%r553, %r552, %r203;
	add.s32 	%r208, %r553, %r204;
	add.s32 	%r554, %r543, 1584;
	add.s32 	%r555, %r554, %r202;
	add.s32 	%r556, %r555, %r203;
	add.s32 	%r209, %r556, %r204;
	add.s32 	%r210, %r207, 8;
	add.s32 	%r557, %r554, %r549;
	add.s32 	%r558, %r557, %r203;
	add.s32 	%r211, %r558, %r204;
	shr.u32 	%r559, %r1, 2;
	bfe.s32 	%r560, %r1, 1, 1;
	and.b32  	%r561, %r560, 196;
	and.b32  	%r562, %r159, 6;
	and.b32  	%r563, %r1, 1;
	neg.s32 	%r564, %r563;
	and.b32  	%r565, %r564, 392;
	and.b32  	%r566, %r542, 1576;
	mad.lo.s32 	%r567, %r559, 98, %r562;
	or.b32  	%r568, %r567, %r63;
	mad.lo.s32 	%r569, %r65, 784, %r568;
	add.s32 	%r570, %r569, %r561;
	add.s32 	%r571, %r570, %r565;
	add.s32 	%r212, %r571, %r566;
	add.s32 	%r213, %r212, 8;
	mul.lo.s32 	%r572, %r265, 393216;
	or.b32  	%r573, %r173, %r180;
	cvt.u16.u32 	%rs43, %r573;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r574, %rs49;
	and.b32  	%r575, %r574, 248;
	and.b32  	%r576, %r268, 7;
	or.b32  	%r577, %r5, %r576;
	add.s32 	%r214, %r577, %r575;
	cvt.s64.s32 	%rd6, %r572;
	add.s32 	%r578, %r198, %r197;
	mul.wide.u32 	%rd46, %r578, 4;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd7, %rd47, %rd46;
	add.s32 	%r579, %r199, %r197;
	mul.wide.u32 	%rd48, %r579, 4;
	add.s64 	%rd8, %rd47, %rd48;
	cvt.u64.u32 	%rd49, %r198;
	cvt.u64.u16 	%rd50, %rs42;
	and.b64  	%rd51, %rd50, 255;
	add.s64 	%rd52, %rd49, %rd51;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd47, %rd53;
	cvt.u64.u32 	%rd54, %r199;
	add.s64 	%rd55, %rd54, %rd51;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd10, %rd47, %rd56;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r580, %r268, 24;
	setp.eq.s32 	%p233, %r580, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r580, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r215, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r216, 1145324612, -286331154, %p232;
	add.s32 	%r581, %r147, -1;
	setp.lt.u32 	%p238, %r581, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r580, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r217, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r85, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r239, %r216, %r217, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r105, %r85;
	mov.u32 	%r106, %r85;
	mov.u32 	%r107, %r85;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30822
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r145, %r85, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r85, 4032;
	mov.u32 	%r85, %r145;
	@%p291 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r582, %r85, %r263;
	setp.lt.s32 	%p240, %r582, %r264;
	@%p240 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem769
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p241, %r174, 3;
	setp.gt.u32 	%p242, %r1, 3;
	setp.eq.s32 	%p243, %r184, 0;
	mul.hi.u32 	%r680, %r85, -1431655765;
	shr.u32 	%r681, %r680, 5;
	mul.lo.s32 	%r682, %r681, 48;
	or.b32  	%r683, %r682, %r173;
	add.s32 	%r684, %r683, %r180;
	shr.s32 	%r685, %r684, 31;
	shr.u32 	%r686, %r685, 20;
	add.s32 	%r687, %r684, %r686;
	and.b32  	%r688, %r687, 61440;
	sub.s32 	%r689, %r684, %r688;
	shl.b32 	%r690, %r689, 16;
	or.b32  	%r691, %r690, %r181;
	or.b32  	%r692, %r691, %r182;
	or.b32  	%r693, %r692, %r183;
	add.s32 	%r694, %r693, %r179;
	shr.s32 	%r695, %r694, 31;
	shr.u32 	%r696, %r695, 4;
	add.s32 	%r697, %r694, %r696;
	shr.s32 	%r698, %r697, 28;
	setp.lt.s32 	%p244, %r694, 0;
	and.b32  	%r699, %r697, -268435456;
	setp.ne.s32 	%p245, %r699, %r694;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r700, 1, 0, %p246;
	sub.s32 	%r701, %r700, %r698;
	shl.b32 	%r702, %r701, 28;
	add.s32 	%r703, %r702, %r694;
	mul.wide.s32 	%rd57, %r703, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r704, %r705, %r706, %r707}, [%rd58];
	add.s32 	%r708, %r684, 24;
	shr.s32 	%r709, %r708, 31;
	shr.u32 	%r710, %r709, 20;
	add.s32 	%r711, %r708, %r710;
	and.b32  	%r712, %r711, 61440;
	sub.s32 	%r713, %r708, %r712;
	shl.b32 	%r714, %r713, 16;
	or.b32  	%r715, %r714, %r181;
	or.b32  	%r716, %r715, %r182;
	or.b32  	%r717, %r716, %r183;
	add.s32 	%r718, %r717, %r179;
	shr.s32 	%r719, %r718, 31;
	shr.u32 	%r720, %r719, 4;
	add.s32 	%r721, %r718, %r720;
	shr.s32 	%r722, %r721, 28;
	setp.lt.s32 	%p247, %r718, 0;
	and.b32  	%r723, %r721, -268435456;
	setp.ne.s32 	%p248, %r723, %r718;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r724, 1, 0, %p249;
	sub.s32 	%r725, %r724, %r722;
	shl.b32 	%r726, %r725, 28;
	add.s32 	%r727, %r726, %r718;
	mul.wide.s32 	%rd59, %r727, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r728, %r729, %r730, %r731}, [%rd60];
	selp.b32 	%r732, %r706, %r704, %p243;
	shfl.sync.bfly.b32	%r733, %r732, 4, 31, -1;
	selp.b32 	%r585, %r704, %r733, %p243;
	selp.b32 	%r590, %r733, %r706, %p243;
	selp.b32 	%r734, %r707, %r705, %p243;
	shfl.sync.bfly.b32	%r735, %r734, 4, 31, -1;
	selp.b32 	%r593, %r705, %r735, %p243;
	selp.b32 	%r598, %r735, %r707, %p243;
	selp.b32 	%r736, %r730, %r728, %p243;
	shfl.sync.bfly.b32	%r737, %r736, 4, 31, -1;
	selp.b32 	%r601, %r728, %r737, %p243;
	selp.b32 	%r606, %r737, %r730, %p243;
	selp.b32 	%r738, %r731, %r729, %p243;
	shfl.sync.bfly.b32	%r739, %r738, 4, 31, -1;
	selp.b32 	%r609, %r729, %r739, %p243;
	selp.b32 	%r614, %r739, %r731, %p243;
	shl.b32 	%r586, %r590, 4;
	mov.u32 	%r584, 252645135;
	// begin inline asm
	lop3.b32 %r616, %r584, %r585, %r586, 202;
	// end inline asm
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r632, %r584, %r589, %r590, 202;
	// end inline asm
	shl.b32 	%r594, %r598, 4;
	// begin inline asm
	lop3.b32 %r624, %r584, %r593, %r594, 202;
	// end inline asm
	shr.u32 	%r597, %r593, 4;
	// begin inline asm
	lop3.b32 %r640, %r584, %r597, %r598, 202;
	// end inline asm
	shl.b32 	%r602, %r606, 4;
	// begin inline asm
	lop3.b32 %r617, %r584, %r601, %r602, 202;
	// end inline asm
	shr.u32 	%r605, %r601, 4;
	// begin inline asm
	lop3.b32 %r633, %r584, %r605, %r606, 202;
	// end inline asm
	shl.b32 	%r610, %r614, 4;
	// begin inline asm
	lop3.b32 %r625, %r584, %r609, %r610, 202;
	// end inline asm
	shr.u32 	%r613, %r609, 4;
	// begin inline asm
	lop3.b32 %r641, %r584, %r613, %r614, 202;
	// end inline asm
	mov.u32 	%r618, 25152;
	// begin inline asm
	prmt.b32 %r648, %r616, %r617, %r618;
	// end inline asm
	mov.u32 	%r622, 29521;
	// begin inline asm
	prmt.b32 %r664, %r616, %r617, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r624, %r625, %r618;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r624, %r625, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r632, %r633, %r618;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r632, %r633, %r622;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r640, %r641, %r618;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r640, %r641, %r622;
	// end inline asm
	mov.u32 	%r674, 21520;
	// begin inline asm
	prmt.b32 %r647, %r648, %r649, %r674;
	// end inline asm
	mov.u32 	%r678, 30258;
	// begin inline asm
	prmt.b32 %r651, %r648, %r649, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r664, %r665, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r664, %r665, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r672, %r673, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r672, %r673, %r678;
	// end inline asm
	mul.hi.s32 	%r740, %r684, 715827883;
	shr.u32 	%r741, %r740, 31;
	shr.s32 	%r742, %r740, 2;
	add.s32 	%r743, %r742, %r741;
	mul.lo.s32 	%r744, %r743, 24;
	sub.s32 	%r745, %r684, %r744;
	add.s32 	%r746, %r745, %r185;
	mul.wide.s32 	%rd61, %r746, 4;
	add.s64 	%rd63, %rd47, %rd61;
	st.shared.u32 	[%rd63], %r647;
	add.s32 	%r747, %r746, 128;
	mul.wide.u32 	%rd64, %r747, 4;
	add.s64 	%rd65, %rd47, %rd64;
	st.shared.u32 	[%rd65], %r655;
	add.s32 	%r748, %r746, 64;
	mul.wide.u32 	%rd66, %r748, 4;
	add.s64 	%rd67, %rd47, %rd66;
	st.shared.u32 	[%rd67], %r651;
	add.s32 	%r749, %r746, 192;
	mul.wide.u32 	%rd68, %r749, 4;
	add.s64 	%rd69, %rd47, %rd68;
	st.shared.u32 	[%rd69], %r659;
	add.s32 	%r750, %r746, 32;
	mul.wide.u32 	%rd70, %r750, 4;
	add.s64 	%rd71, %rd47, %rd70;
	st.shared.u32 	[%rd71], %r663;
	add.s32 	%r751, %r746, 160;
	mul.wide.u32 	%rd72, %r751, 4;
	add.s64 	%rd73, %rd47, %rd72;
	st.shared.u32 	[%rd73], %r671;
	add.s32 	%r752, %r746, 96;
	mul.wide.u32 	%rd74, %r752, 4;
	add.s64 	%rd75, %rd47, %rd74;
	st.shared.u32 	[%rd75], %r667;
	add.s32 	%r753, %r746, 224;
	mul.wide.u32 	%rd76, %r753, 4;
	add.s64 	%rd77, %rd47, %rd76;
	st.shared.u32 	[%rd77], %r675;
	bar.sync 	0;
	add.s32 	%r754, %r682, %r186;
	cvt.u16.u32 	%rs50, %r754;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r755, %rs56;
	add.s32 	%r756, %r2, %r755;
	mul.wide.s32 	%rd78, %r756, 4;
	add.s64 	%rd79, %rd47, %rd78;
	ld.shared.u32 	%r757, [%rd79];
	add.s32 	%r758, %r187, %r755;
	mul.wide.s32 	%rd80, %r758, 4;
	add.s64 	%rd81, %rd47, %rd80;
	ld.shared.u32 	%r759, [%rd81];
	add.s32 	%r760, %r188, %r755;
	mul.wide.u32 	%rd82, %r760, 4;
	add.s64 	%rd83, %rd47, %rd82;
	ld.shared.u32 	%r761, [%rd83];
	add.s32 	%r762, %r189, %r755;
	mul.wide.u32 	%rd84, %r762, 4;
	add.s64 	%rd85, %rd47, %rd84;
	ld.shared.u32 	%r763, [%rd85];
	add.s32 	%r764, %r190, %r755;
	mul.wide.u32 	%rd86, %r764, 4;
	add.s64 	%rd87, %rd47, %rd86;
	ld.shared.u32 	%r765, [%rd87];
	add.s32 	%r766, %r191, %r755;
	mul.wide.u32 	%rd88, %r766, 4;
	add.s64 	%rd89, %rd47, %rd88;
	ld.shared.u32 	%r767, [%rd89];
	add.s32 	%r768, %r192, %r755;
	mul.wide.u32 	%rd90, %r768, 4;
	add.s64 	%rd91, %rd47, %rd90;
	ld.shared.u32 	%r769, [%rd91];
	add.s32 	%r770, %r193, %r755;
	mul.wide.u32 	%rd92, %r770, 4;
	add.s64 	%rd93, %rd47, %rd92;
	ld.shared.u32 	%r771, [%rd93];
	add.s32 	%r772, %r194, %r755;
	mul.wide.u32 	%rd94, %r772, 4;
	add.s64 	%rd95, %rd47, %rd94;
	ld.shared.u32 	%r773, [%rd95];
	add.s32 	%r774, %r195, %r755;
	mul.wide.u32 	%rd96, %r774, 4;
	add.s64 	%rd97, %rd47, %rd96;
	ld.shared.u32 	%r775, [%rd97];
	add.s32 	%r776, %r196, %r755;
	mul.wide.s32 	%rd98, %r776, 4;
	add.s64 	%rd99, %rd47, %rd98;
	ld.shared.u32 	%r777, [%rd99];
	bar.sync 	0;
	shfl.sync.idx.b32	%r778, %r172, 0, 31, -1;
	shfl.sync.idx.b32	%r779, %r172, 1, 31, -1;
	shfl.sync.idx.b32	%r780, %r172, 2, 31, -1;
	shfl.sync.idx.b32	%r781, %r172, 3, 31, -1;
	shfl.sync.idx.b32	%r782, %r172, 4, 31, -1;
	shfl.sync.idx.b32	%r783, %r172, 5, 31, -1;
	shfl.sync.idx.b32	%r784, %r172, 6, 31, -1;
	shfl.sync.idx.b32	%r785, %r172, 7, 31, -1;
	shfl.sync.idx.b32	%r786, %r172, 8, 31, -1;
	shfl.sync.idx.b32	%r787, %r172, 9, 31, -1;
	shfl.sync.idx.b32	%r788, %r172, 10, 31, -1;
	shfl.sync.idx.b32	%r789, %r172, 11, 31, -1;
	shfl.sync.idx.b32	%r790, %r172, 12, 31, -1;
	shfl.sync.idx.b32	%r791, %r172, 13, 31, -1;
	shfl.sync.idx.b32	%r792, %r172, 14, 31, -1;
	shfl.sync.idx.b32	%r793, %r172, 15, 31, -1;
	add.s32 	%r794, %r778, %r755;
	mul.wide.s32 	%rd100, %r794, 4;
	add.s64 	%rd101, %rd47, %rd100;
	st.shared.u32 	[%rd101], %r757;
	add.s32 	%r795, %r779, %r755;
	mul.wide.s32 	%rd102, %r795, 4;
	add.s64 	%rd103, %rd47, %rd102;
	st.shared.u32 	[%rd103], %r759;
	add.s32 	%r796, %r780, %r755;
	mul.wide.s32 	%rd104, %r796, 4;
	add.s64 	%rd105, %rd47, %rd104;
	st.shared.u32 	[%rd105], %r761;
	add.s32 	%r797, %r781, %r755;
	mul.wide.s32 	%rd106, %r797, 4;
	add.s64 	%rd107, %rd47, %rd106;
	st.shared.u32 	[%rd107], %r763;
	add.s32 	%r798, %r782, %r755;
	mul.wide.s32 	%rd108, %r798, 4;
	add.s64 	%rd109, %rd47, %rd108;
	st.shared.u32 	[%rd109], %r765;
	add.s32 	%r799, %r783, %r755;
	mul.wide.s32 	%rd110, %r799, 4;
	add.s64 	%rd111, %rd47, %rd110;
	st.shared.u32 	[%rd111], %r767;
	add.s32 	%r800, %r784, %r755;
	mul.wide.s32 	%rd112, %r800, 4;
	add.s64 	%rd113, %rd47, %rd112;
	st.shared.u32 	[%rd113], %r769;
	add.s32 	%r801, %r785, %r755;
	mul.wide.s32 	%rd114, %r801, 4;
	add.s64 	%rd115, %rd47, %rd114;
	st.shared.u32 	[%rd115], %r771;
	add.s32 	%r802, %r786, %r755;
	mul.wide.s32 	%rd116, %r802, 4;
	add.s64 	%rd117, %rd47, %rd116;
	st.shared.u32 	[%rd117], %r773;
	add.s32 	%r803, %r787, %r755;
	mul.wide.s32 	%rd118, %r803, 4;
	add.s64 	%rd119, %rd47, %rd118;
	st.shared.u32 	[%rd119], %r775;
	selp.b32 	%r804, 0, %r777, %p242;
	add.s32 	%r805, %r788, %r755;
	mul.wide.s32 	%rd120, %r805, 4;
	add.s64 	%rd121, %rd47, %rd120;
	st.shared.u32 	[%rd121], %r804;
	add.s32 	%r806, %r789, %r755;
	mul.wide.s32 	%rd122, %r806, 4;
	add.s64 	%rd123, %rd47, %rd122;
	mov.u32 	%r679, 0;
	st.shared.u32 	[%rd123], %r679;
	add.s32 	%r807, %r790, %r755;
	mul.wide.s32 	%rd124, %r807, 4;
	add.s64 	%rd125, %rd47, %rd124;
	st.shared.u32 	[%rd125], %r679;
	add.s32 	%r808, %r791, %r755;
	mul.wide.s32 	%rd126, %r808, 4;
	add.s64 	%rd127, %rd47, %rd126;
	st.shared.u32 	[%rd127], %r679;
	add.s32 	%r809, %r792, %r755;
	mul.wide.s32 	%rd128, %r809, 4;
	add.s64 	%rd129, %rd47, %rd128;
	st.shared.u32 	[%rd129], %r679;
	add.s32 	%r810, %r793, %r755;
	mul.wide.s32 	%rd130, %r810, 4;
	add.s64 	%rd131, %rd47, %rd130;
	st.shared.u32 	[%rd131], %r679;
	bar.sync 	0;
	mov.u32 	%r89, %r679;
	mov.u32 	%r90, %r679;
	mov.u32 	%r91, %r679;
	mov.u32 	%r92, %r679;
	mov.u32 	%r93, %r679;
	mov.u32 	%r94, %r679;
	mov.u32 	%r95, %r679;
	mov.u32 	%r96, %r679;
	mov.u32 	%r97, %r679;
	mov.u32 	%r98, %r679;
	mov.u32 	%r99, %r679;
	mov.u32 	%r100, %r679;
	mov.u32 	%r101, %r679;
	mov.u32 	%r102, %r679;
	mov.u32 	%r103, %r679;
	mov.u32 	%r104, %r679;
	@%p241 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2667
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r218, %r682, %r197;
	ld.shared.u32 	%r89, [%rd7];
	ld.shared.u32 	%r90, [%rd8];
	ld.shared.u32 	%r91, [%rd9+12];
	ld.shared.u32 	%r92, [%rd10+12];
	ld.shared.u32 	%r93, [%rd9+24];
	ld.shared.u32 	%r94, [%rd10+24];
	ld.shared.u32 	%r95, [%rd9+36];
	ld.shared.u32 	%r96, [%rd10+36];
	add.s32 	%r811, %r218, 12;
	mul.hi.u32 	%r812, %r811, -1431655765;
	shr.u32 	%r813, %r812, 4;
	mul.lo.s32 	%r814, %r813, 24;
	sub.s32 	%r815, %r811, %r814;
	add.s32 	%r816, %r198, %r815;
	mul.wide.u32 	%rd132, %r816, 4;
	add.s64 	%rd134, %rd47, %rd132;
	ld.shared.u32 	%r97, [%rd134];
	add.s32 	%r817, %r199, %r815;
	mul.wide.u32 	%rd135, %r817, 4;
	add.s64 	%rd136, %rd47, %rd135;
	ld.shared.u32 	%r98, [%rd136];
	cvt.u16.u32 	%rs57, %r218;
	add.s16 	%rs58, %rs57, 15;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r818, %rs64;
	add.s32 	%r819, %r198, %r818;
	mul.wide.s32 	%rd137, %r819, 4;
	add.s64 	%rd138, %rd47, %rd137;
	ld.shared.u32 	%r99, [%rd138];
	add.s32 	%r820, %r199, %r818;
	mul.wide.u32 	%rd139, %r820, 4;
	add.s64 	%rd140, %rd47, %rd139;
	ld.shared.u32 	%r100, [%rd140];
	add.s16 	%rs65, %rs57, 18;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r821, %rs71;
	add.s32 	%r822, %r198, %r821;
	mul.wide.s32 	%rd141, %r822, 4;
	add.s64 	%rd142, %rd47, %rd141;
	ld.shared.u32 	%r101, [%rd142];
	add.s32 	%r823, %r199, %r821;
	mul.wide.u32 	%rd143, %r823, 4;
	add.s64 	%rd144, %rd47, %rd143;
	ld.shared.u32 	%r102, [%rd144];
	add.s16 	%rs72, %rs57, 21;
	mul.hi.s16 	%rs73, %rs72, 10923;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 2;
	add.s16 	%rs76, %rs75, %rs74;
	mul.lo.s16 	%rs77, %rs76, 24;
	sub.s16 	%rs78, %rs72, %rs77;
	cvt.s32.s16 	%r824, %rs78;
	add.s32 	%r825, %r198, %r824;
	mul.wide.s32 	%rd145, %r825, 4;
	add.s64 	%rd146, %rd47, %rd145;
	ld.shared.u32 	%r103, [%rd146];
	add.s32 	%r826, %r199, %r824;
	mul.wide.u32 	%rd147, %r826, 4;
	add.s64 	%rd148, %rd47, %rd147;
	ld.shared.u32 	%r104, [%rd148];
$L__BB0_139:                            // %L8745
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r108, %r679;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19773
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, 0;
	mov.u32 	%r107, %r105;
$L__BB0_148:                            // %L19774
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r108, %r108, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r108, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8763
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r108, 0;
	selp.b32 	%r1220, %r89, 0, %p250;
	setp.eq.s32 	%p251, %r108, 6;
	selp.b32 	%r1221, %r93, %r1220, %p251;
	setp.eq.s32 	%p252, %r108, 12;
	selp.b32 	%r1222, %r97, %r1221, %p252;
	setp.eq.s32 	%p253, %r108, 18;
	selp.b32 	%r1223, %r101, %r1222, %p253;
	selp.b32 	%r1224, %r90, 0, %p250;
	selp.b32 	%r1225, %r94, %r1224, %p251;
	selp.b32 	%r1226, %r98, %r1225, %p252;
	selp.b32 	%r1227, %r102, %r1226, %p253;
	selp.b32 	%r1228, %r91, 0, %p250;
	selp.b32 	%r1229, %r95, %r1228, %p251;
	selp.b32 	%r1230, %r99, %r1229, %p252;
	selp.b32 	%r1231, %r103, %r1230, %p253;
	selp.b32 	%r1232, %r92, 0, %p250;
	selp.b32 	%r1233, %r96, %r1232, %p251;
	selp.b32 	%r1234, %r100, %r1233, %p252;
	selp.b32 	%r1235, %r104, %r1234, %p253;
	mov.u16 	%rs116, 25600;
	// begin inline asm
	mov.b32 %r833, {%rs116, %rs116};
	// end inline asm
	mov.u16 	%rs118, 21504;
	// begin inline asm
	mov.b32 %r844, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r832, %r1223, -2004318072;
	mov.u32 	%r969, 983055;
	// begin inline asm
	lop3.b32 %r830, %r969, %r832, %r833, 202;
	// end inline asm
	mov.u16 	%rs122, 18432;
	// begin inline asm
	mov.b32 %r834, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r835, %r833, %r834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r838, %r830, %r835;
	// end inline asm
	mov.u32 	%r980, 15728880;
	// begin inline asm
	lop3.b32 %r841, %r980, %r832, %r844, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r846, %r844, %r845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r849, %r841, %r846;
	// end inline asm
	// begin inline asm
	mov.b32 %r879, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r878, %r1227, -2004318072;
	// begin inline asm
	lop3.b32 %r876, %r969, %r878, %r879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r881, %r879, %r880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r884, %r876, %r881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r887, %r980, %r878, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r924, %r1231, -2004318072;
	// begin inline asm
	lop3.b32 %r922, %r969, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r980, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs118, %rs118};
	// end inline asm
	xor.b32  	%r970, %r1235, -2004318072;
	// begin inline asm
	lop3.b32 %r968, %r969, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r980, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r838;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1012, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r884;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1015, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r849;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1018, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1021, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r930;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1024, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1036, %r1037}, {%r288, %r291}, {%r1012}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1043, %r1044}, {%r288, %r291}, {%r1015}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1050, %r1051}, {%r288, %r291}, {%r1018}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1057, %r1058}, {%r288, %r291}, {%r1021}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1064, %r1065}, {%r288, %r291}, {%r1024}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1071, %r1072}, {%r288, %r291}, {%r1027}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1078, %r1079}, {%r288, %r291}, {%r1030}, {%r679, %r679};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1085, %r1086}, {%r288, %r291}, {%r1033}, {%r679, %r679};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass4004
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1092, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1094, %r1092, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r340, %r1036, %r1094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1101, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1103, %r1101, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r340, %r1043, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1110, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1112, %r1110, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r340, %r1050, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1119, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1121, %r1119, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r340, %r1057, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1128, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r340, %r1064, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r340, %r1071, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r340, %r1078, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r340, %r1085, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r343, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r340, %r1037, %r1164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r343, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r340, %r1044, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r343, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r340, %r1051, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r343, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r340, %r1058, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r343, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r340, %r1065, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r343, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r340, %r1072, %r1199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r343, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r340, %r1079, %r1206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r343, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r340, %r1086, %r1213;
	// end inline asm
	mov.u32 	%r1385, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r384, %r387}, {%r1097, %r1167}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r384, %r387}, {%r1106, %r1174}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1325, %r1326}, {%r384, %r387}, {%r1115, %r1181}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1333, %r1334}, {%r384, %r387}, {%r1124, %r1188}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r384, %r387}, {%r1133, %r1195}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r384, %r387}, {%r1142, %r1202}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1357, %r1358}, {%r384, %r387}, {%r1151, %r1209}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1365, %r1366}, {%r384, %r387}, {%r1160, %r1216}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1309, %r1310, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1309, %r1310, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1317, %r1318, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1317, %r1318, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1324, %r1325, %r1326, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1325, %r1326, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1333, %r1334, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1333, %r1334, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r1341, %r1342, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1344, %r1341, %r1342, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1349, %r1350, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1349, %r1350, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1356, %r1357, %r1358, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1360, %r1357, %r1358, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1364, %r1365, %r1366, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1368, %r1365, %r1366, %r678;
	// end inline asm
	add.s16 	%rs127, %rs9, %rs3;
	add.s16 	%rs128, %rs127, -5;
	mul.hi.s16 	%rs129, %rs128, 10923;
	shr.u16 	%rs130, %rs129, 15;
	add.s16 	%rs131, %rs129, %rs130;
	mul.lo.s16 	%rs132, %rs131, 6;
	sub.s16 	%rs133, %rs128, %rs132;
	mul.wide.s16 	%r1418, %rs133, 16;
	add.s32 	%r1419, %r205, %r1418;
	mul.wide.s32 	%rd151, %r1419, 4;
	add.s64 	%rd153, %rd47, %rd151;
	st.shared.u32 	[%rd153], %r1308;
	add.s32 	%r1420, %r206, %r1418;
	mul.wide.u32 	%rd154, %r1420, 4;
	add.s64 	%rd155, %rd47, %rd154;
	st.shared.u32 	[%rd155], %r1312;
	add.s32 	%r1421, %r207, %r1418;
	mul.wide.s32 	%rd156, %r1421, 4;
	add.s64 	%rd157, %rd47, %rd156;
	st.shared.u32 	[%rd157], %r1316;
	add.s32 	%r1422, %r208, %r1418;
	mul.wide.u32 	%rd158, %r1422, 4;
	add.s64 	%rd159, %rd47, %rd158;
	st.shared.u32 	[%rd159], %r1320;
	cvt.s64.s32 	%rd160, %r1418;
	cvt.u64.u32 	%rd161, %r204;
	cvt.u64.u32 	%rd162, %r203;
	cvt.u64.u32 	%rd163, %r202;
	cvt.u64.u32 	%rd164, %r201;
	cvt.u64.u32 	%rd165, %r200;
	add.s64 	%rd166, %rd165, %rd164;
	add.s64 	%rd167, %rd166, %rd163;
	add.s64 	%rd168, %rd167, %rd162;
	add.s64 	%rd11, %rd168, %rd161;
	add.s64 	%rd169, %rd11, %rd160;
	shl.b64 	%rd170, %rd169, 2;
	add.s64 	%rd171, %rd47, %rd170;
	st.shared.u32 	[%rd171+32], %r1324;
	add.s32 	%r1423, %r209, %r1418;
	mul.wide.u32 	%rd172, %r1423, 4;
	add.s64 	%rd173, %rd47, %rd172;
	st.shared.u32 	[%rd173], %r1328;
	add.s32 	%r1424, %r210, %r1418;
	mul.wide.s32 	%rd174, %r1424, 4;
	add.s64 	%rd175, %rd47, %rd174;
	st.shared.u32 	[%rd175], %r1332;
	add.s32 	%r1425, %r211, %r1418;
	mul.wide.u32 	%rd176, %r1425, 4;
	add.s64 	%rd177, %rd47, %rd176;
	st.shared.u32 	[%rd177], %r1336;
	add.s16 	%rs134, %rs127, -2;
	mul.hi.s16 	%rs135, %rs134, 10923;
	shr.u16 	%rs136, %rs135, 15;
	add.s16 	%rs137, %rs135, %rs136;
	mul.lo.s16 	%rs138, %rs137, 6;
	sub.s16 	%rs139, %rs134, %rs138;
	mul.wide.s16 	%r1426, %rs139, 16;
	add.s32 	%r1427, %r205, %r1426;
	mul.wide.s32 	%rd178, %r1427, 4;
	add.s64 	%rd179, %rd47, %rd178;
	st.shared.u32 	[%rd179], %r1340;
	add.s32 	%r1428, %r206, %r1426;
	mul.wide.u32 	%rd180, %r1428, 4;
	add.s64 	%rd181, %rd47, %rd180;
	st.shared.u32 	[%rd181], %r1344;
	add.s32 	%r1429, %r207, %r1426;
	mul.wide.s32 	%rd182, %r1429, 4;
	add.s64 	%rd183, %rd47, %rd182;
	st.shared.u32 	[%rd183], %r1348;
	add.s32 	%r1430, %r208, %r1426;
	mul.wide.u32 	%rd184, %r1430, 4;
	add.s64 	%rd185, %rd47, %rd184;
	st.shared.u32 	[%rd185], %r1352;
	cvt.s64.s32 	%rd186, %r1426;
	add.s64 	%rd187, %rd11, %rd186;
	shl.b64 	%rd188, %rd187, 2;
	add.s64 	%rd189, %rd47, %rd188;
	st.shared.u32 	[%rd189+32], %r1356;
	add.s32 	%r1431, %r209, %r1426;
	mul.wide.u32 	%rd190, %r1431, 4;
	add.s64 	%rd191, %rd47, %rd190;
	st.shared.u32 	[%rd191], %r1360;
	add.s32 	%r1432, %r210, %r1426;
	mul.wide.s32 	%rd192, %r1432, 4;
	add.s64 	%rd193, %rd47, %rd192;
	st.shared.u32 	[%rd193], %r1364;
	add.s32 	%r1433, %r211, %r1426;
	mul.wide.u32 	%rd194, %r1433, 4;
	add.s64 	%rd195, %rd47, %rd194;
	st.shared.u32 	[%rd195], %r1368;
	bar.sync 	0;
	add.s16 	%rs140, %rs3, -5;
	mul.hi.s16 	%rs141, %rs140, 10923;
	shr.u16 	%rs142, %rs141, 15;
	add.s16 	%rs143, %rs141, %rs142;
	mul.lo.s16 	%rs144, %rs143, 6;
	sub.s16 	%rs145, %rs140, %rs144;
	mul.wide.s16 	%r1434, %rs145, 16;
	add.s32 	%r1435, %r212, %r1434;
	mul.wide.s32 	%rd196, %r1435, 4;
	add.s64 	%rd197, %rd47, %rd196;
	ld.shared.u32 	%r1376, [%rd197];
	add.s32 	%r1436, %r213, %r1434;
	mul.wide.s32 	%rd198, %r1436, 4;
	add.s64 	%rd199, %rd47, %rd198;
	ld.shared.u32 	%r1383, [%rd199];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r396, %r399}, {%r1376}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1379, %r1380}, {%r396, %r399}, {%r1383}, {%r1385, %r1385};
	// end inline asm
	@%p254 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6644
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1386, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r434, %r1372, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r434, %r1379, %r1397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1404, %r437, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r434, %r1373, %r1404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r437, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r434, %r1380, %r1411;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1456, %r1459}, {%r480, %r483}, {%r1391, %r1407}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1463, %r1467}, {%r480, %r483}, {%r1400, %r1414}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r1456, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r1459, %r1459, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r1463, %r1463, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r1467, %r1467, %r1462;
	// end inline asm
	mov.u32 	%r1554, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1470, %r1554, %r1466, %r107;
	// end inline asm
	add.s32 	%r1557, %r85, %r108;
	add.s32 	%r1558, %r1557, 1;
	mul.hi.u32 	%r1559, %r1558, -1431655765;
	shr.u32 	%r1560, %r1559, 2;
	mul.lo.s32 	%r1561, %r1560, 6;
	sub.s32 	%r1562, %r1558, %r1561;
	shl.b32 	%r1563, %r1562, 4;
	add.s32 	%r1564, %r212, %r1563;
	mul.wide.u32 	%rd202, %r1564, 4;
	add.s64 	%rd204, %rd47, %rd202;
	ld.shared.u32 	%r1478, [%rd204];
	add.s32 	%r1565, %r213, %r1563;
	mul.wide.u32 	%rd205, %r1565, 4;
	add.s64 	%rd206, %rd47, %rd205;
	ld.shared.u32 	%r1485, [%rd206];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1495, %r1492}, {%r396, %r399}, {%r1478}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1504, %r1501}, {%r396, %r399}, {%r1485}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1488, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r1488, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r434, %r1495, %r1490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1497, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r1497, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r434, %r1504, %r1499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r437, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r434, %r1492, %r1506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r437, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r434, %r1501, %r1513;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1539, %r1542}, {%r480, %r483}, {%r1493, %r1509}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1546, %r1550}, {%r480, %r483}, {%r1502, %r1516}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r1539, %r1539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r1542, %r1542, %r1538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1545, %r1546, %r1546, %r1541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1549, %r1550, %r1550, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r1554, %r1549, %r1470;
	// end inline asm
	add.s32 	%r3066, %r105, 2;
	setp.eq.s32 	%p255, %r3066, 40;
	setp.lt.u32 	%p297, %r268, 8;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15639
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass7062
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1566, %r106, 393216, %r214;
	cvt.u64.u32 	%rd207, %r1566;
	add.s64 	%rd208, %rd207, %rd6;
	mul.hi.s64 	%rd209, %rd208, 3074457345618258603;
	shr.u64 	%rd210, %rd209, 63;
	shr.s64 	%rd211, %rd209, 23;
	add.s64 	%rd212, %rd211, %rd210;
	setp.lt.s64 	%p257, %rd208, 0;
	mul.lo.s64 	%rd213, %rd212, 50331648;
	setp.ne.s64 	%p258, %rd213, %rd208;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd214, -1, 0, %p259;
	add.s64 	%rd215, %rd212, %rd214;
	mul.lo.s64 	%rd216, %rd215, -50331648;
	add.s64 	%rd217, %rd216, %rd208;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3068;
$L__BB0_143:                            // %L15853
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3066, 0;
	mov.u32 	%r3068, %r3066;
$L__BB0_195:                            // %oksrem7137
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs146, %rs3, -3;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	add.s16 	%rs149, %rs147, %rs148;
	mul.lo.s16 	%rs150, %rs149, 6;
	sub.s16 	%rs151, %rs146, %rs150;
	mul.wide.s16 	%r1734, %rs151, 16;
	add.s32 	%r1735, %r212, %r1734;
	mul.wide.s32 	%rd220, %r1735, 4;
	add.s64 	%rd222, %rd47, %rd220;
	ld.shared.u32 	%r1572, [%rd222];
	add.s32 	%r1736, %r213, %r1734;
	mul.wide.s32 	%rd223, %r1736, 4;
	add.s64 	%rd224, %rd47, %rd223;
	ld.shared.u32 	%r1579, [%rd224];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1589, %r1586}, {%r396, %r399}, {%r1572}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1598, %r1595}, {%r396, %r399}, {%r1579}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1582, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r1582, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r434, %r1589, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1591, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1591, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r434, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r437, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r434, %r1586, %r1600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r437, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r434, %r1595, %r1607;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1633, %r1636}, {%r480, %r483}, {%r1587, %r1603}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1640, %r1644}, {%r480, %r483}, {%r1596, %r1610}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1633, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1636, %r1636, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1554, %r1643, %r3068;
	// end inline asm
	add.s16 	%rs152, %rs3, -2;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	add.s16 	%rs155, %rs153, %rs154;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs152, %rs156;
	mul.wide.s16 	%r1737, %rs157, 16;
	add.s32 	%r1738, %r212, %r1737;
	mul.wide.s32 	%rd225, %r1738, 4;
	add.s64 	%rd226, %rd47, %rd225;
	ld.shared.u32 	%r1655, [%rd226];
	add.s32 	%r1739, %r213, %r1737;
	mul.wide.s32 	%rd227, %r1739, 4;
	add.s64 	%rd228, %rd47, %rd227;
	ld.shared.u32 	%r1662, [%rd228];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1672, %r1669}, {%r396, %r399}, {%r1655}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1681, %r1678}, {%r396, %r399}, {%r1662}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1665, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1667, %r1665, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r434, %r1672, %r1667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r434, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r437, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r434, %r1669, %r1683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r437, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r434, %r1678, %r1690;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1716, %r1719}, {%r480, %r483}, {%r1670, %r1686}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1723, %r1727}, {%r480, %r483}, {%r1679, %r1693}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1716, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r1719, %r1719, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1727, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r1554, %r1726, %r1647;
	// end inline asm
	add.s32 	%r3069, %r3066, 2;
	setp.eq.s32 	%p260, %r3069, 40;
	@%p260 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17599
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7918
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1740, %r106, 393216, %r214;
	cvt.u64.u32 	%rd229, %r1740;
	add.s64 	%rd230, %rd229, %rd6;
	mul.hi.s64 	%rd231, %rd230, 3074457345618258603;
	shr.u64 	%rd232, %rd231, 63;
	shr.s64 	%rd233, %rd231, 23;
	add.s64 	%rd234, %rd233, %rd232;
	setp.lt.s64 	%p262, %rd230, 0;
	mul.lo.s64 	%rd235, %rd234, 50331648;
	setp.ne.s64 	%p263, %rd235, %rd230;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd236, -1, 0, %p264;
	add.s64 	%rd237, %rd234, %rd236;
	mul.lo.s64 	%rd238, %rd237, -50331648;
	add.s64 	%rd239, %rd238, %rd230;
	shl.b64 	%rd240, %rd239, 2;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3071;
$L__BB0_145:                            // %L17813
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3069, 0;
	mov.u32 	%r3071, %r3069;
$L__BB0_196:                            // %oksrem7993
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs158, %rs3, -1;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r1908, %rs163, 16;
	add.s32 	%r1909, %r212, %r1908;
	mul.wide.s32 	%rd242, %r1909, 4;
	add.s64 	%rd244, %rd47, %rd242;
	ld.shared.u32 	%r1746, [%rd244];
	add.s32 	%r1910, %r213, %r1908;
	mul.wide.s32 	%rd245, %r1910, 4;
	add.s64 	%rd246, %rd47, %rd245;
	ld.shared.u32 	%r1753, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1763, %r1760}, {%r396, %r399}, {%r1746}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1772, %r1769}, {%r396, %r399}, {%r1753}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1756, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r1756, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r434, %r1763, %r1758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1765, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r1765, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r434, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r437, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r434, %r1760, %r1774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r437, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r434, %r1769, %r1781;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1807, %r1810}, {%r480, %r483}, {%r1761, %r1777}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1814, %r1818}, {%r480, %r483}, {%r1770, %r1784}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r1807, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1818, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r1554, %r1817, %r3071;
	// end inline asm
	mul.hi.s16 	%rs164, %rs3, 10923;
	shr.u16 	%rs165, %rs164, 15;
	add.s16 	%rs166, %rs164, %rs165;
	mul.lo.s16 	%rs167, %rs166, 6;
	sub.s16 	%rs168, %rs3, %rs167;
	mul.wide.s16 	%r1911, %rs168, 16;
	add.s32 	%r1912, %r212, %r1911;
	mul.wide.s32 	%rd247, %r1912, 4;
	add.s64 	%rd248, %rd47, %rd247;
	ld.shared.u32 	%r1829, [%rd248];
	add.s32 	%r1913, %r213, %r1911;
	mul.wide.s32 	%rd249, %r1913, 4;
	add.s64 	%rd250, %rd47, %rd249;
	ld.shared.u32 	%r1836, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1846, %r1843}, {%r396, %r399}, {%r1829}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1855, %r1852}, {%r396, %r399}, {%r1836}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1839, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r1839, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r434, %r1846, %r1841;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1848, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r1848, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r434, %r1855, %r1850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r437, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r434, %r1843, %r1857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r437, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r434, %r1852, %r1864;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1890, %r1893}, {%r480, %r483}, {%r1844, %r1860}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1897, %r1901}, {%r480, %r483}, {%r1853, %r1867}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r1890, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1893, %r1893, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1901, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1554, %r1900, %r1821;
	// end inline asm
	add.s32 	%r105, %r3069, 2;
	setp.eq.s32 	%p265, %r105, 40;
	@%p265 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19559
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8774
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1914, %r106, 393216, %r214;
	cvt.u64.u32 	%rd251, %r1914;
	add.s64 	%rd252, %rd251, %rd6;
	mul.hi.s64 	%rd253, %rd252, 3074457345618258603;
	shr.u64 	%rd254, %rd253, 63;
	shr.s64 	%rd255, %rd253, 23;
	add.s64 	%rd256, %rd255, %rd254;
	setp.lt.s64 	%p267, %rd252, 0;
	mul.lo.s64 	%rd257, %rd256, 50331648;
	setp.ne.s64 	%p268, %rd257, %rd252;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd258, -1, 0, %p269;
	add.s64 	%rd259, %rd256, %rd258;
	mul.lo.s64 	%rd260, %rd259, -50331648;
	add.s64 	%rd261, %rd260, %rd252;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd263, %rd4, %rd262;
	st.global.u32 	[%rd263], %r107;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19795.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs263, %rs1;
	mov.u32 	%r3057, %r1385;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30805
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, %r2806;
	mov.u32 	%r107, %r2806;
$L__BB0_159:                            // %L30806
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3057, %r3057, 6;
	add.s16 	%rs263, %rs263, 6;
	setp.ne.s32 	%p290, %r3057, 24;
	@%p290 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19795
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3057, 0;
	selp.b32 	%r2611, %r89, 0, %p271;
	setp.eq.s32 	%p272, %r3057, 6;
	selp.b32 	%r2612, %r93, %r2611, %p272;
	setp.eq.s32 	%p273, %r3057, 12;
	selp.b32 	%r2613, %r97, %r2612, %p273;
	setp.eq.s32 	%p274, %r3057, 18;
	selp.b32 	%r2614, %r101, %r2613, %p274;
	selp.b32 	%r2615, %r90, 0, %p271;
	selp.b32 	%r2616, %r94, %r2615, %p272;
	selp.b32 	%r2617, %r98, %r2616, %p273;
	selp.b32 	%r2618, %r102, %r2617, %p274;
	selp.b32 	%r2619, %r91, 0, %p271;
	selp.b32 	%r2620, %r95, %r2619, %p272;
	selp.b32 	%r2621, %r99, %r2620, %p273;
	selp.b32 	%r2622, %r103, %r2621, %p274;
	selp.b32 	%r2623, %r92, 0, %p271;
	selp.b32 	%r2624, %r96, %r2623, %p272;
	selp.b32 	%r2625, %r100, %r2624, %p273;
	selp.b32 	%r2626, %r104, %r2625, %p274;
	// begin inline asm
	mov.b32 %r1944, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1955, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2627, %r2614, 8;
	xor.b32  	%r1954, %r2627, 8947848;
	// begin inline asm
	lop3.b32 %r1941, %r969, %r1954, %r1944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1946, %r1944, %r1945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1949, %r1941, %r1946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1952, %r980, %r1954, %r1955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1956, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1957, %r1955, %r1956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1960, %r1952, %r1957;
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2001, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2628, %r2618, 8;
	xor.b32  	%r2000, %r2628, 8947848;
	// begin inline asm
	lop3.b32 %r1987, %r969, %r2000, %r1990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1992, %r1990, %r1991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1995, %r1987, %r1992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1998, %r980, %r2000, %r2001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2002, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2003, %r2001, %r2002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2006, %r1998, %r2003;
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2047, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2629, %r2622, 8;
	xor.b32  	%r2046, %r2629, 8947848;
	// begin inline asm
	lop3.b32 %r2033, %r969, %r2046, %r2036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2037, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2038, %r2036, %r2037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2041, %r2033, %r2038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2044, %r980, %r2046, %r2047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2048, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2049, %r2047, %r2048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2052, %r2044, %r2049;
	// end inline asm
	// begin inline asm
	mov.b32 %r2082, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2093, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2630, %r2626, 8;
	xor.b32  	%r2092, %r2630, 8947848;
	// begin inline asm
	lop3.b32 %r2079, %r969, %r2092, %r2082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2083, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2084, %r2082, %r2083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2087, %r2079, %r2084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2090, %r980, %r2092, %r2093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2094, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2095, %r2093, %r2094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2098, %r2090, %r2095;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1949;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1995;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1960;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2006;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2041;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2087;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2052;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2098;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2122, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2188, %r2185}, {%r288, %r291}, {%r2101}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2197, %r2194}, {%r288, %r291}, {%r2104}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r288, %r291}, {%r2107}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r288, %r291}, {%r2110}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r288, %r291}, {%r2113}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r288, %r291}, {%r2116}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r288, %r291}, {%r2119}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r288, %r291}, {%r2122}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2181, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r340, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r2190, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r340, %r2197, %r2192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r340, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r340, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r340, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r340, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r340, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r340, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r343, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r340, %r2185, %r2253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r343, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r340, %r2194, %r2260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r343, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r340, %r2203, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r343, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r340, %r2212, %r2274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2281, %r343, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2284, %r340, %r2221, %r2281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2288, %r343, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2291, %r340, %r2230, %r2288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2295, %r343, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2298, %r340, %r2239, %r2295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2302, %r343, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2305, %r340, %r2248, %r2302;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2382, %r2383}, {%r384, %r387}, {%r2186, %r2256}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2390, %r2391}, {%r384, %r387}, {%r2195, %r2263}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2398, %r2399}, {%r384, %r387}, {%r2204, %r2270}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2406, %r2407}, {%r384, %r387}, {%r2213, %r2277}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2414, %r2415}, {%r384, %r387}, {%r2222, %r2284}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2422, %r2423}, {%r384, %r387}, {%r2231, %r2291}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2430, %r2431}, {%r384, %r387}, {%r2240, %r2298}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2438, %r2439}, {%r384, %r387}, {%r2249, %r2305}, {%r1385, %r1385}, %r215, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2381, %r2382, %r2383, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2385, %r2382, %r2383, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2389, %r2390, %r2391, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2393, %r2390, %r2391, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2398, %r2399, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2398, %r2399, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2406, %r2407, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2409, %r2406, %r2407, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2413, %r2414, %r2415, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2417, %r2414, %r2415, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2422, %r2423, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2422, %r2423, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2430, %r2431, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2430, %r2431, %r678;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2438, %r2439, %r674;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2438, %r2439, %r678;
	// end inline asm
	add.s16 	%rs217, %rs10, %rs263;
	add.s16 	%rs218, %rs217, -29;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2631, %rs223, 16;
	add.s32 	%r2632, %r205, %r2631;
	mul.wide.s32 	%rd264, %r2632, 4;
	add.s64 	%rd266, %rd47, %rd264;
	st.shared.u32 	[%rd266], %r2381;
	add.s32 	%r2633, %r206, %r2631;
	mul.wide.u32 	%rd267, %r2633, 4;
	add.s64 	%rd268, %rd47, %rd267;
	st.shared.u32 	[%rd268], %r2385;
	add.s32 	%r2634, %r207, %r2631;
	mul.wide.s32 	%rd269, %r2634, 4;
	add.s64 	%rd270, %rd47, %rd269;
	st.shared.u32 	[%rd270], %r2389;
	add.s32 	%r2635, %r208, %r2631;
	mul.wide.u32 	%rd271, %r2635, 4;
	add.s64 	%rd272, %rd47, %rd271;
	st.shared.u32 	[%rd272], %r2393;
	cvt.s64.s32 	%rd273, %r2631;
	add.s64 	%rd274, %rd11, %rd273;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd276, %rd47, %rd275;
	st.shared.u32 	[%rd276+32], %r2397;
	add.s32 	%r2636, %r209, %r2631;
	mul.wide.u32 	%rd277, %r2636, 4;
	add.s64 	%rd278, %rd47, %rd277;
	st.shared.u32 	[%rd278], %r2401;
	add.s32 	%r2637, %r210, %r2631;
	mul.wide.s32 	%rd279, %r2637, 4;
	add.s64 	%rd280, %rd47, %rd279;
	st.shared.u32 	[%rd280], %r2405;
	add.s32 	%r2638, %r211, %r2631;
	mul.wide.u32 	%rd281, %r2638, 4;
	add.s64 	%rd282, %rd47, %rd281;
	st.shared.u32 	[%rd282], %r2409;
	add.s16 	%rs224, %rs9, %rs263;
	add.s16 	%rs225, %rs224, -2;
	mul.hi.s16 	%rs226, %rs225, 10923;
	shr.u16 	%rs227, %rs226, 15;
	add.s16 	%rs228, %rs226, %rs227;
	mul.lo.s16 	%rs229, %rs228, 6;
	sub.s16 	%rs230, %rs225, %rs229;
	mul.wide.s16 	%r2639, %rs230, 16;
	add.s32 	%r2640, %r205, %r2639;
	mul.wide.s32 	%rd283, %r2640, 4;
	add.s64 	%rd284, %rd47, %rd283;
	st.shared.u32 	[%rd284], %r2413;
	add.s32 	%r2641, %r206, %r2639;
	mul.wide.u32 	%rd285, %r2641, 4;
	add.s64 	%rd286, %rd47, %rd285;
	st.shared.u32 	[%rd286], %r2417;
	add.s32 	%r2642, %r207, %r2639;
	mul.wide.s32 	%rd287, %r2642, 4;
	add.s64 	%rd288, %rd47, %rd287;
	st.shared.u32 	[%rd288], %r2421;
	add.s32 	%r2643, %r208, %r2639;
	mul.wide.u32 	%rd289, %r2643, 4;
	add.s64 	%rd290, %rd47, %rd289;
	st.shared.u32 	[%rd290], %r2425;
	cvt.s64.s32 	%rd291, %r2639;
	add.s64 	%rd292, %rd11, %rd291;
	shl.b64 	%rd293, %rd292, 2;
	add.s64 	%rd294, %rd47, %rd293;
	st.shared.u32 	[%rd294+32], %r2429;
	add.s32 	%r2644, %r209, %r2639;
	mul.wide.u32 	%rd295, %r2644, 4;
	add.s64 	%rd296, %rd47, %rd295;
	st.shared.u32 	[%rd296], %r2433;
	add.s32 	%r2645, %r210, %r2639;
	mul.wide.s32 	%rd297, %r2645, 4;
	add.s64 	%rd298, %rd47, %rd297;
	st.shared.u32 	[%rd298], %r2437;
	add.s32 	%r2646, %r211, %r2639;
	mul.wide.u32 	%rd299, %r2646, 4;
	add.s64 	%rd300, %rd47, %rd299;
	st.shared.u32 	[%rd300], %r2441;
	bar.sync 	0;
	add.s16 	%rs231, %rs263, -5;
	mul.hi.s16 	%rs232, %rs231, 10923;
	shr.u16 	%rs233, %rs232, 15;
	add.s16 	%rs234, %rs232, %rs233;
	mul.lo.s16 	%rs235, %rs234, 6;
	sub.s16 	%rs236, %rs231, %rs235;
	mul.wide.s16 	%r2647, %rs236, 16;
	add.s32 	%r2648, %r212, %r2647;
	mul.wide.s32 	%rd301, %r2648, 4;
	add.s64 	%rd302, %rd47, %rd301;
	ld.shared.u32 	%r2449, [%rd302];
	add.s32 	%r2649, %r213, %r2647;
	mul.wide.s32 	%rd303, %r2649, 4;
	add.s64 	%rd304, %rd47, %rd303;
	ld.shared.u32 	%r2456, [%rd304];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2466, %r2463}, {%r396, %r399}, {%r2449}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2475, %r2472}, {%r396, %r399}, {%r2456}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2459, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2461, %r2459, %r2463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r434, %r2466, %r2461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2468, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2470, %r2468, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2473, %r434, %r2475, %r2470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2477, %r437, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2480, %r434, %r2463, %r2477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r437, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r434, %r2472, %r2484;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2510, %r2513}, {%r480, %r483}, {%r2464, %r2480}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2517, %r2521}, {%r480, %r483}, {%r2473, %r2487}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r2510, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r2513, %r2513, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r2517, %r2517, %r2512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2520, %r2521, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r1554, %r2520, %r107;
	// end inline asm
	add.s32 	%r2650, %r85, %r3057;
	add.s32 	%r2651, %r2650, 25;
	mul.hi.u32 	%r2652, %r2651, -1431655765;
	shr.u32 	%r2653, %r2652, 2;
	mul.lo.s32 	%r2654, %r2653, 6;
	sub.s32 	%r2655, %r2651, %r2654;
	shl.b32 	%r2656, %r2655, 4;
	add.s32 	%r2657, %r212, %r2656;
	mul.wide.u32 	%rd305, %r2657, 4;
	add.s64 	%rd306, %rd47, %rd305;
	ld.shared.u32 	%r2532, [%rd306];
	add.s32 	%r2658, %r213, %r2656;
	mul.wide.u32 	%rd307, %r2658, 4;
	add.s64 	%rd308, %rd47, %rd307;
	ld.shared.u32 	%r2539, [%rd308];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2549, %r2546}, {%r396, %r399}, {%r2532}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2558, %r2555}, {%r396, %r399}, {%r2539}, {%r1385, %r1385};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2542, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r2542, %r2546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r434, %r2549, %r2544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2551, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2553, %r2551, %r2555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2556, %r434, %r2558, %r2553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r437, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r434, %r2546, %r2560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r437, %r2558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r434, %r2555, %r2567;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2593, %r2596}, {%r480, %r483}, {%r2547, %r2563}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2600, %r2604}, {%r480, %r483}, {%r2556, %r2570}, {%r1385, %r1385}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2592, %r2593, %r2593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2595, %r2596, %r2596, %r2592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2599, %r2600, %r2600, %r2595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2603, %r2604, %r2604, %r2599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r1554, %r2603, %r2524;
	// end inline asm
	add.s32 	%r3072, %r105, 2;
	setp.ne.s32 	%p275, %r3072, 40;
	@%p275 bra 	$L__BB0_153;
// %bb.151:                             // %L26671
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass11959
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2659, %r106, 393216, %r214;
	cvt.u64.u32 	%rd309, %r2659;
	add.s64 	%rd310, %rd309, %rd6;
	mul.hi.s64 	%rd311, %rd310, 3074457345618258603;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 23;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p277, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 50331648;
	setp.ne.s64 	%p278, %rd315, %rd310;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd316, -1, 0, %p279;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -50331648;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r3074;
$L__BB0_152:                            // %L26885
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3072, 0;
	mov.u32 	%r3074, %r3072;
$L__BB0_153:                            // %oksrem12034
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs237, %rs263, -3;
	mul.hi.s16 	%rs238, %rs237, 10923;
	shr.u16 	%rs239, %rs238, 15;
	add.s16 	%rs240, %rs238, %rs239;
	mul.lo.s16 	%rs241, %rs240, 6;
	sub.s16 	%rs242, %rs237, %rs241;
	mul.wide.s16 	%r2827, %rs242, 16;
	add.s32 	%r2828, %r212, %r2827;
	mul.wide.s32 	%rd322, %r2828, 4;
	add.s64 	%rd324, %rd47, %rd322;
	ld.shared.u32 	%r2665, [%rd324];
	add.s32 	%r2829, %r213, %r2827;
	mul.wide.s32 	%rd325, %r2829, 4;
	add.s64 	%rd326, %rd47, %rd325;
	ld.shared.u32 	%r2672, [%rd326];
	mov.u32 	%r2806, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2682, %r2679}, {%r396, %r399}, {%r2665}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2691, %r2688}, {%r396, %r399}, {%r2672}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2680, %r434, %r2682, %r2677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r434, %r2691, %r2686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r437, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r434, %r2679, %r2693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r437, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r434, %r2688, %r2700;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2726, %r2729}, {%r480, %r483}, {%r2680, %r2696}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2733, %r2737}, {%r480, %r483}, {%r2689, %r2703}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r2726, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r2729, %r2729, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r2733, %r2733, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r2737, %r2737, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r1554, %r2736, %r3074;
	// end inline asm
	add.s16 	%rs243, %rs263, -2;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2830, %rs248, 16;
	add.s32 	%r2831, %r212, %r2830;
	mul.wide.s32 	%rd327, %r2831, 4;
	add.s64 	%rd328, %rd47, %rd327;
	ld.shared.u32 	%r2748, [%rd328];
	add.s32 	%r2832, %r213, %r2830;
	mul.wide.s32 	%rd329, %r2832, 4;
	add.s64 	%rd330, %rd47, %rd329;
	ld.shared.u32 	%r2755, [%rd330];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2765, %r2762}, {%r396, %r399}, {%r2748}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2774, %r2771}, {%r396, %r399}, {%r2755}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2758, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2760, %r2758, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2763, %r434, %r2765, %r2760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2767, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r2767, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r434, %r2774, %r2769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r437, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r434, %r2762, %r2776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2783, %r437, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2786, %r434, %r2771, %r2783;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2809, %r2812}, {%r480, %r483}, {%r2763, %r2779}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2816, %r2820}, {%r480, %r483}, {%r2772, %r2786}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2808, %r2809, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r2812, %r2812, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r2816, %r2816, %r2811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r2820, %r2820, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r1554, %r2819, %r2740;
	// end inline asm
	add.s32 	%r3075, %r3072, 2;
	setp.eq.s32 	%p280, %r3075, 40;
	@%p280 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28631
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12815
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2833, %r106, 393216, %r214;
	cvt.u64.u32 	%rd331, %r2833;
	add.s64 	%rd332, %rd331, %rd6;
	mul.hi.s64 	%rd333, %rd332, 3074457345618258603;
	shr.u64 	%rd334, %rd333, 63;
	shr.s64 	%rd335, %rd333, 23;
	add.s64 	%rd336, %rd335, %rd334;
	setp.lt.s64 	%p282, %rd332, 0;
	mul.lo.s64 	%rd337, %rd336, 50331648;
	setp.ne.s64 	%p283, %rd337, %rd332;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd338, -1, 0, %p284;
	add.s64 	%rd339, %rd336, %rd338;
	mul.lo.s64 	%rd340, %rd339, -50331648;
	add.s64 	%rd341, %rd340, %rd332;
	shl.b64 	%rd342, %rd341, 2;
	add.s64 	%rd343, %rd4, %rd342;
	st.global.u32 	[%rd343], %r3077;
$L__BB0_155:                            // %L28845
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3075, 0;
	mov.u32 	%r3077, %r3075;
$L__BB0_156:                            // %oksrem12890
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs249, %rs263, -1;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r3001, %rs254, 16;
	add.s32 	%r3002, %r212, %r3001;
	mul.wide.s32 	%rd344, %r3002, 4;
	add.s64 	%rd346, %rd47, %rd344;
	ld.shared.u32 	%r2839, [%rd346];
	add.s32 	%r3003, %r213, %r3001;
	mul.wide.s32 	%rd347, %r3003, 4;
	add.s64 	%rd348, %rd47, %rd347;
	ld.shared.u32 	%r2846, [%rd348];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2856, %r2853}, {%r396, %r399}, {%r2839}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2865, %r2862}, {%r396, %r399}, {%r2846}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2849, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r2849, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r434, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2858, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2858, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r434, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r437, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r434, %r2853, %r2867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r437, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r434, %r2862, %r2874;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2903}, {%r480, %r483}, {%r2854, %r2870}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2907, %r2911}, {%r480, %r483}, {%r2863, %r2877}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2900, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r2903, %r2903, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r1554, %r2910, %r3077;
	// end inline asm
	mul.hi.s16 	%rs255, %rs263, 10923;
	shr.u16 	%rs256, %rs255, 15;
	add.s16 	%rs257, %rs255, %rs256;
	mul.lo.s16 	%rs258, %rs257, 6;
	sub.s16 	%rs259, %rs263, %rs258;
	mul.wide.s16 	%r3004, %rs259, 16;
	add.s32 	%r3005, %r212, %r3004;
	mul.wide.s32 	%rd349, %r3005, 4;
	add.s64 	%rd350, %rd47, %rd349;
	ld.shared.u32 	%r2922, [%rd350];
	add.s32 	%r3006, %r213, %r3004;
	mul.wide.s32 	%rd351, %r3006, 4;
	add.s64 	%rd352, %rd47, %rd351;
	ld.shared.u32 	%r2929, [%rd352];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2939, %r2936}, {%r396, %r399}, {%r2922}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2948, %r2945}, {%r396, %r399}, {%r2929}, {%r2806, %r2806};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2932, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r2932, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r434, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2941, %r437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r2941, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r434, %r2948, %r2943;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2950, %r437, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r434, %r2936, %r2950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r437, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r434, %r2945, %r2957;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2983, %r2986}, {%r480, %r483}, {%r2937, %r2953}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2990, %r2994}, {%r480, %r483}, {%r2946, %r2960}, {%r2806, %r2806}, %r239, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2982, %r2983, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r2986, %r2986, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2989, %r2990, %r2990, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r2994, %r2994, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1554, %r2993, %r2914;
	// end inline asm
	add.s32 	%r105, %r3075, 2;
	setp.eq.s32 	%p285, %r105, 40;
	@%p285 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30591
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13671
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r3007, %r106, 393216, %r214;
	cvt.u64.u32 	%rd353, %r3007;
	add.s64 	%rd354, %rd353, %rd6;
	mul.hi.s64 	%rd355, %rd354, 3074457345618258603;
	shr.u64 	%rd356, %rd355, 63;
	shr.s64 	%rd357, %rd355, 23;
	add.s64 	%rd358, %rd357, %rd356;
	setp.lt.s64 	%p287, %rd354, 0;
	mul.lo.s64 	%rd359, %rd358, 50331648;
	setp.ne.s64 	%p288, %rd359, %rd354;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd360, -1, 0, %p289;
	add.s64 	%rd361, %rd358, %rd360;
	mul.lo.s64 	%rd362, %rd361, -50331648;
	add.s64 	%rd363, %rd362, %rd354;
	shl.b64 	%rd364, %rd363, 2;
	add.s64 	%rd365, %rd4, %rd364;
	st.global.u32 	[%rd365], %r107;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30837
	mov.u32 	%r3009, 0;
	st.global.u32 	[%rd5], %r3009;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd149, exception2651;
	cvta.global.u64 	%rd150, %rd149;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd150;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6639
	mov.u64 	%rd200, exception2651;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L159
	mov.u32 	%r3010, 2;
	st.global.u32 	[%rd5], %r3010;
	mov.u64 	%rd366, exception2611;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd17, exception1;
	cvta.global.u64 	%rd18, %rd17;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd18;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
