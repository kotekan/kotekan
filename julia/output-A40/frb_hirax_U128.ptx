// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2603[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<354>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3548>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<434>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r307, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r307, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r308, %r2, %r3;
	or.b32  	%r309, %r308, %r5;
	mul.wide.u32 	%rd67, %r309, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r310, 1;
	st.global.u32 	[%rd6], %r310;
	setp.gt.u32 	%p3, %r299, 255;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r300, %r299;
	setp.gt.s32 	%p5, %r300, 511;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r300, %r299;
	and.b32  	%r311, %r6, 63;
	setp.ne.s32 	%p7, %r311, 0;
	setp.gt.u32 	%p8, %r301, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r302, %r301;
	setp.lt.s32 	%p11, %r302, 1024;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r312, %r302, %r301;
	mul.hi.s32 	%r313, %r6, 1431655766;
	shr.u32 	%r314, %r313, 31;
	add.s32 	%r315, %r313, %r314;
	setp.eq.s32 	%p13, %r312, %r315;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r303, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r304, %r303;
	setp.gt.s32 	%p16, %r304, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r304, %r303;
	and.b32  	%r316, %r7, 127;
	setp.ne.s32 	%p18, %r316, 0;
	setp.lt.s32 	%p19, %r305, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r306, %r305;
	setp.gt.s32 	%p22, %r306, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r317, %r306, %r305;
	and.b32  	%r318, %r317, 127;
	setp.eq.s32 	%p24, %r318, 0;
	setp.eq.s32 	%p25, %r317, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_13;
$L__BB0_172:                            // %pass162
	and.b32  	%r128, %r3, 3;
	shr.u32 	%r129, %r3, 2;
	mul.lo.s32 	%r319, %r128, %r129;
	and.b32  	%r320, %r319, 7;
	cvt.rn.f32.s32 	%f185, %r320;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p349, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_184;
// %bb.173:
	@%p349 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r131, %f750;
	and.b32  	%r321, %r131, 8388607;
	or.b32  	%r3501, %r321, 1065353216;
	mov.b32 	%f745, %r3501;
	add.s32 	%r322, %r131, -1073741824;
	and.b32  	%r3502, %r322, -8388608;
	setp.eq.s32 	%p34, %r3502, 0;
	@%p34 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3502, 192937984;
	add.s32 	%r324, %r3501, %r323;
	mov.b32 	%f197, %r324;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3502, %r3502, %r323;
	mov.b32 	%r3501, %f745;
	setp.ne.s32 	%p35, %r3502, 0;
	setp.ne.s32 	%p36, %r3501, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r325, %f151;
	and.b32  	%r138, %r325, -2147483648;
	@%p39 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r326, %f746;
	or.b32  	%r327, %r138, %r326;
	mov.b32 	%f746, %r327;
$L__BB0_186:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r3, 1;
	and.b32  	%r342, %r141, 2;
	mul.lo.s32 	%r142, %r342, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p350, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p350 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r343, %r9, 8388607;
	or.b32  	%r3467, %r343, 1065353216;
	mov.b32 	%f705, %r3467;
	add.s32 	%r344, %r9, -1073741824;
	and.b32  	%r3468, %r344, -8388608;
	setp.eq.s32 	%p54, %r3468, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r3468, 192937984;
	add.s32 	%r346, %r3467, %r345;
	mov.b32 	%f251, %r346;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3468, %r3468, %r345;
	mov.b32 	%r3467, %f705;
	setp.ne.s32 	%p55, %r3468, 0;
	setp.ne.s32 	%p56, %r3467, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r347, %f168;
	and.b32  	%r16, %r347, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r348, %f706;
	or.b32  	%r349, %r16, %r348;
	mov.b32 	%f706, %r349;
$L__BB0_27:                             // %__nv_fmodf.exit2334
	add.s32 	%r358, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r358;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p351, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p351 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r359, %r18, 8388607;
	or.b32  	%r3469, %r359, 1065353216;
	mov.b32 	%f709, %r3469;
	add.s32 	%r360, %r18, -1073741824;
	and.b32  	%r3470, %r360, -8388608;
	setp.eq.s32 	%p74, %r3470, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r3470, 192937984;
	add.s32 	%r362, %r3469, %r361;
	mov.b32 	%f303, %r362;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3470, %r3470, %r361;
	mov.b32 	%r3469, %f709;
	setp.ne.s32 	%p75, %r3470, 0;
	setp.ne.s32 	%p76, %r3469, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r363, %f18;
	and.b32  	%r25, %r363, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r364, %f710;
	or.b32  	%r365, %r25, %r364;
	mov.b32 	%f710, %r365;
$L__BB0_41:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r380, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r380;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p352, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p352 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r381, %r30, 8388607;
	or.b32  	%r3471, %r381, 1065353216;
	mov.b32 	%f713, %r3471;
	add.s32 	%r382, %r30, -1073741824;
	and.b32  	%r3472, %r382, -8388608;
	setp.eq.s32 	%p94, %r3472, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r383, %r3472, 192937984;
	add.s32 	%r384, %r3471, %r383;
	mov.b32 	%f357, %r384;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3472, %r3472, %r383;
	mov.b32 	%r3471, %f713;
	setp.ne.s32 	%p95, %r3472, 0;
	setp.ne.s32 	%p96, %r3471, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r385, %f35;
	and.b32  	%r37, %r385, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r386, %f714;
	or.b32  	%r387, %r37, %r386;
	mov.b32 	%f714, %r387;
$L__BB0_55:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r388, %f367;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f368, %r390;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r391, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r392, %r391, 1;
	setp.eq.b32 	%p102, %r392, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r393, %r391, 2;
	setp.eq.s32 	%p103, %r393, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r394, %r391, 1;
	and.b32  	%r395, %r394, 2;
	setp.eq.s32 	%p104, %r395, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r396, %r28, %r129;
	and.b32  	%r397, %r396, 3;
	cvt.rn.f32.s32 	%f397, %r397;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p353, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p353 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r398, %r39, 8388607;
	or.b32  	%r3473, %r398, 1065353216;
	mov.b32 	%f717, %r3473;
	add.s32 	%r399, %r39, -1073741824;
	and.b32  	%r3474, %r399, -8388608;
	setp.eq.s32 	%p114, %r3474, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3474, 192937984;
	add.s32 	%r401, %r3473, %r400;
	mov.b32 	%f409, %r401;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3474, %r3474, %r400;
	mov.b32 	%r3473, %f717;
	setp.ne.s32 	%p115, %r3474, 0;
	setp.ne.s32 	%p116, %r3473, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r402, %f54;
	and.b32  	%r46, %r402, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r403, %f718;
	or.b32  	%r404, %r46, %r403;
	mov.b32 	%f718, %r404;
$L__BB0_69:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r405, %f419;
	and.b32  	%r406, %r405, -2147483648;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%f420, %r407;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r408, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r409, %r408, 1;
	setp.eq.b32 	%p122, %r409, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r410, %r408, 2;
	setp.eq.s32 	%p123, %r410, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r411, %r408, 1;
	and.b32  	%r412, %r411, 2;
	setp.eq.s32 	%p124, %r412, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_194;
// %bb.72:
	@%p349 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_73;
$L__BB0_190:
	mov.b32 	%r144, %f750;
	and.b32  	%r419, %r144, 8388607;
	or.b32  	%r3503, %r419, 1065353216;
	mov.b32 	%f749, %r3503;
	add.s32 	%r420, %r144, -1073741824;
	and.b32  	%r3504, %r420, -8388608;
	setp.eq.s32 	%p135, %r3504, 0;
	@%p135 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r421, %r3504, 192937984;
	add.s32 	%r422, %r3503, %r421;
	mov.b32 	%f459, %r422;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3504, %r3504, %r421;
	mov.b32 	%r3503, %f749;
	setp.ne.s32 	%p136, %r3504, 0;
	setp.ne.s32 	%p137, %r3503, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_194;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_189;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_187;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r423, %f750;
	or.b32  	%r424, %r138, %r423;
	mov.b32 	%f750, %r424;
$L__BB0_196:                            // %__nv_fmodf.exit2458
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p350 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r439, %r51, 8388607;
	or.b32  	%r3475, %r439, 1065353216;
	mov.b32 	%f725, %r3475;
	add.s32 	%r440, %r51, -1073741824;
	and.b32  	%r3476, %r440, -8388608;
	setp.eq.s32 	%p155, %r3476, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r441, %r3476, 192937984;
	add.s32 	%r442, %r3475, %r441;
	mov.b32 	%f511, %r442;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3476, %r3476, %r441;
	mov.b32 	%r3475, %f725;
	setp.ne.s32 	%p156, %r3476, 0;
	setp.ne.s32 	%p157, %r3475, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r443, %f726;
	or.b32  	%r444, %r16, %r443;
	mov.b32 	%f726, %r444;
$L__BB0_89:                             // %__nv_fmodf.exit2489
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p351 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r453, %r59, 8388607;
	or.b32  	%r3477, %r453, 1065353216;
	mov.b32 	%f729, %r3477;
	add.s32 	%r454, %r59, -1073741824;
	and.b32  	%r3478, %r454, -8388608;
	setp.eq.s32 	%p175, %r3478, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3478, 192937984;
	add.s32 	%r456, %r3477, %r455;
	mov.b32 	%f561, %r456;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3478, %r3478, %r455;
	mov.b32 	%r3477, %f729;
	setp.ne.s32 	%p176, %r3478, 0;
	setp.ne.s32 	%p177, %r3477, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r457, %f730;
	or.b32  	%r458, %r25, %r457;
	mov.b32 	%f730, %r458;
$L__BB0_103:                            // %__nv_fmodf.exit2520
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p352 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r473, %r69, 8388607;
	or.b32  	%r3479, %r473, 1065353216;
	mov.b32 	%f733, %r3479;
	add.s32 	%r474, %r69, -1073741824;
	and.b32  	%r3480, %r474, -8388608;
	setp.eq.s32 	%p195, %r3480, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3480, 192937984;
	add.s32 	%r476, %r3479, %r475;
	mov.b32 	%f613, %r476;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3480, %r3480, %r475;
	mov.b32 	%r3479, %f733;
	setp.ne.s32 	%p196, %r3480, 0;
	setp.ne.s32 	%p197, %r3479, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r477, %f734;
	or.b32  	%r478, %r37, %r477;
	mov.b32 	%f734, %r478;
$L__BB0_117:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r479, %f623;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f624, %r481;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r482, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p204, %r483, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p205, %r484, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p206, %r486, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p353 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r487, %r77, 8388607;
	or.b32  	%r3481, %r487, 1065353216;
	mov.b32 	%f737, %r3481;
	add.s32 	%r488, %r77, -1073741824;
	and.b32  	%r3482, %r488, -8388608;
	setp.eq.s32 	%p215, %r3482, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3482, 192937984;
	add.s32 	%r490, %r3481, %r489;
	mov.b32 	%f663, %r490;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3482, %r3482, %r489;
	mov.b32 	%r3481, %f737;
	setp.ne.s32 	%p216, %r3482, 0;
	setp.ne.s32 	%p217, %r3481, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r491, %f738;
	or.b32  	%r492, %r46, %r491;
	mov.b32 	%f738, %r492;
$L__BB0_131:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r493, %f673;
	and.b32  	%r494, %r493, -2147483648;
	or.b32  	%r495, %r494, 1056964608;
	mov.b32 	%f674, %r495;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r496, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r497, %r496, 1;
	setp.eq.b32 	%p224, %r497, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r498, %r496, 2;
	setp.eq.s32 	%p225, %r498, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r499, %r496, 1;
	and.b32  	%r500, %r499, 2;
	setp.eq.s32 	%p226, %r500, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r3, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_198;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r508, %r3, 4;
	and.b32  	%r509, %r508, 240;
	or.b32  	%r510, %r509, %r1;
	mul.wide.u32 	%rd68, %r510, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r511, [%rd69];
	shl.b32 	%r512, %r511, 16;
	cvt.s32.s16 	%r86, %r511;
	shr.s32 	%r87, %r511, 16;
	or.b32  	%r513, %r512, 65535;
	setp.lt.u32 	%p230, %r513, 1114111;
	setp.lt.u32 	%p231, %r511, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_135;
$L__BB0_197:                            // %L1255
	mul.lo.s32 	%r517, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r517;
$L__BB0_198:                            // %pass576
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r334, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r335, %r334, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r431, %f469;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%r350, %f261;
	mov.b32 	%r372, %f313;
	and.b32  	%r432, %r431, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r336;
	and.b32  	%r351, %r350, -2147483648;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r433, %r432, 1056964608;
	mov.b32 	%r445, %f521;
	mov.b32 	%r465, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r352, %r351, 1056964608;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f470, %r433;
	and.b32  	%r446, %r445, -2147483648;
	and.b32  	%r466, %r465, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r352;
	mov.b32 	%f314, %r374;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r447, %r446, 1056964608;
	or.b32  	%r467, %r466, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r447;
	mov.b32 	%f572, %r467;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r337, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r434, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r338, 1;
	cvt.rzi.s32.f32 	%r353, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r375, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r435, %r434, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r339, %r337, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r354, %r353, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r376, %r375, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r435, 1;
	cvt.rzi.s32.f32 	%r448, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r468, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r339, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r354, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r376, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r436, %r434, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r449, %r448, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r469, %r468, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r355, %r353, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p145, %r436, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r437, %r434, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r449, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r469, 1;
	setp.eq.s32 	%p44, %r341, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r355, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r356, %r353, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r377, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r378, %r375, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r438, %r437, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r450, %r448, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r470, %r468, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r357, %r356, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r379, %r378, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r438, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r450, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r451, %r448, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r470, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r357, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r379, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r452, %r451, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r330, %f238;
	mov.b32 	%r333, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r452, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r472, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r329, %r333, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r427, %f500;
	mov.b32 	%r430, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r330;
	// end inline asm
	mov.b32 	%r368, %f344;
	mov.b32 	%r367, %f17;
	mov.b32 	%r371, %f341;
	mov.b32 	%r370, %f16;
	mov.b32 	%r414, %f75;
	mov.b32 	%r415, %f77;
	mov.b32 	%r417, %f76;
	mov.b32 	%r418, %f78;
	xor.b32  	%r426, %r430, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r427;
	// end inline asm
	mov.b32 	%r461, %f602;
	mov.b32 	%r460, %f95;
	mov.b32 	%r464, %f599;
	mov.b32 	%r463, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	mov.b32 	%r502, %f147;
	mov.b32 	%r503, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r501, %r503, %r502;
	// end inline asm
	mov.b32 	%r505, %f148;
	mov.b32 	%r506, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	shl.b32 	%r519, %r3, 6;
	and.b32  	%r520, %r519, 192;
	and.b32  	%r521, %r129, 1;
	shr.u32 	%r522, %r3, 3;
	and.b32  	%r523, %r522, 2;
	or.b32  	%r524, %r521, %r523;
	shl.b32 	%r525, %r524, 4;
	bfe.u32 	%r526, %r3, 3, 1;
	shl.b32 	%r527, %r1, 1;
	and.b32  	%r528, %r527, 14;
	or.b32  	%r529, %r526, %r528;
	or.b32  	%r530, %r525, %r5;
	or.b32  	%r531, %r530, %r520;
	or.b32  	%r532, %r531, %r529;
	mul.wide.u32 	%rd75, %r532, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r533, %r299, 14;
	shl.b32 	%r534, %r303, 7;
	add.s32 	%r156, %r534, %r533;
	shl.b32 	%r535, %r4, 7;
	shl.b32 	%r536, %r3, 2;
	or.b32  	%r157, %r536, %r535;
	and.b32  	%r158, %r3, 16;
	shr.u32 	%r537, %r3, 4;
	and.b32  	%r538, %r141, 30;
	or.b32  	%r539, %r538, %r537;
	mul.lo.s32 	%r540, %r539, 257;
	shr.u32 	%r541, %r1, 3;
	and.b32  	%r542, %r2, 224;
	mad.lo.s32 	%r543, %r541, 257, %r542;
	or.b32  	%r544, %r541, 2;
	mad.lo.s32 	%r545, %r544, 257, %r542;
	or.b32  	%r546, %r541, 4;
	mad.lo.s32 	%r547, %r546, 257, %r542;
	or.b32  	%r548, %r541, 6;
	mad.lo.s32 	%r549, %r548, 257, %r542;
	or.b32  	%r550, %r541, 8;
	mad.lo.s32 	%r551, %r550, 257, %r542;
	or.b32  	%r552, %r541, 10;
	mad.lo.s32 	%r553, %r552, 257, %r542;
	or.b32  	%r554, %r541, 12;
	mad.lo.s32 	%r555, %r554, 257, %r542;
	or.b32  	%r556, %r541, 14;
	mad.lo.s32 	%r557, %r556, 257, %r542;
	or.b32  	%r558, %r541, 16;
	mad.lo.s32 	%r559, %r558, 257, %r542;
	or.b32  	%r560, %r541, 18;
	mad.lo.s32 	%r561, %r560, 257, %r542;
	or.b32  	%r562, %r541, 20;
	mad.lo.s32 	%r563, %r562, 257, %r542;
	or.b32  	%r564, %r541, 22;
	mad.lo.s32 	%r565, %r564, 257, %r542;
	or.b32  	%r566, %r541, 24;
	mad.lo.s32 	%r567, %r566, 257, %r542;
	or.b32  	%r568, %r541, 26;
	mad.lo.s32 	%r569, %r568, 257, %r542;
	or.b32  	%r570, %r541, 28;
	mad.lo.s32 	%r571, %r570, 257, %r542;
	or.b32  	%r572, %r541, 30;
	mad.lo.s32 	%r573, %r572, 257, %r542;
	mul.lo.s32 	%r574, %r128, 2184;
	mad.lo.s32 	%r575, %r524, 546, %r574;
	mad.lo.s32 	%r576, %r529, 33, %r575;
	setp.lt.u32 	%p233, %r3, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	bfe.s32 	%r577, %r1, 1, 1;
	and.b32  	%r578, %r577, 1032;
	bfe.s32 	%r579, %r3, 3, 1;
	and.b32  	%r580, %r3, 8;
	setp.eq.s32 	%p236, %r580, 0;
	and.b32  	%r581, %r579, 4144;
	mul.lo.s32 	%r582, %r541, 258;
	and.b32  	%r583, %r536, 12;
	and.b32  	%r584, %r1, 1;
	neg.s32 	%r585, %r584;
	setp.eq.b32 	%p237, %r584, 1;
	and.b32  	%r586, %r585, 2064;
	bfe.s32 	%r587, %r1, 2, 1;
	and.b32  	%r588, %r1, 4;
	setp.eq.s32 	%p238, %r588, 0;
	and.b32  	%r589, %r587, 516;
	or.b32  	%r590, %r524, %r578;
	add.s32 	%r591, %r583, %r582;
	add.s32 	%r592, %r591, %r581;
	add.s32 	%r593, %r592, %r586;
	add.s32 	%r594, %r593, %r589;
	add.s32 	%r595, %r594, %r590;
	mul.wide.u32 	%rd77, %r595, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	cvt.u64.u32 	%rd79, %r590;
	selp.b64 	%rd80, 0, 516, %p238;
	selp.b64 	%rd81, 2064, 0, %p237;
	selp.b64 	%rd82, 0, 4144, %p236;
	cvt.u64.u32 	%rd83, %r583;
	cvt.u64.u32 	%rd84, %r582;
	add.s64 	%rd85, %rd84, %rd83;
	add.s64 	%rd86, %rd85, %rd82;
	add.s64 	%rd87, %rd86, %rd81;
	add.s64 	%rd88, %rd87, %rd80;
	add.s64 	%rd89, %rd88, %rd79;
	shl.b64 	%rd90, %rd89, 2;
	add.s64 	%rd8, %rd78, %rd90;
	shl.b32 	%r596, %r301, 20;
	shl.b32 	%r597, %r305, 9;
	add.s32 	%r598, %r597, %r596;
	or.b32  	%r159, %r158, %r2;
	and.b32  	%r160, %r3, 15;
	cvt.s64.s32 	%rd9, %r598;
	add.s32 	%r599, %r1, %r540;
	mul.wide.u32 	%rd91, %r599, 4;
	add.s64 	%rd10, %rd78, %rd91;
	cvt.u64.u32 	%rd92, %r1;
	cvt.u64.u32 	%rd11, %r540;
	add.s64 	%rd93, %rd11, %rd92;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd12, %rd78, %rd94;
	add.s32 	%r600, %r543, %r3;
	mul.wide.u32 	%rd95, %r600, 4;
	add.s64 	%rd13, %rd78, %rd95;
	add.s32 	%r601, %r545, %r3;
	mul.wide.u32 	%rd96, %r601, 4;
	add.s64 	%rd14, %rd78, %rd96;
	add.s32 	%r602, %r547, %r3;
	mul.wide.u32 	%rd97, %r602, 4;
	add.s64 	%rd15, %rd78, %rd97;
	add.s32 	%r603, %r549, %r3;
	mul.wide.u32 	%rd98, %r603, 4;
	add.s64 	%rd16, %rd78, %rd98;
	add.s32 	%r604, %r551, %r3;
	mul.wide.u32 	%rd99, %r604, 4;
	add.s64 	%rd17, %rd78, %rd99;
	add.s32 	%r605, %r553, %r3;
	mul.wide.u32 	%rd100, %r605, 4;
	add.s64 	%rd18, %rd78, %rd100;
	add.s32 	%r606, %r555, %r3;
	mul.wide.u32 	%rd101, %r606, 4;
	add.s64 	%rd19, %rd78, %rd101;
	add.s32 	%r607, %r557, %r3;
	mul.wide.u32 	%rd102, %r607, 4;
	add.s64 	%rd20, %rd78, %rd102;
	add.s32 	%r608, %r559, %r3;
	mul.wide.u32 	%rd103, %r608, 4;
	add.s64 	%rd21, %rd78, %rd103;
	add.s32 	%r609, %r561, %r3;
	mul.wide.u32 	%rd104, %r609, 4;
	add.s64 	%rd22, %rd78, %rd104;
	add.s32 	%r610, %r563, %r3;
	mul.wide.u32 	%rd105, %r610, 4;
	add.s64 	%rd23, %rd78, %rd105;
	add.s32 	%r611, %r565, %r3;
	mul.wide.u32 	%rd106, %r611, 4;
	add.s64 	%rd24, %rd78, %rd106;
	add.s32 	%r612, %r567, %r3;
	mul.wide.u32 	%rd107, %r612, 4;
	add.s64 	%rd25, %rd78, %rd107;
	add.s32 	%r613, %r569, %r3;
	mul.wide.u32 	%rd108, %r613, 4;
	add.s64 	%rd26, %rd78, %rd108;
	add.s32 	%r614, %r571, %r3;
	mul.wide.u32 	%rd109, %r614, 4;
	add.s64 	%rd27, %rd78, %rd109;
	add.s32 	%r615, %r573, %r3;
	mul.wide.u32 	%rd110, %r615, 4;
	add.s64 	%rd28, %rd78, %rd110;
	add.s32 	%r616, %r576, %r541;
	mul.wide.u32 	%rd111, %r616, 4;
	add.s64 	%rd29, %rd78, %rd111;
	add.s32 	%r617, %r576, %r544;
	mul.wide.u32 	%rd112, %r617, 4;
	add.s64 	%rd30, %rd78, %rd112;
	add.s32 	%r618, %r576, %r546;
	mul.wide.u32 	%rd113, %r618, 4;
	add.s64 	%rd31, %rd78, %rd113;
	add.s32 	%r619, %r576, %r548;
	mul.wide.u32 	%rd114, %r619, 4;
	add.s64 	%rd32, %rd78, %rd114;
	add.s32 	%r620, %r576, %r550;
	mul.wide.u32 	%rd115, %r620, 4;
	add.s64 	%rd33, %rd78, %rd115;
	add.s32 	%r621, %r576, %r552;
	mul.wide.u32 	%rd116, %r621, 4;
	add.s64 	%rd34, %rd78, %rd116;
	add.s32 	%r622, %r576, %r554;
	mul.wide.u32 	%rd117, %r622, 4;
	add.s64 	%rd35, %rd78, %rd117;
	add.s32 	%r623, %r576, %r556;
	mul.wide.u32 	%rd118, %r623, 4;
	add.s64 	%rd36, %rd78, %rd118;
	add.s32 	%r624, %r576, %r558;
	mul.wide.u32 	%rd119, %r624, 4;
	add.s64 	%rd37, %rd78, %rd119;
	add.s32 	%r625, %r576, %r560;
	mul.wide.u32 	%rd120, %r625, 4;
	add.s64 	%rd38, %rd78, %rd120;
	add.s32 	%r626, %r576, %r562;
	mul.wide.u32 	%rd121, %r626, 4;
	add.s64 	%rd39, %rd78, %rd121;
	add.s32 	%r627, %r576, %r564;
	mul.wide.u32 	%rd122, %r627, 4;
	add.s64 	%rd40, %rd78, %rd122;
	add.s32 	%r628, %r576, %r566;
	mul.wide.u32 	%rd123, %r628, 4;
	add.s64 	%rd41, %rd78, %rd123;
	add.s32 	%r629, %r576, %r568;
	mul.wide.u32 	%rd124, %r629, 4;
	add.s64 	%rd42, %rd78, %rd124;
	add.s32 	%r630, %r576, %r570;
	mul.wide.u32 	%rd125, %r630, 4;
	add.s64 	%rd43, %rd78, %rd125;
	add.s32 	%r631, %r576, %r572;
	mul.wide.u32 	%rd126, %r631, 4;
	add.s64 	%rd44, %rd78, %rd126;
	add.s32 	%r632, %r129, -1;
	setp.lt.u32 	%p239, %r632, 3;
	or.pred  	%p240, %p233, %p239;
	or.pred  	%p241, %p240, %p234;
	and.b32  	%r633, %r3, 24;
	setp.eq.s32 	%p242, %r633, 24;
	or.pred  	%p243, %p235, %p242;
	selp.b32 	%r161, 1145324612, -286331154, %p240;
	or.pred  	%p1, %p241, %p243;
	add.s32 	%r634, %r595, 32;
	mul.wide.u32 	%rd127, %r634, 4;
	add.s64 	%rd45, %rd78, %rd127;
	add.s32 	%r635, %r595, 48;
	mul.wide.u32 	%rd128, %r635, 4;
	add.s64 	%rd46, %rd78, %rd128;
	add.s32 	%r636, %r595, 64;
	mul.wide.u32 	%rd129, %r636, 4;
	add.s64 	%rd47, %rd78, %rd129;
	add.s32 	%r637, %r595, 80;
	mul.wide.u32 	%rd130, %r637, 4;
	add.s64 	%rd48, %rd78, %rd130;
	add.s32 	%r638, %r595, 96;
	mul.wide.u32 	%rd131, %r638, 4;
	add.s64 	%rd49, %rd78, %rd131;
	add.s32 	%r639, %r595, 112;
	mul.wide.u32 	%rd132, %r639, 4;
	add.s64 	%rd50, %rd78, %rd132;
	add.s32 	%r640, %r595, 128;
	mul.wide.u32 	%rd133, %r640, 4;
	add.s64 	%rd51, %rd78, %rd133;
	add.s32 	%r641, %r595, 144;
	mul.wide.u32 	%rd134, %r641, 4;
	add.s64 	%rd52, %rd78, %rd134;
	add.s32 	%r642, %r595, 160;
	mul.wide.u32 	%rd135, %r642, 4;
	add.s64 	%rd53, %rd78, %rd135;
	add.s32 	%r643, %r595, 176;
	mul.wide.u32 	%rd136, %r643, 4;
	add.s64 	%rd54, %rd78, %rd136;
	add.s32 	%r644, %r595, 192;
	mul.wide.u32 	%rd137, %r644, 4;
	add.s64 	%rd55, %rd78, %rd137;
	add.s32 	%r645, %r595, 208;
	mul.wide.u32 	%rd138, %r645, 4;
	add.s64 	%rd56, %rd78, %rd138;
	add.s32 	%r646, %r595, 224;
	mul.wide.u32 	%rd139, %r646, 4;
	add.s64 	%rd57, %rd78, %rd139;
	add.s32 	%r647, %r595, 240;
	mul.wide.u32 	%rd140, %r647, 4;
	add.s64 	%rd58, %rd78, %rd140;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p245, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3495, %r89;
	mov.u32 	%r3496, %r89;
	mov.u32 	%r3497, %r89;
	bra.uni 	$L__BB0_199;
$L__BB0_170:                            // %L32745
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p348, %r89, 192;
	mov.u32 	%r89, %r127;
	@%p348 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_171;
$L__BB0_199:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_217 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r648, %r89, %r299;
	setp.lt.s32 	%p244, %r648, %r300;
	@%p244 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_171;
$L__BB0_200:                            // %pass739
                                        //   in Loop: Header=BB0_199 Depth=1
	cvt.u32.u64 	%r841, %rd11;
	or.b32  	%r842, %r89, %r1;
	shl.b32 	%r843, %r842, 14;
	and.b32  	%r844, %r843, 3391488;
	or.b32  	%r845, %r157, %r844;
	add.s32 	%r846, %r156, %r845;
	shr.s32 	%r847, %r846, 31;
	shr.u32 	%r848, %r847, 10;
	add.s32 	%r849, %r846, %r848;
	shr.s32 	%r850, %r849, 22;
	setp.lt.s32 	%p246, %r846, 0;
	and.b32  	%r851, %r849, -4194304;
	setp.ne.s32 	%p247, %r851, %r846;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r852, 1, 0, %p248;
	sub.s32 	%r853, %r852, %r850;
	shl.b32 	%r854, %r853, 22;
	add.s32 	%r855, %r854, %r846;
	mul.wide.s32 	%rd141, %r855, 4;
	add.s64 	%rd142, %rd3, %rd141;
	ld.global.v4.u32 	{%r856, %r857, %r858, %r859}, [%rd142];
	or.b32  	%r860, %r842, 16;
	shl.b32 	%r861, %r860, 14;
	and.b32  	%r862, %r861, 3653632;
	or.b32  	%r863, %r157, %r862;
	add.s32 	%r864, %r156, %r863;
	shr.s32 	%r865, %r864, 31;
	shr.u32 	%r866, %r865, 10;
	add.s32 	%r867, %r864, %r866;
	shr.s32 	%r868, %r867, 22;
	setp.lt.s32 	%p249, %r864, 0;
	and.b32  	%r869, %r867, -4194304;
	setp.ne.s32 	%p250, %r869, %r864;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r870, 1, 0, %p251;
	sub.s32 	%r871, %r870, %r868;
	shl.b32 	%r872, %r871, 22;
	add.s32 	%r873, %r872, %r864;
	mul.wide.s32 	%rd143, %r873, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r874, %r875, %r876, %r877}, [%rd144];
	and.b32  	%r878, %r89, 192;
	or.b32  	%r879, %r1, %r878;
	shl.b32 	%r880, %r879, 14;
	or.b32  	%r881, %r880, %r157;
	or.b32  	%r882, %r881, 524288;
	add.s32 	%r883, %r156, %r882;
	shr.s32 	%r884, %r883, 31;
	shr.u32 	%r885, %r884, 10;
	add.s32 	%r886, %r883, %r885;
	shr.s32 	%r887, %r886, 22;
	setp.lt.s32 	%p252, %r883, 0;
	and.b32  	%r888, %r886, -4194304;
	setp.ne.s32 	%p253, %r888, %r883;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r889, 1, 0, %p254;
	sub.s32 	%r890, %r889, %r887;
	shl.b32 	%r891, %r890, 22;
	add.s32 	%r892, %r891, %r883;
	mul.wide.s32 	%rd145, %r892, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r893, %r894, %r895, %r896}, [%rd146];
	or.b32  	%r897, %r881, 786432;
	add.s32 	%r898, %r156, %r897;
	shr.s32 	%r899, %r898, 31;
	shr.u32 	%r900, %r899, 10;
	add.s32 	%r901, %r898, %r900;
	shr.s32 	%r902, %r901, 22;
	setp.lt.s32 	%p255, %r898, 0;
	and.b32  	%r903, %r901, -4194304;
	setp.ne.s32 	%p256, %r903, %r898;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r904, 1, 0, %p257;
	sub.s32 	%r905, %r904, %r902;
	shl.b32 	%r906, %r905, 22;
	add.s32 	%r907, %r906, %r898;
	mul.wide.s32 	%rd147, %r907, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r908, %r909, %r910, %r911}, [%rd148];
	selp.b32 	%r912, %r858, %r856, %p245;
	shfl.sync.bfly.b32	%r913, %r912, 16, 31, -1;
	selp.b32 	%r651, %r856, %r913, %p245;
	selp.b32 	%r656, %r913, %r858, %p245;
	selp.b32 	%r914, %r859, %r857, %p245;
	shfl.sync.bfly.b32	%r915, %r914, 16, 31, -1;
	selp.b32 	%r659, %r857, %r915, %p245;
	selp.b32 	%r664, %r915, %r859, %p245;
	selp.b32 	%r916, %r876, %r874, %p245;
	shfl.sync.bfly.b32	%r917, %r916, 16, 31, -1;
	selp.b32 	%r667, %r874, %r917, %p245;
	selp.b32 	%r672, %r917, %r876, %p245;
	selp.b32 	%r918, %r877, %r875, %p245;
	shfl.sync.bfly.b32	%r919, %r918, 16, 31, -1;
	selp.b32 	%r675, %r875, %r919, %p245;
	selp.b32 	%r680, %r919, %r877, %p245;
	selp.b32 	%r920, %r895, %r893, %p245;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r683, %r893, %r921, %p245;
	selp.b32 	%r688, %r921, %r895, %p245;
	selp.b32 	%r922, %r896, %r894, %p245;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r691, %r894, %r923, %p245;
	selp.b32 	%r696, %r923, %r896, %p245;
	selp.b32 	%r924, %r910, %r908, %p245;
	shfl.sync.bfly.b32	%r925, %r924, 16, 31, -1;
	selp.b32 	%r699, %r908, %r925, %p245;
	selp.b32 	%r704, %r925, %r910, %p245;
	selp.b32 	%r926, %r911, %r909, %p245;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r707, %r909, %r927, %p245;
	selp.b32 	%r712, %r927, %r911, %p245;
	shl.b32 	%r652, %r656, 4;
	mov.u32 	%r650, 252645135;
	// begin inline asm
	lop3.b32 %r714, %r650, %r651, %r652, 202;
	// end inline asm
	shr.u32 	%r655, %r651, 4;
	// begin inline asm
	lop3.b32 %r730, %r650, %r655, %r656, 202;
	// end inline asm
	shl.b32 	%r660, %r664, 4;
	// begin inline asm
	lop3.b32 %r722, %r650, %r659, %r660, 202;
	// end inline asm
	shr.u32 	%r663, %r659, 4;
	// begin inline asm
	lop3.b32 %r738, %r650, %r663, %r664, 202;
	// end inline asm
	shl.b32 	%r668, %r672, 4;
	// begin inline asm
	lop3.b32 %r746, %r650, %r667, %r668, 202;
	// end inline asm
	shr.u32 	%r671, %r667, 4;
	// begin inline asm
	lop3.b32 %r762, %r650, %r671, %r672, 202;
	// end inline asm
	shl.b32 	%r676, %r680, 4;
	// begin inline asm
	lop3.b32 %r754, %r650, %r675, %r676, 202;
	// end inline asm
	shr.u32 	%r679, %r675, 4;
	// begin inline asm
	lop3.b32 %r770, %r650, %r679, %r680, 202;
	// end inline asm
	shl.b32 	%r684, %r688, 4;
	// begin inline asm
	lop3.b32 %r715, %r650, %r683, %r684, 202;
	// end inline asm
	shr.u32 	%r687, %r683, 4;
	// begin inline asm
	lop3.b32 %r731, %r650, %r687, %r688, 202;
	// end inline asm
	shl.b32 	%r692, %r696, 4;
	// begin inline asm
	lop3.b32 %r723, %r650, %r691, %r692, 202;
	// end inline asm
	shr.u32 	%r695, %r691, 4;
	// begin inline asm
	lop3.b32 %r739, %r650, %r695, %r696, 202;
	// end inline asm
	shl.b32 	%r700, %r704, 4;
	// begin inline asm
	lop3.b32 %r747, %r650, %r699, %r700, 202;
	// end inline asm
	shr.u32 	%r703, %r699, 4;
	// begin inline asm
	lop3.b32 %r763, %r650, %r703, %r704, 202;
	// end inline asm
	shl.b32 	%r708, %r712, 4;
	// begin inline asm
	lop3.b32 %r755, %r650, %r707, %r708, 202;
	// end inline asm
	shr.u32 	%r711, %r707, 4;
	// begin inline asm
	lop3.b32 %r771, %r650, %r711, %r712, 202;
	// end inline asm
	mov.u32 	%r716, 25152;
	// begin inline asm
	prmt.b32 %r778, %r714, %r715, %r716;
	// end inline asm
	mov.u32 	%r720, 29521;
	// begin inline asm
	prmt.b32 %r810, %r714, %r715, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r722, %r723, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r722, %r723, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r730, %r731, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r730, %r731, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r738, %r739, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r738, %r739, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r746, %r747, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r746, %r747, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r754, %r755, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r834, %r754, %r755, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r762, %r763, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r762, %r763, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r770, %r771, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r770, %r771, %r720;
	// end inline asm
	mov.u32 	%r780, 21520;
	// begin inline asm
	prmt.b32 %r777, %r778, %r779, %r780;
	// end inline asm
	mov.u32 	%r784, 30258;
	// begin inline asm
	prmt.b32 %r781, %r778, %r779, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r786, %r787, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r786, %r787, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r794, %r795, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r794, %r795, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r802, %r803, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r802, %r803, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r810, %r811, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r810, %r811, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r818, %r819, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r818, %r819, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r826, %r827, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r826, %r827, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r834, %r835, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r834, %r835, %r784;
	// end inline asm
	st.shared.u32 	[%rd10], %r777;
	st.shared.u32 	[%rd12+512], %r785;
	st.shared.u32 	[%rd12+256], %r781;
	st.shared.u32 	[%rd12+768], %r789;
	and.b32  	%r928, %r860, 31;
	add.s32 	%r929, %r928, %r841;
	mul.wide.u32 	%rd149, %r929, 4;
	add.s64 	%rd151, %rd78, %rd149;
	st.shared.u32 	[%rd151], %r793;
	cvt.u64.u32 	%rd152, %r928;
	add.s64 	%rd153, %rd11, %rd152;
	shl.b64 	%rd154, %rd153, 2;
	add.s64 	%rd155, %rd78, %rd154;
	st.shared.u32 	[%rd155+512], %r801;
	st.shared.u32 	[%rd155+256], %r797;
	st.shared.u32 	[%rd155+768], %r805;
	st.shared.u32 	[%rd12+128], %r809;
	st.shared.u32 	[%rd12+640], %r817;
	st.shared.u32 	[%rd12+384], %r813;
	st.shared.u32 	[%rd12+896], %r821;
	st.shared.u32 	[%rd155+128], %r825;
	st.shared.u32 	[%rd155+640], %r833;
	st.shared.u32 	[%rd155+384], %r829;
	st.shared.u32 	[%rd155+896], %r837;
	bar.sync 	0;
	ld.shared.u32 	%r162, [%rd13];
	ld.shared.u32 	%r163, [%rd14];
	ld.shared.u32 	%r164, [%rd15];
	ld.shared.u32 	%r165, [%rd16];
	ld.shared.u32 	%r166, [%rd17];
	ld.shared.u32 	%r167, [%rd18];
	ld.shared.u32 	%r168, [%rd19];
	ld.shared.u32 	%r169, [%rd20];
	ld.shared.u32 	%r170, [%rd21];
	ld.shared.u32 	%r171, [%rd22];
	ld.shared.u32 	%r172, [%rd23];
	ld.shared.u32 	%r173, [%rd24];
	ld.shared.u32 	%r174, [%rd25];
	ld.shared.u32 	%r175, [%rd26];
	ld.shared.u32 	%r176, [%rd27];
	ld.shared.u32 	%r177, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r178, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r193, %r153, 15, 31, -1;
	setp.eq.s32 	%p258, %r178, 999999999;
	@%p258 bra 	$L__BB0_136;
// %bb.201:                             // %pass3083
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r930, %r178, %r3;
	mul.wide.s32 	%rd156, %r930, 4;
	add.s64 	%rd158, %rd78, %rd156;
	st.shared.u32 	[%rd158], %r162;
	setp.eq.s32 	%p259, %r179, 999999999;
	@%p259 bra 	$L__BB0_137;
// %bb.202:                             // %pass3151
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r931, %r179, %r3;
	mul.wide.s32 	%rd159, %r931, 4;
	add.s64 	%rd161, %rd78, %rd159;
	st.shared.u32 	[%rd161], %r163;
	setp.eq.s32 	%p260, %r180, 999999999;
	@%p260 bra 	$L__BB0_138;
// %bb.203:                             // %pass3219
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r932, %r180, %r3;
	mul.wide.s32 	%rd162, %r932, 4;
	add.s64 	%rd164, %rd78, %rd162;
	st.shared.u32 	[%rd164], %r164;
	setp.eq.s32 	%p261, %r181, 999999999;
	@%p261 bra 	$L__BB0_139;
// %bb.204:                             // %pass3287
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r933, %r181, %r3;
	mul.wide.s32 	%rd165, %r933, 4;
	add.s64 	%rd167, %rd78, %rd165;
	st.shared.u32 	[%rd167], %r165;
	setp.eq.s32 	%p262, %r182, 999999999;
	@%p262 bra 	$L__BB0_140;
// %bb.205:                             // %pass3355
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r934, %r182, %r3;
	mul.wide.s32 	%rd168, %r934, 4;
	add.s64 	%rd170, %rd78, %rd168;
	st.shared.u32 	[%rd170], %r166;
	setp.eq.s32 	%p263, %r183, 999999999;
	@%p263 bra 	$L__BB0_141;
// %bb.206:                             // %pass3423
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r935, %r183, %r3;
	mul.wide.s32 	%rd171, %r935, 4;
	add.s64 	%rd173, %rd78, %rd171;
	st.shared.u32 	[%rd173], %r167;
	setp.eq.s32 	%p264, %r184, 999999999;
	@%p264 bra 	$L__BB0_142;
// %bb.207:                             // %pass3491
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r936, %r184, %r3;
	mul.wide.s32 	%rd174, %r936, 4;
	add.s64 	%rd176, %rd78, %rd174;
	st.shared.u32 	[%rd176], %r168;
	setp.eq.s32 	%p265, %r185, 999999999;
	@%p265 bra 	$L__BB0_143;
// %bb.208:                             // %pass3559
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r937, %r185, %r3;
	mul.wide.s32 	%rd177, %r937, 4;
	add.s64 	%rd179, %rd78, %rd177;
	st.shared.u32 	[%rd179], %r169;
	setp.eq.s32 	%p266, %r186, 999999999;
	@%p266 bra 	$L__BB0_144;
// %bb.209:                             // %pass3627
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r938, %r186, %r3;
	mul.wide.s32 	%rd180, %r938, 4;
	add.s64 	%rd182, %rd78, %rd180;
	st.shared.u32 	[%rd182], %r170;
	setp.eq.s32 	%p267, %r187, 999999999;
	@%p267 bra 	$L__BB0_145;
// %bb.210:                             // %pass3695
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r939, %r187, %r3;
	mul.wide.s32 	%rd183, %r939, 4;
	add.s64 	%rd185, %rd78, %rd183;
	st.shared.u32 	[%rd185], %r171;
	setp.eq.s32 	%p268, %r188, 999999999;
	@%p268 bra 	$L__BB0_146;
// %bb.211:                             // %pass3763
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r940, %r188, %r3;
	mul.wide.s32 	%rd186, %r940, 4;
	add.s64 	%rd188, %rd78, %rd186;
	st.shared.u32 	[%rd188], %r172;
	setp.eq.s32 	%p269, %r189, 999999999;
	@%p269 bra 	$L__BB0_147;
// %bb.212:                             // %pass3831
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r941, %r189, %r3;
	mul.wide.s32 	%rd189, %r941, 4;
	add.s64 	%rd191, %rd78, %rd189;
	st.shared.u32 	[%rd191], %r173;
	setp.eq.s32 	%p270, %r190, 999999999;
	@%p270 bra 	$L__BB0_148;
// %bb.213:                             // %pass3899
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r942, %r190, %r3;
	mul.wide.s32 	%rd192, %r942, 4;
	add.s64 	%rd194, %rd78, %rd192;
	st.shared.u32 	[%rd194], %r174;
	setp.eq.s32 	%p271, %r191, 999999999;
	@%p271 bra 	$L__BB0_149;
// %bb.214:                             // %pass3967
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r943, %r191, %r3;
	mul.wide.s32 	%rd195, %r943, 4;
	add.s64 	%rd197, %rd78, %rd195;
	st.shared.u32 	[%rd197], %r175;
	setp.eq.s32 	%p272, %r192, 999999999;
	@%p272 bra 	$L__BB0_150;
// %bb.215:                             // %pass4035
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r944, %r192, %r3;
	mul.wide.s32 	%rd198, %r944, 4;
	add.s64 	%rd200, %rd78, %rd198;
	st.shared.u32 	[%rd200], %r176;
	setp.eq.s32 	%p273, %r193, 999999999;
	@%p273 bra 	$L__BB0_151;
// %bb.216:                             // %pass4103
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r946, %r193, %r3;
	mul.wide.s32 	%rd201, %r946, 4;
	add.s64 	%rd203, %rd78, %rd201;
	st.shared.u32 	[%rd203], %r177;
	bar.sync 	0;
	ld.shared.u32 	%r194, [%rd29];
	ld.shared.u32 	%r195, [%rd30];
	ld.shared.u32 	%r196, [%rd31];
	ld.shared.u32 	%r197, [%rd32];
	ld.shared.u32 	%r198, [%rd33];
	ld.shared.u32 	%r199, [%rd34];
	ld.shared.u32 	%r200, [%rd35];
	ld.shared.u32 	%r201, [%rd36];
	ld.shared.u32 	%r202, [%rd37];
	ld.shared.u32 	%r203, [%rd38];
	ld.shared.u32 	%r204, [%rd39];
	ld.shared.u32 	%r205, [%rd40];
	ld.shared.u32 	%r206, [%rd41];
	ld.shared.u32 	%r207, [%rd42];
	ld.shared.u32 	%r208, [%rd43];
	ld.shared.u32 	%r209, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3487, 16;
	bra.uni 	$L__BB0_217;
$L__BB0_152:                            // %L22521
                                        //   in Loop: Header=BB0_217 Depth=2
	bar.sync 	0;
	add.s32 	%r3487, %r3487, -8;
	setp.ne.s32 	%p310, %r3487, -16;
	@%p310 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_153;
$L__BB0_217:                            // %L12334
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3487, 16;
	selp.b32 	%r1339, %r194, 0, %p274;
	setp.eq.s32 	%p275, %r3487, 8;
	selp.b32 	%r1340, %r198, %r1339, %p275;
	setp.eq.s32 	%p276, %r3487, 0;
	selp.b32 	%r1341, %r202, %r1340, %p276;
	setp.eq.s32 	%p277, %r3487, -8;
	selp.b32 	%r1342, %r206, %r1341, %p277;
	selp.b32 	%r1343, %r195, 0, %p274;
	selp.b32 	%r1344, %r199, %r1343, %p275;
	selp.b32 	%r1345, %r203, %r1344, %p276;
	selp.b32 	%r1346, %r207, %r1345, %p277;
	selp.b32 	%r1347, %r196, 0, %p274;
	selp.b32 	%r1348, %r200, %r1347, %p275;
	selp.b32 	%r1349, %r204, %r1348, %p276;
	selp.b32 	%r1350, %r208, %r1349, %p277;
	selp.b32 	%r1351, %r197, 0, %p274;
	selp.b32 	%r1352, %r201, %r1351, %p275;
	selp.b32 	%r1353, %r205, %r1352, %p276;
	selp.b32 	%r1354, %r209, %r1353, %p277;
	// begin inline asm
	mov.b32 %r952, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r951, %r1342, -2004318072;
	mov.u32 	%r1088, 983055;
	// begin inline asm
	lop3.b32 %r949, %r1088, %r951, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r952, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	mov.u32 	%r1099, 15728880;
	// begin inline asm
	lop3.b32 %r960, %r1099, %r951, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r963, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r997, %r1346, -2004318072;
	// begin inline asm
	lop3.b32 %r995, %r1088, %r997, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r998, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1006, %r1099, %r997, %r1009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r1009, %r1010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1014, %r1006, %r1011;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1043, %r1350, -2004318072;
	// begin inline asm
	lop3.b32 %r1041, %r1088, %r1043, %r1044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1044, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1052, %r1099, %r1043, %r1055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1057, %r1055, %r1056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1060, %r1052, %r1057;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1089, %r1354, -2004318072;
	// begin inline asm
	lop3.b32 %r1087, %r1088, %r1089, %r1090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1092, %r1090, %r1091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1095, %r1087, %r1092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1098, %r1099, %r1089, %r1101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1102, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1103, %r1101, %r1102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1106, %r1098, %r1103;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r957;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1131, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1134, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1003;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1137, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1014;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1049;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1143, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1060;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1095;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1106;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1152, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1210, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1155, %r1156}, {%r328, %r331}, {%r1131}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1162, %r1163}, {%r328, %r331}, {%r1134}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1170}, {%r328, %r331}, {%r1137}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r328, %r331}, {%r1140}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r328, %r331}, {%r1143}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1191}, {%r328, %r331}, {%r1146}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1197, %r1198}, {%r328, %r331}, {%r1149}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1204, %r1205}, {%r328, %r331}, {%r1152}, {%r1210, %r1210};
	// end inline asm
	@%p1 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;
$L__BB0_219:                            // %pass5517
                                        //   in Loop: Header=BB0_217 Depth=2
	// begin inline asm
	neg.f16x2 %r1211, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r1211, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r366, %r1155, %r1213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1220, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r1220, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r366, %r1162, %r1222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1229, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r1229, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r366, %r1169, %r1231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1238, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1240, %r1238, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1243, %r366, %r1176, %r1240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1247, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r1247, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r366, %r1183, %r1249;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1256, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r1256, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r366, %r1190, %r1258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1265, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r1265, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r366, %r1197, %r1267;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1274, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r1274, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r366, %r1204, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r369, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r366, %r1156, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r369, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r366, %r1163, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r369, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r366, %r1170, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r369, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r366, %r1177, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r369, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r366, %r1184, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r369, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r366, %r1191, %r1318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1325, %r369, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r366, %r1198, %r1325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r369, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r366, %r1205, %r1332;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r413, %r416}, {%r1216, %r1286}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r413, %r416}, {%r1225, %r1293}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1373, %r1374}, {%r413, %r416}, {%r1234, %r1300}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1382, %r1383}, {%r413, %r416}, {%r1243, %r1307}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1391, %r1392}, {%r413, %r416}, {%r1252, %r1314}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1400, %r1401}, {%r413, %r416}, {%r1261, %r1321}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1409, %r1410}, {%r413, %r416}, {%r1270, %r1328}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1418, %r1419}, {%r413, %r416}, {%r1279, %r1335}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1495, [%rd7];
	ld.shared.u32 	%r1502, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r425, %r428}, {%r1495}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r425, %r428}, {%r1502}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r459, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r459, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r462, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r459, %r1509, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r462, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r459, %r1518, %r1530;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1556, %r1559}, {%r501, %r504}, {%r1510, %r1526}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1563, %r1567}, {%r501, %r504}, {%r1519, %r1533}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1556, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1562;
	// end inline asm
	mov.u32 	%r1571, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3508, %r1571, %r1566, %r3497;
	// end inline asm
	add.s32 	%r3506, %r3495, 1;
	setp.ne.s32 	%p278, %r3506, 3;
	@%p278 bra 	$L__BB0_221;
// %bb.220:                             // %pass6085
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1575, %r3496, 20;
	or.b32  	%r1576, %r1575, %r159;
	or.b32  	%r1577, %r1576, %r160;
	or.b32  	%r1578, %r1577, %r5;
	cvt.u64.u32 	%rd206, %r1578;
	add.s64 	%rd207, %rd206, %rd9;
	shr.u64 	%rd208, %rd207, 35;
	add.s64 	%rd209, %rd207, %rd208;
	shr.s64 	%rd210, %rd209, 29;
	setp.lt.s64 	%p279, %rd207, 0;
	and.b64  	%rd211, %rd209, -536870912;
	setp.ne.s64 	%p280, %rd211, %rd207;
	and.pred  	%p281, %p279, %p280;
	selp.u64 	%rd212, 1, 0, %p281;
	sub.s64 	%rd213, %rd212, %rd210;
	shl.b64 	%rd214, %rd213, 29;
	add.s64 	%rd215, %rd214, %rd207;
	shl.b64 	%rd216, %rd215, 2;
	add.s64 	%rd217, %rd4, %rd216;
	st.global.u32 	[%rd217], %r3508;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3506, 0;
	mov.u32 	%r3508, %r3506;
$L__BB0_221:                            // %pass6331
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1583, [%rd45];
	ld.shared.u32 	%r1590, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1600, %r1597}, {%r425, %r428}, {%r1583}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1609, %r1606}, {%r425, %r428}, {%r1590}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r459, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r459, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r462, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r459, %r1597, %r1611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1618, %r462, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r459, %r1606, %r1618;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1644, %r1647}, {%r501, %r504}, {%r1598, %r1614}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1651, %r1655}, {%r501, %r504}, {%r1607, %r1621}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1643, %r1644, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r1647, %r1647, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1651, %r1651, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r1571, %r1654, %r3508;
	// end inline asm
	add.s32 	%r3509, %r3506, 1;
	setp.ne.s32 	%p282, %r3509, 3;
	@%p282 bra 	$L__BB0_223;
// %bb.222:                             // %pass6595
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1663, %r3496, 20;
	or.b32  	%r1664, %r1663, %r159;
	or.b32  	%r1665, %r1664, %r160;
	or.b32  	%r1666, %r1665, %r5;
	cvt.u64.u32 	%rd218, %r1666;
	add.s64 	%rd219, %rd218, %rd9;
	shr.u64 	%rd220, %rd219, 35;
	add.s64 	%rd221, %rd219, %rd220;
	shr.s64 	%rd222, %rd221, 29;
	setp.lt.s64 	%p283, %rd219, 0;
	and.b64  	%rd223, %rd221, -536870912;
	setp.ne.s64 	%p284, %rd223, %rd219;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd224, 1, 0, %p285;
	sub.s64 	%rd225, %rd224, %rd222;
	shl.b64 	%rd226, %rd225, 29;
	add.s64 	%rd227, %rd226, %rd219;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd4, %rd228;
	st.global.u32 	[%rd229], %r3511;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3509, 0;
	mov.u32 	%r3511, %r3509;
$L__BB0_223:                            // %pass6841
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1671, [%rd47];
	ld.shared.u32 	%r1678, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1688, %r1685}, {%r425, %r428}, {%r1671}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r425, %r428}, {%r1678}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1681, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r1681, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r459, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r459, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r462, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r459, %r1685, %r1699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r462, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r459, %r1694, %r1706;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1732, %r1735}, {%r501, %r504}, {%r1686, %r1702}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1739, %r1743}, {%r501, %r504}, {%r1695, %r1709}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r1732, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r1735, %r1735, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r1739, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r1743, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r1571, %r1742, %r3511;
	// end inline asm
	add.s32 	%r3512, %r3509, 1;
	setp.ne.s32 	%p286, %r3512, 3;
	@%p286 bra 	$L__BB0_225;
// %bb.224:                             // %pass7105
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1751, %r3496, 20;
	or.b32  	%r1752, %r1751, %r159;
	or.b32  	%r1753, %r1752, %r160;
	or.b32  	%r1754, %r1753, %r5;
	cvt.u64.u32 	%rd230, %r1754;
	add.s64 	%rd231, %rd230, %rd9;
	shr.u64 	%rd232, %rd231, 35;
	add.s64 	%rd233, %rd231, %rd232;
	shr.s64 	%rd234, %rd233, 29;
	setp.lt.s64 	%p287, %rd231, 0;
	and.b64  	%rd235, %rd233, -536870912;
	setp.ne.s64 	%p288, %rd235, %rd231;
	and.pred  	%p289, %p287, %p288;
	selp.u64 	%rd236, 1, 0, %p289;
	sub.s64 	%rd237, %rd236, %rd234;
	shl.b64 	%rd238, %rd237, 29;
	add.s64 	%rd239, %rd238, %rd231;
	shl.b64 	%rd240, %rd239, 2;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3514;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3512, 0;
	mov.u32 	%r3514, %r3512;
$L__BB0_225:                            // %pass7351
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1759, [%rd49];
	ld.shared.u32 	%r1766, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1776, %r1773}, {%r425, %r428}, {%r1759}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1785, %r1782}, {%r425, %r428}, {%r1766}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1769, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r1769, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r459, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1778, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r1778, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r459, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r462, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r459, %r1773, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r462, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r459, %r1782, %r1794;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1820, %r1823}, {%r501, %r504}, {%r1774, %r1790}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1827, %r1831}, {%r501, %r504}, {%r1783, %r1797}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1819, %r1820, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1831, %r1826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r1571, %r1830, %r3514;
	// end inline asm
	add.s32 	%r3515, %r3512, 1;
	setp.ne.s32 	%p290, %r3515, 3;
	@%p290 bra 	$L__BB0_227;
// %bb.226:                             // %pass7615
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1839, %r3496, 20;
	or.b32  	%r1840, %r1839, %r159;
	or.b32  	%r1841, %r1840, %r160;
	or.b32  	%r1842, %r1841, %r5;
	cvt.u64.u32 	%rd242, %r1842;
	add.s64 	%rd243, %rd242, %rd9;
	shr.u64 	%rd244, %rd243, 35;
	add.s64 	%rd245, %rd243, %rd244;
	shr.s64 	%rd246, %rd245, 29;
	setp.lt.s64 	%p291, %rd243, 0;
	and.b64  	%rd247, %rd245, -536870912;
	setp.ne.s64 	%p292, %rd247, %rd243;
	and.pred  	%p293, %p291, %p292;
	selp.u64 	%rd248, 1, 0, %p293;
	sub.s64 	%rd249, %rd248, %rd246;
	shl.b64 	%rd250, %rd249, 29;
	add.s64 	%rd251, %rd250, %rd243;
	shl.b64 	%rd252, %rd251, 2;
	add.s64 	%rd253, %rd4, %rd252;
	st.global.u32 	[%rd253], %r3517;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3515, 0;
	mov.u32 	%r3517, %r3515;
$L__BB0_227:                            // %pass7861
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1847, [%rd51];
	ld.shared.u32 	%r1854, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1864, %r1861}, {%r425, %r428}, {%r1847}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1873, %r1870}, {%r425, %r428}, {%r1854}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1857, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r1857, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r459, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1866, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r1866, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r459, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r462, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r459, %r1861, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r462, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r459, %r1870, %r1882;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1908, %r1911}, {%r501, %r504}, {%r1862, %r1878}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1915, %r1919}, {%r501, %r504}, {%r1871, %r1885}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r1908, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r1911, %r1911, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1915, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r1919, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r1571, %r1918, %r3517;
	// end inline asm
	add.s32 	%r3518, %r3515, 1;
	setp.ne.s32 	%p294, %r3518, 3;
	@%p294 bra 	$L__BB0_229;
// %bb.228:                             // %pass8125
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r1927, %r3496, 20;
	or.b32  	%r1928, %r1927, %r159;
	or.b32  	%r1929, %r1928, %r160;
	or.b32  	%r1930, %r1929, %r5;
	cvt.u64.u32 	%rd254, %r1930;
	add.s64 	%rd255, %rd254, %rd9;
	shr.u64 	%rd256, %rd255, 35;
	add.s64 	%rd257, %rd255, %rd256;
	shr.s64 	%rd258, %rd257, 29;
	setp.lt.s64 	%p295, %rd255, 0;
	and.b64  	%rd259, %rd257, -536870912;
	setp.ne.s64 	%p296, %rd259, %rd255;
	and.pred  	%p297, %p295, %p296;
	selp.u64 	%rd260, 1, 0, %p297;
	sub.s64 	%rd261, %rd260, %rd258;
	shl.b64 	%rd262, %rd261, 29;
	add.s64 	%rd263, %rd262, %rd255;
	shl.b64 	%rd264, %rd263, 2;
	add.s64 	%rd265, %rd4, %rd264;
	st.global.u32 	[%rd265], %r3520;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3518, 0;
	mov.u32 	%r3520, %r3518;
$L__BB0_229:                            // %pass8371
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r1935, [%rd53];
	ld.shared.u32 	%r1942, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1952, %r1949}, {%r425, %r428}, {%r1935}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1961, %r1958}, {%r425, %r428}, {%r1942}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1945, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1945, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r459, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1954, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r459, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r462, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r459, %r1949, %r1963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r462, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r459, %r1958, %r1970;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1996, %r1999}, {%r501, %r504}, {%r1950, %r1966}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2003, %r2007}, {%r501, %r504}, {%r1959, %r1973}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r1996, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r1571, %r2006, %r3520;
	// end inline asm
	add.s32 	%r3521, %r3518, 1;
	setp.ne.s32 	%p298, %r3521, 3;
	@%p298 bra 	$L__BB0_231;
// %bb.230:                             // %pass8635
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2015, %r3496, 20;
	or.b32  	%r2016, %r2015, %r159;
	or.b32  	%r2017, %r2016, %r160;
	or.b32  	%r2018, %r2017, %r5;
	cvt.u64.u32 	%rd266, %r2018;
	add.s64 	%rd267, %rd266, %rd9;
	shr.u64 	%rd268, %rd267, 35;
	add.s64 	%rd269, %rd267, %rd268;
	shr.s64 	%rd270, %rd269, 29;
	setp.lt.s64 	%p299, %rd267, 0;
	and.b64  	%rd271, %rd269, -536870912;
	setp.ne.s64 	%p300, %rd271, %rd267;
	and.pred  	%p301, %p299, %p300;
	selp.u64 	%rd272, 1, 0, %p301;
	sub.s64 	%rd273, %rd272, %rd270;
	shl.b64 	%rd274, %rd273, 29;
	add.s64 	%rd275, %rd274, %rd267;
	shl.b64 	%rd276, %rd275, 2;
	add.s64 	%rd277, %rd4, %rd276;
	st.global.u32 	[%rd277], %r3523;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3521, 0;
	mov.u32 	%r3523, %r3521;
$L__BB0_231:                            // %pass8881
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r2023, [%rd55];
	ld.shared.u32 	%r2030, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2040, %r2037}, {%r425, %r428}, {%r2023}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2049, %r2046}, {%r425, %r428}, {%r2030}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2033, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r2033, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r459, %r2040, %r2035;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2042, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r2042, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r459, %r2049, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r462, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r459, %r2037, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r462, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r459, %r2046, %r2058;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2084, %r2087}, {%r501, %r504}, {%r2038, %r2054}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2091, %r2095}, {%r501, %r504}, {%r2047, %r2061}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r2084, %r2084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r2087, %r2087, %r2083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r2091, %r2091, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r2095, %r2095, %r2090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r1571, %r2094, %r3523;
	// end inline asm
	add.s32 	%r3524, %r3521, 1;
	setp.ne.s32 	%p302, %r3524, 3;
	@%p302 bra 	$L__BB0_233;
// %bb.232:                             // %pass9145
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2103, %r3496, 20;
	or.b32  	%r2104, %r2103, %r159;
	or.b32  	%r2105, %r2104, %r160;
	or.b32  	%r2106, %r2105, %r5;
	cvt.u64.u32 	%rd278, %r2106;
	add.s64 	%rd279, %rd278, %rd9;
	shr.u64 	%rd280, %rd279, 35;
	add.s64 	%rd281, %rd279, %rd280;
	shr.s64 	%rd282, %rd281, 29;
	setp.lt.s64 	%p303, %rd279, 0;
	and.b64  	%rd283, %rd281, -536870912;
	setp.ne.s64 	%p304, %rd283, %rd279;
	and.pred  	%p305, %p303, %p304;
	selp.u64 	%rd284, 1, 0, %p305;
	sub.s64 	%rd285, %rd284, %rd282;
	shl.b64 	%rd286, %rd285, 29;
	add.s64 	%rd287, %rd286, %rd279;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3526;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3524, 0;
	mov.u32 	%r3526, %r3524;
$L__BB0_233:                            // %pass9391
                                        //   in Loop: Header=BB0_217 Depth=2
	ld.shared.u32 	%r2111, [%rd57];
	ld.shared.u32 	%r2118, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2128, %r2125}, {%r425, %r428}, {%r2111}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2137, %r2134}, {%r425, %r428}, {%r2118}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2121, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r2121, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r459, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2130, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r2130, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r459, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r462, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r459, %r2125, %r2139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r462, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r459, %r2134, %r2146;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2175}, {%r501, %r504}, {%r2126, %r2142}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2179, %r2183}, {%r501, %r504}, {%r2135, %r2149}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r2172, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r2179, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r2183, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r1571, %r2182, %r3526;
	// end inline asm
	add.s32 	%r3495, %r3524, 1;
	setp.ne.s32 	%p306, %r3495, 3;
	@%p306 bra 	$L__BB0_152;
// %bb.234:                             // %pass9655
                                        //   in Loop: Header=BB0_217 Depth=2
	shl.b32 	%r2191, %r3496, 20;
	or.b32  	%r2192, %r2191, %r159;
	or.b32  	%r2193, %r2192, %r160;
	or.b32  	%r2194, %r2193, %r5;
	cvt.u64.u32 	%rd290, %r2194;
	add.s64 	%rd291, %rd290, %rd9;
	shr.u64 	%rd292, %rd291, 35;
	add.s64 	%rd293, %rd291, %rd292;
	shr.s64 	%rd294, %rd293, 29;
	setp.lt.s64 	%p307, %rd291, 0;
	and.b64  	%rd295, %rd293, -536870912;
	setp.ne.s64 	%p308, %rd295, %rd291;
	and.pred  	%p309, %p307, %p308;
	selp.u64 	%rd296, 1, 0, %p309;
	sub.s64 	%rd297, %rd296, %rd294;
	shl.b64 	%rd298, %rd297, 29;
	add.s64 	%rd299, %rd298, %rd291;
	shl.b64 	%rd300, %rd299, 2;
	add.s64 	%rd301, %rd4, %rd300;
	st.global.u32 	[%rd301], %r3497;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3495, 0;
	mov.u32 	%r3497, %r3495;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L22542.preheader
                                        //   in Loop: Header=BB0_199 Depth=1
	mov.u32 	%r3494, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_169:                            // %L32729
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3494, %r3494, -8;
	setp.ne.s32 	%p347, %r3494, -16;
	@%p347 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_170;
$L__BB0_154:                            // %L22542
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p311, %r3494, 16;
	selp.b32 	%r2807, %r194, 0, %p311;
	setp.eq.s32 	%p312, %r3494, 8;
	selp.b32 	%r2808, %r198, %r2807, %p312;
	setp.eq.s32 	%p313, %r3494, 0;
	selp.b32 	%r2809, %r202, %r2808, %p313;
	setp.eq.s32 	%p314, %r3494, -8;
	selp.b32 	%r2810, %r206, %r2809, %p314;
	selp.b32 	%r2811, %r195, 0, %p311;
	selp.b32 	%r2812, %r199, %r2811, %p312;
	selp.b32 	%r2813, %r203, %r2812, %p313;
	selp.b32 	%r2814, %r207, %r2813, %p314;
	selp.b32 	%r2815, %r196, 0, %p311;
	selp.b32 	%r2816, %r200, %r2815, %p312;
	selp.b32 	%r2817, %r204, %r2816, %p313;
	selp.b32 	%r2818, %r208, %r2817, %p314;
	selp.b32 	%r2819, %r197, 0, %p311;
	selp.b32 	%r2820, %r201, %r2819, %p312;
	selp.b32 	%r2821, %r205, %r2820, %p313;
	selp.b32 	%r2822, %r209, %r2821, %p314;
	// begin inline asm
	mov.b32 %r2223, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2823, %r2810, 8;
	xor.b32  	%r2233, %r2823, 8947848;
	// begin inline asm
	lop3.b32 %r2220, %r1088, %r2233, %r2223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2225, %r2223, %r2224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2228, %r2220, %r2225;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2231, %r1099, %r2233, %r2234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2236, %r2234, %r2235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2239, %r2231, %r2236;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2824, %r2814, 8;
	xor.b32  	%r2279, %r2824, 8947848;
	// begin inline asm
	lop3.b32 %r2266, %r1088, %r2279, %r2269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2271, %r2269, %r2270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2274, %r2266, %r2271;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2277, %r1099, %r2279, %r2280, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2282, %r2280, %r2281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2285, %r2277, %r2282;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2825, %r2818, 8;
	xor.b32  	%r2325, %r2825, 8947848;
	// begin inline asm
	lop3.b32 %r2312, %r1088, %r2325, %r2315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2315, %r2316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2320, %r2312, %r2317;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2323, %r1099, %r2325, %r2326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2326, %r2327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2331, %r2323, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2826, %r2822, 8;
	xor.b32  	%r2371, %r2826, 8947848;
	// begin inline asm
	lop3.b32 %r2358, %r1088, %r2371, %r2361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2361, %r2362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2366, %r2358, %r2363;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2369, %r1099, %r2371, %r2372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2372, %r2373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2377, %r2369, %r2374;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2228;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2380, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2239;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2383, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2274;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2386, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2285;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2389, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2320;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2392, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2331;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2395, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2366;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2398, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2377;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2401, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2467, %r2464}, {%r328, %r331}, {%r2380}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2476, %r2473}, {%r328, %r331}, {%r2383}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2485, %r2482}, {%r328, %r331}, {%r2386}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2494, %r2491}, {%r328, %r331}, {%r2389}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2503, %r2500}, {%r328, %r331}, {%r2392}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2512, %r2509}, {%r328, %r331}, {%r2395}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2521, %r2518}, {%r328, %r331}, {%r2398}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2527}, {%r328, %r331}, {%r2401}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2460, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r2460, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r366, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2469, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2469, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r366, %r2476, %r2471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2478, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r2478, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r366, %r2485, %r2480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2487, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2489, %r2487, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2492, %r366, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2496, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2498, %r2496, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r366, %r2503, %r2498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2505, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r2505, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r366, %r2512, %r2507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2514, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r2514, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r366, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2523, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r2523, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r366, %r2530, %r2525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r369, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r366, %r2464, %r2532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r369, %r2476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r366, %r2473, %r2539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2546, %r369, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2549, %r366, %r2482, %r2546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2553, %r369, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2556, %r366, %r2491, %r2553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r369, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r366, %r2500, %r2560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r369, %r2512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r366, %r2509, %r2567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2574, %r369, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2577, %r366, %r2518, %r2574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2581, %r369, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2584, %r366, %r2527, %r2581;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2588, %r2589}, {%r413, %r416}, {%r2465, %r2535}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2597, %r2598}, {%r413, %r416}, {%r2474, %r2542}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2606, %r2607}, {%r413, %r416}, {%r2483, %r2549}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2615, %r2616}, {%r413, %r416}, {%r2492, %r2556}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2624, %r2625}, {%r413, %r416}, {%r2501, %r2563}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r413, %r416}, {%r2510, %r2570}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2642, %r2643}, {%r413, %r416}, {%r2519, %r2577}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2651, %r2652}, {%r413, %r416}, {%r2528, %r2584}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2728, [%rd7];
	ld.shared.u32 	%r2735, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2745, %r2742}, {%r425, %r428}, {%r2728}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r425, %r428}, {%r2735}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2738, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r2738, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r459, %r2745, %r2740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r459, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r462, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r459, %r2742, %r2756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2763, %r462, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r459, %r2751, %r2763;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2789, %r2792}, {%r501, %r504}, {%r2743, %r2759}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2796, %r2800}, {%r501, %r504}, {%r2752, %r2766}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r2789, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r2792, %r2792, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r2796, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r2800, %r2800, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r1571, %r2799, %r3497;
	// end inline asm
	add.s32 	%r3527, %r3495, 1;
	setp.eq.s32 	%p315, %r3527, 3;
	@%p315 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_156;
$L__BB0_155:                            // %pass10350
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2828, %r3496, 20;
	or.b32  	%r2829, %r2828, %r159;
	or.b32  	%r2830, %r2829, %r160;
	or.b32  	%r2831, %r2830, %r5;
	cvt.u64.u32 	%rd302, %r2831;
	add.s64 	%rd303, %rd302, %rd9;
	shr.u64 	%rd304, %rd303, 35;
	add.s64 	%rd305, %rd303, %rd304;
	shr.s64 	%rd306, %rd305, 29;
	setp.lt.s64 	%p316, %rd303, 0;
	and.b64  	%rd307, %rd305, -536870912;
	setp.ne.s64 	%p317, %rd307, %rd303;
	and.pred  	%p318, %p316, %p317;
	selp.u64 	%rd308, 1, 0, %p318;
	sub.s64 	%rd309, %rd308, %rd306;
	shl.b64 	%rd310, %rd309, 29;
	add.s64 	%rd311, %rd310, %rd303;
	shl.b64 	%rd312, %rd311, 2;
	add.s64 	%rd313, %rd4, %rd312;
	st.global.u32 	[%rd313], %r3529;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3527, 0;
	mov.u32 	%r3529, %r3527;
$L__BB0_156:                            // %pass10596
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2836, [%rd45];
	ld.shared.u32 	%r2843, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2853, %r2850}, {%r425, %r428}, {%r2836}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2862, %r2859}, {%r425, %r428}, {%r2843}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2846, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r2846, %r2850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r459, %r2853, %r2848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2855, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2857, %r2855, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r459, %r2862, %r2857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2864, %r462, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r459, %r2850, %r2864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r462, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r459, %r2859, %r2871;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2897, %r2900}, {%r501, %r504}, {%r2851, %r2867}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2904, %r2908}, {%r501, %r504}, {%r2860, %r2874}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2896, %r2897, %r2897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r2900, %r2900, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r2904, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r1571, %r2907, %r3529;
	// end inline asm
	add.s32 	%r3530, %r3527, 1;
	setp.ne.s32 	%p319, %r3530, 3;
	@%p319 bra 	$L__BB0_158;
// %bb.157:                             // %pass10860
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2916, %r3496, 20;
	or.b32  	%r2917, %r2916, %r159;
	or.b32  	%r2918, %r2917, %r160;
	or.b32  	%r2919, %r2918, %r5;
	cvt.u64.u32 	%rd314, %r2919;
	add.s64 	%rd315, %rd314, %rd9;
	shr.u64 	%rd316, %rd315, 35;
	add.s64 	%rd317, %rd315, %rd316;
	shr.s64 	%rd318, %rd317, 29;
	setp.lt.s64 	%p320, %rd315, 0;
	and.b64  	%rd319, %rd317, -536870912;
	setp.ne.s64 	%p321, %rd319, %rd315;
	and.pred  	%p322, %p320, %p321;
	selp.u64 	%rd320, 1, 0, %p322;
	sub.s64 	%rd321, %rd320, %rd318;
	shl.b64 	%rd322, %rd321, 29;
	add.s64 	%rd323, %rd322, %rd315;
	shl.b64 	%rd324, %rd323, 2;
	add.s64 	%rd325, %rd4, %rd324;
	st.global.u32 	[%rd325], %r3532;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3530, 0;
	mov.u32 	%r3532, %r3530;
$L__BB0_158:                            // %pass11106
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2924, [%rd47];
	ld.shared.u32 	%r2931, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2941, %r2938}, {%r425, %r428}, {%r2924}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2950, %r2947}, {%r425, %r428}, {%r2931}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2934, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r2934, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r459, %r2941, %r2936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2943, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2945, %r2943, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r459, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2952, %r462, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r459, %r2938, %r2952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2959, %r462, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r459, %r2947, %r2959;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2985, %r2988}, {%r501, %r504}, {%r2939, %r2955}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2992, %r2996}, {%r501, %r504}, {%r2948, %r2962}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2984, %r2985, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2987, %r2988, %r2988, %r2984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2991, %r2992, %r2992, %r2987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r2996, %r2996, %r2991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r1571, %r2995, %r3532;
	// end inline asm
	add.s32 	%r3533, %r3530, 1;
	setp.ne.s32 	%p323, %r3533, 3;
	@%p323 bra 	$L__BB0_160;
// %bb.159:                             // %pass11370
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3004, %r3496, 20;
	or.b32  	%r3005, %r3004, %r159;
	or.b32  	%r3006, %r3005, %r160;
	or.b32  	%r3007, %r3006, %r5;
	cvt.u64.u32 	%rd326, %r3007;
	add.s64 	%rd327, %rd326, %rd9;
	shr.u64 	%rd328, %rd327, 35;
	add.s64 	%rd329, %rd327, %rd328;
	shr.s64 	%rd330, %rd329, 29;
	setp.lt.s64 	%p324, %rd327, 0;
	and.b64  	%rd331, %rd329, -536870912;
	setp.ne.s64 	%p325, %rd331, %rd327;
	and.pred  	%p326, %p324, %p325;
	selp.u64 	%rd332, 1, 0, %p326;
	sub.s64 	%rd333, %rd332, %rd330;
	shl.b64 	%rd334, %rd333, 29;
	add.s64 	%rd335, %rd334, %rd327;
	shl.b64 	%rd336, %rd335, 2;
	add.s64 	%rd337, %rd4, %rd336;
	st.global.u32 	[%rd337], %r3535;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3533, 0;
	mov.u32 	%r3535, %r3533;
$L__BB0_160:                            // %pass11616
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3012, [%rd49];
	ld.shared.u32 	%r3019, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3029, %r3026}, {%r425, %r428}, {%r3012}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3038, %r3035}, {%r425, %r428}, {%r3019}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3022, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r3022, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r459, %r3029, %r3024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3031, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r459, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3040, %r462, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r459, %r3026, %r3040;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3047, %r462, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r459, %r3035, %r3047;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3073, %r3076}, {%r501, %r504}, {%r3027, %r3043}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3080, %r3084}, {%r501, %r504}, {%r3036, %r3050}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r3073, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r3076, %r3076, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r3080, %r3080, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r3084, %r3084, %r3079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r1571, %r3083, %r3535;
	// end inline asm
	add.s32 	%r3536, %r3533, 1;
	setp.ne.s32 	%p327, %r3536, 3;
	@%p327 bra 	$L__BB0_162;
// %bb.161:                             // %pass11880
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3092, %r3496, 20;
	or.b32  	%r3093, %r3092, %r159;
	or.b32  	%r3094, %r3093, %r160;
	or.b32  	%r3095, %r3094, %r5;
	cvt.u64.u32 	%rd338, %r3095;
	add.s64 	%rd339, %rd338, %rd9;
	shr.u64 	%rd340, %rd339, 35;
	add.s64 	%rd341, %rd339, %rd340;
	shr.s64 	%rd342, %rd341, 29;
	setp.lt.s64 	%p328, %rd339, 0;
	and.b64  	%rd343, %rd341, -536870912;
	setp.ne.s64 	%p329, %rd343, %rd339;
	and.pred  	%p330, %p328, %p329;
	selp.u64 	%rd344, 1, 0, %p330;
	sub.s64 	%rd345, %rd344, %rd342;
	shl.b64 	%rd346, %rd345, 29;
	add.s64 	%rd347, %rd346, %rd339;
	shl.b64 	%rd348, %rd347, 2;
	add.s64 	%rd349, %rd4, %rd348;
	st.global.u32 	[%rd349], %r3538;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3536, 0;
	mov.u32 	%r3538, %r3536;
$L__BB0_162:                            // %pass12126
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3100, [%rd51];
	ld.shared.u32 	%r3107, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3117, %r3114}, {%r425, %r428}, {%r3100}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3126, %r3123}, {%r425, %r428}, {%r3107}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3110, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3112, %r3110, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r459, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3121, %r3119, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r459, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r462, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r459, %r3114, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r462, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r459, %r3123, %r3135;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3161, %r3164}, {%r501, %r504}, {%r3115, %r3131}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3168, %r3172}, {%r501, %r504}, {%r3124, %r3138}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r3161, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3164, %r3164, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3168, %r3168, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3172, %r3172, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r1571, %r3171, %r3538;
	// end inline asm
	add.s32 	%r3539, %r3536, 1;
	setp.ne.s32 	%p331, %r3539, 3;
	@%p331 bra 	$L__BB0_164;
// %bb.163:                             // %pass12390
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3180, %r3496, 20;
	or.b32  	%r3181, %r3180, %r159;
	or.b32  	%r3182, %r3181, %r160;
	or.b32  	%r3183, %r3182, %r5;
	cvt.u64.u32 	%rd350, %r3183;
	add.s64 	%rd351, %rd350, %rd9;
	shr.u64 	%rd352, %rd351, 35;
	add.s64 	%rd353, %rd351, %rd352;
	shr.s64 	%rd354, %rd353, 29;
	setp.lt.s64 	%p332, %rd351, 0;
	and.b64  	%rd355, %rd353, -536870912;
	setp.ne.s64 	%p333, %rd355, %rd351;
	and.pred  	%p334, %p332, %p333;
	selp.u64 	%rd356, 1, 0, %p334;
	sub.s64 	%rd357, %rd356, %rd354;
	shl.b64 	%rd358, %rd357, 29;
	add.s64 	%rd359, %rd358, %rd351;
	shl.b64 	%rd360, %rd359, 2;
	add.s64 	%rd361, %rd4, %rd360;
	st.global.u32 	[%rd361], %r3541;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3539, 0;
	mov.u32 	%r3541, %r3539;
$L__BB0_164:                            // %pass12636
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3188, [%rd53];
	ld.shared.u32 	%r3195, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3205, %r3202}, {%r425, %r428}, {%r3188}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r425, %r428}, {%r3195}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3200, %r3198, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r459, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r459, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r462, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r459, %r3202, %r3216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r462, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r459, %r3211, %r3223;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3249, %r3252}, {%r501, %r504}, {%r3203, %r3219}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3256, %r3260}, {%r501, %r504}, {%r3212, %r3226}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3248, %r3249, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3252, %r3252, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r1571, %r3259, %r3541;
	// end inline asm
	add.s32 	%r3542, %r3539, 1;
	setp.ne.s32 	%p335, %r3542, 3;
	@%p335 bra 	$L__BB0_166;
// %bb.165:                             // %pass12900
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3268, %r3496, 20;
	or.b32  	%r3269, %r3268, %r159;
	or.b32  	%r3270, %r3269, %r160;
	or.b32  	%r3271, %r3270, %r5;
	cvt.u64.u32 	%rd362, %r3271;
	add.s64 	%rd363, %rd362, %rd9;
	shr.u64 	%rd364, %rd363, 35;
	add.s64 	%rd365, %rd363, %rd364;
	shr.s64 	%rd366, %rd365, 29;
	setp.lt.s64 	%p336, %rd363, 0;
	and.b64  	%rd367, %rd365, -536870912;
	setp.ne.s64 	%p337, %rd367, %rd363;
	and.pred  	%p338, %p336, %p337;
	selp.u64 	%rd368, 1, 0, %p338;
	sub.s64 	%rd369, %rd368, %rd366;
	shl.b64 	%rd370, %rd369, 29;
	add.s64 	%rd371, %rd370, %rd363;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r3544;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3542, 0;
	mov.u32 	%r3544, %r3542;
$L__BB0_166:                            // %pass13146
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3276, [%rd55];
	ld.shared.u32 	%r3283, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r425, %r428}, {%r3276}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r425, %r428}, {%r3283}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r459, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r459, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r462, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r459, %r3290, %r3304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r462, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r459, %r3299, %r3311;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3337, %r3340}, {%r501, %r504}, {%r3291, %r3307}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3344, %r3348}, {%r501, %r504}, {%r3300, %r3314}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r3337, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r3340, %r3340, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r3344, %r3344, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r3348, %r3348, %r3343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r1571, %r3347, %r3544;
	// end inline asm
	add.s32 	%r3545, %r3542, 1;
	setp.ne.s32 	%p339, %r3545, 3;
	@%p339 bra 	$L__BB0_168;
// %bb.167:                             // %pass13410
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3356, %r3496, 20;
	or.b32  	%r3357, %r3356, %r159;
	or.b32  	%r3358, %r3357, %r160;
	or.b32  	%r3359, %r3358, %r5;
	cvt.u64.u32 	%rd374, %r3359;
	add.s64 	%rd375, %rd374, %rd9;
	shr.u64 	%rd376, %rd375, 35;
	add.s64 	%rd377, %rd375, %rd376;
	shr.s64 	%rd378, %rd377, 29;
	setp.lt.s64 	%p340, %rd375, 0;
	and.b64  	%rd379, %rd377, -536870912;
	setp.ne.s64 	%p341, %rd379, %rd375;
	and.pred  	%p342, %p340, %p341;
	selp.u64 	%rd380, 1, 0, %p342;
	sub.s64 	%rd381, %rd380, %rd378;
	shl.b64 	%rd382, %rd381, 29;
	add.s64 	%rd383, %rd382, %rd375;
	shl.b64 	%rd384, %rd383, 2;
	add.s64 	%rd385, %rd4, %rd384;
	st.global.u32 	[%rd385], %r3547;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3545, 0;
	mov.u32 	%r3547, %r3545;
$L__BB0_168:                            // %pass13656
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3364, [%rd57];
	ld.shared.u32 	%r3371, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3381, %r3378}, {%r425, %r428}, {%r3364}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3390, %r3387}, {%r425, %r428}, {%r3371}, {%r1210, %r1210};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3374, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3376, %r3374, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r459, %r3381, %r3376;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3383, %r462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3385, %r3383, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3388, %r459, %r3390, %r3385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3392, %r462, %r3381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r459, %r3378, %r3392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3399, %r462, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3402, %r459, %r3387, %r3399;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3425, %r3428}, {%r501, %r504}, {%r3379, %r3395}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3432, %r3436}, {%r501, %r504}, {%r3388, %r3402}, {%r1210, %r1210}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3424, %r3425, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r3428, %r3428, %r3424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r3432, %r3432, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3436, %r3436, %r3431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r1571, %r3435, %r3547;
	// end inline asm
	add.s32 	%r3495, %r3545, 1;
	setp.ne.s32 	%p343, %r3495, 3;
	@%p343 bra 	$L__BB0_169;
// %bb.235:                             // %pass13920
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3444, %r3496, 20;
	or.b32  	%r3445, %r3444, %r159;
	or.b32  	%r3446, %r3445, %r160;
	or.b32  	%r3447, %r3446, %r5;
	cvt.u64.u32 	%rd386, %r3447;
	add.s64 	%rd387, %rd386, %rd9;
	shr.u64 	%rd388, %rd387, 35;
	add.s64 	%rd389, %rd387, %rd388;
	shr.s64 	%rd390, %rd389, 29;
	setp.lt.s64 	%p344, %rd387, 0;
	and.b64  	%rd391, %rd389, -536870912;
	setp.ne.s64 	%p345, %rd391, %rd387;
	and.pred  	%p346, %p344, %p345;
	selp.u64 	%rd392, 1, 0, %p346;
	sub.s64 	%rd393, %rd392, %rd390;
	shl.b64 	%rd394, %rd393, 29;
	add.s64 	%rd395, %rd394, %rd387;
	shl.b64 	%rd396, %rd395, 2;
	add.s64 	%rd397, %rd4, %rd396;
	st.global.u32 	[%rd397], %r3497;
	add.s32 	%r3496, %r3496, 1;
	mov.u32 	%r3495, %r1210;
	mov.u32 	%r3497, %r1210;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L32760
	mov.u32 	%r3448, 0;
	st.global.u32 	[%rd6], %r3448;
	ret;
$L__BB0_218:                            // %post_box_union
	mov.u64 	%rd204, exception2651;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6864
	mov.u32 	%r3464, 5;
	st.global.u32 	[%rd6], %r3464;
	mov.u64 	%rd428, exception2603;
	cvta.global.u64 	%rd429, %rd428;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd429;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7024
	mov.u32 	%r3463, 5;
	st.global.u32 	[%rd6], %r3463;
	mov.u64 	%rd426, exception2603;
	cvta.global.u64 	%rd427, %rd426;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd427;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7184
	mov.u32 	%r3462, 5;
	st.global.u32 	[%rd6], %r3462;
	mov.u64 	%rd424, exception2603;
	cvta.global.u64 	%rd425, %rd424;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd425;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7344
	mov.u32 	%r3461, 5;
	st.global.u32 	[%rd6], %r3461;
	mov.u64 	%rd422, exception2603;
	cvta.global.u64 	%rd423, %rd422;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd423;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7504
	mov.u32 	%r3460, 5;
	st.global.u32 	[%rd6], %r3460;
	mov.u64 	%rd420, exception2603;
	cvta.global.u64 	%rd421, %rd420;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd421;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7664
	mov.u32 	%r3459, 5;
	st.global.u32 	[%rd6], %r3459;
	mov.u64 	%rd418, exception2603;
	cvta.global.u64 	%rd419, %rd418;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd419;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7824
	mov.u32 	%r3458, 5;
	st.global.u32 	[%rd6], %r3458;
	mov.u64 	%rd416, exception2603;
	cvta.global.u64 	%rd417, %rd416;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd417;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7984
	mov.u32 	%r3457, 5;
	st.global.u32 	[%rd6], %r3457;
	mov.u64 	%rd414, exception2603;
	cvta.global.u64 	%rd415, %rd414;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd415;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8144
	mov.u32 	%r3456, 5;
	st.global.u32 	[%rd6], %r3456;
	mov.u64 	%rd412, exception2603;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8304
	mov.u32 	%r3455, 5;
	st.global.u32 	[%rd6], %r3455;
	mov.u64 	%rd410, exception2603;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8464
	mov.u32 	%r3454, 5;
	st.global.u32 	[%rd6], %r3454;
	mov.u64 	%rd408, exception2603;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8624
	mov.u32 	%r3453, 5;
	st.global.u32 	[%rd6], %r3453;
	mov.u64 	%rd406, exception2603;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8784
	mov.u32 	%r3452, 5;
	st.global.u32 	[%rd6], %r3452;
	mov.u64 	%rd404, exception2603;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8944
	mov.u32 	%r3451, 5;
	st.global.u32 	[%rd6], %r3451;
	mov.u64 	%rd402, exception2603;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9104
	mov.u32 	%r3450, 5;
	st.global.u32 	[%rd6], %r3450;
	mov.u64 	%rd400, exception2603;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9264
	mov.u32 	%r3449, 5;
	st.global.u32 	[%rd6], %r3449;
	mov.u64 	%rd398, exception2603;
	cvta.global.u64 	%rd399, %rd398;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd399;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3466, 2;
	st.global.u32 	[%rd6], %r3466;
	mov.u64 	%rd432, exception2603;
	cvta.global.u64 	%rd433, %rd432;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd433;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3465, 3;
	st.global.u32 	[%rd6], %r3465;
	mov.u64 	%rd430, exception2603;
	cvta.global.u64 	%rd431, %rd430;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd431;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r514, [retval0+0];
	} // callseq 47
	mov.u32 	%r516, 4;
	st.global.u32 	[%rd6], %r516;
	mov.u64 	%rd73, exception2603;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r298;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
