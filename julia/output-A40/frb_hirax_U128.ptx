// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4332[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4380[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<357>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3584>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<494>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r332, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd82, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r341, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r341, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd83, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r333, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 9;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r342, %r4, %r5;
	or.b32  	%r343, %r342, %r2;
	mul.wide.u32 	%rd90, %r343, 4;
	add.s64 	%rd6, %rd83, %rd90;
	mov.u32 	%r344, 1;
	st.global.u32 	[%rd6], %r344;
	setp.gt.u32 	%p3, %r333, 511;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r334, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r334, %r333;
	setp.gt.s32 	%p5, %r334, 1023;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r335, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r334, %r333;
	and.b32  	%r345, %r6, 63;
	setp.ne.s32 	%p7, %r345, 0;
	setp.gt.u32 	%p8, %r335, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r336, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r336, %r335;
	setp.lt.s32 	%p11, %r336, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r346, %r336, %r335;
	mul.hi.s32 	%r347, %r6, 1431655766;
	shr.u32 	%r348, %r347, 31;
	add.s32 	%r349, %r347, %r348;
	setp.eq.s32 	%p13, %r346, %r349;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r337, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r337, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r338, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r338, %r337;
	setp.gt.s32 	%p16, %r338, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r339, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r338, %r337;
	and.b32  	%r350, %r7, 127;
	setp.ne.s32 	%p18, %r350, 0;
	setp.lt.s32 	%p19, %r339, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r340, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r340, %r339;
	setp.gt.s32 	%p22, %r340, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r351, %r340, %r339;
	and.b32  	%r352, %r351, 127;
	setp.eq.s32 	%p24, %r352, 0;
	setp.eq.s32 	%p25, %r351, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_13;
$L__BB0_173:                            // %pass162
	and.b32  	%r146, %r5, 3;
	shr.u32 	%r147, %r5, 2;
	mul.lo.s32 	%r353, %r146, %r147;
	and.b32  	%r354, %r353, 7;
	cvt.rn.f32.s32 	%f185, %r354;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p352, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_185;
// %bb.174:
	@%p352 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_175;
$L__BB0_181:
	mov.b32 	%r149, %f750;
	and.b32  	%r355, %r149, 8388607;
	or.b32  	%r3537, %r355, 1065353216;
	mov.b32 	%f745, %r3537;
	add.s32 	%r356, %r149, -1073741824;
	and.b32  	%r3538, %r356, -8388608;
	setp.eq.s32 	%p34, %r3538, 0;
	@%p34 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r3538, 192937984;
	add.s32 	%r358, %r3537, %r357;
	mov.b32 	%f197, %r358;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3538, %r3538, %r357;
	mov.b32 	%r3537, %f745;
	setp.ne.s32 	%p35, %r3538, 0;
	setp.ne.s32 	%p36, %r3537, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_185;
$L__BB0_175:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_180;
// %bb.176:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_178;
// %bb.177:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r359, %f151;
	and.b32  	%r156, %r359, -2147483648;
	@%p39 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r360, %f746;
	or.b32  	%r361, %r156, %r360;
	mov.b32 	%f746, %r361;
$L__BB0_187:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r5, 1;
	and.b32  	%r376, %r159, 2;
	mul.lo.s32 	%r160, %r376, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p353, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p353 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r377, %r9, 8388607;
	or.b32  	%r3503, %r377, 1065353216;
	mov.b32 	%f705, %r3503;
	add.s32 	%r378, %r9, -1073741824;
	and.b32  	%r3504, %r378, -8388608;
	setp.eq.s32 	%p54, %r3504, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2360.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2360
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r379, %r3504, 192937984;
	add.s32 	%r380, %r3503, %r379;
	mov.b32 	%f251, %r380;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3504, %r3504, %r379;
	mov.b32 	%r3503, %f705;
	setp.ne.s32 	%p55, %r3504, 0;
	setp.ne.s32 	%p56, %r3503, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2362
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2339
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2343
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2346
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2365
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r381, %f168;
	and.b32  	%r16, %r381, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r382, %f706;
	or.b32  	%r383, %r16, %r382;
	mov.b32 	%f706, %r383;
$L__BB0_27:                             // %__nv_fmodf.exit2366
	add.s32 	%r392, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r392;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p354, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p354 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r393, %r18, 8388607;
	or.b32  	%r3505, %r393, 1065353216;
	mov.b32 	%f709, %r3505;
	add.s32 	%r394, %r18, -1073741824;
	and.b32  	%r3506, %r394, -8388608;
	setp.eq.s32 	%p74, %r3506, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2391.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2391
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r3506, 192937984;
	add.s32 	%r396, %r3505, %r395;
	mov.b32 	%f303, %r396;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3506, %r3506, %r395;
	mov.b32 	%r3505, %f709;
	setp.ne.s32 	%p75, %r3506, 0;
	setp.ne.s32 	%p76, %r3505, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2393
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2370
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2374
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2377
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2396
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r397, %f18;
	and.b32  	%r25, %r397, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r398, %f710;
	or.b32  	%r399, %r25, %r398;
	mov.b32 	%f710, %r399;
$L__BB0_41:                             // %__nv_fmodf.exit2397
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r414, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r414;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p355, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p355 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r415, %r30, 8388607;
	or.b32  	%r3507, %r415, 1065353216;
	mov.b32 	%f713, %r3507;
	add.s32 	%r416, %r30, -1073741824;
	and.b32  	%r3508, %r416, -8388608;
	setp.eq.s32 	%p94, %r3508, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2422.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2422
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r3508, 192937984;
	add.s32 	%r418, %r3507, %r417;
	mov.b32 	%f357, %r418;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3508, %r3508, %r417;
	mov.b32 	%r3507, %f713;
	setp.ne.s32 	%p95, %r3508, 0;
	setp.ne.s32 	%p96, %r3507, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2424
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2401
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2405
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2408
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2427
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r419, %f35;
	and.b32  	%r37, %r419, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r420, %f714;
	or.b32  	%r421, %r37, %r420;
	mov.b32 	%f714, %r421;
$L__BB0_55:                             // %__nv_fmodf.exit2428
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r422, %f367;
	and.b32  	%r423, %r422, -2147483648;
	or.b32  	%r424, %r423, 1056964608;
	mov.b32 	%f368, %r424;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r425, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r426, %r425, 1;
	setp.eq.b32 	%p102, %r426, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r427, %r425, 2;
	setp.eq.s32 	%p103, %r427, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r428, %r425, 1;
	and.b32  	%r429, %r428, 2;
	setp.eq.s32 	%p104, %r429, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r430, %r28, %r147;
	and.b32  	%r431, %r430, 3;
	cvt.rn.f32.s32 	%f397, %r431;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p356, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p356 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r432, %r39, 8388607;
	or.b32  	%r3509, %r432, 1065353216;
	mov.b32 	%f717, %r3509;
	add.s32 	%r433, %r39, -1073741824;
	and.b32  	%r3510, %r433, -8388608;
	setp.eq.s32 	%p114, %r3510, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2453.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2453
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r434, %r3510, 192937984;
	add.s32 	%r435, %r3509, %r434;
	mov.b32 	%f409, %r435;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3510, %r3510, %r434;
	mov.b32 	%r3509, %f717;
	setp.ne.s32 	%p115, %r3510, 0;
	setp.ne.s32 	%p116, %r3509, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2455
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2432
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2436
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2439
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2458
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r436, %f54;
	and.b32  	%r46, %r436, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r437, %f718;
	or.b32  	%r438, %r46, %r437;
	mov.b32 	%f718, %r438;
$L__BB0_69:                             // %__nv_fmodf.exit2459
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r439, %f419;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f420, %r441;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r442, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p122, %r443, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p123, %r444, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	setp.eq.s32 	%p124, %r446, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r5, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_195;
// %bb.72:
	@%p352 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_73;
$L__BB0_191:
	mov.b32 	%r162, %f750;
	and.b32  	%r453, %r162, 8388607;
	or.b32  	%r3539, %r453, 1065353216;
	mov.b32 	%f749, %r3539;
	add.s32 	%r454, %r162, -1073741824;
	and.b32  	%r3540, %r454, -8388608;
	setp.eq.s32 	%p135, %r3540, 0;
	@%p135 bra 	$L__BB0_194;
// %bb.192:                             // %__nv_fmaf_rn.exit4.i.i.i2484.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_193:                            // %__nv_fmaf_rn.exit4.i.i.i2484
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3540, 192937984;
	add.s32 	%r456, %r3539, %r455;
	mov.b32 	%f459, %r456;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3540, %r3540, %r455;
	mov.b32 	%r3539, %f749;
	setp.ne.s32 	%p136, %r3540, 0;
	setp.ne.s32 	%p137, %r3539, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_193;
$L__BB0_194:                            // %__internal_fmodf_slowpath_mod.exit.i.i2486
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_195;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2463
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_190;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_188;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_190;
$L__BB0_188:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_190;
// %bb.189:                             // %__nv_fmaf_rn.exit.i.i.i2467
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_190:                            // %__internal_fmodf_fastpath_quot.exit.i.i2470
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_195:                            // %__internal_fmodf_kernel.exit.i2489
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_197;
// %bb.196:
	mov.b32 	%r457, %f750;
	or.b32  	%r458, %r156, %r457;
	mov.b32 	%f750, %r458;
$L__BB0_197:                            // %__nv_fmodf.exit2490
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p353 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r473, %r51, 8388607;
	or.b32  	%r3511, %r473, 1065353216;
	mov.b32 	%f725, %r3511;
	add.s32 	%r474, %r51, -1073741824;
	and.b32  	%r3512, %r474, -8388608;
	setp.eq.s32 	%p155, %r3512, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2515.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2515
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3512, 192937984;
	add.s32 	%r476, %r3511, %r475;
	mov.b32 	%f511, %r476;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3512, %r3512, %r475;
	mov.b32 	%r3511, %f725;
	setp.ne.s32 	%p156, %r3512, 0;
	setp.ne.s32 	%p157, %r3511, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2517
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2494
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2498
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2501
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2520
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r477, %f726;
	or.b32  	%r478, %r16, %r477;
	mov.b32 	%f726, %r478;
$L__BB0_89:                             // %__nv_fmodf.exit2521
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p354 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r487, %r59, 8388607;
	or.b32  	%r3513, %r487, 1065353216;
	mov.b32 	%f729, %r3513;
	add.s32 	%r488, %r59, -1073741824;
	and.b32  	%r3514, %r488, -8388608;
	setp.eq.s32 	%p175, %r3514, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2546.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2546
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3514, 192937984;
	add.s32 	%r490, %r3513, %r489;
	mov.b32 	%f561, %r490;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3514, %r3514, %r489;
	mov.b32 	%r3513, %f729;
	setp.ne.s32 	%p176, %r3514, 0;
	setp.ne.s32 	%p177, %r3513, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2548
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2525
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2529
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2532
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2551
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r491, %f730;
	or.b32  	%r492, %r25, %r491;
	mov.b32 	%f730, %r492;
$L__BB0_103:                            // %__nv_fmodf.exit2552
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p355 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r507, %r69, 8388607;
	or.b32  	%r3515, %r507, 1065353216;
	mov.b32 	%f733, %r3515;
	add.s32 	%r508, %r69, -1073741824;
	and.b32  	%r3516, %r508, -8388608;
	setp.eq.s32 	%p195, %r3516, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2577.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2577
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r509, %r3516, 192937984;
	add.s32 	%r510, %r3515, %r509;
	mov.b32 	%f613, %r510;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3516, %r3516, %r509;
	mov.b32 	%r3515, %f733;
	setp.ne.s32 	%p196, %r3516, 0;
	setp.ne.s32 	%p197, %r3515, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2579
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2556
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2560
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2563
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2582
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r511, %f734;
	or.b32  	%r512, %r37, %r511;
	mov.b32 	%f734, %r512;
$L__BB0_117:                            // %__nv_fmodf.exit2583
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r513, %f623;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f624, %r515;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r516, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p204, %r517, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p205, %r518, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p206, %r520, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p356 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r521, %r77, 8388607;
	or.b32  	%r3517, %r521, 1065353216;
	mov.b32 	%f737, %r3517;
	add.s32 	%r522, %r77, -1073741824;
	and.b32  	%r3518, %r522, -8388608;
	setp.eq.s32 	%p215, %r3518, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2608.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2608
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r523, %r3518, 192937984;
	add.s32 	%r524, %r3517, %r523;
	mov.b32 	%f663, %r524;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3518, %r3518, %r523;
	mov.b32 	%r3517, %f737;
	setp.ne.s32 	%p216, %r3518, 0;
	setp.ne.s32 	%p217, %r3517, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2610
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2587
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2591
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2594
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2613
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r525, %f738;
	or.b32  	%r526, %r46, %r525;
	mov.b32 	%f738, %r526;
$L__BB0_131:                            // %__nv_fmodf.exit2614
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r527, %f673;
	and.b32  	%r528, %r527, -2147483648;
	or.b32  	%r529, %r528, 1056964608;
	mov.b32 	%f674, %r529;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r530, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r531, %r530, 1;
	setp.eq.b32 	%p224, %r531, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r532, %r530, 2;
	setp.eq.s32 	%p225, %r532, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r533, %r530, 1;
	and.b32  	%r534, %r533, 2;
	setp.eq.s32 	%p226, %r534, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r5, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_199;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r542, %r5, 4;
	and.b32  	%r543, %r542, 240;
	or.b32  	%r544, %r543, %r1;
	mul.wide.u32 	%rd91, %r544, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r545, [%rd92];
	shl.b32 	%r546, %r545, 16;
	cvt.s32.s16 	%r86, %r545;
	shr.s32 	%r87, %r545, 16;
	or.b32  	%r547, %r546, 65535;
	setp.lt.u32 	%p230, %r547, 1114111;
	setp.lt.u32 	%p231, %r545, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_135;
$L__BB0_198:                            // %L1247
	mul.lo.s32 	%r551, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r551;
$L__BB0_199:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r368, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r369, %r368, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r465, %f469;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%r384, %f261;
	mov.b32 	%r406, %f313;
	and.b32  	%r466, %r465, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r370;
	and.b32  	%r385, %r384, -2147483648;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r467, %r466, 1056964608;
	mov.b32 	%r479, %f521;
	mov.b32 	%r499, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r386, %r385, 1056964608;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f470, %r467;
	and.b32  	%r480, %r479, -2147483648;
	and.b32  	%r500, %r499, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r386;
	mov.b32 	%f314, %r408;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r481, %r480, 1056964608;
	or.b32  	%r501, %r500, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r481;
	mov.b32 	%f572, %r501;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r371, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r372, %r371, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r468, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r372, 1;
	cvt.rzi.s32.f32 	%r387, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r409, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r469, %r468, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r373, %r371, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r388, %r387, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r410, %r409, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r469, 1;
	cvt.rzi.s32.f32 	%r482, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r502, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r373, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r374, %r371, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r388, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r410, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r470, %r468, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r483, %r482, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r503, %r502, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r375, %r374, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r389, %r387, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r411, %r409, 2;
	setp.eq.s32 	%p145, %r470, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r483, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r503, 1;
	setp.eq.s32 	%p44, %r375, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r389, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r390, %r387, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r411, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r484, %r482, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r504, %r502, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r391, %r390, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r472, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r484, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r485, %r482, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r504, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r505, %r502, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r391, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r413, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r486, %r485, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r506, %r505, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r364, %f238;
	mov.b32 	%r367, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r486, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r506, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r363, %r367, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r461, %f500;
	mov.b32 	%r464, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r367, %r364;
	// end inline asm
	mov.b32 	%r402, %f344;
	mov.b32 	%r401, %f17;
	mov.b32 	%r405, %f341;
	mov.b32 	%r404, %f16;
	mov.b32 	%r448, %f75;
	mov.b32 	%r449, %f77;
	mov.b32 	%r451, %f76;
	mov.b32 	%r452, %f78;
	xor.b32  	%r460, %r464, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r447, %r449, %r448;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r450, %r452, %r451;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r461;
	// end inline asm
	mov.b32 	%r495, %f602;
	mov.b32 	%r494, %f95;
	mov.b32 	%r498, %f599;
	mov.b32 	%r497, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r493, %r495, %r494;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r496, %r498, %r497;
	// end inline asm
	mov.b32 	%r536, %f147;
	mov.b32 	%r537, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r535, %r537, %r536;
	// end inline asm
	mov.b32 	%r539, %f148;
	mov.b32 	%r540, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r538, %r540, %r539;
	// end inline asm
	shl.b32 	%r553, %r5, 6;
	and.b32  	%r554, %r553, 192;
	and.b32  	%r555, %r147, 1;
	shr.u32 	%r556, %r5, 3;
	and.b32  	%r557, %r556, 2;
	or.b32  	%r558, %r555, %r557;
	shl.b32 	%r559, %r558, 4;
	bfe.u32 	%r560, %r5, 3, 1;
	shl.b32 	%r561, %r1, 1;
	and.b32  	%r562, %r561, 14;
	or.b32  	%r563, %r560, %r562;
	or.b32  	%r564, %r559, %r554;
	or.b32  	%r565, %r564, %r563;
	or.b32  	%r566, %r565, %r4;
	mul.wide.u32 	%rd98, %r566, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.u32 	%r172, [%rd99];
	ld.global.u32 	%r173, [%rd99+1024];
	shl.b32 	%r567, %r333, 14;
	shl.b32 	%r568, %r337, 7;
	add.s32 	%r174, %r568, %r567;
	shl.b32 	%r175, %r5, 2;
	shl.b32 	%r176, %r3, 7;
	and.b32  	%r177, %r5, 16;
	shr.u32 	%r569, %r5, 4;
	and.b32  	%r570, %r159, 30;
	or.b32  	%r571, %r570, %r569;
	mul.lo.s32 	%r572, %r571, 257;
	and.b32  	%r573, %r2, 224;
	shr.u32 	%r574, %r1, 3;
	mad.lo.s32 	%r575, %r574, 257, %r573;
	or.b32  	%r576, %r574, 2;
	mad.lo.s32 	%r577, %r576, 257, %r573;
	or.b32  	%r578, %r574, 4;
	mad.lo.s32 	%r579, %r578, 257, %r573;
	or.b32  	%r580, %r574, 6;
	mad.lo.s32 	%r581, %r580, 257, %r573;
	or.b32  	%r582, %r574, 8;
	mad.lo.s32 	%r583, %r582, 257, %r573;
	or.b32  	%r584, %r574, 10;
	mad.lo.s32 	%r585, %r584, 257, %r573;
	or.b32  	%r586, %r574, 12;
	mad.lo.s32 	%r587, %r586, 257, %r573;
	or.b32  	%r588, %r574, 14;
	mad.lo.s32 	%r589, %r588, 257, %r573;
	or.b32  	%r590, %r574, 16;
	mad.lo.s32 	%r591, %r590, 257, %r573;
	or.b32  	%r592, %r574, 18;
	mad.lo.s32 	%r593, %r592, 257, %r573;
	or.b32  	%r594, %r574, 20;
	mad.lo.s32 	%r595, %r594, 257, %r573;
	or.b32  	%r596, %r574, 22;
	mad.lo.s32 	%r597, %r596, 257, %r573;
	or.b32  	%r598, %r574, 24;
	mad.lo.s32 	%r599, %r598, 257, %r573;
	or.b32  	%r600, %r574, 26;
	mad.lo.s32 	%r601, %r600, 257, %r573;
	or.b32  	%r602, %r574, 28;
	mad.lo.s32 	%r603, %r602, 257, %r573;
	or.b32  	%r604, %r574, 30;
	mad.lo.s32 	%r605, %r604, 257, %r573;
	mul.lo.s32 	%r606, %r146, 2184;
	mad.lo.s32 	%r607, %r558, 546, %r606;
	mad.lo.s32 	%r608, %r563, 33, %r607;
	setp.lt.u32 	%p234, %r5, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	and.b32  	%r609, %r5, 1;
	neg.s32 	%r610, %r609;
	and.b32  	%r611, %r610, 2064;
	bfe.s32 	%r612, %r5, 3, 1;
	and.b32  	%r613, %r5, 8;
	setp.eq.s32 	%p237, %r613, 0;
	and.b32  	%r614, %r612, 258;
	selp.b32 	%r615, 0, 1032, %p127;
	bfe.s32 	%r616, %r5, 2, 1;
	and.b32  	%r617, %r616, 516;
	or.b32  	%r618, %r562, %r569;
	or.b32  	%r619, %r614, %r611;
	or.b32  	%r620, %r619, %r615;
	or.b32  	%r621, %r620, %r617;
	add.s32 	%r178, %r621, %r618;
	and.b32  	%r622, %r1, 1;
	neg.s32 	%r623, %r622;
	and.b32  	%r624, %r623, 2064;
	and.b32  	%r625, %r175, 12;
	mul.lo.s32 	%r626, %r574, 258;
	bfe.s32 	%r627, %r1, 1, 1;
	and.b32  	%r628, %r1, 2;
	setp.eq.s32 	%p238, %r628, 0;
	and.b32  	%r629, %r627, 1032;
	bfe.s32 	%r630, %r1, 2, 1;
	and.b32  	%r631, %r1, 4;
	setp.eq.s32 	%p239, %r631, 0;
	and.b32  	%r632, %r630, 516;
	and.b32  	%r633, %r612, 4144;
	or.b32  	%r634, %r624, %r558;
	add.s32 	%r635, %r626, %r625;
	add.s32 	%r636, %r635, %r629;
	add.s32 	%r637, %r636, %r632;
	add.s32 	%r638, %r637, %r633;
	add.s32 	%r639, %r638, %r634;
	mul.wide.u32 	%rd100, %r639, 4;
	mov.u64 	%rd101, shmem;
	add.s64 	%rd16, %rd101, %rd100;
	cvt.u64.u32 	%rd102, %r634;
	selp.b64 	%rd103, 0, 4144, %p237;
	selp.b64 	%rd104, 0, 516, %p239;
	selp.b64 	%rd105, 0, 1032, %p238;
	cvt.u64.u32 	%rd106, %r626;
	cvt.u64.u32 	%rd107, %r625;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	add.s64 	%rd110, %rd109, %rd104;
	add.s64 	%rd111, %rd110, %rd103;
	add.s64 	%rd112, %rd111, %rd102;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd17, %rd101, %rd113;
	shl.b32 	%r640, %r335, 20;
	shl.b32 	%r641, %r339, 9;
	add.s32 	%r642, %r641, %r640;
	and.b32  	%r643, %r5, 15;
	or.b32  	%r644, %r2, %r177;
	or.b32  	%r645, %r643, %r4;
	or.b32  	%r179, %r645, %r644;
	cvt.s64.s32 	%rd18, %r642;
	add.s32 	%r646, %r635, %r624;
	add.s32 	%r647, %r646, %r558;
	add.s32 	%r648, %r647, %r629;
	add.s32 	%r649, %r648, %r632;
	add.s32 	%r650, %r649, %r633;
	add.s32 	%r651, %r1, %r572;
	mul.wide.u32 	%rd114, %r651, 4;
	add.s64 	%rd19, %rd101, %rd114;
	cvt.u64.u32 	%rd115, %r1;
	cvt.u64.u32 	%rd20, %r572;
	add.s64 	%rd116, %rd20, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd21, %rd101, %rd117;
	add.s32 	%r652, %r575, %r5;
	mul.wide.u32 	%rd118, %r652, 4;
	add.s64 	%rd22, %rd101, %rd118;
	add.s32 	%r653, %r577, %r5;
	mul.wide.u32 	%rd119, %r653, 4;
	add.s64 	%rd23, %rd101, %rd119;
	add.s32 	%r654, %r579, %r5;
	mul.wide.u32 	%rd120, %r654, 4;
	add.s64 	%rd24, %rd101, %rd120;
	add.s32 	%r655, %r581, %r5;
	mul.wide.u32 	%rd121, %r655, 4;
	add.s64 	%rd25, %rd101, %rd121;
	add.s32 	%r656, %r583, %r5;
	mul.wide.u32 	%rd122, %r656, 4;
	add.s64 	%rd26, %rd101, %rd122;
	add.s32 	%r657, %r585, %r5;
	mul.wide.u32 	%rd123, %r657, 4;
	add.s64 	%rd27, %rd101, %rd123;
	add.s32 	%r658, %r587, %r5;
	mul.wide.u32 	%rd124, %r658, 4;
	add.s64 	%rd28, %rd101, %rd124;
	add.s32 	%r659, %r589, %r5;
	mul.wide.u32 	%rd125, %r659, 4;
	add.s64 	%rd29, %rd101, %rd125;
	add.s32 	%r660, %r591, %r5;
	mul.wide.u32 	%rd126, %r660, 4;
	add.s64 	%rd30, %rd101, %rd126;
	add.s32 	%r661, %r593, %r5;
	mul.wide.u32 	%rd127, %r661, 4;
	add.s64 	%rd31, %rd101, %rd127;
	add.s32 	%r662, %r595, %r5;
	mul.wide.u32 	%rd128, %r662, 4;
	add.s64 	%rd32, %rd101, %rd128;
	add.s32 	%r663, %r597, %r5;
	mul.wide.u32 	%rd129, %r663, 4;
	add.s64 	%rd33, %rd101, %rd129;
	add.s32 	%r664, %r599, %r5;
	mul.wide.u32 	%rd130, %r664, 4;
	add.s64 	%rd34, %rd101, %rd130;
	add.s32 	%r665, %r601, %r5;
	mul.wide.u32 	%rd131, %r665, 4;
	add.s64 	%rd35, %rd101, %rd131;
	add.s32 	%r666, %r603, %r5;
	mul.wide.u32 	%rd132, %r666, 4;
	add.s64 	%rd36, %rd101, %rd132;
	add.s32 	%r667, %r605, %r5;
	mul.wide.u32 	%rd133, %r667, 4;
	add.s64 	%rd37, %rd101, %rd133;
	add.s32 	%r668, %r608, %r574;
	mul.wide.u32 	%rd134, %r668, 4;
	add.s64 	%rd38, %rd101, %rd134;
	add.s32 	%r669, %r608, %r576;
	mul.wide.u32 	%rd135, %r669, 4;
	add.s64 	%rd39, %rd101, %rd135;
	add.s32 	%r670, %r608, %r578;
	mul.wide.u32 	%rd136, %r670, 4;
	add.s64 	%rd40, %rd101, %rd136;
	add.s32 	%r671, %r608, %r580;
	mul.wide.u32 	%rd137, %r671, 4;
	add.s64 	%rd41, %rd101, %rd137;
	add.s32 	%r672, %r608, %r582;
	mul.wide.u32 	%rd138, %r672, 4;
	add.s64 	%rd42, %rd101, %rd138;
	add.s32 	%r673, %r608, %r584;
	mul.wide.u32 	%rd139, %r673, 4;
	add.s64 	%rd43, %rd101, %rd139;
	add.s32 	%r674, %r608, %r586;
	mul.wide.u32 	%rd140, %r674, 4;
	add.s64 	%rd44, %rd101, %rd140;
	add.s32 	%r675, %r608, %r588;
	mul.wide.u32 	%rd141, %r675, 4;
	add.s64 	%rd45, %rd101, %rd141;
	add.s32 	%r676, %r608, %r590;
	mul.wide.u32 	%rd142, %r676, 4;
	add.s64 	%rd46, %rd101, %rd142;
	add.s32 	%r677, %r608, %r592;
	mul.wide.u32 	%rd143, %r677, 4;
	add.s64 	%rd47, %rd101, %rd143;
	add.s32 	%r678, %r608, %r594;
	mul.wide.u32 	%rd144, %r678, 4;
	add.s64 	%rd48, %rd101, %rd144;
	add.s32 	%r679, %r608, %r596;
	mul.wide.u32 	%rd145, %r679, 4;
	add.s64 	%rd49, %rd101, %rd145;
	add.s32 	%r680, %r608, %r598;
	mul.wide.u32 	%rd146, %r680, 4;
	add.s64 	%rd50, %rd101, %rd146;
	add.s32 	%r681, %r608, %r600;
	mul.wide.u32 	%rd147, %r681, 4;
	add.s64 	%rd51, %rd101, %rd147;
	add.s32 	%r682, %r608, %r602;
	mul.wide.u32 	%rd148, %r682, 4;
	add.s64 	%rd52, %rd101, %rd148;
	add.s32 	%r683, %r608, %r604;
	mul.wide.u32 	%rd149, %r683, 4;
	add.s64 	%rd53, %rd101, %rd149;
	add.s32 	%r684, %r147, -1;
	setp.lt.u32 	%p240, %r684, 3;
	or.pred  	%p241, %p234, %p240;
	or.pred  	%p242, %p241, %p235;
	and.b32  	%r685, %r5, 24;
	setp.eq.s32 	%p243, %r685, 24;
	or.pred  	%p244, %p236, %p243;
	selp.b32 	%r180, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	shl.b32 	%r181, %r574, 5;
	add.s32 	%r686, %r178, %r181;
	mul.wide.u32 	%rd150, %r686, 4;
	add.s64 	%rd54, %rd101, %rd150;
	cvt.u64.u32 	%rd151, %r181;
	cvt.u64.u32 	%rd152, %r618;
	cvt.u64.u32 	%rd153, %r621;
	add.s64 	%rd55, %rd153, %rd152;
	add.s64 	%rd154, %rd55, %rd151;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd58, %rd101, %rd155;
	shl.b32 	%r687, %r576, 5;
	add.s32 	%r688, %r178, %r687;
	mul.wide.u32 	%rd156, %r688, 4;
	add.s64 	%rd59, %rd101, %rd156;
	cvt.u64.u32 	%rd157, %r687;
	add.s64 	%rd158, %rd55, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd61, %rd101, %rd159;
	shl.b32 	%r689, %r578, 5;
	add.s32 	%r690, %r178, %r689;
	mul.wide.u32 	%rd160, %r690, 4;
	add.s64 	%rd62, %rd101, %rd160;
	cvt.u64.u32 	%rd161, %r689;
	add.s64 	%rd162, %rd55, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd64, %rd101, %rd163;
	shl.b32 	%r691, %r580, 5;
	add.s32 	%r692, %r178, %r691;
	mul.wide.u32 	%rd164, %r692, 4;
	add.s64 	%rd65, %rd101, %rd164;
	cvt.u64.u32 	%rd165, %r691;
	add.s64 	%rd166, %rd55, %rd165;
	shl.b64 	%rd167, %rd166, 2;
	add.s64 	%rd67, %rd101, %rd167;
	add.s32 	%r693, %r650, 32;
	mul.wide.u32 	%rd168, %r693, 4;
	add.s64 	%rd68, %rd101, %rd168;
	add.s32 	%r694, %r650, 48;
	mul.wide.u32 	%rd169, %r694, 4;
	add.s64 	%rd69, %rd101, %rd169;
	add.s32 	%r695, %r650, 64;
	mul.wide.u32 	%rd170, %r695, 4;
	add.s64 	%rd70, %rd101, %rd170;
	add.s32 	%r696, %r650, 80;
	mul.wide.u32 	%rd171, %r696, 4;
	add.s64 	%rd71, %rd101, %rd171;
	add.s32 	%r697, %r650, 96;
	mul.wide.u32 	%rd172, %r697, 4;
	add.s64 	%rd72, %rd101, %rd172;
	add.s32 	%r698, %r650, 112;
	mul.wide.u32 	%rd173, %r698, 4;
	add.s64 	%rd73, %rd101, %rd173;
	add.s32 	%r699, %r650, 128;
	mul.wide.u32 	%rd174, %r699, 4;
	add.s64 	%rd74, %rd101, %rd174;
	add.s32 	%r700, %r650, 144;
	mul.wide.u32 	%rd175, %r700, 4;
	add.s64 	%rd75, %rd101, %rd175;
	add.s32 	%r701, %r650, 160;
	mul.wide.u32 	%rd176, %r701, 4;
	add.s64 	%rd76, %rd101, %rd176;
	add.s32 	%r702, %r650, 176;
	mul.wide.u32 	%rd177, %r702, 4;
	add.s64 	%rd77, %rd101, %rd177;
	add.s32 	%r703, %r650, 192;
	mul.wide.u32 	%rd178, %r703, 4;
	add.s64 	%rd78, %rd101, %rd178;
	add.s32 	%r704, %r650, 208;
	mul.wide.u32 	%rd179, %r704, 4;
	add.s64 	%rd79, %rd101, %rd179;
	add.s32 	%r705, %r650, 224;
	mul.wide.u32 	%rd180, %r705, 4;
	add.s64 	%rd80, %rd101, %rd180;
	add.s32 	%r706, %r650, 240;
	mul.wide.u32 	%rd181, %r706, 4;
	add.s64 	%rd81, %rd101, %rd181;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r177, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3531, %r89;
	mov.u32 	%r3532, %r89;
	mov.u32 	%r3533, %r89;
	bra.uni 	$L__BB0_200;
$L__BB0_171:                            // %L49521
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p351, %r89, 448;
	mov.u32 	%r89, %r145;
	@%p351 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_172;
$L__BB0_200:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_218 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r707, %r89, %r333;
	setp.lt.s32 	%p245, %r707, %r334;
	@%p245 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_172;
$L__BB0_201:                            // %pass780
                                        //   in Loop: Header=BB0_200 Depth=1
	cvt.u32.u64 	%r900, %rd20;
	or.b32  	%r901, %r89, %r1;
	shl.b32 	%r902, %r901, 14;
	and.b32  	%r903, %r902, 7585792;
	or.b32  	%r904, %r903, %r175;
	or.b32  	%r905, %r904, %r176;
	add.s32 	%r906, %r174, %r905;
	shr.s32 	%r907, %r906, 31;
	shr.u32 	%r908, %r907, 9;
	add.s32 	%r909, %r906, %r908;
	shr.s32 	%r910, %r909, 23;
	setp.lt.s32 	%p247, %r906, 0;
	and.b32  	%r911, %r909, -8388608;
	setp.ne.s32 	%p248, %r911, %r906;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r912, 1, 0, %p249;
	sub.s32 	%r913, %r912, %r910;
	shl.b32 	%r914, %r913, 23;
	add.s32 	%r915, %r914, %r906;
	mul.wide.s32 	%rd182, %r915, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r916, %r917, %r918, %r919}, [%rd183];
	or.b32  	%r920, %r901, 16;
	shl.b32 	%r921, %r920, 14;
	and.b32  	%r922, %r921, 7847936;
	or.b32  	%r923, %r922, %r175;
	or.b32  	%r924, %r923, %r176;
	add.s32 	%r925, %r174, %r924;
	shr.s32 	%r926, %r925, 31;
	shr.u32 	%r927, %r926, 9;
	add.s32 	%r928, %r925, %r927;
	shr.s32 	%r929, %r928, 23;
	setp.lt.s32 	%p250, %r925, 0;
	and.b32  	%r930, %r928, -8388608;
	setp.ne.s32 	%p251, %r930, %r925;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r931, 1, 0, %p252;
	sub.s32 	%r932, %r931, %r929;
	shl.b32 	%r933, %r932, 23;
	add.s32 	%r934, %r933, %r925;
	mul.wide.s32 	%rd184, %r934, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r935, %r936, %r937, %r938}, [%rd185];
	and.b32  	%r939, %r89, 448;
	or.b32  	%r940, %r1, %r939;
	shl.b32 	%r941, %r940, 14;
	or.b32  	%r942, %r941, %r175;
	or.b32  	%r943, %r942, %r176;
	or.b32  	%r944, %r943, 524288;
	add.s32 	%r945, %r174, %r944;
	shr.s32 	%r946, %r945, 31;
	shr.u32 	%r947, %r946, 9;
	add.s32 	%r948, %r945, %r947;
	shr.s32 	%r949, %r948, 23;
	setp.lt.s32 	%p253, %r945, 0;
	and.b32  	%r950, %r948, -8388608;
	setp.ne.s32 	%p254, %r950, %r945;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r951, 1, 0, %p255;
	sub.s32 	%r952, %r951, %r949;
	shl.b32 	%r953, %r952, 23;
	add.s32 	%r954, %r953, %r945;
	mul.wide.s32 	%rd186, %r954, 4;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.v4.u32 	{%r955, %r956, %r957, %r958}, [%rd187];
	or.b32  	%r959, %r943, 786432;
	add.s32 	%r960, %r174, %r959;
	shr.s32 	%r961, %r960, 31;
	shr.u32 	%r962, %r961, 9;
	add.s32 	%r963, %r960, %r962;
	shr.s32 	%r964, %r963, 23;
	setp.lt.s32 	%p256, %r960, 0;
	and.b32  	%r965, %r963, -8388608;
	setp.ne.s32 	%p257, %r965, %r960;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r966, 1, 0, %p258;
	sub.s32 	%r967, %r966, %r964;
	shl.b32 	%r968, %r967, 23;
	add.s32 	%r969, %r968, %r960;
	mul.wide.s32 	%rd188, %r969, 4;
	add.s64 	%rd189, %rd3, %rd188;
	ld.global.v4.u32 	{%r970, %r971, %r972, %r973}, [%rd189];
	selp.b32 	%r974, %r918, %r916, %p246;
	shfl.sync.bfly.b32	%r975, %r974, 16, 31, -1;
	selp.b32 	%r710, %r916, %r975, %p246;
	selp.b32 	%r715, %r975, %r918, %p246;
	selp.b32 	%r976, %r919, %r917, %p246;
	shfl.sync.bfly.b32	%r977, %r976, 16, 31, -1;
	selp.b32 	%r718, %r917, %r977, %p246;
	selp.b32 	%r723, %r977, %r919, %p246;
	selp.b32 	%r978, %r937, %r935, %p246;
	shfl.sync.bfly.b32	%r979, %r978, 16, 31, -1;
	selp.b32 	%r726, %r935, %r979, %p246;
	selp.b32 	%r731, %r979, %r937, %p246;
	selp.b32 	%r980, %r938, %r936, %p246;
	shfl.sync.bfly.b32	%r981, %r980, 16, 31, -1;
	selp.b32 	%r734, %r936, %r981, %p246;
	selp.b32 	%r739, %r981, %r938, %p246;
	selp.b32 	%r982, %r957, %r955, %p246;
	shfl.sync.bfly.b32	%r983, %r982, 16, 31, -1;
	selp.b32 	%r742, %r955, %r983, %p246;
	selp.b32 	%r747, %r983, %r957, %p246;
	selp.b32 	%r984, %r958, %r956, %p246;
	shfl.sync.bfly.b32	%r985, %r984, 16, 31, -1;
	selp.b32 	%r750, %r956, %r985, %p246;
	selp.b32 	%r755, %r985, %r958, %p246;
	selp.b32 	%r986, %r972, %r970, %p246;
	shfl.sync.bfly.b32	%r987, %r986, 16, 31, -1;
	selp.b32 	%r758, %r970, %r987, %p246;
	selp.b32 	%r763, %r987, %r972, %p246;
	selp.b32 	%r988, %r973, %r971, %p246;
	shfl.sync.bfly.b32	%r989, %r988, 16, 31, -1;
	selp.b32 	%r766, %r971, %r989, %p246;
	selp.b32 	%r771, %r989, %r973, %p246;
	shl.b32 	%r711, %r715, 4;
	mov.u32 	%r709, 252645135;
	// begin inline asm
	lop3.b32 %r773, %r709, %r710, %r711, 202;
	// end inline asm
	shr.u32 	%r714, %r710, 4;
	// begin inline asm
	lop3.b32 %r789, %r709, %r714, %r715, 202;
	// end inline asm
	shl.b32 	%r719, %r723, 4;
	// begin inline asm
	lop3.b32 %r781, %r709, %r718, %r719, 202;
	// end inline asm
	shr.u32 	%r722, %r718, 4;
	// begin inline asm
	lop3.b32 %r797, %r709, %r722, %r723, 202;
	// end inline asm
	shl.b32 	%r727, %r731, 4;
	// begin inline asm
	lop3.b32 %r805, %r709, %r726, %r727, 202;
	// end inline asm
	shr.u32 	%r730, %r726, 4;
	// begin inline asm
	lop3.b32 %r821, %r709, %r730, %r731, 202;
	// end inline asm
	shl.b32 	%r735, %r739, 4;
	// begin inline asm
	lop3.b32 %r813, %r709, %r734, %r735, 202;
	// end inline asm
	shr.u32 	%r738, %r734, 4;
	// begin inline asm
	lop3.b32 %r829, %r709, %r738, %r739, 202;
	// end inline asm
	shl.b32 	%r743, %r747, 4;
	// begin inline asm
	lop3.b32 %r774, %r709, %r742, %r743, 202;
	// end inline asm
	shr.u32 	%r746, %r742, 4;
	// begin inline asm
	lop3.b32 %r790, %r709, %r746, %r747, 202;
	// end inline asm
	shl.b32 	%r751, %r755, 4;
	// begin inline asm
	lop3.b32 %r782, %r709, %r750, %r751, 202;
	// end inline asm
	shr.u32 	%r754, %r750, 4;
	// begin inline asm
	lop3.b32 %r798, %r709, %r754, %r755, 202;
	// end inline asm
	shl.b32 	%r759, %r763, 4;
	// begin inline asm
	lop3.b32 %r806, %r709, %r758, %r759, 202;
	// end inline asm
	shr.u32 	%r762, %r758, 4;
	// begin inline asm
	lop3.b32 %r822, %r709, %r762, %r763, 202;
	// end inline asm
	shl.b32 	%r767, %r771, 4;
	// begin inline asm
	lop3.b32 %r814, %r709, %r766, %r767, 202;
	// end inline asm
	shr.u32 	%r770, %r766, 4;
	// begin inline asm
	lop3.b32 %r830, %r709, %r770, %r771, 202;
	// end inline asm
	mov.u32 	%r775, 25152;
	// begin inline asm
	prmt.b32 %r837, %r773, %r774, %r775;
	// end inline asm
	mov.u32 	%r779, 29521;
	// begin inline asm
	prmt.b32 %r869, %r773, %r774, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r845, %r781, %r782, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r781, %r782, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r789, %r790, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r870, %r789, %r790, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r846, %r797, %r798, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r797, %r798, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r853, %r805, %r806, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r805, %r806, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r861, %r813, %r814, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r813, %r814, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r854, %r821, %r822, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r821, %r822, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r829, %r830, %r775;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r829, %r830, %r779;
	// end inline asm
	mov.u32 	%r895, 21520;
	// begin inline asm
	prmt.b32 %r836, %r837, %r838, %r895;
	// end inline asm
	mov.u32 	%r899, 30258;
	// begin inline asm
	prmt.b32 %r840, %r837, %r838, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r844, %r845, %r846, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r848, %r845, %r846, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r852, %r853, %r854, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r856, %r853, %r854, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r860, %r861, %r862, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r861, %r862, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r868, %r869, %r870, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r869, %r870, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r876, %r877, %r878, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r877, %r878, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r884, %r885, %r886, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r885, %r886, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r892, %r893, %r894, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r893, %r894, %r899;
	// end inline asm
	st.shared.u32 	[%rd19], %r836;
	st.shared.u32 	[%rd21+512], %r844;
	st.shared.u32 	[%rd21+256], %r840;
	st.shared.u32 	[%rd21+768], %r848;
	and.b32  	%r990, %r920, 31;
	add.s32 	%r991, %r990, %r900;
	mul.wide.u32 	%rd190, %r991, 4;
	add.s64 	%rd192, %rd101, %rd190;
	st.shared.u32 	[%rd192], %r852;
	cvt.u64.u32 	%rd193, %r990;
	add.s64 	%rd194, %rd20, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd101, %rd195;
	st.shared.u32 	[%rd196+512], %r860;
	st.shared.u32 	[%rd196+256], %r856;
	st.shared.u32 	[%rd196+768], %r864;
	st.shared.u32 	[%rd21+128], %r868;
	st.shared.u32 	[%rd21+640], %r876;
	st.shared.u32 	[%rd21+384], %r872;
	st.shared.u32 	[%rd21+896], %r880;
	st.shared.u32 	[%rd196+128], %r884;
	st.shared.u32 	[%rd196+640], %r892;
	st.shared.u32 	[%rd196+384], %r888;
	st.shared.u32 	[%rd196+896], %r896;
	bar.sync 	0;
	ld.shared.u32 	%r182, [%rd22];
	ld.shared.u32 	%r183, [%rd23];
	ld.shared.u32 	%r184, [%rd24];
	ld.shared.u32 	%r185, [%rd25];
	ld.shared.u32 	%r186, [%rd26];
	ld.shared.u32 	%r187, [%rd27];
	ld.shared.u32 	%r188, [%rd28];
	ld.shared.u32 	%r189, [%rd29];
	ld.shared.u32 	%r190, [%rd30];
	ld.shared.u32 	%r191, [%rd31];
	ld.shared.u32 	%r192, [%rd32];
	ld.shared.u32 	%r193, [%rd33];
	ld.shared.u32 	%r194, [%rd34];
	ld.shared.u32 	%r195, [%rd35];
	ld.shared.u32 	%r196, [%rd36];
	ld.shared.u32 	%r197, [%rd37];
	bar.sync 	0;
	shfl.sync.idx.b32	%r198, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r213, %r171, 15, 31, -1;
	setp.eq.s32 	%p259, %r198, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.202:                             // %pass3083
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r992, %r198, %r5;
	mul.wide.s32 	%rd197, %r992, 4;
	add.s64 	%rd199, %rd101, %rd197;
	st.shared.u32 	[%rd199], %r182;
	setp.eq.s32 	%p260, %r199, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.203:                             // %pass3151
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r993, %r199, %r5;
	mul.wide.s32 	%rd200, %r993, 4;
	add.s64 	%rd202, %rd101, %rd200;
	st.shared.u32 	[%rd202], %r183;
	setp.eq.s32 	%p261, %r200, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.204:                             // %pass3219
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r994, %r200, %r5;
	mul.wide.s32 	%rd203, %r994, 4;
	add.s64 	%rd205, %rd101, %rd203;
	st.shared.u32 	[%rd205], %r184;
	setp.eq.s32 	%p262, %r201, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.205:                             // %pass3287
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r995, %r201, %r5;
	mul.wide.s32 	%rd206, %r995, 4;
	add.s64 	%rd208, %rd101, %rd206;
	st.shared.u32 	[%rd208], %r185;
	setp.eq.s32 	%p263, %r202, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.206:                             // %pass3355
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r996, %r202, %r5;
	mul.wide.s32 	%rd209, %r996, 4;
	add.s64 	%rd211, %rd101, %rd209;
	st.shared.u32 	[%rd211], %r186;
	setp.eq.s32 	%p264, %r203, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.207:                             // %pass3423
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r997, %r203, %r5;
	mul.wide.s32 	%rd212, %r997, 4;
	add.s64 	%rd214, %rd101, %rd212;
	st.shared.u32 	[%rd214], %r187;
	setp.eq.s32 	%p265, %r204, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.208:                             // %pass3491
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r998, %r204, %r5;
	mul.wide.s32 	%rd215, %r998, 4;
	add.s64 	%rd217, %rd101, %rd215;
	st.shared.u32 	[%rd217], %r188;
	setp.eq.s32 	%p266, %r205, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.209:                             // %pass3559
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r999, %r205, %r5;
	mul.wide.s32 	%rd218, %r999, 4;
	add.s64 	%rd220, %rd101, %rd218;
	st.shared.u32 	[%rd220], %r189;
	setp.eq.s32 	%p267, %r206, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.210:                             // %pass3627
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1000, %r206, %r5;
	mul.wide.s32 	%rd221, %r1000, 4;
	add.s64 	%rd223, %rd101, %rd221;
	st.shared.u32 	[%rd223], %r190;
	setp.eq.s32 	%p268, %r207, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.211:                             // %pass3695
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1001, %r207, %r5;
	mul.wide.s32 	%rd224, %r1001, 4;
	add.s64 	%rd226, %rd101, %rd224;
	st.shared.u32 	[%rd226], %r191;
	setp.eq.s32 	%p269, %r208, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.212:                             // %pass3763
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1002, %r208, %r5;
	mul.wide.s32 	%rd227, %r1002, 4;
	add.s64 	%rd229, %rd101, %rd227;
	st.shared.u32 	[%rd229], %r192;
	setp.eq.s32 	%p270, %r209, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.213:                             // %pass3831
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1003, %r209, %r5;
	mul.wide.s32 	%rd230, %r1003, 4;
	add.s64 	%rd232, %rd101, %rd230;
	st.shared.u32 	[%rd232], %r193;
	setp.eq.s32 	%p271, %r210, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.214:                             // %pass3899
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1004, %r210, %r5;
	mul.wide.s32 	%rd233, %r1004, 4;
	add.s64 	%rd235, %rd101, %rd233;
	st.shared.u32 	[%rd235], %r194;
	setp.eq.s32 	%p272, %r211, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.215:                             // %pass3967
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1005, %r211, %r5;
	mul.wide.s32 	%rd236, %r1005, 4;
	add.s64 	%rd238, %rd101, %rd236;
	st.shared.u32 	[%rd238], %r195;
	setp.eq.s32 	%p273, %r212, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.216:                             // %pass4035
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1006, %r212, %r5;
	mul.wide.s32 	%rd239, %r1006, 4;
	add.s64 	%rd241, %rd101, %rd239;
	st.shared.u32 	[%rd241], %r196;
	setp.eq.s32 	%p274, %r213, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.217:                             // %pass4103
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1008, %r213, %r5;
	mul.wide.s32 	%rd242, %r1008, 4;
	add.s64 	%rd244, %rd101, %rd242;
	st.shared.u32 	[%rd244], %r197;
	bar.sync 	0;
	ld.shared.u32 	%r214, [%rd38];
	ld.shared.u32 	%r215, [%rd39];
	ld.shared.u32 	%r216, [%rd40];
	ld.shared.u32 	%r217, [%rd41];
	ld.shared.u32 	%r218, [%rd42];
	ld.shared.u32 	%r219, [%rd43];
	ld.shared.u32 	%r220, [%rd44];
	ld.shared.u32 	%r221, [%rd45];
	ld.shared.u32 	%r222, [%rd46];
	ld.shared.u32 	%r223, [%rd47];
	ld.shared.u32 	%r224, [%rd48];
	ld.shared.u32 	%r225, [%rd49];
	ld.shared.u32 	%r226, [%rd50];
	ld.shared.u32 	%r227, [%rd51];
	ld.shared.u32 	%r228, [%rd52];
	ld.shared.u32 	%r229, [%rd53];
	bar.sync 	0;
	mov.u32 	%r3523, 16;
	bra.uni 	$L__BB0_218;
$L__BB0_152:                            // %L30873
                                        //   in Loop: Header=BB0_218 Depth=2
	bar.sync 	0;
	add.s32 	%r3523, %r3523, -8;
	setp.ne.s32 	%p312, %r3523, -16;
	@%p312 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_153;
$L__BB0_218:                            // %L12262
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3523, 16;
	selp.b32 	%r1401, %r214, 0, %p275;
	setp.eq.s32 	%p276, %r3523, 8;
	selp.b32 	%r1402, %r218, %r1401, %p276;
	setp.eq.s32 	%p277, %r3523, 0;
	selp.b32 	%r1403, %r222, %r1402, %p277;
	setp.eq.s32 	%p278, %r3523, -8;
	selp.b32 	%r1404, %r226, %r1403, %p278;
	selp.b32 	%r1405, %r215, 0, %p275;
	selp.b32 	%r1406, %r219, %r1405, %p276;
	selp.b32 	%r1407, %r223, %r1406, %p277;
	selp.b32 	%r1408, %r227, %r1407, %p278;
	selp.b32 	%r1409, %r216, 0, %p275;
	selp.b32 	%r1410, %r220, %r1409, %p276;
	selp.b32 	%r1411, %r224, %r1410, %p277;
	selp.b32 	%r1412, %r228, %r1411, %p278;
	selp.b32 	%r1413, %r217, 0, %p275;
	selp.b32 	%r1414, %r221, %r1413, %p276;
	selp.b32 	%r1415, %r225, %r1414, %p277;
	selp.b32 	%r1416, %r229, %r1415, %p278;
	// begin inline asm
	mov.b32 %r1014, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1013, %r1404, -2004318072;
	mov.u32 	%r1150, 983055;
	// begin inline asm
	lop3.b32 %r1011, %r1150, %r1013, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1014, %r1015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1019, %r1011, %r1016;
	// end inline asm
	mov.u32 	%r1161, 15728880;
	// begin inline asm
	lop3.b32 %r1022, %r1161, %r1013, %r1025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1027, %r1025, %r1026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1030, %r1022, %r1027;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1059, %r1408, -2004318072;
	// begin inline asm
	lop3.b32 %r1057, %r1150, %r1059, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1068, %r1161, %r1059, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1071, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	// begin inline asm
	mov.b32 %r1106, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1117, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1105, %r1412, -2004318072;
	// begin inline asm
	lop3.b32 %r1103, %r1150, %r1105, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1108, %r1106, %r1107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1111, %r1103, %r1108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1114, %r1161, %r1105, %r1117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1118, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1117, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	// begin inline asm
	mov.b32 %r1152, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1151, %r1416, -2004318072;
	// begin inline asm
	lop3.b32 %r1149, %r1150, %r1151, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1154, %r1152, %r1153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1157, %r1149, %r1154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1160, %r1161, %r1151, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1165, %r1163, %r1164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1168, %r1160, %r1165;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1019;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1193, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1196, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1065;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1199, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1076;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1202, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1111;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1205, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1122;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1208, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1157;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1211, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1168;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1214, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1272, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1217, %r1218}, {%r362, %r365}, {%r1193}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1224, %r1225}, {%r362, %r365}, {%r1196}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1231, %r1232}, {%r362, %r365}, {%r1199}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1238, %r1239}, {%r362, %r365}, {%r1202}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1245, %r1246}, {%r362, %r365}, {%r1205}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1252, %r1253}, {%r362, %r365}, {%r1208}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1259, %r1260}, {%r362, %r365}, {%r1211}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1266, %r1267}, {%r362, %r365}, {%r1214}, {%r1272, %r1272};
	// end inline asm
	@%p1 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;
$L__BB0_220:                            // %pass5517
                                        //   in Loop: Header=BB0_218 Depth=2
	// begin inline asm
	neg.f16x2 %r1273, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r400, %r1217, %r1275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1282, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1284, %r1282, %r1225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r400, %r1224, %r1284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1291, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r1291, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r400, %r1231, %r1293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1300, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r1300, %r1239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r400, %r1238, %r1302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1309, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r1309, %r1246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r400, %r1245, %r1311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1318, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1320, %r1318, %r1253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1323, %r400, %r1252, %r1320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1327, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r1327, %r1260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r400, %r1259, %r1329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1336, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1338, %r1336, %r1267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1341, %r400, %r1266, %r1338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1345, %r403, %r1217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1348, %r400, %r1218, %r1345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r403, %r1224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r400, %r1225, %r1352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r403, %r1231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r400, %r1232, %r1359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r403, %r1238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r400, %r1239, %r1366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1373, %r403, %r1245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r400, %r1246, %r1373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1380, %r403, %r1252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r400, %r1253, %r1380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r403, %r1259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r400, %r1260, %r1387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r403, %r1266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r400, %r1267, %r1394;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1490, %r1491}, {%r447, %r450}, {%r1278, %r1348}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1499}, {%r447, %r450}, {%r1287, %r1355}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1506, %r1507}, {%r447, %r450}, {%r1296, %r1362}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1514, %r1515}, {%r447, %r450}, {%r1305, %r1369}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1522, %r1523}, {%r447, %r450}, {%r1314, %r1376}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1531}, {%r447, %r450}, {%r1323, %r1383}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1538, %r1539}, {%r447, %r450}, {%r1332, %r1390}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1546, %r1547}, {%r447, %r450}, {%r1341, %r1397}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1490, %r1491, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1490, %r1491, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1498, %r1499, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1498, %r1499, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1506, %r1507, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1506, %r1507, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1514, %r1515, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1514, %r1515, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1522, %r1523, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1522, %r1523, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1530, %r1531, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1530, %r1531, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1538, %r1539, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1538, %r1539, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1546, %r1547, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r1546, %r1547, %r899;
	// end inline asm
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
	@%p229 bra 	$L__BB0_222;
// %bb.221:                             // %pass7905
                                        //   in Loop: Header=BB0_218 Depth=2
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
$L__BB0_222:                            // %L21619
                                        //   in Loop: Header=BB0_218 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1557, [%rd16];
	ld.shared.u32 	%r1564, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1574, %r1571}, {%r459, %r462}, {%r1557}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1583, %r1580}, {%r459, %r462}, {%r1564}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1567, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r1567, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r493, %r1574, %r1569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1576, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1578, %r1576, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r493, %r1583, %r1578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1585, %r496, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1588, %r493, %r1571, %r1585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1592, %r496, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1595, %r493, %r1580, %r1592;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1618, %r1621}, {%r535, %r538}, {%r1572, %r1588}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1625, %r1629}, {%r535, %r538}, {%r1581, %r1595}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1617, %r1618, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1620, %r1621, %r1621, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r1625, %r1625, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r1629, %r1629, %r1624;
	// end inline asm
	mov.u32 	%r1633, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3544, %r1633, %r1628, %r3533;
	// end inline asm
	add.s32 	%r3542, %r3531, 1;
	setp.eq.s32 	%p280, %r3542, 3;
	@%p280 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_224;
$L__BB0_223:                            // %pass10348
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1637, %r3532, 20;
	or.b32  	%r1638, %r179, %r1637;
	cvt.u64.u32 	%rd247, %r1638;
	add.s64 	%rd248, %rd247, %rd18;
	shr.u64 	%rd249, %rd248, 34;
	add.s64 	%rd250, %rd248, %rd249;
	shr.s64 	%rd251, %rd250, 30;
	setp.lt.s64 	%p281, %rd248, 0;
	and.b64  	%rd252, %rd250, -1073741824;
	setp.ne.s64 	%p282, %rd252, %rd248;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd253, 1, 0, %p283;
	sub.s64 	%rd254, %rd253, %rd251;
	shl.b64 	%rd255, %rd254, 30;
	add.s64 	%rd256, %rd255, %rd248;
	shl.b64 	%rd257, %rd256, 2;
	add.s64 	%rd258, %rd4, %rd257;
	st.global.u32 	[%rd258], %r3544;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3542, 0;
	mov.u32 	%r3544, %r3542;
$L__BB0_224:                            // %pass10593
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1643, [%rd68];
	ld.shared.u32 	%r1650, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1660, %r1657}, {%r459, %r462}, {%r1643}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1669, %r1666}, {%r459, %r462}, {%r1650}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1653, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r1653, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r493, %r1660, %r1655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1662, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1664, %r1662, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1667, %r493, %r1669, %r1664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r496, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r493, %r1657, %r1671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r496, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r493, %r1666, %r1678;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1704, %r1707}, {%r535, %r538}, {%r1658, %r1674}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1711, %r1715}, {%r535, %r538}, {%r1667, %r1681}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1704, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r1707, %r1707, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r1711, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r1715, %r1715, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r1633, %r1714, %r3544;
	// end inline asm
	add.s32 	%r3545, %r3542, 1;
	setp.ne.s32 	%p284, %r3545, 3;
	@%p284 bra 	$L__BB0_226;
// %bb.225:                             // %pass10858
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1723, %r3532, 20;
	or.b32  	%r1724, %r179, %r1723;
	cvt.u64.u32 	%rd259, %r1724;
	add.s64 	%rd260, %rd259, %rd18;
	shr.u64 	%rd261, %rd260, 34;
	add.s64 	%rd262, %rd260, %rd261;
	shr.s64 	%rd263, %rd262, 30;
	setp.lt.s64 	%p285, %rd260, 0;
	and.b64  	%rd264, %rd262, -1073741824;
	setp.ne.s64 	%p286, %rd264, %rd260;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd265, 1, 0, %p287;
	sub.s64 	%rd266, %rd265, %rd263;
	shl.b64 	%rd267, %rd266, 30;
	add.s64 	%rd268, %rd267, %rd260;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3547;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3545, 0;
	mov.u32 	%r3547, %r3545;
$L__BB0_226:                            // %pass11103
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1729, [%rd70];
	ld.shared.u32 	%r1736, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1746, %r1743}, {%r459, %r462}, {%r1729}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1755, %r1752}, {%r459, %r462}, {%r1736}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1739, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r493, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r493, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r496, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r493, %r1743, %r1757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r496, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r493, %r1752, %r1764;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1790, %r1793}, {%r535, %r538}, {%r1744, %r1760}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1797, %r1801}, {%r535, %r538}, {%r1753, %r1767}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r1790, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r1793, %r1793, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r1797, %r1797, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r1801, %r1801, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r1633, %r1800, %r3547;
	// end inline asm
	add.s32 	%r3548, %r3545, 1;
	setp.ne.s32 	%p288, %r3548, 3;
	@%p288 bra 	$L__BB0_228;
// %bb.227:                             // %pass11368
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1809, %r3532, 20;
	or.b32  	%r1810, %r179, %r1809;
	cvt.u64.u32 	%rd271, %r1810;
	add.s64 	%rd272, %rd271, %rd18;
	shr.u64 	%rd273, %rd272, 34;
	add.s64 	%rd274, %rd272, %rd273;
	shr.s64 	%rd275, %rd274, 30;
	setp.lt.s64 	%p289, %rd272, 0;
	and.b64  	%rd276, %rd274, -1073741824;
	setp.ne.s64 	%p290, %rd276, %rd272;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd277, 1, 0, %p291;
	sub.s64 	%rd278, %rd277, %rd275;
	shl.b64 	%rd279, %rd278, 30;
	add.s64 	%rd280, %rd279, %rd272;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3550;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3548, 0;
	mov.u32 	%r3550, %r3548;
$L__BB0_228:                            // %pass11613
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1815, [%rd72];
	ld.shared.u32 	%r1822, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1832, %r1829}, {%r459, %r462}, {%r1815}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1841, %r1838}, {%r459, %r462}, {%r1822}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r493, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1834, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r1834, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r493, %r1841, %r1836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1843, %r496, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r493, %r1829, %r1843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r496, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r493, %r1838, %r1850;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1876, %r1879}, {%r535, %r538}, {%r1830, %r1846}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1883, %r1887}, {%r535, %r538}, {%r1839, %r1853}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1876, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1879, %r1879, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1887, %r1887, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r1633, %r1886, %r3550;
	// end inline asm
	add.s32 	%r3551, %r3548, 1;
	setp.ne.s32 	%p292, %r3551, 3;
	@%p292 bra 	$L__BB0_230;
// %bb.229:                             // %pass11878
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1895, %r3532, 20;
	or.b32  	%r1896, %r179, %r1895;
	cvt.u64.u32 	%rd283, %r1896;
	add.s64 	%rd284, %rd283, %rd18;
	shr.u64 	%rd285, %rd284, 34;
	add.s64 	%rd286, %rd284, %rd285;
	shr.s64 	%rd287, %rd286, 30;
	setp.lt.s64 	%p293, %rd284, 0;
	and.b64  	%rd288, %rd286, -1073741824;
	setp.ne.s64 	%p294, %rd288, %rd284;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd289, 1, 0, %p295;
	sub.s64 	%rd290, %rd289, %rd287;
	shl.b64 	%rd291, %rd290, 30;
	add.s64 	%rd292, %rd291, %rd284;
	shl.b64 	%rd293, %rd292, 2;
	add.s64 	%rd294, %rd4, %rd293;
	st.global.u32 	[%rd294], %r3553;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3551, 0;
	mov.u32 	%r3553, %r3551;
$L__BB0_230:                            // %pass12123
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1901, [%rd74];
	ld.shared.u32 	%r1908, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1918, %r1915}, {%r459, %r462}, {%r1901}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r459, %r462}, {%r1908}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1911, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r493, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r493, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r496, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r493, %r1915, %r1929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1936, %r496, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r493, %r1924, %r1936;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1965}, {%r535, %r538}, {%r1916, %r1932}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1969, %r1973}, {%r535, %r538}, {%r1925, %r1939}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1961, %r1962, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r1965, %r1965, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r1969, %r1969, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r1973, %r1973, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r1633, %r1972, %r3553;
	// end inline asm
	add.s32 	%r3554, %r3551, 1;
	setp.ne.s32 	%p296, %r3554, 3;
	@%p296 bra 	$L__BB0_232;
// %bb.231:                             // %pass12388
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1981, %r3532, 20;
	or.b32  	%r1982, %r179, %r1981;
	cvt.u64.u32 	%rd295, %r1982;
	add.s64 	%rd296, %rd295, %rd18;
	shr.u64 	%rd297, %rd296, 34;
	add.s64 	%rd298, %rd296, %rd297;
	shr.s64 	%rd299, %rd298, 30;
	setp.lt.s64 	%p297, %rd296, 0;
	and.b64  	%rd300, %rd298, -1073741824;
	setp.ne.s64 	%p298, %rd300, %rd296;
	and.pred  	%p299, %p297, %p298;
	selp.u64 	%rd301, 1, 0, %p299;
	sub.s64 	%rd302, %rd301, %rd299;
	shl.b64 	%rd303, %rd302, 30;
	add.s64 	%rd304, %rd303, %rd296;
	shl.b64 	%rd305, %rd304, 2;
	add.s64 	%rd306, %rd4, %rd305;
	st.global.u32 	[%rd306], %r3556;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3554, 0;
	mov.u32 	%r3556, %r3554;
$L__BB0_232:                            // %pass12633
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1987, [%rd76];
	ld.shared.u32 	%r1994, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2004, %r2001}, {%r459, %r462}, {%r1987}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2013, %r2010}, {%r459, %r462}, {%r1994}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1997, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r1997, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r493, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2006, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r2006, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r493, %r2013, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r496, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r493, %r2001, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r496, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r493, %r2010, %r2022;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2048, %r2051}, {%r535, %r538}, {%r2002, %r2018}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2055, %r2059}, {%r535, %r538}, {%r2011, %r2025}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2047, %r2048, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2050, %r2051, %r2051, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r2055, %r2055, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r2059, %r2059, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r1633, %r2058, %r3556;
	// end inline asm
	add.s32 	%r3557, %r3554, 1;
	setp.ne.s32 	%p300, %r3557, 3;
	@%p300 bra 	$L__BB0_234;
// %bb.233:                             // %pass12898
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2067, %r3532, 20;
	or.b32  	%r2068, %r179, %r2067;
	cvt.u64.u32 	%rd307, %r2068;
	add.s64 	%rd308, %rd307, %rd18;
	shr.u64 	%rd309, %rd308, 34;
	add.s64 	%rd310, %rd308, %rd309;
	shr.s64 	%rd311, %rd310, 30;
	setp.lt.s64 	%p301, %rd308, 0;
	and.b64  	%rd312, %rd310, -1073741824;
	setp.ne.s64 	%p302, %rd312, %rd308;
	and.pred  	%p303, %p301, %p302;
	selp.u64 	%rd313, 1, 0, %p303;
	sub.s64 	%rd314, %rd313, %rd311;
	shl.b64 	%rd315, %rd314, 30;
	add.s64 	%rd316, %rd315, %rd308;
	shl.b64 	%rd317, %rd316, 2;
	add.s64 	%rd318, %rd4, %rd317;
	st.global.u32 	[%rd318], %r3559;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3557, 0;
	mov.u32 	%r3559, %r3557;
$L__BB0_234:                            // %pass13143
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2073, [%rd78];
	ld.shared.u32 	%r2080, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2090, %r2087}, {%r459, %r462}, {%r2073}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2099, %r2096}, {%r459, %r462}, {%r2080}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2083, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2085, %r2083, %r2087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r493, %r2090, %r2085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2092, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2094, %r2092, %r2096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2097, %r493, %r2099, %r2094;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r496, %r2090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r493, %r2087, %r2101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r496, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r493, %r2096, %r2108;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2134, %r2137}, {%r535, %r538}, {%r2088, %r2104}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2141, %r2145}, {%r535, %r538}, {%r2097, %r2111}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r2134, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r2137, %r2137, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r2141, %r2141, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r2145, %r2145, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r1633, %r2144, %r3559;
	// end inline asm
	add.s32 	%r3560, %r3557, 1;
	setp.ne.s32 	%p304, %r3560, 3;
	@%p304 bra 	$L__BB0_236;
// %bb.235:                             // %pass13408
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2153, %r3532, 20;
	or.b32  	%r2154, %r179, %r2153;
	cvt.u64.u32 	%rd319, %r2154;
	add.s64 	%rd320, %rd319, %rd18;
	shr.u64 	%rd321, %rd320, 34;
	add.s64 	%rd322, %rd320, %rd321;
	shr.s64 	%rd323, %rd322, 30;
	setp.lt.s64 	%p305, %rd320, 0;
	and.b64  	%rd324, %rd322, -1073741824;
	setp.ne.s64 	%p306, %rd324, %rd320;
	and.pred  	%p307, %p305, %p306;
	selp.u64 	%rd325, 1, 0, %p307;
	sub.s64 	%rd326, %rd325, %rd323;
	shl.b64 	%rd327, %rd326, 30;
	add.s64 	%rd328, %rd327, %rd320;
	shl.b64 	%rd329, %rd328, 2;
	add.s64 	%rd330, %rd4, %rd329;
	st.global.u32 	[%rd330], %r3562;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3560, 0;
	mov.u32 	%r3562, %r3560;
$L__BB0_236:                            // %pass13653
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2159, [%rd80];
	ld.shared.u32 	%r2166, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2176, %r2173}, {%r459, %r462}, {%r2159}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2185, %r2182}, {%r459, %r462}, {%r2166}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2169, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r2169, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r493, %r2176, %r2171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2178, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r2178, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r493, %r2185, %r2180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r496, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r493, %r2173, %r2187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2194, %r496, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r493, %r2182, %r2194;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2220, %r2223}, {%r535, %r538}, {%r2174, %r2190}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2227, %r2231}, {%r535, %r538}, {%r2183, %r2197}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2220, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r2223, %r2223, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r2227, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r2231, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r1633, %r2230, %r3562;
	// end inline asm
	add.s32 	%r3531, %r3560, 1;
	setp.ne.s32 	%p308, %r3531, 3;
	@%p308 bra 	$L__BB0_152;
// %bb.237:                             // %pass13918
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2239, %r3532, 20;
	or.b32  	%r2240, %r179, %r2239;
	cvt.u64.u32 	%rd331, %r2240;
	add.s64 	%rd332, %rd331, %rd18;
	shr.u64 	%rd333, %rd332, 34;
	add.s64 	%rd334, %rd332, %rd333;
	shr.s64 	%rd335, %rd334, 30;
	setp.lt.s64 	%p309, %rd332, 0;
	and.b64  	%rd336, %rd334, -1073741824;
	setp.ne.s64 	%p310, %rd336, %rd332;
	and.pred  	%p311, %p309, %p310;
	selp.u64 	%rd337, 1, 0, %p311;
	sub.s64 	%rd338, %rd337, %rd335;
	shl.b64 	%rd339, %rd338, 30;
	add.s64 	%rd340, %rd339, %rd332;
	shl.b64 	%rd341, %rd340, 2;
	add.s64 	%rd342, %rd4, %rd341;
	st.global.u32 	[%rd342], %r3533;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3531, 0;
	mov.u32 	%r3533, %r3531;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L30894.preheader
                                        //   in Loop: Header=BB0_200 Depth=1
	or.b32  	%r2242, %r181, 64;
	add.s32 	%r2243, %r178, %r2242;
	mul.wide.u32 	%rd343, %r2243, 4;
	add.s64 	%rd7, %rd101, %rd343;
	cvt.u64.u32 	%rd345, %r2242;
	add.s64 	%rd346, %rd55, %rd345;
	shl.b64 	%rd347, %rd346, 2;
	add.s64 	%rd8, %rd101, %rd347;
	or.b32  	%r2244, %r181, 128;
	add.s32 	%r2245, %r178, %r2244;
	mul.wide.u32 	%rd350, %r2245, 4;
	add.s64 	%rd10, %rd101, %rd350;
	cvt.u64.u32 	%rd351, %r2244;
	add.s64 	%rd352, %rd55, %rd351;
	shl.b64 	%rd353, %rd352, 2;
	add.s64 	%rd11, %rd101, %rd353;
	or.b32  	%r2246, %r181, 192;
	add.s32 	%r2247, %r178, %r2246;
	mul.wide.u32 	%rd356, %r2247, 4;
	add.s64 	%rd13, %rd101, %rd356;
	cvt.u64.u32 	%rd357, %r2246;
	add.s64 	%rd358, %rd55, %rd357;
	shl.b64 	%rd359, %rd358, 2;
	add.s64 	%rd14, %rd101, %rd359;
	mov.u32 	%r3530, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_170:                            // %L49505
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3530, %r3530, -8;
	setp.ne.s32 	%p350, %r3530, -16;
	@%p350 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_171;
$L__BB0_154:                            // %L30894
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p313, %r5, 16;
	setp.eq.s32 	%p314, %r3530, 16;
	selp.b32 	%r2776, %r214, 0, %p314;
	setp.eq.s32 	%p315, %r3530, 8;
	selp.b32 	%r2777, %r218, %r2776, %p315;
	setp.eq.s32 	%p316, %r3530, 0;
	selp.b32 	%r2778, %r222, %r2777, %p316;
	setp.eq.s32 	%p317, %r3530, -8;
	selp.b32 	%r2779, %r226, %r2778, %p317;
	selp.b32 	%r2780, %r215, 0, %p314;
	selp.b32 	%r2781, %r219, %r2780, %p315;
	selp.b32 	%r2782, %r223, %r2781, %p316;
	selp.b32 	%r2783, %r227, %r2782, %p317;
	selp.b32 	%r2784, %r216, 0, %p314;
	selp.b32 	%r2785, %r220, %r2784, %p315;
	selp.b32 	%r2786, %r224, %r2785, %p316;
	selp.b32 	%r2787, %r228, %r2786, %p317;
	selp.b32 	%r2788, %r217, 0, %p314;
	selp.b32 	%r2789, %r221, %r2788, %p315;
	selp.b32 	%r2790, %r225, %r2789, %p316;
	selp.b32 	%r2791, %r229, %r2790, %p317;
	// begin inline asm
	mov.b32 %r2275, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2792, %r2779, 8;
	xor.b32  	%r2285, %r2792, 8947848;
	// begin inline asm
	lop3.b32 %r2272, %r1150, %r2285, %r2275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2276, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2277, %r2275, %r2276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2280, %r2272, %r2277;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2283, %r1161, %r2285, %r2286, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2288, %r2286, %r2287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2291, %r2283, %r2288;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2332, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2793, %r2783, 8;
	xor.b32  	%r2331, %r2793, 8947848;
	// begin inline asm
	lop3.b32 %r2318, %r1150, %r2331, %r2321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2323, %r2321, %r2322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2326, %r2318, %r2323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2329, %r1161, %r2331, %r2332, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2332, %r2333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2337, %r2329, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2367, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2794, %r2787, 8;
	xor.b32  	%r2377, %r2794, 8947848;
	// begin inline asm
	lop3.b32 %r2364, %r1150, %r2377, %r2367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2367, %r2368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2372, %r2364, %r2369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2375, %r1161, %r2377, %r2378, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2378, %r2379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2383, %r2375, %r2380;
	// end inline asm
	// begin inline asm
	mov.b32 %r2413, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2424, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2795, %r2791, 8;
	xor.b32  	%r2423, %r2795, 8947848;
	// begin inline asm
	lop3.b32 %r2410, %r1150, %r2423, %r2413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2413, %r2414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2418, %r2410, %r2415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2421, %r1161, %r2423, %r2424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2424, %r2425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2429, %r2421, %r2426;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2280;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2432, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2291;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2435, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2326;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2438, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2337;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2441, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2372;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2444, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2383;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2447, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2418;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2450, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2429;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2453, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2519, %r2516}, {%r362, %r365}, {%r2432}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2528, %r2525}, {%r362, %r365}, {%r2435}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2537, %r2534}, {%r362, %r365}, {%r2438}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2546, %r2543}, {%r362, %r365}, {%r2441}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2555, %r2552}, {%r362, %r365}, {%r2444}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2564, %r2561}, {%r362, %r365}, {%r2447}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2573, %r2570}, {%r362, %r365}, {%r2450}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2582, %r2579}, {%r362, %r365}, {%r2453}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2512, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r2512, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r400, %r2519, %r2514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2521, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r2521, %r2525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r400, %r2528, %r2523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2530, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r2530, %r2534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r400, %r2537, %r2532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2539, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2541, %r2539, %r2543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2544, %r400, %r2546, %r2541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2548, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2550, %r2548, %r2552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r400, %r2555, %r2550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2557, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2559, %r2557, %r2561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2562, %r400, %r2564, %r2559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2566, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2568, %r2566, %r2570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r400, %r2573, %r2568;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2575, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2577, %r2575, %r2579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r400, %r2582, %r2577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2584, %r403, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r400, %r2516, %r2584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2591, %r403, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r400, %r2525, %r2591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2598, %r403, %r2537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2601, %r400, %r2534, %r2598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r403, %r2546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r400, %r2543, %r2605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2612, %r403, %r2555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2615, %r400, %r2552, %r2612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r403, %r2564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r400, %r2561, %r2619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2626, %r403, %r2573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2629, %r400, %r2570, %r2626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r403, %r2582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r400, %r2579, %r2633;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2713, %r2714}, {%r447, %r450}, {%r2517, %r2587}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2721, %r2722}, {%r447, %r450}, {%r2526, %r2594}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2729, %r2730}, {%r447, %r450}, {%r2535, %r2601}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2738}, {%r447, %r450}, {%r2544, %r2608}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2745, %r2746}, {%r447, %r450}, {%r2553, %r2615}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2754}, {%r447, %r450}, {%r2562, %r2622}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2761, %r2762}, {%r447, %r450}, {%r2571, %r2629}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2769, %r2770}, {%r447, %r450}, {%r2580, %r2636}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2712, %r2713, %r2714, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2716, %r2713, %r2714, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2720, %r2721, %r2722, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2724, %r2721, %r2722, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2728, %r2729, %r2730, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2732, %r2729, %r2730, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2736, %r2737, %r2738, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2740, %r2737, %r2738, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2744, %r2745, %r2746, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2748, %r2745, %r2746, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2752, %r2753, %r2754, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2756, %r2753, %r2754, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2760, %r2761, %r2762, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2764, %r2761, %r2762, %r899;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2768, %r2769, %r2770, %r895;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2772, %r2769, %r2770, %r899;
	// end inline asm
	st.shared.u32 	[%rd54], %r2712;
	st.shared.u32 	[%rd58+16576], %r2716;
	st.shared.u32 	[%rd58+64], %r2720;
	st.shared.u32 	[%rd58+16640], %r2724;
	st.shared.u32 	[%rd7], %r2728;
	st.shared.u32 	[%rd8+16576], %r2732;
	st.shared.u32 	[%rd8+64], %r2736;
	st.shared.u32 	[%rd8+16640], %r2740;
	st.shared.u32 	[%rd10], %r2744;
	st.shared.u32 	[%rd11+16576], %r2748;
	st.shared.u32 	[%rd11+64], %r2752;
	st.shared.u32 	[%rd11+16640], %r2756;
	st.shared.u32 	[%rd13], %r2760;
	st.shared.u32 	[%rd14+16576], %r2764;
	st.shared.u32 	[%rd14+64], %r2768;
	st.shared.u32 	[%rd14+16640], %r2772;
	@%p313 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_155;
$L__BB0_238:                            // %pass16443
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd54], %r2712;
	st.shared.u32 	[%rd58+16576], %r2716;
	st.shared.u32 	[%rd58+64], %r2720;
	st.shared.u32 	[%rd58+16640], %r2724;
	st.shared.u32 	[%rd7], %r2728;
	st.shared.u32 	[%rd8+16576], %r2732;
	st.shared.u32 	[%rd8+64], %r2736;
	st.shared.u32 	[%rd8+16640], %r2740;
	st.shared.u32 	[%rd10], %r2744;
	st.shared.u32 	[%rd11+16576], %r2748;
	st.shared.u32 	[%rd11+64], %r2752;
	st.shared.u32 	[%rd11+16640], %r2756;
	st.shared.u32 	[%rd13], %r2760;
	st.shared.u32 	[%rd14+16576], %r2764;
	st.shared.u32 	[%rd14+64], %r2768;
	st.shared.u32 	[%rd14+16640], %r2772;
$L__BB0_155:                            // %L40251
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2800, [%rd16];
	ld.shared.u32 	%r2807, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2817, %r2814}, {%r459, %r462}, {%r2800}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2826, %r2823}, {%r459, %r462}, {%r2807}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2810, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r2810, %r2814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r493, %r2817, %r2812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2819, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2821, %r2819, %r2823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r493, %r2826, %r2821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r496, %r2817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r493, %r2814, %r2828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r496, %r2826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r493, %r2823, %r2835;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2861, %r2864}, {%r535, %r538}, {%r2815, %r2831}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2868, %r2872}, {%r535, %r538}, {%r2824, %r2838}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2861, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r2864, %r2864, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r2868, %r2868, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r2872, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r1633, %r2871, %r3533;
	// end inline asm
	add.s32 	%r3563, %r3531, 1;
	setp.eq.s32 	%p318, %r3563, 3;
	@%p318 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_157;
$L__BB0_156:                            // %pass18886
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2880, %r3532, 20;
	or.b32  	%r2881, %r179, %r2880;
	cvt.u64.u32 	%rd362, %r2881;
	add.s64 	%rd363, %rd362, %rd18;
	shr.u64 	%rd364, %rd363, 34;
	add.s64 	%rd365, %rd363, %rd364;
	shr.s64 	%rd366, %rd365, 30;
	setp.lt.s64 	%p319, %rd363, 0;
	and.b64  	%rd367, %rd365, -1073741824;
	setp.ne.s64 	%p320, %rd367, %rd363;
	and.pred  	%p321, %p319, %p320;
	selp.u64 	%rd368, 1, 0, %p321;
	sub.s64 	%rd369, %rd368, %rd366;
	shl.b64 	%rd370, %rd369, 30;
	add.s64 	%rd371, %rd370, %rd363;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r3565;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3563, 0;
	mov.u32 	%r3565, %r3563;
$L__BB0_157:                            // %pass19131
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2886, [%rd68];
	ld.shared.u32 	%r2893, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2903, %r2900}, {%r459, %r462}, {%r2886}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2912, %r2909}, {%r459, %r462}, {%r2893}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2896, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2898, %r2896, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r493, %r2903, %r2898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2905, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2907, %r2905, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r493, %r2912, %r2907;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2914, %r496, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r493, %r2900, %r2914;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r496, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r493, %r2909, %r2921;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2947, %r2950}, {%r535, %r538}, {%r2901, %r2917}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2958}, {%r535, %r538}, {%r2910, %r2924}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r2947, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r2954, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r2958, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r1633, %r2957, %r3565;
	// end inline asm
	add.s32 	%r3566, %r3563, 1;
	setp.ne.s32 	%p322, %r3566, 3;
	@%p322 bra 	$L__BB0_159;
// %bb.158:                             // %pass19396
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2966, %r3532, 20;
	or.b32  	%r2967, %r179, %r2966;
	cvt.u64.u32 	%rd374, %r2967;
	add.s64 	%rd375, %rd374, %rd18;
	shr.u64 	%rd376, %rd375, 34;
	add.s64 	%rd377, %rd375, %rd376;
	shr.s64 	%rd378, %rd377, 30;
	setp.lt.s64 	%p323, %rd375, 0;
	and.b64  	%rd379, %rd377, -1073741824;
	setp.ne.s64 	%p324, %rd379, %rd375;
	and.pred  	%p325, %p323, %p324;
	selp.u64 	%rd380, 1, 0, %p325;
	sub.s64 	%rd381, %rd380, %rd378;
	shl.b64 	%rd382, %rd381, 30;
	add.s64 	%rd383, %rd382, %rd375;
	shl.b64 	%rd384, %rd383, 2;
	add.s64 	%rd385, %rd4, %rd384;
	st.global.u32 	[%rd385], %r3568;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3566, 0;
	mov.u32 	%r3568, %r3566;
$L__BB0_159:                            // %pass19641
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2972, [%rd70];
	ld.shared.u32 	%r2979, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2989, %r2986}, {%r459, %r462}, {%r2972}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2998, %r2995}, {%r459, %r462}, {%r2979}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2982, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2984, %r2982, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2987, %r493, %r2989, %r2984;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2991, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r2991, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r493, %r2998, %r2993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3000, %r496, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r493, %r2986, %r3000;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3007, %r496, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r493, %r2995, %r3007;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3033, %r3036}, {%r535, %r538}, {%r2987, %r3003}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3040, %r3044}, {%r535, %r538}, {%r2996, %r3010}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3033, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r3036, %r3036, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r3040, %r3040, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r3044, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r1633, %r3043, %r3568;
	// end inline asm
	add.s32 	%r3569, %r3566, 1;
	setp.ne.s32 	%p326, %r3569, 3;
	@%p326 bra 	$L__BB0_161;
// %bb.160:                             // %pass19906
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3052, %r3532, 20;
	or.b32  	%r3053, %r179, %r3052;
	cvt.u64.u32 	%rd386, %r3053;
	add.s64 	%rd387, %rd386, %rd18;
	shr.u64 	%rd388, %rd387, 34;
	add.s64 	%rd389, %rd387, %rd388;
	shr.s64 	%rd390, %rd389, 30;
	setp.lt.s64 	%p327, %rd387, 0;
	and.b64  	%rd391, %rd389, -1073741824;
	setp.ne.s64 	%p328, %rd391, %rd387;
	and.pred  	%p329, %p327, %p328;
	selp.u64 	%rd392, 1, 0, %p329;
	sub.s64 	%rd393, %rd392, %rd390;
	shl.b64 	%rd394, %rd393, 30;
	add.s64 	%rd395, %rd394, %rd387;
	shl.b64 	%rd396, %rd395, 2;
	add.s64 	%rd397, %rd4, %rd396;
	st.global.u32 	[%rd397], %r3571;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3569, 0;
	mov.u32 	%r3571, %r3569;
$L__BB0_161:                            // %pass20151
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3058, [%rd72];
	ld.shared.u32 	%r3065, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3075, %r3072}, {%r459, %r462}, {%r3058}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3084, %r3081}, {%r459, %r462}, {%r3065}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3068, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r3068, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r493, %r3075, %r3070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3077, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3079, %r3077, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r493, %r3084, %r3079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r496, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r493, %r3072, %r3086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3093, %r496, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3096, %r493, %r3081, %r3093;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3119, %r3122}, {%r535, %r538}, {%r3073, %r3089}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3126, %r3130}, {%r535, %r538}, {%r3082, %r3096}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3118, %r3119, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r3122, %r3122, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r3126, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r3130, %r3130, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r1633, %r3129, %r3571;
	// end inline asm
	add.s32 	%r3572, %r3569, 1;
	setp.ne.s32 	%p330, %r3572, 3;
	@%p330 bra 	$L__BB0_163;
// %bb.162:                             // %pass20416
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3138, %r3532, 20;
	or.b32  	%r3139, %r179, %r3138;
	cvt.u64.u32 	%rd398, %r3139;
	add.s64 	%rd399, %rd398, %rd18;
	shr.u64 	%rd400, %rd399, 34;
	add.s64 	%rd401, %rd399, %rd400;
	shr.s64 	%rd402, %rd401, 30;
	setp.lt.s64 	%p331, %rd399, 0;
	and.b64  	%rd403, %rd401, -1073741824;
	setp.ne.s64 	%p332, %rd403, %rd399;
	and.pred  	%p333, %p331, %p332;
	selp.u64 	%rd404, 1, 0, %p333;
	sub.s64 	%rd405, %rd404, %rd402;
	shl.b64 	%rd406, %rd405, 30;
	add.s64 	%rd407, %rd406, %rd399;
	shl.b64 	%rd408, %rd407, 2;
	add.s64 	%rd409, %rd4, %rd408;
	st.global.u32 	[%rd409], %r3574;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3572, 0;
	mov.u32 	%r3574, %r3572;
$L__BB0_163:                            // %pass20661
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3144, [%rd74];
	ld.shared.u32 	%r3151, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3161, %r3158}, {%r459, %r462}, {%r3144}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3170, %r3167}, {%r459, %r462}, {%r3151}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3154, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r3154, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r493, %r3161, %r3156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3163, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r3163, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r493, %r3170, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3172, %r496, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r493, %r3158, %r3172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r496, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r493, %r3167, %r3179;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3205, %r3208}, {%r535, %r538}, {%r3159, %r3175}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3212, %r3216}, {%r535, %r538}, {%r3168, %r3182}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r3205, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3212, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r1633, %r3215, %r3574;
	// end inline asm
	add.s32 	%r3575, %r3572, 1;
	setp.ne.s32 	%p334, %r3575, 3;
	@%p334 bra 	$L__BB0_165;
// %bb.164:                             // %pass20926
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3224, %r3532, 20;
	or.b32  	%r3225, %r179, %r3224;
	cvt.u64.u32 	%rd410, %r3225;
	add.s64 	%rd411, %rd410, %rd18;
	shr.u64 	%rd412, %rd411, 34;
	add.s64 	%rd413, %rd411, %rd412;
	shr.s64 	%rd414, %rd413, 30;
	setp.lt.s64 	%p335, %rd411, 0;
	and.b64  	%rd415, %rd413, -1073741824;
	setp.ne.s64 	%p336, %rd415, %rd411;
	and.pred  	%p337, %p335, %p336;
	selp.u64 	%rd416, 1, 0, %p337;
	sub.s64 	%rd417, %rd416, %rd414;
	shl.b64 	%rd418, %rd417, 30;
	add.s64 	%rd419, %rd418, %rd411;
	shl.b64 	%rd420, %rd419, 2;
	add.s64 	%rd421, %rd4, %rd420;
	st.global.u32 	[%rd421], %r3577;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3575, 0;
	mov.u32 	%r3577, %r3575;
$L__BB0_165:                            // %pass21171
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3230, [%rd76];
	ld.shared.u32 	%r3237, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3247, %r3244}, {%r459, %r462}, {%r3230}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3256, %r3253}, {%r459, %r462}, {%r3237}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3240, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3242, %r3240, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r493, %r3247, %r3242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3249, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r3249, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r493, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3258, %r496, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r493, %r3244, %r3258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3265, %r496, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r493, %r3253, %r3265;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3291, %r3294}, {%r535, %r538}, {%r3245, %r3261}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3298, %r3302}, {%r535, %r538}, {%r3254, %r3268}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3291, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r3294, %r3294, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r3298, %r3298, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r3302, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r1633, %r3301, %r3577;
	// end inline asm
	add.s32 	%r3578, %r3575, 1;
	setp.ne.s32 	%p338, %r3578, 3;
	@%p338 bra 	$L__BB0_167;
// %bb.166:                             // %pass21436
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3310, %r3532, 20;
	or.b32  	%r3311, %r179, %r3310;
	cvt.u64.u32 	%rd422, %r3311;
	add.s64 	%rd423, %rd422, %rd18;
	shr.u64 	%rd424, %rd423, 34;
	add.s64 	%rd425, %rd423, %rd424;
	shr.s64 	%rd426, %rd425, 30;
	setp.lt.s64 	%p339, %rd423, 0;
	and.b64  	%rd427, %rd425, -1073741824;
	setp.ne.s64 	%p340, %rd427, %rd423;
	and.pred  	%p341, %p339, %p340;
	selp.u64 	%rd428, 1, 0, %p341;
	sub.s64 	%rd429, %rd428, %rd426;
	shl.b64 	%rd430, %rd429, 30;
	add.s64 	%rd431, %rd430, %rd423;
	shl.b64 	%rd432, %rd431, 2;
	add.s64 	%rd433, %rd4, %rd432;
	st.global.u32 	[%rd433], %r3580;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3578, 0;
	mov.u32 	%r3580, %r3578;
$L__BB0_167:                            // %pass21681
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3316, [%rd78];
	ld.shared.u32 	%r3323, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3333, %r3330}, {%r459, %r462}, {%r3316}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3342, %r3339}, {%r459, %r462}, {%r3323}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3326, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3328, %r3326, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r493, %r3333, %r3328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3335, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3337, %r3335, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3340, %r493, %r3342, %r3337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3344, %r496, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r493, %r3330, %r3344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3351, %r496, %r3342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3354, %r493, %r3339, %r3351;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3377, %r3380}, {%r535, %r538}, {%r3331, %r3347}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3384, %r3388}, {%r535, %r538}, {%r3340, %r3354}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3376, %r3377, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r3380, %r3380, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r3384, %r3384, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3387, %r3388, %r3388, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3583, %r1633, %r3387, %r3580;
	// end inline asm
	add.s32 	%r3581, %r3578, 1;
	setp.ne.s32 	%p342, %r3581, 3;
	@%p342 bra 	$L__BB0_169;
// %bb.168:                             // %pass21946
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3396, %r3532, 20;
	or.b32  	%r3397, %r179, %r3396;
	cvt.u64.u32 	%rd434, %r3397;
	add.s64 	%rd435, %rd434, %rd18;
	shr.u64 	%rd436, %rd435, 34;
	add.s64 	%rd437, %rd435, %rd436;
	shr.s64 	%rd438, %rd437, 30;
	setp.lt.s64 	%p343, %rd435, 0;
	and.b64  	%rd439, %rd437, -1073741824;
	setp.ne.s64 	%p344, %rd439, %rd435;
	and.pred  	%p345, %p343, %p344;
	selp.u64 	%rd440, 1, 0, %p345;
	sub.s64 	%rd441, %rd440, %rd438;
	shl.b64 	%rd442, %rd441, 30;
	add.s64 	%rd443, %rd442, %rd435;
	shl.b64 	%rd444, %rd443, 2;
	add.s64 	%rd445, %rd4, %rd444;
	st.global.u32 	[%rd445], %r3583;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3581, 0;
	mov.u32 	%r3583, %r3581;
$L__BB0_169:                            // %pass22191
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3402, [%rd80];
	ld.shared.u32 	%r3409, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3419, %r3416}, {%r459, %r462}, {%r3402}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3428, %r3425}, {%r459, %r462}, {%r3409}, {%r1272, %r1272};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3412, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3414, %r3412, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r493, %r3419, %r3414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3421, %r496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3423, %r3421, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3426, %r493, %r3428, %r3423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3430, %r496, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3433, %r493, %r3416, %r3430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3437, %r496, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3440, %r493, %r3425, %r3437;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3466}, {%r535, %r538}, {%r3417, %r3433}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3470, %r3474}, {%r535, %r538}, {%r3426, %r3440}, {%r1272, %r1272}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3462, %r3463, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3465, %r3466, %r3466, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r3470, %r3470, %r3465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r3474, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r1633, %r3473, %r3583;
	// end inline asm
	add.s32 	%r3531, %r3581, 1;
	setp.ne.s32 	%p346, %r3531, 3;
	@%p346 bra 	$L__BB0_170;
// %bb.239:                             // %pass22456
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3482, %r3532, 20;
	or.b32  	%r3483, %r179, %r3482;
	cvt.u64.u32 	%rd446, %r3483;
	add.s64 	%rd447, %rd446, %rd18;
	shr.u64 	%rd448, %rd447, 34;
	add.s64 	%rd449, %rd447, %rd448;
	shr.s64 	%rd450, %rd449, 30;
	setp.lt.s64 	%p347, %rd447, 0;
	and.b64  	%rd451, %rd449, -1073741824;
	setp.ne.s64 	%p348, %rd451, %rd447;
	and.pred  	%p349, %p347, %p348;
	selp.u64 	%rd452, 1, 0, %p349;
	sub.s64 	%rd453, %rd452, %rd450;
	shl.b64 	%rd454, %rd453, 30;
	add.s64 	%rd455, %rd454, %rd447;
	shl.b64 	%rd456, %rd455, 2;
	add.s64 	%rd457, %rd4, %rd456;
	st.global.u32 	[%rd457], %r3533;
	add.s32 	%r3532, %r3532, 1;
	mov.u32 	%r3531, %r1272;
	mov.u32 	%r3533, %r1272;
	bra.uni 	$L__BB0_170;
$L__BB0_172:                            // %L49536
	mov.u32 	%r3484, 0;
	st.global.u32 	[%rd6], %r3484;
	ret;
$L__BB0_219:                            // %post_box_union
	mov.u64 	%rd245, exception4380;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3500, 5;
	st.global.u32 	[%rd6], %r3500;
	mov.u64 	%rd488, exception4332;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3499, 5;
	st.global.u32 	[%rd6], %r3499;
	mov.u64 	%rd486, exception4332;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3498, 5;
	st.global.u32 	[%rd6], %r3498;
	mov.u64 	%rd484, exception4332;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3497, 5;
	st.global.u32 	[%rd6], %r3497;
	mov.u64 	%rd482, exception4332;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3496, 5;
	st.global.u32 	[%rd6], %r3496;
	mov.u64 	%rd480, exception4332;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3495, 5;
	st.global.u32 	[%rd6], %r3495;
	mov.u64 	%rd478, exception4332;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3494, 5;
	st.global.u32 	[%rd6], %r3494;
	mov.u64 	%rd476, exception4332;
	cvta.global.u64 	%rd477, %rd476;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd477;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3493, 5;
	st.global.u32 	[%rd6], %r3493;
	mov.u64 	%rd474, exception4332;
	cvta.global.u64 	%rd475, %rd474;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd475;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3492, 5;
	st.global.u32 	[%rd6], %r3492;
	mov.u64 	%rd472, exception4332;
	cvta.global.u64 	%rd473, %rd472;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd473;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3491, 5;
	st.global.u32 	[%rd6], %r3491;
	mov.u64 	%rd470, exception4332;
	cvta.global.u64 	%rd471, %rd470;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd471;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3490, 5;
	st.global.u32 	[%rd6], %r3490;
	mov.u64 	%rd468, exception4332;
	cvta.global.u64 	%rd469, %rd468;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd469;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3489, 5;
	st.global.u32 	[%rd6], %r3489;
	mov.u64 	%rd466, exception4332;
	cvta.global.u64 	%rd467, %rd466;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd467;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3488, 5;
	st.global.u32 	[%rd6], %r3488;
	mov.u64 	%rd464, exception4332;
	cvta.global.u64 	%rd465, %rd464;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd465;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3487, 5;
	st.global.u32 	[%rd6], %r3487;
	mov.u64 	%rd462, exception4332;
	cvta.global.u64 	%rd463, %rd462;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd463;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3486, 5;
	st.global.u32 	[%rd6], %r3486;
	mov.u64 	%rd460, exception4332;
	cvta.global.u64 	%rd461, %rd460;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd461;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3485, 5;
	st.global.u32 	[%rd6], %r3485;
	mov.u64 	%rd458, exception4332;
	cvta.global.u64 	%rd459, %rd458;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd459;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3502, 2;
	st.global.u32 	[%rd6], %r3502;
	mov.u64 	%rd492, exception4332;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3501, 3;
	st.global.u32 	[%rd6], %r3501;
	mov.u64 	%rd490, exception4332;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd88, exception1;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd87, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r5, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd93, __unnamed_1;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd87;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r548, [retval0+0];
	} // callseq 47
	mov.u32 	%r550, 4;
	st.global.u32 	[%rd6], %r550;
	mov.u64 	%rd96, exception4332;
	cvta.global.u64 	%rd97, %rd96;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd97;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r332;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
