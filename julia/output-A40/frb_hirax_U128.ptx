// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4332[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4380[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception14392[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<359>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3576>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<467>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r329, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd67, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r338, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r338, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd68, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r330, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r339, %r3, %r1;
	or.b32  	%r340, %r339, %r5;
	mul.wide.u32 	%rd75, %r340, 4;
	add.s64 	%rd6, %rd68, %rd75;
	mov.u32 	%r341, 1;
	st.global.u32 	[%rd6], %r341;
	setp.gt.u32 	%p3, %r330, 511;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r331, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r331, %r330;
	setp.gt.s32 	%p5, %r331, 1023;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r332, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r331, %r330;
	and.b32  	%r342, %r6, 63;
	setp.ne.s32 	%p7, %r342, 0;
	setp.gt.u32 	%p8, %r332, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r333, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r333, %r332;
	setp.lt.s32 	%p11, %r333, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r343, %r333, %r332;
	mul.hi.s32 	%r344, %r6, 1431655766;
	shr.u32 	%r345, %r344, 31;
	add.s32 	%r346, %r344, %r345;
	setp.eq.s32 	%p13, %r343, %r346;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r334, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r334, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r335, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r335, %r334;
	setp.gt.s32 	%p16, %r335, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r336, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r335, %r334;
	and.b32  	%r347, %r7, 127;
	setp.ne.s32 	%p18, %r347, 0;
	setp.lt.s32 	%p19, %r336, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r337, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r337, %r336;
	setp.gt.s32 	%p22, %r337, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r348, %r337, %r336;
	and.b32  	%r349, %r348, 127;
	setp.eq.s32 	%p24, %r349, 0;
	setp.eq.s32 	%p25, %r348, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_13;
$L__BB0_173:                            // %pass162
	and.b32  	%r146, %r1, 3;
	shr.u32 	%r147, %r1, 2;
	mul.lo.s32 	%r350, %r146, %r147;
	and.b32  	%r351, %r350, 7;
	cvt.rn.f32.s32 	%f185, %r351;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p354, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_185;
// %bb.174:
	@%p354 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_175;
$L__BB0_181:
	mov.b32 	%r149, %f750;
	and.b32  	%r352, %r149, 8388607;
	or.b32  	%r3529, %r352, 1065353216;
	mov.b32 	%f745, %r3529;
	add.s32 	%r353, %r149, -1073741824;
	and.b32  	%r3530, %r353, -8388608;
	setp.eq.s32 	%p34, %r3530, 0;
	@%p34 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r354, %r3530, 192937984;
	add.s32 	%r355, %r3529, %r354;
	mov.b32 	%f197, %r355;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3530, %r3530, %r354;
	mov.b32 	%r3529, %f745;
	setp.ne.s32 	%p35, %r3530, 0;
	setp.ne.s32 	%p36, %r3529, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_185;
$L__BB0_175:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_180;
// %bb.176:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_178;
// %bb.177:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r356, %f151;
	and.b32  	%r156, %r356, -2147483648;
	@%p39 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r357, %f746;
	or.b32  	%r358, %r156, %r357;
	mov.b32 	%f746, %r358;
$L__BB0_187:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r1, 1;
	and.b32  	%r373, %r159, 2;
	mul.lo.s32 	%r160, %r373, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p355, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p355 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r374, %r9, 8388607;
	or.b32  	%r3495, %r374, 1065353216;
	mov.b32 	%f705, %r3495;
	add.s32 	%r375, %r9, -1073741824;
	and.b32  	%r3496, %r375, -8388608;
	setp.eq.s32 	%p54, %r3496, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2360.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2360
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r376, %r3496, 192937984;
	add.s32 	%r377, %r3495, %r376;
	mov.b32 	%f251, %r377;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3496, %r3496, %r376;
	mov.b32 	%r3495, %f705;
	setp.ne.s32 	%p55, %r3496, 0;
	setp.ne.s32 	%p56, %r3495, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2362
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2339
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2343
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2346
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2365
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r378, %f168;
	and.b32  	%r16, %r378, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r379, %f706;
	or.b32  	%r380, %r16, %r379;
	mov.b32 	%f706, %r380;
$L__BB0_27:                             // %__nv_fmodf.exit2366
	add.s32 	%r389, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r389;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p356, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p356 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r390, %r18, 8388607;
	or.b32  	%r3497, %r390, 1065353216;
	mov.b32 	%f709, %r3497;
	add.s32 	%r391, %r18, -1073741824;
	and.b32  	%r3498, %r391, -8388608;
	setp.eq.s32 	%p74, %r3498, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2391.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2391
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3498, 192937984;
	add.s32 	%r393, %r3497, %r392;
	mov.b32 	%f303, %r393;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3498, %r3498, %r392;
	mov.b32 	%r3497, %f709;
	setp.ne.s32 	%p75, %r3498, 0;
	setp.ne.s32 	%p76, %r3497, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2393
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2370
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2374
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2377
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2396
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r394, %f18;
	and.b32  	%r25, %r394, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r395, %f710;
	or.b32  	%r396, %r25, %r395;
	mov.b32 	%f710, %r396;
$L__BB0_41:                             // %__nv_fmodf.exit2397
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r411, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r411;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p357, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p357 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r412, %r30, 8388607;
	or.b32  	%r3499, %r412, 1065353216;
	mov.b32 	%f713, %r3499;
	add.s32 	%r413, %r30, -1073741824;
	and.b32  	%r3500, %r413, -8388608;
	setp.eq.s32 	%p94, %r3500, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2422.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2422
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r3500, 192937984;
	add.s32 	%r415, %r3499, %r414;
	mov.b32 	%f357, %r415;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3500, %r3500, %r414;
	mov.b32 	%r3499, %f713;
	setp.ne.s32 	%p95, %r3500, 0;
	setp.ne.s32 	%p96, %r3499, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2424
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2401
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2405
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2408
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2427
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r416, %f35;
	and.b32  	%r37, %r416, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r417, %f714;
	or.b32  	%r418, %r37, %r417;
	mov.b32 	%f714, %r418;
$L__BB0_55:                             // %__nv_fmodf.exit2428
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r419, %f367;
	and.b32  	%r420, %r419, -2147483648;
	or.b32  	%r421, %r420, 1056964608;
	mov.b32 	%f368, %r421;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r422, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r423, %r422, 1;
	setp.eq.b32 	%p102, %r423, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r424, %r422, 2;
	setp.eq.s32 	%p103, %r424, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r425, %r422, 1;
	and.b32  	%r426, %r425, 2;
	setp.eq.s32 	%p104, %r426, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r427, %r28, %r147;
	and.b32  	%r428, %r427, 3;
	cvt.rn.f32.s32 	%f397, %r428;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p358, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p358 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r429, %r39, 8388607;
	or.b32  	%r3501, %r429, 1065353216;
	mov.b32 	%f717, %r3501;
	add.s32 	%r430, %r39, -1073741824;
	and.b32  	%r3502, %r430, -8388608;
	setp.eq.s32 	%p114, %r3502, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2453.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2453
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r431, %r3502, 192937984;
	add.s32 	%r432, %r3501, %r431;
	mov.b32 	%f409, %r432;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3502, %r3502, %r431;
	mov.b32 	%r3501, %f717;
	setp.ne.s32 	%p115, %r3502, 0;
	setp.ne.s32 	%p116, %r3501, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2455
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2432
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2436
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2439
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2458
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r433, %f54;
	and.b32  	%r46, %r433, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r434, %f718;
	or.b32  	%r435, %r46, %r434;
	mov.b32 	%f718, %r435;
$L__BB0_69:                             // %__nv_fmodf.exit2459
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r436, %f419;
	and.b32  	%r437, %r436, -2147483648;
	or.b32  	%r438, %r437, 1056964608;
	mov.b32 	%f420, %r438;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r439, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r440, %r439, 1;
	setp.eq.b32 	%p122, %r440, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r441, %r439, 2;
	setp.eq.s32 	%p123, %r441, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r442, %r439, 1;
	and.b32  	%r443, %r442, 2;
	setp.eq.s32 	%p124, %r443, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_195;
// %bb.72:
	@%p354 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_73;
$L__BB0_191:
	mov.b32 	%r162, %f750;
	and.b32  	%r450, %r162, 8388607;
	or.b32  	%r3531, %r450, 1065353216;
	mov.b32 	%f749, %r3531;
	add.s32 	%r451, %r162, -1073741824;
	and.b32  	%r3532, %r451, -8388608;
	setp.eq.s32 	%p135, %r3532, 0;
	@%p135 bra 	$L__BB0_194;
// %bb.192:                             // %__nv_fmaf_rn.exit4.i.i.i2484.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_193:                            // %__nv_fmaf_rn.exit4.i.i.i2484
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r3532, 192937984;
	add.s32 	%r453, %r3531, %r452;
	mov.b32 	%f459, %r453;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3532, %r3532, %r452;
	mov.b32 	%r3531, %f749;
	setp.ne.s32 	%p136, %r3532, 0;
	setp.ne.s32 	%p137, %r3531, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_193;
$L__BB0_194:                            // %__internal_fmodf_slowpath_mod.exit.i.i2486
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_195;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2463
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_190;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_188;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_190;
$L__BB0_188:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_190;
// %bb.189:                             // %__nv_fmaf_rn.exit.i.i.i2467
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_190:                            // %__internal_fmodf_fastpath_quot.exit.i.i2470
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_195:                            // %__internal_fmodf_kernel.exit.i2489
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_197;
// %bb.196:
	mov.b32 	%r454, %f750;
	or.b32  	%r455, %r156, %r454;
	mov.b32 	%f750, %r455;
$L__BB0_197:                            // %__nv_fmodf.exit2490
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p355 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r470, %r51, 8388607;
	or.b32  	%r3503, %r470, 1065353216;
	mov.b32 	%f725, %r3503;
	add.s32 	%r471, %r51, -1073741824;
	and.b32  	%r3504, %r471, -8388608;
	setp.eq.s32 	%p155, %r3504, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2515.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2515
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r472, %r3504, 192937984;
	add.s32 	%r473, %r3503, %r472;
	mov.b32 	%f511, %r473;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3504, %r3504, %r472;
	mov.b32 	%r3503, %f725;
	setp.ne.s32 	%p156, %r3504, 0;
	setp.ne.s32 	%p157, %r3503, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2517
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2494
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2498
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2501
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2520
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r474, %f726;
	or.b32  	%r475, %r16, %r474;
	mov.b32 	%f726, %r475;
$L__BB0_89:                             // %__nv_fmodf.exit2521
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p356 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r484, %r59, 8388607;
	or.b32  	%r3505, %r484, 1065353216;
	mov.b32 	%f729, %r3505;
	add.s32 	%r485, %r59, -1073741824;
	and.b32  	%r3506, %r485, -8388608;
	setp.eq.s32 	%p175, %r3506, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2546.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2546
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r486, %r3506, 192937984;
	add.s32 	%r487, %r3505, %r486;
	mov.b32 	%f561, %r487;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3506, %r3506, %r486;
	mov.b32 	%r3505, %f729;
	setp.ne.s32 	%p176, %r3506, 0;
	setp.ne.s32 	%p177, %r3505, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2548
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2525
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2529
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2532
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2551
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r488, %f730;
	or.b32  	%r489, %r25, %r488;
	mov.b32 	%f730, %r489;
$L__BB0_103:                            // %__nv_fmodf.exit2552
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p357 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r504, %r69, 8388607;
	or.b32  	%r3507, %r504, 1065353216;
	mov.b32 	%f733, %r3507;
	add.s32 	%r505, %r69, -1073741824;
	and.b32  	%r3508, %r505, -8388608;
	setp.eq.s32 	%p195, %r3508, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2577.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2577
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r506, %r3508, 192937984;
	add.s32 	%r507, %r3507, %r506;
	mov.b32 	%f613, %r507;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3508, %r3508, %r506;
	mov.b32 	%r3507, %f733;
	setp.ne.s32 	%p196, %r3508, 0;
	setp.ne.s32 	%p197, %r3507, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2579
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2556
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2560
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2563
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2582
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r508, %f734;
	or.b32  	%r509, %r37, %r508;
	mov.b32 	%f734, %r509;
$L__BB0_117:                            // %__nv_fmodf.exit2583
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r510, %f623;
	and.b32  	%r511, %r510, -2147483648;
	or.b32  	%r512, %r511, 1056964608;
	mov.b32 	%f624, %r512;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r513, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r514, %r513, 1;
	setp.eq.b32 	%p204, %r514, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r515, %r513, 2;
	setp.eq.s32 	%p205, %r515, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r516, %r513, 1;
	and.b32  	%r517, %r516, 2;
	setp.eq.s32 	%p206, %r517, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p358 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r518, %r77, 8388607;
	or.b32  	%r3509, %r518, 1065353216;
	mov.b32 	%f737, %r3509;
	add.s32 	%r519, %r77, -1073741824;
	and.b32  	%r3510, %r519, -8388608;
	setp.eq.s32 	%p215, %r3510, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2608.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2608
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r520, %r3510, 192937984;
	add.s32 	%r521, %r3509, %r520;
	mov.b32 	%f663, %r521;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3510, %r3510, %r520;
	mov.b32 	%r3509, %f737;
	setp.ne.s32 	%p216, %r3510, 0;
	setp.ne.s32 	%p217, %r3509, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2610
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2587
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2591
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2594
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2613
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r522, %f738;
	or.b32  	%r523, %r46, %r522;
	mov.b32 	%f738, %r523;
$L__BB0_131:                            // %__nv_fmodf.exit2614
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r524, %f673;
	and.b32  	%r525, %r524, -2147483648;
	or.b32  	%r526, %r525, 1056964608;
	mov.b32 	%f674, %r526;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r527, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r528, %r527, 1;
	setp.eq.b32 	%p224, %r528, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r529, %r527, 2;
	setp.eq.s32 	%p225, %r529, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r530, %r527, 1;
	and.b32  	%r531, %r530, 2;
	setp.eq.s32 	%p226, %r531, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_199;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r539, %r1, 4;
	and.b32  	%r540, %r539, 240;
	or.b32  	%r541, %r540, %r4;
	mul.wide.u32 	%rd76, %r541, 4;
	add.s64 	%rd77, %rd1, %rd76;
	ld.global.u32 	%r542, [%rd77];
	shl.b32 	%r543, %r542, 16;
	cvt.s32.s16 	%r86, %r542;
	shr.s32 	%r87, %r542, 16;
	or.b32  	%r544, %r543, 65535;
	setp.lt.u32 	%p230, %r544, 1114111;
	setp.lt.u32 	%p231, %r542, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_135;
$L__BB0_198:                            // %L1247
	mul.lo.s32 	%r548, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r548;
$L__BB0_199:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r365, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r366, %r365, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r462, %f469;
	or.b32  	%r367, %r366, 1056964608;
	mov.b32 	%r381, %f261;
	mov.b32 	%r403, %f313;
	and.b32  	%r463, %r462, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r367;
	and.b32  	%r382, %r381, -2147483648;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r464, %r463, 1056964608;
	mov.b32 	%r476, %f521;
	mov.b32 	%r496, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r383, %r382, 1056964608;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f470, %r464;
	and.b32  	%r477, %r476, -2147483648;
	and.b32  	%r497, %r496, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r383;
	mov.b32 	%f314, %r405;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r478, %r477, 1056964608;
	or.b32  	%r498, %r497, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r478;
	mov.b32 	%f572, %r498;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r368, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r369, %r368, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r465, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r369, 1;
	cvt.rzi.s32.f32 	%r384, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r406, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r466, %r465, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r370, %r368, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r385, %r384, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r407, %r406, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r466, 1;
	cvt.rzi.s32.f32 	%r479, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r499, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r370, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r371, %r368, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r385, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r407, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r467, %r465, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r480, %r479, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r500, %r499, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r372, %r371, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r386, %r384, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p145, %r467, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r468, %r465, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r480, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r500, 1;
	setp.eq.s32 	%p44, %r372, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r386, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r387, %r384, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r408, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r409, %r406, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r469, %r468, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r481, %r479, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r501, %r499, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r388, %r387, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r410, %r409, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r469, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r481, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r482, %r479, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r501, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r502, %r499, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r388, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r410, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r483, %r482, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r503, %r502, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r361, %f238;
	mov.b32 	%r364, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r483, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r503, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r360, %r364, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r458, %f500;
	mov.b32 	%r461, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r361, %r360;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r361;
	// end inline asm
	mov.b32 	%r399, %f344;
	mov.b32 	%r398, %f17;
	mov.b32 	%r402, %f341;
	mov.b32 	%r401, %f16;
	mov.b32 	%r445, %f75;
	mov.b32 	%r446, %f77;
	mov.b32 	%r448, %f76;
	mov.b32 	%r449, %f78;
	xor.b32  	%r457, %r461, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r445;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r447, %r449, %r448;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r456, %r458, %r457;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r458;
	// end inline asm
	mov.b32 	%r492, %f602;
	mov.b32 	%r491, %f95;
	mov.b32 	%r495, %f599;
	mov.b32 	%r494, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r490, %r492, %r491;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r493, %r495, %r494;
	// end inline asm
	mov.b32 	%r533, %f147;
	mov.b32 	%r534, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r532, %r534, %r533;
	// end inline asm
	mov.b32 	%r536, %f148;
	mov.b32 	%r537, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r535, %r537, %r536;
	// end inline asm
	shl.b32 	%r550, %r1, 6;
	and.b32  	%r551, %r550, 192;
	shr.u32 	%r552, %r1, 3;
	bfe.u32 	%r553, %r1, 3, 1;
	shl.b32 	%r554, %r4, 1;
	and.b32  	%r555, %r554, 14;
	or.b32  	%r556, %r553, %r555;
	and.b32  	%r557, %r552, 2;
	and.b32  	%r558, %r147, 1;
	or.b32  	%r559, %r557, %r558;
	shl.b32 	%r560, %r559, 4;
	or.b32  	%r561, %r551, %r3;
	or.b32  	%r562, %r561, %r556;
	or.b32  	%r563, %r562, %r560;
	mul.wide.u32 	%rd83, %r563, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r172, [%rd84];
	ld.global.u32 	%r173, [%rd84+1024];
	shl.b32 	%r564, %r330, 14;
	shl.b32 	%r565, %r334, 7;
	add.s32 	%r174, %r565, %r564;
	shl.b32 	%r566, %r1, 2;
	shl.b32 	%r567, %r2, 7;
	or.b32  	%r175, %r566, %r567;
	and.b32  	%r176, %r1, 16;
	shr.u32 	%r568, %r1, 4;
	and.b32  	%r569, %r159, 30;
	or.b32  	%r570, %r569, %r568;
	mul.lo.s32 	%r571, %r570, 257;
	shr.u32 	%r572, %r4, 3;
	and.b32  	%r573, %r5, 224;
	mad.lo.s32 	%r574, %r572, 257, %r573;
	or.b32  	%r575, %r572, 2;
	mad.lo.s32 	%r576, %r575, 257, %r573;
	or.b32  	%r577, %r572, 4;
	mad.lo.s32 	%r578, %r577, 257, %r573;
	or.b32  	%r579, %r572, 6;
	mad.lo.s32 	%r580, %r579, 257, %r573;
	or.b32  	%r581, %r572, 8;
	mad.lo.s32 	%r582, %r581, 257, %r573;
	or.b32  	%r583, %r572, 10;
	mad.lo.s32 	%r584, %r583, 257, %r573;
	or.b32  	%r585, %r572, 12;
	mad.lo.s32 	%r586, %r585, 257, %r573;
	or.b32  	%r587, %r572, 14;
	mad.lo.s32 	%r588, %r587, 257, %r573;
	or.b32  	%r589, %r572, 16;
	mad.lo.s32 	%r590, %r589, 257, %r573;
	or.b32  	%r591, %r572, 18;
	mad.lo.s32 	%r592, %r591, 257, %r573;
	or.b32  	%r593, %r572, 20;
	mad.lo.s32 	%r594, %r593, 257, %r573;
	or.b32  	%r595, %r572, 22;
	mad.lo.s32 	%r596, %r595, 257, %r573;
	or.b32  	%r597, %r572, 24;
	mad.lo.s32 	%r598, %r597, 257, %r573;
	or.b32  	%r599, %r572, 26;
	mad.lo.s32 	%r600, %r599, 257, %r573;
	or.b32  	%r601, %r572, 28;
	mad.lo.s32 	%r602, %r601, 257, %r573;
	or.b32  	%r603, %r572, 30;
	mad.lo.s32 	%r604, %r603, 257, %r573;
	mul.lo.s32 	%r605, %r146, 2184;
	mad.lo.s32 	%r606, %r556, 33, %r605;
	mad.lo.s32 	%r607, %r559, 546, %r606;
	setp.lt.u32 	%p234, %r1, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	selp.b32 	%r608, 0, 1032, %p127;
	or.b32  	%r609, %r555, %r568;
	and.b32  	%r610, %r1, 1;
	neg.s32 	%r611, %r610;
	setp.eq.b32 	%p237, %r610, 1;
	and.b32  	%r612, %r611, 2064;
	bfe.s32 	%r613, %r1, 3, 1;
	and.b32  	%r614, %r1, 8;
	setp.eq.s32 	%p238, %r614, 0;
	and.b32  	%r615, %r613, 258;
	bfe.s32 	%r616, %r1, 2, 1;
	and.b32  	%r617, %r1, 4;
	setp.eq.s32 	%p239, %r617, 0;
	and.b32  	%r618, %r616, 516;
	add.s32 	%r619, %r609, %r608;
	add.s32 	%r620, %r619, %r612;
	add.s32 	%r621, %r620, %r615;
	add.s32 	%r622, %r621, %r618;
	bfe.s32 	%r623, %r4, 1, 1;
	and.b32  	%r624, %r623, 1032;
	and.b32  	%r625, %r613, 4144;
	and.b32  	%r626, %r4, 1;
	neg.s32 	%r627, %r626;
	setp.eq.b32 	%p240, %r626, 1;
	and.b32  	%r628, %r627, 2064;
	and.b32  	%r629, %r566, 12;
	mul.lo.s32 	%r630, %r572, 258;
	bfe.s32 	%r631, %r4, 2, 1;
	and.b32  	%r632, %r4, 4;
	setp.eq.s32 	%p241, %r632, 0;
	and.b32  	%r633, %r631, 516;
	or.b32  	%r634, %r624, %r559;
	add.s32 	%r635, %r630, %r629;
	add.s32 	%r636, %r635, %r625;
	add.s32 	%r637, %r636, %r628;
	add.s32 	%r638, %r637, %r633;
	add.s32 	%r639, %r638, %r634;
	mul.wide.u32 	%rd85, %r639, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd7, %rd86, %rd85;
	cvt.u64.u32 	%rd87, %r634;
	selp.b64 	%rd88, 0, 516, %p241;
	selp.b64 	%rd89, 2064, 0, %p240;
	selp.b64 	%rd90, 0, 4144, %p238;
	cvt.u64.u32 	%rd91, %r630;
	cvt.u64.u32 	%rd92, %r629;
	add.s64 	%rd93, %rd92, %rd91;
	add.s64 	%rd94, %rd93, %rd90;
	add.s64 	%rd95, %rd94, %rd89;
	add.s64 	%rd96, %rd95, %rd88;
	add.s64 	%rd97, %rd96, %rd87;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd8, %rd86, %rd98;
	shl.b32 	%r640, %r332, 20;
	shl.b32 	%r641, %r336, 9;
	add.s32 	%r642, %r641, %r640;
	or.b32  	%r643, %r176, %r5;
	and.b32  	%r644, %r1, 15;
	or.b32  	%r645, %r643, %r644;
	or.b32  	%r177, %r645, %r3;
	cvt.s64.s32 	%rd9, %r642;
	add.s32 	%r646, %r635, %r559;
	add.s32 	%r647, %r646, %r624;
	add.s32 	%r648, %r647, %r625;
	add.s32 	%r649, %r648, %r628;
	add.s32 	%r650, %r649, %r633;
	add.s32 	%r651, %r4, %r571;
	mul.wide.u32 	%rd99, %r651, 4;
	add.s64 	%rd10, %rd86, %rd99;
	cvt.u64.u32 	%rd100, %r4;
	cvt.u64.u32 	%rd11, %r571;
	add.s64 	%rd101, %rd11, %rd100;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd12, %rd86, %rd102;
	add.s32 	%r652, %r574, %r1;
	mul.wide.u32 	%rd103, %r652, 4;
	add.s64 	%rd13, %rd86, %rd103;
	add.s32 	%r653, %r576, %r1;
	mul.wide.u32 	%rd104, %r653, 4;
	add.s64 	%rd14, %rd86, %rd104;
	add.s32 	%r654, %r578, %r1;
	mul.wide.u32 	%rd105, %r654, 4;
	add.s64 	%rd15, %rd86, %rd105;
	add.s32 	%r655, %r580, %r1;
	mul.wide.u32 	%rd106, %r655, 4;
	add.s64 	%rd16, %rd86, %rd106;
	add.s32 	%r656, %r582, %r1;
	mul.wide.u32 	%rd107, %r656, 4;
	add.s64 	%rd17, %rd86, %rd107;
	add.s32 	%r657, %r584, %r1;
	mul.wide.u32 	%rd108, %r657, 4;
	add.s64 	%rd18, %rd86, %rd108;
	add.s32 	%r658, %r586, %r1;
	mul.wide.u32 	%rd109, %r658, 4;
	add.s64 	%rd19, %rd86, %rd109;
	add.s32 	%r659, %r588, %r1;
	mul.wide.u32 	%rd110, %r659, 4;
	add.s64 	%rd20, %rd86, %rd110;
	add.s32 	%r660, %r590, %r1;
	mul.wide.u32 	%rd111, %r660, 4;
	add.s64 	%rd21, %rd86, %rd111;
	add.s32 	%r661, %r592, %r1;
	mul.wide.u32 	%rd112, %r661, 4;
	add.s64 	%rd22, %rd86, %rd112;
	add.s32 	%r662, %r594, %r1;
	mul.wide.u32 	%rd113, %r662, 4;
	add.s64 	%rd23, %rd86, %rd113;
	add.s32 	%r663, %r596, %r1;
	mul.wide.u32 	%rd114, %r663, 4;
	add.s64 	%rd24, %rd86, %rd114;
	add.s32 	%r664, %r598, %r1;
	mul.wide.u32 	%rd115, %r664, 4;
	add.s64 	%rd25, %rd86, %rd115;
	add.s32 	%r665, %r600, %r1;
	mul.wide.u32 	%rd116, %r665, 4;
	add.s64 	%rd26, %rd86, %rd116;
	add.s32 	%r666, %r602, %r1;
	mul.wide.u32 	%rd117, %r666, 4;
	add.s64 	%rd27, %rd86, %rd117;
	add.s32 	%r667, %r604, %r1;
	mul.wide.u32 	%rd118, %r667, 4;
	add.s64 	%rd28, %rd86, %rd118;
	add.s32 	%r668, %r607, %r572;
	mul.wide.u32 	%rd119, %r668, 4;
	add.s64 	%rd29, %rd86, %rd119;
	add.s32 	%r669, %r607, %r575;
	mul.wide.u32 	%rd120, %r669, 4;
	add.s64 	%rd30, %rd86, %rd120;
	add.s32 	%r670, %r607, %r577;
	mul.wide.u32 	%rd121, %r670, 4;
	add.s64 	%rd31, %rd86, %rd121;
	add.s32 	%r671, %r607, %r579;
	mul.wide.u32 	%rd122, %r671, 4;
	add.s64 	%rd32, %rd86, %rd122;
	add.s32 	%r672, %r607, %r581;
	mul.wide.u32 	%rd123, %r672, 4;
	add.s64 	%rd33, %rd86, %rd123;
	add.s32 	%r673, %r607, %r583;
	mul.wide.u32 	%rd124, %r673, 4;
	add.s64 	%rd34, %rd86, %rd124;
	add.s32 	%r674, %r607, %r585;
	mul.wide.u32 	%rd125, %r674, 4;
	add.s64 	%rd35, %rd86, %rd125;
	add.s32 	%r675, %r607, %r587;
	mul.wide.u32 	%rd126, %r675, 4;
	add.s64 	%rd36, %rd86, %rd126;
	add.s32 	%r676, %r607, %r589;
	mul.wide.u32 	%rd127, %r676, 4;
	add.s64 	%rd37, %rd86, %rd127;
	add.s32 	%r677, %r607, %r591;
	mul.wide.u32 	%rd128, %r677, 4;
	add.s64 	%rd38, %rd86, %rd128;
	add.s32 	%r678, %r607, %r593;
	mul.wide.u32 	%rd129, %r678, 4;
	add.s64 	%rd39, %rd86, %rd129;
	add.s32 	%r679, %r607, %r595;
	mul.wide.u32 	%rd130, %r679, 4;
	add.s64 	%rd40, %rd86, %rd130;
	add.s32 	%r680, %r607, %r597;
	mul.wide.u32 	%rd131, %r680, 4;
	add.s64 	%rd41, %rd86, %rd131;
	add.s32 	%r681, %r607, %r599;
	mul.wide.u32 	%rd132, %r681, 4;
	add.s64 	%rd42, %rd86, %rd132;
	add.s32 	%r682, %r607, %r601;
	mul.wide.u32 	%rd133, %r682, 4;
	add.s64 	%rd43, %rd86, %rd133;
	add.s32 	%r683, %r607, %r603;
	mul.wide.u32 	%rd134, %r683, 4;
	add.s64 	%rd44, %rd86, %rd134;
	add.s32 	%r684, %r147, -1;
	setp.lt.u32 	%p242, %r684, 3;
	or.pred  	%p243, %p234, %p242;
	or.pred  	%p244, %p243, %p235;
	and.b32  	%r685, %r1, 24;
	setp.eq.s32 	%p245, %r685, 24;
	or.pred  	%p246, %p236, %p245;
	selp.b32 	%r178, 1145324612, -286331154, %p243;
	or.pred  	%p1, %p244, %p246;
	shl.b32 	%r686, %r572, 5;
	add.s32 	%r687, %r622, %r686;
	mul.wide.u32 	%rd135, %r687, 4;
	add.s64 	%rd45, %rd86, %rd135;
	cvt.u64.u32 	%rd136, %r686;
	selp.b64 	%rd137, 0, 516, %p239;
	selp.b64 	%rd138, 0, 258, %p238;
	selp.b64 	%rd139, 2064, 0, %p237;
	cvt.u64.u32 	%rd140, %r609;
	selp.b64 	%rd141, 0, 1032, %p127;
	add.s64 	%rd142, %rd141, %rd140;
	add.s64 	%rd143, %rd142, %rd139;
	add.s64 	%rd144, %rd143, %rd138;
	add.s64 	%rd145, %rd144, %rd137;
	add.s64 	%rd146, %rd145, %rd136;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd46, %rd86, %rd147;
	or.b32  	%r688, %r686, 64;
	add.s32 	%r689, %r622, %r688;
	mul.wide.u32 	%rd148, %r689, 4;
	add.s64 	%rd47, %rd86, %rd148;
	cvt.u64.u32 	%rd149, %r688;
	add.s64 	%rd150, %rd145, %rd149;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd48, %rd86, %rd151;
	or.b32  	%r690, %r686, 128;
	add.s32 	%r691, %r622, %r690;
	mul.wide.u32 	%rd152, %r691, 4;
	add.s64 	%rd49, %rd86, %rd152;
	cvt.u64.u32 	%rd153, %r690;
	add.s64 	%rd154, %rd145, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd50, %rd86, %rd155;
	or.b32  	%r692, %r686, 192;
	add.s32 	%r693, %r622, %r692;
	mul.wide.u32 	%rd156, %r693, 4;
	add.s64 	%rd51, %rd86, %rd156;
	cvt.u64.u32 	%rd157, %r692;
	add.s64 	%rd158, %rd145, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd52, %rd86, %rd159;
	add.s32 	%r694, %r650, 32;
	mul.wide.u32 	%rd160, %r694, 4;
	add.s64 	%rd53, %rd86, %rd160;
	add.s32 	%r695, %r650, 48;
	mul.wide.u32 	%rd161, %r695, 4;
	add.s64 	%rd54, %rd86, %rd161;
	add.s32 	%r696, %r650, 64;
	mul.wide.u32 	%rd162, %r696, 4;
	add.s64 	%rd55, %rd86, %rd162;
	add.s32 	%r697, %r650, 80;
	mul.wide.u32 	%rd163, %r697, 4;
	add.s64 	%rd56, %rd86, %rd163;
	add.s32 	%r698, %r650, 96;
	mul.wide.u32 	%rd164, %r698, 4;
	add.s64 	%rd57, %rd86, %rd164;
	add.s32 	%r699, %r650, 112;
	mul.wide.u32 	%rd165, %r699, 4;
	add.s64 	%rd58, %rd86, %rd165;
	add.s32 	%r700, %r650, 128;
	mul.wide.u32 	%rd166, %r700, 4;
	add.s64 	%rd59, %rd86, %rd166;
	add.s32 	%r701, %r650, 144;
	mul.wide.u32 	%rd167, %r701, 4;
	add.s64 	%rd60, %rd86, %rd167;
	add.s32 	%r702, %r650, 160;
	mul.wide.u32 	%rd168, %r702, 4;
	add.s64 	%rd61, %rd86, %rd168;
	add.s32 	%r703, %r650, 176;
	mul.wide.u32 	%rd169, %r703, 4;
	add.s64 	%rd62, %rd86, %rd169;
	add.s32 	%r704, %r650, 192;
	mul.wide.u32 	%rd170, %r704, 4;
	add.s64 	%rd63, %rd86, %rd170;
	add.s32 	%r705, %r650, 208;
	mul.wide.u32 	%rd171, %r705, 4;
	add.s64 	%rd64, %rd86, %rd171;
	add.s32 	%r706, %r650, 224;
	mul.wide.u32 	%rd172, %r706, 4;
	add.s64 	%rd65, %rd86, %rd172;
	add.s32 	%r707, %r650, 240;
	mul.wide.u32 	%rd173, %r707, 4;
	add.s64 	%rd66, %rd86, %rd173;
	mov.u32 	%r89, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3523, %r89;
	mov.u32 	%r3524, %r89;
	mov.u32 	%r3525, %r89;
	bra.uni 	$L__BB0_200;
$L__BB0_171:                            // %L49521
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p353, %r89, 448;
	mov.u32 	%r89, %r145;
	@%p353 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_172;
$L__BB0_200:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_218 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r708, %r89, %r330;
	setp.lt.s32 	%p247, %r708, %r331;
	@%p247 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_172;
$L__BB0_201:                            // %pass780
                                        //   in Loop: Header=BB0_200 Depth=1
	cvt.u32.u64 	%r901, %rd11;
	setp.eq.s32 	%p248, %r176, 0;
	or.b32  	%r902, %r89, %r4;
	shl.b32 	%r903, %r902, 14;
	and.b32  	%r904, %r903, 7585792;
	or.b32  	%r905, %r904, %r175;
	add.s32 	%r906, %r174, %r905;
	shr.s32 	%r907, %r906, 31;
	shr.u32 	%r908, %r907, 9;
	add.s32 	%r909, %r906, %r908;
	shr.s32 	%r910, %r909, 23;
	setp.lt.s32 	%p249, %r906, 0;
	and.b32  	%r911, %r909, -8388608;
	setp.ne.s32 	%p250, %r911, %r906;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r912, 1, 0, %p251;
	sub.s32 	%r913, %r912, %r910;
	shl.b32 	%r914, %r913, 23;
	add.s32 	%r915, %r914, %r906;
	mul.wide.s32 	%rd174, %r915, 4;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r916, %r917, %r918, %r919}, [%rd175];
	or.b32  	%r920, %r902, 16;
	shl.b32 	%r921, %r920, 14;
	and.b32  	%r922, %r921, 7847936;
	or.b32  	%r923, %r922, %r175;
	add.s32 	%r924, %r174, %r923;
	shr.s32 	%r925, %r924, 31;
	shr.u32 	%r926, %r925, 9;
	add.s32 	%r927, %r924, %r926;
	shr.s32 	%r928, %r927, 23;
	setp.lt.s32 	%p252, %r924, 0;
	and.b32  	%r929, %r927, -8388608;
	setp.ne.s32 	%p253, %r929, %r924;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r930, 1, 0, %p254;
	sub.s32 	%r931, %r930, %r928;
	shl.b32 	%r932, %r931, 23;
	add.s32 	%r933, %r932, %r924;
	mul.wide.s32 	%rd176, %r933, 4;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r934, %r935, %r936, %r937}, [%rd177];
	and.b32  	%r938, %r89, 448;
	or.b32  	%r939, %r4, %r938;
	shl.b32 	%r940, %r939, 14;
	or.b32  	%r941, %r940, %r175;
	or.b32  	%r942, %r941, 524288;
	add.s32 	%r943, %r174, %r942;
	shr.s32 	%r944, %r943, 31;
	shr.u32 	%r945, %r944, 9;
	add.s32 	%r946, %r943, %r945;
	shr.s32 	%r947, %r946, 23;
	setp.lt.s32 	%p255, %r943, 0;
	and.b32  	%r948, %r946, -8388608;
	setp.ne.s32 	%p256, %r948, %r943;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r949, 1, 0, %p257;
	sub.s32 	%r950, %r949, %r947;
	shl.b32 	%r951, %r950, 23;
	add.s32 	%r952, %r951, %r943;
	mul.wide.s32 	%rd178, %r952, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r953, %r954, %r955, %r956}, [%rd179];
	or.b32  	%r957, %r941, 786432;
	add.s32 	%r958, %r174, %r957;
	shr.s32 	%r959, %r958, 31;
	shr.u32 	%r960, %r959, 9;
	add.s32 	%r961, %r958, %r960;
	shr.s32 	%r962, %r961, 23;
	setp.lt.s32 	%p258, %r958, 0;
	and.b32  	%r963, %r961, -8388608;
	setp.ne.s32 	%p259, %r963, %r958;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r964, 1, 0, %p260;
	sub.s32 	%r965, %r964, %r962;
	shl.b32 	%r966, %r965, 23;
	add.s32 	%r967, %r966, %r958;
	mul.wide.s32 	%rd180, %r967, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r968, %r969, %r970, %r971}, [%rd181];
	selp.b32 	%r972, %r918, %r916, %p248;
	shfl.sync.bfly.b32	%r973, %r972, 16, 31, -1;
	selp.b32 	%r711, %r916, %r973, %p248;
	selp.b32 	%r716, %r973, %r918, %p248;
	selp.b32 	%r974, %r919, %r917, %p248;
	shfl.sync.bfly.b32	%r975, %r974, 16, 31, -1;
	selp.b32 	%r719, %r917, %r975, %p248;
	selp.b32 	%r724, %r975, %r919, %p248;
	selp.b32 	%r976, %r936, %r934, %p248;
	shfl.sync.bfly.b32	%r977, %r976, 16, 31, -1;
	selp.b32 	%r727, %r934, %r977, %p248;
	selp.b32 	%r732, %r977, %r936, %p248;
	selp.b32 	%r978, %r937, %r935, %p248;
	shfl.sync.bfly.b32	%r979, %r978, 16, 31, -1;
	selp.b32 	%r735, %r935, %r979, %p248;
	selp.b32 	%r740, %r979, %r937, %p248;
	selp.b32 	%r980, %r955, %r953, %p248;
	shfl.sync.bfly.b32	%r981, %r980, 16, 31, -1;
	selp.b32 	%r743, %r953, %r981, %p248;
	selp.b32 	%r748, %r981, %r955, %p248;
	selp.b32 	%r982, %r956, %r954, %p248;
	shfl.sync.bfly.b32	%r983, %r982, 16, 31, -1;
	selp.b32 	%r751, %r954, %r983, %p248;
	selp.b32 	%r756, %r983, %r956, %p248;
	selp.b32 	%r984, %r970, %r968, %p248;
	shfl.sync.bfly.b32	%r985, %r984, 16, 31, -1;
	selp.b32 	%r759, %r968, %r985, %p248;
	selp.b32 	%r764, %r985, %r970, %p248;
	selp.b32 	%r986, %r971, %r969, %p248;
	shfl.sync.bfly.b32	%r987, %r986, 16, 31, -1;
	selp.b32 	%r767, %r969, %r987, %p248;
	selp.b32 	%r772, %r987, %r971, %p248;
	shl.b32 	%r712, %r716, 4;
	mov.u32 	%r710, 252645135;
	// begin inline asm
	lop3.b32 %r774, %r710, %r711, %r712, 202;
	// end inline asm
	shr.u32 	%r715, %r711, 4;
	// begin inline asm
	lop3.b32 %r790, %r710, %r715, %r716, 202;
	// end inline asm
	shl.b32 	%r720, %r724, 4;
	// begin inline asm
	lop3.b32 %r782, %r710, %r719, %r720, 202;
	// end inline asm
	shr.u32 	%r723, %r719, 4;
	// begin inline asm
	lop3.b32 %r798, %r710, %r723, %r724, 202;
	// end inline asm
	shl.b32 	%r728, %r732, 4;
	// begin inline asm
	lop3.b32 %r806, %r710, %r727, %r728, 202;
	// end inline asm
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r822, %r710, %r731, %r732, 202;
	// end inline asm
	shl.b32 	%r736, %r740, 4;
	// begin inline asm
	lop3.b32 %r814, %r710, %r735, %r736, 202;
	// end inline asm
	shr.u32 	%r739, %r735, 4;
	// begin inline asm
	lop3.b32 %r830, %r710, %r739, %r740, 202;
	// end inline asm
	shl.b32 	%r744, %r748, 4;
	// begin inline asm
	lop3.b32 %r775, %r710, %r743, %r744, 202;
	// end inline asm
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r791, %r710, %r747, %r748, 202;
	// end inline asm
	shl.b32 	%r752, %r756, 4;
	// begin inline asm
	lop3.b32 %r783, %r710, %r751, %r752, 202;
	// end inline asm
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r799, %r710, %r755, %r756, 202;
	// end inline asm
	shl.b32 	%r760, %r764, 4;
	// begin inline asm
	lop3.b32 %r807, %r710, %r759, %r760, 202;
	// end inline asm
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r823, %r710, %r763, %r764, 202;
	// end inline asm
	shl.b32 	%r768, %r772, 4;
	// begin inline asm
	lop3.b32 %r815, %r710, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r831, %r710, %r771, %r772, 202;
	// end inline asm
	mov.u32 	%r776, 25152;
	// begin inline asm
	prmt.b32 %r838, %r774, %r775, %r776;
	// end inline asm
	mov.u32 	%r780, 29521;
	// begin inline asm
	prmt.b32 %r870, %r774, %r775, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r846, %r782, %r783, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r782, %r783, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r790, %r791, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r790, %r791, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r847, %r798, %r799, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r798, %r799, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r854, %r806, %r807, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r806, %r807, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r814, %r815, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r814, %r815, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r822, %r823, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r822, %r823, %r780;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r830, %r831, %r776;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r830, %r831, %r780;
	// end inline asm
	mov.u32 	%r896, 21520;
	// begin inline asm
	prmt.b32 %r837, %r838, %r839, %r896;
	// end inline asm
	mov.u32 	%r900, 30258;
	// begin inline asm
	prmt.b32 %r841, %r838, %r839, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r845, %r846, %r847, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r849, %r846, %r847, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r853, %r854, %r855, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r857, %r854, %r855, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r861, %r862, %r863, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r862, %r863, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r869, %r870, %r871, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r870, %r871, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r878, %r879, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r878, %r879, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r886, %r887, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r886, %r887, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r900;
	// end inline asm
	st.shared.u32 	[%rd10], %r837;
	st.shared.u32 	[%rd12+512], %r845;
	st.shared.u32 	[%rd12+256], %r841;
	st.shared.u32 	[%rd12+768], %r849;
	and.b32  	%r988, %r920, 31;
	add.s32 	%r989, %r988, %r901;
	mul.wide.u32 	%rd182, %r989, 4;
	add.s64 	%rd184, %rd86, %rd182;
	st.shared.u32 	[%rd184], %r853;
	cvt.u64.u32 	%rd185, %r988;
	add.s64 	%rd186, %rd11, %rd185;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd86, %rd187;
	st.shared.u32 	[%rd188+512], %r861;
	st.shared.u32 	[%rd188+256], %r857;
	st.shared.u32 	[%rd188+768], %r865;
	st.shared.u32 	[%rd12+128], %r869;
	st.shared.u32 	[%rd12+640], %r877;
	st.shared.u32 	[%rd12+384], %r873;
	st.shared.u32 	[%rd12+896], %r881;
	st.shared.u32 	[%rd188+128], %r885;
	st.shared.u32 	[%rd188+640], %r893;
	st.shared.u32 	[%rd188+384], %r889;
	st.shared.u32 	[%rd188+896], %r897;
	bar.sync 	0;
	ld.shared.u32 	%r179, [%rd13];
	ld.shared.u32 	%r180, [%rd14];
	ld.shared.u32 	%r181, [%rd15];
	ld.shared.u32 	%r182, [%rd16];
	ld.shared.u32 	%r183, [%rd17];
	ld.shared.u32 	%r184, [%rd18];
	ld.shared.u32 	%r185, [%rd19];
	ld.shared.u32 	%r186, [%rd20];
	ld.shared.u32 	%r187, [%rd21];
	ld.shared.u32 	%r188, [%rd22];
	ld.shared.u32 	%r189, [%rd23];
	ld.shared.u32 	%r190, [%rd24];
	ld.shared.u32 	%r191, [%rd25];
	ld.shared.u32 	%r192, [%rd26];
	ld.shared.u32 	%r193, [%rd27];
	ld.shared.u32 	%r194, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r195, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r196, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r197, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r198, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 15, 31, -1;
	setp.eq.s32 	%p261, %r195, 999999999;
	@%p261 bra 	$L__BB0_136;
// %bb.202:                             // %pass3083
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r990, %r195, %r1;
	mul.wide.s32 	%rd189, %r990, 4;
	add.s64 	%rd191, %rd86, %rd189;
	st.shared.u32 	[%rd191], %r179;
	setp.eq.s32 	%p262, %r196, 999999999;
	@%p262 bra 	$L__BB0_137;
// %bb.203:                             // %pass3151
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r991, %r196, %r1;
	mul.wide.s32 	%rd192, %r991, 4;
	add.s64 	%rd194, %rd86, %rd192;
	st.shared.u32 	[%rd194], %r180;
	setp.eq.s32 	%p263, %r197, 999999999;
	@%p263 bra 	$L__BB0_138;
// %bb.204:                             // %pass3219
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r992, %r197, %r1;
	mul.wide.s32 	%rd195, %r992, 4;
	add.s64 	%rd197, %rd86, %rd195;
	st.shared.u32 	[%rd197], %r181;
	setp.eq.s32 	%p264, %r198, 999999999;
	@%p264 bra 	$L__BB0_139;
// %bb.205:                             // %pass3287
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r993, %r198, %r1;
	mul.wide.s32 	%rd198, %r993, 4;
	add.s64 	%rd200, %rd86, %rd198;
	st.shared.u32 	[%rd200], %r182;
	setp.eq.s32 	%p265, %r199, 999999999;
	@%p265 bra 	$L__BB0_140;
// %bb.206:                             // %pass3355
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r994, %r199, %r1;
	mul.wide.s32 	%rd201, %r994, 4;
	add.s64 	%rd203, %rd86, %rd201;
	st.shared.u32 	[%rd203], %r183;
	setp.eq.s32 	%p266, %r200, 999999999;
	@%p266 bra 	$L__BB0_141;
// %bb.207:                             // %pass3423
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r995, %r200, %r1;
	mul.wide.s32 	%rd204, %r995, 4;
	add.s64 	%rd206, %rd86, %rd204;
	st.shared.u32 	[%rd206], %r184;
	setp.eq.s32 	%p267, %r201, 999999999;
	@%p267 bra 	$L__BB0_142;
// %bb.208:                             // %pass3491
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r996, %r201, %r1;
	mul.wide.s32 	%rd207, %r996, 4;
	add.s64 	%rd209, %rd86, %rd207;
	st.shared.u32 	[%rd209], %r185;
	setp.eq.s32 	%p268, %r202, 999999999;
	@%p268 bra 	$L__BB0_143;
// %bb.209:                             // %pass3559
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r997, %r202, %r1;
	mul.wide.s32 	%rd210, %r997, 4;
	add.s64 	%rd212, %rd86, %rd210;
	st.shared.u32 	[%rd212], %r186;
	setp.eq.s32 	%p269, %r203, 999999999;
	@%p269 bra 	$L__BB0_144;
// %bb.210:                             // %pass3627
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r998, %r203, %r1;
	mul.wide.s32 	%rd213, %r998, 4;
	add.s64 	%rd215, %rd86, %rd213;
	st.shared.u32 	[%rd215], %r187;
	setp.eq.s32 	%p270, %r204, 999999999;
	@%p270 bra 	$L__BB0_145;
// %bb.211:                             // %pass3695
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r999, %r204, %r1;
	mul.wide.s32 	%rd216, %r999, 4;
	add.s64 	%rd218, %rd86, %rd216;
	st.shared.u32 	[%rd218], %r188;
	setp.eq.s32 	%p271, %r205, 999999999;
	@%p271 bra 	$L__BB0_146;
// %bb.212:                             // %pass3763
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1000, %r205, %r1;
	mul.wide.s32 	%rd219, %r1000, 4;
	add.s64 	%rd221, %rd86, %rd219;
	st.shared.u32 	[%rd221], %r189;
	setp.eq.s32 	%p272, %r206, 999999999;
	@%p272 bra 	$L__BB0_147;
// %bb.213:                             // %pass3831
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1001, %r206, %r1;
	mul.wide.s32 	%rd222, %r1001, 4;
	add.s64 	%rd224, %rd86, %rd222;
	st.shared.u32 	[%rd224], %r190;
	setp.eq.s32 	%p273, %r207, 999999999;
	@%p273 bra 	$L__BB0_148;
// %bb.214:                             // %pass3899
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1002, %r207, %r1;
	mul.wide.s32 	%rd225, %r1002, 4;
	add.s64 	%rd227, %rd86, %rd225;
	st.shared.u32 	[%rd227], %r191;
	setp.eq.s32 	%p274, %r208, 999999999;
	@%p274 bra 	$L__BB0_149;
// %bb.215:                             // %pass3967
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1003, %r208, %r1;
	mul.wide.s32 	%rd228, %r1003, 4;
	add.s64 	%rd230, %rd86, %rd228;
	st.shared.u32 	[%rd230], %r192;
	setp.eq.s32 	%p275, %r209, 999999999;
	@%p275 bra 	$L__BB0_150;
// %bb.216:                             // %pass4035
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1004, %r209, %r1;
	mul.wide.s32 	%rd231, %r1004, 4;
	add.s64 	%rd233, %rd86, %rd231;
	st.shared.u32 	[%rd233], %r193;
	setp.eq.s32 	%p276, %r210, 999999999;
	@%p276 bra 	$L__BB0_151;
// %bb.217:                             // %pass4103
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r1006, %r210, %r1;
	mul.wide.s32 	%rd234, %r1006, 4;
	add.s64 	%rd236, %rd86, %rd234;
	st.shared.u32 	[%rd236], %r194;
	bar.sync 	0;
	ld.shared.u32 	%r211, [%rd29];
	ld.shared.u32 	%r212, [%rd30];
	ld.shared.u32 	%r213, [%rd31];
	ld.shared.u32 	%r214, [%rd32];
	ld.shared.u32 	%r215, [%rd33];
	ld.shared.u32 	%r216, [%rd34];
	ld.shared.u32 	%r217, [%rd35];
	ld.shared.u32 	%r218, [%rd36];
	ld.shared.u32 	%r219, [%rd37];
	ld.shared.u32 	%r220, [%rd38];
	ld.shared.u32 	%r221, [%rd39];
	ld.shared.u32 	%r222, [%rd40];
	ld.shared.u32 	%r223, [%rd41];
	ld.shared.u32 	%r224, [%rd42];
	ld.shared.u32 	%r225, [%rd43];
	ld.shared.u32 	%r226, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3515, 16;
	bra.uni 	$L__BB0_218;
$L__BB0_152:                            // %L30873
                                        //   in Loop: Header=BB0_218 Depth=2
	bar.sync 	0;
	add.s32 	%r3515, %r3515, -8;
	setp.ne.s32 	%p314, %r3515, -16;
	@%p314 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_153;
$L__BB0_218:                            // %L12262
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3515, 16;
	selp.b32 	%r1399, %r211, 0, %p277;
	setp.eq.s32 	%p278, %r3515, 8;
	selp.b32 	%r1400, %r215, %r1399, %p278;
	setp.eq.s32 	%p279, %r3515, 0;
	selp.b32 	%r1401, %r219, %r1400, %p279;
	setp.eq.s32 	%p280, %r3515, -8;
	selp.b32 	%r1402, %r223, %r1401, %p280;
	selp.b32 	%r1403, %r212, 0, %p277;
	selp.b32 	%r1404, %r216, %r1403, %p278;
	selp.b32 	%r1405, %r220, %r1404, %p279;
	selp.b32 	%r1406, %r224, %r1405, %p280;
	selp.b32 	%r1407, %r213, 0, %p277;
	selp.b32 	%r1408, %r217, %r1407, %p278;
	selp.b32 	%r1409, %r221, %r1408, %p279;
	selp.b32 	%r1410, %r225, %r1409, %p280;
	selp.b32 	%r1411, %r214, 0, %p277;
	selp.b32 	%r1412, %r218, %r1411, %p278;
	selp.b32 	%r1413, %r222, %r1412, %p279;
	selp.b32 	%r1414, %r226, %r1413, %p280;
	// begin inline asm
	mov.b32 %r1012, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1011, %r1402, -2004318072;
	mov.u32 	%r1148, 983055;
	// begin inline asm
	lop3.b32 %r1009, %r1148, %r1011, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r1012, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	mov.u32 	%r1159, 15728880;
	// begin inline asm
	lop3.b32 %r1020, %r1159, %r1011, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1057, %r1406, -2004318072;
	// begin inline asm
	lop3.b32 %r1055, %r1148, %r1057, %r1058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1058, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r1159, %r1057, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1115, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1103, %r1410, -2004318072;
	// begin inline asm
	lop3.b32 %r1101, %r1148, %r1103, %r1104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1104, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r1159, %r1103, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1149, %r1414, -2004318072;
	// begin inline asm
	lop3.b32 %r1147, %r1148, %r1149, %r1150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1151, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1152, %r1150, %r1151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1155, %r1147, %r1152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1158, %r1159, %r1149, %r1161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1162, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1163, %r1161, %r1162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1166, %r1158, %r1163;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1017;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1191, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1028;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1194, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1063;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1197, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1074;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1200, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1109;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1203, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1120;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1206, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1155;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1209, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1166;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1212, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1270, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1215, %r1216}, {%r359, %r362}, {%r1191}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1222, %r1223}, {%r359, %r362}, {%r1194}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1229, %r1230}, {%r359, %r362}, {%r1197}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1236, %r1237}, {%r359, %r362}, {%r1200}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1243, %r1244}, {%r359, %r362}, {%r1203}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1250, %r1251}, {%r359, %r362}, {%r1206}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1257, %r1258}, {%r359, %r362}, {%r1209}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1264, %r1265}, {%r359, %r362}, {%r1212}, {%r1270, %r1270};
	// end inline asm
	@%p1 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;
$L__BB0_220:                            // %pass5517
                                        //   in Loop: Header=BB0_218 Depth=2
	// begin inline asm
	neg.f16x2 %r1271, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r1271, %r1216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r397, %r1215, %r1273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1280, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1282, %r1280, %r1223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r397, %r1222, %r1282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1289, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1291, %r1289, %r1230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1294, %r397, %r1229, %r1291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1298, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1300, %r1298, %r1237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r397, %r1236, %r1300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1307, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1309, %r1307, %r1244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r397, %r1243, %r1309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1316, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r1316, %r1251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r397, %r1250, %r1318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1325, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1327, %r1325, %r1258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1330, %r397, %r1257, %r1327;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1334, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1336, %r1334, %r1265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1339, %r397, %r1264, %r1336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1343, %r400, %r1215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1346, %r397, %r1216, %r1343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r400, %r1222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r397, %r1223, %r1350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1357, %r400, %r1229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1360, %r397, %r1230, %r1357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1364, %r400, %r1236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r397, %r1237, %r1364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1371, %r400, %r1243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r397, %r1244, %r1371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r400, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r397, %r1251, %r1378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r400, %r1257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r397, %r1258, %r1385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r400, %r1264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r397, %r1265, %r1392;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1489}, {%r444, %r447}, {%r1276, %r1346}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1496, %r1497}, {%r444, %r447}, {%r1285, %r1353}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1505}, {%r444, %r447}, {%r1294, %r1360}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1512, %r1513}, {%r444, %r447}, {%r1303, %r1367}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1520, %r1521}, {%r444, %r447}, {%r1312, %r1374}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1528, %r1529}, {%r444, %r447}, {%r1321, %r1381}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1536, %r1537}, {%r444, %r447}, {%r1330, %r1388}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1544, %r1545}, {%r444, %r447}, {%r1339, %r1395}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r1488, %r1489, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r1488, %r1489, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1496, %r1497, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1496, %r1497, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1504, %r1505, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1504, %r1505, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1512, %r1513, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1512, %r1513, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1520, %r1521, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1520, %r1521, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1528, %r1529, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1528, %r1529, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1536, %r1537, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1536, %r1537, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1544, %r1545, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1544, %r1545, %r900;
	// end inline asm
	st.shared.u32 	[%rd45], %r227;
	st.shared.u32 	[%rd46+16576], %r228;
	st.shared.u32 	[%rd46+64], %r229;
	st.shared.u32 	[%rd46+16640], %r230;
	st.shared.u32 	[%rd47], %r231;
	st.shared.u32 	[%rd48+16576], %r232;
	st.shared.u32 	[%rd48+64], %r233;
	st.shared.u32 	[%rd48+16640], %r234;
	st.shared.u32 	[%rd49], %r235;
	st.shared.u32 	[%rd50+16576], %r236;
	st.shared.u32 	[%rd50+64], %r237;
	st.shared.u32 	[%rd50+16640], %r238;
	st.shared.u32 	[%rd51], %r239;
	st.shared.u32 	[%rd52+16576], %r240;
	st.shared.u32 	[%rd52+64], %r241;
	st.shared.u32 	[%rd52+16640], %r242;
	@%p229 bra 	$L__BB0_222;
// %bb.221:                             // %pass7916
                                        //   in Loop: Header=BB0_218 Depth=2
	st.shared.u32 	[%rd45], %r227;
	st.shared.u32 	[%rd46+16576], %r228;
	st.shared.u32 	[%rd46+64], %r229;
	st.shared.u32 	[%rd46+16640], %r230;
	st.shared.u32 	[%rd47], %r231;
	st.shared.u32 	[%rd48+16576], %r232;
	st.shared.u32 	[%rd48+64], %r233;
	st.shared.u32 	[%rd48+16640], %r234;
	st.shared.u32 	[%rd49], %r235;
	st.shared.u32 	[%rd50+16576], %r236;
	st.shared.u32 	[%rd50+64], %r237;
	st.shared.u32 	[%rd50+16640], %r238;
	st.shared.u32 	[%rd51], %r239;
	st.shared.u32 	[%rd52+16576], %r240;
	st.shared.u32 	[%rd52+64], %r241;
	st.shared.u32 	[%rd52+16640], %r242;
$L__BB0_222:                            // %L21619
                                        //   in Loop: Header=BB0_218 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1555, [%rd7];
	ld.shared.u32 	%r1562, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r456, %r459}, {%r1555}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1581, %r1578}, {%r456, %r459}, {%r1562}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r490, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r490, %r1581, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r493, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r490, %r1569, %r1583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r493, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r490, %r1578, %r1590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1619}, {%r532, %r535}, {%r1570, %r1586}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1627}, {%r532, %r535}, {%r1579, %r1593}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r1616, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	mov.u32 	%r1631, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r3536, %r1631, %r1626, %r3525;
	// end inline asm
	add.s32 	%r3534, %r3523, 1;
	setp.eq.s32 	%p282, %r3534, 3;
	@%p282 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_224;
$L__BB0_223:                            // %pass10383
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1635, %r3524, 20;
	or.b32  	%r1636, %r177, %r1635;
	cvt.u64.u32 	%rd239, %r1636;
	add.s64 	%rd240, %rd239, %rd9;
	shr.u64 	%rd241, %rd240, 34;
	add.s64 	%rd242, %rd240, %rd241;
	shr.s64 	%rd243, %rd242, 30;
	setp.lt.s64 	%p283, %rd240, 0;
	and.b64  	%rd244, %rd242, -1073741824;
	setp.ne.s64 	%p284, %rd244, %rd240;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd245, 1, 0, %p285;
	sub.s64 	%rd246, %rd245, %rd243;
	shl.b64 	%rd247, %rd246, 30;
	add.s64 	%rd248, %rd247, %rd240;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3536;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3534, 0;
	mov.u32 	%r3536, %r3534;
$L__BB0_224:                            // %pass10604
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1641, [%rd53];
	ld.shared.u32 	%r1648, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1658, %r1655}, {%r456, %r459}, {%r1641}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1667, %r1664}, {%r456, %r459}, {%r1648}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1651, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1653, %r1651, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1656, %r490, %r1658, %r1653;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1660, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r1660, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r490, %r1667, %r1662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r493, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r490, %r1655, %r1669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r493, %r1667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r490, %r1664, %r1676;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1702, %r1705}, {%r532, %r535}, {%r1656, %r1672}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1709, %r1713}, {%r532, %r535}, {%r1665, %r1679}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r1702, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r1705, %r1705, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r1709, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r1713, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r1631, %r1712, %r3536;
	// end inline asm
	add.s32 	%r3537, %r3534, 1;
	setp.ne.s32 	%p286, %r3537, 3;
	@%p286 bra 	$L__BB0_226;
// %bb.225:                             // %pass10893
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1721, %r3524, 20;
	or.b32  	%r1722, %r177, %r1721;
	cvt.u64.u32 	%rd251, %r1722;
	add.s64 	%rd252, %rd251, %rd9;
	shr.u64 	%rd253, %rd252, 34;
	add.s64 	%rd254, %rd252, %rd253;
	shr.s64 	%rd255, %rd254, 30;
	setp.lt.s64 	%p287, %rd252, 0;
	and.b64  	%rd256, %rd254, -1073741824;
	setp.ne.s64 	%p288, %rd256, %rd252;
	and.pred  	%p289, %p287, %p288;
	selp.u64 	%rd257, 1, 0, %p289;
	sub.s64 	%rd258, %rd257, %rd255;
	shl.b64 	%rd259, %rd258, 30;
	add.s64 	%rd260, %rd259, %rd252;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3539;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3537, 0;
	mov.u32 	%r3539, %r3537;
$L__BB0_226:                            // %pass11114
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1727, [%rd55];
	ld.shared.u32 	%r1734, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r456, %r459}, {%r1727}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1753, %r1750}, {%r456, %r459}, {%r1734}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r490, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1748, %r1746, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r490, %r1753, %r1748;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r493, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r490, %r1741, %r1755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r493, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r490, %r1750, %r1762;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1788, %r1791}, {%r532, %r535}, {%r1742, %r1758}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1795, %r1799}, {%r532, %r535}, {%r1751, %r1765}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r1788, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1799, %r1799, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r1631, %r1798, %r3539;
	// end inline asm
	add.s32 	%r3540, %r3537, 1;
	setp.ne.s32 	%p290, %r3540, 3;
	@%p290 bra 	$L__BB0_228;
// %bb.227:                             // %pass11403
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1807, %r3524, 20;
	or.b32  	%r1808, %r177, %r1807;
	cvt.u64.u32 	%rd263, %r1808;
	add.s64 	%rd264, %rd263, %rd9;
	shr.u64 	%rd265, %rd264, 34;
	add.s64 	%rd266, %rd264, %rd265;
	shr.s64 	%rd267, %rd266, 30;
	setp.lt.s64 	%p291, %rd264, 0;
	and.b64  	%rd268, %rd266, -1073741824;
	setp.ne.s64 	%p292, %rd268, %rd264;
	and.pred  	%p293, %p291, %p292;
	selp.u64 	%rd269, 1, 0, %p293;
	sub.s64 	%rd270, %rd269, %rd267;
	shl.b64 	%rd271, %rd270, 30;
	add.s64 	%rd272, %rd271, %rd264;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3542;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3540, 0;
	mov.u32 	%r3542, %r3540;
$L__BB0_228:                            // %pass11624
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1813, [%rd57];
	ld.shared.u32 	%r1820, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1830, %r1827}, {%r456, %r459}, {%r1813}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1839, %r1836}, {%r456, %r459}, {%r1820}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1823, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r490, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r1832, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r490, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r493, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r490, %r1827, %r1841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r493, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r490, %r1836, %r1848;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1874, %r1877}, {%r532, %r535}, {%r1828, %r1844}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1881, %r1885}, {%r532, %r535}, {%r1837, %r1851}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r1874, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1877, %r1877, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r1881, %r1881, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1885, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r1631, %r1884, %r3542;
	// end inline asm
	add.s32 	%r3543, %r3540, 1;
	setp.ne.s32 	%p294, %r3543, 3;
	@%p294 bra 	$L__BB0_230;
// %bb.229:                             // %pass11913
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1893, %r3524, 20;
	or.b32  	%r1894, %r177, %r1893;
	cvt.u64.u32 	%rd275, %r1894;
	add.s64 	%rd276, %rd275, %rd9;
	shr.u64 	%rd277, %rd276, 34;
	add.s64 	%rd278, %rd276, %rd277;
	shr.s64 	%rd279, %rd278, 30;
	setp.lt.s64 	%p295, %rd276, 0;
	and.b64  	%rd280, %rd278, -1073741824;
	setp.ne.s64 	%p296, %rd280, %rd276;
	and.pred  	%p297, %p295, %p296;
	selp.u64 	%rd281, 1, 0, %p297;
	sub.s64 	%rd282, %rd281, %rd279;
	shl.b64 	%rd283, %rd282, 30;
	add.s64 	%rd284, %rd283, %rd276;
	shl.b64 	%rd285, %rd284, 2;
	add.s64 	%rd286, %rd4, %rd285;
	st.global.u32 	[%rd286], %r3545;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3543, 0;
	mov.u32 	%r3545, %r3543;
$L__BB0_230:                            // %pass12134
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1899, [%rd59];
	ld.shared.u32 	%r1906, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1916, %r1913}, {%r456, %r459}, {%r1899}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1925, %r1922}, {%r456, %r459}, {%r1906}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1909, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1911, %r1909, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r490, %r1916, %r1911;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1918, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1920, %r1918, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r490, %r1925, %r1920;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1927, %r493, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1930, %r490, %r1913, %r1927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r493, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r490, %r1922, %r1934;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1960, %r1963}, {%r532, %r535}, {%r1914, %r1930}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1971}, {%r532, %r535}, {%r1923, %r1937}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r1960, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1967, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1971, %r1971, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r1631, %r1970, %r3545;
	// end inline asm
	add.s32 	%r3546, %r3543, 1;
	setp.ne.s32 	%p298, %r3546, 3;
	@%p298 bra 	$L__BB0_232;
// %bb.231:                             // %pass12423
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1979, %r3524, 20;
	or.b32  	%r1980, %r177, %r1979;
	cvt.u64.u32 	%rd287, %r1980;
	add.s64 	%rd288, %rd287, %rd9;
	shr.u64 	%rd289, %rd288, 34;
	add.s64 	%rd290, %rd288, %rd289;
	shr.s64 	%rd291, %rd290, 30;
	setp.lt.s64 	%p299, %rd288, 0;
	and.b64  	%rd292, %rd290, -1073741824;
	setp.ne.s64 	%p300, %rd292, %rd288;
	and.pred  	%p301, %p299, %p300;
	selp.u64 	%rd293, 1, 0, %p301;
	sub.s64 	%rd294, %rd293, %rd291;
	shl.b64 	%rd295, %rd294, 30;
	add.s64 	%rd296, %rd295, %rd288;
	shl.b64 	%rd297, %rd296, 2;
	add.s64 	%rd298, %rd4, %rd297;
	st.global.u32 	[%rd298], %r3548;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3546, 0;
	mov.u32 	%r3548, %r3546;
$L__BB0_232:                            // %pass12644
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1985, [%rd61];
	ld.shared.u32 	%r1992, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2002, %r1999}, {%r456, %r459}, {%r1985}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2011, %r2008}, {%r456, %r459}, {%r1992}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1995, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r1995, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r490, %r2002, %r1997;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2004, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r2004, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r490, %r2011, %r2006;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r493, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r490, %r1999, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r493, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r490, %r2008, %r2020;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2049}, {%r532, %r535}, {%r2000, %r2016}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2057}, {%r532, %r535}, {%r2009, %r2023}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r2046, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r2049, %r2049, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r2053, %r2053, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r2057, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r1631, %r2056, %r3548;
	// end inline asm
	add.s32 	%r3549, %r3546, 1;
	setp.ne.s32 	%p302, %r3549, 3;
	@%p302 bra 	$L__BB0_234;
// %bb.233:                             // %pass12933
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2065, %r3524, 20;
	or.b32  	%r2066, %r177, %r2065;
	cvt.u64.u32 	%rd299, %r2066;
	add.s64 	%rd300, %rd299, %rd9;
	shr.u64 	%rd301, %rd300, 34;
	add.s64 	%rd302, %rd300, %rd301;
	shr.s64 	%rd303, %rd302, 30;
	setp.lt.s64 	%p303, %rd300, 0;
	and.b64  	%rd304, %rd302, -1073741824;
	setp.ne.s64 	%p304, %rd304, %rd300;
	and.pred  	%p305, %p303, %p304;
	selp.u64 	%rd305, 1, 0, %p305;
	sub.s64 	%rd306, %rd305, %rd303;
	shl.b64 	%rd307, %rd306, 30;
	add.s64 	%rd308, %rd307, %rd300;
	shl.b64 	%rd309, %rd308, 2;
	add.s64 	%rd310, %rd4, %rd309;
	st.global.u32 	[%rd310], %r3551;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3549, 0;
	mov.u32 	%r3551, %r3549;
$L__BB0_234:                            // %pass13154
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2071, [%rd63];
	ld.shared.u32 	%r2078, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2088, %r2085}, {%r456, %r459}, {%r2071}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2097, %r2094}, {%r456, %r459}, {%r2078}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2081, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r2081, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r490, %r2088, %r2083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2090, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r2090, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r490, %r2097, %r2092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2099, %r493, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2102, %r490, %r2085, %r2099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2106, %r493, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r490, %r2094, %r2106;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2132, %r2135}, {%r532, %r535}, {%r2086, %r2102}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2139, %r2143}, {%r532, %r535}, {%r2095, %r2109}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r2132, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r2135, %r2135, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r2139, %r2139, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r2143, %r2143, %r2138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r1631, %r2142, %r3551;
	// end inline asm
	add.s32 	%r3552, %r3549, 1;
	setp.ne.s32 	%p306, %r3552, 3;
	@%p306 bra 	$L__BB0_236;
// %bb.235:                             // %pass13443
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2151, %r3524, 20;
	or.b32  	%r2152, %r177, %r2151;
	cvt.u64.u32 	%rd311, %r2152;
	add.s64 	%rd312, %rd311, %rd9;
	shr.u64 	%rd313, %rd312, 34;
	add.s64 	%rd314, %rd312, %rd313;
	shr.s64 	%rd315, %rd314, 30;
	setp.lt.s64 	%p307, %rd312, 0;
	and.b64  	%rd316, %rd314, -1073741824;
	setp.ne.s64 	%p308, %rd316, %rd312;
	and.pred  	%p309, %p307, %p308;
	selp.u64 	%rd317, 1, 0, %p309;
	sub.s64 	%rd318, %rd317, %rd315;
	shl.b64 	%rd319, %rd318, 30;
	add.s64 	%rd320, %rd319, %rd312;
	shl.b64 	%rd321, %rd320, 2;
	add.s64 	%rd322, %rd4, %rd321;
	st.global.u32 	[%rd322], %r3554;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3552, 0;
	mov.u32 	%r3554, %r3552;
$L__BB0_236:                            // %pass13664
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2157, [%rd65];
	ld.shared.u32 	%r2164, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2174, %r2171}, {%r456, %r459}, {%r2157}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2183, %r2180}, {%r456, %r459}, {%r2164}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2167, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r2167, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r490, %r2174, %r2169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2176, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r2176, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r490, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2185, %r493, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2188, %r490, %r2171, %r2185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r493, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r490, %r2180, %r2192;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2218, %r2221}, {%r532, %r535}, {%r2172, %r2188}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2225, %r2229}, {%r532, %r535}, {%r2181, %r2195}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2218, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r2221, %r2221, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2225, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r2229, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r1631, %r2228, %r3554;
	// end inline asm
	add.s32 	%r3523, %r3552, 1;
	setp.ne.s32 	%p310, %r3523, 3;
	@%p310 bra 	$L__BB0_152;
// %bb.237:                             // %pass13953
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2237, %r3524, 20;
	or.b32  	%r2238, %r177, %r2237;
	cvt.u64.u32 	%rd323, %r2238;
	add.s64 	%rd324, %rd323, %rd9;
	shr.u64 	%rd325, %rd324, 34;
	add.s64 	%rd326, %rd324, %rd325;
	shr.s64 	%rd327, %rd326, 30;
	setp.lt.s64 	%p311, %rd324, 0;
	and.b64  	%rd328, %rd326, -1073741824;
	setp.ne.s64 	%p312, %rd328, %rd324;
	and.pred  	%p313, %p311, %p312;
	selp.u64 	%rd329, 1, 0, %p313;
	sub.s64 	%rd330, %rd329, %rd327;
	shl.b64 	%rd331, %rd330, 30;
	add.s64 	%rd332, %rd331, %rd324;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r3525;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3523, 0;
	mov.u32 	%r3525, %r3523;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L30894.preheader
                                        //   in Loop: Header=BB0_200 Depth=1
	mov.u32 	%r3522, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_170:                            // %L49505
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3522, %r3522, -8;
	setp.ne.s32 	%p352, %r3522, -16;
	@%p352 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_171;
$L__BB0_154:                            // %L30894
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p315, %r1, 16;
	setp.eq.s32 	%p316, %r3522, 16;
	selp.b32 	%r2768, %r211, 0, %p316;
	setp.eq.s32 	%p317, %r3522, 8;
	selp.b32 	%r2769, %r215, %r2768, %p317;
	setp.eq.s32 	%p318, %r3522, 0;
	selp.b32 	%r2770, %r219, %r2769, %p318;
	setp.eq.s32 	%p319, %r3522, -8;
	selp.b32 	%r2771, %r223, %r2770, %p319;
	selp.b32 	%r2772, %r212, 0, %p316;
	selp.b32 	%r2773, %r216, %r2772, %p317;
	selp.b32 	%r2774, %r220, %r2773, %p318;
	selp.b32 	%r2775, %r224, %r2774, %p319;
	selp.b32 	%r2776, %r213, 0, %p316;
	selp.b32 	%r2777, %r217, %r2776, %p317;
	selp.b32 	%r2778, %r221, %r2777, %p318;
	selp.b32 	%r2779, %r225, %r2778, %p319;
	selp.b32 	%r2780, %r214, 0, %p316;
	selp.b32 	%r2781, %r218, %r2780, %p317;
	selp.b32 	%r2782, %r222, %r2781, %p318;
	selp.b32 	%r2783, %r226, %r2782, %p319;
	// begin inline asm
	mov.b32 %r2267, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2784, %r2771, 8;
	xor.b32  	%r2277, %r2784, 8947848;
	// begin inline asm
	lop3.b32 %r2264, %r1148, %r2277, %r2267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2269, %r2267, %r2268;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2272, %r2264, %r2269;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2275, %r1159, %r2277, %r2278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2280, %r2278, %r2279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2283, %r2275, %r2280;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2324, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2785, %r2775, 8;
	xor.b32  	%r2323, %r2785, 8947848;
	// begin inline asm
	lop3.b32 %r2310, %r1148, %r2323, %r2313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2313, %r2314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2318, %r2310, %r2315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2321, %r1159, %r2323, %r2324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2324, %r2325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2329, %r2321, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2786, %r2779, 8;
	xor.b32  	%r2369, %r2786, 8947848;
	// begin inline asm
	lop3.b32 %r2356, %r1148, %r2369, %r2359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2359, %r2360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2364, %r2356, %r2361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2367, %r1159, %r2369, %r2370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2370, %r2371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2375, %r2367, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2416, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2787, %r2783, 8;
	xor.b32  	%r2415, %r2787, 8947848;
	// begin inline asm
	lop3.b32 %r2402, %r1148, %r2415, %r2405, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2406, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2407, %r2405, %r2406;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2410, %r2402, %r2407;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2413, %r1159, %r2415, %r2416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2416, %r2417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2421, %r2413, %r2418;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2272;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2424, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2283;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2427, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2318;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2430, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2329;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2433, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2364;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2436, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2375;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2439, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2410;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2442, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2421;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2445, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r359, %r362}, {%r2424}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r359, %r362}, {%r2427}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2529, %r2526}, {%r359, %r362}, {%r2430}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r359, %r362}, {%r2433}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2547, %r2544}, {%r359, %r362}, {%r2436}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2556, %r2553}, {%r359, %r362}, {%r2439}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2565, %r2562}, {%r359, %r362}, {%r2442}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2574, %r2571}, {%r359, %r362}, {%r2445}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r397, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r397, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2522, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r2522, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r397, %r2529, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r397, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2540, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r2540, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r397, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2549, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r2549, %r2553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r397, %r2556, %r2551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2558, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r2558, %r2562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r397, %r2565, %r2560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2567, %r400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2569, %r2567, %r2571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r397, %r2574, %r2569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2576, %r400, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r397, %r2508, %r2576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r400, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r397, %r2517, %r2583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2590, %r400, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2593, %r397, %r2526, %r2590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2597, %r400, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2600, %r397, %r2535, %r2597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2604, %r400, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2607, %r397, %r2544, %r2604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2611, %r400, %r2556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2614, %r397, %r2553, %r2611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2618, %r400, %r2565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2621, %r397, %r2562, %r2618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2625, %r400, %r2574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2628, %r397, %r2571, %r2625;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2705, %r2706}, {%r444, %r447}, {%r2509, %r2579}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2713, %r2714}, {%r444, %r447}, {%r2518, %r2586}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2721, %r2722}, {%r444, %r447}, {%r2527, %r2593}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2729, %r2730}, {%r444, %r447}, {%r2536, %r2600}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2738}, {%r444, %r447}, {%r2545, %r2607}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2745, %r2746}, {%r444, %r447}, {%r2554, %r2614}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2754}, {%r444, %r447}, {%r2563, %r2621}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2761, %r2762}, {%r444, %r447}, {%r2572, %r2628}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2704, %r2705, %r2706, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2708, %r2705, %r2706, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2712, %r2713, %r2714, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2716, %r2713, %r2714, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2720, %r2721, %r2722, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2724, %r2721, %r2722, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2728, %r2729, %r2730, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2732, %r2729, %r2730, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2736, %r2737, %r2738, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2740, %r2737, %r2738, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2744, %r2745, %r2746, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2748, %r2745, %r2746, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2752, %r2753, %r2754, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2756, %r2753, %r2754, %r900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2760, %r2761, %r2762, %r896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2764, %r2761, %r2762, %r900;
	// end inline asm
	st.shared.u32 	[%rd45], %r2704;
	st.shared.u32 	[%rd46+16576], %r2708;
	st.shared.u32 	[%rd46+64], %r2712;
	st.shared.u32 	[%rd46+16640], %r2716;
	st.shared.u32 	[%rd47], %r2720;
	st.shared.u32 	[%rd48+16576], %r2724;
	st.shared.u32 	[%rd48+64], %r2728;
	st.shared.u32 	[%rd48+16640], %r2732;
	st.shared.u32 	[%rd49], %r2736;
	st.shared.u32 	[%rd50+16576], %r2740;
	st.shared.u32 	[%rd50+64], %r2744;
	st.shared.u32 	[%rd50+16640], %r2748;
	st.shared.u32 	[%rd51], %r2752;
	st.shared.u32 	[%rd52+16576], %r2756;
	st.shared.u32 	[%rd52+64], %r2760;
	st.shared.u32 	[%rd52+16640], %r2764;
	@%p315 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_155;
$L__BB0_238:                            // %pass16454
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd45], %r2704;
	st.shared.u32 	[%rd46+16576], %r2708;
	st.shared.u32 	[%rd46+64], %r2712;
	st.shared.u32 	[%rd46+16640], %r2716;
	st.shared.u32 	[%rd47], %r2720;
	st.shared.u32 	[%rd48+16576], %r2724;
	st.shared.u32 	[%rd48+64], %r2728;
	st.shared.u32 	[%rd48+16640], %r2732;
	st.shared.u32 	[%rd49], %r2736;
	st.shared.u32 	[%rd50+16576], %r2740;
	st.shared.u32 	[%rd50+64], %r2744;
	st.shared.u32 	[%rd50+16640], %r2748;
	st.shared.u32 	[%rd51], %r2752;
	st.shared.u32 	[%rd52+16576], %r2756;
	st.shared.u32 	[%rd52+64], %r2760;
	st.shared.u32 	[%rd52+16640], %r2764;
$L__BB0_155:                            // %L40251
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2792, [%rd7];
	ld.shared.u32 	%r2799, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2809, %r2806}, {%r456, %r459}, {%r2792}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2818, %r2815}, {%r456, %r459}, {%r2799}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2802, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r2802, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r490, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2811, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r2811, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r490, %r2818, %r2813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2820, %r493, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r490, %r2806, %r2820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r493, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r490, %r2815, %r2827;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2853, %r2856}, {%r532, %r535}, {%r2807, %r2823}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2860, %r2864}, {%r532, %r535}, {%r2816, %r2830}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r2853, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r2856, %r2856, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r2860, %r2860, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r2864, %r2864, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r1631, %r2863, %r3525;
	// end inline asm
	add.s32 	%r3555, %r3523, 1;
	setp.eq.s32 	%p320, %r3555, 3;
	@%p320 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_157;
$L__BB0_156:                            // %pass18921
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2872, %r3524, 20;
	or.b32  	%r2873, %r177, %r2872;
	cvt.u64.u32 	%rd335, %r2873;
	add.s64 	%rd336, %rd335, %rd9;
	shr.u64 	%rd337, %rd336, 34;
	add.s64 	%rd338, %rd336, %rd337;
	shr.s64 	%rd339, %rd338, 30;
	setp.lt.s64 	%p321, %rd336, 0;
	and.b64  	%rd340, %rd338, -1073741824;
	setp.ne.s64 	%p322, %rd340, %rd336;
	and.pred  	%p323, %p321, %p322;
	selp.u64 	%rd341, 1, 0, %p323;
	sub.s64 	%rd342, %rd341, %rd339;
	shl.b64 	%rd343, %rd342, 30;
	add.s64 	%rd344, %rd343, %rd336;
	shl.b64 	%rd345, %rd344, 2;
	add.s64 	%rd346, %rd4, %rd345;
	st.global.u32 	[%rd346], %r3557;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3555, 0;
	mov.u32 	%r3557, %r3555;
$L__BB0_157:                            // %pass19142
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2878, [%rd53];
	ld.shared.u32 	%r2885, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2895, %r2892}, {%r456, %r459}, {%r2878}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2904, %r2901}, {%r456, %r459}, {%r2885}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2888, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r2888, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r490, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2897, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2897, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r490, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r493, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r490, %r2892, %r2906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2913, %r493, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r490, %r2901, %r2913;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2939, %r2942}, {%r532, %r535}, {%r2893, %r2909}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2950}, {%r532, %r535}, {%r2902, %r2916}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r2939, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r2942, %r2942, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r2946, %r2946, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r1631, %r2949, %r3557;
	// end inline asm
	add.s32 	%r3558, %r3555, 1;
	setp.ne.s32 	%p324, %r3558, 3;
	@%p324 bra 	$L__BB0_159;
// %bb.158:                             // %pass19431
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2958, %r3524, 20;
	or.b32  	%r2959, %r177, %r2958;
	cvt.u64.u32 	%rd347, %r2959;
	add.s64 	%rd348, %rd347, %rd9;
	shr.u64 	%rd349, %rd348, 34;
	add.s64 	%rd350, %rd348, %rd349;
	shr.s64 	%rd351, %rd350, 30;
	setp.lt.s64 	%p325, %rd348, 0;
	and.b64  	%rd352, %rd350, -1073741824;
	setp.ne.s64 	%p326, %rd352, %rd348;
	and.pred  	%p327, %p325, %p326;
	selp.u64 	%rd353, 1, 0, %p327;
	sub.s64 	%rd354, %rd353, %rd351;
	shl.b64 	%rd355, %rd354, 30;
	add.s64 	%rd356, %rd355, %rd348;
	shl.b64 	%rd357, %rd356, 2;
	add.s64 	%rd358, %rd4, %rd357;
	st.global.u32 	[%rd358], %r3560;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3558, 0;
	mov.u32 	%r3560, %r3558;
$L__BB0_159:                            // %pass19652
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2964, [%rd55];
	ld.shared.u32 	%r2971, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2981, %r2978}, {%r456, %r459}, {%r2964}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2990, %r2987}, {%r456, %r459}, {%r2971}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2974, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r2974, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r490, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2983, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r2983, %r2987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r490, %r2990, %r2985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2992, %r493, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r490, %r2978, %r2992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r493, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r490, %r2987, %r2999;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3025, %r3028}, {%r532, %r535}, {%r2979, %r2995}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3032, %r3036}, {%r532, %r535}, {%r2988, %r3002}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r3025, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r3028, %r3028, %r3024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3031, %r3032, %r3032, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r3036, %r3036, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r1631, %r3035, %r3560;
	// end inline asm
	add.s32 	%r3561, %r3558, 1;
	setp.ne.s32 	%p328, %r3561, 3;
	@%p328 bra 	$L__BB0_161;
// %bb.160:                             // %pass19941
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3044, %r3524, 20;
	or.b32  	%r3045, %r177, %r3044;
	cvt.u64.u32 	%rd359, %r3045;
	add.s64 	%rd360, %rd359, %rd9;
	shr.u64 	%rd361, %rd360, 34;
	add.s64 	%rd362, %rd360, %rd361;
	shr.s64 	%rd363, %rd362, 30;
	setp.lt.s64 	%p329, %rd360, 0;
	and.b64  	%rd364, %rd362, -1073741824;
	setp.ne.s64 	%p330, %rd364, %rd360;
	and.pred  	%p331, %p329, %p330;
	selp.u64 	%rd365, 1, 0, %p331;
	sub.s64 	%rd366, %rd365, %rd363;
	shl.b64 	%rd367, %rd366, 30;
	add.s64 	%rd368, %rd367, %rd360;
	shl.b64 	%rd369, %rd368, 2;
	add.s64 	%rd370, %rd4, %rd369;
	st.global.u32 	[%rd370], %r3563;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3561, 0;
	mov.u32 	%r3563, %r3561;
$L__BB0_161:                            // %pass20162
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3050, [%rd57];
	ld.shared.u32 	%r3057, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3067, %r3064}, {%r456, %r459}, {%r3050}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3076, %r3073}, {%r456, %r459}, {%r3057}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3060, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r3060, %r3064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r490, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3069, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r3069, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r490, %r3076, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r493, %r3067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r490, %r3064, %r3078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r493, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r490, %r3073, %r3085;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3111, %r3114}, {%r532, %r535}, {%r3065, %r3081}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3118, %r3122}, {%r532, %r535}, {%r3074, %r3088}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3111, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r3114, %r3114, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3117, %r3118, %r3118, %r3113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r3122, %r3122, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r1631, %r3121, %r3563;
	// end inline asm
	add.s32 	%r3564, %r3561, 1;
	setp.ne.s32 	%p332, %r3564, 3;
	@%p332 bra 	$L__BB0_163;
// %bb.162:                             // %pass20451
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3130, %r3524, 20;
	or.b32  	%r3131, %r177, %r3130;
	cvt.u64.u32 	%rd371, %r3131;
	add.s64 	%rd372, %rd371, %rd9;
	shr.u64 	%rd373, %rd372, 34;
	add.s64 	%rd374, %rd372, %rd373;
	shr.s64 	%rd375, %rd374, 30;
	setp.lt.s64 	%p333, %rd372, 0;
	and.b64  	%rd376, %rd374, -1073741824;
	setp.ne.s64 	%p334, %rd376, %rd372;
	and.pred  	%p335, %p333, %p334;
	selp.u64 	%rd377, 1, 0, %p335;
	sub.s64 	%rd378, %rd377, %rd375;
	shl.b64 	%rd379, %rd378, 30;
	add.s64 	%rd380, %rd379, %rd372;
	shl.b64 	%rd381, %rd380, 2;
	add.s64 	%rd382, %rd4, %rd381;
	st.global.u32 	[%rd382], %r3566;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3564, 0;
	mov.u32 	%r3566, %r3564;
$L__BB0_163:                            // %pass20672
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3136, [%rd59];
	ld.shared.u32 	%r3143, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3153, %r3150}, {%r456, %r459}, {%r3136}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3162, %r3159}, {%r456, %r459}, {%r3143}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r3146, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r490, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3157, %r3155, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r490, %r3162, %r3157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3164, %r493, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r490, %r3150, %r3164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3171, %r493, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r490, %r3159, %r3171;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3197, %r3200}, {%r532, %r535}, {%r3151, %r3167}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3208}, {%r532, %r535}, {%r3160, %r3174}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r3197, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3200, %r3200, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3204, %r3204, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3569, %r1631, %r3207, %r3566;
	// end inline asm
	add.s32 	%r3567, %r3564, 1;
	setp.ne.s32 	%p336, %r3567, 3;
	@%p336 bra 	$L__BB0_165;
// %bb.164:                             // %pass20961
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3216, %r3524, 20;
	or.b32  	%r3217, %r177, %r3216;
	cvt.u64.u32 	%rd383, %r3217;
	add.s64 	%rd384, %rd383, %rd9;
	shr.u64 	%rd385, %rd384, 34;
	add.s64 	%rd386, %rd384, %rd385;
	shr.s64 	%rd387, %rd386, 30;
	setp.lt.s64 	%p337, %rd384, 0;
	and.b64  	%rd388, %rd386, -1073741824;
	setp.ne.s64 	%p338, %rd388, %rd384;
	and.pred  	%p339, %p337, %p338;
	selp.u64 	%rd389, 1, 0, %p339;
	sub.s64 	%rd390, %rd389, %rd387;
	shl.b64 	%rd391, %rd390, 30;
	add.s64 	%rd392, %rd391, %rd384;
	shl.b64 	%rd393, %rd392, 2;
	add.s64 	%rd394, %rd4, %rd393;
	st.global.u32 	[%rd394], %r3569;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3567, 0;
	mov.u32 	%r3569, %r3567;
$L__BB0_165:                            // %pass21182
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3222, [%rd61];
	ld.shared.u32 	%r3229, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3239, %r3236}, {%r456, %r459}, {%r3222}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3248, %r3245}, {%r456, %r459}, {%r3229}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3232, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r3232, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r490, %r3239, %r3234;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3241, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r3241, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r490, %r3248, %r3243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3250, %r493, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r490, %r3236, %r3250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3257, %r493, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r490, %r3245, %r3257;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3283, %r3286}, {%r532, %r535}, {%r3237, %r3253}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3290, %r3294}, {%r532, %r535}, {%r3246, %r3260}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3282, %r3283, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3285, %r3286, %r3286, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3289, %r3290, %r3290, %r3285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r3294, %r3294, %r3289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r1631, %r3293, %r3569;
	// end inline asm
	add.s32 	%r3570, %r3567, 1;
	setp.ne.s32 	%p340, %r3570, 3;
	@%p340 bra 	$L__BB0_167;
// %bb.166:                             // %pass21471
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3302, %r3524, 20;
	or.b32  	%r3303, %r177, %r3302;
	cvt.u64.u32 	%rd395, %r3303;
	add.s64 	%rd396, %rd395, %rd9;
	shr.u64 	%rd397, %rd396, 34;
	add.s64 	%rd398, %rd396, %rd397;
	shr.s64 	%rd399, %rd398, 30;
	setp.lt.s64 	%p341, %rd396, 0;
	and.b64  	%rd400, %rd398, -1073741824;
	setp.ne.s64 	%p342, %rd400, %rd396;
	and.pred  	%p343, %p341, %p342;
	selp.u64 	%rd401, 1, 0, %p343;
	sub.s64 	%rd402, %rd401, %rd399;
	shl.b64 	%rd403, %rd402, 30;
	add.s64 	%rd404, %rd403, %rd396;
	shl.b64 	%rd405, %rd404, 2;
	add.s64 	%rd406, %rd4, %rd405;
	st.global.u32 	[%rd406], %r3572;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3570, 0;
	mov.u32 	%r3572, %r3570;
$L__BB0_167:                            // %pass21692
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3308, [%rd63];
	ld.shared.u32 	%r3315, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3325, %r3322}, {%r456, %r459}, {%r3308}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3334, %r3331}, {%r456, %r459}, {%r3315}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3318, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r3318, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r490, %r3325, %r3320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3327, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r3327, %r3331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r490, %r3334, %r3329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r493, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r490, %r3322, %r3336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3343, %r493, %r3334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r490, %r3331, %r3343;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3369, %r3372}, {%r532, %r535}, {%r3323, %r3339}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3376, %r3380}, {%r532, %r535}, {%r3332, %r3346}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3368, %r3369, %r3369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r3372, %r3372, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r3376, %r3376, %r3371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3379, %r3380, %r3380, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3575, %r1631, %r3379, %r3572;
	// end inline asm
	add.s32 	%r3573, %r3570, 1;
	setp.ne.s32 	%p344, %r3573, 3;
	@%p344 bra 	$L__BB0_169;
// %bb.168:                             // %pass21981
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3388, %r3524, 20;
	or.b32  	%r3389, %r177, %r3388;
	cvt.u64.u32 	%rd407, %r3389;
	add.s64 	%rd408, %rd407, %rd9;
	shr.u64 	%rd409, %rd408, 34;
	add.s64 	%rd410, %rd408, %rd409;
	shr.s64 	%rd411, %rd410, 30;
	setp.lt.s64 	%p345, %rd408, 0;
	and.b64  	%rd412, %rd410, -1073741824;
	setp.ne.s64 	%p346, %rd412, %rd408;
	and.pred  	%p347, %p345, %p346;
	selp.u64 	%rd413, 1, 0, %p347;
	sub.s64 	%rd414, %rd413, %rd411;
	shl.b64 	%rd415, %rd414, 30;
	add.s64 	%rd416, %rd415, %rd408;
	shl.b64 	%rd417, %rd416, 2;
	add.s64 	%rd418, %rd4, %rd417;
	st.global.u32 	[%rd418], %r3575;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3573, 0;
	mov.u32 	%r3575, %r3573;
$L__BB0_169:                            // %pass22202
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3394, [%rd65];
	ld.shared.u32 	%r3401, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3411, %r3408}, {%r456, %r459}, {%r3394}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3420, %r3417}, {%r456, %r459}, {%r3401}, {%r1270, %r1270};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3404, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3406, %r3404, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r490, %r3411, %r3406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3413, %r493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3415, %r3413, %r3417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r490, %r3420, %r3415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3422, %r493, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3425, %r490, %r3408, %r3422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3429, %r493, %r3420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3432, %r490, %r3417, %r3429;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3455, %r3458}, {%r532, %r535}, {%r3409, %r3425}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3462, %r3466}, {%r532, %r535}, {%r3418, %r3432}, {%r1270, %r1270}, %r178, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3454, %r3455, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3457, %r3458, %r3458, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3461, %r3462, %r3462, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3465, %r3466, %r3466, %r3461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r1631, %r3465, %r3575;
	// end inline asm
	add.s32 	%r3523, %r3573, 1;
	setp.ne.s32 	%p348, %r3523, 3;
	@%p348 bra 	$L__BB0_170;
// %bb.239:                             // %pass22491
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3474, %r3524, 20;
	or.b32  	%r3475, %r177, %r3474;
	cvt.u64.u32 	%rd419, %r3475;
	add.s64 	%rd420, %rd419, %rd9;
	shr.u64 	%rd421, %rd420, 34;
	add.s64 	%rd422, %rd420, %rd421;
	shr.s64 	%rd423, %rd422, 30;
	setp.lt.s64 	%p349, %rd420, 0;
	and.b64  	%rd424, %rd422, -1073741824;
	setp.ne.s64 	%p350, %rd424, %rd420;
	and.pred  	%p351, %p349, %p350;
	selp.u64 	%rd425, 1, 0, %p351;
	sub.s64 	%rd426, %rd425, %rd423;
	shl.b64 	%rd427, %rd426, 30;
	add.s64 	%rd428, %rd427, %rd420;
	shl.b64 	%rd429, %rd428, 2;
	add.s64 	%rd430, %rd4, %rd429;
	st.global.u32 	[%rd430], %r3525;
	add.s32 	%r3524, %r3524, 1;
	mov.u32 	%r3523, %r1270;
	mov.u32 	%r3525, %r1270;
	bra.uni 	$L__BB0_170;
$L__BB0_172:                            // %L49536
	mov.u32 	%r3476, 0;
	st.global.u32 	[%rd6], %r3476;
	ret;
$L__BB0_219:                            // %post_box_union
	mov.u64 	%rd237, exception4380;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3492, 5;
	st.global.u32 	[%rd6], %r3492;
	mov.u64 	%rd461, exception4332;
	cvta.global.u64 	%rd462, %rd461;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd462;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3491, 5;
	st.global.u32 	[%rd6], %r3491;
	mov.u64 	%rd459, exception4332;
	cvta.global.u64 	%rd460, %rd459;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd460;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3490, 5;
	st.global.u32 	[%rd6], %r3490;
	mov.u64 	%rd457, exception4332;
	cvta.global.u64 	%rd458, %rd457;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd458;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3489, 5;
	st.global.u32 	[%rd6], %r3489;
	mov.u64 	%rd455, exception4332;
	cvta.global.u64 	%rd456, %rd455;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd456;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3488, 5;
	st.global.u32 	[%rd6], %r3488;
	mov.u64 	%rd453, exception4332;
	cvta.global.u64 	%rd454, %rd453;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd454;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3487, 5;
	st.global.u32 	[%rd6], %r3487;
	mov.u64 	%rd451, exception4332;
	cvta.global.u64 	%rd452, %rd451;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd452;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3486, 5;
	st.global.u32 	[%rd6], %r3486;
	mov.u64 	%rd449, exception4332;
	cvta.global.u64 	%rd450, %rd449;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd450;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3485, 5;
	st.global.u32 	[%rd6], %r3485;
	mov.u64 	%rd447, exception4332;
	cvta.global.u64 	%rd448, %rd447;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd448;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3484, 5;
	st.global.u32 	[%rd6], %r3484;
	mov.u64 	%rd445, exception4332;
	cvta.global.u64 	%rd446, %rd445;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd446;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3483, 5;
	st.global.u32 	[%rd6], %r3483;
	mov.u64 	%rd443, exception4332;
	cvta.global.u64 	%rd444, %rd443;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd444;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3482, 5;
	st.global.u32 	[%rd6], %r3482;
	mov.u64 	%rd441, exception4332;
	cvta.global.u64 	%rd442, %rd441;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd442;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3481, 5;
	st.global.u32 	[%rd6], %r3481;
	mov.u64 	%rd439, exception4332;
	cvta.global.u64 	%rd440, %rd439;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd440;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3480, 5;
	st.global.u32 	[%rd6], %r3480;
	mov.u64 	%rd437, exception4332;
	cvta.global.u64 	%rd438, %rd437;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd438;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3479, 5;
	st.global.u32 	[%rd6], %r3479;
	mov.u64 	%rd435, exception4332;
	cvta.global.u64 	%rd436, %rd435;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd436;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3478, 5;
	st.global.u32 	[%rd6], %r3478;
	mov.u64 	%rd433, exception4332;
	cvta.global.u64 	%rd434, %rd433;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd434;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3477, 5;
	st.global.u32 	[%rd6], %r3477;
	mov.u64 	%rd431, exception4332;
	cvta.global.u64 	%rd432, %rd431;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd432;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3494, 2;
	st.global.u32 	[%rd6], %r3494;
	mov.u64 	%rd465, exception4332;
	cvta.global.u64 	%rd466, %rd465;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd466;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3493, 3;
	st.global.u32 	[%rd6], %r3493;
	mov.u64 	%rd463, exception4332;
	cvta.global.u64 	%rd464, %rd463;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd464;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd73, exception14392;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd72, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd78, __unnamed_1;
	cvta.global.u64 	%rd79, %rd78;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd79;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd72;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r545, [retval0+0];
	} // callseq 47
	mov.u32 	%r547, 4;
	st.global.u32 	[%rd6], %r547;
	mov.u64 	%rd81, exception4332;
	cvta.global.u64 	%rd82, %rd81;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd82;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r329;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
