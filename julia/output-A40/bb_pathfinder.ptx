// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<662>;
	.reg .b64 	%rd<70>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r65, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r66, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r67, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r68, %r1, 7;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r69, %r3, 5;
	or.b32  	%r70, %r68, %r2;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd24, %r71, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd6], %r72;
	shl.b32 	%r73, %r1, 1;
	and.b32  	%r4, %r73, 4064;
	shr.u32 	%r74, %r2, 3;
	shl.b32 	%r75, %r3, 2;
	or.b32  	%r5, %r74, %r75;
	or.b32  	%r76, %r5, %r4;
	mul.wide.u32 	%rd25, %r76, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r6, [%rd26];
	or.b32  	%r77, %r76, 16;
	mul.wide.u32 	%rd27, %r77, 4;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.u32 	%r7, [%rd28];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L430
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r144, %r7, -2;
	add.s32 	%r145, %r6, -2;
	shl.b32 	%r146, %r3, 8;
	and.b32  	%r147, %r146, 512;
	shl.b32 	%r148, %r2, 3;
	and.b32  	%r149, %r2, 4;
	and.b32  	%r150, %r148, 24;
	shl.b32 	%r151, %r1, 6;
	and.b32  	%r152, %r151, 130048;
	or.b32  	%r153, %r146, %r148;
	and.b32  	%r154, %r153, 448;
	or.b32  	%r155, %r150, %r149;
	or.b32  	%r156, %r155, %r147;
	or.b32  	%r157, %r156, %r152;
	or.b32  	%r158, %r157, %r154;
	shl.b32 	%r159, %r158, 2;
	cvt.u64.u32 	%rd31, %r159;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd32];
	or.b32  	%r160, %r159, 128;
	cvt.u64.u32 	%rd33, %r160;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd34];
	mov.u32 	%r82, 21520;
	// begin inline asm
	prmt.b32 %r112, %r80, %r81, %r82;
	// end inline asm
	mov.u32 	%r86, 30258;
	// begin inline asm
	prmt.b32 %r113, %r80, %r81, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r86;
	// end inline asm
	mov.u32 	%r114, 25152;
	// begin inline asm
	prmt.b32 %r111, %r112, %r113, %r114;
	// end inline asm
	mov.u32 	%r118, 29521;
	// begin inline asm
	prmt.b32 %r115, %r112, %r113, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r118;
	// end inline asm
	cvt.u16.u32 	%rs4, %r2;
	and.b16  	%rs1, %rs4, 4;
	setp.eq.s16 	%p6, %rs1, 0;
	selp.b32 	%r161, %r127, %r111, %p6;
	shfl.sync.bfly.b32	%r162, %r161, 4, 31, -1;
	selp.b32 	%r249, %r111, %r162, %p6;
	selp.b32 	%r313, %r162, %r127, %p6;
	selp.b32 	%r163, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	selp.b32 	%r255, %r115, %r164, %p6;
	selp.b32 	%r319, %r164, %r131, %p6;
	selp.b32 	%r165, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r166, %r165, 4, 31, -1;
	selp.b32 	%r281, %r119, %r166, %p6;
	selp.b32 	%r345, %r166, %r135, %p6;
	selp.b32 	%r167, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r168, %r167, 4, 31, -1;
	selp.b32 	%r287, %r123, %r168, %p6;
	selp.b32 	%r351, %r168, %r139, %p6;
	shl.b32 	%r169, %r2, 2;
	and.b32  	%r18, %r169, 12;
	shr.u32 	%r19, %r2, 2;
	shl.b32 	%r170, %r1, 11;
	shl.b32 	%r171, %r3, 4;
	and.b32  	%r20, %r171, 16;
	and.b32  	%r21, %r170, 30720;
	shl.b32 	%r172, %r3, 3;
	and.b32  	%r22, %r172, 16;
	or.b32  	%r173, %r18, %r22;
	or.b32  	%r23, %r173, %r4;
	or.b32  	%r174, %r20, %r19;
	mul.lo.s32 	%r175, %r174, 17;
	shr.u32 	%r176, %r3, 1;
	mul.lo.s32 	%r177, %r176, 544;
	or.b32  	%r24, %r177, %r18;
	add.s32 	%r178, %r24, %r175;
	mul.wide.u32 	%rd35, %r178, 4;
	mov.u64 	%rd36, shmem;
	add.s64 	%rd7, %rd36, %rd35;
	cvt.u64.u32 	%rd37, %r175;
	cvt.u64.u32 	%rd38, %r24;
	add.s64 	%rd39, %rd38, %rd37;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd8, %rd36, %rd40;
	or.b32  	%r179, %r174, 8;
	mul.lo.s32 	%r180, %r179, 17;
	add.s32 	%r181, %r24, %r180;
	mul.wide.u32 	%rd41, %r181, 4;
	add.s64 	%rd9, %rd36, %rd41;
	cvt.u64.u32 	%rd42, %r180;
	add.s64 	%rd43, %rd38, %rd42;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd10, %rd36, %rd44;
	shl.b32 	%r182, %r2, 1;
	and.b32  	%r25, %r182, 6;
	and.b32  	%r183, %r172, 8;
	or.b32  	%r184, %r183, %r19;
	mul.lo.s32 	%r185, %r176, 640;
	or.b32  	%r26, %r184, %r185;
	and.b32  	%r186, %r2, 7;
	mul.lo.s32 	%r187, %r186, 20;
	add.s32 	%r188, %r187, %r5;
	mul.wide.u32 	%rd45, %r188, 4;
	add.s64 	%rd46, %rd36, 4352;
	add.s64 	%rd11, %rd46, %rd45;
	or.b32  	%r189, %r5, 640;
	add.s32 	%r190, %r189, %r187;
	mul.wide.u32 	%rd47, %r190, 4;
	add.s64 	%rd12, %rd46, %rd47;
	add.s32 	%r191, %r187, 160;
	add.s32 	%r192, %r191, %r5;
	mul.wide.u32 	%rd48, %r192, 4;
	add.s64 	%rd13, %rd46, %rd48;
	add.s32 	%r193, %r189, %r191;
	mul.wide.u32 	%rd49, %r193, 4;
	add.s64 	%rd14, %rd46, %rd49;
	add.s32 	%r194, %r187, 320;
	add.s32 	%r195, %r194, %r5;
	mul.wide.u32 	%rd50, %r195, 4;
	add.s64 	%rd15, %rd46, %rd50;
	add.s32 	%r196, %r189, %r194;
	mul.wide.u32 	%rd51, %r196, 4;
	add.s64 	%rd16, %rd46, %rd51;
	or.b32  	%r197, %r2, 24;
	mul.lo.s32 	%r198, %r197, 20;
	add.s32 	%r199, %r198, %r5;
	mul.wide.u32 	%rd52, %r199, 4;
	add.s64 	%rd17, %rd46, %rd52;
	add.s32 	%r200, %r189, %r198;
	mul.wide.u32 	%rd53, %r200, 4;
	add.s64 	%rd18, %rd46, %rd53;
	shl.b32 	%r27, %r72, %r8;
	min.u32 	%r28, %r145, 31;
	shl.b32 	%r29, %r72, %r9;
	min.u32 	%r30, %r144, 31;
	and.b16  	%rs2, %rs4, 1;
	and.b16  	%rs3, %rs4, 2;
	and.b32  	%r202, %r148, 32;
	shl.b32 	%r203, %r2, 5;
	and.b32  	%r204, %r203, 64;
	shl.b32 	%r205, %r2, 4;
	and.b32  	%r206, %r205, 16;
	shl.b32 	%r207, %r1, 12;
	and.b32  	%r208, %r207, 8323072;
	shl.b32 	%r209, %r3, 25;
	shl.b32 	%r210, %r2, 20;
	and.b32  	%r211, %r210, 25165824;
	or.b32  	%r212, %r211, %r209;
	or.b32  	%r213, %r212, %r208;
	or.b32  	%r214, %r213, %r206;
	or.b32  	%r215, %r214, %r21;
	or.b32  	%r216, %r215, %r202;
	or.b32  	%r31, %r216, %r204;
	or.b32  	%r217, %r215, %r204;
	or.b32  	%r218, %r202, %r217;
	add.s32 	%r32, %r218, 32768;
	mov.u32 	%r251, 0;
	mov.u32 	%r647, %r251;
LBB0_7:                                 // %L843
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	mov.u32 	%r648, %r251;
	mov.u32 	%r649, %r251;
	mov.u32 	%r650, %r251;
	mov.u32 	%r651, %r251;
	mov.u32 	%r652, %r251;
	mov.u32 	%r653, %r251;
	mov.u32 	%r654, %r251;
	mov.u32 	%r655, %r251;
	mov.u32 	%r656, %r251;
	mov.u32 	%r657, %r251;
	mov.u32 	%r658, %r251;
	mov.u32 	%r659, %r251;
	mov.u32 	%r660, %r251;
LBB0_8:                                 // %L846
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r221, %r648, %r647;
	or.b32  	%r222, %r221, %r19;
	or.b32  	%r223, %r222, %r21;
	or.b32  	%r224, %r223, %r20;
	shl.b32 	%r225, %r224, 12;
	or.b32  	%r226, %r225, %r18;
	or.b32  	%r227, %r226, %r22;
	or.b32  	%r228, %r227, %r4;
	mul.wide.s32 	%rd54, %r228, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r229, %r230, %r231, %r232}, [%rd55];
	or.b32  	%r233, %r23, %r225;
	or.b32  	%r234, %r233, 32768;
	mul.wide.s32 	%rd56, %r234, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v4.u32 	{%r235, %r236, %r237, %r238}, [%rd57];
	st.shared.u32 	[%rd7], %r229;
	st.shared.u32 	[%rd8+4], %r230;
	st.shared.u32 	[%rd8+8], %r231;
	st.shared.u32 	[%rd8+12], %r232;
	st.shared.u32 	[%rd9], %r235;
	st.shared.u32 	[%rd10+4], %r236;
	st.shared.u32 	[%rd10+8], %r237;
	st.shared.u32 	[%rd10+12], %r238;
	bar.sync 	0;
	mov.u32 	%r661, %r251;
LBB0_9:                                 // %L2731
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r373, %r661, %r19;
	mad.lo.s32 	%r374, %r373, 17, %r24;
	mul.wide.u32 	%rd58, %r374, 4;
	add.s64 	%rd60, %rd36, %rd58;
	ld.shared.u32 	%r240, [%rd60];
	mov.u32 	%r241, 134744072;
	mov.u32 	%r407, 252645135;
	// begin inline asm
	lop3.b32 %r239, %r240, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r375, %r239, 2021161080;
	xor.b32  	%r250, %r375, -2139062144;
	shr.u32 	%r244, %r240, 4;
	// begin inline asm
	lop3.b32 %r243, %r244, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r376, %r243, 2021161080;
	xor.b32  	%r256, %r376, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r247, %r248}, {%r249}, {%r250}, {%r251, %r251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r253, %r254}, {%r255}, {%r256}, {%r251, %r251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r259, %r260}, {%r249}, {%r256}, {%r251, %r251};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r265, %r266}, {%r255}, {%r250}, {%r259, %r260};
	// end inline asm
	ld.shared.u32 	%r272, [%rd60+4];
	// begin inline asm
	lop3.b32 %r271, %r272, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r377, %r271, 2021161080;
	xor.b32  	%r282, %r377, -2139062144;
	shr.u32 	%r276, %r272, 4;
	// begin inline asm
	lop3.b32 %r275, %r276, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r378, %r275, 2021161080;
	xor.b32  	%r288, %r378, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r279, %r280}, {%r281}, {%r282}, {%r247, %r248};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r285, %r286}, {%r287}, {%r288}, {%r253, %r254};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r291, %r292}, {%r281}, {%r288}, {%r265, %r266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r297, %r298}, {%r287}, {%r282}, {%r291, %r292};
	// end inline asm
	ld.shared.u32 	%r304, [%rd60+8];
	// begin inline asm
	lop3.b32 %r303, %r304, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r379, %r303, 2021161080;
	xor.b32  	%r314, %r379, -2139062144;
	shr.u32 	%r308, %r304, 4;
	// begin inline asm
	lop3.b32 %r307, %r308, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r380, %r307, 2021161080;
	xor.b32  	%r320, %r380, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r311, %r312}, {%r313}, {%r314}, {%r279, %r280};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r317, %r318}, {%r319}, {%r320}, {%r285, %r286};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r323, %r324}, {%r313}, {%r320}, {%r297, %r298};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r329, %r330}, {%r319}, {%r314}, {%r323, %r324};
	// end inline asm
	ld.shared.u32 	%r336, [%rd60+12];
	// begin inline asm
	lop3.b32 %r335, %r336, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r381, %r335, 2021161080;
	xor.b32  	%r346, %r381, -2139062144;
	shr.u32 	%r340, %r336, 4;
	// begin inline asm
	lop3.b32 %r339, %r340, %r241, %r407, 40;
	// end inline asm
	add.s32 	%r382, %r339, 2021161080;
	xor.b32  	%r352, %r382, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r343, %r344}, {%r345}, {%r346}, {%r311, %r312};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r349, %r350}, {%r351}, {%r352}, {%r317, %r318};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r355, %r356}, {%r345}, {%r352}, {%r329, %r330};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r361, %r362}, {%r351}, {%r346}, {%r355, %r356};
	// end inline asm
	sub.s32 	%r383, %r343, %r349;
	add.s32 	%r384, %r383, 2;
	shr.s32 	%r369, %r384, 2;
	add.s32 	%r385, %r361, 2;
	shr.s32 	%r368, %r385, 2;
	sub.s32 	%r386, %r344, %r350;
	add.s32 	%r387, %r386, 2;
	shr.s32 	%r372, %r387, 2;
	add.s32 	%r388, %r362, 2;
	shr.s32 	%r371, %r388, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r367, %r368, %r369;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r370, %r371, %r372;
	// end inline asm
	or.b32  	%r389, %r661, %r25;
	mad.lo.s32 	%r390, %r389, 20, %r26;
	mul.wide.u32 	%rd61, %r390, 4;
	add.s64 	%rd63, %rd46, %rd61;
	st.shared.u32 	[%rd63], %r367;
	add.s32 	%r391, %r390, 20;
	mul.wide.u32 	%rd64, %r391, 4;
	add.s64 	%rd65, %rd46, %rd64;
	st.shared.u32 	[%rd65], %r370;
	add.s32 	%r661, %r661, 8;
	setp.ne.s32 	%p7, %r661, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L3997
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r428, [%rd11];
	ld.shared.u32 	%r429, [%rd12];
	ld.shared.u32 	%r430, [%rd13];
	ld.shared.u32 	%r431, [%rd14];
	ld.shared.u32 	%r432, [%rd15];
	ld.shared.u32 	%r433, [%rd16];
	ld.shared.u32 	%r434, [%rd17];
	ld.shared.u32 	%r435, [%rd18];
	cvt.s32.s16 	%r436, %r428;
	shr.s32 	%r437, %r428, 16;
	cvt.s32.s16 	%r438, %r429;
	shr.s32 	%r439, %r429, 16;
	cvt.s32.s16 	%r440, %r430;
	shr.s32 	%r441, %r430, 16;
	cvt.s32.s16 	%r442, %r431;
	shr.s32 	%r443, %r431, 16;
	cvt.s32.s16 	%r444, %r432;
	shr.s32 	%r445, %r432, 16;
	cvt.s32.s16 	%r446, %r433;
	shr.s32 	%r447, %r433, 16;
	cvt.s32.s16 	%r448, %r434;
	shr.s32 	%r449, %r434, 16;
	cvt.s32.s16 	%r450, %r435;
	shr.s32 	%r451, %r435, 16;
	add.s32 	%r452, %r436, %r27;
	shr.s32 	%r453, %r452, %r28;
	add.s32 	%r454, %r437, %r27;
	shr.s32 	%r455, %r454, %r28;
	add.s32 	%r456, %r438, %r29;
	shr.s32 	%r457, %r456, %r30;
	add.s32 	%r458, %r439, %r29;
	shr.s32 	%r459, %r458, %r30;
	add.s32 	%r460, %r440, %r27;
	shr.s32 	%r461, %r460, %r28;
	add.s32 	%r462, %r441, %r27;
	shr.s32 	%r463, %r462, %r28;
	add.s32 	%r464, %r442, %r29;
	shr.s32 	%r465, %r464, %r30;
	add.s32 	%r466, %r443, %r29;
	shr.s32 	%r467, %r466, %r30;
	add.s32 	%r468, %r444, %r27;
	shr.s32 	%r469, %r468, %r28;
	add.s32 	%r470, %r445, %r27;
	shr.s32 	%r471, %r470, %r28;
	add.s32 	%r472, %r446, %r29;
	shr.s32 	%r473, %r472, %r30;
	add.s32 	%r474, %r447, %r29;
	shr.s32 	%r475, %r474, %r30;
	add.s32 	%r476, %r448, %r27;
	shr.s32 	%r477, %r476, %r28;
	add.s32 	%r478, %r449, %r27;
	shr.s32 	%r479, %r478, %r28;
	add.s32 	%r480, %r450, %r29;
	shr.s32 	%r481, %r480, %r30;
	add.s32 	%r482, %r451, %r29;
	shr.s32 	%r483, %r482, %r30;
	max.s32 	%r484, %r453, -7;
	min.s32 	%r397, %r484, 7;
	max.s32 	%r485, %r455, -7;
	min.s32 	%r404, %r485, 7;
	max.s32 	%r486, %r457, -7;
	min.s32 	%r415, %r486, 7;
	max.s32 	%r487, %r459, -7;
	min.s32 	%r422, %r487, 7;
	max.s32 	%r488, %r461, -7;
	min.s32 	%r396, %r488, 7;
	max.s32 	%r489, %r463, -7;
	min.s32 	%r403, %r489, 7;
	max.s32 	%r490, %r465, -7;
	min.s32 	%r414, %r490, 7;
	max.s32 	%r491, %r467, -7;
	min.s32 	%r421, %r491, 7;
	max.s32 	%r492, %r469, -7;
	min.s32 	%r394, %r492, 7;
	max.s32 	%r493, %r471, -7;
	min.s32 	%r401, %r493, 7;
	max.s32 	%r494, %r473, -7;
	min.s32 	%r412, %r494, 7;
	max.s32 	%r495, %r475, -7;
	min.s32 	%r419, %r495, 7;
	max.s32 	%r496, %r477, -7;
	min.s32 	%r393, %r496, 7;
	max.s32 	%r497, %r479, -7;
	min.s32 	%r400, %r497, 7;
	max.s32 	%r498, %r481, -7;
	min.s32 	%r411, %r498, 7;
	max.s32 	%r499, %r483, -7;
	min.s32 	%r418, %r499, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r392, %r393, %r394, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r395, %r396, %r397, %r392;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r399, %r400, %r401, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r402, %r403, %r404, %r399;
	// end inline asm
	shl.b32 	%r409, %r402, 4;
	// begin inline asm
	lop3.b32 %r518, %r407, %r395, %r409, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r410, %r411, %r412, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r413, %r414, %r415, %r410;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r417, %r418, %r419, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r420, %r421, %r422, %r417;
	// end inline asm
	shl.b32 	%r427, %r420, 4;
	// begin inline asm
	lop3.b32 %r526, %r407, %r413, %r427, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r648, 0;
	selp.b32 	%r659, %r518, %r659, %p8;
	selp.b32 	%r660, %r518, %r660, %p8;
	setp.eq.s32 	%p9, %r648, 32;
	selp.b32 	%r651, %r518, %r651, %p9;
	selp.b32 	%r652, %r518, %r652, %p9;
	setp.eq.s32 	%p10, %r648, 64;
	selp.b32 	%r657, %r518, %r657, %p10;
	selp.b32 	%r658, %r518, %r658, %p10;
	selp.b32 	%r655, %r526, %r655, %p8;
	selp.b32 	%r656, %r526, %r656, %p8;
	selp.b32 	%r649, %r526, %r649, %p9;
	selp.b32 	%r650, %r526, %r650, %p9;
	selp.b32 	%r653, %r526, %r653, %p10;
	selp.b32 	%r654, %r526, %r654, %p10;
	add.s32 	%r63, %r648, 32;
	setp.ne.s32 	%p11, %r648, 96;
	mov.u32 	%r648, %r63;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L5551
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	setp.eq.s16 	%p13, %rs2, 0;
	// begin inline asm
	prmt.b32 %r500, %r659, %r651, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r504, %r660, %r652, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r508, %r655, %r649, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r512, %r656, %r650, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r516, %r657, %r518, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r520, %r658, %r518, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r653, %r526, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r654, %r526, %r118;
	// end inline asm
	selp.b32 	%r596, %r504, %r500, %p13;
	shfl.sync.bfly.b32	%r597, %r596, 1, 31, -1;
	selp.b32 	%r533, %r500, %r597, %p13;
	selp.b32 	%r534, %r597, %r504, %p13;
	selp.b32 	%r598, %r512, %r508, %p13;
	shfl.sync.bfly.b32	%r599, %r598, 1, 31, -1;
	selp.b32 	%r541, %r508, %r599, %p13;
	selp.b32 	%r542, %r599, %r512, %p13;
	selp.b32 	%r600, %r520, %r516, %p13;
	shfl.sync.bfly.b32	%r601, %r600, 1, 31, -1;
	selp.b32 	%r549, %r516, %r601, %p13;
	selp.b32 	%r550, %r601, %r520, %p13;
	selp.b32 	%r602, %r528, %r524, %p13;
	shfl.sync.bfly.b32	%r603, %r602, 1, 31, -1;
	selp.b32 	%r557, %r524, %r603, %p13;
	selp.b32 	%r558, %r603, %r528, %p13;
	// begin inline asm
	prmt.b32 %r532, %r533, %r534, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r533, %r534, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r541, %r542, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r541, %r542, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r549, %r550, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r549, %r550, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r557, %r558, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r560, %r557, %r558, %r118;
	// end inline asm
	selp.b32 	%r604, %r548, %r532, %p12;
	shfl.sync.bfly.b32	%r605, %r604, 2, 31, -1;
	selp.b32 	%r565, %r532, %r605, %p12;
	selp.b32 	%r566, %r605, %r548, %p12;
	selp.b32 	%r606, %r556, %r540, %p12;
	shfl.sync.bfly.b32	%r607, %r606, 2, 31, -1;
	selp.b32 	%r573, %r540, %r607, %p12;
	selp.b32 	%r574, %r607, %r556, %p12;
	selp.b32 	%r608, %r552, %r536, %p12;
	shfl.sync.bfly.b32	%r609, %r608, 2, 31, -1;
	selp.b32 	%r581, %r536, %r609, %p12;
	selp.b32 	%r582, %r609, %r552, %p12;
	selp.b32 	%r610, %r560, %r544, %p12;
	shfl.sync.bfly.b32	%r611, %r610, 2, 31, -1;
	selp.b32 	%r589, %r544, %r611, %p12;
	selp.b32 	%r590, %r611, %r560, %p12;
	// begin inline asm
	prmt.b32 %r564, %r565, %r566, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r565, %r566, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r573, %r574, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r573, %r574, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r581, %r582, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r581, %r582, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r589, %r590, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r589, %r590, %r86;
	// end inline asm
	selp.b32 	%r612, %r580, %r564, %p6;
	shfl.sync.bfly.b32	%r613, %r612, 4, 31, -1;
	selp.b32 	%r614, %r564, %r613, %p6;
	selp.b32 	%r615, %r613, %r580, %p6;
	selp.b32 	%r616, %r588, %r572, %p6;
	shfl.sync.bfly.b32	%r617, %r616, 4, 31, -1;
	selp.b32 	%r618, %r572, %r617, %p6;
	selp.b32 	%r619, %r617, %r588, %p6;
	selp.b32 	%r620, %r584, %r568, %p6;
	shfl.sync.bfly.b32	%r621, %r620, 4, 31, -1;
	selp.b32 	%r622, %r568, %r621, %p6;
	selp.b32 	%r623, %r621, %r584, %p6;
	selp.b32 	%r624, %r592, %r576, %p6;
	shfl.sync.bfly.b32	%r625, %r624, 4, 31, -1;
	selp.b32 	%r626, %r576, %r625, %p6;
	selp.b32 	%r627, %r625, %r592, %p6;
	selp.b32 	%r628, %r622, %r614, %p13;
	shfl.sync.bfly.b32	%r629, %r628, 1, 31, -1;
	selp.b32 	%r630, %r614, %r629, %p13;
	selp.b32 	%r631, %r629, %r622, %p13;
	selp.b32 	%r632, %r626, %r618, %p13;
	shfl.sync.bfly.b32	%r633, %r632, 1, 31, -1;
	selp.b32 	%r634, %r618, %r633, %p13;
	selp.b32 	%r635, %r633, %r626, %p13;
	selp.b32 	%r636, %r623, %r615, %p13;
	shfl.sync.bfly.b32	%r637, %r636, 1, 31, -1;
	selp.b32 	%r638, %r615, %r637, %p13;
	selp.b32 	%r639, %r637, %r623, %p13;
	selp.b32 	%r640, %r627, %r619, %p13;
	shfl.sync.bfly.b32	%r641, %r640, 1, 31, -1;
	selp.b32 	%r642, %r619, %r641, %p13;
	selp.b32 	%r643, %r641, %r627, %p13;
	or.b32  	%r644, %r31, %r647;
	cvt.u64.u32 	%rd66, %r644;
	add.s64 	%rd67, %rd4, %rd66;
	st.global.v4.u32 	[%rd67], {%r630, %r638, %r631, %r639};
	or.b32  	%r645, %r32, %r647;
	cvt.u64.u32 	%rd68, %r645;
	add.s64 	%rd69, %rd4, %rd68;
	st.global.v4.u32 	[%rd69], {%r634, %r642, %r635, %r643};
	add.s32 	%r64, %r647, 128;
	setp.ne.s32 	%p15, %r647, 1920;
	mov.u32 	%r647, %r64;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6258
	mov.u32 	%r646, 0;
	st.global.u32 	[%rd6], %r646;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L336
	mov.u32 	%r78, 2;
	st.global.u32 	[%rd6], %r78;
	mov.u64 	%rd29, exception500;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
