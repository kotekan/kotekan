// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<660>;
	.reg .b64 	%rd<68>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r65, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r66, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r67, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r68, %r2, 7;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r69, %r3, 5;
	or.b32  	%r70, %r68, %r1;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd24, %r71, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd6], %r72;
	shl.b32 	%r73, %r2, 1;
	and.b32  	%r4, %r73, 4064;
	shr.u32 	%r74, %r1, 3;
	shl.b32 	%r75, %r3, 2;
	or.b32  	%r5, %r74, %r75;
	or.b32  	%r76, %r5, %r4;
	mul.wide.u32 	%rd25, %r76, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r6, [%rd26];
	or.b32  	%r77, %r76, 16;
	mul.wide.u32 	%rd27, %r77, 4;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.u32 	%r7, [%rd28];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L426
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r144, %r7, -2;
	add.s32 	%r145, %r6, -2;
	shl.b32 	%r146, %r2, 6;
	and.b32  	%r147, %r146, 130048;
	shl.b32 	%r148, %r3, 8;
	and.b32  	%r149, %r148, 512;
	shl.b32 	%r150, %r1, 3;
	or.b32  	%r151, %r148, %r150;
	and.b32  	%r152, %r151, 448;
	and.b32  	%r153, %r1, 4;
	and.b32  	%r154, %r150, 24;
	or.b32  	%r155, %r153, %r154;
	or.b32  	%r156, %r147, %r149;
	or.b32  	%r157, %r156, %r152;
	or.b32  	%r158, %r157, %r155;
	shl.b32 	%r159, %r158, 2;
	cvt.u64.u32 	%rd31, %r159;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd32];
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd32+128];
	mov.u32 	%r82, 21520;
	// begin inline asm
	prmt.b32 %r112, %r80, %r81, %r82;
	// end inline asm
	mov.u32 	%r86, 30258;
	// begin inline asm
	prmt.b32 %r113, %r80, %r81, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r86;
	// end inline asm
	mov.u32 	%r114, 25152;
	// begin inline asm
	prmt.b32 %r111, %r112, %r113, %r114;
	// end inline asm
	mov.u32 	%r118, 29521;
	// begin inline asm
	prmt.b32 %r115, %r112, %r113, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r118;
	// end inline asm
	cvt.u16.u32 	%rs4, %r1;
	and.b16  	%rs1, %rs4, 4;
	setp.eq.s16 	%p6, %rs1, 0;
	selp.b32 	%r160, %r127, %r111, %p6;
	shfl.sync.bfly.b32	%r161, %r160, 4, 31, -1;
	selp.b32 	%r247, %r111, %r161, %p6;
	selp.b32 	%r311, %r161, %r127, %p6;
	selp.b32 	%r162, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r163, %r162, 4, 31, -1;
	selp.b32 	%r253, %r115, %r163, %p6;
	selp.b32 	%r317, %r163, %r131, %p6;
	selp.b32 	%r164, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r165, %r164, 4, 31, -1;
	selp.b32 	%r279, %r119, %r165, %p6;
	selp.b32 	%r343, %r165, %r135, %p6;
	selp.b32 	%r166, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r285, %r123, %r167, %p6;
	selp.b32 	%r349, %r167, %r139, %p6;
	shl.b32 	%r168, %r3, 3;
	and.b32  	%r169, %r168, 16;
	shl.b32 	%r170, %r1, 2;
	and.b32  	%r18, %r170, 12;
	shl.b32 	%r171, %r3, 4;
	and.b32  	%r19, %r171, 16;
	shl.b32 	%r172, %r2, 11;
	shr.u32 	%r20, %r1, 2;
	and.b32  	%r21, %r172, 30720;
	or.b32  	%r22, %r4, %r169;
	or.b32  	%r23, %r22, %r18;
	shr.u32 	%r173, %r3, 1;
	mul.lo.s32 	%r174, %r173, 544;
	or.b32  	%r175, %r19, %r20;
	mul.lo.s32 	%r176, %r175, 17;
	or.b32  	%r24, %r174, %r18;
	add.s32 	%r177, %r24, %r176;
	mul.wide.u32 	%rd33, %r177, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd7, %rd34, %rd33;
	cvt.u64.u32 	%rd35, %r176;
	cvt.u64.u32 	%rd36, %r24;
	add.s64 	%rd37, %rd36, %rd35;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd8, %rd34, %rd38;
	or.b32  	%r178, %r175, 8;
	mul.lo.s32 	%r179, %r178, 17;
	add.s32 	%r180, %r24, %r179;
	mul.wide.u32 	%rd39, %r180, 4;
	add.s64 	%rd9, %rd34, %rd39;
	cvt.u64.u32 	%rd40, %r179;
	add.s64 	%rd41, %rd36, %rd40;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd10, %rd34, %rd42;
	and.b32  	%r181, %r168, 8;
	or.b32  	%r182, %r181, %r20;
	mul.lo.s32 	%r183, %r173, 640;
	shl.b32 	%r184, %r1, 1;
	and.b32  	%r25, %r184, 6;
	or.b32  	%r26, %r182, %r183;
	and.b32  	%r185, %r1, 7;
	mul.lo.s32 	%r186, %r185, 20;
	add.s32 	%r187, %r5, %r186;
	mul.wide.u32 	%rd43, %r187, 4;
	add.s64 	%rd44, %rd34, 4352;
	add.s64 	%rd11, %rd44, %rd43;
	or.b32  	%r188, %r5, 640;
	add.s32 	%r189, %r188, %r186;
	mul.wide.u32 	%rd45, %r189, 4;
	add.s64 	%rd12, %rd44, %rd45;
	add.s32 	%r190, %r186, 160;
	add.s32 	%r191, %r190, %r5;
	mul.wide.u32 	%rd46, %r191, 4;
	add.s64 	%rd13, %rd44, %rd46;
	add.s32 	%r192, %r188, %r190;
	mul.wide.u32 	%rd47, %r192, 4;
	add.s64 	%rd14, %rd44, %rd47;
	add.s32 	%r193, %r186, 320;
	add.s32 	%r194, %r193, %r5;
	mul.wide.u32 	%rd48, %r194, 4;
	add.s64 	%rd15, %rd44, %rd48;
	add.s32 	%r195, %r188, %r193;
	mul.wide.u32 	%rd49, %r195, 4;
	add.s64 	%rd16, %rd44, %rd49;
	or.b32  	%r196, %r1, 24;
	mul.lo.s32 	%r197, %r196, 20;
	add.s32 	%r198, %r5, %r197;
	mul.wide.u32 	%rd50, %r198, 4;
	add.s64 	%rd17, %rd44, %rd50;
	add.s32 	%r199, %r188, %r197;
	mul.wide.u32 	%rd51, %r199, 4;
	add.s64 	%rd18, %rd44, %rd51;
	shl.b32 	%r27, %r72, %r8;
	min.u32 	%r28, %r145, 31;
	shl.b32 	%r29, %r72, %r9;
	min.u32 	%r30, %r144, 31;
	and.b16  	%rs2, %rs4, 1;
	and.b16  	%rs3, %rs4, 2;
	shl.b32 	%r201, %r2, 12;
	and.b32  	%r202, %r201, 8323072;
	shl.b32 	%r203, %r1, 4;
	and.b32  	%r204, %r203, 16;
	and.b32  	%r205, %r150, 32;
	shl.b32 	%r206, %r1, 5;
	and.b32  	%r207, %r206, 64;
	shl.b32 	%r208, %r3, 25;
	shl.b32 	%r209, %r1, 20;
	and.b32  	%r210, %r209, 25165824;
	or.b32  	%r211, %r210, %r208;
	or.b32  	%r212, %r211, %r202;
	or.b32  	%r213, %r212, %r21;
	or.b32  	%r214, %r213, %r207;
	or.b32  	%r215, %r214, %r204;
	or.b32  	%r31, %r215, %r205;
	or.b32  	%r216, %r214, %r205;
	or.b32  	%r217, %r204, %r216;
	add.s32 	%r32, %r217, 32768;
	mov.u32 	%r249, 0;
	mov.u32 	%r645, %r249;
LBB0_7:                                 // %L839
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	mov.u32 	%r646, %r249;
	mov.u32 	%r647, %r249;
	mov.u32 	%r648, %r249;
	mov.u32 	%r649, %r249;
	mov.u32 	%r650, %r249;
	mov.u32 	%r651, %r249;
	mov.u32 	%r652, %r249;
	mov.u32 	%r653, %r249;
	mov.u32 	%r654, %r249;
	mov.u32 	%r655, %r249;
	mov.u32 	%r656, %r249;
	mov.u32 	%r657, %r249;
	mov.u32 	%r658, %r249;
LBB0_8:                                 // %L842
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r220, %r646, %r645;
	or.b32  	%r221, %r220, %r20;
	or.b32  	%r222, %r221, %r19;
	or.b32  	%r223, %r222, %r21;
	shl.b32 	%r224, %r223, 12;
	or.b32  	%r225, %r224, %r22;
	or.b32  	%r226, %r225, %r18;
	mul.wide.s32 	%rd52, %r226, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r227, %r228, %r229, %r230}, [%rd53];
	or.b32  	%r231, %r23, %r224;
	or.b32  	%r232, %r231, 32768;
	mul.wide.s32 	%rd54, %r232, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r233, %r234, %r235, %r236}, [%rd55];
	st.shared.u32 	[%rd7], %r227;
	st.shared.u32 	[%rd8+4], %r228;
	st.shared.u32 	[%rd8+8], %r229;
	st.shared.u32 	[%rd8+12], %r230;
	st.shared.u32 	[%rd9], %r233;
	st.shared.u32 	[%rd10+4], %r234;
	st.shared.u32 	[%rd10+8], %r235;
	st.shared.u32 	[%rd10+12], %r236;
	bar.sync 	0;
	mov.u32 	%r659, %r249;
LBB0_9:                                 // %L2712
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r371, %r659, %r20;
	mad.lo.s32 	%r372, %r371, 17, %r24;
	mul.wide.u32 	%rd56, %r372, 4;
	add.s64 	%rd58, %rd34, %rd56;
	ld.shared.u32 	%r238, [%rd58];
	mov.u32 	%r239, 134744072;
	mov.u32 	%r405, 252645135;
	// begin inline asm
	lop3.b32 %r237, %r238, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r373, %r237, 2021161080;
	xor.b32  	%r248, %r373, -2139062144;
	shr.u32 	%r242, %r238, 4;
	// begin inline asm
	lop3.b32 %r241, %r242, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r374, %r241, 2021161080;
	xor.b32  	%r254, %r374, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r245, %r246}, {%r247}, {%r248}, {%r249, %r249};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r251, %r252}, {%r253}, {%r254}, {%r249, %r249};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r257, %r258}, {%r247}, {%r254}, {%r249, %r249};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r263, %r264}, {%r253}, {%r248}, {%r257, %r258};
	// end inline asm
	ld.shared.u32 	%r270, [%rd58+4];
	// begin inline asm
	lop3.b32 %r269, %r270, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r375, %r269, 2021161080;
	xor.b32  	%r280, %r375, -2139062144;
	shr.u32 	%r274, %r270, 4;
	// begin inline asm
	lop3.b32 %r273, %r274, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r376, %r273, 2021161080;
	xor.b32  	%r286, %r376, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r277, %r278}, {%r279}, {%r280}, {%r245, %r246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r283, %r284}, {%r285}, {%r286}, {%r251, %r252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r289, %r290}, {%r279}, {%r286}, {%r263, %r264};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r295, %r296}, {%r285}, {%r280}, {%r289, %r290};
	// end inline asm
	ld.shared.u32 	%r302, [%rd58+8];
	// begin inline asm
	lop3.b32 %r301, %r302, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r377, %r301, 2021161080;
	xor.b32  	%r312, %r377, -2139062144;
	shr.u32 	%r306, %r302, 4;
	// begin inline asm
	lop3.b32 %r305, %r306, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r378, %r305, 2021161080;
	xor.b32  	%r318, %r378, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r309, %r310}, {%r311}, {%r312}, {%r277, %r278};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r315, %r316}, {%r317}, {%r318}, {%r283, %r284};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r321, %r322}, {%r311}, {%r318}, {%r295, %r296};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r327, %r328}, {%r317}, {%r312}, {%r321, %r322};
	// end inline asm
	ld.shared.u32 	%r334, [%rd58+12];
	// begin inline asm
	lop3.b32 %r333, %r334, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r379, %r333, 2021161080;
	xor.b32  	%r344, %r379, -2139062144;
	shr.u32 	%r338, %r334, 4;
	// begin inline asm
	lop3.b32 %r337, %r338, %r239, %r405, 40;
	// end inline asm
	add.s32 	%r380, %r337, 2021161080;
	xor.b32  	%r350, %r380, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r341, %r342}, {%r343}, {%r344}, {%r309, %r310};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r347, %r348}, {%r349}, {%r350}, {%r315, %r316};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r353, %r354}, {%r343}, {%r350}, {%r327, %r328};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r359, %r360}, {%r349}, {%r344}, {%r353, %r354};
	// end inline asm
	sub.s32 	%r381, %r341, %r347;
	add.s32 	%r382, %r381, 2;
	shr.s32 	%r367, %r382, 2;
	add.s32 	%r383, %r359, 2;
	shr.s32 	%r366, %r383, 2;
	sub.s32 	%r384, %r342, %r348;
	add.s32 	%r385, %r384, 2;
	shr.s32 	%r370, %r385, 2;
	add.s32 	%r386, %r360, 2;
	shr.s32 	%r369, %r386, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r365, %r366, %r367;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r368, %r369, %r370;
	// end inline asm
	or.b32  	%r387, %r659, %r25;
	mad.lo.s32 	%r388, %r387, 20, %r26;
	mul.wide.u32 	%rd59, %r388, 4;
	add.s64 	%rd61, %rd44, %rd59;
	st.shared.u32 	[%rd61], %r365;
	add.s32 	%r389, %r388, 20;
	mul.wide.u32 	%rd62, %r389, 4;
	add.s64 	%rd63, %rd44, %rd62;
	st.shared.u32 	[%rd63], %r368;
	add.s32 	%r659, %r659, 8;
	setp.ne.s32 	%p7, %r659, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L3974
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r426, [%rd11];
	ld.shared.u32 	%r427, [%rd12];
	ld.shared.u32 	%r428, [%rd13];
	ld.shared.u32 	%r429, [%rd14];
	ld.shared.u32 	%r430, [%rd15];
	ld.shared.u32 	%r431, [%rd16];
	ld.shared.u32 	%r432, [%rd17];
	ld.shared.u32 	%r433, [%rd18];
	cvt.s32.s16 	%r434, %r426;
	shr.s32 	%r435, %r426, 16;
	cvt.s32.s16 	%r436, %r427;
	shr.s32 	%r437, %r427, 16;
	cvt.s32.s16 	%r438, %r428;
	shr.s32 	%r439, %r428, 16;
	cvt.s32.s16 	%r440, %r429;
	shr.s32 	%r441, %r429, 16;
	cvt.s32.s16 	%r442, %r430;
	shr.s32 	%r443, %r430, 16;
	cvt.s32.s16 	%r444, %r431;
	shr.s32 	%r445, %r431, 16;
	cvt.s32.s16 	%r446, %r432;
	shr.s32 	%r447, %r432, 16;
	cvt.s32.s16 	%r448, %r433;
	shr.s32 	%r449, %r433, 16;
	add.s32 	%r450, %r434, %r27;
	shr.s32 	%r451, %r450, %r28;
	add.s32 	%r452, %r435, %r27;
	shr.s32 	%r453, %r452, %r28;
	add.s32 	%r454, %r436, %r29;
	shr.s32 	%r455, %r454, %r30;
	add.s32 	%r456, %r437, %r29;
	shr.s32 	%r457, %r456, %r30;
	add.s32 	%r458, %r438, %r27;
	shr.s32 	%r459, %r458, %r28;
	add.s32 	%r460, %r439, %r27;
	shr.s32 	%r461, %r460, %r28;
	add.s32 	%r462, %r440, %r29;
	shr.s32 	%r463, %r462, %r30;
	add.s32 	%r464, %r441, %r29;
	shr.s32 	%r465, %r464, %r30;
	add.s32 	%r466, %r442, %r27;
	shr.s32 	%r467, %r466, %r28;
	add.s32 	%r468, %r443, %r27;
	shr.s32 	%r469, %r468, %r28;
	add.s32 	%r470, %r444, %r29;
	shr.s32 	%r471, %r470, %r30;
	add.s32 	%r472, %r445, %r29;
	shr.s32 	%r473, %r472, %r30;
	add.s32 	%r474, %r446, %r27;
	shr.s32 	%r475, %r474, %r28;
	add.s32 	%r476, %r447, %r27;
	shr.s32 	%r477, %r476, %r28;
	add.s32 	%r478, %r448, %r29;
	shr.s32 	%r479, %r478, %r30;
	add.s32 	%r480, %r449, %r29;
	shr.s32 	%r481, %r480, %r30;
	max.s32 	%r482, %r451, -7;
	min.s32 	%r395, %r482, 7;
	max.s32 	%r483, %r453, -7;
	min.s32 	%r402, %r483, 7;
	max.s32 	%r484, %r455, -7;
	min.s32 	%r413, %r484, 7;
	max.s32 	%r485, %r457, -7;
	min.s32 	%r420, %r485, 7;
	max.s32 	%r486, %r459, -7;
	min.s32 	%r394, %r486, 7;
	max.s32 	%r487, %r461, -7;
	min.s32 	%r401, %r487, 7;
	max.s32 	%r488, %r463, -7;
	min.s32 	%r412, %r488, 7;
	max.s32 	%r489, %r465, -7;
	min.s32 	%r419, %r489, 7;
	max.s32 	%r490, %r467, -7;
	min.s32 	%r392, %r490, 7;
	max.s32 	%r491, %r469, -7;
	min.s32 	%r399, %r491, 7;
	max.s32 	%r492, %r471, -7;
	min.s32 	%r410, %r492, 7;
	max.s32 	%r493, %r473, -7;
	min.s32 	%r417, %r493, 7;
	max.s32 	%r494, %r475, -7;
	min.s32 	%r391, %r494, 7;
	max.s32 	%r495, %r477, -7;
	min.s32 	%r398, %r495, 7;
	max.s32 	%r496, %r479, -7;
	min.s32 	%r409, %r496, 7;
	max.s32 	%r497, %r481, -7;
	min.s32 	%r416, %r497, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r390, %r391, %r392, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r393, %r394, %r395, %r390;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r397, %r398, %r399, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r400, %r401, %r402, %r397;
	// end inline asm
	shl.b32 	%r407, %r400, 4;
	// begin inline asm
	lop3.b32 %r516, %r405, %r393, %r407, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r408, %r409, %r410, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r411, %r412, %r413, %r408;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r415, %r416, %r417, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r418, %r419, %r420, %r415;
	// end inline asm
	shl.b32 	%r425, %r418, 4;
	// begin inline asm
	lop3.b32 %r524, %r405, %r411, %r425, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r646, 0;
	selp.b32 	%r657, %r516, %r657, %p8;
	selp.b32 	%r658, %r516, %r658, %p8;
	setp.eq.s32 	%p9, %r646, 32;
	selp.b32 	%r649, %r516, %r649, %p9;
	selp.b32 	%r650, %r516, %r650, %p9;
	setp.eq.s32 	%p10, %r646, 64;
	selp.b32 	%r655, %r516, %r655, %p10;
	selp.b32 	%r656, %r516, %r656, %p10;
	selp.b32 	%r653, %r524, %r653, %p8;
	selp.b32 	%r654, %r524, %r654, %p8;
	selp.b32 	%r647, %r524, %r647, %p9;
	selp.b32 	%r648, %r524, %r648, %p9;
	selp.b32 	%r651, %r524, %r651, %p10;
	selp.b32 	%r652, %r524, %r652, %p10;
	add.s32 	%r63, %r646, 32;
	setp.ne.s32 	%p11, %r646, 96;
	mov.u32 	%r646, %r63;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L5528
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	setp.eq.s16 	%p13, %rs2, 0;
	// begin inline asm
	prmt.b32 %r498, %r657, %r649, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r658, %r650, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r653, %r647, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r654, %r648, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r655, %r516, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r656, %r516, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r651, %r524, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r652, %r524, %r118;
	// end inline asm
	selp.b32 	%r594, %r502, %r498, %p13;
	shfl.sync.bfly.b32	%r595, %r594, 1, 31, -1;
	selp.b32 	%r531, %r498, %r595, %p13;
	selp.b32 	%r532, %r595, %r502, %p13;
	selp.b32 	%r596, %r510, %r506, %p13;
	shfl.sync.bfly.b32	%r597, %r596, 1, 31, -1;
	selp.b32 	%r539, %r506, %r597, %p13;
	selp.b32 	%r540, %r597, %r510, %p13;
	selp.b32 	%r598, %r518, %r514, %p13;
	shfl.sync.bfly.b32	%r599, %r598, 1, 31, -1;
	selp.b32 	%r547, %r514, %r599, %p13;
	selp.b32 	%r548, %r599, %r518, %p13;
	selp.b32 	%r600, %r526, %r522, %p13;
	shfl.sync.bfly.b32	%r601, %r600, 1, 31, -1;
	selp.b32 	%r555, %r522, %r601, %p13;
	selp.b32 	%r556, %r601, %r526, %p13;
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r118;
	// end inline asm
	selp.b32 	%r602, %r546, %r530, %p12;
	shfl.sync.bfly.b32	%r603, %r602, 2, 31, -1;
	selp.b32 	%r563, %r530, %r603, %p12;
	selp.b32 	%r564, %r603, %r546, %p12;
	selp.b32 	%r604, %r554, %r538, %p12;
	shfl.sync.bfly.b32	%r605, %r604, 2, 31, -1;
	selp.b32 	%r571, %r538, %r605, %p12;
	selp.b32 	%r572, %r605, %r554, %p12;
	selp.b32 	%r606, %r550, %r534, %p12;
	shfl.sync.bfly.b32	%r607, %r606, 2, 31, -1;
	selp.b32 	%r579, %r534, %r607, %p12;
	selp.b32 	%r580, %r607, %r550, %p12;
	selp.b32 	%r608, %r558, %r542, %p12;
	shfl.sync.bfly.b32	%r609, %r608, 2, 31, -1;
	selp.b32 	%r587, %r542, %r609, %p12;
	selp.b32 	%r588, %r609, %r558, %p12;
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r587, %r588, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r587, %r588, %r86;
	// end inline asm
	selp.b32 	%r610, %r578, %r562, %p6;
	shfl.sync.bfly.b32	%r611, %r610, 4, 31, -1;
	selp.b32 	%r612, %r562, %r611, %p6;
	selp.b32 	%r613, %r611, %r578, %p6;
	selp.b32 	%r614, %r586, %r570, %p6;
	shfl.sync.bfly.b32	%r615, %r614, 4, 31, -1;
	selp.b32 	%r616, %r570, %r615, %p6;
	selp.b32 	%r617, %r615, %r586, %p6;
	selp.b32 	%r618, %r582, %r566, %p6;
	shfl.sync.bfly.b32	%r619, %r618, 4, 31, -1;
	selp.b32 	%r620, %r566, %r619, %p6;
	selp.b32 	%r621, %r619, %r582, %p6;
	selp.b32 	%r622, %r590, %r574, %p6;
	shfl.sync.bfly.b32	%r623, %r622, 4, 31, -1;
	selp.b32 	%r624, %r574, %r623, %p6;
	selp.b32 	%r625, %r623, %r590, %p6;
	selp.b32 	%r626, %r620, %r612, %p13;
	shfl.sync.bfly.b32	%r627, %r626, 1, 31, -1;
	selp.b32 	%r628, %r612, %r627, %p13;
	selp.b32 	%r629, %r627, %r620, %p13;
	selp.b32 	%r630, %r624, %r616, %p13;
	shfl.sync.bfly.b32	%r631, %r630, 1, 31, -1;
	selp.b32 	%r632, %r616, %r631, %p13;
	selp.b32 	%r633, %r631, %r624, %p13;
	selp.b32 	%r634, %r621, %r613, %p13;
	shfl.sync.bfly.b32	%r635, %r634, 1, 31, -1;
	selp.b32 	%r636, %r613, %r635, %p13;
	selp.b32 	%r637, %r635, %r621, %p13;
	selp.b32 	%r638, %r625, %r617, %p13;
	shfl.sync.bfly.b32	%r639, %r638, 1, 31, -1;
	selp.b32 	%r640, %r617, %r639, %p13;
	selp.b32 	%r641, %r639, %r625, %p13;
	or.b32  	%r642, %r31, %r645;
	cvt.u64.u32 	%rd64, %r642;
	add.s64 	%rd65, %rd4, %rd64;
	st.global.v4.u32 	[%rd65], {%r628, %r636, %r629, %r637};
	or.b32  	%r643, %r32, %r645;
	cvt.u64.u32 	%rd66, %r643;
	add.s64 	%rd67, %rd4, %rd66;
	st.global.v4.u32 	[%rd67], {%r632, %r640, %r633, %r641};
	add.s32 	%r64, %r645, 128;
	setp.ne.s32 	%p15, %r645, 1920;
	mov.u32 	%r645, %r64;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6233
	mov.u32 	%r644, 0;
	st.global.u32 	[%rd6], %r644;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L333
	mov.u32 	%r78, 2;
	st.global.u32 	[%rd6], %r78;
	mov.u64 	%rd29, exception500;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
