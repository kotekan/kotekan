// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception510[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1516[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<28>;
	.reg .b32 	%r<692>;
	.reg .b64 	%rd<59>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r69, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r72, 4351;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r73, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r73, 9471;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r70, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r74, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r75, %r3, 7;
	or.b32  	%r76, %r74, %r2;
	or.b32  	%r77, %r76, %r75;
	mul.wide.u32 	%rd20, %r77, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r78, 1;
	st.global.u32 	[%rd6], %r78;
	setp.lt.s32 	%p3, %r70, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L128
	ld.param.u32 	%r71, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r71, %r70;
	setp.gt.s32 	%p5, %r71, 131072;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r79, %r71, %r70;
	and.b32  	%r80, %r79, 127;
	setp.eq.s32 	%p7, %r80, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass102
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r81, %r3, 1;
	and.b32  	%r38, %r81, 4064;
	shr.u32 	%r82, %r2, 3;
	shl.b32 	%r83, %r1, 2;
	or.b32  	%r39, %r82, %r83;
	or.b32  	%r84, %r39, %r38;
	mul.wide.u32 	%rd21, %r84, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r40, [%rd22];
	or.b32  	%r85, %r84, 16;
	mul.wide.u32 	%rd23, %r85, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r41, [%rd24];
	add.s32 	%r42, %r40, -3;
	setp.lt.u32 	%p8, %r42, 31;
	add.s32 	%r43, %r41, -3;
	setp.lt.u32 	%p9, %r43, 31;
	and.pred  	%p10, %p8, %p9;
	@!%p10 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_9;
$L__BB0_9:                              // %pass209
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	add.s32 	%r152, %r41, -2;
	add.s32 	%r153, %r40, -2;
	shl.b32 	%r154, %r3, 6;
	and.b32  	%r155, %r154, 130048;
	shl.b32 	%r156, %r1, 8;
	and.b32  	%r157, %r156, 512;
	shl.b32 	%r158, %r2, 3;
	and.b32  	%r44, %r2, 4;
	and.b32  	%r159, %r158, 24;
	or.b32  	%r160, %r156, %r158;
	and.b32  	%r161, %r160, 448;
	or.b32  	%r162, %r157, %r44;
	or.b32  	%r163, %r162, %r155;
	or.b32  	%r164, %r163, %r159;
	or.b32  	%r165, %r164, %r161;
	shl.b32 	%r166, %r165, 2;
	cvt.u64.u32 	%rd27, %r166;
	add.s64 	%rd28, %rd27, %rd1;
	ld.global.v4.u32 	{%r88, %r89, %r96, %r97}, [%rd28];
	or.b32  	%r167, %r166, 128;
	cvt.u64.u32 	%rd29, %r167;
	add.s64 	%rd30, %rd29, %rd1;
	ld.global.v4.u32 	{%r104, %r105, %r112, %r113}, [%rd30];
	mov.u32 	%r114, 21520;
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r114;
	// end inline asm
	mov.u32 	%r118, 30258;
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r144, %r112, %r113, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r112, %r113, %r118;
	// end inline asm
	mov.u32 	%r146, 25152;
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r146;
	// end inline asm
	mov.u32 	%r150, 29521;
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r143, %r144, %r145, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r144, %r145, %r150;
	// end inline asm
	setp.eq.s32 	%p11, %r44, 0;
	selp.b32 	%r168, %r135, %r119, %p11;
	shfl.sync.bfly.b32	%r169, %r168, 4, 31, -1;
	selp.b32 	%r45, %r119, %r169, %p11;
	selp.b32 	%r46, %r169, %r135, %p11;
	selp.b32 	%r170, %r139, %r123, %p11;
	shfl.sync.bfly.b32	%r171, %r170, 4, 31, -1;
	selp.b32 	%r47, %r123, %r171, %p11;
	selp.b32 	%r48, %r171, %r139, %p11;
	selp.b32 	%r172, %r143, %r127, %p11;
	shfl.sync.bfly.b32	%r173, %r172, 4, 31, -1;
	selp.b32 	%r49, %r127, %r173, %p11;
	selp.b32 	%r50, %r173, %r143, %p11;
	selp.b32 	%r174, %r147, %r131, %p11;
	shfl.sync.bfly.b32	%r175, %r174, 4, 31, -1;
	selp.b32 	%r51, %r131, %r175, %p11;
	selp.b32 	%r52, %r175, %r147, %p11;
	shl.b32 	%r176, %r70, 12;
	shl.b32 	%r177, %r2, 2;
	and.b32  	%r178, %r177, 12;
	shl.b32 	%r179, %r1, 3;
	and.b32  	%r180, %r179, 16;
	or.b32  	%r181, %r178, %r180;
	or.b32  	%r182, %r181, %r38;
	shr.u32 	%r53, %r2, 2;
	shl.b32 	%r183, %r3, 12;
	and.b32  	%r54, %r183, 61440;
	shl.b32 	%r55, %r1, 4;
	and.b32  	%r56, %r55, 16;
	or.b32  	%r57, %r182, %r176;
	shr.u32 	%r184, %r1, 1;
	mul.lo.s32 	%r185, %r184, 544;
	or.b32  	%r58, %r178, %r185;
	and.b32  	%r186, %r179, 8;
	or.b32  	%r187, %r186, %r53;
	mul.lo.s32 	%r188, %r184, 640;
	shl.b32 	%r189, %r2, 1;
	and.b32  	%r59, %r189, 6;
	or.b32  	%r60, %r187, %r188;
	and.b32  	%r190, %r2, 7;
	or.b32  	%r191, %r39, 640;
	shl.b32 	%r61, %r78, %r42;
	min.u32 	%r62, %r153, 31;
	shl.b32 	%r63, %r78, %r43;
	min.u32 	%r64, %r152, 31;
	and.b32  	%r65, %r2, 1;
	and.b32  	%r66, %r2, 2;
	and.b32  	%r193, %r158, 32;
	shl.b32 	%r194, %r2, 5;
	and.b32  	%r195, %r194, 64;
	shl.b32 	%r196, %r2, 4;
	and.b32  	%r197, %r196, 16;
	or.b32  	%r198, %r195, %r193;
	shl.b32 	%r199, %r3, 11;
	and.b32  	%r200, %r199, 4161536;
	shl.b32 	%r201, %r1, 24;
	shl.b32 	%r202, %r2, 19;
	and.b32  	%r203, %r202, 12582912;
	or.b32  	%r204, %r203, %r201;
	or.b32  	%r67, %r204, %r200;
	or.b32  	%r205, %r2, 24;
	or.b32  	%r206, %r198, %r183;
	or.b32  	%r68, %r206, %r197;
	mul.lo.s32 	%r207, %r205, 20;
	add.s32 	%r208, %r207, %r191;
	mul.wide.u32 	%rd31, %r208, 4;
	mov.u64 	%rd32, shmem;
	add.s64 	%rd33, %rd32, 4352;
	add.s64 	%rd7, %rd33, %rd31;
	mul.lo.s32 	%r209, %r190, 20;
	add.s32 	%r210, %r209, %r39;
	mul.wide.u32 	%rd34, %r210, 4;
	add.s64 	%rd8, %rd33, %rd34;
	add.s32 	%r211, %r209, %r191;
	mul.wide.u32 	%rd35, %r211, 4;
	add.s64 	%rd9, %rd33, %rd35;
	add.s32 	%r212, %r209, 160;
	add.s32 	%r213, %r212, %r39;
	mul.wide.u32 	%rd36, %r213, 4;
	add.s64 	%rd10, %rd33, %rd36;
	add.s32 	%r214, %r212, %r191;
	mul.wide.u32 	%rd37, %r214, 4;
	add.s64 	%rd11, %rd33, %rd37;
	add.s32 	%r215, %r209, 320;
	add.s32 	%r216, %r215, %r39;
	mul.wide.u32 	%rd38, %r216, 4;
	add.s64 	%rd12, %rd33, %rd38;
	add.s32 	%r217, %r215, %r191;
	mul.wide.u32 	%rd39, %r217, 4;
	add.s64 	%rd13, %rd33, %rd39;
	add.s32 	%r218, %r207, %r39;
	mul.wide.u32 	%rd40, %r218, 4;
	add.s64 	%rd14, %rd33, %rd40;
	mov.u32 	%r677, 0;
$L__BB0_10:                             // %L949
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_12 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r219, %r677, %r70;
	setp.ge.s32 	%p12, %r219, %r71;
	@%p12 bra 	$L__BB0_16;
// %bb.11:                              // %L956.preheader
                                        //   in Loop: Header=BB0_10 Depth=1
	or.b32  	%r5, %r677, 8;
	mov.u32 	%r279, 0;
	mov.u32 	%r678, %r279;
	mov.u32 	%r679, %r279;
	mov.u32 	%r680, %r279;
	mov.u32 	%r681, %r279;
	mov.u32 	%r682, %r279;
	mov.u32 	%r683, %r279;
	mov.u32 	%r684, %r279;
	mov.u32 	%r685, %r279;
	mov.u32 	%r686, %r279;
	mov.u32 	%r687, %r279;
	mov.u32 	%r688, %r279;
	mov.u32 	%r689, %r279;
	mov.u32 	%r690, %r279;
$L__BB0_12:                             // %L956
                                        //   Parent Loop BB0_10 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r222, %r678, %r677;
	or.b32  	%r223, %r222, %r53;
	add.s32 	%r19, %r223, %r54;
	and.b32  	%r224, %r19, 65511;
	or.b32  	%r225, %r224, %r56;
	shl.b32 	%r226, %r225, 12;
	add.s32 	%r227, %r57, %r226;
	shr.s32 	%r228, %r227, 31;
	shr.u32 	%r229, %r228, 4;
	add.s32 	%r230, %r227, %r229;
	shr.s32 	%r231, %r230, 28;
	setp.lt.s32 	%p13, %r227, 0;
	and.b32  	%r232, %r230, -268435456;
	setp.ne.s32 	%p14, %r232, %r227;
	and.pred  	%p15, %p13, %p14;
	selp.u32 	%r233, 1, 0, %p15;
	sub.s32 	%r234, %r233, %r231;
	shl.b32 	%r235, %r234, 28;
	add.s32 	%r236, %r235, %r227;
	mul.wide.s32 	%rd41, %r236, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.v4.u32 	{%r237, %r238, %r239, %r240}, [%rd42];
	add.s32 	%r241, %r5, %r678;
	or.b32  	%r242, %r241, %r53;
	add.s32 	%r243, %r242, %r54;
	and.b32  	%r244, %r243, 65519;
	or.b32  	%r245, %r244, %r56;
	shl.b32 	%r246, %r245, 12;
	add.s32 	%r247, %r57, %r246;
	shr.s32 	%r248, %r247, 31;
	shr.u32 	%r249, %r248, 4;
	add.s32 	%r250, %r247, %r249;
	shr.s32 	%r251, %r250, 28;
	setp.lt.s32 	%p16, %r247, 0;
	and.b32  	%r252, %r250, -268435456;
	setp.ne.s32 	%p17, %r252, %r247;
	and.pred  	%p18, %p16, %p17;
	selp.u32 	%r253, 1, 0, %p18;
	sub.s32 	%r254, %r253, %r251;
	shl.b32 	%r255, %r254, 28;
	add.s32 	%r256, %r255, %r247;
	mul.wide.s32 	%rd43, %r256, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r257, %r258, %r259, %r260}, [%rd44];
	or.b32  	%r261, %r19, %r55;
	and.b32  	%r262, %r261, 23;
	mad.lo.s32 	%r263, %r262, 17, %r58;
	mul.wide.u32 	%rd45, %r263, 4;
	add.s64 	%rd47, %rd32, %rd45;
	st.shared.u32 	[%rd47], %r237;
	st.shared.u32 	[%rd47+4], %r238;
	st.shared.u32 	[%rd47+8], %r239;
	st.shared.u32 	[%rd47+12], %r240;
	or.b32  	%r264, %r243, %r55;
	and.b32  	%r265, %r264, 31;
	mad.lo.s32 	%r266, %r265, 17, %r58;
	mul.wide.u32 	%rd48, %r266, 4;
	add.s64 	%rd49, %rd32, %rd48;
	st.shared.u32 	[%rd49], %r257;
	st.shared.u32 	[%rd49+4], %r258;
	st.shared.u32 	[%rd49+8], %r259;
	st.shared.u32 	[%rd49+12], %r260;
	bar.sync 	0;
	mov.u32 	%r691, %r279;
$L__BB0_13:                             // %L2867
                                        //   Parent Loop BB0_10 Depth=1
                                        //     Parent Loop BB0_12 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	add.s32 	%r401, %r19, %r691;
	and.b32  	%r402, %r401, 31;
	mad.lo.s32 	%r403, %r402, 17, %r58;
	mul.wide.u32 	%rd50, %r403, 4;
	add.s64 	%rd52, %rd32, %rd50;
	ld.shared.u32 	%r268, [%rd52];
	mov.u32 	%r269, 134744072;
	mov.u32 	%r435, 252645135;
	// begin inline asm
	lop3.b32 %r267, %r268, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r404, %r267, 2021161080;
	xor.b32  	%r278, %r404, -2139062144;
	shr.u32 	%r272, %r268, 4;
	// begin inline asm
	lop3.b32 %r271, %r272, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r405, %r271, 2021161080;
	xor.b32  	%r284, %r405, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r275, %r276}, {%r45}, {%r278}, {%r279, %r279};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r281, %r282}, {%r47}, {%r284}, {%r279, %r279};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r287, %r288}, {%r45}, {%r284}, {%r279, %r279};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r293, %r294}, {%r47}, {%r278}, {%r287, %r288};
	// end inline asm
	ld.shared.u32 	%r300, [%rd52+4];
	// begin inline asm
	lop3.b32 %r299, %r300, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r406, %r299, 2021161080;
	xor.b32  	%r310, %r406, -2139062144;
	shr.u32 	%r304, %r300, 4;
	// begin inline asm
	lop3.b32 %r303, %r304, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r407, %r303, 2021161080;
	xor.b32  	%r316, %r407, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r307, %r308}, {%r49}, {%r310}, {%r275, %r276};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r313, %r314}, {%r51}, {%r316}, {%r281, %r282};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r319, %r320}, {%r49}, {%r316}, {%r293, %r294};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r325, %r326}, {%r51}, {%r310}, {%r319, %r320};
	// end inline asm
	ld.shared.u32 	%r332, [%rd52+8];
	// begin inline asm
	lop3.b32 %r331, %r332, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r408, %r331, 2021161080;
	xor.b32  	%r342, %r408, -2139062144;
	shr.u32 	%r336, %r332, 4;
	// begin inline asm
	lop3.b32 %r335, %r336, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r409, %r335, 2021161080;
	xor.b32  	%r348, %r409, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r339, %r340}, {%r46}, {%r342}, {%r307, %r308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r345, %r346}, {%r48}, {%r348}, {%r313, %r314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r351, %r352}, {%r46}, {%r348}, {%r325, %r326};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r357, %r358}, {%r48}, {%r342}, {%r351, %r352};
	// end inline asm
	ld.shared.u32 	%r364, [%rd52+12];
	// begin inline asm
	lop3.b32 %r363, %r364, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r410, %r363, 2021161080;
	xor.b32  	%r374, %r410, -2139062144;
	shr.u32 	%r368, %r364, 4;
	// begin inline asm
	lop3.b32 %r367, %r368, %r269, %r435, 40;
	// end inline asm
	add.s32 	%r411, %r367, 2021161080;
	xor.b32  	%r380, %r411, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r371, %r372}, {%r50}, {%r374}, {%r339, %r340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r377, %r378}, {%r52}, {%r380}, {%r345, %r346};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r383, %r384}, {%r50}, {%r380}, {%r357, %r358};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r389, %r390}, {%r52}, {%r374}, {%r383, %r384};
	// end inline asm
	sub.s32 	%r412, %r371, %r377;
	add.s32 	%r413, %r412, 2;
	shr.s32 	%r397, %r413, 2;
	add.s32 	%r414, %r389, 2;
	shr.s32 	%r396, %r414, 2;
	sub.s32 	%r415, %r372, %r378;
	add.s32 	%r416, %r415, 2;
	shr.s32 	%r400, %r416, 2;
	add.s32 	%r417, %r390, 2;
	shr.s32 	%r399, %r417, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r395, %r396, %r397;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r398, %r399, %r400;
	// end inline asm
	or.b32  	%r418, %r59, %r691;
	mad.lo.s32 	%r419, %r418, 20, %r60;
	mul.wide.u32 	%rd53, %r419, 4;
	add.s64 	%rd54, %rd32, %rd53;
	st.shared.u32 	[%rd54+4352], %r395;
	st.shared.u32 	[%rd54+4432], %r398;
	add.s32 	%r691, %r691, 8;
	setp.ne.s32 	%p19, %r691, 32;
	@%p19 bra 	$L__BB0_13;
// %bb.14:                              // %L4133
                                        //   in Loop: Header=BB0_12 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r456, [%rd8];
	ld.shared.u32 	%r457, [%rd9];
	ld.shared.u32 	%r458, [%rd10];
	ld.shared.u32 	%r459, [%rd11];
	ld.shared.u32 	%r460, [%rd12];
	ld.shared.u32 	%r461, [%rd13];
	ld.shared.u32 	%r462, [%rd14];
	ld.shared.u32 	%r463, [%rd7];
	cvt.s32.s16 	%r464, %r456;
	shr.s32 	%r465, %r456, 16;
	cvt.s32.s16 	%r466, %r457;
	shr.s32 	%r467, %r457, 16;
	cvt.s32.s16 	%r468, %r458;
	shr.s32 	%r469, %r458, 16;
	cvt.s32.s16 	%r470, %r459;
	shr.s32 	%r471, %r459, 16;
	cvt.s32.s16 	%r472, %r460;
	shr.s32 	%r473, %r460, 16;
	cvt.s32.s16 	%r474, %r461;
	shr.s32 	%r475, %r461, 16;
	cvt.s32.s16 	%r476, %r462;
	shr.s32 	%r477, %r462, 16;
	cvt.s32.s16 	%r478, %r463;
	shr.s32 	%r479, %r463, 16;
	add.s32 	%r480, %r464, %r61;
	shr.s32 	%r481, %r480, %r62;
	add.s32 	%r482, %r465, %r61;
	shr.s32 	%r483, %r482, %r62;
	add.s32 	%r484, %r466, %r63;
	shr.s32 	%r485, %r484, %r64;
	add.s32 	%r486, %r467, %r63;
	shr.s32 	%r487, %r486, %r64;
	add.s32 	%r488, %r468, %r61;
	shr.s32 	%r489, %r488, %r62;
	add.s32 	%r490, %r469, %r61;
	shr.s32 	%r491, %r490, %r62;
	add.s32 	%r492, %r470, %r63;
	shr.s32 	%r493, %r492, %r64;
	add.s32 	%r494, %r471, %r63;
	shr.s32 	%r495, %r494, %r64;
	add.s32 	%r496, %r472, %r61;
	shr.s32 	%r497, %r496, %r62;
	add.s32 	%r498, %r473, %r61;
	shr.s32 	%r499, %r498, %r62;
	add.s32 	%r500, %r474, %r63;
	shr.s32 	%r501, %r500, %r64;
	add.s32 	%r502, %r475, %r63;
	shr.s32 	%r503, %r502, %r64;
	add.s32 	%r504, %r476, %r61;
	shr.s32 	%r505, %r504, %r62;
	add.s32 	%r506, %r477, %r61;
	shr.s32 	%r507, %r506, %r62;
	add.s32 	%r508, %r478, %r63;
	shr.s32 	%r509, %r508, %r64;
	add.s32 	%r510, %r479, %r63;
	shr.s32 	%r511, %r510, %r64;
	max.s32 	%r512, %r481, -7;
	min.s32 	%r425, %r512, 7;
	max.s32 	%r513, %r483, -7;
	min.s32 	%r432, %r513, 7;
	max.s32 	%r514, %r485, -7;
	min.s32 	%r443, %r514, 7;
	max.s32 	%r515, %r487, -7;
	min.s32 	%r450, %r515, 7;
	max.s32 	%r516, %r489, -7;
	min.s32 	%r424, %r516, 7;
	max.s32 	%r517, %r491, -7;
	min.s32 	%r431, %r517, 7;
	max.s32 	%r518, %r493, -7;
	min.s32 	%r442, %r518, 7;
	max.s32 	%r519, %r495, -7;
	min.s32 	%r449, %r519, 7;
	max.s32 	%r520, %r497, -7;
	min.s32 	%r422, %r520, 7;
	max.s32 	%r521, %r499, -7;
	min.s32 	%r429, %r521, 7;
	max.s32 	%r522, %r501, -7;
	min.s32 	%r440, %r522, 7;
	max.s32 	%r523, %r503, -7;
	min.s32 	%r447, %r523, 7;
	max.s32 	%r524, %r505, -7;
	min.s32 	%r421, %r524, 7;
	max.s32 	%r525, %r507, -7;
	min.s32 	%r428, %r525, 7;
	max.s32 	%r526, %r509, -7;
	min.s32 	%r439, %r526, 7;
	max.s32 	%r527, %r511, -7;
	min.s32 	%r446, %r527, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r420, %r421, %r422, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r423, %r424, %r425, %r420;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r427, %r428, %r429, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r430, %r431, %r432, %r427;
	// end inline asm
	shl.b32 	%r437, %r430, 4;
	// begin inline asm
	lop3.b32 %r546, %r435, %r423, %r437, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r438, %r439, %r440, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r441, %r442, %r443, %r438;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r445, %r446, %r447, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r448, %r449, %r450, %r445;
	// end inline asm
	shl.b32 	%r455, %r448, 4;
	// begin inline asm
	lop3.b32 %r554, %r435, %r441, %r455, 202;
	// end inline asm
	setp.eq.s32 	%p20, %r678, 0;
	selp.b32 	%r689, %r546, %r689, %p20;
	selp.b32 	%r690, %r546, %r690, %p20;
	setp.eq.s32 	%p21, %r678, 32;
	selp.b32 	%r681, %r546, %r681, %p21;
	selp.b32 	%r682, %r546, %r682, %p21;
	setp.eq.s32 	%p22, %r678, 64;
	selp.b32 	%r687, %r546, %r687, %p22;
	selp.b32 	%r688, %r546, %r688, %p22;
	selp.b32 	%r685, %r554, %r685, %p20;
	selp.b32 	%r686, %r554, %r686, %p20;
	selp.b32 	%r679, %r554, %r679, %p21;
	selp.b32 	%r680, %r554, %r680, %p21;
	selp.b32 	%r683, %r554, %r683, %p22;
	selp.b32 	%r684, %r554, %r684, %p22;
	add.s32 	%r36, %r678, 32;
	setp.ne.s32 	%p23, %r678, 96;
	mov.u32 	%r678, %r36;
	@%p23 bra 	$L__BB0_12;
// %bb.15:                              // %L5687
                                        //   in Loop: Header=BB0_10 Depth=1
	setp.eq.s32 	%p24, %r66, 0;
	setp.eq.s32 	%p25, %r65, 0;
	// begin inline asm
	prmt.b32 %r528, %r689, %r681, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r690, %r682, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r685, %r679, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r686, %r680, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r687, %r546, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r688, %r546, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r683, %r554, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r684, %r554, %r150;
	// end inline asm
	selp.b32 	%r624, %r532, %r528, %p25;
	shfl.sync.bfly.b32	%r625, %r624, 1, 31, -1;
	selp.b32 	%r561, %r528, %r625, %p25;
	selp.b32 	%r562, %r625, %r532, %p25;
	selp.b32 	%r626, %r540, %r536, %p25;
	shfl.sync.bfly.b32	%r627, %r626, 1, 31, -1;
	selp.b32 	%r569, %r536, %r627, %p25;
	selp.b32 	%r570, %r627, %r540, %p25;
	selp.b32 	%r628, %r548, %r544, %p25;
	shfl.sync.bfly.b32	%r629, %r628, 1, 31, -1;
	selp.b32 	%r577, %r544, %r629, %p25;
	selp.b32 	%r578, %r629, %r548, %p25;
	selp.b32 	%r630, %r556, %r552, %p25;
	shfl.sync.bfly.b32	%r631, %r630, 1, 31, -1;
	selp.b32 	%r585, %r552, %r631, %p25;
	selp.b32 	%r586, %r631, %r556, %p25;
	// begin inline asm
	prmt.b32 %r560, %r561, %r562, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r561, %r562, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r577, %r578, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r577, %r578, %r150;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r585, %r586, %r146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r585, %r586, %r150;
	// end inline asm
	selp.b32 	%r632, %r576, %r560, %p24;
	shfl.sync.bfly.b32	%r633, %r632, 2, 31, -1;
	selp.b32 	%r593, %r560, %r633, %p24;
	selp.b32 	%r594, %r633, %r576, %p24;
	selp.b32 	%r634, %r584, %r568, %p24;
	shfl.sync.bfly.b32	%r635, %r634, 2, 31, -1;
	selp.b32 	%r601, %r568, %r635, %p24;
	selp.b32 	%r602, %r635, %r584, %p24;
	selp.b32 	%r636, %r580, %r564, %p24;
	shfl.sync.bfly.b32	%r637, %r636, 2, 31, -1;
	selp.b32 	%r609, %r564, %r637, %p24;
	selp.b32 	%r610, %r637, %r580, %p24;
	selp.b32 	%r638, %r588, %r572, %p24;
	shfl.sync.bfly.b32	%r639, %r638, 2, 31, -1;
	selp.b32 	%r617, %r572, %r639, %p24;
	selp.b32 	%r618, %r639, %r588, %p24;
	// begin inline asm
	prmt.b32 %r592, %r593, %r594, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r593, %r594, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r601, %r602, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r601, %r602, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r609, %r610, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r609, %r610, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r616, %r617, %r618, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r617, %r618, %r118;
	// end inline asm
	selp.b32 	%r640, %r608, %r592, %p11;
	shfl.sync.bfly.b32	%r641, %r640, 4, 31, -1;
	selp.b32 	%r642, %r592, %r641, %p11;
	selp.b32 	%r643, %r641, %r608, %p11;
	selp.b32 	%r644, %r616, %r600, %p11;
	shfl.sync.bfly.b32	%r645, %r644, 4, 31, -1;
	selp.b32 	%r646, %r600, %r645, %p11;
	selp.b32 	%r647, %r645, %r616, %p11;
	selp.b32 	%r648, %r612, %r596, %p11;
	shfl.sync.bfly.b32	%r649, %r648, 4, 31, -1;
	selp.b32 	%r650, %r596, %r649, %p11;
	selp.b32 	%r651, %r649, %r612, %p11;
	selp.b32 	%r652, %r620, %r604, %p11;
	shfl.sync.bfly.b32	%r653, %r652, 4, 31, -1;
	selp.b32 	%r654, %r604, %r653, %p11;
	selp.b32 	%r655, %r653, %r620, %p11;
	selp.b32 	%r656, %r650, %r642, %p25;
	shfl.sync.bfly.b32	%r657, %r656, 1, 31, -1;
	selp.b32 	%r658, %r642, %r657, %p25;
	selp.b32 	%r659, %r657, %r650, %p25;
	selp.b32 	%r660, %r654, %r646, %p25;
	shfl.sync.bfly.b32	%r661, %r660, 1, 31, -1;
	selp.b32 	%r662, %r646, %r661, %p25;
	selp.b32 	%r663, %r661, %r654, %p25;
	selp.b32 	%r664, %r651, %r643, %p25;
	shfl.sync.bfly.b32	%r665, %r664, 1, 31, -1;
	selp.b32 	%r666, %r643, %r665, %p25;
	selp.b32 	%r667, %r665, %r651, %p25;
	selp.b32 	%r668, %r655, %r647, %p25;
	shfl.sync.bfly.b32	%r669, %r668, 1, 31, -1;
	selp.b32 	%r670, %r647, %r669, %p25;
	selp.b32 	%r671, %r669, %r655, %p25;
	add.s32 	%r672, %r68, %r677;
	and.b32  	%r673, %r672, 16368;
	or.b32  	%r674, %r67, %r673;
	cvt.u64.u32 	%rd55, %r674;
	add.s64 	%rd56, %rd4, %rd55;
	st.global.v4.u32 	[%rd56], {%r658, %r666, %r659, %r667};
	st.global.v4.u32 	[%rd56+16384], {%r662, %r670, %r663, %r671};
	add.s32 	%r37, %r677, 128;
	setp.ne.s32 	%p27, %r677, 3968;
	mov.u32 	%r677, %r37;
	@%p27 bra 	$L__BB0_10;
$L__BB0_16:                             // %L6390
	mov.u32 	%r675, 0;
	st.global.u32 	[%rd6], %r675;
	ret;
$L__BB0_7:                              // %L147
	mov.u32 	%r676, 2;
	st.global.u32 	[%rd6], %r676;
	mov.u64 	%rd57, exception510;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1516;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1516;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L447
	mov.u32 	%r86, 2;
	st.global.u32 	[%rd6], %r86;
	mov.u64 	%rd25, exception510;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
