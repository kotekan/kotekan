// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception480[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<72>;
	.reg .b32 	%r<684>;
	.reg .b64 	%rd<71>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r69, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r72, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r72, 4351;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r73, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r73, 9471;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r70, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r74, %r1, 7;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r75, %r2, 5;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r76, %r75, %r3;
	or.b32  	%r77, %r76, %r74;
	mul.wide.u32 	%rd22, %r77, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r78, 1;
	st.global.u32 	[%rd7], %r78;
	setp.gt.u32 	%p8, %r70, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r71, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r71, %r70;
	setp.gt.s32 	%p10, %r71, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r79, %r71, %r70;
	and.b32  	%r80, %r79, 127;
	setp.eq.s32 	%p12, %r80, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass95
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r81, %r2, 2;
	shr.u32 	%r82, %r3, 3;
	or.b32  	%r63, %r81, %r82;
	shl.b32 	%r64, %r1, 5;
	or.b32  	%r83, %r63, %r64;
	mul.wide.u32 	%rd23, %r83, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r84, [%rd24];
	or.b32  	%r85, %r83, 16;
	mul.wide.u32 	%rd25, %r85, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r86, [%rd26];
	add.s32 	%r67, %r84, -3;
	setp.lt.u32 	%p13, %r67, 31;
	add.s32 	%r68, %r86, -3;
	setp.lt.u32 	%p14, %r68, 31;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L543
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r65, %r84, -2;
	add.s32 	%r66, %r86, -2;
	or.b32  	%r88, %r3, %r2;
	setp.ne.s32 	%p1, %r88, 0;
	mul.wide.u32 	%rd29, %r1, 4;
	add.s64 	%rd8, %rd6, %rd29;
	mov.u32 	%r669, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L567
	st.global.u32 	[%rd8], %r669;
$L__BB0_10:                             // %L613
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r155, %r2, 8;
	shl.b32 	%r156, %r3, 3;
	shl.b32 	%r157, %r1, 10;
	and.b32  	%r4, %r3, 4;
	and.b32  	%r158, %r156, 24;
	or.b32  	%r159, %r4, %r158;
	and.b32  	%r160, %r156, 448;
	and.b32  	%r161, %r155, 768;
	or.b32  	%r162, %r161, %r160;
	or.b32  	%r163, %r162, %r157;
	or.b32  	%r164, %r163, %r159;
	shl.b32 	%r165, %r164, 2;
	cvt.u64.u32 	%rd30, %r165;
	add.s64 	%rd31, %rd30, %rd1;
	ld.global.v4.u32 	{%r91, %r92, %r99, %r100}, [%rd31];
	ld.global.v4.u32 	{%r107, %r108, %r115, %r116}, [%rd31+128];
	mov.u32 	%r93, 21520;
	// begin inline asm
	prmt.b32 %r123, %r91, %r92, %r93;
	// end inline asm
	mov.u32 	%r97, 30258;
	// begin inline asm
	prmt.b32 %r124, %r91, %r92, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r99, %r100, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r132, %r99, %r100, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r107, %r108, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r140, %r107, %r108, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r115, %r116, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r115, %r116, %r97;
	// end inline asm
	mov.u32 	%r125, 25152;
	// begin inline asm
	prmt.b32 %r122, %r123, %r124, %r125;
	// end inline asm
	mov.u32 	%r129, 29521;
	// begin inline asm
	prmt.b32 %r126, %r123, %r124, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r130, %r131, %r132, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r134, %r131, %r132, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r138, %r139, %r140, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r142, %r139, %r140, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r147, %r148, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r147, %r148, %r129;
	// end inline asm
	setp.eq.s32 	%p17, %r4, 0;
	selp.b32 	%r166, %r138, %r122, %p17;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r261, %r122, %r167, %p17;
	selp.b32 	%r325, %r167, %r138, %p17;
	selp.b32 	%r168, %r142, %r126, %p17;
	shfl.sync.bfly.b32	%r169, %r168, 4, 31, -1;
	selp.b32 	%r267, %r126, %r169, %p17;
	selp.b32 	%r331, %r169, %r142, %p17;
	selp.b32 	%r170, %r146, %r130, %p17;
	shfl.sync.bfly.b32	%r171, %r170, 4, 31, -1;
	selp.b32 	%r293, %r130, %r171, %p17;
	selp.b32 	%r357, %r171, %r146, %p17;
	selp.b32 	%r172, %r150, %r134, %p17;
	shfl.sync.bfly.b32	%r173, %r172, 4, 31, -1;
	selp.b32 	%r299, %r134, %r173, %p17;
	selp.b32 	%r363, %r173, %r150, %p17;
	shl.b32 	%r174, %r2, 3;
	and.b32  	%r175, %r174, 16;
	shl.b32 	%r176, %r3, 2;
	and.b32  	%r177, %r176, 12;
	shr.u32 	%r13, %r3, 2;
	shl.b32 	%r178, %r2, 4;
	and.b32  	%r179, %r178, 16;
	or.b32  	%r14, %r179, %r13;
	or.b32  	%r180, %r175, %r177;
	or.b32  	%r15, %r180, %r64;
	shr.u32 	%r181, %r2, 1;
	mul.lo.s32 	%r182, %r181, 544;
	or.b32  	%r16, %r177, %r182;
	and.b32  	%r183, %r174, 8;
	or.b32  	%r184, %r183, %r13;
	mul.lo.s32 	%r185, %r181, 640;
	shl.b32 	%r186, %r3, 1;
	and.b32  	%r17, %r186, 6;
	or.b32  	%r18, %r184, %r185;
	and.b32  	%r187, %r3, 7;
	or.b32  	%r188, %r63, 640;
	shl.b32 	%r190, %r78, %r67;
	setp.gt.u32 	%p18, %r67, 31;
	selp.b32 	%r19, 0, %r190, %p18;
	min.u32 	%r20, %r65, 31;
	shl.b32 	%r191, %r78, %r68;
	setp.gt.u32 	%p19, %r68, 31;
	selp.b32 	%r21, 0, %r191, %p19;
	min.u32 	%r22, %r66, 31;
	and.b32  	%r23, %r3, 1;
	and.b32  	%r24, %r3, 2;
	shl.b32 	%r192, %r1, 12;
	shl.b32 	%r193, %r3, 5;
	and.b32  	%r194, %r193, 64;
	and.b32  	%r195, %r156, 32;
	or.b32  	%r25, %r194, %r195;
	shl.b32 	%r196, %r3, 4;
	and.b32  	%r26, %r196, 16;
	mad.lo.s32 	%r27, %r63, 1572864, %r192;
	or.b32  	%r28, %r27, 2048;
	mul.lo.s32 	%r197, %r187, 20;
	add.s32 	%r198, %r197, %r63;
	mul.wide.u32 	%rd32, %r198, 4;
	mov.u64 	%rd33, shmem;
	add.s64 	%rd34, %rd33, 4352;
	add.s64 	%rd9, %rd34, %rd32;
	add.s32 	%r199, %r197, %r188;
	mul.wide.u32 	%rd35, %r199, 4;
	add.s64 	%rd10, %rd34, %rd35;
	add.s32 	%r200, %r197, 160;
	add.s32 	%r201, %r200, %r63;
	mul.wide.u32 	%rd36, %r201, 4;
	add.s64 	%rd11, %rd34, %rd36;
	add.s32 	%r202, %r200, %r188;
	mul.wide.u32 	%rd37, %r202, 4;
	add.s64 	%rd12, %rd34, %rd37;
	add.s32 	%r203, %r197, 320;
	add.s32 	%r204, %r203, %r63;
	mul.wide.u32 	%rd38, %r204, 4;
	add.s64 	%rd13, %rd34, %rd38;
	add.s32 	%r205, %r203, %r188;
	mul.wide.u32 	%rd39, %r205, 4;
	add.s64 	%rd14, %rd34, %rd39;
	or.b32  	%r206, %r3, 24;
	mul.lo.s32 	%r207, %r206, 20;
	add.s32 	%r208, %r207, %r63;
	mul.wide.u32 	%rd40, %r208, 4;
	add.s64 	%rd15, %rd34, %rd40;
	add.s32 	%r209, %r207, %r188;
	mul.wide.u32 	%rd41, %r209, 4;
	add.s64 	%rd16, %rd34, %rd41;
	mov.pred 	%p71, 0;
$L__BB0_11:                             // %L1024
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r210, %r669, %r70;
	setp.ge.s32 	%p20, %r210, %r71;
	@%p20 bra 	$L__BB0_17;
// %bb.12:                              // %L1032.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r30, %r14, %r669;
	or.b32  	%r31, %r30, 8;
	mov.u32 	%r263, 0;
	mov.u32 	%r670, %r263;
	mov.u32 	%r671, %r263;
	mov.u32 	%r672, %r263;
	mov.u32 	%r673, %r263;
	mov.u32 	%r674, %r263;
	mov.u32 	%r675, %r263;
	mov.u32 	%r676, %r263;
	mov.u32 	%r677, %r263;
	mov.u32 	%r678, %r263;
	mov.u32 	%r679, %r263;
	mov.u32 	%r680, %r263;
	mov.u32 	%r681, %r263;
	mov.u32 	%r682, %r263;
$L__BB0_13:                             // %L1032
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r213, %r670, %r30;
	and.b32  	%r214, %r213, 32759;
	add.s32 	%r215, %r214, %r70;
	mad.lo.s32 	%r216, %r215, 12288, %r15;
	mul.hi.s32 	%r217, %r216, 715827883;
	shr.u32 	%r218, %r217, 31;
	shr.s32 	%r219, %r217, 26;
	add.s32 	%r220, %r219, %r218;
	setp.lt.s32 	%p21, %r216, 0;
	mul.lo.s32 	%r221, %r220, 402653184;
	setp.ne.s32 	%p22, %r221, %r216;
	and.pred  	%p23, %p21, %p22;
	selp.s32 	%r222, -1, 0, %p23;
	add.s32 	%r223, %r220, %r222;
	mad.lo.s32 	%r224, %r223, -402653184, %r216;
	mul.wide.s32 	%rd42, %r224, 4;
	add.s64 	%rd43, %rd2, %rd42;
	ld.global.v4.u32 	{%r225, %r226, %r227, %r228}, [%rd43];
	add.s32 	%r229, %r670, %r31;
	and.b32  	%r230, %r229, 32767;
	add.s32 	%r231, %r230, %r70;
	mad.lo.s32 	%r232, %r231, 12288, %r15;
	mul.hi.s32 	%r233, %r232, 715827883;
	shr.u32 	%r234, %r233, 31;
	shr.s32 	%r235, %r233, 26;
	add.s32 	%r236, %r235, %r234;
	setp.lt.s32 	%p24, %r232, 0;
	mul.lo.s32 	%r237, %r236, 402653184;
	setp.ne.s32 	%p25, %r237, %r232;
	and.pred  	%p26, %p24, %p25;
	selp.s32 	%r238, -1, 0, %p26;
	add.s32 	%r239, %r236, %r238;
	mad.lo.s32 	%r240, %r239, -402653184, %r232;
	mul.wide.s32 	%rd44, %r240, 4;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.v4.u32 	{%r241, %r242, %r243, %r244}, [%rd45];
	and.b32  	%r245, %r213, 23;
	mul.lo.s32 	%r246, %r245, 17;
	add.s32 	%r247, %r16, %r246;
	mul.wide.u32 	%rd46, %r247, 4;
	add.s64 	%rd48, %rd33, %rd46;
	st.shared.u32 	[%rd48], %r225;
	cvt.u64.u32 	%rd49, %r246;
	cvt.u64.u32 	%rd50, %r16;
	add.s64 	%rd51, %rd50, %rd49;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd53, %rd33, %rd52;
	st.shared.u32 	[%rd53+4], %r226;
	st.shared.u32 	[%rd53+8], %r227;
	st.shared.u32 	[%rd53+12], %r228;
	and.b32  	%r248, %r229, 31;
	mul.lo.s32 	%r249, %r248, 17;
	add.s32 	%r250, %r16, %r249;
	mul.wide.u32 	%rd54, %r250, 4;
	add.s64 	%rd55, %rd33, %rd54;
	st.shared.u32 	[%rd55], %r241;
	cvt.u64.u32 	%rd56, %r249;
	add.s64 	%rd57, %rd50, %rd56;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd59, %rd33, %rd58;
	st.shared.u32 	[%rd59+4], %r242;
	st.shared.u32 	[%rd59+8], %r243;
	st.shared.u32 	[%rd59+12], %r244;
	bar.sync 	0;
	mov.u32 	%r683, %r263;
$L__BB0_14:                             // %L2731
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r385, %r13, %r683;
	mad.lo.s32 	%r386, %r385, 17, %r16;
	mul.wide.u32 	%rd60, %r386, 4;
	add.s64 	%rd62, %rd33, %rd60;
	ld.shared.u32 	%r252, [%rd62];
	mov.u32 	%r253, 134744072;
	mov.u32 	%r418, 252645135;
	// begin inline asm
	lop3.b32 %r251, %r252, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r387, %r251, 2021161080;
	xor.b32  	%r262, %r387, -2139062144;
	shr.u32 	%r256, %r252, 4;
	// begin inline asm
	lop3.b32 %r255, %r256, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r388, %r255, 2021161080;
	xor.b32  	%r268, %r388, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r259, %r260}, {%r261}, {%r262}, {%r263, %r263};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r265, %r266}, {%r267}, {%r268}, {%r263, %r263};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r271, %r272}, {%r261}, {%r268}, {%r263, %r263};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r277, %r278}, {%r267}, {%r262}, {%r271, %r272};
	// end inline asm
	ld.shared.u32 	%r284, [%rd62+4];
	// begin inline asm
	lop3.b32 %r283, %r284, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r389, %r283, 2021161080;
	xor.b32  	%r294, %r389, -2139062144;
	shr.u32 	%r288, %r284, 4;
	// begin inline asm
	lop3.b32 %r287, %r288, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r390, %r287, 2021161080;
	xor.b32  	%r300, %r390, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r291, %r292}, {%r293}, {%r294}, {%r259, %r260};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r297, %r298}, {%r299}, {%r300}, {%r265, %r266};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r303, %r304}, {%r293}, {%r300}, {%r277, %r278};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r309, %r310}, {%r299}, {%r294}, {%r303, %r304};
	// end inline asm
	ld.shared.u32 	%r316, [%rd62+8];
	// begin inline asm
	lop3.b32 %r315, %r316, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r391, %r315, 2021161080;
	xor.b32  	%r326, %r391, -2139062144;
	shr.u32 	%r320, %r316, 4;
	// begin inline asm
	lop3.b32 %r319, %r320, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r392, %r319, 2021161080;
	xor.b32  	%r332, %r392, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r323, %r324}, {%r325}, {%r326}, {%r291, %r292};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r329, %r330}, {%r331}, {%r332}, {%r297, %r298};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r335, %r336}, {%r325}, {%r332}, {%r309, %r310};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r341, %r342}, {%r331}, {%r326}, {%r335, %r336};
	// end inline asm
	ld.shared.u32 	%r348, [%rd62+12];
	// begin inline asm
	lop3.b32 %r347, %r348, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r393, %r347, 2021161080;
	xor.b32  	%r358, %r393, -2139062144;
	shr.u32 	%r352, %r348, 4;
	// begin inline asm
	lop3.b32 %r351, %r352, %r253, %r418, 40;
	// end inline asm
	add.s32 	%r394, %r351, 2021161080;
	xor.b32  	%r364, %r394, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r355, %r356}, {%r357}, {%r358}, {%r323, %r324};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r361, %r362}, {%r363}, {%r364}, {%r329, %r330};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r367, %r368}, {%r357}, {%r364}, {%r341, %r342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r373, %r374}, {%r363}, {%r358}, {%r367, %r368};
	// end inline asm
	sub.s32 	%r395, %r355, %r361;
	add.s32 	%r396, %r395, 2;
	shr.s32 	%r381, %r396, 2;
	add.s32 	%r397, %r373, 2;
	shr.s32 	%r380, %r397, 2;
	sub.s32 	%r398, %r356, %r362;
	add.s32 	%r399, %r398, 2;
	shr.s32 	%r384, %r399, 2;
	add.s32 	%r400, %r374, 2;
	shr.s32 	%r383, %r400, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r379, %r380, %r381;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r382, %r383, %r384;
	// end inline asm
	or.b32  	%r401, %r17, %r683;
	mad.lo.s32 	%r402, %r401, 20, %r18;
	mul.wide.u32 	%rd63, %r402, 4;
	add.s64 	%rd64, %rd33, %rd63;
	st.shared.u32 	[%rd64+4352], %r379;
	st.shared.u32 	[%rd64+4432], %r382;
	add.s32 	%r683, %r683, 8;
	setp.ne.s32 	%p27, %r683, 32;
	@%p27 bra 	$L__BB0_14;
// %bb.15:                              // %L3866
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r439, [%rd9];
	ld.shared.u32 	%r440, [%rd10];
	ld.shared.u32 	%r441, [%rd11];
	ld.shared.u32 	%r442, [%rd12];
	ld.shared.u32 	%r443, [%rd13];
	ld.shared.u32 	%r444, [%rd14];
	ld.shared.u32 	%r445, [%rd15];
	ld.shared.u32 	%r446, [%rd16];
	cvt.s32.s16 	%r447, %r439;
	shr.s32 	%r448, %r439, 16;
	cvt.s32.s16 	%r449, %r440;
	shr.s32 	%r450, %r440, 16;
	cvt.s32.s16 	%r451, %r441;
	shr.s32 	%r452, %r441, 16;
	cvt.s32.s16 	%r453, %r442;
	shr.s32 	%r454, %r442, 16;
	cvt.s32.s16 	%r455, %r443;
	shr.s32 	%r456, %r443, 16;
	cvt.s32.s16 	%r457, %r444;
	shr.s32 	%r458, %r444, 16;
	cvt.s32.s16 	%r459, %r445;
	shr.s32 	%r460, %r445, 16;
	cvt.s32.s16 	%r461, %r446;
	shr.s32 	%r462, %r446, 16;
	add.s32 	%r463, %r447, %r19;
	shr.s32 	%r464, %r463, %r20;
	add.s32 	%r465, %r448, %r19;
	shr.s32 	%r466, %r465, %r20;
	add.s32 	%r467, %r449, %r21;
	shr.s32 	%r468, %r467, %r22;
	add.s32 	%r469, %r450, %r21;
	shr.s32 	%r470, %r469, %r22;
	add.s32 	%r471, %r451, %r19;
	shr.s32 	%r472, %r471, %r20;
	add.s32 	%r473, %r452, %r19;
	shr.s32 	%r474, %r473, %r20;
	add.s32 	%r475, %r453, %r21;
	shr.s32 	%r476, %r475, %r22;
	add.s32 	%r477, %r454, %r21;
	shr.s32 	%r478, %r477, %r22;
	add.s32 	%r479, %r455, %r19;
	shr.s32 	%r480, %r479, %r20;
	add.s32 	%r481, %r456, %r19;
	shr.s32 	%r482, %r481, %r20;
	add.s32 	%r483, %r457, %r21;
	shr.s32 	%r484, %r483, %r22;
	add.s32 	%r485, %r458, %r21;
	shr.s32 	%r486, %r485, %r22;
	add.s32 	%r487, %r459, %r19;
	shr.s32 	%r488, %r487, %r20;
	add.s32 	%r489, %r460, %r19;
	shr.s32 	%r490, %r489, %r20;
	add.s32 	%r491, %r461, %r21;
	shr.s32 	%r492, %r491, %r22;
	add.s32 	%r493, %r462, %r21;
	shr.s32 	%r494, %r493, %r22;
	max.s32 	%r495, %r464, -7;
	min.s32 	%r408, %r495, 7;
	setp.ne.s32 	%p28, %r408, %r464;
	or.pred  	%p29, %p71, %p28;
	max.s32 	%r496, %r466, -7;
	min.s32 	%r415, %r496, 7;
	setp.ne.s32 	%p30, %r415, %r466;
	or.pred  	%p31, %p30, %p29;
	max.s32 	%r497, %r468, -7;
	min.s32 	%r426, %r497, 7;
	setp.ne.s32 	%p32, %r426, %r468;
	or.pred  	%p33, %p31, %p32;
	max.s32 	%r498, %r470, -7;
	min.s32 	%r433, %r498, 7;
	setp.ne.s32 	%p34, %r433, %r470;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r499, %r472, -7;
	min.s32 	%r407, %r499, 7;
	setp.ne.s32 	%p36, %r407, %r472;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r500, %r474, -7;
	min.s32 	%r414, %r500, 7;
	setp.ne.s32 	%p38, %r414, %r474;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r501, %r476, -7;
	min.s32 	%r425, %r501, 7;
	setp.ne.s32 	%p40, %r425, %r476;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r502, %r478, -7;
	min.s32 	%r432, %r502, 7;
	setp.ne.s32 	%p42, %r432, %r478;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r503, %r480, -7;
	min.s32 	%r405, %r503, 7;
	setp.ne.s32 	%p44, %r405, %r480;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r504, %r482, -7;
	min.s32 	%r412, %r504, 7;
	setp.ne.s32 	%p46, %r412, %r482;
	or.pred  	%p47, %p46, %p45;
	max.s32 	%r505, %r484, -7;
	min.s32 	%r423, %r505, 7;
	setp.ne.s32 	%p48, %r423, %r484;
	or.pred  	%p49, %p47, %p48;
	max.s32 	%r506, %r486, -7;
	min.s32 	%r430, %r506, 7;
	setp.ne.s32 	%p50, %r430, %r486;
	or.pred  	%p51, %p50, %p49;
	max.s32 	%r507, %r488, -7;
	min.s32 	%r404, %r507, 7;
	setp.ne.s32 	%p52, %r404, %r488;
	or.pred  	%p53, %p51, %p52;
	max.s32 	%r508, %r490, -7;
	min.s32 	%r411, %r508, 7;
	setp.ne.s32 	%p54, %r411, %r490;
	or.pred  	%p55, %p54, %p53;
	max.s32 	%r509, %r492, -7;
	min.s32 	%r422, %r509, 7;
	setp.ne.s32 	%p56, %r422, %r492;
	or.pred  	%p57, %p55, %p56;
	max.s32 	%r510, %r494, -7;
	min.s32 	%r429, %r510, 7;
	setp.ne.s32 	%p58, %r429, %r494;
	or.pred  	%p71, %p58, %p57;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r403, %r404, %r405, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r406, %r407, %r408, %r403;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r410, %r411, %r412, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r413, %r414, %r415, %r410;
	// end inline asm
	shl.b32 	%r420, %r413, 4;
	// begin inline asm
	lop3.b32 %r529, %r418, %r406, %r420, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r421, %r422, %r423, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r424, %r425, %r426, %r421;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r428, %r429, %r430, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r431, %r432, %r433, %r428;
	// end inline asm
	shl.b32 	%r438, %r431, 4;
	// begin inline asm
	lop3.b32 %r537, %r418, %r424, %r438, 202;
	// end inline asm
	setp.eq.s32 	%p59, %r670, 0;
	selp.b32 	%r681, %r529, %r681, %p59;
	selp.b32 	%r682, %r529, %r682, %p59;
	setp.eq.s32 	%p60, %r670, 32;
	selp.b32 	%r673, %r529, %r673, %p60;
	selp.b32 	%r674, %r529, %r674, %p60;
	setp.eq.s32 	%p61, %r670, 64;
	selp.b32 	%r679, %r529, %r679, %p61;
	selp.b32 	%r680, %r529, %r680, %p61;
	selp.b32 	%r677, %r537, %r677, %p59;
	selp.b32 	%r678, %r537, %r678, %p59;
	selp.b32 	%r671, %r537, %r671, %p60;
	selp.b32 	%r672, %r537, %r672, %p60;
	selp.b32 	%r675, %r537, %r675, %p61;
	selp.b32 	%r676, %r537, %r676, %p61;
	add.s32 	%r61, %r670, 32;
	setp.ne.s32 	%p62, %r670, 96;
	mov.u32 	%r670, %r61;
	@%p62 bra 	$L__BB0_13;
// %bb.16:                              // %L5288.L5294_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p63, %r24, 0;
	setp.eq.s32 	%p64, %r23, 0;
	// begin inline asm
	prmt.b32 %r511, %r681, %r673, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r682, %r674, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r677, %r671, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r678, %r672, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r679, %r529, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r680, %r529, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r675, %r537, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r676, %r537, %r129;
	// end inline asm
	selp.b32 	%r607, %r515, %r511, %p64;
	shfl.sync.bfly.b32	%r608, %r607, 1, 31, -1;
	selp.b32 	%r544, %r511, %r608, %p64;
	selp.b32 	%r545, %r608, %r515, %p64;
	selp.b32 	%r609, %r523, %r519, %p64;
	shfl.sync.bfly.b32	%r610, %r609, 1, 31, -1;
	selp.b32 	%r552, %r519, %r610, %p64;
	selp.b32 	%r553, %r610, %r523, %p64;
	selp.b32 	%r611, %r531, %r527, %p64;
	shfl.sync.bfly.b32	%r612, %r611, 1, 31, -1;
	selp.b32 	%r560, %r527, %r612, %p64;
	selp.b32 	%r561, %r612, %r531, %p64;
	selp.b32 	%r613, %r539, %r535, %p64;
	shfl.sync.bfly.b32	%r614, %r613, 1, 31, -1;
	selp.b32 	%r568, %r535, %r614, %p64;
	selp.b32 	%r569, %r614, %r539, %p64;
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r560, %r561, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r560, %r561, %r129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r568, %r569, %r125;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r568, %r569, %r129;
	// end inline asm
	selp.b32 	%r615, %r559, %r543, %p63;
	shfl.sync.bfly.b32	%r616, %r615, 2, 31, -1;
	selp.b32 	%r576, %r543, %r616, %p63;
	selp.b32 	%r577, %r616, %r559, %p63;
	selp.b32 	%r617, %r567, %r551, %p63;
	shfl.sync.bfly.b32	%r618, %r617, 2, 31, -1;
	selp.b32 	%r584, %r551, %r618, %p63;
	selp.b32 	%r585, %r618, %r567, %p63;
	selp.b32 	%r619, %r563, %r547, %p63;
	shfl.sync.bfly.b32	%r620, %r619, 2, 31, -1;
	selp.b32 	%r592, %r547, %r620, %p63;
	selp.b32 	%r593, %r620, %r563, %p63;
	selp.b32 	%r621, %r571, %r555, %p63;
	shfl.sync.bfly.b32	%r622, %r621, 2, 31, -1;
	selp.b32 	%r600, %r555, %r622, %p63;
	selp.b32 	%r601, %r622, %r571, %p63;
	// begin inline asm
	prmt.b32 %r575, %r576, %r577, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r576, %r577, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r584, %r585, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r584, %r585, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r591, %r592, %r593, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r592, %r593, %r97;
	// end inline asm
	// begin inline asm
	prmt.b32 %r599, %r600, %r601, %r93;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r600, %r601, %r97;
	// end inline asm
	selp.b32 	%r623, %r591, %r575, %p17;
	shfl.sync.bfly.b32	%r624, %r623, 4, 31, -1;
	selp.b32 	%r625, %r575, %r624, %p17;
	selp.b32 	%r626, %r624, %r591, %p17;
	selp.b32 	%r627, %r599, %r583, %p17;
	shfl.sync.bfly.b32	%r628, %r627, 4, 31, -1;
	selp.b32 	%r629, %r583, %r628, %p17;
	selp.b32 	%r630, %r628, %r599, %p17;
	selp.b32 	%r631, %r595, %r579, %p17;
	shfl.sync.bfly.b32	%r632, %r631, 4, 31, -1;
	selp.b32 	%r633, %r579, %r632, %p17;
	selp.b32 	%r634, %r632, %r595, %p17;
	selp.b32 	%r635, %r603, %r587, %p17;
	shfl.sync.bfly.b32	%r636, %r635, 4, 31, -1;
	selp.b32 	%r637, %r587, %r636, %p17;
	selp.b32 	%r638, %r636, %r603, %p17;
	selp.b32 	%r639, %r633, %r625, %p64;
	shfl.sync.bfly.b32	%r640, %r639, 1, 31, -1;
	selp.b32 	%r641, %r625, %r640, %p64;
	selp.b32 	%r642, %r640, %r633, %p64;
	selp.b32 	%r643, %r637, %r629, %p64;
	shfl.sync.bfly.b32	%r644, %r643, 1, 31, -1;
	selp.b32 	%r645, %r629, %r644, %p64;
	selp.b32 	%r646, %r644, %r637, %p64;
	selp.b32 	%r647, %r634, %r626, %p64;
	shfl.sync.bfly.b32	%r648, %r647, 1, 31, -1;
	selp.b32 	%r649, %r626, %r648, %p64;
	selp.b32 	%r650, %r648, %r634, %p64;
	selp.b32 	%r651, %r638, %r630, %p64;
	shfl.sync.bfly.b32	%r652, %r651, 1, 31, -1;
	selp.b32 	%r653, %r630, %r652, %p64;
	selp.b32 	%r654, %r652, %r638, %p64;
	or.b32  	%r655, %r669, %r25;
	or.b32  	%r656, %r655, %r26;
	shr.u32 	%r657, %r656, 2;
	and.b32  	%r658, %r657, 2044;
	or.b32  	%r659, %r27, %r658;
	shl.b32 	%r660, %r659, 2;
	cvt.u64.u32 	%rd65, %r660;
	add.s64 	%rd66, %rd4, %rd65;
	st.global.v4.u32 	[%rd66], {%r641, %r649, %r642, %r650};
	or.b32  	%r661, %r28, %r658;
	shl.b32 	%r662, %r661, 2;
	cvt.u64.u32 	%rd67, %r662;
	add.s64 	%rd68, %rd4, %rd67;
	st.global.v4.u32 	[%rd68], {%r645, %r653, %r646, %r654};
	add.s32 	%r62, %r669, 128;
	setp.ne.s32 	%p66, %r669, 32640;
	mov.u32 	%r669, %r62;
	@%p66 bra 	$L__BB0_11;
$L__BB0_17:                             // %L5954
	selp.u32 	%r663, 1, 0, %p71;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r663, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r664, 1, 0, %p2; 
	}
	setp.eq.s32 	%p67, %r664, 0;
	or.pred  	%p68, %p67, %p1;
	@%p68 bra 	$L__BB0_19;
// %bb.18:                              // %L5985
	st.global.u32 	[%rd8], %r78;
$L__BB0_19:                             // %L6031
	mov.u32 	%r666, 0;
	st.global.u32 	[%rd7], %r666;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r667, 2;
	st.global.u32 	[%rd7], %r667;
	mov.u64 	%rd69, exception480;
	cvta.global.u64 	%rd70, %rd69;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd70;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L450
	mov.u32 	%r87, 3;
	st.global.u32 	[%rd7], %r87;
	mov.u64 	%rd27, exception480;
	cvta.global.u64 	%rd28, %rd27;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd28;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
