// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception510[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<28>;
	.reg .b32 	%r<688>;
	.reg .b64 	%rd<67>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r73, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd21, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r74, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r74, 4351;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r75, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r75, 9471;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	ld.param.u64 	%rd7, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r76, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r77, %r3, 7;
	or.b32  	%r78, %r76, %r2;
	or.b32  	%r79, %r78, %r77;
	mul.wide.u32 	%rd26, %r79, 4;
	add.s64 	%rd8, %rd7, %rd26;
	mov.u32 	%r80, 1;
	st.global.u32 	[%rd8], %r80;
	ld.global.u32 	%r4, [%rd1];
	setp.lt.s32 	%p3, %r4, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L172
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r5, [%rd2];
	setp.lt.s32 	%p4, %r5, %r4;
	setp.gt.s32 	%p5, %r5, 16384;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L182
	sub.s32 	%r81, %r5, %r4;
	and.b32  	%r82, %r81, 127;
	setp.eq.s32 	%p7, %r82, 0;
	@%p7 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_7;
$L__BB0_17:                             // %pass120
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shl.b32 	%r83, %r1, 2;
	shl.b32 	%r84, %r3, 1;
	and.b32  	%r40, %r84, 4064;
	shr.u32 	%r85, %r2, 3;
	or.b32  	%r41, %r83, %r85;
	or.b32  	%r86, %r41, %r40;
	mul.wide.u32 	%rd27, %r86, 4;
	add.s64 	%rd28, %rd5, %rd27;
	ld.global.u32 	%r42, [%rd28];
	or.b32  	%r87, %r86, 16;
	mul.wide.u32 	%rd29, %r87, 4;
	add.s64 	%rd30, %rd5, %rd29;
	ld.global.u32 	%r43, [%rd30];
	add.s32 	%r44, %r42, -3;
	setp.lt.u32 	%p8, %r44, 31;
	add.s32 	%r45, %r43, -3;
	setp.lt.u32 	%p9, %r45, 31;
	and.pred  	%p10, %p8, %p9;
	@!%p10 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_9;
$L__BB0_9:                              // %pass221
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.param.u64 	%rd6, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	add.s32 	%r154, %r43, -2;
	add.s32 	%r155, %r42, -2;
	shl.b32 	%r156, %r1, 8;
	and.b32  	%r157, %r156, 512;
	shl.b32 	%r158, %r3, 6;
	and.b32  	%r159, %r158, 130048;
	shl.b32 	%r160, %r2, 3;
	or.b32  	%r161, %r156, %r160;
	and.b32  	%r162, %r161, 448;
	and.b32  	%r46, %r2, 4;
	and.b32  	%r163, %r160, 24;
	or.b32  	%r164, %r46, %r163;
	or.b32  	%r165, %r157, %r159;
	or.b32  	%r166, %r165, %r162;
	or.b32  	%r167, %r166, %r164;
	shl.b32 	%r168, %r167, 2;
	cvt.u64.u32 	%rd33, %r168;
	add.s64 	%rd34, %rd33, %rd3;
	ld.global.v4.u32 	{%r90, %r91, %r98, %r99}, [%rd34];
	ld.global.v4.u32 	{%r106, %r107, %r114, %r115}, [%rd34+128];
	mov.u32 	%r116, 21520;
	// begin inline asm
	prmt.b32 %r122, %r90, %r91, %r116;
	// end inline asm
	mov.u32 	%r120, 30258;
	// begin inline asm
	prmt.b32 %r123, %r90, %r91, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r130, %r98, %r99, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r98, %r99, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r138, %r106, %r107, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r106, %r107, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r114, %r115, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r114, %r115, %r120;
	// end inline asm
	mov.u32 	%r148, 25152;
	// begin inline asm
	prmt.b32 %r121, %r122, %r123, %r148;
	// end inline asm
	mov.u32 	%r152, 29521;
	// begin inline asm
	prmt.b32 %r125, %r122, %r123, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r130, %r131, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r130, %r131, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r138, %r139, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r138, %r139, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r146, %r147, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r146, %r147, %r152;
	// end inline asm
	setp.eq.s32 	%p11, %r46, 0;
	selp.b32 	%r169, %r137, %r121, %p11;
	shfl.sync.bfly.b32	%r170, %r169, 4, 31, -1;
	selp.b32 	%r47, %r121, %r170, %p11;
	selp.b32 	%r48, %r170, %r137, %p11;
	selp.b32 	%r171, %r141, %r125, %p11;
	shfl.sync.bfly.b32	%r172, %r171, 4, 31, -1;
	selp.b32 	%r49, %r125, %r172, %p11;
	selp.b32 	%r50, %r172, %r141, %p11;
	selp.b32 	%r173, %r145, %r129, %p11;
	shfl.sync.bfly.b32	%r174, %r173, 4, 31, -1;
	selp.b32 	%r51, %r129, %r174, %p11;
	selp.b32 	%r52, %r174, %r145, %p11;
	selp.b32 	%r175, %r149, %r133, %p11;
	shfl.sync.bfly.b32	%r176, %r175, 4, 31, -1;
	selp.b32 	%r53, %r133, %r176, %p11;
	selp.b32 	%r54, %r176, %r149, %p11;
	shl.b32 	%r177, %r4, 12;
	shl.b32 	%r178, %r2, 2;
	and.b32  	%r179, %r178, 12;
	shl.b32 	%r180, %r3, 9;
	and.b32  	%r55, %r180, 7680;
	or.b32  	%r181, %r179, %r40;
	shl.b32 	%r182, %r1, 4;
	and.b32  	%r56, %r182, 16;
	shr.u32 	%r57, %r2, 2;
	shl.b32 	%r183, %r1, 3;
	and.b32  	%r184, %r183, 16;
	or.b32  	%r185, %r181, %r184;
	or.b32  	%r58, %r185, %r177;
	or.b32  	%r59, %r180, 8;
	shr.u32 	%r186, %r1, 1;
	mul.lo.s32 	%r187, %r186, 544;
	or.b32  	%r60, %r179, %r187;
	and.b32  	%r188, %r183, 8;
	or.b32  	%r189, %r188, %r57;
	shl.b32 	%r190, %r2, 1;
	and.b32  	%r61, %r190, 6;
	mul.lo.s32 	%r191, %r186, 640;
	or.b32  	%r62, %r189, %r191;
	and.b32  	%r192, %r2, 7;
	or.b32  	%r193, %r41, 640;
	shl.b32 	%r63, %r80, %r44;
	min.u32 	%r64, %r155, 31;
	shl.b32 	%r65, %r80, %r45;
	min.u32 	%r66, %r154, 31;
	and.b32  	%r67, %r2, 1;
	and.b32  	%r68, %r2, 2;
	shl.b32 	%r195, %r2, 5;
	and.b32  	%r69, %r195, 64;
	shl.b32 	%r196, %r2, 4;
	and.b32  	%r70, %r196, 16;
	and.b32  	%r71, %r160, 32;
	shl.b32 	%r197, %r1, 19;
	shl.b32 	%r198, %r2, 14;
	and.b32  	%r199, %r198, 393216;
	or.b32  	%r200, %r199, %r197;
	or.b32  	%r201, %r200, %r159;
	or.b32  	%r202, %r2, 24;
	mul.lo.s32 	%r203, %r202, 20;
	add.s32 	%r204, %r193, %r203;
	mul.wide.u32 	%rd35, %r204, 4;
	mov.u64 	%rd36, shmem;
	add.s64 	%rd37, %rd36, 4352;
	add.s64 	%rd9, %rd37, %rd35;
	or.b32  	%r205, %r57, %r56;
	mul.lo.s32 	%r206, %r205, 17;
	add.s32 	%r207, %r60, %r206;
	mul.wide.u32 	%rd38, %r207, 4;
	add.s64 	%rd10, %rd36, %rd38;
	cvt.u64.u32 	%rd39, %r206;
	cvt.u64.u32 	%rd40, %r60;
	add.s64 	%rd41, %rd40, %rd39;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd11, %rd36, %rd42;
	or.b32  	%r208, %r205, 8;
	mul.lo.s32 	%r209, %r208, 17;
	add.s32 	%r210, %r60, %r209;
	mul.wide.u32 	%rd43, %r210, 4;
	add.s64 	%rd12, %rd36, %rd43;
	cvt.u64.u32 	%rd44, %r209;
	add.s64 	%rd45, %rd40, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd13, %rd36, %rd46;
	mul.lo.s32 	%r211, %r192, 20;
	add.s32 	%r212, %r211, %r41;
	mul.wide.u32 	%rd47, %r212, 4;
	add.s64 	%rd14, %rd37, %rd47;
	add.s32 	%r213, %r193, %r211;
	mul.wide.u32 	%rd48, %r213, 4;
	add.s64 	%rd15, %rd37, %rd48;
	add.s32 	%r214, %r211, 160;
	add.s32 	%r215, %r214, %r41;
	mul.wide.u32 	%rd49, %r215, 4;
	add.s64 	%rd16, %rd37, %rd49;
	add.s32 	%r216, %r193, %r214;
	mul.wide.u32 	%rd50, %r216, 4;
	add.s64 	%rd17, %rd37, %rd50;
	add.s32 	%r217, %r211, 320;
	add.s32 	%r218, %r217, %r41;
	mul.wide.u32 	%rd51, %r218, 4;
	add.s64 	%rd18, %rd37, %rd51;
	add.s32 	%r219, %r193, %r217;
	mul.wide.u32 	%rd52, %r219, 4;
	add.s64 	%rd19, %rd37, %rd52;
	add.s32 	%r220, %r203, %r41;
	mul.wide.u32 	%rd53, %r220, 4;
	add.s64 	%rd20, %rd37, %rd53;
	shl.b32 	%r72, %r201, 2;
	mov.u32 	%r673, 0;
$L__BB0_10:                             // %L993
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_12 Depth 2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r221, %r673, %r4;
	setp.le.s32 	%p12, %r5, %r221;
	@%p12 bra 	$L__BB0_16;
// %bb.11:                              // %L1000.preheader
                                        //   in Loop: Header=BB0_10 Depth=1
	add.s32 	%r7, %r673, %r55;
	add.s32 	%r8, %r59, %r673;
	mov.u32 	%r274, 0;
	mov.u32 	%r674, %r274;
	mov.u32 	%r675, %r274;
	mov.u32 	%r676, %r274;
	mov.u32 	%r677, %r274;
	mov.u32 	%r678, %r274;
	mov.u32 	%r679, %r274;
	mov.u32 	%r680, %r274;
	mov.u32 	%r681, %r274;
	mov.u32 	%r682, %r274;
	mov.u32 	%r683, %r274;
	mov.u32 	%r684, %r274;
	mov.u32 	%r685, %r274;
	mov.u32 	%r686, %r274;
$L__BB0_12:                             // %L1000
                                        //   Parent Loop BB0_10 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_13 Depth 3
	add.s32 	%r224, %r7, %r674;
	and.b32  	%r225, %r224, 8160;
	or.b32  	%r226, %r225, %r56;
	or.b32  	%r227, %r226, %r57;
	shl.b32 	%r228, %r227, 12;
	add.s32 	%r229, %r58, %r228;
	shr.s32 	%r230, %r229, 31;
	shr.u32 	%r231, %r230, 7;
	add.s32 	%r232, %r229, %r231;
	shr.s32 	%r233, %r232, 25;
	setp.lt.s32 	%p13, %r229, 0;
	and.b32  	%r234, %r232, -33554432;
	setp.ne.s32 	%p14, %r234, %r229;
	and.pred  	%p15, %p13, %p14;
	selp.u32 	%r235, 1, 0, %p15;
	sub.s32 	%r236, %r235, %r233;
	shl.b32 	%r237, %r236, 25;
	add.s32 	%r238, %r237, %r229;
	mul.wide.s32 	%rd54, %r238, 4;
	add.s64 	%rd55, %rd4, %rd54;
	ld.global.v4.u32 	{%r239, %r240, %r241, %r242}, [%rd55];
	add.s32 	%r243, %r8, %r674;
	and.b32  	%r244, %r243, 8168;
	or.b32  	%r245, %r244, %r56;
	or.b32  	%r246, %r245, %r57;
	shl.b32 	%r247, %r246, 12;
	add.s32 	%r248, %r58, %r247;
	shr.s32 	%r249, %r248, 31;
	shr.u32 	%r250, %r249, 7;
	add.s32 	%r251, %r248, %r250;
	shr.s32 	%r252, %r251, 25;
	setp.lt.s32 	%p16, %r248, 0;
	and.b32  	%r253, %r251, -33554432;
	setp.ne.s32 	%p17, %r253, %r248;
	and.pred  	%p18, %p16, %p17;
	selp.u32 	%r254, 1, 0, %p18;
	sub.s32 	%r255, %r254, %r252;
	shl.b32 	%r256, %r255, 25;
	add.s32 	%r257, %r256, %r248;
	mul.wide.s32 	%rd56, %r257, 4;
	add.s64 	%rd57, %rd4, %rd56;
	ld.global.v4.u32 	{%r258, %r259, %r260, %r261}, [%rd57];
	st.shared.u32 	[%rd10], %r239;
	st.shared.u32 	[%rd11+4], %r240;
	st.shared.u32 	[%rd11+8], %r241;
	st.shared.u32 	[%rd11+12], %r242;
	st.shared.u32 	[%rd12], %r258;
	st.shared.u32 	[%rd13+4], %r259;
	st.shared.u32 	[%rd13+8], %r260;
	st.shared.u32 	[%rd13+12], %r261;
	bar.sync 	0;
	mov.u32 	%r687, %r274;
$L__BB0_13:                             // %L2911
                                        //   Parent Loop BB0_10 Depth=1
                                        //     Parent Loop BB0_12 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r396, %r687, %r57;
	mad.lo.s32 	%r397, %r396, 17, %r60;
	mul.wide.u32 	%rd58, %r397, 4;
	add.s64 	%rd60, %rd36, %rd58;
	ld.shared.u32 	%r263, [%rd60];
	mov.u32 	%r264, 134744072;
	mov.u32 	%r429, 252645135;
	// begin inline asm
	lop3.b32 %r262, %r263, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r398, %r262, 2021161080;
	xor.b32  	%r273, %r398, -2139062144;
	shr.u32 	%r267, %r263, 4;
	// begin inline asm
	lop3.b32 %r266, %r267, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r399, %r266, 2021161080;
	xor.b32  	%r279, %r399, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r270, %r271}, {%r47}, {%r273}, {%r274, %r274};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r276, %r277}, {%r49}, {%r279}, {%r274, %r274};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r282, %r283}, {%r47}, {%r279}, {%r274, %r274};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r288, %r289}, {%r49}, {%r273}, {%r282, %r283};
	// end inline asm
	ld.shared.u32 	%r295, [%rd60+4];
	// begin inline asm
	lop3.b32 %r294, %r295, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r400, %r294, 2021161080;
	xor.b32  	%r305, %r400, -2139062144;
	shr.u32 	%r299, %r295, 4;
	// begin inline asm
	lop3.b32 %r298, %r299, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r401, %r298, 2021161080;
	xor.b32  	%r311, %r401, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r302, %r303}, {%r51}, {%r305}, {%r270, %r271};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r308, %r309}, {%r53}, {%r311}, {%r276, %r277};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r314, %r315}, {%r51}, {%r311}, {%r288, %r289};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r320, %r321}, {%r53}, {%r305}, {%r314, %r315};
	// end inline asm
	ld.shared.u32 	%r327, [%rd60+8];
	// begin inline asm
	lop3.b32 %r326, %r327, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r402, %r326, 2021161080;
	xor.b32  	%r337, %r402, -2139062144;
	shr.u32 	%r331, %r327, 4;
	// begin inline asm
	lop3.b32 %r330, %r331, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r403, %r330, 2021161080;
	xor.b32  	%r343, %r403, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r334, %r335}, {%r48}, {%r337}, {%r302, %r303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r340, %r341}, {%r50}, {%r343}, {%r308, %r309};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r346, %r347}, {%r48}, {%r343}, {%r320, %r321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r352, %r353}, {%r50}, {%r337}, {%r346, %r347};
	// end inline asm
	ld.shared.u32 	%r359, [%rd60+12];
	// begin inline asm
	lop3.b32 %r358, %r359, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r404, %r358, 2021161080;
	xor.b32  	%r369, %r404, -2139062144;
	shr.u32 	%r363, %r359, 4;
	// begin inline asm
	lop3.b32 %r362, %r363, %r264, %r429, 40;
	// end inline asm
	add.s32 	%r405, %r362, 2021161080;
	xor.b32  	%r375, %r405, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r366, %r367}, {%r52}, {%r369}, {%r334, %r335};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r372, %r373}, {%r54}, {%r375}, {%r340, %r341};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r378, %r379}, {%r52}, {%r375}, {%r352, %r353};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r384, %r385}, {%r54}, {%r369}, {%r378, %r379};
	// end inline asm
	sub.s32 	%r406, %r366, %r372;
	add.s32 	%r407, %r406, 2;
	shr.s32 	%r392, %r407, 2;
	add.s32 	%r408, %r384, 2;
	shr.s32 	%r391, %r408, 2;
	sub.s32 	%r409, %r367, %r373;
	add.s32 	%r410, %r409, 2;
	shr.s32 	%r395, %r410, 2;
	add.s32 	%r411, %r385, 2;
	shr.s32 	%r394, %r411, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r390, %r391, %r392;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r393, %r394, %r395;
	// end inline asm
	or.b32  	%r412, %r61, %r687;
	mad.lo.s32 	%r413, %r412, 20, %r62;
	mul.wide.u32 	%rd61, %r413, 4;
	add.s64 	%rd62, %rd36, %rd61;
	st.shared.u32 	[%rd62+4352], %r390;
	st.shared.u32 	[%rd62+4432], %r393;
	add.s32 	%r687, %r687, 8;
	setp.ne.s32 	%p19, %r687, 32;
	@%p19 bra 	$L__BB0_13;
// %bb.14:                              // %L4177
                                        //   in Loop: Header=BB0_12 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r450, [%rd14];
	ld.shared.u32 	%r451, [%rd15];
	ld.shared.u32 	%r452, [%rd16];
	ld.shared.u32 	%r453, [%rd17];
	ld.shared.u32 	%r454, [%rd18];
	ld.shared.u32 	%r455, [%rd19];
	ld.shared.u32 	%r456, [%rd20];
	ld.shared.u32 	%r457, [%rd9];
	cvt.s32.s16 	%r458, %r450;
	shr.s32 	%r459, %r450, 16;
	cvt.s32.s16 	%r460, %r451;
	shr.s32 	%r461, %r451, 16;
	cvt.s32.s16 	%r462, %r452;
	shr.s32 	%r463, %r452, 16;
	cvt.s32.s16 	%r464, %r453;
	shr.s32 	%r465, %r453, 16;
	cvt.s32.s16 	%r466, %r454;
	shr.s32 	%r467, %r454, 16;
	cvt.s32.s16 	%r468, %r455;
	shr.s32 	%r469, %r455, 16;
	cvt.s32.s16 	%r470, %r456;
	shr.s32 	%r471, %r456, 16;
	cvt.s32.s16 	%r472, %r457;
	shr.s32 	%r473, %r457, 16;
	add.s32 	%r474, %r458, %r63;
	shr.s32 	%r475, %r474, %r64;
	add.s32 	%r476, %r459, %r63;
	shr.s32 	%r477, %r476, %r64;
	add.s32 	%r478, %r460, %r65;
	shr.s32 	%r479, %r478, %r66;
	add.s32 	%r480, %r461, %r65;
	shr.s32 	%r481, %r480, %r66;
	add.s32 	%r482, %r462, %r63;
	shr.s32 	%r483, %r482, %r64;
	add.s32 	%r484, %r463, %r63;
	shr.s32 	%r485, %r484, %r64;
	add.s32 	%r486, %r464, %r65;
	shr.s32 	%r487, %r486, %r66;
	add.s32 	%r488, %r465, %r65;
	shr.s32 	%r489, %r488, %r66;
	add.s32 	%r490, %r466, %r63;
	shr.s32 	%r491, %r490, %r64;
	add.s32 	%r492, %r467, %r63;
	shr.s32 	%r493, %r492, %r64;
	add.s32 	%r494, %r468, %r65;
	shr.s32 	%r495, %r494, %r66;
	add.s32 	%r496, %r469, %r65;
	shr.s32 	%r497, %r496, %r66;
	add.s32 	%r498, %r470, %r63;
	shr.s32 	%r499, %r498, %r64;
	add.s32 	%r500, %r471, %r63;
	shr.s32 	%r501, %r500, %r64;
	add.s32 	%r502, %r472, %r65;
	shr.s32 	%r503, %r502, %r66;
	add.s32 	%r504, %r473, %r65;
	shr.s32 	%r505, %r504, %r66;
	max.s32 	%r506, %r475, -7;
	min.s32 	%r419, %r506, 7;
	max.s32 	%r507, %r477, -7;
	min.s32 	%r426, %r507, 7;
	max.s32 	%r508, %r479, -7;
	min.s32 	%r437, %r508, 7;
	max.s32 	%r509, %r481, -7;
	min.s32 	%r444, %r509, 7;
	max.s32 	%r510, %r483, -7;
	min.s32 	%r418, %r510, 7;
	max.s32 	%r511, %r485, -7;
	min.s32 	%r425, %r511, 7;
	max.s32 	%r512, %r487, -7;
	min.s32 	%r436, %r512, 7;
	max.s32 	%r513, %r489, -7;
	min.s32 	%r443, %r513, 7;
	max.s32 	%r514, %r491, -7;
	min.s32 	%r416, %r514, 7;
	max.s32 	%r515, %r493, -7;
	min.s32 	%r423, %r515, 7;
	max.s32 	%r516, %r495, -7;
	min.s32 	%r434, %r516, 7;
	max.s32 	%r517, %r497, -7;
	min.s32 	%r441, %r517, 7;
	max.s32 	%r518, %r499, -7;
	min.s32 	%r415, %r518, 7;
	max.s32 	%r519, %r501, -7;
	min.s32 	%r422, %r519, 7;
	max.s32 	%r520, %r503, -7;
	min.s32 	%r433, %r520, 7;
	max.s32 	%r521, %r505, -7;
	min.s32 	%r440, %r521, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r414, %r415, %r416, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r417, %r418, %r419, %r414;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r421, %r422, %r423, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r424, %r425, %r426, %r421;
	// end inline asm
	shl.b32 	%r431, %r424, 4;
	// begin inline asm
	lop3.b32 %r540, %r429, %r417, %r431, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r432, %r433, %r434, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r435, %r436, %r437, %r432;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r439, %r440, %r441, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r442, %r443, %r444, %r439;
	// end inline asm
	shl.b32 	%r449, %r442, 4;
	// begin inline asm
	lop3.b32 %r548, %r429, %r435, %r449, 202;
	// end inline asm
	setp.eq.s32 	%p20, %r674, 0;
	selp.b32 	%r685, %r540, %r685, %p20;
	selp.b32 	%r686, %r540, %r686, %p20;
	setp.eq.s32 	%p21, %r674, 32;
	selp.b32 	%r677, %r540, %r677, %p21;
	selp.b32 	%r678, %r540, %r678, %p21;
	setp.eq.s32 	%p22, %r674, 64;
	selp.b32 	%r683, %r540, %r683, %p22;
	selp.b32 	%r684, %r540, %r684, %p22;
	selp.b32 	%r681, %r548, %r681, %p20;
	selp.b32 	%r682, %r548, %r682, %p20;
	selp.b32 	%r675, %r548, %r675, %p21;
	selp.b32 	%r676, %r548, %r676, %p21;
	selp.b32 	%r679, %r548, %r679, %p22;
	selp.b32 	%r680, %r548, %r680, %p22;
	add.s32 	%r38, %r674, 32;
	setp.ne.s32 	%p23, %r674, 96;
	mov.u32 	%r674, %r38;
	@%p23 bra 	$L__BB0_12;
// %bb.15:                              // %L5731
                                        //   in Loop: Header=BB0_10 Depth=1
	setp.eq.s32 	%p24, %r68, 0;
	setp.eq.s32 	%p25, %r67, 0;
	// begin inline asm
	prmt.b32 %r522, %r685, %r677, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r686, %r678, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r681, %r675, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r682, %r676, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r683, %r540, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r684, %r540, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r679, %r548, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r680, %r548, %r152;
	// end inline asm
	selp.b32 	%r618, %r526, %r522, %p25;
	shfl.sync.bfly.b32	%r619, %r618, 1, 31, -1;
	selp.b32 	%r555, %r522, %r619, %p25;
	selp.b32 	%r556, %r619, %r526, %p25;
	selp.b32 	%r620, %r534, %r530, %p25;
	shfl.sync.bfly.b32	%r621, %r620, 1, 31, -1;
	selp.b32 	%r563, %r530, %r621, %p25;
	selp.b32 	%r564, %r621, %r534, %p25;
	selp.b32 	%r622, %r542, %r538, %p25;
	shfl.sync.bfly.b32	%r623, %r622, 1, 31, -1;
	selp.b32 	%r571, %r538, %r623, %p25;
	selp.b32 	%r572, %r623, %r542, %p25;
	selp.b32 	%r624, %r550, %r546, %p25;
	shfl.sync.bfly.b32	%r625, %r624, 1, 31, -1;
	selp.b32 	%r579, %r546, %r625, %p25;
	selp.b32 	%r580, %r625, %r550, %p25;
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r152;
	// end inline asm
	selp.b32 	%r626, %r570, %r554, %p24;
	shfl.sync.bfly.b32	%r627, %r626, 2, 31, -1;
	selp.b32 	%r587, %r554, %r627, %p24;
	selp.b32 	%r588, %r627, %r570, %p24;
	selp.b32 	%r628, %r578, %r562, %p24;
	shfl.sync.bfly.b32	%r629, %r628, 2, 31, -1;
	selp.b32 	%r595, %r562, %r629, %p24;
	selp.b32 	%r596, %r629, %r578, %p24;
	selp.b32 	%r630, %r574, %r558, %p24;
	shfl.sync.bfly.b32	%r631, %r630, 2, 31, -1;
	selp.b32 	%r603, %r558, %r631, %p24;
	selp.b32 	%r604, %r631, %r574, %p24;
	selp.b32 	%r632, %r582, %r566, %p24;
	shfl.sync.bfly.b32	%r633, %r632, 2, 31, -1;
	selp.b32 	%r611, %r566, %r633, %p24;
	selp.b32 	%r612, %r633, %r582, %p24;
	// begin inline asm
	prmt.b32 %r586, %r587, %r588, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r587, %r588, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r595, %r596, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r595, %r596, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r603, %r604, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r606, %r603, %r604, %r120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r611, %r612, %r116;
	// end inline asm
	// begin inline asm
	prmt.b32 %r614, %r611, %r612, %r120;
	// end inline asm
	selp.b32 	%r634, %r602, %r586, %p11;
	shfl.sync.bfly.b32	%r635, %r634, 4, 31, -1;
	selp.b32 	%r636, %r586, %r635, %p11;
	selp.b32 	%r637, %r635, %r602, %p11;
	selp.b32 	%r638, %r610, %r594, %p11;
	shfl.sync.bfly.b32	%r639, %r638, 4, 31, -1;
	selp.b32 	%r640, %r594, %r639, %p11;
	selp.b32 	%r641, %r639, %r610, %p11;
	selp.b32 	%r642, %r606, %r590, %p11;
	shfl.sync.bfly.b32	%r643, %r642, 4, 31, -1;
	selp.b32 	%r644, %r590, %r643, %p11;
	selp.b32 	%r645, %r643, %r606, %p11;
	selp.b32 	%r646, %r614, %r598, %p11;
	shfl.sync.bfly.b32	%r647, %r646, 4, 31, -1;
	selp.b32 	%r648, %r598, %r647, %p11;
	selp.b32 	%r649, %r647, %r614, %p11;
	selp.b32 	%r650, %r644, %r636, %p25;
	shfl.sync.bfly.b32	%r651, %r650, 1, 31, -1;
	selp.b32 	%r652, %r636, %r651, %p25;
	selp.b32 	%r653, %r651, %r644, %p25;
	selp.b32 	%r654, %r648, %r640, %p25;
	shfl.sync.bfly.b32	%r655, %r654, 1, 31, -1;
	selp.b32 	%r656, %r640, %r655, %p25;
	selp.b32 	%r657, %r655, %r648, %p25;
	selp.b32 	%r658, %r645, %r637, %p25;
	shfl.sync.bfly.b32	%r659, %r658, 1, 31, -1;
	selp.b32 	%r660, %r637, %r659, %p25;
	selp.b32 	%r661, %r659, %r645, %p25;
	selp.b32 	%r662, %r649, %r641, %p25;
	shfl.sync.bfly.b32	%r663, %r662, 1, 31, -1;
	selp.b32 	%r664, %r641, %r663, %p25;
	selp.b32 	%r665, %r663, %r649, %p25;
	and.b32  	%r666, %r7, 1920;
	or.b32  	%r667, %r666, %r69;
	or.b32  	%r668, %r667, %r70;
	or.b32  	%r669, %r668, %r71;
	or.b32  	%r670, %r669, %r72;
	cvt.u64.u32 	%rd63, %r670;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.v4.u32 	[%rd64], {%r652, %r660, %r653, %r661};
	st.global.v4.u32 	[%rd64+2048], {%r656, %r664, %r657, %r665};
	add.s32 	%r39, %r673, 128;
	setp.ne.s32 	%p27, %r673, 384;
	mov.u32 	%r673, %r39;
	@%p27 bra 	$L__BB0_10;
$L__BB0_16:                             // %L6434
	mov.u32 	%r671, 0;
	st.global.u32 	[%rd8], %r671;
	ret;
$L__BB0_7:                              // %L191
	mov.u32 	%r672, 2;
	st.global.u32 	[%rd8], %r672;
	mov.u64 	%rd65, exception510;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r73;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r73;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd24, exception1;
	cvta.global.u64 	%rd25, %rd24;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd25;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r73;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L491
	mov.u32 	%r88, 2;
	st.global.u32 	[%rd8], %r88;
	mov.u64 	%rd31, exception510;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd21;
	st.param.b32 	[param0+8], %r73;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
