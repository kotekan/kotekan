// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1506[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<670>;
	.reg .b64 	%rd<77>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r74, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r75, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r75, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r76, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r76, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L31
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r77, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r78, %r3, 7;
	or.b32  	%r79, %r2, %r77;
	or.b32  	%r80, %r79, %r78;
	mul.wide.u32 	%rd24, %r80, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r81, 1;
	st.global.u32 	[%rd6], %r81;
	shr.u32 	%r82, %r2, 3;
	shl.b32 	%r83, %r1, 2;
	or.b32  	%r4, %r83, %r82;
	shl.b32 	%r84, %r3, 1;
	and.b32  	%r5, %r84, 4064;
	or.b32  	%r85, %r4, %r5;
	mul.wide.u32 	%rd25, %r85, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r6, [%rd26];
	or.b32  	%r86, %r85, 16;
	mul.wide.u32 	%rd27, %r86, 4;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.u32 	%r7, [%rd28];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass133
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r153, %r7, -2;
	add.s32 	%r154, %r6, -2;
	shl.b32 	%r155, %r1, 8;
	and.b32  	%r156, %r155, 512;
	and.b32  	%r43, %r2, 4;
	shl.b32 	%r157, %r2, 3;
	and.b32  	%r158, %r157, 24;
	or.b32  	%r159, %r157, %r155;
	and.b32  	%r160, %r159, 448;
	shl.b32 	%r161, %r3, 6;
	and.b32  	%r162, %r161, 130048;
	or.b32  	%r163, %r43, %r156;
	or.b32  	%r164, %r163, %r158;
	or.b32  	%r165, %r164, %r160;
	or.b32  	%r166, %r165, %r162;
	shl.b32 	%r167, %r166, 2;
	cvt.u64.u32 	%rd31, %r167;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r89, %r90, %r97, %r98}, [%rd32];
	ld.global.v4.u32 	{%r105, %r106, %r113, %r114}, [%rd32+128];
	mov.u32 	%r115, 21520;
	// begin inline asm
	prmt.b32 %r121, %r89, %r90, %r115;
	// end inline asm
	mov.u32 	%r119, 30258;
	// begin inline asm
	prmt.b32 %r122, %r89, %r90, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r97, %r98, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r130, %r97, %r98, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r105, %r106, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r138, %r105, %r106, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r145, %r113, %r114, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r113, %r114, %r119;
	// end inline asm
	mov.u32 	%r147, 25152;
	// begin inline asm
	prmt.b32 %r120, %r121, %r122, %r147;
	// end inline asm
	mov.u32 	%r151, 29521;
	// begin inline asm
	prmt.b32 %r124, %r121, %r122, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r129, %r130, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r132, %r129, %r130, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r137, %r138, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r140, %r137, %r138, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r144, %r145, %r146, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r145, %r146, %r151;
	// end inline asm
	shr.u32 	%r44, %r2, 2;
	setp.eq.s32 	%p6, %r43, 0;
	selp.b32 	%r168, %r136, %r120, %p6;
	shfl.sync.bfly.b32	%r169, %r168, 4, 31, -1;
	selp.b32 	%r45, %r120, %r169, %p6;
	selp.b32 	%r46, %r169, %r136, %p6;
	selp.b32 	%r170, %r140, %r124, %p6;
	shfl.sync.bfly.b32	%r171, %r170, 4, 31, -1;
	selp.b32 	%r47, %r124, %r171, %p6;
	selp.b32 	%r48, %r171, %r140, %p6;
	selp.b32 	%r172, %r144, %r128, %p6;
	shfl.sync.bfly.b32	%r173, %r172, 4, 31, -1;
	selp.b32 	%r49, %r128, %r173, %p6;
	selp.b32 	%r50, %r173, %r144, %p6;
	selp.b32 	%r174, %r148, %r132, %p6;
	shfl.sync.bfly.b32	%r175, %r174, 4, 31, -1;
	selp.b32 	%r51, %r132, %r175, %p6;
	selp.b32 	%r52, %r175, %r148, %p6;
	shl.b32 	%r176, %r1, 3;
	and.b32  	%r53, %r176, 16;
	shl.b32 	%r54, %r1, 4;
	shl.b32 	%r55, %r3, 11;
	shl.b32 	%r177, %r2, 2;
	and.b32  	%r56, %r177, 12;
	shr.u32 	%r178, %r1, 1;
	mul.lo.s32 	%r57, %r178, 544;
	and.b32  	%r179, %r54, 16;
	or.b32  	%r180, %r44, %r179;
	mul.lo.s32 	%r181, %r180, 17;
	add.s32 	%r182, %r181, %r57;
	add.s32 	%r183, %r182, %r56;
	mul.wide.u32 	%rd33, %r183, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd7, %rd34, %rd33;
	or.b32  	%r58, %r57, 1;
	cvt.u64.u32 	%rd35, %r56;
	cvt.u64.u32 	%rd36, %r181;
	cvt.u64.u32 	%rd37, %r57;
	add.s64 	%rd38, %rd37, %rd36;
	add.s64 	%rd39, %rd38, %rd35;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd8, %rd34, %rd40;
	or.b32  	%r59, %r57, 2;
	or.b32  	%r60, %r57, 3;
	or.b32  	%r184, %r180, 8;
	mul.lo.s32 	%r185, %r184, 17;
	add.s32 	%r186, %r185, %r57;
	add.s32 	%r187, %r186, %r56;
	mul.wide.u32 	%rd41, %r187, 4;
	add.s64 	%rd9, %rd34, %rd41;
	cvt.u64.u32 	%rd42, %r185;
	add.s64 	%rd43, %rd37, %rd42;
	add.s64 	%rd44, %rd43, %rd35;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd10, %rd34, %rd45;
	mul.lo.s32 	%r188, %r178, 640;
	and.b32  	%r189, %r176, 8;
	shl.b32 	%r190, %r2, 1;
	and.b32  	%r61, %r190, 6;
	or.b32  	%r191, %r189, %r188;
	or.b32  	%r62, %r191, %r44;
	and.b32  	%r192, %r2, 7;
	mul.lo.s32 	%r193, %r192, 20;
	add.s32 	%r194, %r193, %r4;
	mul.wide.u32 	%rd46, %r194, 4;
	add.s64 	%rd47, %rd34, 4352;
	add.s64 	%rd11, %rd47, %rd46;
	or.b32  	%r195, %r4, 640;
	add.s32 	%r196, %r193, %r195;
	mul.wide.u32 	%rd48, %r196, 4;
	add.s64 	%rd12, %rd47, %rd48;
	add.s32 	%r197, %r193, 160;
	add.s32 	%r198, %r197, %r4;
	mul.wide.u32 	%rd49, %r198, 4;
	add.s64 	%rd13, %rd47, %rd49;
	add.s32 	%r199, %r197, %r195;
	mul.wide.u32 	%rd50, %r199, 4;
	add.s64 	%rd14, %rd47, %rd50;
	add.s32 	%r200, %r193, 320;
	add.s32 	%r201, %r200, %r4;
	mul.wide.u32 	%rd51, %r201, 4;
	add.s64 	%rd15, %rd47, %rd51;
	add.s32 	%r202, %r200, %r195;
	mul.wide.u32 	%rd52, %r202, 4;
	add.s64 	%rd16, %rd47, %rd52;
	or.b32  	%r203, %r2, 24;
	mul.lo.s32 	%r204, %r203, 20;
	add.s32 	%r205, %r204, %r4;
	mul.wide.u32 	%rd53, %r205, 4;
	add.s64 	%rd17, %rd47, %rd53;
	add.s32 	%r206, %r204, %r195;
	mul.wide.u32 	%rd54, %r206, 4;
	add.s64 	%rd18, %rd47, %rd54;
	shl.b32 	%r63, %r81, %r8;
	min.u32 	%r64, %r154, 31;
	shl.b32 	%r65, %r81, %r9;
	min.u32 	%r66, %r153, 31;
	and.b32  	%r67, %r2, 1;
	and.b32  	%r68, %r2, 2;
	shl.b32 	%r208, %r3, 12;
	and.b32  	%r209, %r208, 8323072;
	shl.b32 	%r210, %r1, 25;
	shl.b32 	%r211, %r2, 20;
	and.b32  	%r212, %r211, 25165824;
	or.b32  	%r213, %r210, %r212;
	shl.b32 	%r214, %r2, 5;
	and.b32  	%r69, %r214, 64;
	shl.b32 	%r215, %r2, 4;
	and.b32  	%r70, %r215, 16;
	and.b32  	%r71, %r157, 32;
	and.b32  	%r72, %r55, 30720;
	or.b32  	%r73, %r213, %r209;
	mov.u32 	%r152, 0;
	mov.u32 	%r655, %r152;
LBB0_7:                                 // %L955
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r217, %r54, %r655;
	or.b32  	%r218, %r217, %r55;
	and.b32  	%r11, %r218, 32656;
	mov.u32 	%r656, %r152;
	mov.u32 	%r657, %r152;
	mov.u32 	%r658, %r152;
	mov.u32 	%r659, %r152;
	mov.u32 	%r660, %r152;
	mov.u32 	%r661, %r152;
	mov.u32 	%r662, %r152;
	mov.u32 	%r663, %r152;
	mov.u32 	%r664, %r152;
	mov.u32 	%r665, %r152;
	mov.u32 	%r666, %r152;
	mov.u32 	%r667, %r152;
	mov.u32 	%r668, %r152;
LBB0_8:                                 // %L958
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r220, %r44, %r656;
	or.b32  	%r221, %r220, %r11;
	shl.b32 	%r222, %r221, 12;
	or.b32  	%r223, %r222, %r53;
	or.b32  	%r224, %r223, %r56;
	or.b32  	%r225, %r5, %r224;
	mul.wide.s32 	%rd55, %r225, 4;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.v4.u32 	{%r226, %r227, %r228, %r229}, [%rd56];
	or.b32  	%r230, %r225, 32768;
	mul.wide.s32 	%rd57, %r230, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.v4.u32 	{%r231, %r232, %r233, %r234}, [%rd58];
	st.shared.u32 	[%rd7], %r226;
	st.shared.u32 	[%rd8+4], %r227;
	st.shared.u32 	[%rd8+8], %r228;
	st.shared.u32 	[%rd8+12], %r229;
	st.shared.u32 	[%rd9], %r231;
	st.shared.u32 	[%rd10+4], %r232;
	st.shared.u32 	[%rd10+8], %r233;
	st.shared.u32 	[%rd10+12], %r234;
	bar.sync 	0;
	mov.u32 	%r669, %r152;
LBB0_9:                                 // %L3046
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r369, %r44, %r669;
	mul.lo.s32 	%r370, %r369, 17;
	add.s32 	%r371, %r370, %r57;
	add.s32 	%r372, %r371, %r56;
	mul.wide.u32 	%rd59, %r372, 4;
	add.s64 	%rd61, %rd34, %rd59;
	ld.shared.u32 	%r236, [%rd61];
	mov.u32 	%r237, 134744072;
	mov.u32 	%r411, 252645135;
	// begin inline asm
	lop3.b32 %r235, %r236, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r373, %r235, 2021161080;
	xor.b32  	%r246, %r373, -2139062144;
	shr.u32 	%r240, %r236, 4;
	// begin inline asm
	lop3.b32 %r239, %r240, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r374, %r239, 2021161080;
	xor.b32  	%r252, %r374, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r243, %r244}, {%r45}, {%r246}, {%r152, %r152};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r249, %r250}, {%r47}, {%r252}, {%r152, %r152};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r255, %r256}, {%r45}, {%r252}, {%r152, %r152};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r261, %r262}, {%r47}, {%r246}, {%r255, %r256};
	// end inline asm
	add.s32 	%r375, %r58, %r370;
	add.s32 	%r376, %r375, %r56;
	mul.wide.u32 	%rd62, %r376, 4;
	add.s64 	%rd63, %rd34, %rd62;
	ld.shared.u32 	%r268, [%rd63];
	// begin inline asm
	lop3.b32 %r267, %r268, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r377, %r267, 2021161080;
	xor.b32  	%r278, %r377, -2139062144;
	shr.u32 	%r272, %r268, 4;
	// begin inline asm
	lop3.b32 %r271, %r272, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r378, %r271, 2021161080;
	xor.b32  	%r284, %r378, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r275, %r276}, {%r49}, {%r278}, {%r243, %r244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r281, %r282}, {%r51}, {%r284}, {%r249, %r250};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r287, %r288}, {%r49}, {%r284}, {%r261, %r262};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r293, %r294}, {%r51}, {%r278}, {%r287, %r288};
	// end inline asm
	add.s32 	%r379, %r59, %r370;
	add.s32 	%r380, %r379, %r56;
	mul.wide.u32 	%rd64, %r380, 4;
	add.s64 	%rd65, %rd34, %rd64;
	ld.shared.u32 	%r300, [%rd65];
	// begin inline asm
	lop3.b32 %r299, %r300, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r381, %r299, 2021161080;
	xor.b32  	%r310, %r381, -2139062144;
	shr.u32 	%r304, %r300, 4;
	// begin inline asm
	lop3.b32 %r303, %r304, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r382, %r303, 2021161080;
	xor.b32  	%r316, %r382, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r307, %r308}, {%r46}, {%r310}, {%r275, %r276};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r313, %r314}, {%r48}, {%r316}, {%r281, %r282};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r319, %r320}, {%r46}, {%r316}, {%r293, %r294};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r325, %r326}, {%r48}, {%r310}, {%r319, %r320};
	// end inline asm
	add.s32 	%r383, %r60, %r370;
	add.s32 	%r384, %r383, %r56;
	mul.wide.u32 	%rd66, %r384, 4;
	add.s64 	%rd67, %rd34, %rd66;
	ld.shared.u32 	%r332, [%rd67];
	// begin inline asm
	lop3.b32 %r331, %r332, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r385, %r331, 2021161080;
	xor.b32  	%r342, %r385, -2139062144;
	shr.u32 	%r336, %r332, 4;
	// begin inline asm
	lop3.b32 %r335, %r336, %r237, %r411, 40;
	// end inline asm
	add.s32 	%r386, %r335, 2021161080;
	xor.b32  	%r348, %r386, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r339, %r340}, {%r50}, {%r342}, {%r307, %r308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r345, %r346}, {%r52}, {%r348}, {%r313, %r314};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r351, %r352}, {%r50}, {%r348}, {%r325, %r326};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r357, %r358}, {%r52}, {%r342}, {%r351, %r352};
	// end inline asm
	sub.s32 	%r387, %r339, %r345;
	add.s32 	%r388, %r387, 2;
	shr.s32 	%r365, %r388, 2;
	add.s32 	%r389, %r357, 2;
	shr.s32 	%r364, %r389, 2;
	sub.s32 	%r390, %r340, %r346;
	add.s32 	%r391, %r390, 2;
	shr.s32 	%r368, %r391, 2;
	add.s32 	%r392, %r358, 2;
	shr.s32 	%r367, %r392, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r363, %r364, %r365;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r366, %r367, %r368;
	// end inline asm
	or.b32  	%r393, %r61, %r669;
	mad.lo.s32 	%r394, %r393, 20, %r62;
	mul.wide.u32 	%rd68, %r394, 4;
	add.s64 	%rd70, %rd47, %rd68;
	st.shared.u32 	[%rd70], %r363;
	add.s32 	%r395, %r394, 20;
	mul.wide.u32 	%rd71, %r395, 4;
	add.s64 	%rd72, %rd47, %rd71;
	st.shared.u32 	[%rd72], %r366;
	add.s32 	%r669, %r669, 8;
	setp.ne.s32 	%p7, %r669, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L4448
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r432, [%rd11];
	ld.shared.u32 	%r433, [%rd12];
	ld.shared.u32 	%r434, [%rd13];
	ld.shared.u32 	%r435, [%rd14];
	ld.shared.u32 	%r436, [%rd15];
	ld.shared.u32 	%r437, [%rd16];
	ld.shared.u32 	%r438, [%rd17];
	ld.shared.u32 	%r439, [%rd18];
	cvt.s32.s16 	%r440, %r432;
	shr.s32 	%r441, %r432, 16;
	cvt.s32.s16 	%r442, %r433;
	shr.s32 	%r443, %r433, 16;
	cvt.s32.s16 	%r444, %r434;
	shr.s32 	%r445, %r434, 16;
	cvt.s32.s16 	%r446, %r435;
	shr.s32 	%r447, %r435, 16;
	cvt.s32.s16 	%r448, %r436;
	shr.s32 	%r449, %r436, 16;
	cvt.s32.s16 	%r450, %r437;
	shr.s32 	%r451, %r437, 16;
	cvt.s32.s16 	%r452, %r438;
	shr.s32 	%r453, %r438, 16;
	cvt.s32.s16 	%r454, %r439;
	shr.s32 	%r455, %r439, 16;
	add.s32 	%r456, %r440, %r63;
	shr.s32 	%r457, %r456, %r64;
	add.s32 	%r458, %r441, %r63;
	shr.s32 	%r459, %r458, %r64;
	add.s32 	%r460, %r442, %r65;
	shr.s32 	%r461, %r460, %r66;
	add.s32 	%r462, %r443, %r65;
	shr.s32 	%r463, %r462, %r66;
	add.s32 	%r464, %r444, %r63;
	shr.s32 	%r465, %r464, %r64;
	add.s32 	%r466, %r445, %r63;
	shr.s32 	%r467, %r466, %r64;
	add.s32 	%r468, %r446, %r65;
	shr.s32 	%r469, %r468, %r66;
	add.s32 	%r470, %r447, %r65;
	shr.s32 	%r471, %r470, %r66;
	add.s32 	%r472, %r448, %r63;
	shr.s32 	%r473, %r472, %r64;
	add.s32 	%r474, %r449, %r63;
	shr.s32 	%r475, %r474, %r64;
	add.s32 	%r476, %r450, %r65;
	shr.s32 	%r477, %r476, %r66;
	add.s32 	%r478, %r451, %r65;
	shr.s32 	%r479, %r478, %r66;
	add.s32 	%r480, %r452, %r63;
	shr.s32 	%r481, %r480, %r64;
	add.s32 	%r482, %r453, %r63;
	shr.s32 	%r483, %r482, %r64;
	add.s32 	%r484, %r454, %r65;
	shr.s32 	%r485, %r484, %r66;
	add.s32 	%r486, %r455, %r65;
	shr.s32 	%r487, %r486, %r66;
	max.s32 	%r488, %r457, -7;
	min.s32 	%r401, %r488, 7;
	max.s32 	%r489, %r459, -7;
	min.s32 	%r408, %r489, 7;
	max.s32 	%r490, %r461, -7;
	min.s32 	%r419, %r490, 7;
	max.s32 	%r491, %r463, -7;
	min.s32 	%r426, %r491, 7;
	max.s32 	%r492, %r465, -7;
	min.s32 	%r400, %r492, 7;
	max.s32 	%r493, %r467, -7;
	min.s32 	%r407, %r493, 7;
	max.s32 	%r494, %r469, -7;
	min.s32 	%r418, %r494, 7;
	max.s32 	%r495, %r471, -7;
	min.s32 	%r425, %r495, 7;
	max.s32 	%r496, %r473, -7;
	min.s32 	%r398, %r496, 7;
	max.s32 	%r497, %r475, -7;
	min.s32 	%r405, %r497, 7;
	max.s32 	%r498, %r477, -7;
	min.s32 	%r416, %r498, 7;
	max.s32 	%r499, %r479, -7;
	min.s32 	%r423, %r499, 7;
	max.s32 	%r500, %r481, -7;
	min.s32 	%r397, %r500, 7;
	max.s32 	%r501, %r483, -7;
	min.s32 	%r404, %r501, 7;
	max.s32 	%r502, %r485, -7;
	min.s32 	%r415, %r502, 7;
	max.s32 	%r503, %r487, -7;
	min.s32 	%r422, %r503, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r396, %r397, %r398, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r399, %r400, %r401, %r396;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r403, %r404, %r405, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r406, %r407, %r408, %r403;
	// end inline asm
	shl.b32 	%r413, %r406, 4;
	// begin inline asm
	lop3.b32 %r522, %r411, %r399, %r413, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r414, %r415, %r416, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r417, %r418, %r419, %r414;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r421, %r422, %r423, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r424, %r425, %r426, %r421;
	// end inline asm
	shl.b32 	%r431, %r424, 4;
	// begin inline asm
	lop3.b32 %r530, %r411, %r417, %r431, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r656, 0;
	selp.b32 	%r667, %r522, %r667, %p8;
	selp.b32 	%r668, %r522, %r668, %p8;
	setp.eq.s32 	%p9, %r656, 32;
	selp.b32 	%r659, %r522, %r659, %p9;
	selp.b32 	%r660, %r522, %r660, %p9;
	setp.eq.s32 	%p10, %r656, 64;
	selp.b32 	%r665, %r522, %r665, %p10;
	selp.b32 	%r666, %r522, %r666, %p10;
	selp.b32 	%r663, %r530, %r663, %p8;
	selp.b32 	%r664, %r530, %r664, %p8;
	selp.b32 	%r657, %r530, %r657, %p9;
	selp.b32 	%r658, %r530, %r658, %p9;
	selp.b32 	%r661, %r530, %r661, %p10;
	selp.b32 	%r662, %r530, %r662, %p10;
	add.s32 	%r41, %r656, 32;
	setp.ne.s32 	%p11, %r656, 96;
	mov.u32 	%r656, %r41;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L6182
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r68, 0;
	setp.eq.s32 	%p13, %r67, 0;
	// begin inline asm
	prmt.b32 %r504, %r667, %r659, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r508, %r668, %r660, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r512, %r663, %r657, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r516, %r664, %r658, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r520, %r665, %r522, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r666, %r522, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r661, %r530, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r662, %r530, %r151;
	// end inline asm
	selp.b32 	%r600, %r508, %r504, %p13;
	shfl.sync.bfly.b32	%r601, %r600, 1, 31, -1;
	selp.b32 	%r537, %r504, %r601, %p13;
	selp.b32 	%r538, %r601, %r508, %p13;
	selp.b32 	%r602, %r516, %r512, %p13;
	shfl.sync.bfly.b32	%r603, %r602, 1, 31, -1;
	selp.b32 	%r545, %r512, %r603, %p13;
	selp.b32 	%r546, %r603, %r516, %p13;
	selp.b32 	%r604, %r524, %r520, %p13;
	shfl.sync.bfly.b32	%r605, %r604, 1, 31, -1;
	selp.b32 	%r553, %r520, %r605, %p13;
	selp.b32 	%r554, %r605, %r524, %p13;
	selp.b32 	%r606, %r532, %r528, %p13;
	shfl.sync.bfly.b32	%r607, %r606, 1, 31, -1;
	selp.b32 	%r561, %r528, %r607, %p13;
	selp.b32 	%r562, %r607, %r532, %p13;
	// begin inline asm
	prmt.b32 %r536, %r537, %r538, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r537, %r538, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r545, %r546, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r545, %r546, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r553, %r554, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r553, %r554, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r560, %r561, %r562, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r561, %r562, %r151;
	// end inline asm
	selp.b32 	%r608, %r552, %r536, %p12;
	shfl.sync.bfly.b32	%r609, %r608, 2, 31, -1;
	selp.b32 	%r569, %r536, %r609, %p12;
	selp.b32 	%r570, %r609, %r552, %p12;
	selp.b32 	%r610, %r560, %r544, %p12;
	shfl.sync.bfly.b32	%r611, %r610, 2, 31, -1;
	selp.b32 	%r577, %r544, %r611, %p12;
	selp.b32 	%r578, %r611, %r560, %p12;
	selp.b32 	%r612, %r556, %r540, %p12;
	shfl.sync.bfly.b32	%r613, %r612, 2, 31, -1;
	selp.b32 	%r585, %r540, %r613, %p12;
	selp.b32 	%r586, %r613, %r556, %p12;
	selp.b32 	%r614, %r564, %r548, %p12;
	shfl.sync.bfly.b32	%r615, %r614, 2, 31, -1;
	selp.b32 	%r593, %r548, %r615, %p12;
	selp.b32 	%r594, %r615, %r564, %p12;
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r577, %r578, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r577, %r578, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r585, %r586, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r585, %r586, %r119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r593, %r594, %r115;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r593, %r594, %r119;
	// end inline asm
	selp.b32 	%r616, %r584, %r568, %p6;
	shfl.sync.bfly.b32	%r617, %r616, 4, 31, -1;
	selp.b32 	%r618, %r568, %r617, %p6;
	selp.b32 	%r619, %r617, %r584, %p6;
	selp.b32 	%r620, %r592, %r576, %p6;
	shfl.sync.bfly.b32	%r621, %r620, 4, 31, -1;
	selp.b32 	%r622, %r576, %r621, %p6;
	selp.b32 	%r623, %r621, %r592, %p6;
	selp.b32 	%r624, %r588, %r572, %p6;
	shfl.sync.bfly.b32	%r625, %r624, 4, 31, -1;
	selp.b32 	%r626, %r572, %r625, %p6;
	selp.b32 	%r627, %r625, %r588, %p6;
	selp.b32 	%r628, %r596, %r580, %p6;
	shfl.sync.bfly.b32	%r629, %r628, 4, 31, -1;
	selp.b32 	%r630, %r580, %r629, %p6;
	selp.b32 	%r631, %r629, %r596, %p6;
	selp.b32 	%r632, %r626, %r618, %p13;
	shfl.sync.bfly.b32	%r633, %r632, 1, 31, -1;
	selp.b32 	%r634, %r618, %r633, %p13;
	selp.b32 	%r635, %r633, %r626, %p13;
	selp.b32 	%r636, %r630, %r622, %p13;
	shfl.sync.bfly.b32	%r637, %r636, 1, 31, -1;
	selp.b32 	%r638, %r622, %r637, %p13;
	selp.b32 	%r639, %r637, %r630, %p13;
	selp.b32 	%r640, %r627, %r619, %p13;
	shfl.sync.bfly.b32	%r641, %r640, 1, 31, -1;
	selp.b32 	%r642, %r619, %r641, %p13;
	selp.b32 	%r643, %r641, %r627, %p13;
	selp.b32 	%r644, %r631, %r623, %p13;
	shfl.sync.bfly.b32	%r645, %r644, 1, 31, -1;
	selp.b32 	%r646, %r623, %r645, %p13;
	selp.b32 	%r647, %r645, %r631, %p13;
	or.b32  	%r648, %r73, %r655;
	or.b32  	%r649, %r648, %r69;
	or.b32  	%r650, %r649, %r70;
	or.b32  	%r651, %r650, %r72;
	or.b32  	%r652, %r651, %r71;
	cvt.u64.u32 	%rd73, %r652;
	add.s64 	%rd74, %rd4, %rd73;
	st.global.v4.u32 	[%rd74], {%r634, %r642, %r635, %r643};
	or.b32  	%r653, %r652, 32768;
	cvt.u64.u32 	%rd75, %r653;
	add.s64 	%rd76, %rd4, %rd75;
	st.global.v4.u32 	[%rd76], {%r638, %r646, %r639, %r647};
	add.s32 	%r42, %r655, 128;
	setp.ne.s32 	%p15, %r655, 1920;
	mov.u32 	%r655, %r42;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6973
	mov.u32 	%r654, 0;
	st.global.u32 	[%rd6], %r654;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd20, exception1506;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r74;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L29
	mov.u64 	%rd22, exception1506;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r74;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L395
	mov.u32 	%r87, 2;
	st.global.u32 	[%rd6], %r87;
	mov.u64 	%rd29, exception500;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r74;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
