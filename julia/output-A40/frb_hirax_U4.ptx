// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2337[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2385[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<299>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3352>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<270>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r213, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r222, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r222, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r214, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r223, %r3, %r1;
	or.b32  	%r224, %r223, %r5;
	mul.wide.u32 	%rd67, %r224, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r225, 1;
	st.global.u32 	[%rd6], %r225;
	setp.gt.u32 	%p3, %r214, 16383;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r215, %r214;
	setp.gt.s32 	%p5, %r215, 32767;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r215, %r214;
	and.b32  	%r226, %r6, 63;
	setp.ne.s32 	%p7, %r226, 0;
	setp.gt.u32 	%p8, %r216, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r217, %r216;
	setp.lt.s32 	%p11, %r217, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r227, %r217, %r216;
	mul.hi.s32 	%r228, %r6, 715827883;
	shr.u32 	%r229, %r228, 31;
	shr.s32 	%r230, %r228, 4;
	add.s32 	%r231, %r230, %r229;
	setp.eq.s32 	%p13, %r227, %r231;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r218, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r219, %r218;
	setp.gt.s32 	%p16, %r219, 4;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r219, %r218;
	and.b32  	%r232, %r7, 3;
	setp.ne.s32 	%p18, %r232, 0;
	setp.lt.s32 	%p19, %r220, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r221, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r221, %r220;
	setp.gt.s32 	%p22, %r221, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r233, %r221, %r220;
	and.b32  	%r234, %r233, 3;
	setp.eq.s32 	%p24, %r234, 0;
	setp.eq.s32 	%p25, %r233, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_13;
$L__BB0_158:                            // %pass162
	and.b32  	%r128, %r1, 3;
	shr.u32 	%r129, %r1, 2;
	mul.lo.s32 	%r235, %r128, %r129;
	and.b32  	%r236, %r235, 7;
	cvt.rn.f32.s32 	%f185, %r236;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p294, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_170;
// %bb.159:
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r131, %f750;
	and.b32  	%r237, %r131, 8388607;
	or.b32  	%r3347, %r237, 1065353216;
	mov.b32 	%f745, %r3347;
	add.s32 	%r238, %r131, -1073741824;
	and.b32  	%r3348, %r238, -8388608;
	setp.eq.s32 	%p34, %r3348, 0;
	@%p34 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r239, %r3348, 192937984;
	add.s32 	%r240, %r3347, %r239;
	mov.b32 	%f197, %r240;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3348, %r3348, %r239;
	mov.b32 	%r3347, %f745;
	setp.ne.s32 	%p35, %r3348, 0;
	setp.ne.s32 	%p36, %r3347, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r241, %f151;
	and.b32  	%r138, %r241, -2147483648;
	@%p39 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r242, %f746;
	or.b32  	%r243, %r138, %r242;
	mov.b32 	%f746, %r243;
$L__BB0_172:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r1, 1;
	and.b32  	%r258, %r141, 2;
	mul.lo.s32 	%r142, %r258, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p295, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p295 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r259, %r9, 8388607;
	or.b32  	%r3313, %r259, 1065353216;
	mov.b32 	%f705, %r3313;
	add.s32 	%r260, %r9, -1073741824;
	and.b32  	%r3314, %r260, -8388608;
	setp.eq.s32 	%p54, %r3314, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r261, %r3314, 192937984;
	add.s32 	%r262, %r3313, %r261;
	mov.b32 	%f251, %r262;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3314, %r3314, %r261;
	mov.b32 	%r3313, %f705;
	setp.ne.s32 	%p55, %r3314, 0;
	setp.ne.s32 	%p56, %r3313, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r263, %f168;
	and.b32  	%r16, %r263, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r264, %f706;
	or.b32  	%r265, %r16, %r264;
	mov.b32 	%f706, %r265;
$L__BB0_27:                             // %__nv_fmodf.exit2337
	add.s32 	%r274, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r274;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p296, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p296 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r275, %r18, 8388607;
	or.b32  	%r3315, %r275, 1065353216;
	mov.b32 	%f709, %r3315;
	add.s32 	%r276, %r18, -1073741824;
	and.b32  	%r3316, %r276, -8388608;
	setp.eq.s32 	%p74, %r3316, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r277, %r3316, 192937984;
	add.s32 	%r278, %r3315, %r277;
	mov.b32 	%f303, %r278;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3316, %r3316, %r277;
	mov.b32 	%r3315, %f709;
	setp.ne.s32 	%p75, %r3316, 0;
	setp.ne.s32 	%p76, %r3315, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r279, %f18;
	and.b32  	%r25, %r279, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r280, %f710;
	or.b32  	%r281, %r25, %r280;
	mov.b32 	%f710, %r281;
$L__BB0_41:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r296, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r296;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p297, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p297 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r297, %r30, 8388607;
	or.b32  	%r3317, %r297, 1065353216;
	mov.b32 	%f713, %r3317;
	add.s32 	%r298, %r30, -1073741824;
	and.b32  	%r3318, %r298, -8388608;
	setp.eq.s32 	%p94, %r3318, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r299, %r3318, 192937984;
	add.s32 	%r300, %r3317, %r299;
	mov.b32 	%f357, %r300;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3318, %r3318, %r299;
	mov.b32 	%r3317, %f713;
	setp.ne.s32 	%p95, %r3318, 0;
	setp.ne.s32 	%p96, %r3317, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r301, %f35;
	and.b32  	%r37, %r301, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r302, %f714;
	or.b32  	%r303, %r37, %r302;
	mov.b32 	%f714, %r303;
$L__BB0_55:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r304, %f367;
	and.b32  	%r305, %r304, -2147483648;
	or.b32  	%r306, %r305, 1056964608;
	mov.b32 	%f368, %r306;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r307, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r308, %r307, 1;
	setp.eq.b32 	%p102, %r308, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r309, %r307, 2;
	setp.eq.s32 	%p103, %r309, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r310, %r307, 1;
	and.b32  	%r311, %r310, 2;
	setp.eq.s32 	%p104, %r311, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r312, %r28, %r129;
	and.b32  	%r313, %r312, 3;
	cvt.rn.f32.s32 	%f397, %r313;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p298, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p298 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r314, %r39, 8388607;
	or.b32  	%r3319, %r314, 1065353216;
	mov.b32 	%f717, %r3319;
	add.s32 	%r315, %r39, -1073741824;
	and.b32  	%r3320, %r315, -8388608;
	setp.eq.s32 	%p114, %r3320, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r316, %r3320, 192937984;
	add.s32 	%r317, %r3319, %r316;
	mov.b32 	%f409, %r317;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3320, %r3320, %r316;
	mov.b32 	%r3319, %f717;
	setp.ne.s32 	%p115, %r3320, 0;
	setp.ne.s32 	%p116, %r3319, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r318, %f54;
	and.b32  	%r46, %r318, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r319, %f718;
	or.b32  	%r320, %r46, %r319;
	mov.b32 	%f718, %r320;
$L__BB0_69:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r321, %f419;
	and.b32  	%r322, %r321, -2147483648;
	or.b32  	%r323, %r322, 1056964608;
	mov.b32 	%f420, %r323;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r324, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r325, %r324, 1;
	setp.eq.b32 	%p122, %r325, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r326, %r324, 2;
	setp.eq.s32 	%p123, %r326, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r327, %r324, 1;
	and.b32  	%r328, %r327, 2;
	setp.eq.s32 	%p124, %r328, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_180;
// %bb.72:
	@%p294 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_73;
$L__BB0_176:
	mov.b32 	%r144, %f750;
	and.b32  	%r335, %r144, 8388607;
	or.b32  	%r3349, %r335, 1065353216;
	mov.b32 	%f749, %r3349;
	add.s32 	%r336, %r144, -1073741824;
	and.b32  	%r3350, %r336, -8388608;
	setp.eq.s32 	%p135, %r3350, 0;
	@%p135 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r337, %r3350, 192937984;
	add.s32 	%r338, %r3349, %r337;
	mov.b32 	%f459, %r338;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3350, %r3350, %r337;
	mov.b32 	%r3349, %f749;
	setp.ne.s32 	%p136, %r3350, 0;
	setp.ne.s32 	%p137, %r3349, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_180;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_175;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_173;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r339, %f750;
	or.b32  	%r340, %r138, %r339;
	mov.b32 	%f750, %r340;
$L__BB0_182:                            // %__nv_fmodf.exit2461
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p295 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r355, %r51, 8388607;
	or.b32  	%r3321, %r355, 1065353216;
	mov.b32 	%f725, %r3321;
	add.s32 	%r356, %r51, -1073741824;
	and.b32  	%r3322, %r356, -8388608;
	setp.eq.s32 	%p155, %r3322, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r3322, 192937984;
	add.s32 	%r358, %r3321, %r357;
	mov.b32 	%f511, %r358;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3322, %r3322, %r357;
	mov.b32 	%r3321, %f725;
	setp.ne.s32 	%p156, %r3322, 0;
	setp.ne.s32 	%p157, %r3321, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r359, %f726;
	or.b32  	%r360, %r16, %r359;
	mov.b32 	%f726, %r360;
$L__BB0_89:                             // %__nv_fmodf.exit2492
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p296 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r369, %r59, 8388607;
	or.b32  	%r3323, %r369, 1065353216;
	mov.b32 	%f729, %r3323;
	add.s32 	%r370, %r59, -1073741824;
	and.b32  	%r3324, %r370, -8388608;
	setp.eq.s32 	%p175, %r3324, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r3324, 192937984;
	add.s32 	%r372, %r3323, %r371;
	mov.b32 	%f561, %r372;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3324, %r3324, %r371;
	mov.b32 	%r3323, %f729;
	setp.ne.s32 	%p176, %r3324, 0;
	setp.ne.s32 	%p177, %r3323, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r373, %f730;
	or.b32  	%r374, %r25, %r373;
	mov.b32 	%f730, %r374;
$L__BB0_103:                            // %__nv_fmodf.exit2523
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p297 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r389, %r69, 8388607;
	or.b32  	%r3325, %r389, 1065353216;
	mov.b32 	%f733, %r3325;
	add.s32 	%r390, %r69, -1073741824;
	and.b32  	%r3326, %r390, -8388608;
	setp.eq.s32 	%p195, %r3326, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r391, %r3326, 192937984;
	add.s32 	%r392, %r3325, %r391;
	mov.b32 	%f613, %r392;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3326, %r3326, %r391;
	mov.b32 	%r3325, %f733;
	setp.ne.s32 	%p196, %r3326, 0;
	setp.ne.s32 	%p197, %r3325, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r393, %f734;
	or.b32  	%r394, %r37, %r393;
	mov.b32 	%f734, %r394;
$L__BB0_117:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r395, %f623;
	and.b32  	%r396, %r395, -2147483648;
	or.b32  	%r397, %r396, 1056964608;
	mov.b32 	%f624, %r397;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r398, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r399, %r398, 1;
	setp.eq.b32 	%p204, %r399, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r400, %r398, 2;
	setp.eq.s32 	%p205, %r400, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r401, %r398, 1;
	and.b32  	%r402, %r401, 2;
	setp.eq.s32 	%p206, %r402, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p298 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r403, %r77, 8388607;
	or.b32  	%r3327, %r403, 1065353216;
	mov.b32 	%f737, %r3327;
	add.s32 	%r404, %r77, -1073741824;
	and.b32  	%r3328, %r404, -8388608;
	setp.eq.s32 	%p215, %r3328, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r405, %r3328, 192937984;
	add.s32 	%r406, %r3327, %r405;
	mov.b32 	%f663, %r406;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3328, %r3328, %r405;
	mov.b32 	%r3327, %f737;
	setp.ne.s32 	%p216, %r3328, 0;
	setp.ne.s32 	%p217, %r3327, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r407, %f738;
	or.b32  	%r408, %r46, %r407;
	mov.b32 	%f738, %r408;
$L__BB0_131:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r409, %f673;
	and.b32  	%r410, %r409, -2147483648;
	or.b32  	%r411, %r410, 1056964608;
	mov.b32 	%f674, %r411;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r412, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r413, %r412, 1;
	setp.eq.b32 	%p224, %r413, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r414, %r412, 2;
	setp.eq.s32 	%p225, %r414, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r415, %r412, 1;
	and.b32  	%r416, %r415, 2;
	setp.eq.s32 	%p226, %r416, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_184;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r424, %r1, 4;
	and.b32  	%r425, %r424, 240;
	or.b32  	%r426, %r425, %r4;
	mul.wide.u32 	%rd68, %r426, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r427, [%rd69];
	shl.b32 	%r428, %r427, 16;
	cvt.s32.s16 	%r86, %r427;
	shr.s32 	%r87, %r427, 16;
	or.b32  	%r429, %r428, 65535;
	setp.lt.u32 	%p230, %r429, 1114111;
	setp.lt.u32 	%p231, %r427, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %L1255
	mul.lo.s32 	%r433, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r433;
$L__BB0_184:                            // %pass565
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r250, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r251, %r250, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r347, %f469;
	or.b32  	%r252, %r251, 1056964608;
	mov.b32 	%r266, %f261;
	mov.b32 	%r288, %f313;
	and.b32  	%r348, %r347, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r252;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r289, %r288, -2147483648;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%r361, %f521;
	mov.b32 	%r381, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r290, %r289, 1056964608;
	mov.b32 	%f470, %r349;
	and.b32  	%r362, %r361, -2147483648;
	and.b32  	%r382, %r381, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r268;
	mov.b32 	%f314, %r290;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r363, %r362, 1056964608;
	or.b32  	%r383, %r382, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r363;
	mov.b32 	%f572, %r383;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r253, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r350, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r254, 1;
	cvt.rzi.s32.f32 	%r269, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r291, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r351, %r350, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r255, %r253, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r270, %r269, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r292, %r291, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r351, 1;
	cvt.rzi.s32.f32 	%r364, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r384, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r255, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r256, %r253, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r270, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r292, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r352, %r350, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r365, %r364, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r385, %r384, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r257, %r256, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r271, %r269, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r293, %r291, 2;
	setp.eq.s32 	%p145, %r352, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r353, %r350, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r365, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r385, 1;
	setp.eq.s32 	%p44, %r257, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r271, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r272, %r269, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r293, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r294, %r291, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r354, %r353, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r366, %r364, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r386, %r384, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r273, %r272, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r295, %r294, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r354, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r366, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r386, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r387, %r384, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r273, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r295, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r388, %r387, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r246, %f238;
	mov.b32 	%r249, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r368, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r388, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r245, %r249, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r343, %f500;
	mov.b32 	%r346, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r247, %r249, %r246;
	// end inline asm
	mov.b32 	%r284, %f344;
	mov.b32 	%r283, %f17;
	mov.b32 	%r287, %f341;
	mov.b32 	%r286, %f16;
	mov.b32 	%r330, %f75;
	mov.b32 	%r331, %f77;
	mov.b32 	%r333, %f76;
	mov.b32 	%r334, %f78;
	xor.b32  	%r342, %r346, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r343, %r342;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r344, %r346, %r343;
	// end inline asm
	mov.b32 	%r377, %f602;
	mov.b32 	%r376, %f95;
	mov.b32 	%r380, %f599;
	mov.b32 	%r379, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r379;
	// end inline asm
	mov.b32 	%r418, %f147;
	mov.b32 	%r419, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r417, %r419, %r418;
	// end inline asm
	mov.b32 	%r421, %f148;
	mov.b32 	%r422, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	shr.u32 	%r435, %r1, 3;
	and.b32  	%r436, %r435, 2;
	and.b32  	%r437, %r129, 1;
	or.b32  	%r438, %r436, %r437;
	shl.b32 	%r439, %r438, 4;
	bfe.u32 	%r440, %r1, 3, 1;
	shl.b32 	%r441, %r4, 1;
	and.b32  	%r442, %r441, 14;
	or.b32  	%r443, %r440, %r442;
	shl.b32 	%r444, %r1, 6;
	and.b32  	%r445, %r444, 192;
	or.b32  	%r446, %r439, %r3;
	or.b32  	%r447, %r446, %r443;
	or.b32  	%r448, %r447, %r445;
	mul.wide.u32 	%rd75, %r448, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r449, %r214, 9;
	shl.b32 	%r450, %r218, 7;
	add.s32 	%r156, %r450, %r449;
	shl.b32 	%r451, %r1, 2;
	shl.b32 	%r452, %r2, 7;
	or.b32  	%r157, %r451, %r452;
	and.b32  	%r158, %r1, 16;
	shr.u32 	%r453, %r1, 4;
	and.b32  	%r454, %r141, 30;
	or.b32  	%r455, %r454, %r453;
	mul.lo.s32 	%r456, %r455, 257;
	shr.u32 	%r457, %r4, 3;
	and.b32  	%r458, %r5, 224;
	mad.lo.s32 	%r459, %r457, 257, %r458;
	or.b32  	%r460, %r457, 2;
	mad.lo.s32 	%r461, %r460, 257, %r458;
	or.b32  	%r462, %r457, 4;
	mad.lo.s32 	%r463, %r462, 257, %r458;
	or.b32  	%r464, %r457, 6;
	mad.lo.s32 	%r465, %r464, 257, %r458;
	or.b32  	%r466, %r457, 8;
	mad.lo.s32 	%r467, %r466, 257, %r458;
	or.b32  	%r468, %r457, 10;
	mad.lo.s32 	%r469, %r468, 257, %r458;
	or.b32  	%r470, %r457, 12;
	mad.lo.s32 	%r471, %r470, 257, %r458;
	or.b32  	%r472, %r457, 14;
	mad.lo.s32 	%r473, %r472, 257, %r458;
	or.b32  	%r474, %r457, 16;
	mad.lo.s32 	%r475, %r474, 257, %r458;
	or.b32  	%r476, %r457, 18;
	mad.lo.s32 	%r477, %r476, 257, %r458;
	or.b32  	%r478, %r457, 20;
	mad.lo.s32 	%r479, %r478, 257, %r458;
	or.b32  	%r480, %r457, 22;
	mad.lo.s32 	%r481, %r480, 257, %r458;
	or.b32  	%r482, %r457, 24;
	mad.lo.s32 	%r483, %r482, 257, %r458;
	or.b32  	%r484, %r457, 26;
	mad.lo.s32 	%r485, %r484, 257, %r458;
	or.b32  	%r486, %r457, 28;
	mad.lo.s32 	%r487, %r486, 257, %r458;
	or.b32  	%r488, %r457, 30;
	mad.lo.s32 	%r489, %r488, 257, %r458;
	mul.lo.s32 	%r490, %r128, 2184;
	mad.lo.s32 	%r491, %r438, 546, %r490;
	mad.lo.s32 	%r492, %r443, 33, %r491;
	setp.lt.u32 	%p233, %r1, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	mul.lo.s32 	%r493, %r457, 258;
	bfe.s32 	%r494, %r4, 1, 1;
	and.b32  	%r495, %r4, 2;
	setp.eq.s32 	%p236, %r495, 0;
	and.b32  	%r496, %r494, 1032;
	and.b32  	%r497, %r451, 12;
	bfe.s32 	%r498, %r4, 2, 1;
	and.b32  	%r499, %r4, 4;
	setp.eq.s32 	%p237, %r499, 0;
	and.b32  	%r500, %r498, 516;
	bfe.s32 	%r501, %r1, 3, 1;
	and.b32  	%r502, %r1, 8;
	setp.eq.s32 	%p238, %r502, 0;
	and.b32  	%r503, %r501, 4144;
	and.b32  	%r504, %r4, 1;
	neg.s32 	%r505, %r504;
	setp.eq.b32 	%p239, %r504, 1;
	and.b32  	%r506, %r505, 2064;
	add.s32 	%r507, %r438, %r493;
	add.s32 	%r508, %r507, %r497;
	add.s32 	%r509, %r508, %r496;
	add.s32 	%r510, %r509, %r500;
	add.s32 	%r511, %r510, %r503;
	add.s32 	%r512, %r511, %r506;
	mul.wide.u32 	%rd77, %r512, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 2064, 0, %p239;
	selp.b64 	%rd80, 0, 4144, %p238;
	selp.b64 	%rd81, 0, 516, %p237;
	selp.b64 	%rd82, 0, 1032, %p236;
	cvt.u64.u32 	%rd83, %r497;
	cvt.u64.u32 	%rd84, %r437;
	cvt.u64.u32 	%rd85, %r436;
	cvt.u64.u32 	%rd86, %r493;
	add.s64 	%rd87, %rd86, %rd85;
	or.b64  	%rd88, %rd87, %rd84;
	add.s64 	%rd89, %rd88, %rd83;
	add.s64 	%rd90, %rd89, %rd82;
	add.s64 	%rd91, %rd90, %rd81;
	add.s64 	%rd92, %rd91, %rd80;
	add.s64 	%rd93, %rd92, %rd79;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd8, %rd78, %rd94;
	shl.b32 	%r513, %r216, 20;
	shl.b32 	%r514, %r220, 9;
	add.s32 	%r515, %r514, %r513;
	and.b32  	%r516, %r1, 15;
	or.b32  	%r517, %r5, %r158;
	or.b32  	%r518, %r516, %r3;
	or.b32  	%r159, %r518, %r517;
	cvt.s64.s32 	%rd9, %r515;
	add.s32 	%r519, %r4, %r456;
	mul.wide.u32 	%rd95, %r519, 4;
	add.s64 	%rd10, %rd78, %rd95;
	cvt.u64.u32 	%rd96, %r4;
	cvt.u64.u32 	%rd11, %r456;
	add.s64 	%rd97, %rd11, %rd96;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd12, %rd78, %rd98;
	add.s32 	%r520, %r459, %r1;
	mul.wide.u32 	%rd99, %r520, 4;
	add.s64 	%rd13, %rd78, %rd99;
	add.s32 	%r521, %r461, %r1;
	mul.wide.u32 	%rd100, %r521, 4;
	add.s64 	%rd14, %rd78, %rd100;
	add.s32 	%r522, %r463, %r1;
	mul.wide.u32 	%rd101, %r522, 4;
	add.s64 	%rd15, %rd78, %rd101;
	add.s32 	%r523, %r465, %r1;
	mul.wide.u32 	%rd102, %r523, 4;
	add.s64 	%rd16, %rd78, %rd102;
	add.s32 	%r524, %r467, %r1;
	mul.wide.u32 	%rd103, %r524, 4;
	add.s64 	%rd17, %rd78, %rd103;
	add.s32 	%r525, %r469, %r1;
	mul.wide.u32 	%rd104, %r525, 4;
	add.s64 	%rd18, %rd78, %rd104;
	add.s32 	%r526, %r471, %r1;
	mul.wide.u32 	%rd105, %r526, 4;
	add.s64 	%rd19, %rd78, %rd105;
	add.s32 	%r527, %r473, %r1;
	mul.wide.u32 	%rd106, %r527, 4;
	add.s64 	%rd20, %rd78, %rd106;
	add.s32 	%r528, %r475, %r1;
	mul.wide.u32 	%rd107, %r528, 4;
	add.s64 	%rd21, %rd78, %rd107;
	add.s32 	%r529, %r477, %r1;
	mul.wide.u32 	%rd108, %r529, 4;
	add.s64 	%rd22, %rd78, %rd108;
	add.s32 	%r530, %r479, %r1;
	mul.wide.u32 	%rd109, %r530, 4;
	add.s64 	%rd23, %rd78, %rd109;
	add.s32 	%r531, %r481, %r1;
	mul.wide.u32 	%rd110, %r531, 4;
	add.s64 	%rd24, %rd78, %rd110;
	add.s32 	%r532, %r483, %r1;
	mul.wide.u32 	%rd111, %r532, 4;
	add.s64 	%rd25, %rd78, %rd111;
	add.s32 	%r533, %r485, %r1;
	mul.wide.u32 	%rd112, %r533, 4;
	add.s64 	%rd26, %rd78, %rd112;
	add.s32 	%r534, %r487, %r1;
	mul.wide.u32 	%rd113, %r534, 4;
	add.s64 	%rd27, %rd78, %rd113;
	add.s32 	%r535, %r489, %r1;
	mul.wide.u32 	%rd114, %r535, 4;
	add.s64 	%rd28, %rd78, %rd114;
	add.s32 	%r536, %r492, %r457;
	mul.wide.u32 	%rd115, %r536, 4;
	add.s64 	%rd29, %rd78, %rd115;
	add.s32 	%r537, %r492, %r460;
	mul.wide.u32 	%rd116, %r537, 4;
	add.s64 	%rd30, %rd78, %rd116;
	add.s32 	%r538, %r492, %r462;
	mul.wide.u32 	%rd117, %r538, 4;
	add.s64 	%rd31, %rd78, %rd117;
	add.s32 	%r539, %r492, %r464;
	mul.wide.u32 	%rd118, %r539, 4;
	add.s64 	%rd32, %rd78, %rd118;
	add.s32 	%r540, %r492, %r466;
	mul.wide.u32 	%rd119, %r540, 4;
	add.s64 	%rd33, %rd78, %rd119;
	add.s32 	%r541, %r492, %r468;
	mul.wide.u32 	%rd120, %r541, 4;
	add.s64 	%rd34, %rd78, %rd120;
	add.s32 	%r542, %r492, %r470;
	mul.wide.u32 	%rd121, %r542, 4;
	add.s64 	%rd35, %rd78, %rd121;
	add.s32 	%r543, %r492, %r472;
	mul.wide.u32 	%rd122, %r543, 4;
	add.s64 	%rd36, %rd78, %rd122;
	add.s32 	%r544, %r492, %r474;
	mul.wide.u32 	%rd123, %r544, 4;
	add.s64 	%rd37, %rd78, %rd123;
	add.s32 	%r545, %r492, %r476;
	mul.wide.u32 	%rd124, %r545, 4;
	add.s64 	%rd38, %rd78, %rd124;
	add.s32 	%r546, %r492, %r478;
	mul.wide.u32 	%rd125, %r546, 4;
	add.s64 	%rd39, %rd78, %rd125;
	add.s32 	%r547, %r492, %r480;
	mul.wide.u32 	%rd126, %r547, 4;
	add.s64 	%rd40, %rd78, %rd126;
	add.s32 	%r548, %r492, %r482;
	mul.wide.u32 	%rd127, %r548, 4;
	add.s64 	%rd41, %rd78, %rd127;
	add.s32 	%r549, %r492, %r484;
	mul.wide.u32 	%rd128, %r549, 4;
	add.s64 	%rd42, %rd78, %rd128;
	add.s32 	%r550, %r492, %r486;
	mul.wide.u32 	%rd129, %r550, 4;
	add.s64 	%rd43, %rd78, %rd129;
	add.s32 	%r551, %r492, %r488;
	mul.wide.u32 	%rd130, %r551, 4;
	add.s64 	%rd44, %rd78, %rd130;
	add.s32 	%r552, %r129, -1;
	setp.lt.u32 	%p240, %r552, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r553, %r1, 24;
	setp.eq.s32 	%p243, %r553, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r160, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r554, %r512, 32;
	mul.wide.u32 	%rd131, %r554, 4;
	add.s64 	%rd45, %rd78, %rd131;
	add.s32 	%r555, %r512, 48;
	mul.wide.u32 	%rd132, %r555, 4;
	add.s64 	%rd46, %rd78, %rd132;
	add.s32 	%r556, %r512, 64;
	mul.wide.u32 	%rd133, %r556, 4;
	add.s64 	%rd47, %rd78, %rd133;
	add.s32 	%r557, %r512, 80;
	mul.wide.u32 	%rd134, %r557, 4;
	add.s64 	%rd48, %rd78, %rd134;
	add.s32 	%r558, %r512, 96;
	mul.wide.u32 	%rd135, %r558, 4;
	add.s64 	%rd49, %rd78, %rd135;
	add.s32 	%r559, %r512, 112;
	mul.wide.u32 	%rd136, %r559, 4;
	add.s64 	%rd50, %rd78, %rd136;
	add.s32 	%r560, %r512, 128;
	mul.wide.u32 	%rd137, %r560, 4;
	add.s64 	%rd51, %rd78, %rd137;
	add.s32 	%r561, %r512, 144;
	mul.wide.u32 	%rd138, %r561, 4;
	add.s64 	%rd52, %rd78, %rd138;
	add.s32 	%r562, %r512, 160;
	mul.wide.u32 	%rd139, %r562, 4;
	add.s64 	%rd53, %rd78, %rd139;
	add.s32 	%r563, %r512, 176;
	mul.wide.u32 	%rd140, %r563, 4;
	add.s64 	%rd54, %rd78, %rd140;
	add.s32 	%r564, %r512, 192;
	mul.wide.u32 	%rd141, %r564, 4;
	add.s64 	%rd55, %rd78, %rd141;
	add.s32 	%r565, %r512, 208;
	mul.wide.u32 	%rd142, %r565, 4;
	add.s64 	%rd56, %rd78, %rd142;
	add.s32 	%r566, %r512, 224;
	mul.wide.u32 	%rd143, %r566, 4;
	add.s64 	%rd57, %rd78, %rd143;
	add.s32 	%r567, %r512, 240;
	mul.wide.u32 	%rd144, %r567, 4;
	add.s64 	%rd58, %rd78, %rd144;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3341, %r89;
	mov.u32 	%r3342, %r89;
	mov.u32 	%r3346, %r89;
	bra.uni 	$L__BB0_185;
$L__BB0_156:                            // %L29357
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p293, %r89, 16320;
	mov.u32 	%r89, %r127;
	@%p293 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_157;
$L__BB0_185:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_203 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r568, %r89, %r214;
	setp.lt.s32 	%p245, %r568, %r215;
	@%p245 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_157;
$L__BB0_186:                            // %pass780
                                        //   in Loop: Header=BB0_185 Depth=1
	cvt.u32.u64 	%r761, %rd11;
	or.b32  	%r762, %r89, %r4;
	shl.b32 	%r763, %r762, 9;
	and.b32  	%r764, %r763, 8363520;
	or.b32  	%r765, %r764, %r157;
	add.s32 	%r766, %r156, %r765;
	shr.s32 	%r767, %r766, 31;
	shr.u32 	%r768, %r767, 9;
	add.s32 	%r769, %r766, %r768;
	shr.s32 	%r770, %r769, 23;
	setp.lt.s32 	%p247, %r766, 0;
	and.b32  	%r771, %r769, -8388608;
	setp.ne.s32 	%p248, %r771, %r766;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r772, 1, 0, %p249;
	sub.s32 	%r773, %r772, %r770;
	shl.b32 	%r774, %r773, 23;
	add.s32 	%r775, %r774, %r766;
	mul.wide.s32 	%rd145, %r775, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r776, %r777, %r778, %r779}, [%rd146];
	or.b32  	%r780, %r762, 16;
	shl.b32 	%r781, %r780, 9;
	and.b32  	%r782, %r781, 8371712;
	or.b32  	%r783, %r782, %r157;
	add.s32 	%r784, %r156, %r783;
	shr.s32 	%r785, %r784, 31;
	shr.u32 	%r786, %r785, 9;
	add.s32 	%r787, %r784, %r786;
	shr.s32 	%r788, %r787, 23;
	setp.lt.s32 	%p250, %r784, 0;
	and.b32  	%r789, %r787, -8388608;
	setp.ne.s32 	%p251, %r789, %r784;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r790, 1, 0, %p252;
	sub.s32 	%r791, %r790, %r788;
	shl.b32 	%r792, %r791, 23;
	add.s32 	%r793, %r792, %r784;
	mul.wide.s32 	%rd147, %r793, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r794, %r795, %r796, %r797}, [%rd148];
	and.b32  	%r798, %r89, 16320;
	or.b32  	%r799, %r4, %r798;
	shl.b32 	%r800, %r799, 9;
	or.b32  	%r801, %r800, %r157;
	or.b32  	%r802, %r801, 16384;
	add.s32 	%r803, %r156, %r802;
	shr.s32 	%r804, %r803, 31;
	shr.u32 	%r805, %r804, 9;
	add.s32 	%r806, %r803, %r805;
	shr.s32 	%r807, %r806, 23;
	setp.lt.s32 	%p253, %r803, 0;
	and.b32  	%r808, %r806, -8388608;
	setp.ne.s32 	%p254, %r808, %r803;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r809, 1, 0, %p255;
	sub.s32 	%r810, %r809, %r807;
	shl.b32 	%r811, %r810, 23;
	add.s32 	%r812, %r811, %r803;
	mul.wide.s32 	%rd149, %r812, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r813, %r814, %r815, %r816}, [%rd150];
	or.b32  	%r817, %r801, 24576;
	add.s32 	%r818, %r156, %r817;
	shr.s32 	%r819, %r818, 31;
	shr.u32 	%r820, %r819, 9;
	add.s32 	%r821, %r818, %r820;
	shr.s32 	%r822, %r821, 23;
	setp.lt.s32 	%p256, %r818, 0;
	and.b32  	%r823, %r821, -8388608;
	setp.ne.s32 	%p257, %r823, %r818;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r824, 1, 0, %p258;
	sub.s32 	%r825, %r824, %r822;
	shl.b32 	%r826, %r825, 23;
	add.s32 	%r827, %r826, %r818;
	mul.wide.s32 	%rd151, %r827, 4;
	add.s64 	%rd152, %rd3, %rd151;
	ld.global.v4.u32 	{%r828, %r829, %r830, %r831}, [%rd152];
	selp.b32 	%r832, %r778, %r776, %p246;
	shfl.sync.bfly.b32	%r833, %r832, 16, 31, -1;
	selp.b32 	%r571, %r776, %r833, %p246;
	selp.b32 	%r576, %r833, %r778, %p246;
	selp.b32 	%r834, %r779, %r777, %p246;
	shfl.sync.bfly.b32	%r835, %r834, 16, 31, -1;
	selp.b32 	%r579, %r777, %r835, %p246;
	selp.b32 	%r584, %r835, %r779, %p246;
	selp.b32 	%r836, %r796, %r794, %p246;
	shfl.sync.bfly.b32	%r837, %r836, 16, 31, -1;
	selp.b32 	%r587, %r794, %r837, %p246;
	selp.b32 	%r592, %r837, %r796, %p246;
	selp.b32 	%r838, %r797, %r795, %p246;
	shfl.sync.bfly.b32	%r839, %r838, 16, 31, -1;
	selp.b32 	%r595, %r795, %r839, %p246;
	selp.b32 	%r600, %r839, %r797, %p246;
	selp.b32 	%r840, %r815, %r813, %p246;
	shfl.sync.bfly.b32	%r841, %r840, 16, 31, -1;
	selp.b32 	%r603, %r813, %r841, %p246;
	selp.b32 	%r608, %r841, %r815, %p246;
	selp.b32 	%r842, %r816, %r814, %p246;
	shfl.sync.bfly.b32	%r843, %r842, 16, 31, -1;
	selp.b32 	%r611, %r814, %r843, %p246;
	selp.b32 	%r616, %r843, %r816, %p246;
	selp.b32 	%r844, %r830, %r828, %p246;
	shfl.sync.bfly.b32	%r845, %r844, 16, 31, -1;
	selp.b32 	%r619, %r828, %r845, %p246;
	selp.b32 	%r624, %r845, %r830, %p246;
	selp.b32 	%r846, %r831, %r829, %p246;
	shfl.sync.bfly.b32	%r847, %r846, 16, 31, -1;
	selp.b32 	%r627, %r829, %r847, %p246;
	selp.b32 	%r632, %r847, %r831, %p246;
	shl.b32 	%r572, %r576, 4;
	mov.u32 	%r570, 252645135;
	// begin inline asm
	lop3.b32 %r634, %r570, %r571, %r572, 202;
	// end inline asm
	shr.u32 	%r575, %r571, 4;
	// begin inline asm
	lop3.b32 %r650, %r570, %r575, %r576, 202;
	// end inline asm
	shl.b32 	%r580, %r584, 4;
	// begin inline asm
	lop3.b32 %r642, %r570, %r579, %r580, 202;
	// end inline asm
	shr.u32 	%r583, %r579, 4;
	// begin inline asm
	lop3.b32 %r658, %r570, %r583, %r584, 202;
	// end inline asm
	shl.b32 	%r588, %r592, 4;
	// begin inline asm
	lop3.b32 %r666, %r570, %r587, %r588, 202;
	// end inline asm
	shr.u32 	%r591, %r587, 4;
	// begin inline asm
	lop3.b32 %r682, %r570, %r591, %r592, 202;
	// end inline asm
	shl.b32 	%r596, %r600, 4;
	// begin inline asm
	lop3.b32 %r674, %r570, %r595, %r596, 202;
	// end inline asm
	shr.u32 	%r599, %r595, 4;
	// begin inline asm
	lop3.b32 %r690, %r570, %r599, %r600, 202;
	// end inline asm
	shl.b32 	%r604, %r608, 4;
	// begin inline asm
	lop3.b32 %r635, %r570, %r603, %r604, 202;
	// end inline asm
	shr.u32 	%r607, %r603, 4;
	// begin inline asm
	lop3.b32 %r651, %r570, %r607, %r608, 202;
	// end inline asm
	shl.b32 	%r612, %r616, 4;
	// begin inline asm
	lop3.b32 %r643, %r570, %r611, %r612, 202;
	// end inline asm
	shr.u32 	%r615, %r611, 4;
	// begin inline asm
	lop3.b32 %r659, %r570, %r615, %r616, 202;
	// end inline asm
	shl.b32 	%r620, %r624, 4;
	// begin inline asm
	lop3.b32 %r667, %r570, %r619, %r620, 202;
	// end inline asm
	shr.u32 	%r623, %r619, 4;
	// begin inline asm
	lop3.b32 %r683, %r570, %r623, %r624, 202;
	// end inline asm
	shl.b32 	%r628, %r632, 4;
	// begin inline asm
	lop3.b32 %r675, %r570, %r627, %r628, 202;
	// end inline asm
	shr.u32 	%r631, %r627, 4;
	// begin inline asm
	lop3.b32 %r691, %r570, %r631, %r632, 202;
	// end inline asm
	mov.u32 	%r636, 25152;
	// begin inline asm
	prmt.b32 %r698, %r634, %r635, %r636;
	// end inline asm
	mov.u32 	%r640, 29521;
	// begin inline asm
	prmt.b32 %r730, %r634, %r635, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r642, %r643, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r738, %r642, %r643, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r650, %r651, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r731, %r650, %r651, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r658, %r659, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r739, %r658, %r659, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r666, %r667, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r666, %r667, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r674, %r675, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r754, %r674, %r675, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r682, %r683, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r747, %r682, %r683, %r640;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r690, %r691, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r755, %r690, %r691, %r640;
	// end inline asm
	mov.u32 	%r700, 21520;
	// begin inline asm
	prmt.b32 %r697, %r698, %r699, %r700;
	// end inline asm
	mov.u32 	%r704, 30258;
	// begin inline asm
	prmt.b32 %r701, %r698, %r699, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r706, %r707, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r706, %r707, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r714, %r715, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r714, %r715, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r722, %r723, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r722, %r723, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r729, %r730, %r731, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r733, %r730, %r731, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r737, %r738, %r739, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r741, %r738, %r739, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r745, %r746, %r747, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r746, %r747, %r704;
	// end inline asm
	// begin inline asm
	prmt.b32 %r753, %r754, %r755, %r700;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r754, %r755, %r704;
	// end inline asm
	st.shared.u32 	[%rd10], %r697;
	st.shared.u32 	[%rd12+512], %r705;
	st.shared.u32 	[%rd12+256], %r701;
	st.shared.u32 	[%rd12+768], %r709;
	and.b32  	%r848, %r780, 31;
	add.s32 	%r849, %r848, %r761;
	mul.wide.u32 	%rd153, %r849, 4;
	add.s64 	%rd155, %rd78, %rd153;
	st.shared.u32 	[%rd155], %r713;
	cvt.u64.u32 	%rd156, %r848;
	add.s64 	%rd157, %rd11, %rd156;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd78, %rd158;
	st.shared.u32 	[%rd159+512], %r721;
	st.shared.u32 	[%rd159+256], %r717;
	st.shared.u32 	[%rd159+768], %r725;
	st.shared.u32 	[%rd12+128], %r729;
	st.shared.u32 	[%rd12+640], %r737;
	st.shared.u32 	[%rd12+384], %r733;
	st.shared.u32 	[%rd12+896], %r741;
	st.shared.u32 	[%rd159+128], %r745;
	st.shared.u32 	[%rd159+640], %r753;
	st.shared.u32 	[%rd159+384], %r749;
	st.shared.u32 	[%rd159+896], %r757;
	bar.sync 	0;
	ld.shared.u32 	%r161, [%rd13];
	ld.shared.u32 	%r162, [%rd14];
	ld.shared.u32 	%r163, [%rd15];
	ld.shared.u32 	%r164, [%rd16];
	ld.shared.u32 	%r165, [%rd17];
	ld.shared.u32 	%r166, [%rd18];
	ld.shared.u32 	%r167, [%rd19];
	ld.shared.u32 	%r168, [%rd20];
	ld.shared.u32 	%r169, [%rd21];
	ld.shared.u32 	%r170, [%rd22];
	ld.shared.u32 	%r171, [%rd23];
	ld.shared.u32 	%r172, [%rd24];
	ld.shared.u32 	%r173, [%rd25];
	ld.shared.u32 	%r174, [%rd26];
	ld.shared.u32 	%r175, [%rd27];
	ld.shared.u32 	%r176, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r177, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r178, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r177, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.187:                             // %pass3083
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r850, %r177, %r1;
	mul.wide.s32 	%rd160, %r850, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r161;
	setp.eq.s32 	%p260, %r178, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.188:                             // %pass3151
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r851, %r178, %r1;
	mul.wide.s32 	%rd163, %r851, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r162;
	setp.eq.s32 	%p261, %r179, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.189:                             // %pass3219
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r852, %r179, %r1;
	mul.wide.s32 	%rd166, %r852, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r163;
	setp.eq.s32 	%p262, %r180, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.190:                             // %pass3287
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r853, %r180, %r1;
	mul.wide.s32 	%rd169, %r853, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r164;
	setp.eq.s32 	%p263, %r181, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.191:                             // %pass3355
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r854, %r181, %r1;
	mul.wide.s32 	%rd172, %r854, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r165;
	setp.eq.s32 	%p264, %r182, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.192:                             // %pass3423
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r855, %r182, %r1;
	mul.wide.s32 	%rd175, %r855, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r166;
	setp.eq.s32 	%p265, %r183, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.193:                             // %pass3491
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r856, %r183, %r1;
	mul.wide.s32 	%rd178, %r856, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r167;
	setp.eq.s32 	%p266, %r184, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.194:                             // %pass3559
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r857, %r184, %r1;
	mul.wide.s32 	%rd181, %r857, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r168;
	setp.eq.s32 	%p267, %r185, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.195:                             // %pass3627
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r858, %r185, %r1;
	mul.wide.s32 	%rd184, %r858, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r169;
	setp.eq.s32 	%p268, %r186, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.196:                             // %pass3695
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r859, %r186, %r1;
	mul.wide.s32 	%rd187, %r859, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r170;
	setp.eq.s32 	%p269, %r187, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.197:                             // %pass3763
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r860, %r187, %r1;
	mul.wide.s32 	%rd190, %r860, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r171;
	setp.eq.s32 	%p270, %r188, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.198:                             // %pass3831
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r861, %r188, %r1;
	mul.wide.s32 	%rd193, %r861, 4;
	add.s64 	%rd195, %rd78, %rd193;
	st.shared.u32 	[%rd195], %r172;
	setp.eq.s32 	%p271, %r189, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.199:                             // %pass3899
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r862, %r189, %r1;
	mul.wide.s32 	%rd196, %r862, 4;
	add.s64 	%rd198, %rd78, %rd196;
	st.shared.u32 	[%rd198], %r173;
	setp.eq.s32 	%p272, %r190, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.200:                             // %pass3967
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r863, %r190, %r1;
	mul.wide.s32 	%rd199, %r863, 4;
	add.s64 	%rd201, %rd78, %rd199;
	st.shared.u32 	[%rd201], %r174;
	setp.eq.s32 	%p273, %r191, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.201:                             // %pass4035
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r864, %r191, %r1;
	mul.wide.s32 	%rd202, %r864, 4;
	add.s64 	%rd204, %rd78, %rd202;
	st.shared.u32 	[%rd204], %r175;
	setp.eq.s32 	%p274, %r192, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.202:                             // %pass4103
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r866, %r192, %r1;
	mul.wide.s32 	%rd205, %r866, 4;
	add.s64 	%rd207, %rd78, %rd205;
	st.shared.u32 	[%rd207], %r176;
	bar.sync 	0;
	ld.shared.u32 	%r193, [%rd29];
	ld.shared.u32 	%r194, [%rd30];
	ld.shared.u32 	%r195, [%rd31];
	ld.shared.u32 	%r196, [%rd32];
	ld.shared.u32 	%r197, [%rd33];
	ld.shared.u32 	%r198, [%rd34];
	ld.shared.u32 	%r199, [%rd35];
	ld.shared.u32 	%r200, [%rd36];
	ld.shared.u32 	%r201, [%rd37];
	ld.shared.u32 	%r202, [%rd38];
	ld.shared.u32 	%r203, [%rd39];
	ld.shared.u32 	%r204, [%rd40];
	ld.shared.u32 	%r205, [%rd41];
	ld.shared.u32 	%r206, [%rd42];
	ld.shared.u32 	%r207, [%rd43];
	ld.shared.u32 	%r208, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3333, 16;
	bra.uni 	$L__BB0_203;
$L__BB0_152:                            // %L20843
                                        //   in Loop: Header=BB0_203 Depth=2
	bar.sync 	0;
	add.s32 	%r3333, %r3333, -8;
	setp.ne.s32 	%p283, %r3333, -16;
	@%p283 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_153;
$L__BB0_203:                            // %L12366
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3333, 16;
	selp.b32 	%r1259, %r193, 0, %p275;
	setp.eq.s32 	%p276, %r3333, 8;
	selp.b32 	%r1260, %r197, %r1259, %p276;
	setp.eq.s32 	%p277, %r3333, 0;
	selp.b32 	%r1261, %r201, %r1260, %p277;
	setp.eq.s32 	%p278, %r3333, -8;
	selp.b32 	%r1262, %r205, %r1261, %p278;
	selp.b32 	%r1263, %r194, 0, %p275;
	selp.b32 	%r1264, %r198, %r1263, %p276;
	selp.b32 	%r1265, %r202, %r1264, %p277;
	selp.b32 	%r1266, %r206, %r1265, %p278;
	selp.b32 	%r1267, %r195, 0, %p275;
	selp.b32 	%r1268, %r199, %r1267, %p276;
	selp.b32 	%r1269, %r203, %r1268, %p277;
	selp.b32 	%r1270, %r207, %r1269, %p278;
	selp.b32 	%r1271, %r196, 0, %p275;
	selp.b32 	%r1272, %r200, %r1271, %p276;
	selp.b32 	%r1273, %r204, %r1272, %p277;
	selp.b32 	%r1274, %r208, %r1273, %p278;
	// begin inline asm
	mov.b32 %r872, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r871, %r1262, -2004318072;
	mov.u32 	%r1008, 983055;
	// begin inline asm
	lop3.b32 %r869, %r1008, %r871, %r872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r873, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r874, %r872, %r873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r877, %r869, %r874;
	// end inline asm
	mov.u32 	%r1019, 15728880;
	// begin inline asm
	lop3.b32 %r880, %r1019, %r871, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r917, %r1266, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r1008, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r1019, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r963, %r1270, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r1008, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r1019, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1009, %r1274, -2004318072;
	// begin inline asm
	lop3.b32 %r1007, %r1008, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r1019, %r1009, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r877;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r969;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r980;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1015;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1026;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1072, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1130, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1075, %r1076}, {%r244, %r247}, {%r1051}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1082, %r1083}, {%r244, %r247}, {%r1054}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1089, %r1090}, {%r244, %r247}, {%r1057}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1096, %r1097}, {%r244, %r247}, {%r1060}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1103, %r1104}, {%r244, %r247}, {%r1063}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1110, %r1111}, {%r244, %r247}, {%r1066}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1117, %r1118}, {%r244, %r247}, {%r1069}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1124, %r1125}, {%r244, %r247}, {%r1072}, {%r1130, %r1130};
	// end inline asm
	@%p1 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_204;
$L__BB0_205:                            // %pass5517
                                        //   in Loop: Header=BB0_203 Depth=2
	// begin inline asm
	neg.f16x2 %r1131, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1133, %r1131, %r1076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r282, %r1075, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1140, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r1140, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r282, %r1082, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1149, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r1149, %r1090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r282, %r1089, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1158, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r1158, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r282, %r1096, %r1160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1167, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r1167, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r282, %r1103, %r1169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1176, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r1176, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r282, %r1110, %r1178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1185, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r1185, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r282, %r1117, %r1187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1194, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1196, %r1194, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r282, %r1124, %r1196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r285, %r1075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r282, %r1076, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r285, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r282, %r1083, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r285, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r282, %r1090, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r285, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r282, %r1097, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r285, %r1103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r282, %r1104, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r285, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r282, %r1111, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r285, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r282, %r1118, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r285, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r282, %r1125, %r1252;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1275, %r1276}, {%r329, %r332}, {%r1136, %r1206}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1284, %r1285}, {%r329, %r332}, {%r1145, %r1213}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1294}, {%r329, %r332}, {%r1154, %r1220}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1302, %r1303}, {%r329, %r332}, {%r1163, %r1227}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1311, %r1312}, {%r329, %r332}, {%r1172, %r1234}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r329, %r332}, {%r1181, %r1241}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1329, %r1330}, {%r329, %r332}, {%r1190, %r1248}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1338, %r1339}, {%r329, %r332}, {%r1199, %r1255}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1415, [%rd7];
	ld.shared.u32 	%r1422, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1432, %r1429}, {%r341, %r344}, {%r1415}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1441, %r1438}, {%r341, %r344}, {%r1422}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r1425, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r375, %r1432, %r1427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1436, %r1434, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r375, %r1441, %r1436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1443, %r378, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r375, %r1429, %r1443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1450, %r378, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r375, %r1438, %r1450;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1476, %r1479}, {%r417, %r420}, {%r1430, %r1446}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1483, %r1487}, {%r417, %r420}, {%r1439, %r1453}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r1476, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r1479, %r1479, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r1483, %r1483, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r1487, %r1487, %r1482;
	// end inline asm
	mov.u32 	%r2072, 357897557;
	// begin inline asm
	fma.rn.f16x2 %r1490, %r2072, %r1486, %r3346;
	// end inline asm
	ld.shared.u32 	%r1498, [%rd45];
	ld.shared.u32 	%r1505, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1515, %r1512}, {%r341, %r344}, {%r1498}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1524, %r1521}, {%r341, %r344}, {%r1505}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1508, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r1508, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r375, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1517, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1519, %r1517, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r375, %r1524, %r1519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r378, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r375, %r1512, %r1526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r378, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r375, %r1521, %r1533;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1559, %r1562}, {%r417, %r420}, {%r1513, %r1529}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1566, %r1570}, {%r417, %r420}, {%r1522, %r1536}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r1559, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r1562, %r1562, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r1566, %r1566, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r1570, %r1570, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1573, %r2072, %r1569, %r1490;
	// end inline asm
	ld.shared.u32 	%r1581, [%rd47];
	ld.shared.u32 	%r1588, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1598, %r1595}, {%r341, %r344}, {%r1581}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1607, %r1604}, {%r341, %r344}, {%r1588}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1591, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1591, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r375, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1600, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1602, %r1600, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r375, %r1607, %r1602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1609, %r378, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r375, %r1595, %r1609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r378, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r375, %r1604, %r1616;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1642, %r1645}, {%r417, %r420}, {%r1596, %r1612}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1649, %r1653}, {%r417, %r420}, {%r1605, %r1619}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r1642, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r1645, %r1645, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r1649, %r1649, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1652, %r1653, %r1653, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1656, %r2072, %r1652, %r1573;
	// end inline asm
	ld.shared.u32 	%r1664, [%rd49];
	ld.shared.u32 	%r1671, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1681, %r1678}, {%r341, %r344}, {%r1664}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1690, %r1687}, {%r341, %r344}, {%r1671}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r375, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1683, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r1683, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r375, %r1690, %r1685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r378, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r375, %r1678, %r1692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r378, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r375, %r1687, %r1699;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1728}, {%r417, %r420}, {%r1679, %r1695}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1732, %r1736}, {%r417, %r420}, {%r1688, %r1702}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1725, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r1728, %r1728, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r1732, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r1736, %r1736, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r2072, %r1735, %r1656;
	// end inline asm
	ld.shared.u32 	%r1747, [%rd51];
	ld.shared.u32 	%r1754, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1764, %r1761}, {%r341, %r344}, {%r1747}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1773, %r1770}, {%r341, %r344}, {%r1754}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r375, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1766, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r1766, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r375, %r1773, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r378, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r375, %r1761, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r378, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r375, %r1770, %r1782;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1808, %r1811}, {%r417, %r420}, {%r1762, %r1778}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1815, %r1819}, {%r417, %r420}, {%r1771, %r1785}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r1808, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1811, %r1811, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1815, %r1815, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r2072, %r1818, %r1739;
	// end inline asm
	ld.shared.u32 	%r1830, [%rd53];
	ld.shared.u32 	%r1837, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1847, %r1844}, {%r341, %r344}, {%r1830}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1856, %r1853}, {%r341, %r344}, {%r1837}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r1840, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r375, %r1847, %r1842;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1849, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r1849, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r375, %r1856, %r1851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r378, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r375, %r1844, %r1858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r378, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r375, %r1853, %r1865;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1891, %r1894}, {%r417, %r420}, {%r1845, %r1861}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1898, %r1902}, {%r417, %r420}, {%r1854, %r1868}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1891, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r1894, %r1894, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r1898, %r1898, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1902, %r1902, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r2072, %r1901, %r1822;
	// end inline asm
	ld.shared.u32 	%r1913, [%rd55];
	ld.shared.u32 	%r1920, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r341, %r344}, {%r1913}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1939, %r1936}, {%r341, %r344}, {%r1920}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r375, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1932, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r1932, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r375, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r378, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r375, %r1927, %r1941;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r378, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r375, %r1936, %r1948;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1977}, {%r417, %r420}, {%r1928, %r1944}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1985}, {%r417, %r420}, {%r1937, %r1951}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1974, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r2072, %r1984, %r1905;
	// end inline asm
	ld.shared.u32 	%r1996, [%rd57];
	ld.shared.u32 	%r2003, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2013, %r2010}, {%r341, %r344}, {%r1996}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2022, %r2019}, {%r341, %r344}, {%r2003}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2006, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r2006, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r375, %r2013, %r2008;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2015, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2017, %r2015, %r2019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r375, %r2022, %r2017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r378, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r375, %r2010, %r2024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r378, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r375, %r2019, %r2031;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2057, %r2060}, {%r417, %r420}, {%r2011, %r2027}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2064, %r2068}, {%r417, %r420}, {%r2020, %r2034}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2056, %r2057, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r2060, %r2060, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r2064, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r2068, %r2068, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r2072, %r2067, %r1988;
	// end inline asm
	add.s32 	%r3341, %r3341, 8;
	setp.ne.s32 	%p279, %r3341, 96;
	@%p279 bra 	$L__BB0_152;
// %bb.206:                             // %pass8917
                                        //   in Loop: Header=BB0_203 Depth=2
	shl.b32 	%r2076, %r3342, 20;
	or.b32  	%r2077, %r159, %r2076;
	cvt.u64.u32 	%rd210, %r2077;
	add.s64 	%rd211, %rd210, %rd9;
	shr.u64 	%rd212, %rd211, 34;
	add.s64 	%rd213, %rd211, %rd212;
	shr.s64 	%rd214, %rd213, 30;
	setp.lt.s64 	%p280, %rd211, 0;
	and.b64  	%rd215, %rd213, -1073741824;
	setp.ne.s64 	%p281, %rd215, %rd211;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd216, 1, 0, %p282;
	sub.s64 	%rd217, %rd216, %rd214;
	shl.b64 	%rd218, %rd217, 30;
	add.s64 	%rd219, %rd218, %rd211;
	shl.b64 	%rd220, %rd219, 2;
	add.s64 	%rd221, %rd4, %rd220;
	st.global.u32 	[%rd221], %r3346;
	add.s32 	%r3342, %r3342, 1;
	mov.u32 	%r3341, 0;
	mov.u32 	%r3346, %r3341;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L20864.preheader
                                        //   in Loop: Header=BB0_185 Depth=1
	mov.u32 	%r3340, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L29341
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3340, %r3340, -8;
	setp.ne.s32 	%p292, %r3340, -16;
	@%p292 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L20864
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p284, %r3340, 16;
	selp.b32 	%r3271, %r193, 0, %p284;
	setp.eq.s32 	%p285, %r3340, 8;
	selp.b32 	%r3272, %r197, %r3271, %p285;
	setp.eq.s32 	%p286, %r3340, 0;
	selp.b32 	%r3273, %r201, %r3272, %p286;
	setp.eq.s32 	%p287, %r3340, -8;
	selp.b32 	%r3274, %r205, %r3273, %p287;
	selp.b32 	%r3275, %r194, 0, %p284;
	selp.b32 	%r3276, %r198, %r3275, %p285;
	selp.b32 	%r3277, %r202, %r3276, %p286;
	selp.b32 	%r3278, %r206, %r3277, %p287;
	selp.b32 	%r3279, %r195, 0, %p284;
	selp.b32 	%r3280, %r199, %r3279, %p285;
	selp.b32 	%r3281, %r203, %r3280, %p286;
	selp.b32 	%r3282, %r207, %r3281, %p287;
	selp.b32 	%r3283, %r196, 0, %p284;
	selp.b32 	%r3284, %r200, %r3283, %p285;
	selp.b32 	%r3285, %r204, %r3284, %p286;
	selp.b32 	%r3286, %r208, %r3285, %p287;
	// begin inline asm
	mov.b32 %r2106, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2117, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3287, %r3274, 8;
	xor.b32  	%r2116, %r3287, 8947848;
	// begin inline asm
	lop3.b32 %r2103, %r1008, %r2116, %r2106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2107, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2108, %r2106, %r2107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2111, %r2103, %r2108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2114, %r1019, %r2116, %r2117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2118, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2119, %r2117, %r2118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2122, %r2114, %r2119;
	// end inline asm
	// begin inline asm
	mov.b32 %r2152, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2163, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3288, %r3278, 8;
	xor.b32  	%r2162, %r3288, 8947848;
	// begin inline asm
	lop3.b32 %r2149, %r1008, %r2162, %r2152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2153, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2154, %r2152, %r2153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2157, %r2149, %r2154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2160, %r1019, %r2162, %r2163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2164, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2165, %r2163, %r2164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2168, %r2160, %r2165;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3289, %r3282, 8;
	xor.b32  	%r2208, %r3289, 8947848;
	// begin inline asm
	lop3.b32 %r2195, %r1008, %r2208, %r2198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2199, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2200, %r2198, %r2199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2203, %r2195, %r2200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2206, %r1019, %r2208, %r2209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2211, %r2209, %r2210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2214, %r2206, %r2211;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3290, %r3286, 8;
	xor.b32  	%r2254, %r3290, 8947848;
	// begin inline asm
	lop3.b32 %r2241, %r1008, %r2254, %r2244, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2246, %r2244, %r2245;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2249, %r2241, %r2246;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2252, %r1019, %r2254, %r2255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2257, %r2255, %r2256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2260, %r2252, %r2257;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2111;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2263, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2122;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2266, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2157;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2269, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2168;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2272, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2203;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2275, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2249;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2281, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2284, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2350, %r2347}, {%r244, %r247}, {%r2263}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2359, %r2356}, {%r244, %r247}, {%r2266}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2368, %r2365}, {%r244, %r247}, {%r2269}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2377, %r2374}, {%r244, %r247}, {%r2272}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2386, %r2383}, {%r244, %r247}, {%r2275}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2395, %r2392}, {%r244, %r247}, {%r2278}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2404, %r2401}, {%r244, %r247}, {%r2281}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2413, %r2410}, {%r244, %r247}, {%r2284}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2343, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2345, %r2343, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r282, %r2350, %r2345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2352, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2354, %r2352, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2357, %r282, %r2359, %r2354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2361, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2363, %r2361, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2366, %r282, %r2368, %r2363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2370, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2372, %r2370, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2375, %r282, %r2377, %r2372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2379, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2381, %r2379, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2384, %r282, %r2386, %r2381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2388, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2390, %r2388, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2393, %r282, %r2395, %r2390;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2397, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2399, %r2397, %r2401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2402, %r282, %r2404, %r2399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2406, %r285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2408, %r2406, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r282, %r2413, %r2408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2415, %r285, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r282, %r2347, %r2415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2422, %r285, %r2359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2425, %r282, %r2356, %r2422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2429, %r285, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2432, %r282, %r2365, %r2429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r285, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r282, %r2374, %r2436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r285, %r2386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r282, %r2383, %r2443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r285, %r2395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r282, %r2392, %r2450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r285, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r282, %r2401, %r2457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r285, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r282, %r2410, %r2464;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2471, %r2472}, {%r329, %r332}, {%r2348, %r2418}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2480, %r2481}, {%r329, %r332}, {%r2357, %r2425}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2489, %r2490}, {%r329, %r332}, {%r2366, %r2432}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2498, %r2499}, {%r329, %r332}, {%r2375, %r2439}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2507, %r2508}, {%r329, %r332}, {%r2384, %r2446}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2516, %r2517}, {%r329, %r332}, {%r2393, %r2453}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2525, %r2526}, {%r329, %r332}, {%r2402, %r2460}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2534, %r2535}, {%r329, %r332}, {%r2411, %r2467}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2611, [%rd7];
	ld.shared.u32 	%r2618, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2628, %r2625}, {%r341, %r344}, {%r2611}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2637, %r2634}, {%r341, %r344}, {%r2618}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2621, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r2621, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r375, %r2628, %r2623;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2630, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2632, %r2630, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2635, %r375, %r2637, %r2632;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r378, %r2628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2642, %r375, %r2625, %r2639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r378, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r375, %r2634, %r2646;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2672, %r2675}, {%r417, %r420}, {%r2626, %r2642}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2679, %r2683}, {%r417, %r420}, {%r2635, %r2649}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r2672, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2674, %r2675, %r2675, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r2679, %r2679, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r2683, %r2683, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2686, %r2072, %r2682, %r3346;
	// end inline asm
	ld.shared.u32 	%r2694, [%rd45];
	ld.shared.u32 	%r2701, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r341, %r344}, {%r2694}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2720, %r2717}, {%r341, %r344}, {%r2701}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r375, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2713, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2713, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r375, %r2720, %r2715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r378, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r375, %r2708, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r378, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r375, %r2717, %r2729;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2755, %r2758}, {%r417, %r420}, {%r2709, %r2725}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2762, %r2766}, {%r417, %r420}, {%r2718, %r2732}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2754, %r2755, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r2758, %r2758, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r2762, %r2762, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r2766, %r2766, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r2072, %r2765, %r2686;
	// end inline asm
	ld.shared.u32 	%r2777, [%rd47];
	ld.shared.u32 	%r2784, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2794, %r2791}, {%r341, %r344}, {%r2777}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2803, %r2800}, {%r341, %r344}, {%r2784}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2787, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2789, %r2787, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r375, %r2794, %r2789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2796, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2798, %r2796, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r375, %r2803, %r2798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2805, %r378, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r375, %r2791, %r2805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r378, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r375, %r2800, %r2812;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2838, %r2841}, {%r417, %r420}, {%r2792, %r2808}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2845, %r2849}, {%r417, %r420}, {%r2801, %r2815}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r2838, %r2838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r2841, %r2841, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r2845, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r2849, %r2849, %r2844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2852, %r2072, %r2848, %r2769;
	// end inline asm
	ld.shared.u32 	%r2860, [%rd49];
	ld.shared.u32 	%r2867, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2877, %r2874}, {%r341, %r344}, {%r2860}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2886, %r2883}, {%r341, %r344}, {%r2867}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2870, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r2870, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r375, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2879, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r2879, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r375, %r2886, %r2881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r378, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r375, %r2874, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r378, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r375, %r2883, %r2895;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2921, %r2924}, {%r417, %r420}, {%r2875, %r2891}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2928, %r2932}, {%r417, %r420}, {%r2884, %r2898}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r2921, %r2921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r2924, %r2924, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r2928, %r2928, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r2932, %r2932, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r2072, %r2931, %r2852;
	// end inline asm
	ld.shared.u32 	%r2943, [%rd51];
	ld.shared.u32 	%r2950, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2960, %r2957}, {%r341, %r344}, {%r2943}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2969, %r2966}, {%r341, %r344}, {%r2950}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2953, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2955, %r2953, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r375, %r2960, %r2955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2962, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2964, %r2962, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2967, %r375, %r2969, %r2964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r378, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r375, %r2957, %r2971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r378, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r375, %r2966, %r2978;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3004, %r3007}, {%r417, %r420}, {%r2958, %r2974}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3011, %r3015}, {%r417, %r420}, {%r2967, %r2981}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3003, %r3004, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r3007, %r3007, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r3011, %r3011, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r3015, %r3015, %r3010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r2072, %r3014, %r2935;
	// end inline asm
	ld.shared.u32 	%r3026, [%rd53];
	ld.shared.u32 	%r3033, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3043, %r3040}, {%r341, %r344}, {%r3026}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3052, %r3049}, {%r341, %r344}, {%r3033}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r375, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3045, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3047, %r3045, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r375, %r3052, %r3047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3054, %r378, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r375, %r3040, %r3054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r378, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r375, %r3049, %r3061;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3087, %r3090}, {%r417, %r420}, {%r3041, %r3057}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3094, %r3098}, {%r417, %r420}, {%r3050, %r3064}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r3087, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r3094, %r3094, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r3098, %r3098, %r3093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3101, %r2072, %r3097, %r3018;
	// end inline asm
	ld.shared.u32 	%r3109, [%rd55];
	ld.shared.u32 	%r3116, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3126, %r3123}, {%r341, %r344}, {%r3109}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3135, %r3132}, {%r341, %r344}, {%r3116}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3121, %r3119, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r375, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3128, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3130, %r3128, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r375, %r3135, %r3130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r378, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r375, %r3123, %r3137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r378, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r375, %r3132, %r3144;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3170, %r3173}, {%r417, %r420}, {%r3124, %r3140}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3177, %r3181}, {%r417, %r420}, {%r3133, %r3147}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3169, %r3170, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3173, %r3173, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3177, %r3177, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r3181, %r3181, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3184, %r2072, %r3180, %r3101;
	// end inline asm
	ld.shared.u32 	%r3192, [%rd57];
	ld.shared.u32 	%r3199, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3209, %r3206}, {%r341, %r344}, {%r3192}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3218, %r3215}, {%r341, %r344}, {%r3199}, {%r1130, %r1130};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3202, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r3202, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r375, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3211, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3213, %r3211, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3216, %r375, %r3218, %r3213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3220, %r378, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r375, %r3206, %r3220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r378, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r375, %r3215, %r3227;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3253, %r3256}, {%r417, %r420}, {%r3207, %r3223}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3260, %r3264}, {%r417, %r420}, {%r3216, %r3230}, {%r1130, %r1130}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r3253, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3263, %r3264, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r2072, %r3263, %r3184;
	// end inline asm
	add.s32 	%r3341, %r3341, 8;
	setp.eq.s32 	%p288, %r3341, 96;
	@%p288 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_155;
$L__BB0_207:                            // %pass12454
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3292, %r3342, 20;
	or.b32  	%r3293, %r159, %r3292;
	cvt.u64.u32 	%rd222, %r3293;
	add.s64 	%rd223, %rd222, %rd9;
	shr.u64 	%rd224, %rd223, 34;
	add.s64 	%rd225, %rd223, %rd224;
	shr.s64 	%rd226, %rd225, 30;
	setp.lt.s64 	%p289, %rd223, 0;
	and.b64  	%rd227, %rd225, -1073741824;
	setp.ne.s64 	%p290, %rd227, %rd223;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd228, 1, 0, %p291;
	sub.s64 	%rd229, %rd228, %rd226;
	shl.b64 	%rd230, %rd229, 30;
	add.s64 	%rd231, %rd230, %rd223;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3346;
	add.s32 	%r3342, %r3342, 1;
	mov.u32 	%r3341, %r1130;
	mov.u32 	%r3346, %r1130;
	bra.uni 	$L__BB0_155;
$L__BB0_157:                            // %L29372
	mov.u32 	%r3294, 0;
	st.global.u32 	[%rd6], %r3294;
	ret;
$L__BB0_204:                            // %post_box_union
	mov.u64 	%rd208, exception2385;
	cvta.global.u64 	%rd209, %rd208;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd209;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6896
	mov.u32 	%r3310, 5;
	st.global.u32 	[%rd6], %r3310;
	mov.u64 	%rd264, exception2337;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7056
	mov.u32 	%r3309, 5;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd262, exception2337;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7216
	mov.u32 	%r3308, 5;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd260, exception2337;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7376
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd258, exception2337;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7536
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd256, exception2337;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7696
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd254, exception2337;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7856
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd252, exception2337;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8016
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd250, exception2337;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8176
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd248, exception2337;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8336
	mov.u32 	%r3301, 5;
	st.global.u32 	[%rd6], %r3301;
	mov.u64 	%rd246, exception2337;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8496
	mov.u32 	%r3300, 5;
	st.global.u32 	[%rd6], %r3300;
	mov.u64 	%rd244, exception2337;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8656
	mov.u32 	%r3299, 5;
	st.global.u32 	[%rd6], %r3299;
	mov.u64 	%rd242, exception2337;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8816
	mov.u32 	%r3298, 5;
	st.global.u32 	[%rd6], %r3298;
	mov.u64 	%rd240, exception2337;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8976
	mov.u32 	%r3297, 5;
	st.global.u32 	[%rd6], %r3297;
	mov.u64 	%rd238, exception2337;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9136
	mov.u32 	%r3296, 5;
	st.global.u32 	[%rd6], %r3296;
	mov.u64 	%rd236, exception2337;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9296
	mov.u32 	%r3295, 5;
	st.global.u32 	[%rd6], %r3295;
	mov.u64 	%rd234, exception2337;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3312, 2;
	st.global.u32 	[%rd6], %r3312;
	mov.u64 	%rd268, exception2337;
	cvta.global.u64 	%rd269, %rd268;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd269;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3311, 3;
	st.global.u32 	[%rd6], %r3311;
	mov.u64 	%rd266, exception2337;
	cvta.global.u64 	%rd267, %rd266;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd267;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r430, [retval0+0];
	} // callseq 47
	mov.u32 	%r432, 4;
	st.global.u32 	[%rd6], %r432;
	mov.u64 	%rd73, exception2337;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
