// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2375[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2423[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<307>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3376>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<290>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r225, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r234, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r234, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r226, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r235, %r3, %r1;
	or.b32  	%r236, %r235, %r5;
	mul.wide.u32 	%rd67, %r236, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r237, 1;
	st.global.u32 	[%rd6], %r237;
	setp.gt.u32 	%p3, %r226, 16383;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r227, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r227, %r226;
	setp.gt.s32 	%p5, %r227, 32767;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r228, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r227, %r226;
	and.b32  	%r238, %r6, 63;
	setp.ne.s32 	%p7, %r238, 0;
	setp.gt.u32 	%p8, %r228, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r229, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r229, %r228;
	setp.lt.s32 	%p11, %r229, 1024;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r239, %r229, %r228;
	mul.hi.s32 	%r240, %r6, 1374389535;
	shr.u32 	%r241, %r240, 31;
	shr.s32 	%r242, %r240, 5;
	add.s32 	%r243, %r242, %r241;
	setp.eq.s32 	%p13, %r239, %r243;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r230, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r230, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r231, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r231, %r230;
	setp.gt.s32 	%p16, %r231, 4;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r232, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r231, %r230;
	and.b32  	%r244, %r7, 3;
	setp.ne.s32 	%p18, %r244, 0;
	setp.lt.s32 	%p19, %r232, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r233, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r233, %r232;
	setp.gt.s32 	%p22, %r233, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r245, %r233, %r232;
	and.b32  	%r246, %r245, 3;
	setp.eq.s32 	%p24, %r246, 0;
	setp.eq.s32 	%p25, %r245, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_13;
$L__BB0_160:                            // %pass162
	and.b32  	%r128, %r1, 3;
	shr.u32 	%r129, %r1, 2;
	mul.lo.s32 	%r247, %r128, %r129;
	and.b32  	%r248, %r247, 7;
	cvt.rn.f32.s32 	%f185, %r248;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p302, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_172;
// %bb.161:
	@%p302 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r131, %f750;
	and.b32  	%r249, %r131, 8388607;
	or.b32  	%r3365, %r249, 1065353216;
	mov.b32 	%f745, %r3365;
	add.s32 	%r250, %r131, -1073741824;
	and.b32  	%r3366, %r250, -8388608;
	setp.eq.s32 	%p34, %r3366, 0;
	@%p34 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r251, %r3366, 192937984;
	add.s32 	%r252, %r3365, %r251;
	mov.b32 	%f197, %r252;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3366, %r3366, %r251;
	mov.b32 	%r3365, %f745;
	setp.ne.s32 	%p35, %r3366, 0;
	setp.ne.s32 	%p36, %r3365, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r253, %f151;
	and.b32  	%r138, %r253, -2147483648;
	@%p39 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r254, %f746;
	or.b32  	%r255, %r138, %r254;
	mov.b32 	%f746, %r255;
$L__BB0_174:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r1, 1;
	and.b32  	%r270, %r141, 2;
	mul.lo.s32 	%r142, %r270, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p303, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p303 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r271, %r9, 8388607;
	or.b32  	%r3331, %r271, 1065353216;
	mov.b32 	%f705, %r3331;
	add.s32 	%r272, %r9, -1073741824;
	and.b32  	%r3332, %r272, -8388608;
	setp.eq.s32 	%p54, %r3332, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r273, %r3332, 192937984;
	add.s32 	%r274, %r3331, %r273;
	mov.b32 	%f251, %r274;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3332, %r3332, %r273;
	mov.b32 	%r3331, %f705;
	setp.ne.s32 	%p55, %r3332, 0;
	setp.ne.s32 	%p56, %r3331, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r275, %f168;
	and.b32  	%r16, %r275, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r276, %f706;
	or.b32  	%r277, %r16, %r276;
	mov.b32 	%f706, %r277;
$L__BB0_27:                             // %__nv_fmodf.exit2337
	add.s32 	%r286, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r286;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p304, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p304 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r287, %r18, 8388607;
	or.b32  	%r3333, %r287, 1065353216;
	mov.b32 	%f709, %r3333;
	add.s32 	%r288, %r18, -1073741824;
	and.b32  	%r3334, %r288, -8388608;
	setp.eq.s32 	%p74, %r3334, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r289, %r3334, 192937984;
	add.s32 	%r290, %r3333, %r289;
	mov.b32 	%f303, %r290;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3334, %r3334, %r289;
	mov.b32 	%r3333, %f709;
	setp.ne.s32 	%p75, %r3334, 0;
	setp.ne.s32 	%p76, %r3333, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r291, %f18;
	and.b32  	%r25, %r291, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r292, %f710;
	or.b32  	%r293, %r25, %r292;
	mov.b32 	%f710, %r293;
$L__BB0_41:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r308, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r308;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p305, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p305 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r309, %r30, 8388607;
	or.b32  	%r3335, %r309, 1065353216;
	mov.b32 	%f713, %r3335;
	add.s32 	%r310, %r30, -1073741824;
	and.b32  	%r3336, %r310, -8388608;
	setp.eq.s32 	%p94, %r3336, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r311, %r3336, 192937984;
	add.s32 	%r312, %r3335, %r311;
	mov.b32 	%f357, %r312;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3336, %r3336, %r311;
	mov.b32 	%r3335, %f713;
	setp.ne.s32 	%p95, %r3336, 0;
	setp.ne.s32 	%p96, %r3335, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r313, %f35;
	and.b32  	%r37, %r313, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r314, %f714;
	or.b32  	%r315, %r37, %r314;
	mov.b32 	%f714, %r315;
$L__BB0_55:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r316, %f367;
	and.b32  	%r317, %r316, -2147483648;
	or.b32  	%r318, %r317, 1056964608;
	mov.b32 	%f368, %r318;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r319, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r320, %r319, 1;
	setp.eq.b32 	%p102, %r320, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r321, %r319, 2;
	setp.eq.s32 	%p103, %r321, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r322, %r319, 1;
	and.b32  	%r323, %r322, 2;
	setp.eq.s32 	%p104, %r323, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r324, %r28, %r129;
	and.b32  	%r325, %r324, 3;
	cvt.rn.f32.s32 	%f397, %r325;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p306, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p306 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r326, %r39, 8388607;
	or.b32  	%r3337, %r326, 1065353216;
	mov.b32 	%f717, %r3337;
	add.s32 	%r327, %r39, -1073741824;
	and.b32  	%r3338, %r327, -8388608;
	setp.eq.s32 	%p114, %r3338, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r328, %r3338, 192937984;
	add.s32 	%r329, %r3337, %r328;
	mov.b32 	%f409, %r329;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3338, %r3338, %r328;
	mov.b32 	%r3337, %f717;
	setp.ne.s32 	%p115, %r3338, 0;
	setp.ne.s32 	%p116, %r3337, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r330, %f54;
	and.b32  	%r46, %r330, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r331, %f718;
	or.b32  	%r332, %r46, %r331;
	mov.b32 	%f718, %r332;
$L__BB0_69:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r333, %f419;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f420, %r335;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r336, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r337, %r336, 1;
	setp.eq.b32 	%p122, %r337, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p123, %r338, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r339, %r336, 1;
	and.b32  	%r340, %r339, 2;
	setp.eq.s32 	%p124, %r340, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_182;
// %bb.72:
	@%p302 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_73;
$L__BB0_178:
	mov.b32 	%r144, %f750;
	and.b32  	%r347, %r144, 8388607;
	or.b32  	%r3367, %r347, 1065353216;
	mov.b32 	%f749, %r3367;
	add.s32 	%r348, %r144, -1073741824;
	and.b32  	%r3368, %r348, -8388608;
	setp.eq.s32 	%p135, %r3368, 0;
	@%p135 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r3368, 192937984;
	add.s32 	%r350, %r3367, %r349;
	mov.b32 	%f459, %r350;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3368, %r3368, %r349;
	mov.b32 	%r3367, %f749;
	setp.ne.s32 	%p136, %r3368, 0;
	setp.ne.s32 	%p137, %r3367, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_182;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_177;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_175;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r351, %f750;
	or.b32  	%r352, %r138, %r351;
	mov.b32 	%f750, %r352;
$L__BB0_184:                            // %__nv_fmodf.exit2461
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p303 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r367, %r51, 8388607;
	or.b32  	%r3339, %r367, 1065353216;
	mov.b32 	%f725, %r3339;
	add.s32 	%r368, %r51, -1073741824;
	and.b32  	%r3340, %r368, -8388608;
	setp.eq.s32 	%p155, %r3340, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r3340, 192937984;
	add.s32 	%r370, %r3339, %r369;
	mov.b32 	%f511, %r370;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3340, %r3340, %r369;
	mov.b32 	%r3339, %f725;
	setp.ne.s32 	%p156, %r3340, 0;
	setp.ne.s32 	%p157, %r3339, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r371, %f726;
	or.b32  	%r372, %r16, %r371;
	mov.b32 	%f726, %r372;
$L__BB0_89:                             // %__nv_fmodf.exit2492
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p304 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r381, %r59, 8388607;
	or.b32  	%r3341, %r381, 1065353216;
	mov.b32 	%f729, %r3341;
	add.s32 	%r382, %r59, -1073741824;
	and.b32  	%r3342, %r382, -8388608;
	setp.eq.s32 	%p175, %r3342, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r383, %r3342, 192937984;
	add.s32 	%r384, %r3341, %r383;
	mov.b32 	%f561, %r384;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3342, %r3342, %r383;
	mov.b32 	%r3341, %f729;
	setp.ne.s32 	%p176, %r3342, 0;
	setp.ne.s32 	%p177, %r3341, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r385, %f730;
	or.b32  	%r386, %r25, %r385;
	mov.b32 	%f730, %r386;
$L__BB0_103:                            // %__nv_fmodf.exit2523
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p305 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r401, %r69, 8388607;
	or.b32  	%r3343, %r401, 1065353216;
	mov.b32 	%f733, %r3343;
	add.s32 	%r402, %r69, -1073741824;
	and.b32  	%r3344, %r402, -8388608;
	setp.eq.s32 	%p195, %r3344, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3344, 192937984;
	add.s32 	%r404, %r3343, %r403;
	mov.b32 	%f613, %r404;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3344, %r3344, %r403;
	mov.b32 	%r3343, %f733;
	setp.ne.s32 	%p196, %r3344, 0;
	setp.ne.s32 	%p197, %r3343, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r405, %f734;
	or.b32  	%r406, %r37, %r405;
	mov.b32 	%f734, %r406;
$L__BB0_117:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r407, %f623;
	and.b32  	%r408, %r407, -2147483648;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%f624, %r409;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r410, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r411, %r410, 1;
	setp.eq.b32 	%p204, %r411, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r412, %r410, 2;
	setp.eq.s32 	%p205, %r412, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r413, %r410, 1;
	and.b32  	%r414, %r413, 2;
	setp.eq.s32 	%p206, %r414, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p306 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r415, %r77, 8388607;
	or.b32  	%r3345, %r415, 1065353216;
	mov.b32 	%f737, %r3345;
	add.s32 	%r416, %r77, -1073741824;
	and.b32  	%r3346, %r416, -8388608;
	setp.eq.s32 	%p215, %r3346, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r3346, 192937984;
	add.s32 	%r418, %r3345, %r417;
	mov.b32 	%f663, %r418;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3346, %r3346, %r417;
	mov.b32 	%r3345, %f737;
	setp.ne.s32 	%p216, %r3346, 0;
	setp.ne.s32 	%p217, %r3345, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r419, %f738;
	or.b32  	%r420, %r46, %r419;
	mov.b32 	%f738, %r420;
$L__BB0_131:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r421, %f673;
	and.b32  	%r422, %r421, -2147483648;
	or.b32  	%r423, %r422, 1056964608;
	mov.b32 	%f674, %r423;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r424, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r425, %r424, 1;
	setp.eq.b32 	%p224, %r425, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r426, %r424, 2;
	setp.eq.s32 	%p225, %r426, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r427, %r424, 1;
	and.b32  	%r428, %r427, 2;
	setp.eq.s32 	%p226, %r428, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_186;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r436, %r1, 4;
	and.b32  	%r437, %r436, 240;
	or.b32  	%r438, %r437, %r2;
	mul.wide.u32 	%rd68, %r438, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r439, [%rd69];
	shl.b32 	%r440, %r439, 16;
	cvt.s32.s16 	%r86, %r439;
	shr.s32 	%r87, %r439, 16;
	or.b32  	%r441, %r440, 65535;
	setp.lt.u32 	%p230, %r441, 1114111;
	setp.lt.u32 	%p231, %r439, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_135;
$L__BB0_185:                            // %L1255
	mul.lo.s32 	%r445, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r445;
$L__BB0_186:                            // %pass576
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r262, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r263, %r262, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r359, %f469;
	or.b32  	%r264, %r263, 1056964608;
	mov.b32 	%r278, %f261;
	mov.b32 	%r300, %f313;
	and.b32  	%r360, %r359, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r264;
	and.b32  	%r279, %r278, -2147483648;
	and.b32  	%r301, %r300, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%r373, %f521;
	mov.b32 	%r393, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r280, %r279, 1056964608;
	or.b32  	%r302, %r301, 1056964608;
	mov.b32 	%f470, %r361;
	and.b32  	%r374, %r373, -2147483648;
	and.b32  	%r394, %r393, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r280;
	mov.b32 	%f314, %r302;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r375, %r374, 1056964608;
	or.b32  	%r395, %r394, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r375;
	mov.b32 	%f572, %r395;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r265, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r266, %r265, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r362, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r266, 1;
	cvt.rzi.s32.f32 	%r281, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r303, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r363, %r362, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r267, %r265, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r282, %r281, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r304, %r303, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r363, 1;
	cvt.rzi.s32.f32 	%r376, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r396, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r267, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r268, %r265, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r282, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r304, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r364, %r362, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r377, %r376, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r397, %r396, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r269, %r268, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r283, %r281, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r305, %r303, 2;
	setp.eq.s32 	%p145, %r364, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r365, %r362, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r377, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r397, 1;
	setp.eq.s32 	%p44, %r269, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r283, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r284, %r281, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r305, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r306, %r303, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r366, %r365, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r378, %r376, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r398, %r396, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r285, %r284, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r307, %r306, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r366, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r378, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r379, %r376, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r398, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r399, %r396, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r285, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r307, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r380, %r379, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r400, %r399, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r258, %f238;
	mov.b32 	%r261, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r380, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r400, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r257, %r261, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r355, %f500;
	mov.b32 	%r358, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r259, %r261, %r258;
	// end inline asm
	mov.b32 	%r296, %f344;
	mov.b32 	%r295, %f17;
	mov.b32 	%r299, %f341;
	mov.b32 	%r298, %f16;
	mov.b32 	%r342, %f75;
	mov.b32 	%r343, %f77;
	mov.b32 	%r345, %f76;
	mov.b32 	%r346, %f78;
	xor.b32  	%r354, %r358, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r294, %r296, %r295;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r297, %r299, %r298;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r343, %r342;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r344, %r346, %r345;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r353, %r355, %r354;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r358, %r355;
	// end inline asm
	mov.b32 	%r389, %f602;
	mov.b32 	%r388, %f95;
	mov.b32 	%r392, %f599;
	mov.b32 	%r391, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	mov.b32 	%r430, %f147;
	mov.b32 	%r431, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r431, %r430;
	// end inline asm
	mov.b32 	%r433, %f148;
	mov.b32 	%r434, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	shl.b32 	%r447, %r1, 6;
	and.b32  	%r448, %r447, 192;
	shr.u32 	%r449, %r1, 3;
	and.b32  	%r450, %r449, 2;
	and.b32  	%r451, %r129, 1;
	or.b32  	%r452, %r450, %r451;
	shl.b32 	%r453, %r452, 4;
	bfe.u32 	%r454, %r1, 3, 1;
	shl.b32 	%r455, %r2, 1;
	and.b32  	%r456, %r455, 14;
	or.b32  	%r457, %r454, %r456;
	or.b32  	%r458, %r453, %r5;
	or.b32  	%r459, %r458, %r448;
	or.b32  	%r460, %r459, %r457;
	mul.wide.u32 	%rd75, %r460, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r461, %r226, 9;
	shl.b32 	%r462, %r230, 7;
	add.s32 	%r156, %r462, %r461;
	shl.b32 	%r463, %r4, 7;
	shl.b32 	%r464, %r1, 2;
	or.b32  	%r157, %r464, %r463;
	and.b32  	%r158, %r1, 16;
	shr.u32 	%r465, %r1, 4;
	and.b32  	%r466, %r141, 30;
	or.b32  	%r467, %r466, %r465;
	mul.lo.s32 	%r468, %r467, 257;
	shr.u32 	%r469, %r2, 3;
	and.b32  	%r470, %r3, 224;
	mad.lo.s32 	%r471, %r469, 257, %r470;
	or.b32  	%r472, %r469, 2;
	mad.lo.s32 	%r473, %r472, 257, %r470;
	or.b32  	%r474, %r469, 4;
	mad.lo.s32 	%r475, %r474, 257, %r470;
	or.b32  	%r476, %r469, 6;
	mad.lo.s32 	%r477, %r476, 257, %r470;
	or.b32  	%r478, %r469, 8;
	mad.lo.s32 	%r479, %r478, 257, %r470;
	or.b32  	%r480, %r469, 10;
	mad.lo.s32 	%r481, %r480, 257, %r470;
	or.b32  	%r482, %r469, 12;
	mad.lo.s32 	%r483, %r482, 257, %r470;
	or.b32  	%r484, %r469, 14;
	mad.lo.s32 	%r485, %r484, 257, %r470;
	or.b32  	%r486, %r469, 16;
	mad.lo.s32 	%r487, %r486, 257, %r470;
	or.b32  	%r488, %r469, 18;
	mad.lo.s32 	%r489, %r488, 257, %r470;
	or.b32  	%r490, %r469, 20;
	mad.lo.s32 	%r491, %r490, 257, %r470;
	or.b32  	%r492, %r469, 22;
	mad.lo.s32 	%r493, %r492, 257, %r470;
	or.b32  	%r494, %r469, 24;
	mad.lo.s32 	%r495, %r494, 257, %r470;
	or.b32  	%r496, %r469, 26;
	mad.lo.s32 	%r497, %r496, 257, %r470;
	or.b32  	%r498, %r469, 28;
	mad.lo.s32 	%r499, %r498, 257, %r470;
	or.b32  	%r500, %r469, 30;
	mad.lo.s32 	%r501, %r500, 257, %r470;
	mul.lo.s32 	%r502, %r128, 2184;
	mad.lo.s32 	%r503, %r452, 546, %r502;
	mad.lo.s32 	%r504, %r457, 33, %r503;
	setp.lt.u32 	%p233, %r1, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	bfe.s32 	%r505, %r2, 2, 1;
	and.b32  	%r506, %r2, 4;
	setp.eq.s32 	%p236, %r506, 0;
	and.b32  	%r507, %r505, 516;
	and.b32  	%r508, %r464, 12;
	bfe.s32 	%r509, %r2, 1, 1;
	and.b32  	%r510, %r2, 2;
	setp.eq.s32 	%p237, %r510, 0;
	and.b32  	%r511, %r509, 1032;
	and.b32  	%r512, %r2, 1;
	neg.s32 	%r513, %r512;
	setp.eq.b32 	%p238, %r512, 1;
	and.b32  	%r514, %r513, 2064;
	bfe.s32 	%r515, %r1, 3, 1;
	and.b32  	%r516, %r1, 8;
	setp.eq.s32 	%p239, %r516, 0;
	and.b32  	%r517, %r515, 4144;
	mul.lo.s32 	%r518, %r469, 258;
	or.b32  	%r519, %r452, %r508;
	add.s32 	%r520, %r519, %r518;
	add.s32 	%r521, %r520, %r507;
	add.s32 	%r522, %r521, %r511;
	add.s32 	%r523, %r522, %r514;
	add.s32 	%r524, %r523, %r517;
	mul.wide.u32 	%rd77, %r524, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 0, 4144, %p239;
	selp.b64 	%rd80, 2064, 0, %p238;
	selp.b64 	%rd81, 0, 1032, %p237;
	selp.b64 	%rd82, 0, 516, %p236;
	cvt.u64.u32 	%rd83, %r518;
	cvt.u64.u32 	%rd84, %r519;
	add.s64 	%rd85, %rd84, %rd83;
	add.s64 	%rd86, %rd85, %rd82;
	add.s64 	%rd87, %rd86, %rd81;
	add.s64 	%rd88, %rd87, %rd80;
	add.s64 	%rd89, %rd88, %rd79;
	shl.b64 	%rd90, %rd89, 2;
	add.s64 	%rd8, %rd78, %rd90;
	shl.b32 	%r525, %r228, 20;
	shl.b32 	%r526, %r232, 9;
	add.s32 	%r527, %r526, %r525;
	and.b32  	%r528, %r1, 15;
	or.b32  	%r529, %r5, %r528;
	or.b32  	%r530, %r3, %r158;
	or.b32  	%r159, %r530, %r529;
	cvt.s64.s32 	%rd9, %r527;
	add.s32 	%r531, %r2, %r468;
	mul.wide.u32 	%rd91, %r531, 4;
	add.s64 	%rd10, %rd78, %rd91;
	cvt.u64.u32 	%rd92, %r2;
	cvt.u64.u32 	%rd11, %r468;
	add.s64 	%rd93, %rd11, %rd92;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd12, %rd78, %rd94;
	add.s32 	%r532, %r471, %r1;
	mul.wide.u32 	%rd95, %r532, 4;
	add.s64 	%rd13, %rd78, %rd95;
	add.s32 	%r533, %r473, %r1;
	mul.wide.u32 	%rd96, %r533, 4;
	add.s64 	%rd14, %rd78, %rd96;
	add.s32 	%r534, %r475, %r1;
	mul.wide.u32 	%rd97, %r534, 4;
	add.s64 	%rd15, %rd78, %rd97;
	add.s32 	%r535, %r477, %r1;
	mul.wide.u32 	%rd98, %r535, 4;
	add.s64 	%rd16, %rd78, %rd98;
	add.s32 	%r536, %r479, %r1;
	mul.wide.u32 	%rd99, %r536, 4;
	add.s64 	%rd17, %rd78, %rd99;
	add.s32 	%r537, %r481, %r1;
	mul.wide.u32 	%rd100, %r537, 4;
	add.s64 	%rd18, %rd78, %rd100;
	add.s32 	%r538, %r483, %r1;
	mul.wide.u32 	%rd101, %r538, 4;
	add.s64 	%rd19, %rd78, %rd101;
	add.s32 	%r539, %r485, %r1;
	mul.wide.u32 	%rd102, %r539, 4;
	add.s64 	%rd20, %rd78, %rd102;
	add.s32 	%r540, %r487, %r1;
	mul.wide.u32 	%rd103, %r540, 4;
	add.s64 	%rd21, %rd78, %rd103;
	add.s32 	%r541, %r489, %r1;
	mul.wide.u32 	%rd104, %r541, 4;
	add.s64 	%rd22, %rd78, %rd104;
	add.s32 	%r542, %r491, %r1;
	mul.wide.u32 	%rd105, %r542, 4;
	add.s64 	%rd23, %rd78, %rd105;
	add.s32 	%r543, %r493, %r1;
	mul.wide.u32 	%rd106, %r543, 4;
	add.s64 	%rd24, %rd78, %rd106;
	add.s32 	%r544, %r495, %r1;
	mul.wide.u32 	%rd107, %r544, 4;
	add.s64 	%rd25, %rd78, %rd107;
	add.s32 	%r545, %r497, %r1;
	mul.wide.u32 	%rd108, %r545, 4;
	add.s64 	%rd26, %rd78, %rd108;
	add.s32 	%r546, %r499, %r1;
	mul.wide.u32 	%rd109, %r546, 4;
	add.s64 	%rd27, %rd78, %rd109;
	add.s32 	%r547, %r501, %r1;
	mul.wide.u32 	%rd110, %r547, 4;
	add.s64 	%rd28, %rd78, %rd110;
	add.s32 	%r548, %r504, %r469;
	mul.wide.u32 	%rd111, %r548, 4;
	add.s64 	%rd29, %rd78, %rd111;
	add.s32 	%r549, %r504, %r472;
	mul.wide.u32 	%rd112, %r549, 4;
	add.s64 	%rd30, %rd78, %rd112;
	add.s32 	%r550, %r504, %r474;
	mul.wide.u32 	%rd113, %r550, 4;
	add.s64 	%rd31, %rd78, %rd113;
	add.s32 	%r551, %r504, %r476;
	mul.wide.u32 	%rd114, %r551, 4;
	add.s64 	%rd32, %rd78, %rd114;
	add.s32 	%r552, %r504, %r478;
	mul.wide.u32 	%rd115, %r552, 4;
	add.s64 	%rd33, %rd78, %rd115;
	add.s32 	%r553, %r504, %r480;
	mul.wide.u32 	%rd116, %r553, 4;
	add.s64 	%rd34, %rd78, %rd116;
	add.s32 	%r554, %r504, %r482;
	mul.wide.u32 	%rd117, %r554, 4;
	add.s64 	%rd35, %rd78, %rd117;
	add.s32 	%r555, %r504, %r484;
	mul.wide.u32 	%rd118, %r555, 4;
	add.s64 	%rd36, %rd78, %rd118;
	add.s32 	%r556, %r504, %r486;
	mul.wide.u32 	%rd119, %r556, 4;
	add.s64 	%rd37, %rd78, %rd119;
	add.s32 	%r557, %r504, %r488;
	mul.wide.u32 	%rd120, %r557, 4;
	add.s64 	%rd38, %rd78, %rd120;
	add.s32 	%r558, %r504, %r490;
	mul.wide.u32 	%rd121, %r558, 4;
	add.s64 	%rd39, %rd78, %rd121;
	add.s32 	%r559, %r504, %r492;
	mul.wide.u32 	%rd122, %r559, 4;
	add.s64 	%rd40, %rd78, %rd122;
	add.s32 	%r560, %r504, %r494;
	mul.wide.u32 	%rd123, %r560, 4;
	add.s64 	%rd41, %rd78, %rd123;
	add.s32 	%r561, %r504, %r496;
	mul.wide.u32 	%rd124, %r561, 4;
	add.s64 	%rd42, %rd78, %rd124;
	add.s32 	%r562, %r504, %r498;
	mul.wide.u32 	%rd125, %r562, 4;
	add.s64 	%rd43, %rd78, %rd125;
	add.s32 	%r563, %r504, %r500;
	mul.wide.u32 	%rd126, %r563, 4;
	add.s64 	%rd44, %rd78, %rd126;
	add.s32 	%r564, %r129, -1;
	setp.lt.u32 	%p240, %r564, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r565, %r1, 24;
	setp.eq.s32 	%p243, %r565, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r160, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r566, %r524, 32;
	mul.wide.u32 	%rd127, %r566, 4;
	add.s64 	%rd45, %rd78, %rd127;
	add.s32 	%r567, %r524, 48;
	mul.wide.u32 	%rd128, %r567, 4;
	add.s64 	%rd46, %rd78, %rd128;
	add.s32 	%r568, %r524, 64;
	mul.wide.u32 	%rd129, %r568, 4;
	add.s64 	%rd47, %rd78, %rd129;
	add.s32 	%r569, %r524, 80;
	mul.wide.u32 	%rd130, %r569, 4;
	add.s64 	%rd48, %rd78, %rd130;
	add.s32 	%r570, %r524, 96;
	mul.wide.u32 	%rd131, %r570, 4;
	add.s64 	%rd49, %rd78, %rd131;
	add.s32 	%r571, %r524, 112;
	mul.wide.u32 	%rd132, %r571, 4;
	add.s64 	%rd50, %rd78, %rd132;
	add.s32 	%r572, %r524, 128;
	mul.wide.u32 	%rd133, %r572, 4;
	add.s64 	%rd51, %rd78, %rd133;
	add.s32 	%r573, %r524, 144;
	mul.wide.u32 	%rd134, %r573, 4;
	add.s64 	%rd52, %rd78, %rd134;
	add.s32 	%r574, %r524, 160;
	mul.wide.u32 	%rd135, %r574, 4;
	add.s64 	%rd53, %rd78, %rd135;
	add.s32 	%r575, %r524, 176;
	mul.wide.u32 	%rd136, %r575, 4;
	add.s64 	%rd54, %rd78, %rd136;
	add.s32 	%r576, %r524, 192;
	mul.wide.u32 	%rd137, %r576, 4;
	add.s64 	%rd55, %rd78, %rd137;
	add.s32 	%r577, %r524, 208;
	mul.wide.u32 	%rd138, %r577, 4;
	add.s64 	%rd56, %rd78, %rd138;
	add.s32 	%r578, %r524, 224;
	mul.wide.u32 	%rd139, %r578, 4;
	add.s64 	%rd57, %rd78, %rd139;
	add.s32 	%r579, %r524, 240;
	mul.wide.u32 	%rd140, %r579, 4;
	add.s64 	%rd58, %rd78, %rd140;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3359, %r89;
	mov.u32 	%r3360, %r89;
	mov.u32 	%r3361, %r89;
	bra.uni 	$L__BB0_187;
$L__BB0_158:                            // %L29841
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p301, %r89, 16320;
	mov.u32 	%r89, %r127;
	@%p301 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_159;
$L__BB0_187:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_205 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r580, %r89, %r226;
	setp.lt.s32 	%p245, %r580, %r227;
	@%p245 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_159;
$L__BB0_188:                            // %pass733
                                        //   in Loop: Header=BB0_187 Depth=1
	cvt.u32.u64 	%r773, %rd11;
	or.b32  	%r774, %r89, %r2;
	shl.b32 	%r775, %r774, 9;
	and.b32  	%r776, %r775, 8363520;
	or.b32  	%r777, %r157, %r776;
	add.s32 	%r778, %r156, %r777;
	shr.s32 	%r779, %r778, 31;
	shr.u32 	%r780, %r779, 9;
	add.s32 	%r781, %r778, %r780;
	shr.s32 	%r782, %r781, 23;
	setp.lt.s32 	%p247, %r778, 0;
	and.b32  	%r783, %r781, -8388608;
	setp.ne.s32 	%p248, %r783, %r778;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r784, 1, 0, %p249;
	sub.s32 	%r785, %r784, %r782;
	shl.b32 	%r786, %r785, 23;
	add.s32 	%r787, %r786, %r778;
	mul.wide.s32 	%rd141, %r787, 4;
	add.s64 	%rd142, %rd3, %rd141;
	ld.global.v4.u32 	{%r788, %r789, %r790, %r791}, [%rd142];
	or.b32  	%r792, %r774, 16;
	shl.b32 	%r793, %r792, 9;
	and.b32  	%r794, %r793, 8371712;
	or.b32  	%r795, %r157, %r794;
	add.s32 	%r796, %r156, %r795;
	shr.s32 	%r797, %r796, 31;
	shr.u32 	%r798, %r797, 9;
	add.s32 	%r799, %r796, %r798;
	shr.s32 	%r800, %r799, 23;
	setp.lt.s32 	%p250, %r796, 0;
	and.b32  	%r801, %r799, -8388608;
	setp.ne.s32 	%p251, %r801, %r796;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r802, 1, 0, %p252;
	sub.s32 	%r803, %r802, %r800;
	shl.b32 	%r804, %r803, 23;
	add.s32 	%r805, %r804, %r796;
	mul.wide.s32 	%rd143, %r805, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r806, %r807, %r808, %r809}, [%rd144];
	and.b32  	%r810, %r89, 16320;
	or.b32  	%r811, %r2, %r810;
	shl.b32 	%r812, %r811, 9;
	or.b32  	%r813, %r812, %r157;
	or.b32  	%r814, %r813, 16384;
	add.s32 	%r815, %r156, %r814;
	shr.s32 	%r816, %r815, 31;
	shr.u32 	%r817, %r816, 9;
	add.s32 	%r818, %r815, %r817;
	shr.s32 	%r819, %r818, 23;
	setp.lt.s32 	%p253, %r815, 0;
	and.b32  	%r820, %r818, -8388608;
	setp.ne.s32 	%p254, %r820, %r815;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r821, 1, 0, %p255;
	sub.s32 	%r822, %r821, %r819;
	shl.b32 	%r823, %r822, 23;
	add.s32 	%r824, %r823, %r815;
	mul.wide.s32 	%rd145, %r824, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r825, %r826, %r827, %r828}, [%rd146];
	or.b32  	%r829, %r813, 24576;
	add.s32 	%r830, %r156, %r829;
	shr.s32 	%r831, %r830, 31;
	shr.u32 	%r832, %r831, 9;
	add.s32 	%r833, %r830, %r832;
	shr.s32 	%r834, %r833, 23;
	setp.lt.s32 	%p256, %r830, 0;
	and.b32  	%r835, %r833, -8388608;
	setp.ne.s32 	%p257, %r835, %r830;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r836, 1, 0, %p258;
	sub.s32 	%r837, %r836, %r834;
	shl.b32 	%r838, %r837, 23;
	add.s32 	%r839, %r838, %r830;
	mul.wide.s32 	%rd147, %r839, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r840, %r841, %r842, %r843}, [%rd148];
	selp.b32 	%r844, %r790, %r788, %p246;
	shfl.sync.bfly.b32	%r845, %r844, 16, 31, -1;
	selp.b32 	%r583, %r788, %r845, %p246;
	selp.b32 	%r588, %r845, %r790, %p246;
	selp.b32 	%r846, %r791, %r789, %p246;
	shfl.sync.bfly.b32	%r847, %r846, 16, 31, -1;
	selp.b32 	%r591, %r789, %r847, %p246;
	selp.b32 	%r596, %r847, %r791, %p246;
	selp.b32 	%r848, %r808, %r806, %p246;
	shfl.sync.bfly.b32	%r849, %r848, 16, 31, -1;
	selp.b32 	%r599, %r806, %r849, %p246;
	selp.b32 	%r604, %r849, %r808, %p246;
	selp.b32 	%r850, %r809, %r807, %p246;
	shfl.sync.bfly.b32	%r851, %r850, 16, 31, -1;
	selp.b32 	%r607, %r807, %r851, %p246;
	selp.b32 	%r612, %r851, %r809, %p246;
	selp.b32 	%r852, %r827, %r825, %p246;
	shfl.sync.bfly.b32	%r853, %r852, 16, 31, -1;
	selp.b32 	%r615, %r825, %r853, %p246;
	selp.b32 	%r620, %r853, %r827, %p246;
	selp.b32 	%r854, %r828, %r826, %p246;
	shfl.sync.bfly.b32	%r855, %r854, 16, 31, -1;
	selp.b32 	%r623, %r826, %r855, %p246;
	selp.b32 	%r628, %r855, %r828, %p246;
	selp.b32 	%r856, %r842, %r840, %p246;
	shfl.sync.bfly.b32	%r857, %r856, 16, 31, -1;
	selp.b32 	%r631, %r840, %r857, %p246;
	selp.b32 	%r636, %r857, %r842, %p246;
	selp.b32 	%r858, %r843, %r841, %p246;
	shfl.sync.bfly.b32	%r859, %r858, 16, 31, -1;
	selp.b32 	%r639, %r841, %r859, %p246;
	selp.b32 	%r644, %r859, %r843, %p246;
	shl.b32 	%r584, %r588, 4;
	mov.u32 	%r582, 252645135;
	// begin inline asm
	lop3.b32 %r646, %r582, %r583, %r584, 202;
	// end inline asm
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r662, %r582, %r587, %r588, 202;
	// end inline asm
	shl.b32 	%r592, %r596, 4;
	// begin inline asm
	lop3.b32 %r654, %r582, %r591, %r592, 202;
	// end inline asm
	shr.u32 	%r595, %r591, 4;
	// begin inline asm
	lop3.b32 %r670, %r582, %r595, %r596, 202;
	// end inline asm
	shl.b32 	%r600, %r604, 4;
	// begin inline asm
	lop3.b32 %r678, %r582, %r599, %r600, 202;
	// end inline asm
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r694, %r582, %r603, %r604, 202;
	// end inline asm
	shl.b32 	%r608, %r612, 4;
	// begin inline asm
	lop3.b32 %r686, %r582, %r607, %r608, 202;
	// end inline asm
	shr.u32 	%r611, %r607, 4;
	// begin inline asm
	lop3.b32 %r702, %r582, %r611, %r612, 202;
	// end inline asm
	shl.b32 	%r616, %r620, 4;
	// begin inline asm
	lop3.b32 %r647, %r582, %r615, %r616, 202;
	// end inline asm
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r663, %r582, %r619, %r620, 202;
	// end inline asm
	shl.b32 	%r624, %r628, 4;
	// begin inline asm
	lop3.b32 %r655, %r582, %r623, %r624, 202;
	// end inline asm
	shr.u32 	%r627, %r623, 4;
	// begin inline asm
	lop3.b32 %r671, %r582, %r627, %r628, 202;
	// end inline asm
	shl.b32 	%r632, %r636, 4;
	// begin inline asm
	lop3.b32 %r679, %r582, %r631, %r632, 202;
	// end inline asm
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r695, %r582, %r635, %r636, 202;
	// end inline asm
	shl.b32 	%r640, %r644, 4;
	// begin inline asm
	lop3.b32 %r687, %r582, %r639, %r640, 202;
	// end inline asm
	shr.u32 	%r643, %r639, 4;
	// begin inline asm
	lop3.b32 %r703, %r582, %r643, %r644, 202;
	// end inline asm
	mov.u32 	%r648, 25152;
	// begin inline asm
	prmt.b32 %r710, %r646, %r647, %r648;
	// end inline asm
	mov.u32 	%r652, 29521;
	// begin inline asm
	prmt.b32 %r742, %r646, %r647, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r654, %r655, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r654, %r655, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r662, %r663, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r743, %r662, %r663, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r670, %r671, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r751, %r670, %r671, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r678, %r679, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r758, %r678, %r679, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r734, %r686, %r687, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r766, %r686, %r687, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r727, %r694, %r695, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r759, %r694, %r695, %r652;
	// end inline asm
	// begin inline asm
	prmt.b32 %r735, %r702, %r703, %r648;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r702, %r703, %r652;
	// end inline asm
	mov.u32 	%r712, 21520;
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r712;
	// end inline asm
	mov.u32 	%r716, 30258;
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r726, %r727, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r729, %r726, %r727, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r733, %r734, %r735, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r737, %r734, %r735, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r741, %r742, %r743, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r745, %r742, %r743, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r750, %r751, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r753, %r750, %r751, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r758, %r759, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r758, %r759, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r765, %r766, %r767, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r766, %r767, %r716;
	// end inline asm
	st.shared.u32 	[%rd10], %r709;
	st.shared.u32 	[%rd12+512], %r717;
	st.shared.u32 	[%rd12+256], %r713;
	st.shared.u32 	[%rd12+768], %r721;
	and.b32  	%r860, %r792, 31;
	add.s32 	%r861, %r860, %r773;
	mul.wide.u32 	%rd149, %r861, 4;
	add.s64 	%rd151, %rd78, %rd149;
	st.shared.u32 	[%rd151], %r725;
	cvt.u64.u32 	%rd152, %r860;
	add.s64 	%rd153, %rd11, %rd152;
	shl.b64 	%rd154, %rd153, 2;
	add.s64 	%rd155, %rd78, %rd154;
	st.shared.u32 	[%rd155+512], %r733;
	st.shared.u32 	[%rd155+256], %r729;
	st.shared.u32 	[%rd155+768], %r737;
	st.shared.u32 	[%rd12+128], %r741;
	st.shared.u32 	[%rd12+640], %r749;
	st.shared.u32 	[%rd12+384], %r745;
	st.shared.u32 	[%rd12+896], %r753;
	st.shared.u32 	[%rd155+128], %r757;
	st.shared.u32 	[%rd155+640], %r765;
	st.shared.u32 	[%rd155+384], %r761;
	st.shared.u32 	[%rd155+896], %r769;
	bar.sync 	0;
	ld.shared.u32 	%r161, [%rd13];
	ld.shared.u32 	%r162, [%rd14];
	ld.shared.u32 	%r163, [%rd15];
	ld.shared.u32 	%r164, [%rd16];
	ld.shared.u32 	%r165, [%rd17];
	ld.shared.u32 	%r166, [%rd18];
	ld.shared.u32 	%r167, [%rd19];
	ld.shared.u32 	%r168, [%rd20];
	ld.shared.u32 	%r169, [%rd21];
	ld.shared.u32 	%r170, [%rd22];
	ld.shared.u32 	%r171, [%rd23];
	ld.shared.u32 	%r172, [%rd24];
	ld.shared.u32 	%r173, [%rd25];
	ld.shared.u32 	%r174, [%rd26];
	ld.shared.u32 	%r175, [%rd27];
	ld.shared.u32 	%r176, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r177, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r178, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r177, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.189:                             // %pass3083
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r862, %r177, %r1;
	mul.wide.s32 	%rd156, %r862, 4;
	add.s64 	%rd158, %rd78, %rd156;
	st.shared.u32 	[%rd158], %r161;
	setp.eq.s32 	%p260, %r178, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.190:                             // %pass3151
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r863, %r178, %r1;
	mul.wide.s32 	%rd159, %r863, 4;
	add.s64 	%rd161, %rd78, %rd159;
	st.shared.u32 	[%rd161], %r162;
	setp.eq.s32 	%p261, %r179, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.191:                             // %pass3219
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r864, %r179, %r1;
	mul.wide.s32 	%rd162, %r864, 4;
	add.s64 	%rd164, %rd78, %rd162;
	st.shared.u32 	[%rd164], %r163;
	setp.eq.s32 	%p262, %r180, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.192:                             // %pass3287
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r865, %r180, %r1;
	mul.wide.s32 	%rd165, %r865, 4;
	add.s64 	%rd167, %rd78, %rd165;
	st.shared.u32 	[%rd167], %r164;
	setp.eq.s32 	%p263, %r181, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.193:                             // %pass3355
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r866, %r181, %r1;
	mul.wide.s32 	%rd168, %r866, 4;
	add.s64 	%rd170, %rd78, %rd168;
	st.shared.u32 	[%rd170], %r165;
	setp.eq.s32 	%p264, %r182, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.194:                             // %pass3423
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r867, %r182, %r1;
	mul.wide.s32 	%rd171, %r867, 4;
	add.s64 	%rd173, %rd78, %rd171;
	st.shared.u32 	[%rd173], %r166;
	setp.eq.s32 	%p265, %r183, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.195:                             // %pass3491
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r868, %r183, %r1;
	mul.wide.s32 	%rd174, %r868, 4;
	add.s64 	%rd176, %rd78, %rd174;
	st.shared.u32 	[%rd176], %r167;
	setp.eq.s32 	%p266, %r184, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.196:                             // %pass3559
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r869, %r184, %r1;
	mul.wide.s32 	%rd177, %r869, 4;
	add.s64 	%rd179, %rd78, %rd177;
	st.shared.u32 	[%rd179], %r168;
	setp.eq.s32 	%p267, %r185, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.197:                             // %pass3627
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r870, %r185, %r1;
	mul.wide.s32 	%rd180, %r870, 4;
	add.s64 	%rd182, %rd78, %rd180;
	st.shared.u32 	[%rd182], %r169;
	setp.eq.s32 	%p268, %r186, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.198:                             // %pass3695
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r871, %r186, %r1;
	mul.wide.s32 	%rd183, %r871, 4;
	add.s64 	%rd185, %rd78, %rd183;
	st.shared.u32 	[%rd185], %r170;
	setp.eq.s32 	%p269, %r187, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.199:                             // %pass3763
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r872, %r187, %r1;
	mul.wide.s32 	%rd186, %r872, 4;
	add.s64 	%rd188, %rd78, %rd186;
	st.shared.u32 	[%rd188], %r171;
	setp.eq.s32 	%p270, %r188, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.200:                             // %pass3831
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r873, %r188, %r1;
	mul.wide.s32 	%rd189, %r873, 4;
	add.s64 	%rd191, %rd78, %rd189;
	st.shared.u32 	[%rd191], %r172;
	setp.eq.s32 	%p271, %r189, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.201:                             // %pass3899
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r874, %r189, %r1;
	mul.wide.s32 	%rd192, %r874, 4;
	add.s64 	%rd194, %rd78, %rd192;
	st.shared.u32 	[%rd194], %r173;
	setp.eq.s32 	%p272, %r190, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.202:                             // %pass3967
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r875, %r190, %r1;
	mul.wide.s32 	%rd195, %r875, 4;
	add.s64 	%rd197, %rd78, %rd195;
	st.shared.u32 	[%rd197], %r174;
	setp.eq.s32 	%p273, %r191, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.203:                             // %pass4035
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r876, %r191, %r1;
	mul.wide.s32 	%rd198, %r876, 4;
	add.s64 	%rd200, %rd78, %rd198;
	st.shared.u32 	[%rd200], %r175;
	setp.eq.s32 	%p274, %r192, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.204:                             // %pass4103
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r878, %r192, %r1;
	mul.wide.s32 	%rd201, %r878, 4;
	add.s64 	%rd203, %rd78, %rd201;
	st.shared.u32 	[%rd203], %r176;
	bar.sync 	0;
	ld.shared.u32 	%r193, [%rd29];
	ld.shared.u32 	%r194, [%rd30];
	ld.shared.u32 	%r195, [%rd31];
	ld.shared.u32 	%r196, [%rd32];
	ld.shared.u32 	%r197, [%rd33];
	ld.shared.u32 	%r198, [%rd34];
	ld.shared.u32 	%r199, [%rd35];
	ld.shared.u32 	%r200, [%rd36];
	ld.shared.u32 	%r201, [%rd37];
	ld.shared.u32 	%r202, [%rd38];
	ld.shared.u32 	%r203, [%rd39];
	ld.shared.u32 	%r204, [%rd40];
	ld.shared.u32 	%r205, [%rd41];
	ld.shared.u32 	%r206, [%rd42];
	ld.shared.u32 	%r207, [%rd43];
	ld.shared.u32 	%r208, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3351, 16;
	bra.uni 	$L__BB0_205;
$L__BB0_152:                            // %L21085
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	add.s32 	%r3351, %r3351, -8;
	setp.ne.s32 	%p287, %r3351, -16;
	@%p287 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_153;
$L__BB0_205:                            // %L12366
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3351, 16;
	selp.b32 	%r1271, %r193, 0, %p275;
	setp.eq.s32 	%p276, %r3351, 8;
	selp.b32 	%r1272, %r197, %r1271, %p276;
	setp.eq.s32 	%p277, %r3351, 0;
	selp.b32 	%r1273, %r201, %r1272, %p277;
	setp.eq.s32 	%p278, %r3351, -8;
	selp.b32 	%r1274, %r205, %r1273, %p278;
	selp.b32 	%r1275, %r194, 0, %p275;
	selp.b32 	%r1276, %r198, %r1275, %p276;
	selp.b32 	%r1277, %r202, %r1276, %p277;
	selp.b32 	%r1278, %r206, %r1277, %p278;
	selp.b32 	%r1279, %r195, 0, %p275;
	selp.b32 	%r1280, %r199, %r1279, %p276;
	selp.b32 	%r1281, %r203, %r1280, %p277;
	selp.b32 	%r1282, %r207, %r1281, %p278;
	selp.b32 	%r1283, %r196, 0, %p275;
	selp.b32 	%r1284, %r200, %r1283, %p276;
	selp.b32 	%r1285, %r204, %r1284, %p277;
	selp.b32 	%r1286, %r208, %r1285, %p278;
	// begin inline asm
	mov.b32 %r884, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r883, %r1274, -2004318072;
	mov.u32 	%r1020, 983055;
	// begin inline asm
	lop3.b32 %r881, %r1020, %r883, %r884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r886, %r884, %r885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r889, %r881, %r886;
	// end inline asm
	mov.u32 	%r1031, 15728880;
	// begin inline asm
	lop3.b32 %r892, %r1031, %r883, %r895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r897, %r895, %r896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r900, %r892, %r897;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r929, %r1278, -2004318072;
	// begin inline asm
	lop3.b32 %r927, %r1020, %r929, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r938, %r1031, %r929, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r975, %r1282, -2004318072;
	// begin inline asm
	lop3.b32 %r973, %r1020, %r975, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r978, %r976, %r977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r981, %r973, %r978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r984, %r1031, %r975, %r987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r989, %r987, %r988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r992, %r984, %r989;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1021, %r1286, -2004318072;
	// begin inline asm
	lop3.b32 %r1019, %r1020, %r1021, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1022, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1030, %r1031, %r1021, %r1033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1035, %r1033, %r1034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1038, %r1030, %r1035;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r889;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r900;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r935;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r946;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r981;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r992;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1027;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1081, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1038;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1084, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1142, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1088}, {%r256, %r259}, {%r1063}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1094, %r1095}, {%r256, %r259}, {%r1066}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1101, %r1102}, {%r256, %r259}, {%r1069}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1108, %r1109}, {%r256, %r259}, {%r1072}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1115, %r1116}, {%r256, %r259}, {%r1075}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1122, %r1123}, {%r256, %r259}, {%r1078}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1129, %r1130}, {%r256, %r259}, {%r1081}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1136, %r1137}, {%r256, %r259}, {%r1084}, {%r1142, %r1142};
	// end inline asm
	@%p1 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;
$L__BB0_207:                            // %pass5517
                                        //   in Loop: Header=BB0_205 Depth=2
	// begin inline asm
	neg.f16x2 %r1143, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r294, %r1087, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r294, %r1094, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r294, %r1101, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1170, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r1170, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r294, %r1108, %r1172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1179, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r1179, %r1116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r294, %r1115, %r1181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1188, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r1188, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r294, %r1122, %r1190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r294, %r1129, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r294, %r1136, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r297, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r294, %r1088, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r297, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r294, %r1095, %r1222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1229, %r297, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r294, %r1102, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r297, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r294, %r1109, %r1236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r297, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r294, %r1116, %r1243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1250, %r297, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r294, %r1123, %r1250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r297, %r1129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r294, %r1130, %r1257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1264, %r297, %r1136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1267, %r294, %r1137, %r1264;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1287, %r1288}, {%r341, %r344}, {%r1148, %r1218}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1296, %r1297}, {%r341, %r344}, {%r1157, %r1225}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1305, %r1306}, {%r341, %r344}, {%r1166, %r1232}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1314, %r1315}, {%r341, %r344}, {%r1175, %r1239}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r341, %r344}, {%r1184, %r1246}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r341, %r344}, {%r1193, %r1253}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r341, %r344}, {%r1202, %r1260}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1350, %r1351}, {%r341, %r344}, {%r1211, %r1267}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1427, [%rd7];
	ld.shared.u32 	%r1434, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1444, %r1441}, {%r353, %r356}, {%r1427}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1453, %r1450}, {%r353, %r356}, {%r1434}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1437, %r1441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r387, %r1444, %r1439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1446, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r1446, %r1450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r387, %r1453, %r1448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r390, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r387, %r1441, %r1455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r390, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r387, %r1450, %r1462;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1491}, {%r429, %r432}, {%r1442, %r1458}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1495, %r1499}, {%r429, %r432}, {%r1451, %r1465}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1487, %r1488, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1490, %r1491, %r1491, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1494, %r1495, %r1495, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r1499, %r1499, %r1494;
	// end inline asm
	mov.u32 	%r1752, 354358559;
	// begin inline asm
	fma.rn.f16x2 %r1502, %r1752, %r1498, %r3361;
	// end inline asm
	ld.shared.u32 	%r1510, [%rd45];
	ld.shared.u32 	%r1517, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1527, %r1524}, {%r353, %r356}, {%r1510}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1536, %r1533}, {%r353, %r356}, {%r1517}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1520, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1520, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r387, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1529, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r1529, %r1533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r387, %r1536, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r390, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r387, %r1524, %r1538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r390, %r1536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r387, %r1533, %r1545;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1571, %r1574}, {%r429, %r432}, {%r1525, %r1541}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1578, %r1582}, {%r429, %r432}, {%r1534, %r1548}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1570, %r1571, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1573, %r1574, %r1574, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r1578, %r1578, %r1573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r1582, %r1582, %r1577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1585, %r1752, %r1581, %r1502;
	// end inline asm
	ld.shared.u32 	%r1593, [%rd47];
	ld.shared.u32 	%r1600, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1610, %r1607}, {%r353, %r356}, {%r1593}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1619, %r1616}, {%r353, %r356}, {%r1600}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1603, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1605, %r1603, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r387, %r1610, %r1605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1612, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1614, %r1612, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r387, %r1619, %r1614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1621, %r390, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r387, %r1607, %r1621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1628, %r390, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r387, %r1616, %r1628;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1654, %r1657}, {%r429, %r432}, {%r1608, %r1624}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1661, %r1665}, {%r429, %r432}, {%r1617, %r1631}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1653, %r1654, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1656, %r1657, %r1657, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r1661, %r1661, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r1665, %r1665, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r1752, %r1664, %r1585;
	// end inline asm
	ld.shared.u32 	%r1676, [%rd49];
	ld.shared.u32 	%r1683, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1693, %r1690}, {%r353, %r356}, {%r1676}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1702, %r1699}, {%r353, %r356}, {%r1683}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1686, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1688, %r1686, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r387, %r1693, %r1688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r387, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r390, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r387, %r1690, %r1704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r390, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r387, %r1699, %r1711;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1737, %r1740}, {%r429, %r432}, {%r1691, %r1707}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1744, %r1748}, {%r429, %r432}, {%r1700, %r1714}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1737, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r1740, %r1740, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r1744, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r1748, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3372, %r1752, %r1747, %r1668;
	// end inline asm
	add.s32 	%r3370, %r3359, 4;
	setp.ne.s32 	%p279, %r3370, 100;
	@%p279 bra 	$L__BB0_209;
// %bb.208:                             // %pass7319
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r1756, %r3360, 20;
	or.b32  	%r1757, %r159, %r1756;
	cvt.u64.u32 	%rd206, %r1757;
	add.s64 	%rd207, %rd206, %rd9;
	shr.u64 	%rd208, %rd207, 35;
	add.s64 	%rd209, %rd207, %rd208;
	shr.s64 	%rd210, %rd209, 29;
	setp.lt.s64 	%p280, %rd207, 0;
	and.b64  	%rd211, %rd209, -536870912;
	setp.ne.s64 	%p281, %rd211, %rd207;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd212, 1, 0, %p282;
	sub.s64 	%rd213, %rd212, %rd210;
	shl.b64 	%rd214, %rd213, 29;
	add.s64 	%rd215, %rd214, %rd207;
	shl.b64 	%rd216, %rd215, 2;
	add.s64 	%rd217, %rd4, %rd216;
	st.global.u32 	[%rd217], %r3372;
	add.s32 	%r3360, %r3360, 1;
	mov.u32 	%r3370, 0;
	mov.u32 	%r3372, %r3370;
$L__BB0_209:                            // %pass7544
                                        //   in Loop: Header=BB0_205 Depth=2
	ld.shared.u32 	%r1762, [%rd51];
	ld.shared.u32 	%r1769, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1779, %r1776}, {%r353, %r356}, {%r1762}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1788, %r1785}, {%r353, %r356}, {%r1769}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1772, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1772, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r387, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1781, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r1781, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r387, %r1788, %r1783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1790, %r390, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r387, %r1776, %r1790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1797, %r390, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r387, %r1785, %r1797;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1826}, {%r429, %r432}, {%r1777, %r1793}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1830, %r1834}, {%r429, %r432}, {%r1786, %r1800}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1823, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r1826, %r1826, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1829, %r1830, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r1834, %r1834, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r1752, %r1833, %r3372;
	// end inline asm
	ld.shared.u32 	%r1845, [%rd53];
	ld.shared.u32 	%r1852, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r353, %r356}, {%r1845}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r353, %r356}, {%r1852}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r387, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r387, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r390, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r387, %r1859, %r1873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r390, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r387, %r1868, %r1880;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1906, %r1909}, {%r429, %r432}, {%r1860, %r1876}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1917}, {%r429, %r432}, {%r1869, %r1883}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1906, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1909, %r1909, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r1913, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r1917, %r1917, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r1752, %r1916, %r1837;
	// end inline asm
	ld.shared.u32 	%r1928, [%rd55];
	ld.shared.u32 	%r1935, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1945, %r1942}, {%r353, %r356}, {%r1928}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1954, %r1951}, {%r353, %r356}, {%r1935}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1938, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1938, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r387, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1947, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r387, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r390, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r387, %r1942, %r1956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r390, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r387, %r1951, %r1963;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1989, %r1992}, {%r429, %r432}, {%r1943, %r1959}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1996, %r2000}, {%r429, %r432}, {%r1952, %r1966}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r1989, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r1992, %r1992, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1996, %r1996, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r2000, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r1752, %r1999, %r1920;
	// end inline asm
	ld.shared.u32 	%r2011, [%rd57];
	ld.shared.u32 	%r2018, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2028, %r2025}, {%r353, %r356}, {%r2011}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2037, %r2034}, {%r353, %r356}, {%r2018}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2021, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r2021, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r387, %r2028, %r2023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2030, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r2030, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r387, %r2037, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2039, %r390, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r387, %r2025, %r2039;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r390, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r387, %r2034, %r2046;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2072, %r2075}, {%r429, %r432}, {%r2026, %r2042}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2079, %r2083}, {%r429, %r432}, {%r2035, %r2049}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r2072, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r2075, %r2075, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r2079, %r2079, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r2083, %r2083, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3361, %r1752, %r2082, %r2003;
	// end inline asm
	add.s32 	%r3359, %r3370, 4;
	setp.ne.s32 	%p283, %r3359, 100;
	@%p283 bra 	$L__BB0_152;
// %bb.210:                             // %pass9047
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r2091, %r3360, 20;
	or.b32  	%r2092, %r159, %r2091;
	cvt.u64.u32 	%rd218, %r2092;
	add.s64 	%rd219, %rd218, %rd9;
	shr.u64 	%rd220, %rd219, 35;
	add.s64 	%rd221, %rd219, %rd220;
	shr.s64 	%rd222, %rd221, 29;
	setp.lt.s64 	%p284, %rd219, 0;
	and.b64  	%rd223, %rd221, -536870912;
	setp.ne.s64 	%p285, %rd223, %rd219;
	and.pred  	%p286, %p284, %p285;
	selp.u64 	%rd224, 1, 0, %p286;
	sub.s64 	%rd225, %rd224, %rd222;
	shl.b64 	%rd226, %rd225, 29;
	add.s64 	%rd227, %rd226, %rd219;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd4, %rd228;
	st.global.u32 	[%rd229], %r3361;
	add.s32 	%r3360, %r3360, 1;
	mov.u32 	%r3359, 0;
	mov.u32 	%r3361, %r3359;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L21106.preheader
                                        //   in Loop: Header=BB0_187 Depth=1
	mov.u32 	%r3358, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_157:                            // %L29825
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3358, %r3358, -8;
	setp.ne.s32 	%p300, %r3358, -16;
	@%p300 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_158;
$L__BB0_154:                            // %L21106
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p288, %r3358, 16;
	selp.b32 	%r2954, %r193, 0, %p288;
	setp.eq.s32 	%p289, %r3358, 8;
	selp.b32 	%r2955, %r197, %r2954, %p289;
	setp.eq.s32 	%p290, %r3358, 0;
	selp.b32 	%r2956, %r201, %r2955, %p290;
	setp.eq.s32 	%p291, %r3358, -8;
	selp.b32 	%r2957, %r205, %r2956, %p291;
	selp.b32 	%r2958, %r194, 0, %p288;
	selp.b32 	%r2959, %r198, %r2958, %p289;
	selp.b32 	%r2960, %r202, %r2959, %p290;
	selp.b32 	%r2961, %r206, %r2960, %p291;
	selp.b32 	%r2962, %r195, 0, %p288;
	selp.b32 	%r2963, %r199, %r2962, %p289;
	selp.b32 	%r2964, %r203, %r2963, %p290;
	selp.b32 	%r2965, %r207, %r2964, %p291;
	selp.b32 	%r2966, %r196, 0, %p288;
	selp.b32 	%r2967, %r200, %r2966, %p289;
	selp.b32 	%r2968, %r204, %r2967, %p290;
	selp.b32 	%r2969, %r208, %r2968, %p291;
	// begin inline asm
	mov.b32 %r2121, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2132, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2970, %r2957, 8;
	xor.b32  	%r2131, %r2970, 8947848;
	// begin inline asm
	lop3.b32 %r2118, %r1020, %r2131, %r2121, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2122, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2123, %r2121, %r2122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2126, %r2118, %r2123;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2129, %r1031, %r2131, %r2132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2133, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2134, %r2132, %r2133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2137, %r2129, %r2134;
	// end inline asm
	// begin inline asm
	mov.b32 %r2167, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2971, %r2961, 8;
	xor.b32  	%r2177, %r2971, 8947848;
	// begin inline asm
	lop3.b32 %r2164, %r1020, %r2177, %r2167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2169, %r2167, %r2168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2172, %r2164, %r2169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2175, %r1031, %r2177, %r2178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2180, %r2178, %r2179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2183, %r2175, %r2180;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2972, %r2965, 8;
	xor.b32  	%r2223, %r2972, 8947848;
	// begin inline asm
	lop3.b32 %r2210, %r1020, %r2223, %r2213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2215, %r2213, %r2214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2218, %r2210, %r2215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2221, %r1031, %r2223, %r2224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2226, %r2224, %r2225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2229, %r2221, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2973, %r2969, 8;
	xor.b32  	%r2269, %r2973, 8947848;
	// begin inline asm
	lop3.b32 %r2256, %r1020, %r2269, %r2259, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2261, %r2259, %r2260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2264, %r2256, %r2261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2267, %r1031, %r2269, %r2270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2272, %r2270, %r2271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2275, %r2267, %r2272;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2126;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2137;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2281, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2172;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2284, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2183;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2287, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2218;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2290, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2229;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2293, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2264;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2296, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2275;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2365, %r2362}, {%r256, %r259}, {%r2278}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2374, %r2371}, {%r256, %r259}, {%r2281}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2383, %r2380}, {%r256, %r259}, {%r2284}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2392, %r2389}, {%r256, %r259}, {%r2287}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2401, %r2398}, {%r256, %r259}, {%r2290}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2410, %r2407}, {%r256, %r259}, {%r2293}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2419, %r2416}, {%r256, %r259}, {%r2296}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2428, %r2425}, {%r256, %r259}, {%r2299}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2358, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2360, %r2358, %r2362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2363, %r294, %r2365, %r2360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2367, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2369, %r2367, %r2371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2372, %r294, %r2374, %r2369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2376, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2378, %r2376, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2381, %r294, %r2383, %r2378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2385, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2387, %r2385, %r2389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2390, %r294, %r2392, %r2387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2394, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2396, %r2394, %r2398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2399, %r294, %r2401, %r2396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2403, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2405, %r2403, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2408, %r294, %r2410, %r2405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2412, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2414, %r2412, %r2416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2417, %r294, %r2419, %r2414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2421, %r297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2423, %r2421, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2426, %r294, %r2428, %r2423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2430, %r297, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2433, %r294, %r2362, %r2430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2437, %r297, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2440, %r294, %r2371, %r2437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r297, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r294, %r2380, %r2444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2451, %r297, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2454, %r294, %r2389, %r2451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2458, %r297, %r2401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2461, %r294, %r2398, %r2458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2465, %r297, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2468, %r294, %r2407, %r2465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r297, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r294, %r2416, %r2472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r297, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r294, %r2425, %r2479;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2486, %r2487}, {%r341, %r344}, {%r2363, %r2433}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2495, %r2496}, {%r341, %r344}, {%r2372, %r2440}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2504, %r2505}, {%r341, %r344}, {%r2381, %r2447}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2513, %r2514}, {%r341, %r344}, {%r2390, %r2454}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2522, %r2523}, {%r341, %r344}, {%r2399, %r2461}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2531, %r2532}, {%r341, %r344}, {%r2408, %r2468}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2540, %r2541}, {%r341, %r344}, {%r2417, %r2475}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2549, %r2550}, {%r341, %r344}, {%r2426, %r2482}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2626, [%rd7];
	ld.shared.u32 	%r2633, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2643, %r2640}, {%r353, %r356}, {%r2626}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2652, %r2649}, {%r353, %r356}, {%r2633}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2636, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r2636, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2641, %r387, %r2643, %r2638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2650, %r387, %r2652, %r2647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r390, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r387, %r2640, %r2654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r390, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r387, %r2649, %r2661;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2687, %r2690}, {%r429, %r432}, {%r2641, %r2657}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2694, %r2698}, {%r429, %r432}, {%r2650, %r2664}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2687, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r2690, %r2690, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r2694, %r2694, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r2698, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r1752, %r2697, %r3361;
	// end inline asm
	ld.shared.u32 	%r2709, [%rd45];
	ld.shared.u32 	%r2716, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2726, %r2723}, {%r353, %r356}, {%r2709}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2735, %r2732}, {%r353, %r356}, {%r2716}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2719, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r2719, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r387, %r2726, %r2721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2728, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2728, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r387, %r2735, %r2730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r390, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r387, %r2723, %r2737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r390, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r387, %r2732, %r2744;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2770, %r2773}, {%r429, %r432}, {%r2724, %r2740}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2781}, {%r429, %r432}, {%r2733, %r2747}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2769, %r2770, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r2773, %r2773, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r2777, %r2777, %r2772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r2781, %r2781, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r1752, %r2780, %r2701;
	// end inline asm
	ld.shared.u32 	%r2792, [%rd47];
	ld.shared.u32 	%r2799, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2809, %r2806}, {%r353, %r356}, {%r2792}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2818, %r2815}, {%r353, %r356}, {%r2799}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2802, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r2802, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r387, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2811, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r2811, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r387, %r2818, %r2813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2820, %r390, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r387, %r2806, %r2820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r390, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r387, %r2815, %r2827;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2853, %r2856}, {%r429, %r432}, {%r2807, %r2823}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2860, %r2864}, {%r429, %r432}, {%r2816, %r2830}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r2853, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r2856, %r2856, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r2860, %r2860, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r2864, %r2864, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r1752, %r2863, %r2784;
	// end inline asm
	ld.shared.u32 	%r2875, [%rd49];
	ld.shared.u32 	%r2882, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2892, %r2889}, {%r353, %r356}, {%r2875}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2901, %r2898}, {%r353, %r356}, {%r2882}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2885, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r2885, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r387, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2894, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2896, %r2894, %r2898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r387, %r2901, %r2896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2903, %r390, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r387, %r2889, %r2903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2910, %r390, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r387, %r2898, %r2910;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2936, %r2939}, {%r429, %r432}, {%r2890, %r2906}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2943, %r2947}, {%r429, %r432}, {%r2899, %r2913}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2935, %r2936, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r2939, %r2939, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r2943, %r2943, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r2947, %r2947, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3375, %r1752, %r2946, %r2867;
	// end inline asm
	add.s32 	%r3373, %r3359, 4;
	setp.eq.s32 	%p292, %r3373, 100;
	@%p292 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_156;
$L__BB0_155:                            // %pass10960
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2975, %r3360, 20;
	or.b32  	%r2976, %r159, %r2975;
	cvt.u64.u32 	%rd230, %r2976;
	add.s64 	%rd231, %rd230, %rd9;
	shr.u64 	%rd232, %rd231, 35;
	add.s64 	%rd233, %rd231, %rd232;
	shr.s64 	%rd234, %rd233, 29;
	setp.lt.s64 	%p293, %rd231, 0;
	and.b64  	%rd235, %rd233, -536870912;
	setp.ne.s64 	%p294, %rd235, %rd231;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd236, 1, 0, %p295;
	sub.s64 	%rd237, %rd236, %rd234;
	shl.b64 	%rd238, %rd237, 29;
	add.s64 	%rd239, %rd238, %rd231;
	shl.b64 	%rd240, %rd239, 2;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3375;
	add.s32 	%r3360, %r3360, 1;
	mov.u32 	%r3373, 0;
	mov.u32 	%r3375, %r3373;
$L__BB0_156:                            // %pass11185
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2981, [%rd51];
	ld.shared.u32 	%r2988, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2998, %r2995}, {%r353, %r356}, {%r2981}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3007, %r3004}, {%r353, %r356}, {%r2988}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2991, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r2991, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r387, %r2998, %r2993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3000, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3002, %r3000, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r387, %r3007, %r3002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3009, %r390, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3012, %r387, %r2995, %r3009;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3016, %r390, %r3007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r387, %r3004, %r3016;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3042, %r3045}, {%r429, %r432}, {%r2996, %r3012}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3049, %r3053}, {%r429, %r432}, {%r3005, %r3019}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3042, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r3045, %r3045, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r3049, %r3049, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r3053, %r3053, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r1752, %r3052, %r3375;
	// end inline asm
	ld.shared.u32 	%r3064, [%rd53];
	ld.shared.u32 	%r3071, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3081, %r3078}, {%r353, %r356}, {%r3064}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3090, %r3087}, {%r353, %r356}, {%r3071}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3074, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3076, %r3074, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r387, %r3081, %r3076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3083, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3085, %r3083, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r387, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3092, %r390, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r387, %r3078, %r3092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3099, %r390, %r3090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r387, %r3087, %r3099;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3125, %r3128}, {%r429, %r432}, {%r3079, %r3095}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3132, %r3136}, {%r429, %r432}, {%r3088, %r3102}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r3125, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3128, %r3128, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r1752, %r3135, %r3056;
	// end inline asm
	ld.shared.u32 	%r3147, [%rd55];
	ld.shared.u32 	%r3154, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3164, %r3161}, {%r353, %r356}, {%r3147}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3173, %r3170}, {%r353, %r356}, {%r3154}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3157, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r3157, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r387, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3166, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3168, %r3166, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r387, %r3173, %r3168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3175, %r390, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r387, %r3161, %r3175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3182, %r390, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r387, %r3170, %r3182;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3208, %r3211}, {%r429, %r432}, {%r3162, %r3178}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3215, %r3219}, {%r429, %r432}, {%r3171, %r3185}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3208, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3211, %r3211, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3215, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3219, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r1752, %r3218, %r3139;
	// end inline asm
	ld.shared.u32 	%r3230, [%rd57];
	ld.shared.u32 	%r3237, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3247, %r3244}, {%r353, %r356}, {%r3230}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3256, %r3253}, {%r353, %r356}, {%r3237}, {%r1142, %r1142};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3240, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3242, %r3240, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r387, %r3247, %r3242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3249, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r3249, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r387, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3258, %r390, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r387, %r3244, %r3258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3265, %r390, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r387, %r3253, %r3265;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3291, %r3294}, {%r429, %r432}, {%r3245, %r3261}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3298, %r3302}, {%r429, %r432}, {%r3254, %r3268}, {%r1142, %r1142}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3291, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r3294, %r3294, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r3298, %r3298, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r3302, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3361, %r1752, %r3301, %r3222;
	// end inline asm
	add.s32 	%r3359, %r3373, 4;
	setp.ne.s32 	%p296, %r3359, 100;
	@%p296 bra 	$L__BB0_157;
// %bb.211:                             // %pass12688
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3310, %r3360, 20;
	or.b32  	%r3311, %r159, %r3310;
	cvt.u64.u32 	%rd242, %r3311;
	add.s64 	%rd243, %rd242, %rd9;
	shr.u64 	%rd244, %rd243, 35;
	add.s64 	%rd245, %rd243, %rd244;
	shr.s64 	%rd246, %rd245, 29;
	setp.lt.s64 	%p297, %rd243, 0;
	and.b64  	%rd247, %rd245, -536870912;
	setp.ne.s64 	%p298, %rd247, %rd243;
	and.pred  	%p299, %p297, %p298;
	selp.u64 	%rd248, 1, 0, %p299;
	sub.s64 	%rd249, %rd248, %rd246;
	shl.b64 	%rd250, %rd249, 29;
	add.s64 	%rd251, %rd250, %rd243;
	shl.b64 	%rd252, %rd251, 2;
	add.s64 	%rd253, %rd4, %rd252;
	st.global.u32 	[%rd253], %r3361;
	add.s32 	%r3360, %r3360, 1;
	mov.u32 	%r3359, %r1142;
	mov.u32 	%r3361, %r1142;
	bra.uni 	$L__BB0_157;
$L__BB0_159:                            // %L29856
	mov.u32 	%r3312, 0;
	st.global.u32 	[%rd6], %r3312;
	ret;
$L__BB0_206:                            // %post_box_union
	mov.u64 	%rd204, exception2423;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6896
	mov.u32 	%r3328, 5;
	st.global.u32 	[%rd6], %r3328;
	mov.u64 	%rd284, exception2375;
	cvta.global.u64 	%rd285, %rd284;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd285;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7056
	mov.u32 	%r3327, 5;
	st.global.u32 	[%rd6], %r3327;
	mov.u64 	%rd282, exception2375;
	cvta.global.u64 	%rd283, %rd282;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd283;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7216
	mov.u32 	%r3326, 5;
	st.global.u32 	[%rd6], %r3326;
	mov.u64 	%rd280, exception2375;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7376
	mov.u32 	%r3325, 5;
	st.global.u32 	[%rd6], %r3325;
	mov.u64 	%rd278, exception2375;
	cvta.global.u64 	%rd279, %rd278;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd279;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7536
	mov.u32 	%r3324, 5;
	st.global.u32 	[%rd6], %r3324;
	mov.u64 	%rd276, exception2375;
	cvta.global.u64 	%rd277, %rd276;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd277;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7696
	mov.u32 	%r3323, 5;
	st.global.u32 	[%rd6], %r3323;
	mov.u64 	%rd274, exception2375;
	cvta.global.u64 	%rd275, %rd274;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd275;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7856
	mov.u32 	%r3322, 5;
	st.global.u32 	[%rd6], %r3322;
	mov.u64 	%rd272, exception2375;
	cvta.global.u64 	%rd273, %rd272;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd273;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8016
	mov.u32 	%r3321, 5;
	st.global.u32 	[%rd6], %r3321;
	mov.u64 	%rd270, exception2375;
	cvta.global.u64 	%rd271, %rd270;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd271;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8176
	mov.u32 	%r3320, 5;
	st.global.u32 	[%rd6], %r3320;
	mov.u64 	%rd268, exception2375;
	cvta.global.u64 	%rd269, %rd268;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd269;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8336
	mov.u32 	%r3319, 5;
	st.global.u32 	[%rd6], %r3319;
	mov.u64 	%rd266, exception2375;
	cvta.global.u64 	%rd267, %rd266;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd267;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8496
	mov.u32 	%r3318, 5;
	st.global.u32 	[%rd6], %r3318;
	mov.u64 	%rd264, exception2375;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8656
	mov.u32 	%r3317, 5;
	st.global.u32 	[%rd6], %r3317;
	mov.u64 	%rd262, exception2375;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8816
	mov.u32 	%r3316, 5;
	st.global.u32 	[%rd6], %r3316;
	mov.u64 	%rd260, exception2375;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8976
	mov.u32 	%r3315, 5;
	st.global.u32 	[%rd6], %r3315;
	mov.u64 	%rd258, exception2375;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9136
	mov.u32 	%r3314, 5;
	st.global.u32 	[%rd6], %r3314;
	mov.u64 	%rd256, exception2375;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9296
	mov.u32 	%r3313, 5;
	st.global.u32 	[%rd6], %r3313;
	mov.u64 	%rd254, exception2375;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3330, 2;
	st.global.u32 	[%rd6], %r3330;
	mov.u64 	%rd288, exception2375;
	cvta.global.u64 	%rd289, %rd288;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd289;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r3329, 3;
	st.global.u32 	[%rd6], %r3329;
	mov.u64 	%rd286, exception2375;
	cvta.global.u64 	%rd287, %rd286;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd287;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r442, [retval0+0];
	} // callseq 47
	mov.u32 	%r444, 4;
	st.global.u32 	[%rd6], %r444;
	mov.u64 	%rd73, exception2375;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r225;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
