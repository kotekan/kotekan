// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2611[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<276>;
	.reg .b32 	%r<3044>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<378>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd14, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r262, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r262, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd15, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r258, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r263, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r264, %r2, %r263;
	add.s32 	%r265, %r264, %r5;
	mul.wide.u32 	%rd21, %r265, 4;
	add.s64 	%rd5, %rd15, %rd21;
	mov.u32 	%r266, 1;
	st.global.u32 	[%rd5], %r266;
	setp.lt.s32 	%p5, %r258, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L117
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r259, %r258;
	setp.gt.s32 	%p7, %r259, 2048;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r259, %r258;
	mad.lo.s32 	%r267, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r268, %r267, %r267, 4;
	setp.gt.u32 	%p9, %r268, 89478484;
	setp.lt.s32 	%p10, %r260, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L133
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r261, %r260;
	setp.lt.s32 	%p13, %r261, 257;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_6;
$L__BB0_168:                            // %pass51
	sub.s32 	%r269, %r261, %r260;
	shr.s32 	%r270, %r6, 31;
	shr.u32 	%r271, %r270, 29;
	add.s32 	%r272, %r6, %r271;
	shr.s32 	%r273, %r272, 3;
	setp.ne.s32 	%p15, %r269, %r273;
	@%p15 bra 	$L__BB0_6;
// %bb.169:                             // %pass102
	and.b32  	%r146, %r263, 3;
	shr.u32 	%r147, %r263, 2;
	mul.lo.s32 	%r274, %r146, %r147;
	and.b32  	%r275, %r274, 7;
	cvt.rn.f32.s32 	%f205, %r275;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_181;
// %bb.170:
	@%p292 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_171;
$L__BB0_177:
	mov.b32 	%r149, %f788;
	and.b32  	%r276, %r149, 8388607;
	or.b32  	%r3027, %r276, 1065353216;
	mov.b32 	%f783, %r3027;
	add.s32 	%r277, %r149, -1073741824;
	and.b32  	%r3028, %r277, -8388608;
	setp.eq.s32 	%p23, %r3028, 0;
	@%p23 bra 	$L__BB0_180;
// %bb.178:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_179:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r3028, 192937984;
	add.s32 	%r279, %r3027, %r278;
	mov.b32 	%f217, %r279;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3028, %r3028, %r278;
	mov.b32 	%r3027, %f783;
	setp.ne.s32 	%p24, %r3028, 0;
	setp.ne.s32 	%p25, %r3027, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_179;
$L__BB0_180:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r149, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_181;
$L__BB0_171:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r148, %f172;
	setp.lt.u32 	%p18, %r148, 1073741824;
	@%p18 bra 	$L__BB0_176;
// %bb.172:
	setp.lt.u32 	%p19, %r148, -2147483647;
	@%p19 bra 	$L__BB0_174;
// %bb.173:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_176;
$L__BB0_174:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_176;
// %bb.175:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_176:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_181:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r280, %f169;
	and.b32  	%r156, %r280, -2147483648;
	@%p28 bra 	$L__BB0_183;
// %bb.182:
	mov.b32 	%r281, %f784;
	or.b32  	%r282, %r156, %r281;
	mov.b32 	%f784, %r282;
$L__BB0_183:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r289, %f227;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f228, %r291;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r159, %r263, 1;
	and.b32  	%r160, %r159, 2;
	mul.lo.s32 	%r297, %r160, %r147;
	cvt.rn.f32.s32 	%f259, %r297;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r298, %r8, 8388607;
	or.b32  	%r2977, %r298, 1065353216;
	mov.b32 	%f733, %r2977;
	add.s32 	%r299, %r8, -1073741824;
	and.b32  	%r2978, %r299, -8388608;
	setp.eq.s32 	%p43, %r2978, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r2978, 192937984;
	add.s32 	%r301, %r2977, %r300;
	mov.b32 	%f271, %r301;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2978, %r2978, %r300;
	mov.b32 	%r2977, %f733;
	setp.ne.s32 	%p44, %r2978, 0;
	setp.ne.s32 	%p45, %r2977, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r161, %r160, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r302, %f186;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f734;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f734, %r305;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r306, %f282;
	and.b32  	%r307, %r306, -2147483648;
	or.b32  	%r308, %r307, 1056964608;
	mov.b32 	%f283, %r308;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r161, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L378
	mul.lo.s32 	%r314, %r161, %r147;
	mul.hi.u32 	%r315, %r314, -1431655765;
	shr.u32 	%r316, %r315, 4;
	mul.lo.s32 	%r317, %r316, 24;
	sub.s32 	%r318, %r314, %r317;
	cvt.rn.f32.s32 	%f311, %r318;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r319, %r16, 8388607;
	or.b32  	%r2979, %r319, 1065353216;
	mov.b32 	%f737, %r2979;
	add.s32 	%r320, %r16, -1073741824;
	and.b32  	%r2980, %r320, -8388608;
	setp.eq.s32 	%p64, %r2980, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r2980, 192937984;
	add.s32 	%r322, %r2979, %r321;
	mov.b32 	%f323, %r322;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2980, %r2980, %r321;
	mov.b32 	%r2979, %f737;
	setp.ne.s32 	%p65, %r2980, 0;
	setp.ne.s32 	%p66, %r2979, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r323, %f18;
	and.b32  	%r324, %r323, -2147483648;
	mov.b32 	%r325, %f738;
	or.b32  	%r326, %r324, %r325;
	mov.b32 	%f738, %r326;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r327, %f333;
	and.b32  	%r328, %r327, -2147483648;
	or.b32  	%r329, %r328, 1056964608;
	mov.b32 	%f334, %r329;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r330, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r331, %r330, 1;
	setp.eq.b32 	%p72, %r331, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r332, %r330, 2;
	setp.eq.s32 	%p73, %r332, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r333, %r330, 1;
	and.b32  	%r334, %r333, 2;
	setp.eq.s32 	%p74, %r334, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L412
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r147, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L450
	mul.lo.s32 	%r341, %r160, %r25;
	cvt.u16.u32 	%rs11, %r341;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r342, %r27, 8388607;
	or.b32  	%r2981, %r342, 1065353216;
	mov.b32 	%f743, %r2981;
	add.s32 	%r343, %r27, -1073741824;
	and.b32  	%r2982, %r343, -8388608;
	setp.eq.s32 	%p85, %r2982, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r2982, 192937984;
	add.s32 	%r345, %r2981, %r344;
	mov.b32 	%f376, %r345;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2982, %r2982, %r344;
	mov.b32 	%r2981, %f743;
	setp.ne.s32 	%p86, %r2982, 0;
	setp.ne.s32 	%p87, %r2981, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r346, %f39;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f744;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f744, %r349;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r350, %f386;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f387, %r352;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r353, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p93, %r354, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p94, %r355, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p95, %r357, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L484
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L492
	mul.lo.s32 	%r358, %r161, %r25;
	mul.hi.u32 	%r359, %r358, -1431655765;
	shr.u32 	%r360, %r359, 1;
	mul.lo.s32 	%r361, %r360, 3;
	sub.s32 	%r362, %r358, %r361;
	cvt.rn.f32.s32 	%f417, %r362;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r363, %r35, 8388607;
	or.b32  	%r2983, %r363, 1065353216;
	mov.b32 	%f749, %r2983;
	add.s32 	%r364, %r35, -1073741824;
	and.b32  	%r2984, %r364, -8388608;
	setp.eq.s32 	%p108, %r2984, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r365, %r2984, 192937984;
	add.s32 	%r366, %r2983, %r365;
	mov.b32 	%f429, %r366;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2984, %r2984, %r365;
	mov.b32 	%r2983, %f749;
	setp.ne.s32 	%p109, %r2984, 0;
	setp.ne.s32 	%p110, %r2983, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r367, %f60;
	and.b32  	%r368, %r367, -2147483648;
	mov.b32 	%r369, %f750;
	or.b32  	%r370, %r368, %r369;
	mov.b32 	%f750, %r370;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r371, %f439;
	and.b32  	%r372, %r371, -2147483648;
	or.b32  	%r373, %r372, 1056964608;
	mov.b32 	%f440, %r373;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r374, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r375, %r374, 1;
	setp.eq.b32 	%p116, %r375, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r376, %r374, 2;
	setp.eq.s32 	%p117, %r376, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r377, %r374, 1;
	and.b32  	%r378, %r377, 2;
	setp.eq.s32 	%p118, %r378, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L526
	cvt.rzi.s32.f32 	%r292, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r263, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L535
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L537
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r293, %r292, 1;
	cvt.rzi.s32.f32 	%r309, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_191;
// %bb.71:
	@%p292 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_72;
$L__BB0_187:
	mov.b32 	%r163, %f788;
	and.b32  	%r385, %r163, 8388607;
	or.b32  	%r3029, %r385, 1065353216;
	mov.b32 	%f787, %r3029;
	add.s32 	%r386, %r163, -1073741824;
	and.b32  	%r3030, %r386, -8388608;
	setp.eq.s32 	%p129, %r3030, 0;
	@%p129 bra 	$L__BB0_190;
// %bb.188:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_189:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r3030, 192937984;
	add.s32 	%r388, %r3029, %r387;
	mov.b32 	%f479, %r388;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3030, %r3030, %r387;
	mov.b32 	%r3029, %f787;
	setp.ne.s32 	%p130, %r3030, 0;
	setp.ne.s32 	%p131, %r3029, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_189;
$L__BB0_190:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r163, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_191;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r162, %f189;
	setp.lt.u32 	%p124, %r162, 1073741824;
	@%p124 bra 	$L__BB0_186;
// %bb.73:
	setp.lt.u32 	%p125, %r162, -2147483647;
	@%p125 bra 	$L__BB0_184;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_186;
$L__BB0_184:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_186;
// %bb.185:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_186:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_191:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r293, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r310, %r309, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_193;
// %bb.192:
	mov.b32 	%r389, %f788;
	or.b32  	%r390, %r156, %r389;
	mov.b32 	%f788, %r390;
$L__BB0_193:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r294, %r292, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r310, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r397, %f489;
	and.b32  	%r398, %r397, -2147483648;
	or.b32  	%r399, %r398, 1056964608;
	mov.b32 	%f490, %r399;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r400, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r401, %r400, 1;
	setp.eq.b32 	%p137, %r401, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r402, %r400, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r405, %r46, 8388607;
	or.b32  	%r2985, %r405, 1065353216;
	mov.b32 	%f759, %r2985;
	add.s32 	%r406, %r46, -1073741824;
	and.b32  	%r2986, %r406, -8388608;
	setp.eq.s32 	%p149, %r2986, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r2986, 192937984;
	add.s32 	%r408, %r2985, %r407;
	mov.b32 	%f532, %r408;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2986, %r2986, %r407;
	mov.b32 	%r2985, %f759;
	setp.ne.s32 	%p150, %r2986, 0;
	setp.ne.s32 	%p151, %r2985, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r294, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r295, %r292, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r311, %r309, 2;
	setp.eq.s32 	%p138, %r402, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r403, %r400, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r409, %f203;
	and.b32  	%r410, %r409, -2147483648;
	mov.b32 	%r411, %f760;
	or.b32  	%r412, %r410, %r411;
	mov.b32 	%f760, %r412;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r296, %r295, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r311, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r312, %r309, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r404, %r403, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r413, %f542;
	and.b32  	%r414, %r413, -2147483648;
	or.b32  	%r415, %r414, 1056964608;
	mov.b32 	%f543, %r415;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r416, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r417, %r416, 1;
	setp.eq.b32 	%p157, %r417, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r418, %r416, 2;
	setp.eq.s32 	%p158, %r418, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r147;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r421, %r54, 8388607;
	or.b32  	%r2987, %r421, 1065353216;
	mov.b32 	%f763, %r2987;
	add.s32 	%r422, %r54, -1073741824;
	and.b32  	%r2988, %r422, -8388608;
	setp.eq.s32 	%p169, %r2988, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r2988, 192937984;
	add.s32 	%r424, %r2987, %r423;
	mov.b32 	%f584, %r424;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2988, %r2988, %r423;
	mov.b32 	%r2987, %f763;
	setp.ne.s32 	%p170, %r2988, 0;
	setp.ne.s32 	%p171, %r2987, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r296, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r313, %r312, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r404, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r425, %f104;
	and.b32  	%r426, %r425, -2147483648;
	mov.b32 	%r427, %f764;
	or.b32  	%r428, %r426, %r427;
	mov.b32 	%f764, %r428;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r313, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r420, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r435, %f595;
	and.b32  	%r436, %r435, -2147483648;
	or.b32  	%r437, %r436, 1056964608;
	mov.b32 	%f596, %r437;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r438, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r439, %r438, 1;
	setp.eq.b32 	%p177, %r439, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r440, %r438, 2;
	setp.eq.s32 	%p178, %r440, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r441, %r438, 1;
	and.b32  	%r442, %r441, 2;
	setp.eq.s32 	%p179, %r442, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r263, 1;
	shr.u32 	%r65, %r263, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L742
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r443, %r67, 8388607;
	or.b32  	%r2989, %r443, 1065353216;
	mov.b32 	%f767, %r2989;
	add.s32 	%r444, %r67, -1073741824;
	and.b32  	%r2990, %r444, -8388608;
	setp.eq.s32 	%p190, %r2990, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r445, %r2990, 192937984;
	add.s32 	%r446, %r2989, %r445;
	mov.b32 	%f638, %r446;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2990, %r2990, %r445;
	mov.b32 	%r2989, %f767;
	setp.ne.s32 	%p191, %r2990, 0;
	setp.ne.s32 	%p192, %r2989, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r447, %f121;
	and.b32  	%r448, %r447, -2147483648;
	mov.b32 	%r449, %f768;
	or.b32  	%r450, %r448, %r449;
	mov.b32 	%f768, %r450;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r451, %f648;
	and.b32  	%r452, %r451, -2147483648;
	or.b32  	%r453, %r452, 1056964608;
	mov.b32 	%f649, %r453;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r454, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r455, %r454, 1;
	setp.eq.b32 	%p198, %r455, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r456, %r454, 2;
	setp.eq.s32 	%p199, %r456, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r457, %r454, 1;
	and.b32  	%r458, %r457, 2;
	setp.eq.s32 	%p200, %r458, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L781
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r147, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L784
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r459, %r75, 8388607;
	or.b32  	%r2991, %r459, 1065353216;
	mov.b32 	%f773, %r2991;
	add.s32 	%r460, %r75, -1073741824;
	and.b32  	%r2992, %r460, -8388608;
	setp.eq.s32 	%p211, %r2992, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r461, %r2992, 192937984;
	add.s32 	%r462, %r2991, %r461;
	mov.b32 	%f691, %r462;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2992, %r2992, %r461;
	mov.b32 	%r2991, %f773;
	setp.ne.s32 	%p212, %r2992, 0;
	setp.ne.s32 	%p213, %r2991, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r463, %f142;
	and.b32  	%r464, %r463, -2147483648;
	mov.b32 	%r465, %f774;
	or.b32  	%r466, %r464, %r465;
	mov.b32 	%f774, %r466;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r467, %f701;
	and.b32  	%r468, %r467, -2147483648;
	or.b32  	%r469, %r468, 1056964608;
	mov.b32 	%f702, %r469;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r470, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r471, %r470, 1;
	setp.eq.b32 	%p219, %r471, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r472, %r470, 2;
	setp.eq.s32 	%p220, %r472, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r473, %r470, 1;
	and.b32  	%r474, %r473, 2;
	setp.eq.s32 	%p221, %r474, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L818
	mov.b32 	%r285, %f258;
	mov.b32 	%r288, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r393, %f520;
	mov.b32 	%r396, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L827
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L829
	xor.b32  	%r284, %r288, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r336, %f17;
	mov.b32 	%r337, %f740;
	mov.b32 	%r339, %f16;
	mov.b32 	%r340, %f741;
	mov.b32 	%r380, %f754;
	mov.b32 	%r381, %f756;
	mov.b32 	%r383, %f755;
	mov.b32 	%r384, %f757;
	xor.b32  	%r392, %r396, -2147483648;
	mov.b32 	%r431, %f625;
	mov.b32 	%r430, %f103;
	mov.b32 	%r434, %f622;
	mov.b32 	%r433, %f102;
	mov.b32 	%r476, %f778;
	mov.b32 	%r477, %f780;
	mov.b32 	%r479, %f779;
	mov.b32 	%r480, %f781;
	setp.gt.u32 	%p225, %r263, 15;
	mov.u32 	%r172, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L859
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r482, %r263, 6, %r4;
	cvt.u16.u32 	%rs17, %r482;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r483, %rs22;
	and.b32  	%r484, %r483, 255;
	mul.wide.u32 	%rd22, %r484, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.global.u32 	%r485, [%rd23];
	cvt.s32.s16 	%r486, %r485;
	shr.s32 	%r487, %r485, 16;
	mul.lo.s32 	%r488, %r487, 290;
	mad.lo.s32 	%r172, %r486, 33, %r488;
$L__BB0_138:                            // %pass430
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r286, %r288, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r382, %r384, %r383;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r431, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r475, %r477, %r476;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r478, %r480, %r479;
	// end inline asm
	mul.lo.s32 	%r490, %r146, 24;
	shl.b32 	%r491, %r4, 1;
	and.b32  	%r492, %r491, 2;
	shr.u32 	%r173, %r263, 3;
	bfe.u32 	%r493, %r263, 3, 1;
	or.b32  	%r494, %r492, %r493;
	and.b32  	%r495, %r173, 2;
	or.b32  	%r174, %r495, %r63;
	cvt.u16.u32 	%rs25, %r174;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r496, %rs29;
	and.b32  	%r497, %r496, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r498, %rs30, 8;
	add.s32 	%r499, %r490, %r2;
	or.b32  	%r500, %r499, %r494;
	add.s32 	%r501, %r500, %r498;
	mul.wide.u32 	%rd24, %r501, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.u32 	%r175, [%rd25];
	or.b32  	%r502, %r494, 4;
	cvt.u64.u32 	%rd26, %r498;
	cvt.u64.u32 	%rd27, %r499;
	cvt.u64.u32 	%rd28, %r494;
	add.s64 	%rd29, %rd27, %rd28;
	add.s64 	%rd30, %rd29, %rd26;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd32, %rd2, %rd31;
	ld.global.u32 	%r176, [%rd32+16];
	cvt.u64.u32 	%rd33, %r490;
	cvt.u64.u32 	%rd34, %r2;
	add.s64 	%rd35, %rd34, %rd33;
	add.s64 	%rd36, %rd35, %rd28;
	add.s64 	%rd37, %rd36, %rd26;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd39, %rd2, %rd38;
	ld.global.u32 	%r177, [%rd39+384];
	cvt.u64.u32 	%rd40, %r502;
	add.s64 	%rd41, %rd35, %rd40;
	add.s64 	%rd42, %rd41, %rd26;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.u32 	%r178, [%rd44+384];
	shl.b32 	%r503, %r263, 2;
	shl.b32 	%r504, %r1, 5;
	shl.b32 	%r179, %r4, 2;
	and.b32  	%r505, %r503, 28;
	or.b32  	%r180, %r505, %r504;
	or.b32  	%r506, %r173, 24;
	add.s32 	%r181, %r506, %r179;
	and.b32  	%r182, %r263, 4;
	bfe.s32 	%r507, %r263, 2, 1;
	shl.b32 	%r508, %r263, 4;
	and.b32  	%r509, %r159, 8;
	or.b32  	%r510, %r509, %r508;
	bfe.u32 	%r511, %r510, 3, 3;
	mul.lo.s32 	%r183, %r511, 260;
	cvt.u16.u32 	%rs31, %r263;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r512, %rs36;
	and.b32  	%r184, %r512, 255;
	add.s32 	%r513, %r5, 192;
	and.b32  	%r514, %r513, 224;
	add.s32 	%r515, %r4, 6;
	shr.u32 	%r516, %r515, 3;
	mad.lo.s32 	%r185, %r516, 260, %r514;
	add.s32 	%r517, %r5, 128;
	and.b32  	%r518, %r517, 224;
	add.s32 	%r519, %r4, 12;
	shr.u32 	%r520, %r519, 3;
	mad.lo.s32 	%r186, %r520, 260, %r518;
	add.s32 	%r521, %r5, 64;
	and.b32  	%r522, %r521, 224;
	add.s32 	%r523, %r4, 18;
	shr.u32 	%r524, %r523, 3;
	mad.lo.s32 	%r187, %r524, 260, %r522;
	or.b32  	%r188, %r5, 780;
	add.s32 	%r525, %r4, 30;
	shr.u32 	%r526, %r525, 3;
	mad.lo.s32 	%r189, %r526, 260, %r514;
	add.s32 	%r527, %r4, 36;
	shr.u32 	%r528, %r527, 3;
	mad.lo.s32 	%r190, %r528, 260, %r518;
	add.s32 	%r529, %r4, 42;
	shr.u32 	%r530, %r529, 3;
	mad.lo.s32 	%r191, %r530, 260, %r522;
	or.b32  	%r192, %r5, 1560;
	add.s32 	%r531, %r4, 54;
	shr.u32 	%r532, %r531, 3;
	mad.lo.s32 	%r193, %r532, 260, %r514;
	add.s32 	%r533, %r4, 60;
	bfe.u32 	%r534, %r533, 3, 3;
	mad.lo.s32 	%r194, %r534, 260, %r518;
	mul.lo.s32 	%r535, %r146, 870;
	shr.u32 	%r536, %r4, 1;
	cvt.u16.u32 	%rs37, %r536;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r537, %rs42;
	and.b32  	%r195, %r537, 255;
	mad.lo.s32 	%r538, %r494, 33, %r535;
	mad.lo.s32 	%r196, %r497, 290, %r538;
	add.s32 	%r197, %r196, 132;
	setp.lt.u32 	%p227, %r263, 4;
	setp.eq.s32 	%p228, %r147, 1;
	setp.eq.s32 	%p229, %r147, 4;
	setp.eq.s32 	%p230, %r147, 5;
	or.b32  	%r198, %r492, %r65;
	bfe.s32 	%r539, %r263, 3, 1;
	and.b32  	%r199, %r539, 98;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r200, 0, 784, %p231;
	selp.b32 	%r201, 0, 392, %p121;
	and.b32  	%r202, %r507, 196;
	or.b32  	%r203, %r200, %r199;
	add.s32 	%r540, %r203, %r201;
	add.s32 	%r204, %r540, %r202;
	or.b32  	%r205, %r198, 4;
	add.s32 	%r541, %r201, %r200;
	add.s32 	%r206, %r541, %r202;
	and.b32  	%r542, %r159, 6;
	shr.u32 	%r543, %r4, 2;
	mul.lo.s32 	%r544, %r543, 98;
	and.b32  	%r545, %r4, 1;
	neg.s32 	%r546, %r545;
	and.b32  	%r547, %r546, 392;
	bfe.s32 	%r548, %r4, 1, 1;
	and.b32  	%r549, %r548, 196;
	and.b32  	%r550, %r539, 1576;
	or.b32  	%r551, %r63, %r542;
	mad.lo.s32 	%r552, %r65, 784, %r544;
	add.s32 	%r553, %r552, %r551;
	add.s32 	%r554, %r553, %r547;
	add.s32 	%r555, %r554, %r549;
	add.s32 	%r207, %r555, %r550;
	add.s32 	%r208, %r207, 8;
	mul.lo.s32 	%r556, %r260, 2359296;
	or.b32  	%r557, %r173, %r179;
	cvt.u16.u32 	%rs43, %r557;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r558, %rs49;
	and.b32  	%r559, %r558, 248;
	and.b32  	%r560, %r263, 7;
	or.b32  	%r561, %r560, %r2;
	add.s32 	%r209, %r561, %r559;
	cvt.s64.s32 	%rd6, %r556;
	add.s32 	%r562, %r196, %r195;
	mul.wide.u32 	%rd45, %r562, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd7, %rd46, %rd45;
	add.s32 	%r563, %r197, %r195;
	mul.wide.u32 	%rd47, %r563, 4;
	add.s64 	%rd8, %rd46, %rd47;
	cvt.u64.u32 	%rd48, %r196;
	cvt.u64.u16 	%rd49, %rs42;
	and.b64  	%rd50, %rd49, 255;
	add.s64 	%rd51, %rd48, %rd50;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd9, %rd46, %rd52;
	cvt.u64.u32 	%rd53, %r197;
	add.s64 	%rd54, %rd53, %rd50;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd10, %rd46, %rd55;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r564, %r263, 24;
	setp.eq.s32 	%p233, %r564, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r564, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r210, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r211, 1145324612, -286331154, %p232;
	add.s32 	%r565, %r147, -1;
	setp.lt.u32 	%p238, %r565, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r564, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r212, 1145324612, -286331154, %p239;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r85, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r234, %r211, %r212, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r105, %r85;
	mov.u32 	%r106, %r85;
	mov.u32 	%r107, %r85;
	bra.uni 	$L__BB0_194;
$L__BB0_166:                            // %L30794
                                        //   in Loop: Header=BB0_194 Depth=1
	add.s32 	%r145, %r85, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p291, %r85, 960;
	mov.u32 	%r85, %r145;
	@%p291 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_167;
$L__BB0_194:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r566, %r85, %r258;
	setp.lt.s32 	%p240, %r566, %r259;
	@%p240 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_167;
$L__BB0_195:                            // %oksrem794
                                        //   in Loop: Header=BB0_194 Depth=1
	setp.eq.s32 	%p241, %r174, 3;
	setp.gt.u32 	%p242, %r4, 3;
	setp.eq.s32 	%p243, %r182, 0;
	mul.hi.u32 	%r664, %r85, -1431655765;
	shr.u32 	%r665, %r664, 5;
	mul.lo.s32 	%r666, %r665, 48;
	or.b32  	%r667, %r666, %r173;
	add.s32 	%r668, %r667, %r179;
	shr.s32 	%r669, %r668, 31;
	shr.u32 	%r670, %r669, 22;
	add.s32 	%r671, %r668, %r670;
	and.b32  	%r672, %r671, -1024;
	sub.s32 	%r673, %r668, %r672;
	add.s32 	%r674, %r673, %r258;
	mad.lo.s32 	%r675, %r674, 393216, %r180;
	mul.hi.s32 	%r676, %r675, 715827883;
	shr.u32 	%r677, %r676, 31;
	shr.s32 	%r678, %r676, 26;
	add.s32 	%r679, %r678, %r677;
	setp.lt.s32 	%p244, %r675, 0;
	mul.lo.s32 	%r680, %r679, 402653184;
	setp.ne.s32 	%p245, %r680, %r675;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r681, -1, 0, %p246;
	add.s32 	%r682, %r679, %r681;
	mad.lo.s32 	%r683, %r682, -402653184, %r675;
	mul.wide.s32 	%rd56, %r683, 4;
	add.s64 	%rd57, %rd3, %rd56;
	ld.global.v4.u32 	{%r684, %r685, %r686, %r687}, [%rd57];
	add.s32 	%r688, %r181, %r666;
	cvt.u16.u32 	%rs50, %r688;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 6;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -1024;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.s32.s16 	%r689, %rs55;
	add.s32 	%r690, %r689, %r258;
	mad.lo.s32 	%r691, %r690, 393216, %r180;
	mul.hi.s32 	%r692, %r691, 715827883;
	shr.u32 	%r693, %r692, 31;
	shr.s32 	%r694, %r692, 26;
	add.s32 	%r695, %r694, %r693;
	setp.lt.s32 	%p247, %r691, 0;
	mul.lo.s32 	%r696, %r695, 402653184;
	setp.ne.s32 	%p248, %r696, %r691;
	and.pred  	%p249, %p247, %p248;
	selp.s32 	%r697, -1, 0, %p249;
	add.s32 	%r698, %r695, %r697;
	mad.lo.s32 	%r699, %r698, -402653184, %r691;
	mul.wide.s32 	%rd58, %r699, 4;
	add.s64 	%rd59, %rd3, %rd58;
	ld.global.v4.u32 	{%r700, %r701, %r702, %r703}, [%rd59];
	selp.b32 	%r704, %r686, %r684, %p243;
	shfl.sync.bfly.b32	%r705, %r704, 4, 31, -1;
	selp.b32 	%r569, %r684, %r705, %p243;
	selp.b32 	%r574, %r705, %r686, %p243;
	selp.b32 	%r706, %r687, %r685, %p243;
	shfl.sync.bfly.b32	%r707, %r706, 4, 31, -1;
	selp.b32 	%r577, %r685, %r707, %p243;
	selp.b32 	%r582, %r707, %r687, %p243;
	selp.b32 	%r708, %r702, %r700, %p243;
	shfl.sync.bfly.b32	%r709, %r708, 4, 31, -1;
	selp.b32 	%r585, %r700, %r709, %p243;
	selp.b32 	%r590, %r709, %r702, %p243;
	selp.b32 	%r710, %r703, %r701, %p243;
	shfl.sync.bfly.b32	%r711, %r710, 4, 31, -1;
	selp.b32 	%r593, %r701, %r711, %p243;
	selp.b32 	%r598, %r711, %r703, %p243;
	shl.b32 	%r570, %r574, 4;
	mov.u32 	%r568, 252645135;
	// begin inline asm
	lop3.b32 %r600, %r568, %r569, %r570, 202;
	// end inline asm
	shr.u32 	%r573, %r569, 4;
	// begin inline asm
	lop3.b32 %r616, %r568, %r573, %r574, 202;
	// end inline asm
	shl.b32 	%r578, %r582, 4;
	// begin inline asm
	lop3.b32 %r608, %r568, %r577, %r578, 202;
	// end inline asm
	shr.u32 	%r581, %r577, 4;
	// begin inline asm
	lop3.b32 %r624, %r568, %r581, %r582, 202;
	// end inline asm
	shl.b32 	%r586, %r590, 4;
	// begin inline asm
	lop3.b32 %r601, %r568, %r585, %r586, 202;
	// end inline asm
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r617, %r568, %r589, %r590, 202;
	// end inline asm
	shl.b32 	%r594, %r598, 4;
	// begin inline asm
	lop3.b32 %r609, %r568, %r593, %r594, 202;
	// end inline asm
	shr.u32 	%r597, %r593, 4;
	// begin inline asm
	lop3.b32 %r625, %r568, %r597, %r598, 202;
	// end inline asm
	mov.u32 	%r602, 25152;
	// begin inline asm
	prmt.b32 %r632, %r600, %r601, %r602;
	// end inline asm
	mov.u32 	%r606, 29521;
	// begin inline asm
	prmt.b32 %r648, %r600, %r601, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r640, %r608, %r609, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r608, %r609, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r633, %r616, %r617, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r649, %r616, %r617, %r606;
	// end inline asm
	// begin inline asm
	prmt.b32 %r641, %r624, %r625, %r602;
	// end inline asm
	// begin inline asm
	prmt.b32 %r657, %r624, %r625, %r606;
	// end inline asm
	mov.u32 	%r658, 21520;
	// begin inline asm
	prmt.b32 %r631, %r632, %r633, %r658;
	// end inline asm
	mov.u32 	%r662, 30258;
	// begin inline asm
	prmt.b32 %r635, %r632, %r633, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r639, %r640, %r641, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r640, %r641, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r647, %r648, %r649, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r651, %r648, %r649, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r656, %r657, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r656, %r657, %r662;
	// end inline asm
	mul.hi.s32 	%r712, %r668, 715827883;
	shr.u32 	%r713, %r712, 31;
	shr.s32 	%r714, %r712, 2;
	add.s32 	%r715, %r714, %r713;
	mul.lo.s32 	%r716, %r715, 24;
	sub.s32 	%r717, %r668, %r716;
	add.s32 	%r718, %r717, %r183;
	mul.wide.s32 	%rd60, %r718, 4;
	add.s64 	%rd62, %rd46, %rd60;
	st.shared.u32 	[%rd62], %r631;
	add.s32 	%r719, %r718, 128;
	mul.wide.u32 	%rd63, %r719, 4;
	add.s64 	%rd64, %rd46, %rd63;
	st.shared.u32 	[%rd64], %r639;
	add.s32 	%r720, %r718, 64;
	mul.wide.u32 	%rd65, %r720, 4;
	add.s64 	%rd66, %rd46, %rd65;
	st.shared.u32 	[%rd66], %r635;
	add.s32 	%r721, %r718, 192;
	mul.wide.u32 	%rd67, %r721, 4;
	add.s64 	%rd68, %rd46, %rd67;
	st.shared.u32 	[%rd68], %r643;
	add.s32 	%r722, %r718, 32;
	mul.wide.u32 	%rd69, %r722, 4;
	add.s64 	%rd70, %rd46, %rd69;
	st.shared.u32 	[%rd70], %r647;
	add.s32 	%r723, %r718, 160;
	mul.wide.u32 	%rd71, %r723, 4;
	add.s64 	%rd72, %rd46, %rd71;
	st.shared.u32 	[%rd72], %r655;
	add.s32 	%r724, %r718, 96;
	mul.wide.u32 	%rd73, %r724, 4;
	add.s64 	%rd74, %rd46, %rd73;
	st.shared.u32 	[%rd74], %r651;
	add.s32 	%r725, %r718, 224;
	mul.wide.u32 	%rd75, %r725, 4;
	add.s64 	%rd76, %rd46, %rd75;
	st.shared.u32 	[%rd76], %r659;
	bar.sync 	0;
	add.s32 	%r726, %r666, %r184;
	cvt.u16.u32 	%rs56, %r726;
	mul.hi.s16 	%rs57, %rs56, 10923;
	shr.u16 	%rs58, %rs57, 15;
	shr.s16 	%rs59, %rs57, 2;
	add.s16 	%rs60, %rs59, %rs58;
	mul.lo.s16 	%rs61, %rs60, 24;
	sub.s16 	%rs62, %rs56, %rs61;
	cvt.s32.s16 	%r727, %rs62;
	add.s32 	%r728, %r5, %r727;
	mul.wide.s32 	%rd77, %r728, 4;
	add.s64 	%rd78, %rd46, %rd77;
	ld.shared.u32 	%r729, [%rd78];
	add.s32 	%r730, %r185, %r727;
	mul.wide.s32 	%rd79, %r730, 4;
	add.s64 	%rd80, %rd46, %rd79;
	ld.shared.u32 	%r731, [%rd80];
	add.s32 	%r732, %r186, %r727;
	mul.wide.u32 	%rd81, %r732, 4;
	add.s64 	%rd82, %rd46, %rd81;
	ld.shared.u32 	%r733, [%rd82];
	add.s32 	%r734, %r187, %r727;
	mul.wide.u32 	%rd83, %r734, 4;
	add.s64 	%rd84, %rd46, %rd83;
	ld.shared.u32 	%r735, [%rd84];
	add.s32 	%r736, %r188, %r727;
	mul.wide.u32 	%rd85, %r736, 4;
	add.s64 	%rd86, %rd46, %rd85;
	ld.shared.u32 	%r737, [%rd86];
	add.s32 	%r738, %r189, %r727;
	mul.wide.u32 	%rd87, %r738, 4;
	add.s64 	%rd88, %rd46, %rd87;
	ld.shared.u32 	%r739, [%rd88];
	add.s32 	%r740, %r190, %r727;
	mul.wide.u32 	%rd89, %r740, 4;
	add.s64 	%rd90, %rd46, %rd89;
	ld.shared.u32 	%r741, [%rd90];
	add.s32 	%r742, %r191, %r727;
	mul.wide.u32 	%rd91, %r742, 4;
	add.s64 	%rd92, %rd46, %rd91;
	ld.shared.u32 	%r743, [%rd92];
	add.s32 	%r744, %r192, %r727;
	mul.wide.u32 	%rd93, %r744, 4;
	add.s64 	%rd94, %rd46, %rd93;
	ld.shared.u32 	%r745, [%rd94];
	add.s32 	%r746, %r193, %r727;
	mul.wide.u32 	%rd95, %r746, 4;
	add.s64 	%rd96, %rd46, %rd95;
	ld.shared.u32 	%r747, [%rd96];
	add.s32 	%r748, %r194, %r727;
	mul.wide.s32 	%rd97, %r748, 4;
	add.s64 	%rd98, %rd46, %rd97;
	ld.shared.u32 	%r749, [%rd98];
	bar.sync 	0;
	shfl.sync.idx.b32	%r750, %r172, 0, 31, -1;
	shfl.sync.idx.b32	%r751, %r172, 1, 31, -1;
	shfl.sync.idx.b32	%r752, %r172, 2, 31, -1;
	shfl.sync.idx.b32	%r753, %r172, 3, 31, -1;
	shfl.sync.idx.b32	%r754, %r172, 4, 31, -1;
	shfl.sync.idx.b32	%r755, %r172, 5, 31, -1;
	shfl.sync.idx.b32	%r756, %r172, 6, 31, -1;
	shfl.sync.idx.b32	%r757, %r172, 7, 31, -1;
	shfl.sync.idx.b32	%r758, %r172, 8, 31, -1;
	shfl.sync.idx.b32	%r759, %r172, 9, 31, -1;
	shfl.sync.idx.b32	%r760, %r172, 10, 31, -1;
	shfl.sync.idx.b32	%r761, %r172, 11, 31, -1;
	shfl.sync.idx.b32	%r762, %r172, 12, 31, -1;
	shfl.sync.idx.b32	%r763, %r172, 13, 31, -1;
	shfl.sync.idx.b32	%r764, %r172, 14, 31, -1;
	shfl.sync.idx.b32	%r765, %r172, 15, 31, -1;
	add.s32 	%r766, %r750, %r727;
	mul.wide.s32 	%rd99, %r766, 4;
	add.s64 	%rd100, %rd46, %rd99;
	st.shared.u32 	[%rd100], %r729;
	add.s32 	%r767, %r751, %r727;
	mul.wide.s32 	%rd101, %r767, 4;
	add.s64 	%rd102, %rd46, %rd101;
	st.shared.u32 	[%rd102], %r731;
	add.s32 	%r768, %r752, %r727;
	mul.wide.s32 	%rd103, %r768, 4;
	add.s64 	%rd104, %rd46, %rd103;
	st.shared.u32 	[%rd104], %r733;
	add.s32 	%r769, %r753, %r727;
	mul.wide.s32 	%rd105, %r769, 4;
	add.s64 	%rd106, %rd46, %rd105;
	st.shared.u32 	[%rd106], %r735;
	add.s32 	%r770, %r754, %r727;
	mul.wide.s32 	%rd107, %r770, 4;
	add.s64 	%rd108, %rd46, %rd107;
	st.shared.u32 	[%rd108], %r737;
	add.s32 	%r771, %r755, %r727;
	mul.wide.s32 	%rd109, %r771, 4;
	add.s64 	%rd110, %rd46, %rd109;
	st.shared.u32 	[%rd110], %r739;
	add.s32 	%r772, %r756, %r727;
	mul.wide.s32 	%rd111, %r772, 4;
	add.s64 	%rd112, %rd46, %rd111;
	st.shared.u32 	[%rd112], %r741;
	add.s32 	%r773, %r757, %r727;
	mul.wide.s32 	%rd113, %r773, 4;
	add.s64 	%rd114, %rd46, %rd113;
	st.shared.u32 	[%rd114], %r743;
	add.s32 	%r774, %r758, %r727;
	mul.wide.s32 	%rd115, %r774, 4;
	add.s64 	%rd116, %rd46, %rd115;
	st.shared.u32 	[%rd116], %r745;
	add.s32 	%r775, %r759, %r727;
	mul.wide.s32 	%rd117, %r775, 4;
	add.s64 	%rd118, %rd46, %rd117;
	st.shared.u32 	[%rd118], %r747;
	selp.b32 	%r776, 0, %r749, %p242;
	add.s32 	%r777, %r760, %r727;
	mul.wide.s32 	%rd119, %r777, 4;
	add.s64 	%rd120, %rd46, %rd119;
	st.shared.u32 	[%rd120], %r776;
	add.s32 	%r778, %r761, %r727;
	mul.wide.s32 	%rd121, %r778, 4;
	add.s64 	%rd122, %rd46, %rd121;
	mov.u32 	%r663, 0;
	st.shared.u32 	[%rd122], %r663;
	add.s32 	%r779, %r762, %r727;
	mul.wide.s32 	%rd123, %r779, 4;
	add.s64 	%rd124, %rd46, %rd123;
	st.shared.u32 	[%rd124], %r663;
	add.s32 	%r780, %r763, %r727;
	mul.wide.s32 	%rd125, %r780, 4;
	add.s64 	%rd126, %rd46, %rd125;
	st.shared.u32 	[%rd126], %r663;
	add.s32 	%r781, %r764, %r727;
	mul.wide.s32 	%rd127, %r781, 4;
	add.s64 	%rd128, %rd46, %rd127;
	st.shared.u32 	[%rd128], %r663;
	add.s32 	%r782, %r765, %r727;
	mul.wide.s32 	%rd129, %r782, 4;
	add.s64 	%rd130, %rd46, %rd129;
	st.shared.u32 	[%rd130], %r663;
	bar.sync 	0;
	mov.u32 	%r89, %r663;
	mov.u32 	%r90, %r663;
	mov.u32 	%r91, %r663;
	mov.u32 	%r92, %r663;
	mov.u32 	%r93, %r663;
	mov.u32 	%r94, %r663;
	mov.u32 	%r95, %r663;
	mov.u32 	%r96, %r663;
	mov.u32 	%r97, %r663;
	mov.u32 	%r98, %r663;
	mov.u32 	%r99, %r663;
	mov.u32 	%r100, %r663;
	mov.u32 	%r101, %r663;
	mov.u32 	%r102, %r663;
	mov.u32 	%r103, %r663;
	mov.u32 	%r104, %r663;
	@%p241 bra 	$L__BB0_139;
// %bb.196:                             // %oksrem2664
                                        //   in Loop: Header=BB0_194 Depth=1
	add.s32 	%r213, %r666, %r195;
	ld.shared.u32 	%r89, [%rd7];
	ld.shared.u32 	%r90, [%rd8];
	ld.shared.u32 	%r91, [%rd9+12];
	ld.shared.u32 	%r92, [%rd10+12];
	ld.shared.u32 	%r93, [%rd9+24];
	ld.shared.u32 	%r94, [%rd10+24];
	ld.shared.u32 	%r95, [%rd9+36];
	ld.shared.u32 	%r96, [%rd10+36];
	add.s32 	%r783, %r213, 12;
	mul.hi.u32 	%r784, %r783, -1431655765;
	shr.u32 	%r785, %r784, 4;
	mul.lo.s32 	%r786, %r785, 24;
	sub.s32 	%r787, %r783, %r786;
	add.s32 	%r788, %r196, %r787;
	mul.wide.u32 	%rd131, %r788, 4;
	add.s64 	%rd133, %rd46, %rd131;
	ld.shared.u32 	%r97, [%rd133];
	add.s32 	%r789, %r197, %r787;
	mul.wide.u32 	%rd134, %r789, 4;
	add.s64 	%rd135, %rd46, %rd134;
	ld.shared.u32 	%r98, [%rd135];
	cvt.u16.u32 	%rs63, %r213;
	add.s16 	%rs64, %rs63, 15;
	mul.hi.s16 	%rs65, %rs64, 10923;
	shr.u16 	%rs66, %rs65, 15;
	shr.s16 	%rs67, %rs65, 2;
	add.s16 	%rs68, %rs67, %rs66;
	mul.lo.s16 	%rs69, %rs68, 24;
	sub.s16 	%rs70, %rs64, %rs69;
	cvt.s32.s16 	%r790, %rs70;
	add.s32 	%r791, %r196, %r790;
	mul.wide.s32 	%rd136, %r791, 4;
	add.s64 	%rd137, %rd46, %rd136;
	ld.shared.u32 	%r99, [%rd137];
	add.s32 	%r792, %r197, %r790;
	mul.wide.u32 	%rd138, %r792, 4;
	add.s64 	%rd139, %rd46, %rd138;
	ld.shared.u32 	%r100, [%rd139];
	add.s16 	%rs71, %rs63, 18;
	mul.hi.s16 	%rs72, %rs71, 10923;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 2;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 24;
	sub.s16 	%rs77, %rs71, %rs76;
	cvt.s32.s16 	%r793, %rs77;
	add.s32 	%r794, %r196, %r793;
	mul.wide.s32 	%rd140, %r794, 4;
	add.s64 	%rd141, %rd46, %rd140;
	ld.shared.u32 	%r101, [%rd141];
	add.s32 	%r795, %r197, %r793;
	mul.wide.u32 	%rd142, %r795, 4;
	add.s64 	%rd143, %rd46, %rd142;
	ld.shared.u32 	%r102, [%rd143];
	add.s16 	%rs78, %rs63, 21;
	mul.hi.s16 	%rs79, %rs78, 10923;
	shr.u16 	%rs80, %rs79, 15;
	shr.s16 	%rs81, %rs79, 2;
	add.s16 	%rs82, %rs81, %rs80;
	mul.lo.s16 	%rs83, %rs82, 24;
	sub.s16 	%rs84, %rs78, %rs83;
	cvt.s32.s16 	%r796, %rs84;
	add.s32 	%r797, %r196, %r796;
	mul.wide.s32 	%rd144, %r797, 4;
	add.s64 	%rd145, %rd46, %rd144;
	ld.shared.u32 	%r103, [%rd145];
	add.s32 	%r798, %r197, %r796;
	mul.wide.u32 	%rd146, %r798, 4;
	add.s64 	%rd147, %rd46, %rd146;
	ld.shared.u32 	%r104, [%rd147];
$L__BB0_139:                            // %L8741
                                        //   in Loop: Header=BB0_194 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r108, %r663;
	bra.uni 	$L__BB0_140;
$L__BB0_150:                            // %L19757
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, 0;
	mov.u32 	%r107, %r105;
$L__BB0_151:                            // %L19758
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r108, %r108, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r108, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_152;
$L__BB0_140:                            // %L8759
                                        //   Parent Loop BB0_194 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r108, 0;
	selp.b32 	%r1192, %r89, 0, %p250;
	setp.eq.s32 	%p251, %r108, 6;
	selp.b32 	%r1193, %r93, %r1192, %p251;
	setp.eq.s32 	%p252, %r108, 12;
	selp.b32 	%r1194, %r97, %r1193, %p252;
	setp.eq.s32 	%p253, %r108, 18;
	selp.b32 	%r1195, %r101, %r1194, %p253;
	selp.b32 	%r1196, %r90, 0, %p250;
	selp.b32 	%r1197, %r94, %r1196, %p251;
	selp.b32 	%r1198, %r98, %r1197, %p252;
	selp.b32 	%r1199, %r102, %r1198, %p253;
	selp.b32 	%r1200, %r91, 0, %p250;
	selp.b32 	%r1201, %r95, %r1200, %p251;
	selp.b32 	%r1202, %r99, %r1201, %p252;
	selp.b32 	%r1203, %r103, %r1202, %p253;
	selp.b32 	%r1204, %r92, 0, %p250;
	selp.b32 	%r1205, %r96, %r1204, %p251;
	selp.b32 	%r1206, %r100, %r1205, %p252;
	selp.b32 	%r1207, %r104, %r1206, %p253;
	mov.u16 	%rs122, 25600;
	// begin inline asm
	mov.b32 %r805, {%rs122, %rs122};
	// end inline asm
	mov.u16 	%rs124, 21504;
	// begin inline asm
	mov.b32 %r816, {%rs124, %rs124};
	// end inline asm
	xor.b32  	%r804, %r1195, -2004318072;
	mov.u32 	%r941, 983055;
	// begin inline asm
	lop3.b32 %r802, %r941, %r804, %r805, 202;
	// end inline asm
	mov.u16 	%rs128, 18432;
	// begin inline asm
	mov.b32 %r806, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r805, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	mov.u32 	%r952, 15728880;
	// begin inline asm
	lop3.b32 %r813, %r952, %r804, %r816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r818, %r816, %r817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r821, %r813, %r818;
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r862, {%rs124, %rs124};
	// end inline asm
	xor.b32  	%r850, %r1199, -2004318072;
	// begin inline asm
	lop3.b32 %r848, %r941, %r850, %r851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r851, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r859, %r952, %r850, %r862, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r863, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r864, %r862, %r863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r867, %r859, %r864;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs124, %rs124};
	// end inline asm
	xor.b32  	%r896, %r1203, -2004318072;
	// begin inline asm
	lop3.b32 %r894, %r941, %r896, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r899, %r897, %r898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r902, %r894, %r899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r905, %r952, %r896, %r908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r910, %r908, %r909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r913, %r905, %r910;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs124, %rs124};
	// end inline asm
	xor.b32  	%r942, %r1207, -2004318072;
	// begin inline asm
	lop3.b32 %r940, %r941, %r942, %r943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r945, %r943, %r944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r948, %r940, %r945;
	// end inline asm
	// begin inline asm
	lop3.b32 %r951, %r952, %r942, %r954, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r956, %r954, %r955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r959, %r951, %r956;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r810;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r984, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r856;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r821;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r867;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r902;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r948;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r913;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1002, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r959;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1008, %r1009}, {%r283, %r286}, {%r984}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1015, %r1016}, {%r283, %r286}, {%r987}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1022, %r1023}, {%r283, %r286}, {%r990}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1029, %r1030}, {%r283, %r286}, {%r993}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1036, %r1037}, {%r283, %r286}, {%r996}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1043, %r1044}, {%r283, %r286}, {%r999}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1050, %r1051}, {%r283, %r286}, {%r1002}, {%r663, %r663};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1057, %r1058}, {%r283, %r286}, {%r1005}, {%r663, %r663};
	// end inline asm
	@%p1 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_141;
$L__BB0_197:                            // %pass4004
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1064, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1066, %r1064, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1069, %r335, %r1008, %r1066;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1073, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1075, %r1073, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1078, %r335, %r1015, %r1075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1082, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1084, %r1082, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1087, %r335, %r1022, %r1084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1091, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1093, %r1091, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1096, %r335, %r1029, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1100, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1102, %r1100, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r335, %r1036, %r1102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1109, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1111, %r1109, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r335, %r1043, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1118, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1120, %r1118, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r335, %r1050, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1127, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1129, %r1127, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r335, %r1057, %r1129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r338, %r1008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r335, %r1009, %r1136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1143, %r338, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r335, %r1016, %r1143;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r338, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r335, %r1023, %r1150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r338, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r335, %r1030, %r1157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r338, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r335, %r1037, %r1164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r338, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r335, %r1044, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r338, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r335, %r1051, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r338, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r335, %r1058, %r1185;
	// end inline asm
	mov.u32 	%r1357, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1282}, {%r379, %r382}, {%r1069, %r1139}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1289, %r1290}, {%r379, %r382}, {%r1078, %r1146}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1297, %r1298}, {%r379, %r382}, {%r1087, %r1153}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1305, %r1306}, {%r379, %r382}, {%r1096, %r1160}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1313, %r1314}, {%r379, %r382}, {%r1105, %r1167}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1321, %r1322}, {%r379, %r382}, {%r1114, %r1174}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1329, %r1330}, {%r379, %r382}, {%r1123, %r1181}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r379, %r382}, {%r1132, %r1188}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1280, %r1281, %r1282, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1284, %r1281, %r1282, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1288, %r1289, %r1290, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1289, %r1290, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1297, %r1298, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1297, %r1298, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1305, %r1306, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1305, %r1306, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1313, %r1314, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1313, %r1314, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1321, %r1322, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1324, %r1321, %r1322, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1329, %r1330, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1329, %r1330, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1337, %r1338, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r1337, %r1338, %r662;
	// end inline asm
	add.s16 	%rs133, %rs9, %rs3;
	add.s16 	%rs134, %rs133, -5;
	mul.hi.s16 	%rs135, %rs134, 10923;
	shr.u16 	%rs136, %rs135, 15;
	add.s16 	%rs137, %rs135, %rs136;
	mul.lo.s16 	%rs138, %rs137, 6;
	sub.s16 	%rs139, %rs134, %rs138;
	mul.wide.s16 	%r1390, %rs139, 16;
	or.b32  	%r1391, %r198, %r1390;
	add.s32 	%r1392, %r204, %r1391;
	mul.wide.s32 	%rd150, %r1392, 4;
	add.s64 	%rd152, %rd46, %rd150;
	st.shared.u32 	[%rd152], %r1280;
	cvt.s64.s32 	%rd153, %r1391;
	cvt.u64.u32 	%rd154, %r202;
	cvt.u64.u32 	%rd155, %r201;
	cvt.u64.u32 	%rd156, %r200;
	cvt.u64.u32 	%rd157, %r199;
	add.s64 	%rd158, %rd156, %rd155;
	add.s64 	%rd12, %rd158, %rd154;
	add.s64 	%rd11, %rd12, %rd157;
	add.s64 	%rd159, %rd11, %rd153;
	shl.b64 	%rd160, %rd159, 2;
	add.s64 	%rd161, %rd46, %rd160;
	st.shared.u32 	[%rd161+6304], %r1284;
	or.b32  	%r1393, %r205, %r1390;
	add.s32 	%r1394, %r204, %r1393;
	mul.wide.s32 	%rd162, %r1394, 4;
	add.s64 	%rd163, %rd46, %rd162;
	st.shared.u32 	[%rd163], %r1288;
	cvt.s64.s32 	%rd164, %r1393;
	add.s64 	%rd165, %rd11, %rd164;
	shl.b64 	%rd166, %rd165, 2;
	add.s64 	%rd167, %rd46, %rd166;
	st.shared.u32 	[%rd167+6304], %r1292;
	add.s32 	%r1395, %r1391, %r199;
	or.b32  	%r1396, %r1395, 8;
	add.s32 	%r1397, %r206, %r1396;
	mul.wide.s32 	%rd168, %r1397, 4;
	add.s64 	%rd169, %rd46, %rd168;
	st.shared.u32 	[%rd169], %r1296;
	cvt.s64.s32 	%rd170, %r1396;
	add.s64 	%rd171, %rd12, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd173, %rd46, %rd172;
	st.shared.u32 	[%rd173+6304], %r1300;
	cvt.u64.u32 	%rd174, %r203;
	add.s64 	%rd175, %rd174, %rd155;
	add.s64 	%rd13, %rd175, %rd154;
	add.s64 	%rd176, %rd13, %rd164;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd178, %rd46, %rd177;
	st.shared.u32 	[%rd178+32], %r1304;
	st.shared.u32 	[%rd167+6336], %r1308;
	add.s16 	%rs140, %rs133, -2;
	mul.hi.s16 	%rs141, %rs140, 10923;
	shr.u16 	%rs142, %rs141, 15;
	add.s16 	%rs143, %rs141, %rs142;
	mul.lo.s16 	%rs144, %rs143, 6;
	sub.s16 	%rs145, %rs140, %rs144;
	mul.wide.s16 	%r1398, %rs145, 16;
	or.b32  	%r1399, %r198, %r1398;
	add.s32 	%r1400, %r204, %r1399;
	mul.wide.s32 	%rd179, %r1400, 4;
	add.s64 	%rd180, %rd46, %rd179;
	st.shared.u32 	[%rd180], %r1312;
	cvt.s64.s32 	%rd181, %r1399;
	add.s64 	%rd182, %rd11, %rd181;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd46, %rd183;
	st.shared.u32 	[%rd184+6304], %r1316;
	or.b32  	%r1401, %r205, %r1398;
	add.s32 	%r1402, %r204, %r1401;
	mul.wide.s32 	%rd185, %r1402, 4;
	add.s64 	%rd186, %rd46, %rd185;
	st.shared.u32 	[%rd186], %r1320;
	cvt.s64.s32 	%rd187, %r1401;
	add.s64 	%rd188, %rd11, %rd187;
	shl.b64 	%rd189, %rd188, 2;
	add.s64 	%rd190, %rd46, %rd189;
	st.shared.u32 	[%rd190+6304], %r1324;
	add.s32 	%r1403, %r1399, %r199;
	or.b32  	%r1404, %r1403, 8;
	add.s32 	%r1405, %r206, %r1404;
	mul.wide.s32 	%rd191, %r1405, 4;
	add.s64 	%rd192, %rd46, %rd191;
	st.shared.u32 	[%rd192], %r1328;
	cvt.s64.s32 	%rd193, %r1404;
	add.s64 	%rd194, %rd12, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd46, %rd195;
	st.shared.u32 	[%rd196+6304], %r1332;
	add.s64 	%rd197, %rd13, %rd187;
	shl.b64 	%rd198, %rd197, 2;
	add.s64 	%rd199, %rd46, %rd198;
	st.shared.u32 	[%rd199+32], %r1336;
	st.shared.u32 	[%rd190+6336], %r1340;
	bar.sync 	0;
	add.s16 	%rs146, %rs3, -5;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	add.s16 	%rs149, %rs147, %rs148;
	mul.lo.s16 	%rs150, %rs149, 6;
	sub.s16 	%rs151, %rs146, %rs150;
	mul.wide.s16 	%r1406, %rs151, 16;
	add.s32 	%r1407, %r207, %r1406;
	mul.wide.s32 	%rd200, %r1407, 4;
	add.s64 	%rd201, %rd46, %rd200;
	ld.shared.u32 	%r1348, [%rd201];
	add.s32 	%r1408, %r208, %r1406;
	mul.wide.s32 	%rd202, %r1408, 4;
	add.s64 	%rd203, %rd46, %rd202;
	ld.shared.u32 	%r1355, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1344, %r1345}, {%r391, %r394}, {%r1348}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1351, %r1352}, {%r391, %r394}, {%r1355}, {%r1357, %r1357};
	// end inline asm
	@%p254 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;
$L__BB0_199:                            // %pass6644
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1358, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r1358, %r1345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r429, %r1344, %r1360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1367, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r1367, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r429, %r1351, %r1369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1376, %r432, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r429, %r1345, %r1376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1383, %r432, %r1351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r429, %r1352, %r1383;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1428, %r1431}, {%r475, %r478}, {%r1363, %r1379}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1435, %r1439}, {%r475, %r478}, {%r1372, %r1386}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r1428, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r1431, %r1431, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r1435, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r1439, %r1439, %r1434;
	// end inline asm
	mov.u32 	%r1526, 603988992;
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1526, %r1438, %r107;
	// end inline asm
	add.s32 	%r1529, %r85, %r108;
	add.s32 	%r1530, %r1529, 1;
	mul.hi.u32 	%r1531, %r1530, -1431655765;
	shr.u32 	%r1532, %r1531, 2;
	mul.lo.s32 	%r1533, %r1532, 6;
	sub.s32 	%r1534, %r1530, %r1533;
	shl.b32 	%r1535, %r1534, 4;
	add.s32 	%r1536, %r207, %r1535;
	mul.wide.u32 	%rd206, %r1536, 4;
	add.s64 	%rd208, %rd46, %rd206;
	ld.shared.u32 	%r1450, [%rd208];
	add.s32 	%r1537, %r208, %r1535;
	mul.wide.u32 	%rd209, %r1537, 4;
	add.s64 	%rd210, %rd46, %rd209;
	ld.shared.u32 	%r1457, [%rd210];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r391, %r394}, {%r1450}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r391, %r394}, {%r1457}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r429, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r429, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r432, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r429, %r1464, %r1478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r432, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r429, %r1473, %r1485;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1511, %r1514}, {%r475, %r478}, {%r1465, %r1481}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1518, %r1522}, {%r475, %r478}, {%r1474, %r1488}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r1511, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r1514, %r1514, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r1518, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r1526, %r1521, %r1442;
	// end inline asm
	add.s32 	%r3032, %r105, 2;
	setp.eq.s32 	%p255, %r3032, 8;
	setp.gt.u32 	%p297, %r263, 7;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_200;
$L__BB0_142:                            // %L15631
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_144;
// %bb.143:                             // %L15691
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1538, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd211, %r1538;
	add.s64 	%rd212, %rd211, %rd6;
	mul.hi.s64 	%rd213, %rd212, 1024819115206086201;
	shr.u64 	%rd214, %rd213, 63;
	shr.s64 	%rd215, %rd213, 24;
	add.s64 	%rd216, %rd215, %rd214;
	setp.lt.s64 	%p257, %rd212, 0;
	mul.lo.s64 	%rd217, %rd216, 301989888;
	setp.ne.s64 	%p258, %rd217, %rd212;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd218, -1, 0, %p259;
	add.s64 	%rd219, %rd216, %rd218;
	mul.lo.s64 	%rd220, %rd219, -301989888;
	add.s64 	%rd221, %rd220, %rd212;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd223, %rd4, %rd222;
	st.global.u32 	[%rd223], %r3034;
$L__BB0_144:                            // %L15845
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3032, 0;
	mov.u32 	%r3034, %r3032;
$L__BB0_200:                            // %oksrem7162
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs152, %rs3, -3;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	add.s16 	%rs155, %rs153, %rs154;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs152, %rs156;
	mul.wide.s16 	%r1706, %rs157, 16;
	add.s32 	%r1707, %r207, %r1706;
	mul.wide.s32 	%rd224, %r1707, 4;
	add.s64 	%rd226, %rd46, %rd224;
	ld.shared.u32 	%r1544, [%rd226];
	add.s32 	%r1708, %r208, %r1706;
	mul.wide.s32 	%rd227, %r1708, 4;
	add.s64 	%rd228, %rd46, %rd227;
	ld.shared.u32 	%r1551, [%rd228];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1561, %r1558}, {%r391, %r394}, {%r1544}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1570, %r1567}, {%r391, %r394}, {%r1551}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1554, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r1554, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r429, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1563, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r1563, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r429, %r1570, %r1565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r432, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r429, %r1558, %r1572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1579, %r432, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r429, %r1567, %r1579;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1608}, {%r475, %r478}, {%r1559, %r1575}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1616}, {%r475, %r478}, {%r1568, %r1582}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1605, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r1608, %r1608, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1526, %r1615, %r3034;
	// end inline asm
	add.s16 	%rs158, %rs3, -2;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r1709, %rs163, 16;
	add.s32 	%r1710, %r207, %r1709;
	mul.wide.s32 	%rd229, %r1710, 4;
	add.s64 	%rd230, %rd46, %rd229;
	ld.shared.u32 	%r1627, [%rd230];
	add.s32 	%r1711, %r208, %r1709;
	mul.wide.s32 	%rd231, %r1711, 4;
	add.s64 	%rd232, %rd46, %rd231;
	ld.shared.u32 	%r1634, [%rd232];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1644, %r1641}, {%r391, %r394}, {%r1627}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1653, %r1650}, {%r391, %r394}, {%r1634}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1637, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1639, %r1637, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r429, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r1646, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r429, %r1653, %r1648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r432, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r429, %r1641, %r1655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r432, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r429, %r1650, %r1662;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1691}, {%r475, %r478}, {%r1642, %r1658}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1699}, {%r475, %r478}, {%r1651, %r1665}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1688, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r1526, %r1698, %r1619;
	// end inline asm
	add.s32 	%r3035, %r3032, 2;
	setp.eq.s32 	%p260, %r3035, 8;
	@%p260 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_201;
$L__BB0_145:                            // %L17587
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_147;
// %bb.146:                             // %L17647
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1712, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd233, %r1712;
	add.s64 	%rd234, %rd233, %rd6;
	mul.hi.s64 	%rd235, %rd234, 1024819115206086201;
	shr.u64 	%rd236, %rd235, 63;
	shr.s64 	%rd237, %rd235, 24;
	add.s64 	%rd238, %rd237, %rd236;
	setp.lt.s64 	%p262, %rd234, 0;
	mul.lo.s64 	%rd239, %rd238, 301989888;
	setp.ne.s64 	%p263, %rd239, %rd234;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd240, -1, 0, %p264;
	add.s64 	%rd241, %rd238, %rd240;
	mul.lo.s64 	%rd242, %rd241, -301989888;
	add.s64 	%rd243, %rd242, %rd234;
	shl.b64 	%rd244, %rd243, 2;
	add.s64 	%rd245, %rd4, %rd244;
	st.global.u32 	[%rd245], %r3037;
$L__BB0_147:                            // %L17801
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3035, 0;
	mov.u32 	%r3037, %r3035;
$L__BB0_201:                            // %oksrem8018
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s16 	%rs164, %rs3, -1;
	mul.hi.s16 	%rs165, %rs164, 10923;
	shr.u16 	%rs166, %rs165, 15;
	add.s16 	%rs167, %rs165, %rs166;
	mul.lo.s16 	%rs168, %rs167, 6;
	sub.s16 	%rs169, %rs164, %rs168;
	mul.wide.s16 	%r1880, %rs169, 16;
	add.s32 	%r1881, %r207, %r1880;
	mul.wide.s32 	%rd246, %r1881, 4;
	add.s64 	%rd248, %rd46, %rd246;
	ld.shared.u32 	%r1718, [%rd248];
	add.s32 	%r1882, %r208, %r1880;
	mul.wide.s32 	%rd249, %r1882, 4;
	add.s64 	%rd250, %rd46, %rd249;
	ld.shared.u32 	%r1725, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r391, %r394}, {%r1718}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r391, %r394}, {%r1725}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r429, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r429, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r432, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r429, %r1732, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r432, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r429, %r1741, %r1753;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1782}, {%r475, %r478}, {%r1733, %r1749}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1786, %r1790}, {%r475, %r478}, {%r1742, %r1756}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1779, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1526, %r1789, %r3037;
	// end inline asm
	mul.hi.s16 	%rs170, %rs3, 10923;
	shr.u16 	%rs171, %rs170, 15;
	add.s16 	%rs172, %rs170, %rs171;
	mul.lo.s16 	%rs173, %rs172, 6;
	sub.s16 	%rs174, %rs3, %rs173;
	mul.wide.s16 	%r1883, %rs174, 16;
	add.s32 	%r1884, %r207, %r1883;
	mul.wide.s32 	%rd251, %r1884, 4;
	add.s64 	%rd252, %rd46, %rd251;
	ld.shared.u32 	%r1801, [%rd252];
	add.s32 	%r1885, %r208, %r1883;
	mul.wide.s32 	%rd253, %r1885, 4;
	add.s64 	%rd254, %rd46, %rd253;
	ld.shared.u32 	%r1808, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1818, %r1815}, {%r391, %r394}, {%r1801}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1827, %r1824}, {%r391, %r394}, {%r1808}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1811, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1811, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r429, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1820, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r429, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r432, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r429, %r1815, %r1829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r432, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r429, %r1824, %r1836;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1865}, {%r475, %r478}, {%r1816, %r1832}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1873}, {%r475, %r478}, {%r1825, %r1839}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1862, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1526, %r1872, %r1793;
	// end inline asm
	add.s32 	%r105, %r3035, 2;
	setp.eq.s32 	%p265, %r105, 8;
	@%p265 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_151;
$L__BB0_148:                            // %L19543
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_150;
// %bb.149:                             // %L19603
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1886, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd255, %r1886;
	add.s64 	%rd256, %rd255, %rd6;
	mul.hi.s64 	%rd257, %rd256, 1024819115206086201;
	shr.u64 	%rd258, %rd257, 63;
	shr.s64 	%rd259, %rd257, 24;
	add.s64 	%rd260, %rd259, %rd258;
	setp.lt.s64 	%p267, %rd256, 0;
	mul.lo.s64 	%rd261, %rd260, 301989888;
	setp.ne.s64 	%p268, %rd261, %rd256;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd262, -1, 0, %p269;
	add.s64 	%rd263, %rd260, %rd262;
	mul.lo.s64 	%rd264, %rd263, -301989888;
	add.s64 	%rd265, %rd264, %rd256;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd4, %rd266;
	st.global.u32 	[%rd267], %r107;
	bra.uni 	$L__BB0_150;
$L__BB0_152:                            // %L19779.preheader
                                        //   in Loop: Header=BB0_194 Depth=1
	mov.u16 	%rs275, %rs1;
	mov.u32 	%r3023, %r1357;
	bra.uni 	$L__BB0_153;
$L__BB0_164:                            // %L30777
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r105, %r2772;
	mov.u32 	%r107, %r2772;
$L__BB0_165:                            // %L30778
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3023, %r3023, 6;
	add.s16 	%rs275, %rs275, 6;
	setp.ne.s32 	%p290, %r3023, 24;
	@%p290 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_166;
$L__BB0_153:                            // %L19779
                                        //   Parent Loop BB0_194 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3023, 0;
	selp.b32 	%r2583, %r89, 0, %p271;
	setp.eq.s32 	%p272, %r3023, 6;
	selp.b32 	%r2584, %r93, %r2583, %p272;
	setp.eq.s32 	%p273, %r3023, 12;
	selp.b32 	%r2585, %r97, %r2584, %p273;
	setp.eq.s32 	%p274, %r3023, 18;
	selp.b32 	%r2586, %r101, %r2585, %p274;
	selp.b32 	%r2587, %r90, 0, %p271;
	selp.b32 	%r2588, %r94, %r2587, %p272;
	selp.b32 	%r2589, %r98, %r2588, %p273;
	selp.b32 	%r2590, %r102, %r2589, %p274;
	selp.b32 	%r2591, %r91, 0, %p271;
	selp.b32 	%r2592, %r95, %r2591, %p272;
	selp.b32 	%r2593, %r99, %r2592, %p273;
	selp.b32 	%r2594, %r103, %r2593, %p274;
	selp.b32 	%r2595, %r92, 0, %p271;
	selp.b32 	%r2596, %r96, %r2595, %p272;
	selp.b32 	%r2597, %r100, %r2596, %p273;
	selp.b32 	%r2598, %r104, %r2597, %p274;
	// begin inline asm
	mov.b32 %r1916, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r1927, {%rs124, %rs124};
	// end inline asm
	shr.u32 	%r2599, %r2586, 8;
	xor.b32  	%r1926, %r2599, 8947848;
	// begin inline asm
	lop3.b32 %r1913, %r941, %r1926, %r1916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1917, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1918, %r1916, %r1917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1921, %r1913, %r1918;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1924, %r952, %r1926, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1928, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1929, %r1927, %r1928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1932, %r1924, %r1929;
	// end inline asm
	// begin inline asm
	mov.b32 %r1962, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs124, %rs124};
	// end inline asm
	shr.u32 	%r2600, %r2590, 8;
	xor.b32  	%r1972, %r2600, 8947848;
	// begin inline asm
	lop3.b32 %r1959, %r941, %r1972, %r1962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1964, %r1962, %r1963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1967, %r1959, %r1964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1970, %r952, %r1972, %r1973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1975, %r1973, %r1974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1978, %r1970, %r1975;
	// end inline asm
	// begin inline asm
	mov.b32 %r2008, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs124, %rs124};
	// end inline asm
	shr.u32 	%r2601, %r2594, 8;
	xor.b32  	%r2018, %r2601, 8947848;
	// begin inline asm
	lop3.b32 %r2005, %r941, %r2018, %r2008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2010, %r2008, %r2009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2013, %r2005, %r2010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2016, %r952, %r2018, %r2019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2021, %r2019, %r2020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2024, %r2016, %r2021;
	// end inline asm
	// begin inline asm
	mov.b32 %r2054, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs124, %rs124};
	// end inline asm
	shr.u32 	%r2602, %r2598, 8;
	xor.b32  	%r2064, %r2602, 8947848;
	// begin inline asm
	lop3.b32 %r2051, %r941, %r2064, %r2054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2056, %r2054, %r2055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2059, %r2051, %r2056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2062, %r952, %r2064, %r2065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs128, %rs128};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2067, %r2065, %r2066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2070, %r2062, %r2067;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1921;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1967;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1932;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2079, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1978;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2082, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2013;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2085, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2059;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2088, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2024;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2091, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2070;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2094, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2160, %r2157}, {%r283, %r286}, {%r2073}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2169, %r2166}, {%r283, %r286}, {%r2076}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2178, %r2175}, {%r283, %r286}, {%r2079}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2187, %r2184}, {%r283, %r286}, {%r2082}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2196, %r2193}, {%r283, %r286}, {%r2085}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2205, %r2202}, {%r283, %r286}, {%r2088}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2214, %r2211}, {%r283, %r286}, {%r2091}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2223, %r2220}, {%r283, %r286}, {%r2094}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2153, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r2153, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r335, %r2160, %r2155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2162, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r2162, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r335, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2171, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2173, %r2171, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r335, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2180, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2182, %r2180, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2185, %r335, %r2187, %r2182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2189, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2191, %r2189, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2194, %r335, %r2196, %r2191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2198, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2200, %r2198, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2203, %r335, %r2205, %r2200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2207, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2209, %r2207, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2212, %r335, %r2214, %r2209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2216, %r338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2218, %r2216, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r335, %r2223, %r2218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2225, %r338, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r335, %r2157, %r2225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r338, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r335, %r2166, %r2232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2239, %r338, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2242, %r335, %r2175, %r2239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r338, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r335, %r2184, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r338, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r335, %r2193, %r2253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r338, %r2205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r335, %r2202, %r2260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r338, %r2214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r335, %r2211, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r338, %r2223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r335, %r2220, %r2274;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2354, %r2355}, {%r379, %r382}, {%r2158, %r2228}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2362, %r2363}, {%r379, %r382}, {%r2167, %r2235}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2370, %r2371}, {%r379, %r382}, {%r2176, %r2242}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2378, %r2379}, {%r379, %r382}, {%r2185, %r2249}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2386, %r2387}, {%r379, %r382}, {%r2194, %r2256}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2394, %r2395}, {%r379, %r382}, {%r2203, %r2263}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2402, %r2403}, {%r379, %r382}, {%r2212, %r2270}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2410, %r2411}, {%r379, %r382}, {%r2221, %r2277}, {%r1357, %r1357}, %r210, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2353, %r2354, %r2355, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2357, %r2354, %r2355, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2361, %r2362, %r2363, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2365, %r2362, %r2363, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2369, %r2370, %r2371, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2373, %r2370, %r2371, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2378, %r2379, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2381, %r2378, %r2379, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2385, %r2386, %r2387, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2389, %r2386, %r2387, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2393, %r2394, %r2395, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2394, %r2395, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2402, %r2403, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2402, %r2403, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2409, %r2410, %r2411, %r658;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2413, %r2410, %r2411, %r662;
	// end inline asm
	add.s16 	%rs223, %rs10, %rs275;
	add.s16 	%rs224, %rs223, -29;
	mul.hi.s16 	%rs225, %rs224, 10923;
	shr.u16 	%rs226, %rs225, 15;
	add.s16 	%rs227, %rs225, %rs226;
	mul.lo.s16 	%rs228, %rs227, 6;
	sub.s16 	%rs229, %rs224, %rs228;
	mul.wide.s16 	%r2603, %rs229, 16;
	or.b32  	%r2604, %r198, %r2603;
	add.s32 	%r2605, %r204, %r2604;
	mul.wide.s32 	%rd268, %r2605, 4;
	add.s64 	%rd270, %rd46, %rd268;
	st.shared.u32 	[%rd270], %r2353;
	cvt.s64.s32 	%rd271, %r2604;
	add.s64 	%rd272, %rd11, %rd271;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd46, %rd273;
	st.shared.u32 	[%rd274+6304], %r2357;
	or.b32  	%r2606, %r205, %r2603;
	add.s32 	%r2607, %r204, %r2606;
	mul.wide.s32 	%rd275, %r2607, 4;
	add.s64 	%rd276, %rd46, %rd275;
	st.shared.u32 	[%rd276], %r2361;
	cvt.s64.s32 	%rd277, %r2606;
	add.s64 	%rd278, %rd11, %rd277;
	shl.b64 	%rd279, %rd278, 2;
	add.s64 	%rd280, %rd46, %rd279;
	st.shared.u32 	[%rd280+6304], %r2365;
	add.s32 	%r2608, %r2604, %r199;
	or.b32  	%r2609, %r2608, 8;
	add.s32 	%r2610, %r206, %r2609;
	mul.wide.s32 	%rd281, %r2610, 4;
	add.s64 	%rd282, %rd46, %rd281;
	st.shared.u32 	[%rd282], %r2369;
	cvt.s64.s32 	%rd283, %r2609;
	add.s64 	%rd284, %rd12, %rd283;
	shl.b64 	%rd285, %rd284, 2;
	add.s64 	%rd286, %rd46, %rd285;
	st.shared.u32 	[%rd286+6304], %r2373;
	add.s64 	%rd287, %rd13, %rd277;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd289, %rd46, %rd288;
	st.shared.u32 	[%rd289+32], %r2377;
	st.shared.u32 	[%rd280+6336], %r2381;
	add.s16 	%rs230, %rs9, %rs275;
	add.s16 	%rs231, %rs230, -2;
	mul.hi.s16 	%rs232, %rs231, 10923;
	shr.u16 	%rs233, %rs232, 15;
	add.s16 	%rs234, %rs232, %rs233;
	mul.lo.s16 	%rs235, %rs234, 6;
	sub.s16 	%rs236, %rs231, %rs235;
	mul.wide.s16 	%r2611, %rs236, 16;
	or.b32  	%r2612, %r198, %r2611;
	add.s32 	%r2613, %r204, %r2612;
	mul.wide.s32 	%rd290, %r2613, 4;
	add.s64 	%rd291, %rd46, %rd290;
	st.shared.u32 	[%rd291], %r2385;
	cvt.s64.s32 	%rd292, %r2612;
	add.s64 	%rd293, %rd11, %rd292;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd46, %rd294;
	st.shared.u32 	[%rd295+6304], %r2389;
	or.b32  	%r2614, %r205, %r2611;
	add.s32 	%r2615, %r204, %r2614;
	mul.wide.s32 	%rd296, %r2615, 4;
	add.s64 	%rd297, %rd46, %rd296;
	st.shared.u32 	[%rd297], %r2393;
	cvt.s64.s32 	%rd298, %r2614;
	add.s64 	%rd299, %rd11, %rd298;
	shl.b64 	%rd300, %rd299, 2;
	add.s64 	%rd301, %rd46, %rd300;
	st.shared.u32 	[%rd301+6304], %r2397;
	add.s32 	%r2616, %r2612, %r199;
	or.b32  	%r2617, %r2616, 8;
	add.s32 	%r2618, %r206, %r2617;
	mul.wide.s32 	%rd302, %r2618, 4;
	add.s64 	%rd303, %rd46, %rd302;
	st.shared.u32 	[%rd303], %r2401;
	cvt.s64.s32 	%rd304, %r2617;
	add.s64 	%rd305, %rd12, %rd304;
	shl.b64 	%rd306, %rd305, 2;
	add.s64 	%rd307, %rd46, %rd306;
	st.shared.u32 	[%rd307+6304], %r2405;
	add.s64 	%rd308, %rd13, %rd298;
	shl.b64 	%rd309, %rd308, 2;
	add.s64 	%rd310, %rd46, %rd309;
	st.shared.u32 	[%rd310+32], %r2409;
	st.shared.u32 	[%rd301+6336], %r2413;
	bar.sync 	0;
	add.s16 	%rs237, %rs275, -5;
	mul.hi.s16 	%rs238, %rs237, 10923;
	shr.u16 	%rs239, %rs238, 15;
	add.s16 	%rs240, %rs238, %rs239;
	mul.lo.s16 	%rs241, %rs240, 6;
	sub.s16 	%rs242, %rs237, %rs241;
	mul.wide.s16 	%r2619, %rs242, 16;
	add.s32 	%r2620, %r207, %r2619;
	mul.wide.s32 	%rd311, %r2620, 4;
	add.s64 	%rd312, %rd46, %rd311;
	ld.shared.u32 	%r2421, [%rd312];
	add.s32 	%r2621, %r208, %r2619;
	mul.wide.s32 	%rd313, %r2621, 4;
	add.s64 	%rd314, %rd46, %rd313;
	ld.shared.u32 	%r2428, [%rd314];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2438, %r2435}, {%r391, %r394}, {%r2421}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2447, %r2444}, {%r391, %r394}, {%r2428}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2431, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r2431, %r2435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r429, %r2438, %r2433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2440, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2442, %r2440, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r429, %r2447, %r2442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2449, %r432, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r429, %r2435, %r2449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2456, %r432, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2459, %r429, %r2444, %r2456;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2482, %r2485}, {%r475, %r478}, {%r2436, %r2452}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2489, %r2493}, {%r475, %r478}, {%r2445, %r2459}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2481, %r2482, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2484, %r2485, %r2485, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2488, %r2489, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2492, %r2493, %r2493, %r2488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r1526, %r2492, %r107;
	// end inline asm
	add.s16 	%rs243, %rs275, -4;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2622, %rs248, 16;
	add.s32 	%r2623, %r207, %r2622;
	mul.wide.s32 	%rd315, %r2623, 4;
	add.s64 	%rd316, %rd46, %rd315;
	ld.shared.u32 	%r2504, [%rd316];
	add.s32 	%r2624, %r208, %r2622;
	mul.wide.s32 	%rd317, %r2624, 4;
	add.s64 	%rd318, %rd46, %rd317;
	ld.shared.u32 	%r2511, [%rd318];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2521, %r2518}, {%r391, %r394}, {%r2504}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2527}, {%r391, %r394}, {%r2511}, {%r1357, %r1357};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2514, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r2514, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r429, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2523, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r2523, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r429, %r2530, %r2525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r432, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r429, %r2518, %r2532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r432, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r429, %r2527, %r2539;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2565, %r2568}, {%r475, %r478}, {%r2519, %r2535}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2572, %r2576}, {%r475, %r478}, {%r2528, %r2542}, {%r1357, %r1357}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2564, %r2565, %r2565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2567, %r2568, %r2568, %r2564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r2572, %r2572, %r2567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2575, %r2576, %r2576, %r2571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3040, %r1526, %r2575, %r2496;
	// end inline asm
	add.s32 	%r3038, %r105, 2;
	setp.ne.s32 	%p275, %r3038, 8;
	@%p275 bra 	$L__BB0_157;
// %bb.154:                             // %L26651
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_156;
// %bb.155:                             // %L26711
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2625, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd319, %r2625;
	add.s64 	%rd320, %rd319, %rd6;
	mul.hi.s64 	%rd321, %rd320, 1024819115206086201;
	shr.u64 	%rd322, %rd321, 63;
	shr.s64 	%rd323, %rd321, 24;
	add.s64 	%rd324, %rd323, %rd322;
	setp.lt.s64 	%p277, %rd320, 0;
	mul.lo.s64 	%rd325, %rd324, 301989888;
	setp.ne.s64 	%p278, %rd325, %rd320;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd326, -1, 0, %p279;
	add.s64 	%rd327, %rd324, %rd326;
	mul.lo.s64 	%rd328, %rd327, -301989888;
	add.s64 	%rd329, %rd328, %rd320;
	shl.b64 	%rd330, %rd329, 2;
	add.s64 	%rd331, %rd4, %rd330;
	st.global.u32 	[%rd331], %r3040;
$L__BB0_156:                            // %L26865
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3038, 0;
	mov.u32 	%r3040, %r3038;
$L__BB0_157:                            // %oksrem12059
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s16 	%rs249, %rs275, -3;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r2793, %rs254, 16;
	add.s32 	%r2794, %r207, %r2793;
	mul.wide.s32 	%rd332, %r2794, 4;
	add.s64 	%rd334, %rd46, %rd332;
	ld.shared.u32 	%r2631, [%rd334];
	add.s32 	%r2795, %r208, %r2793;
	mul.wide.s32 	%rd335, %r2795, 4;
	add.s64 	%rd336, %rd46, %rd335;
	ld.shared.u32 	%r2638, [%rd336];
	mov.u32 	%r2772, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2648, %r2645}, {%r391, %r394}, {%r2631}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2657, %r2654}, {%r391, %r394}, {%r2638}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2646, %r429, %r2648, %r2643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2655, %r429, %r2657, %r2652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r432, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r429, %r2645, %r2659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r432, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r429, %r2654, %r2666;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2692, %r2695}, {%r475, %r478}, {%r2646, %r2662}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2699, %r2703}, {%r475, %r478}, {%r2655, %r2669}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2692, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r2695, %r2695, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r2699, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r2703, %r2703, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r1526, %r2702, %r3040;
	// end inline asm
	add.s16 	%rs255, %rs275, -2;
	mul.hi.s16 	%rs256, %rs255, 10923;
	shr.u16 	%rs257, %rs256, 15;
	add.s16 	%rs258, %rs256, %rs257;
	mul.lo.s16 	%rs259, %rs258, 6;
	sub.s16 	%rs260, %rs255, %rs259;
	mul.wide.s16 	%r2796, %rs260, 16;
	add.s32 	%r2797, %r207, %r2796;
	mul.wide.s32 	%rd337, %r2797, 4;
	add.s64 	%rd338, %rd46, %rd337;
	ld.shared.u32 	%r2714, [%rd338];
	add.s32 	%r2798, %r208, %r2796;
	mul.wide.s32 	%rd339, %r2798, 4;
	add.s64 	%rd340, %rd46, %rd339;
	ld.shared.u32 	%r2721, [%rd340];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2731, %r2728}, {%r391, %r394}, {%r2714}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r391, %r394}, {%r2721}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r429, %r2731, %r2726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r429, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r432, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r429, %r2728, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r432, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r429, %r2737, %r2749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2775, %r2778}, {%r475, %r478}, {%r2729, %r2745}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2786}, {%r475, %r478}, {%r2738, %r2752}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2775, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3043, %r1526, %r2785, %r2706;
	// end inline asm
	add.s32 	%r3041, %r3038, 2;
	setp.eq.s32 	%p280, %r3041, 8;
	@%p280 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_161;
$L__BB0_158:                            // %L28607
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_160;
// %bb.159:                             // %L28667
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2799, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd341, %r2799;
	add.s64 	%rd342, %rd341, %rd6;
	mul.hi.s64 	%rd343, %rd342, 1024819115206086201;
	shr.u64 	%rd344, %rd343, 63;
	shr.s64 	%rd345, %rd343, 24;
	add.s64 	%rd346, %rd345, %rd344;
	setp.lt.s64 	%p282, %rd342, 0;
	mul.lo.s64 	%rd347, %rd346, 301989888;
	setp.ne.s64 	%p283, %rd347, %rd342;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd348, -1, 0, %p284;
	add.s64 	%rd349, %rd346, %rd348;
	mul.lo.s64 	%rd350, %rd349, -301989888;
	add.s64 	%rd351, %rd350, %rd342;
	shl.b64 	%rd352, %rd351, 2;
	add.s64 	%rd353, %rd4, %rd352;
	st.global.u32 	[%rd353], %r3043;
$L__BB0_160:                            // %L28821
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r106, %r106, 1;
	mov.u32 	%r3041, 0;
	mov.u32 	%r3043, %r3041;
$L__BB0_161:                            // %oksrem12915
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s16 	%rs261, %rs275, -1;
	mul.hi.s16 	%rs262, %rs261, 10923;
	shr.u16 	%rs263, %rs262, 15;
	add.s16 	%rs264, %rs262, %rs263;
	mul.lo.s16 	%rs265, %rs264, 6;
	sub.s16 	%rs266, %rs261, %rs265;
	mul.wide.s16 	%r2967, %rs266, 16;
	add.s32 	%r2968, %r207, %r2967;
	mul.wide.s32 	%rd354, %r2968, 4;
	add.s64 	%rd356, %rd46, %rd354;
	ld.shared.u32 	%r2805, [%rd356];
	add.s32 	%r2969, %r208, %r2967;
	mul.wide.s32 	%rd357, %r2969, 4;
	add.s64 	%rd358, %rd46, %rd357;
	ld.shared.u32 	%r2812, [%rd358];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2822, %r2819}, {%r391, %r394}, {%r2805}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2831, %r2828}, {%r391, %r394}, {%r2812}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2815, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2817, %r2815, %r2819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r429, %r2822, %r2817;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2824, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2826, %r2824, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2829, %r429, %r2831, %r2826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2833, %r432, %r2822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r429, %r2819, %r2833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2840, %r432, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2843, %r429, %r2828, %r2840;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2866, %r2869}, {%r475, %r478}, {%r2820, %r2836}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2873, %r2877}, {%r475, %r478}, {%r2829, %r2843}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r2866, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r2869, %r2869, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r2873, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r2877, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r1526, %r2876, %r3043;
	// end inline asm
	mul.hi.s16 	%rs267, %rs275, 10923;
	shr.u16 	%rs268, %rs267, 15;
	add.s16 	%rs269, %rs267, %rs268;
	mul.lo.s16 	%rs270, %rs269, 6;
	sub.s16 	%rs271, %rs275, %rs270;
	mul.wide.s16 	%r2970, %rs271, 16;
	add.s32 	%r2971, %r207, %r2970;
	mul.wide.s32 	%rd359, %r2971, 4;
	add.s64 	%rd360, %rd46, %rd359;
	ld.shared.u32 	%r2888, [%rd360];
	add.s32 	%r2972, %r208, %r2970;
	mul.wide.s32 	%rd361, %r2972, 4;
	add.s64 	%rd362, %rd46, %rd361;
	ld.shared.u32 	%r2895, [%rd362];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2905, %r2902}, {%r391, %r394}, {%r2888}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2914, %r2911}, {%r391, %r394}, {%r2895}, {%r2772, %r2772};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2898, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2900, %r2898, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r429, %r2905, %r2900;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2907, %r432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2909, %r2907, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r429, %r2914, %r2909;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2916, %r432, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r429, %r2902, %r2916;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2923, %r432, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r429, %r2911, %r2923;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2949, %r2952}, {%r475, %r478}, {%r2903, %r2919}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2956, %r2960}, {%r475, %r478}, {%r2912, %r2926}, {%r2772, %r2772}, %r234, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2949, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r2952, %r2952, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r2956, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r2960, %r2960, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r107, %r1526, %r2959, %r2880;
	// end inline asm
	add.s32 	%r105, %r3041, 2;
	setp.eq.s32 	%p285, %r105, 8;
	@%p285 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L30563
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p297 bra 	$L__BB0_164;
// %bb.163:                             // %L30623
                                        //   in Loop: Header=BB0_153 Depth=2
	mad.lo.s32 	%r2973, %r106, 2359296, %r209;
	cvt.u64.u32 	%rd363, %r2973;
	add.s64 	%rd364, %rd363, %rd6;
	mul.hi.s64 	%rd365, %rd364, 1024819115206086201;
	shr.u64 	%rd366, %rd365, 63;
	shr.s64 	%rd367, %rd365, 24;
	add.s64 	%rd368, %rd367, %rd366;
	setp.lt.s64 	%p287, %rd364, 0;
	mul.lo.s64 	%rd369, %rd368, 301989888;
	setp.ne.s64 	%p288, %rd369, %rd364;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd370, -1, 0, %p289;
	add.s64 	%rd371, %rd368, %rd370;
	mul.lo.s64 	%rd372, %rd371, -301989888;
	add.s64 	%rd373, %rd372, %rd364;
	shl.b64 	%rd374, %rd373, 2;
	add.s64 	%rd375, %rd4, %rd374;
	st.global.u32 	[%rd375], %r107;
	bra.uni 	$L__BB0_164;
$L__BB0_167:                            // %L30809
	mov.u32 	%r2975, 0;
	st.global.u32 	[%rd5], %r2975;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd148, exception2651;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r257;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_198:                            // %post_box_union6639
	mov.u64 	%rd204, exception2651;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r257;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L159
	mov.u32 	%r2976, 2;
	st.global.u32 	[%rd5], %r2976;
	mov.u64 	%rd376, exception2611;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r257;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd19, exception1;
	cvta.global.u64 	%rd20, %rd19;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd20;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd14;
	st.param.b32 	[param0+8], %r257;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
