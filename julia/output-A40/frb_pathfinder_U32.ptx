// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<303>;
	.reg .b16 	%rs<209>;
	.reg .b32 	%r<3112>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<370>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd48, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r311, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r311, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd49, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r312, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r313, %r2, %r312;
	add.s32 	%r314, %r313, %r5;
	mul.wide.u32 	%rd56, %r314, 4;
	add.s64 	%rd6, %rd49, %rd56;
	mov.u32 	%r315, 1;
	st.global.u32 	[%rd6], %r315;
	setp.gt.u32 	%p5, %r303, 1023;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r304, %r303;
	setp.gt.s32 	%p7, %r304, 2047;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r304, %r303;
	mad.lo.s32 	%r316, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r317, %r316, %r316, 4;
	setp.gt.u32 	%p9, %r317, 89478484;
	setp.gt.u32 	%p10, %r305, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r306, %r305;
	setp.lt.s32 	%p13, %r306, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r318, %r306, %r305;
	mul.hi.s32 	%r319, %r6, 715827883;
	shr.u32 	%r320, %r319, 31;
	add.s32 	%r321, %r319, %r320;
	setp.eq.s32 	%p15, %r318, %r321;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r307, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r308, %r307;
	setp.gt.s32 	%p18, %r308, 2048;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r309, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r308, %r307;
	and.b32  	%r322, %r7, 31;
	setp.ne.s32 	%p20, %r322, 0;
	setp.lt.s32 	%p21, %r309, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r310, %r309;
	setp.gt.s32 	%p24, %r310, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r323, %r310, %r309;
	and.b32  	%r324, %r323, 31;
	setp.eq.s32 	%p26, %r324, 0;
	setp.eq.s32 	%p27, %r323, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_13;
$L__BB0_171:                            // %pass162
	and.b32  	%r160, %r312, 3;
	shr.u32 	%r161, %r312, 2;
	mul.lo.s32 	%r325, %r160, %r161;
	and.b32  	%r326, %r325, 7;
	cvt.rn.f32.s32 	%f205, %r326;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p302, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_183;
// %bb.172:
	@%p302 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r163, %f788;
	and.b32  	%r327, %r163, 8388607;
	or.b32  	%r3107, %r327, 1065353216;
	mov.b32 	%f783, %r3107;
	add.s32 	%r328, %r163, -1073741824;
	and.b32  	%r3108, %r328, -8388608;
	setp.eq.s32 	%p36, %r3108, 0;
	@%p36 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r329, %r3108, 192937984;
	add.s32 	%r330, %r3107, %r329;
	mov.b32 	%f217, %r330;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3108, %r3108, %r329;
	mov.b32 	%r3107, %f783;
	setp.ne.s32 	%p37, %r3108, 0;
	setp.ne.s32 	%p38, %r3107, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r163, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r162, %f172;
	setp.lt.u32 	%p31, %r162, 1073741824;
	@%p31 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p32, %r162, -2147483647;
	@%p32 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r331, %f169;
	and.b32  	%r170, %r331, -2147483648;
	@%p41 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r332, %f784;
	or.b32  	%r333, %r170, %r332;
	mov.b32 	%f784, %r333;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r173, %r312, 1;
	and.b32  	%r174, %r173, 2;
	mul.lo.s32 	%r348, %r174, %r161;
	cvt.rn.f32.s32 	%f259, %r348;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r349, %r9, 8388607;
	or.b32  	%r3064, %r349, 1065353216;
	mov.b32 	%f733, %r3064;
	add.s32 	%r350, %r9, -1073741824;
	and.b32  	%r3065, %r350, -8388608;
	setp.eq.s32 	%p56, %r3065, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r3065, 192937984;
	add.s32 	%r352, %r3064, %r351;
	mov.b32 	%f271, %r352;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3065, %r3065, %r351;
	mov.b32 	%r3064, %f733;
	setp.ne.s32 	%p57, %r3065, 0;
	setp.ne.s32 	%p58, %r3064, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r175, %r174, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r353, %f186;
	and.b32  	%r354, %r353, -2147483648;
	mov.b32 	%r355, %f734;
	or.b32  	%r356, %r354, %r355;
	mov.b32 	%f734, %r356;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r175, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r365, %r175, %r161;
	mul.hi.u32 	%r366, %r365, -1431655765;
	shr.u32 	%r367, %r366, 4;
	mul.lo.s32 	%r368, %r367, 24;
	sub.s32 	%r369, %r365, %r368;
	cvt.rn.f32.s32 	%f311, %r369;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r370, %r17, 8388607;
	or.b32  	%r3066, %r370, 1065353216;
	mov.b32 	%f737, %r3066;
	add.s32 	%r371, %r17, -1073741824;
	and.b32  	%r3067, %r371, -8388608;
	setp.eq.s32 	%p77, %r3067, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3067, 192937984;
	add.s32 	%r373, %r3066, %r372;
	mov.b32 	%f323, %r373;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3067, %r3067, %r372;
	mov.b32 	%r3066, %f737;
	setp.ne.s32 	%p78, %r3067, 0;
	setp.ne.s32 	%p79, %r3066, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r374, %f18;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f738;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f738, %r377;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r378, %f333;
	and.b32  	%r379, %r378, -2147483648;
	or.b32  	%r380, %r379, 1056964608;
	mov.b32 	%f334, %r380;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r381, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r382, %r381, 1;
	setp.eq.b32 	%p85, %r382, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r383, %r381, 2;
	setp.eq.s32 	%p86, %r383, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r384, %r381, 1;
	and.b32  	%r385, %r384, 2;
	setp.eq.s32 	%p87, %r385, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r161, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r392, %r174, %r26;
	cvt.u16.u32 	%rs9, %r392;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r393, %r28, 8388607;
	or.b32  	%r3068, %r393, 1065353216;
	mov.b32 	%f743, %r3068;
	add.s32 	%r394, %r28, -1073741824;
	and.b32  	%r3069, %r394, -8388608;
	setp.eq.s32 	%p98, %r3069, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r3069, 192937984;
	add.s32 	%r396, %r3068, %r395;
	mov.b32 	%f376, %r396;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3069, %r3069, %r395;
	mov.b32 	%r3068, %f743;
	setp.ne.s32 	%p99, %r3069, 0;
	setp.ne.s32 	%p100, %r3068, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r397, %f39;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r399, %f744;
	or.b32  	%r400, %r398, %r399;
	mov.b32 	%f744, %r400;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r401, %f386;
	and.b32  	%r402, %r401, -2147483648;
	or.b32  	%r403, %r402, 1056964608;
	mov.b32 	%f387, %r403;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r404, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r405, %r404, 1;
	setp.eq.b32 	%p106, %r405, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r406, %r404, 2;
	setp.eq.s32 	%p107, %r406, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r407, %r404, 1;
	and.b32  	%r408, %r407, 2;
	setp.eq.s32 	%p108, %r408, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r409, %r175, %r26;
	mul.hi.u32 	%r410, %r409, -1431655765;
	shr.u32 	%r411, %r410, 1;
	mul.lo.s32 	%r412, %r411, 3;
	sub.s32 	%r413, %r409, %r412;
	cvt.rn.f32.s32 	%f417, %r413;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r414, %r36, 8388607;
	or.b32  	%r3070, %r414, 1065353216;
	mov.b32 	%f749, %r3070;
	add.s32 	%r415, %r36, -1073741824;
	and.b32  	%r3071, %r415, -8388608;
	setp.eq.s32 	%p121, %r3071, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r3071, 192937984;
	add.s32 	%r417, %r3070, %r416;
	mov.b32 	%f429, %r417;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3071, %r3071, %r416;
	mov.b32 	%r3070, %f749;
	setp.ne.s32 	%p122, %r3071, 0;
	setp.ne.s32 	%p123, %r3070, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r418, %f60;
	and.b32  	%r419, %r418, -2147483648;
	mov.b32 	%r420, %f750;
	or.b32  	%r421, %r419, %r420;
	mov.b32 	%f750, %r421;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r422, %f439;
	and.b32  	%r423, %r422, -2147483648;
	or.b32  	%r424, %r423, 1056964608;
	mov.b32 	%f440, %r424;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r425, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r426, %r425, 1;
	setp.eq.b32 	%p129, %r426, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r427, %r425, 2;
	setp.eq.s32 	%p130, %r427, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r428, %r425, 1;
	and.b32  	%r429, %r428, 2;
	setp.eq.s32 	%p131, %r429, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r312, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_193;
// %bb.78:
	@%p302 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_79;
$L__BB0_189:
	mov.b32 	%r177, %f788;
	and.b32  	%r436, %r177, 8388607;
	or.b32  	%r3109, %r436, 1065353216;
	mov.b32 	%f787, %r3109;
	add.s32 	%r437, %r177, -1073741824;
	and.b32  	%r3110, %r437, -8388608;
	setp.eq.s32 	%p142, %r3110, 0;
	@%p142 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r3110, 192937984;
	add.s32 	%r439, %r3109, %r438;
	mov.b32 	%f479, %r439;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3110, %r3110, %r438;
	mov.b32 	%r3109, %f787;
	setp.ne.s32 	%p143, %r3110, 0;
	setp.ne.s32 	%p144, %r3109, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r177, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r176, %f189;
	setp.lt.u32 	%p137, %r176, 1073741824;
	@%p137 bra 	$L__BB0_188;
// %bb.80:
	setp.lt.u32 	%p138, %r176, -2147483647;
	@%p138 bra 	$L__BB0_186;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r440, %f788;
	or.b32  	%r441, %r170, %r440;
	mov.b32 	%f788, %r441;
$L__BB0_195:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r456, %r47, 8388607;
	or.b32  	%r3072, %r456, 1065353216;
	mov.b32 	%f759, %r3072;
	add.s32 	%r457, %r47, -1073741824;
	and.b32  	%r3073, %r457, -8388608;
	setp.eq.s32 	%p162, %r3073, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r458, %r3073, 192937984;
	add.s32 	%r459, %r3072, %r458;
	mov.b32 	%f532, %r459;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3073, %r3073, %r458;
	mov.b32 	%r3072, %f759;
	setp.ne.s32 	%p163, %r3073, 0;
	setp.ne.s32 	%p164, %r3072, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r460, %f203;
	and.b32  	%r461, %r460, -2147483648;
	mov.b32 	%r462, %f760;
	or.b32  	%r463, %r461, %r462;
	mov.b32 	%f760, %r463;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r161;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r472, %r55, 8388607;
	or.b32  	%r3074, %r472, 1065353216;
	mov.b32 	%f763, %r3074;
	add.s32 	%r473, %r55, -1073741824;
	and.b32  	%r3075, %r473, -8388608;
	setp.eq.s32 	%p182, %r3075, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r474, %r3075, 192937984;
	add.s32 	%r475, %r3074, %r474;
	mov.b32 	%f584, %r475;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3075, %r3075, %r474;
	mov.b32 	%r3074, %f763;
	setp.ne.s32 	%p183, %r3075, 0;
	setp.ne.s32 	%p184, %r3074, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r476, %f104;
	and.b32  	%r477, %r476, -2147483648;
	mov.b32 	%r478, %f764;
	or.b32  	%r479, %r477, %r478;
	mov.b32 	%f764, %r479;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r312, 1;
	shr.u32 	%r66, %r312, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r494, %r68, 8388607;
	or.b32  	%r3076, %r494, 1065353216;
	mov.b32 	%f767, %r3076;
	add.s32 	%r495, %r68, -1073741824;
	and.b32  	%r3077, %r495, -8388608;
	setp.eq.s32 	%p203, %r3077, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r496, %r3077, 192937984;
	add.s32 	%r497, %r3076, %r496;
	mov.b32 	%f638, %r497;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3077, %r3077, %r496;
	mov.b32 	%r3076, %f767;
	setp.ne.s32 	%p204, %r3077, 0;
	setp.ne.s32 	%p205, %r3076, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r498, %f121;
	and.b32  	%r499, %r498, -2147483648;
	mov.b32 	%r500, %f768;
	or.b32  	%r501, %r499, %r500;
	mov.b32 	%f768, %r501;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r502, %f648;
	and.b32  	%r503, %r502, -2147483648;
	or.b32  	%r504, %r503, 1056964608;
	mov.b32 	%f649, %r504;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r505, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r506, %r505, 1;
	setp.eq.b32 	%p211, %r506, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r507, %r505, 2;
	setp.eq.s32 	%p212, %r507, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r508, %r505, 1;
	and.b32  	%r509, %r508, 2;
	setp.eq.s32 	%p213, %r509, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r161, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r510, %r76, 8388607;
	or.b32  	%r3078, %r510, 1065353216;
	mov.b32 	%f773, %r3078;
	add.s32 	%r511, %r76, -1073741824;
	and.b32  	%r3079, %r511, -8388608;
	setp.eq.s32 	%p224, %r3079, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r512, %r3079, 192937984;
	add.s32 	%r513, %r3078, %r512;
	mov.b32 	%f691, %r513;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3079, %r3079, %r512;
	mov.b32 	%r3078, %f773;
	setp.ne.s32 	%p225, %r3079, 0;
	setp.ne.s32 	%p226, %r3078, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r514, %f142;
	and.b32  	%r515, %r514, -2147483648;
	mov.b32 	%r516, %f774;
	or.b32  	%r517, %r515, %r516;
	mov.b32 	%f774, %r517;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r518, %f701;
	and.b32  	%r519, %r518, -2147483648;
	or.b32  	%r520, %r519, 1056964608;
	mov.b32 	%f702, %r520;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r521, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r522, %r521, 1;
	setp.eq.b32 	%p232, %r522, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r523, %r521, 2;
	setp.eq.s32 	%p233, %r523, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r524, %r521, 1;
	and.b32  	%r525, %r524, 2;
	setp.eq.s32 	%p234, %r525, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r312, 15;
	mov.u32 	%r186, 999999999;
	@%p238 bra 	$L__BB0_197;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r533, %r312, 6, %r4;
	cvt.u16.u32 	%rs15, %r533;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r534, %rs20;
	and.b32  	%r535, %r534, 255;
	mul.wide.u32 	%rd57, %r535, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.u32 	%r536, [%rd58];
	shl.b32 	%r537, %r536, 16;
	cvt.s32.s16 	%r85, %r536;
	shr.s32 	%r86, %r536, 16;
	or.b32  	%r538, %r537, 65535;
	setp.lt.u32 	%p239, %r538, 589823;
	setp.lt.u32 	%p240, %r536, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_145;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r542, %r86, 290;
	mad.lo.s32 	%r186, %r85, 33, %r542;
$L__BB0_197:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r340, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r341, %r340, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r448, %f489;
	or.b32  	%r342, %r341, 1056964608;
	mov.b32 	%r357, %f282;
	and.b32  	%r449, %r448, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r342;
	and.b32  	%r358, %r357, -2147483648;
	or.b32  	%r450, %r449, 1056964608;
	mov.b32 	%r464, %f542;
	mov.b32 	%r486, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r359, %r358, 1056964608;
	mov.b32 	%f490, %r450;
	and.b32  	%r465, %r464, -2147483648;
	and.b32  	%r487, %r486, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r359;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r466, %r465, 1056964608;
	or.b32  	%r488, %r487, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r466;
	mov.b32 	%f596, %r488;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r343, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r344, %r343, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r451, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r344, 1;
	cvt.rzi.s32.f32 	%r360, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r452, %r451, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r345, %r343, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r361, %r360, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r452, 1;
	cvt.rzi.s32.f32 	%r467, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r489, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r345, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r346, %r343, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r361, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r453, %r451, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r468, %r467, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r490, %r489, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r347, %r346, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r362, %r360, 2;
	setp.eq.s32 	%p151, %r453, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r454, %r451, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r468, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r490, 1;
	setp.eq.s32 	%p46, %r347, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r362, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r363, %r360, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r455, %r454, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r469, %r467, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r491, %r489, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r364, %r363, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r455, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r469, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r470, %r467, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r491, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r492, %r489, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r364, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r471, %r470, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r493, %r492, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r336, %f258;
	mov.b32 	%r339, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r471, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r493, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r335, %r339, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r444, %f520;
	mov.b32 	%r447, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r335;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r336;
	// end inline asm
	mov.b32 	%r387, %f17;
	mov.b32 	%r388, %f37;
	mov.b32 	%r390, %f16;
	mov.b32 	%r391, %f38;
	mov.b32 	%r431, %f83;
	mov.b32 	%r432, %f85;
	mov.b32 	%r434, %f755;
	mov.b32 	%r435, %f757;
	xor.b32  	%r443, %r447, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r444, %r443;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r445, %r447, %r444;
	// end inline asm
	mov.b32 	%r482, %f625;
	mov.b32 	%r481, %f103;
	mov.b32 	%r485, %f622;
	mov.b32 	%r484, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r480, %r482, %r481;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	mov.b32 	%r527, %f165;
	mov.b32 	%r528, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r526, %r528, %r527;
	// end inline asm
	mov.b32 	%r530, %f779;
	mov.b32 	%r531, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r529, %r531, %r530;
	// end inline asm
	mul.lo.s32 	%r544, %r160, 24;
	shl.b32 	%r545, %r4, 1;
	and.b32  	%r546, %r545, 2;
	shr.u32 	%r547, %r312, 3;
	bfe.u32 	%r548, %r312, 3, 1;
	or.b32  	%r549, %r546, %r548;
	and.b32  	%r550, %r547, 2;
	or.b32  	%r187, %r550, %r64;
	cvt.u16.u32 	%rs22, %r187;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 3;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r551, %rs26;
	and.b32  	%r552, %r551, 255;
	and.b16  	%rs27, %rs26, 255;
	mul.wide.u16 	%r553, %rs27, 8;
	add.s32 	%r554, %r544, %r2;
	or.b32  	%r555, %r554, %r549;
	add.s32 	%r556, %r555, %r553;
	mul.wide.u32 	%rd64, %r556, 4;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.u32 	%r188, [%rd65];
	or.b32  	%r557, %r549, 4;
	cvt.u64.u32 	%rd66, %r553;
	cvt.u64.u32 	%rd67, %r554;
	cvt.u64.u32 	%rd68, %r549;
	add.s64 	%rd69, %rd67, %rd68;
	add.s64 	%rd70, %rd69, %rd66;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd72, %rd2, %rd71;
	ld.global.u32 	%r189, [%rd72+16];
	cvt.u64.u32 	%rd73, %r544;
	cvt.u64.u32 	%rd74, %r2;
	add.s64 	%rd75, %rd74, %rd73;
	add.s64 	%rd76, %rd75, %rd68;
	add.s64 	%rd77, %rd76, %rd66;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.u32 	%r190, [%rd79+384];
	cvt.u64.u32 	%rd80, %r557;
	add.s64 	%rd81, %rd75, %rd80;
	add.s64 	%rd82, %rd81, %rd66;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r191, [%rd84+384];
	shl.b32 	%r558, %r303, 16;
	shl.b32 	%r559, %r307, 5;
	add.s32 	%r192, %r559, %r558;
	shl.b32 	%r560, %r312, 2;
	and.b32  	%r193, %r560, 16;
	shl.b32 	%r561, %r4, 2;
	or.b32  	%r194, %r561, %r547;
	shl.b32 	%r562, %r1, 5;
	and.b32  	%r563, %r560, 12;
	or.b32  	%r195, %r563, %r562;
	and.b32  	%r196, %r312, 4;
	bfe.s32 	%r564, %r312, 2, 1;
	shl.b32 	%r565, %r312, 4;
	and.b32  	%r566, %r173, 8;
	or.b32  	%r567, %r566, %r565;
	bfe.u32 	%r568, %r567, 3, 3;
	mul.lo.s32 	%r197, %r568, 260;
	cvt.u16.u32 	%rs28, %r312;
	and.b16  	%rs29, %rs28, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 12;
	mul.lo.s16 	%rs32, %rs31, 24;
	sub.s16 	%rs33, %rs28, %rs32;
	cvt.u32.u16 	%r569, %rs33;
	and.b32  	%r198, %r569, 255;
	add.s32 	%r570, %r4, 6;
	add.s32 	%r571, %r5, 192;
	and.b32  	%r572, %r571, 224;
	shr.u32 	%r573, %r570, 3;
	mad.lo.s32 	%r199, %r573, 260, %r572;
	add.s32 	%r574, %r4, 12;
	add.s32 	%r575, %r5, 128;
	and.b32  	%r576, %r575, 224;
	shr.u32 	%r577, %r574, 3;
	mad.lo.s32 	%r200, %r577, 260, %r576;
	add.s32 	%r578, %r4, 18;
	add.s32 	%r579, %r5, 64;
	and.b32  	%r580, %r579, 224;
	shr.u32 	%r581, %r578, 3;
	mad.lo.s32 	%r201, %r581, 260, %r580;
	or.b32  	%r202, %r5, 780;
	add.s32 	%r582, %r4, 30;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r203, %r583, 260, %r572;
	add.s32 	%r584, %r4, 36;
	shr.u32 	%r585, %r584, 3;
	mad.lo.s32 	%r204, %r585, 260, %r576;
	add.s32 	%r586, %r4, 42;
	shr.u32 	%r587, %r586, 3;
	mad.lo.s32 	%r205, %r587, 260, %r580;
	or.b32  	%r206, %r5, 1560;
	add.s32 	%r588, %r4, 54;
	shr.u32 	%r589, %r588, 3;
	mad.lo.s32 	%r207, %r589, 260, %r572;
	add.s32 	%r590, %r4, 60;
	bfe.u32 	%r591, %r590, 3, 3;
	mad.lo.s32 	%r208, %r591, 260, %r576;
	mul.lo.s32 	%r592, %r160, 870;
	shr.u32 	%r593, %r4, 1;
	cvt.u16.u32 	%rs34, %r593;
	and.b16  	%rs35, %rs34, 255;
	mul.lo.s16 	%rs36, %rs35, 171;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 3;
	sub.s16 	%rs39, %rs34, %rs38;
	cvt.u32.u16 	%r594, %rs39;
	and.b32  	%r209, %r594, 255;
	mad.lo.s32 	%r595, %r549, 33, %r592;
	mad.lo.s32 	%r210, %r552, 290, %r595;
	add.s32 	%r211, %r210, 132;
	setp.lt.u32 	%p243, %r312, 4;
	setp.eq.s32 	%p244, %r161, 1;
	setp.eq.s32 	%p245, %r161, 4;
	setp.eq.s32 	%p246, %r161, 5;
	selp.b32 	%r596, 0, 392, %p134;
	or.b32  	%r597, %r546, %r66;
	setp.eq.s32 	%p247, %r65, 0;
	selp.b32 	%r212, 0, 784, %p247;
	bfe.s32 	%r598, %r312, 3, 1;
	and.b32  	%r213, %r598, 98;
	and.b32  	%r214, %r564, 196;
	or.b32  	%r215, %r597, %r596;
	or.b32  	%r599, %r213, %r212;
	add.s32 	%r600, %r599, %r214;
	add.s32 	%r216, %r600, %r215;
	add.s32 	%r601, %r600, 1576;
	add.s32 	%r217, %r601, %r215;
	or.b32  	%r602, %r597, 4;
	or.b32  	%r218, %r602, %r596;
	add.s32 	%r219, %r600, %r218;
	add.s32 	%r220, %r601, %r218;
	selp.b32 	%r603, 8, 400, %p134;
	or.b32  	%r221, %r597, %r603;
	add.s32 	%r222, %r600, %r221;
	add.s32 	%r223, %r601, %r221;
	or.b32  	%r224, %r602, %r603;
	add.s32 	%r225, %r600, %r224;
	add.s32 	%r226, %r601, %r224;
	and.b32  	%r604, %r4, 1;
	neg.s32 	%r605, %r604;
	and.b32  	%r606, %r605, 392;
	and.b32  	%r607, %r598, 1576;
	mul.lo.s32 	%r608, %r66, 784;
	and.b32  	%r609, %r173, 6;
	shr.u32 	%r610, %r4, 2;
	bfe.s32 	%r611, %r4, 1, 1;
	and.b32  	%r612, %r611, 196;
	or.b32  	%r613, %r608, %r64;
	or.b32  	%r614, %r613, %r609;
	mad.lo.s32 	%r615, %r610, 98, %r614;
	add.s32 	%r616, %r615, %r606;
	add.s32 	%r617, %r616, %r607;
	add.s32 	%r227, %r617, %r612;
	add.s32 	%r228, %r227, 8;
	mul.lo.s32 	%r618, %r305, 786432;
	mad.lo.s32 	%r619, %r309, 192, %r618;
	cvt.u16.u32 	%rs40, %r194;
	and.b16  	%rs41, %rs40, 255;
	mul.lo.s16 	%rs42, %rs41, 171;
	shr.u16 	%rs43, %rs42, 9;
	and.b16  	%rs44, %rs43, 24;
	add.s16 	%rs45, %rs40, %rs44;
	shl.b16 	%rs46, %rs45, 3;
	cvt.u32.u16 	%r620, %rs46;
	and.b32  	%r621, %r620, 248;
	and.b32  	%r622, %r312, 7;
	or.b32  	%r623, %r622, %r2;
	cvt.s64.s32 	%rd23, %r619;
	add.s32 	%r624, %r210, %r209;
	mul.wide.u32 	%rd85, %r624, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd24, %rd86, %rd85;
	add.s32 	%r625, %r211, %r209;
	mul.wide.u32 	%rd87, %r625, 4;
	add.s64 	%rd25, %rd86, %rd87;
	cvt.u64.u32 	%rd88, %r210;
	cvt.u64.u16 	%rd89, %rs39;
	and.b64  	%rd90, %rd89, 255;
	add.s64 	%rd91, %rd88, %rd90;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd26, %rd86, %rd92;
	cvt.u64.u32 	%rd93, %r211;
	add.s64 	%rd94, %rd93, %rd90;
	shl.b64 	%rd95, %rd94, 2;
	add.s64 	%rd27, %rd86, %rd95;
	or.pred  	%p248, %p243, %p244;
	and.b32  	%r626, %r312, 24;
	setp.eq.s32 	%p249, %r626, 8;
	or.pred  	%p250, %p248, %p249;
	or.pred  	%p251, %p250, %p245;
	setp.eq.s32 	%p252, %r626, 24;
	or.pred  	%p253, %p246, %p252;
	selp.b32 	%r229, 1145324612, -286331154, %p250;
	or.pred  	%p1, %p251, %p253;
	selp.b32 	%r230, 1145324612, -286331154, %p248;
	add.s32 	%r627, %r161, -1;
	setp.lt.u32 	%p254, %r627, 3;
	or.pred  	%p2, %p243, %p254;
	setp.eq.s32 	%p255, %r626, 16;
	or.pred  	%p3, %p255, %p252;
	selp.b32 	%r231, 1145324612, -286331154, %p255;
	add.s32 	%r232, %r623, %r621;
	add.s32 	%r89, %r209, 3;
	and.b16  	%rs6, %rs39, 255;
	add.s32 	%r234, %r232, 786432;
	add.s32 	%r88, %r209, 27;
	or.b16  	%rs7, %rs6, 24;
	mov.u32 	%r90, 0;
	mov.u16 	%rs1, 0;
	selp.b32 	%r134, %r230, %r231, %p2;
	or.pred  	%p287, %p2, %p3;
	mov.u32 	%r112, %r90;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40270
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r157, %r90, 48;
	add.s32 	%r89, %r89, 48;
	add.s16 	%rs1, %rs1, 48;
	add.s32 	%r88, %r88, 48;
	setp.ne.s32 	%p301, %r90, 960;
	mov.u32 	%r90, %r157;
	@%p301 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r628, %r90, %r303;
	setp.lt.s32 	%p256, %r628, %r304;
	@%p256 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem889
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p257, %r196, 0;
	mul.hi.u32 	%r725, %r90, -1431655765;
	shr.u32 	%r726, %r725, 5;
	mul.lo.s32 	%r236, %r726, 48;
	add.s32 	%r727, %r236, %r194;
	cvt.u16.u32 	%rs47, %r727;
	shr.s16 	%rs48, %rs47, 15;
	shr.u16 	%rs49, %rs48, 6;
	add.s16 	%rs50, %rs47, %rs49;
	and.b16  	%rs51, %rs50, -1024;
	sub.s16 	%rs52, %rs47, %rs51;
	cvt.u32.u16 	%r728, %rs52;
	shl.b32 	%r729, %r728, 16;
	or.b32  	%r730, %r729, %r193;
	or.b32  	%r731, %r195, %r730;
	add.s32 	%r732, %r192, %r731;
	shr.s32 	%r733, %r732, 31;
	shr.u32 	%r734, %r733, 6;
	add.s32 	%r735, %r732, %r734;
	shr.s32 	%r736, %r735, 26;
	setp.lt.s32 	%p258, %r732, 0;
	and.b32  	%r737, %r735, -67108864;
	setp.ne.s32 	%p259, %r737, %r732;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r738, 1, 0, %p260;
	sub.s32 	%r739, %r738, %r736;
	shl.b32 	%r740, %r739, 26;
	add.s32 	%r741, %r740, %r732;
	mul.wide.s32 	%rd96, %r741, 4;
	add.s64 	%rd97, %rd3, %rd96;
	ld.global.v4.u32 	{%r742, %r743, %r744, %r745}, [%rd97];
	add.s16 	%rs53, %rs47, 24;
	shr.s16 	%rs54, %rs53, 15;
	shr.u16 	%rs55, %rs54, 6;
	add.s16 	%rs56, %rs53, %rs55;
	and.b16  	%rs57, %rs56, -1024;
	sub.s16 	%rs58, %rs53, %rs57;
	cvt.u32.u16 	%r746, %rs58;
	shl.b32 	%r747, %r746, 16;
	or.b32  	%r748, %r747, %r193;
	or.b32  	%r749, %r195, %r748;
	add.s32 	%r750, %r192, %r749;
	shr.s32 	%r751, %r750, 31;
	shr.u32 	%r752, %r751, 6;
	add.s32 	%r753, %r750, %r752;
	shr.s32 	%r754, %r753, 26;
	setp.lt.s32 	%p261, %r750, 0;
	and.b32  	%r755, %r753, -67108864;
	setp.ne.s32 	%p262, %r755, %r750;
	and.pred  	%p263, %p261, %p262;
	selp.u32 	%r756, 1, 0, %p263;
	sub.s32 	%r757, %r756, %r754;
	shl.b32 	%r758, %r757, 26;
	add.s32 	%r759, %r758, %r750;
	mul.wide.s32 	%rd98, %r759, 4;
	add.s64 	%rd99, %rd3, %rd98;
	ld.global.v4.u32 	{%r760, %r761, %r762, %r763}, [%rd99];
	selp.b32 	%r764, %r744, %r742, %p257;
	shfl.sync.bfly.b32	%r765, %r764, 4, 31, -1;
	selp.b32 	%r631, %r742, %r765, %p257;
	selp.b32 	%r636, %r765, %r744, %p257;
	selp.b32 	%r766, %r745, %r743, %p257;
	shfl.sync.bfly.b32	%r767, %r766, 4, 31, -1;
	selp.b32 	%r639, %r743, %r767, %p257;
	selp.b32 	%r644, %r767, %r745, %p257;
	selp.b32 	%r768, %r762, %r760, %p257;
	shfl.sync.bfly.b32	%r769, %r768, 4, 31, -1;
	selp.b32 	%r647, %r760, %r769, %p257;
	selp.b32 	%r652, %r769, %r762, %p257;
	selp.b32 	%r770, %r763, %r761, %p257;
	shfl.sync.bfly.b32	%r771, %r770, 4, 31, -1;
	selp.b32 	%r655, %r761, %r771, %p257;
	selp.b32 	%r660, %r771, %r763, %p257;
	shl.b32 	%r632, %r636, 4;
	mov.u32 	%r630, 252645135;
	// begin inline asm
	lop3.b32 %r662, %r630, %r631, %r632, 202;
	// end inline asm
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r678, %r630, %r635, %r636, 202;
	// end inline asm
	shl.b32 	%r640, %r644, 4;
	// begin inline asm
	lop3.b32 %r670, %r630, %r639, %r640, 202;
	// end inline asm
	shr.u32 	%r643, %r639, 4;
	// begin inline asm
	lop3.b32 %r686, %r630, %r643, %r644, 202;
	// end inline asm
	shl.b32 	%r648, %r652, 4;
	// begin inline asm
	lop3.b32 %r663, %r630, %r647, %r648, 202;
	// end inline asm
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r679, %r630, %r651, %r652, 202;
	// end inline asm
	shl.b32 	%r656, %r660, 4;
	// begin inline asm
	lop3.b32 %r671, %r630, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r687, %r630, %r659, %r660, 202;
	// end inline asm
	mov.u32 	%r664, 25152;
	// begin inline asm
	prmt.b32 %r694, %r662, %r663, %r664;
	// end inline asm
	mov.u32 	%r668, 29521;
	// begin inline asm
	prmt.b32 %r710, %r662, %r663, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r670, %r671, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r670, %r671, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r678, %r679, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r678, %r679, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r686, %r687, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r686, %r687, %r668;
	// end inline asm
	mov.u32 	%r720, 21520;
	// begin inline asm
	prmt.b32 %r693, %r694, %r695, %r720;
	// end inline asm
	mov.u32 	%r724, 30258;
	// begin inline asm
	prmt.b32 %r697, %r694, %r695, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r724;
	// end inline asm
	mul.hi.s16 	%rs59, %rs47, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs47, %rs63;
	cvt.s32.s16 	%r772, %rs64;
	add.s32 	%r773, %r197, %r772;
	mul.wide.s32 	%rd100, %r773, 4;
	add.s64 	%rd102, %rd86, %rd100;
	st.shared.u32 	[%rd102], %r693;
	add.s32 	%r774, %r773, 128;
	mul.wide.u32 	%rd103, %r774, 4;
	add.s64 	%rd104, %rd86, %rd103;
	st.shared.u32 	[%rd104], %r701;
	add.s32 	%r775, %r773, 64;
	mul.wide.u32 	%rd105, %r775, 4;
	add.s64 	%rd106, %rd86, %rd105;
	st.shared.u32 	[%rd106], %r697;
	add.s32 	%r776, %r773, 192;
	mul.wide.u32 	%rd107, %r776, 4;
	add.s64 	%rd108, %rd86, %rd107;
	st.shared.u32 	[%rd108], %r705;
	add.s32 	%r777, %r773, 32;
	mul.wide.u32 	%rd109, %r777, 4;
	add.s64 	%rd110, %rd86, %rd109;
	st.shared.u32 	[%rd110], %r709;
	add.s32 	%r778, %r773, 160;
	mul.wide.u32 	%rd111, %r778, 4;
	add.s64 	%rd112, %rd86, %rd111;
	st.shared.u32 	[%rd112], %r717;
	add.s32 	%r779, %r773, 96;
	mul.wide.u32 	%rd113, %r779, 4;
	add.s64 	%rd114, %rd86, %rd113;
	st.shared.u32 	[%rd114], %r713;
	add.s32 	%r780, %r773, 224;
	mul.wide.u32 	%rd115, %r780, 4;
	add.s64 	%rd116, %rd86, %rd115;
	st.shared.u32 	[%rd116], %r721;
	bar.sync 	0;
	add.s32 	%r781, %r236, %r198;
	cvt.u16.u32 	%rs65, %r781;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r237, %rs71;
	add.s32 	%r782, %r5, %r237;
	mul.wide.s32 	%rd117, %r782, 4;
	add.s64 	%rd118, %rd86, %rd117;
	ld.shared.u32 	%r238, [%rd118];
	add.s32 	%r783, %r199, %r237;
	mul.wide.s32 	%rd119, %r783, 4;
	add.s64 	%rd120, %rd86, %rd119;
	ld.shared.u32 	%r239, [%rd120];
	add.s32 	%r784, %r200, %r237;
	mul.wide.u32 	%rd121, %r784, 4;
	add.s64 	%rd122, %rd86, %rd121;
	ld.shared.u32 	%r240, [%rd122];
	add.s32 	%r785, %r201, %r237;
	mul.wide.u32 	%rd123, %r785, 4;
	add.s64 	%rd124, %rd86, %rd123;
	ld.shared.u32 	%r241, [%rd124];
	add.s32 	%r786, %r202, %r237;
	mul.wide.u32 	%rd125, %r786, 4;
	add.s64 	%rd126, %rd86, %rd125;
	ld.shared.u32 	%r242, [%rd126];
	add.s32 	%r787, %r203, %r237;
	mul.wide.u32 	%rd127, %r787, 4;
	add.s64 	%rd128, %rd86, %rd127;
	ld.shared.u32 	%r243, [%rd128];
	add.s32 	%r788, %r204, %r237;
	mul.wide.u32 	%rd129, %r788, 4;
	add.s64 	%rd130, %rd86, %rd129;
	ld.shared.u32 	%r244, [%rd130];
	add.s32 	%r789, %r205, %r237;
	mul.wide.u32 	%rd131, %r789, 4;
	add.s64 	%rd132, %rd86, %rd131;
	ld.shared.u32 	%r245, [%rd132];
	add.s32 	%r790, %r206, %r237;
	mul.wide.u32 	%rd133, %r790, 4;
	add.s64 	%rd134, %rd86, %rd133;
	ld.shared.u32 	%r246, [%rd134];
	add.s32 	%r791, %r207, %r237;
	mul.wide.u32 	%rd135, %r791, 4;
	add.s64 	%rd136, %rd86, %rd135;
	ld.shared.u32 	%r247, [%rd136];
	add.s32 	%r792, %r208, %r237;
	mul.wide.s32 	%rd137, %r792, 4;
	add.s64 	%rd138, %rd86, %rd137;
	ld.shared.u32 	%r248, [%rd138];
	bar.sync 	0;
	shfl.sync.idx.b32	%r249, %r186, 0, 31, -1;
	shfl.sync.idx.b32	%r250, %r186, 1, 31, -1;
	shfl.sync.idx.b32	%r251, %r186, 2, 31, -1;
	shfl.sync.idx.b32	%r252, %r186, 3, 31, -1;
	shfl.sync.idx.b32	%r253, %r186, 4, 31, -1;
	shfl.sync.idx.b32	%r254, %r186, 5, 31, -1;
	shfl.sync.idx.b32	%r255, %r186, 6, 31, -1;
	shfl.sync.idx.b32	%r256, %r186, 7, 31, -1;
	shfl.sync.idx.b32	%r257, %r186, 8, 31, -1;
	shfl.sync.idx.b32	%r258, %r186, 9, 31, -1;
	shfl.sync.idx.b32	%r259, %r186, 10, 31, -1;
	shfl.sync.idx.b32	%r260, %r186, 11, 31, -1;
	shfl.sync.idx.b32	%r261, %r186, 12, 31, -1;
	shfl.sync.idx.b32	%r262, %r186, 13, 31, -1;
	shfl.sync.idx.b32	%r263, %r186, 14, 31, -1;
	shfl.sync.idx.b32	%r264, %r186, 15, 31, -1;
	setp.eq.s32 	%p264, %r249, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2309
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r793, %r249, %r237;
	mul.wide.s32 	%rd139, %r793, 4;
	add.s64 	%rd141, %rd86, %rd139;
	st.shared.u32 	[%rd141], %r238;
	setp.eq.s32 	%p265, %r250, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2377
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r794, %r250, %r237;
	mul.wide.s32 	%rd142, %r794, 4;
	add.s64 	%rd144, %rd86, %rd142;
	st.shared.u32 	[%rd144], %r239;
	setp.eq.s32 	%p266, %r251, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2445
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r795, %r251, %r237;
	mul.wide.s32 	%rd145, %r795, 4;
	add.s64 	%rd147, %rd86, %rd145;
	st.shared.u32 	[%rd147], %r240;
	setp.eq.s32 	%p267, %r252, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2513
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r796, %r252, %r237;
	mul.wide.s32 	%rd148, %r796, 4;
	add.s64 	%rd150, %rd86, %rd148;
	st.shared.u32 	[%rd150], %r241;
	setp.eq.s32 	%p268, %r253, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2581
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r797, %r253, %r237;
	mul.wide.s32 	%rd151, %r797, 4;
	add.s64 	%rd153, %rd86, %rd151;
	st.shared.u32 	[%rd153], %r242;
	setp.eq.s32 	%p269, %r254, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2649
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r798, %r254, %r237;
	mul.wide.s32 	%rd154, %r798, 4;
	add.s64 	%rd156, %rd86, %rd154;
	st.shared.u32 	[%rd156], %r243;
	setp.eq.s32 	%p270, %r255, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2717
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r799, %r255, %r237;
	mul.wide.s32 	%rd157, %r799, 4;
	add.s64 	%rd159, %rd86, %rd157;
	st.shared.u32 	[%rd159], %r244;
	setp.eq.s32 	%p271, %r256, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2785
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r800, %r256, %r237;
	mul.wide.s32 	%rd160, %r800, 4;
	add.s64 	%rd162, %rd86, %rd160;
	st.shared.u32 	[%rd162], %r245;
	setp.eq.s32 	%p272, %r257, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2853
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r801, %r257, %r237;
	mul.wide.s32 	%rd163, %r801, 4;
	add.s64 	%rd165, %rd86, %rd163;
	st.shared.u32 	[%rd165], %r246;
	setp.eq.s32 	%p273, %r258, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2921
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r802, %r258, %r237;
	mul.wide.s32 	%rd166, %r802, 4;
	add.s64 	%rd168, %rd86, %rd166;
	st.shared.u32 	[%rd168], %r247;
	setp.eq.s32 	%p274, %r259, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem2990
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p275, %r4, 3;
	selp.b32 	%r803, 0, %r248, %p275;
	add.s32 	%r804, %r259, %r237;
	mul.wide.s32 	%rd169, %r804, 4;
	add.s64 	%rd171, %rd86, %rd169;
	st.shared.u32 	[%rd171], %r803;
	setp.eq.s32 	%p276, %r260, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3058
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r805, %r260, %r237;
	mul.wide.s32 	%rd172, %r805, 4;
	add.s64 	%rd174, %rd86, %rd172;
	mov.u32 	%r806, 0;
	st.shared.u32 	[%rd174], %r806;
	setp.eq.s32 	%p277, %r261, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3125
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r807, %r261, %r237;
	mul.wide.s32 	%rd175, %r807, 4;
	add.s64 	%rd177, %rd86, %rd175;
	st.shared.u32 	[%rd177], %r806;
	setp.eq.s32 	%p278, %r262, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3192
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r262, %r237;
	mul.wide.s32 	%rd178, %r809, 4;
	add.s64 	%rd180, %rd86, %rd178;
	st.shared.u32 	[%rd180], %r806;
	setp.eq.s32 	%p279, %r263, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3259
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r811, %r263, %r237;
	mul.wide.s32 	%rd181, %r811, 4;
	add.s64 	%rd183, %rd86, %rd181;
	st.shared.u32 	[%rd183], %r806;
	setp.eq.s32 	%p280, %r264, 999999999;
	@%p280 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3326
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p281, %r187, 3;
	add.s32 	%r814, %r264, %r237;
	mul.wide.s32 	%rd184, %r814, 4;
	add.s64 	%rd186, %rd86, %rd184;
	st.shared.u32 	[%rd186], %r806;
	bar.sync 	0;
	mov.u32 	%r92, %r806;
	mov.u32 	%r93, %r806;
	mov.u32 	%r94, %r806;
	mov.u32 	%r95, %r806;
	mov.u32 	%r96, %r806;
	mov.u32 	%r97, %r806;
	mov.u32 	%r98, %r806;
	mov.u32 	%r99, %r806;
	mov.u32 	%r100, %r806;
	mov.u32 	%r101, %r806;
	mov.u32 	%r102, %r806;
	mov.u32 	%r103, %r806;
	mov.u32 	%r104, %r806;
	mov.u32 	%r105, %r806;
	mov.u32 	%r106, %r806;
	mov.u32 	%r107, %r806;
	@%p281 bra 	$L__BB0_162;
// %bb.216:                             // %oksrem3395
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r265, %r236, %r209;
	ld.shared.u32 	%r92, [%rd24];
	ld.shared.u32 	%r93, [%rd25];
	ld.shared.u32 	%r94, [%rd26+12];
	ld.shared.u32 	%r95, [%rd27+12];
	ld.shared.u32 	%r96, [%rd26+24];
	ld.shared.u32 	%r97, [%rd27+24];
	ld.shared.u32 	%r98, [%rd26+36];
	ld.shared.u32 	%r99, [%rd27+36];
	add.s32 	%r815, %r265, 12;
	mul.hi.u32 	%r816, %r815, -1431655765;
	shr.u32 	%r817, %r816, 4;
	mul.lo.s32 	%r818, %r817, 24;
	sub.s32 	%r819, %r815, %r818;
	add.s32 	%r820, %r210, %r819;
	mul.wide.u32 	%rd187, %r820, 4;
	add.s64 	%rd189, %rd86, %rd187;
	ld.shared.u32 	%r100, [%rd189];
	add.s32 	%r821, %r211, %r819;
	mul.wide.u32 	%rd190, %r821, 4;
	add.s64 	%rd191, %rd86, %rd190;
	ld.shared.u32 	%r101, [%rd191];
	ld.shared.u32 	%r102, [%rd26+60];
	ld.shared.u32 	%r103, [%rd27+60];
	cvt.u16.u32 	%rs72, %r265;
	add.s16 	%rs73, %rs72, 18;
	mul.hi.s16 	%rs74, %rs73, 10923;
	shr.u16 	%rs75, %rs74, 15;
	shr.s16 	%rs76, %rs74, 2;
	add.s16 	%rs77, %rs76, %rs75;
	mul.lo.s16 	%rs78, %rs77, 24;
	sub.s16 	%rs79, %rs73, %rs78;
	cvt.s32.s16 	%r822, %rs79;
	add.s32 	%r823, %r210, %r822;
	mul.wide.s32 	%rd192, %r823, 4;
	add.s64 	%rd193, %rd86, %rd192;
	ld.shared.u32 	%r104, [%rd193];
	add.s32 	%r824, %r211, %r822;
	mul.wide.u32 	%rd194, %r824, 4;
	add.s64 	%rd195, %rd86, %rd194;
	ld.shared.u32 	%r105, [%rd195];
	add.s16 	%rs80, %rs72, 21;
	mul.hi.s16 	%rs81, %rs80, 10923;
	shr.u16 	%rs82, %rs81, 15;
	shr.s16 	%rs83, %rs81, 2;
	add.s16 	%rs84, %rs83, %rs82;
	mul.lo.s16 	%rs85, %rs84, 24;
	sub.s16 	%rs86, %rs80, %rs85;
	cvt.s32.s16 	%r825, %rs86;
	add.s32 	%r826, %r210, %r825;
	mul.wide.s32 	%rd196, %r826, 4;
	add.s64 	%rd197, %rd86, %rd196;
	ld.shared.u32 	%r106, [%rd197];
	add.s32 	%r827, %r211, %r825;
	mul.wide.u32 	%rd198, %r827, 4;
	add.s64 	%rd199, %rd86, %rd198;
	ld.shared.u32 	%r107, [%rd199];
$L__BB0_162:                            // %L10556
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r829, %r112, 786432;
	add.s32 	%r111, %r232, %r829;
	add.s32 	%r3100, %r234, %r829;
	mov.u16 	%rs2, %rs1;
	mov.u32 	%r113, %r806;
$L__BB0_163:                            // %L10574
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r3104, %r3100;
	setp.eq.s32 	%p282, %r113, 0;
	selp.b32 	%r1222, %r92, 0, %p282;
	setp.eq.s32 	%p283, %r113, 6;
	selp.b32 	%r1223, %r96, %r1222, %p283;
	setp.eq.s32 	%p284, %r113, 12;
	selp.b32 	%r1224, %r100, %r1223, %p284;
	setp.eq.s32 	%p285, %r113, 18;
	selp.b32 	%r1225, %r104, %r1224, %p285;
	selp.b32 	%r1226, %r93, 0, %p282;
	selp.b32 	%r1227, %r97, %r1226, %p283;
	selp.b32 	%r1228, %r101, %r1227, %p284;
	selp.b32 	%r1229, %r105, %r1228, %p285;
	selp.b32 	%r1230, %r94, 0, %p282;
	selp.b32 	%r1231, %r98, %r1230, %p283;
	selp.b32 	%r1232, %r102, %r1231, %p284;
	selp.b32 	%r1233, %r106, %r1232, %p285;
	selp.b32 	%r1234, %r95, 0, %p282;
	selp.b32 	%r1235, %r99, %r1234, %p283;
	selp.b32 	%r1236, %r103, %r1235, %p284;
	selp.b32 	%r1237, %r107, %r1236, %p285;
	mov.u16 	%rs124, 25600;
	// begin inline asm
	mov.b32 %r835, {%rs124, %rs124};
	// end inline asm
	mov.u16 	%rs126, 21504;
	// begin inline asm
	mov.b32 %r846, {%rs126, %rs126};
	// end inline asm
	xor.b32  	%r834, %r1225, -2004318072;
	mov.u32 	%r971, 983055;
	// begin inline asm
	lop3.b32 %r832, %r971, %r834, %r835, 202;
	// end inline asm
	mov.u16 	%rs130, 18432;
	// begin inline asm
	mov.b32 %r836, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r837, %r835, %r836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r840, %r832, %r837;
	// end inline asm
	mov.u32 	%r982, 15728880;
	// begin inline asm
	lop3.b32 %r843, %r982, %r834, %r846, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r847, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r848, %r846, %r847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r851, %r843, %r848;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs126, %rs126};
	// end inline asm
	xor.b32  	%r880, %r1229, -2004318072;
	// begin inline asm
	lop3.b32 %r878, %r971, %r880, %r881, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r882, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r883, %r881, %r882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r886, %r878, %r883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r889, %r982, %r880, %r892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r894, %r892, %r893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r897, %r889, %r894;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs126, %rs126};
	// end inline asm
	xor.b32  	%r926, %r1233, -2004318072;
	// begin inline asm
	lop3.b32 %r924, %r971, %r926, %r927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r928, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r929, %r927, %r928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r932, %r924, %r929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r935, %r982, %r926, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r940, %r938, %r939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r943, %r935, %r940;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs126, %rs126};
	// end inline asm
	xor.b32  	%r972, %r1237, -2004318072;
	// begin inline asm
	lop3.b32 %r970, %r971, %r972, %r973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r975, %r973, %r974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r978, %r970, %r975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r981, %r982, %r972, %r984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r986, %r984, %r985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r989, %r981, %r986;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r840;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1014, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r886;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1017, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r851;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1020, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r191;
    mov.b32 {%r2re, %r2im}, %r897;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1023, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r932;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1026, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r978;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1029, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1032, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r191;
    mov.b32 {%r2re, %r2im}, %r989;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1035, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1038, %r1039}, {%r334, %r337}, {%r1014}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1045, %r1046}, {%r334, %r337}, {%r1017}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1052, %r1053}, {%r334, %r337}, {%r1020}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1059, %r1060}, {%r334, %r337}, {%r1023}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1066, %r1067}, {%r334, %r337}, {%r1026}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1073, %r1074}, {%r334, %r337}, {%r1029}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1080, %r1081}, {%r334, %r337}, {%r1032}, {%r806, %r806};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1088}, {%r334, %r337}, {%r1035}, {%r806, %r806};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_164;
$L__BB0_217:                            // %pass4742
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1094, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r386, %r1038, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r386, %r1045, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r386, %r1052, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r386, %r1059, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r386, %r1066, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1139, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r1139, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r386, %r1073, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1148, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r1148, %r1081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r386, %r1080, %r1150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1157, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1159, %r1157, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r386, %r1087, %r1159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r389, %r1038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r386, %r1039, %r1166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r389, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r386, %r1046, %r1173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r389, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r386, %r1053, %r1180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r389, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r386, %r1060, %r1187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r389, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r386, %r1067, %r1194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r389, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r386, %r1074, %r1201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r389, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r386, %r1081, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r389, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r386, %r1088, %r1215;
	// end inline asm
	setp.gt.u32 	%p286, %r312, 11;
	mov.u32 	%r1308, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1311, %r1312}, {%r430, %r433}, {%r1099, %r1169}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r430, %r433}, {%r1108, %r1176}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r430, %r433}, {%r1117, %r1183}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r430, %r433}, {%r1126, %r1190}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r430, %r433}, {%r1135, %r1197}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1351, %r1352}, {%r430, %r433}, {%r1144, %r1204}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r430, %r433}, {%r1153, %r1211}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1367, %r1368}, {%r430, %r433}, {%r1162, %r1218}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1311, %r1312, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1311, %r1312, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1319, %r1320, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1319, %r1320, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1327, %r1328, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1327, %r1328, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1335, %r1336, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1335, %r1336, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1343, %r1344, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1343, %r1344, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1351, %r1352, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1351, %r1352, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1359, %r1360, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1359, %r1360, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1367, %r1368, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1367, %r1368, %r724;
	// end inline asm
	add.s16 	%rs135, %rs6, %rs2;
	mul.hi.s16 	%rs136, %rs135, 10923;
	shr.u16 	%rs137, %rs136, 15;
	add.s16 	%rs138, %rs136, %rs137;
	mul.lo.s16 	%rs139, %rs138, 6;
	sub.s16 	%rs140, %rs135, %rs139;
	mul.wide.s16 	%r1374, %rs140, 16;
	add.s32 	%r1375, %r216, %r1374;
	mul.wide.s32 	%rd202, %r1375, 4;
	add.s64 	%rd28, %rd86, %rd202;
	st.shared.u32 	[%rd28], %r282;
	add.s32 	%r1376, %r217, %r1374;
	mul.wide.u32 	%rd204, %r1376, 4;
	add.s64 	%rd29, %rd86, %rd204;
	st.shared.u32 	[%rd29], %r283;
	add.s32 	%r1377, %r219, %r1374;
	mul.wide.s32 	%rd205, %r1377, 4;
	add.s64 	%rd30, %rd86, %rd205;
	st.shared.u32 	[%rd30], %r284;
	add.s32 	%r1378, %r220, %r1374;
	mul.wide.u32 	%rd206, %r1378, 4;
	add.s64 	%rd31, %rd86, %rd206;
	st.shared.u32 	[%rd31], %r285;
	add.s32 	%r1379, %r222, %r1374;
	mul.wide.s32 	%rd207, %r1379, 4;
	add.s64 	%rd32, %rd86, %rd207;
	st.shared.u32 	[%rd32], %r286;
	add.s32 	%r1380, %r223, %r1374;
	mul.wide.u32 	%rd208, %r1380, 4;
	add.s64 	%rd33, %rd86, %rd208;
	st.shared.u32 	[%rd33], %r287;
	add.s32 	%r1381, %r225, %r1374;
	mul.wide.s32 	%rd209, %r1381, 4;
	add.s64 	%rd34, %rd86, %rd209;
	st.shared.u32 	[%rd34], %r288;
	add.s32 	%r1382, %r226, %r1374;
	mul.wide.u32 	%rd210, %r1382, 4;
	add.s64 	%rd35, %rd86, %rd210;
	st.shared.u32 	[%rd35], %r289;
	add.s32 	%r1383, %r89, %r113;
	mul.hi.u32 	%r1384, %r1383, -1431655765;
	shr.u32 	%r1385, %r1384, 2;
	mul.lo.s32 	%r1386, %r1385, 6;
	sub.s32 	%r1387, %r1383, %r1386;
	shl.b32 	%r1388, %r1387, 4;
	add.s32 	%r1389, %r216, %r1388;
	mul.wide.u32 	%rd211, %r1389, 4;
	add.s64 	%rd36, %rd86, %rd211;
	st.shared.u32 	[%rd36], %r290;
	cvt.u64.u32 	%rd212, %r1388;
	cvt.u64.u32 	%rd213, %r215;
	cvt.u64.u32 	%rd214, %r214;
	cvt.u64.u32 	%rd215, %r213;
	cvt.u64.u32 	%rd216, %r212;
	add.s64 	%rd217, %rd216, %rd215;
	add.s64 	%rd218, %rd217, %rd214;
	add.s64 	%rd37, %rd218, %rd213;
	add.s64 	%rd219, %rd37, %rd212;
	shl.b64 	%rd220, %rd219, 2;
	add.s64 	%rd38, %rd86, %rd220;
	st.shared.u32 	[%rd38+6304], %r291;
	add.s32 	%r1390, %r219, %r1388;
	mul.wide.u32 	%rd221, %r1390, 4;
	add.s64 	%rd39, %rd86, %rd221;
	st.shared.u32 	[%rd39], %r292;
	cvt.u64.u32 	%rd222, %r218;
	add.s64 	%rd40, %rd218, %rd222;
	add.s64 	%rd223, %rd40, %rd212;
	shl.b64 	%rd224, %rd223, 2;
	add.s64 	%rd41, %rd86, %rd224;
	st.shared.u32 	[%rd41+6304], %r293;
	add.s32 	%r1391, %r222, %r1388;
	mul.wide.u32 	%rd225, %r1391, 4;
	add.s64 	%rd42, %rd86, %rd225;
	st.shared.u32 	[%rd42], %r294;
	cvt.u64.u32 	%rd226, %r221;
	add.s64 	%rd43, %rd218, %rd226;
	add.s64 	%rd227, %rd43, %rd212;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd44, %rd86, %rd228;
	st.shared.u32 	[%rd44+6304], %r295;
	add.s32 	%r1392, %r225, %r1388;
	mul.wide.u32 	%rd229, %r1392, 4;
	add.s64 	%rd45, %rd86, %rd229;
	st.shared.u32 	[%rd45], %r296;
	cvt.u64.u32 	%rd230, %r224;
	add.s64 	%rd46, %rd218, %rd230;
	add.s64 	%rd231, %rd46, %rd212;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd47, %rd86, %rd232;
	st.shared.u32 	[%rd47+6304], %r297;
	@%p286 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7080
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r282;
	st.shared.u32 	[%rd29], %r283;
	st.shared.u32 	[%rd30], %r284;
	st.shared.u32 	[%rd31], %r285;
	st.shared.u32 	[%rd32], %r286;
	st.shared.u32 	[%rd33], %r287;
	st.shared.u32 	[%rd34], %r288;
	st.shared.u32 	[%rd35], %r289;
	st.shared.u32 	[%rd36], %r290;
	st.shared.u32 	[%rd38+6304], %r291;
	st.shared.u32 	[%rd39], %r292;
	st.shared.u32 	[%rd41+6304], %r293;
	st.shared.u32 	[%rd42], %r294;
	st.shared.u32 	[%rd44+6304], %r295;
	st.shared.u32 	[%rd45], %r296;
	st.shared.u32 	[%rd47+6304], %r297;
$L__BB0_219:                            // %L19961
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs141, %rs2, 10923;
	shr.u16 	%rs142, %rs141, 15;
	add.s16 	%rs143, %rs141, %rs142;
	mul.lo.s16 	%rs144, %rs143, 6;
	sub.s16 	%rs145, %rs2, %rs144;
	mul.wide.s16 	%r1439, %rs145, 16;
	add.s32 	%r1440, %r227, %r1439;
	mul.wide.s32 	%rd233, %r1440, 4;
	add.s64 	%rd235, %rd86, %rd233;
	ld.shared.u32 	%r1397, [%rd235];
	add.s32 	%r1441, %r228, %r1439;
	mul.wide.s32 	%rd236, %r1441, 4;
	add.s64 	%rd237, %rd86, %rd236;
	ld.shared.u32 	%r1404, [%rd237];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r442, %r445}, {%r1397}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1400, %r1401}, {%r442, %r445}, {%r1404}, {%r1308, %r1308};
	// end inline asm
	@%p287 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_220;
$L__BB0_165:                            // %pass9511
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1407, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r1407, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r480, %r1393, %r1409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1416, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r1416, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r480, %r1400, %r1418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1425, %r483, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r480, %r1394, %r1425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r483, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r480, %r1401, %r1432;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1461, %r1464}, {%r526, %r529}, {%r1412, %r1428}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1468, %r1472}, {%r526, %r529}, {%r1421, %r1435}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r1461, %r1461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r1464, %r1464, %r1460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1467, %r1468, %r1468, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r1472, %r1472, %r1467;
	// end inline asm
	mov.u32 	%r1891, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1475, %r1891, %r1471, %r1308;
	// end inline asm
	add.s32 	%r1894, %r90, %r113;
	add.s32 	%r1895, %r1894, 1;
	mul.hi.u32 	%r1896, %r1895, -1431655765;
	shr.u32 	%r1897, %r1896, 2;
	mul.lo.s32 	%r1898, %r1897, 6;
	sub.s32 	%r1899, %r1895, %r1898;
	shl.b32 	%r1900, %r1899, 4;
	add.s32 	%r1901, %r227, %r1900;
	mul.wide.u32 	%rd240, %r1901, 4;
	add.s64 	%rd242, %rd86, %rd240;
	ld.shared.u32 	%r1483, [%rd242];
	add.s32 	%r1902, %r228, %r1900;
	mul.wide.u32 	%rd243, %r1902, 4;
	add.s64 	%rd244, %rd86, %rd243;
	ld.shared.u32 	%r1490, [%rd244];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1500, %r1497}, {%r442, %r445}, {%r1483}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r442, %r445}, {%r1490}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1493, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r1493, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r480, %r1500, %r1495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r480, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1511, %r483, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r480, %r1497, %r1511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r483, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r480, %r1506, %r1518;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1544, %r1547}, {%r526, %r529}, {%r1498, %r1514}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1551, %r1555}, {%r526, %r529}, {%r1507, %r1521}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r1544, %r1544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r1547, %r1547, %r1543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1550, %r1551, %r1551, %r1546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r1555, %r1555, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1891, %r1554, %r1475;
	// end inline asm
	add.s32 	%r1903, %r1894, 2;
	mul.hi.u32 	%r1904, %r1903, -1431655765;
	shr.u32 	%r1905, %r1904, 2;
	mul.lo.s32 	%r1906, %r1905, 6;
	sub.s32 	%r1907, %r1903, %r1906;
	shl.b32 	%r1908, %r1907, 4;
	add.s32 	%r1909, %r227, %r1908;
	mul.wide.u32 	%rd245, %r1909, 4;
	add.s64 	%rd246, %rd86, %rd245;
	ld.shared.u32 	%r1566, [%rd246];
	add.s32 	%r1910, %r228, %r1908;
	mul.wide.u32 	%rd247, %r1910, 4;
	add.s64 	%rd248, %rd86, %rd247;
	ld.shared.u32 	%r1573, [%rd248];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1583, %r1580}, {%r442, %r445}, {%r1566}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1592, %r1589}, {%r442, %r445}, {%r1573}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1576, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1578, %r1576, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r480, %r1583, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1585, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1587, %r1585, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r480, %r1592, %r1587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1594, %r483, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r480, %r1580, %r1594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r483, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r480, %r1589, %r1601;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1627, %r1630}, {%r526, %r529}, {%r1581, %r1597}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1634, %r1638}, {%r526, %r529}, {%r1590, %r1604}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1626, %r1627, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r1630, %r1630, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1633, %r1634, %r1634, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r1638, %r1638, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1891, %r1637, %r1558;
	// end inline asm
	add.s32 	%r1911, %r1894, 3;
	mul.hi.u32 	%r1912, %r1911, -1431655765;
	shr.u32 	%r1913, %r1912, 2;
	mul.lo.s32 	%r1914, %r1913, 6;
	sub.s32 	%r1915, %r1911, %r1914;
	shl.b32 	%r1916, %r1915, 4;
	add.s32 	%r1917, %r227, %r1916;
	mul.wide.u32 	%rd249, %r1917, 4;
	add.s64 	%rd250, %rd86, %rd249;
	ld.shared.u32 	%r1649, [%rd250];
	add.s32 	%r1918, %r228, %r1916;
	mul.wide.u32 	%rd251, %r1918, 4;
	add.s64 	%rd252, %rd86, %rd251;
	ld.shared.u32 	%r1656, [%rd252];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1666, %r1663}, {%r442, %r445}, {%r1649}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1675, %r1672}, {%r442, %r445}, {%r1656}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1659, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1661, %r1659, %r1663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r480, %r1666, %r1661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r480, %r1675, %r1670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r483, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r480, %r1663, %r1677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r483, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r480, %r1672, %r1684;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1710, %r1713}, {%r526, %r529}, {%r1664, %r1680}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1717, %r1721}, {%r526, %r529}, {%r1673, %r1687}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1710, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r1713, %r1713, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r1717, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r1721, %r1721, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1891, %r1720, %r1641;
	// end inline asm
	add.s32 	%r1919, %r1894, 4;
	mul.hi.u32 	%r1920, %r1919, -1431655765;
	shr.u32 	%r1921, %r1920, 2;
	mul.lo.s32 	%r1922, %r1921, 6;
	sub.s32 	%r1923, %r1919, %r1922;
	shl.b32 	%r1924, %r1923, 4;
	add.s32 	%r1925, %r227, %r1924;
	mul.wide.u32 	%rd253, %r1925, 4;
	add.s64 	%rd254, %rd86, %rd253;
	ld.shared.u32 	%r1732, [%rd254];
	add.s32 	%r1926, %r228, %r1924;
	mul.wide.u32 	%rd255, %r1926, 4;
	add.s64 	%rd256, %rd86, %rd255;
	ld.shared.u32 	%r1739, [%rd256];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1749, %r1746}, {%r442, %r445}, {%r1732}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1758, %r1755}, {%r442, %r445}, {%r1739}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1742, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r1742, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r480, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1751, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r1751, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r480, %r1758, %r1753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r483, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r480, %r1746, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r483, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r480, %r1755, %r1767;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1793, %r1796}, {%r526, %r529}, {%r1747, %r1763}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1800, %r1804}, {%r526, %r529}, {%r1756, %r1770}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r1793, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1804, %r1804, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1891, %r1803, %r1724;
	// end inline asm
	add.s32 	%r1927, %r1894, 5;
	mul.hi.u32 	%r1928, %r1927, -1431655765;
	shr.u32 	%r1929, %r1928, 2;
	mul.lo.s32 	%r1930, %r1929, 6;
	sub.s32 	%r1931, %r1927, %r1930;
	shl.b32 	%r1932, %r1931, 4;
	add.s32 	%r1933, %r227, %r1932;
	mul.wide.u32 	%rd257, %r1933, 4;
	add.s64 	%rd258, %rd86, %rd257;
	ld.shared.u32 	%r1815, [%rd258];
	add.s32 	%r1934, %r228, %r1932;
	mul.wide.u32 	%rd259, %r1934, 4;
	add.s64 	%rd260, %rd86, %rd259;
	ld.shared.u32 	%r1822, [%rd260];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1832, %r1829}, {%r442, %r445}, {%r1815}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1841, %r1838}, {%r442, %r445}, {%r1822}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r480, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1834, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r1834, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r480, %r1841, %r1836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1843, %r483, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r480, %r1829, %r1843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r483, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r480, %r1838, %r1850;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1876, %r1879}, {%r526, %r529}, {%r1830, %r1846}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1883, %r1887}, {%r526, %r529}, {%r1839, %r1853}, {%r1308, %r1308}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1876, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1879, %r1879, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1887, %r1887, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1886, %r1807;
	// end inline asm
	cvt.u64.u32 	%rd261, %r111;
	add.s64 	%rd262, %rd261, %rd23;
	mul.hi.s64 	%rd263, %rd262, 3074457345618258603;
	shr.u64 	%rd264, %rd263, 63;
	shr.s64 	%rd265, %rd263, 27;
	add.s64 	%rd266, %rd265, %rd264;
	setp.lt.s64 	%p288, %rd262, 0;
	mul.lo.s64 	%rd267, %rd266, 805306368;
	setp.ne.s64 	%p289, %rd267, %rd262;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd268, -1, 0, %p290;
	add.s64 	%rd269, %rd266, %rd268;
	mul.lo.s64 	%rd270, %rd269, -805306368;
	add.s64 	%rd271, %rd270, %rd262;
	shl.b64 	%rd272, %rd271, 2;
	add.s64 	%rd273, %rd4, %rd272;
	st.global.u32 	[%rd273], %r1890;
	add.s32 	%r112, %r112, 1;
	bar.sync 	0;
	add.s32 	%r113, %r113, 6;
	add.s32 	%r111, %r111, 786432;
	add.s16 	%rs2, %rs2, 6;
	setp.eq.s32 	%p291, %r113, 24;
	add.s32 	%r3100, %r3104, 786432;
	@%p291 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L25423.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs208, %rs1;
	mov.u32 	%r3106, %r1308;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L34810
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs200, %rs208, 24;
	mul.hi.s16 	%rs201, %rs200, 10923;
	shr.u16 	%rs202, %rs201, 15;
	add.s16 	%rs203, %rs201, %rs202;
	mul.lo.s16 	%rs204, %rs203, 6;
	sub.s16 	%rs205, %rs200, %rs204;
	mul.wide.s16 	%r3001, %rs205, 16;
	add.s32 	%r3002, %r227, %r3001;
	mul.wide.s32 	%rd296, %r3002, 4;
	add.s64 	%rd298, %rd86, %rd296;
	ld.shared.u32 	%r2507, [%rd298];
	add.s32 	%r3003, %r228, %r3001;
	mul.wide.s32 	%rd299, %r3003, 4;
	add.s64 	%rd300, %rd86, %rd299;
	ld.shared.u32 	%r2514, [%rd300];
	mov.u32 	%r2508, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2524, %r2521}, {%r442, %r445}, {%r2507}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2533, %r2530}, {%r442, %r445}, {%r2514}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2517, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2519, %r2517, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2522, %r480, %r2524, %r2519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2526, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r2526, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r480, %r2533, %r2528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r483, %r2524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r480, %r2521, %r2535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r483, %r2533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r480, %r2530, %r2542;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2568, %r2571}, {%r526, %r529}, {%r2522, %r2538}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2575, %r2579}, {%r526, %r529}, {%r2531, %r2545}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r2568, %r2568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r2571, %r2571, %r2567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2574, %r2575, %r2575, %r2570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2578, %r2579, %r2579, %r2574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2582, %r1891, %r2578, %r2508;
	// end inline asm
	add.s32 	%r3004, %r90, %r3106;
	add.s32 	%r3005, %r3004, 25;
	mul.hi.u32 	%r3006, %r3005, -1431655765;
	shr.u32 	%r3007, %r3006, 2;
	mul.lo.s32 	%r3008, %r3007, 6;
	sub.s32 	%r3009, %r3005, %r3008;
	shl.b32 	%r3010, %r3009, 4;
	add.s32 	%r3011, %r227, %r3010;
	mul.wide.u32 	%rd301, %r3011, 4;
	add.s64 	%rd302, %rd86, %rd301;
	ld.shared.u32 	%r2590, [%rd302];
	add.s32 	%r3012, %r228, %r3010;
	mul.wide.u32 	%rd303, %r3012, 4;
	add.s64 	%rd304, %rd86, %rd303;
	ld.shared.u32 	%r2597, [%rd304];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2607, %r2604}, {%r442, %r445}, {%r2590}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2616, %r2613}, {%r442, %r445}, {%r2597}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2600, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2602, %r2600, %r2604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2605, %r480, %r2607, %r2602;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2609, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2611, %r2609, %r2613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2614, %r480, %r2616, %r2611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2618, %r483, %r2607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2621, %r480, %r2604, %r2618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2625, %r483, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2628, %r480, %r2613, %r2625;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2651, %r2654}, {%r526, %r529}, {%r2605, %r2621}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2658, %r2662}, {%r526, %r529}, {%r2614, %r2628}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2651, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2653, %r2654, %r2654, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r2658, %r2658, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2661, %r2662, %r2662, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2665, %r1891, %r2661, %r2582;
	// end inline asm
	add.s32 	%r3013, %r3004, 26;
	mul.hi.u32 	%r3014, %r3013, -1431655765;
	shr.u32 	%r3015, %r3014, 2;
	mul.lo.s32 	%r3016, %r3015, 6;
	sub.s32 	%r3017, %r3013, %r3016;
	shl.b32 	%r3018, %r3017, 4;
	add.s32 	%r3019, %r227, %r3018;
	mul.wide.u32 	%rd305, %r3019, 4;
	add.s64 	%rd306, %rd86, %rd305;
	ld.shared.u32 	%r2673, [%rd306];
	add.s32 	%r3020, %r228, %r3018;
	mul.wide.u32 	%rd307, %r3020, 4;
	add.s64 	%rd308, %rd86, %rd307;
	ld.shared.u32 	%r2680, [%rd308];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2690, %r2687}, {%r442, %r445}, {%r2673}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2699, %r2696}, {%r442, %r445}, {%r2680}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r480, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r480, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r483, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r480, %r2687, %r2701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r483, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r480, %r2696, %r2708;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2734, %r2737}, {%r526, %r529}, {%r2688, %r2704}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2741, %r2745}, {%r526, %r529}, {%r2697, %r2711}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r2734, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r2737, %r2737, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r2741, %r2741, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2744, %r2745, %r2745, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r1891, %r2744, %r2665;
	// end inline asm
	add.s32 	%r3021, %r3004, 27;
	mul.hi.u32 	%r3022, %r3021, -1431655765;
	shr.u32 	%r3023, %r3022, 2;
	mul.lo.s32 	%r3024, %r3023, 6;
	sub.s32 	%r3025, %r3021, %r3024;
	shl.b32 	%r3026, %r3025, 4;
	add.s32 	%r3027, %r227, %r3026;
	mul.wide.u32 	%rd309, %r3027, 4;
	add.s64 	%rd310, %rd86, %rd309;
	ld.shared.u32 	%r2756, [%rd310];
	add.s32 	%r3028, %r228, %r3026;
	mul.wide.u32 	%rd311, %r3028, 4;
	add.s64 	%rd312, %rd86, %rd311;
	ld.shared.u32 	%r2763, [%rd312];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2773, %r2770}, {%r442, %r445}, {%r2756}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2782, %r2779}, {%r442, %r445}, {%r2763}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2766, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2768, %r2766, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r480, %r2773, %r2768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2775, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2777, %r2775, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r480, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r483, %r2773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r480, %r2770, %r2784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r483, %r2782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r480, %r2779, %r2791;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2817, %r2820}, {%r526, %r529}, {%r2771, %r2787}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2824, %r2828}, {%r526, %r529}, {%r2780, %r2794}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r2817, %r2817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r2820, %r2820, %r2816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r2824, %r2824, %r2819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2827, %r2828, %r2828, %r2823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r1891, %r2827, %r2748;
	// end inline asm
	add.s32 	%r3029, %r3004, 28;
	mul.hi.u32 	%r3030, %r3029, -1431655765;
	shr.u32 	%r3031, %r3030, 2;
	mul.lo.s32 	%r3032, %r3031, 6;
	sub.s32 	%r3033, %r3029, %r3032;
	shl.b32 	%r3034, %r3033, 4;
	add.s32 	%r3035, %r227, %r3034;
	mul.wide.u32 	%rd313, %r3035, 4;
	add.s64 	%rd314, %rd86, %rd313;
	ld.shared.u32 	%r2839, [%rd314];
	add.s32 	%r3036, %r228, %r3034;
	mul.wide.u32 	%rd315, %r3036, 4;
	add.s64 	%rd316, %rd86, %rd315;
	ld.shared.u32 	%r2846, [%rd316];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2856, %r2853}, {%r442, %r445}, {%r2839}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2865, %r2862}, {%r442, %r445}, {%r2846}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2849, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r2849, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r480, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2858, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2858, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r480, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r483, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r480, %r2853, %r2867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r483, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r480, %r2862, %r2874;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2903}, {%r526, %r529}, {%r2854, %r2870}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2907, %r2911}, {%r526, %r529}, {%r2863, %r2877}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2900, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r2903, %r2903, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r1891, %r2910, %r2831;
	// end inline asm
	add.s32 	%r3037, %r3004, 29;
	mul.hi.u32 	%r3038, %r3037, -1431655765;
	shr.u32 	%r3039, %r3038, 2;
	mul.lo.s32 	%r3040, %r3039, 6;
	sub.s32 	%r3041, %r3037, %r3040;
	shl.b32 	%r3042, %r3041, 4;
	add.s32 	%r3043, %r227, %r3042;
	mul.wide.u32 	%rd317, %r3043, 4;
	add.s64 	%rd318, %rd86, %rd317;
	ld.shared.u32 	%r2922, [%rd318];
	add.s32 	%r3044, %r228, %r3042;
	mul.wide.u32 	%rd319, %r3044, 4;
	add.s64 	%rd320, %rd86, %rd319;
	ld.shared.u32 	%r2929, [%rd320];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2939, %r2936}, {%r442, %r445}, {%r2922}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2948, %r2945}, {%r442, %r445}, {%r2929}, {%r2508, %r2508};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2932, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r2932, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r480, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2941, %r483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r2941, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r480, %r2948, %r2943;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2950, %r483, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r480, %r2936, %r2950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r483, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r480, %r2945, %r2957;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2983, %r2986}, {%r526, %r529}, {%r2937, %r2953}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2990, %r2994}, {%r526, %r529}, {%r2946, %r2960}, {%r2508, %r2508}, %r134, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2982, %r2983, %r2983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r2986, %r2986, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2989, %r2990, %r2990, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r2994, %r2994, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r1891, %r2993, %r2914;
	// end inline asm
	cvt.u64.u32 	%rd321, %r3104;
	add.s64 	%rd322, %rd321, %rd23;
	mul.hi.s64 	%rd323, %rd322, 3074457345618258603;
	shr.u64 	%rd324, %rd323, 63;
	shr.s64 	%rd325, %rd323, 27;
	add.s64 	%rd326, %rd325, %rd324;
	setp.lt.s64 	%p297, %rd322, 0;
	mul.lo.s64 	%rd327, %rd326, 805306368;
	setp.ne.s64 	%p298, %rd327, %rd322;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd328, -1, 0, %p299;
	add.s64 	%rd329, %rd326, %rd328;
	mul.lo.s64 	%rd330, %rd329, -805306368;
	add.s64 	%rd331, %rd330, %rd322;
	shl.b64 	%rd332, %rd331, 2;
	add.s64 	%rd333, %rd4, %rd332;
	st.global.u32 	[%rd333], %r2997;
	add.s32 	%r112, %r112, 1;
	bar.sync 	0;
	add.s32 	%r3106, %r3106, 6;
	add.s32 	%r3104, %r3104, 786432;
	add.s16 	%rs208, %rs208, 6;
	setp.ne.s32 	%p300, %r3106, 24;
	@%p300 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_169;
$L__BB0_167:                            // %L25423
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p292, %r312, 12;
	setp.eq.s32 	%p293, %r3106, 0;
	selp.b32 	%r2464, %r92, 0, %p293;
	setp.eq.s32 	%p294, %r3106, 6;
	selp.b32 	%r2465, %r96, %r2464, %p294;
	setp.eq.s32 	%p295, %r3106, 12;
	selp.b32 	%r2466, %r100, %r2465, %p295;
	setp.eq.s32 	%p296, %r3106, 18;
	selp.b32 	%r2467, %r104, %r2466, %p296;
	selp.b32 	%r2468, %r93, 0, %p293;
	selp.b32 	%r2469, %r97, %r2468, %p294;
	selp.b32 	%r2470, %r101, %r2469, %p295;
	selp.b32 	%r2471, %r105, %r2470, %p296;
	selp.b32 	%r2472, %r94, 0, %p293;
	selp.b32 	%r2473, %r98, %r2472, %p294;
	selp.b32 	%r2474, %r102, %r2473, %p295;
	selp.b32 	%r2475, %r106, %r2474, %p296;
	selp.b32 	%r2476, %r95, 0, %p293;
	selp.b32 	%r2477, %r99, %r2476, %p294;
	selp.b32 	%r2478, %r103, %r2477, %p295;
	selp.b32 	%r2479, %r107, %r2478, %p296;
	// begin inline asm
	mov.b32 %r1963, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs126, %rs126};
	// end inline asm
	shr.u32 	%r2480, %r2467, 8;
	xor.b32  	%r1973, %r2480, 8947848;
	// begin inline asm
	lop3.b32 %r1960, %r971, %r1973, %r1963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1964, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1965, %r1963, %r1964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1968, %r1960, %r1965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1971, %r982, %r1973, %r1974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1975, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1976, %r1974, %r1975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1979, %r1971, %r1976;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs126, %rs126};
	// end inline asm
	shr.u32 	%r2481, %r2471, 8;
	xor.b32  	%r2019, %r2481, 8947848;
	// begin inline asm
	lop3.b32 %r2006, %r971, %r2019, %r2009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2011, %r2009, %r2010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2014, %r2006, %r2011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2017, %r982, %r2019, %r2020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2021, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2022, %r2020, %r2021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2025, %r2017, %r2022;
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs126, %rs126};
	// end inline asm
	shr.u32 	%r2482, %r2475, 8;
	xor.b32  	%r2065, %r2482, 8947848;
	// begin inline asm
	lop3.b32 %r2052, %r971, %r2065, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2057, %r2055, %r2056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2060, %r2052, %r2057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2063, %r982, %r2065, %r2066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2067, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2068, %r2066, %r2067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2071, %r2063, %r2068;
	// end inline asm
	// begin inline asm
	mov.b32 %r2101, {%rs124, %rs124};
	// end inline asm
	// begin inline asm
	mov.b32 %r2112, {%rs126, %rs126};
	// end inline asm
	shr.u32 	%r2483, %r2479, 8;
	xor.b32  	%r2111, %r2483, 8947848;
	// begin inline asm
	lop3.b32 %r2098, %r971, %r2111, %r2101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2102, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2103, %r2101, %r2102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2106, %r2098, %r2103;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2109, %r982, %r2111, %r2112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2113, {%rs130, %rs130};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2114, %r2112, %r2113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2117, %r2109, %r2114;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r1968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2120, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r2014;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2123, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r1979;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2126, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r191;
    mov.b32 {%r2re, %r2im}, %r2025;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2129, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r2060;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2132, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r189;
    mov.b32 {%r2re, %r2im}, %r2106;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2135, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r190;
    mov.b32 {%r2re, %r2im}, %r2071;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2138, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r191;
    mov.b32 {%r2re, %r2im}, %r2117;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2141, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2207, %r2204}, {%r334, %r337}, {%r2120}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2216, %r2213}, {%r334, %r337}, {%r2123}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r334, %r337}, {%r2126}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r334, %r337}, {%r2129}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2243, %r2240}, {%r334, %r337}, {%r2132}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2252, %r2249}, {%r334, %r337}, {%r2135}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2261, %r2258}, {%r334, %r337}, {%r2138}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2270, %r2267}, {%r334, %r337}, {%r2141}, {%r1308, %r1308};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2200, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2200, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r386, %r2207, %r2202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2209, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r2209, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2214, %r386, %r2216, %r2211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r386, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r386, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2236, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r2236, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r386, %r2243, %r2238;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2245, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r2245, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r386, %r2252, %r2247;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2254, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r2254, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r386, %r2261, %r2256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2263, %r389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r2263, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r386, %r2270, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r389, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r386, %r2204, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r389, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r386, %r2213, %r2279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r389, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r386, %r2222, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r389, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r386, %r2231, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r389, %r2243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r386, %r2240, %r2300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2307, %r389, %r2252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2310, %r386, %r2249, %r2307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2314, %r389, %r2261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2317, %r386, %r2258, %r2314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r389, %r2270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2324, %r386, %r2267, %r2321;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2401, %r2402}, {%r430, %r433}, {%r2205, %r2275}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2409, %r2410}, {%r430, %r433}, {%r2214, %r2282}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2417, %r2418}, {%r430, %r433}, {%r2223, %r2289}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2425, %r2426}, {%r430, %r433}, {%r2232, %r2296}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2433, %r2434}, {%r430, %r433}, {%r2241, %r2303}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2441, %r2442}, {%r430, %r433}, {%r2250, %r2310}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2449, %r2450}, {%r430, %r433}, {%r2259, %r2317}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2457, %r2458}, {%r430, %r433}, {%r2268, %r2324}, {%r1308, %r1308}, %r229, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2401, %r2402, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2401, %r2402, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2409, %r2410, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2417, %r2418, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2425, %r2426, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2433, %r2434, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2441, %r2442, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2441, %r2442, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2449, %r2450, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2452, %r2449, %r2450, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2456, %r2457, %r2458, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2460, %r2457, %r2458, %r724;
	// end inline asm
	add.s16 	%rs194, %rs7, %rs208;
	mul.hi.s16 	%rs195, %rs194, 10923;
	shr.u16 	%rs196, %rs195, 15;
	add.s16 	%rs197, %rs195, %rs196;
	mul.lo.s16 	%rs198, %rs197, 6;
	sub.s16 	%rs199, %rs194, %rs198;
	mul.wide.s16 	%r2484, %rs199, 16;
	add.s32 	%r2485, %r216, %r2484;
	mul.wide.s32 	%rd274, %r2485, 4;
	add.s64 	%rd7, %rd86, %rd274;
	st.shared.u32 	[%rd7], %r2400;
	add.s32 	%r2486, %r217, %r2484;
	mul.wide.u32 	%rd276, %r2486, 4;
	add.s64 	%rd8, %rd86, %rd276;
	st.shared.u32 	[%rd8], %r2404;
	add.s32 	%r2487, %r219, %r2484;
	mul.wide.s32 	%rd277, %r2487, 4;
	add.s64 	%rd9, %rd86, %rd277;
	st.shared.u32 	[%rd9], %r2408;
	add.s32 	%r2488, %r220, %r2484;
	mul.wide.u32 	%rd278, %r2488, 4;
	add.s64 	%rd10, %rd86, %rd278;
	st.shared.u32 	[%rd10], %r2412;
	add.s32 	%r2489, %r222, %r2484;
	mul.wide.s32 	%rd279, %r2489, 4;
	add.s64 	%rd11, %rd86, %rd279;
	st.shared.u32 	[%rd11], %r2416;
	add.s32 	%r2490, %r223, %r2484;
	mul.wide.u32 	%rd280, %r2490, 4;
	add.s64 	%rd12, %rd86, %rd280;
	st.shared.u32 	[%rd12], %r2420;
	add.s32 	%r2491, %r225, %r2484;
	mul.wide.s32 	%rd281, %r2491, 4;
	add.s64 	%rd13, %rd86, %rd281;
	st.shared.u32 	[%rd13], %r2424;
	add.s32 	%r2492, %r226, %r2484;
	mul.wide.u32 	%rd282, %r2492, 4;
	add.s64 	%rd14, %rd86, %rd282;
	st.shared.u32 	[%rd14], %r2428;
	add.s32 	%r2493, %r88, %r3106;
	mul.hi.u32 	%r2494, %r2493, -1431655765;
	shr.u32 	%r2495, %r2494, 2;
	mul.lo.s32 	%r2496, %r2495, 6;
	sub.s32 	%r2497, %r2493, %r2496;
	shl.b32 	%r2498, %r2497, 4;
	add.s32 	%r2499, %r216, %r2498;
	mul.wide.u32 	%rd283, %r2499, 4;
	add.s64 	%rd15, %rd86, %rd283;
	st.shared.u32 	[%rd15], %r2432;
	cvt.u64.u32 	%rd284, %r2498;
	add.s64 	%rd285, %rd37, %rd284;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd16, %rd86, %rd286;
	st.shared.u32 	[%rd16+6304], %r2436;
	add.s32 	%r2500, %r219, %r2498;
	mul.wide.u32 	%rd287, %r2500, 4;
	add.s64 	%rd17, %rd86, %rd287;
	st.shared.u32 	[%rd17], %r2440;
	add.s64 	%rd288, %rd40, %rd284;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd18, %rd86, %rd289;
	st.shared.u32 	[%rd18+6304], %r2444;
	add.s32 	%r2501, %r222, %r2498;
	mul.wide.u32 	%rd290, %r2501, 4;
	add.s64 	%rd19, %rd86, %rd290;
	st.shared.u32 	[%rd19], %r2448;
	add.s64 	%rd291, %rd43, %rd284;
	shl.b64 	%rd292, %rd291, 2;
	add.s64 	%rd20, %rd86, %rd292;
	st.shared.u32 	[%rd20+6304], %r2452;
	add.s32 	%r2502, %r225, %r2498;
	mul.wide.u32 	%rd293, %r2502, 4;
	add.s64 	%rd21, %rd86, %rd293;
	st.shared.u32 	[%rd21], %r2456;
	add.s64 	%rd294, %rd46, %rd284;
	shl.b64 	%rd295, %rd294, 2;
	add.s64 	%rd22, %rd86, %rd295;
	st.shared.u32 	[%rd22+6304], %r2460;
	@%p292 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_168;
$L__BB0_221:                            // %oksrem13962
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2400;
	st.shared.u32 	[%rd8], %r2404;
	st.shared.u32 	[%rd9], %r2408;
	st.shared.u32 	[%rd10], %r2412;
	st.shared.u32 	[%rd11], %r2416;
	st.shared.u32 	[%rd12], %r2420;
	st.shared.u32 	[%rd13], %r2424;
	st.shared.u32 	[%rd14], %r2428;
	st.shared.u32 	[%rd15], %r2432;
	st.shared.u32 	[%rd16+6304], %r2436;
	st.shared.u32 	[%rd17], %r2440;
	st.shared.u32 	[%rd18+6304], %r2444;
	st.shared.u32 	[%rd19], %r2448;
	st.shared.u32 	[%rd20+6304], %r2452;
	st.shared.u32 	[%rd21], %r2456;
	st.shared.u32 	[%rd22+6304], %r2460;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40282
	mov.u32 	%r3045, 0;
	st.global.u32 	[%rd6], %r3045;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd200, exception3604;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9506
	mov.u64 	%rd238, exception3604;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5125
	mov.u32 	%r3061, 5;
	st.global.u32 	[%rd6], %r3061;
	mov.u64 	%rd364, exception3564;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5281
	mov.u32 	%r3060, 5;
	st.global.u32 	[%rd6], %r3060;
	mov.u64 	%rd362, exception3564;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5437
	mov.u32 	%r3059, 5;
	st.global.u32 	[%rd6], %r3059;
	mov.u64 	%rd360, exception3564;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5593
	mov.u32 	%r3058, 5;
	st.global.u32 	[%rd6], %r3058;
	mov.u64 	%rd358, exception3564;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5749
	mov.u32 	%r3057, 5;
	st.global.u32 	[%rd6], %r3057;
	mov.u64 	%rd356, exception3564;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5905
	mov.u32 	%r3056, 5;
	st.global.u32 	[%rd6], %r3056;
	mov.u64 	%rd354, exception3564;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6061
	mov.u32 	%r3055, 5;
	st.global.u32 	[%rd6], %r3055;
	mov.u64 	%rd352, exception3564;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6217
	mov.u32 	%r3054, 5;
	st.global.u32 	[%rd6], %r3054;
	mov.u64 	%rd350, exception3564;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6373
	mov.u32 	%r3053, 5;
	st.global.u32 	[%rd6], %r3053;
	mov.u64 	%rd348, exception3564;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6529
	mov.u32 	%r3052, 5;
	st.global.u32 	[%rd6], %r3052;
	mov.u64 	%rd346, exception3564;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6711
	mov.u32 	%r3051, 5;
	st.global.u32 	[%rd6], %r3051;
	mov.u64 	%rd344, exception3564;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6867
	mov.u32 	%r3050, 5;
	st.global.u32 	[%rd6], %r3050;
	mov.u64 	%rd342, exception3564;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7023
	mov.u32 	%r3049, 5;
	st.global.u32 	[%rd6], %r3049;
	mov.u64 	%rd340, exception3564;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7179
	mov.u32 	%r3048, 5;
	st.global.u32 	[%rd6], %r3048;
	mov.u64 	%rd338, exception3564;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7335
	mov.u32 	%r3047, 5;
	st.global.u32 	[%rd6], %r3047;
	mov.u64 	%rd336, exception3564;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7491
	mov.u32 	%r3046, 5;
	st.global.u32 	[%rd6], %r3046;
	mov.u64 	%rd334, exception3564;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3063, 2;
	st.global.u32 	[%rd6], %r3063;
	mov.u64 	%rd368, exception3564;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3062, 3;
	st.global.u32 	[%rd6], %r3062;
	mov.u64 	%rd366, exception3564;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd54, exception1;
	cvta.global.u64 	%rd55, %rd54;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd55;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd53, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r312, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd59, __unnamed_1;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd53;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r539, [retval0+0];
	} // callseq 49
	mov.u32 	%r541, 4;
	st.global.u32 	[%rd6], %r541;
	mov.u64 	%rd62, exception3564;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
