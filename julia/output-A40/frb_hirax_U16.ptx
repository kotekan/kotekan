// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2337[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2385[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<299>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3357>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<268>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r214, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r223, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r223, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r224, %r3, %r1;
	or.b32  	%r225, %r224, %r5;
	mul.wide.u32 	%rd67, %r225, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r226, 1;
	st.global.u32 	[%rd6], %r226;
	setp.gt.u32 	%p3, %r215, 4095;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r216, %r215;
	setp.gt.s32 	%p5, %r216, 8191;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r216, %r215;
	and.b32  	%r227, %r6, 63;
	setp.ne.s32 	%p7, %r227, 0;
	setp.gt.u32 	%p8, %r217, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r218, %r217;
	setp.lt.s32 	%p11, %r218, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r228, %r218, %r217;
	mul.hi.s32 	%r229, %r6, 715827883;
	shr.u32 	%r230, %r229, 31;
	shr.s32 	%r231, %r229, 2;
	add.s32 	%r232, %r231, %r230;
	setp.eq.s32 	%p13, %r228, %r232;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r219, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r220, %r219;
	setp.gt.s32 	%p16, %r220, 512;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r221, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r220, %r219;
	and.b32  	%r233, %r7, 15;
	setp.ne.s32 	%p18, %r233, 0;
	setp.lt.s32 	%p19, %r221, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r222, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r222, %r221;
	setp.gt.s32 	%p22, %r222, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r234, %r222, %r221;
	and.b32  	%r235, %r234, 15;
	setp.eq.s32 	%p24, %r235, 0;
	setp.eq.s32 	%p25, %r234, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_13;
$L__BB0_158:                            // %pass162
	and.b32  	%r128, %r1, 3;
	shr.u32 	%r129, %r1, 2;
	mul.lo.s32 	%r236, %r128, %r129;
	and.b32  	%r237, %r236, 7;
	cvt.rn.f32.s32 	%f185, %r237;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p294, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_170;
// %bb.159:
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_160;
$L__BB0_166:
	mov.b32 	%r131, %f750;
	and.b32  	%r238, %r131, 8388607;
	or.b32  	%r3352, %r238, 1065353216;
	mov.b32 	%f745, %r3352;
	add.s32 	%r239, %r131, -1073741824;
	and.b32  	%r3353, %r239, -8388608;
	setp.eq.s32 	%p34, %r3353, 0;
	@%p34 bra 	$L__BB0_169;
// %bb.167:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_168:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r240, %r3353, 192937984;
	add.s32 	%r241, %r3352, %r240;
	mov.b32 	%f197, %r241;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3353, %r3353, %r240;
	mov.b32 	%r3352, %f745;
	setp.ne.s32 	%p35, %r3353, 0;
	setp.ne.s32 	%p36, %r3352, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_168;
$L__BB0_169:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_170;
$L__BB0_160:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_165;
// %bb.161:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_163;
// %bb.162:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_165;
$L__BB0_163:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_165;
// %bb.164:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_165:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_170:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r242, %f151;
	and.b32  	%r138, %r242, -2147483648;
	@%p39 bra 	$L__BB0_172;
// %bb.171:
	mov.b32 	%r243, %f746;
	or.b32  	%r244, %r138, %r243;
	mov.b32 	%f746, %r244;
$L__BB0_172:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r1, 1;
	and.b32  	%r259, %r141, 2;
	mul.lo.s32 	%r142, %r259, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p295, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p295 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r260, %r9, 8388607;
	or.b32  	%r3318, %r260, 1065353216;
	mov.b32 	%f705, %r3318;
	add.s32 	%r261, %r9, -1073741824;
	and.b32  	%r3319, %r261, -8388608;
	setp.eq.s32 	%p54, %r3319, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r262, %r3319, 192937984;
	add.s32 	%r263, %r3318, %r262;
	mov.b32 	%f251, %r263;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3319, %r3319, %r262;
	mov.b32 	%r3318, %f705;
	setp.ne.s32 	%p55, %r3319, 0;
	setp.ne.s32 	%p56, %r3318, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r264, %f168;
	and.b32  	%r16, %r264, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r265, %f706;
	or.b32  	%r266, %r16, %r265;
	mov.b32 	%f706, %r266;
$L__BB0_27:                             // %__nv_fmodf.exit2337
	add.s32 	%r275, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r275;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p296, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p296 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r276, %r18, 8388607;
	or.b32  	%r3320, %r276, 1065353216;
	mov.b32 	%f709, %r3320;
	add.s32 	%r277, %r18, -1073741824;
	and.b32  	%r3321, %r277, -8388608;
	setp.eq.s32 	%p74, %r3321, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r278, %r3321, 192937984;
	add.s32 	%r279, %r3320, %r278;
	mov.b32 	%f303, %r279;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3321, %r3321, %r278;
	mov.b32 	%r3320, %f709;
	setp.ne.s32 	%p75, %r3321, 0;
	setp.ne.s32 	%p76, %r3320, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r280, %f18;
	and.b32  	%r25, %r280, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r281, %f710;
	or.b32  	%r282, %r25, %r281;
	mov.b32 	%f710, %r282;
$L__BB0_41:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r297, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r297;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p297, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p297 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r298, %r30, 8388607;
	or.b32  	%r3322, %r298, 1065353216;
	mov.b32 	%f713, %r3322;
	add.s32 	%r299, %r30, -1073741824;
	and.b32  	%r3323, %r299, -8388608;
	setp.eq.s32 	%p94, %r3323, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r3323, 192937984;
	add.s32 	%r301, %r3322, %r300;
	mov.b32 	%f357, %r301;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3323, %r3323, %r300;
	mov.b32 	%r3322, %f713;
	setp.ne.s32 	%p95, %r3323, 0;
	setp.ne.s32 	%p96, %r3322, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r302, %f35;
	and.b32  	%r37, %r302, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r303, %f714;
	or.b32  	%r304, %r37, %r303;
	mov.b32 	%f714, %r304;
$L__BB0_55:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r305, %f367;
	and.b32  	%r306, %r305, -2147483648;
	or.b32  	%r307, %r306, 1056964608;
	mov.b32 	%f368, %r307;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r308, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r309, %r308, 1;
	setp.eq.b32 	%p102, %r309, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r310, %r308, 2;
	setp.eq.s32 	%p103, %r310, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r311, %r308, 1;
	and.b32  	%r312, %r311, 2;
	setp.eq.s32 	%p104, %r312, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r313, %r28, %r129;
	and.b32  	%r314, %r313, 3;
	cvt.rn.f32.s32 	%f397, %r314;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p298, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p298 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r315, %r39, 8388607;
	or.b32  	%r3324, %r315, 1065353216;
	mov.b32 	%f717, %r3324;
	add.s32 	%r316, %r39, -1073741824;
	and.b32  	%r3325, %r316, -8388608;
	setp.eq.s32 	%p114, %r3325, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r317, %r3325, 192937984;
	add.s32 	%r318, %r3324, %r317;
	mov.b32 	%f409, %r318;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3325, %r3325, %r317;
	mov.b32 	%r3324, %f717;
	setp.ne.s32 	%p115, %r3325, 0;
	setp.ne.s32 	%p116, %r3324, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r319, %f54;
	and.b32  	%r46, %r319, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r320, %f718;
	or.b32  	%r321, %r46, %r320;
	mov.b32 	%f718, %r321;
$L__BB0_69:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r322, %f419;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f420, %r324;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r325, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r326, %r325, 1;
	setp.eq.b32 	%p122, %r326, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p123, %r327, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r328, %r325, 1;
	and.b32  	%r329, %r328, 2;
	setp.eq.s32 	%p124, %r329, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_180;
// %bb.72:
	@%p294 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_73;
$L__BB0_176:
	mov.b32 	%r144, %f750;
	and.b32  	%r336, %r144, 8388607;
	or.b32  	%r3354, %r336, 1065353216;
	mov.b32 	%f749, %r3354;
	add.s32 	%r337, %r144, -1073741824;
	and.b32  	%r3355, %r337, -8388608;
	setp.eq.s32 	%p135, %r3355, 0;
	@%p135 bra 	$L__BB0_179;
// %bb.177:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_178:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r338, %r3355, 192937984;
	add.s32 	%r339, %r3354, %r338;
	mov.b32 	%f459, %r339;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3355, %r3355, %r338;
	mov.b32 	%r3354, %f749;
	setp.ne.s32 	%p136, %r3355, 0;
	setp.ne.s32 	%p137, %r3354, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_178;
$L__BB0_179:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_180;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_175;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_173;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_175;
$L__BB0_173:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_175;
// %bb.174:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_175:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_180:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_182;
// %bb.181:
	mov.b32 	%r340, %f750;
	or.b32  	%r341, %r138, %r340;
	mov.b32 	%f750, %r341;
$L__BB0_182:                            // %__nv_fmodf.exit2461
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p295 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r356, %r51, 8388607;
	or.b32  	%r3326, %r356, 1065353216;
	mov.b32 	%f725, %r3326;
	add.s32 	%r357, %r51, -1073741824;
	and.b32  	%r3327, %r357, -8388608;
	setp.eq.s32 	%p155, %r3327, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r358, %r3327, 192937984;
	add.s32 	%r359, %r3326, %r358;
	mov.b32 	%f511, %r359;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3327, %r3327, %r358;
	mov.b32 	%r3326, %f725;
	setp.ne.s32 	%p156, %r3327, 0;
	setp.ne.s32 	%p157, %r3326, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r360, %f726;
	or.b32  	%r361, %r16, %r360;
	mov.b32 	%f726, %r361;
$L__BB0_89:                             // %__nv_fmodf.exit2492
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p296 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r370, %r59, 8388607;
	or.b32  	%r3328, %r370, 1065353216;
	mov.b32 	%f729, %r3328;
	add.s32 	%r371, %r59, -1073741824;
	and.b32  	%r3329, %r371, -8388608;
	setp.eq.s32 	%p175, %r3329, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3329, 192937984;
	add.s32 	%r373, %r3328, %r372;
	mov.b32 	%f561, %r373;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3329, %r3329, %r372;
	mov.b32 	%r3328, %f729;
	setp.ne.s32 	%p176, %r3329, 0;
	setp.ne.s32 	%p177, %r3328, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r374, %f730;
	or.b32  	%r375, %r25, %r374;
	mov.b32 	%f730, %r375;
$L__BB0_103:                            // %__nv_fmodf.exit2523
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p297 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r390, %r69, 8388607;
	or.b32  	%r3330, %r390, 1065353216;
	mov.b32 	%f733, %r3330;
	add.s32 	%r391, %r69, -1073741824;
	and.b32  	%r3331, %r391, -8388608;
	setp.eq.s32 	%p195, %r3331, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3331, 192937984;
	add.s32 	%r393, %r3330, %r392;
	mov.b32 	%f613, %r393;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3331, %r3331, %r392;
	mov.b32 	%r3330, %f733;
	setp.ne.s32 	%p196, %r3331, 0;
	setp.ne.s32 	%p197, %r3330, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r394, %f734;
	or.b32  	%r395, %r37, %r394;
	mov.b32 	%f734, %r395;
$L__BB0_117:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r396, %f623;
	and.b32  	%r397, %r396, -2147483648;
	or.b32  	%r398, %r397, 1056964608;
	mov.b32 	%f624, %r398;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r399, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r400, %r399, 1;
	setp.eq.b32 	%p204, %r400, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r401, %r399, 2;
	setp.eq.s32 	%p205, %r401, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r402, %r399, 1;
	and.b32  	%r403, %r402, 2;
	setp.eq.s32 	%p206, %r403, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p298 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r404, %r77, 8388607;
	or.b32  	%r3332, %r404, 1065353216;
	mov.b32 	%f737, %r3332;
	add.s32 	%r405, %r77, -1073741824;
	and.b32  	%r3333, %r405, -8388608;
	setp.eq.s32 	%p215, %r3333, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3333, 192937984;
	add.s32 	%r407, %r3332, %r406;
	mov.b32 	%f663, %r407;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3333, %r3333, %r406;
	mov.b32 	%r3332, %f737;
	setp.ne.s32 	%p216, %r3333, 0;
	setp.ne.s32 	%p217, %r3332, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r408, %f738;
	or.b32  	%r409, %r46, %r408;
	mov.b32 	%f738, %r409;
$L__BB0_131:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r410, %f673;
	and.b32  	%r411, %r410, -2147483648;
	or.b32  	%r412, %r411, 1056964608;
	mov.b32 	%f674, %r412;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r413, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r414, %r413, 1;
	setp.eq.b32 	%p224, %r414, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r415, %r413, 2;
	setp.eq.s32 	%p225, %r415, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r416, %r413, 1;
	and.b32  	%r417, %r416, 2;
	setp.eq.s32 	%p226, %r417, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_184;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r425, %r1, 4;
	and.b32  	%r426, %r425, 240;
	or.b32  	%r427, %r426, %r2;
	mul.wide.u32 	%rd68, %r427, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r428, [%rd69];
	shl.b32 	%r429, %r428, 16;
	cvt.s32.s16 	%r86, %r428;
	shr.s32 	%r87, %r428, 16;
	or.b32  	%r430, %r429, 65535;
	setp.lt.u32 	%p230, %r430, 1114111;
	setp.lt.u32 	%p231, %r428, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_135;
$L__BB0_183:                            // %L1247
	mul.lo.s32 	%r434, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r434;
$L__BB0_184:                            // %pass531
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r251, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r252, %r251, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r348, %f469;
	or.b32  	%r253, %r252, 1056964608;
	mov.b32 	%r267, %f261;
	mov.b32 	%r289, %f313;
	and.b32  	%r349, %r348, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r253;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r350, %r349, 1056964608;
	mov.b32 	%r362, %f521;
	mov.b32 	%r382, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f470, %r350;
	and.b32  	%r363, %r362, -2147483648;
	and.b32  	%r383, %r382, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r269;
	mov.b32 	%f314, %r291;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r364, %r363, 1056964608;
	or.b32  	%r384, %r383, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r364;
	mov.b32 	%f572, %r384;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r254, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r351, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r255, 1;
	cvt.rzi.s32.f32 	%r270, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r292, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r256, %r254, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r293, %r292, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r352, 1;
	cvt.rzi.s32.f32 	%r365, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r385, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r256, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r257, %r254, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r271, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r293, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r353, %r351, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r366, %r365, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r386, %r385, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r258, %r257, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r294, %r292, 2;
	setp.eq.s32 	%p145, %r353, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r366, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r386, 1;
	setp.eq.s32 	%p44, %r258, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r272, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r273, %r270, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r294, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r295, %r292, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r367, %r365, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r387, %r385, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r274, %r273, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r296, %r295, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r355, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r367, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r368, %r365, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r387, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r274, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r296, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r369, %r368, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r247, %f238;
	mov.b32 	%r250, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r369, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r389, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r246, %r250, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r344, %f500;
	mov.b32 	%r347, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r248, %r250, %r247;
	// end inline asm
	mov.b32 	%r285, %f344;
	mov.b32 	%r284, %f17;
	mov.b32 	%r288, %f341;
	mov.b32 	%r287, %f16;
	mov.b32 	%r331, %f75;
	mov.b32 	%r332, %f77;
	mov.b32 	%r334, %f76;
	mov.b32 	%r335, %f78;
	xor.b32  	%r343, %r347, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r286, %r288, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r343;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r345, %r347, %r344;
	// end inline asm
	mov.b32 	%r378, %f602;
	mov.b32 	%r377, %f95;
	mov.b32 	%r381, %f599;
	mov.b32 	%r380, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	mov.b32 	%r419, %f147;
	mov.b32 	%r420, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	mov.b32 	%r422, %f148;
	mov.b32 	%r423, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r422;
	// end inline asm
	shr.u32 	%r436, %r1, 3;
	bfe.u32 	%r437, %r1, 3, 1;
	shl.b32 	%r438, %r2, 1;
	and.b32  	%r439, %r438, 14;
	or.b32  	%r440, %r437, %r439;
	shl.b32 	%r441, %r1, 6;
	and.b32  	%r442, %r441, 192;
	and.b32  	%r443, %r129, 1;
	and.b32  	%r444, %r436, 2;
	or.b32  	%r445, %r443, %r444;
	shl.b32 	%r446, %r445, 4;
	or.b32  	%r447, %r440, %r5;
	or.b32  	%r448, %r447, %r442;
	or.b32  	%r449, %r448, %r446;
	mul.wide.u32 	%rd75, %r449, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r450, %r215, 16;
	shl.b32 	%r451, %r219, 7;
	add.s32 	%r156, %r451, %r450;
	shl.b32 	%r452, %r1, 2;
	and.b32  	%r157, %r452, 60;
	shl.b32 	%r453, %r4, 7;
	and.b32  	%r454, %r452, 64;
	or.b32  	%r158, %r454, %r453;
	and.b32  	%r159, %r1, 16;
	shr.u32 	%r455, %r1, 4;
	and.b32  	%r456, %r141, 30;
	or.b32  	%r457, %r456, %r455;
	mul.lo.s32 	%r458, %r457, 257;
	shr.u32 	%r459, %r2, 3;
	and.b32  	%r460, %r3, 224;
	mad.lo.s32 	%r461, %r459, 257, %r460;
	or.b32  	%r462, %r459, 2;
	mad.lo.s32 	%r463, %r462, 257, %r460;
	or.b32  	%r464, %r459, 4;
	mad.lo.s32 	%r465, %r464, 257, %r460;
	or.b32  	%r466, %r459, 6;
	mad.lo.s32 	%r467, %r466, 257, %r460;
	or.b32  	%r468, %r459, 8;
	mad.lo.s32 	%r469, %r468, 257, %r460;
	or.b32  	%r470, %r459, 10;
	mad.lo.s32 	%r471, %r470, 257, %r460;
	or.b32  	%r472, %r459, 12;
	mad.lo.s32 	%r473, %r472, 257, %r460;
	or.b32  	%r474, %r459, 14;
	mad.lo.s32 	%r475, %r474, 257, %r460;
	or.b32  	%r476, %r459, 16;
	mad.lo.s32 	%r477, %r476, 257, %r460;
	or.b32  	%r478, %r459, 18;
	mad.lo.s32 	%r479, %r478, 257, %r460;
	or.b32  	%r480, %r459, 20;
	mad.lo.s32 	%r481, %r480, 257, %r460;
	or.b32  	%r482, %r459, 22;
	mad.lo.s32 	%r483, %r482, 257, %r460;
	or.b32  	%r484, %r459, 24;
	mad.lo.s32 	%r485, %r484, 257, %r460;
	or.b32  	%r486, %r459, 26;
	mad.lo.s32 	%r487, %r486, 257, %r460;
	or.b32  	%r488, %r459, 28;
	mad.lo.s32 	%r489, %r488, 257, %r460;
	or.b32  	%r490, %r459, 30;
	mad.lo.s32 	%r491, %r490, 257, %r460;
	mul.lo.s32 	%r492, %r128, 2184;
	mad.lo.s32 	%r493, %r440, 33, %r492;
	mad.lo.s32 	%r494, %r445, 546, %r493;
	setp.lt.u32 	%p233, %r1, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	and.b32  	%r495, %r2, 1;
	neg.s32 	%r496, %r495;
	setp.eq.b32 	%p236, %r495, 1;
	and.b32  	%r497, %r496, 2064;
	mul.lo.s32 	%r498, %r459, 258;
	bfe.s32 	%r499, %r2, 1, 1;
	and.b32  	%r500, %r2, 2;
	setp.eq.s32 	%p237, %r500, 0;
	and.b32  	%r501, %r499, 1032;
	and.b32  	%r502, %r452, 12;
	bfe.s32 	%r503, %r2, 2, 1;
	and.b32  	%r504, %r2, 4;
	setp.eq.s32 	%p238, %r504, 0;
	and.b32  	%r505, %r503, 516;
	bfe.s32 	%r506, %r1, 3, 1;
	and.b32  	%r507, %r1, 8;
	setp.eq.s32 	%p239, %r507, 0;
	and.b32  	%r508, %r506, 4144;
	add.s32 	%r509, %r445, %r498;
	add.s32 	%r510, %r509, %r502;
	add.s32 	%r511, %r510, %r497;
	add.s32 	%r512, %r511, %r501;
	add.s32 	%r513, %r512, %r505;
	add.s32 	%r514, %r513, %r508;
	mul.wide.u32 	%rd77, %r514, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 0, 4144, %p239;
	selp.b64 	%rd80, 0, 516, %p238;
	selp.b64 	%rd81, 0, 1032, %p237;
	selp.b64 	%rd82, 2064, 0, %p236;
	cvt.u64.u32 	%rd83, %r502;
	cvt.u64.u32 	%rd84, %r498;
	cvt.u64.u32 	%rd85, %r445;
	add.s64 	%rd86, %rd85, %rd84;
	add.s64 	%rd87, %rd86, %rd83;
	add.s64 	%rd88, %rd87, %rd82;
	add.s64 	%rd89, %rd88, %rd81;
	add.s64 	%rd90, %rd89, %rd80;
	add.s64 	%rd91, %rd90, %rd79;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd8, %rd78, %rd92;
	shl.b32 	%r515, %r217, 20;
	shl.b32 	%r516, %r221, 9;
	add.s32 	%r517, %r516, %r515;
	and.b32  	%r518, %r1, 15;
	or.b32  	%r519, %r3, %r159;
	or.b32  	%r520, %r518, %r5;
	or.b32  	%r160, %r520, %r519;
	cvt.s64.s32 	%rd9, %r517;
	add.s32 	%r521, %r2, %r458;
	mul.wide.u32 	%rd93, %r521, 4;
	add.s64 	%rd10, %rd78, %rd93;
	cvt.u64.u32 	%rd94, %r2;
	cvt.u64.u32 	%rd11, %r458;
	add.s64 	%rd95, %rd11, %rd94;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd12, %rd78, %rd96;
	add.s32 	%r522, %r461, %r1;
	mul.wide.u32 	%rd97, %r522, 4;
	add.s64 	%rd13, %rd78, %rd97;
	add.s32 	%r523, %r463, %r1;
	mul.wide.u32 	%rd98, %r523, 4;
	add.s64 	%rd14, %rd78, %rd98;
	add.s32 	%r524, %r465, %r1;
	mul.wide.u32 	%rd99, %r524, 4;
	add.s64 	%rd15, %rd78, %rd99;
	add.s32 	%r525, %r467, %r1;
	mul.wide.u32 	%rd100, %r525, 4;
	add.s64 	%rd16, %rd78, %rd100;
	add.s32 	%r526, %r469, %r1;
	mul.wide.u32 	%rd101, %r526, 4;
	add.s64 	%rd17, %rd78, %rd101;
	add.s32 	%r527, %r471, %r1;
	mul.wide.u32 	%rd102, %r527, 4;
	add.s64 	%rd18, %rd78, %rd102;
	add.s32 	%r528, %r473, %r1;
	mul.wide.u32 	%rd103, %r528, 4;
	add.s64 	%rd19, %rd78, %rd103;
	add.s32 	%r529, %r475, %r1;
	mul.wide.u32 	%rd104, %r529, 4;
	add.s64 	%rd20, %rd78, %rd104;
	add.s32 	%r530, %r477, %r1;
	mul.wide.u32 	%rd105, %r530, 4;
	add.s64 	%rd21, %rd78, %rd105;
	add.s32 	%r531, %r479, %r1;
	mul.wide.u32 	%rd106, %r531, 4;
	add.s64 	%rd22, %rd78, %rd106;
	add.s32 	%r532, %r481, %r1;
	mul.wide.u32 	%rd107, %r532, 4;
	add.s64 	%rd23, %rd78, %rd107;
	add.s32 	%r533, %r483, %r1;
	mul.wide.u32 	%rd108, %r533, 4;
	add.s64 	%rd24, %rd78, %rd108;
	add.s32 	%r534, %r485, %r1;
	mul.wide.u32 	%rd109, %r534, 4;
	add.s64 	%rd25, %rd78, %rd109;
	add.s32 	%r535, %r487, %r1;
	mul.wide.u32 	%rd110, %r535, 4;
	add.s64 	%rd26, %rd78, %rd110;
	add.s32 	%r536, %r489, %r1;
	mul.wide.u32 	%rd111, %r536, 4;
	add.s64 	%rd27, %rd78, %rd111;
	add.s32 	%r537, %r491, %r1;
	mul.wide.u32 	%rd112, %r537, 4;
	add.s64 	%rd28, %rd78, %rd112;
	add.s32 	%r538, %r494, %r459;
	mul.wide.u32 	%rd113, %r538, 4;
	add.s64 	%rd29, %rd78, %rd113;
	add.s32 	%r539, %r494, %r462;
	mul.wide.u32 	%rd114, %r539, 4;
	add.s64 	%rd30, %rd78, %rd114;
	add.s32 	%r540, %r494, %r464;
	mul.wide.u32 	%rd115, %r540, 4;
	add.s64 	%rd31, %rd78, %rd115;
	add.s32 	%r541, %r494, %r466;
	mul.wide.u32 	%rd116, %r541, 4;
	add.s64 	%rd32, %rd78, %rd116;
	add.s32 	%r542, %r494, %r468;
	mul.wide.u32 	%rd117, %r542, 4;
	add.s64 	%rd33, %rd78, %rd117;
	add.s32 	%r543, %r494, %r470;
	mul.wide.u32 	%rd118, %r543, 4;
	add.s64 	%rd34, %rd78, %rd118;
	add.s32 	%r544, %r494, %r472;
	mul.wide.u32 	%rd119, %r544, 4;
	add.s64 	%rd35, %rd78, %rd119;
	add.s32 	%r545, %r494, %r474;
	mul.wide.u32 	%rd120, %r545, 4;
	add.s64 	%rd36, %rd78, %rd120;
	add.s32 	%r546, %r494, %r476;
	mul.wide.u32 	%rd121, %r546, 4;
	add.s64 	%rd37, %rd78, %rd121;
	add.s32 	%r547, %r494, %r478;
	mul.wide.u32 	%rd122, %r547, 4;
	add.s64 	%rd38, %rd78, %rd122;
	add.s32 	%r548, %r494, %r480;
	mul.wide.u32 	%rd123, %r548, 4;
	add.s64 	%rd39, %rd78, %rd123;
	add.s32 	%r549, %r494, %r482;
	mul.wide.u32 	%rd124, %r549, 4;
	add.s64 	%rd40, %rd78, %rd124;
	add.s32 	%r550, %r494, %r484;
	mul.wide.u32 	%rd125, %r550, 4;
	add.s64 	%rd41, %rd78, %rd125;
	add.s32 	%r551, %r494, %r486;
	mul.wide.u32 	%rd126, %r551, 4;
	add.s64 	%rd42, %rd78, %rd126;
	add.s32 	%r552, %r494, %r488;
	mul.wide.u32 	%rd127, %r552, 4;
	add.s64 	%rd43, %rd78, %rd127;
	add.s32 	%r553, %r494, %r490;
	mul.wide.u32 	%rd128, %r553, 4;
	add.s64 	%rd44, %rd78, %rd128;
	add.s32 	%r554, %r129, -1;
	setp.lt.u32 	%p240, %r554, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r555, %r1, 24;
	setp.eq.s32 	%p243, %r555, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r161, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r556, %r514, 32;
	mul.wide.u32 	%rd129, %r556, 4;
	add.s64 	%rd45, %rd78, %rd129;
	add.s32 	%r557, %r514, 48;
	mul.wide.u32 	%rd130, %r557, 4;
	add.s64 	%rd46, %rd78, %rd130;
	add.s32 	%r558, %r514, 64;
	mul.wide.u32 	%rd131, %r558, 4;
	add.s64 	%rd47, %rd78, %rd131;
	add.s32 	%r559, %r514, 80;
	mul.wide.u32 	%rd132, %r559, 4;
	add.s64 	%rd48, %rd78, %rd132;
	add.s32 	%r560, %r514, 96;
	mul.wide.u32 	%rd133, %r560, 4;
	add.s64 	%rd49, %rd78, %rd133;
	add.s32 	%r561, %r514, 112;
	mul.wide.u32 	%rd134, %r561, 4;
	add.s64 	%rd50, %rd78, %rd134;
	add.s32 	%r562, %r514, 128;
	mul.wide.u32 	%rd135, %r562, 4;
	add.s64 	%rd51, %rd78, %rd135;
	add.s32 	%r563, %r514, 144;
	mul.wide.u32 	%rd136, %r563, 4;
	add.s64 	%rd52, %rd78, %rd136;
	add.s32 	%r564, %r514, 160;
	mul.wide.u32 	%rd137, %r564, 4;
	add.s64 	%rd53, %rd78, %rd137;
	add.s32 	%r565, %r514, 176;
	mul.wide.u32 	%rd138, %r565, 4;
	add.s64 	%rd54, %rd78, %rd138;
	add.s32 	%r566, %r514, 192;
	mul.wide.u32 	%rd139, %r566, 4;
	add.s64 	%rd55, %rd78, %rd139;
	add.s32 	%r567, %r514, 208;
	mul.wide.u32 	%rd140, %r567, 4;
	add.s64 	%rd56, %rd78, %rd140;
	add.s32 	%r568, %r514, 224;
	mul.wide.u32 	%rd141, %r568, 4;
	add.s64 	%rd57, %rd78, %rd141;
	add.s32 	%r569, %r514, 240;
	mul.wide.u32 	%rd142, %r569, 4;
	add.s64 	%rd58, %rd78, %rd142;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r159, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3346, %r89;
	mov.u32 	%r3347, %r89;
	mov.u32 	%r3351, %r89;
	bra.uni 	$L__BB0_185;
$L__BB0_156:                            // %L29285
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p293, %r89, 4032;
	mov.u32 	%r89, %r127;
	@%p293 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_157;
$L__BB0_185:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_203 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r570, %r89, %r215;
	setp.lt.s32 	%p245, %r570, %r216;
	@%p245 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_157;
$L__BB0_186:                            // %pass780
                                        //   in Loop: Header=BB0_185 Depth=1
	cvt.u32.u64 	%r763, %rd11;
	or.b32  	%r764, %r89, %r2;
	shl.b32 	%r765, %r764, 16;
	and.b32  	%r766, %r765, 265224192;
	or.b32  	%r767, %r766, %r157;
	or.b32  	%r768, %r158, %r767;
	add.s32 	%r769, %r156, %r768;
	shr.s32 	%r770, %r769, 31;
	shr.u32 	%r771, %r770, 4;
	add.s32 	%r772, %r769, %r771;
	shr.s32 	%r773, %r772, 28;
	setp.lt.s32 	%p247, %r769, 0;
	and.b32  	%r774, %r772, -268435456;
	setp.ne.s32 	%p248, %r774, %r769;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r775, 1, 0, %p249;
	sub.s32 	%r776, %r775, %r773;
	shl.b32 	%r777, %r776, 28;
	add.s32 	%r778, %r777, %r769;
	mul.wide.s32 	%rd143, %r778, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r779, %r780, %r781, %r782}, [%rd144];
	or.b32  	%r783, %r764, 16;
	shl.b32 	%r784, %r783, 16;
	and.b32  	%r785, %r784, 266272768;
	or.b32  	%r786, %r785, %r157;
	or.b32  	%r787, %r158, %r786;
	add.s32 	%r788, %r156, %r787;
	shr.s32 	%r789, %r788, 31;
	shr.u32 	%r790, %r789, 4;
	add.s32 	%r791, %r788, %r790;
	shr.s32 	%r792, %r791, 28;
	setp.lt.s32 	%p250, %r788, 0;
	and.b32  	%r793, %r791, -268435456;
	setp.ne.s32 	%p251, %r793, %r788;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r794, 1, 0, %p252;
	sub.s32 	%r795, %r794, %r792;
	shl.b32 	%r796, %r795, 28;
	add.s32 	%r797, %r796, %r788;
	mul.wide.s32 	%rd145, %r797, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r798, %r799, %r800, %r801}, [%rd146];
	and.b32  	%r802, %r89, 4032;
	or.b32  	%r803, %r2, %r802;
	shl.b32 	%r804, %r803, 16;
	or.b32  	%r805, %r804, %r157;
	or.b32  	%r806, %r805, %r158;
	or.b32  	%r807, %r806, 2097152;
	add.s32 	%r808, %r156, %r807;
	shr.s32 	%r809, %r808, 31;
	shr.u32 	%r810, %r809, 4;
	add.s32 	%r811, %r808, %r810;
	shr.s32 	%r812, %r811, 28;
	setp.lt.s32 	%p253, %r808, 0;
	and.b32  	%r813, %r811, -268435456;
	setp.ne.s32 	%p254, %r813, %r808;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r814, 1, 0, %p255;
	sub.s32 	%r815, %r814, %r812;
	shl.b32 	%r816, %r815, 28;
	add.s32 	%r817, %r816, %r808;
	mul.wide.s32 	%rd147, %r817, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r818, %r819, %r820, %r821}, [%rd148];
	or.b32  	%r822, %r806, 3145728;
	add.s32 	%r823, %r156, %r822;
	shr.s32 	%r824, %r823, 31;
	shr.u32 	%r825, %r824, 4;
	add.s32 	%r826, %r823, %r825;
	shr.s32 	%r827, %r826, 28;
	setp.lt.s32 	%p256, %r823, 0;
	and.b32  	%r828, %r826, -268435456;
	setp.ne.s32 	%p257, %r828, %r823;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r829, 1, 0, %p258;
	sub.s32 	%r830, %r829, %r827;
	shl.b32 	%r831, %r830, 28;
	add.s32 	%r832, %r831, %r823;
	mul.wide.s32 	%rd149, %r832, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r833, %r834, %r835, %r836}, [%rd150];
	selp.b32 	%r837, %r781, %r779, %p246;
	shfl.sync.bfly.b32	%r838, %r837, 16, 31, -1;
	selp.b32 	%r573, %r779, %r838, %p246;
	selp.b32 	%r578, %r838, %r781, %p246;
	selp.b32 	%r839, %r782, %r780, %p246;
	shfl.sync.bfly.b32	%r840, %r839, 16, 31, -1;
	selp.b32 	%r581, %r780, %r840, %p246;
	selp.b32 	%r586, %r840, %r782, %p246;
	selp.b32 	%r841, %r800, %r798, %p246;
	shfl.sync.bfly.b32	%r842, %r841, 16, 31, -1;
	selp.b32 	%r589, %r798, %r842, %p246;
	selp.b32 	%r594, %r842, %r800, %p246;
	selp.b32 	%r843, %r801, %r799, %p246;
	shfl.sync.bfly.b32	%r844, %r843, 16, 31, -1;
	selp.b32 	%r597, %r799, %r844, %p246;
	selp.b32 	%r602, %r844, %r801, %p246;
	selp.b32 	%r845, %r820, %r818, %p246;
	shfl.sync.bfly.b32	%r846, %r845, 16, 31, -1;
	selp.b32 	%r605, %r818, %r846, %p246;
	selp.b32 	%r610, %r846, %r820, %p246;
	selp.b32 	%r847, %r821, %r819, %p246;
	shfl.sync.bfly.b32	%r848, %r847, 16, 31, -1;
	selp.b32 	%r613, %r819, %r848, %p246;
	selp.b32 	%r618, %r848, %r821, %p246;
	selp.b32 	%r849, %r835, %r833, %p246;
	shfl.sync.bfly.b32	%r850, %r849, 16, 31, -1;
	selp.b32 	%r621, %r833, %r850, %p246;
	selp.b32 	%r626, %r850, %r835, %p246;
	selp.b32 	%r851, %r836, %r834, %p246;
	shfl.sync.bfly.b32	%r852, %r851, 16, 31, -1;
	selp.b32 	%r629, %r834, %r852, %p246;
	selp.b32 	%r634, %r852, %r836, %p246;
	shl.b32 	%r574, %r578, 4;
	mov.u32 	%r572, 252645135;
	// begin inline asm
	lop3.b32 %r636, %r572, %r573, %r574, 202;
	// end inline asm
	shr.u32 	%r577, %r573, 4;
	// begin inline asm
	lop3.b32 %r652, %r572, %r577, %r578, 202;
	// end inline asm
	shl.b32 	%r582, %r586, 4;
	// begin inline asm
	lop3.b32 %r644, %r572, %r581, %r582, 202;
	// end inline asm
	shr.u32 	%r585, %r581, 4;
	// begin inline asm
	lop3.b32 %r660, %r572, %r585, %r586, 202;
	// end inline asm
	shl.b32 	%r590, %r594, 4;
	// begin inline asm
	lop3.b32 %r668, %r572, %r589, %r590, 202;
	// end inline asm
	shr.u32 	%r593, %r589, 4;
	// begin inline asm
	lop3.b32 %r684, %r572, %r593, %r594, 202;
	// end inline asm
	shl.b32 	%r598, %r602, 4;
	// begin inline asm
	lop3.b32 %r676, %r572, %r597, %r598, 202;
	// end inline asm
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r692, %r572, %r601, %r602, 202;
	// end inline asm
	shl.b32 	%r606, %r610, 4;
	// begin inline asm
	lop3.b32 %r637, %r572, %r605, %r606, 202;
	// end inline asm
	shr.u32 	%r609, %r605, 4;
	// begin inline asm
	lop3.b32 %r653, %r572, %r609, %r610, 202;
	// end inline asm
	shl.b32 	%r614, %r618, 4;
	// begin inline asm
	lop3.b32 %r645, %r572, %r613, %r614, 202;
	// end inline asm
	shr.u32 	%r617, %r613, 4;
	// begin inline asm
	lop3.b32 %r661, %r572, %r617, %r618, 202;
	// end inline asm
	shl.b32 	%r622, %r626, 4;
	// begin inline asm
	lop3.b32 %r669, %r572, %r621, %r622, 202;
	// end inline asm
	shr.u32 	%r625, %r621, 4;
	// begin inline asm
	lop3.b32 %r685, %r572, %r625, %r626, 202;
	// end inline asm
	shl.b32 	%r630, %r634, 4;
	// begin inline asm
	lop3.b32 %r677, %r572, %r629, %r630, 202;
	// end inline asm
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r693, %r572, %r633, %r634, 202;
	// end inline asm
	mov.u32 	%r638, 25152;
	// begin inline asm
	prmt.b32 %r700, %r636, %r637, %r638;
	// end inline asm
	mov.u32 	%r642, 29521;
	// begin inline asm
	prmt.b32 %r732, %r636, %r637, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r644, %r645, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r740, %r644, %r645, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r652, %r653, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r733, %r652, %r653, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r660, %r661, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r741, %r660, %r661, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r668, %r669, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r668, %r669, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r724, %r676, %r677, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r676, %r677, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r684, %r685, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r684, %r685, %r642;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r692, %r693, %r638;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r692, %r693, %r642;
	// end inline asm
	mov.u32 	%r702, 21520;
	// begin inline asm
	prmt.b32 %r699, %r700, %r701, %r702;
	// end inline asm
	mov.u32 	%r706, 30258;
	// begin inline asm
	prmt.b32 %r703, %r700, %r701, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r708, %r709, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r708, %r709, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r716, %r717, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r716, %r717, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r724, %r725, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r727, %r724, %r725, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r731, %r732, %r733, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r735, %r732, %r733, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r739, %r740, %r741, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r743, %r740, %r741, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r747, %r748, %r749, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r751, %r748, %r749, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r755, %r756, %r757, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r759, %r756, %r757, %r706;
	// end inline asm
	st.shared.u32 	[%rd10], %r699;
	st.shared.u32 	[%rd12+512], %r707;
	st.shared.u32 	[%rd12+256], %r703;
	st.shared.u32 	[%rd12+768], %r711;
	and.b32  	%r853, %r783, 31;
	add.s32 	%r854, %r853, %r763;
	mul.wide.u32 	%rd151, %r854, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r715;
	cvt.u64.u32 	%rd154, %r853;
	add.s64 	%rd155, %rd11, %rd154;
	shl.b64 	%rd156, %rd155, 2;
	add.s64 	%rd157, %rd78, %rd156;
	st.shared.u32 	[%rd157+512], %r723;
	st.shared.u32 	[%rd157+256], %r719;
	st.shared.u32 	[%rd157+768], %r727;
	st.shared.u32 	[%rd12+128], %r731;
	st.shared.u32 	[%rd12+640], %r739;
	st.shared.u32 	[%rd12+384], %r735;
	st.shared.u32 	[%rd12+896], %r743;
	st.shared.u32 	[%rd157+128], %r747;
	st.shared.u32 	[%rd157+640], %r755;
	st.shared.u32 	[%rd157+384], %r751;
	st.shared.u32 	[%rd157+896], %r759;
	bar.sync 	0;
	ld.shared.u32 	%r162, [%rd13];
	ld.shared.u32 	%r163, [%rd14];
	ld.shared.u32 	%r164, [%rd15];
	ld.shared.u32 	%r165, [%rd16];
	ld.shared.u32 	%r166, [%rd17];
	ld.shared.u32 	%r167, [%rd18];
	ld.shared.u32 	%r168, [%rd19];
	ld.shared.u32 	%r169, [%rd20];
	ld.shared.u32 	%r170, [%rd21];
	ld.shared.u32 	%r171, [%rd22];
	ld.shared.u32 	%r172, [%rd23];
	ld.shared.u32 	%r173, [%rd24];
	ld.shared.u32 	%r174, [%rd25];
	ld.shared.u32 	%r175, [%rd26];
	ld.shared.u32 	%r176, [%rd27];
	ld.shared.u32 	%r177, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r178, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r193, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r178, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.187:                             // %pass3077
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r855, %r178, %r1;
	mul.wide.s32 	%rd158, %r855, 4;
	add.s64 	%rd160, %rd78, %rd158;
	st.shared.u32 	[%rd160], %r162;
	setp.eq.s32 	%p260, %r179, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.188:                             // %pass3145
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r856, %r179, %r1;
	mul.wide.s32 	%rd161, %r856, 4;
	add.s64 	%rd163, %rd78, %rd161;
	st.shared.u32 	[%rd163], %r163;
	setp.eq.s32 	%p261, %r180, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.189:                             // %pass3213
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r857, %r180, %r1;
	mul.wide.s32 	%rd164, %r857, 4;
	add.s64 	%rd166, %rd78, %rd164;
	st.shared.u32 	[%rd166], %r164;
	setp.eq.s32 	%p262, %r181, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.190:                             // %pass3281
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r858, %r181, %r1;
	mul.wide.s32 	%rd167, %r858, 4;
	add.s64 	%rd169, %rd78, %rd167;
	st.shared.u32 	[%rd169], %r165;
	setp.eq.s32 	%p263, %r182, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.191:                             // %pass3349
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r859, %r182, %r1;
	mul.wide.s32 	%rd170, %r859, 4;
	add.s64 	%rd172, %rd78, %rd170;
	st.shared.u32 	[%rd172], %r166;
	setp.eq.s32 	%p264, %r183, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.192:                             // %pass3417
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r860, %r183, %r1;
	mul.wide.s32 	%rd173, %r860, 4;
	add.s64 	%rd175, %rd78, %rd173;
	st.shared.u32 	[%rd175], %r167;
	setp.eq.s32 	%p265, %r184, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.193:                             // %pass3485
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r861, %r184, %r1;
	mul.wide.s32 	%rd176, %r861, 4;
	add.s64 	%rd178, %rd78, %rd176;
	st.shared.u32 	[%rd178], %r168;
	setp.eq.s32 	%p266, %r185, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.194:                             // %pass3553
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r862, %r185, %r1;
	mul.wide.s32 	%rd179, %r862, 4;
	add.s64 	%rd181, %rd78, %rd179;
	st.shared.u32 	[%rd181], %r169;
	setp.eq.s32 	%p267, %r186, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.195:                             // %pass3621
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r863, %r186, %r1;
	mul.wide.s32 	%rd182, %r863, 4;
	add.s64 	%rd184, %rd78, %rd182;
	st.shared.u32 	[%rd184], %r170;
	setp.eq.s32 	%p268, %r187, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.196:                             // %pass3689
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r864, %r187, %r1;
	mul.wide.s32 	%rd185, %r864, 4;
	add.s64 	%rd187, %rd78, %rd185;
	st.shared.u32 	[%rd187], %r171;
	setp.eq.s32 	%p269, %r188, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.197:                             // %pass3757
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r865, %r188, %r1;
	mul.wide.s32 	%rd188, %r865, 4;
	add.s64 	%rd190, %rd78, %rd188;
	st.shared.u32 	[%rd190], %r172;
	setp.eq.s32 	%p270, %r189, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.198:                             // %pass3825
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r866, %r189, %r1;
	mul.wide.s32 	%rd191, %r866, 4;
	add.s64 	%rd193, %rd78, %rd191;
	st.shared.u32 	[%rd193], %r173;
	setp.eq.s32 	%p271, %r190, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.199:                             // %pass3893
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r867, %r190, %r1;
	mul.wide.s32 	%rd194, %r867, 4;
	add.s64 	%rd196, %rd78, %rd194;
	st.shared.u32 	[%rd196], %r174;
	setp.eq.s32 	%p272, %r191, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.200:                             // %pass3961
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r868, %r191, %r1;
	mul.wide.s32 	%rd197, %r868, 4;
	add.s64 	%rd199, %rd78, %rd197;
	st.shared.u32 	[%rd199], %r175;
	setp.eq.s32 	%p273, %r192, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.201:                             // %pass4029
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r869, %r192, %r1;
	mul.wide.s32 	%rd200, %r869, 4;
	add.s64 	%rd202, %rd78, %rd200;
	st.shared.u32 	[%rd202], %r176;
	setp.eq.s32 	%p274, %r193, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.202:                             // %pass4097
                                        //   in Loop: Header=BB0_185 Depth=1
	add.s32 	%r871, %r193, %r1;
	mul.wide.s32 	%rd203, %r871, 4;
	add.s64 	%rd205, %rd78, %rd203;
	st.shared.u32 	[%rd205], %r177;
	bar.sync 	0;
	ld.shared.u32 	%r194, [%rd29];
	ld.shared.u32 	%r195, [%rd30];
	ld.shared.u32 	%r196, [%rd31];
	ld.shared.u32 	%r197, [%rd32];
	ld.shared.u32 	%r198, [%rd33];
	ld.shared.u32 	%r199, [%rd34];
	ld.shared.u32 	%r200, [%rd35];
	ld.shared.u32 	%r201, [%rd36];
	ld.shared.u32 	%r202, [%rd37];
	ld.shared.u32 	%r203, [%rd38];
	ld.shared.u32 	%r204, [%rd39];
	ld.shared.u32 	%r205, [%rd40];
	ld.shared.u32 	%r206, [%rd41];
	ld.shared.u32 	%r207, [%rd42];
	ld.shared.u32 	%r208, [%rd43];
	ld.shared.u32 	%r209, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3338, 16;
	bra.uni 	$L__BB0_203;
$L__BB0_152:                            // %L20755
                                        //   in Loop: Header=BB0_203 Depth=2
	bar.sync 	0;
	add.s32 	%r3338, %r3338, -8;
	setp.ne.s32 	%p283, %r3338, -16;
	@%p283 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_153;
$L__BB0_203:                            // %L12262
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3338, 16;
	selp.b32 	%r1264, %r194, 0, %p275;
	setp.eq.s32 	%p276, %r3338, 8;
	selp.b32 	%r1265, %r198, %r1264, %p276;
	setp.eq.s32 	%p277, %r3338, 0;
	selp.b32 	%r1266, %r202, %r1265, %p277;
	setp.eq.s32 	%p278, %r3338, -8;
	selp.b32 	%r1267, %r206, %r1266, %p278;
	selp.b32 	%r1268, %r195, 0, %p275;
	selp.b32 	%r1269, %r199, %r1268, %p276;
	selp.b32 	%r1270, %r203, %r1269, %p277;
	selp.b32 	%r1271, %r207, %r1270, %p278;
	selp.b32 	%r1272, %r196, 0, %p275;
	selp.b32 	%r1273, %r200, %r1272, %p276;
	selp.b32 	%r1274, %r204, %r1273, %p277;
	selp.b32 	%r1275, %r208, %r1274, %p278;
	selp.b32 	%r1276, %r197, 0, %p275;
	selp.b32 	%r1277, %r201, %r1276, %p276;
	selp.b32 	%r1278, %r205, %r1277, %p277;
	selp.b32 	%r1279, %r209, %r1278, %p278;
	// begin inline asm
	mov.b32 %r877, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r876, %r1267, -2004318072;
	mov.u32 	%r1013, 983055;
	// begin inline asm
	lop3.b32 %r874, %r1013, %r876, %r877, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r878, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r879, %r877, %r878;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r882, %r874, %r879;
	// end inline asm
	mov.u32 	%r1024, 15728880;
	// begin inline asm
	lop3.b32 %r885, %r1024, %r876, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r922, %r1271, -2004318072;
	// begin inline asm
	lop3.b32 %r920, %r1013, %r922, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	lop3.b32 %r931, %r1024, %r922, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r968, %r1275, -2004318072;
	// begin inline asm
	lop3.b32 %r966, %r1013, %r968, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r977, %r1024, %r968, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1014, %r1279, -2004318072;
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r1014, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1023, %r1024, %r1014, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1026, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r882;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1056, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r893;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1059, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r928;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1062, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r939;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1065, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1068, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1071, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1074, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1077, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1135, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1080, %r1081}, {%r245, %r248}, {%r1056}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1088}, {%r245, %r248}, {%r1059}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1094, %r1095}, {%r245, %r248}, {%r1062}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1101, %r1102}, {%r245, %r248}, {%r1065}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1108, %r1109}, {%r245, %r248}, {%r1068}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1115, %r1116}, {%r245, %r248}, {%r1071}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1122, %r1123}, {%r245, %r248}, {%r1074}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1129, %r1130}, {%r245, %r248}, {%r1077}, {%r1135, %r1135};
	// end inline asm
	@%p1 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_204;
$L__BB0_205:                            // %pass5517
                                        //   in Loop: Header=BB0_203 Depth=2
	// begin inline asm
	neg.f16x2 %r1136, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1138, %r1136, %r1081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r283, %r1080, %r1138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1145, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1147, %r1145, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r283, %r1087, %r1147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1154, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1156, %r1154, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r283, %r1094, %r1156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1163, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r1163, %r1102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r283, %r1101, %r1165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1172, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r1172, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r283, %r1108, %r1174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1181, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r1181, %r1116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r283, %r1115, %r1183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1190, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r1190, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r283, %r1122, %r1192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r1199, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r283, %r1129, %r1201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r286, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r283, %r1081, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r286, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r283, %r1088, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r286, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r283, %r1095, %r1222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1229, %r286, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1232, %r283, %r1102, %r1229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r286, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r283, %r1109, %r1236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r286, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r283, %r1116, %r1243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1250, %r286, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r283, %r1123, %r1250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r286, %r1129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r283, %r1130, %r1257;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1280, %r1281}, {%r330, %r333}, {%r1141, %r1211}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1289, %r1290}, {%r330, %r333}, {%r1150, %r1218}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1298, %r1299}, {%r330, %r333}, {%r1159, %r1225}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1307, %r1308}, {%r330, %r333}, {%r1168, %r1232}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1316, %r1317}, {%r330, %r333}, {%r1177, %r1239}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1325, %r1326}, {%r330, %r333}, {%r1186, %r1246}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1334, %r1335}, {%r330, %r333}, {%r1195, %r1253}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r330, %r333}, {%r1204, %r1260}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1420, [%rd7];
	ld.shared.u32 	%r1427, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1434}, {%r342, %r345}, {%r1420}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1446, %r1443}, {%r342, %r345}, {%r1427}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r1430, %r1434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r376, %r1437, %r1432;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1439, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r1439, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r376, %r1446, %r1441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r379, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r376, %r1434, %r1448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r379, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r376, %r1443, %r1455;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1481, %r1484}, {%r418, %r421}, {%r1435, %r1451}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1492}, {%r418, %r421}, {%r1444, %r1458}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r1481, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r1484, %r1484, %r1480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1487, %r1488, %r1488, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1491, %r1492, %r1492, %r1487;
	// end inline asm
	mov.u32 	%r2077, 492117333;
	// begin inline asm
	fma.rn.f16x2 %r1495, %r2077, %r1491, %r3351;
	// end inline asm
	ld.shared.u32 	%r1503, [%rd45];
	ld.shared.u32 	%r1510, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r342, %r345}, {%r1503}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1529, %r1526}, {%r342, %r345}, {%r1510}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r376, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1522, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r1522, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r376, %r1529, %r1524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1531, %r379, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1534, %r376, %r1517, %r1531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1538, %r379, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1541, %r376, %r1526, %r1538;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1564, %r1567}, {%r418, %r421}, {%r1518, %r1534}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1571, %r1575}, {%r418, %r421}, {%r1527, %r1541}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1563, %r1564, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r1571, %r1571, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1574, %r1575, %r1575, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r2077, %r1574, %r1495;
	// end inline asm
	ld.shared.u32 	%r1586, [%rd47];
	ld.shared.u32 	%r1593, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1603, %r1600}, {%r342, %r345}, {%r1586}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1612, %r1609}, {%r342, %r345}, {%r1593}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1596, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1598, %r1596, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r376, %r1603, %r1598;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1605, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r1605, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r376, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1614, %r379, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r376, %r1600, %r1614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1621, %r379, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r376, %r1609, %r1621;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1647, %r1650}, {%r418, %r421}, {%r1601, %r1617}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1654, %r1658}, {%r418, %r421}, {%r1610, %r1624}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1646, %r1647, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1650, %r1650, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r1654, %r1654, %r1649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1657, %r1658, %r1658, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1661, %r2077, %r1657, %r1578;
	// end inline asm
	ld.shared.u32 	%r1669, [%rd49];
	ld.shared.u32 	%r1676, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1686, %r1683}, {%r342, %r345}, {%r1669}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1695, %r1692}, {%r342, %r345}, {%r1676}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1679, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1681, %r1679, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r376, %r1686, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r376, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r379, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r376, %r1683, %r1697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r379, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r376, %r1692, %r1704;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1730, %r1733}, {%r418, %r421}, {%r1684, %r1700}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1737, %r1741}, {%r418, %r421}, {%r1693, %r1707}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1730, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1733, %r1733, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r1737, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r1741, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r2077, %r1740, %r1661;
	// end inline asm
	ld.shared.u32 	%r1752, [%rd51];
	ld.shared.u32 	%r1759, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1769, %r1766}, {%r342, %r345}, {%r1752}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1778, %r1775}, {%r342, %r345}, {%r1759}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r1762, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r376, %r1769, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1771, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r376, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r379, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r376, %r1766, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r379, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r376, %r1775, %r1787;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1813, %r1816}, {%r418, %r421}, {%r1767, %r1783}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1820, %r1824}, {%r418, %r421}, {%r1776, %r1790}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1813, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1820, %r1820, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r1824, %r1824, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r2077, %r1823, %r1744;
	// end inline asm
	ld.shared.u32 	%r1835, [%rd53];
	ld.shared.u32 	%r1842, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1852, %r1849}, {%r342, %r345}, {%r1835}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1861, %r1858}, {%r342, %r345}, {%r1842}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1845, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1847, %r1845, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r376, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1854, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r1854, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r376, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r379, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1866, %r376, %r1849, %r1863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r379, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r376, %r1858, %r1870;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1896, %r1899}, {%r418, %r421}, {%r1850, %r1866}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1903, %r1907}, {%r418, %r421}, {%r1859, %r1873}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r1896, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r1899, %r1899, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r1903, %r1903, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r1907, %r1907, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r2077, %r1906, %r1827;
	// end inline asm
	ld.shared.u32 	%r1918, [%rd55];
	ld.shared.u32 	%r1925, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1935, %r1932}, {%r342, %r345}, {%r1918}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1944, %r1941}, {%r342, %r345}, {%r1925}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1928, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1930, %r1928, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1933, %r376, %r1935, %r1930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1937, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1939, %r1937, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r376, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1946, %r379, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1949, %r376, %r1932, %r1946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r379, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r376, %r1941, %r1953;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1979, %r1982}, {%r418, %r421}, {%r1933, %r1949}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1986, %r1990}, {%r418, %r421}, {%r1942, %r1956}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r1979, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1986, %r1986, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1990, %r1990, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r2077, %r1989, %r1910;
	// end inline asm
	ld.shared.u32 	%r2001, [%rd57];
	ld.shared.u32 	%r2008, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r342, %r345}, {%r2001}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2027, %r2024}, {%r342, %r345}, {%r2008}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r376, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2020, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r2020, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r376, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r379, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r376, %r2015, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r379, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r376, %r2024, %r2036;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2062, %r2065}, {%r418, %r421}, {%r2016, %r2032}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2069, %r2073}, {%r418, %r421}, {%r2025, %r2039}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2062, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r2065, %r2065, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r2069, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r2073, %r2073, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r2077, %r2072, %r1993;
	// end inline asm
	add.s32 	%r3346, %r3346, 8;
	setp.ne.s32 	%p279, %r3346, 24;
	@%p279 bra 	$L__BB0_152;
// %bb.206:                             // %pass8917
                                        //   in Loop: Header=BB0_203 Depth=2
	shl.b32 	%r2081, %r3347, 20;
	or.b32  	%r2082, %r160, %r2081;
	cvt.u64.u32 	%rd208, %r2082;
	add.s64 	%rd209, %rd208, %rd9;
	shr.u64 	%rd210, %rd209, 34;
	add.s64 	%rd211, %rd209, %rd210;
	shr.s64 	%rd212, %rd211, 30;
	setp.lt.s64 	%p280, %rd209, 0;
	and.b64  	%rd213, %rd211, -1073741824;
	setp.ne.s64 	%p281, %rd213, %rd209;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd214, 1, 0, %p282;
	sub.s64 	%rd215, %rd214, %rd212;
	shl.b64 	%rd216, %rd215, 30;
	add.s64 	%rd217, %rd216, %rd209;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3351;
	add.s32 	%r3347, %r3347, 1;
	mov.u32 	%r3346, 0;
	mov.u32 	%r3351, %r3346;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L20776.preheader
                                        //   in Loop: Header=BB0_185 Depth=1
	mov.u32 	%r3345, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L29269
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3345, %r3345, -8;
	setp.ne.s32 	%p292, %r3345, -16;
	@%p292 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L20776
                                        //   Parent Loop BB0_185 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p284, %r3345, 16;
	selp.b32 	%r3276, %r194, 0, %p284;
	setp.eq.s32 	%p285, %r3345, 8;
	selp.b32 	%r3277, %r198, %r3276, %p285;
	setp.eq.s32 	%p286, %r3345, 0;
	selp.b32 	%r3278, %r202, %r3277, %p286;
	setp.eq.s32 	%p287, %r3345, -8;
	selp.b32 	%r3279, %r206, %r3278, %p287;
	selp.b32 	%r3280, %r195, 0, %p284;
	selp.b32 	%r3281, %r199, %r3280, %p285;
	selp.b32 	%r3282, %r203, %r3281, %p286;
	selp.b32 	%r3283, %r207, %r3282, %p287;
	selp.b32 	%r3284, %r196, 0, %p284;
	selp.b32 	%r3285, %r200, %r3284, %p285;
	selp.b32 	%r3286, %r204, %r3285, %p286;
	selp.b32 	%r3287, %r208, %r3286, %p287;
	selp.b32 	%r3288, %r197, 0, %p284;
	selp.b32 	%r3289, %r201, %r3288, %p285;
	selp.b32 	%r3290, %r205, %r3289, %p286;
	selp.b32 	%r3291, %r209, %r3290, %p287;
	// begin inline asm
	mov.b32 %r2111, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2122, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3292, %r3279, 8;
	xor.b32  	%r2121, %r3292, 8947848;
	// begin inline asm
	lop3.b32 %r2108, %r1013, %r2121, %r2111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2112, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2113, %r2111, %r2112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2116, %r2108, %r2113;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2119, %r1024, %r2121, %r2122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2123, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2124, %r2122, %r2123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2127, %r2119, %r2124;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3293, %r3283, 8;
	xor.b32  	%r2167, %r3293, 8947848;
	// begin inline asm
	lop3.b32 %r2154, %r1013, %r2167, %r2157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2158, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2159, %r2157, %r2158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2162, %r2154, %r2159;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2165, %r1024, %r2167, %r2168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2170, %r2168, %r2169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2173, %r2165, %r2170;
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3294, %r3287, 8;
	xor.b32  	%r2213, %r3294, 8947848;
	// begin inline asm
	lop3.b32 %r2200, %r1013, %r2213, %r2203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2205, %r2203, %r2204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2208, %r2200, %r2205;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2211, %r1024, %r2213, %r2214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2216, %r2214, %r2215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2219, %r2211, %r2216;
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3295, %r3291, 8;
	xor.b32  	%r2259, %r3295, 8947848;
	// begin inline asm
	lop3.b32 %r2246, %r1013, %r2259, %r2249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2251, %r2249, %r2250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2254, %r2246, %r2251;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2257, %r1024, %r2259, %r2260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2262, %r2260, %r2261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2265, %r2257, %r2262;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2116;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2268, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2127;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2271, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2162;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2274, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2173;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2277, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2208;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2280, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2219;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2283, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2254;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2286, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2265;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2289, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2355, %r2352}, {%r245, %r248}, {%r2268}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2364, %r2361}, {%r245, %r248}, {%r2271}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2373, %r2370}, {%r245, %r248}, {%r2274}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2382, %r2379}, {%r245, %r248}, {%r2277}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2391, %r2388}, {%r245, %r248}, {%r2280}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2400, %r2397}, {%r245, %r248}, {%r2283}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2409, %r2406}, {%r245, %r248}, {%r2286}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2418, %r2415}, {%r245, %r248}, {%r2289}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2348, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2350, %r2348, %r2352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2353, %r283, %r2355, %r2350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2357, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2359, %r2357, %r2361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2362, %r283, %r2364, %r2359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2366, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2368, %r2366, %r2370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2371, %r283, %r2373, %r2368;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2375, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2377, %r2375, %r2379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r283, %r2382, %r2377;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2384, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2386, %r2384, %r2388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2389, %r283, %r2391, %r2386;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2393, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2395, %r2393, %r2397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2398, %r283, %r2400, %r2395;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2402, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2402, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r283, %r2409, %r2404;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2411, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2413, %r2411, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2416, %r283, %r2418, %r2413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2420, %r286, %r2355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r283, %r2352, %r2420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r286, %r2364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r283, %r2361, %r2427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2434, %r286, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2437, %r283, %r2370, %r2434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2441, %r286, %r2382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2444, %r283, %r2379, %r2441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r286, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r283, %r2388, %r2448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r286, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r283, %r2397, %r2455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r286, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r283, %r2406, %r2462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r286, %r2418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r283, %r2415, %r2469;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2476, %r2477}, {%r330, %r333}, {%r2353, %r2423}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2485, %r2486}, {%r330, %r333}, {%r2362, %r2430}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2494, %r2495}, {%r330, %r333}, {%r2371, %r2437}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2503, %r2504}, {%r330, %r333}, {%r2380, %r2444}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2512, %r2513}, {%r330, %r333}, {%r2389, %r2451}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2521, %r2522}, {%r330, %r333}, {%r2398, %r2458}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2530, %r2531}, {%r330, %r333}, {%r2407, %r2465}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2539, %r2540}, {%r330, %r333}, {%r2416, %r2472}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2616, [%rd7];
	ld.shared.u32 	%r2623, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r342, %r345}, {%r2616}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r342, %r345}, {%r2623}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r376, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r376, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r379, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2647, %r376, %r2630, %r2644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r379, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r376, %r2639, %r2651;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2677, %r2680}, {%r418, %r421}, {%r2631, %r2647}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2684, %r2688}, {%r418, %r421}, {%r2640, %r2654}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2677, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r2680, %r2680, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r2684, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r2688, %r2688, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r2077, %r2687, %r3351;
	// end inline asm
	ld.shared.u32 	%r2699, [%rd45];
	ld.shared.u32 	%r2706, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r342, %r345}, {%r2699}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2725, %r2722}, {%r342, %r345}, {%r2706}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r376, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r376, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r379, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r376, %r2713, %r2727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2734, %r379, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r376, %r2722, %r2734;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2760, %r2763}, {%r418, %r421}, {%r2714, %r2730}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2767, %r2771}, {%r418, %r421}, {%r2723, %r2737}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r2760, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r2763, %r2763, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r2767, %r2767, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r2771, %r2771, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r2077, %r2770, %r2691;
	// end inline asm
	ld.shared.u32 	%r2782, [%rd47];
	ld.shared.u32 	%r2789, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2799, %r2796}, {%r342, %r345}, {%r2782}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2808, %r2805}, {%r342, %r345}, {%r2789}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2792, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2792, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r376, %r2799, %r2794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2801, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r2801, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r376, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2810, %r379, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r376, %r2796, %r2810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2817, %r379, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r376, %r2805, %r2817;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2843, %r2846}, {%r418, %r421}, {%r2797, %r2813}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2850, %r2854}, {%r418, %r421}, {%r2806, %r2820}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r2843, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r2846, %r2846, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r2850, %r2850, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2853, %r2854, %r2854, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r2077, %r2853, %r2774;
	// end inline asm
	ld.shared.u32 	%r2865, [%rd49];
	ld.shared.u32 	%r2872, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2882, %r2879}, {%r342, %r345}, {%r2865}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2891, %r2888}, {%r342, %r345}, {%r2872}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2875, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2875, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r376, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2884, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r2884, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r376, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2893, %r379, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r376, %r2879, %r2893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2900, %r379, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r376, %r2888, %r2900;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2926, %r2929}, {%r418, %r421}, {%r2880, %r2896}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2933, %r2937}, {%r418, %r421}, {%r2889, %r2903}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2925, %r2926, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r2929, %r2929, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r2933, %r2933, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r2937, %r2937, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r2077, %r2936, %r2857;
	// end inline asm
	ld.shared.u32 	%r2948, [%rd51];
	ld.shared.u32 	%r2955, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r342, %r345}, {%r2948}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2974, %r2971}, {%r342, %r345}, {%r2955}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r376, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2967, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2967, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r376, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r379, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r376, %r2962, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r379, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r376, %r2971, %r2983;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3009, %r3012}, {%r418, %r421}, {%r2963, %r2979}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3016, %r3020}, {%r418, %r421}, {%r2972, %r2986}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r3009, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r3012, %r3012, %r3008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3015, %r3016, %r3016, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r3020, %r3020, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r2077, %r3019, %r2940;
	// end inline asm
	ld.shared.u32 	%r3031, [%rd53];
	ld.shared.u32 	%r3038, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3048, %r3045}, {%r342, %r345}, {%r3031}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3057, %r3054}, {%r342, %r345}, {%r3038}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3041, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r3041, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r376, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3050, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r3050, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r376, %r3057, %r3052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3059, %r379, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r376, %r3045, %r3059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3066, %r379, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r376, %r3054, %r3066;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3092, %r3095}, {%r418, %r421}, {%r3046, %r3062}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3099, %r3103}, {%r418, %r421}, {%r3055, %r3069}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3091, %r3092, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3094, %r3095, %r3095, %r3091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3098, %r3099, %r3099, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r3103, %r3103, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r2077, %r3102, %r3023;
	// end inline asm
	ld.shared.u32 	%r3114, [%rd55];
	ld.shared.u32 	%r3121, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3131, %r3128}, {%r342, %r345}, {%r3114}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3140, %r3137}, {%r342, %r345}, {%r3121}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3124, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3126, %r3124, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r376, %r3131, %r3126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3133, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r3133, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r376, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3142, %r379, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r376, %r3128, %r3142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3149, %r379, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r376, %r3137, %r3149;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3175, %r3178}, {%r418, %r421}, {%r3129, %r3145}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3182, %r3186}, {%r418, %r421}, {%r3138, %r3152}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3174, %r3175, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r3178, %r3178, %r3174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3182, %r3182, %r3177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3186, %r3186, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r2077, %r3185, %r3106;
	// end inline asm
	ld.shared.u32 	%r3197, [%rd57];
	ld.shared.u32 	%r3204, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r342, %r345}, {%r3197}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3223, %r3220}, {%r342, %r345}, {%r3204}, {%r1135, %r1135};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r376, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r3216, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r376, %r3223, %r3218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r379, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r376, %r3211, %r3225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3232, %r379, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r376, %r3220, %r3232;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3258, %r3261}, {%r418, %r421}, {%r3212, %r3228}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3265, %r3269}, {%r418, %r421}, {%r3221, %r3235}, {%r1135, %r1135}, %r161, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3257, %r3258, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r3269, %r3269, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r2077, %r3268, %r3189;
	// end inline asm
	add.s32 	%r3346, %r3346, 8;
	setp.eq.s32 	%p288, %r3346, 24;
	@%p288 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_155;
$L__BB0_207:                            // %pass12454
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3297, %r3347, 20;
	or.b32  	%r3298, %r160, %r3297;
	cvt.u64.u32 	%rd220, %r3298;
	add.s64 	%rd221, %rd220, %rd9;
	shr.u64 	%rd222, %rd221, 34;
	add.s64 	%rd223, %rd221, %rd222;
	shr.s64 	%rd224, %rd223, 30;
	setp.lt.s64 	%p289, %rd221, 0;
	and.b64  	%rd225, %rd223, -1073741824;
	setp.ne.s64 	%p290, %rd225, %rd221;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd226, 1, 0, %p291;
	sub.s64 	%rd227, %rd226, %rd224;
	shl.b64 	%rd228, %rd227, 30;
	add.s64 	%rd229, %rd228, %rd221;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd231, %rd4, %rd230;
	st.global.u32 	[%rd231], %r3351;
	add.s32 	%r3347, %r3347, 1;
	mov.u32 	%r3346, %r1135;
	mov.u32 	%r3351, %r1135;
	bra.uni 	$L__BB0_155;
$L__BB0_157:                            // %L29300
	mov.u32 	%r3299, 0;
	st.global.u32 	[%rd6], %r3299;
	ret;
$L__BB0_204:                            // %post_box_union
	mov.u64 	%rd206, exception2385;
	cvta.global.u64 	%rd207, %rd206;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd207;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3315, 5;
	st.global.u32 	[%rd6], %r3315;
	mov.u64 	%rd262, exception2337;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3314, 5;
	st.global.u32 	[%rd6], %r3314;
	mov.u64 	%rd260, exception2337;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3313, 5;
	st.global.u32 	[%rd6], %r3313;
	mov.u64 	%rd258, exception2337;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3312, 5;
	st.global.u32 	[%rd6], %r3312;
	mov.u64 	%rd256, exception2337;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3311, 5;
	st.global.u32 	[%rd6], %r3311;
	mov.u64 	%rd254, exception2337;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3310, 5;
	st.global.u32 	[%rd6], %r3310;
	mov.u64 	%rd252, exception2337;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3309, 5;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd250, exception2337;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3308, 5;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd248, exception2337;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd246, exception2337;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd244, exception2337;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd242, exception2337;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd240, exception2337;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd238, exception2337;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd236, exception2337;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3301, 5;
	st.global.u32 	[%rd6], %r3301;
	mov.u64 	%rd234, exception2337;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3300, 5;
	st.global.u32 	[%rd6], %r3300;
	mov.u64 	%rd232, exception2337;
	cvta.global.u64 	%rd233, %rd232;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd233;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3317, 2;
	st.global.u32 	[%rd6], %r3317;
	mov.u64 	%rd266, exception2337;
	cvta.global.u64 	%rd267, %rd266;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd267;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3316, 3;
	st.global.u32 	[%rd6], %r3316;
	mov.u64 	%rd264, exception2337;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r431, [retval0+0];
	} // callseq 47
	mov.u32 	%r433, 4;
	st.global.u32 	[%rd6], %r433;
	mov.u64 	%rd73, exception2337;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r214;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
