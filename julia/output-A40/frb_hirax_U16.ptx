// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4066[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4114[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<303>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3416>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<299>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r247, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd67, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r256, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r256, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd68, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r257, %r3, %r1;
	or.b32  	%r258, %r257, %r5;
	mul.wide.u32 	%rd75, %r258, 4;
	add.s64 	%rd6, %rd68, %rd75;
	mov.u32 	%r259, 1;
	st.global.u32 	[%rd6], %r259;
	setp.gt.u32 	%p3, %r248, 4095;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r249, %r248;
	setp.gt.s32 	%p5, %r249, 8191;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r249, %r248;
	and.b32  	%r260, %r6, 63;
	setp.ne.s32 	%p7, %r260, 0;
	setp.gt.u32 	%p8, %r250, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r251, %r250;
	setp.lt.s32 	%p11, %r251, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r261, %r251, %r250;
	mul.hi.s32 	%r262, %r6, 715827883;
	shr.u32 	%r263, %r262, 31;
	shr.s32 	%r264, %r262, 2;
	add.s32 	%r265, %r264, %r263;
	setp.eq.s32 	%p13, %r261, %r265;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r252, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r253, %r252;
	setp.gt.s32 	%p16, %r253, 512;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r253, %r252;
	and.b32  	%r266, %r7, 15;
	setp.ne.s32 	%p18, %r266, 0;
	setp.lt.s32 	%p19, %r254, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r255, %r254;
	setp.gt.s32 	%p22, %r255, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r267, %r255, %r254;
	and.b32  	%r268, %r267, 15;
	setp.eq.s32 	%p24, %r268, 0;
	setp.eq.s32 	%p25, %r267, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_13;
$L__BB0_160:                            // %pass162
	and.b32  	%r146, %r1, 3;
	shr.u32 	%r147, %r1, 2;
	mul.lo.s32 	%r269, %r146, %r147;
	and.b32  	%r270, %r269, 7;
	cvt.rn.f32.s32 	%f185, %r270;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p298, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_172;
// %bb.161:
	@%p298 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r149, %f750;
	and.b32  	%r271, %r149, 8388607;
	or.b32  	%r3411, %r271, 1065353216;
	mov.b32 	%f745, %r3411;
	add.s32 	%r272, %r149, -1073741824;
	and.b32  	%r3412, %r272, -8388608;
	setp.eq.s32 	%p34, %r3412, 0;
	@%p34 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r273, %r3412, 192937984;
	add.s32 	%r274, %r3411, %r273;
	mov.b32 	%f197, %r274;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3412, %r3412, %r273;
	mov.b32 	%r3411, %f745;
	setp.ne.s32 	%p35, %r3412, 0;
	setp.ne.s32 	%p36, %r3411, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r275, %f151;
	and.b32  	%r156, %r275, -2147483648;
	@%p39 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r276, %f746;
	or.b32  	%r277, %r156, %r276;
	mov.b32 	%f746, %r277;
$L__BB0_174:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r1, 1;
	and.b32  	%r292, %r159, 2;
	mul.lo.s32 	%r160, %r292, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p299, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p299 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r293, %r9, 8388607;
	or.b32  	%r3377, %r293, 1065353216;
	mov.b32 	%f705, %r3377;
	add.s32 	%r294, %r9, -1073741824;
	and.b32  	%r3378, %r294, -8388608;
	setp.eq.s32 	%p54, %r3378, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r295, %r3378, 192937984;
	add.s32 	%r296, %r3377, %r295;
	mov.b32 	%f251, %r296;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3378, %r3378, %r295;
	mov.b32 	%r3377, %f705;
	setp.ne.s32 	%p55, %r3378, 0;
	setp.ne.s32 	%p56, %r3377, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r297, %f168;
	and.b32  	%r16, %r297, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r298, %f706;
	or.b32  	%r299, %r16, %r298;
	mov.b32 	%f706, %r299;
$L__BB0_27:                             // %__nv_fmodf.exit2369
	add.s32 	%r308, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r308;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p300, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p300 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r309, %r18, 8388607;
	or.b32  	%r3379, %r309, 1065353216;
	mov.b32 	%f709, %r3379;
	add.s32 	%r310, %r18, -1073741824;
	and.b32  	%r3380, %r310, -8388608;
	setp.eq.s32 	%p74, %r3380, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r311, %r3380, 192937984;
	add.s32 	%r312, %r3379, %r311;
	mov.b32 	%f303, %r312;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3380, %r3380, %r311;
	mov.b32 	%r3379, %f709;
	setp.ne.s32 	%p75, %r3380, 0;
	setp.ne.s32 	%p76, %r3379, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r313, %f18;
	and.b32  	%r25, %r313, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r314, %f710;
	or.b32  	%r315, %r25, %r314;
	mov.b32 	%f710, %r315;
$L__BB0_41:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r330, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r330;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p301, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p301 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r331, %r30, 8388607;
	or.b32  	%r3381, %r331, 1065353216;
	mov.b32 	%f713, %r3381;
	add.s32 	%r332, %r30, -1073741824;
	and.b32  	%r3382, %r332, -8388608;
	setp.eq.s32 	%p94, %r3382, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r333, %r3382, 192937984;
	add.s32 	%r334, %r3381, %r333;
	mov.b32 	%f357, %r334;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3382, %r3382, %r333;
	mov.b32 	%r3381, %f713;
	setp.ne.s32 	%p95, %r3382, 0;
	setp.ne.s32 	%p96, %r3381, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r335, %f35;
	and.b32  	%r37, %r335, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r336, %f714;
	or.b32  	%r337, %r37, %r336;
	mov.b32 	%f714, %r337;
$L__BB0_55:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r338, %f367;
	and.b32  	%r339, %r338, -2147483648;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%f368, %r340;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r341, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r342, %r341, 1;
	setp.eq.b32 	%p102, %r342, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r343, %r341, 2;
	setp.eq.s32 	%p103, %r343, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r344, %r341, 1;
	and.b32  	%r345, %r344, 2;
	setp.eq.s32 	%p104, %r345, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r346, %r28, %r147;
	and.b32  	%r347, %r346, 3;
	cvt.rn.f32.s32 	%f397, %r347;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p302, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p302 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r348, %r39, 8388607;
	or.b32  	%r3383, %r348, 1065353216;
	mov.b32 	%f717, %r3383;
	add.s32 	%r349, %r39, -1073741824;
	and.b32  	%r3384, %r349, -8388608;
	setp.eq.s32 	%p114, %r3384, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r3384, 192937984;
	add.s32 	%r351, %r3383, %r350;
	mov.b32 	%f409, %r351;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3384, %r3384, %r350;
	mov.b32 	%r3383, %f717;
	setp.ne.s32 	%p115, %r3384, 0;
	setp.ne.s32 	%p116, %r3383, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r352, %f54;
	and.b32  	%r46, %r352, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r353, %f718;
	or.b32  	%r354, %r46, %r353;
	mov.b32 	%f718, %r354;
$L__BB0_69:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r355, %f419;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f420, %r357;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r358, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p122, %r359, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p123, %r360, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p124, %r362, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_182;
// %bb.72:
	@%p298 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_73;
$L__BB0_178:
	mov.b32 	%r162, %f750;
	and.b32  	%r369, %r162, 8388607;
	or.b32  	%r3413, %r369, 1065353216;
	mov.b32 	%f749, %r3413;
	add.s32 	%r370, %r162, -1073741824;
	and.b32  	%r3414, %r370, -8388608;
	setp.eq.s32 	%p135, %r3414, 0;
	@%p135 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r3414, 192937984;
	add.s32 	%r372, %r3413, %r371;
	mov.b32 	%f459, %r372;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3414, %r3414, %r371;
	mov.b32 	%r3413, %f749;
	setp.ne.s32 	%p136, %r3414, 0;
	setp.ne.s32 	%p137, %r3413, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_182;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_177;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_175;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r373, %f750;
	or.b32  	%r374, %r156, %r373;
	mov.b32 	%f750, %r374;
$L__BB0_184:                            // %__nv_fmodf.exit2493
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p299 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r389, %r51, 8388607;
	or.b32  	%r3385, %r389, 1065353216;
	mov.b32 	%f725, %r3385;
	add.s32 	%r390, %r51, -1073741824;
	and.b32  	%r3386, %r390, -8388608;
	setp.eq.s32 	%p155, %r3386, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r391, %r3386, 192937984;
	add.s32 	%r392, %r3385, %r391;
	mov.b32 	%f511, %r392;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3386, %r3386, %r391;
	mov.b32 	%r3385, %f725;
	setp.ne.s32 	%p156, %r3386, 0;
	setp.ne.s32 	%p157, %r3385, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r393, %f726;
	or.b32  	%r394, %r16, %r393;
	mov.b32 	%f726, %r394;
$L__BB0_89:                             // %__nv_fmodf.exit2524
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p300 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r403, %r59, 8388607;
	or.b32  	%r3387, %r403, 1065353216;
	mov.b32 	%f729, %r3387;
	add.s32 	%r404, %r59, -1073741824;
	and.b32  	%r3388, %r404, -8388608;
	setp.eq.s32 	%p175, %r3388, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r405, %r3388, 192937984;
	add.s32 	%r406, %r3387, %r405;
	mov.b32 	%f561, %r406;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3388, %r3388, %r405;
	mov.b32 	%r3387, %f729;
	setp.ne.s32 	%p176, %r3388, 0;
	setp.ne.s32 	%p177, %r3387, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r407, %f730;
	or.b32  	%r408, %r25, %r407;
	mov.b32 	%f730, %r408;
$L__BB0_103:                            // %__nv_fmodf.exit2555
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p301 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r423, %r69, 8388607;
	or.b32  	%r3389, %r423, 1065353216;
	mov.b32 	%f733, %r3389;
	add.s32 	%r424, %r69, -1073741824;
	and.b32  	%r3390, %r424, -8388608;
	setp.eq.s32 	%p195, %r3390, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r425, %r3390, 192937984;
	add.s32 	%r426, %r3389, %r425;
	mov.b32 	%f613, %r426;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3390, %r3390, %r425;
	mov.b32 	%r3389, %f733;
	setp.ne.s32 	%p196, %r3390, 0;
	setp.ne.s32 	%p197, %r3389, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r427, %f734;
	or.b32  	%r428, %r37, %r427;
	mov.b32 	%f734, %r428;
$L__BB0_117:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r429, %f623;
	and.b32  	%r430, %r429, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%f624, %r431;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r432, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r433, %r432, 1;
	setp.eq.b32 	%p204, %r433, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r434, %r432, 2;
	setp.eq.s32 	%p205, %r434, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r435, %r432, 1;
	and.b32  	%r436, %r435, 2;
	setp.eq.s32 	%p206, %r436, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p302 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r437, %r77, 8388607;
	or.b32  	%r3391, %r437, 1065353216;
	mov.b32 	%f737, %r3391;
	add.s32 	%r438, %r77, -1073741824;
	and.b32  	%r3392, %r438, -8388608;
	setp.eq.s32 	%p215, %r3392, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3392, 192937984;
	add.s32 	%r440, %r3391, %r439;
	mov.b32 	%f663, %r440;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3392, %r3392, %r439;
	mov.b32 	%r3391, %f737;
	setp.ne.s32 	%p216, %r3392, 0;
	setp.ne.s32 	%p217, %r3391, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r441, %f738;
	or.b32  	%r442, %r46, %r441;
	mov.b32 	%f738, %r442;
$L__BB0_131:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r443, %f673;
	and.b32  	%r444, %r443, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%f674, %r445;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r446, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r447, %r446, 1;
	setp.eq.b32 	%p224, %r447, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r448, %r446, 2;
	setp.eq.s32 	%p225, %r448, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r449, %r446, 1;
	and.b32  	%r450, %r449, 2;
	setp.eq.s32 	%p226, %r450, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_186;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r458, %r1, 4;
	and.b32  	%r459, %r458, 240;
	or.b32  	%r460, %r459, %r4;
	mul.wide.u32 	%rd76, %r460, 4;
	add.s64 	%rd77, %rd1, %rd76;
	ld.global.u32 	%r461, [%rd77];
	shl.b32 	%r462, %r461, 16;
	cvt.s32.s16 	%r86, %r461;
	shr.s32 	%r87, %r461, 16;
	or.b32  	%r463, %r462, 65535;
	setp.lt.u32 	%p230, %r463, 1114111;
	setp.lt.u32 	%p231, %r461, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_135;
$L__BB0_185:                            // %L1247
	mul.lo.s32 	%r467, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r467;
$L__BB0_186:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r284, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r285, %r284, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r381, %f469;
	or.b32  	%r286, %r285, 1056964608;
	mov.b32 	%r300, %f261;
	mov.b32 	%r322, %f313;
	and.b32  	%r382, %r381, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r286;
	and.b32  	%r301, %r300, -2147483648;
	and.b32  	%r323, %r322, -2147483648;
	or.b32  	%r383, %r382, 1056964608;
	mov.b32 	%r395, %f521;
	mov.b32 	%r415, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r302, %r301, 1056964608;
	or.b32  	%r324, %r323, 1056964608;
	mov.b32 	%f470, %r383;
	and.b32  	%r396, %r395, -2147483648;
	and.b32  	%r416, %r415, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r302;
	mov.b32 	%f314, %r324;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r397, %r396, 1056964608;
	or.b32  	%r417, %r416, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r397;
	mov.b32 	%f572, %r417;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r287, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r288, %r287, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r384, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r288, 1;
	cvt.rzi.s32.f32 	%r303, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r325, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r385, %r384, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r289, %r287, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r304, %r303, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r326, %r325, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r385, 1;
	cvt.rzi.s32.f32 	%r398, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r418, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r289, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r290, %r287, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r304, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r326, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r386, %r384, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r399, %r398, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r419, %r418, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r291, %r290, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r305, %r303, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r327, %r325, 2;
	setp.eq.s32 	%p145, %r386, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r387, %r384, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r399, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r419, 1;
	setp.eq.s32 	%p44, %r291, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r305, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r306, %r303, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r327, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r328, %r325, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r388, %r387, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r400, %r398, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r420, %r418, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r307, %r306, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r329, %r328, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r388, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r400, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r420, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r421, %r418, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r307, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r329, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r422, %r421, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r280, %f238;
	mov.b32 	%r283, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r402, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r422, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r279, %r283, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r377, %f500;
	mov.b32 	%r380, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r280, %r279;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r280;
	// end inline asm
	mov.b32 	%r318, %f344;
	mov.b32 	%r317, %f17;
	mov.b32 	%r321, %f341;
	mov.b32 	%r320, %f16;
	mov.b32 	%r364, %f75;
	mov.b32 	%r365, %f77;
	mov.b32 	%r367, %f76;
	mov.b32 	%r368, %f78;
	xor.b32  	%r376, %r380, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r316, %r318, %r317;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r319, %r321, %r320;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r365, %r364;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r377;
	// end inline asm
	mov.b32 	%r411, %f602;
	mov.b32 	%r410, %f95;
	mov.b32 	%r414, %f599;
	mov.b32 	%r413, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r412, %r414, %r413;
	// end inline asm
	mov.b32 	%r452, %f147;
	mov.b32 	%r453, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r451, %r453, %r452;
	// end inline asm
	mov.b32 	%r455, %f148;
	mov.b32 	%r456, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r454, %r456, %r455;
	// end inline asm
	shl.b32 	%r469, %r1, 6;
	and.b32  	%r470, %r469, 192;
	shr.u32 	%r471, %r1, 3;
	bfe.u32 	%r472, %r1, 3, 1;
	shl.b32 	%r473, %r4, 1;
	and.b32  	%r474, %r473, 14;
	or.b32  	%r475, %r472, %r474;
	and.b32  	%r476, %r471, 2;
	and.b32  	%r477, %r147, 1;
	or.b32  	%r478, %r476, %r477;
	shl.b32 	%r479, %r478, 4;
	or.b32  	%r480, %r470, %r475;
	or.b32  	%r481, %r480, %r479;
	or.b32  	%r482, %r481, %r3;
	mul.wide.u32 	%rd83, %r482, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r172, [%rd84];
	ld.global.u32 	%r173, [%rd84+1024];
	shl.b32 	%r483, %r248, 16;
	shl.b32 	%r484, %r252, 7;
	add.s32 	%r174, %r484, %r483;
	shl.b32 	%r485, %r1, 2;
	and.b32  	%r175, %r485, 64;
	and.b32  	%r176, %r485, 60;
	shl.b32 	%r177, %r2, 7;
	and.b32  	%r178, %r1, 16;
	shr.u32 	%r486, %r1, 4;
	and.b32  	%r487, %r159, 30;
	or.b32  	%r488, %r487, %r486;
	mul.lo.s32 	%r489, %r488, 257;
	shr.u32 	%r490, %r4, 3;
	and.b32  	%r491, %r5, 224;
	mad.lo.s32 	%r492, %r490, 257, %r491;
	or.b32  	%r493, %r490, 2;
	mad.lo.s32 	%r494, %r493, 257, %r491;
	or.b32  	%r495, %r490, 4;
	mad.lo.s32 	%r496, %r495, 257, %r491;
	or.b32  	%r497, %r490, 6;
	mad.lo.s32 	%r498, %r497, 257, %r491;
	or.b32  	%r499, %r490, 8;
	mad.lo.s32 	%r500, %r499, 257, %r491;
	or.b32  	%r501, %r490, 10;
	mad.lo.s32 	%r502, %r501, 257, %r491;
	or.b32  	%r503, %r490, 12;
	mad.lo.s32 	%r504, %r503, 257, %r491;
	or.b32  	%r505, %r490, 14;
	mad.lo.s32 	%r506, %r505, 257, %r491;
	or.b32  	%r507, %r490, 16;
	mad.lo.s32 	%r508, %r507, 257, %r491;
	or.b32  	%r509, %r490, 18;
	mad.lo.s32 	%r510, %r509, 257, %r491;
	or.b32  	%r511, %r490, 20;
	mad.lo.s32 	%r512, %r511, 257, %r491;
	or.b32  	%r513, %r490, 22;
	mad.lo.s32 	%r514, %r513, 257, %r491;
	or.b32  	%r515, %r490, 24;
	mad.lo.s32 	%r516, %r515, 257, %r491;
	or.b32  	%r517, %r490, 26;
	mad.lo.s32 	%r518, %r517, 257, %r491;
	or.b32  	%r519, %r490, 28;
	mad.lo.s32 	%r520, %r519, 257, %r491;
	or.b32  	%r521, %r490, 30;
	mad.lo.s32 	%r522, %r521, 257, %r491;
	mul.lo.s32 	%r523, %r146, 2184;
	mad.lo.s32 	%r524, %r475, 33, %r523;
	mad.lo.s32 	%r525, %r478, 546, %r524;
	setp.lt.u32 	%p234, %r1, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	selp.b32 	%r526, 0, 1032, %p127;
	or.b32  	%r527, %r474, %r486;
	and.b32  	%r528, %r1, 1;
	neg.s32 	%r529, %r528;
	setp.eq.b32 	%p237, %r528, 1;
	and.b32  	%r530, %r529, 2064;
	bfe.s32 	%r531, %r1, 3, 1;
	and.b32  	%r532, %r1, 8;
	setp.eq.s32 	%p238, %r532, 0;
	and.b32  	%r533, %r531, 258;
	bfe.s32 	%r534, %r1, 2, 1;
	and.b32  	%r535, %r1, 4;
	setp.eq.s32 	%p239, %r535, 0;
	and.b32  	%r536, %r534, 516;
	add.s32 	%r537, %r527, %r526;
	add.s32 	%r538, %r537, %r530;
	add.s32 	%r539, %r538, %r533;
	add.s32 	%r540, %r539, %r536;
	bfe.s32 	%r541, %r4, 1, 1;
	and.b32  	%r542, %r541, 1032;
	and.b32  	%r543, %r531, 4144;
	and.b32  	%r544, %r4, 1;
	neg.s32 	%r545, %r544;
	setp.eq.b32 	%p240, %r544, 1;
	and.b32  	%r546, %r545, 2064;
	and.b32  	%r547, %r485, 12;
	mul.lo.s32 	%r548, %r490, 258;
	bfe.s32 	%r549, %r4, 2, 1;
	and.b32  	%r550, %r4, 4;
	setp.eq.s32 	%p241, %r550, 0;
	and.b32  	%r551, %r549, 516;
	or.b32  	%r552, %r542, %r478;
	add.s32 	%r553, %r548, %r547;
	add.s32 	%r554, %r553, %r543;
	add.s32 	%r555, %r554, %r546;
	add.s32 	%r556, %r555, %r551;
	add.s32 	%r557, %r556, %r552;
	mul.wide.u32 	%rd85, %r557, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd7, %rd86, %rd85;
	cvt.u64.u32 	%rd87, %r552;
	selp.b64 	%rd88, 0, 516, %p241;
	selp.b64 	%rd89, 2064, 0, %p240;
	selp.b64 	%rd90, 0, 4144, %p238;
	cvt.u64.u32 	%rd91, %r548;
	cvt.u64.u32 	%rd92, %r547;
	add.s64 	%rd93, %rd92, %rd91;
	add.s64 	%rd94, %rd93, %rd90;
	add.s64 	%rd95, %rd94, %rd89;
	add.s64 	%rd96, %rd95, %rd88;
	add.s64 	%rd97, %rd96, %rd87;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd8, %rd86, %rd98;
	add.s32 	%r558, %r553, %r478;
	add.s32 	%r559, %r558, %r542;
	add.s32 	%r560, %r559, %r543;
	add.s32 	%r561, %r560, %r546;
	add.s32 	%r562, %r561, %r551;
	shl.b32 	%r563, %r250, 20;
	shl.b32 	%r564, %r254, 9;
	add.s32 	%r565, %r564, %r563;
	or.b32  	%r566, %r178, %r5;
	and.b32  	%r567, %r1, 15;
	or.b32  	%r568, %r566, %r567;
	or.b32  	%r179, %r568, %r3;
	cvt.s64.s32 	%rd9, %r565;
	add.s32 	%r569, %r4, %r489;
	mul.wide.u32 	%rd99, %r569, 4;
	add.s64 	%rd10, %rd86, %rd99;
	cvt.u64.u32 	%rd100, %r4;
	cvt.u64.u32 	%rd11, %r489;
	add.s64 	%rd101, %rd11, %rd100;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd12, %rd86, %rd102;
	add.s32 	%r570, %r492, %r1;
	mul.wide.u32 	%rd103, %r570, 4;
	add.s64 	%rd13, %rd86, %rd103;
	add.s32 	%r571, %r494, %r1;
	mul.wide.u32 	%rd104, %r571, 4;
	add.s64 	%rd14, %rd86, %rd104;
	add.s32 	%r572, %r496, %r1;
	mul.wide.u32 	%rd105, %r572, 4;
	add.s64 	%rd15, %rd86, %rd105;
	add.s32 	%r573, %r498, %r1;
	mul.wide.u32 	%rd106, %r573, 4;
	add.s64 	%rd16, %rd86, %rd106;
	add.s32 	%r574, %r500, %r1;
	mul.wide.u32 	%rd107, %r574, 4;
	add.s64 	%rd17, %rd86, %rd107;
	add.s32 	%r575, %r502, %r1;
	mul.wide.u32 	%rd108, %r575, 4;
	add.s64 	%rd18, %rd86, %rd108;
	add.s32 	%r576, %r504, %r1;
	mul.wide.u32 	%rd109, %r576, 4;
	add.s64 	%rd19, %rd86, %rd109;
	add.s32 	%r577, %r506, %r1;
	mul.wide.u32 	%rd110, %r577, 4;
	add.s64 	%rd20, %rd86, %rd110;
	add.s32 	%r578, %r508, %r1;
	mul.wide.u32 	%rd111, %r578, 4;
	add.s64 	%rd21, %rd86, %rd111;
	add.s32 	%r579, %r510, %r1;
	mul.wide.u32 	%rd112, %r579, 4;
	add.s64 	%rd22, %rd86, %rd112;
	add.s32 	%r580, %r512, %r1;
	mul.wide.u32 	%rd113, %r580, 4;
	add.s64 	%rd23, %rd86, %rd113;
	add.s32 	%r581, %r514, %r1;
	mul.wide.u32 	%rd114, %r581, 4;
	add.s64 	%rd24, %rd86, %rd114;
	add.s32 	%r582, %r516, %r1;
	mul.wide.u32 	%rd115, %r582, 4;
	add.s64 	%rd25, %rd86, %rd115;
	add.s32 	%r583, %r518, %r1;
	mul.wide.u32 	%rd116, %r583, 4;
	add.s64 	%rd26, %rd86, %rd116;
	add.s32 	%r584, %r520, %r1;
	mul.wide.u32 	%rd117, %r584, 4;
	add.s64 	%rd27, %rd86, %rd117;
	add.s32 	%r585, %r522, %r1;
	mul.wide.u32 	%rd118, %r585, 4;
	add.s64 	%rd28, %rd86, %rd118;
	add.s32 	%r586, %r525, %r490;
	mul.wide.u32 	%rd119, %r586, 4;
	add.s64 	%rd29, %rd86, %rd119;
	add.s32 	%r587, %r525, %r493;
	mul.wide.u32 	%rd120, %r587, 4;
	add.s64 	%rd30, %rd86, %rd120;
	add.s32 	%r588, %r525, %r495;
	mul.wide.u32 	%rd121, %r588, 4;
	add.s64 	%rd31, %rd86, %rd121;
	add.s32 	%r589, %r525, %r497;
	mul.wide.u32 	%rd122, %r589, 4;
	add.s64 	%rd32, %rd86, %rd122;
	add.s32 	%r590, %r525, %r499;
	mul.wide.u32 	%rd123, %r590, 4;
	add.s64 	%rd33, %rd86, %rd123;
	add.s32 	%r591, %r525, %r501;
	mul.wide.u32 	%rd124, %r591, 4;
	add.s64 	%rd34, %rd86, %rd124;
	add.s32 	%r592, %r525, %r503;
	mul.wide.u32 	%rd125, %r592, 4;
	add.s64 	%rd35, %rd86, %rd125;
	add.s32 	%r593, %r525, %r505;
	mul.wide.u32 	%rd126, %r593, 4;
	add.s64 	%rd36, %rd86, %rd126;
	add.s32 	%r594, %r525, %r507;
	mul.wide.u32 	%rd127, %r594, 4;
	add.s64 	%rd37, %rd86, %rd127;
	add.s32 	%r595, %r525, %r509;
	mul.wide.u32 	%rd128, %r595, 4;
	add.s64 	%rd38, %rd86, %rd128;
	add.s32 	%r596, %r525, %r511;
	mul.wide.u32 	%rd129, %r596, 4;
	add.s64 	%rd39, %rd86, %rd129;
	add.s32 	%r597, %r525, %r513;
	mul.wide.u32 	%rd130, %r597, 4;
	add.s64 	%rd40, %rd86, %rd130;
	add.s32 	%r598, %r525, %r515;
	mul.wide.u32 	%rd131, %r598, 4;
	add.s64 	%rd41, %rd86, %rd131;
	add.s32 	%r599, %r525, %r517;
	mul.wide.u32 	%rd132, %r599, 4;
	add.s64 	%rd42, %rd86, %rd132;
	add.s32 	%r600, %r525, %r519;
	mul.wide.u32 	%rd133, %r600, 4;
	add.s64 	%rd43, %rd86, %rd133;
	add.s32 	%r601, %r525, %r521;
	mul.wide.u32 	%rd134, %r601, 4;
	add.s64 	%rd44, %rd86, %rd134;
	add.s32 	%r602, %r147, -1;
	setp.lt.u32 	%p242, %r602, 3;
	or.pred  	%p243, %p234, %p242;
	or.pred  	%p244, %p243, %p235;
	and.b32  	%r603, %r1, 24;
	setp.eq.s32 	%p245, %r603, 24;
	or.pred  	%p246, %p236, %p245;
	selp.b32 	%r180, 1145324612, -286331154, %p243;
	or.pred  	%p1, %p244, %p246;
	shl.b32 	%r604, %r490, 5;
	add.s32 	%r605, %r540, %r604;
	mul.wide.u32 	%rd135, %r605, 4;
	add.s64 	%rd45, %rd86, %rd135;
	cvt.u64.u32 	%rd136, %r604;
	selp.b64 	%rd137, 0, 516, %p239;
	selp.b64 	%rd138, 0, 258, %p238;
	selp.b64 	%rd139, 2064, 0, %p237;
	cvt.u64.u32 	%rd140, %r527;
	selp.b64 	%rd141, 0, 1032, %p127;
	add.s64 	%rd142, %rd141, %rd140;
	add.s64 	%rd143, %rd142, %rd139;
	add.s64 	%rd144, %rd143, %rd138;
	add.s64 	%rd145, %rd144, %rd137;
	add.s64 	%rd146, %rd145, %rd136;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd46, %rd86, %rd147;
	or.b32  	%r606, %r604, 64;
	add.s32 	%r607, %r540, %r606;
	mul.wide.u32 	%rd148, %r607, 4;
	add.s64 	%rd47, %rd86, %rd148;
	cvt.u64.u32 	%rd149, %r606;
	add.s64 	%rd150, %rd145, %rd149;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd48, %rd86, %rd151;
	or.b32  	%r608, %r604, 128;
	add.s32 	%r609, %r540, %r608;
	mul.wide.u32 	%rd152, %r609, 4;
	add.s64 	%rd49, %rd86, %rd152;
	cvt.u64.u32 	%rd153, %r608;
	add.s64 	%rd154, %rd145, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd50, %rd86, %rd155;
	or.b32  	%r610, %r604, 192;
	add.s32 	%r611, %r540, %r610;
	mul.wide.u32 	%rd156, %r611, 4;
	add.s64 	%rd51, %rd86, %rd156;
	cvt.u64.u32 	%rd157, %r610;
	add.s64 	%rd158, %rd145, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd52, %rd86, %rd159;
	add.s32 	%r612, %r562, 32;
	mul.wide.u32 	%rd160, %r612, 4;
	add.s64 	%rd53, %rd86, %rd160;
	add.s32 	%r613, %r562, 48;
	mul.wide.u32 	%rd161, %r613, 4;
	add.s64 	%rd54, %rd86, %rd161;
	add.s32 	%r614, %r562, 64;
	mul.wide.u32 	%rd162, %r614, 4;
	add.s64 	%rd55, %rd86, %rd162;
	add.s32 	%r615, %r562, 80;
	mul.wide.u32 	%rd163, %r615, 4;
	add.s64 	%rd56, %rd86, %rd163;
	add.s32 	%r616, %r562, 96;
	mul.wide.u32 	%rd164, %r616, 4;
	add.s64 	%rd57, %rd86, %rd164;
	add.s32 	%r617, %r562, 112;
	mul.wide.u32 	%rd165, %r617, 4;
	add.s64 	%rd58, %rd86, %rd165;
	add.s32 	%r618, %r562, 128;
	mul.wide.u32 	%rd166, %r618, 4;
	add.s64 	%rd59, %rd86, %rd166;
	add.s32 	%r619, %r562, 144;
	mul.wide.u32 	%rd167, %r619, 4;
	add.s64 	%rd60, %rd86, %rd167;
	add.s32 	%r620, %r562, 160;
	mul.wide.u32 	%rd168, %r620, 4;
	add.s64 	%rd61, %rd86, %rd168;
	add.s32 	%r621, %r562, 176;
	mul.wide.u32 	%rd169, %r621, 4;
	add.s64 	%rd62, %rd86, %rd169;
	add.s32 	%r622, %r562, 192;
	mul.wide.u32 	%rd170, %r622, 4;
	add.s64 	%rd63, %rd86, %rd170;
	add.s32 	%r623, %r562, 208;
	mul.wide.u32 	%rd171, %r623, 4;
	add.s64 	%rd64, %rd86, %rd171;
	add.s32 	%r624, %r562, 224;
	mul.wide.u32 	%rd172, %r624, 4;
	add.s64 	%rd65, %rd86, %rd172;
	add.s32 	%r625, %r562, 240;
	mul.wide.u32 	%rd173, %r625, 4;
	add.s64 	%rd66, %rd86, %rd173;
	mov.u32 	%r89, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3405, %r89;
	mov.u32 	%r3406, %r89;
	mov.u32 	%r3407, %r89;
	bra.uni 	$L__BB0_187;
$L__BB0_158:                            // %L46133
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p297, %r89, 4032;
	mov.u32 	%r89, %r145;
	@%p297 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_159;
$L__BB0_187:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_205 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r626, %r89, %r248;
	setp.lt.s32 	%p247, %r626, %r249;
	@%p247 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_159;
$L__BB0_188:                            // %pass780
                                        //   in Loop: Header=BB0_187 Depth=1
	cvt.u32.u64 	%r819, %rd11;
	setp.eq.s32 	%p248, %r178, 0;
	or.b32  	%r820, %r89, %r4;
	shl.b32 	%r821, %r820, 16;
	and.b32  	%r822, %r821, 265224192;
	or.b32  	%r823, %r822, %r175;
	or.b32  	%r824, %r823, %r176;
	or.b32  	%r825, %r824, %r177;
	add.s32 	%r826, %r174, %r825;
	shr.s32 	%r827, %r826, 31;
	shr.u32 	%r828, %r827, 4;
	add.s32 	%r829, %r826, %r828;
	shr.s32 	%r830, %r829, 28;
	setp.lt.s32 	%p249, %r826, 0;
	and.b32  	%r831, %r829, -268435456;
	setp.ne.s32 	%p250, %r831, %r826;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r832, 1, 0, %p251;
	sub.s32 	%r833, %r832, %r830;
	shl.b32 	%r834, %r833, 28;
	add.s32 	%r835, %r834, %r826;
	mul.wide.s32 	%rd174, %r835, 4;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r836, %r837, %r838, %r839}, [%rd175];
	or.b32  	%r840, %r820, 16;
	shl.b32 	%r841, %r840, 16;
	and.b32  	%r842, %r841, 266272768;
	or.b32  	%r843, %r842, %r175;
	or.b32  	%r844, %r843, %r176;
	or.b32  	%r845, %r844, %r177;
	add.s32 	%r846, %r174, %r845;
	shr.s32 	%r847, %r846, 31;
	shr.u32 	%r848, %r847, 4;
	add.s32 	%r849, %r846, %r848;
	shr.s32 	%r850, %r849, 28;
	setp.lt.s32 	%p252, %r846, 0;
	and.b32  	%r851, %r849, -268435456;
	setp.ne.s32 	%p253, %r851, %r846;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r852, 1, 0, %p254;
	sub.s32 	%r853, %r852, %r850;
	shl.b32 	%r854, %r853, 28;
	add.s32 	%r855, %r854, %r846;
	mul.wide.s32 	%rd176, %r855, 4;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r856, %r857, %r858, %r859}, [%rd177];
	and.b32  	%r860, %r89, 4032;
	or.b32  	%r861, %r4, %r860;
	shl.b32 	%r862, %r861, 16;
	or.b32  	%r863, %r862, %r175;
	or.b32  	%r864, %r863, %r176;
	or.b32  	%r865, %r864, %r177;
	or.b32  	%r866, %r865, 2097152;
	add.s32 	%r867, %r174, %r866;
	shr.s32 	%r868, %r867, 31;
	shr.u32 	%r869, %r868, 4;
	add.s32 	%r870, %r867, %r869;
	shr.s32 	%r871, %r870, 28;
	setp.lt.s32 	%p255, %r867, 0;
	and.b32  	%r872, %r870, -268435456;
	setp.ne.s32 	%p256, %r872, %r867;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r873, 1, 0, %p257;
	sub.s32 	%r874, %r873, %r871;
	shl.b32 	%r875, %r874, 28;
	add.s32 	%r876, %r875, %r867;
	mul.wide.s32 	%rd178, %r876, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r877, %r878, %r879, %r880}, [%rd179];
	or.b32  	%r881, %r865, 3145728;
	add.s32 	%r882, %r174, %r881;
	shr.s32 	%r883, %r882, 31;
	shr.u32 	%r884, %r883, 4;
	add.s32 	%r885, %r882, %r884;
	shr.s32 	%r886, %r885, 28;
	setp.lt.s32 	%p258, %r882, 0;
	and.b32  	%r887, %r885, -268435456;
	setp.ne.s32 	%p259, %r887, %r882;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r888, 1, 0, %p260;
	sub.s32 	%r889, %r888, %r886;
	shl.b32 	%r890, %r889, 28;
	add.s32 	%r891, %r890, %r882;
	mul.wide.s32 	%rd180, %r891, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r892, %r893, %r894, %r895}, [%rd181];
	selp.b32 	%r896, %r838, %r836, %p248;
	shfl.sync.bfly.b32	%r897, %r896, 16, 31, -1;
	selp.b32 	%r629, %r836, %r897, %p248;
	selp.b32 	%r634, %r897, %r838, %p248;
	selp.b32 	%r898, %r839, %r837, %p248;
	shfl.sync.bfly.b32	%r899, %r898, 16, 31, -1;
	selp.b32 	%r637, %r837, %r899, %p248;
	selp.b32 	%r642, %r899, %r839, %p248;
	selp.b32 	%r900, %r858, %r856, %p248;
	shfl.sync.bfly.b32	%r901, %r900, 16, 31, -1;
	selp.b32 	%r645, %r856, %r901, %p248;
	selp.b32 	%r650, %r901, %r858, %p248;
	selp.b32 	%r902, %r859, %r857, %p248;
	shfl.sync.bfly.b32	%r903, %r902, 16, 31, -1;
	selp.b32 	%r653, %r857, %r903, %p248;
	selp.b32 	%r658, %r903, %r859, %p248;
	selp.b32 	%r904, %r879, %r877, %p248;
	shfl.sync.bfly.b32	%r905, %r904, 16, 31, -1;
	selp.b32 	%r661, %r877, %r905, %p248;
	selp.b32 	%r666, %r905, %r879, %p248;
	selp.b32 	%r906, %r880, %r878, %p248;
	shfl.sync.bfly.b32	%r907, %r906, 16, 31, -1;
	selp.b32 	%r669, %r878, %r907, %p248;
	selp.b32 	%r674, %r907, %r880, %p248;
	selp.b32 	%r908, %r894, %r892, %p248;
	shfl.sync.bfly.b32	%r909, %r908, 16, 31, -1;
	selp.b32 	%r677, %r892, %r909, %p248;
	selp.b32 	%r682, %r909, %r894, %p248;
	selp.b32 	%r910, %r895, %r893, %p248;
	shfl.sync.bfly.b32	%r911, %r910, 16, 31, -1;
	selp.b32 	%r685, %r893, %r911, %p248;
	selp.b32 	%r690, %r911, %r895, %p248;
	shl.b32 	%r630, %r634, 4;
	mov.u32 	%r628, 252645135;
	// begin inline asm
	lop3.b32 %r692, %r628, %r629, %r630, 202;
	// end inline asm
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r708, %r628, %r633, %r634, 202;
	// end inline asm
	shl.b32 	%r638, %r642, 4;
	// begin inline asm
	lop3.b32 %r700, %r628, %r637, %r638, 202;
	// end inline asm
	shr.u32 	%r641, %r637, 4;
	// begin inline asm
	lop3.b32 %r716, %r628, %r641, %r642, 202;
	// end inline asm
	shl.b32 	%r646, %r650, 4;
	// begin inline asm
	lop3.b32 %r724, %r628, %r645, %r646, 202;
	// end inline asm
	shr.u32 	%r649, %r645, 4;
	// begin inline asm
	lop3.b32 %r740, %r628, %r649, %r650, 202;
	// end inline asm
	shl.b32 	%r654, %r658, 4;
	// begin inline asm
	lop3.b32 %r732, %r628, %r653, %r654, 202;
	// end inline asm
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r748, %r628, %r657, %r658, 202;
	// end inline asm
	shl.b32 	%r662, %r666, 4;
	// begin inline asm
	lop3.b32 %r693, %r628, %r661, %r662, 202;
	// end inline asm
	shr.u32 	%r665, %r661, 4;
	// begin inline asm
	lop3.b32 %r709, %r628, %r665, %r666, 202;
	// end inline asm
	shl.b32 	%r670, %r674, 4;
	// begin inline asm
	lop3.b32 %r701, %r628, %r669, %r670, 202;
	// end inline asm
	shr.u32 	%r673, %r669, 4;
	// begin inline asm
	lop3.b32 %r717, %r628, %r673, %r674, 202;
	// end inline asm
	shl.b32 	%r678, %r682, 4;
	// begin inline asm
	lop3.b32 %r725, %r628, %r677, %r678, 202;
	// end inline asm
	shr.u32 	%r681, %r677, 4;
	// begin inline asm
	lop3.b32 %r741, %r628, %r681, %r682, 202;
	// end inline asm
	shl.b32 	%r686, %r690, 4;
	// begin inline asm
	lop3.b32 %r733, %r628, %r685, %r686, 202;
	// end inline asm
	shr.u32 	%r689, %r685, 4;
	// begin inline asm
	lop3.b32 %r749, %r628, %r689, %r690, 202;
	// end inline asm
	mov.u32 	%r694, 25152;
	// begin inline asm
	prmt.b32 %r756, %r692, %r693, %r694;
	// end inline asm
	mov.u32 	%r698, 29521;
	// begin inline asm
	prmt.b32 %r788, %r692, %r693, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r700, %r701, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r700, %r701, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r708, %r709, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r708, %r709, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r765, %r716, %r717, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r716, %r717, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r724, %r725, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r724, %r725, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r732, %r733, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r732, %r733, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r773, %r740, %r741, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r740, %r741, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r748, %r749, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r748, %r749, %r698;
	// end inline asm
	mov.u32 	%r814, 21520;
	// begin inline asm
	prmt.b32 %r755, %r756, %r757, %r814;
	// end inline asm
	mov.u32 	%r818, 30258;
	// begin inline asm
	prmt.b32 %r759, %r756, %r757, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r764, %r765, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r764, %r765, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r772, %r773, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r772, %r773, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r780, %r781, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r780, %r781, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r788, %r789, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r796, %r797, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r804, %r805, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r812, %r813, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r812, %r813, %r818;
	// end inline asm
	st.shared.u32 	[%rd10], %r755;
	st.shared.u32 	[%rd12+512], %r763;
	st.shared.u32 	[%rd12+256], %r759;
	st.shared.u32 	[%rd12+768], %r767;
	and.b32  	%r912, %r840, 31;
	add.s32 	%r913, %r912, %r819;
	mul.wide.u32 	%rd182, %r913, 4;
	add.s64 	%rd184, %rd86, %rd182;
	st.shared.u32 	[%rd184], %r771;
	cvt.u64.u32 	%rd185, %r912;
	add.s64 	%rd186, %rd11, %rd185;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd86, %rd187;
	st.shared.u32 	[%rd188+512], %r779;
	st.shared.u32 	[%rd188+256], %r775;
	st.shared.u32 	[%rd188+768], %r783;
	st.shared.u32 	[%rd12+128], %r787;
	st.shared.u32 	[%rd12+640], %r795;
	st.shared.u32 	[%rd12+384], %r791;
	st.shared.u32 	[%rd12+896], %r799;
	st.shared.u32 	[%rd188+128], %r803;
	st.shared.u32 	[%rd188+640], %r811;
	st.shared.u32 	[%rd188+384], %r807;
	st.shared.u32 	[%rd188+896], %r815;
	bar.sync 	0;
	ld.shared.u32 	%r181, [%rd13];
	ld.shared.u32 	%r182, [%rd14];
	ld.shared.u32 	%r183, [%rd15];
	ld.shared.u32 	%r184, [%rd16];
	ld.shared.u32 	%r185, [%rd17];
	ld.shared.u32 	%r186, [%rd18];
	ld.shared.u32 	%r187, [%rd19];
	ld.shared.u32 	%r188, [%rd20];
	ld.shared.u32 	%r189, [%rd21];
	ld.shared.u32 	%r190, [%rd22];
	ld.shared.u32 	%r191, [%rd23];
	ld.shared.u32 	%r192, [%rd24];
	ld.shared.u32 	%r193, [%rd25];
	ld.shared.u32 	%r194, [%rd26];
	ld.shared.u32 	%r195, [%rd27];
	ld.shared.u32 	%r196, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r197, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r198, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 15, 31, -1;
	setp.eq.s32 	%p261, %r197, 999999999;
	@%p261 bra 	$L__BB0_136;
// %bb.189:                             // %pass3077
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r914, %r197, %r1;
	mul.wide.s32 	%rd189, %r914, 4;
	add.s64 	%rd191, %rd86, %rd189;
	st.shared.u32 	[%rd191], %r181;
	setp.eq.s32 	%p262, %r198, 999999999;
	@%p262 bra 	$L__BB0_137;
// %bb.190:                             // %pass3145
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r915, %r198, %r1;
	mul.wide.s32 	%rd192, %r915, 4;
	add.s64 	%rd194, %rd86, %rd192;
	st.shared.u32 	[%rd194], %r182;
	setp.eq.s32 	%p263, %r199, 999999999;
	@%p263 bra 	$L__BB0_138;
// %bb.191:                             // %pass3213
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r916, %r199, %r1;
	mul.wide.s32 	%rd195, %r916, 4;
	add.s64 	%rd197, %rd86, %rd195;
	st.shared.u32 	[%rd197], %r183;
	setp.eq.s32 	%p264, %r200, 999999999;
	@%p264 bra 	$L__BB0_139;
// %bb.192:                             // %pass3281
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r917, %r200, %r1;
	mul.wide.s32 	%rd198, %r917, 4;
	add.s64 	%rd200, %rd86, %rd198;
	st.shared.u32 	[%rd200], %r184;
	setp.eq.s32 	%p265, %r201, 999999999;
	@%p265 bra 	$L__BB0_140;
// %bb.193:                             // %pass3349
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r918, %r201, %r1;
	mul.wide.s32 	%rd201, %r918, 4;
	add.s64 	%rd203, %rd86, %rd201;
	st.shared.u32 	[%rd203], %r185;
	setp.eq.s32 	%p266, %r202, 999999999;
	@%p266 bra 	$L__BB0_141;
// %bb.194:                             // %pass3417
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r919, %r202, %r1;
	mul.wide.s32 	%rd204, %r919, 4;
	add.s64 	%rd206, %rd86, %rd204;
	st.shared.u32 	[%rd206], %r186;
	setp.eq.s32 	%p267, %r203, 999999999;
	@%p267 bra 	$L__BB0_142;
// %bb.195:                             // %pass3485
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r920, %r203, %r1;
	mul.wide.s32 	%rd207, %r920, 4;
	add.s64 	%rd209, %rd86, %rd207;
	st.shared.u32 	[%rd209], %r187;
	setp.eq.s32 	%p268, %r204, 999999999;
	@%p268 bra 	$L__BB0_143;
// %bb.196:                             // %pass3553
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r921, %r204, %r1;
	mul.wide.s32 	%rd210, %r921, 4;
	add.s64 	%rd212, %rd86, %rd210;
	st.shared.u32 	[%rd212], %r188;
	setp.eq.s32 	%p269, %r205, 999999999;
	@%p269 bra 	$L__BB0_144;
// %bb.197:                             // %pass3621
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r922, %r205, %r1;
	mul.wide.s32 	%rd213, %r922, 4;
	add.s64 	%rd215, %rd86, %rd213;
	st.shared.u32 	[%rd215], %r189;
	setp.eq.s32 	%p270, %r206, 999999999;
	@%p270 bra 	$L__BB0_145;
// %bb.198:                             // %pass3689
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r923, %r206, %r1;
	mul.wide.s32 	%rd216, %r923, 4;
	add.s64 	%rd218, %rd86, %rd216;
	st.shared.u32 	[%rd218], %r190;
	setp.eq.s32 	%p271, %r207, 999999999;
	@%p271 bra 	$L__BB0_146;
// %bb.199:                             // %pass3757
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r924, %r207, %r1;
	mul.wide.s32 	%rd219, %r924, 4;
	add.s64 	%rd221, %rd86, %rd219;
	st.shared.u32 	[%rd221], %r191;
	setp.eq.s32 	%p272, %r208, 999999999;
	@%p272 bra 	$L__BB0_147;
// %bb.200:                             // %pass3825
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r925, %r208, %r1;
	mul.wide.s32 	%rd222, %r925, 4;
	add.s64 	%rd224, %rd86, %rd222;
	st.shared.u32 	[%rd224], %r192;
	setp.eq.s32 	%p273, %r209, 999999999;
	@%p273 bra 	$L__BB0_148;
// %bb.201:                             // %pass3893
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r926, %r209, %r1;
	mul.wide.s32 	%rd225, %r926, 4;
	add.s64 	%rd227, %rd86, %rd225;
	st.shared.u32 	[%rd227], %r193;
	setp.eq.s32 	%p274, %r210, 999999999;
	@%p274 bra 	$L__BB0_149;
// %bb.202:                             // %pass3961
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r927, %r210, %r1;
	mul.wide.s32 	%rd228, %r927, 4;
	add.s64 	%rd230, %rd86, %rd228;
	st.shared.u32 	[%rd230], %r194;
	setp.eq.s32 	%p275, %r211, 999999999;
	@%p275 bra 	$L__BB0_150;
// %bb.203:                             // %pass4029
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r928, %r211, %r1;
	mul.wide.s32 	%rd231, %r928, 4;
	add.s64 	%rd233, %rd86, %rd231;
	st.shared.u32 	[%rd233], %r195;
	setp.eq.s32 	%p276, %r212, 999999999;
	@%p276 bra 	$L__BB0_151;
// %bb.204:                             // %pass4097
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r930, %r212, %r1;
	mul.wide.s32 	%rd234, %r930, 4;
	add.s64 	%rd236, %rd86, %rd234;
	st.shared.u32 	[%rd236], %r196;
	bar.sync 	0;
	ld.shared.u32 	%r213, [%rd29];
	ld.shared.u32 	%r214, [%rd30];
	ld.shared.u32 	%r215, [%rd31];
	ld.shared.u32 	%r216, [%rd32];
	ld.shared.u32 	%r217, [%rd33];
	ld.shared.u32 	%r218, [%rd34];
	ld.shared.u32 	%r219, [%rd35];
	ld.shared.u32 	%r220, [%rd36];
	ld.shared.u32 	%r221, [%rd37];
	ld.shared.u32 	%r222, [%rd38];
	ld.shared.u32 	%r223, [%rd39];
	ld.shared.u32 	%r224, [%rd40];
	ld.shared.u32 	%r225, [%rd41];
	ld.shared.u32 	%r226, [%rd42];
	ld.shared.u32 	%r227, [%rd43];
	ld.shared.u32 	%r228, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3397, 16;
	bra.uni 	$L__BB0_205;
$L__BB0_152:                            // %L21619
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1479, [%rd7];
	ld.shared.u32 	%r1486, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1496, %r1493}, {%r375, %r378}, {%r1479}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1505, %r1502}, {%r375, %r378}, {%r1486}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1489, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1491, %r1489, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1494, %r409, %r1496, %r1491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1498, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r1498, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r409, %r1505, %r1500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r412, %r1496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r409, %r1493, %r1507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r412, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r409, %r1502, %r1514;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1540, %r1543}, {%r451, %r454}, {%r1494, %r1510}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1547, %r1551}, {%r451, %r454}, {%r1503, %r1517}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r1540, %r1540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r1543, %r1543, %r1539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r1547, %r1547, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1550, %r1551, %r1551, %r1546;
	// end inline asm
	mov.u32 	%r2136, 492117333;
	// begin inline asm
	fma.rn.f16x2 %r1554, %r2136, %r1550, %r3407;
	// end inline asm
	ld.shared.u32 	%r1562, [%rd53];
	ld.shared.u32 	%r1569, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1579, %r1576}, {%r375, %r378}, {%r1562}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1588, %r1585}, {%r375, %r378}, {%r1569}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1572, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1574, %r1572, %r1576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r409, %r1579, %r1574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1581, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r1581, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r409, %r1588, %r1583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r412, %r1579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r409, %r1576, %r1590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r412, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r409, %r1585, %r1597;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1626}, {%r451, %r454}, {%r1577, %r1593}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1630, %r1634}, {%r451, %r454}, {%r1586, %r1600}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r1623, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r1626, %r1626, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1629, %r1630, %r1630, %r1625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1633, %r1634, %r1634, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r2136, %r1633, %r1554;
	// end inline asm
	ld.shared.u32 	%r1645, [%rd55];
	ld.shared.u32 	%r1652, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1662, %r1659}, {%r375, %r378}, {%r1645}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1671, %r1668}, {%r375, %r378}, {%r1652}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1655, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1657, %r1655, %r1659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r409, %r1662, %r1657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r1664, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r409, %r1671, %r1666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r412, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r409, %r1659, %r1673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r412, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r409, %r1668, %r1680;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1706, %r1709}, {%r451, %r454}, {%r1660, %r1676}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1713, %r1717}, {%r451, %r454}, {%r1669, %r1683}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1706, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r1709, %r1709, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r1713, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r1717, %r1717, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r2136, %r1716, %r1637;
	// end inline asm
	ld.shared.u32 	%r1728, [%rd57];
	ld.shared.u32 	%r1735, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1745, %r1742}, {%r375, %r378}, {%r1728}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1754, %r1751}, {%r375, %r378}, {%r1735}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1738, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r1738, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r409, %r1745, %r1740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r1747, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r409, %r1754, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r412, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r409, %r1742, %r1756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r412, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r409, %r1751, %r1763;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1789, %r1792}, {%r451, %r454}, {%r1743, %r1759}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1796, %r1800}, {%r451, %r454}, {%r1752, %r1766}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r1789, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r2136, %r1799, %r1720;
	// end inline asm
	ld.shared.u32 	%r1811, [%rd59];
	ld.shared.u32 	%r1818, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1828, %r1825}, {%r375, %r378}, {%r1811}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1837, %r1834}, {%r375, %r378}, {%r1818}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1821, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1823, %r1821, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r409, %r1828, %r1823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1830, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r1830, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r409, %r1837, %r1832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r412, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r409, %r1825, %r1839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1846, %r412, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r409, %r1834, %r1846;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1875}, {%r451, %r454}, {%r1826, %r1842}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1879, %r1883}, {%r451, %r454}, {%r1835, %r1849}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1872, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r1875, %r1875, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r1879, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1883, %r1883, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r2136, %r1882, %r1803;
	// end inline asm
	ld.shared.u32 	%r1894, [%rd61];
	ld.shared.u32 	%r1901, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1911, %r1908}, {%r375, %r378}, {%r1894}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1920, %r1917}, {%r375, %r378}, {%r1901}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1904, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r1904, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r409, %r1911, %r1906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1913, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r1913, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r409, %r1920, %r1915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r412, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r409, %r1908, %r1922;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1929, %r412, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r409, %r1917, %r1929;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1958}, {%r451, %r454}, {%r1909, %r1925}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1966}, {%r451, %r454}, {%r1918, %r1932}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r1955, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1966, %r1966, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r2136, %r1965, %r1886;
	// end inline asm
	ld.shared.u32 	%r1977, [%rd63];
	ld.shared.u32 	%r1984, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1994, %r1991}, {%r375, %r378}, {%r1977}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2003, %r2000}, {%r375, %r378}, {%r1984}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1987, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r1987, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r409, %r1994, %r1989;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1996, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r1996, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r409, %r2003, %r1998;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2005, %r412, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r409, %r1991, %r2005;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2012, %r412, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2015, %r409, %r2000, %r2012;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2041}, {%r451, %r454}, {%r1992, %r2008}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2045, %r2049}, {%r451, %r454}, {%r2001, %r2015}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2038, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r2041, %r2041, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r2045, %r2045, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r2049, %r2049, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r2136, %r2048, %r1969;
	// end inline asm
	ld.shared.u32 	%r2060, [%rd65];
	ld.shared.u32 	%r2067, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2077, %r2074}, {%r375, %r378}, {%r2060}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2086, %r2083}, {%r375, %r378}, {%r2067}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2070, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2072, %r2070, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r409, %r2077, %r2072;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2079, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2081, %r2079, %r2083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r409, %r2086, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r412, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r409, %r2074, %r2088;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r412, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r409, %r2083, %r2095;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2124}, {%r451, %r454}, {%r2075, %r2091}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2128, %r2132}, {%r451, %r454}, {%r2084, %r2098}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2121, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r2124, %r2124, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r2128, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r2132, %r2132, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r2136, %r2131, %r2052;
	// end inline asm
	add.s32 	%r3405, %r3405, 8;
	setp.eq.s32 	%p282, %r3405, 24;
	@%p282 bra 	$L__BB0_209;
$L__BB0_153:                            // %L29179
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	add.s32 	%r3397, %r3397, -8;
	setp.ne.s32 	%p286, %r3397, -16;
	@%p286 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_154;
$L__BB0_205:                            // %L12262
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3397, 16;
	selp.b32 	%r1323, %r213, 0, %p277;
	setp.eq.s32 	%p278, %r3397, 8;
	selp.b32 	%r1324, %r217, %r1323, %p278;
	setp.eq.s32 	%p279, %r3397, 0;
	selp.b32 	%r1325, %r221, %r1324, %p279;
	setp.eq.s32 	%p280, %r3397, -8;
	selp.b32 	%r1326, %r225, %r1325, %p280;
	selp.b32 	%r1327, %r214, 0, %p277;
	selp.b32 	%r1328, %r218, %r1327, %p278;
	selp.b32 	%r1329, %r222, %r1328, %p279;
	selp.b32 	%r1330, %r226, %r1329, %p280;
	selp.b32 	%r1331, %r215, 0, %p277;
	selp.b32 	%r1332, %r219, %r1331, %p278;
	selp.b32 	%r1333, %r223, %r1332, %p279;
	selp.b32 	%r1334, %r227, %r1333, %p280;
	selp.b32 	%r1335, %r216, 0, %p277;
	selp.b32 	%r1336, %r220, %r1335, %p278;
	selp.b32 	%r1337, %r224, %r1336, %p279;
	selp.b32 	%r1338, %r228, %r1337, %p280;
	// begin inline asm
	mov.b32 %r936, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r935, %r1326, -2004318072;
	mov.u32 	%r1072, 983055;
	// begin inline asm
	lop3.b32 %r933, %r1072, %r935, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	mov.u32 	%r1083, 15728880;
	// begin inline asm
	lop3.b32 %r944, %r1083, %r935, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r947, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r981, %r1330, -2004318072;
	// begin inline asm
	lop3.b32 %r979, %r1072, %r981, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r1083, %r981, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r993, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1027, %r1334, -2004318072;
	// begin inline asm
	lop3.b32 %r1025, %r1072, %r1027, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1036, %r1083, %r1027, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1039, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1085, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1073, %r1338, -2004318072;
	// begin inline asm
	lop3.b32 %r1071, %r1072, %r1073, %r1074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1076, %r1074, %r1075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1079, %r1071, %r1076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1082, %r1083, %r1073, %r1085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1087, %r1085, %r1086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1090, %r1082, %r1087;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1115, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r952;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1118, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1121, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r998;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1124, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1127, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1044;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1130, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1079;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1090;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1136, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1194, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1139, %r1140}, {%r278, %r281}, {%r1115}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1146, %r1147}, {%r278, %r281}, {%r1118}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1153, %r1154}, {%r278, %r281}, {%r1121}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1160, %r1161}, {%r278, %r281}, {%r1124}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1167, %r1168}, {%r278, %r281}, {%r1127}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1174, %r1175}, {%r278, %r281}, {%r1130}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1181, %r1182}, {%r278, %r281}, {%r1133}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1188, %r1189}, {%r278, %r281}, {%r1136}, {%r1194, %r1194};
	// end inline asm
	@%p1 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;
$L__BB0_207:                            // %pass5517
                                        //   in Loop: Header=BB0_205 Depth=2
	// begin inline asm
	neg.f16x2 %r1195, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1197, %r1195, %r1140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r316, %r1139, %r1197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1204, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r1204, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r316, %r1146, %r1206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1213, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r1213, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r316, %r1153, %r1215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1222, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r1222, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r316, %r1160, %r1224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1231, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1233, %r1231, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r316, %r1167, %r1233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1240, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r1240, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r316, %r1174, %r1242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1249, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1251, %r1249, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r316, %r1181, %r1251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1258, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r1258, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r316, %r1188, %r1260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r319, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r316, %r1140, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r319, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r316, %r1147, %r1274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r319, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r316, %r1154, %r1281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1288, %r319, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1291, %r316, %r1161, %r1288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r319, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1298, %r316, %r1168, %r1295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r319, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r316, %r1175, %r1302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1309, %r319, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1312, %r316, %r1182, %r1309;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1316, %r319, %r1188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r316, %r1189, %r1316;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1412, %r1413}, {%r363, %r366}, {%r1200, %r1270}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1420, %r1421}, {%r363, %r366}, {%r1209, %r1277}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1428, %r1429}, {%r363, %r366}, {%r1218, %r1284}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1436, %r1437}, {%r363, %r366}, {%r1227, %r1291}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1444, %r1445}, {%r363, %r366}, {%r1236, %r1298}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1452, %r1453}, {%r363, %r366}, {%r1245, %r1305}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1460, %r1461}, {%r363, %r366}, {%r1254, %r1312}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1468, %r1469}, {%r363, %r366}, {%r1263, %r1319}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1412, %r1413, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1412, %r1413, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1420, %r1421, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1420, %r1421, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1428, %r1429, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1428, %r1429, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1436, %r1437, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1436, %r1437, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1444, %r1445, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1444, %r1445, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1452, %r1453, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1452, %r1453, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1460, %r1461, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1460, %r1461, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1468, %r1469, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1468, %r1469, %r818;
	// end inline asm
	st.shared.u32 	[%rd45], %r229;
	st.shared.u32 	[%rd46+16576], %r230;
	st.shared.u32 	[%rd46+64], %r231;
	st.shared.u32 	[%rd46+16640], %r232;
	st.shared.u32 	[%rd47], %r233;
	st.shared.u32 	[%rd48+16576], %r234;
	st.shared.u32 	[%rd48+64], %r235;
	st.shared.u32 	[%rd48+16640], %r236;
	st.shared.u32 	[%rd49], %r237;
	st.shared.u32 	[%rd50+16576], %r238;
	st.shared.u32 	[%rd50+64], %r239;
	st.shared.u32 	[%rd50+16640], %r240;
	st.shared.u32 	[%rd51], %r241;
	st.shared.u32 	[%rd52+16576], %r242;
	st.shared.u32 	[%rd52+64], %r243;
	st.shared.u32 	[%rd52+16640], %r244;
	@%p229 bra 	$L__BB0_152;
// %bb.208:                             // %pass7916
                                        //   in Loop: Header=BB0_205 Depth=2
	st.shared.u32 	[%rd45], %r229;
	st.shared.u32 	[%rd46+16576], %r230;
	st.shared.u32 	[%rd46+64], %r231;
	st.shared.u32 	[%rd46+16640], %r232;
	st.shared.u32 	[%rd47], %r233;
	st.shared.u32 	[%rd48+16576], %r234;
	st.shared.u32 	[%rd48+64], %r235;
	st.shared.u32 	[%rd48+16640], %r236;
	st.shared.u32 	[%rd49], %r237;
	st.shared.u32 	[%rd50+16576], %r238;
	st.shared.u32 	[%rd50+64], %r239;
	st.shared.u32 	[%rd50+16640], %r240;
	st.shared.u32 	[%rd51], %r241;
	st.shared.u32 	[%rd52+16576], %r242;
	st.shared.u32 	[%rd52+64], %r243;
	st.shared.u32 	[%rd52+16640], %r244;
	bra.uni 	$L__BB0_152;
$L__BB0_209:                            // %pass13225
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r2140, %r3406, 20;
	or.b32  	%r2141, %r179, %r2140;
	cvt.u64.u32 	%rd239, %r2141;
	add.s64 	%rd240, %rd239, %rd9;
	shr.u64 	%rd241, %rd240, 34;
	add.s64 	%rd242, %rd240, %rd241;
	shr.s64 	%rd243, %rd242, 30;
	setp.lt.s64 	%p283, %rd240, 0;
	and.b64  	%rd244, %rd242, -1073741824;
	setp.ne.s64 	%p284, %rd244, %rd240;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd245, 1, 0, %p285;
	sub.s64 	%rd246, %rd245, %rd243;
	shl.b64 	%rd247, %rd246, 30;
	add.s64 	%rd248, %rd247, %rd240;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3407;
	add.s32 	%r3406, %r3406, 1;
	mov.u32 	%r3405, 0;
	mov.u32 	%r3407, %r3405;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29200.preheader
                                        //   in Loop: Header=BB0_187 Depth=1
	mov.u32 	%r3404, 16;
	bra.uni 	$L__BB0_155;
$L__BB0_156:                            // %L38557
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2695, [%rd7];
	ld.shared.u32 	%r2702, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2712, %r2709}, {%r375, %r378}, {%r2695}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2721, %r2718}, {%r375, %r378}, {%r2702}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2710, %r409, %r2712, %r2707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2714, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2714, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r409, %r2721, %r2716;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r412, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r409, %r2709, %r2723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r412, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r409, %r2718, %r2730;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2756, %r2759}, {%r451, %r454}, {%r2710, %r2726}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2763, %r2767}, {%r451, %r454}, {%r2719, %r2733}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2756, %r2756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r2759, %r2759, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r2763, %r2763, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r2767, %r2767, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2770, %r2136, %r2766, %r3407;
	// end inline asm
	ld.shared.u32 	%r2778, [%rd53];
	ld.shared.u32 	%r2785, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2795, %r2792}, {%r375, %r378}, {%r2778}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2804, %r2801}, {%r375, %r378}, {%r2785}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2788, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r2788, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r409, %r2795, %r2790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2797, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r2797, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r409, %r2804, %r2799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r412, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r409, %r2792, %r2806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r412, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r409, %r2801, %r2813;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2839, %r2842}, {%r451, %r454}, {%r2793, %r2809}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2846, %r2850}, {%r451, %r454}, {%r2802, %r2816}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r2839, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r2842, %r2842, %r2838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r2846, %r2846, %r2841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r2850, %r2850, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2853, %r2136, %r2849, %r2770;
	// end inline asm
	ld.shared.u32 	%r2861, [%rd55];
	ld.shared.u32 	%r2868, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2878, %r2875}, {%r375, %r378}, {%r2861}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2887, %r2884}, {%r375, %r378}, {%r2868}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2871, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2873, %r2871, %r2875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r409, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2880, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2882, %r2880, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r409, %r2887, %r2882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2889, %r412, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r409, %r2875, %r2889;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2896, %r412, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r409, %r2884, %r2896;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2922, %r2925}, {%r451, %r454}, {%r2876, %r2892}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2929, %r2933}, {%r451, %r454}, {%r2885, %r2899}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r2922, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r2925, %r2925, %r2921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r2929, %r2929, %r2924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r2933, %r2933, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r2136, %r2932, %r2853;
	// end inline asm
	ld.shared.u32 	%r2944, [%rd57];
	ld.shared.u32 	%r2951, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2961, %r2958}, {%r375, %r378}, {%r2944}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2970, %r2967}, {%r375, %r378}, {%r2951}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2954, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2956, %r2954, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r409, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2963, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r2963, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r409, %r2970, %r2965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2972, %r412, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r409, %r2958, %r2972;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2979, %r412, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r409, %r2967, %r2979;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3005, %r3008}, {%r451, %r454}, {%r2959, %r2975}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3012, %r3016}, {%r451, %r454}, {%r2968, %r2982}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r3005, %r3005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r3008, %r3008, %r3004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r3012, %r3012, %r3007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3015, %r3016, %r3016, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r2136, %r3015, %r2936;
	// end inline asm
	ld.shared.u32 	%r3027, [%rd59];
	ld.shared.u32 	%r3034, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3044, %r3041}, {%r375, %r378}, {%r3027}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3053, %r3050}, {%r375, %r378}, {%r3034}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3037, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3039, %r3037, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r409, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3046, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r3046, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r409, %r3053, %r3048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r412, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r409, %r3041, %r3055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r412, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r409, %r3050, %r3062;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3088, %r3091}, {%r451, %r454}, {%r3042, %r3058}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3095, %r3099}, {%r451, %r454}, {%r3051, %r3065}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3087, %r3088, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r3091, %r3091, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3094, %r3095, %r3095, %r3090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3098, %r3099, %r3099, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r2136, %r3098, %r3019;
	// end inline asm
	ld.shared.u32 	%r3110, [%rd61];
	ld.shared.u32 	%r3117, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r375, %r378}, {%r3110}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r375, %r378}, {%r3117}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r409, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r409, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r412, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r409, %r3124, %r3138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r412, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r409, %r3133, %r3145;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3171, %r3174}, {%r451, %r454}, {%r3125, %r3141}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3178, %r3182}, {%r451, %r454}, {%r3134, %r3148}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r3171, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3174, %r3174, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r3178, %r3178, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3182, %r3182, %r3177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r2136, %r3181, %r3102;
	// end inline asm
	ld.shared.u32 	%r3193, [%rd63];
	ld.shared.u32 	%r3200, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3210, %r3207}, {%r375, %r378}, {%r3193}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3219, %r3216}, {%r375, %r378}, {%r3200}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3205, %r3203, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r409, %r3210, %r3205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3212, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3214, %r3212, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r409, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r412, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r409, %r3207, %r3221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3228, %r412, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r409, %r3216, %r3228;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3254, %r3257}, {%r451, %r454}, {%r3208, %r3224}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3261, %r3265}, {%r451, %r454}, {%r3217, %r3231}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3253, %r3254, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r2136, %r3264, %r3185;
	// end inline asm
	ld.shared.u32 	%r3276, [%rd65];
	ld.shared.u32 	%r3283, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r375, %r378}, {%r3276}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r375, %r378}, {%r3283}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r409, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r409, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r412, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r409, %r3290, %r3304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r412, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r409, %r3299, %r3311;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3337, %r3340}, {%r451, %r454}, {%r3291, %r3307}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3344, %r3348}, {%r451, %r454}, {%r3300, %r3314}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r3337, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r3340, %r3340, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r3344, %r3344, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r3348, %r3348, %r3343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r2136, %r3347, %r3268;
	// end inline asm
	add.s32 	%r3405, %r3405, 8;
	setp.eq.s32 	%p292, %r3405, 24;
	@%p292 bra 	$L__BB0_211;
$L__BB0_157:                            // %L46117
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3404, %r3404, -8;
	setp.ne.s32 	%p296, %r3404, -16;
	@%p296 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_158;
$L__BB0_155:                            // %L29200
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p287, %r1, 16;
	setp.eq.s32 	%p288, %r3404, 16;
	selp.b32 	%r2671, %r213, 0, %p288;
	setp.eq.s32 	%p289, %r3404, 8;
	selp.b32 	%r2672, %r217, %r2671, %p289;
	setp.eq.s32 	%p290, %r3404, 0;
	selp.b32 	%r2673, %r221, %r2672, %p290;
	setp.eq.s32 	%p291, %r3404, -8;
	selp.b32 	%r2674, %r225, %r2673, %p291;
	selp.b32 	%r2675, %r214, 0, %p288;
	selp.b32 	%r2676, %r218, %r2675, %p289;
	selp.b32 	%r2677, %r222, %r2676, %p290;
	selp.b32 	%r2678, %r226, %r2677, %p291;
	selp.b32 	%r2679, %r215, 0, %p288;
	selp.b32 	%r2680, %r219, %r2679, %p289;
	selp.b32 	%r2681, %r223, %r2680, %p290;
	selp.b32 	%r2682, %r227, %r2681, %p291;
	selp.b32 	%r2683, %r216, 0, %p288;
	selp.b32 	%r2684, %r220, %r2683, %p289;
	selp.b32 	%r2685, %r224, %r2684, %p290;
	selp.b32 	%r2686, %r228, %r2685, %p291;
	// begin inline asm
	mov.b32 %r2170, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2687, %r2674, 8;
	xor.b32  	%r2180, %r2687, 8947848;
	// begin inline asm
	lop3.b32 %r2167, %r1072, %r2180, %r2170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2172, %r2170, %r2171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2175, %r2167, %r2172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2178, %r1083, %r2180, %r2181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2183, %r2181, %r2182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2186, %r2178, %r2183;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2688, %r2678, 8;
	xor.b32  	%r2226, %r2688, 8947848;
	// begin inline asm
	lop3.b32 %r2213, %r1072, %r2226, %r2216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2218, %r2216, %r2217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2221, %r2213, %r2218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2224, %r1083, %r2226, %r2227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2229, %r2227, %r2228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2232, %r2224, %r2229;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2689, %r2682, 8;
	xor.b32  	%r2272, %r2689, 8947848;
	// begin inline asm
	lop3.b32 %r2259, %r1072, %r2272, %r2262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2264, %r2262, %r2263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2267, %r2259, %r2264;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2270, %r1083, %r2272, %r2273, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2275, %r2273, %r2274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2278, %r2270, %r2275;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2690, %r2686, 8;
	xor.b32  	%r2318, %r2690, 8947848;
	// begin inline asm
	lop3.b32 %r2305, %r1072, %r2318, %r2308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2308, %r2309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2313, %r2305, %r2310;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2316, %r1083, %r2318, %r2319, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2321, %r2319, %r2320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2324, %r2316, %r2321;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2175;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2327, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2186;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2330, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2221;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2333, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2232;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2336, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2267;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2339, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2278;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2342, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2313;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2345, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2324;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2348, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2414, %r2411}, {%r278, %r281}, {%r2327}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2423, %r2420}, {%r278, %r281}, {%r2330}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2432, %r2429}, {%r278, %r281}, {%r2333}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2441, %r2438}, {%r278, %r281}, {%r2336}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2450, %r2447}, {%r278, %r281}, {%r2339}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r278, %r281}, {%r2342}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r278, %r281}, {%r2345}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2477, %r2474}, {%r278, %r281}, {%r2348}, {%r1194, %r1194};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2407, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2409, %r2407, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2412, %r316, %r2414, %r2409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2416, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2418, %r2416, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2421, %r316, %r2423, %r2418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2425, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r2425, %r2429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r316, %r2432, %r2427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2434, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r2434, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r316, %r2441, %r2436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2443, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2443, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r316, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r316, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r316, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2470, %r319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r2470, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r316, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r319, %r2414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r316, %r2411, %r2479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r319, %r2423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r316, %r2420, %r2486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r319, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r316, %r2429, %r2493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r319, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r316, %r2438, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r319, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r316, %r2447, %r2507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r319, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r316, %r2456, %r2514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r319, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r316, %r2465, %r2521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r319, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r316, %r2474, %r2528;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2608, %r2609}, {%r363, %r366}, {%r2412, %r2482}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2616, %r2617}, {%r363, %r366}, {%r2421, %r2489}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2624, %r2625}, {%r363, %r366}, {%r2430, %r2496}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2632, %r2633}, {%r363, %r366}, {%r2439, %r2503}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2640, %r2641}, {%r363, %r366}, {%r2448, %r2510}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2648, %r2649}, {%r363, %r366}, {%r2457, %r2517}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2656, %r2657}, {%r363, %r366}, {%r2466, %r2524}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2664, %r2665}, {%r363, %r366}, {%r2475, %r2531}, {%r1194, %r1194}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2607, %r2608, %r2609, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2611, %r2608, %r2609, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2615, %r2616, %r2617, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2619, %r2616, %r2617, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2623, %r2624, %r2625, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2627, %r2624, %r2625, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2631, %r2632, %r2633, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2635, %r2632, %r2633, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2639, %r2640, %r2641, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2643, %r2640, %r2641, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2647, %r2648, %r2649, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2651, %r2648, %r2649, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2655, %r2656, %r2657, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2659, %r2656, %r2657, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2663, %r2664, %r2665, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2667, %r2664, %r2665, %r818;
	// end inline asm
	st.shared.u32 	[%rd45], %r2607;
	st.shared.u32 	[%rd46+16576], %r2611;
	st.shared.u32 	[%rd46+64], %r2615;
	st.shared.u32 	[%rd46+16640], %r2619;
	st.shared.u32 	[%rd47], %r2623;
	st.shared.u32 	[%rd48+16576], %r2627;
	st.shared.u32 	[%rd48+64], %r2631;
	st.shared.u32 	[%rd48+16640], %r2635;
	st.shared.u32 	[%rd49], %r2639;
	st.shared.u32 	[%rd50+16576], %r2643;
	st.shared.u32 	[%rd50+64], %r2647;
	st.shared.u32 	[%rd50+16640], %r2651;
	st.shared.u32 	[%rd51], %r2655;
	st.shared.u32 	[%rd52+16576], %r2659;
	st.shared.u32 	[%rd52+64], %r2663;
	st.shared.u32 	[%rd52+16640], %r2667;
	@%p287 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_156;
$L__BB0_210:                            // %pass15726
                                        //   in Loop: Header=BB0_155 Depth=2
	st.shared.u32 	[%rd45], %r2607;
	st.shared.u32 	[%rd46+16576], %r2611;
	st.shared.u32 	[%rd46+64], %r2615;
	st.shared.u32 	[%rd46+16640], %r2619;
	st.shared.u32 	[%rd47], %r2623;
	st.shared.u32 	[%rd48+16576], %r2627;
	st.shared.u32 	[%rd48+64], %r2631;
	st.shared.u32 	[%rd48+16640], %r2635;
	st.shared.u32 	[%rd49], %r2639;
	st.shared.u32 	[%rd50+16576], %r2643;
	st.shared.u32 	[%rd50+64], %r2647;
	st.shared.u32 	[%rd50+16640], %r2651;
	st.shared.u32 	[%rd51], %r2655;
	st.shared.u32 	[%rd52+16576], %r2659;
	st.shared.u32 	[%rd52+64], %r2663;
	st.shared.u32 	[%rd52+16640], %r2667;
	bra.uni 	$L__BB0_156;
$L__BB0_211:                            // %pass21035
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3356, %r3406, 20;
	or.b32  	%r3357, %r179, %r3356;
	cvt.u64.u32 	%rd251, %r3357;
	add.s64 	%rd252, %rd251, %rd9;
	shr.u64 	%rd253, %rd252, 34;
	add.s64 	%rd254, %rd252, %rd253;
	shr.s64 	%rd255, %rd254, 30;
	setp.lt.s64 	%p293, %rd252, 0;
	and.b64  	%rd256, %rd254, -1073741824;
	setp.ne.s64 	%p294, %rd256, %rd252;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd257, 1, 0, %p295;
	sub.s64 	%rd258, %rd257, %rd255;
	shl.b64 	%rd259, %rd258, 30;
	add.s64 	%rd260, %rd259, %rd252;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3407;
	add.s32 	%r3406, %r3406, 1;
	mov.u32 	%r3405, %r1194;
	mov.u32 	%r3407, %r1194;
	bra.uni 	$L__BB0_157;
$L__BB0_159:                            // %L46148
	mov.u32 	%r3358, 0;
	st.global.u32 	[%rd6], %r3358;
	ret;
$L__BB0_206:                            // %post_box_union
	mov.u64 	%rd237, exception4114;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3374, 5;
	st.global.u32 	[%rd6], %r3374;
	mov.u64 	%rd293, exception4066;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3373, 5;
	st.global.u32 	[%rd6], %r3373;
	mov.u64 	%rd291, exception4066;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3372, 5;
	st.global.u32 	[%rd6], %r3372;
	mov.u64 	%rd289, exception4066;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3371, 5;
	st.global.u32 	[%rd6], %r3371;
	mov.u64 	%rd287, exception4066;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3370, 5;
	st.global.u32 	[%rd6], %r3370;
	mov.u64 	%rd285, exception4066;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3369, 5;
	st.global.u32 	[%rd6], %r3369;
	mov.u64 	%rd283, exception4066;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3368, 5;
	st.global.u32 	[%rd6], %r3368;
	mov.u64 	%rd281, exception4066;
	cvta.global.u64 	%rd282, %rd281;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd282;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3367, 5;
	st.global.u32 	[%rd6], %r3367;
	mov.u64 	%rd279, exception4066;
	cvta.global.u64 	%rd280, %rd279;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd280;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3366, 5;
	st.global.u32 	[%rd6], %r3366;
	mov.u64 	%rd277, exception4066;
	cvta.global.u64 	%rd278, %rd277;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd278;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3365, 5;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd275, exception4066;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3364, 5;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd273, exception4066;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd271, exception4066;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd269, exception4066;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd267, exception4066;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd265, exception4066;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd263, exception4066;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3376, 2;
	st.global.u32 	[%rd6], %r3376;
	mov.u64 	%rd297, exception4066;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3375, 3;
	st.global.u32 	[%rd6], %r3375;
	mov.u64 	%rd295, exception4066;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd73, exception1;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd72, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd78, __unnamed_1;
	cvta.global.u64 	%rd79, %rd78;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd79;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd72;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r464, [retval0+0];
	} // callseq 47
	mov.u32 	%r466, 4;
	st.global.u32 	[%rd6], %r466;
	mov.u64 	%rd81, exception4066;
	cvta.global.u64 	%rd82, %rd81;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd82;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
