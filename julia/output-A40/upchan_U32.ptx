// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_6450
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1271[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<230>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2442>;
	.reg .f32 	%f<937>;
	.reg .b64 	%rd<132>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r147, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r148, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r148, 67839;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd58, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	ld.param.u64 	%rd54, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r149, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r150, %r149, %r4;
	or.b32  	%r151, %r150, %r2;
	mul.wide.u32 	%rd64, %r151, 4;
	add.s64 	%rd4, %rd58, %rd64;
	mov.u32 	%r152, 1;
	st.global.u32 	[%rd4], %r152;
	ld.global.u32 	%r5, [%rd54];
	setp.lt.u32 	%p2, %r5, 65537;
	and.b32  	%r153, %r5, 255;
	setp.eq.s32 	%p3, %r153, 0;
	and.pred  	%p4, %p2, %p3;
	@%p4 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L242
	bfe.u32 	%r11, %r4, 1, 1;
	and.b32  	%r12, %r4, 1;
	bfe.u32 	%r14, %r4, 2, 1;
	shl.b32 	%r160, %r14, 1;
	shl.b32 	%r161, %r12, 2;
	shl.b32 	%r162, %r11, 3;
	or.b32  	%r163, %r161, %r162;
	or.b32  	%r164, %r160, %r163;
	shr.u32 	%r15, %r4, 4;
	or.b32  	%r16, %r15, %r164;
	or.b32  	%r17, %r16, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f1, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r16;
	sub.f32 	%f187, %f186, %f1;
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	abs.f32 	%f190, %f189;
	setp.gt.f32 	%p5, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p5;
	add.f32 	%f193, %f192, %f192;
	mov.b32 	%r165, %f193;
	and.b32  	%r166, %r165, -2147483648;
	or.b32  	%r167, %r166, 1056964608;
	mov.b32 	%f194, %r167;
	add.f32 	%f195, %f193, %f194;
	cvt.rzi.f32.f32 	%f196, %f195;
	abs.f32 	%f197, %f193;
	setp.gt.f32 	%p6, %f197, 0f4B000000;
	selp.f32 	%f198, %f193, %f196, %p6;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p7, %f197, 0f3F000000;
	selp.f32 	%f200, %f199, %f198, %p7;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	mul.f32 	%f202, %f201, %f201;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f3, %f187, %f216;
	setp.eq.f32 	%p10, %f3, 0f00000000;
	mov.f32 	%f904, 0f3F800000;
	mov.f32 	%f897, %f904;
	@%p10 bra 	LBB0_6;
// %bb.5:                               // %L429
	sin.approx.f32 	%f217, %f3;
	div.approx.f32 	%f897, %f217, %f3;
LBB0_6:                                 // %L432
	cvt.rzi.s32.f32 	%r168, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rn.f32.s32 	%f220, %r17;
	sub.f32 	%f221, %f220, %f1;
	div.approx.f32 	%f223, %f221, %f188;
	abs.f32 	%f224, %f223;
	setp.gt.f32 	%p11, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	selp.f32 	%f226, %f225, %f223, %p11;
	add.f32 	%f227, %f226, %f226;
	mov.b32 	%r172, %f227;
	and.b32  	%r173, %r172, -2147483648;
	or.b32  	%r174, %r173, 1056964608;
	mov.b32 	%f228, %r174;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p12, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p12;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p13, %f231, 0f3F000000;
	selp.f32 	%f234, %f233, %f232, %p13;
	cvt.rzi.s32.f32 	%r175, %f234;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	div.approx.f32 	%f8, %f221, %f216;
	setp.eq.f32 	%p16, %f8, 0f00000000;
	mov.f32 	%f898, %f904;
	@%p16 bra 	LBB0_8;
// %bb.7:                               // %L449
	sin.approx.f32 	%f251, %f8;
	div.approx.f32 	%f898, %f251, %f8;
LBB0_8:                                 // %L452
	add.s32 	%r169, %r168, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r176, %r175, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	or.b32  	%r182, %r16, 32;
	or.b32  	%r19, %r16, 48;
	cvt.rn.f32.s32 	%f255, %r182;
	sub.f32 	%f256, %f255, %f1;
	div.approx.f32 	%f258, %f256, %f188;
	abs.f32 	%f259, %f258;
	setp.gt.f32 	%p17, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	selp.f32 	%f261, %f260, %f258, %p17;
	add.f32 	%f262, %f261, %f261;
	mov.b32 	%r183, %f262;
	and.b32  	%r184, %r183, -2147483648;
	or.b32  	%r185, %r184, 1056964608;
	mov.b32 	%f263, %r185;
	add.f32 	%f264, %f262, %f263;
	cvt.rzi.f32.f32 	%f265, %f264;
	abs.f32 	%f266, %f262;
	setp.gt.f32 	%p18, %f266, 0f4B000000;
	selp.f32 	%f267, %f262, %f265, %p18;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p19, %f266, 0f3F000000;
	selp.f32 	%f269, %f268, %f267, %p19;
	cvt.rzi.s32.f32 	%r186, %f269;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	add.s32 	%r187, %r186, 1;
	mul.f32 	%f271, %f270, %f270;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	div.approx.f32 	%f12, %f256, %f216;
	setp.eq.f32 	%p22, %f12, 0f00000000;
	mov.f32 	%f899, %f904;
	@%p22 bra 	LBB0_10;
// %bb.9:                               // %L530
	sin.approx.f32 	%f286, %f12;
	div.approx.f32 	%f899, %f286, %f12;
LBB0_10:                                // %L533
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r170, %r169, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r177, %r176, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r188, %r187, 1;
	cvt.rn.f32.s32 	%f289, %r19;
	sub.f32 	%f290, %f289, %f1;
	div.approx.f32 	%f292, %f290, %f188;
	abs.f32 	%f293, %f292;
	setp.gt.f32 	%p23, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	selp.f32 	%f295, %f294, %f292, %p23;
	add.f32 	%f296, %f295, %f295;
	mov.b32 	%r190, %f296;
	and.b32  	%r191, %r190, -2147483648;
	or.b32  	%r192, %r191, 1056964608;
	mov.b32 	%f297, %r192;
	add.f32 	%f298, %f296, %f297;
	cvt.rzi.f32.f32 	%f299, %f298;
	abs.f32 	%f300, %f296;
	setp.gt.f32 	%p24, %f300, 0f4B000000;
	selp.f32 	%f301, %f296, %f299, %p24;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p25, %f300, 0f3F000000;
	selp.f32 	%f303, %f302, %f301, %p25;
	cvt.rzi.s32.f32 	%r193, %f303;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	add.s32 	%r194, %r193, 1;
	mul.f32 	%f305, %f304, %f304;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r195, %r194, 1;
	div.approx.f32 	%f17, %f290, %f216;
	setp.eq.f32 	%p28, %f17, 0f00000000;
	mov.f32 	%f900, %f904;
	@%p28 bra 	LBB0_12;
// %bb.11:                              // %L550
	sin.approx.f32 	%f320, %f17;
	div.approx.f32 	%f900, %f320, %f17;
LBB0_12:                                // %L553
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p8, %r170, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p14, %r177, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p20, %r188, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p26, %r195, 1;
	or.b32  	%r200, %r16, 64;
	or.b32  	%r21, %r16, 80;
	cvt.rn.f32.s32 	%f324, %r200;
	sub.f32 	%f325, %f324, %f1;
	div.approx.f32 	%f327, %f325, %f188;
	abs.f32 	%f328, %f327;
	setp.gt.f32 	%p29, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	selp.f32 	%f330, %f329, %f327, %p29;
	add.f32 	%f331, %f330, %f330;
	mov.b32 	%r201, %f331;
	and.b32  	%r202, %r201, -2147483648;
	or.b32  	%r203, %r202, 1056964608;
	mov.b32 	%f332, %r203;
	add.f32 	%f333, %f331, %f332;
	cvt.rzi.f32.f32 	%f334, %f333;
	abs.f32 	%f335, %f331;
	setp.gt.f32 	%p30, %f335, 0f4B000000;
	selp.f32 	%f336, %f331, %f334, %p30;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p31, %f335, 0f3F000000;
	selp.f32 	%f338, %f337, %f336, %p31;
	cvt.rzi.s32.f32 	%r204, %f338;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	add.s32 	%r205, %r204, 1;
	mul.f32 	%f340, %f339, %f339;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	and.b32  	%r206, %r205, 1;
	setp.eq.b32 	%p32, %r206, 1;
	div.approx.f32 	%f21, %f325, %f216;
	setp.eq.f32 	%p34, %f21, 0f00000000;
	mov.f32 	%f901, %f904;
	@%p34 bra 	LBB0_14;
// %bb.13:                              // %L631
	sin.approx.f32 	%f355, %f21;
	div.approx.f32 	%f901, %f355, %f21;
LBB0_14:                                // %L634
	shl.b32 	%r6, %r4, 1;
	selp.f32 	%f212, %f210, %f211, %p8;
	and.b32  	%r171, %r169, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p14;
	and.b32  	%r178, %r176, 2;
	selp.f32 	%f281, %f279, %f280, %p20;
	and.b32  	%r189, %r187, 2;
	selp.f32 	%f315, %f313, %f314, %p26;
	and.b32  	%r196, %r194, 2;
	selp.f32 	%f350, %f348, %f349, %p32;
	and.b32  	%r207, %r205, 2;
	cvt.rn.f32.s32 	%f358, %r21;
	sub.f32 	%f359, %f358, %f1;
	div.approx.f32 	%f361, %f359, %f188;
	abs.f32 	%f362, %f361;
	setp.gt.f32 	%p35, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	selp.f32 	%f364, %f363, %f361, %p35;
	add.f32 	%f365, %f364, %f364;
	mov.b32 	%r208, %f365;
	and.b32  	%r209, %r208, -2147483648;
	or.b32  	%r210, %r209, 1056964608;
	mov.b32 	%f366, %r210;
	add.f32 	%f367, %f365, %f366;
	cvt.rzi.f32.f32 	%f368, %f367;
	abs.f32 	%f369, %f365;
	setp.gt.f32 	%p36, %f369, 0f4B000000;
	selp.f32 	%f370, %f365, %f368, %p36;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p37, %f369, 0f3F000000;
	selp.f32 	%f372, %f371, %f370, %p37;
	cvt.rzi.s32.f32 	%r211, %f372;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	add.s32 	%r212, %r211, 1;
	mul.f32 	%f374, %f373, %f373;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	and.b32  	%r213, %r212, 1;
	setp.eq.b32 	%p38, %r213, 1;
	selp.f32 	%f384, %f382, %f383, %p38;
	and.b32  	%r214, %r212, 2;
	div.approx.f32 	%f26, %f359, %f216;
	setp.eq.f32 	%p40, %f26, 0f00000000;
	mov.f32 	%f902, %f904;
	@%p40 bra 	LBB0_16;
// %bb.15:                              // %L651
	sin.approx.f32 	%f389, %f26;
	div.approx.f32 	%f902, %f389, %f26;
LBB0_16:                                // %L654
	and.b32  	%r155, %r6, 8;
	shl.b32 	%r7, %r4, 2;
	and.b32  	%r157, %r4, 18;
	setp.eq.s32 	%p9, %r171, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p15, %r178, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p21, %r189, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p27, %r196, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p33, %r207, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p39, %r214, 0;
	sub.f32 	%f386, %f213, %f384;
	or.b32  	%r218, %r16, 96;
	or.b32  	%r23, %r16, 112;
	cvt.rn.f32.s32 	%f393, %r218;
	sub.f32 	%f394, %f393, %f1;
	div.approx.f32 	%f396, %f394, %f188;
	abs.f32 	%f397, %f396;
	setp.gt.f32 	%p41, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	selp.f32 	%f399, %f398, %f396, %p41;
	add.f32 	%f400, %f399, %f399;
	mov.b32 	%r219, %f400;
	and.b32  	%r220, %r219, -2147483648;
	or.b32  	%r221, %r220, 1056964608;
	mov.b32 	%f401, %r221;
	add.f32 	%f402, %f400, %f401;
	cvt.rzi.f32.f32 	%f403, %f402;
	abs.f32 	%f404, %f400;
	setp.gt.f32 	%p42, %f404, 0f4B000000;
	selp.f32 	%f405, %f400, %f403, %p42;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p43, %f404, 0f3F000000;
	selp.f32 	%f407, %f406, %f405, %p43;
	cvt.rzi.s32.f32 	%r222, %f407;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	add.s32 	%r223, %r222, 1;
	mul.f32 	%f409, %f408, %f408;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	and.b32  	%r224, %r223, 1;
	setp.eq.b32 	%p44, %r224, 1;
	selp.f32 	%f419, %f417, %f418, %p44;
	and.b32  	%r225, %r223, 2;
	setp.eq.s32 	%p45, %r225, 0;
	sub.f32 	%f421, %f213, %f419;
	div.approx.f32 	%f30, %f394, %f216;
	setp.eq.f32 	%p46, %f30, 0f00000000;
	mov.f32 	%f903, %f904;
	@%p46 bra 	LBB0_18;
// %bb.17:                              // %L732
	sin.approx.f32 	%f424, %f30;
	div.approx.f32 	%f903, %f424, %f30;
LBB0_18:                                // %L735
	and.b32  	%r156, %r7, 4;
	or.b32  	%r158, %r157, %r155;
	selp.f32 	%f215, %f212, %f214, %p9;
	selp.f32 	%f249, %f246, %f248, %p15;
	selp.f32 	%f284, %f281, %f283, %p21;
	selp.f32 	%f318, %f315, %f317, %p27;
	selp.f32 	%f353, %f350, %f352, %p33;
	selp.f32 	%f387, %f384, %f386, %p39;
	selp.f32 	%f422, %f419, %f421, %p45;
	cvt.rn.f32.s32 	%f427, %r23;
	sub.f32 	%f428, %f427, %f1;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p47, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f433, %f432, %f430, %p47;
	add.f32 	%f434, %f433, %f433;
	mov.b32 	%r226, %f434;
	and.b32  	%r227, %r226, -2147483648;
	or.b32  	%r228, %r227, 1056964608;
	mov.b32 	%f435, %r228;
	add.f32 	%f436, %f434, %f435;
	cvt.rzi.f32.f32 	%f437, %f436;
	abs.f32 	%f438, %f434;
	setp.gt.f32 	%p48, %f438, 0f4B000000;
	selp.f32 	%f439, %f434, %f437, %p48;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p49, %f438, 0f3F000000;
	selp.f32 	%f441, %f440, %f439, %p49;
	cvt.rzi.s32.f32 	%r229, %f441;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	add.s32 	%r230, %r229, 1;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	and.b32  	%r231, %r230, 1;
	setp.eq.b32 	%p50, %r231, 1;
	selp.f32 	%f453, %f451, %f452, %p50;
	and.b32  	%r232, %r230, 2;
	setp.eq.s32 	%p51, %r232, 0;
	sub.f32 	%f455, %f213, %f453;
	selp.f32 	%f456, %f453, %f455, %p51;
	div.approx.f32 	%f35, %f428, %f216;
	setp.eq.f32 	%p52, %f35, 0f00000000;
	@%p52 bra 	LBB0_20;
// %bb.19:                              // %L752
	sin.approx.f32 	%f458, %f35;
	div.approx.f32 	%f904, %f458, %f35;
LBB0_20:                                // %L755
	or.b32  	%r159, %r158, %r156;
	mul.f32 	%f2, %f215, %f215;
	mul.f32 	%f7, %f249, %f249;
	mul.f32 	%f11, %f284, %f284;
	mul.f32 	%f16, %f318, %f318;
	mul.f32 	%f20, %f353, %f353;
	mul.f32 	%f25, %f387, %f387;
	mul.f32 	%f29, %f422, %f422;
	mul.f32 	%f34, %f456, %f456;
	mul.lo.s32 	%r25, %r16, 31;
	cvt.rn.f32.s32 	%f461, %r25;
	div.approx.f32 	%f38, %f461, %f216;
	abs.f32 	%f907, %f38;
	setp.lt.f32 	%p53, %f907, 0f40000000;
	@%p53 bra 	LBB0_32;
// %bb.21:
	setp.gtu.f32 	%p54, %f907, 0f4B800000;
	@%p54 bra 	LBB0_28;
	bra.uni 	LBB0_22;
LBB0_28:
	mov.b32 	%r27, %f907;
	and.b32  	%r236, %r27, 8388607;
	or.b32  	%r2412, %r236, 1065353216;
	mov.b32 	%f906, %r2412;
	add.s32 	%r237, %r27, -1073741824;
	and.b32  	%r2413, %r237, -8388608;
	setp.eq.s32 	%p60, %r2413, 0;
	@%p60 bra 	LBB0_31;
// %bb.29:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
LBB0_30:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r238, %r2413, 192937984;
	add.s32 	%r239, %r238, %r2412;
	mov.b32 	%f473, %r239;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f906, %f473, %f479;
	sub.s32 	%r2413, %r2413, %r238;
	mov.b32 	%r2412, %f906;
	setp.ne.s32 	%p61, %r2413, 0;
	setp.ne.s32 	%p62, %r2412, 0;
	and.pred  	%p63, %p61, %p62;
	@%p63 bra 	LBB0_30;
LBB0_31:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p64, %r27, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p64;
	mul.f32 	%f481, %f906, 0f34000000;
	mul.f32 	%f907, %f480, %f481;
	bra.uni 	LBB0_32;
LBB0_22:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f464;
	fma.rn.f32 	%f41, %f905, 0fC0000000, %f907;
	mov.b32 	%r26, %f41;
	setp.lt.u32 	%p55, %r26, 1073741824;
	@%p55 bra 	LBB0_27;
// %bb.23:
	setp.lt.u32 	%p56, %r26, -2147483647;
	@%p56 bra 	LBB0_25;
// %bb.24:
	add.f32 	%f469, %f905, 0fBF800000;
	setp.lt.f32 	%p59, %f41, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f905, %f470, %f469, %p59;
	bra.uni 	LBB0_27;
LBB0_25:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p57, %f41, 0f40800000;
	@%p57 bra 	LBB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f905, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f41;
	setp.ge.f32 	%p58, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f905, %f468, %f465, %p58;
LBB0_27:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
LBB0_32:                                // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r8, %r159, 1;
	mul.f32 	%f219, %f2, 0f3C8A83B8;
	mul.f32 	%f253, %f7, 0f3C8A83B8;
	mul.f32 	%f288, %f11, 0f3C8A83B8;
	mul.f32 	%f322, %f16, 0f3C8A83B8;
	mul.f32 	%f357, %f20, 0f3C8A83B8;
	mul.f32 	%f391, %f25, 0f3C8A83B8;
	mul.f32 	%f426, %f29, 0f3C8A83B8;
	mul.f32 	%f459, %f34, 0f3C8A83B8;
	abs.f32 	%f482, %f907;
	setp.gtu.f32 	%p65, %f482, 0f7F800000;
	@%p65 bra 	LBB0_34;
// %bb.33:
	mov.b32 	%r240, %f38;
	and.b32  	%r241, %r240, -2147483648;
	mov.b32 	%r242, %f907;
	or.b32  	%r243, %r241, %r242;
	mov.b32 	%f907, %r243;
LBB0_34:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	mul.wide.u32 	%rd67, %r8, 4;
	mul.f32 	%f6, %f219, %f897;
	mul.f32 	%f254, %f253, %f898;
	mul.f32 	%f15, %f288, %f899;
	mul.f32 	%f323, %f322, %f900;
	mul.f32 	%f24, %f357, %f901;
	mul.f32 	%f392, %f391, %f902;
	mul.f32 	%f33, %f426, %f903;
	mul.f32 	%f460, %f459, %f904;
	add.f32 	%f483, %f907, %f907;
	mov.b32 	%r244, %f483;
	and.b32  	%r245, %r244, -2147483648;
	or.b32  	%r246, %r245, 1056964608;
	mov.b32 	%f484, %r246;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p66, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p66;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p67, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p67;
	cvt.rzi.s32.f32 	%r247, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f907;
	mul.f32 	%f492, %f491, 0f34222169;
	fma.rn.f32 	%f493, %f491, 0f40490FDA, %f492;
	mul.f32 	%f494, %f493, %f493;
	fma.rn.f32 	%f495, %f494, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f496, %f495, %f494, 0f3D2AAABB;
	fma.rn.f32 	%f497, %f496, %f494, 0fBEFFFFFF;
	fma.rn.f32 	%f498, %f497, %f494, 0f3F800000;
	fma.rn.f32 	%f499, %f494, %f493, 0f00000000;
	fma.rn.f32 	%f500, %f494, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f501, %f500, %f494, 0fBE2AAAA8;
	fma.rn.f32 	%f502, %f501, %f499, %f493;
	and.b32  	%r248, %r247, 1;
	setp.eq.b32 	%p68, %r248, 1;
	selp.f32 	%f503, %f498, %f502, %p68;
	selp.f32 	%f504, %f502, %f498, %p68;
	and.b32  	%r249, %r247, 2;
	setp.eq.s32 	%p69, %r249, 0;
	neg.f32 	%f505, %f503;
	selp.f32 	%f506, %f503, %f505, %p69;
	add.s32 	%r250, %r247, 1;
	and.b32  	%r251, %r250, 2;
	setp.eq.s32 	%p70, %r251, 0;
	sub.f32 	%f508, %f213, %f504;
	selp.f32 	%f509, %f504, %f508, %p70;
	cvt.rzi.f32.f32 	%f510, %f907;
	setp.eq.f32 	%p71, %f510, %f907;
	mul.f32 	%f511, %f907, 0f00000000;
	selp.f32 	%f55, %f511, %f506, %p71;
	abs.f32 	%f512, %f907;
	setp.gt.f32 	%p72, %f512, 0f4B800000;
	add.f32 	%f513, %f55, 0f3F800000;
	add.s32 	%r252, %r25, 496;
	cvt.rn.f32.s32 	%f514, %r252;
	div.approx.f32 	%f57, %f514, %f216;
	abs.f32 	%f911, %f57;
	setp.lt.f32 	%p73, %f911, 0f40000000;
	@%p73 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p74, %f911, 0f4B800000;
	@%p74 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r35, %f911;
	and.b32  	%r253, %r35, 8388607;
	or.b32  	%r2414, %r253, 1065353216;
	mov.b32 	%f910, %r2414;
	add.s32 	%r254, %r35, -1073741824;
	and.b32  	%r2415, %r254, -8388608;
	setp.eq.s32 	%p80, %r2415, 0;
	@%p80 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i866.preheader
	mov.f32 	%f525, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f524,%f525;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i866
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r255, %r2415, 192937984;
	add.s32 	%r256, %r255, %r2414;
	mov.b32 	%f526, %r256;
	mul.f32 	%f527, %f524, %f526;
	sub.f32 	%f528, %f526, %f527;
	fma.rn.f32 	%f529, %f528, %f524, %f527;
	sub.f32 	%f530, %f526, %f529;
	fma.rz.f32 	%f531, %f530, %f524, %f529;
	cvt.rzi.f32.f32 	%f532, %f531;
	sub.f32 	%f910, %f526, %f532;
	sub.s32 	%r2415, %r2415, %r255;
	mov.b32 	%r2414, %f910;
	setp.ne.s32 	%p81, %r2415, 0;
	setp.ne.s32 	%p82, %r2414, 0;
	and.pred  	%p83, %p81, %p82;
	@%p83 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i868
	setp.gt.u32 	%p84, %r35, 2139095039;
	selp.f32 	%f533, 0f7FFFFFFF, 0f4B800000, %p84;
	mul.f32 	%f534, %f910, 0f34000000;
	mul.f32 	%f911, %f533, %f534;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i838
	div.approx.f32 	%f517, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f517;
	fma.rn.f32 	%f60, %f909, 0fC0000000, %f911;
	mov.b32 	%r34, %f60;
	setp.lt.u32 	%p75, %r34, 1073741824;
	@%p75 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p76, %r34, -2147483647;
	@%p76 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f522, %f909, 0fBF800000;
	setp.lt.f32 	%p79, %f60, 0fC0000000;
	add.f32 	%f523, %f522, 0fBF800000;
	selp.f32 	%f909, %f523, %f522, %p79;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p77, %f60, 0f40800000;
	@%p77 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i843
	add.f32 	%f518, %f909, 0f3F800000;
	fma.rn.f32 	%f520, %f184, 0fC0400000, %f60;
	setp.ge.f32 	%p78, %f520, 0f00000000;
	add.f32 	%f521, %f518, 0f3F800000;
	selp.f32 	%f909, %f521, %f518, %p78;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i872
	add.s64 	%rd68, %rd1, %rd67;
	mov.b32 	%r181, %f254;
	mov.b32 	%r180, %f6;
	mov.b32 	%r199, %f323;
	mov.b32 	%r198, %f15;
	mov.b32 	%r217, %f392;
	mov.b32 	%r216, %f24;
	mov.b32 	%r235, %f460;
	mov.b32 	%r234, %f33;
	selp.f32 	%f56, %f513, %f509, %p72;
	abs.f32 	%f535, %f911;
	setp.gtu.f32 	%p85, %f535, 0f7F800000;
	@%p85 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r257, %f57;
	and.b32  	%r258, %r257, -2147483648;
	mov.b32 	%r259, %f911;
	or.b32  	%r260, %r258, %r259;
	mov.b32 	%f911, %r260;
LBB0_48:                                // %__nv_fmodf.exit873
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd68];
	shr.u32 	%r10, %r4, 1;
	shr.u32 	%r13, %r4, 2;
	// begin inline asm
	cvt.rn.f16x2.f32 %r179, %r181, %r180;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r197, %r199, %r198;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r215, %r217, %r216;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r233, %r235, %r234;
	// end inline asm
	add.f32 	%f536, %f911, %f911;
	mov.b32 	%r267, %f536;
	and.b32  	%r268, %r267, -2147483648;
	or.b32  	%r269, %r268, 1056964608;
	mov.b32 	%f537, %r269;
	add.f32 	%f538, %f536, %f537;
	cvt.rzi.f32.f32 	%f539, %f538;
	abs.f32 	%f540, %f536;
	setp.gt.f32 	%p86, %f540, 0f4B000000;
	selp.f32 	%f541, %f536, %f539, %p86;
	cvt.rzi.f32.f32 	%f542, %f536;
	setp.lt.f32 	%p87, %f540, 0f3F000000;
	selp.f32 	%f543, %f542, %f541, %p87;
	cvt.rzi.s32.f32 	%r270, %f543;
	fma.rn.f32 	%f544, %f543, 0fBF000000, %f911;
	mul.f32 	%f545, %f544, 0f34222169;
	fma.rn.f32 	%f546, %f544, 0f40490FDA, %f545;
	mul.f32 	%f547, %f546, %f546;
	fma.rn.f32 	%f548, %f547, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f549, %f548, %f547, 0f3D2AAABB;
	fma.rn.f32 	%f550, %f549, %f547, 0fBEFFFFFF;
	fma.rn.f32 	%f551, %f550, %f547, 0f3F800000;
	fma.rn.f32 	%f552, %f547, %f546, 0f00000000;
	fma.rn.f32 	%f553, %f547, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f554, %f553, %f547, 0fBE2AAAA8;
	fma.rn.f32 	%f555, %f554, %f552, %f546;
	and.b32  	%r271, %r270, 1;
	setp.eq.b32 	%p88, %r271, 1;
	selp.f32 	%f556, %f551, %f555, %p88;
	selp.f32 	%f557, %f555, %f551, %p88;
	and.b32  	%r272, %r270, 2;
	setp.eq.s32 	%p89, %r272, 0;
	neg.f32 	%f558, %f556;
	selp.f32 	%f559, %f556, %f558, %p89;
	add.s32 	%r273, %r270, 1;
	and.b32  	%r274, %r273, 2;
	setp.eq.s32 	%p90, %r274, 0;
	sub.f32 	%f561, %f213, %f557;
	selp.f32 	%f562, %f557, %f561, %p90;
	cvt.rzi.f32.f32 	%f563, %f911;
	setp.eq.f32 	%p91, %f563, %f911;
	mul.f32 	%f564, %f911, 0f00000000;
	selp.f32 	%f565, %f564, %f559, %p91;
	abs.f32 	%f566, %f911;
	setp.gt.f32 	%p92, %f566, 0f4B800000;
	add.f32 	%f567, %f565, 0f3F800000;
	selp.f32 	%f568, %f567, %f562, %p92;
	mov.b32 	%r263, %f568;
	mov.b32 	%r262, %f56;
	// begin inline asm
	cvt.rn.f16x2.f32 %r42, %r263, %r262;
	// end inline asm
	mov.b32 	%r266, %f565;
	mov.b32 	%r265, %f55;
	// begin inline asm
	cvt.rn.f16x2.f32 %r43, %r266, %r265;
	// end inline asm
	mov.u64 	%rd118, 2;
	mov.u64 	%rd119, %rd118;
LBB0_49:                                // %L867.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd119, %rd119, %rd119;
	add.s64 	%rd118, %rd118, -1;
	setp.ne.s64 	%p93, %rd118, 0;
	@%p93 bra 	LBB0_49;
// %bb.50:                              // %L869
	and.b64  	%rd70, %rd119, 9223372036854775807;
	setp.ne.s64 	%p94, %rd70, 16;
	@%p94 bra 	LBB0_130;
// %bb.51:                              // %L876
	and.b32  	%r275, %r4, 3;
	mul.lo.s32 	%r276, %r275, %r13;
	shl.b32 	%r277, %r276, 1;
	neg.s32 	%r44, %r277;
	cvt.rn.f32.s32 	%f569, %r44;
	mov.f32 	%f570, 0f41000000;
	div.approx.f32 	%f74, %f569, %f570;
	abs.f32 	%f915, %f74;
	setp.lt.f32 	%p95, %f915, 0f40000000;
	@%p95 bra 	LBB0_63;
// %bb.52:
	setp.gtu.f32 	%p96, %f915, 0f4B800000;
	@%p96 bra 	LBB0_59;
	bra.uni 	LBB0_53;
LBB0_59:
	mov.b32 	%r46, %f915;
	and.b32  	%r278, %r46, 8388607;
	or.b32  	%r2416, %r278, 1065353216;
	mov.b32 	%f914, %r2416;
	add.s32 	%r279, %r46, -1073741824;
	and.b32  	%r2417, %r279, -8388608;
	setp.eq.s32 	%p102, %r2417, 0;
	@%p102 bra 	LBB0_62;
// %bb.60:                              // %__nv_fmaf_rn.exit4.i.i.i912.preheader
	mov.f32 	%f580, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f579,%f580;
	// end inline asm
LBB0_61:                                // %__nv_fmaf_rn.exit4.i.i.i912
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r280, %r2417, 192937984;
	add.s32 	%r281, %r280, %r2416;
	mov.b32 	%f581, %r281;
	mul.f32 	%f582, %f579, %f581;
	sub.f32 	%f583, %f581, %f582;
	fma.rn.f32 	%f584, %f583, %f579, %f582;
	sub.f32 	%f585, %f581, %f584;
	fma.rz.f32 	%f586, %f585, %f579, %f584;
	cvt.rzi.f32.f32 	%f587, %f586;
	sub.f32 	%f914, %f581, %f587;
	sub.s32 	%r2417, %r2417, %r280;
	mov.b32 	%r2416, %f914;
	setp.ne.s32 	%p103, %r2417, 0;
	setp.ne.s32 	%p104, %r2416, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	LBB0_61;
LBB0_62:                                // %__internal_fmodf_slowpath_mod.exit.i.i914
	setp.gt.u32 	%p106, %r46, 2139095039;
	selp.f32 	%f588, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f589, %f914, 0f34000000;
	mul.f32 	%f915, %f588, %f589;
	bra.uni 	LBB0_63;
LBB0_53:                                // %__nv_fast_fdividef.exit.i.i.i884
	div.approx.f32 	%f572, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f572;
	fma.rn.f32 	%f77, %f913, 0fC0000000, %f915;
	mov.b32 	%r45, %f77;
	setp.lt.u32 	%p97, %r45, 1073741824;
	@%p97 bra 	LBB0_58;
// %bb.54:
	setp.lt.u32 	%p98, %r45, -2147483647;
	@%p98 bra 	LBB0_56;
// %bb.55:
	add.f32 	%f577, %f913, 0fBF800000;
	setp.lt.f32 	%p101, %f77, 0fC0000000;
	add.f32 	%f578, %f577, 0fBF800000;
	selp.f32 	%f913, %f578, %f577, %p101;
	bra.uni 	LBB0_58;
LBB0_56:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p99, %f77, 0f40800000;
	@%p99 bra 	LBB0_58;
// %bb.57:                              // %__nv_fmaf_rn.exit.i.i.i889
	add.f32 	%f573, %f913, 0f3F800000;
	fma.rn.f32 	%f575, %f184, 0fC0400000, %f77;
	setp.ge.f32 	%p100, %f575, 0f00000000;
	add.f32 	%f576, %f573, 0f3F800000;
	selp.f32 	%f913, %f576, %f573, %p100;
LBB0_58:                                // %__internal_fmodf_fastpath_quot.exit.i.i893
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
LBB0_63:                                // %__internal_fmodf_kernel.exit.i918
	abs.f32 	%f590, %f915;
	setp.gtu.f32 	%p107, %f590, 0f7F800000;
	@%p107 bra 	LBB0_65;
// %bb.64:
	mov.b32 	%r282, %f74;
	and.b32  	%r283, %r282, -2147483648;
	mov.b32 	%r284, %f915;
	or.b32  	%r285, %r283, %r284;
	mov.b32 	%f915, %r285;
LBB0_65:                                // %__nv_fmodf.exit919
	add.f32 	%f591, %f915, %f915;
	mov.b32 	%r286, %f591;
	and.b32  	%r287, %r286, -2147483648;
	or.b32  	%r288, %r287, 1056964608;
	mov.b32 	%f592, %r288;
	add.f32 	%f593, %f591, %f592;
	cvt.rzi.f32.f32 	%f594, %f593;
	abs.f32 	%f595, %f591;
	setp.gt.f32 	%p108, %f595, 0f4B000000;
	selp.f32 	%f596, %f591, %f594, %p108;
	cvt.rzi.f32.f32 	%f597, %f591;
	setp.lt.f32 	%p109, %f595, 0f3F000000;
	selp.f32 	%f598, %f597, %f596, %p109;
	cvt.rzi.s32.f32 	%r289, %f598;
	fma.rn.f32 	%f599, %f598, 0fBF000000, %f915;
	mul.f32 	%f600, %f599, 0f34222169;
	fma.rn.f32 	%f601, %f599, 0f40490FDA, %f600;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f604, %f603, %f602, 0f3D2AAABB;
	fma.rn.f32 	%f605, %f604, %f602, 0fBEFFFFFF;
	fma.rn.f32 	%f606, %f605, %f602, 0f3F800000;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f602, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f609, %f608, %f602, 0fBE2AAAA8;
	fma.rn.f32 	%f610, %f609, %f607, %f601;
	and.b32  	%r290, %r289, 1;
	setp.eq.b32 	%p110, %r290, 1;
	selp.f32 	%f611, %f606, %f610, %p110;
	selp.f32 	%f612, %f610, %f606, %p110;
	and.b32  	%r291, %r289, 2;
	setp.eq.s32 	%p111, %r291, 0;
	neg.f32 	%f613, %f611;
	selp.f32 	%f614, %f611, %f613, %p111;
	add.s32 	%r292, %r289, 1;
	and.b32  	%r293, %r292, 2;
	setp.eq.s32 	%p112, %r293, 0;
	sub.f32 	%f616, %f213, %f612;
	selp.f32 	%f617, %f612, %f616, %p112;
	cvt.rzi.f32.f32 	%f618, %f915;
	setp.eq.f32 	%p113, %f618, %f915;
	mul.f32 	%f619, %f915, 0f00000000;
	selp.f32 	%f91, %f619, %f614, %p113;
	abs.f32 	%f620, %f915;
	setp.gt.f32 	%p114, %f620, 0f4B800000;
	add.f32 	%f621, %f91, 0f3F800000;
	shl.b32 	%r294, %r13, 3;
	sub.s32 	%r295, %r44, %r294;
	cvt.rn.f32.s32 	%f622, %r295;
	div.approx.f32 	%f93, %f622, %f570;
	abs.f32 	%f919, %f93;
	setp.lt.f32 	%p115, %f919, 0f40000000;
	@%p115 bra 	LBB0_77;
// %bb.66:
	setp.gtu.f32 	%p116, %f919, 0f4B800000;
	@%p116 bra 	LBB0_73;
	bra.uni 	LBB0_67;
LBB0_73:
	mov.b32 	%r54, %f919;
	and.b32  	%r296, %r54, 8388607;
	or.b32  	%r2418, %r296, 1065353216;
	mov.b32 	%f918, %r2418;
	add.s32 	%r297, %r54, -1073741824;
	and.b32  	%r2419, %r297, -8388608;
	setp.eq.s32 	%p122, %r2419, 0;
	@%p122 bra 	LBB0_76;
// %bb.74:                              // %__nv_fmaf_rn.exit4.i.i.i958.preheader
	mov.f32 	%f633, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f632,%f633;
	// end inline asm
LBB0_75:                                // %__nv_fmaf_rn.exit4.i.i.i958
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r2419, 192937984;
	add.s32 	%r299, %r298, %r2418;
	mov.b32 	%f634, %r299;
	mul.f32 	%f635, %f632, %f634;
	sub.f32 	%f636, %f634, %f635;
	fma.rn.f32 	%f637, %f636, %f632, %f635;
	sub.f32 	%f638, %f634, %f637;
	fma.rz.f32 	%f639, %f638, %f632, %f637;
	cvt.rzi.f32.f32 	%f640, %f639;
	sub.f32 	%f918, %f634, %f640;
	sub.s32 	%r2419, %r2419, %r298;
	mov.b32 	%r2418, %f918;
	setp.ne.s32 	%p123, %r2419, 0;
	setp.ne.s32 	%p124, %r2418, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	LBB0_75;
LBB0_76:                                // %__internal_fmodf_slowpath_mod.exit.i.i960
	setp.gt.u32 	%p126, %r54, 2139095039;
	selp.f32 	%f641, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f642, %f918, 0f34000000;
	mul.f32 	%f919, %f641, %f642;
	bra.uni 	LBB0_77;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i930
	div.approx.f32 	%f625, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f625;
	fma.rn.f32 	%f96, %f917, 0fC0000000, %f919;
	mov.b32 	%r53, %f96;
	setp.lt.u32 	%p117, %r53, 1073741824;
	@%p117 bra 	LBB0_72;
// %bb.68:
	setp.lt.u32 	%p118, %r53, -2147483647;
	@%p118 bra 	LBB0_70;
// %bb.69:
	add.f32 	%f630, %f917, 0fBF800000;
	setp.lt.f32 	%p121, %f96, 0fC0000000;
	add.f32 	%f631, %f630, 0fBF800000;
	selp.f32 	%f917, %f631, %f630, %p121;
	bra.uni 	LBB0_72;
LBB0_70:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p119, %f96, 0f40800000;
	@%p119 bra 	LBB0_72;
// %bb.71:                              // %__nv_fmaf_rn.exit.i.i.i935
	add.f32 	%f626, %f917, 0f3F800000;
	fma.rn.f32 	%f628, %f184, 0fC0400000, %f96;
	setp.ge.f32 	%p120, %f628, 0f00000000;
	add.f32 	%f629, %f626, 0f3F800000;
	selp.f32 	%f917, %f629, %f626, %p120;
LBB0_72:                                // %__internal_fmodf_fastpath_quot.exit.i.i939
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
LBB0_77:                                // %__internal_fmodf_kernel.exit.i964
	selp.f32 	%f92, %f621, %f617, %p114;
	abs.f32 	%f643, %f919;
	setp.gtu.f32 	%p127, %f643, 0f7F800000;
	@%p127 bra 	LBB0_79;
// %bb.78:
	mov.b32 	%r300, %f93;
	and.b32  	%r301, %r300, -2147483648;
	mov.b32 	%r302, %f919;
	or.b32  	%r303, %r301, %r302;
	mov.b32 	%f919, %r303;
LBB0_79:                                // %__nv_fmodf.exit965
	add.f32 	%f644, %f919, %f919;
	mov.b32 	%r316, %f644;
	and.b32  	%r317, %r316, -2147483648;
	or.b32  	%r318, %r317, 1056964608;
	mov.b32 	%f645, %r318;
	add.f32 	%f646, %f644, %f645;
	cvt.rzi.f32.f32 	%f647, %f646;
	abs.f32 	%f648, %f644;
	setp.gt.f32 	%p128, %f648, 0f4B000000;
	selp.f32 	%f649, %f644, %f647, %p128;
	cvt.rzi.f32.f32 	%f650, %f644;
	setp.lt.f32 	%p129, %f648, 0f3F000000;
	selp.f32 	%f651, %f650, %f649, %p129;
	cvt.rzi.s32.f32 	%r319, %f651;
	fma.rn.f32 	%f652, %f651, 0fBF000000, %f919;
	mul.f32 	%f653, %f652, 0f34222169;
	fma.rn.f32 	%f654, %f652, 0f40490FDA, %f653;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f657, %f656, %f655, 0f3D2AAABB;
	fma.rn.f32 	%f658, %f657, %f655, 0fBEFFFFFF;
	fma.rn.f32 	%f659, %f658, %f655, 0f3F800000;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f655, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f662, %f661, %f655, 0fBE2AAAA8;
	fma.rn.f32 	%f663, %f662, %f660, %f654;
	and.b32  	%r320, %r319, 1;
	setp.eq.b32 	%p130, %r320, 1;
	selp.f32 	%f664, %f659, %f663, %p130;
	selp.f32 	%f665, %f663, %f659, %p130;
	and.b32  	%r321, %r319, 2;
	setp.eq.s32 	%p131, %r321, 0;
	neg.f32 	%f666, %f664;
	selp.f32 	%f667, %f664, %f666, %p131;
	add.s32 	%r322, %r319, 1;
	and.b32  	%r323, %r322, 2;
	setp.eq.s32 	%p132, %r323, 0;
	sub.f32 	%f669, %f213, %f665;
	selp.f32 	%f670, %f665, %f669, %p132;
	cvt.rzi.f32.f32 	%f671, %f919;
	setp.eq.f32 	%p133, %f671, %f919;
	mul.f32 	%f672, %f919, 0f00000000;
	selp.f32 	%f673, %f672, %f667, %p133;
	abs.f32 	%f674, %f919;
	setp.gt.f32 	%p134, %f674, 0f4B800000;
	add.f32 	%f675, %f673, 0f3F800000;
	selp.f32 	%f676, %f675, %f670, %p134;
	mov.b32 	%r306, %f676;
	mov.b32 	%r305, %f92;
	// begin inline asm
	cvt.rn.f16x2.f32 %r61, %r306, %r305;
	// end inline asm
	mov.b32 	%r312, %f673;
	xor.b32  	%r309, %r312, -2147483648;
	mov.b32 	%r311, %f91;
	xor.b32  	%r308, %r311, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r62, %r309, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r63, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r64, %r306, %r305;
	// end inline asm
	mov.u64 	%rd120, 2;
	mov.u64 	%rd121, %rd120;
LBB0_80:                                // %L1029.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd121, %rd121, %rd121;
	add.s64 	%rd120, %rd120, -1;
	setp.ne.s64 	%p135, %rd120, 0;
	@%p135 bra 	LBB0_80;
// %bb.81:                              // %L1031
	and.b64  	%rd74, %rd121, 9223372036854775807;
	setp.ne.s64 	%p136, %rd74, 16;
	@%p136 bra 	LBB0_129;
// %bb.82:                              // %L1038
	shl.b32 	%r324, %r11, 1;
	neg.s32 	%r65, %r324;
	mov.u64 	%rd122, 2;
	mov.u64 	%rd123, %rd122;
LBB0_83:                                // %L1097.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd123, %rd123, %rd123;
	add.s64 	%rd122, %rd122, -1;
	setp.ne.s64 	%p137, %rd122, 0;
	@%p137 bra 	LBB0_83;
// %bb.84:                              // %L1099
	mul.lo.s32 	%r66, %r65, %r13;
	cvt.rn.f32.s32 	%f677, %r66;
	shl.b64 	%rd78, %rd123, 1;
	cvt.rn.f32.s64 	%f678, %rd78;
	div.approx.f32 	%f110, %f677, %f678;
	abs.f32 	%f923, %f110;
	setp.lt.f32 	%p138, %f923, 0f40000000;
	@%p138 bra 	LBB0_96;
// %bb.85:
	setp.gtu.f32 	%p139, %f923, 0f4B800000;
	@%p139 bra 	LBB0_92;
	bra.uni 	LBB0_86;
LBB0_92:
	mov.b32 	%r68, %f923;
	and.b32  	%r325, %r68, 8388607;
	or.b32  	%r2420, %r325, 1065353216;
	mov.b32 	%f922, %r2420;
	add.s32 	%r326, %r68, -1073741824;
	and.b32  	%r2421, %r326, -8388608;
	setp.eq.s32 	%p145, %r2421, 0;
	@%p145 bra 	LBB0_95;
// %bb.93:                              // %__nv_fmaf_rn.exit4.i.i.i1004.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
LBB0_94:                                // %__nv_fmaf_rn.exit4.i.i.i1004
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r2421, 192937984;
	add.s32 	%r328, %r327, %r2420;
	mov.b32 	%f689, %r328;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f922, %f689, %f695;
	sub.s32 	%r2421, %r2421, %r327;
	mov.b32 	%r2420, %f922;
	setp.ne.s32 	%p146, %r2421, 0;
	setp.ne.s32 	%p147, %r2420, 0;
	and.pred  	%p148, %p146, %p147;
	@%p148 bra 	LBB0_94;
LBB0_95:                                // %__internal_fmodf_slowpath_mod.exit.i.i1006
	setp.gt.u32 	%p149, %r68, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p149;
	mul.f32 	%f697, %f922, 0f34000000;
	mul.f32 	%f923, %f696, %f697;
	bra.uni 	LBB0_96;
LBB0_86:                                // %__nv_fast_fdividef.exit.i.i.i976
	div.approx.f32 	%f680, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f680;
	fma.rn.f32 	%f113, %f921, 0fC0000000, %f923;
	mov.b32 	%r67, %f113;
	setp.lt.u32 	%p140, %r67, 1073741824;
	@%p140 bra 	LBB0_91;
// %bb.87:
	setp.lt.u32 	%p141, %r67, -2147483647;
	@%p141 bra 	LBB0_89;
// %bb.88:
	add.f32 	%f685, %f921, 0fBF800000;
	setp.lt.f32 	%p144, %f113, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f921, %f686, %f685, %p144;
	bra.uni 	LBB0_91;
LBB0_89:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p142, %f113, 0f40800000;
	@%p142 bra 	LBB0_91;
// %bb.90:                              // %__nv_fmaf_rn.exit.i.i.i981
	add.f32 	%f681, %f921, 0f3F800000;
	fma.rn.f32 	%f683, %f184, 0fC0400000, %f113;
	setp.ge.f32 	%p143, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f921, %f684, %f681, %p143;
LBB0_91:                                // %__internal_fmodf_fastpath_quot.exit.i.i985
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
LBB0_96:                                // %__internal_fmodf_kernel.exit.i1010
	abs.f32 	%f698, %f923;
	setp.gtu.f32 	%p150, %f698, 0f7F800000;
	@%p150 bra 	LBB0_98;
// %bb.97:
	mov.b32 	%r329, %f110;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f923;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f923, %r332;
LBB0_98:                                // %__nv_fmodf.exit1011
	add.f32 	%f699, %f923, %f923;
	mov.b32 	%r333, %f699;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f700, %r335;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p151, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p151;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p152, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p152;
	cvt.rzi.s32.f32 	%r336, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f923;
	mul.f32 	%f708, %f707, 0f34222169;
	fma.rn.f32 	%f709, %f707, 0f40490FDA, %f708;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f712, %f711, %f710, 0f3D2AAABB;
	fma.rn.f32 	%f713, %f712, %f710, 0fBEFFFFFF;
	fma.rn.f32 	%f714, %f713, %f710, 0f3F800000;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f710, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f717, %f716, %f710, 0fBE2AAAA8;
	fma.rn.f32 	%f718, %f717, %f715, %f709;
	and.b32  	%r337, %r336, 1;
	setp.eq.b32 	%p153, %r337, 1;
	selp.f32 	%f719, %f714, %f718, %p153;
	selp.f32 	%f720, %f718, %f714, %p153;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p154, %r338, 0;
	neg.f32 	%f721, %f719;
	selp.f32 	%f722, %f719, %f721, %p154;
	add.s32 	%r339, %r336, 1;
	and.b32  	%r340, %r339, 2;
	setp.eq.s32 	%p155, %r340, 0;
	sub.f32 	%f724, %f213, %f720;
	selp.f32 	%f725, %f720, %f724, %p155;
	cvt.rzi.f32.f32 	%f726, %f923;
	setp.eq.f32 	%p156, %f726, %f923;
	mul.f32 	%f727, %f923, 0f00000000;
	selp.f32 	%f127, %f727, %f722, %p156;
	abs.f32 	%f728, %f923;
	setp.gt.f32 	%p157, %f728, 0f4B800000;
	add.f32 	%f729, %f127, 0f3F800000;
	selp.f32 	%f128, %f729, %f725, %p157;
	mov.u64 	%rd124, 2;
	mov.u64 	%rd125, %rd124;
LBB0_99:                                // %L1138.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd125, %rd125, %rd125;
	add.s64 	%rd124, %rd124, -1;
	setp.ne.s64 	%p158, %rd124, 0;
	@%p158 bra 	LBB0_99;
// %bb.100:                             // %L1140
	shl.b32 	%r341, %r13, 2;
	sub.s32 	%r342, %r66, %r341;
	cvt.rn.f32.s32 	%f730, %r342;
	shl.b64 	%rd80, %rd125, 1;
	cvt.rn.f32.s64 	%f731, %rd80;
	div.approx.f32 	%f129, %f730, %f731;
	abs.f32 	%f927, %f129;
	setp.lt.f32 	%p159, %f927, 0f40000000;
	@%p159 bra 	LBB0_112;
// %bb.101:
	setp.gtu.f32 	%p160, %f927, 0f4B800000;
	@%p160 bra 	LBB0_108;
	bra.uni 	LBB0_102;
LBB0_108:
	mov.b32 	%r76, %f927;
	and.b32  	%r343, %r76, 8388607;
	or.b32  	%r2422, %r343, 1065353216;
	mov.b32 	%f926, %r2422;
	add.s32 	%r344, %r76, -1073741824;
	and.b32  	%r2423, %r344, -8388608;
	setp.eq.s32 	%p166, %r2423, 0;
	@%p166 bra 	LBB0_111;
// %bb.109:                             // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f741, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f740,%f741;
	// end inline asm
LBB0_110:                               // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r2423, 192937984;
	add.s32 	%r346, %r345, %r2422;
	mov.b32 	%f742, %r346;
	mul.f32 	%f743, %f740, %f742;
	sub.f32 	%f744, %f742, %f743;
	fma.rn.f32 	%f745, %f744, %f740, %f743;
	sub.f32 	%f746, %f742, %f745;
	fma.rz.f32 	%f747, %f746, %f740, %f745;
	cvt.rzi.f32.f32 	%f748, %f747;
	sub.f32 	%f926, %f742, %f748;
	sub.s32 	%r2423, %r2423, %r345;
	mov.b32 	%r2422, %f926;
	setp.ne.s32 	%p167, %r2423, 0;
	setp.ne.s32 	%p168, %r2422, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	LBB0_110;
LBB0_111:                               // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p170, %r76, 2139095039;
	selp.f32 	%f749, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f750, %f926, 0f34000000;
	mul.f32 	%f927, %f749, %f750;
	bra.uni 	LBB0_112;
LBB0_102:                               // %__nv_fast_fdividef.exit.i.i.i1022
	div.approx.f32 	%f733, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f733;
	fma.rn.f32 	%f132, %f925, 0fC0000000, %f927;
	mov.b32 	%r75, %f132;
	setp.lt.u32 	%p161, %r75, 1073741824;
	@%p161 bra 	LBB0_107;
// %bb.103:
	setp.lt.u32 	%p162, %r75, -2147483647;
	@%p162 bra 	LBB0_105;
// %bb.104:
	add.f32 	%f738, %f925, 0fBF800000;
	setp.lt.f32 	%p165, %f132, 0fC0000000;
	add.f32 	%f739, %f738, 0fBF800000;
	selp.f32 	%f925, %f739, %f738, %p165;
	bra.uni 	LBB0_107;
LBB0_105:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p163, %f132, 0f40800000;
	@%p163 bra 	LBB0_107;
// %bb.106:                             // %__nv_fmaf_rn.exit.i.i.i1027
	add.f32 	%f734, %f925, 0f3F800000;
	fma.rn.f32 	%f736, %f184, 0fC0400000, %f132;
	setp.ge.f32 	%p164, %f736, 0f00000000;
	add.f32 	%f737, %f734, 0f3F800000;
	selp.f32 	%f925, %f737, %f734, %p164;
LBB0_107:                               // %__internal_fmodf_fastpath_quot.exit.i.i1031
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
LBB0_112:                               // %__internal_fmodf_kernel.exit.i1056
	abs.f32 	%f751, %f927;
	setp.gtu.f32 	%p171, %f751, 0f7F800000;
	@%p171 bra 	LBB0_114;
// %bb.113:
	mov.b32 	%r347, %f129;
	and.b32  	%r348, %r347, -2147483648;
	mov.b32 	%r349, %f927;
	or.b32  	%r350, %r348, %r349;
	mov.b32 	%f927, %r350;
LBB0_114:                               // %__nv_fmodf.exit1057
	add.f32 	%f752, %f927, %f927;
	mov.b32 	%r357, %f752;
	and.b32  	%r358, %r357, -2147483648;
	or.b32  	%r359, %r358, 1056964608;
	mov.b32 	%f753, %r359;
	add.f32 	%f754, %f752, %f753;
	cvt.rzi.f32.f32 	%f755, %f754;
	abs.f32 	%f756, %f752;
	setp.gt.f32 	%p172, %f756, 0f4B000000;
	selp.f32 	%f757, %f752, %f755, %p172;
	cvt.rzi.f32.f32 	%f758, %f752;
	setp.lt.f32 	%p173, %f756, 0f3F000000;
	selp.f32 	%f759, %f758, %f757, %p173;
	cvt.rzi.s32.f32 	%r360, %f759;
	fma.rn.f32 	%f760, %f759, 0fBF000000, %f927;
	mul.f32 	%f761, %f760, 0f34222169;
	fma.rn.f32 	%f762, %f760, 0f40490FDA, %f761;
	mul.f32 	%f763, %f762, %f762;
	fma.rn.f32 	%f764, %f763, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f765, %f764, %f763, 0f3D2AAABB;
	fma.rn.f32 	%f766, %f765, %f763, 0fBEFFFFFF;
	fma.rn.f32 	%f767, %f766, %f763, 0f3F800000;
	fma.rn.f32 	%f768, %f763, %f762, 0f00000000;
	fma.rn.f32 	%f769, %f763, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f770, %f769, %f763, 0fBE2AAAA8;
	fma.rn.f32 	%f771, %f770, %f768, %f762;
	and.b32  	%r361, %r360, 1;
	setp.eq.b32 	%p174, %r361, 1;
	selp.f32 	%f772, %f767, %f771, %p174;
	selp.f32 	%f773, %f771, %f767, %p174;
	and.b32  	%r362, %r360, 2;
	setp.eq.s32 	%p175, %r362, 0;
	neg.f32 	%f774, %f772;
	selp.f32 	%f775, %f772, %f774, %p175;
	add.s32 	%r363, %r360, 1;
	and.b32  	%r364, %r363, 2;
	setp.eq.s32 	%p176, %r364, 0;
	sub.f32 	%f777, %f213, %f773;
	selp.f32 	%f778, %f773, %f777, %p176;
	cvt.rzi.f32.f32 	%f779, %f927;
	setp.eq.f32 	%p177, %f779, %f927;
	mul.f32 	%f780, %f927, 0f00000000;
	selp.f32 	%f781, %f780, %f775, %p177;
	abs.f32 	%f782, %f927;
	setp.gt.f32 	%p178, %f782, 0f4B800000;
	add.f32 	%f783, %f781, 0f3F800000;
	selp.f32 	%f784, %f783, %f778, %p178;
	mov.b32 	%r353, %f784;
	mov.b32 	%r352, %f128;
	// begin inline asm
	cvt.rn.f16x2.f32 %r83, %r353, %r352;
	// end inline asm
	mov.b32 	%r356, %f781;
	mov.b32 	%r355, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r84, %r356, %r355;
	// end inline asm
	mov.u64 	%rd126, 2;
	mov.u64 	%rd127, %rd126;
LBB0_115:                               // %L1181.prol
                                        // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	mul.lo.s64 	%rd127, %rd127, %rd127;
	add.s64 	%rd126, %rd126, -1;
	setp.ne.s64 	%p179, %rd126, 0;
	@%p179 bra 	LBB0_115;
// %bb.116:                             // %L1183
	and.b64  	%rd82, %rd127, 9223372036854775807;
	setp.ne.s64 	%p180, %rd82, 16;
	@%p180 bra 	LBB0_128;
// %bb.117:                             // %L1190
	shr.u32 	%r85, %r4, 3;
	and.b32  	%r365, %r85, 2;
	or.b32  	%r86, %r14, %r365;
	mul.lo.s32 	%r88, %r65, %r86;
	cvt.rn.f32.s32 	%f785, %r88;
	mov.f32 	%f786, 0f40800000;
	div.approx.f32 	%f146, %f785, %f786;
	abs.f32 	%f931, %f146;
	setp.lt.f32 	%p181, %f931, 0f40000000;
	@%p181 bra 	LBB0_138;
// %bb.118:
	setp.gtu.f32 	%p182, %f931, 0f4B800000;
	@%p182 bra 	LBB0_134;
	bra.uni 	LBB0_119;
LBB0_134:
	mov.b32 	%r110, %f931;
	and.b32  	%r366, %r110, 8388607;
	or.b32  	%r2438, %r366, 1065353216;
	mov.b32 	%f930, %r2438;
	add.s32 	%r367, %r110, -1073741824;
	and.b32  	%r2439, %r367, -8388608;
	setp.eq.s32 	%p188, %r2439, 0;
	@%p188 bra 	LBB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i1096.preheader
	mov.f32 	%f796, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f795,%f796;
	// end inline asm
LBB0_136:                               // %__nv_fmaf_rn.exit4.i.i.i1096
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r368, %r2439, 192937984;
	add.s32 	%r369, %r368, %r2438;
	mov.b32 	%f797, %r369;
	mul.f32 	%f798, %f795, %f797;
	sub.f32 	%f799, %f797, %f798;
	fma.rn.f32 	%f800, %f799, %f795, %f798;
	sub.f32 	%f801, %f797, %f800;
	fma.rz.f32 	%f802, %f801, %f795, %f800;
	cvt.rzi.f32.f32 	%f803, %f802;
	sub.f32 	%f930, %f797, %f803;
	sub.s32 	%r2439, %r2439, %r368;
	mov.b32 	%r2438, %f930;
	setp.ne.s32 	%p189, %r2439, 0;
	setp.ne.s32 	%p190, %r2438, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	LBB0_136;
LBB0_137:                               // %__internal_fmodf_slowpath_mod.exit.i.i1098
	setp.gt.u32 	%p192, %r110, 2139095039;
	selp.f32 	%f804, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f805, %f930, 0f34000000;
	mul.f32 	%f931, %f804, %f805;
	bra.uni 	LBB0_138;
LBB0_119:                               // %__nv_fast_fdividef.exit.i.i.i1068
	div.approx.f32 	%f788, %f931, %f184;
	cvt.rzi.f32.f32 	%f929, %f788;
	fma.rn.f32 	%f149, %f929, 0fC0000000, %f931;
	mov.b32 	%r109, %f149;
	setp.lt.u32 	%p183, %r109, 1073741824;
	@%p183 bra 	LBB0_133;
// %bb.120:
	setp.lt.u32 	%p184, %r109, -2147483647;
	@%p184 bra 	LBB0_131;
// %bb.121:
	add.f32 	%f793, %f929, 0fBF800000;
	setp.lt.f32 	%p187, %f149, 0fC0000000;
	add.f32 	%f794, %f793, 0fBF800000;
	selp.f32 	%f929, %f794, %f793, %p187;
	bra.uni 	LBB0_133;
LBB0_131:
	add.f32 	%f929, %f929, 0f3F800000;
	setp.ltu.f32 	%p185, %f149, 0f40800000;
	@%p185 bra 	LBB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i1073
	add.f32 	%f789, %f929, 0f3F800000;
	fma.rn.f32 	%f791, %f184, 0fC0400000, %f149;
	setp.ge.f32 	%p186, %f791, 0f00000000;
	add.f32 	%f792, %f789, 0f3F800000;
	selp.f32 	%f929, %f792, %f789, %p186;
LBB0_133:                               // %__internal_fmodf_fastpath_quot.exit.i.i1077
	fma.rn.f32 	%f931, %f929, 0fC0000000, %f931;
LBB0_138:                               // %__internal_fmodf_kernel.exit.i1102
	xor.b32  	%r87, %r85, %r4;
	abs.f32 	%f806, %f931;
	setp.gtu.f32 	%p193, %f806, 0f7F800000;
	@%p193 bra 	LBB0_140;
// %bb.139:
	mov.b32 	%r370, %f146;
	and.b32  	%r371, %r370, -2147483648;
	mov.b32 	%r372, %f931;
	or.b32  	%r373, %r371, %r372;
	mov.b32 	%f931, %r373;
LBB0_140:                               // %__nv_fmodf.exit1103
	add.f32 	%f807, %f931, %f931;
	mov.b32 	%r374, %f807;
	and.b32  	%r375, %r374, -2147483648;
	or.b32  	%r376, %r375, 1056964608;
	mov.b32 	%f808, %r376;
	add.f32 	%f809, %f807, %f808;
	cvt.rzi.f32.f32 	%f810, %f809;
	abs.f32 	%f811, %f807;
	setp.gt.f32 	%p194, %f811, 0f4B000000;
	selp.f32 	%f812, %f807, %f810, %p194;
	cvt.rzi.f32.f32 	%f813, %f807;
	setp.lt.f32 	%p195, %f811, 0f3F000000;
	selp.f32 	%f814, %f813, %f812, %p195;
	cvt.rzi.s32.f32 	%r377, %f814;
	fma.rn.f32 	%f815, %f814, 0fBF000000, %f931;
	mul.f32 	%f816, %f815, 0f34222169;
	fma.rn.f32 	%f817, %f815, 0f40490FDA, %f816;
	mul.f32 	%f818, %f817, %f817;
	fma.rn.f32 	%f819, %f818, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f820, %f819, %f818, 0f3D2AAABB;
	fma.rn.f32 	%f821, %f820, %f818, 0fBEFFFFFF;
	fma.rn.f32 	%f822, %f821, %f818, 0f3F800000;
	fma.rn.f32 	%f823, %f818, %f817, 0f00000000;
	fma.rn.f32 	%f824, %f818, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f825, %f824, %f818, 0fBE2AAAA8;
	fma.rn.f32 	%f826, %f825, %f823, %f817;
	and.b32  	%r378, %r377, 1;
	setp.eq.b32 	%p196, %r378, 1;
	selp.f32 	%f827, %f822, %f826, %p196;
	selp.f32 	%f828, %f826, %f822, %p196;
	and.b32  	%r379, %r377, 2;
	setp.eq.s32 	%p197, %r379, 0;
	neg.f32 	%f829, %f827;
	selp.f32 	%f830, %f827, %f829, %p197;
	add.s32 	%r380, %r377, 1;
	and.b32  	%r381, %r380, 2;
	setp.eq.s32 	%p198, %r381, 0;
	sub.f32 	%f832, %f213, %f828;
	selp.f32 	%f833, %f828, %f832, %p198;
	cvt.rzi.f32.f32 	%f834, %f931;
	setp.eq.f32 	%p199, %f834, %f931;
	mul.f32 	%f835, %f931, 0f00000000;
	selp.f32 	%f836, %f835, %f830, %p199;
	abs.f32 	%f837, %f931;
	setp.gt.f32 	%p200, %f837, 0f4B800000;
	add.f32 	%f838, %f836, 0f3F800000;
	selp.f32 	%f839, %f838, %f833, %p200;
	and.b32  	%r382, %r87, 1;
	setp.eq.b32 	%p201, %r382, 1;
	selp.f32 	%f163, 0f00000000, 0f3F800000, %p201;
	shl.b32 	%r383, %r86, 2;
	sub.s32 	%r384, %r88, %r383;
	cvt.rn.f32.s32 	%f840, %r384;
	div.approx.f32 	%f166, %f840, %f786;
	abs.f32 	%f935, %f166;
	setp.lt.f32 	%p202, %f935, 0f40000000;
	@%p202 bra 	LBB0_152;
// %bb.141:
	setp.gtu.f32 	%p203, %f935, 0f4B800000;
	@%p203 bra 	LBB0_148;
	bra.uni 	LBB0_142;
LBB0_148:
	mov.b32 	%r118, %f935;
	and.b32  	%r385, %r118, 8388607;
	or.b32  	%r2440, %r385, 1065353216;
	mov.b32 	%f934, %r2440;
	add.s32 	%r386, %r118, -1073741824;
	and.b32  	%r2441, %r386, -8388608;
	setp.eq.s32 	%p209, %r2441, 0;
	@%p209 bra 	LBB0_151;
// %bb.149:                             // %__nv_fmaf_rn.exit4.i.i.i1142.preheader
	mov.f32 	%f851, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f850,%f851;
	// end inline asm
LBB0_150:                               // %__nv_fmaf_rn.exit4.i.i.i1142
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r2441, 192937984;
	add.s32 	%r388, %r387, %r2440;
	mov.b32 	%f852, %r388;
	mul.f32 	%f853, %f850, %f852;
	sub.f32 	%f854, %f852, %f853;
	fma.rn.f32 	%f855, %f854, %f850, %f853;
	sub.f32 	%f856, %f852, %f855;
	fma.rz.f32 	%f857, %f856, %f850, %f855;
	cvt.rzi.f32.f32 	%f858, %f857;
	sub.f32 	%f934, %f852, %f858;
	sub.s32 	%r2441, %r2441, %r387;
	mov.b32 	%r2440, %f934;
	setp.ne.s32 	%p210, %r2441, 0;
	setp.ne.s32 	%p211, %r2440, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	LBB0_150;
LBB0_151:                               // %__internal_fmodf_slowpath_mod.exit.i.i1144
	setp.gt.u32 	%p213, %r118, 2139095039;
	selp.f32 	%f859, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f860, %f934, 0f34000000;
	mul.f32 	%f935, %f859, %f860;
	bra.uni 	LBB0_152;
LBB0_142:                               // %__nv_fast_fdividef.exit.i.i.i1114
	div.approx.f32 	%f843, %f935, %f184;
	cvt.rzi.f32.f32 	%f933, %f843;
	fma.rn.f32 	%f169, %f933, 0fC0000000, %f935;
	mov.b32 	%r117, %f169;
	setp.lt.u32 	%p204, %r117, 1073741824;
	@%p204 bra 	LBB0_147;
// %bb.143:
	setp.lt.u32 	%p205, %r117, -2147483647;
	@%p205 bra 	LBB0_145;
// %bb.144:
	add.f32 	%f848, %f933, 0fBF800000;
	setp.lt.f32 	%p208, %f169, 0fC0000000;
	add.f32 	%f849, %f848, 0fBF800000;
	selp.f32 	%f933, %f849, %f848, %p208;
	bra.uni 	LBB0_147;
LBB0_145:
	add.f32 	%f933, %f933, 0f3F800000;
	setp.ltu.f32 	%p206, %f169, 0f40800000;
	@%p206 bra 	LBB0_147;
// %bb.146:                             // %__nv_fmaf_rn.exit.i.i.i1119
	add.f32 	%f844, %f933, 0f3F800000;
	fma.rn.f32 	%f846, %f184, 0fC0400000, %f169;
	setp.ge.f32 	%p207, %f846, 0f00000000;
	add.f32 	%f847, %f844, 0f3F800000;
	selp.f32 	%f933, %f847, %f844, %p207;
LBB0_147:                               // %__internal_fmodf_fastpath_quot.exit.i.i1123
	fma.rn.f32 	%f935, %f933, 0fC0000000, %f935;
LBB0_152:                               // %__internal_fmodf_kernel.exit.i1148
	mul.f32 	%f164, %f839, %f163;
	mul.f32 	%f165, %f836, %f163;
	abs.f32 	%f861, %f935;
	setp.gtu.f32 	%p214, %f861, 0f7F800000;
	@%p214 bra 	LBB0_154;
// %bb.153:
	mov.b32 	%r389, %f166;
	and.b32  	%r390, %r389, -2147483648;
	mov.b32 	%r391, %f935;
	or.b32  	%r392, %r390, %r391;
	mov.b32 	%f935, %r392;
LBB0_154:                               // %__nv_fmodf.exit1149
	add.f32 	%f862, %f935, %f935;
	mov.b32 	%r406, %f862;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f863, %r408;
	add.f32 	%f864, %f862, %f863;
	cvt.rzi.f32.f32 	%f865, %f864;
	abs.f32 	%f866, %f862;
	setp.gt.f32 	%p215, %f866, 0f4B000000;
	selp.f32 	%f867, %f862, %f865, %p215;
	cvt.rzi.f32.f32 	%f868, %f862;
	setp.lt.f32 	%p216, %f866, 0f3F000000;
	selp.f32 	%f869, %f868, %f867, %p216;
	cvt.rzi.s32.f32 	%r409, %f869;
	fma.rn.f32 	%f870, %f869, 0fBF000000, %f935;
	mul.f32 	%f871, %f870, 0f34222169;
	fma.rn.f32 	%f872, %f870, 0f40490FDA, %f871;
	mul.f32 	%f873, %f872, %f872;
	fma.rn.f32 	%f874, %f873, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f875, %f874, %f873, 0f3D2AAABB;
	fma.rn.f32 	%f876, %f875, %f873, 0fBEFFFFFF;
	fma.rn.f32 	%f877, %f876, %f873, 0f3F800000;
	fma.rn.f32 	%f878, %f873, %f872, 0f00000000;
	fma.rn.f32 	%f879, %f873, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f880, %f879, %f873, 0fBE2AAAA8;
	fma.rn.f32 	%f881, %f880, %f878, %f872;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p217, %r410, 1;
	selp.f32 	%f882, %f877, %f881, %p217;
	selp.f32 	%f883, %f881, %f877, %p217;
	and.b32  	%r411, %r409, 2;
	setp.eq.s32 	%p218, %r411, 0;
	neg.f32 	%f884, %f882;
	selp.f32 	%f885, %f882, %f884, %p218;
	add.s32 	%r412, %r409, 1;
	and.b32  	%r413, %r412, 2;
	setp.eq.s32 	%p219, %r413, 0;
	sub.f32 	%f887, %f213, %f883;
	selp.f32 	%f888, %f883, %f887, %p219;
	cvt.rzi.f32.f32 	%f889, %f935;
	setp.eq.f32 	%p220, %f889, %f935;
	mul.f32 	%f890, %f935, 0f00000000;
	selp.f32 	%f891, %f890, %f885, %p220;
	abs.f32 	%f892, %f935;
	setp.gt.f32 	%p221, %f892, 0f4B800000;
	add.f32 	%f893, %f891, 0f3F800000;
	selp.f32 	%f894, %f893, %f888, %p221;
	mul.f32 	%f895, %f894, %f163;
	mul.f32 	%f896, %f891, %f163;
	mov.b32 	%r395, %f895;
	mov.b32 	%r394, %f164;
	// begin inline asm
	cvt.rn.f16x2.f32 %r125, %r395, %r394;
	// end inline asm
	mov.b32 	%r401, %f896;
	xor.b32  	%r398, %r401, -2147483648;
	mov.b32 	%r400, %f165;
	xor.b32  	%r397, %r400, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r126, %r398, %r397;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r127, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r128, %r395, %r394;
	// end inline asm
	and.b32  	%r414, %r6, 16;
	and.b32  	%r415, %r1, 7;
	or.b32  	%r416, %r414, %r415;
	shl.b32 	%r417, %r1, 2;
	and.b32  	%r418, %r417, 32;
	or.b32  	%r419, %r416, %r418;
	and.b32  	%r420, %r10, 8;
	or.b32  	%r129, %r419, %r420;
	and.b32  	%r421, %r7, 28;
	shl.b32 	%r422, %r3, 5;
	and.b32  	%r423, %r422, 96;
	or.b32  	%r130, %r423, %r421;
	and.b32  	%r131, %r422, 128;
	and.b32  	%r132, %r4, 8;
	and.b32  	%r424, %r1, 1;
	mul.lo.s32 	%r425, %r15, 65;
	shl.b32 	%r426, %r4, 4;
	or.b32  	%r427, %r132, %r426;
	shr.u32 	%r428, %r427, 2;
	and.b32  	%r429, %r428, 30;
	bfe.u32 	%r430, %r1, 1, 1;
	mul.lo.s32 	%r431, %r430, 260;
	bfe.u32 	%r432, %r1, 2, 1;
	mul.lo.s32 	%r433, %r432, 130;
	shr.u32 	%r434, %r1, 3;
	mul.lo.s32 	%r435, %r434, 1057;
	mad.lo.s32 	%r436, %r424, 520, %r425;
	add.s32 	%r437, %r436, %r435;
	add.s32 	%r438, %r437, %r431;
	add.s32 	%r439, %r438, %r433;
	add.s32 	%r440, %r439, %r429;
	mul.wide.u32 	%rd85, %r440, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd37, %rd86, %rd85;
	add.s32 	%r441, %r436, 32;
	add.s32 	%r442, %r441, %r435;
	add.s32 	%r443, %r442, %r431;
	add.s32 	%r444, %r443, %r433;
	add.s32 	%r445, %r444, %r429;
	mul.wide.u32 	%rd87, %r445, 4;
	add.s64 	%rd38, %rd86, %rd87;
	add.s32 	%r446, %r436, 1;
	add.s32 	%r447, %r446, %r435;
	add.s32 	%r448, %r447, %r431;
	add.s32 	%r449, %r448, %r433;
	add.s32 	%r450, %r449, %r429;
	mul.wide.u32 	%rd88, %r450, 4;
	add.s64 	%rd39, %rd86, %rd88;
	add.s32 	%r451, %r436, 33;
	add.s32 	%r452, %r451, %r435;
	add.s32 	%r453, %r452, %r431;
	add.s32 	%r454, %r453, %r433;
	add.s32 	%r455, %r454, %r429;
	mul.wide.u32 	%rd89, %r455, 4;
	add.s64 	%rd40, %rd86, %rd89;
	or.b32  	%r456, %r434, 4;
	mul.lo.s32 	%r457, %r456, 1057;
	add.s32 	%r458, %r436, %r431;
	add.s32 	%r459, %r458, %r433;
	add.s32 	%r460, %r459, %r457;
	add.s32 	%r461, %r460, %r429;
	mul.wide.s32 	%rd90, %r461, 4;
	add.s64 	%rd41, %rd86, %rd90;
	add.s32 	%r462, %r441, %r431;
	add.s32 	%r463, %r462, %r433;
	add.s32 	%r464, %r463, %r457;
	add.s32 	%r465, %r464, %r429;
	mul.wide.s32 	%rd91, %r465, 4;
	add.s64 	%rd42, %rd86, %rd91;
	add.s32 	%r466, %r446, %r431;
	add.s32 	%r467, %r466, %r433;
	add.s32 	%r468, %r467, %r457;
	add.s32 	%r469, %r468, %r429;
	mul.wide.s32 	%rd92, %r469, 4;
	add.s64 	%rd43, %rd86, %rd92;
	add.s32 	%r470, %r451, %r431;
	add.s32 	%r471, %r470, %r433;
	add.s32 	%r472, %r471, %r457;
	add.s32 	%r473, %r472, %r429;
	mul.wide.s32 	%rd93, %r473, 4;
	add.s64 	%rd44, %rd86, %rd93;
	and.b32  	%r474, %r2, 32;
	shl.b32 	%r475, %r4, 3;
	and.b32  	%r476, %r475, 64;
	shl.b32 	%r477, %r1, 1;
	or.b32  	%r478, %r476, %r477;
	shr.u32 	%r479, %r478, 2;
	mad.lo.s32 	%r480, %r15, 520, %r474;
	mad.lo.s32 	%r481, %r12, 130, %r480;
	mad.lo.s32 	%r482, %r11, 65, %r481;
	mad.lo.s32 	%r483, %r14, 260, %r482;
	add.s32 	%r484, %r483, %r479;
	or.b32  	%r485, %r479, 8;
	add.s32 	%r486, %r483, %r485;
	shl.b32 	%r487, %r3, 2;
	and.b32  	%r488, %r487, 480;
	mul.lo.s32 	%r489, %r8, 65;
	or.b32  	%r490, %r479, %r474;
	add.s32 	%r491, %r490, %r489;
	or.b32  	%r492, %r485, %r474;
	add.s32 	%r493, %r492, %r489;
	add.s32 	%r494, %r429, %r435;
	add.s32 	%r495, %r429, %r457;
	and.b32  	%r496, %r417, 28;
	shl.b32 	%r497, %r1, 14;
	and.b32  	%r498, %r497, 131072;
	or.b32  	%r499, %r498, %r131;
	or.b32  	%r500, %r499, %r130;
	or.b32  	%r501, %r488, %r85;
	or.b32  	%r502, %r501, %r496;
	shl.b32 	%r503, %r502, 8;
	or.b32  	%r504, %r500, %r503;
	and.b32  	%r505, %r477, 14;
	or.b32  	%r506, %r505, %r15;
	mul.lo.s32 	%r507, %r506, 65;
	add.s32 	%r508, %r494, %r507;
	mul.wide.u32 	%rd94, %r508, 4;
	add.s64 	%rd45, %rd86, %rd94;
	cvt.u64.u32 	%rd95, %r429;
	cvt.u64.u32 	%rd96, %r507;
	cvt.u64.u32 	%rd97, %r435;
	add.s64 	%rd98, %rd97, %rd96;
	add.s64 	%rd99, %rd98, %rd95;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd46, %rd86, %rd100;
	add.s32 	%r509, %r495, %r507;
	mul.wide.u32 	%rd101, %r509, 4;
	add.s64 	%rd47, %rd86, %rd101;
	cvt.u64.u32 	%rd102, %r457;
	add.s64 	%rd103, %rd102, %rd96;
	add.s64 	%rd104, %rd103, %rd95;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd48, %rd86, %rd105;
	add.s32 	%r133, %r504, -393216;
	add.s32 	%r134, %r504, 131072;
	mul.wide.u32 	%rd106, %r493, 4;
	add.s64 	%rd49, %rd86, %rd106;
	mul.wide.u32 	%rd107, %r491, 4;
	add.s64 	%rd50, %rd86, %rd107;
	mul.wide.u32 	%rd108, %r486, 4;
	add.s64 	%rd51, %rd86, %rd108;
	mul.wide.u32 	%rd109, %r484, 4;
	add.s64 	%rd52, %rd86, %rd109;
	mov.u32 	%r2424, 0;
	setp.eq.s32 	%p222, %r132, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	mov.u32 	%r2425, %r2424;
	mov.u32 	%r2426, %r2424;
	mov.u32 	%r2427, %r2424;
	mov.u32 	%r2436, %r2424;
	mov.u32 	%r2437, %r2424;
	mov.u32 	%r2430, %r2424;
	bra.uni 	LBB0_122;
LBB0_126:                               // %L15227
                                        //   in Loop: Header=BB0_122 Depth=1
	add.s32 	%r2430, %r95, 256;
	setp.gt.s32 	%p227, %r5, %r2430;
	setp.ne.s32 	%p228, %r95, 65280;
	and.pred  	%p229, %p228, %p227;
	@%p229 bra 	LBB0_122;
	bra.uni 	LBB0_127;
LBB0_122:                               // %L1285
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_123 Depth 2
	mov.u32 	%r95, %r2430;
	or.b32  	%r543, %r129, %r95;
	shl.b32 	%r544, %r543, 12;
	or.b32  	%r545, %r544, %r130;
	or.b32  	%r546, %r545, %r131;
	mul.wide.s32 	%rd110, %r546, 4;
	add.s64 	%rd111, %rd2, %rd110;
	ld.global.v4.u32 	{%r547, %r548, %r549, %r550}, [%rd111];
	or.b32  	%r551, %r546, 524288;
	mul.wide.s32 	%rd112, %r551, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.v4.u32 	{%r552, %r553, %r554, %r555}, [%rd113];
	selp.b32 	%r556, %r549, %r547, %p222;
	shfl.sync.bfly.b32	%r557, %r556, 8, 31, -1;
	selp.b32 	%r511, %r547, %r557, %p222;
	selp.b32 	%r512, %r557, %r549, %p222;
	selp.b32 	%r558, %r550, %r548, %p222;
	shfl.sync.bfly.b32	%r559, %r558, 8, 31, -1;
	selp.b32 	%r519, %r548, %r559, %p222;
	selp.b32 	%r520, %r559, %r550, %p222;
	selp.b32 	%r560, %r554, %r552, %p222;
	shfl.sync.bfly.b32	%r561, %r560, 8, 31, -1;
	selp.b32 	%r527, %r552, %r561, %p222;
	selp.b32 	%r528, %r561, %r554, %p222;
	selp.b32 	%r562, %r555, %r553, %p222;
	shfl.sync.bfly.b32	%r563, %r562, 8, 31, -1;
	selp.b32 	%r535, %r553, %r563, %p222;
	selp.b32 	%r536, %r563, %r555, %p222;
	mov.u32 	%r537, 21520;
	// begin inline asm
	prmt.b32 %r510, %r511, %r512, %r537;
	// end inline asm
	mov.u32 	%r541, 30258;
	// begin inline asm
	prmt.b32 %r514, %r511, %r512, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r519, %r520, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r519, %r520, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r527, %r528, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r527, %r528, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r535, %r536, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r535, %r536, %r541;
	// end inline asm
	st.shared.u32 	[%rd37], %r510;
	st.shared.u32 	[%rd38], %r514;
	st.shared.u32 	[%rd39], %r518;
	st.shared.u32 	[%rd40], %r522;
	st.shared.u32 	[%rd41], %r526;
	st.shared.u32 	[%rd42], %r530;
	st.shared.u32 	[%rd43], %r534;
	st.shared.u32 	[%rd44], %r538;
	bar.sync 	0;
	mov.u32 	%r2431, 256;
	mov.u64 	%rd128, %rd52;
	mov.u64 	%rd129, %rd51;
	mov.u64 	%rd130, %rd50;
	mov.u64 	%rd131, %rd49;
	mov.u32 	%r2432, %r2424;
	mov.u32 	%r2433, %r2425;
	mov.u32 	%r2434, %r2426;
	mov.u32 	%r2435, %r2427;
LBB0_123:                               // %L6785
                                        //   Parent Loop BB0_122 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2425, %r2437;
	mov.u32 	%r2424, %r2436;
	ld.shared.u32 	%r2426, [%rd128];
	ld.shared.u32 	%r2427, [%rd129];
	// begin inline asm
	mov.b32 %r569, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r580, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r568, %r2426, -2004318072;
	mov.u32 	%r567, 983055;
	// begin inline asm
	lop3.b32 %r566, %r567, %r568, %r569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r570, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r571, %r569, %r570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r574, %r566, %r571;
	// end inline asm
	mov.u32 	%r578, 15728880;
	// begin inline asm
	lop3.b32 %r577, %r578, %r568, %r580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r581, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r582, %r580, %r581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r585, %r577, %r582;
	// end inline asm
	shr.u32 	%r590, %r568, 8;
	// begin inline asm
	lop3.b32 %r588, %r567, %r590, %r569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r592, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r593, %r569, %r592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r596, %r588, %r593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r599, %r578, %r590, %r580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r603, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r604, %r580, %r603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r607, %r599, %r604;
	// end inline asm
	// begin inline asm
	mov.b32 %r615, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r626, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r614, %r2427, -2004318072;
	// begin inline asm
	lop3.b32 %r612, %r567, %r614, %r615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r616, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r617, %r615, %r616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r620, %r612, %r617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r623, %r578, %r614, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r627, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r628, %r626, %r627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r631, %r623, %r628;
	// end inline asm
	shr.u32 	%r636, %r614, 8;
	// begin inline asm
	lop3.b32 %r634, %r567, %r636, %r615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r638, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r639, %r615, %r638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r642, %r634, %r639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r645, %r578, %r636, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r649, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r650, %r626, %r649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r653, %r645, %r650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r656, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r658, %r656, %r574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r661, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r663, %r661, %r585;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r666, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r668, %r666, %r596;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r671, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r673, %r671, %r607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r676, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r678, %r676, %r620;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r681, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r683, %r681, %r631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r686, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r688, %r686, %r642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r691, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r693, %r691, %r653;
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r700, %r2432, -2004318072;
	// begin inline asm
	lop3.b32 %r698, %r567, %r700, %r701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r702, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r703, %r701, %r702;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r706, %r698, %r703;
	// end inline asm
	// begin inline asm
	lop3.b32 %r709, %r578, %r700, %r712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r713, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r714, %r712, %r713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r717, %r709, %r714;
	// end inline asm
	shr.u32 	%r722, %r700, 8;
	// begin inline asm
	lop3.b32 %r720, %r567, %r722, %r701, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r724, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r725, %r701, %r724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r728, %r720, %r725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r731, %r578, %r722, %r712, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r712, %r735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r739, %r731, %r736;
	// end inline asm
	// begin inline asm
	mov.b32 %r747, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r746, %r2433, -2004318072;
	// begin inline asm
	lop3.b32 %r744, %r567, %r746, %r747, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r748, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r749, %r747, %r748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r752, %r744, %r749;
	// end inline asm
	// begin inline asm
	lop3.b32 %r755, %r578, %r746, %r758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r759, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r760, %r758, %r759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r763, %r755, %r760;
	// end inline asm
	shr.u32 	%r768, %r746, 8;
	// begin inline asm
	lop3.b32 %r766, %r567, %r768, %r747, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r771, %r747, %r770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r774, %r766, %r771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r777, %r578, %r768, %r758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r782, %r758, %r781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r785, %r777, %r782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r788, %r179, %r706, %r658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r792, %r179, %r717, %r663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r796, %r179, %r728, %r668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r800, %r179, %r739, %r673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r804, %r179, %r752, %r678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r808, %r179, %r763, %r683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r812, %r179, %r774, %r688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r816, %r179, %r785, %r693;
	// end inline asm
	// begin inline asm
	mov.b32 %r825, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r836, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r824, %r2434, -2004318072;
	// begin inline asm
	lop3.b32 %r822, %r567, %r824, %r825, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r825, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	lop3.b32 %r833, %r578, %r824, %r836, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r838, %r836, %r837;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r841, %r833, %r838;
	// end inline asm
	shr.u32 	%r846, %r824, 8;
	// begin inline asm
	lop3.b32 %r844, %r567, %r846, %r825, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r848, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r849, %r825, %r848;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r852, %r844, %r849;
	// end inline asm
	// begin inline asm
	lop3.b32 %r855, %r578, %r846, %r836, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r860, %r836, %r859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r863, %r855, %r860;
	// end inline asm
	// begin inline asm
	mov.b32 %r871, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r882, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r870, %r2435, -2004318072;
	// begin inline asm
	lop3.b32 %r868, %r567, %r870, %r871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r872, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r873, %r871, %r872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r876, %r868, %r873;
	// end inline asm
	// begin inline asm
	lop3.b32 %r879, %r578, %r870, %r882, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r884, %r882, %r883;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r887, %r879, %r884;
	// end inline asm
	shr.u32 	%r892, %r870, 8;
	// begin inline asm
	lop3.b32 %r890, %r567, %r892, %r871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r895, %r871, %r894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r898, %r890, %r895;
	// end inline asm
	// begin inline asm
	lop3.b32 %r901, %r578, %r892, %r882, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r906, %r882, %r905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r909, %r901, %r906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r912, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r914, %r912, %r830, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r918, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r920, %r918, %r841, %r792;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r924, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r926, %r924, %r852, %r796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r930, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r932, %r930, %r863, %r800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r936, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r938, %r936, %r876, %r804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r942, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r944, %r942, %r887, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r948, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r950, %r948, %r898, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r954, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r956, %r954, %r909, %r816;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r964, %r2424, -2004318072;
	// begin inline asm
	lop3.b32 %r962, %r567, %r964, %r965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r967, %r965, %r966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r970, %r962, %r967;
	// end inline asm
	// begin inline asm
	lop3.b32 %r973, %r578, %r964, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r978, %r976, %r977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r981, %r973, %r978;
	// end inline asm
	shr.u32 	%r986, %r964, 8;
	// begin inline asm
	lop3.b32 %r984, %r567, %r986, %r965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r989, %r965, %r988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r992, %r984, %r989;
	// end inline asm
	// begin inline asm
	lop3.b32 %r995, %r578, %r986, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r976, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1010, %r2425, -2004318072;
	// begin inline asm
	lop3.b32 %r1008, %r567, %r1010, %r1011, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r1011, %r1012;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1016, %r1008, %r1013;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1019, %r578, %r1010, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1022, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	shr.u32 	%r1032, %r1010, 8;
	// begin inline asm
	lop3.b32 %r1030, %r567, %r1032, %r1011, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1035, %r1011, %r1034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1038, %r1030, %r1035;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1041, %r578, %r1032, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1022, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r215, %r970, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1088, %r215, %r981, %r920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r215, %r992, %r926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r215, %r1003, %r932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r215, %r1016, %r938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r215, %r1027, %r944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r215, %r1038, %r950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r215, %r1049, %r956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1084, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1086, %r1084, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r42, %r1091, %r1086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1095, %r1093, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r42, %r1100, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1102, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r1102, %r1106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r42, %r1109, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1111, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1113, %r1111, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r42, %r1118, %r1113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1120, %r43, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r42, %r1088, %r1120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r43, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r42, %r1097, %r1127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1134, %r43, %r1109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r42, %r1106, %r1134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r43, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r42, %r1115, %r1141;
	// end inline asm
	mov.u32 	%r2189, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1195, %r1192}, {%r61, %r63, %r62, %r64}, {%r1089, %r1123}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1204, %r1201}, {%r61, %r63, %r62, %r64}, {%r1098, %r1130}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1213, %r1210}, {%r61, %r63, %r62, %r64}, {%r1107, %r1137}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1222, %r1219}, {%r61, %r63, %r62, %r64}, {%r1116, %r1144}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1188, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r1188, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r83, %r1195, %r1190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r83, %r1204, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r83, %r1213, %r1208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1215, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r1215, %r1219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r83, %r1222, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r84, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r83, %r1192, %r1224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r84, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r83, %r1201, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r84, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r83, %r1210, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r84, %r1222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r83, %r1219, %r1245;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1252, %r1253}, {%r125, %r127, %r126, %r128}, {%r1193, %r1227}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1263}, {%r125, %r127, %r126, %r128}, {%r1202, %r1234}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1272, %r1273}, {%r125, %r127, %r126, %r128}, {%r1211, %r1241}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1282, %r1283}, {%r125, %r127, %r126, %r128}, {%r1220, %r1248}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r9, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r9, %r1253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1298, %r9, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r9, %r1263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r9, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r9, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1310, %r9, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1313, %r9, %r1283;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1317, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1318, %r1292, %r1316;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1321, %r1318, %r1317;
	// end inline asm
	// begin inline asm
	mov.b32 %r1324, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1325, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1326, %r1295, %r1324;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1329, %r1326, %r1325;
	// end inline asm
	// begin inline asm
	mov.b32 %r1332, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1333, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1334, %r1298, %r1332;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1337, %r1334, %r1333;
	// end inline asm
	// begin inline asm
	mov.b32 %r1340, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1342, %r1301, %r1340;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1345, %r1342, %r1341;
	// end inline asm
	// begin inline asm
	mov.b32 %r1348, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1349, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1350, %r1304, %r1348;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1353, %r1350, %r1349;
	// end inline asm
	// begin inline asm
	mov.b32 %r1356, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1357, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1358, %r1307, %r1356;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1361, %r1358, %r1357;
	// end inline asm
	// begin inline asm
	mov.b32 %r1364, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1365, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1366, %r1310, %r1364;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1369, %r1366, %r1365;
	// end inline asm
	// begin inline asm
	mov.b32 %r1372, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1373, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1374, %r1313, %r1372;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1377, %r1374, %r1373;
	// end inline asm
	// begin inline asm
	mov.b32 %r1383, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1381, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1382, %r1383, %r1381;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1385, %r1321, %r1382;
	// end inline asm
	// begin inline asm
	mov.b32 %r1388, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1389, %r1383, %r1388;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1392, %r1329, %r1389;
	// end inline asm
	// begin inline asm
	mov.b32 %r1395, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1396, %r1383, %r1395;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1399, %r1337, %r1396;
	// end inline asm
	// begin inline asm
	mov.b32 %r1402, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1403, %r1383, %r1402;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1406, %r1345, %r1403;
	// end inline asm
	mov.u32 	%r1412, 25152;
	// begin inline asm
	prmt.b32 %r1409, %r1385, %r1399, %r1412;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1413, %r1392, %r1406, %r1412;
	// end inline asm
	shl.b32 	%r1420, %r1413, 4;
	mov.u32 	%r1418, 252645135;
	// begin inline asm
	lop3.b32 %r1417, %r1418, %r1409, %r1420, 202;
	// end inline asm
	xor.b32  	%r2360, %r1417, -2004318072;
	// begin inline asm
	mov.b32 %r1424, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1423, %r1424, %r1422;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1426, %r1353, %r1423;
	// end inline asm
	// begin inline asm
	mov.b32 %r1429, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1430, %r1424, %r1429;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1433, %r1361, %r1430;
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1437, %r1424, %r1436;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1440, %r1369, %r1437;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1444, %r1424, %r1443;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1377, %r1444;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1450, %r1426, %r1440, %r1412;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1454, %r1433, %r1447, %r1412;
	// end inline asm
	shl.b32 	%r1461, %r1454, 4;
	// begin inline asm
	lop3.b32 %r1458, %r1418, %r1450, %r1461, 202;
	// end inline asm
	xor.b32  	%r2361, %r1458, -2004318072;
	st.shared.u32 	[%rd130], %r2360;
	st.shared.u32 	[%rd131], %r2361;
	ld.shared.u32 	%r2436, [%rd128];
	ld.shared.u32 	%r2437, [%rd129];
	// begin inline asm
	mov.b32 %r1467, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1478, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1466, %r2436, -2004318072;
	// begin inline asm
	lop3.b32 %r1464, %r567, %r1466, %r1467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1467, %r1468;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1472, %r1464, %r1469;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1475, %r578, %r1466, %r1478, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1479, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1480, %r1478, %r1479;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1483, %r1475, %r1480;
	// end inline asm
	shr.u32 	%r1488, %r1466, 8;
	// begin inline asm
	lop3.b32 %r1486, %r567, %r1488, %r1467, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1491, %r1467, %r1490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1494, %r1486, %r1491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1497, %r578, %r1488, %r1478, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1501, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1502, %r1478, %r1501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1505, %r1497, %r1502;
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1524, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1512, %r2437, -2004318072;
	// begin inline asm
	lop3.b32 %r1510, %r567, %r1512, %r1513, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1515, %r1513, %r1514;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1518, %r1510, %r1515;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1521, %r578, %r1512, %r1524, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1525, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1526, %r1524, %r1525;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1529, %r1521, %r1526;
	// end inline asm
	shr.u32 	%r1534, %r1512, 8;
	// begin inline asm
	lop3.b32 %r1532, %r567, %r1534, %r1513, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1536, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1537, %r1513, %r1536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1540, %r1532, %r1537;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1543, %r578, %r1534, %r1524, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1547, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1548, %r1524, %r1547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1551, %r1543, %r1548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1554, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r1554, %r1472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1559, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1561, %r1559, %r1483;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1564, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r1564, %r1494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1569, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1571, %r1569, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1579, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1579, %r1529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1589, %r233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1591, %r1589, %r1551;
	// end inline asm
	// begin inline asm
	mov.b32 %r1599, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1596, %r567, %r824, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1601, %r1599, %r1600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1604, %r1596, %r1601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1607, %r578, %r824, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1612, %r1610, %r1611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1615, %r1607, %r1612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1618, %r567, %r846, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1623, %r1599, %r1622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1626, %r1618, %r1623;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1629, %r578, %r846, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1633, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1634, %r1610, %r1633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1637, %r1629, %r1634;
	// end inline asm
	// begin inline asm
	mov.b32 %r1645, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1656, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1642, %r567, %r870, %r1645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1646, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1647, %r1645, %r1646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1650, %r1642, %r1647;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1653, %r578, %r870, %r1656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1657, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1658, %r1656, %r1657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1661, %r1653, %r1658;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1664, %r567, %r892, %r1645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1668, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1669, %r1645, %r1668;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1672, %r1664, %r1669;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1675, %r578, %r892, %r1656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1679, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1680, %r1656, %r1679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1683, %r1675, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r179, %r1604, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r179, %r1615, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r179, %r1626, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r179, %r1637, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r179, %r1650, %r1576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r179, %r1661, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r179, %r1672, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r179, %r1683, %r1591;
	// end inline asm
	// begin inline asm
	mov.b32 %r1723, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1734, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1720, %r567, %r964, %r1723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1724, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1725, %r1723, %r1724;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1728, %r1720, %r1725;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1731, %r578, %r964, %r1734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1735, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1736, %r1734, %r1735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1739, %r1731, %r1736;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1742, %r567, %r986, %r1723, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1746, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1747, %r1723, %r1746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1750, %r1742, %r1747;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1753, %r578, %r986, %r1734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1757, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1758, %r1734, %r1757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1761, %r1753, %r1758;
	// end inline asm
	// begin inline asm
	mov.b32 %r1769, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1780, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1766, %r567, %r1010, %r1769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1770, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1771, %r1769, %r1770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1774, %r1766, %r1771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1777, %r578, %r1010, %r1780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1781, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1782, %r1780, %r1781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1785, %r1777, %r1782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1788, %r567, %r1032, %r1769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1792, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1793, %r1769, %r1792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1796, %r1788, %r1793;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1799, %r578, %r1032, %r1780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1803, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1804, %r1780, %r1803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1807, %r1799, %r1804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1810, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1810, %r1728, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1816, %r1739, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1822, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1822, %r1750, %r1694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1828, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1828, %r1761, %r1698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1834, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r1834, %r1774, %r1702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r1840, %r1785, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r1846, %r1796, %r1710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1852, %r197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r1852, %r1807, %r1714;
	// end inline asm
	// begin inline asm
	mov.b32 %r1863, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1874, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1860, %r567, %r568, %r1863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1864, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1865, %r1863, %r1864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1868, %r1860, %r1865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1871, %r578, %r568, %r1874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1875, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1876, %r1874, %r1875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1879, %r1871, %r1876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1882, %r567, %r590, %r1863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1886, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1887, %r1863, %r1886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1890, %r1882, %r1887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1893, %r578, %r590, %r1874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1897, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1898, %r1874, %r1897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1901, %r1893, %r1898;
	// end inline asm
	// begin inline asm
	mov.b32 %r1909, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1920, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1906, %r567, %r614, %r1909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1910, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1911, %r1909, %r1910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1914, %r1906, %r1911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1917, %r578, %r614, %r1920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1921, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1922, %r1920, %r1921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1925, %r1917, %r1922;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1928, %r567, %r636, %r1909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1932, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1933, %r1909, %r1932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1936, %r1928, %r1933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1939, %r578, %r636, %r1920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1943, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1944, %r1920, %r1943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1947, %r1939, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r215, %r1868, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r215, %r1879, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r215, %r1890, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r215, %r1901, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r215, %r1914, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r215, %r1925, %r1842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r215, %r1936, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r215, %r1947, %r1854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1982, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r1982, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r42, %r1989, %r1984;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1991, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r1991, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r42, %r1998, %r1993;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2000, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r2000, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r42, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2009, %r43;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2009, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r42, %r2016, %r2011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r43, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r42, %r1986, %r2018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r43, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r42, %r1995, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2032, %r43, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r42, %r2004, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2039, %r43, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r42, %r2013, %r2039;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2093, %r2090}, {%r61, %r63, %r62, %r64}, {%r1987, %r2021}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2102, %r2099}, {%r61, %r63, %r62, %r64}, {%r1996, %r2028}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2108}, {%r61, %r63, %r62, %r64}, {%r2005, %r2035}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2120, %r2117}, {%r61, %r63, %r62, %r64}, {%r2014, %r2042}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2086, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2088, %r2086, %r2090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r83, %r2093, %r2088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2095, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r2095, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r83, %r2102, %r2097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2104, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2106, %r2104, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r83, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2113, %r84;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r2113, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r83, %r2120, %r2115;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r84, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r83, %r2090, %r2122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r84, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r83, %r2099, %r2129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2136, %r84, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2139, %r83, %r2108, %r2136;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r84, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r83, %r2117, %r2143;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2150, %r2151}, {%r125, %r127, %r126, %r128}, {%r2091, %r2125}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2161}, {%r125, %r127, %r126, %r128}, {%r2100, %r2132}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2171}, {%r125, %r127, %r126, %r128}, {%r2109, %r2139}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2180, %r2181}, {%r125, %r127, %r126, %r128}, {%r2118, %r2146}, {%r2189, %r2189};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r9, %r2150;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r9, %r2151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r9, %r2160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r9, %r2161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r9, %r2170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2205, %r9, %r2171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r9, %r2180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r9, %r2181;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2216, %r2190, %r2214;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2219, %r2216, %r2215;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2224, %r2193, %r2222;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2227, %r2224, %r2223;
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2232, %r2196, %r2230;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2235, %r2232, %r2231;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2240, %r2199, %r2238;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2243, %r2240, %r2239;
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2248, %r2202, %r2246;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2251, %r2248, %r2247;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2256, %r2205, %r2254;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2259, %r2256, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2264, %r2208, %r2262;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2267, %r2264, %r2263;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2272, %r2211, %r2270;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2275, %r2272, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2280, %r2281, %r2279;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2283, %r2219, %r2280;
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2287, %r2281, %r2286;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2227, %r2287;
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2294, %r2281, %r2293;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2235, %r2294;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2281, %r2300;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2243, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2307, %r2283, %r2297, %r1412;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2311, %r2290, %r2304, %r1412;
	// end inline asm
	shl.b32 	%r2318, %r2311, 4;
	// begin inline asm
	lop3.b32 %r2315, %r1418, %r2307, %r2318, 202;
	// end inline asm
	xor.b32  	%r2362, %r2315, -2004318072;
	// begin inline asm
	mov.b32 %r2322, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2321, %r2322, %r2320;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2251, %r2321;
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2322, %r2327;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2259, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2335, %r2322, %r2334;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2267, %r2335;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2322, %r2341;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2275, %r2342;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2348, %r2324, %r2338, %r1412;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2352, %r2331, %r2345, %r1412;
	// end inline asm
	shl.b32 	%r2359, %r2352, 4;
	// begin inline asm
	lop3.b32 %r2356, %r1418, %r2348, %r2359, 202;
	// end inline asm
	xor.b32  	%r2363, %r2356, -2004318072;
	st.shared.u32 	[%rd130], %r2362;
	st.shared.u32 	[%rd131], %r2363;
	add.s32 	%r2431, %r2431, -32;
	add.s64 	%rd131, %rd131, 4228;
	add.s64 	%rd130, %rd130, 4228;
	add.s64 	%rd129, %rd129, 4228;
	add.s64 	%rd128, %rd128, 4228;
	setp.eq.s32 	%p223, %r2431, 0;
	mov.u32 	%r2432, %r2424;
	mov.u32 	%r2433, %r2425;
	mov.u32 	%r2434, %r2426;
	mov.u32 	%r2435, %r2427;
	@%p223 bra 	LBB0_124;
	bra.uni 	LBB0_123;
LBB0_124:                               // %guard_pass5781
                                        //   in Loop: Header=BB0_122 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2369, [%rd45];
	ld.shared.u32 	%r2370, [%rd46+128];
	ld.shared.u32 	%r2377, [%rd46+4];
	ld.shared.u32 	%r2378, [%rd46+132];
	ld.shared.u32 	%r2385, [%rd47];
	ld.shared.u32 	%r2386, [%rd48+128];
	ld.shared.u32 	%r2393, [%rd48+4];
	ld.shared.u32 	%r2394, [%rd48+132];
	// begin inline asm
	prmt.b32 %r2364, %r2369, %r2370, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2368, %r2369, %r2370, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2372, %r2377, %r2378, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2376, %r2377, %r2378, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2380, %r2385, %r2386, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2385, %r2386, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2393, %r2394, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2393, %r2394, %r541;
	// end inline asm
	selp.b32 	%r2396, %r2368, %r2364, %p222;
	shfl.sync.bfly.b32	%r143, %r2396, 8, 31, -1;
	selp.b32 	%r2397, %r2376, %r2372, %p222;
	shfl.sync.bfly.b32	%r144, %r2397, 8, 31, -1;
	selp.b32 	%r2398, %r2384, %r2380, %p222;
	shfl.sync.bfly.b32	%r145, %r2398, 8, 31, -1;
	selp.b32 	%r2399, %r2392, %r2388, %p222;
	shfl.sync.bfly.b32	%r146, %r2399, 8, 31, -1;
	setp.eq.s32 	%p225, %r95, 0;
	@%p225 bra 	LBB0_126;
// %bb.125:                             // %L14820
                                        //   in Loop: Header=BB0_122 Depth=1
	selp.b32 	%r2400, %r146, %r2392, %p222;
	selp.b32 	%r2401, %r2388, %r146, %p222;
	selp.b32 	%r2402, %r145, %r2384, %p222;
	selp.b32 	%r2403, %r2380, %r145, %p222;
	selp.b32 	%r2404, %r144, %r2376, %p222;
	selp.b32 	%r2405, %r2372, %r144, %p222;
	selp.b32 	%r2406, %r143, %r2368, %p222;
	selp.b32 	%r2407, %r2364, %r143, %p222;
	shl.b32 	%r2408, %r95, 12;
	add.s32 	%r2409, %r133, %r2408;
	mul.wide.s32 	%rd114, %r2409, 4;
	add.s64 	%rd115, %rd3, %rd114;
	st.global.v4.u32 	[%rd115], {%r2407, %r2405, %r2406, %r2404};
	or.b32  	%r2410, %r134, %r2408;
	mul.wide.u32 	%rd116, %r2410, 4;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r2403, %r2401, %r2402, %r2400};
	bra.uni 	LBB0_126;
LBB0_127:                               // %L15242
	st.global.u32 	[%rd4], %r2189;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd62, exception1;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L149
	mov.u32 	%r154, 2;
	st.global.u32 	[%rd4], %r154;
	mov.u64 	%rd65, exception1271;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_130:                               // %L15341
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6450, 
	(
	);
	} // callseq 4
	mov.u64 	%rd71, exception1;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 5
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 6
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_129:                               // %L15338
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6450, 
	(
	);
	} // callseq 7
	mov.u64 	%rd75, exception1;
	cvta.global.u64 	%rd76, %rd75;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd76;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_128:                               // %L15335
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_6450, 
	(
	);
	} // callseq 10
	mov.u64 	%rd83, exception1;
	cvta.global.u64 	%rd84, %rd83;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd84;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd53;
	st.param.b32 	[param0+8], %r147;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
