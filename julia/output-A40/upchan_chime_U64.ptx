// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2065[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<187>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2543>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<154>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r104, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd37, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r111, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r111, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r112, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r112, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r105, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r113, %r4, 9;
	or.b32  	%r114, %r3, %r1;
	or.b32  	%r115, %r114, %r113;
	mul.wide.u32 	%rd42, %r115, 4;
	add.s64 	%rd5, %rd4, %rd42;
	mov.u32 	%r116, 1;
	st.global.u32 	[%rd5], %r116;
	setp.gt.u32 	%p3, %r105, 65535;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L133
	ld.param.u32 	%r106, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r106, %r105;
	setp.gt.s32 	%p5, %r106, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L140
	ld.param.u32 	%r107, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r117, %r106, %r105;
	and.b32  	%r118, %r117, 255;
	setp.ne.s32 	%p7, %r118, 0;
	setp.gt.u32 	%p8, %r107, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L151
	ld.param.u32 	%r108, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r108, %r107;
	setp.gt.s32 	%p11, %r108, 2047;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L158
	not.b32 	%r119, %r107;
	add.s32 	%r120, %r119, %r108;
	and.b32  	%r121, %r120, 3;
	setp.eq.s32 	%p13, %r121, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L273
	ld.param.u32 	%r109, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r109, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L275
	ld.param.u32 	%r110, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r109, %r110;
	setp.lt.s32 	%p16, %r110, 17;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass191
	bfe.u32 	%r58, %r1, 2, 1;
	shr.u32 	%r59, %r1, 4;
	shl.b32 	%r129, %r59, 1;
	shl.b32 	%r130, %r58, 2;
	shl.b32 	%r131, %r1, 3;
	and.b32  	%r132, %r131, 24;
	or.b32  	%r133, %r130, %r132;
	or.b32  	%r134, %r129, %r133;
	bfe.u32 	%r135, %r1, 3, 1;
	or.b32  	%r61, %r135, %r134;
	shl.b32 	%r62, %r61, 1;
	or.b32  	%r136, %r62, -255;
	cvt.rn.f32.s32 	%f46, %r136;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L612
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r144, %f74;
	and.b32  	%r145, %r144, -2147483648;
	or.b32  	%r146, %r145, 1056964608;
	mov.b32 	%f75, %r146;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r147, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r148, %r147, 1;
	setp.eq.b32 	%p26, %r148, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r149, %r147, 2;
	setp.eq.s32 	%p27, %r149, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L616
	or.b32  	%r150, %r62, -191;
	cvt.rn.f32.s32 	%f104, %r150;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L630
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r158, %f132;
	and.b32  	%r159, %r158, -2147483648;
	or.b32  	%r160, %r159, 1056964608;
	mov.b32 	%f133, %r160;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r161, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r162, %r161, 1;
	setp.eq.b32 	%p37, %r162, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r163, %r161, 2;
	setp.eq.s32 	%p38, %r163, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L634
	or.b32  	%r167, %r62, -127;
	cvt.rn.f32.s32 	%f163, %r167;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L710
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r175, %f191;
	and.b32  	%r176, %r175, -2147483648;
	or.b32  	%r177, %r176, 1056964608;
	mov.b32 	%f192, %r177;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r178, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r179, %r178, 1;
	setp.eq.b32 	%p48, %r179, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r180, %r178, 2;
	setp.eq.s32 	%p49, %r180, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L714
	or.b32  	%r181, %r62, -63;
	cvt.rn.f32.s32 	%f221, %r181;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L728
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r189, %f249;
	and.b32  	%r190, %r189, -2147483648;
	or.b32  	%r191, %r190, 1056964608;
	mov.b32 	%f250, %r191;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r192, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r193, %r192, 1;
	setp.eq.b32 	%p59, %r193, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r194, %r192, 2;
	setp.eq.s32 	%p60, %r194, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L732
	or.b32  	%r198, %r62, 1;
	cvt.rn.f32.s32 	%f280, %r198;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L808
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r206, %f308;
	and.b32  	%r207, %r206, -2147483648;
	or.b32  	%r208, %r207, 1056964608;
	mov.b32 	%f309, %r208;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r209, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r210, %r209, 1;
	setp.eq.b32 	%p70, %r210, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r211, %r209, 2;
	setp.eq.s32 	%p71, %r211, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L812
	or.b32  	%r212, %r62, 65;
	cvt.rn.f32.s32 	%f338, %r212;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L826
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r220, %f366;
	and.b32  	%r221, %r220, -2147483648;
	or.b32  	%r222, %r221, 1056964608;
	mov.b32 	%f367, %r222;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r223, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r224, %r223, 1;
	setp.eq.b32 	%p81, %r224, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r225, %r223, 2;
	setp.eq.s32 	%p82, %r225, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L830
	or.b32  	%r229, %r62, 129;
	cvt.rn.f32.s32 	%f397, %r229;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L906
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r237, %f425;
	and.b32  	%r238, %r237, -2147483648;
	or.b32  	%r239, %r238, 1056964608;
	mov.b32 	%f426, %r239;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r240, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r241, %r240, 1;
	setp.eq.b32 	%p92, %r241, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r242, %r240, 2;
	setp.eq.s32 	%p93, %r242, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L910
	or.b32  	%r243, %r62, 193;
	cvt.rn.f32.s32 	%f455, %r243;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L924
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r251, %f483;
	and.b32  	%r252, %r251, -2147483648;
	or.b32  	%r253, %r252, 1056964608;
	mov.b32 	%f484, %r253;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r254, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r255, %r254, 1;
	setp.eq.b32 	%p103, %r255, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r256, %r254, 2;
	setp.eq.s32 	%p104, %r256, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L928
	setp.le.s32 	%p148, %r106, %r105;
	mov.u32 	%r2514, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1523.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r137, %f51;
	mov.b32 	%r151, %f109;
	mov.b32 	%r168, %f168;
	mov.b32 	%r182, %f226;
	mov.b32 	%r199, %f285;
	mov.b32 	%r213, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r138, %r137, -2147483648;
	and.b32  	%r152, %r151, -2147483648;
	and.b32  	%r169, %r168, -2147483648;
	and.b32  	%r183, %r182, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r214, %r213, -2147483648;
	mov.b32 	%r230, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r139, %r138, 1056964608;
	or.b32  	%r153, %r152, 1056964608;
	or.b32  	%r170, %r169, 1056964608;
	or.b32  	%r184, %r183, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r215, %r214, 1056964608;
	and.b32  	%r231, %r230, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r139;
	mov.b32 	%f110, %r153;
	mov.b32 	%f169, %r170;
	mov.b32 	%f227, %r184;
	mov.b32 	%f286, %r201;
	mov.b32 	%f344, %r215;
	or.b32  	%r232, %r231, 1056964608;
	mov.b32 	%r244, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r232;
	and.b32  	%r245, %r244, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r246, %r245, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r246;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r140, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r154, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r171, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r185, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r216, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	shl.b32 	%r122, %r4, 2;
	add.s32 	%r141, %r140, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r155, %r154, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r172, %r171, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r186, %r185, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r233, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r49, %r1, 2;
	and.b32  	%r123, %r122, 960;
	and.b32  	%r55, %r1, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r142, %r141, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r156, %r155, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r173, %r172, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r187, %r186, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r218, %r217, 1;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r50, %r49, 32;
	or.b32  	%r124, %r55, %r123;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r142, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r156, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r173, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r187, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r204, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r218, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r235, %r234, 1;
	cvt.rzi.s32.f32 	%r247, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r52, %r49, 4;
	shl.b32 	%r53, %r1, 1;
	or.b32  	%r125, %r124, %r50;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r143, %r141, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r157, %r155, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r174, %r172, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r188, %r186, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r219, %r217, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r235, 1;
	add.s32 	%r248, %r247, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r54, %r53, 8;
	or.b32  	%r126, %r125, %r52;
	setp.eq.s32 	%p22, %r143, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r157, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r174, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r188, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r205, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r219, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r236, %r234, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r249, %r248, 1;
	or.b32  	%r127, %r126, %r54;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r236, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r249, 1;
	bfe.u32 	%r128, %r127, 1, 5;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r250, %r248, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd43, %r128, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r250, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd44, %rd1, %rd43;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r51, %r1, 16;
	ld.global.u32 	%r56, [%rd44];
	shr.u32 	%r57, %r1, 1;
	shr.u32 	%r60, %r1, 3;
	mov.b32 	%r166, %f162;
	mov.b32 	%r165, %f3;
	mov.b32 	%r197, %f279;
	mov.b32 	%r196, %f14;
	mov.b32 	%r228, %f396;
	mov.b32 	%r227, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r164, %r166, %r165;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r195, %r197, %r196;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r259, %f512;
	mov.b32 	%r258, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	mul.lo.s32 	%r296, %r61, 63;
	and.b32  	%r297, %r296, 127;
	cvt.rn.f32.s32 	%f513, %r297;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r298, %f515;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%f516, %r300;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r301, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r302, %r301, 1;
	setp.eq.b32 	%p108, %r302, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r303, %r301, 2;
	setp.eq.s32 	%p109, %r303, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r304, %r301, 1;
	and.b32  	%r305, %r304, 2;
	setp.eq.s32 	%p110, %r305, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r306, %r296, 96;
	and.b32  	%r307, %r306, 127;
	cvt.rn.f32.s32 	%f547, %r307;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r308, %f549;
	and.b32  	%r309, %r308, -2147483648;
	or.b32  	%r310, %r309, 1056964608;
	mov.b32 	%f550, %r310;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r311, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r312, %r311, 1;
	setp.eq.b32 	%p115, %r312, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r313, %r311, 2;
	setp.eq.s32 	%p116, %r313, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r314, %r311, 1;
	and.b32  	%r315, %r314, 2;
	setp.eq.s32 	%p117, %r315, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r261, %f546;
	mov.b32 	%r262, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	mov.b32 	%r264, %f543;
	mov.b32 	%r265, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	and.b32  	%r316, %r60, 2;
	and.b32  	%r317, %r57, 4;
	or.b32  	%r318, %r58, %r316;
	or.b32  	%r319, %r318, %r317;
	and.b32  	%r320, %r53, 6;
	mul.lo.s32 	%r321, %r319, %r320;
	and.b32  	%r322, %r321, 14;
	cvt.rn.f32.s32 	%f580, %r322;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r323, %f583;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f584, %r325;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r326, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r327, %r326, 1;
	setp.eq.b32 	%p122, %r327, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p123, %r328, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r329, %r326, 1;
	and.b32  	%r330, %r329, 2;
	setp.eq.s32 	%p124, %r330, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r331, %r53, 8;
	mul.lo.s32 	%r332, %r319, %r331;
	and.b32  	%r333, %r332, 14;
	cvt.rn.f32.s32 	%f614, %r333;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r334, %f616;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f617, %r336;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r337, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r338, %r337, 1;
	setp.eq.b32 	%p129, %r338, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p130, %r339, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r340, %r337, 1;
	and.b32  	%r341, %r340, 2;
	setp.eq.s32 	%p131, %r341, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r267, %f613;
	mov.b32 	%r268, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r268, %r267;
	// end inline asm
	mov.b32 	%r270, %f610;
	mov.b32 	%r271, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r269, %r271, %r270;
	// end inline asm
	xor.b32  	%r291, %r270, -2147483648;
	xor.b32  	%r292, %r271, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r272, %r292, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r275, %r268, %r267;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r321;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r342, %f649;
	and.b32  	%r343, %r342, -2147483648;
	or.b32  	%r344, %r343, 1056964608;
	mov.b32 	%f650, %r344;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r345, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r346, %r345, 1;
	setp.eq.b32 	%p136, %r346, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r347, %r345, 2;
	setp.eq.s32 	%p137, %r347, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r348, %r345, 1;
	and.b32  	%r349, %r348, 2;
	setp.eq.s32 	%p138, %r349, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r350, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r351, %r319, 3;
	add.s32 	%r352, %r321, %r351;
	cvt.rn.f32.s32 	%f680, %r352;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r353, %f682;
	and.b32  	%r354, %r353, -2147483648;
	or.b32  	%r355, %r354, 1056964608;
	mov.b32 	%f683, %r355;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r356, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r357, %r356, 1;
	setp.eq.b32 	%p143, %r357, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r358, %r356, 2;
	setp.eq.s32 	%p144, %r358, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r359, %r356, 1;
	and.b32  	%r360, %r359, 2;
	setp.eq.s32 	%p145, %r360, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r361, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r280, %f712;
	mov.b32 	%r279, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r278, %r280, %r279;
	// end inline asm
	xor.b32  	%r283, %r361, -2147483648;
	xor.b32  	%r282, %r350, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r282;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r268, %r267;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r271, %r270;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r292, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r293, %r268, %r267;
	// end inline asm
	shl.b32 	%r363, %r105, 13;
	shl.b32 	%r364, %r109, 9;
	shl.b32 	%r365, %r4, 5;
	and.b32  	%r366, %r49, 28;
	and.b32  	%r367, %r365, 224;
	and.b32  	%r368, %r365, 256;
	or.b32  	%r369, %r51, %r2;
	or.b32  	%r21, %r369, %r50;
	and.b32  	%r370, %r365, 7936;
	or.b32  	%r371, %r370, %r366;
	or.b32  	%r372, %r371, %r367;
	or.b32  	%r373, %r372, %r363;
	add.s32 	%r22, %r373, %r364;
	bfe.s32 	%r374, %r1, 3, 1;
	and.b32  	%r23, %r1, 8;
	shl.b32 	%r375, %r1, 4;
	or.b32  	%r376, %r23, %r375;
	shr.u32 	%r377, %r376, 2;
	and.b32  	%r378, %r377, 30;
	shr.u32 	%r379, %r2, 1;
	and.b32  	%r24, %r1, 4;
	and.b32  	%r380, %r3, 32;
	or.b32  	%r381, %r380, %r379;
	or.b32  	%r382, %r55, %r50;
	or.b32  	%r383, %r382, %r52;
	or.b32  	%r384, %r383, %r54;
	shr.u32 	%r385, %r384, 1;
	mul.lo.s32 	%r386, %r385, 65;
	add.s32 	%r387, %r381, %r386;
	or.b32  	%r388, %r381, 8;
	add.s32 	%r389, %r388, %r386;
	or.b32  	%r390, %r381, 16;
	add.s32 	%r391, %r390, %r386;
	or.b32  	%r392, %r381, 24;
	add.s32 	%r393, %r392, %r386;
	shl.b32 	%r394, %r2, 1;
	or.b32  	%r395, %r59, %r394;
	mul.lo.s32 	%r396, %r395, 65;
	add.s32 	%r397, %r378, %r396;
	mul.wide.u32 	%rd45, %r397, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd6, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r378;
	cvt.u64.u32 	%rd48, %r396;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd7, %rd46, %rd50;
	shl.b32 	%r398, %r107, 15;
	add.s32 	%r399, %r398, -98304;
	shl.b32 	%r400, %r2, 11;
	shl.b32 	%r401, %r1, 6;
	and.b32  	%r402, %r401, 1536;
	or.b32  	%r403, %r402, %r400;
	or.b32  	%r404, %r367, %r366;
	or.b32  	%r405, %r403, %r404;
	or.b32  	%r25, %r405, %r368;
	cvt.s64.s32 	%rd8, %r399;
	bfe.s32 	%r406, %r2, 2, 1;
	and.b32  	%r407, %r2, 4;
	setp.eq.s32 	%p149, %r407, 0;
	and.b32  	%r408, %r406, 260;
	mul.lo.s32 	%r409, %r59, 65;
	and.b32  	%r410, %r2, 1;
	neg.s32 	%r411, %r410;
	setp.eq.b32 	%p150, %r410, 1;
	and.b32  	%r412, %r411, 1040;
	bfe.s32 	%r413, %r2, 1, 1;
	and.b32  	%r414, %r2, 2;
	setp.eq.s32 	%p151, %r414, 0;
	and.b32  	%r415, %r413, 520;
	shr.u32 	%r416, %r2, 3;
	mul.lo.s32 	%r417, %r416, 130;
	add.s32 	%r418, %r412, %r378;
	add.s32 	%r419, %r418, %r408;
	add.s32 	%r420, %r419, %r409;
	add.s32 	%r421, %r420, %r415;
	add.s32 	%r422, %r421, %r417;
	mul.wide.u32 	%rd51, %r422, 4;
	add.s64 	%rd9, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r417;
	selp.b64 	%rd53, 0, 520, %p151;
	cvt.u64.u32 	%rd54, %r409;
	selp.b64 	%rd55, 0, 260, %p149;
	selp.b64 	%rd56, 1040, 0, %p150;
	add.s64 	%rd57, %rd47, %rd56;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	add.s64 	%rd60, %rd59, %rd53;
	add.s64 	%rd61, %rd60, %rd52;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd10, %rd46, %rd62;
	cvt.u64.u32 	%rd63, %r419;
	add.s64 	%rd64, %rd63, %rd54;
	add.s64 	%rd65, %rd64, %rd53;
	add.s64 	%rd66, %rd65, %rd52;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd11, %rd46, %rd67;
	add.s32 	%r423, %r422, 2113;
	mul.wide.u32 	%rd68, %r423, 4;
	add.s64 	%rd12, %rd46, %rd68;
	add.s32 	%r424, %r422, 2082;
	mul.wide.u32 	%rd69, %r424, 4;
	add.s64 	%rd13, %rd46, %rd69;
	add.s32 	%r425, %r422, 2114;
	mul.wide.u32 	%rd70, %r425, 4;
	add.s64 	%rd14, %rd46, %rd70;
	add.s32 	%r426, %r422, 4194;
	mul.wide.u32 	%rd71, %r426, 4;
	add.s64 	%rd15, %rd46, %rd71;
	add.s32 	%r427, %r422, 4163;
	mul.wide.u32 	%rd72, %r427, 4;
	add.s64 	%rd16, %rd46, %rd72;
	add.s32 	%r428, %r422, 4195;
	mul.wide.u32 	%rd73, %r428, 4;
	add.s64 	%rd17, %rd46, %rd73;
	add.s32 	%r429, %r422, 6275;
	mul.wide.u32 	%rd74, %r429, 4;
	add.s64 	%rd18, %rd46, %rd74;
	add.s32 	%r430, %r422, 6244;
	mul.wide.u32 	%rd75, %r430, 4;
	add.s64 	%rd19, %rd46, %rd75;
	add.s32 	%r431, %r422, 6276;
	mul.wide.u32 	%rd76, %r431, 4;
	add.s64 	%rd20, %rd46, %rd76;
	bfe.s32 	%r432, %r1, 1, 1;
	and.b32  	%r26, %r432, 65;
	and.b32  	%r433, %r374, 1040;
	setp.lt.u32 	%p152, %r1, 16;
	selp.b32 	%r27, 0, 520, %p152;
	and.b32  	%r434, %r1, 1;
	neg.s32 	%r435, %r434;
	and.b32  	%r28, %r435, 130;
	or.b32  	%r29, %r381, %r433;
	or.b32  	%r30, %r388, %r433;
	add.s32 	%r31, %r390, %r433;
	add.s32 	%r32, %r392, %r433;
	mul.wide.u32 	%rd77, %r393, 4;
	add.s64 	%rd21, %rd46, %rd77;
	mul.wide.u32 	%rd78, %r391, 4;
	add.s64 	%rd22, %rd46, %rd78;
	mul.wide.u32 	%rd79, %r389, 4;
	add.s64 	%rd23, %rd46, %rd79;
	mul.wide.u32 	%rd80, %r387, 4;
	add.s64 	%rd24, %rd46, %rd80;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2516, %r2514;
	mov.u32 	%r2517, %r2514;
	mov.u32 	%r2518, %r2514;
	mov.u32 	%r2519, %r2514;
	mov.u32 	%r2520, %r2514;
	mov.u32 	%r2521, %r2514;
	mov.u32 	%r2522, %r2514;
	mov.u32 	%r2523, %r2514;
	mov.u32 	%r2534, %r2514;
	mov.u32 	%r2535, %r2514;
	mov.u32 	%r2536, %r2514;
	mov.u32 	%r2537, %r2514;
	mov.u32 	%r45, %r2514;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10421
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2508, %r2515, %r25;
	or.b32  	%r2509, %r2508, 98304;
	cvt.s64.s32 	%rd134, %r2509;
	add.s64 	%rd135, %rd134, %rd8;
	shr.u64 	%rd136, %rd135, 39;
	add.s64 	%rd137, %rd135, %rd136;
	shr.s64 	%rd138, %rd137, 25;
	setp.lt.s64 	%p181, %rd135, 0;
	and.b64  	%rd139, %rd137, -33554432;
	setp.ne.s64 	%p182, %rd139, %rd135;
	and.pred  	%p183, %p181, %p182;
	selp.u64 	%rd140, 1, 0, %p183;
	sub.s64 	%rd141, %rd140, %rd138;
	shl.b64 	%rd142, %rd141, 25;
	add.s64 	%rd143, %rd142, %rd135;
	shl.b64 	%rd144, %rd143, 2;
	add.s64 	%rd145, %rd3, %rd144;
	st.global.v4.u32 	[%rd145], {%r100, %r102, %r101, %r103};
	setp.ne.s32 	%p184, %r45, 65280;
	add.s32 	%r45, %r45, 256;
	add.s32 	%r2510, %r45, %r105;
	setp.lt.s32 	%p185, %r2510, %r106;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1523
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p153, %r23, 0;
	and.b32  	%r46, %r45, 65280;
	or.b32  	%r501, %r21, %r46;
	shl.b32 	%r502, %r501, 13;
	add.s32 	%r503, %r22, %r502;
	shr.s32 	%r504, %r503, 31;
	shr.u32 	%r505, %r504, 3;
	add.s32 	%r506, %r503, %r505;
	shr.s32 	%r507, %r506, 29;
	setp.lt.s32 	%p154, %r503, 0;
	and.b32  	%r508, %r506, -536870912;
	setp.ne.s32 	%p155, %r508, %r503;
	and.pred  	%p156, %p154, %p155;
	selp.u32 	%r509, 1, 0, %p156;
	sub.s32 	%r510, %r509, %r507;
	shl.b32 	%r511, %r510, 29;
	or.b32  	%r512, %r503, 1;
	add.s32 	%r513, %r512, %r511;
	mul.wide.s32 	%rd81, %r513, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r514, %r515, %r516, %r517}, [%rd82+-4];
	or.b32  	%r518, %r502, 524288;
	add.s32 	%r519, %r22, %r518;
	shr.s32 	%r520, %r519, 31;
	shr.u32 	%r521, %r520, 3;
	add.s32 	%r522, %r519, %r521;
	shr.s32 	%r523, %r522, 29;
	setp.lt.s32 	%p157, %r519, 0;
	and.b32  	%r524, %r522, -536870912;
	setp.ne.s32 	%p158, %r524, %r519;
	and.pred  	%p159, %p157, %p158;
	selp.u32 	%r525, 1, 0, %p159;
	sub.s32 	%r526, %r525, %r523;
	shl.b32 	%r527, %r526, 29;
	or.b32  	%r528, %r519, 1;
	add.s32 	%r529, %r528, %r527;
	mul.wide.s32 	%rd83, %r529, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r530, %r531, %r532, %r533}, [%rd84+-4];
	or.b32  	%r534, %r502, 1048576;
	add.s32 	%r535, %r22, %r534;
	shr.s32 	%r536, %r535, 31;
	shr.u32 	%r537, %r536, 3;
	add.s32 	%r538, %r535, %r537;
	shr.s32 	%r539, %r538, 29;
	setp.lt.s32 	%p160, %r535, 0;
	and.b32  	%r540, %r538, -536870912;
	setp.ne.s32 	%p161, %r540, %r535;
	and.pred  	%p162, %p160, %p161;
	selp.u32 	%r541, 1, 0, %p162;
	sub.s32 	%r542, %r541, %r539;
	shl.b32 	%r543, %r542, 29;
	or.b32  	%r544, %r535, 1;
	add.s32 	%r545, %r544, %r543;
	mul.wide.s32 	%rd85, %r545, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r546, %r547, %r548, %r549}, [%rd86+-4];
	or.b32  	%r550, %r502, 1572864;
	add.s32 	%r551, %r22, %r550;
	shr.s32 	%r552, %r551, 31;
	shr.u32 	%r553, %r552, 3;
	add.s32 	%r554, %r551, %r553;
	shr.s32 	%r555, %r554, 29;
	setp.lt.s32 	%p163, %r551, 0;
	and.b32  	%r556, %r554, -536870912;
	setp.ne.s32 	%p164, %r556, %r551;
	and.pred  	%p165, %p163, %p164;
	selp.u32 	%r557, 1, 0, %p165;
	sub.s32 	%r558, %r557, %r555;
	shl.b32 	%r559, %r558, 29;
	or.b32  	%r560, %r551, 1;
	add.s32 	%r561, %r560, %r559;
	mul.wide.s32 	%rd87, %r561, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r562, %r563, %r564, %r565}, [%rd88+-4];
	selp.b32 	%r566, %r516, %r514, %p153;
	shfl.sync.bfly.b32	%r567, %r566, 8, 31, -1;
	selp.b32 	%r437, %r514, %r567, %p153;
	selp.b32 	%r438, %r567, %r516, %p153;
	selp.b32 	%r568, %r517, %r515, %p153;
	shfl.sync.bfly.b32	%r569, %r568, 8, 31, -1;
	selp.b32 	%r445, %r515, %r569, %p153;
	selp.b32 	%r446, %r569, %r517, %p153;
	selp.b32 	%r570, %r532, %r530, %p153;
	shfl.sync.bfly.b32	%r571, %r570, 8, 31, -1;
	selp.b32 	%r453, %r530, %r571, %p153;
	selp.b32 	%r454, %r571, %r532, %p153;
	selp.b32 	%r572, %r533, %r531, %p153;
	shfl.sync.bfly.b32	%r573, %r572, 8, 31, -1;
	selp.b32 	%r461, %r531, %r573, %p153;
	selp.b32 	%r462, %r573, %r533, %p153;
	selp.b32 	%r574, %r548, %r546, %p153;
	shfl.sync.bfly.b32	%r575, %r574, 8, 31, -1;
	selp.b32 	%r469, %r546, %r575, %p153;
	selp.b32 	%r470, %r575, %r548, %p153;
	selp.b32 	%r576, %r549, %r547, %p153;
	shfl.sync.bfly.b32	%r577, %r576, 8, 31, -1;
	selp.b32 	%r477, %r547, %r577, %p153;
	selp.b32 	%r478, %r577, %r549, %p153;
	selp.b32 	%r578, %r564, %r562, %p153;
	shfl.sync.bfly.b32	%r579, %r578, 8, 31, -1;
	selp.b32 	%r485, %r562, %r579, %p153;
	selp.b32 	%r486, %r579, %r564, %p153;
	selp.b32 	%r580, %r565, %r563, %p153;
	shfl.sync.bfly.b32	%r581, %r580, 8, 31, -1;
	selp.b32 	%r493, %r563, %r581, %p153;
	selp.b32 	%r494, %r581, %r565, %p153;
	mov.u32 	%r495, 21520;
	// begin inline asm
	prmt.b32 %r436, %r437, %r438, %r495;
	// end inline asm
	mov.u32 	%r499, 30258;
	// begin inline asm
	prmt.b32 %r440, %r437, %r438, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r444, %r445, %r446, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r448, %r445, %r446, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r452, %r453, %r454, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r456, %r453, %r454, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r460, %r461, %r462, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r464, %r461, %r462, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r468, %r469, %r470, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r472, %r469, %r470, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r476, %r477, %r478, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r480, %r477, %r478, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r484, %r485, %r486, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r488, %r485, %r486, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r492, %r493, %r494, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r496, %r493, %r494, %r499;
	// end inline asm
	st.shared.u32 	[%rd9], %r436;
	st.shared.u32 	[%rd10+128], %r440;
	st.shared.u32 	[%rd10+4], %r444;
	st.shared.u32 	[%rd10+132], %r448;
	st.shared.u32 	[%rd11+8324], %r452;
	st.shared.u32 	[%rd12], %r456;
	st.shared.u32 	[%rd13], %r460;
	st.shared.u32 	[%rd14], %r464;
	st.shared.u32 	[%rd11+16648], %r468;
	st.shared.u32 	[%rd15], %r472;
	st.shared.u32 	[%rd16], %r476;
	st.shared.u32 	[%rd17], %r480;
	st.shared.u32 	[%rd11+24972], %r484;
	st.shared.u32 	[%rd18], %r488;
	st.shared.u32 	[%rd19], %r492;
	st.shared.u32 	[%rd20], %r496;
	bar.sync 	0;
	or.b32  	%r47, %r45, %r24;
	shr.u32 	%r2529, %r47, 6;
	mov.u64 	%rd150, %rd24;
	mov.u64 	%rd151, %rd23;
	mov.u64 	%rd152, %rd22;
	mov.u64 	%rd153, %rd21;
	mov.u32 	%r2530, %r2523;
	mov.u32 	%r2531, %r2522;
	mov.u32 	%r2532, %r2521;
	mov.u32 	%r2533, %r2520;
	mov.u32 	%r2538, %r2514;
	mov.u32 	%r2539, %r2519;
	mov.u32 	%r2540, %r2518;
	mov.u32 	%r2541, %r2517;
	mov.u32 	%r2542, %r2516;
$L__BB0_32:                             // %pass5640
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2523, %r2537;
	mov.u32 	%r2522, %r2536;
	mov.u32 	%r2521, %r2535;
	mov.u32 	%r2520, %r2534;
	mov.u32 	%r2516, %r2533;
	mov.u32 	%r2517, %r2532;
	mov.u32 	%r2518, %r2531;
	mov.u32 	%r2519, %r2530;
	add.s32 	%r2394, %r47, %r2538;
	bfe.s32 	%r2395, %r2394, 2, 1;
	and.b32  	%r2396, %r2395, 260;
	and.b32  	%r2397, %r2529, 3;
	mul.lo.s32 	%r2398, %r2397, 2081;
	add.s32 	%r2399, %r29, %r2396;
	add.s32 	%r2400, %r2399, %r2398;
	add.s32 	%r2401, %r2400, %r26;
	add.s32 	%r2402, %r2401, %r27;
	add.s32 	%r2403, %r2402, %r28;
	mul.wide.u32 	%rd89, %r2403, 4;
	add.s64 	%rd91, %rd46, %rd89;
	ld.shared.u32 	%r2534, [%rd91];
	// begin inline asm
	mov.b32 %r587, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r598, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r586, %r2534, -2004318072;
	mov.u32 	%r585, 983055;
	// begin inline asm
	lop3.b32 %r584, %r585, %r586, %r587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r588, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r589, %r587, %r588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r592, %r584, %r589;
	// end inline asm
	mov.u32 	%r596, 15728880;
	// begin inline asm
	lop3.b32 %r595, %r596, %r586, %r598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r599, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r600, %r598, %r599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r603, %r595, %r600;
	// end inline asm
	shr.u32 	%r608, %r586, 8;
	// begin inline asm
	lop3.b32 %r606, %r585, %r608, %r587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r610, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r611, %r587, %r610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r614, %r606, %r611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r617, %r596, %r608, %r598, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r621, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r622, %r598, %r621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r625, %r617, %r622;
	// end inline asm
	// begin inline asm
	mov.b32 %r633, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r644, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r632, %r2542, -2004318072;
	// begin inline asm
	lop3.b32 %r630, %r585, %r632, %r633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r634, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r635, %r633, %r634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r638, %r630, %r635;
	// end inline asm
	// begin inline asm
	lop3.b32 %r641, %r596, %r632, %r644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r645, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r646, %r644, %r645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r649, %r641, %r646;
	// end inline asm
	shr.u32 	%r654, %r632, 8;
	// begin inline asm
	lop3.b32 %r652, %r585, %r654, %r633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r656, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r657, %r633, %r656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r660, %r652, %r657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r663, %r596, %r654, %r644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r667, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r668, %r644, %r667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r671, %r663, %r668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r676, %r164, %r638, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r682, %r164, %r649, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r688, %r164, %r660, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r694, %r164, %r671, %r2514;
	// end inline asm
	// begin inline asm
	mov.b32 %r703, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r702, %r2516, -2004318072;
	// begin inline asm
	lop3.b32 %r700, %r585, %r702, %r703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r704, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r705, %r703, %r704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r708, %r700, %r705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r711, %r596, %r702, %r714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r715, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r716, %r714, %r715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r719, %r711, %r716;
	// end inline asm
	shr.u32 	%r724, %r702, 8;
	// begin inline asm
	lop3.b32 %r722, %r585, %r724, %r703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r726, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r727, %r703, %r726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r730, %r722, %r727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r733, %r596, %r724, %r714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r737, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r738, %r714, %r737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r741, %r733, %r738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r744, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r746, %r744, %r708, %r676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r750, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r752, %r750, %r719, %r682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r756, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r758, %r756, %r730, %r688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r762, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r764, %r762, %r741, %r694;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r772, %r2520, -2004318072;
	// begin inline asm
	lop3.b32 %r770, %r585, %r772, %r773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r774, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r775, %r773, %r774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r778, %r770, %r775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r781, %r596, %r772, %r784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r784, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	shr.u32 	%r794, %r772, 8;
	// begin inline asm
	lop3.b32 %r792, %r585, %r794, %r773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r797, %r773, %r796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r800, %r792, %r797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r803, %r596, %r794, %r784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r807, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r808, %r784, %r807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r811, %r803, %r808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r816, %r226, %r778, %r746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r822, %r226, %r789, %r752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r828, %r226, %r800, %r758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r834, %r226, %r811, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r869, %r838, %r592, %r816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r866, %r844, %r603, %r822;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r850, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r878, %r850, %r614, %r828;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r856, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r875, %r856, %r625, %r834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r862, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r862, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r867, %r260, %r869, %r864;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r871, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r873, %r871, %r875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r876, %r260, %r878, %r873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r880, %r263, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r883, %r260, %r866, %r880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r887, %r263, %r878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r890, %r260, %r875, %r887;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r921, %r918}, {%r266, %r272, %r269, %r275}, {%r867, %r883}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r930, %r927}, {%r266, %r272, %r269, %r275}, {%r876, %r890}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r914, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r916, %r914, %r918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r919, %r278, %r921, %r916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r923, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r925, %r923, %r927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r928, %r278, %r930, %r925;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r932, %r281, %r921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r935, %r278, %r918, %r932;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r939, %r281, %r930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r942, %r278, %r927, %r939;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r946, %r947}, {%r284, %r290, %r287, %r293}, {%r919, %r935}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r956, %r957}, {%r284, %r290, %r287, %r293}, {%r928, %r942}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r966, %r56, %r946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r969, %r56, %r947;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r972, %r56, %r956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r975, %r56, %r957;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r979, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r980, %r966, %r978;
	// end inline asm
	// begin inline asm
	min.f16x2 %r983, %r980, %r979;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r988, %r969, %r986;
	// end inline asm
	// begin inline asm
	min.f16x2 %r991, %r988, %r987;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r996, %r972, %r994;
	// end inline asm
	// begin inline asm
	min.f16x2 %r999, %r996, %r995;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1003, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1004, %r975, %r1002;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1007, %r1004, %r1003;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r1013, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r983, %r1013;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r991, %r1013;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r999, %r1013;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1007, %r1013;
	// end inline asm
	mov.u32 	%r1026, 25152;
	// begin inline asm
	prmt.b32 %r1023, %r1011, %r1017, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1027, %r1014, %r1020, %r1026;
	// end inline asm
	shl.b32 	%r1034, %r1027, 4;
	mov.u32 	%r1032, 252645135;
	// begin inline asm
	lop3.b32 %r1031, %r1032, %r1023, %r1034, 202;
	// end inline asm
	st.shared.u32 	[%rd150], %r1031;
	add.s32 	%r2404, %r30, %r2396;
	add.s32 	%r2405, %r2404, %r2398;
	add.s32 	%r2406, %r2405, %r26;
	add.s32 	%r2407, %r2406, %r27;
	add.s32 	%r2408, %r2407, %r28;
	mul.wide.u32 	%rd92, %r2408, 4;
	add.s64 	%rd93, %rd46, %rd92;
	ld.shared.u32 	%r2535, [%rd93];
	// begin inline asm
	mov.b32 %r1040, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1039, %r2535, -2004318072;
	// begin inline asm
	lop3.b32 %r1037, %r585, %r1039, %r1040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1042, %r1040, %r1041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1045, %r1037, %r1042;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1048, %r596, %r1039, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	shr.u32 	%r1061, %r1039, 8;
	// begin inline asm
	lop3.b32 %r1059, %r585, %r1061, %r1040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1064, %r1040, %r1063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1067, %r1059, %r1064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1070, %r596, %r1061, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1075, %r1051, %r1074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1078, %r1070, %r1075;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1085, %r2541, -2004318072;
	// begin inline asm
	lop3.b32 %r1083, %r585, %r1085, %r1086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1087, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1088, %r1086, %r1087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1091, %r1083, %r1088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1094, %r596, %r1085, %r1097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1099, %r1097, %r1098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1102, %r1094, %r1099;
	// end inline asm
	shr.u32 	%r1107, %r1085, 8;
	// begin inline asm
	lop3.b32 %r1105, %r585, %r1107, %r1086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1109, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1110, %r1086, %r1109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1113, %r1105, %r1110;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1116, %r596, %r1107, %r1097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1120, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1121, %r1097, %r1120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1124, %r1116, %r1121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r164, %r1091, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r164, %r1102, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r164, %r1113, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r164, %r1124, %r2514;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1155, %r2517, -2004318072;
	// begin inline asm
	lop3.b32 %r1153, %r585, %r1155, %r1156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1157, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1158, %r1156, %r1157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1161, %r1153, %r1158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1164, %r596, %r1155, %r1167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1168, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1169, %r1167, %r1168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1172, %r1164, %r1169;
	// end inline asm
	shr.u32 	%r1177, %r1155, 8;
	// begin inline asm
	lop3.b32 %r1175, %r585, %r1177, %r1156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1180, %r1156, %r1179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1183, %r1175, %r1180;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1186, %r596, %r1177, %r1167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1191, %r1167, %r1190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1194, %r1186, %r1191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1197, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r1197, %r1161, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1203, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1205, %r1203, %r1172, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1209, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r1209, %r1183, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1215, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r1215, %r1194, %r1147;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1225, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r1223, %r585, %r1225, %r1226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1227, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1228, %r1226, %r1227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1231, %r1223, %r1228;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1234, %r596, %r1225, %r1237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1239, %r1237, %r1238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1242, %r1234, %r1239;
	// end inline asm
	shr.u32 	%r1247, %r1225, 8;
	// begin inline asm
	lop3.b32 %r1245, %r585, %r1247, %r1226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1250, %r1226, %r1249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1253, %r1245, %r1250;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1256, %r596, %r1247, %r1237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1260, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1261, %r1237, %r1260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1264, %r1256, %r1261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r226, %r1231, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r226, %r1242, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1281, %r226, %r1253, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r226, %r1264, %r1217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1291, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1322, %r1291, %r1045, %r1269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1297, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r1297, %r1056, %r1275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1303, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r1303, %r1067, %r1281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1309, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r1309, %r1078, %r1287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1315, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r1315, %r1319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1320, %r260, %r1322, %r1317;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1324, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1326, %r1324, %r1328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1329, %r260, %r1331, %r1326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1333, %r263, %r1322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1336, %r260, %r1319, %r1333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r263, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r260, %r1328, %r1340;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1374, %r1371}, {%r266, %r272, %r269, %r275}, {%r1320, %r1336}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r266, %r272, %r269, %r275}, {%r1329, %r1343}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1367, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r1367, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r278, %r1374, %r1369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r278, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r281, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r278, %r1371, %r1385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1392, %r281, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r278, %r1380, %r1392;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r284, %r290, %r287, %r293}, {%r1372, %r1388}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1409, %r1410}, {%r284, %r290, %r287, %r293}, {%r1381, %r1395}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r56, %r1399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1422, %r56, %r1400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1425, %r56, %r1409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1428, %r56, %r1410;
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1432, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1433, %r1419, %r1431;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1436, %r1433, %r1432;
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1441, %r1422, %r1439;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1444, %r1441, %r1440;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1448, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1449, %r1425, %r1447;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1452, %r1449, %r1448;
	// end inline asm
	// begin inline asm
	mov.b32 %r1455, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1456, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1457, %r1428, %r1455;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1460, %r1457, %r1456;
	// end inline asm
	// begin inline asm
	mov.b32 %r1466, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1464, %r1436, %r1466;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1467, %r1444, %r1466;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1452, %r1466;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1473, %r1460, %r1466;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1476, %r1464, %r1470, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1480, %r1467, %r1473, %r1026;
	// end inline asm
	shl.b32 	%r1487, %r1480, 4;
	// begin inline asm
	lop3.b32 %r1484, %r1032, %r1476, %r1487, 202;
	// end inline asm
	st.shared.u32 	[%rd151], %r1484;
	add.s32 	%r2409, %r31, %r2396;
	add.s32 	%r2410, %r2409, %r2398;
	add.s32 	%r2411, %r2410, %r26;
	add.s32 	%r2412, %r2411, %r27;
	add.s32 	%r2413, %r2412, %r28;
	mul.wide.u32 	%rd94, %r2413, 4;
	add.s64 	%rd95, %rd46, %rd94;
	ld.shared.u32 	%r2536, [%rd95];
	// begin inline asm
	mov.b32 %r1493, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1492, %r2536, -2004318072;
	// begin inline asm
	lop3.b32 %r1490, %r585, %r1492, %r1493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1495, %r1493, %r1494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1498, %r1490, %r1495;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1501, %r596, %r1492, %r1504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1504, %r1505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1509, %r1501, %r1506;
	// end inline asm
	shr.u32 	%r1514, %r1492, 8;
	// begin inline asm
	lop3.b32 %r1512, %r585, %r1514, %r1493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1517, %r1493, %r1516;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1520, %r1512, %r1517;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1523, %r596, %r1514, %r1504, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1504, %r1527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1531, %r1523, %r1528;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1538, %r2540, -2004318072;
	// begin inline asm
	lop3.b32 %r1536, %r585, %r1538, %r1539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1541, %r1539, %r1540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1544, %r1536, %r1541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1547, %r596, %r1538, %r1550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1551, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1552, %r1550, %r1551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1555, %r1547, %r1552;
	// end inline asm
	shr.u32 	%r1560, %r1538, 8;
	// begin inline asm
	lop3.b32 %r1558, %r585, %r1560, %r1539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1563, %r1539, %r1562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1566, %r1558, %r1563;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1569, %r596, %r1560, %r1550, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1574, %r1550, %r1573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1577, %r1569, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r164, %r1544, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1588, %r164, %r1555, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1594, %r164, %r1566, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r164, %r1577, %r2514;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1608, %r2518, -2004318072;
	// begin inline asm
	lop3.b32 %r1606, %r585, %r1608, %r1609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1611, %r1609, %r1610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1614, %r1606, %r1611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1617, %r596, %r1608, %r1620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1621, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1622, %r1620, %r1621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1625, %r1617, %r1622;
	// end inline asm
	shr.u32 	%r1630, %r1608, 8;
	// begin inline asm
	lop3.b32 %r1628, %r585, %r1630, %r1609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1632, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1633, %r1609, %r1632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1636, %r1628, %r1633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1639, %r596, %r1630, %r1620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1643, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1644, %r1620, %r1643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1647, %r1639, %r1644;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1652, %r1650, %r1614, %r1582;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1656, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1656, %r1625, %r1588;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1662, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r1662, %r1636, %r1594;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r1668, %r1647, %r1600;
	// end inline asm
	// begin inline asm
	mov.b32 %r1679, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1690, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1678, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r1676, %r585, %r1678, %r1679, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1680, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1681, %r1679, %r1680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1684, %r1676, %r1681;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1687, %r596, %r1678, %r1690, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1691, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1692, %r1690, %r1691;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1695, %r1687, %r1692;
	// end inline asm
	shr.u32 	%r1700, %r1678, 8;
	// begin inline asm
	lop3.b32 %r1698, %r585, %r1700, %r1679, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1702, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1703, %r1679, %r1702;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1706, %r1698, %r1703;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1709, %r596, %r1700, %r1690, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1713, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1714, %r1690, %r1713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1717, %r1709, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r226, %r1684, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r226, %r1695, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r226, %r1706, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r226, %r1717, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1744, %r1498, %r1722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r1750, %r1509, %r1728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1756, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1756, %r1520, %r1734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1762, %r1531, %r1740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1768, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r1768, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r260, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1777, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1777, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r260, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r263, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r260, %r1772, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r263, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r260, %r1781, %r1793;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1827, %r1824}, {%r266, %r272, %r269, %r275}, {%r1773, %r1789}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1836, %r1833}, {%r266, %r272, %r269, %r275}, {%r1782, %r1796}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1820, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r278, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1829, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1831, %r1829, %r1833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r278, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1838, %r281, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r278, %r1824, %r1838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r281, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r278, %r1833, %r1845;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1853}, {%r284, %r290, %r287, %r293}, {%r1825, %r1841}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1863}, {%r284, %r290, %r287, %r293}, {%r1834, %r1848}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1872, %r56, %r1852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r56, %r1853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r56, %r1862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r56, %r1863;
	// end inline asm
	// begin inline asm
	mov.b32 %r1884, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1885, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1886, %r1872, %r1884;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1889, %r1886, %r1885;
	// end inline asm
	// begin inline asm
	mov.b32 %r1892, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1893, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1894, %r1875, %r1892;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1897, %r1894, %r1893;
	// end inline asm
	// begin inline asm
	mov.b32 %r1900, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1901, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1902, %r1878, %r1900;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1905, %r1902, %r1901;
	// end inline asm
	// begin inline asm
	mov.b32 %r1908, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1909, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1910, %r1881, %r1908;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1913, %r1910, %r1909;
	// end inline asm
	// begin inline asm
	mov.b32 %r1919, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1917, %r1889, %r1919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1920, %r1897, %r1919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1923, %r1905, %r1919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1926, %r1913, %r1919;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1929, %r1917, %r1923, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1933, %r1920, %r1926, %r1026;
	// end inline asm
	shl.b32 	%r1940, %r1933, 4;
	// begin inline asm
	lop3.b32 %r1937, %r1032, %r1929, %r1940, 202;
	// end inline asm
	st.shared.u32 	[%rd152], %r1937;
	add.s32 	%r2414, %r32, %r2396;
	add.s32 	%r2415, %r2414, %r2398;
	add.s32 	%r2416, %r2415, %r26;
	add.s32 	%r2417, %r2416, %r27;
	add.s32 	%r2418, %r2417, %r28;
	mul.wide.u32 	%rd96, %r2418, 4;
	add.s64 	%rd97, %rd46, %rd96;
	ld.shared.u32 	%r2537, [%rd97];
	// begin inline asm
	mov.b32 %r1946, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1957, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1945, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r1943, %r585, %r1945, %r1946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1948, %r1946, %r1947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1951, %r1943, %r1948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1954, %r596, %r1945, %r1957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1959, %r1957, %r1958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1962, %r1954, %r1959;
	// end inline asm
	shr.u32 	%r1967, %r1945, 8;
	// begin inline asm
	lop3.b32 %r1965, %r585, %r1967, %r1946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1969, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1970, %r1946, %r1969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1973, %r1965, %r1970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1976, %r596, %r1967, %r1957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1957, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2003, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1991, %r2539, -2004318072;
	// begin inline asm
	lop3.b32 %r1989, %r585, %r1991, %r1992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1994, %r1992, %r1993;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1997, %r1989, %r1994;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2000, %r596, %r1991, %r2003, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2005, %r2003, %r2004;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2008, %r2000, %r2005;
	// end inline asm
	shr.u32 	%r2013, %r1991, 8;
	// begin inline asm
	lop3.b32 %r2011, %r585, %r2013, %r1992, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2016, %r1992, %r2015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2019, %r2011, %r2016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2022, %r596, %r2013, %r2003, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2027, %r2003, %r2026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2030, %r2022, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r164, %r1997, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r164, %r2008, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r164, %r2019, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r164, %r2030, %r2514;
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2061, %r2519, -2004318072;
	// begin inline asm
	lop3.b32 %r2059, %r585, %r2061, %r2062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2063, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2064, %r2062, %r2063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2067, %r2059, %r2064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2070, %r596, %r2061, %r2073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2074, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2075, %r2073, %r2074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2078, %r2070, %r2075;
	// end inline asm
	shr.u32 	%r2083, %r2061, 8;
	// begin inline asm
	lop3.b32 %r2081, %r585, %r2083, %r2062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2085, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2086, %r2062, %r2085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2089, %r2081, %r2086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2092, %r596, %r2083, %r2073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2096, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2097, %r2073, %r2096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2100, %r2092, %r2097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2103, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2103, %r2067, %r2035;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2109, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r2109, %r2078, %r2041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2115, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2117, %r2115, %r2089, %r2047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2121, %r195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r2121, %r2100, %r2053;
	// end inline asm
	// begin inline asm
	mov.b32 %r2132, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2143, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2131, %r2523, -2004318072;
	// begin inline asm
	lop3.b32 %r2129, %r585, %r2131, %r2132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2133, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2134, %r2132, %r2133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2137, %r2129, %r2134;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2140, %r596, %r2131, %r2143, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2144, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2145, %r2143, %r2144;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2148, %r2140, %r2145;
	// end inline asm
	shr.u32 	%r2153, %r2131, 8;
	// begin inline asm
	lop3.b32 %r2151, %r585, %r2153, %r2132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2155, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2156, %r2132, %r2155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2159, %r2151, %r2156;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2162, %r596, %r2153, %r2143, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2167, %r2143, %r2166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2170, %r2162, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r226, %r2137, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r226, %r2148, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r226, %r2159, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r226, %r2170, %r2123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2228, %r2197, %r1951, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2203, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r2203, %r1962, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2209, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2237, %r2209, %r1973, %r2187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r2215, %r1984, %r2193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2221, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r2221, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r260, %r2228, %r2223;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2230, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2232, %r2230, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2235, %r260, %r2237, %r2232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2239, %r263, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2242, %r260, %r2225, %r2239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r263, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r260, %r2234, %r2246;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2280, %r2277}, {%r266, %r272, %r269, %r275}, {%r2226, %r2242}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2289, %r2286}, {%r266, %r272, %r269, %r275}, {%r2235, %r2249}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2273, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r2273, %r2277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r278, %r2280, %r2275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2282, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r2282, %r2286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r278, %r2289, %r2284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r281, %r2280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r278, %r2277, %r2291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2298, %r281, %r2289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2301, %r278, %r2286, %r2298;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2305, %r2306}, {%r284, %r290, %r287, %r293}, {%r2278, %r2294}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2315, %r2316}, {%r284, %r290, %r287, %r293}, {%r2287, %r2301}, {%r2514, %r2514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2325, %r56, %r2305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2328, %r56, %r2306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r56, %r2315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r56, %r2316;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2339, %r2325, %r2337;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2342, %r2339, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2347, %r2328, %r2345;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2350, %r2347, %r2346;
	// end inline asm
	// begin inline asm
	mov.b32 %r2353, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2355, %r2331, %r2353;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2358, %r2355, %r2354;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2363, %r2334, %r2361;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2366, %r2363, %r2362;
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2342, %r2372;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2373, %r2350, %r2372;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2376, %r2358, %r2372;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2366, %r2372;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2370, %r2376, %r1026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2386, %r2373, %r2379, %r1026;
	// end inline asm
	shl.b32 	%r2393, %r2386, 4;
	// begin inline asm
	lop3.b32 %r2390, %r1032, %r2382, %r2393, 202;
	// end inline asm
	st.shared.u32 	[%rd153], %r2390;
	add.s32 	%r2538, %r2538, 64;
	add.s64 	%rd153, %rd153, 8324;
	add.s64 	%rd152, %rd152, 8324;
	add.s64 	%rd151, %rd151, 8324;
	add.s64 	%rd150, %rd150, 8324;
	add.s32 	%r2529, %r2529, 1;
	setp.eq.s32 	%p166, %r2538, 256;
	mov.u32 	%r2530, %r2523;
	mov.u32 	%r2531, %r2522;
	mov.u32 	%r2532, %r2521;
	mov.u32 	%r2533, %r2520;
	mov.u32 	%r2539, %r2519;
	mov.u32 	%r2540, %r2518;
	mov.u32 	%r2541, %r2517;
	mov.u32 	%r2542, %r2516;
	@%p166 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10925
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2424, [%rd6];
	ld.shared.u32 	%r2425, [%rd7+128];
	ld.shared.u32 	%r2432, [%rd7+4];
	ld.shared.u32 	%r2433, [%rd7+132];
	ld.shared.u32 	%r2440, [%rd6+8324];
	ld.shared.u32 	%r2441, [%rd7+8452];
	ld.shared.u32 	%r2448, [%rd7+8328];
	ld.shared.u32 	%r2449, [%rd7+8456];
	ld.shared.u32 	%r2456, [%rd6+16648];
	ld.shared.u32 	%r2457, [%rd7+16776];
	ld.shared.u32 	%r2464, [%rd7+16652];
	ld.shared.u32 	%r2465, [%rd7+16780];
	ld.shared.u32 	%r2472, [%rd6+24972];
	ld.shared.u32 	%r2473, [%rd7+25100];
	ld.shared.u32 	%r2480, [%rd7+24976];
	ld.shared.u32 	%r2481, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2419, %r2424, %r2425, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2424, %r2425, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2427, %r2432, %r2433, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2431, %r2432, %r2433, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2435, %r2440, %r2441, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2439, %r2440, %r2441, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2443, %r2448, %r2449, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2447, %r2448, %r2449, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2451, %r2456, %r2457, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2455, %r2456, %r2457, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2459, %r2464, %r2465, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2463, %r2464, %r2465, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2467, %r2472, %r2473, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2471, %r2472, %r2473, %r499;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2475, %r2480, %r2481, %r495;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2479, %r2480, %r2481, %r499;
	// end inline asm
	selp.b32 	%r2483, %r2423, %r2419, %p153;
	shfl.sync.bfly.b32	%r90, %r2483, 8, 31, -1;
	selp.b32 	%r2484, %r2431, %r2427, %p153;
	shfl.sync.bfly.b32	%r91, %r2484, 8, 31, -1;
	selp.b32 	%r2485, %r2439, %r2435, %p153;
	shfl.sync.bfly.b32	%r2486, %r2485, 8, 31, -1;
	selp.b32 	%r2487, %r2447, %r2443, %p153;
	shfl.sync.bfly.b32	%r2488, %r2487, 8, 31, -1;
	selp.b32 	%r2489, %r2455, %r2451, %p153;
	shfl.sync.bfly.b32	%r2490, %r2489, 8, 31, -1;
	selp.b32 	%r2491, %r2463, %r2459, %p153;
	shfl.sync.bfly.b32	%r2492, %r2491, 8, 31, -1;
	selp.b32 	%r2493, %r2471, %r2467, %p153;
	shfl.sync.bfly.b32	%r2494, %r2493, 8, 31, -1;
	selp.b32 	%r2495, %r2479, %r2475, %p153;
	shfl.sync.bfly.b32	%r2496, %r2495, 8, 31, -1;
	setp.eq.s32 	%p168, %r46, 0;
	shl.b32 	%r2515, %r45, 9;
	@%p168 bra 	$L__BB0_35;
// %bb.34:                              // %pass10100
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2497, %r91, %r2431, %p153;
	selp.b32 	%r2498, %r2427, %r91, %p153;
	selp.b32 	%r2499, %r90, %r2423, %p153;
	selp.b32 	%r2500, %r2419, %r90, %p153;
	or.b32  	%r2502, %r25, %r2515;
	cvt.u64.u32 	%rd98, %r2502;
	add.s64 	%rd99, %rd98, %rd8;
	shr.u64 	%rd100, %rd99, 39;
	add.s64 	%rd101, %rd99, %rd100;
	shr.s64 	%rd102, %rd101, 25;
	setp.lt.s64 	%p170, %rd99, 0;
	and.b64  	%rd103, %rd101, -33554432;
	setp.ne.s64 	%p171, %rd103, %rd99;
	and.pred  	%p172, %p170, %p171;
	selp.u64 	%rd104, 1, 0, %p172;
	sub.s64 	%rd105, %rd104, %rd102;
	shl.b64 	%rd106, %rd105, 25;
	add.s64 	%rd107, %rd106, %rd99;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r2500, %r2498, %r2499, %r2497};
$L__BB0_35:                             // %pass10113
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r84, %r45, 64;
	setp.lt.u32 	%p173, %r84, 192;
	@%p173 bra 	$L__BB0_37;
// %bb.36:                              // %pass10207
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r92, %r2435, %r2486, %p153;
	selp.b32 	%r93, %r2486, %r2439, %p153;
	selp.b32 	%r94, %r2443, %r2488, %p153;
	selp.b32 	%r95, %r2488, %r2447, %p153;
	shl.b32 	%r2503, %r84, 9;
	or.b32  	%r2504, %r25, %r2503;
	cvt.u64.u32 	%rd110, %r2504;
	add.s64 	%rd111, %rd110, %rd8;
	shr.u64 	%rd112, %rd111, 39;
	add.s64 	%rd113, %rd111, %rd112;
	shr.s64 	%rd114, %rd113, 25;
	setp.lt.s64 	%p174, %rd111, 0;
	and.b64  	%rd115, %rd113, -33554432;
	setp.ne.s64 	%p175, %rd115, %rd111;
	and.pred  	%p176, %p174, %p175;
	selp.u64 	%rd116, 1, 0, %p176;
	sub.s64 	%rd117, %rd116, %rd114;
	shl.b64 	%rd118, %rd117, 25;
	add.s64 	%rd119, %rd118, %rd111;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r92, %r94, %r93, %r95};
$L__BB0_37:                             // %pass10220
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r85, %r45, 128;
	selp.b32 	%r100, %r2467, %r2494, %p153;
	selp.b32 	%r101, %r2494, %r2471, %p153;
	selp.b32 	%r102, %r2475, %r2496, %p153;
	selp.b32 	%r103, %r2496, %r2479, %p153;
	setp.lt.u32 	%p177, %r85, 192;
	@%p177 bra 	$L__BB0_39;
// %bb.38:                              // %pass10314
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r96, %r2451, %r2490, %p153;
	selp.b32 	%r97, %r2490, %r2455, %p153;
	selp.b32 	%r98, %r2459, %r2492, %p153;
	selp.b32 	%r99, %r2492, %r2463, %p153;
	shl.b32 	%r2505, %r85, 9;
	or.b32  	%r2506, %r25, %r2505;
	cvt.u64.u32 	%rd122, %r2506;
	add.s64 	%rd123, %rd122, %rd8;
	shr.u64 	%rd124, %rd123, 39;
	add.s64 	%rd125, %rd123, %rd124;
	shr.s64 	%rd126, %rd125, 25;
	setp.lt.s64 	%p178, %rd123, 0;
	and.b64  	%rd127, %rd125, -33554432;
	setp.ne.s64 	%p179, %rd127, %rd123;
	and.pred  	%p180, %p178, %p179;
	selp.u64 	%rd128, 1, 0, %p180;
	sub.s64 	%rd129, %rd128, %rd126;
	shl.b64 	%rd130, %rd129, 25;
	add.s64 	%rd131, %rd130, %rd123;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd3, %rd132;
	st.global.v4.u32 	[%rd133], {%r96, %r98, %r97, %r99};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L23132
	st.global.u32 	[%rd5], %r2514;
	ret;
$L__BB0_9:                              // %L180
	mov.u32 	%r2513, 2;
	st.global.u32 	[%rd5], %r2513;
	mov.u64 	%rd148, exception2065;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r104;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L288
	mov.u32 	%r2512, 3;
	st.global.u32 	[%rd5], %r2512;
	mov.u64 	%rd146, exception2065;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r104;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd38, exception1;
	cvta.global.u64 	%rd39, %rd38;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd39;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r104;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd40, exception1;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd37;
	st.param.b32 	[param0+8], %r104;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
