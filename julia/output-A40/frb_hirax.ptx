// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3244[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3292[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<356>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3554>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<480>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r279, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd70, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r280, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r280, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd87, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9];
	ld.param.u64 	%rd71, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r281, %r3, %r1;
	or.b32  	%r282, %r281, %r5;
	mul.wide.u32 	%rd93, %r282, 4;
	add.s64 	%rd5, %rd87, %rd93;
	mov.u32 	%r283, 1;
	st.global.u32 	[%rd5], %r283;
	ld.global.u32 	%r6, [%rd71];
	setp.lt.s32 	%p3, %r6, 0;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L205
	ld.param.u64 	%rd75, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd75];
	setp.lt.s32 	%p4, %r7, %r6;
	setp.gt.s32 	%p5, %r7, 1024;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L215
	ld.param.u64 	%rd79, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r8, [%rd79];
	sub.s32 	%r10, %r7, %r6;
	and.b32  	%r284, %r10, 63;
	setp.ne.s32 	%p7, %r284, 0;
	setp.lt.s32 	%p8, %r8, 0;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L221
	ld.param.u64 	%rd83, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd83];
	setp.ge.s32 	%p10, %r9, %r8;
	setp.lt.s32 	%p11, %r9, 65;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_6;
$L__BB0_174:                            // %pass75
	sub.s32 	%r285, %r9, %r8;
	mul.hi.s32 	%r286, %r10, 1374389535;
	shr.u32 	%r287, %r286, 31;
	shr.s32 	%r288, %r286, 3;
	add.s32 	%r289, %r288, %r287;
	setp.ne.s32 	%p13, %r285, %r289;
	@%p13 bra 	$L__BB0_6;
// %bb.175:                             // %pass126
	and.b32  	%r149, %r1, 3;
	shr.u32 	%r150, %r1, 2;
	mul.lo.s32 	%r290, %r149, %r150;
	and.b32  	%r291, %r290, 7;
	cvt.rn.f32.s32 	%f185, %r291;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p14, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p336, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p14 bra 	$L__BB0_187;
// %bb.176:
	@%p336 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_177;
$L__BB0_183:
	mov.b32 	%r152, %f750;
	and.b32  	%r292, %r152, 8388607;
	or.b32  	%r3507, %r292, 1065353216;
	mov.b32 	%f745, %r3507;
	add.s32 	%r293, %r152, -1073741824;
	and.b32  	%r3508, %r293, -8388608;
	setp.eq.s32 	%p21, %r3508, 0;
	@%p21 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r294, %r3508, 192937984;
	add.s32 	%r295, %r3507, %r294;
	mov.b32 	%f197, %r295;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3508, %r3508, %r294;
	mov.b32 	%r3507, %f745;
	setp.ne.s32 	%p22, %r3508, 0;
	setp.ne.s32 	%p23, %r3507, 0;
	and.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p25, %r152, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p25;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_187;
$L__BB0_177:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r151, %f154;
	setp.lt.u32 	%p16, %r151, 1073741824;
	@%p16 bra 	$L__BB0_182;
// %bb.178:
	setp.lt.u32 	%p17, %r151, -2147483647;
	@%p17 bra 	$L__BB0_180;
// %bb.179:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p20, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p20;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p18, %f154, 0f40800000;
	@%p18 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p19, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p19;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p26, %f206, 0f7F800000;
	mov.b32 	%r296, %f151;
	and.b32  	%r159, %r296, -2147483648;
	@%p26 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r297, %f746;
	or.b32  	%r298, %r159, %r297;
	mov.b32 	%f746, %r298;
$L__BB0_189:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r305, %f207;
	and.b32  	%r306, %r305, -2147483648;
	shl.b32 	%r162, %r1, 1;
	and.b32  	%r313, %r162, 2;
	mul.lo.s32 	%r163, %r313, %r150;
	cvt.rn.f32.s32 	%f239, %r163;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p34, %f726, 0f40000000;
	setp.gtu.f32 	%p337, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p34 bra 	$L__BB0_18;
// %bb.7:
	@%p337 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r12, %f726;
	and.b32  	%r314, %r12, 8388607;
	or.b32  	%r3473, %r314, 1065353216;
	mov.b32 	%f705, %r3473;
	add.s32 	%r315, %r12, -1073741824;
	and.b32  	%r3474, %r315, -8388608;
	setp.eq.s32 	%p41, %r3474, 0;
	@%p41 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i2367.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i2367
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r316, %r3474, 192937984;
	add.s32 	%r317, %r3473, %r316;
	mov.b32 	%f251, %r317;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3474, %r3474, %r316;
	mov.b32 	%r3473, %f705;
	setp.ne.s32 	%p42, %r3474, 0;
	setp.ne.s32 	%p43, %r3473, 0;
	and.pred  	%p44, %p42, %p43;
	@%p44 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i2369
	setp.gt.u32 	%p45, %r12, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p45;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i2346
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r11, %f2;
	setp.lt.u32 	%p36, %r11, 1073741824;
	@%p36 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p37, %r11, -2147483647;
	@%p37 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p40, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p40;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p38, %f2, 0f40800000;
	@%p38 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i2350
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p39, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p39;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i2353
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i2372
	or.b32  	%r307, %r306, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p46, %f260, 0f7F800000;
	mov.b32 	%r318, %f168;
	and.b32  	%r19, %r318, -2147483648;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r319, %f706;
	or.b32  	%r320, %r19, %r319;
	mov.b32 	%f706, %r320;
$L__BB0_20:                             // %__nv_fmodf.exit2373
	mov.b32 	%f208, %r307;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r321, %f261;
	and.b32  	%r322, %r321, -2147483648;
	or.b32  	%r323, %r322, 1056964608;
	add.s32 	%r329, %r163, %r150;
	cvt.rn.f32.s32 	%f291, %r329;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p54, %f730, 0f40000000;
	setp.gtu.f32 	%p338, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p54 bra 	$L__BB0_32;
// %bb.21:
	@%p338 bra 	$L__BB0_28;
	bra.uni 	$L__BB0_22;
$L__BB0_28:
	mov.b32 	%r21, %f730;
	and.b32  	%r330, %r21, 8388607;
	or.b32  	%r3475, %r330, 1065353216;
	mov.b32 	%f709, %r3475;
	add.s32 	%r331, %r21, -1073741824;
	and.b32  	%r3476, %r331, -8388608;
	setp.eq.s32 	%p61, %r3476, 0;
	@%p61 bra 	$L__BB0_31;
// %bb.29:                              // %__nv_fmaf_rn.exit4.i.i.i2398.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_30:                             // %__nv_fmaf_rn.exit4.i.i.i2398
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r3476, 192937984;
	add.s32 	%r333, %r3475, %r332;
	mov.b32 	%f303, %r333;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3476, %r3476, %r332;
	mov.b32 	%r3475, %f709;
	setp.ne.s32 	%p62, %r3476, 0;
	setp.ne.s32 	%p63, %r3475, 0;
	and.pred  	%p64, %p62, %p63;
	@%p64 bra 	$L__BB0_30;
$L__BB0_31:                             // %__internal_fmodf_slowpath_mod.exit.i.i2400
	setp.gt.u32 	%p65, %r21, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p65;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_32;
$L__BB0_22:                             // %__nv_fast_fdividef.exit.i.i.i2377
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r20, %f21;
	setp.lt.u32 	%p56, %r20, 1073741824;
	@%p56 bra 	$L__BB0_27;
// %bb.23:
	setp.lt.u32 	%p57, %r20, -2147483647;
	@%p57 bra 	$L__BB0_25;
// %bb.24:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p60, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p60;
	bra.uni 	$L__BB0_27;
$L__BB0_25:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p58, %f21, 0f40800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i2381
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p59, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p59;
$L__BB0_27:                             // %__internal_fmodf_fastpath_quot.exit.i.i2384
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_32:                             // %__internal_fmodf_kernel.exit.i2403
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r323;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p66, %f312, 0f7F800000;
	mov.b32 	%r334, %f18;
	and.b32  	%r28, %r334, -2147483648;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	mov.b32 	%r335, %f710;
	or.b32  	%r336, %r28, %r335;
	mov.b32 	%f710, %r336;
$L__BB0_34:                             // %__nv_fmodf.exit2404
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p27, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r343, %f313;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f314, %r345;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r31, %r162, %r150;
	and.b32  	%r351, %r31, 2;
	cvt.rn.f32.s32 	%f345, %r351;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p74, %f734, 0f40000000;
	setp.gtu.f32 	%p339, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p74 bra 	$L__BB0_46;
// %bb.35:
	@%p339 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r33, %f734;
	and.b32  	%r352, %r33, 8388607;
	or.b32  	%r3477, %r352, 1065353216;
	mov.b32 	%f713, %r3477;
	add.s32 	%r353, %r33, -1073741824;
	and.b32  	%r3478, %r353, -8388608;
	setp.eq.s32 	%p81, %r3478, 0;
	@%p81 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i2429.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i2429
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r354, %r3478, 192937984;
	add.s32 	%r355, %r3477, %r354;
	mov.b32 	%f357, %r355;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3478, %r3478, %r354;
	mov.b32 	%r3477, %f713;
	setp.ne.s32 	%p82, %r3478, 0;
	setp.ne.s32 	%p83, %r3477, 0;
	and.pred  	%p84, %p82, %p83;
	@%p84 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i2431
	setp.gt.u32 	%p85, %r33, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p85;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i2408
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r32, %f38;
	setp.lt.u32 	%p76, %r32, 1073741824;
	@%p76 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p77, %r32, -2147483647;
	@%p77 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p80, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p80;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p78, %f38, 0f40800000;
	@%p78 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i2412
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p79, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p79;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i2415
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i2434
	selp.f32 	%f212, %f207, %f210, %p27;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p28, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p47, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p67, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p86, %f366, 0f7F800000;
	mov.b32 	%r356, %f35;
	and.b32  	%r40, %r356, -2147483648;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r357, %f714;
	or.b32  	%r358, %r40, %r357;
	mov.b32 	%f714, %r358;
$L__BB0_48:                             // %__nv_fmodf.exit2435
	selp.f32 	%f214, %f213, %f212, %p28;
	selp.f32 	%f266, %f261, %f264, %p47;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p48, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p67;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p68, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r359, %f367;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f368, %r361;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p87, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p87;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p88, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p88;
	cvt.rzi.s32.f32 	%r362, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p89, %r363, 1;
	selp.f32 	%f386, %f384, %f385, %p89;
	selp.f32 	%f387, %f385, %f384, %p89;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p90, %r364, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p90;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p91, %r366, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p92, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p92;
	abs.f32 	%f395, %f714;
	add.s32 	%r367, %r31, %r150;
	and.b32  	%r368, %r367, 3;
	cvt.rn.f32.s32 	%f397, %r368;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p94, %f738, 0f40000000;
	setp.gtu.f32 	%p340, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p94 bra 	$L__BB0_60;
// %bb.49:
	@%p340 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r42, %f738;
	and.b32  	%r369, %r42, 8388607;
	or.b32  	%r3479, %r369, 1065353216;
	mov.b32 	%f717, %r3479;
	add.s32 	%r370, %r42, -1073741824;
	and.b32  	%r3480, %r370, -8388608;
	setp.eq.s32 	%p101, %r3480, 0;
	@%p101 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2460.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2460
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r3480, 192937984;
	add.s32 	%r372, %r3479, %r371;
	mov.b32 	%f409, %r372;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3480, %r3480, %r371;
	mov.b32 	%r3479, %f717;
	setp.ne.s32 	%p102, %r3480, 0;
	setp.ne.s32 	%p103, %r3479, 0;
	and.pred  	%p104, %p102, %p103;
	@%p104 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2462
	setp.gt.u32 	%p105, %r42, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p105;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2439
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r41, %f57;
	setp.lt.u32 	%p96, %r41, 1073741824;
	@%p96 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p97, %r41, -2147483647;
	@%p97 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p100, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p100;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p98, %f57, 0f40800000;
	@%p98 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2443
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p99, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p99;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2446
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2465
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p48;
	selp.f32 	%f320, %f319, %f318, %p68;
	selp.f32 	%f392, %f387, %f391, %p91;
	setp.gt.f32 	%p93, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p106, %f418, 0f7F800000;
	mov.b32 	%r373, %f54;
	and.b32  	%r49, %r373, -2147483648;
	@%p106 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r374, %f718;
	or.b32  	%r375, %r49, %r374;
	mov.b32 	%f718, %r375;
$L__BB0_62:                             // %__nv_fmodf.exit2466
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f53, %f396, %f392, %p93;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r376, %f419;
	and.b32  	%r377, %r376, -2147483648;
	or.b32  	%r378, %r377, 1056964608;
	mov.b32 	%f420, %r378;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p107, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p107;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p108, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p108;
	cvt.rzi.s32.f32 	%r379, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r380, %r379, 1;
	setp.eq.b32 	%p109, %r380, 1;
	selp.f32 	%f438, %f436, %f437, %p109;
	selp.f32 	%f439, %f437, %f436, %p109;
	and.b32  	%r381, %r379, 2;
	setp.eq.s32 	%p110, %r381, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p110;
	add.s32 	%r382, %r379, 1;
	and.b32  	%r383, %r382, 2;
	setp.eq.s32 	%p111, %r383, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p111;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p112, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p112;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p113, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p113;
	and.b32  	%r50, %r1, 2;
	setp.eq.s32 	%p114, %r50, 0;
	mov.f32 	%f720, %f53;
	mov.f32 	%f722, %f72;
	@%p114 bra 	$L__BB0_64;
// %bb.63:                              // %L623
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f53;
	mov.f32 	%f723, %f72;
$L__BB0_64:                             // %L625
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p14 bra 	$L__BB0_197;
// %bb.65:
	@%p336 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_66;
$L__BB0_193:
	mov.b32 	%r165, %f750;
	and.b32  	%r390, %r165, 8388607;
	or.b32  	%r3509, %r390, 1065353216;
	mov.b32 	%f749, %r3509;
	add.s32 	%r391, %r165, -1073741824;
	and.b32  	%r3510, %r391, -8388608;
	setp.eq.s32 	%p122, %r3510, 0;
	@%p122 bra 	$L__BB0_196;
// %bb.194:                             // %__nv_fmaf_rn.exit4.i.i.i2491.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_195:                            // %__nv_fmaf_rn.exit4.i.i.i2491
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3510, 192937984;
	add.s32 	%r393, %r3509, %r392;
	mov.b32 	%f459, %r393;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3510, %r3510, %r392;
	mov.b32 	%r3509, %f749;
	setp.ne.s32 	%p123, %r3510, 0;
	setp.ne.s32 	%p124, %r3509, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_195;
$L__BB0_196:                            // %__internal_fmodf_slowpath_mod.exit.i.i2493
	setp.gt.u32 	%p126, %r165, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_197;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i2470
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r164, %f171;
	setp.lt.u32 	%p117, %r164, 1073741824;
	@%p117 bra 	$L__BB0_192;
// %bb.67:
	setp.lt.u32 	%p118, %r164, -2147483647;
	@%p118 bra 	$L__BB0_190;
// %bb.68:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p121;
	bra.uni 	$L__BB0_192;
$L__BB0_190:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f171, 0f40800000;
	@%p119 bra 	$L__BB0_192;
// %bb.191:                             // %__nv_fmaf_rn.exit.i.i.i2474
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p120, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p120;
$L__BB0_192:                            // %__internal_fmodf_fastpath_quot.exit.i.i2477
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_197:                            // %__internal_fmodf_kernel.exit.i2496
	cvt.rzi.s32.f32 	%r308, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p127, %f468, 0f7F800000;
	@%p127 bra 	$L__BB0_199;
// %bb.198:
	mov.b32 	%r394, %f750;
	or.b32  	%r395, %r159, %r394;
	mov.b32 	%f750, %r395;
$L__BB0_199:                            // %__nv_fmodf.exit2497
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r309, %r308, 1;
	cvt.rzi.s32.f32 	%r324, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r346, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r402, %f469;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f470, %r404;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p129, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p129;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p130, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p130;
	cvt.rzi.s32.f32 	%r405, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r406, %r405, 1;
	@%p34 bra 	$L__BB0_80;
// %bb.69:
	@%p337 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r54, %f726;
	and.b32  	%r410, %r54, 8388607;
	or.b32  	%r3481, %r410, 1065353216;
	mov.b32 	%f725, %r3481;
	add.s32 	%r411, %r54, -1073741824;
	and.b32  	%r3482, %r411, -8388608;
	setp.eq.s32 	%p142, %r3482, 0;
	@%p142 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i2522.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i2522
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r412, %r3482, 192937984;
	add.s32 	%r413, %r3481, %r412;
	mov.b32 	%f511, %r413;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3482, %r3482, %r412;
	mov.b32 	%r3481, %f725;
	setp.ne.s32 	%p143, %r3482, 0;
	setp.ne.s32 	%p144, %r3481, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i2524
	setp.gt.u32 	%p146, %r54, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i2501
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r53, %f80;
	setp.lt.u32 	%p137, %r53, 1073741824;
	@%p137 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p138, %r53, -2147483647;
	@%p138 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p141, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p141;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p139, %f80, 0f40800000;
	@%p139 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i2505
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p140, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p140;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i2508
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i2527
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p29, %r309, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r325, %r324, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r347, %r346, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p131, %r406, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p147, %f520, 0f7F800000;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r414, %f726;
	or.b32  	%r415, %r19, %r414;
	mov.b32 	%f726, %r415;
$L__BB0_82:                             // %__nv_fmodf.exit2528
	selp.f32 	%f226, %f224, %f225, %p29;
	and.b32  	%r310, %r308, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p49, %r325, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p69, %r347, 1;
	selp.f32 	%f488, %f486, %f487, %p131;
	and.b32  	%r407, %r405, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r416, %f521;
	and.b32  	%r417, %r416, -2147483648;
	or.b32  	%r418, %r417, 1056964608;
	mov.b32 	%f522, %r418;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p149, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p149;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p150, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p150;
	cvt.rzi.s32.f32 	%r419, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r420, %r419, 1;
	setp.eq.b32 	%p151, %r420, 1;
	@%p54 bra 	$L__BB0_94;
// %bb.83:
	@%p338 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r62, %f730;
	and.b32  	%r424, %r62, 8388607;
	or.b32  	%r3483, %r424, 1065353216;
	mov.b32 	%f729, %r3483;
	add.s32 	%r425, %r62, -1073741824;
	and.b32  	%r3484, %r425, -8388608;
	setp.eq.s32 	%p162, %r3484, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i2553.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i2553
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r426, %r3484, 192937984;
	add.s32 	%r427, %r3483, %r426;
	mov.b32 	%f561, %r427;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3484, %r3484, %r426;
	mov.b32 	%r3483, %f729;
	setp.ne.s32 	%p163, %r3484, 0;
	setp.ne.s32 	%p164, %r3483, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i2555
	setp.gt.u32 	%p166, %r62, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i2532
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r61, %f97;
	setp.lt.u32 	%p157, %r61, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r61, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p161, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p159, %f97, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i2536
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p160, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i2539
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i2558
	setp.eq.s32 	%p30, %r310, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r311, %r308, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p49;
	and.b32  	%r326, %r324, 2;
	selp.f32 	%f332, %f330, %f331, %p69;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p132, %r407, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r408, %r405, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p151;
	and.b32  	%r421, %r419, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p167, %f570, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r428, %f730;
	or.b32  	%r429, %r28, %r428;
	mov.b32 	%f730, %r429;
$L__BB0_96:                             // %__nv_fmodf.exit2559
	selp.f32 	%f227, %f225, %f224, %p29;
	selp.f32 	%f229, %f226, %f228, %p30;
	and.b32  	%r312, %r311, 2;
	setp.eq.f32 	%p32, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p50, %r326, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r327, %r324, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p70, %r348, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r349, %r346, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p131;
	selp.f32 	%f491, %f488, %f490, %p132;
	and.b32  	%r409, %r408, 2;
	setp.eq.f32 	%p134, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p152, %r421, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r422, %r419, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r436, %f571;
	and.b32  	%r437, %r436, -2147483648;
	or.b32  	%r438, %r437, 1056964608;
	mov.b32 	%f572, %r438;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p169, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p169;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p170, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p170;
	cvt.rzi.s32.f32 	%r439, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r440, %r439, 1;
	setp.eq.b32 	%p171, %r440, 1;
	selp.f32 	%f590, %f588, %f589, %p171;
	and.b32  	%r441, %r439, 2;
	setp.eq.s32 	%p172, %r441, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r442, %r439, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p74 bra 	$L__BB0_108;
// %bb.97:
	@%p339 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_98;
$L__BB0_104:
	mov.b32 	%r72, %f734;
	and.b32  	%r444, %r72, 8388607;
	or.b32  	%r3485, %r444, 1065353216;
	mov.b32 	%f733, %r3485;
	add.s32 	%r445, %r72, -1073741824;
	and.b32  	%r3486, %r445, -8388608;
	setp.eq.s32 	%p182, %r3486, 0;
	@%p182 bra 	$L__BB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i2584.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_106:                            // %__nv_fmaf_rn.exit4.i.i.i2584
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r3486, 192937984;
	add.s32 	%r447, %r3485, %r446;
	mov.b32 	%f613, %r447;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3486, %r3486, %r446;
	mov.b32 	%r3485, %f733;
	setp.ne.s32 	%p183, %r3486, 0;
	setp.ne.s32 	%p184, %r3485, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_106;
$L__BB0_107:                            // %__internal_fmodf_slowpath_mod.exit.i.i2586
	setp.gt.u32 	%p186, %r72, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_108;
$L__BB0_98:                             // %__nv_fast_fdividef.exit.i.i.i2563
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r71, %f112;
	setp.lt.u32 	%p177, %r71, 1073741824;
	@%p177 bra 	$L__BB0_103;
// %bb.99:
	setp.lt.u32 	%p178, %r71, -2147483647;
	@%p178 bra 	$L__BB0_101;
// %bb.100:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p181, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p181;
	bra.uni 	$L__BB0_103;
$L__BB0_101:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p179, %f112, 0f40800000;
	@%p179 bra 	$L__BB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i2567
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p180, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p180;
$L__BB0_103:                            // %__internal_fmodf_fastpath_quot.exit.i.i2570
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_108:                            // %__internal_fmodf_kernel.exit.i2589
	setp.eq.s32 	%p31, %r312, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p32;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p49;
	selp.f32 	%f283, %f280, %f282, %p50;
	and.b32  	%r328, %r327, 2;
	setp.eq.f32 	%p52, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p69;
	selp.f32 	%f335, %f332, %f334, %p70;
	and.b32  	%r350, %r349, 2;
	setp.eq.f32 	%p72, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p133, %r409, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p134;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p151;
	selp.f32 	%f543, %f540, %f542, %p152;
	and.b32  	%r423, %r422, 2;
	setp.eq.f32 	%p154, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p171;
	selp.f32 	%f593, %f590, %f592, %p172;
	and.b32  	%r443, %r442, 2;
	setp.eq.f32 	%p174, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p187, %f622, 0f7F800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	mov.b32 	%r448, %f734;
	or.b32  	%r449, %r40, %r448;
	mov.b32 	%f734, %r449;
$L__BB0_110:                            // %__nv_fmodf.exit2590
	selp.f32 	%f232, %f227, %f231, %p31;
	setp.gt.f32 	%p33, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p51, %r328, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p52;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p71, %r350, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p72;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p133;
	setp.gt.f32 	%p135, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p153, %r423, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p154;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p173, %r443, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p174;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r450, %f623;
	and.b32  	%r451, %r450, -2147483648;
	or.b32  	%r452, %r451, 1056964608;
	mov.b32 	%f624, %r452;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p189, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p189;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p190, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p190;
	cvt.rzi.s32.f32 	%r453, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r454, %r453, 1;
	setp.eq.b32 	%p191, %r454, 1;
	selp.f32 	%f642, %f640, %f641, %p191;
	selp.f32 	%f643, %f641, %f640, %p191;
	and.b32  	%r455, %r453, 2;
	setp.eq.s32 	%p192, %r455, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p192;
	add.s32 	%r456, %r453, 1;
	and.b32  	%r457, %r456, 2;
	setp.eq.s32 	%p193, %r457, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p194, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p194;
	abs.f32 	%f651, %f734;
	@%p94 bra 	$L__BB0_122;
// %bb.111:
	@%p340 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r80, %f738;
	and.b32  	%r458, %r80, 8388607;
	or.b32  	%r3487, %r458, 1065353216;
	mov.b32 	%f737, %r3487;
	add.s32 	%r459, %r80, -1073741824;
	and.b32  	%r3488, %r459, -8388608;
	setp.eq.s32 	%p202, %r3488, 0;
	@%p202 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2615.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2615
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r460, %r3488, 192937984;
	add.s32 	%r461, %r3487, %r460;
	mov.b32 	%f663, %r461;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3488, %r3488, %r460;
	mov.b32 	%r3487, %f737;
	setp.ne.s32 	%p203, %r3488, 0;
	setp.ne.s32 	%p204, %r3487, 0;
	and.pred  	%p205, %p203, %p204;
	@%p205 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2617
	setp.gt.u32 	%p206, %r80, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p206;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2594
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r79, %f129;
	setp.lt.u32 	%p197, %r79, 1073741824;
	@%p197 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p198, %r79, -2147483647;
	@%p198 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p201, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p201;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p199, %f129, 0f40800000;
	@%p199 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2598
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p200, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p200;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2601
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2620
	selp.f32 	%f238, %f237, %f232, %p33;
	selp.f32 	%f286, %f281, %f285, %p51;
	setp.gt.f32 	%p53, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p71;
	setp.gt.f32 	%p73, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p135;
	selp.f32 	%f546, %f541, %f545, %p153;
	setp.gt.f32 	%p155, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p173;
	setp.gt.f32 	%p175, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p193;
	setp.gt.f32 	%p195, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p207, %f672, 0f7F800000;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r462, %f738;
	or.b32  	%r463, %r49, %r462;
	mov.b32 	%f738, %r463;
$L__BB0_124:                            // %__nv_fmodf.exit2621
	mov.b32 	%r301, %f238;
	mov.b32 	%r304, %f235;
	selp.f32 	%f17, %f290, %f286, %p53;
	selp.f32 	%f344, %f343, %f338, %p73;
	mov.b32 	%r398, %f500;
	mov.b32 	%r401, %f497;
	selp.f32 	%f95, %f550, %f546, %p155;
	selp.f32 	%f602, %f601, %f596, %p175;
	selp.f32 	%f127, %f652, %f648, %p195;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r464, %f673;
	and.b32  	%r465, %r464, -2147483648;
	or.b32  	%r466, %r465, 1056964608;
	mov.b32 	%f674, %r466;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p209, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p209;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p210, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p210;
	cvt.rzi.s32.f32 	%r467, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r468, %r467, 1;
	setp.eq.b32 	%p211, %r468, 1;
	selp.f32 	%f692, %f690, %f691, %p211;
	selp.f32 	%f693, %f691, %f690, %p211;
	and.b32  	%r469, %r467, 2;
	setp.eq.s32 	%p212, %r469, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p212;
	add.s32 	%r470, %r467, 1;
	and.b32  	%r471, %r470, 2;
	setp.eq.s32 	%p213, %r471, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p213;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p214, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p214;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p215, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p215;
	mov.f32 	%f740, %f127;
	mov.f32 	%f742, %f144;
	@%p114 bra 	$L__BB0_126;
// %bb.125:                             // %L916
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f127;
	mov.f32 	%f743, %f144;
$L__BB0_126:                            // %L918
	xor.b32  	%r300, %r304, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	mov.b32 	%r339, %f344;
	mov.b32 	%r338, %f17;
	mov.b32 	%r342, %f341;
	mov.b32 	%r341, %f16;
	mov.b32 	%r385, %f720;
	mov.b32 	%r386, %f722;
	mov.b32 	%r388, %f721;
	mov.b32 	%r389, %f723;
	xor.b32  	%r397, %r401, -2147483648;
	mov.b32 	%r432, %f602;
	mov.b32 	%r431, %f95;
	mov.b32 	%r435, %f599;
	mov.b32 	%r434, %f94;
	mov.b32 	%r473, %f740;
	mov.b32 	%r474, %f742;
	mov.b32 	%r476, %f741;
	mov.b32 	%r477, %f743;
	setp.gt.u32 	%p216, %r1, 15;
	mov.u32 	%r174, 999999999;
	@%p216 bra 	$L__BB0_128;
// %bb.127:                             // %L948
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shl.b32 	%r479, %r1, 4;
	and.b32  	%r480, %r479, 240;
	or.b32  	%r481, %r480, %r2;
	mul.wide.u32 	%rd94, %r481, 4;
	add.s64 	%rd95, %rd1, %rd94;
	ld.global.u32 	%r482, [%rd95];
	cvt.s32.s16 	%r483, %r482;
	shr.s32 	%r484, %r482, 16;
	mul.lo.s32 	%r485, %r484, 546;
	mad.lo.s32 	%r174, %r483, 33, %r485;
$L__BB0_128:                            // %pass463
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r299, %r301, %r300;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r301;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r341;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r384, %r386, %r385;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r472, %r474, %r473;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r475, %r477, %r476;
	// end inline asm
	shr.u32 	%r487, %r1, 3;
	bfe.u32 	%r488, %r1, 3, 1;
	shl.b32 	%r489, %r2, 1;
	and.b32  	%r490, %r489, 14;
	or.b32  	%r491, %r488, %r490;
	shl.b32 	%r492, %r1, 6;
	and.b32  	%r493, %r492, 192;
	and.b32  	%r494, %r487, 2;
	and.b32  	%r495, %r150, 1;
	or.b32  	%r496, %r494, %r495;
	shl.b32 	%r497, %r496, 4;
	or.b32  	%r498, %r491, %r5;
	or.b32  	%r499, %r498, %r493;
	or.b32  	%r500, %r499, %r497;
	mul.wide.u32 	%rd96, %r500, 4;
	add.s64 	%rd97, %rd2, %rd96;
	ld.global.u32 	%r175, [%rd97];
	ld.global.u32 	%r176, [%rd97+1024];
	shl.b32 	%r177, %r6, 17;
	shl.b32 	%r501, %r1, 2;
	shl.b32 	%r502, %r4, 7;
	or.b32  	%r178, %r501, %r502;
	and.b32  	%r179, %r1, 16;
	shr.u32 	%r503, %r1, 4;
	and.b32  	%r504, %r162, 30;
	or.b32  	%r505, %r504, %r503;
	mul.lo.s32 	%r506, %r505, 257;
	shr.u32 	%r180, %r2, 3;
	and.b32  	%r507, %r3, 224;
	mad.lo.s32 	%r508, %r180, 257, %r507;
	or.b32  	%r509, %r180, 2;
	mad.lo.s32 	%r510, %r509, 257, %r507;
	or.b32  	%r511, %r180, 4;
	mad.lo.s32 	%r512, %r511, 257, %r507;
	or.b32  	%r513, %r180, 6;
	mad.lo.s32 	%r514, %r513, 257, %r507;
	or.b32  	%r515, %r180, 8;
	mad.lo.s32 	%r516, %r515, 257, %r507;
	or.b32  	%r517, %r180, 10;
	mad.lo.s32 	%r518, %r517, 257, %r507;
	or.b32  	%r519, %r180, 12;
	mad.lo.s32 	%r520, %r519, 257, %r507;
	or.b32  	%r521, %r180, 14;
	mad.lo.s32 	%r522, %r521, 257, %r507;
	or.b32  	%r523, %r180, 16;
	mad.lo.s32 	%r524, %r523, 257, %r507;
	or.b32  	%r525, %r180, 18;
	mad.lo.s32 	%r526, %r525, 257, %r507;
	or.b32  	%r527, %r180, 20;
	mad.lo.s32 	%r528, %r527, 257, %r507;
	or.b32  	%r529, %r180, 22;
	mad.lo.s32 	%r530, %r529, 257, %r507;
	or.b32  	%r531, %r180, 24;
	mad.lo.s32 	%r532, %r531, 257, %r507;
	or.b32  	%r533, %r180, 26;
	mad.lo.s32 	%r534, %r533, 257, %r507;
	or.b32  	%r535, %r180, 28;
	mad.lo.s32 	%r536, %r535, 257, %r507;
	or.b32  	%r537, %r180, 30;
	mad.lo.s32 	%r538, %r537, 257, %r507;
	mul.lo.s32 	%r539, %r149, 2184;
	mad.lo.s32 	%r540, %r491, 33, %r539;
	mad.lo.s32 	%r541, %r496, 546, %r540;
	setp.lt.u32 	%p218, %r1, 4;
	setp.eq.s32 	%p219, %r150, 4;
	setp.eq.s32 	%p220, %r150, 5;
	and.b32  	%r542, %r1, 1;
	neg.s32 	%r543, %r542;
	and.b32  	%r181, %r543, 2064;
	selp.b32 	%r182, 0, 1032, %p114;
	or.b32  	%r183, %r490, %r503;
	bfe.s32 	%r544, %r1, 3, 1;
	and.b32  	%r545, %r1, 8;
	setp.eq.s32 	%p221, %r545, 0;
	and.b32  	%r184, %r544, 258;
	bfe.s32 	%r546, %r1, 2, 1;
	and.b32  	%r547, %r1, 4;
	setp.eq.s32 	%p222, %r547, 0;
	and.b32  	%r185, %r546, 516;
	or.b32  	%r548, %r181, %r182;
	add.s32 	%r549, %r548, %r183;
	add.s32 	%r550, %r549, %r184;
	add.s32 	%r186, %r550, %r185;
	add.s32 	%r187, %r186, 4144;
	add.s32 	%r188, %r186, 4160;
	and.b32  	%r551, %r2, 1;
	neg.s32 	%r552, %r551;
	setp.eq.b32 	%p223, %r551, 1;
	and.b32  	%r553, %r552, 2064;
	bfe.s32 	%r554, %r2, 1, 1;
	and.b32  	%r555, %r2, 2;
	setp.eq.s32 	%p224, %r555, 0;
	and.b32  	%r556, %r554, 1032;
	mul.lo.s32 	%r557, %r180, 258;
	and.b32  	%r558, %r501, 12;
	and.b32  	%r559, %r544, 4144;
	bfe.s32 	%r560, %r2, 2, 1;
	and.b32  	%r561, %r2, 4;
	setp.eq.s32 	%p225, %r561, 0;
	and.b32  	%r562, %r560, 516;
	add.s32 	%r563, %r496, %r557;
	add.s32 	%r564, %r563, %r558;
	add.s32 	%r565, %r564, %r556;
	add.s32 	%r566, %r565, %r553;
	add.s32 	%r567, %r566, %r559;
	add.s32 	%r568, %r567, %r562;
	mul.wide.u32 	%rd98, %r568, 4;
	mov.u64 	%rd99, shmem;
	add.s64 	%rd6, %rd99, %rd98;
	selp.b64 	%rd100, 0, 516, %p225;
	selp.b64 	%rd101, 0, 4144, %p221;
	selp.b64 	%rd102, 2064, 0, %p223;
	selp.b64 	%rd103, 0, 1032, %p224;
	cvt.u64.u32 	%rd104, %r558;
	cvt.u64.u32 	%rd105, %r557;
	cvt.u64.u32 	%rd106, %r496;
	add.s64 	%rd107, %rd106, %rd105;
	add.s64 	%rd108, %rd107, %rd104;
	add.s64 	%rd109, %rd108, %rd103;
	add.s64 	%rd110, %rd109, %rd102;
	add.s64 	%rd111, %rd110, %rd101;
	add.s64 	%rd112, %rd111, %rd100;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd7, %rd99, %rd113;
	shl.b32 	%r569, %r8, 19;
	or.b32  	%r570, %r179, %r3;
	and.b32  	%r571, %r1, 15;
	or.b32  	%r572, %r571, %r5;
	or.b32  	%r189, %r572, %r570;
	cvt.s64.s32 	%rd8, %r569;
	add.s32 	%r573, %r2, %r506;
	mul.wide.u32 	%rd114, %r573, 4;
	add.s64 	%rd9, %rd99, %rd114;
	cvt.u64.u32 	%rd115, %r2;
	cvt.u64.u32 	%rd10, %r506;
	add.s64 	%rd116, %rd10, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd11, %rd99, %rd117;
	add.s32 	%r574, %r508, %r1;
	mul.wide.u32 	%rd118, %r574, 4;
	add.s64 	%rd12, %rd99, %rd118;
	add.s32 	%r575, %r510, %r1;
	mul.wide.u32 	%rd119, %r575, 4;
	add.s64 	%rd13, %rd99, %rd119;
	add.s32 	%r576, %r512, %r1;
	mul.wide.u32 	%rd120, %r576, 4;
	add.s64 	%rd14, %rd99, %rd120;
	add.s32 	%r577, %r514, %r1;
	mul.wide.u32 	%rd121, %r577, 4;
	add.s64 	%rd15, %rd99, %rd121;
	add.s32 	%r578, %r516, %r1;
	mul.wide.u32 	%rd122, %r578, 4;
	add.s64 	%rd16, %rd99, %rd122;
	add.s32 	%r579, %r518, %r1;
	mul.wide.u32 	%rd123, %r579, 4;
	add.s64 	%rd17, %rd99, %rd123;
	add.s32 	%r580, %r520, %r1;
	mul.wide.u32 	%rd124, %r580, 4;
	add.s64 	%rd18, %rd99, %rd124;
	add.s32 	%r581, %r522, %r1;
	mul.wide.u32 	%rd125, %r581, 4;
	add.s64 	%rd19, %rd99, %rd125;
	add.s32 	%r582, %r524, %r1;
	mul.wide.u32 	%rd126, %r582, 4;
	add.s64 	%rd20, %rd99, %rd126;
	add.s32 	%r583, %r526, %r1;
	mul.wide.u32 	%rd127, %r583, 4;
	add.s64 	%rd21, %rd99, %rd127;
	add.s32 	%r584, %r528, %r1;
	mul.wide.u32 	%rd128, %r584, 4;
	add.s64 	%rd22, %rd99, %rd128;
	add.s32 	%r585, %r530, %r1;
	mul.wide.u32 	%rd129, %r585, 4;
	add.s64 	%rd23, %rd99, %rd129;
	add.s32 	%r586, %r532, %r1;
	mul.wide.u32 	%rd130, %r586, 4;
	add.s64 	%rd24, %rd99, %rd130;
	add.s32 	%r587, %r534, %r1;
	mul.wide.u32 	%rd131, %r587, 4;
	add.s64 	%rd25, %rd99, %rd131;
	add.s32 	%r588, %r536, %r1;
	mul.wide.u32 	%rd132, %r588, 4;
	add.s64 	%rd26, %rd99, %rd132;
	add.s32 	%r589, %r538, %r1;
	mul.wide.u32 	%rd133, %r589, 4;
	add.s64 	%rd27, %rd99, %rd133;
	add.s32 	%r590, %r541, %r180;
	mul.wide.u32 	%rd134, %r590, 4;
	add.s64 	%rd28, %rd99, %rd134;
	add.s32 	%r591, %r541, %r509;
	mul.wide.u32 	%rd135, %r591, 4;
	add.s64 	%rd29, %rd99, %rd135;
	add.s32 	%r592, %r541, %r511;
	mul.wide.u32 	%rd136, %r592, 4;
	add.s64 	%rd30, %rd99, %rd136;
	add.s32 	%r593, %r541, %r513;
	mul.wide.u32 	%rd137, %r593, 4;
	add.s64 	%rd31, %rd99, %rd137;
	add.s32 	%r594, %r541, %r515;
	mul.wide.u32 	%rd138, %r594, 4;
	add.s64 	%rd32, %rd99, %rd138;
	add.s32 	%r595, %r541, %r517;
	mul.wide.u32 	%rd139, %r595, 4;
	add.s64 	%rd33, %rd99, %rd139;
	add.s32 	%r596, %r541, %r519;
	mul.wide.u32 	%rd140, %r596, 4;
	add.s64 	%rd34, %rd99, %rd140;
	add.s32 	%r597, %r541, %r521;
	mul.wide.u32 	%rd141, %r597, 4;
	add.s64 	%rd35, %rd99, %rd141;
	add.s32 	%r598, %r541, %r523;
	mul.wide.u32 	%rd142, %r598, 4;
	add.s64 	%rd36, %rd99, %rd142;
	add.s32 	%r599, %r541, %r525;
	mul.wide.u32 	%rd143, %r599, 4;
	add.s64 	%rd37, %rd99, %rd143;
	add.s32 	%r600, %r541, %r527;
	mul.wide.u32 	%rd144, %r600, 4;
	add.s64 	%rd38, %rd99, %rd144;
	add.s32 	%r601, %r541, %r529;
	mul.wide.u32 	%rd145, %r601, 4;
	add.s64 	%rd39, %rd99, %rd145;
	add.s32 	%r602, %r541, %r531;
	mul.wide.u32 	%rd146, %r602, 4;
	add.s64 	%rd40, %rd99, %rd146;
	add.s32 	%r603, %r541, %r533;
	mul.wide.u32 	%rd147, %r603, 4;
	add.s64 	%rd41, %rd99, %rd147;
	add.s32 	%r604, %r541, %r535;
	mul.wide.u32 	%rd148, %r604, 4;
	add.s64 	%rd42, %rd99, %rd148;
	add.s32 	%r605, %r541, %r537;
	mul.wide.u32 	%rd149, %r605, 4;
	add.s64 	%rd43, %rd99, %rd149;
	add.s32 	%r606, %r150, -1;
	setp.lt.u32 	%p226, %r606, 3;
	or.pred  	%p227, %p218, %p226;
	or.pred  	%p228, %p227, %p219;
	and.b32  	%r607, %r1, 24;
	setp.eq.s32 	%p229, %r607, 24;
	or.pred  	%p230, %p220, %p229;
	selp.b32 	%r190, 1145324612, -286331154, %p227;
	or.pred  	%p1, %p228, %p230;
	shl.b32 	%r608, %r180, 5;
	add.s32 	%r609, %r186, %r608;
	mul.wide.u32 	%rd150, %r609, 4;
	add.s64 	%rd44, %rd99, %rd150;
	cvt.u64.u32 	%rd151, %r608;
	selp.b64 	%rd152, 0, 516, %p222;
	selp.b64 	%rd153, 0, 258, %p221;
	cvt.u64.u32 	%rd154, %r183;
	cvt.u64.u32 	%rd155, %r548;
	add.s64 	%rd156, %rd155, %rd154;
	add.s64 	%rd157, %rd156, %rd153;
	add.s64 	%rd158, %rd157, %rd152;
	add.s64 	%rd159, %rd158, %rd151;
	shl.b64 	%rd160, %rd159, 2;
	add.s64 	%rd46, %rd99, %rd160;
	or.b32  	%r610, %r608, 64;
	add.s32 	%r611, %r186, %r610;
	mul.wide.u32 	%rd161, %r611, 4;
	add.s64 	%rd47, %rd99, %rd161;
	cvt.u64.u32 	%rd162, %r610;
	add.s64 	%rd163, %rd158, %rd162;
	shl.b64 	%rd164, %rd163, 2;
	add.s64 	%rd49, %rd99, %rd164;
	or.b32  	%r612, %r608, 128;
	add.s32 	%r613, %r186, %r612;
	mul.wide.u32 	%rd165, %r613, 4;
	add.s64 	%rd50, %rd99, %rd165;
	cvt.u64.u32 	%rd166, %r612;
	add.s64 	%rd167, %rd158, %rd166;
	shl.b64 	%rd168, %rd167, 2;
	add.s64 	%rd52, %rd99, %rd168;
	or.b32  	%r614, %r608, 192;
	add.s32 	%r615, %r186, %r614;
	mul.wide.u32 	%rd169, %r615, 4;
	add.s64 	%rd53, %rd99, %rd169;
	cvt.u64.u32 	%rd170, %r614;
	add.s64 	%rd171, %rd158, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd55, %rd99, %rd172;
	add.s32 	%r616, %r568, 32;
	mul.wide.u32 	%rd173, %r616, 4;
	add.s64 	%rd56, %rd99, %rd173;
	add.s32 	%r617, %r568, 48;
	mul.wide.u32 	%rd174, %r617, 4;
	add.s64 	%rd57, %rd99, %rd174;
	add.s32 	%r618, %r568, 64;
	mul.wide.u32 	%rd175, %r618, 4;
	add.s64 	%rd58, %rd99, %rd175;
	add.s32 	%r619, %r568, 80;
	mul.wide.u32 	%rd176, %r619, 4;
	add.s64 	%rd59, %rd99, %rd176;
	add.s32 	%r620, %r568, 96;
	mul.wide.u32 	%rd177, %r620, 4;
	add.s64 	%rd60, %rd99, %rd177;
	add.s32 	%r621, %r568, 112;
	mul.wide.u32 	%rd178, %r621, 4;
	add.s64 	%rd61, %rd99, %rd178;
	add.s32 	%r622, %r568, 128;
	mul.wide.u32 	%rd179, %r622, 4;
	add.s64 	%rd62, %rd99, %rd179;
	add.s32 	%r623, %r568, 144;
	mul.wide.u32 	%rd180, %r623, 4;
	add.s64 	%rd63, %rd99, %rd180;
	add.s32 	%r624, %r568, 160;
	mul.wide.u32 	%rd181, %r624, 4;
	add.s64 	%rd64, %rd99, %rd181;
	add.s32 	%r625, %r568, 176;
	mul.wide.u32 	%rd182, %r625, 4;
	add.s64 	%rd65, %rd99, %rd182;
	add.s32 	%r626, %r568, 192;
	mul.wide.u32 	%rd183, %r626, 4;
	add.s64 	%rd66, %rd99, %rd183;
	add.s32 	%r627, %r568, 208;
	mul.wide.u32 	%rd184, %r627, 4;
	add.s64 	%rd67, %rd99, %rd184;
	add.s32 	%r628, %r568, 224;
	mul.wide.u32 	%rd185, %r628, 4;
	add.s64 	%rd68, %rd99, %rd185;
	add.s32 	%r629, %r568, 240;
	mul.wide.u32 	%rd186, %r629, 4;
	add.s64 	%rd69, %rd99, %rd186;
	mov.u32 	%r90, 0;
	setp.eq.s32 	%p232, %r179, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3500, %r90;
	mov.u32 	%r3501, %r90;
	mov.u32 	%r3502, %r90;
	bra.uni 	$L__BB0_200;
$L__BB0_172:                            // %L39008
                                        //   in Loop: Header=BB0_200 Depth=1
	add.s32 	%r148, %r90, 64;
	setp.ne.s32 	%p335, %r90, 448;
	mov.u32 	%r90, %r148;
	@%p335 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_173;
$L__BB0_200:                            // %L1377
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_202 Depth 2
                                        //     Child Loop BB0_147 Depth 2
	add.s32 	%r630, %r90, %r6;
	setp.gt.s32 	%p231, %r7, %r630;
	@%p231 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_173;
$L__BB0_201:                            // %pass701
                                        //   in Loop: Header=BB0_200 Depth=1
	cvt.u32.u64 	%r824, %rd10;
	or.b32  	%r825, %r90, %r2;
	shl.b32 	%r826, %r825, 17;
	and.b32  	%r827, %r826, 60686336;
	or.b32  	%r828, %r827, %r178;
	add.s32 	%r829, %r828, %r177;
	shr.s32 	%r830, %r829, 31;
	shr.u32 	%r831, %r830, 6;
	add.s32 	%r832, %r829, %r831;
	shr.s32 	%r833, %r832, 26;
	setp.lt.s32 	%p233, %r829, 0;
	and.b32  	%r834, %r832, -67108864;
	setp.ne.s32 	%p234, %r834, %r829;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r835, 1, 0, %p235;
	sub.s32 	%r836, %r835, %r833;
	shl.b32 	%r837, %r836, 26;
	add.s32 	%r838, %r837, %r829;
	mul.wide.s32 	%rd187, %r838, 4;
	add.s64 	%rd188, %rd3, %rd187;
	ld.global.v4.u32 	{%r839, %r840, %r841, %r842}, [%rd188];
	or.b32  	%r843, %r825, 16;
	shl.b32 	%r844, %r843, 17;
	and.b32  	%r845, %r844, 62783488;
	or.b32  	%r846, %r845, %r178;
	add.s32 	%r847, %r846, %r177;
	shr.s32 	%r848, %r847, 31;
	shr.u32 	%r849, %r848, 6;
	add.s32 	%r850, %r847, %r849;
	shr.s32 	%r851, %r850, 26;
	setp.lt.s32 	%p236, %r847, 0;
	and.b32  	%r852, %r850, -67108864;
	setp.ne.s32 	%p237, %r852, %r847;
	and.pred  	%p238, %p236, %p237;
	selp.u32 	%r853, 1, 0, %p238;
	sub.s32 	%r854, %r853, %r851;
	shl.b32 	%r855, %r854, 26;
	add.s32 	%r856, %r855, %r847;
	mul.wide.s32 	%rd189, %r856, 4;
	add.s64 	%rd190, %rd3, %rd189;
	ld.global.v4.u32 	{%r857, %r858, %r859, %r860}, [%rd190];
	and.b32  	%r861, %r90, 448;
	or.b32  	%r862, %r2, %r861;
	shl.b32 	%r863, %r862, 17;
	or.b32  	%r864, %r863, %r178;
	or.b32  	%r865, %r864, 4194304;
	add.s32 	%r866, %r865, %r177;
	shr.s32 	%r867, %r866, 31;
	shr.u32 	%r868, %r867, 6;
	add.s32 	%r869, %r866, %r868;
	shr.s32 	%r870, %r869, 26;
	setp.lt.s32 	%p239, %r866, 0;
	and.b32  	%r871, %r869, -67108864;
	setp.ne.s32 	%p240, %r871, %r866;
	and.pred  	%p241, %p239, %p240;
	selp.u32 	%r872, 1, 0, %p241;
	sub.s32 	%r873, %r872, %r870;
	shl.b32 	%r874, %r873, 26;
	add.s32 	%r875, %r874, %r866;
	mul.wide.s32 	%rd191, %r875, 4;
	add.s64 	%rd192, %rd3, %rd191;
	ld.global.v4.u32 	{%r876, %r877, %r878, %r879}, [%rd192];
	or.b32  	%r880, %r864, 6291456;
	add.s32 	%r881, %r880, %r177;
	shr.s32 	%r882, %r881, 31;
	shr.u32 	%r883, %r882, 6;
	add.s32 	%r884, %r881, %r883;
	shr.s32 	%r885, %r884, 26;
	setp.lt.s32 	%p242, %r881, 0;
	and.b32  	%r886, %r884, -67108864;
	setp.ne.s32 	%p243, %r886, %r881;
	and.pred  	%p244, %p242, %p243;
	selp.u32 	%r887, 1, 0, %p244;
	sub.s32 	%r888, %r887, %r885;
	shl.b32 	%r889, %r888, 26;
	add.s32 	%r890, %r889, %r881;
	mul.wide.s32 	%rd193, %r890, 4;
	add.s64 	%rd194, %rd3, %rd193;
	ld.global.v4.u32 	{%r891, %r892, %r893, %r894}, [%rd194];
	selp.b32 	%r895, %r841, %r839, %p232;
	shfl.sync.bfly.b32	%r896, %r895, 16, 31, -1;
	selp.b32 	%r633, %r839, %r896, %p232;
	selp.b32 	%r638, %r896, %r841, %p232;
	selp.b32 	%r897, %r842, %r840, %p232;
	shfl.sync.bfly.b32	%r898, %r897, 16, 31, -1;
	selp.b32 	%r641, %r840, %r898, %p232;
	selp.b32 	%r646, %r898, %r842, %p232;
	selp.b32 	%r899, %r859, %r857, %p232;
	shfl.sync.bfly.b32	%r900, %r899, 16, 31, -1;
	selp.b32 	%r649, %r857, %r900, %p232;
	selp.b32 	%r654, %r900, %r859, %p232;
	selp.b32 	%r901, %r860, %r858, %p232;
	shfl.sync.bfly.b32	%r902, %r901, 16, 31, -1;
	selp.b32 	%r657, %r858, %r902, %p232;
	selp.b32 	%r662, %r902, %r860, %p232;
	selp.b32 	%r903, %r878, %r876, %p232;
	shfl.sync.bfly.b32	%r904, %r903, 16, 31, -1;
	selp.b32 	%r665, %r876, %r904, %p232;
	selp.b32 	%r670, %r904, %r878, %p232;
	selp.b32 	%r905, %r879, %r877, %p232;
	shfl.sync.bfly.b32	%r906, %r905, 16, 31, -1;
	selp.b32 	%r673, %r877, %r906, %p232;
	selp.b32 	%r678, %r906, %r879, %p232;
	selp.b32 	%r907, %r893, %r891, %p232;
	shfl.sync.bfly.b32	%r908, %r907, 16, 31, -1;
	selp.b32 	%r681, %r891, %r908, %p232;
	selp.b32 	%r686, %r908, %r893, %p232;
	selp.b32 	%r909, %r894, %r892, %p232;
	shfl.sync.bfly.b32	%r910, %r909, 16, 31, -1;
	selp.b32 	%r689, %r892, %r910, %p232;
	selp.b32 	%r694, %r910, %r894, %p232;
	shl.b32 	%r634, %r638, 4;
	mov.u32 	%r632, 252645135;
	// begin inline asm
	lop3.b32 %r696, %r632, %r633, %r634, 202;
	// end inline asm
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r712, %r632, %r637, %r638, 202;
	// end inline asm
	shl.b32 	%r642, %r646, 4;
	// begin inline asm
	lop3.b32 %r704, %r632, %r641, %r642, 202;
	// end inline asm
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r720, %r632, %r645, %r646, 202;
	// end inline asm
	shl.b32 	%r650, %r654, 4;
	// begin inline asm
	lop3.b32 %r728, %r632, %r649, %r650, 202;
	// end inline asm
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r744, %r632, %r653, %r654, 202;
	// end inline asm
	shl.b32 	%r658, %r662, 4;
	// begin inline asm
	lop3.b32 %r736, %r632, %r657, %r658, 202;
	// end inline asm
	shr.u32 	%r661, %r657, 4;
	// begin inline asm
	lop3.b32 %r752, %r632, %r661, %r662, 202;
	// end inline asm
	shl.b32 	%r666, %r670, 4;
	// begin inline asm
	lop3.b32 %r697, %r632, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r713, %r632, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r705, %r632, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r721, %r632, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r729, %r632, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r745, %r632, %r685, %r686, 202;
	// end inline asm
	shl.b32 	%r690, %r694, 4;
	// begin inline asm
	lop3.b32 %r737, %r632, %r689, %r690, 202;
	// end inline asm
	shr.u32 	%r693, %r689, 4;
	// begin inline asm
	lop3.b32 %r753, %r632, %r693, %r694, 202;
	// end inline asm
	mov.u32 	%r698, 25152;
	// begin inline asm
	prmt.b32 %r760, %r696, %r697, %r698;
	// end inline asm
	mov.u32 	%r702, 29521;
	// begin inline asm
	prmt.b32 %r792, %r696, %r697, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r704, %r705, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r704, %r705, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r712, %r713, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r712, %r713, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r720, %r721, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r720, %r721, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r728, %r729, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r728, %r729, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r736, %r737, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r736, %r737, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r744, %r745, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r744, %r745, %r702;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r752, %r753, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r752, %r753, %r702;
	// end inline asm
	mov.u32 	%r818, 21520;
	// begin inline asm
	prmt.b32 %r759, %r760, %r761, %r818;
	// end inline asm
	mov.u32 	%r822, 30258;
	// begin inline asm
	prmt.b32 %r763, %r760, %r761, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r768, %r769, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r768, %r769, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r776, %r777, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r776, %r777, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r784, %r785, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r784, %r785, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r816, %r817, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r816, %r817, %r822;
	// end inline asm
	st.shared.u32 	[%rd9], %r759;
	st.shared.u32 	[%rd11+512], %r767;
	st.shared.u32 	[%rd11+256], %r763;
	st.shared.u32 	[%rd11+768], %r771;
	and.b32  	%r911, %r843, 31;
	add.s32 	%r912, %r911, %r824;
	mul.wide.u32 	%rd195, %r912, 4;
	add.s64 	%rd197, %rd99, %rd195;
	st.shared.u32 	[%rd197], %r775;
	cvt.u64.u32 	%rd198, %r911;
	add.s64 	%rd199, %rd10, %rd198;
	shl.b64 	%rd200, %rd199, 2;
	add.s64 	%rd201, %rd99, %rd200;
	st.shared.u32 	[%rd201+512], %r783;
	st.shared.u32 	[%rd201+256], %r779;
	st.shared.u32 	[%rd201+768], %r787;
	st.shared.u32 	[%rd11+128], %r791;
	st.shared.u32 	[%rd11+640], %r799;
	st.shared.u32 	[%rd11+384], %r795;
	st.shared.u32 	[%rd11+896], %r803;
	st.shared.u32 	[%rd201+128], %r807;
	st.shared.u32 	[%rd201+640], %r815;
	st.shared.u32 	[%rd201+384], %r811;
	st.shared.u32 	[%rd201+896], %r819;
	bar.sync 	0;
	ld.shared.u32 	%r913, [%rd12];
	ld.shared.u32 	%r914, [%rd13];
	ld.shared.u32 	%r915, [%rd14];
	ld.shared.u32 	%r916, [%rd15];
	ld.shared.u32 	%r917, [%rd16];
	ld.shared.u32 	%r918, [%rd17];
	ld.shared.u32 	%r919, [%rd18];
	ld.shared.u32 	%r920, [%rd19];
	ld.shared.u32 	%r921, [%rd20];
	ld.shared.u32 	%r922, [%rd21];
	ld.shared.u32 	%r923, [%rd22];
	ld.shared.u32 	%r924, [%rd23];
	ld.shared.u32 	%r925, [%rd24];
	ld.shared.u32 	%r926, [%rd25];
	ld.shared.u32 	%r927, [%rd26];
	ld.shared.u32 	%r928, [%rd27];
	bar.sync 	0;
	shfl.sync.idx.b32	%r929, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r930, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r931, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r932, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r933, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r934, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r935, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r936, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r937, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r938, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r939, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r940, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r941, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r942, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r943, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r944, %r174, 15, 31, -1;
	add.s32 	%r945, %r929, %r1;
	mul.wide.s32 	%rd202, %r945, 4;
	add.s64 	%rd203, %rd99, %rd202;
	st.shared.u32 	[%rd203], %r913;
	add.s32 	%r946, %r930, %r1;
	mul.wide.s32 	%rd204, %r946, 4;
	add.s64 	%rd205, %rd99, %rd204;
	st.shared.u32 	[%rd205], %r914;
	add.s32 	%r947, %r931, %r1;
	mul.wide.s32 	%rd206, %r947, 4;
	add.s64 	%rd207, %rd99, %rd206;
	st.shared.u32 	[%rd207], %r915;
	add.s32 	%r948, %r932, %r1;
	mul.wide.s32 	%rd208, %r948, 4;
	add.s64 	%rd209, %rd99, %rd208;
	st.shared.u32 	[%rd209], %r916;
	add.s32 	%r949, %r933, %r1;
	mul.wide.s32 	%rd210, %r949, 4;
	add.s64 	%rd211, %rd99, %rd210;
	st.shared.u32 	[%rd211], %r917;
	add.s32 	%r950, %r934, %r1;
	mul.wide.s32 	%rd212, %r950, 4;
	add.s64 	%rd213, %rd99, %rd212;
	st.shared.u32 	[%rd213], %r918;
	add.s32 	%r951, %r935, %r1;
	mul.wide.s32 	%rd214, %r951, 4;
	add.s64 	%rd215, %rd99, %rd214;
	st.shared.u32 	[%rd215], %r919;
	add.s32 	%r952, %r936, %r1;
	mul.wide.s32 	%rd216, %r952, 4;
	add.s64 	%rd217, %rd99, %rd216;
	st.shared.u32 	[%rd217], %r920;
	add.s32 	%r953, %r937, %r1;
	mul.wide.s32 	%rd218, %r953, 4;
	add.s64 	%rd219, %rd99, %rd218;
	st.shared.u32 	[%rd219], %r921;
	add.s32 	%r954, %r938, %r1;
	mul.wide.s32 	%rd220, %r954, 4;
	add.s64 	%rd221, %rd99, %rd220;
	st.shared.u32 	[%rd221], %r922;
	add.s32 	%r955, %r939, %r1;
	mul.wide.s32 	%rd222, %r955, 4;
	add.s64 	%rd223, %rd99, %rd222;
	st.shared.u32 	[%rd223], %r923;
	add.s32 	%r956, %r940, %r1;
	mul.wide.s32 	%rd224, %r956, 4;
	add.s64 	%rd225, %rd99, %rd224;
	st.shared.u32 	[%rd225], %r924;
	add.s32 	%r957, %r941, %r1;
	mul.wide.s32 	%rd226, %r957, 4;
	add.s64 	%rd227, %rd99, %rd226;
	st.shared.u32 	[%rd227], %r925;
	add.s32 	%r958, %r942, %r1;
	mul.wide.s32 	%rd228, %r958, 4;
	add.s64 	%rd229, %rd99, %rd228;
	st.shared.u32 	[%rd229], %r926;
	add.s32 	%r959, %r943, %r1;
	mul.wide.s32 	%rd230, %r959, 4;
	add.s64 	%rd231, %rd99, %rd230;
	st.shared.u32 	[%rd231], %r927;
	add.s32 	%r960, %r944, %r1;
	mul.wide.s32 	%rd232, %r960, 4;
	add.s64 	%rd233, %rd99, %rd232;
	st.shared.u32 	[%rd233], %r928;
	bar.sync 	0;
	ld.shared.u32 	%r191, [%rd28];
	ld.shared.u32 	%r192, [%rd29];
	ld.shared.u32 	%r193, [%rd30];
	ld.shared.u32 	%r194, [%rd31];
	ld.shared.u32 	%r195, [%rd32];
	ld.shared.u32 	%r196, [%rd33];
	ld.shared.u32 	%r197, [%rd34];
	ld.shared.u32 	%r198, [%rd35];
	ld.shared.u32 	%r199, [%rd36];
	ld.shared.u32 	%r200, [%rd37];
	ld.shared.u32 	%r201, [%rd38];
	ld.shared.u32 	%r202, [%rd39];
	ld.shared.u32 	%r203, [%rd40];
	ld.shared.u32 	%r204, [%rd41];
	ld.shared.u32 	%r205, [%rd42];
	ld.shared.u32 	%r206, [%rd43];
	bar.sync 	0;
	mov.u32 	%r3493, 16;
	bra.uni 	$L__BB0_202;
$L__BB0_144:                            // %L24747
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3500, 0;
	mov.u32 	%r3502, %r3500;
$L__BB0_145:                            // %L24748
                                        //   in Loop: Header=BB0_202 Depth=2
	bar.sync 	0;
	add.s32 	%r3493, %r3493, -8;
	setp.ne.s32 	%p289, %r3493, -16;
	@%p289 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_146;
$L__BB0_202:                            // %L10525
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p245, %r3493, 16;
	selp.b32 	%r1353, %r191, 0, %p245;
	setp.eq.s32 	%p246, %r3493, 8;
	selp.b32 	%r1354, %r195, %r1353, %p246;
	setp.eq.s32 	%p247, %r3493, 0;
	selp.b32 	%r1355, %r199, %r1354, %p247;
	setp.eq.s32 	%p248, %r3493, -8;
	selp.b32 	%r1356, %r203, %r1355, %p248;
	selp.b32 	%r1357, %r192, 0, %p245;
	selp.b32 	%r1358, %r196, %r1357, %p246;
	selp.b32 	%r1359, %r200, %r1358, %p247;
	selp.b32 	%r1360, %r204, %r1359, %p248;
	selp.b32 	%r1361, %r193, 0, %p245;
	selp.b32 	%r1362, %r197, %r1361, %p246;
	selp.b32 	%r1363, %r201, %r1362, %p247;
	selp.b32 	%r1364, %r205, %r1363, %p248;
	selp.b32 	%r1365, %r194, 0, %p245;
	selp.b32 	%r1366, %r198, %r1365, %p246;
	selp.b32 	%r1367, %r202, %r1366, %p247;
	selp.b32 	%r1368, %r206, %r1367, %p248;
	// begin inline asm
	mov.b32 %r966, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r965, %r1356, -2004318072;
	mov.u32 	%r1102, 983055;
	// begin inline asm
	lop3.b32 %r963, %r1102, %r965, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	mov.u32 	%r1113, 15728880;
	// begin inline asm
	lop3.b32 %r974, %r1113, %r965, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1011, %r1360, -2004318072;
	// begin inline asm
	lop3.b32 %r1009, %r1102, %r1011, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r1012, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1020, %r1113, %r1011, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1057, %r1364, -2004318072;
	// begin inline asm
	lop3.b32 %r1055, %r1102, %r1057, %r1058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1058, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r1113, %r1057, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1115, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1103, %r1368, -2004318072;
	// begin inline asm
	lop3.b32 %r1101, %r1102, %r1103, %r1104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1104, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r1113, %r1103, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r971;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1017;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1028;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1154, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1063;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1157, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1074;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1160, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1109;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1163, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r1120;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1166, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1224, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1170}, {%r299, %r302}, {%r1145}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r299, %r302}, {%r1148}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r299, %r302}, {%r1151}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1191}, {%r299, %r302}, {%r1154}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1197, %r1198}, {%r299, %r302}, {%r1157}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1204, %r1205}, {%r299, %r302}, {%r1160}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1211, %r1212}, {%r299, %r302}, {%r1163}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1218, %r1219}, {%r299, %r302}, {%r1166}, {%r1224, %r1224};
	// end inline asm
	@%p1 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_203;
$L__BB0_205:                            // %pass4798
                                        //   in Loop: Header=BB0_202 Depth=2
	// begin inline asm
	neg.f16x2 %r1225, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r337, %r1169, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r337, %r1176, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r337, %r1183, %r1245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1252, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r1252, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r337, %r1190, %r1254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1261, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1263, %r1261, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r337, %r1197, %r1263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1270, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1272, %r1270, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r337, %r1204, %r1272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1279, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r1279, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r337, %r1211, %r1281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1288, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r1288, %r1219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r337, %r1218, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r340, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r337, %r1170, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r340, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r337, %r1177, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r340, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r337, %r1184, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r340, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r337, %r1191, %r1318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1325, %r340, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r337, %r1198, %r1325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r340, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r337, %r1205, %r1332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1339, %r340, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1342, %r337, %r1212, %r1339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1346, %r340, %r1218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r337, %r1219, %r1346;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1442, %r1443}, {%r384, %r387}, {%r1230, %r1300}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1451}, {%r384, %r387}, {%r1239, %r1307}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1458, %r1459}, {%r384, %r387}, {%r1248, %r1314}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1466, %r1467}, {%r384, %r387}, {%r1257, %r1321}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1474, %r1475}, {%r384, %r387}, {%r1266, %r1328}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1482, %r1483}, {%r384, %r387}, {%r1275, %r1335}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1490, %r1491}, {%r384, %r387}, {%r1284, %r1342}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1499}, {%r384, %r387}, {%r1293, %r1349}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1441, %r1442, %r1443, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1445, %r1442, %r1443, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1449, %r1450, %r1451, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1453, %r1450, %r1451, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1457, %r1458, %r1459, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1461, %r1458, %r1459, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1465, %r1466, %r1467, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1469, %r1466, %r1467, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1473, %r1474, %r1475, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1477, %r1474, %r1475, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1481, %r1482, %r1483, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1485, %r1482, %r1483, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1489, %r1490, %r1491, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1493, %r1490, %r1491, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1497, %r1498, %r1499, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1501, %r1498, %r1499, %r822;
	// end inline asm
	st.shared.u32 	[%rd44], %r1441;
	st.shared.u32 	[%rd46+16576], %r1445;
	st.shared.u32 	[%rd46+64], %r1449;
	st.shared.u32 	[%rd46+16640], %r1453;
	st.shared.u32 	[%rd47], %r1457;
	st.shared.u32 	[%rd49+16576], %r1461;
	st.shared.u32 	[%rd49+64], %r1465;
	st.shared.u32 	[%rd49+16640], %r1469;
	st.shared.u32 	[%rd50], %r1473;
	st.shared.u32 	[%rd52+16576], %r1477;
	st.shared.u32 	[%rd52+64], %r1481;
	st.shared.u32 	[%rd52+16640], %r1485;
	st.shared.u32 	[%rd53], %r1489;
	st.shared.u32 	[%rd55+16576], %r1493;
	st.shared.u32 	[%rd55+64], %r1497;
	st.shared.u32 	[%rd55+16640], %r1501;
	bar.sync 	0;
	ld.shared.u32 	%r1509, [%rd6];
	ld.shared.u32 	%r1516, [%rd7+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1526, %r1523}, {%r396, %r399}, {%r1509}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1535, %r1532}, {%r396, %r399}, {%r1516}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1519, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r1519, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r430, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1528, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r1528, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r430, %r1535, %r1530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1537, %r433, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r430, %r1523, %r1537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1544, %r433, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r430, %r1532, %r1544;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1570, %r1573}, {%r472, %r475}, {%r1524, %r1540}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1577, %r1581}, {%r472, %r475}, {%r1533, %r1547}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r1570, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r1573, %r1573, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r1577, %r1577, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r1581, %r1581, %r1576;
	// end inline asm
	mov.u32 	%r1585, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3514, %r1585, %r1580, %r3502;
	// end inline asm
	add.s32 	%r3512, %r3500, 1;
	setp.eq.s32 	%p249, %r3512, 25;
	setp.lt.u32 	%p355, %r1, 16;
	@%p249 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_206;
$L__BB0_129:                            // %L16574
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_130;
$L__BB0_204:                            // %pass7522
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r1588, %r3501, 19;
	or.b32  	%r1589, %r189, %r1588;
	cvt.u64.u32 	%rd236, %r1589;
	add.s64 	%rd237, %rd236, %rd8;
	shr.u64 	%rd238, %rd237, 40;
	add.s64 	%rd239, %rd237, %rd238;
	shr.s64 	%rd240, %rd239, 24;
	setp.lt.s64 	%p251, %rd237, 0;
	and.b64  	%rd241, %rd239, -16777216;
	setp.ne.s64 	%p252, %rd241, %rd237;
	and.pred  	%p253, %p251, %p252;
	selp.u64 	%rd242, 1, 0, %p253;
	sub.s64 	%rd243, %rd242, %rd240;
	shl.b64 	%rd244, %rd243, 24;
	add.s64 	%rd245, %rd244, %rd237;
	shl.b64 	%rd246, %rd245, 2;
	add.s64 	%rd247, %rd4, %rd246;
	st.global.u32 	[%rd247], %r3514;
$L__BB0_130:                            // %L16788
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3512, 0;
	mov.u32 	%r3514, %r3512;
$L__BB0_206:                            // %pass7727
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r1595, [%rd56];
	ld.shared.u32 	%r1602, [%rd57];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1612, %r1609}, {%r396, %r399}, {%r1595}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1621, %r1618}, {%r396, %r399}, {%r1602}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1605, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r1605, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r430, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1614, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1614, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r430, %r1621, %r1616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1623, %r433, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r430, %r1609, %r1623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1630, %r433, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1633, %r430, %r1618, %r1630;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1656, %r1659}, {%r472, %r475}, {%r1610, %r1626}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1663, %r1667}, {%r472, %r475}, {%r1619, %r1633}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r1656, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1663, %r1663, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r1667, %r1667, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r1585, %r1666, %r3514;
	// end inline asm
	add.s32 	%r3515, %r3512, 1;
	setp.eq.s32 	%p254, %r3515, 25;
	@%p254 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_207;
$L__BB0_131:                            // %L17711
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_132;
$L__BB0_222:                            // %pass8008
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r1674, %r3501, 19;
	or.b32  	%r1675, %r189, %r1674;
	cvt.u64.u32 	%rd248, %r1675;
	add.s64 	%rd249, %rd248, %rd8;
	shr.u64 	%rd250, %rd249, 40;
	add.s64 	%rd251, %rd249, %rd250;
	shr.s64 	%rd252, %rd251, 24;
	setp.lt.s64 	%p256, %rd249, 0;
	and.b64  	%rd253, %rd251, -16777216;
	setp.ne.s64 	%p257, %rd253, %rd249;
	and.pred  	%p258, %p256, %p257;
	selp.u64 	%rd254, 1, 0, %p258;
	sub.s64 	%rd255, %rd254, %rd252;
	shl.b64 	%rd256, %rd255, 24;
	add.s64 	%rd257, %rd256, %rd249;
	shl.b64 	%rd258, %rd257, 2;
	add.s64 	%rd259, %rd4, %rd258;
	st.global.u32 	[%rd259], %r3517;
$L__BB0_132:                            // %L17925
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3515, 0;
	mov.u32 	%r3517, %r3515;
$L__BB0_207:                            // %pass8213
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r1681, [%rd58];
	ld.shared.u32 	%r1688, [%rd59];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1698, %r1695}, {%r396, %r399}, {%r1681}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1707, %r1704}, {%r396, %r399}, {%r1688}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1691, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r1691, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r430, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1702, %r1700, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r430, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r433, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r430, %r1695, %r1709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1716, %r433, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r430, %r1704, %r1716;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1742, %r1745}, {%r472, %r475}, {%r1696, %r1712}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1749, %r1753}, {%r472, %r475}, {%r1705, %r1719}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1742, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r1745, %r1745, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r1749, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r1753, %r1753, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r1585, %r1752, %r3517;
	// end inline asm
	add.s32 	%r3518, %r3515, 1;
	setp.eq.s32 	%p259, %r3518, 25;
	@%p259 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_208;
$L__BB0_133:                            // %L18848
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_134;
$L__BB0_223:                            // %pass8494
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r1760, %r3501, 19;
	or.b32  	%r1761, %r189, %r1760;
	cvt.u64.u32 	%rd260, %r1761;
	add.s64 	%rd261, %rd260, %rd8;
	shr.u64 	%rd262, %rd261, 40;
	add.s64 	%rd263, %rd261, %rd262;
	shr.s64 	%rd264, %rd263, 24;
	setp.lt.s64 	%p261, %rd261, 0;
	and.b64  	%rd265, %rd263, -16777216;
	setp.ne.s64 	%p262, %rd265, %rd261;
	and.pred  	%p263, %p261, %p262;
	selp.u64 	%rd266, 1, 0, %p263;
	sub.s64 	%rd267, %rd266, %rd264;
	shl.b64 	%rd268, %rd267, 24;
	add.s64 	%rd269, %rd268, %rd261;
	shl.b64 	%rd270, %rd269, 2;
	add.s64 	%rd271, %rd4, %rd270;
	st.global.u32 	[%rd271], %r3520;
$L__BB0_134:                            // %L19062
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3518, 0;
	mov.u32 	%r3520, %r3518;
$L__BB0_208:                            // %pass8699
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r1767, [%rd60];
	ld.shared.u32 	%r1774, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1784, %r1781}, {%r396, %r399}, {%r1767}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1793, %r1790}, {%r396, %r399}, {%r1774}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1777, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1777, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r430, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1786, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r1786, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r430, %r1793, %r1788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r433, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r430, %r1781, %r1795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r433, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r430, %r1790, %r1802;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1828, %r1831}, {%r472, %r475}, {%r1782, %r1798}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1835, %r1839}, {%r472, %r475}, {%r1791, %r1805}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1828, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1831, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r1835, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r1839, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r1585, %r1838, %r3520;
	// end inline asm
	add.s32 	%r3521, %r3518, 1;
	setp.eq.s32 	%p264, %r3521, 25;
	@%p264 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_209;
$L__BB0_135:                            // %L19985
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_136;
$L__BB0_224:                            // %pass8980
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r1846, %r3501, 19;
	or.b32  	%r1847, %r189, %r1846;
	cvt.u64.u32 	%rd272, %r1847;
	add.s64 	%rd273, %rd272, %rd8;
	shr.u64 	%rd274, %rd273, 40;
	add.s64 	%rd275, %rd273, %rd274;
	shr.s64 	%rd276, %rd275, 24;
	setp.lt.s64 	%p266, %rd273, 0;
	and.b64  	%rd277, %rd275, -16777216;
	setp.ne.s64 	%p267, %rd277, %rd273;
	and.pred  	%p268, %p266, %p267;
	selp.u64 	%rd278, 1, 0, %p268;
	sub.s64 	%rd279, %rd278, %rd276;
	shl.b64 	%rd280, %rd279, 24;
	add.s64 	%rd281, %rd280, %rd273;
	shl.b64 	%rd282, %rd281, 2;
	add.s64 	%rd283, %rd4, %rd282;
	st.global.u32 	[%rd283], %r3523;
$L__BB0_136:                            // %L20199
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3521, 0;
	mov.u32 	%r3523, %r3521;
$L__BB0_209:                            // %pass9185
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r1853, [%rd62];
	ld.shared.u32 	%r1860, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1870, %r1867}, {%r396, %r399}, {%r1853}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1879, %r1876}, {%r396, %r399}, {%r1860}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1863, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r1863, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r430, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1872, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1872, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r430, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r433, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r430, %r1867, %r1881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r433, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r430, %r1876, %r1888;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1914, %r1917}, {%r472, %r475}, {%r1868, %r1884}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1921, %r1925}, {%r472, %r475}, {%r1877, %r1891}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1914, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r1917, %r1917, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r1921, %r1921, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r1925, %r1925, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r1585, %r1924, %r3523;
	// end inline asm
	add.s32 	%r3524, %r3521, 1;
	setp.eq.s32 	%p269, %r3524, 25;
	@%p269 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_210;
$L__BB0_137:                            // %L21122
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_138;
$L__BB0_225:                            // %pass9466
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r1932, %r3501, 19;
	or.b32  	%r1933, %r189, %r1932;
	cvt.u64.u32 	%rd284, %r1933;
	add.s64 	%rd285, %rd284, %rd8;
	shr.u64 	%rd286, %rd285, 40;
	add.s64 	%rd287, %rd285, %rd286;
	shr.s64 	%rd288, %rd287, 24;
	setp.lt.s64 	%p271, %rd285, 0;
	and.b64  	%rd289, %rd287, -16777216;
	setp.ne.s64 	%p272, %rd289, %rd285;
	and.pred  	%p273, %p271, %p272;
	selp.u64 	%rd290, 1, 0, %p273;
	sub.s64 	%rd291, %rd290, %rd288;
	shl.b64 	%rd292, %rd291, 24;
	add.s64 	%rd293, %rd292, %rd285;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3526;
$L__BB0_138:                            // %L21336
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3524, 0;
	mov.u32 	%r3526, %r3524;
$L__BB0_210:                            // %pass9671
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r1939, [%rd64];
	ld.shared.u32 	%r1946, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1956, %r1953}, {%r396, %r399}, {%r1939}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1965, %r1962}, {%r396, %r399}, {%r1946}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1949, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r430, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1958, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r1958, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r430, %r1965, %r1960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r433, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r430, %r1953, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r433, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r430, %r1962, %r1974;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2000, %r2003}, {%r472, %r475}, {%r1954, %r1970}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2007, %r2011}, {%r472, %r475}, {%r1963, %r1977}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r2000, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r2003, %r2003, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2006, %r2007, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r2011, %r2011, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r1585, %r2010, %r3526;
	// end inline asm
	add.s32 	%r3527, %r3524, 1;
	setp.eq.s32 	%p274, %r3527, 25;
	@%p274 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_211;
$L__BB0_139:                            // %L22259
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_140;
$L__BB0_226:                            // %pass9952
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r2018, %r3501, 19;
	or.b32  	%r2019, %r189, %r2018;
	cvt.u64.u32 	%rd296, %r2019;
	add.s64 	%rd297, %rd296, %rd8;
	shr.u64 	%rd298, %rd297, 40;
	add.s64 	%rd299, %rd297, %rd298;
	shr.s64 	%rd300, %rd299, 24;
	setp.lt.s64 	%p276, %rd297, 0;
	and.b64  	%rd301, %rd299, -16777216;
	setp.ne.s64 	%p277, %rd301, %rd297;
	and.pred  	%p278, %p276, %p277;
	selp.u64 	%rd302, 1, 0, %p278;
	sub.s64 	%rd303, %rd302, %rd300;
	shl.b64 	%rd304, %rd303, 24;
	add.s64 	%rd305, %rd304, %rd297;
	shl.b64 	%rd306, %rd305, 2;
	add.s64 	%rd307, %rd4, %rd306;
	st.global.u32 	[%rd307], %r3529;
$L__BB0_140:                            // %L22473
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3527, 0;
	mov.u32 	%r3529, %r3527;
$L__BB0_211:                            // %pass10157
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r2025, [%rd66];
	ld.shared.u32 	%r2032, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2042, %r2039}, {%r396, %r399}, {%r2025}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2051, %r2048}, {%r396, %r399}, {%r2032}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2035, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2035, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r430, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2044, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r2044, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r430, %r2051, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r433, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r430, %r2039, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r433, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r430, %r2048, %r2060;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2086, %r2089}, {%r472, %r475}, {%r2040, %r2056}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2093, %r2097}, {%r472, %r475}, {%r2049, %r2063}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2085, %r2086, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r2089, %r2089, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r2093, %r2093, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2096, %r2097, %r2097, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r1585, %r2096, %r3529;
	// end inline asm
	add.s32 	%r3530, %r3527, 1;
	setp.eq.s32 	%p279, %r3530, 25;
	@%p279 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_212;
$L__BB0_141:                            // %L23396
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_142;
$L__BB0_227:                            // %pass10438
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r2104, %r3501, 19;
	or.b32  	%r2105, %r189, %r2104;
	cvt.u64.u32 	%rd308, %r2105;
	add.s64 	%rd309, %rd308, %rd8;
	shr.u64 	%rd310, %rd309, 40;
	add.s64 	%rd311, %rd309, %rd310;
	shr.s64 	%rd312, %rd311, 24;
	setp.lt.s64 	%p281, %rd309, 0;
	and.b64  	%rd313, %rd311, -16777216;
	setp.ne.s64 	%p282, %rd313, %rd309;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd314, 1, 0, %p283;
	sub.s64 	%rd315, %rd314, %rd312;
	shl.b64 	%rd316, %rd315, 24;
	add.s64 	%rd317, %rd316, %rd309;
	shl.b64 	%rd318, %rd317, 2;
	add.s64 	%rd319, %rd4, %rd318;
	st.global.u32 	[%rd319], %r3532;
$L__BB0_142:                            // %L23610
                                        //   in Loop: Header=BB0_202 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3530, 0;
	mov.u32 	%r3532, %r3530;
$L__BB0_212:                            // %pass10643
                                        //   in Loop: Header=BB0_202 Depth=2
	ld.shared.u32 	%r2111, [%rd68];
	ld.shared.u32 	%r2118, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2128, %r2125}, {%r396, %r399}, {%r2111}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2137, %r2134}, {%r396, %r399}, {%r2118}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2121, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r2121, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r430, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2130, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r2130, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r430, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r433, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r430, %r2125, %r2139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r433, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r430, %r2134, %r2146;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2175}, {%r472, %r475}, {%r2126, %r2142}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2179, %r2183}, {%r472, %r475}, {%r2135, %r2149}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r2172, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r2179, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r2183, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1585, %r2182, %r3532;
	// end inline asm
	add.s32 	%r3500, %r3530, 1;
	setp.eq.s32 	%p284, %r3500, 25;
	@%p284 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_145;
$L__BB0_143:                            // %L24533
                                        //   in Loop: Header=BB0_202 Depth=2
	@%p355 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_144;
$L__BB0_213:                            // %pass10924
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r2190, %r3501, 19;
	or.b32  	%r2191, %r189, %r2190;
	cvt.u64.u32 	%rd320, %r2191;
	add.s64 	%rd321, %rd320, %rd8;
	shr.u64 	%rd322, %rd321, 40;
	add.s64 	%rd323, %rd321, %rd322;
	shr.s64 	%rd324, %rd323, 24;
	setp.lt.s64 	%p286, %rd321, 0;
	and.b64  	%rd325, %rd323, -16777216;
	setp.ne.s64 	%p287, %rd325, %rd321;
	and.pred  	%p288, %p286, %p287;
	selp.u64 	%rd326, 1, 0, %p288;
	sub.s64 	%rd327, %rd326, %rd324;
	shl.b64 	%rd328, %rd327, 24;
	add.s64 	%rd329, %rd328, %rd321;
	shl.b64 	%rd330, %rd329, 2;
	add.s64 	%rd331, %rd4, %rd330;
	st.global.u32 	[%rd331], %r3502;
	bra.uni 	$L__BB0_144;
$L__BB0_146:                            // %L24769.preheader
                                        //   in Loop: Header=BB0_200 Depth=1
	or.b32  	%r126, %r90, 32;
	or.b32  	%r127, %r90, 34;
	or.b32  	%r128, %r90, 36;
	or.b32  	%r129, %r90, 38;
	mov.u32 	%r3503, %r1224;
	bra.uni 	$L__BB0_147;
$L__BB0_170:                            // %L38991
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3500, %r2931;
	mov.u32 	%r3502, %r2931;
$L__BB0_171:                            // %L38992
                                        //   in Loop: Header=BB0_147 Depth=2
	bar.sync 	0;
	add.s32 	%r3503, %r3503, 8;
	setp.ne.s32 	%p334, %r3503, 32;
	@%p334 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_172;
$L__BB0_147:                            // %L24769
                                        //   Parent Loop BB0_200 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p290, %r3503, 0;
	selp.b32 	%r2805, %r191, 0, %p290;
	setp.eq.s32 	%p291, %r3503, 8;
	selp.b32 	%r2806, %r195, %r2805, %p291;
	setp.eq.s32 	%p292, %r3503, 16;
	selp.b32 	%r2807, %r199, %r2806, %p292;
	setp.eq.s32 	%p293, %r3503, 24;
	selp.b32 	%r2808, %r203, %r2807, %p293;
	selp.b32 	%r2809, %r192, 0, %p290;
	selp.b32 	%r2810, %r196, %r2809, %p291;
	selp.b32 	%r2811, %r200, %r2810, %p292;
	selp.b32 	%r2812, %r204, %r2811, %p293;
	selp.b32 	%r2813, %r193, 0, %p290;
	selp.b32 	%r2814, %r197, %r2813, %p291;
	selp.b32 	%r2815, %r201, %r2814, %p292;
	selp.b32 	%r2816, %r205, %r2815, %p293;
	selp.b32 	%r2817, %r194, 0, %p290;
	selp.b32 	%r2818, %r198, %r2817, %p291;
	selp.b32 	%r2819, %r202, %r2818, %p292;
	selp.b32 	%r2820, %r206, %r2819, %p293;
	// begin inline asm
	mov.b32 %r2221, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2821, %r2808, 8;
	xor.b32  	%r2231, %r2821, 8947848;
	// begin inline asm
	lop3.b32 %r2218, %r1102, %r2231, %r2221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2223, %r2221, %r2222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2226, %r2218, %r2223;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2229, %r1113, %r2231, %r2232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2234, %r2232, %r2233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2237, %r2229, %r2234;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2822, %r2812, 8;
	xor.b32  	%r2277, %r2822, 8947848;
	// begin inline asm
	lop3.b32 %r2264, %r1102, %r2277, %r2267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2269, %r2267, %r2268;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2272, %r2264, %r2269;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2275, %r1113, %r2277, %r2278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2280, %r2278, %r2279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2283, %r2275, %r2280;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2324, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2823, %r2816, 8;
	xor.b32  	%r2323, %r2823, 8947848;
	// begin inline asm
	lop3.b32 %r2310, %r1102, %r2323, %r2313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2313, %r2314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2318, %r2310, %r2315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2321, %r1113, %r2323, %r2324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2324, %r2325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2329, %r2321, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2824, %r2820, 8;
	xor.b32  	%r2369, %r2824, 8947848;
	// begin inline asm
	lop3.b32 %r2356, %r1102, %r2369, %r2359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2359, %r2360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2364, %r2356, %r2361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2367, %r1113, %r2369, %r2370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2370, %r2371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2375, %r2367, %r2372;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2226;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2237;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2272;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2283;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2318;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2390, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2329;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2393, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2364;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2396, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r176;
    mov.b32 {%r2re, %r2im}, %r2375;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2399, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2465, %r2462}, {%r299, %r302}, {%r2378}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2474, %r2471}, {%r299, %r302}, {%r2381}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2483, %r2480}, {%r299, %r302}, {%r2384}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2492, %r2489}, {%r299, %r302}, {%r2387}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2501, %r2498}, {%r299, %r302}, {%r2390}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2510, %r2507}, {%r299, %r302}, {%r2393}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2519, %r2516}, {%r299, %r302}, {%r2396}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2528, %r2525}, {%r299, %r302}, {%r2399}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2458, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r2458, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r337, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2467, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r2467, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r337, %r2474, %r2469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2476, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r2476, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r337, %r2483, %r2478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2485, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r2485, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r337, %r2492, %r2487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2494, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2496, %r2494, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r337, %r2501, %r2496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2503, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2505, %r2503, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2508, %r337, %r2510, %r2505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2512, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r2512, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r337, %r2519, %r2514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2521, %r340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r2521, %r2525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r337, %r2528, %r2523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2530, %r340, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2533, %r337, %r2462, %r2530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2537, %r340, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2540, %r337, %r2471, %r2537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r340, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r337, %r2480, %r2544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r340, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r337, %r2489, %r2551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2558, %r340, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2561, %r337, %r2498, %r2558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2565, %r340, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2568, %r337, %r2507, %r2565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2572, %r340, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2575, %r337, %r2516, %r2572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2579, %r340, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2582, %r337, %r2525, %r2579;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2659, %r2660}, {%r384, %r387}, {%r2463, %r2533}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2667, %r2668}, {%r384, %r387}, {%r2472, %r2540}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2675, %r2676}, {%r384, %r387}, {%r2481, %r2547}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2683, %r2684}, {%r384, %r387}, {%r2490, %r2554}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2691, %r2692}, {%r384, %r387}, {%r2499, %r2561}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2699, %r2700}, {%r384, %r387}, {%r2508, %r2568}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2707, %r2708}, {%r384, %r387}, {%r2517, %r2575}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2715, %r2716}, {%r384, %r387}, {%r2526, %r2582}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2659, %r2660, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2659, %r2660, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2667, %r2668, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2667, %r2668, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2674, %r2675, %r2676, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2678, %r2675, %r2676, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2682, %r2683, %r2684, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2686, %r2683, %r2684, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2690, %r2691, %r2692, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2694, %r2691, %r2692, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2698, %r2699, %r2700, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2702, %r2699, %r2700, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2706, %r2707, %r2708, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2710, %r2707, %r2708, %r822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2714, %r2715, %r2716, %r818;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2718, %r2715, %r2716, %r822;
	// end inline asm
	or.b32  	%r2825, %r3503, %r180;
	add.s32 	%r2826, %r126, %r2825;
	shr.s32 	%r2827, %r2826, 31;
	shr.u32 	%r2828, %r2827, 29;
	add.s32 	%r2829, %r2826, %r2828;
	and.b32  	%r2830, %r2829, 134217720;
	sub.s32 	%r2831, %r2826, %r2830;
	shl.b32 	%r2832, %r2831, 5;
	add.s32 	%r2833, %r186, %r2832;
	mul.wide.s32 	%rd332, %r2833, 4;
	add.s64 	%rd334, %rd99, %rd332;
	st.shared.u32 	[%rd334], %r2658;
	add.s32 	%r2834, %r187, %r2832;
	mul.wide.u32 	%rd335, %r2834, 4;
	add.s64 	%rd336, %rd99, %rd335;
	st.shared.u32 	[%rd336], %r2662;
	cvt.s64.s32 	%rd337, %r2832;
	cvt.u64.u32 	%rd338, %r185;
	cvt.u64.u32 	%rd339, %r184;
	cvt.u64.u32 	%rd341, %r181;
	cvt.u64.u32 	%rd342, %r182;
	add.s64 	%rd343, %rd342, %rd341;
	add.s64 	%rd344, %rd343, %rd154;
	add.s64 	%rd345, %rd344, %rd339;
	add.s64 	%rd346, %rd345, %rd338;
	add.s64 	%rd347, %rd346, %rd337;
	shl.b64 	%rd348, %rd347, 2;
	add.s64 	%rd349, %rd99, %rd348;
	st.shared.u32 	[%rd349+64], %r2666;
	add.s32 	%r2835, %r188, %r2832;
	mul.wide.u32 	%rd350, %r2835, 4;
	add.s64 	%rd351, %rd99, %rd350;
	st.shared.u32 	[%rd351], %r2670;
	add.s32 	%r2836, %r127, %r2825;
	shr.s32 	%r2837, %r2836, 31;
	shr.u32 	%r2838, %r2837, 29;
	add.s32 	%r2839, %r2836, %r2838;
	and.b32  	%r2840, %r2839, 134217720;
	sub.s32 	%r2841, %r2836, %r2840;
	shl.b32 	%r2842, %r2841, 5;
	add.s32 	%r2843, %r186, %r2842;
	mul.wide.s32 	%rd352, %r2843, 4;
	add.s64 	%rd353, %rd99, %rd352;
	st.shared.u32 	[%rd353], %r2674;
	add.s32 	%r2844, %r187, %r2842;
	mul.wide.u32 	%rd354, %r2844, 4;
	add.s64 	%rd355, %rd99, %rd354;
	st.shared.u32 	[%rd355], %r2678;
	cvt.s64.s32 	%rd356, %r2842;
	add.s64 	%rd357, %rd346, %rd356;
	shl.b64 	%rd358, %rd357, 2;
	add.s64 	%rd359, %rd99, %rd358;
	st.shared.u32 	[%rd359+64], %r2682;
	add.s32 	%r2845, %r188, %r2842;
	mul.wide.u32 	%rd360, %r2845, 4;
	add.s64 	%rd361, %rd99, %rd360;
	st.shared.u32 	[%rd361], %r2686;
	add.s32 	%r2846, %r128, %r2825;
	shr.s32 	%r2847, %r2846, 31;
	shr.u32 	%r2848, %r2847, 29;
	add.s32 	%r2849, %r2846, %r2848;
	and.b32  	%r2850, %r2849, 134217720;
	sub.s32 	%r2851, %r2846, %r2850;
	shl.b32 	%r2852, %r2851, 5;
	add.s32 	%r2853, %r186, %r2852;
	mul.wide.s32 	%rd362, %r2853, 4;
	add.s64 	%rd363, %rd99, %rd362;
	st.shared.u32 	[%rd363], %r2690;
	add.s32 	%r2854, %r187, %r2852;
	mul.wide.u32 	%rd364, %r2854, 4;
	add.s64 	%rd365, %rd99, %rd364;
	st.shared.u32 	[%rd365], %r2694;
	cvt.s64.s32 	%rd366, %r2852;
	add.s64 	%rd367, %rd346, %rd366;
	shl.b64 	%rd368, %rd367, 2;
	add.s64 	%rd369, %rd99, %rd368;
	st.shared.u32 	[%rd369+64], %r2698;
	add.s32 	%r2855, %r188, %r2852;
	mul.wide.u32 	%rd370, %r2855, 4;
	add.s64 	%rd371, %rd99, %rd370;
	st.shared.u32 	[%rd371], %r2702;
	add.s32 	%r2856, %r129, %r2825;
	shr.s32 	%r2857, %r2856, 31;
	shr.u32 	%r2858, %r2857, 29;
	add.s32 	%r2859, %r2856, %r2858;
	and.b32  	%r2860, %r2859, 134217720;
	sub.s32 	%r2861, %r2856, %r2860;
	shl.b32 	%r2862, %r2861, 5;
	add.s32 	%r2863, %r186, %r2862;
	mul.wide.s32 	%rd372, %r2863, 4;
	add.s64 	%rd373, %rd99, %rd372;
	st.shared.u32 	[%rd373], %r2706;
	add.s32 	%r2864, %r187, %r2862;
	mul.wide.u32 	%rd374, %r2864, 4;
	add.s64 	%rd375, %rd99, %rd374;
	st.shared.u32 	[%rd375], %r2710;
	cvt.s64.s32 	%rd376, %r2862;
	add.s64 	%rd377, %rd346, %rd376;
	shl.b64 	%rd378, %rd377, 2;
	add.s64 	%rd379, %rd99, %rd378;
	st.shared.u32 	[%rd379+64], %r2714;
	add.s32 	%r2865, %r188, %r2862;
	mul.wide.u32 	%rd380, %r2865, 4;
	add.s64 	%rd381, %rd99, %rd380;
	st.shared.u32 	[%rd381], %r2718;
	bar.sync 	0;
	ld.shared.u32 	%r2726, [%rd6];
	ld.shared.u32 	%r2733, [%rd7+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2743, %r2740}, {%r396, %r399}, {%r2726}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2752, %r2749}, {%r396, %r399}, {%r2733}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2736, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2736, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r430, %r2743, %r2738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2745, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r2745, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r430, %r2752, %r2747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2754, %r433, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r430, %r2740, %r2754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r433, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r430, %r2749, %r2761;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2787, %r2790}, {%r472, %r475}, {%r2741, %r2757}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2794, %r2798}, {%r472, %r475}, {%r2750, %r2764}, {%r1224, %r1224}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2786, %r2787, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r2790, %r2790, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r2794, %r2794, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r1585, %r2797, %r3502;
	// end inline asm
	add.s32 	%r3533, %r3500, 1;
	setp.ne.s32 	%p294, %r3533, 25;
	@%p294 bra 	$L__BB0_150;
// %bb.148:                             // %L30818
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_149;
$L__BB0_214:                            // %pass13739
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r2866, %r3501, 19;
	or.b32  	%r2867, %r189, %r2866;
	cvt.u64.u32 	%rd382, %r2867;
	add.s64 	%rd383, %rd382, %rd8;
	shr.u64 	%rd384, %rd383, 40;
	add.s64 	%rd385, %rd383, %rd384;
	shr.s64 	%rd386, %rd385, 24;
	setp.lt.s64 	%p296, %rd383, 0;
	and.b64  	%rd387, %rd385, -16777216;
	setp.ne.s64 	%p297, %rd387, %rd383;
	and.pred  	%p298, %p296, %p297;
	selp.u64 	%rd388, 1, 0, %p298;
	sub.s64 	%rd389, %rd388, %rd386;
	shl.b64 	%rd390, %rd389, 24;
	add.s64 	%rd391, %rd390, %rd383;
	shl.b64 	%rd392, %rd391, 2;
	add.s64 	%rd393, %rd4, %rd392;
	st.global.u32 	[%rd393], %r3535;
$L__BB0_149:                            // %L31032
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3533, 0;
	mov.u32 	%r3535, %r3533;
$L__BB0_150:                            // %pass13944
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r2873, [%rd56];
	ld.shared.u32 	%r2880, [%rd57];
	mov.u32 	%r2931, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2890, %r2887}, {%r396, %r399}, {%r2873}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2899, %r2896}, {%r396, %r399}, {%r2880}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2883, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r2883, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r430, %r2890, %r2885;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2892, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2894, %r2892, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r430, %r2899, %r2894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2901, %r433, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r430, %r2887, %r2901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2908, %r433, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r430, %r2896, %r2908;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2934, %r2937}, {%r472, %r475}, {%r2888, %r2904}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2941, %r2945}, {%r472, %r475}, {%r2897, %r2911}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2933, %r2934, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r2937, %r2937, %r2933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r2941, %r2941, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r2945, %r2945, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r1585, %r2944, %r3535;
	// end inline asm
	add.s32 	%r3536, %r3533, 1;
	setp.eq.s32 	%p299, %r3536, 25;
	@%p299 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_153;
$L__BB0_151:                            // %L31955
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_152;
$L__BB0_215:                            // %pass14225
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r2952, %r3501, 19;
	or.b32  	%r2953, %r189, %r2952;
	cvt.u64.u32 	%rd394, %r2953;
	add.s64 	%rd395, %rd394, %rd8;
	shr.u64 	%rd396, %rd395, 40;
	add.s64 	%rd397, %rd395, %rd396;
	shr.s64 	%rd398, %rd397, 24;
	setp.lt.s64 	%p301, %rd395, 0;
	and.b64  	%rd399, %rd397, -16777216;
	setp.ne.s64 	%p302, %rd399, %rd395;
	and.pred  	%p303, %p301, %p302;
	selp.u64 	%rd400, 1, 0, %p303;
	sub.s64 	%rd401, %rd400, %rd398;
	shl.b64 	%rd402, %rd401, 24;
	add.s64 	%rd403, %rd402, %rd395;
	shl.b64 	%rd404, %rd403, 2;
	add.s64 	%rd405, %rd4, %rd404;
	st.global.u32 	[%rd405], %r3538;
$L__BB0_152:                            // %L32169
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3536, 0;
	mov.u32 	%r3538, %r3536;
$L__BB0_153:                            // %pass14430
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r2959, [%rd58];
	ld.shared.u32 	%r2966, [%rd59];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2973}, {%r396, %r399}, {%r2959}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2985, %r2982}, {%r396, %r399}, {%r2966}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2969, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r2969, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r430, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2978, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r2978, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r430, %r2985, %r2980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r433, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r430, %r2973, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r433, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r430, %r2982, %r2994;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3020, %r3023}, {%r472, %r475}, {%r2974, %r2990}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3027, %r3031}, {%r472, %r475}, {%r2983, %r2997}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3019, %r3020, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3022, %r3023, %r3023, %r3019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r3027, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r3031, %r3031, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r1585, %r3030, %r3538;
	// end inline asm
	add.s32 	%r3539, %r3536, 1;
	setp.eq.s32 	%p304, %r3539, 25;
	@%p304 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L33092
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_155;
$L__BB0_216:                            // %pass14711
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3038, %r3501, 19;
	or.b32  	%r3039, %r189, %r3038;
	cvt.u64.u32 	%rd406, %r3039;
	add.s64 	%rd407, %rd406, %rd8;
	shr.u64 	%rd408, %rd407, 40;
	add.s64 	%rd409, %rd407, %rd408;
	shr.s64 	%rd410, %rd409, 24;
	setp.lt.s64 	%p306, %rd407, 0;
	and.b64  	%rd411, %rd409, -16777216;
	setp.ne.s64 	%p307, %rd411, %rd407;
	and.pred  	%p308, %p306, %p307;
	selp.u64 	%rd412, 1, 0, %p308;
	sub.s64 	%rd413, %rd412, %rd410;
	shl.b64 	%rd414, %rd413, 24;
	add.s64 	%rd415, %rd414, %rd407;
	shl.b64 	%rd416, %rd415, 2;
	add.s64 	%rd417, %rd4, %rd416;
	st.global.u32 	[%rd417], %r3541;
$L__BB0_155:                            // %L33306
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3539, 0;
	mov.u32 	%r3541, %r3539;
$L__BB0_156:                            // %pass14916
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r3045, [%rd60];
	ld.shared.u32 	%r3052, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3062, %r3059}, {%r396, %r399}, {%r3045}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3071, %r3068}, {%r396, %r399}, {%r3052}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3055, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r3055, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r430, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3064, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3066, %r3064, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r430, %r3071, %r3066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3073, %r433, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r430, %r3059, %r3073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3080, %r433, %r3071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r430, %r3068, %r3080;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3106, %r3109}, {%r472, %r475}, {%r3060, %r3076}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3113, %r3117}, {%r472, %r475}, {%r3069, %r3083}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3105, %r3106, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r3109, %r3109, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r3113, %r3113, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r3117, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r1585, %r3116, %r3541;
	// end inline asm
	add.s32 	%r3542, %r3539, 1;
	setp.eq.s32 	%p309, %r3542, 25;
	@%p309 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L34229
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_158;
$L__BB0_217:                            // %pass15197
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3124, %r3501, 19;
	or.b32  	%r3125, %r189, %r3124;
	cvt.u64.u32 	%rd418, %r3125;
	add.s64 	%rd419, %rd418, %rd8;
	shr.u64 	%rd420, %rd419, 40;
	add.s64 	%rd421, %rd419, %rd420;
	shr.s64 	%rd422, %rd421, 24;
	setp.lt.s64 	%p311, %rd419, 0;
	and.b64  	%rd423, %rd421, -16777216;
	setp.ne.s64 	%p312, %rd423, %rd419;
	and.pred  	%p313, %p311, %p312;
	selp.u64 	%rd424, 1, 0, %p313;
	sub.s64 	%rd425, %rd424, %rd422;
	shl.b64 	%rd426, %rd425, 24;
	add.s64 	%rd427, %rd426, %rd419;
	shl.b64 	%rd428, %rd427, 2;
	add.s64 	%rd429, %rd4, %rd428;
	st.global.u32 	[%rd429], %r3544;
$L__BB0_158:                            // %L34443
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3542, 0;
	mov.u32 	%r3544, %r3542;
$L__BB0_159:                            // %pass15402
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r3131, [%rd62];
	ld.shared.u32 	%r3138, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3148, %r3145}, {%r396, %r399}, {%r3131}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3157, %r3154}, {%r396, %r399}, {%r3138}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r3141, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r430, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r3150, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r430, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r433, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r430, %r3145, %r3159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3166, %r433, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r430, %r3154, %r3166;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3192, %r3195}, {%r472, %r475}, {%r3146, %r3162}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3199, %r3203}, {%r472, %r475}, {%r3155, %r3169}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3191, %r3192, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3195, %r3195, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r3199, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3203, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r1585, %r3202, %r3544;
	// end inline asm
	add.s32 	%r3545, %r3542, 1;
	setp.eq.s32 	%p314, %r3545, 25;
	@%p314 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_162;
$L__BB0_160:                            // %L35366
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_161;
$L__BB0_218:                            // %pass15683
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3210, %r3501, 19;
	or.b32  	%r3211, %r189, %r3210;
	cvt.u64.u32 	%rd430, %r3211;
	add.s64 	%rd431, %rd430, %rd8;
	shr.u64 	%rd432, %rd431, 40;
	add.s64 	%rd433, %rd431, %rd432;
	shr.s64 	%rd434, %rd433, 24;
	setp.lt.s64 	%p316, %rd431, 0;
	and.b64  	%rd435, %rd433, -16777216;
	setp.ne.s64 	%p317, %rd435, %rd431;
	and.pred  	%p318, %p316, %p317;
	selp.u64 	%rd436, 1, 0, %p318;
	sub.s64 	%rd437, %rd436, %rd434;
	shl.b64 	%rd438, %rd437, 24;
	add.s64 	%rd439, %rd438, %rd431;
	shl.b64 	%rd440, %rd439, 2;
	add.s64 	%rd441, %rd4, %rd440;
	st.global.u32 	[%rd441], %r3547;
$L__BB0_161:                            // %L35580
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3545, 0;
	mov.u32 	%r3547, %r3545;
$L__BB0_162:                            // %pass15888
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r3217, [%rd64];
	ld.shared.u32 	%r3224, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3234, %r3231}, {%r396, %r399}, {%r3217}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3243, %r3240}, {%r396, %r399}, {%r3224}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3227, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r3227, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r430, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3236, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3238, %r3236, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r430, %r3243, %r3238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r433, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r430, %r3231, %r3245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r433, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r430, %r3240, %r3252;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3278, %r3281}, {%r472, %r475}, {%r3232, %r3248}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3285, %r3289}, {%r472, %r475}, {%r3241, %r3255}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3277, %r3278, %r3278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r3281, %r3281, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r3285, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r3289, %r3289, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r1585, %r3288, %r3547;
	// end inline asm
	add.s32 	%r3548, %r3545, 1;
	setp.eq.s32 	%p319, %r3548, 25;
	@%p319 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_165;
$L__BB0_163:                            // %L36503
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_164;
$L__BB0_219:                            // %pass16169
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3296, %r3501, 19;
	or.b32  	%r3297, %r189, %r3296;
	cvt.u64.u32 	%rd442, %r3297;
	add.s64 	%rd443, %rd442, %rd8;
	shr.u64 	%rd444, %rd443, 40;
	add.s64 	%rd445, %rd443, %rd444;
	shr.s64 	%rd446, %rd445, 24;
	setp.lt.s64 	%p321, %rd443, 0;
	and.b64  	%rd447, %rd445, -16777216;
	setp.ne.s64 	%p322, %rd447, %rd443;
	and.pred  	%p323, %p321, %p322;
	selp.u64 	%rd448, 1, 0, %p323;
	sub.s64 	%rd449, %rd448, %rd446;
	shl.b64 	%rd450, %rd449, 24;
	add.s64 	%rd451, %rd450, %rd443;
	shl.b64 	%rd452, %rd451, 2;
	add.s64 	%rd453, %rd4, %rd452;
	st.global.u32 	[%rd453], %r3550;
$L__BB0_164:                            // %L36717
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3548, 0;
	mov.u32 	%r3550, %r3548;
$L__BB0_165:                            // %pass16374
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r3303, [%rd66];
	ld.shared.u32 	%r3310, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3320, %r3317}, {%r396, %r399}, {%r3303}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3329, %r3326}, {%r396, %r399}, {%r3310}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3313, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r3313, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r430, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3322, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r3322, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r430, %r3329, %r3324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3331, %r433, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r430, %r3317, %r3331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3338, %r433, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3341, %r430, %r3326, %r3338;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3364, %r3367}, {%r472, %r475}, {%r3318, %r3334}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3371, %r3375}, {%r472, %r475}, {%r3327, %r3341}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3363, %r3364, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3366, %r3367, %r3367, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r3371, %r3371, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r3375, %r3375, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r1585, %r3374, %r3550;
	// end inline asm
	add.s32 	%r3551, %r3548, 1;
	setp.eq.s32 	%p324, %r3551, 25;
	@%p324 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L37640
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_167;
$L__BB0_220:                            // %pass16655
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3382, %r3501, 19;
	or.b32  	%r3383, %r189, %r3382;
	cvt.u64.u32 	%rd454, %r3383;
	add.s64 	%rd455, %rd454, %rd8;
	shr.u64 	%rd456, %rd455, 40;
	add.s64 	%rd457, %rd455, %rd456;
	shr.s64 	%rd458, %rd457, 24;
	setp.lt.s64 	%p326, %rd455, 0;
	and.b64  	%rd459, %rd457, -16777216;
	setp.ne.s64 	%p327, %rd459, %rd455;
	and.pred  	%p328, %p326, %p327;
	selp.u64 	%rd460, 1, 0, %p328;
	sub.s64 	%rd461, %rd460, %rd458;
	shl.b64 	%rd462, %rd461, 24;
	add.s64 	%rd463, %rd462, %rd455;
	shl.b64 	%rd464, %rd463, 2;
	add.s64 	%rd465, %rd4, %rd464;
	st.global.u32 	[%rd465], %r3553;
$L__BB0_167:                            // %L37854
                                        //   in Loop: Header=BB0_147 Depth=2
	add.s32 	%r3501, %r3501, 1;
	mov.u32 	%r3551, 0;
	mov.u32 	%r3553, %r3551;
$L__BB0_168:                            // %pass16860
                                        //   in Loop: Header=BB0_147 Depth=2
	ld.shared.u32 	%r3389, [%rd68];
	ld.shared.u32 	%r3396, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3406, %r3403}, {%r396, %r399}, {%r3389}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3415, %r3412}, {%r396, %r399}, {%r3396}, {%r2931, %r2931};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3399, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3401, %r3399, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r430, %r3406, %r3401;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3408, %r433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3410, %r3408, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3413, %r430, %r3415, %r3410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3417, %r433, %r3406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3420, %r430, %r3403, %r3417;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3424, %r433, %r3415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r430, %r3412, %r3424;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3450, %r3453}, {%r472, %r475}, {%r3404, %r3420}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3457, %r3461}, {%r472, %r475}, {%r3413, %r3427}, {%r2931, %r2931}, %r190, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3449, %r3450, %r3450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3452, %r3453, %r3453, %r3449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r3457, %r3457, %r3452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3460, %r3461, %r3461, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1585, %r3460, %r3553;
	// end inline asm
	add.s32 	%r3500, %r3551, 1;
	setp.eq.s32 	%p329, %r3500, 25;
	@%p329 bra 	$L__BB0_169;
	bra.uni 	$L__BB0_171;
$L__BB0_169:                            // %L38777
                                        //   in Loop: Header=BB0_147 Depth=2
	@%p355 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_170;
$L__BB0_221:                            // %pass17141
                                        //   in Loop: Header=BB0_147 Depth=2
	shl.b32 	%r3468, %r3501, 19;
	or.b32  	%r3469, %r189, %r3468;
	cvt.u64.u32 	%rd466, %r3469;
	add.s64 	%rd467, %rd466, %rd8;
	shr.u64 	%rd468, %rd467, 40;
	add.s64 	%rd469, %rd467, %rd468;
	shr.s64 	%rd470, %rd469, 24;
	setp.lt.s64 	%p331, %rd467, 0;
	and.b64  	%rd471, %rd469, -16777216;
	setp.ne.s64 	%p332, %rd471, %rd467;
	and.pred  	%p333, %p331, %p332;
	selp.u64 	%rd472, 1, 0, %p333;
	sub.s64 	%rd473, %rd472, %rd470;
	shl.b64 	%rd474, %rd473, 24;
	add.s64 	%rd475, %rd474, %rd467;
	shl.b64 	%rd476, %rd475, 2;
	add.s64 	%rd477, %rd4, %rd476;
	st.global.u32 	[%rd477], %r3502;
	bra.uni 	$L__BB0_170;
$L__BB0_173:                            // %L39023
	mov.u32 	%r3471, 0;
	st.global.u32 	[%rd5], %r3471;
	ret;
$L__BB0_203:                            // %post_box_union
	mov.u64 	%rd234, exception3292;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd70;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L247
	mov.u32 	%r3472, 2;
	st.global.u32 	[%rd5], %r3472;
	mov.u64 	%rd478, exception3244;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd70;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd91, exception1;
	cvta.global.u64 	%rd92, %rd91;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd92;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd70;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
