// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3262[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<265>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3561>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<268>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r271, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd89, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r272, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r272, 34943;
	@%p2 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_1;
$L__BB0_172:                            // %L10
	ld.param.u64 	%rd90, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r273, %r4, %r5;
	or.b32  	%r274, %r273, %r2;
	mul.wide.u32 	%rd96, %r274, 4;
	add.s64 	%rd5, %rd90, %rd96;
	mov.u32 	%r275, 1;
	st.global.u32 	[%rd5], %r275;
	and.b32  	%r6, %r5, 3;
	shr.u32 	%r7, %r5, 2;
	mul.lo.s32 	%r276, %r6, %r7;
	and.b32  	%r277, %r276, 7;
	cvt.rn.f32.s32 	%f185, %r277;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f1, %f185, %f186;
	abs.f32 	%f750, %f1;
	setp.lt.f32 	%p3, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p260, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p3 bra 	$L__BB0_184;
// %bb.173:
	@%p260 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r163, %f750;
	and.b32  	%r278, %r163, 8388607;
	or.b32  	%r3514, %r278, 1065353216;
	mov.b32 	%f745, %r3514;
	add.s32 	%r279, %r163, -1073741824;
	and.b32  	%r3515, %r279, -8388608;
	setp.eq.s32 	%p10, %r3515, 0;
	@%p10 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r280, %r3515, 192937984;
	add.s32 	%r281, %r3514, %r280;
	mov.b32 	%f197, %r281;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3515, %r3515, %r280;
	mov.b32 	%r3514, %f745;
	setp.ne.s32 	%p11, %r3515, 0;
	setp.ne.s32 	%p12, %r3514, 0;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p14, %r163, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p14;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r162, %f154;
	setp.lt.u32 	%p5, %r162, 1073741824;
	@%p5 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p6, %r162, -2147483647;
	@%p6 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p9, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p9;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p7, %f154, 0f40800000;
	@%p7 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p8, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p8;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p15, %f206, 0f7F800000;
	mov.b32 	%r282, %f1;
	and.b32  	%r170, %r282, -2147483648;
	@%p15 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r283, %f746;
	or.b32  	%r284, %r170, %r283;
	mov.b32 	%f746, %r284;
$L__BB0_186:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r291, %f207;
	and.b32  	%r292, %r291, -2147483648;
	shl.b32 	%r173, %r5, 1;
	and.b32  	%r299, %r173, 2;
	mul.lo.s32 	%r174, %r299, %r7;
	cvt.rn.f32.s32 	%f239, %r174;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p23, %f726, 0f40000000;
	setp.gtu.f32 	%p261, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p23 bra 	$L__BB0_13;
// %bb.2:
	@%p261 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f726;
	and.b32  	%r300, %r9, 8388607;
	or.b32  	%r3480, %r300, 1065353216;
	mov.b32 	%f705, %r3480;
	add.s32 	%r301, %r9, -1073741824;
	and.b32  	%r3481, %r301, -8388608;
	setp.eq.s32 	%p30, %r3481, 0;
	@%p30 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r3481, 192937984;
	add.s32 	%r303, %r3480, %r302;
	mov.b32 	%f251, %r303;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3481, %r3481, %r302;
	mov.b32 	%r3480, %f705;
	setp.ne.s32 	%p31, %r3481, 0;
	setp.ne.s32 	%p32, %r3480, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p34, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f4, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p25, %r8, 1073741824;
	@%p25 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p26, %r8, -2147483647;
	@%p26 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p29, %f4, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p29;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p27, %f4, 0f40800000;
	@%p27 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f4;
	setp.ge.f32 	%p28, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p28;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i2336
	or.b32  	%r293, %r292, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p35, %f260, 0f7F800000;
	mov.b32 	%r304, %f168;
	and.b32  	%r16, %r304, -2147483648;
	@%p35 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r305, %f706;
	or.b32  	%r306, %r16, %r305;
	mov.b32 	%f706, %r306;
$L__BB0_15:                             // %__nv_fmodf.exit2337
	mov.b32 	%f208, %r293;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r307, %f261;
	and.b32  	%r308, %r307, -2147483648;
	or.b32  	%r309, %r308, 1056964608;
	add.s32 	%r315, %r174, %r7;
	cvt.rn.f32.s32 	%f291, %r315;
	div.approx.f32 	%f20, %f291, %f240;
	abs.f32 	%f730, %f20;
	setp.lt.f32 	%p43, %f730, 0f40000000;
	setp.gtu.f32 	%p262, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p43 bra 	$L__BB0_27;
// %bb.16:
	@%p262 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_17;
$L__BB0_23:
	mov.b32 	%r18, %f730;
	and.b32  	%r316, %r18, 8388607;
	or.b32  	%r3482, %r316, 1065353216;
	mov.b32 	%f709, %r3482;
	add.s32 	%r317, %r18, -1073741824;
	and.b32  	%r3483, %r317, -8388608;
	setp.eq.s32 	%p50, %r3483, 0;
	@%p50 bra 	$L__BB0_26;
// %bb.24:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_25:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r318, %r3483, 192937984;
	add.s32 	%r319, %r3482, %r318;
	mov.b32 	%f303, %r319;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3483, %r3483, %r318;
	mov.b32 	%r3482, %f709;
	setp.ne.s32 	%p51, %r3483, 0;
	setp.ne.s32 	%p52, %r3482, 0;
	and.pred  	%p53, %p51, %p52;
	@%p53 bra 	$L__BB0_25;
$L__BB0_26:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p54, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p54;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_27;
$L__BB0_17:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f23, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f23;
	setp.lt.u32 	%p45, %r17, 1073741824;
	@%p45 bra 	$L__BB0_22;
// %bb.18:
	setp.lt.u32 	%p46, %r17, -2147483647;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p49, %f23, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p49;
	bra.uni 	$L__BB0_22;
$L__BB0_20:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p47, %f23, 0f40800000;
	@%p47 bra 	$L__BB0_22;
// %bb.21:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f23;
	setp.ge.f32 	%p48, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p48;
$L__BB0_22:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_27:                             // %__internal_fmodf_kernel.exit.i2367
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r309;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p55, %f312, 0f7F800000;
	mov.b32 	%r320, %f20;
	and.b32  	%r25, %r320, -2147483648;
	@%p55 bra 	$L__BB0_29;
// %bb.28:
	mov.b32 	%r321, %f710;
	or.b32  	%r322, %r25, %r321;
	mov.b32 	%f710, %r322;
$L__BB0_29:                             // %__nv_fmodf.exit2368
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p16, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r329, %f313;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f314, %r331;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r28, %r173, %r7;
	and.b32  	%r337, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r337;
	div.approx.f32 	%f37, %f345, %f703;
	abs.f32 	%f734, %f37;
	setp.lt.f32 	%p63, %f734, 0f40000000;
	setp.gtu.f32 	%p263, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p63 bra 	$L__BB0_41;
// %bb.30:
	@%p263 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r30, %f734;
	and.b32  	%r338, %r30, 8388607;
	or.b32  	%r3484, %r338, 1065353216;
	mov.b32 	%f713, %r3484;
	add.s32 	%r339, %r30, -1073741824;
	and.b32  	%r3485, %r339, -8388608;
	setp.eq.s32 	%p70, %r3485, 0;
	@%p70 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r340, %r3485, 192937984;
	add.s32 	%r341, %r3484, %r340;
	mov.b32 	%f357, %r341;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3485, %r3485, %r340;
	mov.b32 	%r3484, %f713;
	setp.ne.s32 	%p71, %r3485, 0;
	setp.ne.s32 	%p72, %r3484, 0;
	and.pred  	%p73, %p71, %p72;
	@%p73 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p74, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p74;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f40, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f40;
	setp.lt.u32 	%p65, %r29, 1073741824;
	@%p65 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p66, %r29, -2147483647;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p69, %f40, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p69;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p67, %f40, 0f40800000;
	@%p67 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f40;
	setp.ge.f32 	%p68, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p68;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i2398
	selp.f32 	%f212, %f207, %f210, %p16;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p17, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p36, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p56, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p75, %f366, 0f7F800000;
	mov.b32 	%r342, %f37;
	and.b32  	%r37, %r342, -2147483648;
	@%p75 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r343, %f714;
	or.b32  	%r344, %r37, %r343;
	mov.b32 	%f714, %r344;
$L__BB0_43:                             // %__nv_fmodf.exit2399
	selp.f32 	%f214, %f213, %f212, %p17;
	selp.f32 	%f266, %f261, %f264, %p36;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p37, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p56;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p57, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r345, %f367;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f368, %r347;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p76, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p76;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p77, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p77;
	cvt.rzi.s32.f32 	%r348, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p78, %r349, 1;
	selp.f32 	%f386, %f384, %f385, %p78;
	selp.f32 	%f387, %f385, %f384, %p78;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p79, %r350, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p79;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p80, %r352, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p81, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p81;
	abs.f32 	%f395, %f714;
	add.s32 	%r353, %r28, %r7;
	and.b32  	%r354, %r353, 3;
	cvt.rn.f32.s32 	%f397, %r354;
	div.approx.f32 	%f56, %f397, %f703;
	abs.f32 	%f738, %f56;
	setp.lt.f32 	%p83, %f738, 0f40000000;
	setp.gtu.f32 	%p264, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p83 bra 	$L__BB0_55;
// %bb.44:
	@%p264 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r39, %f738;
	and.b32  	%r355, %r39, 8388607;
	or.b32  	%r3486, %r355, 1065353216;
	mov.b32 	%f717, %r3486;
	add.s32 	%r356, %r39, -1073741824;
	and.b32  	%r3487, %r356, -8388608;
	setp.eq.s32 	%p90, %r3487, 0;
	@%p90 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r3487, 192937984;
	add.s32 	%r358, %r3486, %r357;
	mov.b32 	%f409, %r358;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3487, %r3487, %r357;
	mov.b32 	%r3486, %f717;
	setp.ne.s32 	%p91, %r3487, 0;
	setp.ne.s32 	%p92, %r3486, 0;
	and.pred  	%p93, %p91, %p92;
	@%p93 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p94, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p94;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f59, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f59;
	setp.lt.u32 	%p85, %r38, 1073741824;
	@%p85 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p86, %r38, -2147483647;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p89, %f59, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p89;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p87, %f59, 0f40800000;
	@%p87 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f59;
	setp.ge.f32 	%p88, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p88;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2429
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p37;
	selp.f32 	%f320, %f319, %f318, %p57;
	selp.f32 	%f392, %f387, %f391, %p80;
	setp.gt.f32 	%p82, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p95, %f418, 0f7F800000;
	mov.b32 	%r359, %f56;
	and.b32  	%r46, %r359, -2147483648;
	@%p95 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r360, %f718;
	or.b32  	%r361, %r46, %r360;
	mov.b32 	%f718, %r361;
$L__BB0_57:                             // %__nv_fmodf.exit2430
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f55, %f396, %f392, %p82;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r362, %f419;
	and.b32  	%r363, %r362, -2147483648;
	or.b32  	%r364, %r363, 1056964608;
	mov.b32 	%f420, %r364;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p96, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p96;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p97, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p97;
	cvt.rzi.s32.f32 	%r365, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r366, %r365, 1;
	setp.eq.b32 	%p98, %r366, 1;
	selp.f32 	%f438, %f436, %f437, %p98;
	selp.f32 	%f439, %f437, %f436, %p98;
	and.b32  	%r367, %r365, 2;
	setp.eq.s32 	%p99, %r367, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p99;
	add.s32 	%r368, %r365, 1;
	and.b32  	%r369, %r368, 2;
	setp.eq.s32 	%p100, %r369, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p100;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p101, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p101;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p102, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f74, %f448, %f444, %p102;
	and.b32  	%r47, %r5, 2;
	setp.eq.s32 	%p103, %r47, 0;
	mov.f32 	%f720, %f55;
	mov.f32 	%f722, %f74;
	@%p103 bra 	$L__BB0_59;
// %bb.58:                              // %L399
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f55;
	mov.f32 	%f723, %f74;
$L__BB0_59:                             // %L401
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p3 bra 	$L__BB0_194;
// %bb.60:
	@%p260 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_61;
$L__BB0_190:
	mov.b32 	%r176, %f750;
	and.b32  	%r376, %r176, 8388607;
	or.b32  	%r3516, %r376, 1065353216;
	mov.b32 	%f749, %r3516;
	add.s32 	%r377, %r176, -1073741824;
	and.b32  	%r3517, %r377, -8388608;
	setp.eq.s32 	%p111, %r3517, 0;
	@%p111 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r3517, 192937984;
	add.s32 	%r379, %r3516, %r378;
	mov.b32 	%f459, %r379;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3517, %r3517, %r378;
	mov.b32 	%r3516, %f749;
	setp.ne.s32 	%p112, %r3517, 0;
	setp.ne.s32 	%p113, %r3516, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p115, %r176, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_194;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r175, %f171;
	setp.lt.u32 	%p106, %r175, 1073741824;
	@%p106 bra 	$L__BB0_189;
// %bb.62:
	setp.lt.u32 	%p107, %r175, -2147483647;
	@%p107 bra 	$L__BB0_187;
// %bb.63:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p110, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p110;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p108, %f171, 0f40800000;
	@%p108 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p109, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p109;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2460
	cvt.rzi.s32.f32 	%r294, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p116, %f468, 0f7F800000;
	@%p116 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r380, %f750;
	or.b32  	%r381, %r170, %r380;
	mov.b32 	%f750, %r381;
$L__BB0_196:                            // %__nv_fmodf.exit2461
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r295, %r294, 1;
	cvt.rzi.s32.f32 	%r310, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r332, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r388, %f469;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f470, %r390;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p118, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p118;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p119, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p119;
	cvt.rzi.s32.f32 	%r391, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r392, %r391, 1;
	@%p23 bra 	$L__BB0_75;
// %bb.64:
	@%p261 bra 	$L__BB0_71;
	bra.uni 	$L__BB0_65;
$L__BB0_71:
	mov.b32 	%r51, %f726;
	and.b32  	%r396, %r51, 8388607;
	or.b32  	%r3488, %r396, 1065353216;
	mov.b32 	%f725, %r3488;
	add.s32 	%r397, %r51, -1073741824;
	and.b32  	%r3489, %r397, -8388608;
	setp.eq.s32 	%p131, %r3489, 0;
	@%p131 bra 	$L__BB0_74;
// %bb.72:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_73:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3489, 192937984;
	add.s32 	%r399, %r3488, %r398;
	mov.b32 	%f511, %r399;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3489, %r3489, %r398;
	mov.b32 	%r3488, %f725;
	setp.ne.s32 	%p132, %r3489, 0;
	setp.ne.s32 	%p133, %r3488, 0;
	and.pred  	%p134, %p132, %p133;
	@%p134 bra 	$L__BB0_73;
$L__BB0_74:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p135, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p135;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_75;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f82, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f82;
	setp.lt.u32 	%p126, %r50, 1073741824;
	@%p126 bra 	$L__BB0_70;
// %bb.66:
	setp.lt.u32 	%p127, %r50, -2147483647;
	@%p127 bra 	$L__BB0_68;
// %bb.67:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p130, %f82, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p130;
	bra.uni 	$L__BB0_70;
$L__BB0_68:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p128, %f82, 0f40800000;
	@%p128 bra 	$L__BB0_70;
// %bb.69:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f82;
	setp.ge.f32 	%p129, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p129;
$L__BB0_70:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_75:                             // %__internal_fmodf_kernel.exit.i2491
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p18, %r295, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r311, %r310, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r333, %r332, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p120, %r392, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p136, %f520, 0f7F800000;
	@%p136 bra 	$L__BB0_77;
// %bb.76:
	mov.b32 	%r400, %f726;
	or.b32  	%r401, %r16, %r400;
	mov.b32 	%f726, %r401;
$L__BB0_77:                             // %__nv_fmodf.exit2492
	selp.f32 	%f226, %f224, %f225, %p18;
	and.b32  	%r296, %r294, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p38, %r311, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p58, %r333, 1;
	selp.f32 	%f488, %f486, %f487, %p120;
	and.b32  	%r393, %r391, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r402, %f521;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f522, %r404;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p138, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p138;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p139, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p139;
	cvt.rzi.s32.f32 	%r405, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p140, %r406, 1;
	@%p43 bra 	$L__BB0_89;
// %bb.78:
	@%p262 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_79;
$L__BB0_85:
	mov.b32 	%r59, %f730;
	and.b32  	%r410, %r59, 8388607;
	or.b32  	%r3490, %r410, 1065353216;
	mov.b32 	%f729, %r3490;
	add.s32 	%r411, %r59, -1073741824;
	and.b32  	%r3491, %r411, -8388608;
	setp.eq.s32 	%p151, %r3491, 0;
	@%p151 bra 	$L__BB0_88;
// %bb.86:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_87:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r412, %r3491, 192937984;
	add.s32 	%r413, %r3490, %r412;
	mov.b32 	%f561, %r413;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3491, %r3491, %r412;
	mov.b32 	%r3490, %f729;
	setp.ne.s32 	%p152, %r3491, 0;
	setp.ne.s32 	%p153, %r3490, 0;
	and.pred  	%p154, %p152, %p153;
	@%p154 bra 	$L__BB0_87;
$L__BB0_88:                             // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p155, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p155;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_89;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f99, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f99;
	setp.lt.u32 	%p146, %r58, 1073741824;
	@%p146 bra 	$L__BB0_84;
// %bb.80:
	setp.lt.u32 	%p147, %r58, -2147483647;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p150, %f99, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p150;
	bra.uni 	$L__BB0_84;
$L__BB0_82:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p148, %f99, 0f40800000;
	@%p148 bra 	$L__BB0_84;
// %bb.83:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f99;
	setp.ge.f32 	%p149, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p149;
$L__BB0_84:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_89:                             // %__internal_fmodf_kernel.exit.i2522
	setp.eq.s32 	%p19, %r296, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p38;
	and.b32  	%r312, %r310, 2;
	selp.f32 	%f332, %f330, %f331, %p58;
	and.b32  	%r334, %r332, 2;
	setp.eq.s32 	%p121, %r393, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r394, %r391, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p140;
	and.b32  	%r407, %r405, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p156, %f570, 0f7F800000;
	@%p156 bra 	$L__BB0_91;
// %bb.90:
	mov.b32 	%r414, %f730;
	or.b32  	%r415, %r25, %r414;
	mov.b32 	%f730, %r415;
$L__BB0_91:                             // %__nv_fmodf.exit2523
	selp.f32 	%f227, %f225, %f224, %p18;
	selp.f32 	%f229, %f226, %f228, %p19;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p21, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p39, %r312, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r313, %r310, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p59, %r334, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r335, %r332, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p120;
	selp.f32 	%f491, %f488, %f490, %p121;
	and.b32  	%r395, %r394, 2;
	setp.eq.f32 	%p123, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p141, %r407, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r408, %r405, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r422, %f571;
	and.b32  	%r423, %r422, -2147483648;
	or.b32  	%r424, %r423, 1056964608;
	mov.b32 	%f572, %r424;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p158, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p158;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p159, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p159;
	cvt.rzi.s32.f32 	%r425, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r426, %r425, 1;
	setp.eq.b32 	%p160, %r426, 1;
	selp.f32 	%f590, %f588, %f589, %p160;
	and.b32  	%r427, %r425, 2;
	setp.eq.s32 	%p161, %r427, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r428, %r425, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p63 bra 	$L__BB0_103;
// %bb.92:
	@%p263 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r69, %f734;
	and.b32  	%r430, %r69, 8388607;
	or.b32  	%r3492, %r430, 1065353216;
	mov.b32 	%f733, %r3492;
	add.s32 	%r431, %r69, -1073741824;
	and.b32  	%r3493, %r431, -8388608;
	setp.eq.s32 	%p171, %r3493, 0;
	@%p171 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r432, %r3493, 192937984;
	add.s32 	%r433, %r3492, %r432;
	mov.b32 	%f613, %r433;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3493, %r3493, %r432;
	mov.b32 	%r3492, %f733;
	setp.ne.s32 	%p172, %r3493, 0;
	setp.ne.s32 	%p173, %r3492, 0;
	and.pred  	%p174, %p172, %p173;
	@%p174 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p175, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p175;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f114, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f114;
	setp.lt.u32 	%p166, %r68, 1073741824;
	@%p166 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p167, %r68, -2147483647;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p170, %f114, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p170;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p168, %f114, 0f40800000;
	@%p168 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f114;
	setp.ge.f32 	%p169, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p169;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i2553
	setp.eq.s32 	%p20, %r298, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p21;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p38;
	selp.f32 	%f283, %f280, %f282, %p39;
	and.b32  	%r314, %r313, 2;
	setp.eq.f32 	%p41, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p58;
	selp.f32 	%f335, %f332, %f334, %p59;
	and.b32  	%r336, %r335, 2;
	setp.eq.f32 	%p61, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p122, %r395, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p123;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p140;
	selp.f32 	%f543, %f540, %f542, %p141;
	and.b32  	%r409, %r408, 2;
	setp.eq.f32 	%p143, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p160;
	selp.f32 	%f593, %f590, %f592, %p161;
	and.b32  	%r429, %r428, 2;
	setp.eq.f32 	%p163, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p176, %f622, 0f7F800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r434, %f734;
	or.b32  	%r435, %r37, %r434;
	mov.b32 	%f734, %r435;
$L__BB0_105:                            // %__nv_fmodf.exit2554
	selp.f32 	%f232, %f227, %f231, %p20;
	setp.gt.f32 	%p22, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p40, %r314, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f18, %f288, %f283, %p41;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p60, %r336, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p61;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p122;
	setp.gt.f32 	%p124, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p142, %r409, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f96, %f548, %f543, %p143;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p162, %r429, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p163;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r436, %f623;
	and.b32  	%r437, %r436, -2147483648;
	or.b32  	%r438, %r437, 1056964608;
	mov.b32 	%f624, %r438;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p178, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p178;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p179, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p179;
	cvt.rzi.s32.f32 	%r439, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r440, %r439, 1;
	setp.eq.b32 	%p180, %r440, 1;
	selp.f32 	%f642, %f640, %f641, %p180;
	selp.f32 	%f643, %f641, %f640, %p180;
	and.b32  	%r441, %r439, 2;
	setp.eq.s32 	%p181, %r441, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p181;
	add.s32 	%r442, %r439, 1;
	and.b32  	%r443, %r442, 2;
	setp.eq.s32 	%p182, %r443, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p183, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p183;
	abs.f32 	%f651, %f734;
	@%p83 bra 	$L__BB0_117;
// %bb.106:
	@%p264 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_107;
$L__BB0_113:
	mov.b32 	%r77, %f738;
	and.b32  	%r444, %r77, 8388607;
	or.b32  	%r3494, %r444, 1065353216;
	mov.b32 	%f737, %r3494;
	add.s32 	%r445, %r77, -1073741824;
	and.b32  	%r3495, %r445, -8388608;
	setp.eq.s32 	%p191, %r3495, 0;
	@%p191 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r446, %r3495, 192937984;
	add.s32 	%r447, %r3494, %r446;
	mov.b32 	%f663, %r447;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3495, %r3495, %r446;
	mov.b32 	%r3494, %f737;
	setp.ne.s32 	%p192, %r3495, 0;
	setp.ne.s32 	%p193, %r3494, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p195, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_117;
$L__BB0_107:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f131, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f131;
	setp.lt.u32 	%p186, %r76, 1073741824;
	@%p186 bra 	$L__BB0_112;
// %bb.108:
	setp.lt.u32 	%p187, %r76, -2147483647;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p190, %f131, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p190;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p188, %f131, 0f40800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f131;
	setp.ge.f32 	%p189, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p189;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f238, %f237, %f232, %p22;
	selp.f32 	%f286, %f281, %f285, %p40;
	setp.gt.f32 	%p42, %f289, 0f4B800000;
	add.f32 	%f290, %f18, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p60;
	setp.gt.f32 	%p62, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p124;
	selp.f32 	%f546, %f541, %f545, %p142;
	setp.gt.f32 	%p144, %f549, 0f4B800000;
	add.f32 	%f550, %f96, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p162;
	setp.gt.f32 	%p164, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p182;
	setp.gt.f32 	%p184, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p196, %f672, 0f7F800000;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r448, %f738;
	or.b32  	%r449, %r46, %r448;
	mov.b32 	%f738, %r449;
$L__BB0_119:                            // %__nv_fmodf.exit2585
	mov.b32 	%r287, %f238;
	mov.b32 	%r290, %f235;
	selp.f32 	%f19, %f290, %f286, %p42;
	selp.f32 	%f344, %f343, %f338, %p62;
	mov.b32 	%r384, %f500;
	mov.b32 	%r387, %f497;
	selp.f32 	%f97, %f550, %f546, %p144;
	selp.f32 	%f602, %f601, %f596, %p164;
	selp.f32 	%f129, %f652, %f648, %p184;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r450, %f673;
	and.b32  	%r451, %r450, -2147483648;
	or.b32  	%r452, %r451, 1056964608;
	mov.b32 	%f674, %r452;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p198, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p198;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p199, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p199;
	cvt.rzi.s32.f32 	%r453, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r454, %r453, 1;
	setp.eq.b32 	%p200, %r454, 1;
	selp.f32 	%f692, %f690, %f691, %p200;
	selp.f32 	%f693, %f691, %f690, %p200;
	and.b32  	%r455, %r453, 2;
	setp.eq.s32 	%p201, %r455, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p201;
	add.s32 	%r456, %r453, 1;
	and.b32  	%r457, %r456, 2;
	setp.eq.s32 	%p202, %r457, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p202;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p203, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p203;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p204, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f146, %f702, %f698, %p204;
	mov.f32 	%f740, %f129;
	mov.f32 	%f742, %f146;
	@%p103 bra 	$L__BB0_121;
// %bb.120:                             // %L692
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f129;
	mov.f32 	%f743, %f146;
$L__BB0_121:                            // %L694
	xor.b32  	%r286, %r290, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r325, %f344;
	mov.b32 	%r324, %f19;
	mov.b32 	%r328, %f341;
	mov.b32 	%r327, %f18;
	mov.b32 	%r371, %f720;
	mov.b32 	%r372, %f722;
	mov.b32 	%r374, %f721;
	mov.b32 	%r375, %f723;
	xor.b32  	%r383, %r387, -2147483648;
	mov.b32 	%r418, %f602;
	mov.b32 	%r417, %f97;
	mov.b32 	%r421, %f599;
	mov.b32 	%r420, %f96;
	mov.b32 	%r459, %f740;
	mov.b32 	%r460, %f742;
	mov.b32 	%r462, %f741;
	mov.b32 	%r463, %f743;
	setp.gt.u32 	%p205, %r5, 15;
	mov.u32 	%r185, 999999999;
	@%p205 bra 	$L__BB0_123;
// %bb.122:                             // %L724
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	shl.b32 	%r465, %r5, 4;
	and.b32  	%r466, %r465, 240;
	or.b32  	%r467, %r466, %r3;
	mul.wide.u32 	%rd97, %r467, 4;
	add.s64 	%rd98, %rd1, %rd97;
	ld.global.u32 	%r468, [%rd98];
	cvt.s32.s16 	%r469, %r468;
	shr.s32 	%r470, %r468, 16;
	mul.lo.s32 	%r471, %r470, 546;
	mad.lo.s32 	%r185, %r469, 33, %r471;
$L__BB0_123:                            // %pass421
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r287, %r286;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r290, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r325, %r324;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r382, %r384, %r383;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r385, %r387, %r384;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r458, %r460, %r459;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r461, %r463, %r462;
	// end inline asm
	shl.b32 	%r473, %r5, 6;
	and.b32  	%r474, %r473, 192;
	and.b32  	%r475, %r7, 1;
	shr.u32 	%r476, %r5, 3;
	and.b32  	%r477, %r476, 2;
	or.b32  	%r478, %r475, %r477;
	shl.b32 	%r479, %r478, 4;
	bfe.u32 	%r480, %r5, 3, 1;
	shl.b32 	%r481, %r3, 1;
	and.b32  	%r482, %r481, 14;
	or.b32  	%r483, %r480, %r482;
	or.b32  	%r484, %r479, %r474;
	or.b32  	%r485, %r484, %r2;
	or.b32  	%r486, %r485, %r483;
	mul.wide.u32 	%rd99, %r486, 4;
	add.s64 	%rd100, %rd2, %rd99;
	ld.global.u32 	%r186, [%rd100];
	ld.global.u32 	%r187, [%rd100+1024];
	shl.b32 	%r487, %r5, 2;
	shl.b32 	%r488, %r1, 7;
	or.b32  	%r188, %r487, %r488;
	and.b32  	%r189, %r5, 16;
	shr.u32 	%r489, %r5, 4;
	and.b32  	%r490, %r173, 30;
	or.b32  	%r491, %r490, %r489;
	mul.lo.s32 	%r492, %r491, 257;
	shr.u32 	%r190, %r3, 3;
	and.b32  	%r493, %r4, 224;
	mad.lo.s32 	%r494, %r190, 257, %r493;
	or.b32  	%r495, %r190, 2;
	mad.lo.s32 	%r496, %r495, 257, %r493;
	or.b32  	%r497, %r190, 4;
	mad.lo.s32 	%r498, %r497, 257, %r493;
	or.b32  	%r499, %r190, 6;
	mad.lo.s32 	%r500, %r499, 257, %r493;
	or.b32  	%r501, %r190, 8;
	mad.lo.s32 	%r502, %r501, 257, %r493;
	or.b32  	%r503, %r190, 10;
	mad.lo.s32 	%r504, %r503, 257, %r493;
	or.b32  	%r505, %r190, 12;
	mad.lo.s32 	%r506, %r505, 257, %r493;
	or.b32  	%r507, %r190, 14;
	mad.lo.s32 	%r508, %r507, 257, %r493;
	or.b32  	%r509, %r190, 16;
	mad.lo.s32 	%r510, %r509, 257, %r493;
	or.b32  	%r511, %r190, 18;
	mad.lo.s32 	%r512, %r511, 257, %r493;
	or.b32  	%r513, %r190, 20;
	mad.lo.s32 	%r514, %r513, 257, %r493;
	or.b32  	%r515, %r190, 22;
	mad.lo.s32 	%r516, %r515, 257, %r493;
	or.b32  	%r517, %r190, 24;
	mad.lo.s32 	%r518, %r517, 257, %r493;
	or.b32  	%r519, %r190, 26;
	mad.lo.s32 	%r520, %r519, 257, %r493;
	or.b32  	%r521, %r190, 28;
	mad.lo.s32 	%r522, %r521, 257, %r493;
	or.b32  	%r523, %r190, 30;
	mad.lo.s32 	%r524, %r523, 257, %r493;
	mul.lo.s32 	%r525, %r6, 2184;
	mad.lo.s32 	%r526, %r478, 546, %r525;
	mad.lo.s32 	%r527, %r483, 33, %r526;
	setp.lt.u32 	%p207, %r5, 4;
	setp.eq.s32 	%p208, %r7, 4;
	setp.eq.s32 	%p209, %r7, 5;
	selp.b32 	%r528, 0, 1032, %p103;
	and.b32  	%r529, %r5, 1;
	neg.s32 	%r530, %r529;
	and.b32  	%r531, %r530, 2064;
	bfe.s32 	%r532, %r5, 2, 1;
	and.b32  	%r533, %r532, 516;
	or.b32  	%r534, %r482, %r489;
	bfe.s32 	%r535, %r5, 3, 1;
	and.b32  	%r536, %r5, 8;
	setp.eq.s32 	%p210, %r536, 0;
	and.b32  	%r537, %r535, 258;
	or.b32  	%r538, %r528, %r531;
	add.s32 	%r539, %r534, %r533;
	add.s32 	%r540, %r539, %r537;
	add.s32 	%r191, %r540, %r538;
	selp.b32 	%r541, 4144, 5176, %p103;
	add.s32 	%r542, %r541, %r531;
	or.b32  	%r543, %r542, %r533;
	add.s32 	%r544, %r543, %r534;
	add.s32 	%r192, %r544, %r537;
	selp.b32 	%r545, 16, 1048, %p103;
	add.s32 	%r546, %r545, %r531;
	or.b32  	%r547, %r546, %r533;
	add.s32 	%r548, %r547, %r534;
	add.s32 	%r193, %r548, %r537;
	selp.b32 	%r549, 4160, 5192, %p103;
	or.b32  	%r550, %r549, %r531;
	add.s32 	%r194, %r540, %r550;
	and.b32  	%r551, %r535, 4144;
	bfe.s32 	%r552, %r3, 1, 1;
	and.b32  	%r553, %r552, 1032;
	and.b32  	%r554, %r3, 1;
	neg.s32 	%r555, %r554;
	and.b32  	%r556, %r555, 2064;
	bfe.s32 	%r557, %r3, 2, 1;
	and.b32  	%r558, %r557, 516;
	and.b32  	%r559, %r487, 12;
	mad.lo.s32 	%r560, %r190, 258, %r559;
	add.s32 	%r561, %r560, %r553;
	add.s32 	%r562, %r561, %r551;
	add.s32 	%r563, %r562, %r556;
	add.s32 	%r564, %r563, %r478;
	add.s32 	%r565, %r564, %r558;
	mul.wide.u32 	%rd101, %r565, 4;
	mov.u64 	%rd102, shmem;
	add.s64 	%rd22, %rd102, %rd101;
	selp.b32 	%r566, 16, 4160, %p210;
	add.s32 	%r567, %r561, %r566;
	add.s32 	%r568, %r567, %r556;
	add.s32 	%r569, %r568, %r478;
	add.s32 	%r570, %r569, %r558;
	mul.wide.u32 	%rd103, %r570, 4;
	add.s64 	%rd23, %rd102, %rd103;
	or.b32  	%r195, %r189, %r4;
	and.b32  	%r196, %r5, 15;
	mul.lo.s32 	%r197, %r1, 2560;
	add.s32 	%r571, %r3, %r492;
	mul.wide.u32 	%rd104, %r571, 4;
	add.s64 	%rd24, %rd102, %rd104;
	cvt.u64.u32 	%rd105, %r3;
	cvt.u64.u32 	%rd25, %r492;
	add.s64 	%rd106, %rd25, %rd105;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd26, %rd102, %rd107;
	add.s32 	%r572, %r494, %r5;
	mul.wide.u32 	%rd108, %r572, 4;
	add.s64 	%rd27, %rd102, %rd108;
	add.s32 	%r573, %r496, %r5;
	mul.wide.u32 	%rd109, %r573, 4;
	add.s64 	%rd28, %rd102, %rd109;
	add.s32 	%r574, %r498, %r5;
	mul.wide.u32 	%rd110, %r574, 4;
	add.s64 	%rd29, %rd102, %rd110;
	add.s32 	%r575, %r500, %r5;
	mul.wide.u32 	%rd111, %r575, 4;
	add.s64 	%rd30, %rd102, %rd111;
	add.s32 	%r576, %r502, %r5;
	mul.wide.u32 	%rd112, %r576, 4;
	add.s64 	%rd31, %rd102, %rd112;
	add.s32 	%r577, %r504, %r5;
	mul.wide.u32 	%rd113, %r577, 4;
	add.s64 	%rd32, %rd102, %rd113;
	add.s32 	%r578, %r506, %r5;
	mul.wide.u32 	%rd114, %r578, 4;
	add.s64 	%rd33, %rd102, %rd114;
	add.s32 	%r579, %r508, %r5;
	mul.wide.u32 	%rd115, %r579, 4;
	add.s64 	%rd34, %rd102, %rd115;
	add.s32 	%r580, %r510, %r5;
	mul.wide.u32 	%rd116, %r580, 4;
	add.s64 	%rd35, %rd102, %rd116;
	add.s32 	%r581, %r512, %r5;
	mul.wide.u32 	%rd117, %r581, 4;
	add.s64 	%rd36, %rd102, %rd117;
	add.s32 	%r582, %r514, %r5;
	mul.wide.u32 	%rd118, %r582, 4;
	add.s64 	%rd37, %rd102, %rd118;
	add.s32 	%r583, %r516, %r5;
	mul.wide.u32 	%rd119, %r583, 4;
	add.s64 	%rd38, %rd102, %rd119;
	add.s32 	%r584, %r518, %r5;
	mul.wide.u32 	%rd120, %r584, 4;
	add.s64 	%rd39, %rd102, %rd120;
	add.s32 	%r585, %r520, %r5;
	mul.wide.u32 	%rd121, %r585, 4;
	add.s64 	%rd40, %rd102, %rd121;
	add.s32 	%r586, %r522, %r5;
	mul.wide.u32 	%rd122, %r586, 4;
	add.s64 	%rd41, %rd102, %rd122;
	add.s32 	%r587, %r524, %r5;
	mul.wide.u32 	%rd123, %r587, 4;
	add.s64 	%rd42, %rd102, %rd123;
	add.s32 	%r588, %r527, %r190;
	mul.wide.u32 	%rd124, %r588, 4;
	add.s64 	%rd43, %rd102, %rd124;
	add.s32 	%r589, %r527, %r495;
	mul.wide.u32 	%rd125, %r589, 4;
	add.s64 	%rd44, %rd102, %rd125;
	add.s32 	%r590, %r527, %r497;
	mul.wide.u32 	%rd126, %r590, 4;
	add.s64 	%rd45, %rd102, %rd126;
	add.s32 	%r591, %r527, %r499;
	mul.wide.u32 	%rd127, %r591, 4;
	add.s64 	%rd46, %rd102, %rd127;
	add.s32 	%r592, %r527, %r501;
	mul.wide.u32 	%rd128, %r592, 4;
	add.s64 	%rd47, %rd102, %rd128;
	add.s32 	%r593, %r527, %r503;
	mul.wide.u32 	%rd129, %r593, 4;
	add.s64 	%rd48, %rd102, %rd129;
	add.s32 	%r594, %r527, %r505;
	mul.wide.u32 	%rd130, %r594, 4;
	add.s64 	%rd49, %rd102, %rd130;
	add.s32 	%r595, %r527, %r507;
	mul.wide.u32 	%rd131, %r595, 4;
	add.s64 	%rd50, %rd102, %rd131;
	add.s32 	%r596, %r527, %r509;
	mul.wide.u32 	%rd132, %r596, 4;
	add.s64 	%rd51, %rd102, %rd132;
	add.s32 	%r597, %r527, %r511;
	mul.wide.u32 	%rd133, %r597, 4;
	add.s64 	%rd52, %rd102, %rd133;
	add.s32 	%r598, %r527, %r513;
	mul.wide.u32 	%rd134, %r598, 4;
	add.s64 	%rd53, %rd102, %rd134;
	add.s32 	%r599, %r527, %r515;
	mul.wide.u32 	%rd135, %r599, 4;
	add.s64 	%rd54, %rd102, %rd135;
	add.s32 	%r600, %r527, %r517;
	mul.wide.u32 	%rd136, %r600, 4;
	add.s64 	%rd55, %rd102, %rd136;
	add.s32 	%r601, %r527, %r519;
	mul.wide.u32 	%rd137, %r601, 4;
	add.s64 	%rd56, %rd102, %rd137;
	add.s32 	%r602, %r527, %r521;
	mul.wide.u32 	%rd138, %r602, 4;
	add.s64 	%rd57, %rd102, %rd138;
	add.s32 	%r603, %r527, %r523;
	mul.wide.u32 	%rd139, %r603, 4;
	add.s64 	%rd58, %rd102, %rd139;
	add.s32 	%r604, %r7, -1;
	setp.lt.u32 	%p211, %r604, 3;
	or.pred  	%p212, %p207, %p211;
	or.pred  	%p213, %p212, %p208;
	and.b32  	%r605, %r5, 24;
	setp.eq.s32 	%p214, %r605, 24;
	or.pred  	%p215, %p209, %p214;
	selp.b32 	%r198, 1145324612, -286331154, %p212;
	or.pred  	%p1, %p213, %p215;
	shl.b32 	%r606, %r190, 5;
	add.s32 	%r607, %r191, %r606;
	mul.wide.u32 	%rd140, %r607, 4;
	add.s64 	%rd59, %rd102, %rd140;
	add.s32 	%r608, %r192, %r606;
	mul.wide.u32 	%rd141, %r608, 4;
	add.s64 	%rd60, %rd102, %rd141;
	add.s32 	%r609, %r193, %r606;
	mul.wide.u32 	%rd142, %r609, 4;
	add.s64 	%rd61, %rd102, %rd142;
	add.s32 	%r610, %r194, %r606;
	mul.wide.u32 	%rd143, %r610, 4;
	add.s64 	%rd62, %rd102, %rd143;
	shl.b32 	%r611, %r495, 5;
	add.s32 	%r612, %r191, %r611;
	mul.wide.u32 	%rd144, %r612, 4;
	add.s64 	%rd63, %rd102, %rd144;
	add.s32 	%r613, %r192, %r611;
	mul.wide.u32 	%rd145, %r613, 4;
	add.s64 	%rd64, %rd102, %rd145;
	add.s32 	%r614, %r193, %r611;
	mul.wide.u32 	%rd146, %r614, 4;
	add.s64 	%rd65, %rd102, %rd146;
	add.s32 	%r615, %r194, %r611;
	mul.wide.u32 	%rd147, %r615, 4;
	add.s64 	%rd66, %rd102, %rd147;
	shl.b32 	%r616, %r497, 5;
	add.s32 	%r617, %r191, %r616;
	mul.wide.u32 	%rd148, %r617, 4;
	add.s64 	%rd67, %rd102, %rd148;
	add.s32 	%r618, %r192, %r616;
	mul.wide.u32 	%rd149, %r618, 4;
	add.s64 	%rd68, %rd102, %rd149;
	add.s32 	%r619, %r193, %r616;
	mul.wide.u32 	%rd150, %r619, 4;
	add.s64 	%rd69, %rd102, %rd150;
	add.s32 	%r620, %r194, %r616;
	mul.wide.u32 	%rd151, %r620, 4;
	add.s64 	%rd70, %rd102, %rd151;
	shl.b32 	%r621, %r499, 5;
	add.s32 	%r622, %r191, %r621;
	mul.wide.u32 	%rd152, %r622, 4;
	add.s64 	%rd71, %rd102, %rd152;
	add.s32 	%r623, %r192, %r621;
	mul.wide.u32 	%rd153, %r623, 4;
	add.s64 	%rd72, %rd102, %rd153;
	add.s32 	%r624, %r193, %r621;
	mul.wide.u32 	%rd154, %r624, 4;
	add.s64 	%rd73, %rd102, %rd154;
	add.s32 	%r625, %r194, %r621;
	mul.wide.u32 	%rd155, %r625, 4;
	add.s64 	%rd74, %rd102, %rd155;
	add.s32 	%r626, %r565, 32;
	mul.wide.u32 	%rd156, %r626, 4;
	add.s64 	%rd75, %rd102, %rd156;
	add.s32 	%r627, %r570, 32;
	mul.wide.u32 	%rd157, %r627, 4;
	add.s64 	%rd76, %rd102, %rd157;
	add.s32 	%r628, %r565, 64;
	mul.wide.u32 	%rd158, %r628, 4;
	add.s64 	%rd77, %rd102, %rd158;
	add.s32 	%r629, %r570, 64;
	mul.wide.u32 	%rd159, %r629, 4;
	add.s64 	%rd78, %rd102, %rd159;
	add.s32 	%r630, %r565, 96;
	mul.wide.u32 	%rd160, %r630, 4;
	add.s64 	%rd79, %rd102, %rd160;
	add.s32 	%r631, %r570, 96;
	mul.wide.u32 	%rd161, %r631, 4;
	add.s64 	%rd80, %rd102, %rd161;
	add.s32 	%r632, %r565, 128;
	mul.wide.u32 	%rd162, %r632, 4;
	add.s64 	%rd81, %rd102, %rd162;
	add.s32 	%r633, %r570, 128;
	mul.wide.u32 	%rd163, %r633, 4;
	add.s64 	%rd82, %rd102, %rd163;
	add.s32 	%r634, %r565, 160;
	mul.wide.u32 	%rd164, %r634, 4;
	add.s64 	%rd83, %rd102, %rd164;
	add.s32 	%r635, %r570, 160;
	mul.wide.u32 	%rd165, %r635, 4;
	add.s64 	%rd84, %rd102, %rd165;
	add.s32 	%r636, %r565, 192;
	mul.wide.u32 	%rd166, %r636, 4;
	add.s64 	%rd85, %rd102, %rd166;
	add.s32 	%r637, %r570, 192;
	mul.wide.u32 	%rd167, %r637, 4;
	add.s64 	%rd86, %rd102, %rd167;
	add.s32 	%r638, %r565, 224;
	mul.wide.u32 	%rd168, %r638, 4;
	add.s64 	%rd87, %rd102, %rd168;
	add.s32 	%r639, %r570, 224;
	mul.wide.u32 	%rd169, %r639, 4;
	add.s64 	%rd88, %rd102, %rd169;
	mov.u32 	%r3496, 0;
	setp.eq.s32 	%p216, %r189, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3501, %r3496;
	mov.u32 	%r3520, %r3496;
	mov.u32 	%r3503, %r3496;
	bra.uni 	$L__BB0_124;
$L__BB0_170:                            // %L38488
                                        //   in Loop: Header=BB0_124 Depth=1
	add.s32 	%r161, %r3496, 64;
	setp.ne.s32 	%p259, %r3496, 64;
	mov.u32 	%r3496, %r161;
	@%p259 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_171;
$L__BB0_124:                            // %L1153
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_125 Depth 2
                                        //     Child Loop BB0_145 Depth 2
	cvt.u32.u64 	%r833, %rd25;
	or.b32  	%r834, %r3496, %r3;
	shl.b32 	%r835, %r834, 17;
	and.b32  	%r836, %r835, 10354688;
	or.b32  	%r837, %r188, %r836;
	shl.b32 	%r838, %r837, 2;
	cvt.u64.u32 	%rd170, %r838;
	add.s64 	%rd171, %rd3, %rd170;
	ld.global.v4.u32 	{%r839, %r840, %r841, %r842}, [%rd171];
	or.b32  	%r843, %r834, 16;
	shl.b32 	%r844, %r843, 17;
	and.b32  	%r845, %r844, 12451840;
	or.b32  	%r846, %r188, %r845;
	shl.b32 	%r847, %r846, 2;
	cvt.u64.u32 	%rd172, %r847;
	add.s64 	%rd173, %rd3, %rd172;
	ld.global.v4.u32 	{%r848, %r849, %r850, %r851}, [%rd173];
	and.b32  	%r852, %r3496, 64;
	or.b32  	%r853, %r3, %r852;
	shl.b32 	%r854, %r853, 19;
	shl.b32 	%r855, %r188, 2;
	or.b32  	%r856, %r854, %r855;
	or.b32  	%r857, %r856, 16777216;
	cvt.u64.u32 	%rd174, %r857;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r858, %r859, %r860, %r861}, [%rd175];
	or.b32  	%r862, %r856, 25165824;
	cvt.u64.u32 	%rd176, %r862;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r863, %r864, %r865, %r866}, [%rd177];
	selp.b32 	%r867, %r841, %r839, %p216;
	shfl.sync.bfly.b32	%r868, %r867, 16, 31, -1;
	selp.b32 	%r642, %r839, %r868, %p216;
	selp.b32 	%r647, %r868, %r841, %p216;
	selp.b32 	%r869, %r842, %r840, %p216;
	shfl.sync.bfly.b32	%r870, %r869, 16, 31, -1;
	selp.b32 	%r650, %r840, %r870, %p216;
	selp.b32 	%r655, %r870, %r842, %p216;
	selp.b32 	%r871, %r850, %r848, %p216;
	shfl.sync.bfly.b32	%r872, %r871, 16, 31, -1;
	selp.b32 	%r658, %r848, %r872, %p216;
	selp.b32 	%r663, %r872, %r850, %p216;
	selp.b32 	%r873, %r851, %r849, %p216;
	shfl.sync.bfly.b32	%r874, %r873, 16, 31, -1;
	selp.b32 	%r666, %r849, %r874, %p216;
	selp.b32 	%r671, %r874, %r851, %p216;
	selp.b32 	%r875, %r860, %r858, %p216;
	shfl.sync.bfly.b32	%r876, %r875, 16, 31, -1;
	selp.b32 	%r674, %r858, %r876, %p216;
	selp.b32 	%r679, %r876, %r860, %p216;
	selp.b32 	%r877, %r861, %r859, %p216;
	shfl.sync.bfly.b32	%r878, %r877, 16, 31, -1;
	selp.b32 	%r682, %r859, %r878, %p216;
	selp.b32 	%r687, %r878, %r861, %p216;
	selp.b32 	%r879, %r865, %r863, %p216;
	shfl.sync.bfly.b32	%r880, %r879, 16, 31, -1;
	selp.b32 	%r690, %r863, %r880, %p216;
	selp.b32 	%r695, %r880, %r865, %p216;
	selp.b32 	%r881, %r866, %r864, %p216;
	shfl.sync.bfly.b32	%r882, %r881, 16, 31, -1;
	selp.b32 	%r698, %r864, %r882, %p216;
	selp.b32 	%r703, %r882, %r866, %p216;
	shl.b32 	%r643, %r647, 4;
	mov.u32 	%r641, 252645135;
	// begin inline asm
	lop3.b32 %r705, %r641, %r642, %r643, 202;
	// end inline asm
	shr.u32 	%r646, %r642, 4;
	// begin inline asm
	lop3.b32 %r721, %r641, %r646, %r647, 202;
	// end inline asm
	shl.b32 	%r651, %r655, 4;
	// begin inline asm
	lop3.b32 %r713, %r641, %r650, %r651, 202;
	// end inline asm
	shr.u32 	%r654, %r650, 4;
	// begin inline asm
	lop3.b32 %r729, %r641, %r654, %r655, 202;
	// end inline asm
	shl.b32 	%r659, %r663, 4;
	// begin inline asm
	lop3.b32 %r737, %r641, %r658, %r659, 202;
	// end inline asm
	shr.u32 	%r662, %r658, 4;
	// begin inline asm
	lop3.b32 %r753, %r641, %r662, %r663, 202;
	// end inline asm
	shl.b32 	%r667, %r671, 4;
	// begin inline asm
	lop3.b32 %r745, %r641, %r666, %r667, 202;
	// end inline asm
	shr.u32 	%r670, %r666, 4;
	// begin inline asm
	lop3.b32 %r761, %r641, %r670, %r671, 202;
	// end inline asm
	shl.b32 	%r675, %r679, 4;
	// begin inline asm
	lop3.b32 %r706, %r641, %r674, %r675, 202;
	// end inline asm
	shr.u32 	%r678, %r674, 4;
	// begin inline asm
	lop3.b32 %r722, %r641, %r678, %r679, 202;
	// end inline asm
	shl.b32 	%r683, %r687, 4;
	// begin inline asm
	lop3.b32 %r714, %r641, %r682, %r683, 202;
	// end inline asm
	shr.u32 	%r686, %r682, 4;
	// begin inline asm
	lop3.b32 %r730, %r641, %r686, %r687, 202;
	// end inline asm
	shl.b32 	%r691, %r695, 4;
	// begin inline asm
	lop3.b32 %r738, %r641, %r690, %r691, 202;
	// end inline asm
	shr.u32 	%r694, %r690, 4;
	// begin inline asm
	lop3.b32 %r754, %r641, %r694, %r695, 202;
	// end inline asm
	shl.b32 	%r699, %r703, 4;
	// begin inline asm
	lop3.b32 %r746, %r641, %r698, %r699, 202;
	// end inline asm
	shr.u32 	%r702, %r698, 4;
	// begin inline asm
	lop3.b32 %r762, %r641, %r702, %r703, 202;
	// end inline asm
	mov.u32 	%r707, 25152;
	// begin inline asm
	prmt.b32 %r769, %r705, %r706, %r707;
	// end inline asm
	mov.u32 	%r711, 29521;
	// begin inline asm
	prmt.b32 %r801, %r705, %r706, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r713, %r714, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r713, %r714, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r770, %r721, %r722, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r721, %r722, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r778, %r729, %r730, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r729, %r730, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r737, %r738, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r737, %r738, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r745, %r746, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r745, %r746, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r753, %r754, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r753, %r754, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r761, %r762, %r707;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r761, %r762, %r711;
	// end inline asm
	mov.u32 	%r827, 21520;
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r827;
	// end inline asm
	mov.u32 	%r831, 30258;
	// begin inline asm
	prmt.b32 %r772, %r769, %r770, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r777, %r778, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r785, %r786, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r785, %r786, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r793, %r794, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r793, %r794, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r801, %r802, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r801, %r802, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r809, %r810, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r809, %r810, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r817, %r818, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r817, %r818, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r825, %r826, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r825, %r826, %r831;
	// end inline asm
	st.shared.u32 	[%rd24], %r768;
	st.shared.u32 	[%rd26+512], %r776;
	st.shared.u32 	[%rd26+256], %r772;
	st.shared.u32 	[%rd26+768], %r780;
	and.b32  	%r883, %r843, 31;
	add.s32 	%r884, %r883, %r833;
	mul.wide.u32 	%rd178, %r884, 4;
	add.s64 	%rd180, %rd102, %rd178;
	st.shared.u32 	[%rd180], %r784;
	cvt.u64.u32 	%rd181, %r883;
	add.s64 	%rd182, %rd25, %rd181;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd102, %rd183;
	st.shared.u32 	[%rd184+512], %r792;
	st.shared.u32 	[%rd184+256], %r788;
	st.shared.u32 	[%rd184+768], %r796;
	st.shared.u32 	[%rd26+128], %r800;
	st.shared.u32 	[%rd26+640], %r808;
	st.shared.u32 	[%rd26+384], %r804;
	st.shared.u32 	[%rd26+896], %r812;
	st.shared.u32 	[%rd184+128], %r816;
	st.shared.u32 	[%rd184+640], %r824;
	st.shared.u32 	[%rd184+384], %r820;
	st.shared.u32 	[%rd184+896], %r828;
	bar.sync 	0;
	ld.shared.u32 	%r885, [%rd27];
	ld.shared.u32 	%r886, [%rd28];
	ld.shared.u32 	%r887, [%rd29];
	ld.shared.u32 	%r888, [%rd30];
	ld.shared.u32 	%r889, [%rd31];
	ld.shared.u32 	%r890, [%rd32];
	ld.shared.u32 	%r891, [%rd33];
	ld.shared.u32 	%r892, [%rd34];
	ld.shared.u32 	%r893, [%rd35];
	ld.shared.u32 	%r894, [%rd36];
	ld.shared.u32 	%r895, [%rd37];
	ld.shared.u32 	%r896, [%rd38];
	ld.shared.u32 	%r897, [%rd39];
	ld.shared.u32 	%r898, [%rd40];
	ld.shared.u32 	%r899, [%rd41];
	ld.shared.u32 	%r900, [%rd42];
	bar.sync 	0;
	shfl.sync.idx.b32	%r901, %r185, 0, 31, -1;
	shfl.sync.idx.b32	%r902, %r185, 1, 31, -1;
	shfl.sync.idx.b32	%r903, %r185, 2, 31, -1;
	shfl.sync.idx.b32	%r904, %r185, 3, 31, -1;
	shfl.sync.idx.b32	%r905, %r185, 4, 31, -1;
	shfl.sync.idx.b32	%r906, %r185, 5, 31, -1;
	shfl.sync.idx.b32	%r907, %r185, 6, 31, -1;
	shfl.sync.idx.b32	%r908, %r185, 7, 31, -1;
	shfl.sync.idx.b32	%r909, %r185, 8, 31, -1;
	shfl.sync.idx.b32	%r910, %r185, 9, 31, -1;
	shfl.sync.idx.b32	%r911, %r185, 10, 31, -1;
	shfl.sync.idx.b32	%r912, %r185, 11, 31, -1;
	shfl.sync.idx.b32	%r913, %r185, 12, 31, -1;
	shfl.sync.idx.b32	%r914, %r185, 13, 31, -1;
	shfl.sync.idx.b32	%r915, %r185, 14, 31, -1;
	shfl.sync.idx.b32	%r916, %r185, 15, 31, -1;
	add.s32 	%r917, %r901, %r5;
	mul.wide.s32 	%rd185, %r917, 4;
	add.s64 	%rd186, %rd102, %rd185;
	st.shared.u32 	[%rd186], %r885;
	add.s32 	%r918, %r902, %r5;
	mul.wide.s32 	%rd187, %r918, 4;
	add.s64 	%rd188, %rd102, %rd187;
	st.shared.u32 	[%rd188], %r886;
	add.s32 	%r919, %r903, %r5;
	mul.wide.s32 	%rd189, %r919, 4;
	add.s64 	%rd190, %rd102, %rd189;
	st.shared.u32 	[%rd190], %r887;
	add.s32 	%r920, %r904, %r5;
	mul.wide.s32 	%rd191, %r920, 4;
	add.s64 	%rd192, %rd102, %rd191;
	st.shared.u32 	[%rd192], %r888;
	add.s32 	%r921, %r905, %r5;
	mul.wide.s32 	%rd193, %r921, 4;
	add.s64 	%rd194, %rd102, %rd193;
	st.shared.u32 	[%rd194], %r889;
	add.s32 	%r922, %r906, %r5;
	mul.wide.s32 	%rd195, %r922, 4;
	add.s64 	%rd196, %rd102, %rd195;
	st.shared.u32 	[%rd196], %r890;
	add.s32 	%r923, %r907, %r5;
	mul.wide.s32 	%rd197, %r923, 4;
	add.s64 	%rd198, %rd102, %rd197;
	st.shared.u32 	[%rd198], %r891;
	add.s32 	%r924, %r908, %r5;
	mul.wide.s32 	%rd199, %r924, 4;
	add.s64 	%rd200, %rd102, %rd199;
	st.shared.u32 	[%rd200], %r892;
	add.s32 	%r925, %r909, %r5;
	mul.wide.s32 	%rd201, %r925, 4;
	add.s64 	%rd202, %rd102, %rd201;
	st.shared.u32 	[%rd202], %r893;
	add.s32 	%r926, %r910, %r5;
	mul.wide.s32 	%rd203, %r926, 4;
	add.s64 	%rd204, %rd102, %rd203;
	st.shared.u32 	[%rd204], %r894;
	add.s32 	%r927, %r911, %r5;
	mul.wide.s32 	%rd205, %r927, 4;
	add.s64 	%rd206, %rd102, %rd205;
	st.shared.u32 	[%rd206], %r895;
	add.s32 	%r928, %r912, %r5;
	mul.wide.s32 	%rd207, %r928, 4;
	add.s64 	%rd208, %rd102, %rd207;
	st.shared.u32 	[%rd208], %r896;
	add.s32 	%r929, %r913, %r5;
	mul.wide.s32 	%rd209, %r929, 4;
	add.s64 	%rd210, %rd102, %rd209;
	st.shared.u32 	[%rd210], %r897;
	add.s32 	%r930, %r914, %r5;
	mul.wide.s32 	%rd211, %r930, 4;
	add.s64 	%rd212, %rd102, %rd211;
	st.shared.u32 	[%rd212], %r898;
	add.s32 	%r931, %r915, %r5;
	mul.wide.s32 	%rd213, %r931, 4;
	add.s64 	%rd214, %rd102, %rd213;
	st.shared.u32 	[%rd214], %r899;
	add.s32 	%r932, %r916, %r5;
	mul.wide.s32 	%rd215, %r932, 4;
	add.s64 	%rd216, %rd102, %rd215;
	st.shared.u32 	[%rd216], %r900;
	bar.sync 	0;
	ld.shared.u32 	%r91, [%rd43];
	ld.shared.u32 	%r92, [%rd44];
	ld.shared.u32 	%r93, [%rd45];
	ld.shared.u32 	%r94, [%rd46];
	ld.shared.u32 	%r95, [%rd47];
	ld.shared.u32 	%r96, [%rd48];
	ld.shared.u32 	%r97, [%rd49];
	ld.shared.u32 	%r98, [%rd50];
	ld.shared.u32 	%r99, [%rd51];
	ld.shared.u32 	%r100, [%rd52];
	ld.shared.u32 	%r101, [%rd53];
	ld.shared.u32 	%r102, [%rd54];
	ld.shared.u32 	%r103, [%rd55];
	ld.shared.u32 	%r104, [%rd56];
	ld.shared.u32 	%r105, [%rd57];
	ld.shared.u32 	%r106, [%rd58];
	bar.sync 	0;
	mov.u32 	%r3500, 16;
	bra.uni 	$L__BB0_125;
$L__BB0_142:                            // %L24347
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
$L__BB0_143:                            // %L24348
                                        //   in Loop: Header=BB0_125 Depth=2
	bar.sync 	0;
	add.s32 	%r3500, %r3500, -8;
	setp.ne.s32 	%p237, %r3500, -16;
	@%p237 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_144;
$L__BB0_125:                            // %L10245
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p217, %r3500, 16;
	selp.b32 	%r1325, %r91, 0, %p217;
	setp.eq.s32 	%p218, %r3500, 8;
	selp.b32 	%r1326, %r95, %r1325, %p218;
	setp.eq.s32 	%p219, %r3500, 0;
	selp.b32 	%r1327, %r99, %r1326, %p219;
	setp.eq.s32 	%p220, %r3500, -8;
	selp.b32 	%r1328, %r103, %r1327, %p220;
	selp.b32 	%r1329, %r92, 0, %p217;
	selp.b32 	%r1330, %r96, %r1329, %p218;
	selp.b32 	%r1331, %r100, %r1330, %p219;
	selp.b32 	%r1332, %r104, %r1331, %p220;
	selp.b32 	%r1333, %r93, 0, %p217;
	selp.b32 	%r1334, %r97, %r1333, %p218;
	selp.b32 	%r1335, %r101, %r1334, %p219;
	selp.b32 	%r1336, %r105, %r1335, %p220;
	selp.b32 	%r1337, %r94, 0, %p217;
	selp.b32 	%r1338, %r98, %r1337, %p218;
	selp.b32 	%r1339, %r102, %r1338, %p219;
	selp.b32 	%r1340, %r106, %r1339, %p220;
	// begin inline asm
	mov.b32 %r938, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r937, %r1328, -2004318072;
	mov.u32 	%r1074, 983055;
	// begin inline asm
	lop3.b32 %r935, %r1074, %r937, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r940, %r938, %r939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r943, %r935, %r940;
	// end inline asm
	mov.u32 	%r1085, 15728880;
	// begin inline asm
	lop3.b32 %r946, %r1085, %r937, %r949, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r950, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r951, %r949, %r950;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r954, %r946, %r951;
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r983, %r1332, -2004318072;
	// begin inline asm
	lop3.b32 %r981, %r1074, %r983, %r984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r986, %r984, %r985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r989, %r981, %r986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r992, %r1085, %r983, %r995, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r996, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r997, %r995, %r996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1000, %r992, %r997;
	// end inline asm
	// begin inline asm
	mov.b32 %r1030, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1029, %r1336, -2004318072;
	// begin inline asm
	lop3.b32 %r1027, %r1074, %r1029, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1032, %r1030, %r1031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1035, %r1027, %r1032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1038, %r1085, %r1029, %r1041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1042, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1043, %r1041, %r1042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1046, %r1038, %r1043;
	// end inline asm
	// begin inline asm
	mov.b32 %r1076, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1087, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1075, %r1340, -2004318072;
	// begin inline asm
	lop3.b32 %r1073, %r1074, %r1075, %r1076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1077, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1078, %r1076, %r1077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1081, %r1073, %r1078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1084, %r1085, %r1075, %r1087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1088, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1089, %r1087, %r1088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1092, %r1084, %r1089;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1117, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r954;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1120, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r989;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1123, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1000;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1126, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r1035;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1129, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1046;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1132, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r1081;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1135, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1092;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1138, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1196, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1141, %r1142}, {%r285, %r288}, {%r1117}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1148, %r1149}, {%r285, %r288}, {%r1120}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1155, %r1156}, {%r285, %r288}, {%r1123}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1162, %r1163}, {%r285, %r288}, {%r1126}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1170}, {%r285, %r288}, {%r1129}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r285, %r288}, {%r1132}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r285, %r288}, {%r1135}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1191}, {%r285, %r288}, {%r1138}, {%r1196, %r1196};
	// end inline asm
	@%p1 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_126;
$L__BB0_198:                            // %pass4679
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1197, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r1197, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r323, %r1141, %r1199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1206, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r1206, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r323, %r1148, %r1208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1215, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r1215, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r323, %r1155, %r1217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1224, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1226, %r1224, %r1163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r323, %r1162, %r1226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1233, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r1233, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r323, %r1169, %r1235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1242, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1244, %r1242, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r323, %r1176, %r1244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1251, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1253, %r1251, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r323, %r1183, %r1253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1260, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1262, %r1260, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r323, %r1190, %r1262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1269, %r326, %r1141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1272, %r323, %r1142, %r1269;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r326, %r1148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r323, %r1149, %r1276;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r326, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r323, %r1156, %r1283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r326, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r323, %r1163, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r326, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r323, %r1170, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r326, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r323, %r1177, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r326, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r323, %r1184, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r326, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r323, %r1191, %r1318;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1414, %r1415}, {%r370, %r373}, {%r1202, %r1272}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1422, %r1423}, {%r370, %r373}, {%r1211, %r1279}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1430, %r1431}, {%r370, %r373}, {%r1220, %r1286}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1438, %r1439}, {%r370, %r373}, {%r1229, %r1293}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1446, %r1447}, {%r370, %r373}, {%r1238, %r1300}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1454, %r1455}, {%r370, %r373}, {%r1247, %r1307}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1462, %r1463}, {%r370, %r373}, {%r1256, %r1314}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1470, %r1471}, {%r370, %r373}, {%r1265, %r1321}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1413, %r1414, %r1415, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1417, %r1414, %r1415, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1421, %r1422, %r1423, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1425, %r1422, %r1423, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1429, %r1430, %r1431, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1433, %r1430, %r1431, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1437, %r1438, %r1439, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1441, %r1438, %r1439, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1445, %r1446, %r1447, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1449, %r1446, %r1447, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1453, %r1454, %r1455, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1457, %r1454, %r1455, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1461, %r1462, %r1463, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1465, %r1462, %r1463, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1469, %r1470, %r1471, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1473, %r1470, %r1471, %r831;
	// end inline asm
	st.shared.u32 	[%rd59], %r1413;
	st.shared.u32 	[%rd60], %r1417;
	st.shared.u32 	[%rd61], %r1421;
	st.shared.u32 	[%rd62], %r1425;
	st.shared.u32 	[%rd63], %r1429;
	st.shared.u32 	[%rd64], %r1433;
	st.shared.u32 	[%rd65], %r1437;
	st.shared.u32 	[%rd66], %r1441;
	st.shared.u32 	[%rd67], %r1445;
	st.shared.u32 	[%rd68], %r1449;
	st.shared.u32 	[%rd69], %r1453;
	st.shared.u32 	[%rd70], %r1457;
	st.shared.u32 	[%rd71], %r1461;
	st.shared.u32 	[%rd72], %r1465;
	st.shared.u32 	[%rd73], %r1469;
	st.shared.u32 	[%rd74], %r1473;
	bar.sync 	0;
	ld.shared.u32 	%r1481, [%rd22];
	ld.shared.u32 	%r1488, [%rd23];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1498, %r1495}, {%r382, %r385}, {%r1481}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1507, %r1504}, {%r382, %r385}, {%r1488}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1491, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r1491, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r416, %r1498, %r1493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1500, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1502, %r1500, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1505, %r416, %r1507, %r1502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1509, %r419, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r416, %r1495, %r1509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r419, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r416, %r1504, %r1516;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1542, %r1545}, {%r458, %r461}, {%r1496, %r1512}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1549, %r1553}, {%r458, %r461}, {%r1505, %r1519}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1541, %r1542, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1544, %r1545, %r1545, %r1541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r1549, %r1549, %r1544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r1553, %r1553, %r1548;
	// end inline asm
	mov.u32 	%r1557, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3521, %r1557, %r1552, %r3503;
	// end inline asm
	add.s32 	%r3519, %r3501, 1;
	setp.eq.s32 	%p221, %r3519, 25;
	@%p221 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_199;
$L__BB0_127:                            // %L16294
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p222, %r5, 16;
	@%p222 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_128;
$L__BB0_197:                            // %pass7367
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1560, %r3520, 9;
	or.b32  	%r1561, %r1560, %r195;
	add.s32 	%r1562, %r1561, %r197;
	or.b32  	%r1563, %r1562, %r196;
	mul.wide.u32 	%rd219, %r1563, 4;
	add.s64 	%rd6, %rd4, %rd219;
	st.global.u32 	[%rd6], %r3521;
$L__BB0_128:                            // %L16493
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3519, 0;
	mov.u32 	%r3521, %r3519;
$L__BB0_199:                            // %pass7610
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1569, [%rd75];
	ld.shared.u32 	%r1576, [%rd76];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1586, %r1583}, {%r382, %r385}, {%r1569}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1595, %r1592}, {%r382, %r385}, {%r1576}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1579, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1579, %r1583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r416, %r1586, %r1581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r416, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r419, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r416, %r1583, %r1597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r419, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r416, %r1592, %r1604;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1630, %r1633}, {%r458, %r461}, {%r1584, %r1600}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1637, %r1641}, {%r458, %r461}, {%r1593, %r1607}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r1630, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r1633, %r1633, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1636, %r1637, %r1637, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1640, %r1641, %r1641, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r1557, %r1640, %r3521;
	// end inline asm
	add.s32 	%r3522, %r3519, 1;
	setp.eq.s32 	%p223, %r3522, 25;
	@%p223 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_200;
$L__BB0_129:                            // %L17416
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p224, %r5, 16;
	@%p224 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_130;
$L__BB0_215:                            // %pass7850
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1648, %r3520, 9;
	or.b32  	%r1649, %r1648, %r195;
	add.s32 	%r1650, %r1649, %r197;
	or.b32  	%r1651, %r1650, %r196;
	mul.wide.u32 	%rd220, %r1651, 4;
	add.s64 	%rd7, %rd4, %rd220;
	st.global.u32 	[%rd7], %r3524;
$L__BB0_130:                            // %L17615
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3522, 0;
	mov.u32 	%r3524, %r3522;
$L__BB0_200:                            // %pass8093
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1657, [%rd77];
	ld.shared.u32 	%r1664, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1674, %r1671}, {%r382, %r385}, {%r1657}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1683, %r1680}, {%r382, %r385}, {%r1664}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1667, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r1667, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r416, %r1674, %r1669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r416, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r419, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r416, %r1671, %r1685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r419, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r416, %r1680, %r1692;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1718, %r1721}, {%r458, %r461}, {%r1672, %r1688}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1729}, {%r458, %r461}, {%r1681, %r1695}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1718, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r1721, %r1721, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r1557, %r1728, %r3524;
	// end inline asm
	add.s32 	%r3525, %r3522, 1;
	setp.eq.s32 	%p225, %r3525, 25;
	@%p225 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_201;
$L__BB0_131:                            // %L18538
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p226, %r5, 16;
	@%p226 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_132;
$L__BB0_216:                            // %pass8333
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1736, %r3520, 9;
	or.b32  	%r1737, %r1736, %r195;
	add.s32 	%r1738, %r1737, %r197;
	or.b32  	%r1739, %r1738, %r196;
	mul.wide.u32 	%rd221, %r1739, 4;
	add.s64 	%rd8, %rd4, %rd221;
	st.global.u32 	[%rd8], %r3527;
$L__BB0_132:                            // %L18737
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3525, 0;
	mov.u32 	%r3527, %r3525;
$L__BB0_201:                            // %pass8576
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1745, [%rd79];
	ld.shared.u32 	%r1752, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1762, %r1759}, {%r382, %r385}, {%r1745}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1771, %r1768}, {%r382, %r385}, {%r1752}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1755, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1757, %r1755, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r416, %r1762, %r1757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1764, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r1764, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r416, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r419, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r416, %r1759, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r419, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r416, %r1768, %r1780;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1809}, {%r458, %r461}, {%r1760, %r1776}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1813, %r1817}, {%r458, %r461}, {%r1769, %r1783}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1806, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r1557, %r1816, %r3527;
	// end inline asm
	add.s32 	%r3528, %r3525, 1;
	setp.eq.s32 	%p227, %r3528, 25;
	@%p227 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_202;
$L__BB0_133:                            // %L19660
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p228, %r5, 16;
	@%p228 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_134;
$L__BB0_217:                            // %pass8816
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1824, %r3520, 9;
	or.b32  	%r1825, %r1824, %r195;
	add.s32 	%r1826, %r1825, %r197;
	or.b32  	%r1827, %r1826, %r196;
	mul.wide.u32 	%rd222, %r1827, 4;
	add.s64 	%rd9, %rd4, %rd222;
	st.global.u32 	[%rd9], %r3530;
$L__BB0_134:                            // %L19859
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3528, 0;
	mov.u32 	%r3530, %r3528;
$L__BB0_202:                            // %pass9059
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1833, [%rd81];
	ld.shared.u32 	%r1840, [%rd82];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1850, %r1847}, {%r382, %r385}, {%r1833}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1859, %r1856}, {%r382, %r385}, {%r1840}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1843, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r1843, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r416, %r1850, %r1845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1852, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1852, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r416, %r1859, %r1854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r419, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r416, %r1847, %r1861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r419, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r416, %r1856, %r1868;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1894, %r1897}, {%r458, %r461}, {%r1848, %r1864}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1901, %r1905}, {%r458, %r461}, {%r1857, %r1871}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1893, %r1894, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1897, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1901, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r1905, %r1905, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r1557, %r1904, %r3530;
	// end inline asm
	add.s32 	%r3531, %r3528, 1;
	setp.eq.s32 	%p229, %r3531, 25;
	@%p229 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_203;
$L__BB0_135:                            // %L20782
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p230, %r5, 16;
	@%p230 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_136;
$L__BB0_218:                            // %pass9299
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1912, %r3520, 9;
	or.b32  	%r1913, %r1912, %r195;
	add.s32 	%r1914, %r1913, %r197;
	or.b32  	%r1915, %r1914, %r196;
	mul.wide.u32 	%rd223, %r1915, 4;
	add.s64 	%rd10, %rd4, %rd223;
	st.global.u32 	[%rd10], %r3533;
$L__BB0_136:                            // %L20981
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3531, 0;
	mov.u32 	%r3533, %r3531;
$L__BB0_203:                            // %pass9542
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1921, [%rd83];
	ld.shared.u32 	%r1928, [%rd84];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1938, %r1935}, {%r382, %r385}, {%r1921}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1947, %r1944}, {%r382, %r385}, {%r1928}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1931, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r1931, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r416, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r416, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r419, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r416, %r1935, %r1949;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r419, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r416, %r1944, %r1956;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1982, %r1985}, {%r458, %r461}, {%r1936, %r1952}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1989, %r1993}, {%r458, %r461}, {%r1945, %r1959}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r1982, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r1989, %r1989, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r1993, %r1993, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r1557, %r1992, %r3533;
	// end inline asm
	add.s32 	%r3534, %r3531, 1;
	setp.eq.s32 	%p231, %r3534, 25;
	@%p231 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_204;
$L__BB0_137:                            // %L21904
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p232, %r5, 16;
	@%p232 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_138;
$L__BB0_219:                            // %pass9782
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2000, %r3520, 9;
	or.b32  	%r2001, %r2000, %r195;
	add.s32 	%r2002, %r2001, %r197;
	or.b32  	%r2003, %r2002, %r196;
	mul.wide.u32 	%rd224, %r2003, 4;
	add.s64 	%rd11, %rd4, %rd224;
	st.global.u32 	[%rd11], %r3536;
$L__BB0_138:                            // %L22103
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3534, 0;
	mov.u32 	%r3536, %r3534;
$L__BB0_204:                            // %pass10025
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2009, [%rd85];
	ld.shared.u32 	%r2016, [%rd86];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2026, %r2023}, {%r382, %r385}, {%r2009}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2035, %r2032}, {%r382, %r385}, {%r2016}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2019, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r2019, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r416, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2028, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2030, %r2028, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r416, %r2035, %r2030;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r419, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r416, %r2023, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r419, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r416, %r2032, %r2044;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2070, %r2073}, {%r458, %r461}, {%r2024, %r2040}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2077, %r2081}, {%r458, %r461}, {%r2033, %r2047}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r2070, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r2073, %r2073, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r2077, %r2077, %r2072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r2081, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r1557, %r2080, %r3536;
	// end inline asm
	add.s32 	%r3537, %r3534, 1;
	setp.eq.s32 	%p233, %r3537, 25;
	@%p233 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_205;
$L__BB0_139:                            // %L23026
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p234, %r5, 16;
	@%p234 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_140;
$L__BB0_220:                            // %pass10265
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2088, %r3520, 9;
	or.b32  	%r2089, %r2088, %r195;
	add.s32 	%r2090, %r2089, %r197;
	or.b32  	%r2091, %r2090, %r196;
	mul.wide.u32 	%rd225, %r2091, 4;
	add.s64 	%rd12, %rd4, %rd225;
	st.global.u32 	[%rd12], %r3539;
$L__BB0_140:                            // %L23225
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3537, 0;
	mov.u32 	%r3539, %r3537;
$L__BB0_205:                            // %pass10508
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2097, [%rd87];
	ld.shared.u32 	%r2104, [%rd88];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2114, %r2111}, {%r382, %r385}, {%r2097}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2123, %r2120}, {%r382, %r385}, {%r2104}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2107, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r2107, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r416, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2116, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r2116, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r416, %r2123, %r2118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r419, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r416, %r2111, %r2125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r419, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r416, %r2120, %r2132;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2158, %r2161}, {%r458, %r461}, {%r2112, %r2128}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2165, %r2169}, {%r458, %r461}, {%r2121, %r2135}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2157, %r2158, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r2161, %r2161, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r2165, %r2165, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r2169, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1557, %r2168, %r3539;
	// end inline asm
	add.s32 	%r3501, %r3537, 1;
	setp.eq.s32 	%p235, %r3501, 25;
	@%p235 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_143;
$L__BB0_141:                            // %L24148
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p236, %r5, 16;
	@%p236 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_142;
$L__BB0_206:                            // %pass10748
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2176, %r3520, 9;
	or.b32  	%r2177, %r2176, %r195;
	add.s32 	%r2178, %r2177, %r197;
	or.b32  	%r2179, %r2178, %r196;
	mul.wide.u32 	%rd226, %r2179, 4;
	add.s64 	%rd13, %rd4, %rd226;
	st.global.u32 	[%rd13], %r3503;
	bra.uni 	$L__BB0_142;
$L__BB0_144:                            // %L24369.preheader
                                        //   in Loop: Header=BB0_124 Depth=1
	or.b32  	%r139, %r3496, 32;
	or.b32  	%r140, %r3496, 34;
	or.b32  	%r141, %r3496, 36;
	or.b32  	%r142, %r3496, 38;
	mov.u32 	%r3510, %r1196;
	bra.uni 	$L__BB0_145;
$L__BB0_168:                            // %L38471
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3501, %r2925;
	mov.u32 	%r3503, %r2925;
$L__BB0_169:                            // %L38472
                                        //   in Loop: Header=BB0_145 Depth=2
	bar.sync 	0;
	add.s32 	%r3510, %r3510, 8;
	setp.ne.s32 	%p258, %r3510, 32;
	@%p258 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_170;
$L__BB0_145:                            // %L24369
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p238, %r3510, 0;
	selp.b32 	%r2793, %r91, 0, %p238;
	setp.eq.s32 	%p239, %r3510, 8;
	selp.b32 	%r2794, %r95, %r2793, %p239;
	setp.eq.s32 	%p240, %r3510, 16;
	selp.b32 	%r2795, %r99, %r2794, %p240;
	setp.eq.s32 	%p241, %r3510, 24;
	selp.b32 	%r2796, %r103, %r2795, %p241;
	selp.b32 	%r2797, %r92, 0, %p238;
	selp.b32 	%r2798, %r96, %r2797, %p239;
	selp.b32 	%r2799, %r100, %r2798, %p240;
	selp.b32 	%r2800, %r104, %r2799, %p241;
	selp.b32 	%r2801, %r93, 0, %p238;
	selp.b32 	%r2802, %r97, %r2801, %p239;
	selp.b32 	%r2803, %r101, %r2802, %p240;
	selp.b32 	%r2804, %r105, %r2803, %p241;
	selp.b32 	%r2805, %r94, 0, %p238;
	selp.b32 	%r2806, %r98, %r2805, %p239;
	selp.b32 	%r2807, %r102, %r2806, %p240;
	selp.b32 	%r2808, %r106, %r2807, %p241;
	// begin inline asm
	mov.b32 %r2209, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2809, %r2796, 8;
	xor.b32  	%r2219, %r2809, 8947848;
	// begin inline asm
	lop3.b32 %r2206, %r1074, %r2219, %r2209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2211, %r2209, %r2210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2214, %r2206, %r2211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2217, %r1085, %r2219, %r2220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2222, %r2220, %r2221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2225, %r2217, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2810, %r2800, 8;
	xor.b32  	%r2265, %r2810, 8947848;
	// begin inline asm
	lop3.b32 %r2252, %r1074, %r2265, %r2255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2257, %r2255, %r2256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2260, %r2252, %r2257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2263, %r1085, %r2265, %r2266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2268, %r2266, %r2267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2271, %r2263, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2811, %r2804, 8;
	xor.b32  	%r2311, %r2811, 8947848;
	// begin inline asm
	lop3.b32 %r2298, %r1074, %r2311, %r2301, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2301, %r2302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2306, %r2298, %r2303;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2309, %r1085, %r2311, %r2312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2312, %r2313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2317, %r2309, %r2314;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2812, %r2808, 8;
	xor.b32  	%r2357, %r2812, 8947848;
	// begin inline asm
	lop3.b32 %r2344, %r1074, %r2357, %r2347, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2347, %r2348;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2352, %r2344, %r2349;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2355, %r1085, %r2357, %r2358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2358, %r2359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2363, %r2355, %r2360;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2306;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2317;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2352;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2363;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r285, %r288}, {%r2366}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2459}, {%r285, %r288}, {%r2369}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2471, %r2468}, {%r285, %r288}, {%r2372}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2480, %r2477}, {%r285, %r288}, {%r2375}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2489, %r2486}, {%r285, %r288}, {%r2378}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r285, %r288}, {%r2381}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2507, %r2504}, {%r285, %r288}, {%r2384}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2516, %r2513}, {%r285, %r288}, {%r2387}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r323, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2455, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2455, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r323, %r2462, %r2457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2464, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r2464, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r323, %r2471, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2473, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2475, %r2473, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r323, %r2480, %r2475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2482, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r2482, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r323, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r323, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2500, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r2500, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r323, %r2507, %r2502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2509, %r326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2511, %r2509, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r323, %r2516, %r2511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2518, %r326, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2521, %r323, %r2450, %r2518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r326, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r323, %r2459, %r2525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r326, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r323, %r2468, %r2532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r326, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r323, %r2477, %r2539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2546, %r326, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2549, %r323, %r2486, %r2546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2553, %r326, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2556, %r323, %r2495, %r2553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r326, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r323, %r2504, %r2560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r326, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r323, %r2513, %r2567;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2647, %r2648}, {%r370, %r373}, {%r2451, %r2521}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2655, %r2656}, {%r370, %r373}, {%r2460, %r2528}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2663, %r2664}, {%r370, %r373}, {%r2469, %r2535}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2671, %r2672}, {%r370, %r373}, {%r2478, %r2542}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2679, %r2680}, {%r370, %r373}, {%r2487, %r2549}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2687, %r2688}, {%r370, %r373}, {%r2496, %r2556}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2695, %r2696}, {%r370, %r373}, {%r2505, %r2563}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2703, %r2704}, {%r370, %r373}, {%r2514, %r2570}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2647, %r2648, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2647, %r2648, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2655, %r2656, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2655, %r2656, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2663, %r2664, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2663, %r2664, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2671, %r2672, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2674, %r2671, %r2672, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2678, %r2679, %r2680, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2682, %r2679, %r2680, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2686, %r2687, %r2688, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2690, %r2687, %r2688, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2694, %r2695, %r2696, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2698, %r2695, %r2696, %r831;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2702, %r2703, %r2704, %r827;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2706, %r2703, %r2704, %r831;
	// end inline asm
	or.b32  	%r2813, %r3510, %r190;
	add.s32 	%r2814, %r139, %r2813;
	shr.s32 	%r2815, %r2814, 31;
	shr.u32 	%r2816, %r2815, 29;
	add.s32 	%r2817, %r2814, %r2816;
	and.b32  	%r2818, %r2817, 134217720;
	sub.s32 	%r2819, %r2814, %r2818;
	shl.b32 	%r2820, %r2819, 5;
	add.s32 	%r2821, %r191, %r2820;
	mul.wide.s32 	%rd227, %r2821, 4;
	add.s64 	%rd229, %rd102, %rd227;
	st.shared.u32 	[%rd229], %r2646;
	add.s32 	%r2822, %r192, %r2820;
	mul.wide.u32 	%rd230, %r2822, 4;
	add.s64 	%rd231, %rd102, %rd230;
	st.shared.u32 	[%rd231], %r2650;
	add.s32 	%r2823, %r193, %r2820;
	mul.wide.s32 	%rd232, %r2823, 4;
	add.s64 	%rd233, %rd102, %rd232;
	st.shared.u32 	[%rd233], %r2654;
	add.s32 	%r2824, %r194, %r2820;
	mul.wide.u32 	%rd234, %r2824, 4;
	add.s64 	%rd235, %rd102, %rd234;
	st.shared.u32 	[%rd235], %r2658;
	add.s32 	%r2825, %r140, %r2813;
	shr.s32 	%r2826, %r2825, 31;
	shr.u32 	%r2827, %r2826, 29;
	add.s32 	%r2828, %r2825, %r2827;
	and.b32  	%r2829, %r2828, 134217720;
	sub.s32 	%r2830, %r2825, %r2829;
	shl.b32 	%r2831, %r2830, 5;
	add.s32 	%r2832, %r191, %r2831;
	mul.wide.s32 	%rd236, %r2832, 4;
	add.s64 	%rd237, %rd102, %rd236;
	st.shared.u32 	[%rd237], %r2662;
	add.s32 	%r2833, %r192, %r2831;
	mul.wide.u32 	%rd238, %r2833, 4;
	add.s64 	%rd239, %rd102, %rd238;
	st.shared.u32 	[%rd239], %r2666;
	add.s32 	%r2834, %r193, %r2831;
	mul.wide.s32 	%rd240, %r2834, 4;
	add.s64 	%rd241, %rd102, %rd240;
	st.shared.u32 	[%rd241], %r2670;
	add.s32 	%r2835, %r194, %r2831;
	mul.wide.u32 	%rd242, %r2835, 4;
	add.s64 	%rd243, %rd102, %rd242;
	st.shared.u32 	[%rd243], %r2674;
	add.s32 	%r2836, %r141, %r2813;
	shr.s32 	%r2837, %r2836, 31;
	shr.u32 	%r2838, %r2837, 29;
	add.s32 	%r2839, %r2836, %r2838;
	and.b32  	%r2840, %r2839, 134217720;
	sub.s32 	%r2841, %r2836, %r2840;
	shl.b32 	%r2842, %r2841, 5;
	add.s32 	%r2843, %r191, %r2842;
	mul.wide.s32 	%rd244, %r2843, 4;
	add.s64 	%rd245, %rd102, %rd244;
	st.shared.u32 	[%rd245], %r2678;
	add.s32 	%r2844, %r192, %r2842;
	mul.wide.u32 	%rd246, %r2844, 4;
	add.s64 	%rd247, %rd102, %rd246;
	st.shared.u32 	[%rd247], %r2682;
	add.s32 	%r2845, %r193, %r2842;
	mul.wide.s32 	%rd248, %r2845, 4;
	add.s64 	%rd249, %rd102, %rd248;
	st.shared.u32 	[%rd249], %r2686;
	add.s32 	%r2846, %r194, %r2842;
	mul.wide.u32 	%rd250, %r2846, 4;
	add.s64 	%rd251, %rd102, %rd250;
	st.shared.u32 	[%rd251], %r2690;
	add.s32 	%r2847, %r142, %r2813;
	shr.s32 	%r2848, %r2847, 31;
	shr.u32 	%r2849, %r2848, 29;
	add.s32 	%r2850, %r2847, %r2849;
	and.b32  	%r2851, %r2850, 134217720;
	sub.s32 	%r2852, %r2847, %r2851;
	shl.b32 	%r2853, %r2852, 5;
	add.s32 	%r2854, %r191, %r2853;
	mul.wide.s32 	%rd252, %r2854, 4;
	add.s64 	%rd253, %rd102, %rd252;
	st.shared.u32 	[%rd253], %r2694;
	add.s32 	%r2855, %r192, %r2853;
	mul.wide.u32 	%rd254, %r2855, 4;
	add.s64 	%rd255, %rd102, %rd254;
	st.shared.u32 	[%rd255], %r2698;
	add.s32 	%r2856, %r193, %r2853;
	mul.wide.s32 	%rd256, %r2856, 4;
	add.s64 	%rd257, %rd102, %rd256;
	st.shared.u32 	[%rd257], %r2702;
	add.s32 	%r2857, %r194, %r2853;
	mul.wide.u32 	%rd258, %r2857, 4;
	add.s64 	%rd259, %rd102, %rd258;
	st.shared.u32 	[%rd259], %r2706;
	bar.sync 	0;
	ld.shared.u32 	%r2714, [%rd22];
	ld.shared.u32 	%r2721, [%rd23];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2731, %r2728}, {%r382, %r385}, {%r2714}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r382, %r385}, {%r2721}, {%r1196, %r1196};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r416, %r2731, %r2726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r416, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r419, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r416, %r2728, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r419, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r416, %r2737, %r2749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2775, %r2778}, {%r458, %r461}, {%r2729, %r2745}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2786}, {%r458, %r461}, {%r2738, %r2752}, {%r1196, %r1196}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2775, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r1557, %r2785, %r3503;
	// end inline asm
	add.s32 	%r3540, %r3501, 1;
	setp.ne.s32 	%p242, %r3540, 25;
	@%p242 bra 	$L__BB0_148;
// %bb.146:                             // %L30418
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p243, %r5, 16;
	@%p243 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_147;
$L__BB0_207:                            // %pass13560
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r2858, %r3520, 9;
	or.b32  	%r2859, %r2858, %r195;
	add.s32 	%r2860, %r2859, %r197;
	or.b32  	%r2861, %r2860, %r196;
	mul.wide.u32 	%rd260, %r2861, 4;
	add.s64 	%rd14, %rd4, %rd260;
	st.global.u32 	[%rd14], %r3542;
$L__BB0_147:                            // %L30617
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3540, 0;
	mov.u32 	%r3542, %r3540;
$L__BB0_148:                            // %pass13803
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r2867, [%rd75];
	ld.shared.u32 	%r2874, [%rd76];
	mov.u32 	%r2925, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2884, %r2881}, {%r382, %r385}, {%r2867}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2893, %r2890}, {%r382, %r385}, {%r2874}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2877, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r2877, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r416, %r2884, %r2879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2886, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r2886, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r416, %r2893, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r419, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r416, %r2881, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r419, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r416, %r2890, %r2902;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2928, %r2931}, {%r458, %r461}, {%r2882, %r2898}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2935, %r2939}, {%r458, %r461}, {%r2891, %r2905}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2928, %r2928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r2931, %r2931, %r2927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r2935, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r2939, %r2939, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r1557, %r2938, %r3542;
	// end inline asm
	add.s32 	%r3543, %r3540, 1;
	setp.eq.s32 	%p244, %r3543, 25;
	@%p244 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_151;
$L__BB0_149:                            // %L31540
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p245, %r5, 16;
	@%p245 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_150;
$L__BB0_208:                            // %pass14043
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r2946, %r3520, 9;
	or.b32  	%r2947, %r2946, %r195;
	add.s32 	%r2948, %r2947, %r197;
	or.b32  	%r2949, %r2948, %r196;
	mul.wide.u32 	%rd261, %r2949, 4;
	add.s64 	%rd15, %rd4, %rd261;
	st.global.u32 	[%rd15], %r3545;
$L__BB0_150:                            // %L31739
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3543, 0;
	mov.u32 	%r3545, %r3543;
$L__BB0_151:                            // %pass14286
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r2955, [%rd77];
	ld.shared.u32 	%r2962, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2972, %r2969}, {%r382, %r385}, {%r2955}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2981, %r2978}, {%r382, %r385}, {%r2962}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2965, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r2965, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r416, %r2972, %r2967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2974, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r2974, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r416, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r419, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r416, %r2969, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r419, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r416, %r2978, %r2990;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3016, %r3019}, {%r458, %r461}, {%r2970, %r2986}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3023, %r3027}, {%r458, %r461}, {%r2979, %r2993}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r3016, %r3016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r3019, %r3019, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3022, %r3023, %r3023, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r3027, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r1557, %r3026, %r3545;
	// end inline asm
	add.s32 	%r3546, %r3543, 1;
	setp.eq.s32 	%p246, %r3546, 25;
	@%p246 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_154;
$L__BB0_152:                            // %L32662
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p247, %r5, 16;
	@%p247 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_153;
$L__BB0_209:                            // %pass14526
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3034, %r3520, 9;
	or.b32  	%r3035, %r3034, %r195;
	add.s32 	%r3036, %r3035, %r197;
	or.b32  	%r3037, %r3036, %r196;
	mul.wide.u32 	%rd262, %r3037, 4;
	add.s64 	%rd16, %rd4, %rd262;
	st.global.u32 	[%rd16], %r3548;
$L__BB0_153:                            // %L32861
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3546, 0;
	mov.u32 	%r3548, %r3546;
$L__BB0_154:                            // %pass14769
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r3043, [%rd79];
	ld.shared.u32 	%r3050, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3060, %r3057}, {%r382, %r385}, {%r3043}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3069, %r3066}, {%r382, %r385}, {%r3050}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3053, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r3053, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r416, %r3060, %r3055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3062, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r3062, %r3066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r416, %r3069, %r3064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r419, %r3060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r416, %r3057, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r419, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r416, %r3066, %r3078;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3104, %r3107}, {%r458, %r461}, {%r3058, %r3074}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3111, %r3115}, {%r458, %r461}, {%r3067, %r3081}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r3104, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r3107, %r3107, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3110, %r3111, %r3111, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3114, %r3115, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r1557, %r3114, %r3548;
	// end inline asm
	add.s32 	%r3549, %r3546, 1;
	setp.eq.s32 	%p248, %r3549, 25;
	@%p248 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_157;
$L__BB0_155:                            // %L33784
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p249, %r5, 16;
	@%p249 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_156;
$L__BB0_210:                            // %pass15009
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3122, %r3520, 9;
	or.b32  	%r3123, %r3122, %r195;
	add.s32 	%r3124, %r3123, %r197;
	or.b32  	%r3125, %r3124, %r196;
	mul.wide.u32 	%rd263, %r3125, 4;
	add.s64 	%rd17, %rd4, %rd263;
	st.global.u32 	[%rd17], %r3551;
$L__BB0_156:                            // %L33983
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3549, 0;
	mov.u32 	%r3551, %r3549;
$L__BB0_157:                            // %pass15252
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r3131, [%rd81];
	ld.shared.u32 	%r3138, [%rd82];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3148, %r3145}, {%r382, %r385}, {%r3131}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3157, %r3154}, {%r382, %r385}, {%r3138}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3143, %r3141, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r416, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3152, %r3150, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r416, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r419, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r416, %r3145, %r3159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3166, %r419, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r416, %r3154, %r3166;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3192, %r3195}, {%r458, %r461}, {%r3146, %r3162}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3199, %r3203}, {%r458, %r461}, {%r3155, %r3169}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3191, %r3192, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3195, %r3195, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r3199, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3203, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r1557, %r3202, %r3551;
	// end inline asm
	add.s32 	%r3552, %r3549, 1;
	setp.eq.s32 	%p250, %r3552, 25;
	@%p250 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_160;
$L__BB0_158:                            // %L34906
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p251, %r5, 16;
	@%p251 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_159;
$L__BB0_211:                            // %pass15492
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3210, %r3520, 9;
	or.b32  	%r3211, %r3210, %r195;
	add.s32 	%r3212, %r3211, %r197;
	or.b32  	%r3213, %r3212, %r196;
	mul.wide.u32 	%rd264, %r3213, 4;
	add.s64 	%rd18, %rd4, %rd264;
	st.global.u32 	[%rd18], %r3554;
$L__BB0_159:                            // %L35105
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3552, 0;
	mov.u32 	%r3554, %r3552;
$L__BB0_160:                            // %pass15735
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r3219, [%rd83];
	ld.shared.u32 	%r3226, [%rd84];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3236, %r3233}, {%r382, %r385}, {%r3219}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3245, %r3242}, {%r382, %r385}, {%r3226}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3229, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3231, %r3229, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r416, %r3236, %r3231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3238, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3240, %r3238, %r3242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r416, %r3245, %r3240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3247, %r419, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3250, %r416, %r3233, %r3247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3254, %r419, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r416, %r3242, %r3254;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3280, %r3283}, {%r458, %r461}, {%r3234, %r3250}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3287, %r3291}, {%r458, %r461}, {%r3243, %r3257}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3279, %r3280, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3282, %r3283, %r3283, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3286, %r3287, %r3287, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r3291, %r3291, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r1557, %r3290, %r3554;
	// end inline asm
	add.s32 	%r3555, %r3552, 1;
	setp.eq.s32 	%p252, %r3555, 25;
	@%p252 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_163;
$L__BB0_161:                            // %L36028
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p253, %r5, 16;
	@%p253 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_162;
$L__BB0_212:                            // %pass15975
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3298, %r3520, 9;
	or.b32  	%r3299, %r3298, %r195;
	add.s32 	%r3300, %r3299, %r197;
	or.b32  	%r3301, %r3300, %r196;
	mul.wide.u32 	%rd265, %r3301, 4;
	add.s64 	%rd19, %rd4, %rd265;
	st.global.u32 	[%rd19], %r3557;
$L__BB0_162:                            // %L36227
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3555, 0;
	mov.u32 	%r3557, %r3555;
$L__BB0_163:                            // %pass16218
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r3307, [%rd85];
	ld.shared.u32 	%r3314, [%rd86];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3324, %r3321}, {%r382, %r385}, {%r3307}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3333, %r3330}, {%r382, %r385}, {%r3314}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3317, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3319, %r3317, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r416, %r3324, %r3319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3326, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3328, %r3326, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r416, %r3333, %r3328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3335, %r419, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r416, %r3321, %r3335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3342, %r419, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3345, %r416, %r3330, %r3342;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3368, %r3371}, {%r458, %r461}, {%r3322, %r3338}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3375, %r3379}, {%r458, %r461}, {%r3331, %r3345}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3367, %r3368, %r3368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r3371, %r3371, %r3367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r3375, %r3375, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r3379, %r3379, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r1557, %r3378, %r3557;
	// end inline asm
	add.s32 	%r3558, %r3555, 1;
	setp.eq.s32 	%p254, %r3558, 25;
	@%p254 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_166;
$L__BB0_164:                            // %L37150
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p255, %r5, 16;
	@%p255 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_165;
$L__BB0_213:                            // %pass16458
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3386, %r3520, 9;
	or.b32  	%r3387, %r3386, %r195;
	add.s32 	%r3388, %r3387, %r197;
	or.b32  	%r3389, %r3388, %r196;
	mul.wide.u32 	%rd266, %r3389, 4;
	add.s64 	%rd20, %rd4, %rd266;
	st.global.u32 	[%rd20], %r3560;
$L__BB0_165:                            // %L37349
                                        //   in Loop: Header=BB0_145 Depth=2
	add.s32 	%r3520, %r3520, 1;
	mov.u32 	%r3558, 0;
	mov.u32 	%r3560, %r3558;
$L__BB0_166:                            // %pass16701
                                        //   in Loop: Header=BB0_145 Depth=2
	ld.shared.u32 	%r3395, [%rd87];
	ld.shared.u32 	%r3402, [%rd88];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3412, %r3409}, {%r382, %r385}, {%r3395}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3421, %r3418}, {%r382, %r385}, {%r3402}, {%r2925, %r2925};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3405, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r3405, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r416, %r3412, %r3407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3414, %r419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3416, %r3414, %r3418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r416, %r3421, %r3416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3423, %r419, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3426, %r416, %r3409, %r3423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3430, %r419, %r3421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3433, %r416, %r3418, %r3430;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3456, %r3459}, {%r458, %r461}, {%r3410, %r3426}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3467}, {%r458, %r461}, {%r3419, %r3433}, {%r2925, %r2925}, %r198, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3455, %r3456, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r3459, %r3459, %r3455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r3463, %r3463, %r3458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3466, %r3467, %r3467, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1557, %r3466, %r3560;
	// end inline asm
	add.s32 	%r3501, %r3558, 1;
	setp.eq.s32 	%p256, %r3501, 25;
	@%p256 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_169;
$L__BB0_167:                            // %L38272
                                        //   in Loop: Header=BB0_145 Depth=2
	setp.lt.u32 	%p257, %r5, 16;
	@%p257 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_168;
$L__BB0_214:                            // %pass16941
                                        //   in Loop: Header=BB0_145 Depth=2
	shl.b32 	%r3474, %r3520, 9;
	or.b32  	%r3475, %r3474, %r195;
	add.s32 	%r3476, %r3475, %r197;
	or.b32  	%r3477, %r3476, %r196;
	mul.wide.u32 	%rd267, %r3477, 4;
	add.s64 	%rd21, %rd4, %rd267;
	st.global.u32 	[%rd21], %r3503;
	bra.uni 	$L__BB0_168;
$L__BB0_171:                            // %L38503
	st.global.u32 	[%rd5], %r2925;
	ret;
$L__BB0_126:                            // %post_box_union
	mov.u64 	%rd217, exception3262;
	cvta.global.u64 	%rd218, %rd217;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd218;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd89;
	st.param.b32 	[param0+8], %r271;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd94, exception1;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd89;
	st.param.b32 	[param0+8], %r271;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
