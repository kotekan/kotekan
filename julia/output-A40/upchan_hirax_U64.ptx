// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11656
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11667
(
	.param .align 8 .b8 julia_power_by_squaring_11667_param_0[16],
	.param .b64 julia_power_by_squaring_11667_param_1,
	.param .b64 julia_power_by_squaring_11667_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3406[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<262>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8041>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<193>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r189, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r190, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r190, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd37, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r191, %r4, 9;
	or.b32  	%r192, %r3, %r1;
	or.b32  	%r193, %r192, %r191;
	mul.wide.u32 	%rd59, %r193, 4;
	add.s64 	%rd4, %rd53, %rd59;
	mov.u32 	%r194, 1;
	st.global.u32 	[%rd4], %r194;
	ld.global.u32 	%r5, [%rd37];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd41];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd45];
	sub.s32 	%r195, %r6, %r5;
	and.b32  	%r196, %r195, 255;
	setp.ne.s32 	%p6, %r196, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd49];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r197, %r7;
	add.s32 	%r198, %r197, %r8;
	and.b32  	%r199, %r198, 3;
	setp.eq.s32 	%p12, %r199, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass170
	bfe.u32 	%r123, %r1, 2, 1;
	shr.u32 	%r124, %r1, 4;
	shl.b32 	%r208, %r124, 1;
	shl.b32 	%r209, %r123, 2;
	shl.b32 	%r125, %r1, 3;
	and.b32  	%r210, %r125, 24;
	or.b32  	%r211, %r209, %r210;
	or.b32  	%r212, %r208, %r211;
	bfe.u32 	%r213, %r1, 3, 1;
	or.b32  	%r127, %r213, %r212;
	or.b32  	%r128, %r127, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r127;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L573
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L576
	cvt.rn.f32.s32 	%f217, %r128;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L593
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L596
	or.b32  	%r231, %r127, 64;
	or.b32  	%r10, %r127, 96;
	cvt.rn.f32.s32 	%f252, %r231;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L675
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L678
	shl.b32 	%r115, %r1, 2;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L695
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L698
	and.b32  	%r200, %r115, 4;
	and.b32  	%r203, %r1, 18;
	or.b32  	%r249, %r127, 128;
	or.b32  	%r12, %r127, 160;
	cvt.rn.f32.s32 	%f321, %r249;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L777
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L780
	and.b32  	%r116, %r115, 32;
	shl.b32 	%r117, %r1, 1;
	or.b32  	%r204, %r203, %r200;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L797
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L800
	and.b32  	%r201, %r117, 8;
	shl.b32 	%r202, %r4, 4;
	or.b32  	%r205, %r204, %r116;
	or.b32  	%r267, %r127, 192;
	or.b32  	%r14, %r127, 224;
	cvt.rn.f32.s32 	%f390, %r267;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L879
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L882
	and.b32  	%r119, %r202, 4032;
	or.b32  	%r120, %r205, %r201;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L899
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L902
	or.b32  	%r206, %r120, %r119;
	mul.lo.s32 	%r16, %r127, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r285, %r18, 8388607;
	or.b32  	%r7997, %r285, 1065353216;
	mov.b32 	%f883, %r7997;
	add.s32 	%r286, %r18, -1073741824;
	and.b32  	%r7998, %r286, -8388608;
	setp.eq.s32 	%p68, %r7998, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r287, %r7998, 192937984;
	add.s32 	%r288, %r7997, %r287;
	mov.b32 	%f470, %r288;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7998, %r7998, %r287;
	mov.b32 	%r7997, %f883;
	setp.ne.s32 	%p69, %r7998, 0;
	setp.ne.s32 	%p70, %r7997, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r207, %r206, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r289, %f35;
	and.b32  	%r290, %r289, -2147483648;
	mov.b32 	%r291, %f884;
	or.b32  	%r292, %r290, %r291;
	mov.b32 	%f884, %r292;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd60, %r207, 4;
	add.s32 	%r301, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r301;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r302, %r26, 8388607;
	or.b32  	%r7999, %r302, 1065353216;
	mov.b32 	%f887, %r7999;
	add.s32 	%r303, %r26, -1073741824;
	and.b32  	%r8000, %r303, -8388608;
	setp.eq.s32 	%p88, %r8000, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r304, %r8000, 192937984;
	add.s32 	%r305, %r7999, %r304;
	mov.b32 	%f522, %r305;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8000, %r8000, %r304;
	mov.b32 	%r7999, %f887;
	setp.ne.s32 	%p89, %r8000, 0;
	setp.ne.s32 	%p90, %r7999, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd61, %rd1, %rd60;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r306, %f54;
	and.b32  	%r307, %r306, -2147483648;
	mov.b32 	%r308, %f888;
	or.b32  	%r309, %r307, %r308;
	mov.b32 	%f888, %r309;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r121, [%rd61];
	mov.u64 	%rd62, 2;
	mov.u64 	%rd63, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11667, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd64, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd64, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass326
	shr.u32 	%r122, %r1, 1;
	shr.u32 	%r126, %r1, 3;
	and.b32  	%r324, %r1, 3;
	and.b32  	%r325, %r126, 2;
	or.b32  	%r326, %r123, %r325;
	and.b32  	%r327, %r122, 4;
	or.b32  	%r129, %r326, %r327;
	mul.lo.s32 	%r328, %r324, %r129;
	shl.b32 	%r329, %r328, 1;
	neg.s32 	%r330, %r329;
	cvt.rn.f32.s32 	%f156, %r330;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r331, %r36, 8388607;
	or.b32  	%r8001, %r331, 1065353216;
	mov.b32 	%f891, %r8001;
	add.s32 	%r332, %r36, -1073741824;
	and.b32  	%r8002, %r332, -8388608;
	setp.eq.s32 	%p109, %r8002, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r333, %r8002, 192937984;
	add.s32 	%r334, %r8001, %r333;
	mov.b32 	%f575, %r334;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8002, %r8002, %r333;
	mov.b32 	%r8001, %f891;
	setp.ne.s32 	%p110, %r8002, 0;
	setp.ne.s32 	%p111, %r8001, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r335, %f157;
	and.b32  	%r43, %r335, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r336, %f892;
	or.b32  	%r337, %r43, %r336;
	mov.b32 	%f892, %r337;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r346, %r117, 6;
	mov.u32 	%r347, -8;
	sub.s32 	%r348, %r347, %r346;
	mul.lo.s32 	%r349, %r129, %r348;
	cvt.rn.f32.s32 	%f88, %r349;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r350, %r45, 8388607;
	or.b32  	%r8003, %r350, 1065353216;
	mov.b32 	%f895, %r8003;
	add.s32 	%r351, %r45, -1073741824;
	and.b32  	%r8004, %r351, -8388608;
	setp.eq.s32 	%p129, %r8004, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r8004, 192937984;
	add.s32 	%r353, %r8003, %r352;
	mov.b32 	%f626, %r353;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8004, %r8004, %r352;
	mov.b32 	%r8003, %f895;
	setp.ne.s32 	%p130, %r8004, 0;
	setp.ne.s32 	%p131, %r8003, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r354, %f89;
	and.b32  	%r52, %r354, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r355, %f896;
	or.b32  	%r356, %r52, %r355;
	mov.b32 	%f896, %r356;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11667, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd70, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd70, 64;
	@%p142 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_83;
$L__BB0_135:                            // %pass403
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11667, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd76, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd76;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_147;
// %bb.136:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_137;
$L__BB0_143:
	mov.b32 	%r131, %f912;
	and.b32  	%r377, %r131, 8388607;
	or.b32  	%r8024, %r377, 1065353216;
	mov.b32 	%f911, %r8024;
	add.s32 	%r378, %r131, -1073741824;
	and.b32  	%r8025, %r378, -8388608;
	setp.eq.s32 	%p150, %r8025, 0;
	@%p150 bra 	$L__BB0_146;
// %bb.144:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_145:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r379, %r8025, 192937984;
	add.s32 	%r380, %r8024, %r379;
	mov.b32 	%f679, %r380;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8025, %r8025, %r379;
	mov.b32 	%r8024, %f911;
	setp.ne.s32 	%p151, %r8025, 0;
	setp.ne.s32 	%p152, %r8024, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_145;
$L__BB0_146:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r131, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_147;
$L__BB0_137:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r130, %f162;
	setp.lt.u32 	%p145, %r130, 1073741824;
	@%p145 bra 	$L__BB0_142;
// %bb.138:
	setp.lt.u32 	%p146, %r130, -2147483647;
	@%p146 bra 	$L__BB0_140;
// %bb.139:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_142;
$L__BB0_140:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_142;
// %bb.141:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_142:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_147:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_149;
// %bb.148:
	mov.b32 	%r381, %f159;
	and.b32  	%r382, %r381, -2147483648;
	mov.b32 	%r383, %f912;
	or.b32  	%r384, %r382, %r383;
	mov.b32 	%f912, %r384;
$L__BB0_149:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11667, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd80;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r393, %r58, 8388607;
	or.b32  	%r8005, %r393, 1065353216;
	mov.b32 	%f899, %r8005;
	add.s32 	%r394, %r58, -1073741824;
	and.b32  	%r8006, %r394, -8388608;
	setp.eq.s32 	%p170, %r8006, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r395, %r8006, 192937984;
	add.s32 	%r396, %r8005, %r395;
	mov.b32 	%f730, %r396;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8006, %r8006, %r395;
	mov.b32 	%r8005, %f899;
	setp.ne.s32 	%p171, %r8006, 0;
	setp.ne.s32 	%p172, %r8005, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r397, %f178;
	and.b32  	%r398, %r397, -2147483648;
	mov.b32 	%r399, %f900;
	or.b32  	%r400, %r398, %r399;
	mov.b32 	%f900, %r400;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd62;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11667, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd84, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass468
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r415, %r68, 8388607;
	or.b32  	%r8007, %r415, 1065353216;
	mov.b32 	%f903, %r8007;
	add.s32 	%r416, %r68, -1073741824;
	and.b32  	%r8008, %r416, -8388608;
	setp.eq.s32 	%p191, %r8008, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r8008, 192937984;
	add.s32 	%r418, %r8007, %r417;
	mov.b32 	%f782, %r418;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8008, %r8008, %r417;
	mov.b32 	%r8007, %f903;
	setp.ne.s32 	%p192, %r8008, 0;
	setp.ne.s32 	%p193, %r8007, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r419, %f904;
	or.b32  	%r420, %r43, %r419;
	mov.b32 	%f904, %r420;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r429, %r76, 8388607;
	or.b32  	%r8009, %r429, 1065353216;
	mov.b32 	%f907, %r8009;
	add.s32 	%r430, %r76, -1073741824;
	and.b32  	%r8010, %r430, -8388608;
	setp.eq.s32 	%p211, %r8010, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r431, %r8010, 192937984;
	add.s32 	%r432, %r8009, %r431;
	mov.b32 	%f832, %r432;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8010, %r8010, %r431;
	mov.b32 	%r8009, %f907;
	setp.ne.s32 	%p212, %r8010, 0;
	setp.ne.s32 	%p213, %r8009, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r433, %f908;
	or.b32  	%r434, %r52, %r433;
	mov.b32 	%f908, %r434;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7995, 0;
	@%p224 bra 	$L__BB0_154;
// %bb.128:                             // %L1562.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r214, %f190;
	mov.b32 	%r221, %f224;
	mov.b32 	%r232, %f259;
	mov.b32 	%r239, %f293;
	mov.b32 	%r250, %f328;
	mov.b32 	%r257, %f362;
	mov.b32 	%r268, %f397;
	mov.b32 	%r275, %f431;
	mov.b32 	%r293, %f480;
	mov.b32 	%r316, %f532;
	mov.b32 	%r338, %f585;
	mov.b32 	%r369, %f636;
	and.b32  	%r215, %r214, -2147483648;
	and.b32  	%r222, %r221, -2147483648;
	and.b32  	%r233, %r232, -2147483648;
	and.b32  	%r240, %r239, -2147483648;
	and.b32  	%r251, %r250, -2147483648;
	and.b32  	%r258, %r257, -2147483648;
	and.b32  	%r269, %r268, -2147483648;
	and.b32  	%r276, %r275, -2147483648;
	and.b32  	%r294, %r293, -2147483648;
	and.b32  	%r317, %r316, -2147483648;
	and.b32  	%r339, %r338, -2147483648;
	and.b32  	%r370, %r369, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r216, %r215, 1056964608;
	or.b32  	%r223, %r222, 1056964608;
	or.b32  	%r234, %r233, 1056964608;
	or.b32  	%r241, %r240, 1056964608;
	or.b32  	%r252, %r251, 1056964608;
	or.b32  	%r259, %r258, 1056964608;
	or.b32  	%r270, %r269, 1056964608;
	or.b32  	%r277, %r276, 1056964608;
	or.b32  	%r295, %r294, 1056964608;
	or.b32  	%r318, %r317, 1056964608;
	or.b32  	%r340, %r339, 1056964608;
	or.b32  	%r371, %r370, 1056964608;
	mov.b32 	%r385, %f689;
	mov.b32 	%r407, %f740;
	mov.b32 	%f191, %r216;
	mov.b32 	%f225, %r223;
	mov.b32 	%f260, %r234;
	mov.b32 	%f294, %r241;
	mov.b32 	%f329, %r252;
	mov.b32 	%f363, %r259;
	mov.b32 	%f398, %r270;
	mov.b32 	%f432, %r277;
	mov.b32 	%f481, %r295;
	mov.b32 	%f533, %r318;
	mov.b32 	%f586, %r340;
	mov.b32 	%f637, %r371;
	and.b32  	%r386, %r385, -2147483648;
	and.b32  	%r408, %r407, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r387, %r386, 1056964608;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%r421, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r387;
	mov.b32 	%f741, %r409;
	and.b32  	%r422, %r421, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r423, %r422, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r423;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r217, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r224, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r235, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r242, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r253, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r260, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r271, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r278, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r225, %r224, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r236, %r235, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r243, %r242, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r254, %r253, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r261, %r260, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r272, %r271, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r279, %r278, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r296, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r319, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r341, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r372, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r219, %r218, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r226, %r225, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r237, %r236, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r244, %r243, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r262, %r261, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r273, %r272, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r280, %r279, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r297, %r296, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r320, %r319, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r342, %r341, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r373, %r372, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r219, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r226, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r237, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r244, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r255, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r262, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r273, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r280, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r297, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r320, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r342, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r373, 1;
	cvt.rzi.s32.f32 	%r388, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r410, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r220, %r218, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r227, %r225, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r238, %r236, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r245, %r243, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r256, %r254, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r263, %r261, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r274, %r272, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r281, %r279, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r298, %r296, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r321, %r319, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r343, %r341, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r374, %r372, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r389, %r388, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r411, %r410, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r220, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r227, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r238, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r245, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r256, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r263, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r274, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r281, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r298, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r299, %r296, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r321, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r322, %r319, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r343, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r344, %r341, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r374, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r375, %r372, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r389, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r411, 1;
	cvt.rzi.s32.f32 	%r424, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r300, %r299, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r323, %r322, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r345, %r344, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r376, %r375, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r390, %r388, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r412, %r410, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r425, %r424, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r300, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r323, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r345, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r376, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r390, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r391, %r388, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r412, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r413, %r410, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r425, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r392, %r391, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r414, %r413, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r426, %r424, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r392, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r414, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r426, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r427, %r424, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	and.b32  	%r118, %r1, 16;
	mov.b32 	%r230, %f251;
	mov.b32 	%r229, %f3;
	mov.b32 	%r248, %f320;
	mov.b32 	%r247, %f12;
	mov.b32 	%r266, %f389;
	mov.b32 	%r265, %f21;
	mov.b32 	%r284, %f457;
	mov.b32 	%r283, %f30;
	mov.b32 	%r312, %f563;
	mov.b32 	%r311, %f53;
	mov.b32 	%r315, %f560;
	mov.b32 	%r314, %f52;
	mov.b32 	%r359, %f667;
	mov.b32 	%r358, %f87;
	mov.b32 	%r365, %f664;
	mov.b32 	%r364, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r428, %r427, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r228, %r230, %r229;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r246, %r248, %r247;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r266, %r265;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r310, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r313, %r315, %r314;
	// end inline asm
	xor.b32  	%r362, %r365, -2147483648;
	xor.b32  	%r361, %r364, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r428, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r357, %r359, %r358;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r360, %r362, %r361;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r365, %r364;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r359, %r358;
	// end inline asm
	mov.b32 	%r403, %f771;
	mov.b32 	%r402, %f177;
	mov.b32 	%r406, %f768;
	mov.b32 	%r405, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r447, %f842;
	and.b32  	%r448, %r447, -2147483648;
	or.b32  	%r449, %r448, 1056964608;
	mov.b32 	%f843, %r449;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r450, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r451, %r450, 1;
	setp.eq.b32 	%p219, %r451, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r452, %r450, 2;
	setp.eq.s32 	%p220, %r452, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r453, %r450, 1;
	and.b32  	%r454, %r453, 2;
	setp.eq.s32 	%p221, %r454, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r437, %f873;
	mov.b32 	%r436, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	mov.b32 	%r443, %f870;
	xor.b32  	%r440, %r443, -2147483648;
	mov.b32 	%r442, %f136;
	xor.b32  	%r439, %r442, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r437, %r436;
	// end inline asm
	shl.b32 	%r456, %r5, 13;
	shl.b32 	%r457, %r4, 5;
	and.b32  	%r87, %r457, 64;
	or.b32  	%r458, %r118, %r2;
	or.b32  	%r88, %r458, %r116;
	and.b32  	%r459, %r457, 32;
	and.b32  	%r460, %r115, 28;
	or.b32  	%r89, %r459, %r460;
	or.b32  	%r461, %r89, %r87;
	or.b32  	%r90, %r461, %r456;
	and.b32  	%r91, %r1, 8;
	shl.b32 	%r462, %r1, 4;
	or.b32  	%r463, %r91, %r462;
	shr.u32 	%r464, %r463, 2;
	and.b32  	%r465, %r464, 30;
	and.b32  	%r92, %r3, 32;
	shr.u32 	%r94, %r2, 1;
	or.b32  	%r95, %r94, 8;
	or.b32  	%r466, %r94, %r92;
	or.b32  	%r96, %r466, 16;
	or.b32  	%r97, %r466, 24;
	shr.u32 	%r467, %r120, 1;
	mul.lo.s32 	%r468, %r467, 65;
	add.s32 	%r469, %r466, %r468;
	or.b32  	%r470, %r95, %r92;
	add.s32 	%r471, %r470, %r468;
	add.s32 	%r472, %r96, %r468;
	add.s32 	%r473, %r97, %r468;
	shl.b32 	%r474, %r2, 1;
	or.b32  	%r475, %r124, %r474;
	mul.lo.s32 	%r476, %r475, 65;
	add.s32 	%r477, %r465, %r476;
	mul.wide.u32 	%rd88, %r477, 4;
	mov.u64 	%rd89, shmem;
	add.s64 	%rd5, %rd89, %rd88;
	cvt.u64.u32 	%rd90, %r465;
	cvt.u64.u32 	%rd91, %r476;
	add.s64 	%rd92, %rd91, %rd90;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd6, %rd89, %rd93;
	shl.b32 	%r478, %r7, 19;
	add.s32 	%r479, %r478, -1572864;
	shl.b32 	%r480, %r2, 2;
	or.b32  	%r481, %r126, %r480;
	or.b32  	%r482, %r481, %r119;
	shl.b32 	%r98, %r482, 7;
	cvt.s64.s32 	%rd7, %r479;
	and.b32  	%r483, %r2, 1;
	neg.s32 	%r484, %r483;
	setp.eq.b32 	%p225, %r483, 1;
	and.b32  	%r485, %r484, 1040;
	bfe.s32 	%r486, %r2, 1, 1;
	and.b32  	%r487, %r2, 2;
	setp.eq.s32 	%p226, %r487, 0;
	and.b32  	%r488, %r486, 520;
	mul.lo.s32 	%r489, %r124, 65;
	shr.u32 	%r490, %r2, 3;
	mul.lo.s32 	%r491, %r490, 130;
	bfe.s32 	%r492, %r2, 2, 1;
	and.b32  	%r493, %r2, 4;
	setp.eq.s32 	%p227, %r493, 0;
	and.b32  	%r494, %r492, 260;
	add.s32 	%r495, %r485, %r465;
	add.s32 	%r496, %r495, %r488;
	add.s32 	%r497, %r496, %r489;
	add.s32 	%r498, %r497, %r491;
	add.s32 	%r499, %r498, %r494;
	mul.wide.u32 	%rd94, %r499, 4;
	add.s64 	%rd8, %rd89, %rd94;
	selp.b64 	%rd95, 0, 260, %p227;
	cvt.u64.u32 	%rd96, %r491;
	cvt.u64.u32 	%rd97, %r489;
	selp.b64 	%rd98, 0, 520, %p226;
	selp.b64 	%rd99, 1040, 0, %p225;
	add.s64 	%rd100, %rd90, %rd99;
	add.s64 	%rd101, %rd100, %rd98;
	add.s64 	%rd102, %rd101, %rd97;
	add.s64 	%rd103, %rd102, %rd96;
	add.s64 	%rd104, %rd103, %rd95;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd9, %rd89, %rd105;
	cvt.u64.u32 	%rd106, %r498;
	add.s64 	%rd107, %rd106, %rd95;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd10, %rd89, %rd108;
	add.s32 	%r500, %r499, 2113;
	mul.wide.u32 	%rd109, %r500, 4;
	add.s64 	%rd11, %rd89, %rd109;
	add.s32 	%r501, %r499, 2082;
	mul.wide.u32 	%rd110, %r501, 4;
	add.s64 	%rd12, %rd89, %rd110;
	add.s32 	%r502, %r499, 2114;
	mul.wide.u32 	%rd111, %r502, 4;
	add.s64 	%rd13, %rd89, %rd111;
	add.s32 	%r503, %r499, 4194;
	mul.wide.u32 	%rd112, %r503, 4;
	add.s64 	%rd14, %rd89, %rd112;
	add.s32 	%r504, %r499, 4163;
	mul.wide.u32 	%rd113, %r504, 4;
	add.s64 	%rd15, %rd89, %rd113;
	add.s32 	%r505, %r499, 4195;
	mul.wide.u32 	%rd114, %r505, 4;
	add.s64 	%rd16, %rd89, %rd114;
	add.s32 	%r506, %r499, 6275;
	mul.wide.u32 	%rd115, %r506, 4;
	add.s64 	%rd17, %rd89, %rd115;
	add.s32 	%r507, %r499, 6244;
	mul.wide.u32 	%rd116, %r507, 4;
	add.s64 	%rd18, %rd89, %rd116;
	add.s32 	%r508, %r499, 6276;
	mul.wide.u32 	%rd117, %r508, 4;
	add.s64 	%rd19, %rd89, %rd117;
	bfe.s32 	%r509, %r1, 2, 1;
	and.b32  	%r99, %r509, 260;
	mul.wide.u32 	%rd118, %r473, 4;
	add.s64 	%rd20, %rd89, %rd118;
	mul.wide.u32 	%rd119, %r472, 4;
	add.s64 	%rd21, %rd89, %rd119;
	mul.wide.u32 	%rd120, %r471, 4;
	add.s64 	%rd22, %rd89, %rd120;
	mul.wide.u32 	%rd121, %r469, 4;
	add.s64 	%rd23, %rd89, %rd121;
	setp.eq.s32 	%p228, %r91, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8039, %r7995;
	mov.u32 	%r8038, %r7995;
	mov.u32 	%r8037, %r7995;
	mov.u32 	%r8036, %r7995;
	mov.u32 	%r8035, %r7995;
	mov.u32 	%r8034, %r7995;
	mov.u32 	%r8033, %r7995;
	mov.u32 	%r8032, %r7995;
	mov.u32 	%r8031, %r7995;
	mov.u32 	%r8030, %r7995;
	mov.u32 	%r8029, %r7995;
	mov.u32 	%r8028, %r7995;
	mov.u32 	%r112, %r7995;
	bra.uni 	$L__BB0_129;
$L__BB0_153:                            // %pass16847
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7991, %r8040, 1572864;
	cvt.s64.s32 	%rd175, %r7991;
	add.s64 	%rd176, %rd175, %rd7;
	shr.u64 	%rd177, %rd176, 38;
	add.s64 	%rd178, %rd176, %rd177;
	shr.s64 	%rd179, %rd178, 26;
	setp.lt.s64 	%p256, %rd176, 0;
	and.b64  	%rd180, %rd178, -67108864;
	setp.ne.s64 	%p257, %rd180, %rd176;
	and.pred  	%p258, %p256, %p257;
	selp.u64 	%rd181, 1, 0, %p258;
	sub.s64 	%rd182, %rd181, %rd179;
	shl.b64 	%rd183, %rd182, 26;
	add.s64 	%rd184, %rd183, %rd176;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd3, %rd185;
	st.global.v4.u32 	[%rd186], {%r184, %r186, %r185, %r187};
	setp.ne.s32 	%p259, %r112, 7936;
	add.s32 	%r112, %r112, 256;
	add.s32 	%r7992, %r112, %r5;
	setp.gt.s32 	%p260, %r6, %r7992;
	and.pred  	%p261, %p259, %p260;
	@%p261 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_154;
$L__BB0_129:                            // %L1562
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	and.b32  	%r575, %r112, 7936;
	or.b32  	%r576, %r88, %r575;
	shl.b32 	%r577, %r576, 13;
	add.s32 	%r578, %r90, %r577;
	shr.s32 	%r579, %r578, 31;
	shr.u32 	%r580, %r579, 6;
	add.s32 	%r581, %r578, %r580;
	shr.s32 	%r582, %r581, 26;
	setp.lt.s32 	%p229, %r578, 0;
	and.b32  	%r583, %r581, -67108864;
	setp.ne.s32 	%p230, %r583, %r578;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r584, 1, 0, %p231;
	sub.s32 	%r585, %r584, %r582;
	shl.b32 	%r586, %r585, 26;
	add.s32 	%r587, %r586, %r578;
	mul.wide.s32 	%rd122, %r587, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r588, %r589, %r590, %r591}, [%rd123];
	or.b32  	%r592, %r577, 524288;
	add.s32 	%r593, %r90, %r592;
	shr.s32 	%r594, %r593, 31;
	shr.u32 	%r595, %r594, 6;
	add.s32 	%r596, %r593, %r595;
	shr.s32 	%r597, %r596, 26;
	setp.lt.s32 	%p232, %r593, 0;
	and.b32  	%r598, %r596, -67108864;
	setp.ne.s32 	%p233, %r598, %r593;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r599, 1, 0, %p234;
	sub.s32 	%r600, %r599, %r597;
	shl.b32 	%r601, %r600, 26;
	add.s32 	%r602, %r601, %r593;
	mul.wide.s32 	%rd124, %r602, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r603, %r604, %r605, %r606}, [%rd125];
	or.b32  	%r607, %r577, 1048576;
	add.s32 	%r608, %r90, %r607;
	shr.s32 	%r609, %r608, 31;
	shr.u32 	%r610, %r609, 6;
	add.s32 	%r611, %r608, %r610;
	shr.s32 	%r612, %r611, 26;
	setp.lt.s32 	%p235, %r608, 0;
	and.b32  	%r613, %r611, -67108864;
	setp.ne.s32 	%p236, %r613, %r608;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r614, 1, 0, %p237;
	sub.s32 	%r615, %r614, %r612;
	shl.b32 	%r616, %r615, 26;
	add.s32 	%r617, %r616, %r608;
	mul.wide.s32 	%rd126, %r617, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r618, %r619, %r620, %r621}, [%rd127];
	or.b32  	%r622, %r577, 1572864;
	add.s32 	%r623, %r90, %r622;
	shr.s32 	%r624, %r623, 31;
	shr.u32 	%r625, %r624, 6;
	add.s32 	%r626, %r623, %r625;
	shr.s32 	%r627, %r626, 26;
	setp.lt.s32 	%p238, %r623, 0;
	and.b32  	%r628, %r626, -67108864;
	setp.ne.s32 	%p239, %r628, %r623;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r629, 1, 0, %p240;
	sub.s32 	%r630, %r629, %r627;
	shl.b32 	%r631, %r630, 26;
	add.s32 	%r632, %r631, %r623;
	mul.wide.s32 	%rd128, %r632, 4;
	add.s64 	%rd129, %rd2, %rd128;
	ld.global.v4.u32 	{%r633, %r634, %r635, %r636}, [%rd129];
	selp.b32 	%r637, %r590, %r588, %p228;
	shfl.sync.bfly.b32	%r638, %r637, 8, 31, -1;
	selp.b32 	%r511, %r588, %r638, %p228;
	selp.b32 	%r512, %r638, %r590, %p228;
	selp.b32 	%r639, %r591, %r589, %p228;
	shfl.sync.bfly.b32	%r640, %r639, 8, 31, -1;
	selp.b32 	%r519, %r589, %r640, %p228;
	selp.b32 	%r520, %r640, %r591, %p228;
	selp.b32 	%r641, %r605, %r603, %p228;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r527, %r603, %r642, %p228;
	selp.b32 	%r528, %r642, %r605, %p228;
	selp.b32 	%r643, %r606, %r604, %p228;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r535, %r604, %r644, %p228;
	selp.b32 	%r536, %r644, %r606, %p228;
	selp.b32 	%r645, %r620, %r618, %p228;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r543, %r618, %r646, %p228;
	selp.b32 	%r544, %r646, %r620, %p228;
	selp.b32 	%r647, %r621, %r619, %p228;
	shfl.sync.bfly.b32	%r648, %r647, 8, 31, -1;
	selp.b32 	%r551, %r619, %r648, %p228;
	selp.b32 	%r552, %r648, %r621, %p228;
	selp.b32 	%r649, %r635, %r633, %p228;
	shfl.sync.bfly.b32	%r650, %r649, 8, 31, -1;
	selp.b32 	%r559, %r633, %r650, %p228;
	selp.b32 	%r560, %r650, %r635, %p228;
	selp.b32 	%r651, %r636, %r634, %p228;
	shfl.sync.bfly.b32	%r652, %r651, 8, 31, -1;
	selp.b32 	%r567, %r634, %r652, %p228;
	selp.b32 	%r568, %r652, %r636, %p228;
	mov.u32 	%r569, 21520;
	// begin inline asm
	prmt.b32 %r510, %r511, %r512, %r569;
	// end inline asm
	mov.u32 	%r573, 30258;
	// begin inline asm
	prmt.b32 %r514, %r511, %r512, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r519, %r520, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r519, %r520, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r527, %r528, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r527, %r528, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r535, %r536, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r535, %r536, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r543, %r544, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r543, %r544, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r551, %r552, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r551, %r552, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r559, %r560, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r559, %r560, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r567, %r568, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r567, %r568, %r573;
	// end inline asm
	st.shared.u32 	[%rd8], %r510;
	st.shared.u32 	[%rd9+128], %r514;
	st.shared.u32 	[%rd9+4], %r518;
	st.shared.u32 	[%rd9+132], %r522;
	st.shared.u32 	[%rd10+8324], %r526;
	st.shared.u32 	[%rd11], %r530;
	st.shared.u32 	[%rd12], %r534;
	st.shared.u32 	[%rd13], %r538;
	st.shared.u32 	[%rd10+16648], %r542;
	st.shared.u32 	[%rd14], %r546;
	st.shared.u32 	[%rd15], %r550;
	st.shared.u32 	[%rd16], %r554;
	st.shared.u32 	[%rd10+24972], %r558;
	st.shared.u32 	[%rd17], %r562;
	st.shared.u32 	[%rd18], %r566;
	st.shared.u32 	[%rd19], %r570;
	bar.sync 	0;
	or.b32  	%r653, %r112, %r210;
	or.b32  	%r113, %r653, %r126;
	shr.u32 	%r8026, %r113, 6;
	mov.u64 	%rd189, %rd23;
	mov.u64 	%rd190, %rd22;
	mov.u64 	%rd191, %rd21;
	mov.u64 	%rd192, %rd20;
	mov.u32 	%r8027, %r7995;
$L__BB0_130:                            // %pass5591
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7838, %r113, %r8027;
	and.b32  	%r7839, %r7838, 1;
	neg.s32 	%r7840, %r7839;
	and.b32  	%r7841, %r7840, 1040;
	bfe.s32 	%r7842, %r7838, 1, 1;
	and.b32  	%r7843, %r7842, 520;
	bfe.s32 	%r7844, %r7838, 4, 1;
	and.b32  	%r7845, %r7844, 65;
	bfe.s32 	%r7846, %r7838, 3, 1;
	and.b32  	%r7847, %r7846, 130;
	and.b32  	%r7848, %r8026, 3;
	mul.lo.s32 	%r7849, %r7848, 2081;
	or.b32  	%r7850, %r7841, %r92;
	or.b32  	%r7851, %r7850, %r94;
	or.b32  	%r7852, %r7851, %r7843;
	add.s32 	%r7853, %r7852, %r7845;
	add.s32 	%r7854, %r7853, %r7847;
	add.s32 	%r7855, %r7854, %r7849;
	add.s32 	%r7856, %r7855, %r99;
	mul.wide.u32 	%rd130, %r7856, 4;
	add.s64 	%rd132, %rd89, %rd130;
	ld.shared.u32 	%r7857, [%rd132];
	or.b32  	%r7858, %r95, %r7850;
	add.s32 	%r7859, %r7858, %r7843;
	add.s32 	%r7860, %r7859, %r7845;
	add.s32 	%r7861, %r7860, %r7847;
	add.s32 	%r7862, %r7861, %r7849;
	add.s32 	%r7863, %r7862, %r99;
	mul.wide.u32 	%rd133, %r7863, 4;
	add.s64 	%rd134, %rd89, %rd133;
	ld.shared.u32 	%r7864, [%rd134];
	add.s32 	%r7865, %r96, %r7841;
	or.b32  	%r7866, %r7865, %r7843;
	add.s32 	%r7867, %r7866, %r7845;
	add.s32 	%r7868, %r7867, %r7847;
	add.s32 	%r7869, %r7868, %r7849;
	add.s32 	%r7870, %r7869, %r99;
	mul.wide.u32 	%rd135, %r7870, 4;
	add.s64 	%rd136, %rd89, %rd135;
	ld.shared.u32 	%r7871, [%rd136];
	add.s32 	%r7872, %r97, %r7841;
	add.s32 	%r7873, %r7872, %r7843;
	add.s32 	%r7874, %r7873, %r7845;
	add.s32 	%r7875, %r7874, %r7847;
	add.s32 	%r7876, %r7875, %r7849;
	add.s32 	%r7877, %r7876, %r99;
	mul.wide.u32 	%rd137, %r7877, 4;
	add.s64 	%rd138, %rd89, %rd137;
	ld.shared.u32 	%r7878, [%rd138];
	// begin inline asm
	mov.b32 %r659, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r670, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r658, %r7857, -2004318072;
	mov.u32 	%r657, 983055;
	// begin inline asm
	lop3.b32 %r656, %r657, %r658, %r659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r661, %r659, %r660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r664, %r656, %r661;
	// end inline asm
	mov.u32 	%r668, 15728880;
	// begin inline asm
	lop3.b32 %r667, %r668, %r658, %r670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r672, %r670, %r671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r675, %r667, %r672;
	// end inline asm
	shr.u32 	%r680, %r658, 8;
	// begin inline asm
	lop3.b32 %r678, %r657, %r680, %r659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r683, %r659, %r682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r686, %r678, %r683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r689, %r668, %r680, %r670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r694, %r670, %r693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r697, %r689, %r694;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r704, %r7864, -2004318072;
	// begin inline asm
	lop3.b32 %r702, %r657, %r704, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r707, %r705, %r706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r710, %r702, %r707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r713, %r668, %r704, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r718, %r716, %r717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r721, %r713, %r718;
	// end inline asm
	shr.u32 	%r726, %r704, 8;
	// begin inline asm
	lop3.b32 %r724, %r657, %r726, %r705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r728, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r729, %r705, %r728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r732, %r724, %r729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r735, %r668, %r726, %r716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r740, %r716, %r739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r743, %r735, %r740;
	// end inline asm
	// begin inline asm
	mov.b32 %r751, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r762, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r750, %r7871, -2004318072;
	// begin inline asm
	lop3.b32 %r748, %r657, %r750, %r751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r753, %r751, %r752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r756, %r748, %r753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r759, %r668, %r750, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r764, %r762, %r763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r767, %r759, %r764;
	// end inline asm
	shr.u32 	%r772, %r750, 8;
	// begin inline asm
	lop3.b32 %r770, %r657, %r772, %r751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r774, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r775, %r751, %r774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r778, %r770, %r775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r781, %r668, %r772, %r762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r762, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r796, %r7878, -2004318072;
	// begin inline asm
	lop3.b32 %r794, %r657, %r796, %r797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r799, %r797, %r798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r794, %r799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r805, %r668, %r796, %r808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r809, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r810, %r808, %r809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r813, %r805, %r810;
	// end inline asm
	shr.u32 	%r818, %r796, 8;
	// begin inline asm
	lop3.b32 %r816, %r657, %r818, %r797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r821, %r797, %r820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r824, %r816, %r821;
	// end inline asm
	// begin inline asm
	lop3.b32 %r827, %r668, %r818, %r808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r832, %r808, %r831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r835, %r827, %r832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r840, %r838, %r664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r843, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r845, %r843, %r675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r848, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r850, %r848, %r686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r853, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r855, %r853, %r697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r858, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r860, %r858, %r710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r863, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r865, %r863, %r721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r868, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r870, %r868, %r732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r873, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r875, %r873, %r743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r878, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r880, %r878, %r756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r883, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r885, %r883, %r767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r888, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r890, %r888, %r778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r893, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r895, %r893, %r789;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r898, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r900, %r898, %r802;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r903, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r905, %r903, %r813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r908, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r910, %r908, %r824;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r913, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r915, %r913, %r835;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r922, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r920, %r657, %r922, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	lop3.b32 %r931, %r668, %r922, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	shr.u32 	%r944, %r922, 8;
	// begin inline asm
	lop3.b32 %r942, %r657, %r944, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r947, %r923, %r946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r950, %r942, %r947;
	// end inline asm
	// begin inline asm
	lop3.b32 %r953, %r668, %r944, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r958, %r934, %r957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r961, %r953, %r958;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r968, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r966, %r657, %r968, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r977, %r668, %r968, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	shr.u32 	%r990, %r968, 8;
	// begin inline asm
	lop3.b32 %r988, %r657, %r990, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r969, %r992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r996, %r988, %r993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r999, %r668, %r990, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1004, %r980, %r1003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1007, %r999, %r1004;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1014, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1012, %r657, %r1014, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1023, %r668, %r1014, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1026, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	shr.u32 	%r1036, %r1014, 8;
	// begin inline asm
	lop3.b32 %r1034, %r657, %r1036, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1038, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1039, %r1015, %r1038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1042, %r1034, %r1039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1045, %r668, %r1036, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1050, %r1026, %r1049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1053, %r1045, %r1050;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1060, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1058, %r657, %r1060, %r1061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1061, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1069, %r668, %r1060, %r1072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1074, %r1072, %r1073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1077, %r1069, %r1074;
	// end inline asm
	shr.u32 	%r1082, %r1060, 8;
	// begin inline asm
	lop3.b32 %r1080, %r657, %r1082, %r1061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1085, %r1061, %r1084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1088, %r1080, %r1085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1091, %r668, %r1082, %r1072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1096, %r1072, %r1095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1099, %r1091, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1102, %r228, %r928, %r840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r228, %r939, %r845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r228, %r950, %r850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r228, %r961, %r855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1118, %r228, %r974, %r860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r228, %r985, %r865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r228, %r996, %r870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r228, %r1007, %r875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r228, %r1020, %r880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r228, %r1031, %r885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r228, %r1042, %r890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r228, %r1053, %r895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1150, %r228, %r1066, %r900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r228, %r1077, %r905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r228, %r1088, %r910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r228, %r1099, %r915;
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1170, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1168, %r657, %r1170, %r1171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1173, %r1171, %r1172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1176, %r1168, %r1173;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1179, %r668, %r1170, %r1182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1183, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1184, %r1182, %r1183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1187, %r1179, %r1184;
	// end inline asm
	shr.u32 	%r1192, %r1170, 8;
	// begin inline asm
	lop3.b32 %r1190, %r657, %r1192, %r1171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1195, %r1171, %r1194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1198, %r1190, %r1195;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1201, %r668, %r1192, %r1182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1206, %r1182, %r1205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1209, %r1201, %r1206;
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1216, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1214, %r657, %r1216, %r1217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1219, %r1217, %r1218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1222, %r1214, %r1219;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1225, %r668, %r1216, %r1228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1230, %r1228, %r1229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1233, %r1225, %r1230;
	// end inline asm
	shr.u32 	%r1238, %r1216, 8;
	// begin inline asm
	lop3.b32 %r1236, %r657, %r1238, %r1217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1241, %r1217, %r1240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1244, %r1236, %r1241;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1247, %r668, %r1238, %r1228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1251, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1252, %r1228, %r1251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1255, %r1247, %r1252;
	// end inline asm
	// begin inline asm
	mov.b32 %r1263, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1274, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1262, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1260, %r657, %r1262, %r1263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1265, %r1263, %r1264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1268, %r1260, %r1265;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1271, %r668, %r1262, %r1274, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1275, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1276, %r1274, %r1275;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1279, %r1271, %r1276;
	// end inline asm
	shr.u32 	%r1284, %r1262, 8;
	// begin inline asm
	lop3.b32 %r1282, %r657, %r1284, %r1263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1286, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1287, %r1263, %r1286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1290, %r1282, %r1287;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1293, %r668, %r1284, %r1274, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1297, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1298, %r1274, %r1297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1301, %r1293, %r1298;
	// end inline asm
	// begin inline asm
	mov.b32 %r1309, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1320, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1308, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1306, %r657, %r1308, %r1309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1311, %r1309, %r1310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1314, %r1306, %r1311;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1317, %r668, %r1308, %r1320, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1321, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1322, %r1320, %r1321;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1325, %r1317, %r1322;
	// end inline asm
	shr.u32 	%r1330, %r1308, 8;
	// begin inline asm
	lop3.b32 %r1328, %r657, %r1330, %r1309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1332, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1333, %r1309, %r1332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1336, %r1328, %r1333;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1339, %r668, %r1330, %r1320, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1344, %r1320, %r1343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1347, %r1339, %r1344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r1350, %r1176, %r1102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1356, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1358, %r1356, %r1187, %r1106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1362, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r1362, %r1198, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1370, %r1368, %r1209, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1374, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1376, %r1374, %r1222, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1380, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r1380, %r1233, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1388, %r1386, %r1244, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r1392, %r1255, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1398, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r1398, %r1268, %r1134;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r1404, %r1279, %r1138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1410, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r1410, %r1290, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1416, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r1416, %r1301, %r1146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r1422, %r1314, %r1150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r1428, %r1325, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1434, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r1434, %r1336, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1440, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1440, %r1347, %r1162;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1462, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1450, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1448, %r657, %r1450, %r1451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1451, %r1452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1456, %r1448, %r1453;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1459, %r668, %r1450, %r1462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1464, %r1462, %r1463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1467, %r1459, %r1464;
	// end inline asm
	shr.u32 	%r1472, %r1450, 8;
	// begin inline asm
	lop3.b32 %r1470, %r657, %r1472, %r1451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1474, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1475, %r1451, %r1474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1478, %r1470, %r1475;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1481, %r668, %r1472, %r1462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1485, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1486, %r1462, %r1485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1489, %r1481, %r1486;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1508, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1496, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1494, %r657, %r1496, %r1497, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1497, %r1498;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1502, %r1494, %r1499;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1505, %r668, %r1496, %r1508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1509, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1510, %r1508, %r1509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1513, %r1505, %r1510;
	// end inline asm
	shr.u32 	%r1518, %r1496, 8;
	// begin inline asm
	lop3.b32 %r1516, %r657, %r1518, %r1497, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1521, %r1497, %r1520;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1524, %r1516, %r1521;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1527, %r668, %r1518, %r1508, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1531, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1532, %r1508, %r1531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1535, %r1527, %r1532;
	// end inline asm
	// begin inline asm
	mov.b32 %r1543, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1554, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1542, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1540, %r657, %r1542, %r1543, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1545, %r1543, %r1544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1548, %r1540, %r1545;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1551, %r668, %r1542, %r1554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1556, %r1554, %r1555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1559, %r1551, %r1556;
	// end inline asm
	shr.u32 	%r1564, %r1542, 8;
	// begin inline asm
	lop3.b32 %r1562, %r657, %r1564, %r1543, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1566, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1567, %r1543, %r1566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1570, %r1562, %r1567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1573, %r668, %r1564, %r1554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1577, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1578, %r1554, %r1577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1581, %r1573, %r1578;
	// end inline asm
	// begin inline asm
	mov.b32 %r1589, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1588, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1586, %r657, %r1588, %r1589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1591, %r1589, %r1590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1594, %r1586, %r1591;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1597, %r668, %r1588, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1602, %r1600, %r1601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1605, %r1597, %r1602;
	// end inline asm
	shr.u32 	%r1610, %r1588, 8;
	// begin inline asm
	lop3.b32 %r1608, %r657, %r1610, %r1589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1613, %r1589, %r1612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1616, %r1608, %r1613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1619, %r668, %r1610, %r1600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1623, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1624, %r1600, %r1623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1627, %r1619, %r1624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r264, %r1456, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r264, %r1467, %r1358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r264, %r1478, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r264, %r1489, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r264, %r1502, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r264, %r1513, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r264, %r1524, %r1388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r264, %r1535, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r264, %r1548, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r264, %r1559, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r264, %r1570, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r264, %r1581, %r1418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r264, %r1594, %r1424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r264, %r1605, %r1430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r264, %r1616, %r1436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r264, %r1627, %r1442;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1694, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r1694, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r310, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1703, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1703, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r310, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r310, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r310, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r1730, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r310, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1739, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r310, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r310, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r310, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r313, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r310, %r1698, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r313, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r310, %r1707, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r313, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r310, %r1716, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r313, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r310, %r1725, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r313, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r310, %r1734, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r313, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r310, %r1743, %r1801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r313, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r310, %r1752, %r1808;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r313, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r310, %r1761, %r1815;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1909, %r1906}, {%r357, %r363, %r360, %r366}, {%r1699, %r1769}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1918, %r1915}, {%r357, %r363, %r360, %r366}, {%r1708, %r1776}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r357, %r363, %r360, %r366}, {%r1717, %r1783}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1936, %r1933}, {%r357, %r363, %r360, %r366}, {%r1726, %r1790}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1942}, {%r357, %r363, %r360, %r366}, {%r1735, %r1797}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1954, %r1951}, {%r357, %r363, %r360, %r366}, {%r1744, %r1804}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1963, %r1960}, {%r357, %r363, %r360, %r366}, {%r1753, %r1811}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1972, %r1969}, {%r357, %r363, %r360, %r366}, {%r1762, %r1818}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1902, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r1902, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r401, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1911, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r401, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r401, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1929, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r401, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1938, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1938, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r401, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1947, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1947, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r401, %r1954, %r1949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1956, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r1956, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r401, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1965, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1965, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r401, %r1972, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r404, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r401, %r1906, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r404, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r401, %r1915, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r404, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r401, %r1924, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r404, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r401, %r1933, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r404, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r401, %r1942, %r2002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2009, %r404, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r401, %r1951, %r2009;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2016, %r404, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2019, %r401, %r1960, %r2016;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r404, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r401, %r1969, %r2023;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2030, %r2031}, {%r435, %r441, %r438, %r444}, {%r1907, %r1977}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2040, %r2041}, {%r435, %r441, %r438, %r444}, {%r1916, %r1984}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2050, %r2051}, {%r435, %r441, %r438, %r444}, {%r1925, %r1991}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2060, %r2061}, {%r435, %r441, %r438, %r444}, {%r1934, %r1998}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2070, %r2071}, {%r435, %r441, %r438, %r444}, {%r1943, %r2005}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2080, %r2081}, {%r435, %r441, %r438, %r444}, {%r1952, %r2012}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2090, %r2091}, {%r435, %r441, %r438, %r444}, {%r1961, %r2019}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2100, %r2101}, {%r435, %r441, %r438, %r444}, {%r1970, %r2026}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r121, %r2030;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r121, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r121, %r2040;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r121, %r2041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r121, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r121, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r121, %r2060;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r121, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r121, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r121, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r121, %r2080;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r121, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r121, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r121, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r121, %r2100;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r121, %r2101;
	// end inline asm
	// begin inline asm
	mov.b32 %r2158, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2159, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2160, %r2110, %r2158;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2163, %r2160, %r2159;
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2167, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2168, %r2113, %r2166;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2171, %r2168, %r2167;
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2175, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2176, %r2116, %r2174;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2179, %r2176, %r2175;
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2183, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2184, %r2119, %r2182;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2187, %r2184, %r2183;
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2191, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2192, %r2122, %r2190;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2195, %r2192, %r2191;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2199, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2200, %r2125, %r2198;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2203, %r2200, %r2199;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2208, %r2128, %r2206;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2211, %r2208, %r2207;
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2215, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2216, %r2131, %r2214;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2219, %r2216, %r2215;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2224, %r2134, %r2222;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2227, %r2224, %r2223;
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2231, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2232, %r2137, %r2230;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2235, %r2232, %r2231;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2240, %r2140, %r2238;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2243, %r2240, %r2239;
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2248, %r2143, %r2246;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2251, %r2248, %r2247;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2256, %r2146, %r2254;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2259, %r2256, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2264, %r2149, %r2262;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2267, %r2264, %r2263;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2271, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2272, %r2152, %r2270;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2275, %r2272, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2280, %r2155, %r2278;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2283, %r2280, %r2279;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2288, %r2289, %r2287;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2291, %r2163, %r2288;
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2295, %r2289, %r2294;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2298, %r2171, %r2295;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2289, %r2301;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2179, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2289, %r2308;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2187, %r2309;
	// end inline asm
	mov.u32 	%r2318, 25152;
	// begin inline asm
	prmt.b32 %r2315, %r2291, %r2305, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2319, %r2298, %r2312, %r2318;
	// end inline asm
	shl.b32 	%r2326, %r2319, 4;
	mov.u32 	%r2324, 252645135;
	// begin inline asm
	lop3.b32 %r2323, %r2324, %r2315, %r2326, 202;
	// end inline asm
	xor.b32  	%r7879, %r2323, -2004318072;
	// begin inline asm
	mov.b32 %r2330, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2329, %r2330, %r2328;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2332, %r2195, %r2329;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2330, %r2335;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2339, %r2203, %r2336;
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2343, %r2330, %r2342;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2211, %r2343;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2350, %r2330, %r2349;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2219, %r2350;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2356, %r2332, %r2346, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2360, %r2339, %r2353, %r2318;
	// end inline asm
	shl.b32 	%r2367, %r2360, 4;
	// begin inline asm
	lop3.b32 %r2364, %r2324, %r2356, %r2367, 202;
	// end inline asm
	xor.b32  	%r7880, %r2364, -2004318072;
	// begin inline asm
	mov.b32 %r2371, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2369, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2371, %r2369;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2373, %r2227, %r2370;
	// end inline asm
	// begin inline asm
	mov.b32 %r2376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2371, %r2376;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2235, %r2377;
	// end inline asm
	// begin inline asm
	mov.b32 %r2383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2371, %r2383;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2243, %r2384;
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2371, %r2390;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2251, %r2391;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2373, %r2387, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2380, %r2394, %r2318;
	// end inline asm
	shl.b32 	%r2408, %r2401, 4;
	// begin inline asm
	lop3.b32 %r2405, %r2324, %r2397, %r2408, 202;
	// end inline asm
	xor.b32  	%r7881, %r2405, -2004318072;
	// begin inline asm
	mov.b32 %r2412, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2411, %r2412, %r2410;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2414, %r2259, %r2411;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2412, %r2417;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2421, %r2267, %r2418;
	// end inline asm
	// begin inline asm
	mov.b32 %r2424, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2425, %r2412, %r2424;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2428, %r2275, %r2425;
	// end inline asm
	// begin inline asm
	mov.b32 %r2431, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2432, %r2412, %r2431;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2283, %r2432;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2414, %r2428, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2421, %r2435, %r2318;
	// end inline asm
	shl.b32 	%r2449, %r2442, 4;
	// begin inline asm
	lop3.b32 %r2446, %r2324, %r2438, %r2449, 202;
	// end inline asm
	xor.b32  	%r7882, %r2446, -2004318072;
	st.shared.u32 	[%rd189], %r7879;
	st.shared.u32 	[%rd190], %r7880;
	st.shared.u32 	[%rd191], %r7881;
	st.shared.u32 	[%rd192], %r7882;
	ld.shared.u32 	%r8039, [%rd132];
	ld.shared.u32 	%r8038, [%rd134];
	ld.shared.u32 	%r8037, [%rd136];
	ld.shared.u32 	%r8036, [%rd138];
	// begin inline asm
	mov.b32 %r2455, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2454, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r2452, %r657, %r2454, %r2455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2457, %r2455, %r2456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2460, %r2452, %r2457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2463, %r668, %r2454, %r2466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2466, %r2467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2471, %r2463, %r2468;
	// end inline asm
	shr.u32 	%r2476, %r2454, 8;
	// begin inline asm
	lop3.b32 %r2474, %r657, %r2476, %r2455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2478, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2479, %r2455, %r2478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2482, %r2474, %r2479;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2485, %r668, %r2476, %r2466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2489, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2490, %r2466, %r2489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2493, %r2485, %r2490;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2500, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r2498, %r657, %r2500, %r2501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2502, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2503, %r2501, %r2502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2506, %r2498, %r2503;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2509, %r668, %r2500, %r2512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2513, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2514, %r2512, %r2513;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2517, %r2509, %r2514;
	// end inline asm
	shr.u32 	%r2522, %r2500, 8;
	// begin inline asm
	lop3.b32 %r2520, %r657, %r2522, %r2501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2524, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2525, %r2501, %r2524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2528, %r2520, %r2525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2531, %r668, %r2522, %r2512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2535, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2536, %r2512, %r2535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2539, %r2531, %r2536;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2558, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2546, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r2544, %r657, %r2546, %r2547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2549, %r2547, %r2548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2552, %r2544, %r2549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2555, %r668, %r2546, %r2558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2559, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2560, %r2558, %r2559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2563, %r2555, %r2560;
	// end inline asm
	shr.u32 	%r2568, %r2546, 8;
	// begin inline asm
	lop3.b32 %r2566, %r657, %r2568, %r2547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2570, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2571, %r2547, %r2570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2574, %r2566, %r2571;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2577, %r668, %r2568, %r2558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2582, %r2558, %r2581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2585, %r2577, %r2582;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2604, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2592, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r2590, %r657, %r2592, %r2593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2595, %r2593, %r2594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2598, %r2590, %r2595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2601, %r668, %r2592, %r2604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2605, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2606, %r2604, %r2605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2609, %r2601, %r2606;
	// end inline asm
	shr.u32 	%r2614, %r2592, 8;
	// begin inline asm
	lop3.b32 %r2612, %r657, %r2614, %r2593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2616, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2617, %r2593, %r2616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2620, %r2612, %r2617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2623, %r668, %r2614, %r2604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2628, %r2604, %r2627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2631, %r2623, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2634, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r2634, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2639, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2641, %r2639, %r2471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2654, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r2654, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2669, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r2669, %r2539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2585;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2694, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r2694, %r2598;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2699, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2699, %r2609;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2620;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2631;
	// end inline asm
	// begin inline asm
	mov.b32 %r2719, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2730, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2716, %r657, %r1170, %r2719, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2720, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2721, %r2719, %r2720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2724, %r2716, %r2721;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2727, %r668, %r1170, %r2730, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2732, %r2730, %r2731;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2735, %r2727, %r2732;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2738, %r657, %r1192, %r2719, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2742, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2743, %r2719, %r2742;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2746, %r2738, %r2743;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2749, %r668, %r1192, %r2730, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2753, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2754, %r2730, %r2753;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2757, %r2749, %r2754;
	// end inline asm
	// begin inline asm
	mov.b32 %r2765, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2776, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2762, %r657, %r1216, %r2765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2767, %r2765, %r2766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2770, %r2762, %r2767;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2773, %r668, %r1216, %r2776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2778, %r2776, %r2777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2781, %r2773, %r2778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2784, %r657, %r1238, %r2765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2788, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2789, %r2765, %r2788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2792, %r2784, %r2789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2795, %r668, %r1238, %r2776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2800, %r2776, %r2799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2803, %r2795, %r2800;
	// end inline asm
	// begin inline asm
	mov.b32 %r2811, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2822, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2808, %r657, %r1262, %r2811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2813, %r2811, %r2812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2816, %r2808, %r2813;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2819, %r668, %r1262, %r2822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2823, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2824, %r2822, %r2823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2827, %r2819, %r2824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2830, %r657, %r1284, %r2811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2834, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2835, %r2811, %r2834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2838, %r2830, %r2835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2841, %r668, %r1284, %r2822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2846, %r2822, %r2845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2849, %r2841, %r2846;
	// end inline asm
	// begin inline asm
	mov.b32 %r2857, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2868, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2854, %r657, %r1308, %r2857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2858, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2859, %r2857, %r2858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2862, %r2854, %r2859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2865, %r668, %r1308, %r2868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2870, %r2868, %r2869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2873, %r2865, %r2870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2876, %r657, %r1330, %r2857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2881, %r2857, %r2880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2884, %r2876, %r2881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2887, %r668, %r1330, %r2868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2892, %r2868, %r2891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2895, %r2887, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r228, %r2724, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r228, %r2735, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r228, %r2746, %r2646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r228, %r2757, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r228, %r2770, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r228, %r2781, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r228, %r2792, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r228, %r2803, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r228, %r2816, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r228, %r2827, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r228, %r2838, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r228, %r2849, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r228, %r2862, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r228, %r2873, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r228, %r2884, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r228, %r2895, %r2711;
	// end inline asm
	// begin inline asm
	mov.b32 %r2967, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2978, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2964, %r657, %r1450, %r2967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2968, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2969, %r2967, %r2968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2972, %r2964, %r2969;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2975, %r668, %r1450, %r2978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2979, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2980, %r2978, %r2979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2983, %r2975, %r2980;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2986, %r657, %r1472, %r2967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2991, %r2967, %r2990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2994, %r2986, %r2991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2997, %r668, %r1472, %r2978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3002, %r2978, %r3001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3005, %r2997, %r3002;
	// end inline asm
	// begin inline asm
	mov.b32 %r3013, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3024, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3010, %r657, %r1496, %r3013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3014, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3015, %r3013, %r3014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3018, %r3010, %r3015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3021, %r668, %r1496, %r3024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3025, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3026, %r3024, %r3025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3029, %r3021, %r3026;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3032, %r657, %r1518, %r3013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3036, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3037, %r3013, %r3036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3040, %r3032, %r3037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3043, %r668, %r1518, %r3024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3047, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3048, %r3024, %r3047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3051, %r3043, %r3048;
	// end inline asm
	// begin inline asm
	mov.b32 %r3059, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3070, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3056, %r657, %r1542, %r3059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3060, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3061, %r3059, %r3060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3064, %r3056, %r3061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3067, %r668, %r1542, %r3070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3071, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3072, %r3070, %r3071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3075, %r3067, %r3072;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3078, %r657, %r1564, %r3059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3082, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3083, %r3059, %r3082;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3086, %r3078, %r3083;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3089, %r668, %r1564, %r3070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3093, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3094, %r3070, %r3093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3097, %r3089, %r3094;
	// end inline asm
	// begin inline asm
	mov.b32 %r3105, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3116, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3102, %r657, %r1588, %r3105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3107, %r3105, %r3106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3110, %r3102, %r3107;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3113, %r668, %r1588, %r3116, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3117, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3118, %r3116, %r3117;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3121, %r3113, %r3118;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3124, %r657, %r1610, %r3105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3128, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3129, %r3105, %r3128;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3132, %r3124, %r3129;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3135, %r668, %r1610, %r3116, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3140, %r3116, %r3139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3143, %r3135, %r3140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r3146, %r2972, %r2898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3152, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3152, %r2983, %r2902;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3158, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r3158, %r2994, %r2906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3164, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r3164, %r3005, %r2910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3170, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3170, %r3018, %r2914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3178, %r3176, %r3029, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3182, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3184, %r3182, %r3040, %r2922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3188, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r3188, %r3051, %r2926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3194, %r3064, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3200, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r3200, %r3075, %r2934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r3206, %r3086, %r2938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3212, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r3212, %r3097, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3218, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r3218, %r3110, %r2946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3224, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r3224, %r3121, %r2950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3230, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3230, %r3132, %r2954;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3236, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r3236, %r3143, %r2958;
	// end inline asm
	// begin inline asm
	mov.b32 %r3247, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3258, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3244, %r657, %r658, %r3247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3249, %r3247, %r3248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3252, %r3244, %r3249;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3255, %r668, %r658, %r3258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3260, %r3258, %r3259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3263, %r3255, %r3260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3266, %r657, %r680, %r3247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3271, %r3247, %r3270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3274, %r3266, %r3271;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3277, %r668, %r680, %r3258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3282, %r3258, %r3281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3285, %r3277, %r3282;
	// end inline asm
	// begin inline asm
	mov.b32 %r3293, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3304, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3290, %r657, %r704, %r3293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3295, %r3293, %r3294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3298, %r3290, %r3295;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3301, %r668, %r704, %r3304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3306, %r3304, %r3305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3309, %r3301, %r3306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3312, %r657, %r726, %r3293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3317, %r3293, %r3316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3320, %r3312, %r3317;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3323, %r668, %r726, %r3304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3328, %r3304, %r3327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3331, %r3323, %r3328;
	// end inline asm
	// begin inline asm
	mov.b32 %r3339, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3350, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3336, %r657, %r750, %r3339, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3341, %r3339, %r3340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3344, %r3336, %r3341;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3347, %r668, %r750, %r3350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3352, %r3350, %r3351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3355, %r3347, %r3352;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3358, %r657, %r772, %r3339, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3362, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3363, %r3339, %r3362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3366, %r3358, %r3363;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3369, %r668, %r772, %r3350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3373, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3374, %r3350, %r3373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3377, %r3369, %r3374;
	// end inline asm
	// begin inline asm
	mov.b32 %r3385, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3396, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3382, %r657, %r796, %r3385, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3387, %r3385, %r3386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3390, %r3382, %r3387;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3393, %r668, %r796, %r3396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3398, %r3396, %r3397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3401, %r3393, %r3398;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3404, %r657, %r818, %r3385, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3408, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3409, %r3385, %r3408;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3412, %r3404, %r3409;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3415, %r668, %r818, %r3396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3420, %r3396, %r3419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3423, %r3415, %r3420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r264, %r3252, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r264, %r3263, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r264, %r3274, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r264, %r3285, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r264, %r3298, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r264, %r3309, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r264, %r3320, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r264, %r3331, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r264, %r3344, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r264, %r3355, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r264, %r3366, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r264, %r3377, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r264, %r3390, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r264, %r3401, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r264, %r3412, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r264, %r3423, %r3238;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3490, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3492, %r3490, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r310, %r3497, %r3492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3499, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3501, %r3499, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r310, %r3506, %r3501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3508, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3510, %r3508, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r310, %r3515, %r3510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3517, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3519, %r3517, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r310, %r3524, %r3519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3526, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3528, %r3526, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r310, %r3533, %r3528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3535, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3537, %r3535, %r3539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r310, %r3542, %r3537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3544, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3546, %r3544, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r310, %r3551, %r3546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3553, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3555, %r3553, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r310, %r3560, %r3555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3562, %r313, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r310, %r3494, %r3562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r313, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r310, %r3503, %r3569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3576, %r313, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r310, %r3512, %r3576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r313, %r3524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r310, %r3521, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r313, %r3533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r310, %r3530, %r3590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r313, %r3542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r310, %r3539, %r3597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3604, %r313, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3607, %r310, %r3548, %r3604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3611, %r313, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3614, %r310, %r3557, %r3611;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3705, %r3702}, {%r357, %r363, %r360, %r366}, {%r3495, %r3565}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3714, %r3711}, {%r357, %r363, %r360, %r366}, {%r3504, %r3572}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3723, %r3720}, {%r357, %r363, %r360, %r366}, {%r3513, %r3579}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3732, %r3729}, {%r357, %r363, %r360, %r366}, {%r3522, %r3586}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3741, %r3738}, {%r357, %r363, %r360, %r366}, {%r3531, %r3593}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3750, %r3747}, {%r357, %r363, %r360, %r366}, {%r3540, %r3600}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3759, %r3756}, {%r357, %r363, %r360, %r366}, {%r3549, %r3607}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3768, %r3765}, {%r357, %r363, %r360, %r366}, {%r3558, %r3614}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3698, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3700, %r3698, %r3702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3703, %r401, %r3705, %r3700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3707, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3709, %r3707, %r3711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3712, %r401, %r3714, %r3709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3716, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3718, %r3716, %r3720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3721, %r401, %r3723, %r3718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3725, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3727, %r3725, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3730, %r401, %r3732, %r3727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3734, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3736, %r3734, %r3738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3739, %r401, %r3741, %r3736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3743, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3745, %r3743, %r3747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3748, %r401, %r3750, %r3745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3752, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3754, %r3752, %r3756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3757, %r401, %r3759, %r3754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3761, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3763, %r3761, %r3765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3766, %r401, %r3768, %r3763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3770, %r404, %r3705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3773, %r401, %r3702, %r3770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3777, %r404, %r3714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3780, %r401, %r3711, %r3777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3784, %r404, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3787, %r401, %r3720, %r3784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3791, %r404, %r3732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3794, %r401, %r3729, %r3791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3798, %r404, %r3741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3801, %r401, %r3738, %r3798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3805, %r404, %r3750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3808, %r401, %r3747, %r3805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3812, %r404, %r3759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3815, %r401, %r3756, %r3812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3819, %r404, %r3768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3822, %r401, %r3765, %r3819;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3826, %r3827}, {%r435, %r441, %r438, %r444}, {%r3703, %r3773}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3836, %r3837}, {%r435, %r441, %r438, %r444}, {%r3712, %r3780}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3846, %r3847}, {%r435, %r441, %r438, %r444}, {%r3721, %r3787}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3856, %r3857}, {%r435, %r441, %r438, %r444}, {%r3730, %r3794}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3866, %r3867}, {%r435, %r441, %r438, %r444}, {%r3739, %r3801}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3876, %r3877}, {%r435, %r441, %r438, %r444}, {%r3748, %r3808}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3886, %r3887}, {%r435, %r441, %r438, %r444}, {%r3757, %r3815}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3896, %r3897}, {%r435, %r441, %r438, %r444}, {%r3766, %r3822}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3906, %r121, %r3826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3909, %r121, %r3827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r121, %r3836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r121, %r3837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r121, %r3846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3921, %r121, %r3847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3924, %r121, %r3856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3927, %r121, %r3857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3930, %r121, %r3866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3933, %r121, %r3867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3936, %r121, %r3876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3939, %r121, %r3877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3942, %r121, %r3886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3945, %r121, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3948, %r121, %r3896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3951, %r121, %r3897;
	// end inline asm
	// begin inline asm
	mov.b32 %r3954, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3955, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3956, %r3906, %r3954;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3959, %r3956, %r3955;
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3963, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3964, %r3909, %r3962;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3967, %r3964, %r3963;
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3971, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3972, %r3912, %r3970;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3975, %r3972, %r3971;
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3979, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3980, %r3915, %r3978;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3983, %r3980, %r3979;
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3987, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3988, %r3918, %r3986;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3991, %r3988, %r3987;
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3995, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3996, %r3921, %r3994;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3999, %r3996, %r3995;
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4003, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4004, %r3924, %r4002;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4007, %r4004, %r4003;
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4011, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4012, %r3927, %r4010;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4015, %r4012, %r4011;
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4019, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4020, %r3930, %r4018;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4023, %r4020, %r4019;
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4027, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4028, %r3933, %r4026;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4031, %r4028, %r4027;
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4035, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4036, %r3936, %r4034;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4039, %r4036, %r4035;
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4043, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4044, %r3939, %r4042;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4047, %r4044, %r4043;
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4051, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4052, %r3942, %r4050;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4055, %r4052, %r4051;
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4059, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4060, %r3945, %r4058;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4063, %r4060, %r4059;
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4067, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4068, %r3948, %r4066;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4071, %r4068, %r4067;
	// end inline asm
	// begin inline asm
	mov.b32 %r4074, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4075, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4076, %r3951, %r4074;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4079, %r4076, %r4075;
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4084, %r4085, %r4083;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4087, %r3959, %r4084;
	// end inline asm
	// begin inline asm
	mov.b32 %r4090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4091, %r4085, %r4090;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4094, %r3967, %r4091;
	// end inline asm
	// begin inline asm
	mov.b32 %r4097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4098, %r4085, %r4097;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4101, %r3975, %r4098;
	// end inline asm
	// begin inline asm
	mov.b32 %r4104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4105, %r4085, %r4104;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4108, %r3983, %r4105;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4111, %r4087, %r4101, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4115, %r4094, %r4108, %r2318;
	// end inline asm
	shl.b32 	%r4122, %r4115, 4;
	// begin inline asm
	lop3.b32 %r4119, %r2324, %r4111, %r4122, 202;
	// end inline asm
	xor.b32  	%r7883, %r4119, -2004318072;
	// begin inline asm
	mov.b32 %r4126, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4125, %r4126, %r4124;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4128, %r3991, %r4125;
	// end inline asm
	// begin inline asm
	mov.b32 %r4131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4132, %r4126, %r4131;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4135, %r3999, %r4132;
	// end inline asm
	// begin inline asm
	mov.b32 %r4138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4139, %r4126, %r4138;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4142, %r4007, %r4139;
	// end inline asm
	// begin inline asm
	mov.b32 %r4145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4146, %r4126, %r4145;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4149, %r4015, %r4146;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4152, %r4128, %r4142, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4156, %r4135, %r4149, %r2318;
	// end inline asm
	shl.b32 	%r4163, %r4156, 4;
	// begin inline asm
	lop3.b32 %r4160, %r2324, %r4152, %r4163, 202;
	// end inline asm
	xor.b32  	%r7884, %r4160, -2004318072;
	// begin inline asm
	mov.b32 %r4167, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4165, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4166, %r4167, %r4165;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4169, %r4023, %r4166;
	// end inline asm
	// begin inline asm
	mov.b32 %r4172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4173, %r4167, %r4172;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4176, %r4031, %r4173;
	// end inline asm
	// begin inline asm
	mov.b32 %r4179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4180, %r4167, %r4179;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4183, %r4039, %r4180;
	// end inline asm
	// begin inline asm
	mov.b32 %r4186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4187, %r4167, %r4186;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4190, %r4047, %r4187;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4193, %r4169, %r4183, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4197, %r4176, %r4190, %r2318;
	// end inline asm
	shl.b32 	%r4204, %r4197, 4;
	// begin inline asm
	lop3.b32 %r4201, %r2324, %r4193, %r4204, 202;
	// end inline asm
	xor.b32  	%r7885, %r4201, -2004318072;
	// begin inline asm
	mov.b32 %r4208, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4207, %r4208, %r4206;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4210, %r4055, %r4207;
	// end inline asm
	// begin inline asm
	mov.b32 %r4213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4214, %r4208, %r4213;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4217, %r4063, %r4214;
	// end inline asm
	// begin inline asm
	mov.b32 %r4220, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4221, %r4208, %r4220;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4224, %r4071, %r4221;
	// end inline asm
	// begin inline asm
	mov.b32 %r4227, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4228, %r4208, %r4227;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4231, %r4079, %r4228;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4234, %r4210, %r4224, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4238, %r4217, %r4231, %r2318;
	// end inline asm
	shl.b32 	%r4245, %r4238, 4;
	// begin inline asm
	lop3.b32 %r4242, %r2324, %r4234, %r4245, 202;
	// end inline asm
	xor.b32  	%r7886, %r4242, -2004318072;
	st.shared.u32 	[%rd189], %r7883;
	st.shared.u32 	[%rd190], %r7884;
	st.shared.u32 	[%rd191], %r7885;
	st.shared.u32 	[%rd192], %r7886;
	ld.shared.u32 	%r8035, [%rd132];
	ld.shared.u32 	%r8034, [%rd134];
	ld.shared.u32 	%r8033, [%rd136];
	ld.shared.u32 	%r8032, [%rd138];
	// begin inline asm
	mov.b32 %r4251, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4262, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4250, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r4248, %r657, %r4250, %r4251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4252, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4253, %r4251, %r4252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4256, %r4248, %r4253;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4259, %r668, %r4250, %r4262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4263, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4264, %r4262, %r4263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4267, %r4259, %r4264;
	// end inline asm
	shr.u32 	%r4272, %r4250, 8;
	// begin inline asm
	lop3.b32 %r4270, %r657, %r4272, %r4251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4274, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4275, %r4251, %r4274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4278, %r4270, %r4275;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4281, %r668, %r4272, %r4262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4285, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4286, %r4262, %r4285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4289, %r4281, %r4286;
	// end inline asm
	// begin inline asm
	mov.b32 %r4297, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4308, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4296, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r4294, %r657, %r4296, %r4297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4299, %r4297, %r4298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4302, %r4294, %r4299;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4305, %r668, %r4296, %r4308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4310, %r4308, %r4309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4313, %r4305, %r4310;
	// end inline asm
	shr.u32 	%r4318, %r4296, 8;
	// begin inline asm
	lop3.b32 %r4316, %r657, %r4318, %r4297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4320, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4321, %r4297, %r4320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4324, %r4316, %r4321;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4327, %r668, %r4318, %r4308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4332, %r4308, %r4331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4335, %r4327, %r4332;
	// end inline asm
	// begin inline asm
	mov.b32 %r4343, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4354, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4342, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r4340, %r657, %r4342, %r4343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4345, %r4343, %r4344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4348, %r4340, %r4345;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4351, %r668, %r4342, %r4354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4356, %r4354, %r4355;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4359, %r4351, %r4356;
	// end inline asm
	shr.u32 	%r4364, %r4342, 8;
	// begin inline asm
	lop3.b32 %r4362, %r657, %r4364, %r4343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4366, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4367, %r4343, %r4366;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4370, %r4362, %r4367;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4373, %r668, %r4364, %r4354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4378, %r4354, %r4377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4381, %r4373, %r4378;
	// end inline asm
	// begin inline asm
	mov.b32 %r4389, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4400, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4388, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r4386, %r657, %r4388, %r4389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4391, %r4389, %r4390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4394, %r4386, %r4391;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4397, %r668, %r4388, %r4400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4401, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4402, %r4400, %r4401;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4405, %r4397, %r4402;
	// end inline asm
	shr.u32 	%r4410, %r4388, 8;
	// begin inline asm
	lop3.b32 %r4408, %r657, %r4410, %r4389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4413, %r4389, %r4412;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4416, %r4408, %r4413;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4419, %r668, %r4410, %r4400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4424, %r4400, %r4423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4427, %r4419, %r4424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4430, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4432, %r4430, %r4256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4435, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4437, %r4435, %r4267;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4440, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4442, %r4440, %r4278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4445, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4447, %r4445, %r4289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4450, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4452, %r4450, %r4302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4455, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4457, %r4455, %r4313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4460, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4462, %r4460, %r4324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4465, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4467, %r4465, %r4335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4470, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4472, %r4470, %r4348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4475, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4477, %r4475, %r4359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4480, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4482, %r4480, %r4370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4485, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4487, %r4485, %r4381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4490, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4492, %r4490, %r4394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4495, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4497, %r4495, %r4405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4500, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4502, %r4500, %r4416;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4505, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4507, %r4505, %r4427;
	// end inline asm
	// begin inline asm
	mov.b32 %r4515, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4526, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4512, %r657, %r1450, %r4515, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4516, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4517, %r4515, %r4516;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4520, %r4512, %r4517;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4523, %r668, %r1450, %r4526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4527, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4528, %r4526, %r4527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4531, %r4523, %r4528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4534, %r657, %r1472, %r4515, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4538, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4539, %r4515, %r4538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4542, %r4534, %r4539;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4545, %r668, %r1472, %r4526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4549, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4550, %r4526, %r4549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4553, %r4545, %r4550;
	// end inline asm
	// begin inline asm
	mov.b32 %r4561, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4572, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4558, %r657, %r1496, %r4561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4562, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4563, %r4561, %r4562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4566, %r4558, %r4563;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4569, %r668, %r1496, %r4572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4574, %r4572, %r4573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4577, %r4569, %r4574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4580, %r657, %r1518, %r4561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4585, %r4561, %r4584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4588, %r4580, %r4585;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4591, %r668, %r1518, %r4572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4596, %r4572, %r4595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4599, %r4591, %r4596;
	// end inline asm
	// begin inline asm
	mov.b32 %r4607, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4618, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4604, %r657, %r1542, %r4607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4608, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4609, %r4607, %r4608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4612, %r4604, %r4609;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4615, %r668, %r1542, %r4618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4619, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4620, %r4618, %r4619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4623, %r4615, %r4620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4626, %r657, %r1564, %r4607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4631, %r4607, %r4630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4634, %r4626, %r4631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4637, %r668, %r1564, %r4618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4641, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4642, %r4618, %r4641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4645, %r4637, %r4642;
	// end inline asm
	// begin inline asm
	mov.b32 %r4653, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4664, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4650, %r657, %r1588, %r4653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4654, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4655, %r4653, %r4654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4658, %r4650, %r4655;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4661, %r668, %r1588, %r4664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4666, %r4664, %r4665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4669, %r4661, %r4666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4672, %r657, %r1610, %r4653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4677, %r4653, %r4676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4680, %r4672, %r4677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4683, %r668, %r1610, %r4664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4687, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4688, %r4664, %r4687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4691, %r4683, %r4688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4694, %r228, %r4520, %r4432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4698, %r228, %r4531, %r4437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4702, %r228, %r4542, %r4442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4706, %r228, %r4553, %r4447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4710, %r228, %r4566, %r4452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4714, %r228, %r4577, %r4457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4718, %r228, %r4588, %r4462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4722, %r228, %r4599, %r4467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4726, %r228, %r4612, %r4472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4730, %r228, %r4623, %r4477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4734, %r228, %r4634, %r4482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4738, %r228, %r4645, %r4487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4742, %r228, %r4658, %r4492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4746, %r228, %r4669, %r4497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4750, %r228, %r4680, %r4502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4754, %r228, %r4691, %r4507;
	// end inline asm
	// begin inline asm
	mov.b32 %r4763, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4774, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4760, %r657, %r658, %r4763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4765, %r4763, %r4764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4768, %r4760, %r4765;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4771, %r668, %r658, %r4774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4775, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4776, %r4774, %r4775;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4779, %r4771, %r4776;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4782, %r657, %r680, %r4763, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4787, %r4763, %r4786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4790, %r4782, %r4787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4793, %r668, %r680, %r4774, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4798, %r4774, %r4797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4801, %r4793, %r4798;
	// end inline asm
	// begin inline asm
	mov.b32 %r4809, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4820, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4806, %r657, %r704, %r4809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4810, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4811, %r4809, %r4810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4814, %r4806, %r4811;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4817, %r668, %r704, %r4820, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4821, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4822, %r4820, %r4821;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4825, %r4817, %r4822;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4828, %r657, %r726, %r4809, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4832, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4833, %r4809, %r4832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4836, %r4828, %r4833;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4839, %r668, %r726, %r4820, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4843, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4844, %r4820, %r4843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4847, %r4839, %r4844;
	// end inline asm
	// begin inline asm
	mov.b32 %r4855, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4866, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4852, %r657, %r750, %r4855, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4856, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4857, %r4855, %r4856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4860, %r4852, %r4857;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4863, %r668, %r750, %r4866, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4867, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4868, %r4866, %r4867;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4871, %r4863, %r4868;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4874, %r657, %r772, %r4855, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4878, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4879, %r4855, %r4878;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4882, %r4874, %r4879;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4885, %r668, %r772, %r4866, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4889, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4890, %r4866, %r4889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4893, %r4885, %r4890;
	// end inline asm
	// begin inline asm
	mov.b32 %r4901, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4912, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4898, %r657, %r796, %r4901, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4903, %r4901, %r4902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4906, %r4898, %r4903;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4909, %r668, %r796, %r4912, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4913, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4914, %r4912, %r4913;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4917, %r4909, %r4914;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4920, %r657, %r818, %r4901, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4924, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4925, %r4901, %r4924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4928, %r4920, %r4925;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4931, %r668, %r818, %r4912, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4936, %r4912, %r4935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4939, %r4931, %r4936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4942, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4944, %r4942, %r4768, %r4694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4948, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4950, %r4948, %r4779, %r4698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4954, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4956, %r4954, %r4790, %r4702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4960, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4962, %r4960, %r4801, %r4706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4966, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4968, %r4966, %r4814, %r4710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4972, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4974, %r4972, %r4825, %r4714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4978, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4980, %r4978, %r4836, %r4718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4984, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4986, %r4984, %r4847, %r4722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4990, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4992, %r4990, %r4860, %r4726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4996, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4998, %r4996, %r4871, %r4730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5002, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5004, %r5002, %r4882, %r4734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5008, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5010, %r5008, %r4893, %r4738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5014, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5016, %r5014, %r4906, %r4742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5020, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5022, %r5020, %r4917, %r4746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5026, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5028, %r5026, %r4928, %r4750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5032, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5034, %r5032, %r4939, %r4754;
	// end inline asm
	// begin inline asm
	mov.b32 %r5043, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5054, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5040, %r657, %r2454, %r5043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5045, %r5043, %r5044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5048, %r5040, %r5045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5051, %r668, %r2454, %r5054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5056, %r5054, %r5055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5059, %r5051, %r5056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5062, %r657, %r2476, %r5043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5067, %r5043, %r5066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5070, %r5062, %r5067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5073, %r668, %r2476, %r5054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5078, %r5054, %r5077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5081, %r5073, %r5078;
	// end inline asm
	// begin inline asm
	mov.b32 %r5089, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5100, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5086, %r657, %r2500, %r5089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5091, %r5089, %r5090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5094, %r5086, %r5091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5097, %r668, %r2500, %r5100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5102, %r5100, %r5101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5105, %r5097, %r5102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5108, %r657, %r2522, %r5089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5113, %r5089, %r5112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5116, %r5108, %r5113;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5119, %r668, %r2522, %r5100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5124, %r5100, %r5123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5127, %r5119, %r5124;
	// end inline asm
	// begin inline asm
	mov.b32 %r5135, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5146, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5132, %r657, %r2546, %r5135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5136, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5137, %r5135, %r5136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5140, %r5132, %r5137;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5143, %r668, %r2546, %r5146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5147, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5148, %r5146, %r5147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5151, %r5143, %r5148;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5154, %r657, %r2568, %r5135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5159, %r5135, %r5158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5162, %r5154, %r5159;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5165, %r668, %r2568, %r5146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5169, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5170, %r5146, %r5169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5173, %r5165, %r5170;
	// end inline asm
	// begin inline asm
	mov.b32 %r5181, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5192, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5178, %r657, %r2592, %r5181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5183, %r5181, %r5182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5186, %r5178, %r5183;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5189, %r668, %r2592, %r5192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5194, %r5192, %r5193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5197, %r5189, %r5194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5200, %r657, %r2614, %r5181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5204, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5205, %r5181, %r5204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5208, %r5200, %r5205;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5211, %r668, %r2614, %r5192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5216, %r5192, %r5215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5219, %r5211, %r5216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5293, %r264, %r5048, %r4944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5290, %r264, %r5059, %r4950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5302, %r264, %r5070, %r4956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r264, %r5081, %r4962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r264, %r5094, %r4968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r264, %r5105, %r4974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r264, %r5116, %r4980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r264, %r5127, %r4986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5329, %r264, %r5140, %r4992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r264, %r5151, %r4998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5338, %r264, %r5162, %r5004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r264, %r5173, %r5010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5347, %r264, %r5186, %r5016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r264, %r5197, %r5022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r264, %r5208, %r5028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5353, %r264, %r5219, %r5034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5286, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5288, %r5286, %r5290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r310, %r5293, %r5288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5295, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5297, %r5295, %r5299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r310, %r5302, %r5297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5304, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5306, %r5304, %r5308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r310, %r5311, %r5306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5313, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5315, %r5313, %r5317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r310, %r5320, %r5315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5322, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5324, %r5322, %r5326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r310, %r5329, %r5324;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5331, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5333, %r5331, %r5335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r310, %r5338, %r5333;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5340, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5342, %r5340, %r5344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5345, %r310, %r5347, %r5342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5349, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5351, %r5349, %r5353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5354, %r310, %r5356, %r5351;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5358, %r313, %r5293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5361, %r310, %r5290, %r5358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5365, %r313, %r5302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5368, %r310, %r5299, %r5365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5372, %r313, %r5311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r310, %r5308, %r5372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5379, %r313, %r5320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5382, %r310, %r5317, %r5379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5386, %r313, %r5329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5389, %r310, %r5326, %r5386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5393, %r313, %r5338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5396, %r310, %r5335, %r5393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5400, %r313, %r5347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5403, %r310, %r5344, %r5400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5407, %r313, %r5356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5410, %r310, %r5353, %r5407;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5501, %r5498}, {%r357, %r363, %r360, %r366}, {%r5291, %r5361}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5510, %r5507}, {%r357, %r363, %r360, %r366}, {%r5300, %r5368}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5519, %r5516}, {%r357, %r363, %r360, %r366}, {%r5309, %r5375}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5528, %r5525}, {%r357, %r363, %r360, %r366}, {%r5318, %r5382}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5537, %r5534}, {%r357, %r363, %r360, %r366}, {%r5327, %r5389}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5546, %r5543}, {%r357, %r363, %r360, %r366}, {%r5336, %r5396}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5555, %r5552}, {%r357, %r363, %r360, %r366}, {%r5345, %r5403}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5564, %r5561}, {%r357, %r363, %r360, %r366}, {%r5354, %r5410}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5494, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5496, %r5494, %r5498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5499, %r401, %r5501, %r5496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5503, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5505, %r5503, %r5507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5508, %r401, %r5510, %r5505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5512, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5514, %r5512, %r5516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5517, %r401, %r5519, %r5514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5521, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5523, %r5521, %r5525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5526, %r401, %r5528, %r5523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5530, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5532, %r5530, %r5534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5535, %r401, %r5537, %r5532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5539, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5541, %r5539, %r5543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5544, %r401, %r5546, %r5541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5548, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5550, %r5548, %r5552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5553, %r401, %r5555, %r5550;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5557, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5559, %r5557, %r5561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5562, %r401, %r5564, %r5559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5566, %r404, %r5501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5569, %r401, %r5498, %r5566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5573, %r404, %r5510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5576, %r401, %r5507, %r5573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5580, %r404, %r5519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5583, %r401, %r5516, %r5580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5587, %r404, %r5528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5590, %r401, %r5525, %r5587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5594, %r404, %r5537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5597, %r401, %r5534, %r5594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5601, %r404, %r5546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5604, %r401, %r5543, %r5601;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5608, %r404, %r5555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5611, %r401, %r5552, %r5608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5615, %r404, %r5564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5618, %r401, %r5561, %r5615;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5622, %r5623}, {%r435, %r441, %r438, %r444}, {%r5499, %r5569}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5632, %r5633}, {%r435, %r441, %r438, %r444}, {%r5508, %r5576}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5642, %r5643}, {%r435, %r441, %r438, %r444}, {%r5517, %r5583}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5652, %r5653}, {%r435, %r441, %r438, %r444}, {%r5526, %r5590}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5662, %r5663}, {%r435, %r441, %r438, %r444}, {%r5535, %r5597}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5672, %r5673}, {%r435, %r441, %r438, %r444}, {%r5544, %r5604}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5682, %r5683}, {%r435, %r441, %r438, %r444}, {%r5553, %r5611}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5692, %r5693}, {%r435, %r441, %r438, %r444}, {%r5562, %r5618}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5702, %r121, %r5622;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5705, %r121, %r5623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r121, %r5632;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r121, %r5633;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r121, %r5642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5717, %r121, %r5643;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5720, %r121, %r5652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5723, %r121, %r5653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5726, %r121, %r5662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5729, %r121, %r5663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5732, %r121, %r5672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5735, %r121, %r5673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5738, %r121, %r5682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5741, %r121, %r5683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5744, %r121, %r5692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5747, %r121, %r5693;
	// end inline asm
	// begin inline asm
	mov.b32 %r5750, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5751, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5752, %r5702, %r5750;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5755, %r5752, %r5751;
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5759, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5760, %r5705, %r5758;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5763, %r5760, %r5759;
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5767, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5768, %r5708, %r5766;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5771, %r5768, %r5767;
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5775, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5776, %r5711, %r5774;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5779, %r5776, %r5775;
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5783, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5784, %r5714, %r5782;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5787, %r5784, %r5783;
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5791, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5792, %r5717, %r5790;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5795, %r5792, %r5791;
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5799, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5800, %r5720, %r5798;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5803, %r5800, %r5799;
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5807, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5808, %r5723, %r5806;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5811, %r5808, %r5807;
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5815, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5816, %r5726, %r5814;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5819, %r5816, %r5815;
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5823, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5824, %r5729, %r5822;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5827, %r5824, %r5823;
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5831, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5832, %r5732, %r5830;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5835, %r5832, %r5831;
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5839, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5840, %r5735, %r5838;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5843, %r5840, %r5839;
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5847, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5848, %r5738, %r5846;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5851, %r5848, %r5847;
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5855, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5856, %r5741, %r5854;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5859, %r5856, %r5855;
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5863, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5864, %r5744, %r5862;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5867, %r5864, %r5863;
	// end inline asm
	// begin inline asm
	mov.b32 %r5870, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5871, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5872, %r5747, %r5870;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5875, %r5872, %r5871;
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5880, %r5881, %r5879;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5883, %r5755, %r5880;
	// end inline asm
	// begin inline asm
	mov.b32 %r5886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5887, %r5881, %r5886;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5890, %r5763, %r5887;
	// end inline asm
	// begin inline asm
	mov.b32 %r5893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5894, %r5881, %r5893;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5897, %r5771, %r5894;
	// end inline asm
	// begin inline asm
	mov.b32 %r5900, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5901, %r5881, %r5900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5904, %r5779, %r5901;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5907, %r5883, %r5897, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5911, %r5890, %r5904, %r2318;
	// end inline asm
	shl.b32 	%r5918, %r5911, 4;
	// begin inline asm
	lop3.b32 %r5915, %r2324, %r5907, %r5918, 202;
	// end inline asm
	xor.b32  	%r7887, %r5915, -2004318072;
	// begin inline asm
	mov.b32 %r5922, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5921, %r5922, %r5920;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5924, %r5787, %r5921;
	// end inline asm
	// begin inline asm
	mov.b32 %r5927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5928, %r5922, %r5927;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5931, %r5795, %r5928;
	// end inline asm
	// begin inline asm
	mov.b32 %r5934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5935, %r5922, %r5934;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5938, %r5803, %r5935;
	// end inline asm
	// begin inline asm
	mov.b32 %r5941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5942, %r5922, %r5941;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5945, %r5811, %r5942;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5948, %r5924, %r5938, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5952, %r5931, %r5945, %r2318;
	// end inline asm
	shl.b32 	%r5959, %r5952, 4;
	// begin inline asm
	lop3.b32 %r5956, %r2324, %r5948, %r5959, 202;
	// end inline asm
	xor.b32  	%r7888, %r5956, -2004318072;
	// begin inline asm
	mov.b32 %r5963, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5961, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5962, %r5963, %r5961;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5965, %r5819, %r5962;
	// end inline asm
	// begin inline asm
	mov.b32 %r5968, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5969, %r5963, %r5968;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5972, %r5827, %r5969;
	// end inline asm
	// begin inline asm
	mov.b32 %r5975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5976, %r5963, %r5975;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5979, %r5835, %r5976;
	// end inline asm
	// begin inline asm
	mov.b32 %r5982, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5983, %r5963, %r5982;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5986, %r5843, %r5983;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5989, %r5965, %r5979, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5993, %r5972, %r5986, %r2318;
	// end inline asm
	shl.b32 	%r6000, %r5993, 4;
	// begin inline asm
	lop3.b32 %r5997, %r2324, %r5989, %r6000, 202;
	// end inline asm
	xor.b32  	%r7889, %r5997, -2004318072;
	// begin inline asm
	mov.b32 %r6004, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6003, %r6004, %r6002;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6006, %r5851, %r6003;
	// end inline asm
	// begin inline asm
	mov.b32 %r6009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6010, %r6004, %r6009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6013, %r5859, %r6010;
	// end inline asm
	// begin inline asm
	mov.b32 %r6016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6017, %r6004, %r6016;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6020, %r5867, %r6017;
	// end inline asm
	// begin inline asm
	mov.b32 %r6023, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6024, %r6004, %r6023;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6027, %r5875, %r6024;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6030, %r6006, %r6020, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6034, %r6013, %r6027, %r2318;
	// end inline asm
	shl.b32 	%r6041, %r6034, 4;
	// begin inline asm
	lop3.b32 %r6038, %r2324, %r6030, %r6041, 202;
	// end inline asm
	xor.b32  	%r7890, %r6038, -2004318072;
	st.shared.u32 	[%rd189], %r7887;
	st.shared.u32 	[%rd190], %r7888;
	st.shared.u32 	[%rd191], %r7889;
	st.shared.u32 	[%rd192], %r7890;
	ld.shared.u32 	%r8031, [%rd132];
	ld.shared.u32 	%r8030, [%rd134];
	ld.shared.u32 	%r8029, [%rd136];
	ld.shared.u32 	%r8028, [%rd138];
	// begin inline asm
	mov.b32 %r6047, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6058, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6046, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r6044, %r657, %r6046, %r6047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6049, %r6047, %r6048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6052, %r6044, %r6049;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6055, %r668, %r6046, %r6058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6059, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6060, %r6058, %r6059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6063, %r6055, %r6060;
	// end inline asm
	shr.u32 	%r6068, %r6046, 8;
	// begin inline asm
	lop3.b32 %r6066, %r657, %r6068, %r6047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6071, %r6047, %r6070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6074, %r6066, %r6071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6077, %r668, %r6068, %r6058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6082, %r6058, %r6081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6085, %r6077, %r6082;
	// end inline asm
	// begin inline asm
	mov.b32 %r6093, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6104, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6092, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r6090, %r657, %r6092, %r6093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6095, %r6093, %r6094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6098, %r6090, %r6095;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6101, %r668, %r6092, %r6104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6106, %r6104, %r6105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6109, %r6101, %r6106;
	// end inline asm
	shr.u32 	%r6114, %r6092, 8;
	// begin inline asm
	lop3.b32 %r6112, %r657, %r6114, %r6093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6116, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6117, %r6093, %r6116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6120, %r6112, %r6117;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6123, %r668, %r6114, %r6104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6127, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6128, %r6104, %r6127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6131, %r6123, %r6128;
	// end inline asm
	// begin inline asm
	mov.b32 %r6139, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6150, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6138, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r6136, %r657, %r6138, %r6139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6141, %r6139, %r6140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6144, %r6136, %r6141;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6147, %r668, %r6138, %r6150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6151, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6152, %r6150, %r6151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6155, %r6147, %r6152;
	// end inline asm
	shr.u32 	%r6160, %r6138, 8;
	// begin inline asm
	lop3.b32 %r6158, %r657, %r6160, %r6139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6162, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6163, %r6139, %r6162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6166, %r6158, %r6163;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6169, %r668, %r6160, %r6150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6173, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6174, %r6150, %r6173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6177, %r6169, %r6174;
	// end inline asm
	// begin inline asm
	mov.b32 %r6185, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6196, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6184, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6182, %r657, %r6184, %r6185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6187, %r6185, %r6186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6190, %r6182, %r6187;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6193, %r668, %r6184, %r6196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6197, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6198, %r6196, %r6197;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6201, %r6193, %r6198;
	// end inline asm
	shr.u32 	%r6206, %r6184, 8;
	// begin inline asm
	lop3.b32 %r6204, %r657, %r6206, %r6185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6208, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6209, %r6185, %r6208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6212, %r6204, %r6209;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6215, %r668, %r6206, %r6196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6220, %r6196, %r6219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6223, %r6215, %r6220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6226, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6228, %r6226, %r6052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6231, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6233, %r6231, %r6063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6236, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6238, %r6236, %r6074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6241, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6243, %r6241, %r6085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6246, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6248, %r6246, %r6098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6251, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6253, %r6251, %r6109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6256, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6258, %r6256, %r6120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6261, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6263, %r6261, %r6131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6266, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6268, %r6266, %r6144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6271, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6273, %r6271, %r6155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6276, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6278, %r6276, %r6166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6281, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6283, %r6281, %r6177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6286, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6288, %r6286, %r6190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6291, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6293, %r6291, %r6201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6296, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6298, %r6296, %r6212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6301, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6303, %r6301, %r6223;
	// end inline asm
	// begin inline asm
	mov.b32 %r6311, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6322, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6308, %r657, %r658, %r6311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6312, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6313, %r6311, %r6312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6316, %r6308, %r6313;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6319, %r668, %r658, %r6322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6324, %r6322, %r6323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6327, %r6319, %r6324;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6330, %r657, %r680, %r6311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6335, %r6311, %r6334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6338, %r6330, %r6335;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6341, %r668, %r680, %r6322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6346, %r6322, %r6345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6349, %r6341, %r6346;
	// end inline asm
	// begin inline asm
	mov.b32 %r6357, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6368, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6354, %r657, %r704, %r6357, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6358, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6359, %r6357, %r6358;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6362, %r6354, %r6359;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6365, %r668, %r704, %r6368, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6369, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6370, %r6368, %r6369;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6373, %r6365, %r6370;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6376, %r657, %r726, %r6357, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6380, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6381, %r6357, %r6380;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6384, %r6376, %r6381;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6387, %r668, %r726, %r6368, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6392, %r6368, %r6391;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6395, %r6387, %r6392;
	// end inline asm
	// begin inline asm
	mov.b32 %r6403, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6414, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6400, %r657, %r750, %r6403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6405, %r6403, %r6404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6408, %r6400, %r6405;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6411, %r668, %r750, %r6414, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6415, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6416, %r6414, %r6415;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6419, %r6411, %r6416;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6422, %r657, %r772, %r6403, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6427, %r6403, %r6426;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6430, %r6422, %r6427;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6433, %r668, %r772, %r6414, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6437, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6438, %r6414, %r6437;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6441, %r6433, %r6438;
	// end inline asm
	// begin inline asm
	mov.b32 %r6449, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6460, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6446, %r657, %r796, %r6449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6451, %r6449, %r6450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6454, %r6446, %r6451;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6457, %r668, %r796, %r6460, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6461, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6462, %r6460, %r6461;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6465, %r6457, %r6462;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6468, %r657, %r818, %r6449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6472, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6473, %r6449, %r6472;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6476, %r6468, %r6473;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6479, %r668, %r818, %r6460, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6483, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6484, %r6460, %r6483;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6487, %r6479, %r6484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6490, %r228, %r6316, %r6228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6494, %r228, %r6327, %r6233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6498, %r228, %r6338, %r6238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6502, %r228, %r6349, %r6243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6506, %r228, %r6362, %r6248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6510, %r228, %r6373, %r6253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6514, %r228, %r6384, %r6258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6518, %r228, %r6395, %r6263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6522, %r228, %r6408, %r6268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6526, %r228, %r6419, %r6273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6530, %r228, %r6430, %r6278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6534, %r228, %r6441, %r6283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6538, %r228, %r6454, %r6288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6542, %r228, %r6465, %r6293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6546, %r228, %r6476, %r6298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6550, %r228, %r6487, %r6303;
	// end inline asm
	// begin inline asm
	mov.b32 %r6559, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6570, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6556, %r657, %r2454, %r6559, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6560, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6561, %r6559, %r6560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6564, %r6556, %r6561;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6567, %r668, %r2454, %r6570, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6571, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6572, %r6570, %r6571;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6575, %r6567, %r6572;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6578, %r657, %r2476, %r6559, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6582, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6583, %r6559, %r6582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6586, %r6578, %r6583;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6589, %r668, %r2476, %r6570, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6593, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6594, %r6570, %r6593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6597, %r6589, %r6594;
	// end inline asm
	// begin inline asm
	mov.b32 %r6605, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6616, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6602, %r657, %r2500, %r6605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6607, %r6605, %r6606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6610, %r6602, %r6607;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6613, %r668, %r2500, %r6616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6617, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6618, %r6616, %r6617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6621, %r6613, %r6618;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6624, %r657, %r2522, %r6605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6628, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6629, %r6605, %r6628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6632, %r6624, %r6629;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6635, %r668, %r2522, %r6616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6639, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6640, %r6616, %r6639;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6643, %r6635, %r6640;
	// end inline asm
	// begin inline asm
	mov.b32 %r6651, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6662, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6648, %r657, %r2546, %r6651, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6652, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6653, %r6651, %r6652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6656, %r6648, %r6653;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6659, %r668, %r2546, %r6662, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6663, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6664, %r6662, %r6663;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6667, %r6659, %r6664;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6670, %r657, %r2568, %r6651, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6674, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6675, %r6651, %r6674;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6678, %r6670, %r6675;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6681, %r668, %r2568, %r6662, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6685, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6686, %r6662, %r6685;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6689, %r6681, %r6686;
	// end inline asm
	// begin inline asm
	mov.b32 %r6697, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6708, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6694, %r657, %r2592, %r6697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6698, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6699, %r6697, %r6698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6702, %r6694, %r6699;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6705, %r668, %r2592, %r6708, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6709, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6710, %r6708, %r6709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6713, %r6705, %r6710;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6716, %r657, %r2614, %r6697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6720, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6721, %r6697, %r6720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6724, %r6716, %r6721;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6727, %r668, %r2614, %r6708, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6732, %r6708, %r6731;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6735, %r6727, %r6732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6738, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6740, %r6738, %r6564, %r6490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6744, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6746, %r6744, %r6575, %r6494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6750, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6752, %r6750, %r6586, %r6498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6756, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6758, %r6756, %r6597, %r6502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6762, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6764, %r6762, %r6610, %r6506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6768, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6770, %r6768, %r6621, %r6510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6774, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6776, %r6774, %r6632, %r6514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6780, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6782, %r6780, %r6643, %r6518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6786, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6788, %r6786, %r6656, %r6522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6792, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6794, %r6792, %r6667, %r6526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6798, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6800, %r6798, %r6678, %r6530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6804, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6806, %r6804, %r6689, %r6534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6810, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6812, %r6810, %r6702, %r6538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6816, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6818, %r6816, %r6713, %r6542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6822, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6824, %r6822, %r6724, %r6546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6828, %r246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6830, %r6828, %r6735, %r6550;
	// end inline asm
	// begin inline asm
	mov.b32 %r6839, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6850, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6836, %r657, %r4250, %r6839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6841, %r6839, %r6840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6844, %r6836, %r6841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6847, %r668, %r4250, %r6850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6851, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6852, %r6850, %r6851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6855, %r6847, %r6852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6858, %r657, %r4272, %r6839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6863, %r6839, %r6862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6866, %r6858, %r6863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6869, %r668, %r4272, %r6850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6873, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6874, %r6850, %r6873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6877, %r6869, %r6874;
	// end inline asm
	// begin inline asm
	mov.b32 %r6885, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6896, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6882, %r657, %r4296, %r6885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6887, %r6885, %r6886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6890, %r6882, %r6887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6893, %r668, %r4296, %r6896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6898, %r6896, %r6897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6901, %r6893, %r6898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6904, %r657, %r4318, %r6885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6909, %r6885, %r6908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6912, %r6904, %r6909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6915, %r668, %r4318, %r6896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6920, %r6896, %r6919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6923, %r6915, %r6920;
	// end inline asm
	// begin inline asm
	mov.b32 %r6931, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6942, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6928, %r657, %r4342, %r6931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6932, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6933, %r6931, %r6932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6936, %r6928, %r6933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6939, %r668, %r4342, %r6942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6944, %r6942, %r6943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6947, %r6939, %r6944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6950, %r657, %r4364, %r6931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6955, %r6931, %r6954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6958, %r6950, %r6955;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6961, %r668, %r4364, %r6942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6966, %r6942, %r6965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6969, %r6961, %r6966;
	// end inline asm
	// begin inline asm
	mov.b32 %r6977, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6988, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6974, %r657, %r4388, %r6977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6979, %r6977, %r6978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6982, %r6974, %r6979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6985, %r668, %r4388, %r6988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6990, %r6988, %r6989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6993, %r6985, %r6990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6996, %r657, %r4410, %r6977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7001, %r6977, %r7000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7004, %r6996, %r7001;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7007, %r668, %r4410, %r6988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7012, %r6988, %r7011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7015, %r7007, %r7012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7089, %r264, %r6844, %r6740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7086, %r264, %r6855, %r6746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7098, %r264, %r6866, %r6752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r264, %r6877, %r6758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r264, %r6890, %r6764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r264, %r6901, %r6770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r264, %r6912, %r6776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r264, %r6923, %r6782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7125, %r264, %r6936, %r6788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r264, %r6947, %r6794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7134, %r264, %r6958, %r6800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r264, %r6969, %r6806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7143, %r264, %r6982, %r6812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r264, %r6993, %r6818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r264, %r7004, %r6824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7149, %r264, %r7015, %r6830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7082, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7084, %r7082, %r7086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r310, %r7089, %r7084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7091, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7093, %r7091, %r7095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r310, %r7098, %r7093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7100, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7102, %r7100, %r7104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r310, %r7107, %r7102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7109, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7111, %r7109, %r7113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r310, %r7116, %r7111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7118, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7120, %r7118, %r7122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r310, %r7125, %r7120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7127, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7129, %r7127, %r7131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r310, %r7134, %r7129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7136, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7138, %r7136, %r7140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7141, %r310, %r7143, %r7138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7145, %r313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7147, %r7145, %r7149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7150, %r310, %r7152, %r7147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7154, %r313, %r7089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7157, %r310, %r7086, %r7154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7161, %r313, %r7098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7164, %r310, %r7095, %r7161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7168, %r313, %r7107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r310, %r7104, %r7168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7175, %r313, %r7116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7178, %r310, %r7113, %r7175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7182, %r313, %r7125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7185, %r310, %r7122, %r7182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7189, %r313, %r7134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7192, %r310, %r7131, %r7189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7196, %r313, %r7143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7199, %r310, %r7140, %r7196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7203, %r313, %r7152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7206, %r310, %r7149, %r7203;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7297, %r7294}, {%r357, %r363, %r360, %r366}, {%r7087, %r7157}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7306, %r7303}, {%r357, %r363, %r360, %r366}, {%r7096, %r7164}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7315, %r7312}, {%r357, %r363, %r360, %r366}, {%r7105, %r7171}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7324, %r7321}, {%r357, %r363, %r360, %r366}, {%r7114, %r7178}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7333, %r7330}, {%r357, %r363, %r360, %r366}, {%r7123, %r7185}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7342, %r7339}, {%r357, %r363, %r360, %r366}, {%r7132, %r7192}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7351, %r7348}, {%r357, %r363, %r360, %r366}, {%r7141, %r7199}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7360, %r7357}, {%r357, %r363, %r360, %r366}, {%r7150, %r7206}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7290, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7292, %r7290, %r7294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7295, %r401, %r7297, %r7292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7299, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7301, %r7299, %r7303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7304, %r401, %r7306, %r7301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7308, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7310, %r7308, %r7312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7313, %r401, %r7315, %r7310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7317, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7319, %r7317, %r7321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7322, %r401, %r7324, %r7319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7326, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7328, %r7326, %r7330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7331, %r401, %r7333, %r7328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7335, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7337, %r7335, %r7339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7340, %r401, %r7342, %r7337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7344, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7346, %r7344, %r7348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7349, %r401, %r7351, %r7346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7353, %r404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7355, %r7353, %r7357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7358, %r401, %r7360, %r7355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7362, %r404, %r7297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7365, %r401, %r7294, %r7362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7369, %r404, %r7306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7372, %r401, %r7303, %r7369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7376, %r404, %r7315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7379, %r401, %r7312, %r7376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7383, %r404, %r7324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7386, %r401, %r7321, %r7383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7390, %r404, %r7333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7393, %r401, %r7330, %r7390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7397, %r404, %r7342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7400, %r401, %r7339, %r7397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7404, %r404, %r7351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7407, %r401, %r7348, %r7404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7411, %r404, %r7360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7414, %r401, %r7357, %r7411;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7418, %r7419}, {%r435, %r441, %r438, %r444}, {%r7295, %r7365}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7428, %r7429}, {%r435, %r441, %r438, %r444}, {%r7304, %r7372}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7438, %r7439}, {%r435, %r441, %r438, %r444}, {%r7313, %r7379}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7448, %r7449}, {%r435, %r441, %r438, %r444}, {%r7322, %r7386}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7458, %r7459}, {%r435, %r441, %r438, %r444}, {%r7331, %r7393}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7468, %r7469}, {%r435, %r441, %r438, %r444}, {%r7340, %r7400}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7478, %r7479}, {%r435, %r441, %r438, %r444}, {%r7349, %r7407}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7488, %r7489}, {%r435, %r441, %r438, %r444}, {%r7358, %r7414}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7498, %r121, %r7418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7501, %r121, %r7419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r121, %r7428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r121, %r7429;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r121, %r7438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7513, %r121, %r7439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7516, %r121, %r7448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7519, %r121, %r7449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7522, %r121, %r7458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7525, %r121, %r7459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7528, %r121, %r7468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7531, %r121, %r7469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7534, %r121, %r7478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7537, %r121, %r7479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7540, %r121, %r7488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7543, %r121, %r7489;
	// end inline asm
	// begin inline asm
	mov.b32 %r7546, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7547, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7548, %r7498, %r7546;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7551, %r7548, %r7547;
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7555, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7556, %r7501, %r7554;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7559, %r7556, %r7555;
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7563, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7564, %r7504, %r7562;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7567, %r7564, %r7563;
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7571, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7572, %r7507, %r7570;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7575, %r7572, %r7571;
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7579, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7580, %r7510, %r7578;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7583, %r7580, %r7579;
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7587, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7588, %r7513, %r7586;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7591, %r7588, %r7587;
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7595, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7596, %r7516, %r7594;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7599, %r7596, %r7595;
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7603, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7604, %r7519, %r7602;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7607, %r7604, %r7603;
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7611, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7612, %r7522, %r7610;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7615, %r7612, %r7611;
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7619, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7620, %r7525, %r7618;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7623, %r7620, %r7619;
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7627, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7628, %r7528, %r7626;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7631, %r7628, %r7627;
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7635, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7636, %r7531, %r7634;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7639, %r7636, %r7635;
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7643, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7644, %r7534, %r7642;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7647, %r7644, %r7643;
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7651, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7652, %r7537, %r7650;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7655, %r7652, %r7651;
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7659, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7660, %r7540, %r7658;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7663, %r7660, %r7659;
	// end inline asm
	// begin inline asm
	mov.b32 %r7666, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7667, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7668, %r7543, %r7666;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7671, %r7668, %r7667;
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7676, %r7677, %r7675;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7679, %r7551, %r7676;
	// end inline asm
	// begin inline asm
	mov.b32 %r7682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7683, %r7677, %r7682;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7686, %r7559, %r7683;
	// end inline asm
	// begin inline asm
	mov.b32 %r7689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7690, %r7677, %r7689;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7693, %r7567, %r7690;
	// end inline asm
	// begin inline asm
	mov.b32 %r7696, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7697, %r7677, %r7696;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7700, %r7575, %r7697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7703, %r7679, %r7693, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7707, %r7686, %r7700, %r2318;
	// end inline asm
	shl.b32 	%r7714, %r7707, 4;
	// begin inline asm
	lop3.b32 %r7711, %r2324, %r7703, %r7714, 202;
	// end inline asm
	xor.b32  	%r7891, %r7711, -2004318072;
	// begin inline asm
	mov.b32 %r7718, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7717, %r7718, %r7716;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7720, %r7583, %r7717;
	// end inline asm
	// begin inline asm
	mov.b32 %r7723, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7724, %r7718, %r7723;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7727, %r7591, %r7724;
	// end inline asm
	// begin inline asm
	mov.b32 %r7730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7731, %r7718, %r7730;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7734, %r7599, %r7731;
	// end inline asm
	// begin inline asm
	mov.b32 %r7737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7738, %r7718, %r7737;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7741, %r7607, %r7738;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7744, %r7720, %r7734, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7748, %r7727, %r7741, %r2318;
	// end inline asm
	shl.b32 	%r7755, %r7748, 4;
	// begin inline asm
	lop3.b32 %r7752, %r2324, %r7744, %r7755, 202;
	// end inline asm
	xor.b32  	%r7892, %r7752, -2004318072;
	// begin inline asm
	mov.b32 %r7759, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7757, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7758, %r7759, %r7757;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7761, %r7615, %r7758;
	// end inline asm
	// begin inline asm
	mov.b32 %r7764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7765, %r7759, %r7764;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7768, %r7623, %r7765;
	// end inline asm
	// begin inline asm
	mov.b32 %r7771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7772, %r7759, %r7771;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7775, %r7631, %r7772;
	// end inline asm
	// begin inline asm
	mov.b32 %r7778, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7779, %r7759, %r7778;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7782, %r7639, %r7779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7785, %r7761, %r7775, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7789, %r7768, %r7782, %r2318;
	// end inline asm
	shl.b32 	%r7796, %r7789, 4;
	// begin inline asm
	lop3.b32 %r7793, %r2324, %r7785, %r7796, 202;
	// end inline asm
	xor.b32  	%r7893, %r7793, -2004318072;
	// begin inline asm
	mov.b32 %r7800, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7799, %r7800, %r7798;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7802, %r7647, %r7799;
	// end inline asm
	// begin inline asm
	mov.b32 %r7805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7806, %r7800, %r7805;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7809, %r7655, %r7806;
	// end inline asm
	// begin inline asm
	mov.b32 %r7812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7813, %r7800, %r7812;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7816, %r7663, %r7813;
	// end inline asm
	// begin inline asm
	mov.b32 %r7819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7820, %r7800, %r7819;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7823, %r7671, %r7820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7826, %r7802, %r7816, %r2318;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7830, %r7809, %r7823, %r2318;
	// end inline asm
	shl.b32 	%r7837, %r7830, 4;
	// begin inline asm
	lop3.b32 %r7834, %r2324, %r7826, %r7837, 202;
	// end inline asm
	xor.b32  	%r7894, %r7834, -2004318072;
	st.shared.u32 	[%rd189], %r7891;
	st.shared.u32 	[%rd190], %r7892;
	st.shared.u32 	[%rd191], %r7893;
	st.shared.u32 	[%rd192], %r7894;
	add.s32 	%r8027, %r8027, 64;
	add.s64 	%rd192, %rd192, 8324;
	add.s64 	%rd191, %rd191, 8324;
	add.s64 	%rd190, %rd190, 8324;
	add.s64 	%rd189, %rd189, 8324;
	add.s32 	%r8026, %r8026, 1;
	setp.eq.s32 	%p241, %r8027, 256;
	@%p241 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit17427
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7900, [%rd5];
	ld.shared.u32 	%r7901, [%rd6+128];
	ld.shared.u32 	%r7908, [%rd6+4];
	ld.shared.u32 	%r7909, [%rd6+132];
	ld.shared.u32 	%r7916, [%rd5+8324];
	ld.shared.u32 	%r7917, [%rd6+8452];
	ld.shared.u32 	%r7924, [%rd6+8328];
	ld.shared.u32 	%r7925, [%rd6+8456];
	ld.shared.u32 	%r7932, [%rd5+16648];
	ld.shared.u32 	%r7933, [%rd6+16776];
	ld.shared.u32 	%r7940, [%rd6+16652];
	ld.shared.u32 	%r7941, [%rd6+16780];
	ld.shared.u32 	%r7948, [%rd5+24972];
	ld.shared.u32 	%r7949, [%rd6+25100];
	ld.shared.u32 	%r7956, [%rd6+24976];
	ld.shared.u32 	%r7957, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7895, %r7900, %r7901, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7899, %r7900, %r7901, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7903, %r7908, %r7909, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7907, %r7908, %r7909, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7911, %r7916, %r7917, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7915, %r7916, %r7917, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7919, %r7924, %r7925, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7923, %r7924, %r7925, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7927, %r7932, %r7933, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7931, %r7932, %r7933, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7935, %r7940, %r7941, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7939, %r7940, %r7941, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7943, %r7948, %r7949, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7947, %r7948, %r7949, %r573;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7951, %r7956, %r7957, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7955, %r7956, %r7957, %r573;
	// end inline asm
	selp.b32 	%r7959, %r7899, %r7895, %p228;
	shfl.sync.bfly.b32	%r174, %r7959, 8, 31, -1;
	selp.b32 	%r7960, %r7907, %r7903, %p228;
	shfl.sync.bfly.b32	%r175, %r7960, 8, 31, -1;
	selp.b32 	%r7961, %r7915, %r7911, %p228;
	shfl.sync.bfly.b32	%r7962, %r7961, 8, 31, -1;
	selp.b32 	%r7963, %r7923, %r7919, %p228;
	shfl.sync.bfly.b32	%r7964, %r7963, 8, 31, -1;
	selp.b32 	%r7965, %r7931, %r7927, %p228;
	shfl.sync.bfly.b32	%r7966, %r7965, 8, 31, -1;
	selp.b32 	%r7967, %r7939, %r7935, %p228;
	shfl.sync.bfly.b32	%r7968, %r7967, 8, 31, -1;
	selp.b32 	%r7969, %r7947, %r7943, %p228;
	shfl.sync.bfly.b32	%r7970, %r7969, 8, 31, -1;
	selp.b32 	%r7971, %r7955, %r7951, %p228;
	shfl.sync.bfly.b32	%r7972, %r7971, 8, 31, -1;
	and.b32  	%r188, %r112, 256;
	setp.eq.s32 	%p243, %r188, 0;
	shl.b32 	%r7996, %r112, 13;
	@%p243 bra 	$L__BB0_133;
// %bb.132:                             // %pass16541
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7973, %r175, %r7907, %p228;
	selp.b32 	%r7974, %r7903, %r175, %p228;
	selp.b32 	%r7975, %r174, %r7899, %p228;
	selp.b32 	%r7976, %r7895, %r174, %p228;
	or.b32  	%r7978, %r7996, %r98;
	or.b32  	%r7979, %r7978, %r87;
	or.b32  	%r7980, %r7979, %r89;
	cvt.s64.s32 	%rd139, %r7980;
	add.s64 	%rd140, %rd139, %rd7;
	shr.u64 	%rd141, %rd140, 38;
	add.s64 	%rd142, %rd140, %rd141;
	shr.s64 	%rd143, %rd142, 26;
	setp.lt.s64 	%p245, %rd140, 0;
	and.b64  	%rd144, %rd142, -67108864;
	setp.ne.s64 	%p246, %rd144, %rd140;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd145, 1, 0, %p247;
	sub.s64 	%rd146, %rd145, %rd143;
	shl.b64 	%rd147, %rd146, 26;
	add.s64 	%rd148, %rd147, %rd140;
	shl.b64 	%rd149, %rd148, 2;
	add.s64 	%rd150, %rd3, %rd149;
	st.global.v4.u32 	[%rd150], {%r7976, %r7974, %r7975, %r7973};
$L__BB0_133:                            // %pass16620
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7981, %r188, 64;
	setp.gt.u32 	%p248, %r7981, 191;
	@%p248 bra 	$L__BB0_150;
// %bb.134:                             // %pass16620.pass16722_crit_edge
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7987, %r7996, %r98;
	or.b32  	%r7988, %r7987, %r87;
	or.b32  	%r8040, %r7988, %r89;
	bra.uni 	$L__BB0_151;
$L__BB0_150:                            // %pass16643
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r176, %r7911, %r7962, %p228;
	selp.b32 	%r177, %r7962, %r7915, %p228;
	selp.b32 	%r178, %r7919, %r7964, %p228;
	selp.b32 	%r179, %r7964, %r7923, %p228;
	or.b32  	%r7983, %r7996, %r98;
	or.b32  	%r7984, %r7983, %r87;
	or.b32  	%r8040, %r7984, %r89;
	or.b32  	%r7985, %r8040, 524288;
	cvt.s64.s32 	%rd151, %r7985;
	add.s64 	%rd152, %rd151, %rd7;
	shr.u64 	%rd153, %rd152, 38;
	add.s64 	%rd154, %rd152, %rd153;
	shr.s64 	%rd155, %rd154, 26;
	setp.lt.s64 	%p249, %rd152, 0;
	and.b64  	%rd156, %rd154, -67108864;
	setp.ne.s64 	%p250, %rd156, %rd152;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd157, 1, 0, %p251;
	sub.s64 	%rd158, %rd157, %rd155;
	shl.b64 	%rd159, %rd158, 26;
	add.s64 	%rd160, %rd159, %rd152;
	shl.b64 	%rd161, %rd160, 2;
	add.s64 	%rd162, %rd3, %rd161;
	st.global.v4.u32 	[%rd162], {%r176, %r178, %r177, %r179};
$L__BB0_151:                            // %pass16722
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r184, %r7943, %r7970, %p228;
	selp.b32 	%r185, %r7970, %r7947, %p228;
	selp.b32 	%r186, %r7951, %r7972, %p228;
	selp.b32 	%r187, %r7972, %r7955, %p228;
	or.b32  	%r7989, %r188, 128;
	setp.lt.u32 	%p252, %r7989, 192;
	@%p252 bra 	$L__BB0_153;
// %bb.152:                             // %pass16745
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r180, %r7927, %r7966, %p228;
	selp.b32 	%r181, %r7966, %r7931, %p228;
	selp.b32 	%r182, %r7935, %r7968, %p228;
	selp.b32 	%r183, %r7968, %r7939, %p228;
	or.b32  	%r7990, %r8040, 1048576;
	cvt.s64.s32 	%rd163, %r7990;
	add.s64 	%rd164, %rd163, %rd7;
	shr.u64 	%rd165, %rd164, 38;
	add.s64 	%rd166, %rd164, %rd165;
	shr.s64 	%rd167, %rd166, 26;
	setp.lt.s64 	%p253, %rd164, 0;
	and.b64  	%rd168, %rd166, -67108864;
	setp.ne.s64 	%p254, %rd168, %rd164;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd169, 1, 0, %p255;
	sub.s64 	%rd170, %rd169, %rd167;
	shl.b64 	%rd171, %rd170, 26;
	add.s64 	%rd172, %rd171, %rd164;
	shl.b64 	%rd173, %rd172, 2;
	add.s64 	%rd174, %rd3, %rd173;
	st.global.v4.u32 	[%rd174], {%r180, %r182, %r181, %r183};
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L40513
	st.global.u32 	[%rd4], %r7995;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7994, 2;
	st.global.u32 	[%rd4], %r7994;
	mov.u64 	%rd187, exception3406;
	cvta.global.u64 	%rd188, %rd187;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd188;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd57, exception1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L40612
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11656, 
	(
	);
	} // callseq 3
	mov.u64 	%rd66, exception1;
	cvta.global.u64 	%rd67, %rd66;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd67;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L40609
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11656, 
	(
	);
	} // callseq 7
	mov.u64 	%rd72, exception1;
	cvta.global.u64 	%rd73, %rd72;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd73;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L40606
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11656, 
	(
	);
	} // callseq 13
	mov.u64 	%rd86, exception1;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r189;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
