// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11732
(
	.param .align 8 .b8 julia_power_by_squaring_11732_param_0[16],
	.param .b64 julia_power_by_squaring_11732_param_1,
	.param .b64 julia_power_by_squaring_11732_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3408[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<233>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8006>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<159>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r162, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r167, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r167, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r163, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r168, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r169, %r168, %r2;
	or.b32  	%r170, %r169, %r4;
	mul.wide.u32 	%rd43, %r170, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r171, 1;
	st.global.u32 	[%rd4], %r171;
	setp.lt.s32 	%p2, %r163, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r164, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r164, %r163;
	setp.gt.s32 	%p4, %r164, 65536;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r165, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r172, %r164, %r163;
	and.b32  	%r173, %r172, 255;
	setp.ne.s32 	%p6, %r173, 0;
	setp.lt.s32 	%p7, %r165, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r166, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r166, %r165;
	setp.gt.s32 	%p10, %r166, 1024;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	not.b32 	%r174, %r165;
	add.s32 	%r175, %r174, %r166;
	and.b32  	%r176, %r175, 3;
	setp.eq.s32 	%p12, %r176, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass145
	bfe.u32 	%r86, %r2, 2, 1;
	shr.u32 	%r87, %r2, 4;
	shl.b32 	%r184, %r87, 1;
	shl.b32 	%r185, %r86, 2;
	shl.b32 	%r88, %r2, 3;
	and.b32  	%r186, %r88, 24;
	or.b32  	%r187, %r185, %r186;
	or.b32  	%r188, %r184, %r187;
	bfe.u32 	%r189, %r2, 3, 1;
	or.b32  	%r90, %r189, %r188;
	or.b32  	%r91, %r90, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r90;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p18, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L484
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_10:                             // %L487
	cvt.rn.f32.s32 	%f181, %r91;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L504
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_12:                             // %L507
	or.b32  	%r207, %r90, 64;
	or.b32  	%r6, %r90, 96;
	cvt.rn.f32.s32 	%f216, %r207;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L586
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_14:                             // %L589
	shl.b32 	%r77, %r2, 2;
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L606
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_16:                             // %L609
	and.b32  	%r177, %r77, 4;
	and.b32  	%r179, %r2, 18;
	or.b32  	%r225, %r90, 128;
	or.b32  	%r8, %r90, 160;
	cvt.rn.f32.s32 	%f285, %r225;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L688
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_18:                             // %L691
	and.b32  	%r78, %r77, 32;
	shl.b32 	%r178, %r1, 4;
	or.b32  	%r180, %r179, %r177;
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L708
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_20:                             // %L711
	and.b32  	%r79, %r178, 4032;
	shl.b32 	%r80, %r2, 1;
	or.b32  	%r83, %r180, %r78;
	or.b32  	%r243, %r90, 192;
	or.b32  	%r10, %r90, 224;
	cvt.rn.f32.s32 	%f354, %r243;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L790
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_22:                             // %L793
	and.b32  	%r81, %r80, 8;
	or.b32  	%r181, %r83, %r79;
	shr.u32 	%r85, %r2, 1;
	shr.u32 	%r89, %r2, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L810
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_24:                             // %L813
	or.b32  	%r182, %r181, %r81;
	and.b32  	%r287, %r2, 3;
	and.b32  	%r288, %r89, 2;
	and.b32  	%r289, %r85, 4;
	or.b32  	%r290, %r86, %r288;
	or.b32  	%r14, %r290, %r289;
	mul.lo.s32 	%r291, %r287, %r14;
	shl.b32 	%r292, %r291, 1;
	neg.s32 	%r293, %r292;
	cvt.rn.f32.s32 	%f35, %r293;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p75, %f830, 0f40000000;
	setp.gtu.f32 	%p231, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p75 bra 	$L__BB0_95;
// %bb.25:
	@%p231 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_26;
$L__BB0_91:
	mov.b32 	%r93, %f830;
	and.b32  	%r294, %r93, 8388607;
	or.b32  	%r7987, %r294, 1065353216;
	mov.b32 	%f821, %r7987;
	add.s32 	%r295, %r93, -1073741824;
	and.b32  	%r7988, %r295, -8388608;
	setp.eq.s32 	%p82, %r7988, 0;
	@%p82 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r7988, 192937984;
	add.s32 	%r297, %r7987, %r296;
	mov.b32 	%f501, %r297;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7988, %r7988, %r296;
	mov.b32 	%r7987, %f821;
	setp.ne.s32 	%p83, %r7988, 0;
	setp.ne.s32 	%p84, %r7987, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p86, %r93, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_95;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r92, %f89;
	setp.lt.u32 	%p77, %r92, 1073741824;
	@%p77 bra 	$L__BB0_90;
// %bb.27:
	setp.lt.u32 	%p78, %r92, -2147483647;
	@%p78 bra 	$L__BB0_88;
// %bb.28:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p81, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p81;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p79, %f89, 0f40800000;
	@%p79 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p80, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p80;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i928
	shr.u32 	%r183, %r182, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p87, %f510, 0f7F800000;
	mov.b32 	%r298, %f36;
	and.b32  	%r100, %r298, -2147483648;
	@%p87 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r299, %f822;
	or.b32  	%r300, %r100, %r299;
	mov.b32 	%f822, %r300;
$L__BB0_97:                             // %__nv_fmodf.exit929
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd44, %r183, 4;
	and.b32  	%r309, %r80, 6;
	mov.u32 	%r310, -8;
	sub.s32 	%r311, %r310, %r309;
	mul.lo.s32 	%r312, %r14, %r311;
	cvt.rn.f32.s32 	%f105, %r312;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p95, %f818, 0f40000000;
	setp.gtu.f32 	%p232, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	@%p232 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r16, %f818;
	and.b32  	%r313, %r16, 8388607;
	or.b32  	%r7967, %r313, 1065353216;
	mov.b32 	%f809, %r7967;
	add.s32 	%r314, %r16, -1073741824;
	and.b32  	%r7968, %r314, -8388608;
	setp.eq.s32 	%p102, %r7968, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r315, %r7968, 192937984;
	add.s32 	%r316, %r7967, %r315;
	mov.b32 	%f552, %r316;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7968, %r7968, %r315;
	mov.b32 	%r7967, %f809;
	setp.ne.s32 	%p103, %r7968, 0;
	setp.ne.s32 	%p104, %r7967, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p97, %r15, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r15, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p101, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p99, %f39, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p100, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	add.s64 	%rd45, %rd1, %rd44;
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p107, %f561, 0f7F800000;
	mov.b32 	%r317, %f106;
	and.b32  	%r23, %r317, -2147483648;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r318, %f810;
	or.b32  	%r319, %r23, %r318;
	mov.b32 	%f810, %r319;
$L__BB0_42:                             // %__nv_fmodf.exit
	ld.global.u32 	%r84, [%rd45];
	mov.u64 	%rd46, 2;
	mov.u64 	%rd47, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11732, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd48, [retval0+0];
	} // callseq 2
	cvt.rn.f32.s64 	%f594, %rd48;
	div.approx.f32 	%f53, %f35, %f594;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p115, %f826, 0f40000000;
	@%p115 bra 	$L__BB0_105;
// %bb.43:
	setp.gtu.f32 	%p116, %f826, 0f4B800000;
	@%p116 bra 	$L__BB0_101;
	bra.uni 	$L__BB0_44;
$L__BB0_101:
	mov.b32 	%r102, %f826;
	and.b32  	%r340, %r102, 8388607;
	or.b32  	%r7989, %r340, 1065353216;
	mov.b32 	%f825, %r7989;
	add.s32 	%r341, %r102, -1073741824;
	and.b32  	%r7990, %r341, -8388608;
	setp.eq.s32 	%p122, %r7990, 0;
	@%p122 bra 	$L__BB0_104;
// %bb.102:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_103:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r342, %r7990, 192937984;
	add.s32 	%r343, %r7989, %r342;
	mov.b32 	%f605, %r343;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7990, %r7990, %r342;
	mov.b32 	%r7989, %f825;
	setp.ne.s32 	%p123, %r7990, 0;
	setp.ne.s32 	%p124, %r7989, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_103;
$L__BB0_104:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p126, %r102, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_105;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r101, %f109;
	setp.lt.u32 	%p117, %r101, 1073741824;
	@%p117 bra 	$L__BB0_100;
// %bb.45:
	setp.lt.u32 	%p118, %r101, -2147483647;
	@%p118 bra 	$L__BB0_98;
// %bb.46:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p121, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p121;
	bra.uni 	$L__BB0_100;
$L__BB0_98:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p119, %f109, 0f40800000;
	@%p119 bra 	$L__BB0_100;
// %bb.99:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p120, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p120;
$L__BB0_100:                            // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_105:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p127, %f614, 0f7F800000;
	@%p127 bra 	$L__BB0_107;
// %bb.106:
	mov.b32 	%r344, %f53;
	and.b32  	%r345, %r344, -2147483648;
	mov.b32 	%r346, %f826;
	or.b32  	%r347, %r345, %r346;
	mov.b32 	%f826, %r347;
$L__BB0_107:                            // %__nv_fmodf.exit960
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11732, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd52, [retval0+0];
	} // callseq 3
	cvt.rn.f32.s64 	%f645, %rd52;
	div.approx.f32 	%f125, %f105, %f645;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p135, %f814, 0f40000000;
	@%p135 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p136, %f814, 0f4B800000;
	@%p136 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r29, %f814;
	and.b32  	%r356, %r29, 8388607;
	or.b32  	%r7969, %r356, 1065353216;
	mov.b32 	%f813, %r7969;
	add.s32 	%r357, %r29, -1073741824;
	and.b32  	%r7970, %r357, -8388608;
	setp.eq.s32 	%p142, %r7970, 0;
	@%p142 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r358, %r7970, 192937984;
	add.s32 	%r359, %r7969, %r358;
	mov.b32 	%f656, %r359;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7970, %r7970, %r358;
	mov.b32 	%r7969, %f813;
	setp.ne.s32 	%p143, %r7970, 0;
	setp.ne.s32 	%p144, %r7969, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p146, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p137, %r28, 1073741824;
	@%p137 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p138, %r28, -2147483647;
	@%p138 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p141, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p141;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p139, %f56, 0f40800000;
	@%p139 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p140, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p140;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p147, %f665, 0f7F800000;
	@%p147 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r360, %f125;
	and.b32  	%r361, %r360, -2147483648;
	mov.b32 	%r362, %f814;
	or.b32  	%r363, %r361, %r362;
	mov.b32 	%f814, %r363;
$L__BB0_60:                             // %__nv_fmodf.exit867
	@%p75 bra 	$L__BB0_115;
// %bb.61:
	@%p231 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_62;
$L__BB0_111:
	mov.b32 	%r110, %f830;
	and.b32  	%r378, %r110, 8388607;
	or.b32  	%r7991, %r378, 1065353216;
	mov.b32 	%f829, %r7991;
	add.s32 	%r379, %r110, -1073741824;
	and.b32  	%r7992, %r379, -8388608;
	setp.eq.s32 	%p162, %r7992, 0;
	@%p162 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r380, %r7992, 192937984;
	add.s32 	%r381, %r7991, %r380;
	mov.b32 	%f708, %r381;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7992, %r7992, %r380;
	mov.b32 	%r7991, %f829;
	setp.ne.s32 	%p163, %r7992, 0;
	setp.ne.s32 	%p164, %r7991, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p166, %r110, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_115;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r109, %f128;
	setp.lt.u32 	%p157, %r109, 1073741824;
	@%p157 bra 	$L__BB0_110;
// %bb.63:
	setp.lt.u32 	%p158, %r109, -2147483647;
	@%p158 bra 	$L__BB0_108;
// %bb.64:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p161;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p160;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p167, %f717, 0f7F800000;
	@%p167 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r382, %f830;
	or.b32  	%r383, %r100, %r382;
	mov.b32 	%f830, %r383;
$L__BB0_117:                            // %__nv_fmodf.exit991
	@%p95 bra 	$L__BB0_76;
// %bb.65:
	@%p232 bra 	$L__BB0_72;
	bra.uni 	$L__BB0_66;
$L__BB0_72:
	mov.b32 	%r39, %f818;
	and.b32  	%r392, %r39, 8388607;
	or.b32  	%r7971, %r392, 1065353216;
	mov.b32 	%f817, %r7971;
	add.s32 	%r393, %r39, -1073741824;
	and.b32  	%r7972, %r393, -8388608;
	setp.eq.s32 	%p182, %r7972, 0;
	@%p182 bra 	$L__BB0_75;
// %bb.73:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_74:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r7972, 192937984;
	add.s32 	%r395, %r7971, %r394;
	mov.b32 	%f758, %r395;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7972, %r7972, %r394;
	mov.b32 	%r7971, %f817;
	setp.ne.s32 	%p183, %r7972, 0;
	setp.ne.s32 	%p184, %r7971, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_74;
$L__BB0_75:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p186, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_76;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p177, %r38, 1073741824;
	@%p177 bra 	$L__BB0_71;
// %bb.67:
	setp.lt.u32 	%p178, %r38, -2147483647;
	@%p178 bra 	$L__BB0_69;
// %bb.68:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p181, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p181;
	bra.uni 	$L__BB0_71;
$L__BB0_69:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p179, %f71, 0f40800000;
	@%p179 bra 	$L__BB0_71;
// %bb.70:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p180, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p180;
$L__BB0_71:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_76:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p187, %f767, 0f7F800000;
	@%p187 bra 	$L__BB0_78;
// %bb.77:
	mov.b32 	%r396, %f818;
	or.b32  	%r397, %r23, %r396;
	mov.b32 	%f818, %r397;
$L__BB0_78:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p195, %r164, %r163;
	mov.u32 	%r7965, 0;
	@%p195 bra 	$L__BB0_87;
// %bb.79:                              // %L1334.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r267, %r90, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r277, %r267, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r268, %r267, 127;
	and.b32  	%r278, %r277, 127;
	setp.gt.f32 	%p13, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p19, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p25, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p31, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p37, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p43, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p49, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p55, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r268;
	cvt.rn.f32.s32 	%f457, %r278;
	selp.f32 	%f153, %f152, %f150, %p13;
	selp.f32 	%f187, %f186, %f184, %p19;
	selp.f32 	%f222, %f221, %f219, %p25;
	selp.f32 	%f256, %f255, %f253, %p31;
	selp.f32 	%f291, %f290, %f288, %p37;
	selp.f32 	%f325, %f324, %f322, %p43;
	selp.f32 	%f360, %f359, %f357, %p49;
	selp.f32 	%f394, %f393, %f391, %p55;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r190, %f154;
	mov.b32 	%r197, %f188;
	mov.b32 	%r208, %f223;
	mov.b32 	%r215, %f257;
	mov.b32 	%r226, %f292;
	mov.b32 	%r233, %f326;
	mov.b32 	%r244, %f361;
	mov.b32 	%r251, %f395;
	mov.b32 	%r269, %f425;
	mov.b32 	%r279, %f459;
	mov.b32 	%r301, %f511;
	mov.b32 	%r332, %f562;
	and.b32  	%r191, %r190, -2147483648;
	and.b32  	%r198, %r197, -2147483648;
	and.b32  	%r209, %r208, -2147483648;
	and.b32  	%r216, %r215, -2147483648;
	and.b32  	%r227, %r226, -2147483648;
	and.b32  	%r234, %r233, -2147483648;
	and.b32  	%r245, %r244, -2147483648;
	and.b32  	%r252, %r251, -2147483648;
	and.b32  	%r270, %r269, -2147483648;
	and.b32  	%r280, %r279, -2147483648;
	and.b32  	%r302, %r301, -2147483648;
	and.b32  	%r333, %r332, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r192, %r191, 1056964608;
	or.b32  	%r199, %r198, 1056964608;
	or.b32  	%r210, %r209, 1056964608;
	or.b32  	%r217, %r216, 1056964608;
	or.b32  	%r228, %r227, 1056964608;
	or.b32  	%r235, %r234, 1056964608;
	or.b32  	%r246, %r245, 1056964608;
	or.b32  	%r253, %r252, 1056964608;
	or.b32  	%r271, %r270, 1056964608;
	or.b32  	%r281, %r280, 1056964608;
	or.b32  	%r303, %r302, 1056964608;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%r348, %f615;
	mov.b32 	%r370, %f666;
	mov.b32 	%f155, %r192;
	mov.b32 	%f189, %r199;
	mov.b32 	%f224, %r210;
	mov.b32 	%f258, %r217;
	mov.b32 	%f293, %r228;
	mov.b32 	%f327, %r235;
	mov.b32 	%f362, %r246;
	mov.b32 	%f396, %r253;
	mov.b32 	%f426, %r271;
	mov.b32 	%f460, %r281;
	mov.b32 	%f512, %r303;
	mov.b32 	%f563, %r334;
	and.b32  	%r349, %r348, -2147483648;
	and.b32  	%r371, %r370, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r350, %r349, 1056964608;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%r384, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p14, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p20, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p26, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p32, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p38, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p44, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p50, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p56, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p61, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p68, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p88, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p108, %f566, 0f4B000000;
	mov.b32 	%f616, %r350;
	mov.b32 	%f667, %r372;
	and.b32  	%r385, %r384, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p14;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p15, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p20;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p21, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p26;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p27, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p32;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p33, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p38;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p39, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p44;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p45, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p50;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p51, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p56;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p57, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p61;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p62, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p68;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p69, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p88;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p89, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p108;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p109, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r386, %r385, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p15;
	selp.f32 	%f195, %f194, %f193, %p21;
	selp.f32 	%f230, %f229, %f228, %p27;
	selp.f32 	%f264, %f263, %f262, %p33;
	selp.f32 	%f299, %f298, %f297, %p39;
	selp.f32 	%f333, %f332, %f331, %p45;
	selp.f32 	%f368, %f367, %f366, %p51;
	selp.f32 	%f402, %f401, %f400, %p57;
	selp.f32 	%f432, %f431, %f430, %p62;
	selp.f32 	%f466, %f465, %f464, %p69;
	selp.f32 	%f518, %f517, %f516, %p89;
	selp.f32 	%f569, %f568, %f567, %p109;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p128, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p149, %f670, 0f4B000000;
	mov.b32 	%f719, %r386;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p128;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p129, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p149;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p150, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p129;
	selp.f32 	%f673, %f672, %f671, %p150;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p169, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r193, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r200, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r211, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r218, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r229, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r236, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r247, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r254, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p169;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p170, %f722, 0f3F000000;
	add.s32 	%r194, %r193, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r201, %r200, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r212, %r211, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r219, %r218, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r230, %r229, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r237, %r236, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r248, %r247, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r255, %r254, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r272, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r282, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r304, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r335, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p170;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r195, %r194, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r202, %r201, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r213, %r212, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r220, %r219, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r231, %r230, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r238, %r237, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r249, %r248, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r256, %r255, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r273, %r272, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r283, %r282, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r305, %r304, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r336, %r335, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p16, %r195, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p22, %r202, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p28, %r213, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p34, %r220, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p40, %r231, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p46, %r238, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p52, %r249, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p58, %r256, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p63, %r273, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p70, %r283, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p90, %r305, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p110, %r336, 1;
	cvt.rzi.s32.f32 	%r351, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r373, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	selp.f32 	%f173, %f171, %f172, %p16;
	and.b32  	%r196, %r194, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p22;
	and.b32  	%r203, %r201, 2;
	selp.f32 	%f242, %f240, %f241, %p28;
	and.b32  	%r214, %r212, 2;
	selp.f32 	%f276, %f274, %f275, %p34;
	and.b32  	%r221, %r219, 2;
	selp.f32 	%f311, %f309, %f310, %p40;
	and.b32  	%r232, %r230, 2;
	selp.f32 	%f345, %f343, %f344, %p46;
	and.b32  	%r239, %r237, 2;
	selp.f32 	%f380, %f378, %f379, %p52;
	and.b32  	%r250, %r248, 2;
	selp.f32 	%f414, %f412, %f413, %p58;
	and.b32  	%r257, %r255, 2;
	selp.f32 	%f444, %f442, %f443, %p63;
	and.b32  	%r274, %r272, 2;
	selp.f32 	%f478, %f476, %f477, %p70;
	and.b32  	%r284, %r282, 2;
	selp.f32 	%f530, %f528, %f529, %p90;
	and.b32  	%r306, %r304, 2;
	selp.f32 	%f581, %f579, %f580, %p110;
	and.b32  	%r337, %r335, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r374, %r373, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r196, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p23, %r203, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p29, %r214, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p35, %r221, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p41, %r232, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p47, %r239, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p53, %r250, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p59, %r257, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p64, %r274, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r275, %r272, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p71, %r284, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r285, %r282, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p91, %r306, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r307, %r304, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p111, %r337, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r338, %r335, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p130, %r352, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p151, %r374, 1;
	cvt.rzi.s32.f32 	%r387, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	selp.f32 	%f176, %f173, %f175, %p17;
	selp.f32 	%f210, %f207, %f209, %p23;
	selp.f32 	%f245, %f242, %f244, %p29;
	selp.f32 	%f279, %f276, %f278, %p35;
	selp.f32 	%f314, %f311, %f313, %p41;
	selp.f32 	%f348, %f345, %f347, %p47;
	selp.f32 	%f383, %f380, %f382, %p53;
	selp.f32 	%f417, %f414, %f416, %p59;
	selp.f32 	%f445, %f443, %f442, %p63;
	selp.f32 	%f447, %f444, %f446, %p64;
	and.b32  	%r276, %r275, 2;
	setp.eq.f32 	%p66, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p70;
	selp.f32 	%f481, %f478, %f480, %p71;
	and.b32  	%r286, %r285, 2;
	setp.eq.f32 	%p73, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p90;
	selp.f32 	%f533, %f530, %f532, %p91;
	and.b32  	%r308, %r307, 2;
	setp.eq.f32 	%p93, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p110;
	selp.f32 	%f584, %f581, %f583, %p111;
	and.b32  	%r339, %r338, 2;
	setp.eq.f32 	%p113, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p130;
	and.b32  	%r353, %r351, 2;
	selp.f32 	%f685, %f683, %f684, %p151;
	and.b32  	%r375, %r373, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r388, %r387, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p65, %r276, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p66;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p72, %r286, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p73;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p92, %r308, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p93;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p112, %r339, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p113;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p131, %r353, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p152, %r375, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r376, %r373, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p171, %r388, 1;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p65;
	setp.gt.f32 	%p67, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p72;
	setp.gt.f32 	%p74, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p92;
	setp.gt.f32 	%p94, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p112;
	setp.gt.f32 	%p114, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p130;
	selp.f32 	%f637, %f634, %f636, %p131;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p133, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p151;
	selp.f32 	%f688, %f685, %f687, %p152;
	and.b32  	%r377, %r376, 2;
	setp.eq.f32 	%p154, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p171;
	and.b32  	%r389, %r387, 2;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p67;
	selp.f32 	%f489, %f488, %f483, %p74;
	selp.f32 	%f104, %f540, %f536, %p94;
	selp.f32 	%f593, %f592, %f587, %p114;
	setp.eq.s32 	%p132, %r355, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p133;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p153, %r377, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p154;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p172, %r389, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r390, %r387, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	and.b32  	%r82, %r2, 16;
	mov.b32 	%r206, %f215;
	mov.b32 	%r205, %f3;
	mov.b32 	%r224, %f284;
	mov.b32 	%r223, %f12;
	mov.b32 	%r242, %f353;
	mov.b32 	%r241, %f21;
	mov.b32 	%r260, %f421;
	mov.b32 	%r259, %f30;
	mov.b32 	%r262, %f456;
	mov.b32 	%r263, %f489;
	mov.b32 	%r265, %f453;
	mov.b32 	%r266, %f486;
	mov.b32 	%r322, %f593;
	mov.b32 	%r321, %f104;
	mov.b32 	%r328, %f590;
	mov.b32 	%r327, %f103;
	selp.f32 	%f640, %f635, %f639, %p132;
	setp.gt.f32 	%p134, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p153;
	setp.gt.f32 	%p155, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p171;
	selp.f32 	%f740, %f737, %f739, %p172;
	and.b32  	%r391, %r390, 2;
	setp.eq.f32 	%p174, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r204, %r206, %r205;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r222, %r224, %r223;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r240, %r242, %r241;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r258, %r260, %r259;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r266, %r265;
	// end inline asm
	xor.b32  	%r325, %r328, -2147483648;
	xor.b32  	%r324, %r327, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p134;
	selp.f32 	%f697, %f696, %f691, %p155;
	setp.eq.s32 	%p173, %r391, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p174;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r325, %r324;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r322, %r321;
	// end inline asm
	mov.b32 	%r366, %f697;
	mov.b32 	%r365, %f124;
	mov.b32 	%r369, %f694;
	mov.b32 	%r368, %f123;
	selp.f32 	%f743, %f738, %f742, %p173;
	setp.gt.f32 	%p175, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p175;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r410, %f768;
	and.b32  	%r411, %r410, -2147483648;
	or.b32  	%r412, %r411, 1056964608;
	mov.b32 	%f769, %r412;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p188, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p188;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p189, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p189;
	cvt.rzi.s32.f32 	%r413, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r414, %r413, 1;
	setp.eq.b32 	%p190, %r414, 1;
	selp.f32 	%f787, %f785, %f786, %p190;
	selp.f32 	%f788, %f786, %f785, %p190;
	and.b32  	%r415, %r413, 2;
	setp.eq.s32 	%p191, %r415, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p191;
	add.s32 	%r416, %r413, 1;
	and.b32  	%r417, %r416, 2;
	setp.eq.s32 	%p192, %r417, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p192;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p193, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p193;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p194, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p194;
	mov.b32 	%r400, %f799;
	mov.b32 	%r399, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	mov.b32 	%r406, %f796;
	xor.b32  	%r403, %r406, -2147483648;
	mov.b32 	%r405, %f142;
	xor.b32  	%r402, %r405, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r400, %r399;
	// end inline asm
	shl.b32 	%r419, %r163, 13;
	or.b32  	%r420, %r82, %r3;
	or.b32  	%r50, %r420, %r78;
	shl.b32 	%r421, %r1, 5;
	and.b32  	%r51, %r421, 64;
	and.b32  	%r422, %r77, 28;
	and.b32  	%r423, %r421, 32;
	or.b32  	%r52, %r422, %r423;
	or.b32  	%r424, %r52, %r51;
	or.b32  	%r53, %r424, %r419;
	and.b32  	%r54, %r2, 8;
	shl.b32 	%r425, %r2, 4;
	or.b32  	%r426, %r425, %r54;
	shr.u32 	%r427, %r426, 2;
	and.b32  	%r428, %r427, 30;
	or.b32  	%r55, %r186, %r89;
	and.b32  	%r430, %r4, 32;
	shr.u32 	%r431, %r3, 1;
	or.b32  	%r56, %r430, %r431;
	or.b32  	%r57, %r56, 8;
	or.b32  	%r58, %r56, 16;
	or.b32  	%r59, %r56, 24;
	or.b32  	%r432, %r83, %r81;
	shr.u32 	%r433, %r432, 1;
	mul.lo.s32 	%r434, %r433, 65;
	add.s32 	%r435, %r56, %r434;
	add.s32 	%r436, %r57, %r434;
	add.s32 	%r437, %r58, %r434;
	add.s32 	%r438, %r59, %r434;
	shl.b32 	%r439, %r3, 1;
	or.b32  	%r440, %r439, %r87;
	mul.lo.s32 	%r441, %r440, 65;
	add.s32 	%r442, %r428, %r441;
	mul.wide.u32 	%rd54, %r442, 4;
	mov.u64 	%rd55, shmem;
	add.s64 	%rd5, %rd55, %rd54;
	cvt.u64.u32 	%rd56, %r428;
	cvt.u64.u32 	%rd57, %r441;
	add.s64 	%rd58, %rd57, %rd56;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd6, %rd55, %rd59;
	shl.b32 	%r443, %r165, 19;
	add.s32 	%r444, %r443, -1572864;
	shl.b32 	%r445, %r3, 2;
	or.b32  	%r446, %r89, %r445;
	or.b32  	%r447, %r446, %r79;
	shl.b32 	%r60, %r447, 7;
	cvt.s64.s32 	%rd7, %r444;
	shr.u32 	%r448, %r3, 3;
	mul.lo.s32 	%r449, %r448, 130;
	mul.lo.s32 	%r450, %r87, 65;
	bfe.s32 	%r451, %r3, 1, 1;
	and.b32  	%r452, %r3, 2;
	setp.eq.s32 	%p196, %r452, 0;
	and.b32  	%r453, %r451, 520;
	and.b32  	%r454, %r3, 1;
	neg.s32 	%r455, %r454;
	setp.eq.b32 	%p197, %r454, 1;
	and.b32  	%r456, %r455, 1040;
	bfe.s32 	%r457, %r3, 2, 1;
	and.b32  	%r458, %r3, 4;
	setp.eq.s32 	%p198, %r458, 0;
	and.b32  	%r459, %r457, 260;
	add.s32 	%r460, %r456, %r428;
	add.s32 	%r461, %r460, %r450;
	add.s32 	%r462, %r461, %r449;
	add.s32 	%r463, %r462, %r453;
	add.s32 	%r464, %r463, %r459;
	mul.wide.u32 	%rd60, %r464, 4;
	add.s64 	%rd8, %rd55, %rd60;
	selp.b64 	%rd61, 0, 260, %p198;
	selp.b64 	%rd62, 0, 520, %p196;
	cvt.u64.u32 	%rd63, %r450;
	cvt.u64.u32 	%rd64, %r449;
	selp.b64 	%rd65, 1040, 0, %p197;
	add.s64 	%rd66, %rd56, %rd65;
	add.s64 	%rd67, %rd66, %rd64;
	add.s64 	%rd68, %rd67, %rd63;
	add.s64 	%rd69, %rd68, %rd62;
	add.s64 	%rd70, %rd69, %rd61;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd9, %rd55, %rd71;
	add.s32 	%r465, %r460, %r449;
	add.s32 	%r466, %r465, %r450;
	add.s32 	%r467, %r466, %r453;
	add.s32 	%r468, %r467, %r459;
	cvt.u64.u32 	%rd72, %r463;
	add.s64 	%rd73, %rd72, %rd61;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd10, %rd55, %rd74;
	add.s32 	%r469, %r468, 2113;
	mul.wide.u32 	%rd75, %r469, 4;
	add.s64 	%rd11, %rd55, %rd75;
	add.s32 	%r470, %r464, 2082;
	mul.wide.u32 	%rd76, %r470, 4;
	add.s64 	%rd12, %rd55, %rd76;
	add.s32 	%r471, %r468, 2114;
	mul.wide.u32 	%rd77, %r471, 4;
	add.s64 	%rd13, %rd55, %rd77;
	add.s32 	%r472, %r468, 4194;
	mul.wide.u32 	%rd78, %r472, 4;
	add.s64 	%rd14, %rd55, %rd78;
	add.s32 	%r473, %r464, 4163;
	mul.wide.u32 	%rd79, %r473, 4;
	add.s64 	%rd15, %rd55, %rd79;
	add.s32 	%r474, %r468, 4195;
	mul.wide.u32 	%rd80, %r474, 4;
	add.s64 	%rd16, %rd55, %rd80;
	add.s32 	%r475, %r468, 6275;
	mul.wide.u32 	%rd81, %r475, 4;
	add.s64 	%rd17, %rd55, %rd81;
	add.s32 	%r476, %r464, 6244;
	mul.wide.u32 	%rd82, %r476, 4;
	add.s64 	%rd18, %rd55, %rd82;
	add.s32 	%r477, %r468, 6276;
	mul.wide.u32 	%rd83, %r477, 4;
	add.s64 	%rd19, %rd55, %rd83;
	mul.wide.u32 	%rd84, %r438, 4;
	add.s64 	%rd20, %rd55, %rd84;
	mul.wide.u32 	%rd85, %r437, 4;
	add.s64 	%rd21, %rd55, %rd85;
	mul.wide.u32 	%rd86, %r436, 4;
	add.s64 	%rd22, %rd55, %rd86;
	mul.wide.u32 	%rd87, %r435, 4;
	add.s64 	%rd23, %rd55, %rd87;
	setp.eq.s32 	%p199, %r54, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8005, %r7965;
	mov.u32 	%r8004, %r7965;
	mov.u32 	%r8003, %r7965;
	mov.u32 	%r8002, %r7965;
	mov.u32 	%r8001, %r7965;
	mov.u32 	%r8000, %r7965;
	mov.u32 	%r7999, %r7965;
	mov.u32 	%r7998, %r7965;
	mov.u32 	%r7997, %r7965;
	mov.u32 	%r7996, %r7965;
	mov.u32 	%r7995, %r7965;
	mov.u32 	%r7994, %r7965;
	mov.u32 	%r7985, %r7965;
	bra.uni 	$L__BB0_80;
$L__BB0_86:                             // %L40108
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7961, %r7986, 1572864;
	cvt.s64.s32 	%rd141, %r7961;
	add.s64 	%rd142, %rd141, %rd7;
	shr.u64 	%rd143, %rd142, 36;
	add.s64 	%rd144, %rd142, %rd143;
	shr.s64 	%rd145, %rd144, 28;
	setp.lt.s64 	%p227, %rd142, 0;
	and.b64  	%rd146, %rd144, -268435456;
	setp.ne.s64 	%p228, %rd146, %rd142;
	and.pred  	%p229, %p227, %p228;
	selp.u64 	%rd147, 1, 0, %p229;
	sub.s64 	%rd148, %rd147, %rd145;
	shl.b64 	%rd149, %rd148, 28;
	add.s64 	%rd150, %rd149, %rd142;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd152, %rd3, %rd151;
	st.global.v4.u32 	[%rd152], {%r158, %r160, %r159, %r161};
	add.s32 	%r7985, %r7985, 256;
	add.s32 	%r7962, %r7985, %r163;
	setp.lt.s32 	%p230, %r7962, %r164;
	@%p230 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_87;
$L__BB0_80:                             // %L1334
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_81 Depth 2
	and.b32  	%r543, %r7985, 32512;
	or.b32  	%r544, %r50, %r543;
	shl.b32 	%r545, %r544, 13;
	add.s32 	%r546, %r53, %r545;
	shr.s32 	%r547, %r546, 31;
	shr.u32 	%r548, %r547, 4;
	add.s32 	%r549, %r546, %r548;
	shr.s32 	%r550, %r549, 28;
	setp.lt.s32 	%p200, %r546, 0;
	and.b32  	%r551, %r549, -268435456;
	setp.ne.s32 	%p201, %r551, %r546;
	and.pred  	%p202, %p200, %p201;
	selp.u32 	%r552, 1, 0, %p202;
	sub.s32 	%r553, %r552, %r550;
	shl.b32 	%r554, %r553, 28;
	add.s32 	%r555, %r554, %r546;
	mul.wide.s32 	%rd88, %r555, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.v4.u32 	{%r556, %r557, %r558, %r559}, [%rd89];
	or.b32  	%r560, %r545, 524288;
	add.s32 	%r561, %r53, %r560;
	shr.s32 	%r562, %r561, 31;
	shr.u32 	%r563, %r562, 4;
	add.s32 	%r564, %r561, %r563;
	shr.s32 	%r565, %r564, 28;
	setp.lt.s32 	%p203, %r561, 0;
	and.b32  	%r566, %r564, -268435456;
	setp.ne.s32 	%p204, %r566, %r561;
	and.pred  	%p205, %p203, %p204;
	selp.u32 	%r567, 1, 0, %p205;
	sub.s32 	%r568, %r567, %r565;
	shl.b32 	%r569, %r568, 28;
	add.s32 	%r570, %r569, %r561;
	mul.wide.s32 	%rd90, %r570, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.v4.u32 	{%r571, %r572, %r573, %r574}, [%rd91];
	or.b32  	%r575, %r545, 1048576;
	add.s32 	%r576, %r53, %r575;
	shr.s32 	%r577, %r576, 31;
	shr.u32 	%r578, %r577, 4;
	add.s32 	%r579, %r576, %r578;
	shr.s32 	%r580, %r579, 28;
	setp.lt.s32 	%p206, %r576, 0;
	and.b32  	%r581, %r579, -268435456;
	setp.ne.s32 	%p207, %r581, %r576;
	and.pred  	%p208, %p206, %p207;
	selp.u32 	%r582, 1, 0, %p208;
	sub.s32 	%r583, %r582, %r580;
	shl.b32 	%r584, %r583, 28;
	add.s32 	%r585, %r584, %r576;
	mul.wide.s32 	%rd92, %r585, 4;
	add.s64 	%rd93, %rd2, %rd92;
	ld.global.v4.u32 	{%r586, %r587, %r588, %r589}, [%rd93];
	or.b32  	%r590, %r545, 1572864;
	add.s32 	%r591, %r53, %r590;
	shr.s32 	%r592, %r591, 31;
	shr.u32 	%r593, %r592, 4;
	add.s32 	%r594, %r591, %r593;
	shr.s32 	%r595, %r594, 28;
	setp.lt.s32 	%p209, %r591, 0;
	and.b32  	%r596, %r594, -268435456;
	setp.ne.s32 	%p210, %r596, %r591;
	and.pred  	%p211, %p209, %p210;
	selp.u32 	%r597, 1, 0, %p211;
	sub.s32 	%r598, %r597, %r595;
	shl.b32 	%r599, %r598, 28;
	add.s32 	%r600, %r599, %r591;
	mul.wide.s32 	%rd94, %r600, 4;
	add.s64 	%rd95, %rd2, %rd94;
	ld.global.v4.u32 	{%r601, %r602, %r603, %r604}, [%rd95];
	selp.b32 	%r605, %r558, %r556, %p199;
	shfl.sync.bfly.b32	%r606, %r605, 8, 31, -1;
	selp.b32 	%r479, %r556, %r606, %p199;
	selp.b32 	%r480, %r606, %r558, %p199;
	selp.b32 	%r607, %r559, %r557, %p199;
	shfl.sync.bfly.b32	%r608, %r607, 8, 31, -1;
	selp.b32 	%r487, %r557, %r608, %p199;
	selp.b32 	%r488, %r608, %r559, %p199;
	selp.b32 	%r609, %r573, %r571, %p199;
	shfl.sync.bfly.b32	%r610, %r609, 8, 31, -1;
	selp.b32 	%r495, %r571, %r610, %p199;
	selp.b32 	%r496, %r610, %r573, %p199;
	selp.b32 	%r611, %r574, %r572, %p199;
	shfl.sync.bfly.b32	%r612, %r611, 8, 31, -1;
	selp.b32 	%r503, %r572, %r612, %p199;
	selp.b32 	%r504, %r612, %r574, %p199;
	selp.b32 	%r613, %r588, %r586, %p199;
	shfl.sync.bfly.b32	%r614, %r613, 8, 31, -1;
	selp.b32 	%r511, %r586, %r614, %p199;
	selp.b32 	%r512, %r614, %r588, %p199;
	selp.b32 	%r615, %r589, %r587, %p199;
	shfl.sync.bfly.b32	%r616, %r615, 8, 31, -1;
	selp.b32 	%r519, %r587, %r616, %p199;
	selp.b32 	%r520, %r616, %r589, %p199;
	selp.b32 	%r617, %r603, %r601, %p199;
	shfl.sync.bfly.b32	%r618, %r617, 8, 31, -1;
	selp.b32 	%r527, %r601, %r618, %p199;
	selp.b32 	%r528, %r618, %r603, %p199;
	selp.b32 	%r619, %r604, %r602, %p199;
	shfl.sync.bfly.b32	%r620, %r619, 8, 31, -1;
	selp.b32 	%r535, %r602, %r620, %p199;
	selp.b32 	%r536, %r620, %r604, %p199;
	mov.u32 	%r537, 21520;
	// begin inline asm
	prmt.b32 %r478, %r479, %r480, %r537;
	// end inline asm
	mov.u32 	%r541, 30258;
	// begin inline asm
	prmt.b32 %r482, %r479, %r480, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r486, %r487, %r488, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r490, %r487, %r488, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r495, %r496, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r495, %r496, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r503, %r504, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r503, %r504, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r511, %r512, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r511, %r512, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r519, %r520, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r519, %r520, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r527, %r528, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r527, %r528, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r535, %r536, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r535, %r536, %r541;
	// end inline asm
	st.shared.u32 	[%rd8], %r478;
	st.shared.u32 	[%rd9+128], %r482;
	st.shared.u32 	[%rd9+4], %r486;
	st.shared.u32 	[%rd9+132], %r490;
	st.shared.u32 	[%rd10+8324], %r494;
	st.shared.u32 	[%rd11], %r498;
	st.shared.u32 	[%rd12], %r502;
	st.shared.u32 	[%rd13], %r506;
	st.shared.u32 	[%rd10+16648], %r510;
	st.shared.u32 	[%rd14], %r514;
	st.shared.u32 	[%rd15], %r518;
	st.shared.u32 	[%rd16], %r522;
	st.shared.u32 	[%rd10+24972], %r526;
	st.shared.u32 	[%rd17], %r530;
	st.shared.u32 	[%rd18], %r534;
	st.shared.u32 	[%rd19], %r538;
	bar.sync 	0;
	mov.u64 	%rd155, %rd23;
	mov.u64 	%rd156, %rd22;
	mov.u64 	%rd157, %rd21;
	mov.u64 	%rd158, %rd20;
	mov.u32 	%r7993, %r7965;
$L__BB0_81:                             // %pass5532
                                        //   Parent Loop BB0_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r7805, %r55, %r7993;
	add.s32 	%r7806, %r7805, %r7985;
	or.b32  	%r7807, %r7806, %r2;
	bfe.s32 	%r7808, %r7806, 3, 1;
	and.b32  	%r7809, %r7808, 130;
	bfe.s32 	%r7810, %r7806, 4, 1;
	and.b32  	%r7811, %r7810, 65;
	bfe.s32 	%r7812, %r7806, 1, 1;
	and.b32  	%r7813, %r7812, 520;
	bfe.u32 	%r7814, %r7806, 6, 2;
	mul.lo.s32 	%r7815, %r7814, 2081;
	and.b32  	%r7816, %r7806, 1;
	neg.s32 	%r7817, %r7816;
	and.b32  	%r7818, %r7817, 1040;
	bfe.s32 	%r7819, %r7807, 2, 1;
	and.b32  	%r7820, %r7819, 260;
	or.b32  	%r7821, %r56, %r7818;
	add.s32 	%r7822, %r7821, %r7809;
	add.s32 	%r7823, %r7822, %r7811;
	add.s32 	%r7824, %r7823, %r7813;
	add.s32 	%r7825, %r7824, %r7815;
	add.s32 	%r7826, %r7825, %r7820;
	mul.wide.u32 	%rd96, %r7826, 4;
	add.s64 	%rd98, %rd55, %rd96;
	ld.shared.u32 	%r7827, [%rd98];
	or.b32  	%r7828, %r57, %r7818;
	add.s32 	%r7829, %r7828, %r7809;
	add.s32 	%r7830, %r7829, %r7811;
	add.s32 	%r7831, %r7830, %r7813;
	add.s32 	%r7832, %r7831, %r7815;
	add.s32 	%r7833, %r7832, %r7820;
	mul.wide.u32 	%rd99, %r7833, 4;
	add.s64 	%rd100, %rd55, %rd99;
	ld.shared.u32 	%r7834, [%rd100];
	add.s32 	%r7835, %r58, %r7818;
	add.s32 	%r7836, %r7835, %r7809;
	add.s32 	%r7837, %r7836, %r7811;
	add.s32 	%r7838, %r7837, %r7813;
	add.s32 	%r7839, %r7838, %r7815;
	add.s32 	%r7840, %r7839, %r7820;
	mul.wide.u32 	%rd101, %r7840, 4;
	add.s64 	%rd102, %rd55, %rd101;
	ld.shared.u32 	%r7841, [%rd102];
	add.s32 	%r7842, %r59, %r7818;
	add.s32 	%r7843, %r7842, %r7809;
	add.s32 	%r7844, %r7843, %r7811;
	add.s32 	%r7845, %r7844, %r7813;
	add.s32 	%r7846, %r7845, %r7815;
	add.s32 	%r7847, %r7846, %r7820;
	mul.wide.u32 	%rd103, %r7847, 4;
	add.s64 	%rd104, %rd55, %rd103;
	ld.shared.u32 	%r7848, [%rd104];
	// begin inline asm
	mov.b32 %r626, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r637, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r625, %r7827, -2004318072;
	mov.u32 	%r624, 983055;
	// begin inline asm
	lop3.b32 %r623, %r624, %r625, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r628, %r626, %r627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r631, %r623, %r628;
	// end inline asm
	mov.u32 	%r635, 15728880;
	// begin inline asm
	lop3.b32 %r634, %r635, %r625, %r637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r639, %r637, %r638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r642, %r634, %r639;
	// end inline asm
	shr.u32 	%r647, %r625, 8;
	// begin inline asm
	lop3.b32 %r645, %r624, %r647, %r626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r650, %r626, %r649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r653, %r645, %r650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r656, %r635, %r647, %r637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r661, %r637, %r660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r664, %r656, %r661;
	// end inline asm
	// begin inline asm
	mov.b32 %r672, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r683, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r671, %r7834, -2004318072;
	// begin inline asm
	lop3.b32 %r669, %r624, %r671, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r674, %r672, %r673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r677, %r669, %r674;
	// end inline asm
	// begin inline asm
	lop3.b32 %r680, %r635, %r671, %r683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r685, %r683, %r684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r688, %r680, %r685;
	// end inline asm
	shr.u32 	%r693, %r671, 8;
	// begin inline asm
	lop3.b32 %r691, %r624, %r693, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r696, %r672, %r695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r699, %r691, %r696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r702, %r635, %r693, %r683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r707, %r683, %r706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r710, %r702, %r707;
	// end inline asm
	// begin inline asm
	mov.b32 %r718, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r729, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r717, %r7841, -2004318072;
	// begin inline asm
	lop3.b32 %r715, %r624, %r717, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r720, %r718, %r719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r723, %r715, %r720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r726, %r635, %r717, %r729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r731, %r729, %r730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r734, %r726, %r731;
	// end inline asm
	shr.u32 	%r739, %r717, 8;
	// begin inline asm
	lop3.b32 %r737, %r624, %r739, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r742, %r718, %r741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r745, %r737, %r742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r748, %r635, %r739, %r729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r753, %r729, %r752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r756, %r748, %r753;
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r775, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r763, %r7848, -2004318072;
	// begin inline asm
	lop3.b32 %r761, %r624, %r763, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r766, %r764, %r765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r769, %r761, %r766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r772, %r635, %r763, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r777, %r775, %r776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r780, %r772, %r777;
	// end inline asm
	shr.u32 	%r785, %r763, 8;
	// begin inline asm
	lop3.b32 %r783, %r624, %r785, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r788, %r764, %r787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r791, %r783, %r788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r794, %r635, %r785, %r775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r799, %r775, %r798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r794, %r799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r805, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r807, %r805, %r631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r810, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r812, %r810, %r642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r815, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r817, %r815, %r653;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r820, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r822, %r820, %r664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r825, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r827, %r825, %r677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r830, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r832, %r830, %r688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r835, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r837, %r835, %r699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r842, %r840, %r710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r845, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r847, %r845, %r723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r850, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r852, %r850, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r855, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r857, %r855, %r745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r860, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r862, %r860, %r756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r865, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r867, %r865, %r769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r870, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r872, %r870, %r780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r875, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r877, %r875, %r791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r880, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r882, %r880, %r802;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r889, %r8005, -2004318072;
	// begin inline asm
	lop3.b32 %r887, %r624, %r889, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r898, %r635, %r889, %r901, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r903, %r901, %r902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r906, %r898, %r903;
	// end inline asm
	shr.u32 	%r911, %r889, 8;
	// begin inline asm
	lop3.b32 %r909, %r624, %r911, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r913, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r914, %r890, %r913;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r917, %r909, %r914;
	// end inline asm
	// begin inline asm
	lop3.b32 %r920, %r635, %r911, %r901, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r901, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r935, %r8004, -2004318072;
	// begin inline asm
	lop3.b32 %r933, %r624, %r935, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r944, %r635, %r935, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r947, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	shr.u32 	%r957, %r935, 8;
	// begin inline asm
	lop3.b32 %r955, %r624, %r957, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r936, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r966, %r635, %r957, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r947, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r981, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r979, %r624, %r981, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r635, %r981, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r993, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	shr.u32 	%r1003, %r981, 8;
	// begin inline asm
	lop3.b32 %r1001, %r624, %r1003, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r982, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r635, %r1003, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r993, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1039, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1027, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r1025, %r624, %r1027, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1036, %r635, %r1027, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1039, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	shr.u32 	%r1049, %r1027, 8;
	// begin inline asm
	lop3.b32 %r1047, %r624, %r1049, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1052, %r1028, %r1051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1055, %r1047, %r1052;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1058, %r635, %r1049, %r1039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1039, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1069, %r204, %r895, %r807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r204, %r906, %r812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r204, %r917, %r817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r204, %r928, %r822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r204, %r941, %r827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r204, %r952, %r832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r204, %r963, %r837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r204, %r974, %r842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r204, %r987, %r847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r204, %r998, %r852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r204, %r1009, %r857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r204, %r1020, %r862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r204, %r1033, %r867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r204, %r1044, %r872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r204, %r1055, %r877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r204, %r1066, %r882;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1149, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1137, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r1135, %r624, %r1137, %r1138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1140, %r1138, %r1139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1143, %r1135, %r1140;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1146, %r635, %r1137, %r1149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1150, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1151, %r1149, %r1150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1154, %r1146, %r1151;
	// end inline asm
	shr.u32 	%r1159, %r1137, 8;
	// begin inline asm
	lop3.b32 %r1157, %r624, %r1159, %r1138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1161, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1162, %r1138, %r1161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1165, %r1157, %r1162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1168, %r635, %r1159, %r1149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1173, %r1149, %r1172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1176, %r1168, %r1173;
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1195, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1183, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r1181, %r624, %r1183, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1186, %r1184, %r1185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1189, %r1181, %r1186;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1192, %r635, %r1183, %r1195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1197, %r1195, %r1196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1200, %r1192, %r1197;
	// end inline asm
	shr.u32 	%r1205, %r1183, 8;
	// begin inline asm
	lop3.b32 %r1203, %r624, %r1205, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1208, %r1184, %r1207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1211, %r1203, %r1208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1214, %r635, %r1205, %r1195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1218, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1219, %r1195, %r1218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1222, %r1214, %r1219;
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1241, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1229, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r1227, %r624, %r1229, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1232, %r1230, %r1231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1235, %r1227, %r1232;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1238, %r635, %r1229, %r1241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1243, %r1241, %r1242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1246, %r1238, %r1243;
	// end inline asm
	shr.u32 	%r1251, %r1229, 8;
	// begin inline asm
	lop3.b32 %r1249, %r624, %r1251, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1254, %r1230, %r1253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1257, %r1249, %r1254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1260, %r635, %r1251, %r1241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1264, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1265, %r1241, %r1264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1268, %r1260, %r1265;
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1287, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1275, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r1273, %r624, %r1275, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1278, %r1276, %r1277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1281, %r1273, %r1278;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1284, %r635, %r1275, %r1287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1289, %r1287, %r1288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1292, %r1284, %r1289;
	// end inline asm
	shr.u32 	%r1297, %r1275, 8;
	// begin inline asm
	lop3.b32 %r1295, %r624, %r1297, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1300, %r1276, %r1299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1303, %r1295, %r1300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1306, %r635, %r1297, %r1287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1311, %r1287, %r1310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1314, %r1306, %r1311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1317, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1319, %r1317, %r1143, %r1069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1323, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r1323, %r1154, %r1073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1329, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r1329, %r1165, %r1077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1335, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1337, %r1335, %r1176, %r1081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1341, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r1341, %r1189, %r1085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1347, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r1347, %r1200, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1353, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r1353, %r1211, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r1359, %r1222, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1365, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r1365, %r1235, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1371, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r1371, %r1246, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r1377, %r1257, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1383, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r1383, %r1268, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1389, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r1389, %r1281, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r1395, %r1292, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r1401, %r1303, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1407, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1407, %r1314, %r1129;
	// end inline asm
	// begin inline asm
	mov.b32 %r1418, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1429, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1417, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r1415, %r624, %r1417, %r1418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1420, %r1418, %r1419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1423, %r1415, %r1420;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1426, %r635, %r1417, %r1429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1431, %r1429, %r1430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1434, %r1426, %r1431;
	// end inline asm
	shr.u32 	%r1439, %r1417, 8;
	// begin inline asm
	lop3.b32 %r1437, %r624, %r1439, %r1418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1441, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1442, %r1418, %r1441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1445, %r1437, %r1442;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1448, %r635, %r1439, %r1429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1453, %r1429, %r1452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1456, %r1448, %r1453;
	// end inline asm
	// begin inline asm
	mov.b32 %r1464, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1475, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1463, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r1461, %r624, %r1463, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1464, %r1465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1469, %r1461, %r1466;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1472, %r635, %r1463, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1475, %r1476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1480, %r1472, %r1477;
	// end inline asm
	shr.u32 	%r1485, %r1463, 8;
	// begin inline asm
	lop3.b32 %r1483, %r624, %r1485, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1488, %r1464, %r1487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1491, %r1483, %r1488;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1494, %r635, %r1485, %r1475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1498, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1499, %r1475, %r1498;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1502, %r1494, %r1499;
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1521, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1509, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r1507, %r624, %r1509, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1510, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1518, %r635, %r1509, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1521, %r1522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1526, %r1518, %r1523;
	// end inline asm
	shr.u32 	%r1531, %r1509, 8;
	// begin inline asm
	lop3.b32 %r1529, %r624, %r1531, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1534, %r1510, %r1533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1537, %r1529, %r1534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1540, %r635, %r1531, %r1521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1545, %r1521, %r1544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1548, %r1540, %r1545;
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1567, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1555, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r1553, %r624, %r1555, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1556, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1564, %r635, %r1555, %r1567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1569, %r1567, %r1568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1572, %r1564, %r1569;
	// end inline asm
	shr.u32 	%r1577, %r1555, 8;
	// begin inline asm
	lop3.b32 %r1575, %r624, %r1577, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1556, %r1579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1583, %r1575, %r1580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1586, %r635, %r1577, %r1567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1591, %r1567, %r1590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1594, %r1586, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r240, %r1423, %r1319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r240, %r1434, %r1325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1677, %r240, %r1445, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r240, %r1456, %r1337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r240, %r1469, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r240, %r1480, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r240, %r1491, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r240, %r1502, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r240, %r1515, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r240, %r1526, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r240, %r1537, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r240, %r1548, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r240, %r1561, %r1391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r240, %r1572, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r240, %r1583, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r240, %r1594, %r1409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1661, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1663, %r1661, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r261, %r1668, %r1663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1670, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1672, %r1670, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r261, %r1677, %r1672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1679, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1681, %r1679, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r261, %r1686, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r261, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1697, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1697, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r261, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1706, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r1706, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r261, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1715, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1715, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r261, %r1722, %r1717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1724, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1726, %r1724, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r261, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r264, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r261, %r1665, %r1733;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r264, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r261, %r1674, %r1740;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r264, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r261, %r1683, %r1747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r264, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r261, %r1692, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r264, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r261, %r1701, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r264, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r261, %r1710, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r264, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r261, %r1719, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r264, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r261, %r1728, %r1782;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1876, %r1873}, {%r320, %r326, %r323, %r329}, {%r1666, %r1736}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1885, %r1882}, {%r320, %r326, %r323, %r329}, {%r1675, %r1743}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1894, %r1891}, {%r320, %r326, %r323, %r329}, {%r1684, %r1750}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1903, %r1900}, {%r320, %r326, %r323, %r329}, {%r1693, %r1757}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1912, %r1909}, {%r320, %r326, %r323, %r329}, {%r1702, %r1764}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1921, %r1918}, {%r320, %r326, %r323, %r329}, {%r1711, %r1771}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r320, %r326, %r323, %r329}, {%r1720, %r1778}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1939, %r1936}, {%r320, %r326, %r323, %r329}, {%r1729, %r1785}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1869, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1869, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r364, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1878, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1880, %r1878, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r364, %r1885, %r1880;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1887, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r1887, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r364, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1896, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r1896, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r364, %r1903, %r1898;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1905, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r1905, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r364, %r1912, %r1907;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1914, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1916, %r1914, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r364, %r1921, %r1916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r364, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1932, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r1932, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r364, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r367, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r364, %r1873, %r1941;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r367, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r364, %r1882, %r1948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r367, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r364, %r1891, %r1955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r367, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r364, %r1900, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r367, %r1912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r364, %r1909, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r367, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r364, %r1918, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r367, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r364, %r1927, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r367, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r364, %r1936, %r1990;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1997, %r1998}, {%r398, %r404, %r401, %r407}, {%r1874, %r1944}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2007, %r2008}, {%r398, %r404, %r401, %r407}, {%r1883, %r1951}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2017, %r2018}, {%r398, %r404, %r401, %r407}, {%r1892, %r1958}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2027, %r2028}, {%r398, %r404, %r401, %r407}, {%r1901, %r1965}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2037, %r2038}, {%r398, %r404, %r401, %r407}, {%r1910, %r1972}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2047, %r2048}, {%r398, %r404, %r401, %r407}, {%r1919, %r1979}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2057, %r2058}, {%r398, %r404, %r401, %r407}, {%r1928, %r1986}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2067, %r2068}, {%r398, %r404, %r401, %r407}, {%r1937, %r1993}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r84, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r84, %r1998;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r84, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2086, %r84, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r84, %r2017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r84, %r2018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r84, %r2027;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r84, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r84, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r84, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r84, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r84, %r2048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r84, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r84, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r84, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r84, %r2068;
	// end inline asm
	// begin inline asm
	mov.b32 %r2125, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2126, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2127, %r2077, %r2125;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2130, %r2127, %r2126;
	// end inline asm
	// begin inline asm
	mov.b32 %r2133, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2134, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2135, %r2080, %r2133;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2138, %r2135, %r2134;
	// end inline asm
	// begin inline asm
	mov.b32 %r2141, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2142, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2143, %r2083, %r2141;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2146, %r2143, %r2142;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2150, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2151, %r2086, %r2149;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2154, %r2151, %r2150;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2158, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2159, %r2089, %r2157;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2162, %r2159, %r2158;
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2167, %r2092, %r2165;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2170, %r2167, %r2166;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2175, %r2095, %r2173;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2178, %r2175, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2183, %r2098, %r2181;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2186, %r2183, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2191, %r2101, %r2189;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2194, %r2191, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2199, %r2104, %r2197;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2202, %r2199, %r2198;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2207, %r2107, %r2205;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2210, %r2207, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2215, %r2110, %r2213;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2218, %r2215, %r2214;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2223, %r2113, %r2221;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2226, %r2223, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2231, %r2116, %r2229;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2234, %r2231, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2239, %r2119, %r2237;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2242, %r2239, %r2238;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2247, %r2122, %r2245;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2250, %r2247, %r2246;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2255, %r2256, %r2254;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2258, %r2130, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2262, %r2256, %r2261;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2138, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2269, %r2256, %r2268;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2272, %r2146, %r2269;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2276, %r2256, %r2275;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2279, %r2154, %r2276;
	// end inline asm
	mov.u32 	%r2285, 25152;
	// begin inline asm
	prmt.b32 %r2282, %r2258, %r2272, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2286, %r2265, %r2279, %r2285;
	// end inline asm
	shl.b32 	%r2293, %r2286, 4;
	mov.u32 	%r2291, 252645135;
	// begin inline asm
	lop3.b32 %r2290, %r2291, %r2282, %r2293, 202;
	// end inline asm
	xor.b32  	%r7849, %r2290, -2004318072;
	// begin inline asm
	mov.b32 %r2297, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2296, %r2297, %r2295;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2299, %r2162, %r2296;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2297, %r2302;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2170, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2297, %r2309;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2178, %r2310;
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2297, %r2316;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2186, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2323, %r2299, %r2313, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2327, %r2306, %r2320, %r2285;
	// end inline asm
	shl.b32 	%r2334, %r2327, 4;
	// begin inline asm
	lop3.b32 %r2331, %r2291, %r2323, %r2334, 202;
	// end inline asm
	xor.b32  	%r7850, %r2331, -2004318072;
	// begin inline asm
	mov.b32 %r2338, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2338, %r2336;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2340, %r2194, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2338, %r2343;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2202, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2338, %r2350;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2210, %r2351;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2338, %r2357;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2218, %r2358;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2364, %r2340, %r2354, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2368, %r2347, %r2361, %r2285;
	// end inline asm
	shl.b32 	%r2375, %r2368, 4;
	// begin inline asm
	lop3.b32 %r2372, %r2291, %r2364, %r2375, 202;
	// end inline asm
	xor.b32  	%r7851, %r2372, -2004318072;
	// begin inline asm
	mov.b32 %r2379, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2379, %r2377;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2226, %r2378;
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2379, %r2384;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2234, %r2385;
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2379, %r2391;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2395, %r2242, %r2392;
	// end inline asm
	// begin inline asm
	mov.b32 %r2398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2379, %r2398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2402, %r2250, %r2399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2381, %r2395, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2409, %r2388, %r2402, %r2285;
	// end inline asm
	shl.b32 	%r2416, %r2409, 4;
	// begin inline asm
	lop3.b32 %r2413, %r2291, %r2405, %r2416, 202;
	// end inline asm
	xor.b32  	%r7852, %r2413, -2004318072;
	st.shared.u32 	[%rd155], %r7849;
	st.shared.u32 	[%rd156], %r7850;
	st.shared.u32 	[%rd157], %r7851;
	st.shared.u32 	[%rd158], %r7852;
	ld.shared.u32 	%r8005, [%rd98];
	ld.shared.u32 	%r8004, [%rd100];
	ld.shared.u32 	%r8003, [%rd102];
	ld.shared.u32 	%r8002, [%rd104];
	// begin inline asm
	mov.b32 %r2422, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2421, %r8005, -2004318072;
	// begin inline asm
	lop3.b32 %r2419, %r624, %r2421, %r2422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2422, %r2423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2427, %r2419, %r2424;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2430, %r635, %r2421, %r2433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2433, %r2434;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2438, %r2430, %r2435;
	// end inline asm
	shr.u32 	%r2443, %r2421, 8;
	// begin inline asm
	lop3.b32 %r2441, %r624, %r2443, %r2422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2445, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2446, %r2422, %r2445;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2449, %r2441, %r2446;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2452, %r635, %r2443, %r2433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2457, %r2433, %r2456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2460, %r2452, %r2457;
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2467, %r8004, -2004318072;
	// begin inline asm
	lop3.b32 %r2465, %r624, %r2467, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2468, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2476, %r635, %r2467, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2479, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	shr.u32 	%r2489, %r2467, 8;
	// begin inline asm
	lop3.b32 %r2487, %r624, %r2489, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2491, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2468, %r2491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2495, %r2487, %r2492;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2498, %r635, %r2489, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2502, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2503, %r2479, %r2502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2506, %r2498, %r2503;
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2513, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r2511, %r624, %r2513, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2514, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2522, %r635, %r2513, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2525, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	shr.u32 	%r2535, %r2513, 8;
	// begin inline asm
	lop3.b32 %r2533, %r624, %r2535, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2538, %r2514, %r2537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2541, %r2533, %r2538;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2544, %r635, %r2535, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2549, %r2525, %r2548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2552, %r2544, %r2549;
	// end inline asm
	// begin inline asm
	mov.b32 %r2560, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2571, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2559, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r2557, %r624, %r2559, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2562, %r2560, %r2561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2565, %r2557, %r2562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2568, %r635, %r2559, %r2571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2573, %r2571, %r2572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2576, %r2568, %r2573;
	// end inline asm
	shr.u32 	%r2581, %r2559, 8;
	// begin inline asm
	lop3.b32 %r2579, %r624, %r2581, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2584, %r2560, %r2583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2587, %r2579, %r2584;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2590, %r635, %r2581, %r2571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2595, %r2571, %r2594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2598, %r2590, %r2595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2601, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2603, %r2601, %r2427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2606, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2608, %r2606, %r2438;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2611, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2613, %r2611, %r2449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2616, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2618, %r2616, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2621, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r2621, %r2473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2636, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r2636, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2646, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2648, %r2646, %r2530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2651, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2651, %r2541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2598;
	// end inline asm
	// begin inline asm
	mov.b32 %r2686, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2697, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2683, %r624, %r1137, %r2686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2687, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2688, %r2686, %r2687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2691, %r2683, %r2688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2694, %r635, %r1137, %r2697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2698, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2699, %r2697, %r2698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2702, %r2694, %r2699;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2705, %r624, %r1159, %r2686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2709, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2710, %r2686, %r2709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2713, %r2705, %r2710;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2716, %r635, %r1159, %r2697, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2720, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2721, %r2697, %r2720;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2724, %r2716, %r2721;
	// end inline asm
	// begin inline asm
	mov.b32 %r2732, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2743, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2729, %r624, %r1183, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2734, %r2732, %r2733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2737, %r2729, %r2734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2740, %r635, %r1183, %r2743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2745, %r2743, %r2744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2748, %r2740, %r2745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2751, %r624, %r1205, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2755, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2756, %r2732, %r2755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2759, %r2751, %r2756;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2762, %r635, %r1205, %r2743, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2767, %r2743, %r2766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2770, %r2762, %r2767;
	// end inline asm
	// begin inline asm
	mov.b32 %r2778, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2789, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2775, %r624, %r1229, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2780, %r2778, %r2779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2783, %r2775, %r2780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2786, %r635, %r1229, %r2789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2790, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2791, %r2789, %r2790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2794, %r2786, %r2791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2797, %r624, %r1251, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2801, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2802, %r2778, %r2801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2805, %r2797, %r2802;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2808, %r635, %r1251, %r2789, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2813, %r2789, %r2812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2816, %r2808, %r2813;
	// end inline asm
	// begin inline asm
	mov.b32 %r2824, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2835, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2821, %r624, %r1275, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2826, %r2824, %r2825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2829, %r2821, %r2826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2832, %r635, %r1275, %r2835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2836, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2837, %r2835, %r2836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2840, %r2832, %r2837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2843, %r624, %r1297, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2847, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2848, %r2824, %r2847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2851, %r2843, %r2848;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2854, %r635, %r1297, %r2835, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2858, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2859, %r2835, %r2858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2862, %r2854, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r204, %r2691, %r2603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r204, %r2702, %r2608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r204, %r2713, %r2613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r204, %r2724, %r2618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r204, %r2737, %r2623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r204, %r2748, %r2628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r204, %r2759, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r204, %r2770, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r204, %r2783, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r204, %r2794, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r204, %r2805, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r204, %r2816, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r204, %r2829, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r204, %r2840, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r204, %r2851, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r204, %r2862, %r2678;
	// end inline asm
	// begin inline asm
	mov.b32 %r2934, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2945, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2931, %r624, %r1417, %r2934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2936, %r2934, %r2935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2939, %r2931, %r2936;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2942, %r635, %r1417, %r2945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2946, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2947, %r2945, %r2946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2950, %r2942, %r2947;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2953, %r624, %r1439, %r2934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2957, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2958, %r2934, %r2957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2961, %r2953, %r2958;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2964, %r635, %r1439, %r2945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2968, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2969, %r2945, %r2968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2972, %r2964, %r2969;
	// end inline asm
	// begin inline asm
	mov.b32 %r2980, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2991, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2977, %r624, %r1463, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2982, %r2980, %r2981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2985, %r2977, %r2982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2988, %r635, %r1463, %r2991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2992, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2993, %r2991, %r2992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2996, %r2988, %r2993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2999, %r624, %r1485, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3004, %r2980, %r3003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3007, %r2999, %r3004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3010, %r635, %r1485, %r2991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3014, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3015, %r2991, %r3014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3018, %r3010, %r3015;
	// end inline asm
	// begin inline asm
	mov.b32 %r3026, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3037, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3023, %r624, %r1509, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3027, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3028, %r3026, %r3027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3031, %r3023, %r3028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3034, %r635, %r1509, %r3037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3038, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3039, %r3037, %r3038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3042, %r3034, %r3039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3045, %r624, %r1531, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3050, %r3026, %r3049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3053, %r3045, %r3050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3056, %r635, %r1531, %r3037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3060, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3061, %r3037, %r3060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3064, %r3056, %r3061;
	// end inline asm
	// begin inline asm
	mov.b32 %r3072, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3083, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3069, %r624, %r1555, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3074, %r3072, %r3073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3077, %r3069, %r3074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3080, %r635, %r1555, %r3083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3085, %r3083, %r3084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3088, %r3080, %r3085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3091, %r624, %r1577, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3096, %r3072, %r3095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3099, %r3091, %r3096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3102, %r635, %r1577, %r3083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3107, %r3083, %r3106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3110, %r3102, %r3107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3113, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r3113, %r2939, %r2865;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r3119, %r2950, %r2869;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3125, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3125, %r2961, %r2873;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3131, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r3131, %r2972, %r2877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3137, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3137, %r2985, %r2881;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3143, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3143, %r2996, %r2885;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3149, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3149, %r3007, %r2889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r3155, %r3018, %r2893;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3161, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3161, %r3031, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3167, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r3167, %r3042, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3173, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3173, %r3053, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3179, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3179, %r3064, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r3185, %r3077, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3191, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r3191, %r3088, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3197, %r3099, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3203, %r3110, %r2925;
	// end inline asm
	// begin inline asm
	mov.b32 %r3214, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3225, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3211, %r624, %r625, %r3214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3216, %r3214, %r3215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3219, %r3211, %r3216;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3222, %r635, %r625, %r3225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3227, %r3225, %r3226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3230, %r3222, %r3227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3233, %r624, %r647, %r3214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3238, %r3214, %r3237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3241, %r3233, %r3238;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3244, %r635, %r647, %r3225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3249, %r3225, %r3248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3252, %r3244, %r3249;
	// end inline asm
	// begin inline asm
	mov.b32 %r3260, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3271, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3257, %r624, %r671, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3262, %r3260, %r3261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3265, %r3257, %r3262;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3268, %r635, %r671, %r3271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3273, %r3271, %r3272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3276, %r3268, %r3273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3279, %r624, %r693, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3284, %r3260, %r3283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3287, %r3279, %r3284;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3290, %r635, %r693, %r3271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3295, %r3271, %r3294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3298, %r3290, %r3295;
	// end inline asm
	// begin inline asm
	mov.b32 %r3306, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3317, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3303, %r624, %r717, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3308, %r3306, %r3307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3311, %r3303, %r3308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3314, %r635, %r717, %r3317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3319, %r3317, %r3318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3322, %r3314, %r3319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3325, %r624, %r739, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3330, %r3306, %r3329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3333, %r3325, %r3330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3336, %r635, %r739, %r3317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3341, %r3317, %r3340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3344, %r3336, %r3341;
	// end inline asm
	// begin inline asm
	mov.b32 %r3352, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3363, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3349, %r624, %r763, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3354, %r3352, %r3353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3357, %r3349, %r3354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3360, %r635, %r763, %r3363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3365, %r3363, %r3364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3368, %r3360, %r3365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3371, %r624, %r785, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3376, %r3352, %r3375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3379, %r3371, %r3376;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3382, %r635, %r785, %r3363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3387, %r3363, %r3386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3390, %r3382, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r240, %r3219, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3461, %r240, %r3230, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r240, %r3241, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r240, %r3252, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r240, %r3265, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r240, %r3276, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r240, %r3287, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r240, %r3298, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r240, %r3311, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r240, %r3322, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r240, %r3333, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r240, %r3344, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r240, %r3357, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r240, %r3368, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r240, %r3379, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r240, %r3390, %r3205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3457, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3459, %r3457, %r3461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r261, %r3464, %r3459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3466, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3468, %r3466, %r3470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r261, %r3473, %r3468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3475, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3477, %r3475, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r261, %r3482, %r3477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3484, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r3484, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r261, %r3491, %r3486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3493, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r3493, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r261, %r3500, %r3495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3502, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3504, %r3502, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r261, %r3509, %r3504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3511, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3513, %r3511, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r261, %r3518, %r3513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3520, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3522, %r3520, %r3524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r261, %r3527, %r3522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r264, %r3464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r261, %r3461, %r3529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3536, %r264, %r3473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r261, %r3470, %r3536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r264, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r261, %r3479, %r3543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r264, %r3491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r261, %r3488, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r264, %r3500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r261, %r3497, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r264, %r3509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r261, %r3506, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r264, %r3518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r261, %r3515, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r264, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r261, %r3524, %r3578;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3672, %r3669}, {%r320, %r326, %r323, %r329}, {%r3462, %r3532}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3681, %r3678}, {%r320, %r326, %r323, %r329}, {%r3471, %r3539}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3690, %r3687}, {%r320, %r326, %r323, %r329}, {%r3480, %r3546}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3699, %r3696}, {%r320, %r326, %r323, %r329}, {%r3489, %r3553}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3708, %r3705}, {%r320, %r326, %r323, %r329}, {%r3498, %r3560}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3717, %r3714}, {%r320, %r326, %r323, %r329}, {%r3507, %r3567}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3726, %r3723}, {%r320, %r326, %r323, %r329}, {%r3516, %r3574}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3735, %r3732}, {%r320, %r326, %r323, %r329}, {%r3525, %r3581}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3665, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3667, %r3665, %r3669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r364, %r3672, %r3667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3674, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3676, %r3674, %r3678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3679, %r364, %r3681, %r3676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3683, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3685, %r3683, %r3687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3688, %r364, %r3690, %r3685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3692, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3694, %r3692, %r3696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3697, %r364, %r3699, %r3694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3701, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3703, %r3701, %r3705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3706, %r364, %r3708, %r3703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3710, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3712, %r3710, %r3714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3715, %r364, %r3717, %r3712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3719, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3721, %r3719, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3724, %r364, %r3726, %r3721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3728, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3730, %r3728, %r3732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3733, %r364, %r3735, %r3730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3737, %r367, %r3672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3740, %r364, %r3669, %r3737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3744, %r367, %r3681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r364, %r3678, %r3744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3751, %r367, %r3690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3754, %r364, %r3687, %r3751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r367, %r3699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r364, %r3696, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r367, %r3708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r364, %r3705, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r367, %r3717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r364, %r3714, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r367, %r3726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r364, %r3723, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r367, %r3735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r364, %r3732, %r3786;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3793, %r3794}, {%r398, %r404, %r401, %r407}, {%r3670, %r3740}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3803, %r3804}, {%r398, %r404, %r401, %r407}, {%r3679, %r3747}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3813, %r3814}, {%r398, %r404, %r401, %r407}, {%r3688, %r3754}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3823, %r3824}, {%r398, %r404, %r401, %r407}, {%r3697, %r3761}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3833, %r3834}, {%r398, %r404, %r401, %r407}, {%r3706, %r3768}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3843, %r3844}, {%r398, %r404, %r401, %r407}, {%r3715, %r3775}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3853, %r3854}, {%r398, %r404, %r401, %r407}, {%r3724, %r3782}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3863, %r3864}, {%r398, %r404, %r401, %r407}, {%r3733, %r3789}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3873, %r84, %r3793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3876, %r84, %r3794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3879, %r84, %r3803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3882, %r84, %r3804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3885, %r84, %r3813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3888, %r84, %r3814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3891, %r84, %r3823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3894, %r84, %r3824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3897, %r84, %r3833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3900, %r84, %r3834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3903, %r84, %r3843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3906, %r84, %r3844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3909, %r84, %r3853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r84, %r3854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r84, %r3863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r84, %r3864;
	// end inline asm
	// begin inline asm
	mov.b32 %r3921, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3922, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3923, %r3873, %r3921;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3926, %r3923, %r3922;
	// end inline asm
	// begin inline asm
	mov.b32 %r3929, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3930, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3931, %r3876, %r3929;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3934, %r3931, %r3930;
	// end inline asm
	// begin inline asm
	mov.b32 %r3937, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3938, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3939, %r3879, %r3937;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3942, %r3939, %r3938;
	// end inline asm
	// begin inline asm
	mov.b32 %r3945, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3946, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3947, %r3882, %r3945;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3950, %r3947, %r3946;
	// end inline asm
	// begin inline asm
	mov.b32 %r3953, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3954, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3955, %r3885, %r3953;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3958, %r3955, %r3954;
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3963, %r3888, %r3961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3966, %r3963, %r3962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3971, %r3891, %r3969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3974, %r3971, %r3970;
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3979, %r3894, %r3977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3982, %r3979, %r3978;
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3987, %r3897, %r3985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3990, %r3987, %r3986;
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3995, %r3900, %r3993;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3998, %r3995, %r3994;
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4003, %r3903, %r4001;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4006, %r4003, %r4002;
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4011, %r3906, %r4009;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4014, %r4011, %r4010;
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4019, %r3909, %r4017;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4022, %r4019, %r4018;
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4027, %r3912, %r4025;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4030, %r4027, %r4026;
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4035, %r3915, %r4033;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4038, %r4035, %r4034;
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4043, %r3918, %r4041;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4046, %r4043, %r4042;
	// end inline asm
	// begin inline asm
	mov.b32 %r4052, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4051, %r4052, %r4050;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4054, %r3926, %r4051;
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4058, %r4052, %r4057;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4061, %r3934, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4064, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4065, %r4052, %r4064;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4068, %r3942, %r4065;
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4072, %r4052, %r4071;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4075, %r3950, %r4072;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4078, %r4054, %r4068, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4082, %r4061, %r4075, %r2285;
	// end inline asm
	shl.b32 	%r4089, %r4082, 4;
	// begin inline asm
	lop3.b32 %r4086, %r2291, %r4078, %r4089, 202;
	// end inline asm
	xor.b32  	%r7853, %r4086, -2004318072;
	// begin inline asm
	mov.b32 %r4093, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4092, %r4093, %r4091;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4095, %r3958, %r4092;
	// end inline asm
	// begin inline asm
	mov.b32 %r4098, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4099, %r4093, %r4098;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4102, %r3966, %r4099;
	// end inline asm
	// begin inline asm
	mov.b32 %r4105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4106, %r4093, %r4105;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4109, %r3974, %r4106;
	// end inline asm
	// begin inline asm
	mov.b32 %r4112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4113, %r4093, %r4112;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4116, %r3982, %r4113;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4119, %r4095, %r4109, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4123, %r4102, %r4116, %r2285;
	// end inline asm
	shl.b32 	%r4130, %r4123, 4;
	// begin inline asm
	lop3.b32 %r4127, %r2291, %r4119, %r4130, 202;
	// end inline asm
	xor.b32  	%r7854, %r4127, -2004318072;
	// begin inline asm
	mov.b32 %r4134, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4132, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4133, %r4134, %r4132;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4136, %r3990, %r4133;
	// end inline asm
	// begin inline asm
	mov.b32 %r4139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4140, %r4134, %r4139;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4143, %r3998, %r4140;
	// end inline asm
	// begin inline asm
	mov.b32 %r4146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4147, %r4134, %r4146;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4150, %r4006, %r4147;
	// end inline asm
	// begin inline asm
	mov.b32 %r4153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4154, %r4134, %r4153;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4157, %r4014, %r4154;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4160, %r4136, %r4150, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4164, %r4143, %r4157, %r2285;
	// end inline asm
	shl.b32 	%r4171, %r4164, 4;
	// begin inline asm
	lop3.b32 %r4168, %r2291, %r4160, %r4171, 202;
	// end inline asm
	xor.b32  	%r7855, %r4168, -2004318072;
	// begin inline asm
	mov.b32 %r4175, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4173, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4174, %r4175, %r4173;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4177, %r4022, %r4174;
	// end inline asm
	// begin inline asm
	mov.b32 %r4180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4181, %r4175, %r4180;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4184, %r4030, %r4181;
	// end inline asm
	// begin inline asm
	mov.b32 %r4187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4188, %r4175, %r4187;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4191, %r4038, %r4188;
	// end inline asm
	// begin inline asm
	mov.b32 %r4194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4195, %r4175, %r4194;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4198, %r4046, %r4195;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4201, %r4177, %r4191, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4205, %r4184, %r4198, %r2285;
	// end inline asm
	shl.b32 	%r4212, %r4205, 4;
	// begin inline asm
	lop3.b32 %r4209, %r2291, %r4201, %r4212, 202;
	// end inline asm
	xor.b32  	%r7856, %r4209, -2004318072;
	st.shared.u32 	[%rd155], %r7853;
	st.shared.u32 	[%rd156], %r7854;
	st.shared.u32 	[%rd157], %r7855;
	st.shared.u32 	[%rd158], %r7856;
	ld.shared.u32 	%r8001, [%rd98];
	ld.shared.u32 	%r8000, [%rd100];
	ld.shared.u32 	%r7999, [%rd102];
	ld.shared.u32 	%r7998, [%rd104];
	// begin inline asm
	mov.b32 %r4218, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4229, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4217, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r4215, %r624, %r4217, %r4218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4220, %r4218, %r4219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4223, %r4215, %r4220;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4226, %r635, %r4217, %r4229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4230, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4231, %r4229, %r4230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4234, %r4226, %r4231;
	// end inline asm
	shr.u32 	%r4239, %r4217, 8;
	// begin inline asm
	lop3.b32 %r4237, %r624, %r4239, %r4218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4241, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4242, %r4218, %r4241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4245, %r4237, %r4242;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4248, %r635, %r4239, %r4229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4252, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4253, %r4229, %r4252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4256, %r4248, %r4253;
	// end inline asm
	// begin inline asm
	mov.b32 %r4264, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4275, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4263, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r4261, %r624, %r4263, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4266, %r4264, %r4265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4269, %r4261, %r4266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4272, %r635, %r4263, %r4275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4277, %r4275, %r4276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4280, %r4272, %r4277;
	// end inline asm
	shr.u32 	%r4285, %r4263, 8;
	// begin inline asm
	lop3.b32 %r4283, %r624, %r4285, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4288, %r4264, %r4287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4291, %r4283, %r4288;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4294, %r635, %r4285, %r4275, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4299, %r4275, %r4298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4302, %r4294, %r4299;
	// end inline asm
	// begin inline asm
	mov.b32 %r4310, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4321, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4309, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r4307, %r624, %r4309, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4312, %r4310, %r4311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4315, %r4307, %r4312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4318, %r635, %r4309, %r4321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4323, %r4321, %r4322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4326, %r4318, %r4323;
	// end inline asm
	shr.u32 	%r4331, %r4309, 8;
	// begin inline asm
	lop3.b32 %r4329, %r624, %r4331, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4334, %r4310, %r4333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4337, %r4329, %r4334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4340, %r635, %r4331, %r4321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4345, %r4321, %r4344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4348, %r4340, %r4345;
	// end inline asm
	// begin inline asm
	mov.b32 %r4356, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4367, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4355, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r4353, %r624, %r4355, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4358, %r4356, %r4357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4361, %r4353, %r4358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4364, %r635, %r4355, %r4367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4369, %r4367, %r4368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4372, %r4364, %r4369;
	// end inline asm
	shr.u32 	%r4377, %r4355, 8;
	// begin inline asm
	lop3.b32 %r4375, %r624, %r4377, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4380, %r4356, %r4379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4383, %r4375, %r4380;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4386, %r635, %r4377, %r4367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4391, %r4367, %r4390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4394, %r4386, %r4391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4397, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4399, %r4397, %r4223;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4402, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4404, %r4402, %r4234;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4407, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4409, %r4407, %r4245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4412, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4414, %r4412, %r4256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4417, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4419, %r4417, %r4269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4422, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4424, %r4422, %r4280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4427, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4429, %r4427, %r4291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4432, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4434, %r4432, %r4302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4437, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4439, %r4437, %r4315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4442, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4444, %r4442, %r4326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4447, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4449, %r4447, %r4337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4452, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4454, %r4452, %r4348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4457, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4459, %r4457, %r4361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4462, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4464, %r4462, %r4372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4467, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4469, %r4467, %r4383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4472, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4474, %r4472, %r4394;
	// end inline asm
	// begin inline asm
	mov.b32 %r4482, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4493, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4479, %r624, %r1417, %r4482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4483, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4484, %r4482, %r4483;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4487, %r4479, %r4484;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4490, %r635, %r1417, %r4493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4494, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4495, %r4493, %r4494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4498, %r4490, %r4495;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4501, %r624, %r1439, %r4482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4505, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4506, %r4482, %r4505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4509, %r4501, %r4506;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4512, %r635, %r1439, %r4493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4516, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4517, %r4493, %r4516;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4520, %r4512, %r4517;
	// end inline asm
	// begin inline asm
	mov.b32 %r4528, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4539, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4525, %r624, %r1463, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4529, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4530, %r4528, %r4529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4533, %r4525, %r4530;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4536, %r635, %r1463, %r4539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4540, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4541, %r4539, %r4540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4544, %r4536, %r4541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4547, %r624, %r1485, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4551, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4552, %r4528, %r4551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4555, %r4547, %r4552;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4558, %r635, %r1485, %r4539, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4562, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4563, %r4539, %r4562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4566, %r4558, %r4563;
	// end inline asm
	// begin inline asm
	mov.b32 %r4574, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4585, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4571, %r624, %r1509, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4575, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4576, %r4574, %r4575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4579, %r4571, %r4576;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4582, %r635, %r1509, %r4585, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4586, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4587, %r4585, %r4586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4590, %r4582, %r4587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4593, %r624, %r1531, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4597, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4598, %r4574, %r4597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4601, %r4593, %r4598;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4604, %r635, %r1531, %r4585, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4608, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4609, %r4585, %r4608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4612, %r4604, %r4609;
	// end inline asm
	// begin inline asm
	mov.b32 %r4620, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4631, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4617, %r624, %r1555, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4621, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4622, %r4620, %r4621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4625, %r4617, %r4622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4628, %r635, %r1555, %r4631, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4632, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4633, %r4631, %r4632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4636, %r4628, %r4633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4639, %r624, %r1577, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4643, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4644, %r4620, %r4643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4647, %r4639, %r4644;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4650, %r635, %r1577, %r4631, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4654, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4655, %r4631, %r4654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4658, %r4650, %r4655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4661, %r204, %r4487, %r4399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4665, %r204, %r4498, %r4404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4669, %r204, %r4509, %r4409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4673, %r204, %r4520, %r4414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4677, %r204, %r4533, %r4419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4681, %r204, %r4544, %r4424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4685, %r204, %r4555, %r4429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4689, %r204, %r4566, %r4434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r204, %r4579, %r4439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r204, %r4590, %r4444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r204, %r4601, %r4449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r204, %r4612, %r4454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r204, %r4625, %r4459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r204, %r4636, %r4464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r204, %r4647, %r4469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r204, %r4658, %r4474;
	// end inline asm
	// begin inline asm
	mov.b32 %r4730, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4741, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4727, %r624, %r625, %r4730, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4732, %r4730, %r4731;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4735, %r4727, %r4732;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4738, %r635, %r625, %r4741, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4742, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4743, %r4741, %r4742;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4746, %r4738, %r4743;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4749, %r624, %r647, %r4730, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4753, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4754, %r4730, %r4753;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4757, %r4749, %r4754;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4760, %r635, %r647, %r4741, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4765, %r4741, %r4764;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4768, %r4760, %r4765;
	// end inline asm
	// begin inline asm
	mov.b32 %r4776, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4787, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4773, %r624, %r671, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4778, %r4776, %r4777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4781, %r4773, %r4778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4784, %r635, %r671, %r4787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4788, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4789, %r4787, %r4788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4792, %r4784, %r4789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4795, %r624, %r693, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4800, %r4776, %r4799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4803, %r4795, %r4800;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4806, %r635, %r693, %r4787, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4810, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4811, %r4787, %r4810;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4814, %r4806, %r4811;
	// end inline asm
	// begin inline asm
	mov.b32 %r4822, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4833, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4819, %r624, %r717, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4823, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4824, %r4822, %r4823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4827, %r4819, %r4824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4830, %r635, %r717, %r4833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4834, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4835, %r4833, %r4834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4838, %r4830, %r4835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4841, %r624, %r739, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4846, %r4822, %r4845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4849, %r4841, %r4846;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4852, %r635, %r739, %r4833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4856, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4857, %r4833, %r4856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4860, %r4852, %r4857;
	// end inline asm
	// begin inline asm
	mov.b32 %r4868, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4879, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4865, %r624, %r763, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4870, %r4868, %r4869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4873, %r4865, %r4870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4876, %r635, %r763, %r4879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4881, %r4879, %r4880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4884, %r4876, %r4881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4887, %r624, %r785, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4892, %r4868, %r4891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4895, %r4887, %r4892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4898, %r635, %r785, %r4879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4903, %r4879, %r4902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4906, %r4898, %r4903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4909, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4911, %r4909, %r4735, %r4661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4915, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4917, %r4915, %r4746, %r4665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4921, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4923, %r4921, %r4757, %r4669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4927, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4929, %r4927, %r4768, %r4673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4933, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4935, %r4933, %r4781, %r4677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4939, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4941, %r4939, %r4792, %r4681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4945, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4947, %r4945, %r4803, %r4685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4951, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4953, %r4951, %r4814, %r4689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4957, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4959, %r4957, %r4827, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4963, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4965, %r4963, %r4838, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4969, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4971, %r4969, %r4849, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4975, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4977, %r4975, %r4860, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4981, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4983, %r4981, %r4873, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4987, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4989, %r4987, %r4884, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4993, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4995, %r4993, %r4895, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4999, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5001, %r4999, %r4906, %r4721;
	// end inline asm
	// begin inline asm
	mov.b32 %r5010, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5021, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5007, %r624, %r2421, %r5010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5012, %r5010, %r5011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5015, %r5007, %r5012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5018, %r635, %r2421, %r5021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5023, %r5021, %r5022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5026, %r5018, %r5023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5029, %r624, %r2443, %r5010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5034, %r5010, %r5033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5037, %r5029, %r5034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5040, %r635, %r2443, %r5021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5045, %r5021, %r5044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5048, %r5040, %r5045;
	// end inline asm
	// begin inline asm
	mov.b32 %r5056, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5067, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5053, %r624, %r2467, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5058, %r5056, %r5057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5061, %r5053, %r5058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5064, %r635, %r2467, %r5067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5069, %r5067, %r5068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5072, %r5064, %r5069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5075, %r624, %r2489, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5080, %r5056, %r5079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5083, %r5075, %r5080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5086, %r635, %r2489, %r5067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5091, %r5067, %r5090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5094, %r5086, %r5091;
	// end inline asm
	// begin inline asm
	mov.b32 %r5102, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5113, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5099, %r624, %r2513, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5104, %r5102, %r5103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5107, %r5099, %r5104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5110, %r635, %r2513, %r5113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5115, %r5113, %r5114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5118, %r5110, %r5115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5121, %r624, %r2535, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5126, %r5102, %r5125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5129, %r5121, %r5126;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5132, %r635, %r2535, %r5113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5136, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5137, %r5113, %r5136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5140, %r5132, %r5137;
	// end inline asm
	// begin inline asm
	mov.b32 %r5148, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5159, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5145, %r624, %r2559, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5149, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5150, %r5148, %r5149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5153, %r5145, %r5150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5156, %r635, %r2559, %r5159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5161, %r5159, %r5160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5164, %r5156, %r5161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5167, %r624, %r2581, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5172, %r5148, %r5171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5175, %r5167, %r5172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5178, %r635, %r2581, %r5159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5183, %r5159, %r5182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5186, %r5178, %r5183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5260, %r240, %r5015, %r4911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5257, %r240, %r5026, %r4917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5269, %r240, %r5037, %r4923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5266, %r240, %r5048, %r4929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5278, %r240, %r5061, %r4935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5275, %r240, %r5072, %r4941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5287, %r240, %r5083, %r4947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5284, %r240, %r5094, %r4953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5296, %r240, %r5107, %r4959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5293, %r240, %r5118, %r4965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5305, %r240, %r5129, %r4971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5302, %r240, %r5140, %r4977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5314, %r240, %r5153, %r4983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r240, %r5164, %r4989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5323, %r240, %r5175, %r4995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r240, %r5186, %r5001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5253, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5255, %r5253, %r5257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5258, %r261, %r5260, %r5255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5262, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5264, %r5262, %r5266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5267, %r261, %r5269, %r5264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5271, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5273, %r5271, %r5275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5276, %r261, %r5278, %r5273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5280, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5282, %r5280, %r5284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r261, %r5287, %r5282;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5289, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5291, %r5289, %r5293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r261, %r5296, %r5291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5298, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5300, %r5298, %r5302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r261, %r5305, %r5300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5307, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5309, %r5307, %r5311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r261, %r5314, %r5309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5316, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5318, %r5316, %r5320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r261, %r5323, %r5318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5325, %r264, %r5260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r261, %r5257, %r5325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5332, %r264, %r5269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r261, %r5266, %r5332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5339, %r264, %r5278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r261, %r5275, %r5339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r264, %r5287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r261, %r5284, %r5346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r264, %r5296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r261, %r5293, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r264, %r5305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r261, %r5302, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r264, %r5314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r261, %r5311, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r264, %r5323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r261, %r5320, %r5374;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5468, %r5465}, {%r320, %r326, %r323, %r329}, {%r5258, %r5328}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5477, %r5474}, {%r320, %r326, %r323, %r329}, {%r5267, %r5335}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5486, %r5483}, {%r320, %r326, %r323, %r329}, {%r5276, %r5342}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5495, %r5492}, {%r320, %r326, %r323, %r329}, {%r5285, %r5349}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5504, %r5501}, {%r320, %r326, %r323, %r329}, {%r5294, %r5356}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5513, %r5510}, {%r320, %r326, %r323, %r329}, {%r5303, %r5363}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5522, %r5519}, {%r320, %r326, %r323, %r329}, {%r5312, %r5370}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5531, %r5528}, {%r320, %r326, %r323, %r329}, {%r5321, %r5377}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5461, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5463, %r5461, %r5465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5466, %r364, %r5468, %r5463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5470, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5472, %r5470, %r5474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5475, %r364, %r5477, %r5472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5479, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5481, %r5479, %r5483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5484, %r364, %r5486, %r5481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5488, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5490, %r5488, %r5492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5493, %r364, %r5495, %r5490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5497, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5499, %r5497, %r5501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5502, %r364, %r5504, %r5499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5506, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5508, %r5506, %r5510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5511, %r364, %r5513, %r5508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5515, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5517, %r5515, %r5519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5520, %r364, %r5522, %r5517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5524, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5526, %r5524, %r5528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5529, %r364, %r5531, %r5526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5533, %r367, %r5468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5536, %r364, %r5465, %r5533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5540, %r367, %r5477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5543, %r364, %r5474, %r5540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5547, %r367, %r5486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5550, %r364, %r5483, %r5547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r367, %r5495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r364, %r5492, %r5554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r367, %r5504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r364, %r5501, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r367, %r5513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r364, %r5510, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r367, %r5522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r364, %r5519, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r367, %r5531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r364, %r5528, %r5582;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5589, %r5590}, {%r398, %r404, %r401, %r407}, {%r5466, %r5536}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5599, %r5600}, {%r398, %r404, %r401, %r407}, {%r5475, %r5543}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5609, %r5610}, {%r398, %r404, %r401, %r407}, {%r5484, %r5550}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5619, %r5620}, {%r398, %r404, %r401, %r407}, {%r5493, %r5557}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5629, %r5630}, {%r398, %r404, %r401, %r407}, {%r5502, %r5564}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5639, %r5640}, {%r398, %r404, %r401, %r407}, {%r5511, %r5571}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5649, %r5650}, {%r398, %r404, %r401, %r407}, {%r5520, %r5578}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5659, %r5660}, {%r398, %r404, %r401, %r407}, {%r5529, %r5585}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5669, %r84, %r5589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5672, %r84, %r5590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5675, %r84, %r5599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5678, %r84, %r5600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5681, %r84, %r5609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5684, %r84, %r5610;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5687, %r84, %r5619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5690, %r84, %r5620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5693, %r84, %r5629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5696, %r84, %r5630;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5699, %r84, %r5639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5702, %r84, %r5640;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5705, %r84, %r5649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r84, %r5650;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r84, %r5659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r84, %r5660;
	// end inline asm
	// begin inline asm
	mov.b32 %r5717, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5718, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5719, %r5669, %r5717;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5722, %r5719, %r5718;
	// end inline asm
	// begin inline asm
	mov.b32 %r5725, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5726, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5727, %r5672, %r5725;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5730, %r5727, %r5726;
	// end inline asm
	// begin inline asm
	mov.b32 %r5733, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5734, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5735, %r5675, %r5733;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5738, %r5735, %r5734;
	// end inline asm
	// begin inline asm
	mov.b32 %r5741, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5742, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5743, %r5678, %r5741;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5746, %r5743, %r5742;
	// end inline asm
	// begin inline asm
	mov.b32 %r5749, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5750, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5751, %r5681, %r5749;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5754, %r5751, %r5750;
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5759, %r5684, %r5757;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5762, %r5759, %r5758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5767, %r5687, %r5765;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5770, %r5767, %r5766;
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5775, %r5690, %r5773;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5778, %r5775, %r5774;
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5783, %r5693, %r5781;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5786, %r5783, %r5782;
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5791, %r5696, %r5789;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5794, %r5791, %r5790;
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5799, %r5699, %r5797;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5802, %r5799, %r5798;
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5807, %r5702, %r5805;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5810, %r5807, %r5806;
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5815, %r5705, %r5813;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5818, %r5815, %r5814;
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5823, %r5708, %r5821;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5826, %r5823, %r5822;
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5831, %r5711, %r5829;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5834, %r5831, %r5830;
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5839, %r5714, %r5837;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5842, %r5839, %r5838;
	// end inline asm
	// begin inline asm
	mov.b32 %r5848, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5847, %r5848, %r5846;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5850, %r5722, %r5847;
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5854, %r5848, %r5853;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5857, %r5730, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5860, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5861, %r5848, %r5860;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5864, %r5738, %r5861;
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5868, %r5848, %r5867;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5871, %r5746, %r5868;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5874, %r5850, %r5864, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5878, %r5857, %r5871, %r2285;
	// end inline asm
	shl.b32 	%r5885, %r5878, 4;
	// begin inline asm
	lop3.b32 %r5882, %r2291, %r5874, %r5885, 202;
	// end inline asm
	xor.b32  	%r7857, %r5882, -2004318072;
	// begin inline asm
	mov.b32 %r5889, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5887, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5888, %r5889, %r5887;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5891, %r5754, %r5888;
	// end inline asm
	// begin inline asm
	mov.b32 %r5894, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5895, %r5889, %r5894;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5898, %r5762, %r5895;
	// end inline asm
	// begin inline asm
	mov.b32 %r5901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5902, %r5889, %r5901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5905, %r5770, %r5902;
	// end inline asm
	// begin inline asm
	mov.b32 %r5908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5909, %r5889, %r5908;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5912, %r5778, %r5909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5915, %r5891, %r5905, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5919, %r5898, %r5912, %r2285;
	// end inline asm
	shl.b32 	%r5926, %r5919, 4;
	// begin inline asm
	lop3.b32 %r5923, %r2291, %r5915, %r5926, 202;
	// end inline asm
	xor.b32  	%r7858, %r5923, -2004318072;
	// begin inline asm
	mov.b32 %r5930, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5928, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5929, %r5930, %r5928;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5932, %r5786, %r5929;
	// end inline asm
	// begin inline asm
	mov.b32 %r5935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5936, %r5930, %r5935;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5939, %r5794, %r5936;
	// end inline asm
	// begin inline asm
	mov.b32 %r5942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5943, %r5930, %r5942;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5946, %r5802, %r5943;
	// end inline asm
	// begin inline asm
	mov.b32 %r5949, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5950, %r5930, %r5949;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5953, %r5810, %r5950;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5956, %r5932, %r5946, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5960, %r5939, %r5953, %r2285;
	// end inline asm
	shl.b32 	%r5967, %r5960, 4;
	// begin inline asm
	lop3.b32 %r5964, %r2291, %r5956, %r5967, 202;
	// end inline asm
	xor.b32  	%r7859, %r5964, -2004318072;
	// begin inline asm
	mov.b32 %r5971, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5969, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5970, %r5971, %r5969;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5973, %r5818, %r5970;
	// end inline asm
	// begin inline asm
	mov.b32 %r5976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5977, %r5971, %r5976;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5980, %r5826, %r5977;
	// end inline asm
	// begin inline asm
	mov.b32 %r5983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5984, %r5971, %r5983;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5987, %r5834, %r5984;
	// end inline asm
	// begin inline asm
	mov.b32 %r5990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5991, %r5971, %r5990;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5994, %r5842, %r5991;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5997, %r5973, %r5987, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6001, %r5980, %r5994, %r2285;
	// end inline asm
	shl.b32 	%r6008, %r6001, 4;
	// begin inline asm
	lop3.b32 %r6005, %r2291, %r5997, %r6008, 202;
	// end inline asm
	xor.b32  	%r7860, %r6005, -2004318072;
	st.shared.u32 	[%rd155], %r7857;
	st.shared.u32 	[%rd156], %r7858;
	st.shared.u32 	[%rd157], %r7859;
	st.shared.u32 	[%rd158], %r7860;
	ld.shared.u32 	%r7997, [%rd98];
	ld.shared.u32 	%r7996, [%rd100];
	ld.shared.u32 	%r7995, [%rd102];
	ld.shared.u32 	%r7994, [%rd104];
	// begin inline asm
	mov.b32 %r6014, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6025, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6013, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r6011, %r624, %r6013, %r6014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6016, %r6014, %r6015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6019, %r6011, %r6016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6022, %r635, %r6013, %r6025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6026, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6027, %r6025, %r6026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6030, %r6022, %r6027;
	// end inline asm
	shr.u32 	%r6035, %r6013, 8;
	// begin inline asm
	lop3.b32 %r6033, %r624, %r6035, %r6014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6038, %r6014, %r6037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6041, %r6033, %r6038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6044, %r635, %r6035, %r6025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6049, %r6025, %r6048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6052, %r6044, %r6049;
	// end inline asm
	// begin inline asm
	mov.b32 %r6060, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6071, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6059, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r6057, %r624, %r6059, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6062, %r6060, %r6061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6065, %r6057, %r6062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6068, %r635, %r6059, %r6071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6073, %r6071, %r6072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6076, %r6068, %r6073;
	// end inline asm
	shr.u32 	%r6081, %r6059, 8;
	// begin inline asm
	lop3.b32 %r6079, %r624, %r6081, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6084, %r6060, %r6083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6087, %r6079, %r6084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6090, %r635, %r6081, %r6071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6095, %r6071, %r6094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6098, %r6090, %r6095;
	// end inline asm
	// begin inline asm
	mov.b32 %r6106, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6117, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6105, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r6103, %r624, %r6105, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6108, %r6106, %r6107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6111, %r6103, %r6108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6114, %r635, %r6105, %r6117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6119, %r6117, %r6118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6122, %r6114, %r6119;
	// end inline asm
	shr.u32 	%r6127, %r6105, 8;
	// begin inline asm
	lop3.b32 %r6125, %r624, %r6127, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6129, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6130, %r6106, %r6129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6133, %r6125, %r6130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6136, %r635, %r6127, %r6117, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6141, %r6117, %r6140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6144, %r6136, %r6141;
	// end inline asm
	// begin inline asm
	mov.b32 %r6152, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6163, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6151, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r6149, %r624, %r6151, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6154, %r6152, %r6153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6157, %r6149, %r6154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6160, %r635, %r6151, %r6163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6165, %r6163, %r6164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6168, %r6160, %r6165;
	// end inline asm
	shr.u32 	%r6173, %r6151, 8;
	// begin inline asm
	lop3.b32 %r6171, %r624, %r6173, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6175, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6176, %r6152, %r6175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6179, %r6171, %r6176;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6182, %r635, %r6173, %r6163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6187, %r6163, %r6186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6190, %r6182, %r6187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6193, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6195, %r6193, %r6019;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6198, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6200, %r6198, %r6030;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6203, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6205, %r6203, %r6041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6208, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6210, %r6208, %r6052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6213, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6215, %r6213, %r6065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6218, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6220, %r6218, %r6076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6223, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6225, %r6223, %r6087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6228, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6230, %r6228, %r6098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6233, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6235, %r6233, %r6111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6238, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6240, %r6238, %r6122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6243, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6245, %r6243, %r6133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6248, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6250, %r6248, %r6144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6253, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6255, %r6253, %r6157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6258, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6260, %r6258, %r6168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6263, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6265, %r6263, %r6179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6268, %r258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6270, %r6268, %r6190;
	// end inline asm
	// begin inline asm
	mov.b32 %r6278, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6289, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6275, %r624, %r625, %r6278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6279, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6280, %r6278, %r6279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6283, %r6275, %r6280;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6286, %r635, %r625, %r6289, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6290, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6291, %r6289, %r6290;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6294, %r6286, %r6291;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6297, %r624, %r647, %r6278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6302, %r6278, %r6301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6305, %r6297, %r6302;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6308, %r635, %r647, %r6289, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6312, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6313, %r6289, %r6312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6316, %r6308, %r6313;
	// end inline asm
	// begin inline asm
	mov.b32 %r6324, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6335, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6321, %r624, %r671, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6326, %r6324, %r6325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6329, %r6321, %r6326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6332, %r635, %r671, %r6335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6337, %r6335, %r6336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6340, %r6332, %r6337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6343, %r624, %r693, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6348, %r6324, %r6347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6351, %r6343, %r6348;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6354, %r635, %r693, %r6335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6358, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6359, %r6335, %r6358;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6362, %r6354, %r6359;
	// end inline asm
	// begin inline asm
	mov.b32 %r6370, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6381, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6367, %r624, %r717, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6372, %r6370, %r6371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6375, %r6367, %r6372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6378, %r635, %r717, %r6381, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6383, %r6381, %r6382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6386, %r6378, %r6383;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6389, %r624, %r739, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6394, %r6370, %r6393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6397, %r6389, %r6394;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6400, %r635, %r739, %r6381, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6405, %r6381, %r6404;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6408, %r6400, %r6405;
	// end inline asm
	// begin inline asm
	mov.b32 %r6416, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6427, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6413, %r624, %r763, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6418, %r6416, %r6417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6421, %r6413, %r6418;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6424, %r635, %r763, %r6427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6428, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6429, %r6427, %r6428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6432, %r6424, %r6429;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6435, %r624, %r785, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6439, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6440, %r6416, %r6439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6443, %r6435, %r6440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6446, %r635, %r785, %r6427, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6451, %r6427, %r6450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6454, %r6446, %r6451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6457, %r204, %r6283, %r6195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6461, %r204, %r6294, %r6200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6465, %r204, %r6305, %r6205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6469, %r204, %r6316, %r6210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6473, %r204, %r6329, %r6215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6477, %r204, %r6340, %r6220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6481, %r204, %r6351, %r6225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6485, %r204, %r6362, %r6230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r204, %r6375, %r6235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r204, %r6386, %r6240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r204, %r6397, %r6245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r204, %r6408, %r6250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r204, %r6421, %r6255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r204, %r6432, %r6260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r204, %r6443, %r6265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r204, %r6454, %r6270;
	// end inline asm
	// begin inline asm
	mov.b32 %r6526, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6537, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6523, %r624, %r2421, %r6526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6527, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6528, %r6526, %r6527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6531, %r6523, %r6528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6534, %r635, %r2421, %r6537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6538, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6539, %r6537, %r6538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6542, %r6534, %r6539;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6545, %r624, %r2443, %r6526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6549, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6550, %r6526, %r6549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6553, %r6545, %r6550;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6556, %r635, %r2443, %r6537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6560, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6561, %r6537, %r6560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6564, %r6556, %r6561;
	// end inline asm
	// begin inline asm
	mov.b32 %r6572, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6583, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6569, %r624, %r2467, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6574, %r6572, %r6573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6577, %r6569, %r6574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6580, %r635, %r2467, %r6583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6585, %r6583, %r6584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6588, %r6580, %r6585;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6591, %r624, %r2489, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6596, %r6572, %r6595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6599, %r6591, %r6596;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6602, %r635, %r2489, %r6583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6607, %r6583, %r6606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6610, %r6602, %r6607;
	// end inline asm
	// begin inline asm
	mov.b32 %r6618, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6629, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6615, %r624, %r2513, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6619, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6620, %r6618, %r6619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6623, %r6615, %r6620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6626, %r635, %r2513, %r6629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6631, %r6629, %r6630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6634, %r6626, %r6631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6637, %r624, %r2535, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6641, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6642, %r6618, %r6641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6645, %r6637, %r6642;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6648, %r635, %r2535, %r6629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6652, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6653, %r6629, %r6652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6656, %r6648, %r6653;
	// end inline asm
	// begin inline asm
	mov.b32 %r6664, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6675, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6661, %r624, %r2559, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6666, %r6664, %r6665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6669, %r6661, %r6666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6672, %r635, %r2559, %r6675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6677, %r6675, %r6676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6680, %r6672, %r6677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6683, %r624, %r2581, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6687, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6688, %r6664, %r6687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6691, %r6683, %r6688;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6694, %r635, %r2581, %r6675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6698, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6699, %r6675, %r6698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6702, %r6694, %r6699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6705, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6707, %r6705, %r6531, %r6457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6711, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6713, %r6711, %r6542, %r6461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6717, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6719, %r6717, %r6553, %r6465;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6723, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6725, %r6723, %r6564, %r6469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6729, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6731, %r6729, %r6577, %r6473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6735, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6737, %r6735, %r6588, %r6477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6741, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6743, %r6741, %r6599, %r6481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6747, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6749, %r6747, %r6610, %r6485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6753, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6755, %r6753, %r6623, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6759, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6761, %r6759, %r6634, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6765, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6767, %r6765, %r6645, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6771, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6773, %r6771, %r6656, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6777, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6779, %r6777, %r6669, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6783, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6785, %r6783, %r6680, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6789, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6791, %r6789, %r6691, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6795, %r222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6797, %r6795, %r6702, %r6517;
	// end inline asm
	// begin inline asm
	mov.b32 %r6806, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6817, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6803, %r624, %r4217, %r6806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6808, %r6806, %r6807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6811, %r6803, %r6808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6814, %r635, %r4217, %r6817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6819, %r6817, %r6818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6822, %r6814, %r6819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6825, %r624, %r4239, %r6806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6830, %r6806, %r6829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6833, %r6825, %r6830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6836, %r635, %r4239, %r6817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6841, %r6817, %r6840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6844, %r6836, %r6841;
	// end inline asm
	// begin inline asm
	mov.b32 %r6852, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6863, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6849, %r624, %r4263, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6854, %r6852, %r6853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6857, %r6849, %r6854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6860, %r635, %r4263, %r6863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6865, %r6863, %r6864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6868, %r6860, %r6865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6871, %r624, %r4285, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6876, %r6852, %r6875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6879, %r6871, %r6876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6882, %r635, %r4285, %r6863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6887, %r6863, %r6886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6890, %r6882, %r6887;
	// end inline asm
	// begin inline asm
	mov.b32 %r6898, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6909, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6895, %r624, %r4309, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6900, %r6898, %r6899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6903, %r6895, %r6900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6906, %r635, %r4309, %r6909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6911, %r6909, %r6910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6914, %r6906, %r6911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6917, %r624, %r4331, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6922, %r6898, %r6921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6925, %r6917, %r6922;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6928, %r635, %r4331, %r6909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6932, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6933, %r6909, %r6932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6936, %r6928, %r6933;
	// end inline asm
	// begin inline asm
	mov.b32 %r6944, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6955, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6941, %r624, %r4355, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6946, %r6944, %r6945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6949, %r6941, %r6946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6952, %r635, %r4355, %r6955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6957, %r6955, %r6956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6960, %r6952, %r6957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6963, %r624, %r4377, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6968, %r6944, %r6967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6971, %r6963, %r6968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6974, %r635, %r4377, %r6955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6979, %r6955, %r6978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6982, %r6974, %r6979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7056, %r240, %r6811, %r6707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7053, %r240, %r6822, %r6713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7065, %r240, %r6833, %r6719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7062, %r240, %r6844, %r6725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7074, %r240, %r6857, %r6731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7071, %r240, %r6868, %r6737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7083, %r240, %r6879, %r6743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7080, %r240, %r6890, %r6749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7092, %r240, %r6903, %r6755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7089, %r240, %r6914, %r6761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7101, %r240, %r6925, %r6767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7098, %r240, %r6936, %r6773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7110, %r240, %r6949, %r6779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r240, %r6960, %r6785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7119, %r240, %r6971, %r6791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r240, %r6982, %r6797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7049, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7051, %r7049, %r7053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7054, %r261, %r7056, %r7051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7058, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7060, %r7058, %r7062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7063, %r261, %r7065, %r7060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7067, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7069, %r7067, %r7071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7072, %r261, %r7074, %r7069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7076, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7078, %r7076, %r7080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r261, %r7083, %r7078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7085, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7087, %r7085, %r7089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r261, %r7092, %r7087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7094, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7096, %r7094, %r7098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r261, %r7101, %r7096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7103, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7105, %r7103, %r7107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r261, %r7110, %r7105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7112, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7114, %r7112, %r7116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r261, %r7119, %r7114;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7121, %r264, %r7056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r261, %r7053, %r7121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7128, %r264, %r7065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r261, %r7062, %r7128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7135, %r264, %r7074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r261, %r7071, %r7135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r264, %r7083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r261, %r7080, %r7142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r264, %r7092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r261, %r7089, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r264, %r7101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r261, %r7098, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r264, %r7110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r261, %r7107, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r264, %r7119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r261, %r7116, %r7170;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7264, %r7261}, {%r320, %r326, %r323, %r329}, {%r7054, %r7124}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7273, %r7270}, {%r320, %r326, %r323, %r329}, {%r7063, %r7131}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7282, %r7279}, {%r320, %r326, %r323, %r329}, {%r7072, %r7138}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7291, %r7288}, {%r320, %r326, %r323, %r329}, {%r7081, %r7145}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7300, %r7297}, {%r320, %r326, %r323, %r329}, {%r7090, %r7152}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7309, %r7306}, {%r320, %r326, %r323, %r329}, {%r7099, %r7159}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7318, %r7315}, {%r320, %r326, %r323, %r329}, {%r7108, %r7166}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7327, %r7324}, {%r320, %r326, %r323, %r329}, {%r7117, %r7173}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7257, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7259, %r7257, %r7261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7262, %r364, %r7264, %r7259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7266, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7268, %r7266, %r7270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7271, %r364, %r7273, %r7268;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7275, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7277, %r7275, %r7279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7280, %r364, %r7282, %r7277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7284, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7286, %r7284, %r7288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7289, %r364, %r7291, %r7286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7293, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7295, %r7293, %r7297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7298, %r364, %r7300, %r7295;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7302, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7304, %r7302, %r7306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7307, %r364, %r7309, %r7304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7311, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7313, %r7311, %r7315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7316, %r364, %r7318, %r7313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7320, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7322, %r7320, %r7324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7325, %r364, %r7327, %r7322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7329, %r367, %r7264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7332, %r364, %r7261, %r7329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7336, %r367, %r7273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7339, %r364, %r7270, %r7336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7343, %r367, %r7282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7346, %r364, %r7279, %r7343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r367, %r7291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r364, %r7288, %r7350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r367, %r7300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r364, %r7297, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r367, %r7309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r364, %r7306, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r367, %r7318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r364, %r7315, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r367, %r7327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r364, %r7324, %r7378;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7385, %r7386}, {%r398, %r404, %r401, %r407}, {%r7262, %r7332}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7395, %r7396}, {%r398, %r404, %r401, %r407}, {%r7271, %r7339}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7405, %r7406}, {%r398, %r404, %r401, %r407}, {%r7280, %r7346}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7415, %r7416}, {%r398, %r404, %r401, %r407}, {%r7289, %r7353}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7425, %r7426}, {%r398, %r404, %r401, %r407}, {%r7298, %r7360}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7435, %r7436}, {%r398, %r404, %r401, %r407}, {%r7307, %r7367}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7445, %r7446}, {%r398, %r404, %r401, %r407}, {%r7316, %r7374}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7455, %r7456}, {%r398, %r404, %r401, %r407}, {%r7325, %r7381}, {%r7965, %r7965};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7465, %r84, %r7385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7468, %r84, %r7386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7471, %r84, %r7395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7474, %r84, %r7396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7477, %r84, %r7405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7480, %r84, %r7406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7483, %r84, %r7415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7486, %r84, %r7416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7489, %r84, %r7425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7492, %r84, %r7426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7495, %r84, %r7435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7498, %r84, %r7436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7501, %r84, %r7445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r84, %r7446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r84, %r7455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r84, %r7456;
	// end inline asm
	// begin inline asm
	mov.b32 %r7513, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7514, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7515, %r7465, %r7513;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7518, %r7515, %r7514;
	// end inline asm
	// begin inline asm
	mov.b32 %r7521, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7522, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7523, %r7468, %r7521;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7526, %r7523, %r7522;
	// end inline asm
	// begin inline asm
	mov.b32 %r7529, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7530, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7531, %r7471, %r7529;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7534, %r7531, %r7530;
	// end inline asm
	// begin inline asm
	mov.b32 %r7537, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7538, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7539, %r7474, %r7537;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7542, %r7539, %r7538;
	// end inline asm
	// begin inline asm
	mov.b32 %r7545, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7546, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7547, %r7477, %r7545;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7550, %r7547, %r7546;
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7555, %r7480, %r7553;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7558, %r7555, %r7554;
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7563, %r7483, %r7561;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7566, %r7563, %r7562;
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7571, %r7486, %r7569;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7574, %r7571, %r7570;
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7579, %r7489, %r7577;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7582, %r7579, %r7578;
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7587, %r7492, %r7585;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7590, %r7587, %r7586;
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7595, %r7495, %r7593;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7598, %r7595, %r7594;
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7603, %r7498, %r7601;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7606, %r7603, %r7602;
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7611, %r7501, %r7609;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7614, %r7611, %r7610;
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7619, %r7504, %r7617;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7622, %r7619, %r7618;
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7627, %r7507, %r7625;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7630, %r7627, %r7626;
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7635, %r7510, %r7633;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7638, %r7635, %r7634;
	// end inline asm
	// begin inline asm
	mov.b32 %r7644, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7643, %r7644, %r7642;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7646, %r7518, %r7643;
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7650, %r7644, %r7649;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7653, %r7526, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7656, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7657, %r7644, %r7656;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7660, %r7534, %r7657;
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7664, %r7644, %r7663;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7667, %r7542, %r7664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7670, %r7646, %r7660, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7674, %r7653, %r7667, %r2285;
	// end inline asm
	shl.b32 	%r7681, %r7674, 4;
	// begin inline asm
	lop3.b32 %r7678, %r2291, %r7670, %r7681, 202;
	// end inline asm
	xor.b32  	%r7861, %r7678, -2004318072;
	// begin inline asm
	mov.b32 %r7685, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7683, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7684, %r7685, %r7683;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7687, %r7550, %r7684;
	// end inline asm
	// begin inline asm
	mov.b32 %r7690, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7691, %r7685, %r7690;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7694, %r7558, %r7691;
	// end inline asm
	// begin inline asm
	mov.b32 %r7697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7698, %r7685, %r7697;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7701, %r7566, %r7698;
	// end inline asm
	// begin inline asm
	mov.b32 %r7704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7705, %r7685, %r7704;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7708, %r7574, %r7705;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7711, %r7687, %r7701, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7715, %r7694, %r7708, %r2285;
	// end inline asm
	shl.b32 	%r7722, %r7715, 4;
	// begin inline asm
	lop3.b32 %r7719, %r2291, %r7711, %r7722, 202;
	// end inline asm
	xor.b32  	%r7862, %r7719, -2004318072;
	// begin inline asm
	mov.b32 %r7726, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7724, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7725, %r7726, %r7724;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7728, %r7582, %r7725;
	// end inline asm
	// begin inline asm
	mov.b32 %r7731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7732, %r7726, %r7731;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7735, %r7590, %r7732;
	// end inline asm
	// begin inline asm
	mov.b32 %r7738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7739, %r7726, %r7738;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7742, %r7598, %r7739;
	// end inline asm
	// begin inline asm
	mov.b32 %r7745, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7746, %r7726, %r7745;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7749, %r7606, %r7746;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7752, %r7728, %r7742, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7756, %r7735, %r7749, %r2285;
	// end inline asm
	shl.b32 	%r7763, %r7756, 4;
	// begin inline asm
	lop3.b32 %r7760, %r2291, %r7752, %r7763, 202;
	// end inline asm
	xor.b32  	%r7863, %r7760, -2004318072;
	// begin inline asm
	mov.b32 %r7767, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7766, %r7767, %r7765;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7769, %r7614, %r7766;
	// end inline asm
	// begin inline asm
	mov.b32 %r7772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7773, %r7767, %r7772;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7776, %r7622, %r7773;
	// end inline asm
	// begin inline asm
	mov.b32 %r7779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7780, %r7767, %r7779;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7783, %r7630, %r7780;
	// end inline asm
	// begin inline asm
	mov.b32 %r7786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7787, %r7767, %r7786;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7790, %r7638, %r7787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7793, %r7769, %r7783, %r2285;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7797, %r7776, %r7790, %r2285;
	// end inline asm
	shl.b32 	%r7804, %r7797, 4;
	// begin inline asm
	lop3.b32 %r7801, %r2291, %r7793, %r7804, 202;
	// end inline asm
	xor.b32  	%r7864, %r7801, -2004318072;
	st.shared.u32 	[%rd155], %r7861;
	st.shared.u32 	[%rd156], %r7862;
	st.shared.u32 	[%rd157], %r7863;
	st.shared.u32 	[%rd158], %r7864;
	add.s32 	%r7993, %r7993, 64;
	add.s64 	%rd158, %rd158, 8324;
	add.s64 	%rd157, %rd157, 8324;
	add.s64 	%rd156, %rd156, 8324;
	add.s64 	%rd155, %rd155, 8324;
	setp.eq.s32 	%p212, %r7993, 256;
	@%p212 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_81;
$L__BB0_82:                             // %guard_exit17384
                                        //   in Loop: Header=BB0_80 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7870, [%rd5];
	ld.shared.u32 	%r7871, [%rd6+128];
	ld.shared.u32 	%r7878, [%rd6+4];
	ld.shared.u32 	%r7879, [%rd6+132];
	ld.shared.u32 	%r7886, [%rd5+8324];
	ld.shared.u32 	%r7887, [%rd6+8452];
	ld.shared.u32 	%r7894, [%rd6+8328];
	ld.shared.u32 	%r7895, [%rd6+8456];
	ld.shared.u32 	%r7902, [%rd5+16648];
	ld.shared.u32 	%r7903, [%rd6+16776];
	ld.shared.u32 	%r7910, [%rd6+16652];
	ld.shared.u32 	%r7911, [%rd6+16780];
	ld.shared.u32 	%r7918, [%rd5+24972];
	ld.shared.u32 	%r7919, [%rd6+25100];
	ld.shared.u32 	%r7926, [%rd6+24976];
	ld.shared.u32 	%r7927, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7865, %r7870, %r7871, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7869, %r7870, %r7871, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7873, %r7878, %r7879, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7878, %r7879, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7886, %r7887, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7886, %r7887, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7894, %r7895, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7894, %r7895, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7902, %r7903, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7902, %r7903, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7910, %r7911, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7910, %r7911, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7913, %r7918, %r7919, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7917, %r7918, %r7919, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7921, %r7926, %r7927, %r537;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7925, %r7926, %r7927, %r541;
	// end inline asm
	selp.b32 	%r7929, %r7869, %r7865, %p199;
	shfl.sync.bfly.b32	%r148, %r7929, 8, 31, -1;
	selp.b32 	%r7930, %r7877, %r7873, %p199;
	shfl.sync.bfly.b32	%r149, %r7930, 8, 31, -1;
	selp.b32 	%r7931, %r7885, %r7881, %p199;
	shfl.sync.bfly.b32	%r7932, %r7931, 8, 31, -1;
	selp.b32 	%r7933, %r7893, %r7889, %p199;
	shfl.sync.bfly.b32	%r7934, %r7933, 8, 31, -1;
	selp.b32 	%r7935, %r7901, %r7897, %p199;
	shfl.sync.bfly.b32	%r7936, %r7935, 8, 31, -1;
	selp.b32 	%r7937, %r7909, %r7905, %p199;
	shfl.sync.bfly.b32	%r7938, %r7937, 8, 31, -1;
	selp.b32 	%r7939, %r7917, %r7913, %p199;
	shfl.sync.bfly.b32	%r7940, %r7939, 8, 31, -1;
	selp.b32 	%r7941, %r7925, %r7921, %p199;
	shfl.sync.bfly.b32	%r7942, %r7941, 8, 31, -1;
	setp.eq.s32 	%p214, %r7985, 0;
	shl.b32 	%r7966, %r7985, 13;
	@%p214 bra 	$L__BB0_83;
// %bb.120:                             // %pass16500
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r7943, %r149, %r7877, %p199;
	selp.b32 	%r7944, %r7873, %r149, %p199;
	selp.b32 	%r7945, %r148, %r7869, %p199;
	selp.b32 	%r7946, %r7865, %r148, %p199;
	or.b32  	%r7948, %r7966, %r51;
	or.b32  	%r7949, %r7948, %r60;
	or.b32  	%r7950, %r7949, %r52;
	cvt.s64.s32 	%rd105, %r7950;
	add.s64 	%rd106, %rd105, %rd7;
	shr.u64 	%rd107, %rd106, 36;
	add.s64 	%rd108, %rd106, %rd107;
	shr.s64 	%rd109, %rd108, 28;
	setp.lt.s64 	%p216, %rd106, 0;
	and.b64  	%rd110, %rd108, -268435456;
	setp.ne.s64 	%p217, %rd110, %rd106;
	and.pred  	%p218, %p216, %p217;
	selp.u64 	%rd111, 1, 0, %p218;
	sub.s64 	%rd112, %rd111, %rd109;
	shl.b64 	%rd113, %rd112, 28;
	add.s64 	%rd114, %rd113, %rd106;
	shl.b64 	%rd115, %rd114, 2;
	add.s64 	%rd116, %rd3, %rd115;
	st.global.v4.u32 	[%rd116], {%r7946, %r7944, %r7945, %r7943};
$L__BB0_83:                             // %L39672
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7951, %r7985, 64;
	setp.gt.u32 	%p219, %r7951, 191;
	@%p219 bra 	$L__BB0_118;
// %bb.84:                              // %L39672.L39890_crit_edge
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7957, %r7966, %r51;
	or.b32  	%r7958, %r7957, %r60;
	or.b32  	%r7986, %r7958, %r52;
	bra.uni 	$L__BB0_85;
$L__BB0_118:                            // %pass16607
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r150, %r7881, %r7932, %p199;
	selp.b32 	%r151, %r7932, %r7885, %p199;
	selp.b32 	%r152, %r7889, %r7934, %p199;
	selp.b32 	%r153, %r7934, %r7893, %p199;
	or.b32  	%r7953, %r7966, %r51;
	or.b32  	%r7954, %r7953, %r60;
	or.b32  	%r7986, %r7954, %r52;
	or.b32  	%r7955, %r7986, 524288;
	cvt.s64.s32 	%rd117, %r7955;
	add.s64 	%rd118, %rd117, %rd7;
	shr.u64 	%rd119, %rd118, 36;
	add.s64 	%rd120, %rd118, %rd119;
	shr.s64 	%rd121, %rd120, 28;
	setp.lt.s64 	%p220, %rd118, 0;
	and.b64  	%rd122, %rd120, -268435456;
	setp.ne.s64 	%p221, %rd122, %rd118;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd123, 1, 0, %p222;
	sub.s64 	%rd124, %rd123, %rd121;
	shl.b64 	%rd125, %rd124, 28;
	add.s64 	%rd126, %rd125, %rd118;
	shl.b64 	%rd127, %rd126, 2;
	add.s64 	%rd128, %rd3, %rd127;
	st.global.v4.u32 	[%rd128], {%r150, %r152, %r151, %r153};
$L__BB0_85:                             // %L39890
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r158, %r7913, %r7940, %p199;
	selp.b32 	%r159, %r7940, %r7917, %p199;
	selp.b32 	%r160, %r7921, %r7942, %p199;
	selp.b32 	%r161, %r7942, %r7925, %p199;
	or.b32  	%r7959, %r7985, 128;
	setp.gt.u32 	%p223, %r7959, 191;
	@%p223 bra 	$L__BB0_119;
	bra.uni 	$L__BB0_86;
$L__BB0_119:                            // %pass16714
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r154, %r7897, %r7936, %p199;
	selp.b32 	%r155, %r7936, %r7901, %p199;
	selp.b32 	%r156, %r7905, %r7938, %p199;
	selp.b32 	%r157, %r7938, %r7909, %p199;
	or.b32  	%r7960, %r7986, 1048576;
	cvt.s64.s32 	%rd129, %r7960;
	add.s64 	%rd130, %rd129, %rd7;
	shr.u64 	%rd131, %rd130, 36;
	add.s64 	%rd132, %rd130, %rd131;
	shr.s64 	%rd133, %rd132, 28;
	setp.lt.s64 	%p224, %rd130, 0;
	and.b64  	%rd134, %rd132, -268435456;
	setp.ne.s64 	%p225, %rd134, %rd130;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd135, 1, 0, %p226;
	sub.s64 	%rd136, %rd135, %rd133;
	shl.b64 	%rd137, %rd136, 28;
	add.s64 	%rd138, %rd137, %rd130;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd140, %rd3, %rd139;
	st.global.v4.u32 	[%rd140], {%r154, %r156, %r155, %r157};
	bra.uni 	$L__BB0_86;
$L__BB0_87:                             // %L40337
	st.global.u32 	[%rd4], %r7965;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r7964, 2;
	st.global.u32 	[%rd4], %r7964;
	mov.u64 	%rd153, exception3408;
	cvta.global.u64 	%rd154, %rd153;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd154;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r162;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
