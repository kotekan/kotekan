// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3410[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<237>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8004>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<154>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r164, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r171, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r171, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u32 	%r165, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r172, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r173, %r172, %r2;
	or.b32  	%r174, %r173, %r4;
	mul.wide.u32 	%rd43, %r174, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r175, 1;
	st.global.u32 	[%rd4], %r175;
	setp.gt.u32 	%p2, %r165, 32767;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L119
	ld.param.u32 	%r166, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r166, %r165;
	setp.gt.s32 	%p4, %r166, 65535;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L126
	ld.param.u32 	%r167, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r176, %r166, %r165;
	and.b32  	%r177, %r176, 255;
	setp.ne.s32 	%p6, %r177, 0;
	setp.gt.u32 	%p7, %r167, 511;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L137
	ld.param.u32 	%r168, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r168, %r167;
	setp.gt.s32 	%p10, %r168, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L144
	not.b32 	%r178, %r167;
	add.s32 	%r179, %r178, %r168;
	and.b32  	%r180, %r179, 3;
	setp.eq.s32 	%p12, %r180, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L260
	ld.param.u32 	%r169, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p13, %r169, 0;
	@%p13 bra 	$L__BB0_10;
// %bb.9:                               // %L262
	ld.param.u32 	%r170, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p14, %r169, %r170;
	setp.lt.s32 	%p15, %r170, 65;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             // %pass180
	bfe.u32 	%r87, %r2, 2, 1;
	shr.u32 	%r88, %r2, 4;
	shl.b32 	%r187, %r88, 1;
	shl.b32 	%r188, %r87, 2;
	shl.b32 	%r189, %r2, 3;
	and.b32  	%r190, %r189, 24;
	or.b32  	%r191, %r188, %r190;
	or.b32  	%r192, %r187, %r191;
	bfe.u32 	%r193, %r2, 3, 1;
	or.b32  	%r90, %r193, %r192;
	or.b32  	%r91, %r90, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r90;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p22, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p22 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_13;
$L__BB0_12:                             // %L604
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_13:                             // %L607
	cvt.rn.f32.s32 	%f181, %r91;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p28, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p28 bra 	$L__BB0_15;
// %bb.14:                              // %L624
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_15:                             // %L627
	or.b32  	%r211, %r90, 64;
	or.b32  	%r6, %r90, 96;
	cvt.rn.f32.s32 	%f216, %r211;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p34, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L706
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_17:                             // %L709
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p40, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p40 bra 	$L__BB0_19;
// %bb.18:                              // %L726
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_19:                             // %L729
	or.b32  	%r229, %r90, 128;
	or.b32  	%r8, %r90, 160;
	cvt.rn.f32.s32 	%f285, %r229;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p46, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p46 bra 	$L__BB0_21;
// %bb.20:                              // %L808
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_21:                             // %L811
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p52, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p52 bra 	$L__BB0_23;
// %bb.22:                              // %L828
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_23:                             // %L831
	or.b32  	%r247, %r90, 192;
	or.b32  	%r10, %r90, 224;
	cvt.rn.f32.s32 	%f354, %r247;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p58, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p58 bra 	$L__BB0_25;
// %bb.24:                              // %L910
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_25:                             // %L913
	shr.u32 	%r86, %r2, 1;
	shr.u32 	%r89, %r2, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p64, %f32, 0f00000000;
	@%p64 bra 	$L__BB0_27;
// %bb.26:                              // %L930
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_27:                             // %L933
	and.b32  	%r291, %r2, 3;
	and.b32  	%r292, %r89, 2;
	and.b32  	%r293, %r86, 4;
	or.b32  	%r294, %r87, %r292;
	or.b32  	%r14, %r294, %r293;
	mul.lo.s32 	%r295, %r291, %r14;
	shl.b32 	%r296, %r295, 1;
	neg.s32 	%r297, %r296;
	cvt.rn.f32.s32 	%f35, %r297;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p79, %f830, 0f40000000;
	setp.gtu.f32 	%p235, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p79 bra 	$L__BB0_97;
// %bb.28:
	@%p235 bra 	$L__BB0_93;
	bra.uni 	$L__BB0_29;
$L__BB0_93:
	mov.b32 	%r93, %f830;
	and.b32  	%r298, %r93, 8388607;
	or.b32  	%r7984, %r298, 1065353216;
	mov.b32 	%f821, %r7984;
	add.s32 	%r299, %r93, -1073741824;
	and.b32  	%r7985, %r299, -8388608;
	setp.eq.s32 	%p86, %r7985, 0;
	@%p86 bra 	$L__BB0_96;
// %bb.94:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_95:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r7985, 192937984;
	add.s32 	%r301, %r7984, %r300;
	mov.b32 	%f501, %r301;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7985, %r7985, %r300;
	mov.b32 	%r7984, %f821;
	setp.ne.s32 	%p87, %r7985, 0;
	setp.ne.s32 	%p88, %r7984, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_95;
$L__BB0_96:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p90, %r93, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_97;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r92, %f89;
	setp.lt.u32 	%p81, %r92, 1073741824;
	@%p81 bra 	$L__BB0_92;
// %bb.30:
	setp.lt.u32 	%p82, %r92, -2147483647;
	@%p82 bra 	$L__BB0_90;
// %bb.31:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p85, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p85;
	bra.uni 	$L__BB0_92;
$L__BB0_90:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p83, %f89, 0f40800000;
	@%p83 bra 	$L__BB0_92;
// %bb.91:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p84, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p84;
$L__BB0_92:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_97:                             // %__internal_fmodf_kernel.exit.i928
	shl.b32 	%r80, %r2, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p91, %f510, 0f7F800000;
	mov.b32 	%r302, %f36;
	and.b32  	%r100, %r302, -2147483648;
	@%p91 bra 	$L__BB0_99;
// %bb.98:
	mov.b32 	%r303, %f822;
	or.b32  	%r304, %r100, %r303;
	mov.b32 	%f822, %r304;
$L__BB0_99:                             // %__nv_fmodf.exit929
	and.b32  	%r313, %r80, 6;
	mov.u32 	%r314, -8;
	sub.s32 	%r315, %r314, %r313;
	mul.lo.s32 	%r316, %r14, %r315;
	cvt.rn.f32.s32 	%f105, %r316;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p99, %f818, 0f40000000;
	setp.gtu.f32 	%p236, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p99 bra 	$L__BB0_43;
// %bb.32:
	@%p236 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_33;
$L__BB0_39:
	mov.b32 	%r16, %f818;
	and.b32  	%r317, %r16, 8388607;
	or.b32  	%r7964, %r317, 1065353216;
	mov.b32 	%f809, %r7964;
	add.s32 	%r318, %r16, -1073741824;
	and.b32  	%r7965, %r318, -8388608;
	setp.eq.s32 	%p106, %r7965, 0;
	@%p106 bra 	$L__BB0_42;
// %bb.40:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_41:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r319, %r7965, 192937984;
	add.s32 	%r320, %r7964, %r319;
	mov.b32 	%f552, %r320;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7965, %r7965, %r319;
	mov.b32 	%r7964, %f809;
	setp.ne.s32 	%p107, %r7965, 0;
	setp.ne.s32 	%p108, %r7964, 0;
	and.pred  	%p109, %p107, %p108;
	@%p109 bra 	$L__BB0_41;
$L__BB0_42:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p110, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p110;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_43;
$L__BB0_33:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p101, %r15, 1073741824;
	@%p101 bra 	$L__BB0_38;
// %bb.34:
	setp.lt.u32 	%p102, %r15, -2147483647;
	@%p102 bra 	$L__BB0_36;
// %bb.35:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p105, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p105;
	bra.uni 	$L__BB0_38;
$L__BB0_36:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p103, %f39, 0f40800000;
	@%p103 bra 	$L__BB0_38;
// %bb.37:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p104, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p104;
$L__BB0_38:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_43:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p111, %f561, 0f7F800000;
	mov.b32 	%r321, %f106;
	and.b32  	%r23, %r321, -2147483648;
	@%p111 bra 	$L__BB0_45;
// %bb.44:
	mov.b32 	%r322, %f810;
	or.b32  	%r323, %r23, %r322;
	mov.b32 	%f810, %r323;
$L__BB0_45:                             // %__nv_fmodf.exit
	div.approx.f32 	%f53, %f35, %f177;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p119, %f826, 0f40000000;
	@%p119 bra 	$L__BB0_107;
// %bb.46:
	setp.gtu.f32 	%p120, %f826, 0f4B800000;
	@%p120 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_47;
$L__BB0_103:
	mov.b32 	%r102, %f826;
	and.b32  	%r344, %r102, 8388607;
	or.b32  	%r7986, %r344, 1065353216;
	mov.b32 	%f825, %r7986;
	add.s32 	%r345, %r102, -1073741824;
	and.b32  	%r7987, %r345, -8388608;
	setp.eq.s32 	%p126, %r7987, 0;
	@%p126 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r7987, 192937984;
	add.s32 	%r347, %r7986, %r346;
	mov.b32 	%f605, %r347;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7987, %r7987, %r346;
	mov.b32 	%r7986, %f825;
	setp.ne.s32 	%p127, %r7987, 0;
	setp.ne.s32 	%p128, %r7986, 0;
	and.pred  	%p129, %p127, %p128;
	@%p129 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p130, %r102, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p130;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_107;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r101, %f109;
	setp.lt.u32 	%p121, %r101, 1073741824;
	@%p121 bra 	$L__BB0_102;
// %bb.48:
	setp.lt.u32 	%p122, %r101, -2147483647;
	@%p122 bra 	$L__BB0_100;
// %bb.49:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p125, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p125;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p123, %f109, 0f40800000;
	@%p123 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p124, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p124;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p131, %f614, 0f7F800000;
	@%p131 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r348, %f53;
	and.b32  	%r349, %r348, -2147483648;
	mov.b32 	%r350, %f826;
	or.b32  	%r351, %r349, %r350;
	mov.b32 	%f826, %r351;
$L__BB0_109:                            // %__nv_fmodf.exit960
	div.approx.f32 	%f125, %f105, %f177;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p139, %f814, 0f40000000;
	@%p139 bra 	$L__BB0_61;
// %bb.50:
	setp.gtu.f32 	%p140, %f814, 0f4B800000;
	@%p140 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_51;
$L__BB0_57:
	mov.b32 	%r29, %f814;
	and.b32  	%r360, %r29, 8388607;
	or.b32  	%r7966, %r360, 1065353216;
	mov.b32 	%f813, %r7966;
	add.s32 	%r361, %r29, -1073741824;
	and.b32  	%r7967, %r361, -8388608;
	setp.eq.s32 	%p146, %r7967, 0;
	@%p146 bra 	$L__BB0_60;
// %bb.58:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_59:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r7967, 192937984;
	add.s32 	%r363, %r7966, %r362;
	mov.b32 	%f656, %r363;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7967, %r7967, %r362;
	mov.b32 	%r7966, %f813;
	setp.ne.s32 	%p147, %r7967, 0;
	setp.ne.s32 	%p148, %r7966, 0;
	and.pred  	%p149, %p147, %p148;
	@%p149 bra 	$L__BB0_59;
$L__BB0_60:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p150, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p150;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_61;
$L__BB0_51:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p141, %r28, 1073741824;
	@%p141 bra 	$L__BB0_56;
// %bb.52:
	setp.lt.u32 	%p142, %r28, -2147483647;
	@%p142 bra 	$L__BB0_54;
// %bb.53:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p145, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p145;
	bra.uni 	$L__BB0_56;
$L__BB0_54:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p143, %f56, 0f40800000;
	@%p143 bra 	$L__BB0_56;
// %bb.55:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p144, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p144;
$L__BB0_56:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_61:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p151, %f665, 0f7F800000;
	@%p151 bra 	$L__BB0_63;
// %bb.62:
	mov.b32 	%r364, %f125;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f814;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f814, %r367;
$L__BB0_63:                             // %__nv_fmodf.exit867
	@%p79 bra 	$L__BB0_117;
// %bb.64:
	@%p235 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_65;
$L__BB0_113:
	mov.b32 	%r110, %f830;
	and.b32  	%r382, %r110, 8388607;
	or.b32  	%r7988, %r382, 1065353216;
	mov.b32 	%f829, %r7988;
	add.s32 	%r383, %r110, -1073741824;
	and.b32  	%r7989, %r383, -8388608;
	setp.eq.s32 	%p166, %r7989, 0;
	@%p166 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r7989, 192937984;
	add.s32 	%r385, %r7988, %r384;
	mov.b32 	%f708, %r385;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7989, %r7989, %r384;
	mov.b32 	%r7988, %f829;
	setp.ne.s32 	%p167, %r7989, 0;
	setp.ne.s32 	%p168, %r7988, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p170, %r110, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_117;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r109, %f128;
	setp.lt.u32 	%p161, %r109, 1073741824;
	@%p161 bra 	$L__BB0_112;
// %bb.66:
	setp.lt.u32 	%p162, %r109, -2147483647;
	@%p162 bra 	$L__BB0_110;
// %bb.67:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p165, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p165;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p163, %f128, 0f40800000;
	@%p163 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p164, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p164;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p171, %f717, 0f7F800000;
	@%p171 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r386, %f830;
	or.b32  	%r387, %r100, %r386;
	mov.b32 	%f830, %r387;
$L__BB0_119:                            // %__nv_fmodf.exit991
	@%p99 bra 	$L__BB0_79;
// %bb.68:
	@%p236 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_69;
$L__BB0_75:
	mov.b32 	%r39, %f818;
	and.b32  	%r396, %r39, 8388607;
	or.b32  	%r7968, %r396, 1065353216;
	mov.b32 	%f817, %r7968;
	add.s32 	%r397, %r39, -1073741824;
	and.b32  	%r7969, %r397, -8388608;
	setp.eq.s32 	%p186, %r7969, 0;
	@%p186 bra 	$L__BB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_77:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r7969, 192937984;
	add.s32 	%r399, %r7968, %r398;
	mov.b32 	%f758, %r399;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7969, %r7969, %r398;
	mov.b32 	%r7968, %f817;
	setp.ne.s32 	%p187, %r7969, 0;
	setp.ne.s32 	%p188, %r7968, 0;
	and.pred  	%p189, %p187, %p188;
	@%p189 bra 	$L__BB0_77;
$L__BB0_78:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p190, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p190;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_79;
$L__BB0_69:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p181, %r38, 1073741824;
	@%p181 bra 	$L__BB0_74;
// %bb.70:
	setp.lt.u32 	%p182, %r38, -2147483647;
	@%p182 bra 	$L__BB0_72;
// %bb.71:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p185, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p185;
	bra.uni 	$L__BB0_74;
$L__BB0_72:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p183, %f71, 0f40800000;
	@%p183 bra 	$L__BB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p184, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p184;
$L__BB0_74:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_79:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p191, %f767, 0f7F800000;
	@%p191 bra 	$L__BB0_81;
// %bb.80:
	mov.b32 	%r400, %f818;
	or.b32  	%r401, %r23, %r400;
	mov.b32 	%f818, %r401;
$L__BB0_81:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p199, %r166, %r165;
	mov.u32 	%r7961, 0;
	@%p199 bra 	$L__BB0_89;
// %bb.82:                              // %L1450.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r271, %r90, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r281, %r271, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r272, %r271, 127;
	and.b32  	%r282, %r281, 127;
	setp.gt.f32 	%p17, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p23, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p29, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p35, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p41, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p47, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p53, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p59, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r272;
	cvt.rn.f32.s32 	%f457, %r282;
	selp.f32 	%f153, %f152, %f150, %p17;
	selp.f32 	%f187, %f186, %f184, %p23;
	selp.f32 	%f222, %f221, %f219, %p29;
	selp.f32 	%f256, %f255, %f253, %p35;
	selp.f32 	%f291, %f290, %f288, %p41;
	selp.f32 	%f325, %f324, %f322, %p47;
	selp.f32 	%f360, %f359, %f357, %p53;
	selp.f32 	%f394, %f393, %f391, %p59;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r194, %f154;
	mov.b32 	%r201, %f188;
	mov.b32 	%r212, %f223;
	mov.b32 	%r219, %f257;
	mov.b32 	%r230, %f292;
	mov.b32 	%r237, %f326;
	mov.b32 	%r248, %f361;
	mov.b32 	%r255, %f395;
	mov.b32 	%r273, %f425;
	mov.b32 	%r283, %f459;
	mov.b32 	%r305, %f511;
	mov.b32 	%r336, %f562;
	and.b32  	%r195, %r194, -2147483648;
	and.b32  	%r202, %r201, -2147483648;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r220, %r219, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r238, %r237, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r256, %r255, -2147483648;
	and.b32  	%r274, %r273, -2147483648;
	and.b32  	%r284, %r283, -2147483648;
	and.b32  	%r306, %r305, -2147483648;
	and.b32  	%r337, %r336, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r196, %r195, 1056964608;
	or.b32  	%r203, %r202, 1056964608;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r221, %r220, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r239, %r238, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r257, %r256, 1056964608;
	or.b32  	%r275, %r274, 1056964608;
	or.b32  	%r285, %r284, 1056964608;
	or.b32  	%r307, %r306, 1056964608;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%r352, %f615;
	mov.b32 	%r374, %f666;
	mov.b32 	%f155, %r196;
	mov.b32 	%f189, %r203;
	mov.b32 	%f224, %r214;
	mov.b32 	%f258, %r221;
	mov.b32 	%f293, %r232;
	mov.b32 	%f327, %r239;
	mov.b32 	%f362, %r250;
	mov.b32 	%f396, %r257;
	mov.b32 	%f426, %r275;
	mov.b32 	%f460, %r285;
	mov.b32 	%f512, %r307;
	mov.b32 	%f563, %r338;
	and.b32  	%r353, %r352, -2147483648;
	and.b32  	%r375, %r374, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r354, %r353, 1056964608;
	or.b32  	%r376, %r375, 1056964608;
	mov.b32 	%r388, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p18, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p24, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p30, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p36, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p42, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p48, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p54, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p60, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p65, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p72, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p92, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p112, %f566, 0f4B000000;
	mov.b32 	%f616, %r354;
	mov.b32 	%f667, %r376;
	and.b32  	%r389, %r388, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p18;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p19, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p24;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p25, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p30;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p31, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p36;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p37, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p42;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p43, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p48;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p49, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p54;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p55, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p60;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p61, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p65;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p66, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p72;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p73, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p92;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p93, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p112;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p113, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r390, %r389, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p19;
	selp.f32 	%f195, %f194, %f193, %p25;
	selp.f32 	%f230, %f229, %f228, %p31;
	selp.f32 	%f264, %f263, %f262, %p37;
	selp.f32 	%f299, %f298, %f297, %p43;
	selp.f32 	%f333, %f332, %f331, %p49;
	selp.f32 	%f368, %f367, %f366, %p55;
	selp.f32 	%f402, %f401, %f400, %p61;
	selp.f32 	%f432, %f431, %f430, %p66;
	selp.f32 	%f466, %f465, %f464, %p73;
	selp.f32 	%f518, %f517, %f516, %p93;
	selp.f32 	%f569, %f568, %f567, %p113;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p132, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p153, %f670, 0f4B000000;
	mov.b32 	%f719, %r390;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p132;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p133, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p153;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p154, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p133;
	selp.f32 	%f673, %f672, %f671, %p154;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p173, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r197, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r204, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r215, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r222, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r240, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r258, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p173;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p174, %f722, 0f3F000000;
	shl.b32 	%r78, %r2, 2;
	add.s32 	%r198, %r197, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r205, %r204, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r223, %r222, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r241, %r240, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r259, %r258, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r276, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r286, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r308, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r339, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p174;
	and.b32  	%r79, %r78, 4;
	and.b32  	%r84, %r2, 18;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r199, %r198, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r206, %r205, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r224, %r223, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r260, %r259, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r277, %r276, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r287, %r286, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r309, %r308, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	and.b32  	%r81, %r80, 8;
	or.b32  	%r182, %r84, %r79;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p20, %r199, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p26, %r206, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p32, %r217, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p38, %r224, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p44, %r235, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p50, %r242, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p56, %r253, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p62, %r260, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p67, %r277, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p74, %r287, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p94, %r309, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p114, %r340, 1;
	cvt.rzi.s32.f32 	%r355, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r377, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	and.b32  	%r82, %r78, 32;
	shl.b32 	%r181, %r1, 4;
	or.b32  	%r183, %r182, %r81;
	selp.f32 	%f173, %f171, %f172, %p20;
	and.b32  	%r200, %r198, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p26;
	and.b32  	%r207, %r205, 2;
	selp.f32 	%f242, %f240, %f241, %p32;
	and.b32  	%r218, %r216, 2;
	selp.f32 	%f276, %f274, %f275, %p38;
	and.b32  	%r225, %r223, 2;
	selp.f32 	%f311, %f309, %f310, %p44;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f345, %f343, %f344, %p50;
	and.b32  	%r243, %r241, 2;
	selp.f32 	%f380, %f378, %f379, %p56;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f414, %f412, %f413, %p62;
	and.b32  	%r261, %r259, 2;
	selp.f32 	%f444, %f442, %f443, %p67;
	and.b32  	%r278, %r276, 2;
	selp.f32 	%f478, %f476, %f477, %p74;
	and.b32  	%r288, %r286, 2;
	selp.f32 	%f530, %f528, %f529, %p94;
	and.b32  	%r310, %r308, 2;
	selp.f32 	%f581, %f579, %f580, %p114;
	and.b32  	%r341, %r339, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r356, %r355, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r378, %r377, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r83, %r181, 4032;
	or.b32  	%r184, %r183, %r82;
	setp.eq.s32 	%p21, %r200, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p27, %r207, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p33, %r218, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p39, %r225, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p45, %r236, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p51, %r243, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p57, %r254, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p63, %r261, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p68, %r278, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r279, %r276, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p75, %r288, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r289, %r286, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p95, %r310, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r311, %r308, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p115, %r341, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p134, %r356, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p155, %r378, 1;
	cvt.rzi.s32.f32 	%r391, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	or.b32  	%r185, %r184, %r83;
	selp.f32 	%f176, %f173, %f175, %p21;
	selp.f32 	%f210, %f207, %f209, %p27;
	selp.f32 	%f245, %f242, %f244, %p33;
	selp.f32 	%f279, %f276, %f278, %p39;
	selp.f32 	%f314, %f311, %f313, %p45;
	selp.f32 	%f348, %f345, %f347, %p51;
	selp.f32 	%f383, %f380, %f382, %p57;
	selp.f32 	%f417, %f414, %f416, %p63;
	selp.f32 	%f445, %f443, %f442, %p67;
	selp.f32 	%f447, %f444, %f446, %p68;
	and.b32  	%r280, %r279, 2;
	setp.eq.f32 	%p70, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p74;
	selp.f32 	%f481, %f478, %f480, %p75;
	and.b32  	%r290, %r289, 2;
	setp.eq.f32 	%p77, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p94;
	selp.f32 	%f533, %f530, %f532, %p95;
	and.b32  	%r312, %r311, 2;
	setp.eq.f32 	%p97, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p114;
	selp.f32 	%f584, %f581, %f583, %p115;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p117, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p134;
	and.b32  	%r357, %r355, 2;
	selp.f32 	%f685, %f683, %f684, %p155;
	and.b32  	%r379, %r377, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r392, %r391, 1;
	shr.u32 	%r186, %r185, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p69, %r280, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p70;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p76, %r290, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p77;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p96, %r312, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p97;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p116, %r343, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p117;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p135, %r357, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r358, %r355, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p156, %r379, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r380, %r377, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p175, %r392, 1;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd44, %r186, 4;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p69;
	setp.gt.f32 	%p71, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p76;
	setp.gt.f32 	%p78, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p96;
	setp.gt.f32 	%p98, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p116;
	setp.gt.f32 	%p118, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p134;
	selp.f32 	%f637, %f634, %f636, %p135;
	and.b32  	%r359, %r358, 2;
	setp.eq.f32 	%p137, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p155;
	selp.f32 	%f688, %f685, %f687, %p156;
	and.b32  	%r381, %r380, 2;
	setp.eq.f32 	%p158, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p175;
	and.b32  	%r393, %r391, 2;
	add.s64 	%rd45, %rd1, %rd44;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p71;
	selp.f32 	%f489, %f488, %f483, %p78;
	selp.f32 	%f104, %f540, %f536, %p98;
	selp.f32 	%f593, %f592, %f587, %p118;
	setp.eq.s32 	%p136, %r359, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p137;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p157, %r381, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p158;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p176, %r393, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r394, %r391, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.global.u32 	%r85, [%rd45];
	mov.b32 	%r210, %f215;
	mov.b32 	%r209, %f3;
	mov.b32 	%r228, %f284;
	mov.b32 	%r227, %f12;
	mov.b32 	%r246, %f353;
	mov.b32 	%r245, %f21;
	mov.b32 	%r264, %f421;
	mov.b32 	%r263, %f30;
	mov.b32 	%r266, %f456;
	mov.b32 	%r267, %f489;
	mov.b32 	%r269, %f453;
	mov.b32 	%r270, %f486;
	mov.b32 	%r326, %f593;
	mov.b32 	%r325, %f104;
	mov.b32 	%r332, %f590;
	mov.b32 	%r331, %f103;
	selp.f32 	%f640, %f635, %f639, %p136;
	setp.gt.f32 	%p138, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p157;
	setp.gt.f32 	%p159, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p175;
	selp.f32 	%f740, %f737, %f739, %p176;
	and.b32  	%r395, %r394, 2;
	setp.eq.f32 	%p178, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r208, %r210, %r209;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r262, %r264, %r263;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r265, %r267, %r266;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r268, %r270, %r269;
	// end inline asm
	xor.b32  	%r329, %r332, -2147483648;
	xor.b32  	%r328, %r331, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p138;
	selp.f32 	%f697, %f696, %f691, %p159;
	setp.eq.s32 	%p177, %r395, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p178;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r324, %r326, %r325;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r327, %r329, %r328;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r326, %r325;
	// end inline asm
	mov.b32 	%r370, %f697;
	mov.b32 	%r369, %f124;
	mov.b32 	%r373, %f694;
	mov.b32 	%r372, %f123;
	selp.f32 	%f743, %f738, %f742, %p177;
	setp.gt.f32 	%p179, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r368, %r370, %r369;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r371, %r373, %r372;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p179;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r414, %f768;
	and.b32  	%r415, %r414, -2147483648;
	or.b32  	%r416, %r415, 1056964608;
	mov.b32 	%f769, %r416;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p192, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p192;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p193, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p193;
	cvt.rzi.s32.f32 	%r417, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r418, %r417, 1;
	setp.eq.b32 	%p194, %r418, 1;
	selp.f32 	%f787, %f785, %f786, %p194;
	selp.f32 	%f788, %f786, %f785, %p194;
	and.b32  	%r419, %r417, 2;
	setp.eq.s32 	%p195, %r419, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p195;
	add.s32 	%r420, %r417, 1;
	and.b32  	%r421, %r420, 2;
	setp.eq.s32 	%p196, %r421, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p196;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p197, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p197;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p198, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p198;
	mov.b32 	%r404, %f799;
	mov.b32 	%r403, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	mov.b32 	%r410, %f796;
	xor.b32  	%r407, %r410, -2147483648;
	mov.b32 	%r409, %f142;
	xor.b32  	%r406, %r409, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r404, %r403;
	// end inline asm
	shl.b32 	%r423, %r165, 13;
	shl.b32 	%r424, %r169, 7;
	shl.b32 	%r425, %r1, 5;
	and.b32  	%r426, %r78, 28;
	and.b32  	%r427, %r425, 96;
	or.b32  	%r428, %r427, %r426;
	or.b32  	%r429, %r428, %r423;
	add.s32 	%r50, %r429, %r424;
	bfe.s32 	%r430, %r2, 3, 1;
	and.b32  	%r51, %r2, 8;
	shl.b32 	%r431, %r2, 4;
	or.b32  	%r432, %r51, %r431;
	shr.u32 	%r433, %r432, 2;
	and.b32  	%r434, %r433, 30;
	and.b32  	%r52, %r2, 4;
	and.b32  	%r435, %r4, 32;
	shr.u32 	%r436, %r3, 1;
	or.b32  	%r437, %r435, %r436;
	or.b32  	%r438, %r437, 8;
	or.b32  	%r439, %r437, 16;
	or.b32  	%r440, %r437, 24;
	or.b32  	%r441, %r84, %r82;
	or.b32  	%r442, %r441, %r81;
	or.b32  	%r443, %r442, %r79;
	shr.u32 	%r444, %r443, 1;
	mul.lo.s32 	%r445, %r444, 65;
	add.s32 	%r446, %r437, %r445;
	add.s32 	%r447, %r438, %r445;
	add.s32 	%r448, %r439, %r445;
	add.s32 	%r449, %r440, %r445;
	shl.b32 	%r450, %r3, 1;
	or.b32  	%r451, %r88, %r450;
	mul.lo.s32 	%r452, %r451, 65;
	add.s32 	%r453, %r434, %r452;
	mul.wide.u32 	%rd46, %r453, 4;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd5, %rd47, %rd46;
	cvt.u64.u32 	%rd48, %r434;
	cvt.u64.u32 	%rd49, %r452;
	add.s64 	%rd50, %rd49, %rd48;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd6, %rd47, %rd51;
	shl.b32 	%r454, %r167, 19;
	add.s32 	%r455, %r454, -1572864;
	or.b32  	%r456, %r83, %r89;
	shl.b32 	%r457, %r3, 9;
	shl.b32 	%r458, %r456, 7;
	or.b32  	%r459, %r458, %r457;
	or.b32  	%r53, %r428, %r459;
	cvt.s64.s32 	%rd7, %r455;
	bfe.s32 	%r460, %r3, 2, 1;
	and.b32  	%r461, %r3, 4;
	setp.eq.s32 	%p200, %r461, 0;
	and.b32  	%r462, %r460, 260;
	mul.lo.s32 	%r463, %r88, 65;
	and.b32  	%r464, %r3, 1;
	neg.s32 	%r465, %r464;
	setp.eq.b32 	%p201, %r464, 1;
	and.b32  	%r466, %r465, 1040;
	bfe.s32 	%r467, %r3, 1, 1;
	and.b32  	%r468, %r3, 2;
	setp.eq.s32 	%p202, %r468, 0;
	and.b32  	%r469, %r467, 520;
	shr.u32 	%r470, %r3, 3;
	mul.lo.s32 	%r471, %r470, 130;
	add.s32 	%r472, %r466, %r434;
	add.s32 	%r473, %r472, %r463;
	add.s32 	%r474, %r473, %r462;
	add.s32 	%r475, %r474, %r469;
	add.s32 	%r476, %r475, %r471;
	mul.wide.u32 	%rd52, %r476, 4;
	add.s64 	%rd8, %rd47, %rd52;
	cvt.u64.u32 	%rd53, %r471;
	selp.b64 	%rd54, 0, 520, %p202;
	selp.b64 	%rd55, 0, 260, %p200;
	cvt.u64.u32 	%rd56, %r463;
	selp.b64 	%rd57, 1040, 0, %p201;
	add.s64 	%rd58, %rd48, %rd57;
	add.s64 	%rd59, %rd58, %rd56;
	add.s64 	%rd60, %rd59, %rd55;
	add.s64 	%rd61, %rd60, %rd54;
	add.s64 	%rd62, %rd61, %rd53;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd9, %rd47, %rd63;
	cvt.u64.u32 	%rd64, %r474;
	add.s64 	%rd65, %rd64, %rd54;
	add.s64 	%rd66, %rd65, %rd53;
	shl.b64 	%rd67, %rd66, 2;
	add.s64 	%rd10, %rd47, %rd67;
	add.s32 	%r477, %r476, 2113;
	mul.wide.u32 	%rd68, %r477, 4;
	add.s64 	%rd11, %rd47, %rd68;
	add.s32 	%r478, %r476, 2082;
	mul.wide.u32 	%rd69, %r478, 4;
	add.s64 	%rd12, %rd47, %rd69;
	add.s32 	%r479, %r476, 2114;
	mul.wide.u32 	%rd70, %r479, 4;
	add.s64 	%rd13, %rd47, %rd70;
	add.s32 	%r480, %r476, 4194;
	mul.wide.u32 	%rd71, %r480, 4;
	add.s64 	%rd14, %rd47, %rd71;
	add.s32 	%r481, %r476, 4163;
	mul.wide.u32 	%rd72, %r481, 4;
	add.s64 	%rd15, %rd47, %rd72;
	add.s32 	%r482, %r476, 4195;
	mul.wide.u32 	%rd73, %r482, 4;
	add.s64 	%rd16, %rd47, %rd73;
	add.s32 	%r483, %r476, 6275;
	mul.wide.u32 	%rd74, %r483, 4;
	add.s64 	%rd17, %rd47, %rd74;
	add.s32 	%r484, %r476, 6244;
	mul.wide.u32 	%rd75, %r484, 4;
	add.s64 	%rd18, %rd47, %rd75;
	add.s32 	%r485, %r476, 6276;
	mul.wide.u32 	%rd76, %r485, 4;
	add.s64 	%rd19, %rd47, %rd76;
	bfe.s32 	%r486, %r2, 1, 1;
	and.b32  	%r487, %r486, 65;
	and.b32  	%r488, %r430, 1040;
	mul.lo.s32 	%r54, %r88, 520;
	and.b32  	%r489, %r2, 1;
	neg.s32 	%r490, %r489;
	and.b32  	%r55, %r490, 130;
	or.b32  	%r491, %r437, %r488;
	add.s32 	%r56, %r491, %r487;
	or.b32  	%r492, %r438, %r488;
	add.s32 	%r57, %r492, %r487;
	add.s32 	%r493, %r439, %r488;
	add.s32 	%r58, %r493, %r487;
	add.s32 	%r494, %r440, %r488;
	add.s32 	%r59, %r494, %r487;
	mul.wide.u32 	%rd77, %r449, 4;
	add.s64 	%rd20, %rd47, %rd77;
	mul.wide.u32 	%rd78, %r448, 4;
	add.s64 	%rd21, %rd47, %rd78;
	mul.wide.u32 	%rd79, %r447, 4;
	add.s64 	%rd22, %rd47, %rd79;
	mul.wide.u32 	%rd80, %r446, 4;
	add.s64 	%rd23, %rd47, %rd80;
	setp.eq.s32 	%p203, %r51, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8003, %r7961;
	mov.u32 	%r8002, %r7961;
	mov.u32 	%r8001, %r7961;
	mov.u32 	%r8000, %r7961;
	mov.u32 	%r7999, %r7961;
	mov.u32 	%r7998, %r7961;
	mov.u32 	%r7997, %r7961;
	mov.u32 	%r7996, %r7961;
	mov.u32 	%r7995, %r7961;
	mov.u32 	%r7994, %r7961;
	mov.u32 	%r7993, %r7961;
	mov.u32 	%r7992, %r7961;
	mov.u32 	%r7982, %r7961;
	bra.uni 	$L__BB0_83;
$L__BB0_88:                             // %L40296
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r7956, %r7963, 1572864;
	cvt.s64.s32 	%rd134, %r7956;
	add.s64 	%rd135, %rd134, %rd7;
	shr.u64 	%rd136, %rd135, 36;
	add.s64 	%rd137, %rd135, %rd136;
	shr.s64 	%rd138, %rd137, 28;
	setp.lt.s64 	%p231, %rd135, 0;
	and.b64  	%rd139, %rd137, -268435456;
	setp.ne.s64 	%p232, %rd139, %rd135;
	and.pred  	%p233, %p231, %p232;
	selp.u64 	%rd140, 1, 0, %p233;
	sub.s64 	%rd141, %rd140, %rd138;
	shl.b64 	%rd142, %rd141, 28;
	add.s64 	%rd143, %rd142, %rd135;
	shl.b64 	%rd144, %rd143, 2;
	add.s64 	%rd145, %rd3, %rd144;
	st.global.v4.u32 	[%rd145], {%r160, %r162, %r161, %r163};
	add.s32 	%r7982, %r7982, 256;
	add.s32 	%r7957, %r7982, %r165;
	setp.lt.s32 	%p234, %r7957, %r166;
	@%p234 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_89;
$L__BB0_83:                             // %L1450
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_84 Depth 2
	or.b32  	%r560, %r7982, %r2;
	and.b32  	%r561, %r560, 32528;
	or.b32  	%r562, %r561, %r82;
	or.b32  	%r563, %r562, %r3;
	shl.b32 	%r564, %r563, 13;
	add.s32 	%r565, %r50, %r564;
	shr.s32 	%r566, %r565, 31;
	shr.u32 	%r567, %r566, 4;
	add.s32 	%r568, %r565, %r567;
	shr.s32 	%r569, %r568, 28;
	setp.lt.s32 	%p204, %r565, 0;
	and.b32  	%r570, %r568, -268435456;
	setp.ne.s32 	%p205, %r570, %r565;
	and.pred  	%p206, %p204, %p205;
	selp.u32 	%r571, 1, 0, %p206;
	sub.s32 	%r572, %r571, %r569;
	shl.b32 	%r573, %r572, 28;
	add.s32 	%r574, %r573, %r565;
	mul.wide.s32 	%rd81, %r574, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r575, %r576, %r577, %r578}, [%rd82];
	or.b32  	%r579, %r564, 524288;
	add.s32 	%r580, %r50, %r579;
	shr.s32 	%r581, %r580, 31;
	shr.u32 	%r582, %r581, 4;
	add.s32 	%r583, %r580, %r582;
	shr.s32 	%r584, %r583, 28;
	setp.lt.s32 	%p207, %r580, 0;
	and.b32  	%r585, %r583, -268435456;
	setp.ne.s32 	%p208, %r585, %r580;
	and.pred  	%p209, %p207, %p208;
	selp.u32 	%r586, 1, 0, %p209;
	sub.s32 	%r587, %r586, %r584;
	shl.b32 	%r588, %r587, 28;
	add.s32 	%r589, %r588, %r580;
	mul.wide.s32 	%rd83, %r589, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r590, %r591, %r592, %r593}, [%rd84];
	or.b32  	%r594, %r564, 1048576;
	add.s32 	%r595, %r50, %r594;
	shr.s32 	%r596, %r595, 31;
	shr.u32 	%r597, %r596, 4;
	add.s32 	%r598, %r595, %r597;
	shr.s32 	%r599, %r598, 28;
	setp.lt.s32 	%p210, %r595, 0;
	and.b32  	%r600, %r598, -268435456;
	setp.ne.s32 	%p211, %r600, %r595;
	and.pred  	%p212, %p210, %p211;
	selp.u32 	%r601, 1, 0, %p212;
	sub.s32 	%r602, %r601, %r599;
	shl.b32 	%r603, %r602, 28;
	add.s32 	%r604, %r603, %r595;
	mul.wide.s32 	%rd85, %r604, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r605, %r606, %r607, %r608}, [%rd86];
	or.b32  	%r609, %r564, 1572864;
	add.s32 	%r610, %r50, %r609;
	shr.s32 	%r611, %r610, 31;
	shr.u32 	%r612, %r611, 4;
	add.s32 	%r613, %r610, %r612;
	shr.s32 	%r614, %r613, 28;
	setp.lt.s32 	%p213, %r610, 0;
	and.b32  	%r615, %r613, -268435456;
	setp.ne.s32 	%p214, %r615, %r610;
	and.pred  	%p215, %p213, %p214;
	selp.u32 	%r616, 1, 0, %p215;
	sub.s32 	%r617, %r616, %r614;
	shl.b32 	%r618, %r617, 28;
	add.s32 	%r619, %r618, %r610;
	mul.wide.s32 	%rd87, %r619, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r620, %r621, %r622, %r623}, [%rd88];
	selp.b32 	%r624, %r577, %r575, %p203;
	shfl.sync.bfly.b32	%r625, %r624, 8, 31, -1;
	selp.b32 	%r496, %r575, %r625, %p203;
	selp.b32 	%r497, %r625, %r577, %p203;
	selp.b32 	%r626, %r578, %r576, %p203;
	shfl.sync.bfly.b32	%r627, %r626, 8, 31, -1;
	selp.b32 	%r504, %r576, %r627, %p203;
	selp.b32 	%r505, %r627, %r578, %p203;
	selp.b32 	%r628, %r592, %r590, %p203;
	shfl.sync.bfly.b32	%r629, %r628, 8, 31, -1;
	selp.b32 	%r512, %r590, %r629, %p203;
	selp.b32 	%r513, %r629, %r592, %p203;
	selp.b32 	%r630, %r593, %r591, %p203;
	shfl.sync.bfly.b32	%r631, %r630, 8, 31, -1;
	selp.b32 	%r520, %r591, %r631, %p203;
	selp.b32 	%r521, %r631, %r593, %p203;
	selp.b32 	%r632, %r607, %r605, %p203;
	shfl.sync.bfly.b32	%r633, %r632, 8, 31, -1;
	selp.b32 	%r528, %r605, %r633, %p203;
	selp.b32 	%r529, %r633, %r607, %p203;
	selp.b32 	%r634, %r608, %r606, %p203;
	shfl.sync.bfly.b32	%r635, %r634, 8, 31, -1;
	selp.b32 	%r536, %r606, %r635, %p203;
	selp.b32 	%r537, %r635, %r608, %p203;
	selp.b32 	%r636, %r622, %r620, %p203;
	shfl.sync.bfly.b32	%r637, %r636, 8, 31, -1;
	selp.b32 	%r544, %r620, %r637, %p203;
	selp.b32 	%r545, %r637, %r622, %p203;
	selp.b32 	%r638, %r623, %r621, %p203;
	shfl.sync.bfly.b32	%r639, %r638, 8, 31, -1;
	selp.b32 	%r552, %r621, %r639, %p203;
	selp.b32 	%r553, %r639, %r623, %p203;
	mov.u32 	%r554, 21520;
	// begin inline asm
	prmt.b32 %r495, %r496, %r497, %r554;
	// end inline asm
	mov.u32 	%r558, 30258;
	// begin inline asm
	prmt.b32 %r499, %r496, %r497, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r503, %r504, %r505, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r504, %r505, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r558;
	// end inline asm
	st.shared.u32 	[%rd8], %r495;
	st.shared.u32 	[%rd9+128], %r499;
	st.shared.u32 	[%rd9+4], %r503;
	st.shared.u32 	[%rd9+132], %r507;
	st.shared.u32 	[%rd10+8324], %r511;
	st.shared.u32 	[%rd11], %r515;
	st.shared.u32 	[%rd12], %r519;
	st.shared.u32 	[%rd13], %r523;
	st.shared.u32 	[%rd10+16648], %r527;
	st.shared.u32 	[%rd14], %r531;
	st.shared.u32 	[%rd15], %r535;
	st.shared.u32 	[%rd16], %r539;
	st.shared.u32 	[%rd10+24972], %r543;
	st.shared.u32 	[%rd17], %r547;
	st.shared.u32 	[%rd18], %r551;
	st.shared.u32 	[%rd19], %r555;
	bar.sync 	0;
	or.b32  	%r73, %r7982, %r52;
	shr.u32 	%r7990, %r73, 6;
	mov.u64 	%rd150, %rd23;
	mov.u64 	%rd151, %rd22;
	mov.u64 	%rd152, %rd21;
	mov.u64 	%rd153, %rd20;
	mov.u32 	%r7991, %r7961;
$L__BB0_84:                             // %pass5548
                                        //   Parent Loop BB0_83 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7824, %r73, %r7991;
	bfe.s32 	%r7825, %r7824, 2, 1;
	and.b32  	%r7826, %r7825, 260;
	and.b32  	%r7827, %r7990, 3;
	mul.lo.s32 	%r7828, %r7827, 2081;
	add.s32 	%r7829, %r56, %r7826;
	add.s32 	%r7830, %r7829, %r7828;
	add.s32 	%r7831, %r7830, %r54;
	add.s32 	%r7832, %r7831, %r55;
	mul.wide.u32 	%rd89, %r7832, 4;
	add.s64 	%rd91, %rd47, %rd89;
	ld.shared.u32 	%r7833, [%rd91];
	add.s32 	%r7834, %r57, %r7826;
	add.s32 	%r7835, %r7834, %r7828;
	add.s32 	%r7836, %r7835, %r54;
	add.s32 	%r7837, %r7836, %r55;
	mul.wide.u32 	%rd92, %r7837, 4;
	add.s64 	%rd93, %rd47, %rd92;
	ld.shared.u32 	%r7838, [%rd93];
	add.s32 	%r7839, %r58, %r7826;
	add.s32 	%r7840, %r7839, %r7828;
	add.s32 	%r7841, %r7840, %r54;
	add.s32 	%r7842, %r7841, %r55;
	mul.wide.u32 	%rd94, %r7842, 4;
	add.s64 	%rd95, %rd47, %rd94;
	ld.shared.u32 	%r7843, [%rd95];
	add.s32 	%r7844, %r59, %r7826;
	add.s32 	%r7845, %r7844, %r7828;
	add.s32 	%r7846, %r7845, %r54;
	add.s32 	%r7847, %r7846, %r55;
	mul.wide.u32 	%rd96, %r7847, 4;
	add.s64 	%rd97, %rd47, %rd96;
	ld.shared.u32 	%r7848, [%rd97];
	// begin inline asm
	mov.b32 %r645, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r656, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r644, %r7833, -2004318072;
	mov.u32 	%r643, 983055;
	// begin inline asm
	lop3.b32 %r642, %r643, %r644, %r645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r646, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r647, %r645, %r646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r650, %r642, %r647;
	// end inline asm
	mov.u32 	%r654, 15728880;
	// begin inline asm
	lop3.b32 %r653, %r654, %r644, %r656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r657, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r658, %r656, %r657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r661, %r653, %r658;
	// end inline asm
	shr.u32 	%r666, %r644, 8;
	// begin inline asm
	lop3.b32 %r664, %r643, %r666, %r645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r668, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r669, %r645, %r668;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r672, %r664, %r669;
	// end inline asm
	// begin inline asm
	lop3.b32 %r675, %r654, %r666, %r656, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r679, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r680, %r656, %r679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r683, %r675, %r680;
	// end inline asm
	// begin inline asm
	mov.b32 %r691, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r702, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r690, %r7838, -2004318072;
	// begin inline asm
	lop3.b32 %r688, %r643, %r690, %r691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r693, %r691, %r692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r696, %r688, %r693;
	// end inline asm
	// begin inline asm
	lop3.b32 %r699, %r654, %r690, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r704, %r702, %r703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r707, %r699, %r704;
	// end inline asm
	shr.u32 	%r712, %r690, 8;
	// begin inline asm
	lop3.b32 %r710, %r643, %r712, %r691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r715, %r691, %r714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r718, %r710, %r715;
	// end inline asm
	// begin inline asm
	lop3.b32 %r721, %r654, %r712, %r702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r702, %r725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r729, %r721, %r726;
	// end inline asm
	// begin inline asm
	mov.b32 %r737, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r748, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r736, %r7843, -2004318072;
	// begin inline asm
	lop3.b32 %r734, %r643, %r736, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r739, %r737, %r738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r742, %r734, %r739;
	// end inline asm
	// begin inline asm
	lop3.b32 %r745, %r654, %r736, %r748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r750, %r748, %r749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r753, %r745, %r750;
	// end inline asm
	shr.u32 	%r758, %r736, 8;
	// begin inline asm
	lop3.b32 %r756, %r643, %r758, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r761, %r737, %r760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r764, %r756, %r761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r767, %r654, %r758, %r748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r772, %r748, %r771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r775, %r767, %r772;
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r794, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r782, %r7848, -2004318072;
	// begin inline asm
	lop3.b32 %r780, %r643, %r782, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r785, %r783, %r784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r788, %r780, %r785;
	// end inline asm
	// begin inline asm
	lop3.b32 %r791, %r654, %r782, %r794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r796, %r794, %r795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r799, %r791, %r796;
	// end inline asm
	shr.u32 	%r804, %r782, 8;
	// begin inline asm
	lop3.b32 %r802, %r643, %r804, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r783, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r813, %r654, %r804, %r794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r818, %r794, %r817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r821, %r813, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r824, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r826, %r824, %r650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r829, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r831, %r829, %r661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r834, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r836, %r834, %r672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r839, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r841, %r839, %r683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r844, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r846, %r844, %r696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r849, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r851, %r849, %r707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r854, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r856, %r854, %r718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r884, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r886, %r884, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r889, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r891, %r889, %r799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r896, %r894, %r810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r899, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r901, %r899, %r821;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r908, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r906, %r643, %r908, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r911, %r909, %r910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r914, %r906, %r911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r917, %r654, %r908, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r922, %r920, %r921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r925, %r917, %r922;
	// end inline asm
	shr.u32 	%r930, %r908, 8;
	// begin inline asm
	lop3.b32 %r928, %r643, %r930, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r909, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r939, %r654, %r930, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r920, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r954, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r952, %r643, %r954, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r955, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r963, %r654, %r954, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	shr.u32 	%r976, %r954, 8;
	// begin inline asm
	lop3.b32 %r974, %r643, %r976, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r955, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r985, %r654, %r976, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r966, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	mov.b32 %r1001, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1000, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r998, %r643, %r1000, %r1001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1003, %r1001, %r1002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1006, %r998, %r1003;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1009, %r654, %r1000, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r1012, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	shr.u32 	%r1022, %r1000, 8;
	// begin inline asm
	lop3.b32 %r1020, %r643, %r1022, %r1001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1001, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1031, %r654, %r1022, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1012, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1046, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r1044, %r643, %r1046, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1049, %r1047, %r1048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1052, %r1044, %r1049;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1055, %r654, %r1046, %r1058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1058, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	shr.u32 	%r1068, %r1046, 8;
	// begin inline asm
	lop3.b32 %r1066, %r643, %r1068, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1047, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1077, %r654, %r1068, %r1058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1058, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1088, %r208, %r914, %r826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r208, %r925, %r831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1096, %r208, %r936, %r836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r208, %r947, %r841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r208, %r960, %r846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r208, %r971, %r851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r208, %r982, %r856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r208, %r993, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r208, %r1006, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r208, %r1017, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r208, %r1028, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r208, %r1039, %r881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r208, %r1052, %r886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r208, %r1063, %r891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r208, %r1074, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r208, %r1085, %r901;
	// end inline asm
	// begin inline asm
	mov.b32 %r1157, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1168, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1156, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r1154, %r643, %r1156, %r1157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1159, %r1157, %r1158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1162, %r1154, %r1159;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1165, %r654, %r1156, %r1168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1169, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1170, %r1168, %r1169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1173, %r1165, %r1170;
	// end inline asm
	shr.u32 	%r1178, %r1156, 8;
	// begin inline asm
	lop3.b32 %r1176, %r643, %r1178, %r1157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1181, %r1157, %r1180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1184, %r1176, %r1181;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1187, %r654, %r1178, %r1168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1168, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	mov.b32 %r1203, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1214, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1202, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r1200, %r643, %r1202, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1204, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1203, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1211, %r654, %r1202, %r1214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1216, %r1214, %r1215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1219, %r1211, %r1216;
	// end inline asm
	shr.u32 	%r1224, %r1202, 8;
	// begin inline asm
	lop3.b32 %r1222, %r643, %r1224, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1203, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1233, %r654, %r1224, %r1214, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1214, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1260, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1248, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r1246, %r643, %r1248, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1249, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1257, %r654, %r1248, %r1260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1262, %r1260, %r1261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1265, %r1257, %r1262;
	// end inline asm
	shr.u32 	%r1270, %r1248, 8;
	// begin inline asm
	lop3.b32 %r1268, %r643, %r1270, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1249, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1279, %r654, %r1270, %r1260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1260, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1306, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1294, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r1292, %r643, %r1294, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1297, %r1295, %r1296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1300, %r1292, %r1297;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1303, %r654, %r1294, %r1306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1308, %r1306, %r1307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1311, %r1303, %r1308;
	// end inline asm
	shr.u32 	%r1316, %r1294, 8;
	// begin inline asm
	lop3.b32 %r1314, %r643, %r1316, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1319, %r1295, %r1318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1322, %r1314, %r1319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1325, %r654, %r1316, %r1306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1330, %r1306, %r1329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1333, %r1325, %r1330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1336, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r1336, %r1162, %r1088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1342, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1344, %r1342, %r1173, %r1092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1348, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r1348, %r1184, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1356, %r1354, %r1195, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1360, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r1360, %r1208, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1366, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r1366, %r1219, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r1372, %r1230, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1378, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r1378, %r1241, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1384, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r1384, %r1254, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1392, %r1390, %r1265, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1396, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r1396, %r1276, %r1128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1402, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r1402, %r1287, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r1408, %r1300, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1414, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r1414, %r1311, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1420, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r1420, %r1322, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1426, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r1426, %r1333, %r1148;
	// end inline asm
	// begin inline asm
	mov.b32 %r1437, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1448, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1436, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r1434, %r643, %r1436, %r1437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1439, %r1437, %r1438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1442, %r1434, %r1439;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1445, %r654, %r1436, %r1448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1450, %r1448, %r1449;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1453, %r1445, %r1450;
	// end inline asm
	shr.u32 	%r1458, %r1436, 8;
	// begin inline asm
	lop3.b32 %r1456, %r643, %r1458, %r1437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1460, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1461, %r1437, %r1460;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1464, %r1456, %r1461;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1467, %r654, %r1458, %r1448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1448, %r1471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1475, %r1467, %r1472;
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1482, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r1480, %r643, %r1482, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1485, %r1483, %r1484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1488, %r1480, %r1485;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1491, %r654, %r1482, %r1494, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1494, %r1495;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1499, %r1491, %r1496;
	// end inline asm
	shr.u32 	%r1504, %r1482, 8;
	// begin inline asm
	lop3.b32 %r1502, %r643, %r1504, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1507, %r1483, %r1506;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1510, %r1502, %r1507;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1513, %r654, %r1504, %r1494, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1494, %r1517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1521, %r1513, %r1518;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1528, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r1526, %r643, %r1528, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1529, %r1530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1534, %r1526, %r1531;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1537, %r654, %r1528, %r1540, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1540, %r1541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1545, %r1537, %r1542;
	// end inline asm
	shr.u32 	%r1550, %r1528, 8;
	// begin inline asm
	lop3.b32 %r1548, %r643, %r1550, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1529, %r1552;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1556, %r1548, %r1553;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1559, %r654, %r1550, %r1540, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1540, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1586, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1574, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r1572, %r643, %r1574, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1575, %r1576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1580, %r1572, %r1577;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1583, %r654, %r1574, %r1586, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1587, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1588, %r1586, %r1587;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1591, %r1583, %r1588;
	// end inline asm
	shr.u32 	%r1596, %r1574, 8;
	// begin inline asm
	lop3.b32 %r1594, %r643, %r1596, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1598, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1599, %r1575, %r1598;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1602, %r1594, %r1599;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1605, %r654, %r1596, %r1586, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1586, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r244, %r1442, %r1338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r244, %r1453, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r244, %r1464, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r244, %r1475, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r244, %r1488, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r244, %r1499, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r244, %r1510, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r244, %r1521, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r244, %r1534, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r244, %r1545, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r244, %r1556, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r244, %r1567, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r244, %r1580, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r244, %r1591, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r244, %r1602, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r244, %r1613, %r1428;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r265, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r265, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r265, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r265, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r265, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r265, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r265, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r265, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r268, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r265, %r1684, %r1752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r268, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r265, %r1693, %r1759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r268, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r265, %r1702, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r268, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r265, %r1711, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r268, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r265, %r1720, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r268, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r265, %r1729, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r268, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r265, %r1738, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r268, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r265, %r1747, %r1801;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1895, %r1892}, {%r324, %r330, %r327, %r333}, {%r1685, %r1755}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r324, %r330, %r327, %r333}, {%r1694, %r1762}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r324, %r330, %r327, %r333}, {%r1703, %r1769}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r324, %r330, %r327, %r333}, {%r1712, %r1776}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1931, %r1928}, {%r324, %r330, %r327, %r333}, {%r1721, %r1783}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1937}, {%r324, %r330, %r327, %r333}, {%r1730, %r1790}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r324, %r330, %r327, %r333}, {%r1739, %r1797}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r324, %r330, %r327, %r333}, {%r1748, %r1804}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1888, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1888, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r368, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r368, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r368, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r368, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r1924, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r368, %r1931, %r1926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1933, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r368, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r368, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r368, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r371, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r368, %r1892, %r1960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r371, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r368, %r1901, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r371, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r368, %r1910, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r371, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r368, %r1919, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r371, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r368, %r1928, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r371, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r368, %r1937, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r371, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r368, %r1946, %r2002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2009, %r371, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r368, %r1955, %r2009;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2016, %r2017}, {%r402, %r408, %r405, %r411}, {%r1893, %r1963}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2026, %r2027}, {%r402, %r408, %r405, %r411}, {%r1902, %r1970}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2036, %r2037}, {%r402, %r408, %r405, %r411}, {%r1911, %r1977}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2047}, {%r402, %r408, %r405, %r411}, {%r1920, %r1984}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2056, %r2057}, {%r402, %r408, %r405, %r411}, {%r1929, %r1991}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2066, %r2067}, {%r402, %r408, %r405, %r411}, {%r1938, %r1998}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2076, %r2077}, {%r402, %r408, %r405, %r411}, {%r1947, %r2005}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2086, %r2087}, {%r402, %r408, %r405, %r411}, {%r1956, %r2012}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r85, %r2016;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2099, %r85, %r2017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r85, %r2026;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r85, %r2027;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r85, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r85, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r85, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r85, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r85, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r85, %r2057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r85, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r85, %r2067;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r85, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r85, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r85, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r85, %r2087;
	// end inline asm
	// begin inline asm
	mov.b32 %r2144, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2145, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2146, %r2096, %r2144;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2149, %r2146, %r2145;
	// end inline asm
	// begin inline asm
	mov.b32 %r2152, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2153, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2154, %r2099, %r2152;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2157, %r2154, %r2153;
	// end inline asm
	// begin inline asm
	mov.b32 %r2160, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2162, %r2102, %r2160;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2165, %r2162, %r2161;
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2170, %r2105, %r2168;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2173, %r2170, %r2169;
	// end inline asm
	// begin inline asm
	mov.b32 %r2176, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2178, %r2108, %r2176;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2181, %r2178, %r2177;
	// end inline asm
	// begin inline asm
	mov.b32 %r2184, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2186, %r2111, %r2184;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2189, %r2186, %r2185;
	// end inline asm
	// begin inline asm
	mov.b32 %r2192, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2194, %r2114, %r2192;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2197, %r2194, %r2193;
	// end inline asm
	// begin inline asm
	mov.b32 %r2200, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2202, %r2117, %r2200;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2205, %r2202, %r2201;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2210, %r2120, %r2208;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2213, %r2210, %r2209;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2218, %r2123, %r2216;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2221, %r2218, %r2217;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2226, %r2126, %r2224;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2229, %r2226, %r2225;
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2234, %r2129, %r2232;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2237, %r2234, %r2233;
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2242, %r2132, %r2240;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2245, %r2242, %r2241;
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2250, %r2135, %r2248;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2253, %r2250, %r2249;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2258, %r2138, %r2256;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2261, %r2258, %r2257;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2266, %r2141, %r2264;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2269, %r2266, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2274, %r2275, %r2273;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2277, %r2149, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2281, %r2275, %r2280;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2284, %r2157, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2288, %r2275, %r2287;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2291, %r2165, %r2288;
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2295, %r2275, %r2294;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2298, %r2173, %r2295;
	// end inline asm
	mov.u32 	%r2304, 25152;
	// begin inline asm
	prmt.b32 %r2301, %r2277, %r2291, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2305, %r2284, %r2298, %r2304;
	// end inline asm
	shl.b32 	%r2312, %r2305, 4;
	mov.u32 	%r2310, 252645135;
	// begin inline asm
	lop3.b32 %r2309, %r2310, %r2301, %r2312, 202;
	// end inline asm
	xor.b32  	%r7849, %r2309, -2004318072;
	// begin inline asm
	mov.b32 %r2316, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2316, %r2314;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2318, %r2181, %r2315;
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2322, %r2316, %r2321;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2325, %r2189, %r2322;
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2329, %r2316, %r2328;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2332, %r2197, %r2329;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2316, %r2335;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2339, %r2205, %r2336;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2342, %r2318, %r2332, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2346, %r2325, %r2339, %r2304;
	// end inline asm
	shl.b32 	%r2353, %r2346, 4;
	// begin inline asm
	lop3.b32 %r2350, %r2310, %r2342, %r2353, 202;
	// end inline asm
	xor.b32  	%r7850, %r2350, -2004318072;
	// begin inline asm
	mov.b32 %r2357, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2357, %r2355;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2213, %r2356;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2357, %r2362;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2366, %r2221, %r2363;
	// end inline asm
	// begin inline asm
	mov.b32 %r2369, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2357, %r2369;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2373, %r2229, %r2370;
	// end inline asm
	// begin inline asm
	mov.b32 %r2376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2357, %r2376;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2237, %r2377;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2383, %r2359, %r2373, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2387, %r2366, %r2380, %r2304;
	// end inline asm
	shl.b32 	%r2394, %r2387, 4;
	// begin inline asm
	lop3.b32 %r2391, %r2310, %r2383, %r2394, 202;
	// end inline asm
	xor.b32  	%r7851, %r2391, -2004318072;
	// begin inline asm
	mov.b32 %r2398, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2398, %r2396;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2400, %r2245, %r2397;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2398, %r2403;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2407, %r2253, %r2404;
	// end inline asm
	// begin inline asm
	mov.b32 %r2410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2411, %r2398, %r2410;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2414, %r2261, %r2411;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2398, %r2417;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2421, %r2269, %r2418;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2400, %r2414, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2407, %r2421, %r2304;
	// end inline asm
	shl.b32 	%r2435, %r2428, 4;
	// begin inline asm
	lop3.b32 %r2432, %r2310, %r2424, %r2435, 202;
	// end inline asm
	xor.b32  	%r7852, %r2432, -2004318072;
	st.shared.u32 	[%rd150], %r7849;
	st.shared.u32 	[%rd151], %r7850;
	st.shared.u32 	[%rd152], %r7851;
	st.shared.u32 	[%rd153], %r7852;
	ld.shared.u32 	%r8003, [%rd91];
	ld.shared.u32 	%r8002, [%rd93];
	ld.shared.u32 	%r8001, [%rd95];
	ld.shared.u32 	%r8000, [%rd97];
	// begin inline asm
	mov.b32 %r2441, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2452, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2440, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r2438, %r643, %r2440, %r2441, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2442, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2443, %r2441, %r2442;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2446, %r2438, %r2443;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2449, %r654, %r2440, %r2452, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2453, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2454, %r2452, %r2453;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2457, %r2449, %r2454;
	// end inline asm
	shr.u32 	%r2462, %r2440, 8;
	// begin inline asm
	lop3.b32 %r2460, %r643, %r2462, %r2441, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2465, %r2441, %r2464;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2468, %r2460, %r2465;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2471, %r654, %r2462, %r2452, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2452, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	mov.b32 %r2487, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2498, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2486, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r2484, %r643, %r2486, %r2487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2487, %r2488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2492, %r2484, %r2489;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2495, %r654, %r2486, %r2498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2499, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2500, %r2498, %r2499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2503, %r2495, %r2500;
	// end inline asm
	shr.u32 	%r2508, %r2486, 8;
	// begin inline asm
	lop3.b32 %r2506, %r643, %r2508, %r2487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2511, %r2487, %r2510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2514, %r2506, %r2511;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2517, %r654, %r2508, %r2498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2498, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	mov.b32 %r2533, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2544, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2532, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r2530, %r643, %r2532, %r2533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2534, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2535, %r2533, %r2534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2538, %r2530, %r2535;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2541, %r654, %r2532, %r2544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2546, %r2544, %r2545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2549, %r2541, %r2546;
	// end inline asm
	shr.u32 	%r2554, %r2532, 8;
	// begin inline asm
	lop3.b32 %r2552, %r643, %r2554, %r2533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2557, %r2533, %r2556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2560, %r2552, %r2557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2563, %r654, %r2554, %r2544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2568, %r2544, %r2567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2571, %r2563, %r2568;
	// end inline asm
	// begin inline asm
	mov.b32 %r2579, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2590, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2578, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r2576, %r643, %r2578, %r2579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2580, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2581, %r2579, %r2580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2584, %r2576, %r2581;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2587, %r654, %r2578, %r2590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2592, %r2590, %r2591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2595, %r2587, %r2592;
	// end inline asm
	shr.u32 	%r2600, %r2578, 8;
	// begin inline asm
	lop3.b32 %r2598, %r643, %r2600, %r2579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2603, %r2579, %r2602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2606, %r2598, %r2603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2609, %r654, %r2600, %r2590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2614, %r2590, %r2613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2617, %r2609, %r2614;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2620, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2622, %r2620, %r2446;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2625, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2627, %r2625, %r2457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2630, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2632, %r2630, %r2468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2645, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2645, %r2503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2650, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2652, %r2650, %r2514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2690, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r2690, %r2606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2617;
	// end inline asm
	// begin inline asm
	mov.b32 %r2705, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2716, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2702, %r643, %r1156, %r2705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2707, %r2705, %r2706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2710, %r2702, %r2707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2713, %r654, %r1156, %r2716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2718, %r2716, %r2717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2721, %r2713, %r2718;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2724, %r643, %r1178, %r2705, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2728, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2729, %r2705, %r2728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2732, %r2724, %r2729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2735, %r654, %r1178, %r2716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2740, %r2716, %r2739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2743, %r2735, %r2740;
	// end inline asm
	// begin inline asm
	mov.b32 %r2751, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2762, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2748, %r643, %r1202, %r2751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2753, %r2751, %r2752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2756, %r2748, %r2753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2759, %r654, %r1202, %r2762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2764, %r2762, %r2763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2767, %r2759, %r2764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2770, %r643, %r1224, %r2751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2774, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2775, %r2751, %r2774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2778, %r2770, %r2775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2781, %r654, %r1224, %r2762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2786, %r2762, %r2785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2789, %r2781, %r2786;
	// end inline asm
	// begin inline asm
	mov.b32 %r2797, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2808, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2794, %r643, %r1248, %r2797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2799, %r2797, %r2798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2802, %r2794, %r2799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2805, %r654, %r1248, %r2808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2809, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2810, %r2808, %r2809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2813, %r2805, %r2810;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2816, %r643, %r1270, %r2797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2821, %r2797, %r2820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2824, %r2816, %r2821;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2827, %r654, %r1270, %r2808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2832, %r2808, %r2831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2835, %r2827, %r2832;
	// end inline asm
	// begin inline asm
	mov.b32 %r2843, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2854, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2840, %r643, %r1294, %r2843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2845, %r2843, %r2844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2848, %r2840, %r2845;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2851, %r654, %r1294, %r2854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2855, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2856, %r2854, %r2855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2859, %r2851, %r2856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2862, %r643, %r1316, %r2843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2866, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2867, %r2843, %r2866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2870, %r2862, %r2867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2873, %r654, %r1316, %r2854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2877, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2878, %r2854, %r2877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2881, %r2873, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r208, %r2710, %r2622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r208, %r2721, %r2627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r208, %r2732, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r208, %r2743, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r208, %r2756, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r208, %r2767, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r208, %r2778, %r2652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r208, %r2789, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r208, %r2802, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r208, %r2813, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r208, %r2824, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r208, %r2835, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r208, %r2848, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r208, %r2859, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r208, %r2870, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r208, %r2881, %r2697;
	// end inline asm
	// begin inline asm
	mov.b32 %r2953, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2964, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2950, %r643, %r1436, %r2953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2955, %r2953, %r2954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2958, %r2950, %r2955;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2961, %r654, %r1436, %r2964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2966, %r2964, %r2965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2969, %r2961, %r2966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2972, %r643, %r1458, %r2953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2977, %r2953, %r2976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2980, %r2972, %r2977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2983, %r654, %r1458, %r2964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2988, %r2964, %r2987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2991, %r2983, %r2988;
	// end inline asm
	// begin inline asm
	mov.b32 %r2999, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3010, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2996, %r643, %r1482, %r2999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3001, %r2999, %r3000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3004, %r2996, %r3001;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3007, %r654, %r1482, %r3010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3012, %r3010, %r3011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3015, %r3007, %r3012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3018, %r643, %r1504, %r2999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3023, %r2999, %r3022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3026, %r3018, %r3023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3029, %r654, %r1504, %r3010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3034, %r3010, %r3033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3037, %r3029, %r3034;
	// end inline asm
	// begin inline asm
	mov.b32 %r3045, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3056, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3042, %r643, %r1528, %r3045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3047, %r3045, %r3046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3050, %r3042, %r3047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3053, %r654, %r1528, %r3056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3058, %r3056, %r3057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3061, %r3053, %r3058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3064, %r643, %r1550, %r3045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3069, %r3045, %r3068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3072, %r3064, %r3069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3075, %r654, %r1550, %r3056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3080, %r3056, %r3079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3083, %r3075, %r3080;
	// end inline asm
	// begin inline asm
	mov.b32 %r3091, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3102, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3088, %r643, %r1574, %r3091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3093, %r3091, %r3092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3096, %r3088, %r3093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3099, %r654, %r1574, %r3102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3104, %r3102, %r3103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3107, %r3099, %r3104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3110, %r643, %r1596, %r3091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3115, %r3091, %r3114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3118, %r3110, %r3115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3121, %r654, %r1596, %r3102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3126, %r3102, %r3125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3129, %r3121, %r3126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3132, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r3132, %r2958, %r2884;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r3138, %r2969, %r2888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3144, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3144, %r2980, %r2892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r3150, %r2991, %r2896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r3156, %r3004, %r2900;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3162, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r3162, %r3015, %r2904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r3168, %r3026, %r2908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3174, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3174, %r3037, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r3180, %r3050, %r2916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3186, %r3061, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3192, %r3072, %r2924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3198, %r3083, %r2928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3204, %r3096, %r2932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3210, %r3107, %r2936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3218, %r3216, %r3118, %r2940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3222, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3222, %r3129, %r2944;
	// end inline asm
	// begin inline asm
	mov.b32 %r3233, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3244, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3230, %r643, %r644, %r3233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3235, %r3233, %r3234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3238, %r3230, %r3235;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3241, %r654, %r644, %r3244, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3245, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3246, %r3244, %r3245;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3249, %r3241, %r3246;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3252, %r643, %r666, %r3233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3256, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3257, %r3233, %r3256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3260, %r3252, %r3257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3263, %r654, %r666, %r3244, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3267, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3268, %r3244, %r3267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3271, %r3263, %r3268;
	// end inline asm
	// begin inline asm
	mov.b32 %r3279, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3290, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3276, %r643, %r690, %r3279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3281, %r3279, %r3280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3284, %r3276, %r3281;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3287, %r654, %r690, %r3290, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3291, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3292, %r3290, %r3291;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3295, %r3287, %r3292;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3298, %r643, %r712, %r3279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3302, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3303, %r3279, %r3302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3306, %r3298, %r3303;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3309, %r654, %r712, %r3290, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3313, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3314, %r3290, %r3313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3317, %r3309, %r3314;
	// end inline asm
	// begin inline asm
	mov.b32 %r3325, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3336, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3322, %r643, %r736, %r3325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3327, %r3325, %r3326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3330, %r3322, %r3327;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3333, %r654, %r736, %r3336, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3338, %r3336, %r3337;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3341, %r3333, %r3338;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3344, %r643, %r758, %r3325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3349, %r3325, %r3348;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3352, %r3344, %r3349;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3355, %r654, %r758, %r3336, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3359, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3360, %r3336, %r3359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3363, %r3355, %r3360;
	// end inline asm
	// begin inline asm
	mov.b32 %r3371, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3382, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3368, %r643, %r782, %r3371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3373, %r3371, %r3372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3376, %r3368, %r3373;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3379, %r654, %r782, %r3382, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3384, %r3382, %r3383;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3387, %r3379, %r3384;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3390, %r643, %r804, %r3371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3394, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3395, %r3371, %r3394;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3398, %r3390, %r3395;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3401, %r654, %r804, %r3382, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3406, %r3382, %r3405;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3409, %r3401, %r3406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3483, %r244, %r3238, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r244, %r3249, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r244, %r3260, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r244, %r3271, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r244, %r3284, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r244, %r3295, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r244, %r3306, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r244, %r3317, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r244, %r3330, %r3182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r244, %r3341, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r244, %r3352, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r244, %r3363, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r244, %r3376, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r244, %r3387, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r244, %r3398, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r244, %r3409, %r3224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3476, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3478, %r3476, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r265, %r3483, %r3478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3485, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3487, %r3485, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r265, %r3492, %r3487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3494, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r3494, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r265, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3503, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3503, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r265, %r3510, %r3505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3512, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3512, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r265, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3521, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r3521, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r265, %r3528, %r3523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r265, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r265, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3548, %r268, %r3483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r265, %r3480, %r3548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3555, %r268, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r265, %r3489, %r3555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3562, %r268, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r265, %r3498, %r3562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3569, %r268, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r265, %r3507, %r3569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3576, %r268, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r265, %r3516, %r3576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r268, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r265, %r3525, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r268, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r265, %r3534, %r3590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r268, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r265, %r3543, %r3597;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3691, %r3688}, {%r324, %r330, %r327, %r333}, {%r3481, %r3551}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3700, %r3697}, {%r324, %r330, %r327, %r333}, {%r3490, %r3558}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3709, %r3706}, {%r324, %r330, %r327, %r333}, {%r3499, %r3565}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3718, %r3715}, {%r324, %r330, %r327, %r333}, {%r3508, %r3572}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3727, %r3724}, {%r324, %r330, %r327, %r333}, {%r3517, %r3579}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3736, %r3733}, {%r324, %r330, %r327, %r333}, {%r3526, %r3586}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r324, %r330, %r327, %r333}, {%r3535, %r3593}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r324, %r330, %r327, %r333}, {%r3544, %r3600}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3684, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3686, %r3684, %r3688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3689, %r368, %r3691, %r3686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3693, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3695, %r3693, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3698, %r368, %r3700, %r3695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3702, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3704, %r3702, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3707, %r368, %r3709, %r3704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3711, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3713, %r3711, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3716, %r368, %r3718, %r3713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3720, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3720, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r368, %r3727, %r3722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3729, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3731, %r3729, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3734, %r368, %r3736, %r3731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r368, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r368, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3756, %r371, %r3691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3759, %r368, %r3688, %r3756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3763, %r371, %r3700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3766, %r368, %r3697, %r3763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3770, %r371, %r3709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3773, %r368, %r3706, %r3770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3777, %r371, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3780, %r368, %r3715, %r3777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3784, %r371, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3787, %r368, %r3724, %r3784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3791, %r371, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3794, %r368, %r3733, %r3791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3798, %r371, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3801, %r368, %r3742, %r3798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3805, %r371, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3808, %r368, %r3751, %r3805;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3812, %r3813}, {%r402, %r408, %r405, %r411}, {%r3689, %r3759}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3822, %r3823}, {%r402, %r408, %r405, %r411}, {%r3698, %r3766}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3832, %r3833}, {%r402, %r408, %r405, %r411}, {%r3707, %r3773}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3842, %r3843}, {%r402, %r408, %r405, %r411}, {%r3716, %r3780}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3852, %r3853}, {%r402, %r408, %r405, %r411}, {%r3725, %r3787}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3862, %r3863}, {%r402, %r408, %r405, %r411}, {%r3734, %r3794}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3872, %r3873}, {%r402, %r408, %r405, %r411}, {%r3743, %r3801}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3882, %r3883}, {%r402, %r408, %r405, %r411}, {%r3752, %r3808}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3892, %r85, %r3812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3895, %r85, %r3813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3898, %r85, %r3822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3901, %r85, %r3823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3904, %r85, %r3832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r85, %r3833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r85, %r3842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r85, %r3843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r85, %r3852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r85, %r3853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r85, %r3862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r85, %r3863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r85, %r3872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r85, %r3873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r85, %r3882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r85, %r3883;
	// end inline asm
	// begin inline asm
	mov.b32 %r3940, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3941, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3942, %r3892, %r3940;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3945, %r3942, %r3941;
	// end inline asm
	// begin inline asm
	mov.b32 %r3948, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3949, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3950, %r3895, %r3948;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3953, %r3950, %r3949;
	// end inline asm
	// begin inline asm
	mov.b32 %r3956, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3957, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3958, %r3898, %r3956;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3961, %r3958, %r3957;
	// end inline asm
	// begin inline asm
	mov.b32 %r3964, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3965, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3966, %r3901, %r3964;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3969, %r3966, %r3965;
	// end inline asm
	// begin inline asm
	mov.b32 %r3972, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3973, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3974, %r3904, %r3972;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3977, %r3974, %r3973;
	// end inline asm
	// begin inline asm
	mov.b32 %r3980, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3981, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3982, %r3907, %r3980;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3985, %r3982, %r3981;
	// end inline asm
	// begin inline asm
	mov.b32 %r3988, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3989, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3990, %r3910, %r3988;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3993, %r3990, %r3989;
	// end inline asm
	// begin inline asm
	mov.b32 %r3996, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3997, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3998, %r3913, %r3996;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4001, %r3998, %r3997;
	// end inline asm
	// begin inline asm
	mov.b32 %r4004, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4005, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4006, %r3916, %r4004;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4009, %r4006, %r4005;
	// end inline asm
	// begin inline asm
	mov.b32 %r4012, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4013, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4014, %r3919, %r4012;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4017, %r4014, %r4013;
	// end inline asm
	// begin inline asm
	mov.b32 %r4020, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4021, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4022, %r3922, %r4020;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4025, %r4022, %r4021;
	// end inline asm
	// begin inline asm
	mov.b32 %r4028, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4029, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4030, %r3925, %r4028;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4033, %r4030, %r4029;
	// end inline asm
	// begin inline asm
	mov.b32 %r4036, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4037, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4038, %r3928, %r4036;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4041, %r4038, %r4037;
	// end inline asm
	// begin inline asm
	mov.b32 %r4044, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4045, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4046, %r3931, %r4044;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4049, %r4046, %r4045;
	// end inline asm
	// begin inline asm
	mov.b32 %r4052, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4053, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4054, %r3934, %r4052;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4057, %r4054, %r4053;
	// end inline asm
	// begin inline asm
	mov.b32 %r4060, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4061, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4062, %r3937, %r4060;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4065, %r4062, %r4061;
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4070, %r4071, %r4069;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4073, %r3945, %r4070;
	// end inline asm
	// begin inline asm
	mov.b32 %r4076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4077, %r4071, %r4076;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4080, %r3953, %r4077;
	// end inline asm
	// begin inline asm
	mov.b32 %r4083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4084, %r4071, %r4083;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4087, %r3961, %r4084;
	// end inline asm
	// begin inline asm
	mov.b32 %r4090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4091, %r4071, %r4090;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4094, %r3969, %r4091;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4097, %r4073, %r4087, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4101, %r4080, %r4094, %r2304;
	// end inline asm
	shl.b32 	%r4108, %r4101, 4;
	// begin inline asm
	lop3.b32 %r4105, %r2310, %r4097, %r4108, 202;
	// end inline asm
	xor.b32  	%r7853, %r4105, -2004318072;
	// begin inline asm
	mov.b32 %r4112, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4111, %r4112, %r4110;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4114, %r3977, %r4111;
	// end inline asm
	// begin inline asm
	mov.b32 %r4117, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4118, %r4112, %r4117;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4121, %r3985, %r4118;
	// end inline asm
	// begin inline asm
	mov.b32 %r4124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4125, %r4112, %r4124;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4128, %r3993, %r4125;
	// end inline asm
	// begin inline asm
	mov.b32 %r4131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4132, %r4112, %r4131;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4135, %r4001, %r4132;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4138, %r4114, %r4128, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4142, %r4121, %r4135, %r2304;
	// end inline asm
	shl.b32 	%r4149, %r4142, 4;
	// begin inline asm
	lop3.b32 %r4146, %r2310, %r4138, %r4149, 202;
	// end inline asm
	xor.b32  	%r7854, %r4146, -2004318072;
	// begin inline asm
	mov.b32 %r4153, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4151, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4152, %r4153, %r4151;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4155, %r4009, %r4152;
	// end inline asm
	// begin inline asm
	mov.b32 %r4158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4159, %r4153, %r4158;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4162, %r4017, %r4159;
	// end inline asm
	// begin inline asm
	mov.b32 %r4165, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4166, %r4153, %r4165;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4169, %r4025, %r4166;
	// end inline asm
	// begin inline asm
	mov.b32 %r4172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4173, %r4153, %r4172;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4176, %r4033, %r4173;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4179, %r4155, %r4169, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4183, %r4162, %r4176, %r2304;
	// end inline asm
	shl.b32 	%r4190, %r4183, 4;
	// begin inline asm
	lop3.b32 %r4187, %r2310, %r4179, %r4190, 202;
	// end inline asm
	xor.b32  	%r7855, %r4187, -2004318072;
	// begin inline asm
	mov.b32 %r4194, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4193, %r4194, %r4192;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4196, %r4041, %r4193;
	// end inline asm
	// begin inline asm
	mov.b32 %r4199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4200, %r4194, %r4199;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4203, %r4049, %r4200;
	// end inline asm
	// begin inline asm
	mov.b32 %r4206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4207, %r4194, %r4206;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4210, %r4057, %r4207;
	// end inline asm
	// begin inline asm
	mov.b32 %r4213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4214, %r4194, %r4213;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4217, %r4065, %r4214;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4220, %r4196, %r4210, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4224, %r4203, %r4217, %r2304;
	// end inline asm
	shl.b32 	%r4231, %r4224, 4;
	// begin inline asm
	lop3.b32 %r4228, %r2310, %r4220, %r4231, 202;
	// end inline asm
	xor.b32  	%r7856, %r4228, -2004318072;
	st.shared.u32 	[%rd150], %r7853;
	st.shared.u32 	[%rd151], %r7854;
	st.shared.u32 	[%rd152], %r7855;
	st.shared.u32 	[%rd153], %r7856;
	ld.shared.u32 	%r7999, [%rd91];
	ld.shared.u32 	%r7998, [%rd93];
	ld.shared.u32 	%r7997, [%rd95];
	ld.shared.u32 	%r7996, [%rd97];
	// begin inline asm
	mov.b32 %r4237, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4248, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4236, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r4234, %r643, %r4236, %r4237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4238, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4239, %r4237, %r4238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4242, %r4234, %r4239;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4245, %r654, %r4236, %r4248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4249, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4250, %r4248, %r4249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4253, %r4245, %r4250;
	// end inline asm
	shr.u32 	%r4258, %r4236, 8;
	// begin inline asm
	lop3.b32 %r4256, %r643, %r4258, %r4237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4260, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4261, %r4237, %r4260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4264, %r4256, %r4261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4267, %r654, %r4258, %r4248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4272, %r4248, %r4271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4275, %r4267, %r4272;
	// end inline asm
	// begin inline asm
	mov.b32 %r4283, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4294, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4282, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r4280, %r643, %r4282, %r4283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4284, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4285, %r4283, %r4284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4288, %r4280, %r4285;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4291, %r654, %r4282, %r4294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4296, %r4294, %r4295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4299, %r4291, %r4296;
	// end inline asm
	shr.u32 	%r4304, %r4282, 8;
	// begin inline asm
	lop3.b32 %r4302, %r643, %r4304, %r4283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4307, %r4283, %r4306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4310, %r4302, %r4307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4313, %r654, %r4304, %r4294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4318, %r4294, %r4317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4321, %r4313, %r4318;
	// end inline asm
	// begin inline asm
	mov.b32 %r4329, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4340, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4328, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r4326, %r643, %r4328, %r4329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4331, %r4329, %r4330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4334, %r4326, %r4331;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4337, %r654, %r4328, %r4340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4342, %r4340, %r4341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4345, %r4337, %r4342;
	// end inline asm
	shr.u32 	%r4350, %r4328, 8;
	// begin inline asm
	lop3.b32 %r4348, %r643, %r4350, %r4329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4353, %r4329, %r4352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4356, %r4348, %r4353;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4359, %r654, %r4350, %r4340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4364, %r4340, %r4363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4367, %r4359, %r4364;
	// end inline asm
	// begin inline asm
	mov.b32 %r4375, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4386, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4374, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r4372, %r643, %r4374, %r4375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4377, %r4375, %r4376;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4380, %r4372, %r4377;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4383, %r654, %r4374, %r4386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4387, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4388, %r4386, %r4387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4391, %r4383, %r4388;
	// end inline asm
	shr.u32 	%r4396, %r4374, 8;
	// begin inline asm
	lop3.b32 %r4394, %r643, %r4396, %r4375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4399, %r4375, %r4398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4402, %r4394, %r4399;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4405, %r654, %r4396, %r4386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4410, %r4386, %r4409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4413, %r4405, %r4410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4416, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4418, %r4416, %r4242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4421, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4423, %r4421, %r4253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4426, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4428, %r4426, %r4264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4431, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4433, %r4431, %r4275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4436, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4438, %r4436, %r4288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4441, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4443, %r4441, %r4299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4446, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4448, %r4446, %r4310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4451, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4453, %r4451, %r4321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4456, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4458, %r4456, %r4334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4461, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4463, %r4461, %r4345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4466, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4468, %r4466, %r4356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4471, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4473, %r4471, %r4367;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4476, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4478, %r4476, %r4380;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4481, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4483, %r4481, %r4391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4486, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4488, %r4486, %r4402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4491, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4493, %r4491, %r4413;
	// end inline asm
	// begin inline asm
	mov.b32 %r4501, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4512, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4498, %r643, %r1436, %r4501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4502, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4503, %r4501, %r4502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4506, %r4498, %r4503;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4509, %r654, %r1436, %r4512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4513, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4514, %r4512, %r4513;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4517, %r4509, %r4514;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4520, %r643, %r1458, %r4501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4524, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4525, %r4501, %r4524;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4528, %r4520, %r4525;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4531, %r654, %r1458, %r4512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4535, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4536, %r4512, %r4535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4539, %r4531, %r4536;
	// end inline asm
	// begin inline asm
	mov.b32 %r4547, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4558, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4544, %r643, %r1482, %r4547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4549, %r4547, %r4548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4552, %r4544, %r4549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4555, %r654, %r1482, %r4558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4559, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4560, %r4558, %r4559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4563, %r4555, %r4560;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4566, %r643, %r1504, %r4547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4570, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4571, %r4547, %r4570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4574, %r4566, %r4571;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4577, %r654, %r1504, %r4558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4582, %r4558, %r4581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4585, %r4577, %r4582;
	// end inline asm
	// begin inline asm
	mov.b32 %r4593, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4604, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4590, %r643, %r1528, %r4593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4595, %r4593, %r4594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4598, %r4590, %r4595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4601, %r654, %r1528, %r4604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4605, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4606, %r4604, %r4605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4609, %r4601, %r4606;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4612, %r643, %r1550, %r4593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4616, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4617, %r4593, %r4616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4620, %r4612, %r4617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4623, %r654, %r1550, %r4604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4628, %r4604, %r4627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4631, %r4623, %r4628;
	// end inline asm
	// begin inline asm
	mov.b32 %r4639, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4650, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4636, %r643, %r1574, %r4639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4641, %r4639, %r4640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4644, %r4636, %r4641;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4647, %r654, %r1574, %r4650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4651, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4652, %r4650, %r4651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4655, %r4647, %r4652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4658, %r643, %r1596, %r4639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4663, %r4639, %r4662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4666, %r4658, %r4663;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4669, %r654, %r1596, %r4650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4674, %r4650, %r4673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4677, %r4669, %r4674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4680, %r208, %r4506, %r4418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4684, %r208, %r4517, %r4423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4688, %r208, %r4528, %r4428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4692, %r208, %r4539, %r4433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4696, %r208, %r4552, %r4438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4700, %r208, %r4563, %r4443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4704, %r208, %r4574, %r4448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4708, %r208, %r4585, %r4453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4712, %r208, %r4598, %r4458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4716, %r208, %r4609, %r4463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4720, %r208, %r4620, %r4468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4724, %r208, %r4631, %r4473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4728, %r208, %r4644, %r4478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4732, %r208, %r4655, %r4483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4736, %r208, %r4666, %r4488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4740, %r208, %r4677, %r4493;
	// end inline asm
	// begin inline asm
	mov.b32 %r4749, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4760, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4746, %r643, %r644, %r4749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4751, %r4749, %r4750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4754, %r4746, %r4751;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4757, %r654, %r644, %r4760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4761, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4762, %r4760, %r4761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4765, %r4757, %r4762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4768, %r643, %r666, %r4749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4773, %r4749, %r4772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4776, %r4768, %r4773;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4779, %r654, %r666, %r4760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4784, %r4760, %r4783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4787, %r4779, %r4784;
	// end inline asm
	// begin inline asm
	mov.b32 %r4795, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4806, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4792, %r643, %r690, %r4795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4796, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4797, %r4795, %r4796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4800, %r4792, %r4797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4803, %r654, %r690, %r4806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4808, %r4806, %r4807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4811, %r4803, %r4808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4814, %r643, %r712, %r4795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4819, %r4795, %r4818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4822, %r4814, %r4819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4825, %r654, %r712, %r4806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4830, %r4806, %r4829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4833, %r4825, %r4830;
	// end inline asm
	// begin inline asm
	mov.b32 %r4841, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4852, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4838, %r643, %r736, %r4841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4843, %r4841, %r4842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4846, %r4838, %r4843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4849, %r654, %r736, %r4852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4854, %r4852, %r4853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4857, %r4849, %r4854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4860, %r643, %r758, %r4841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4865, %r4841, %r4864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4868, %r4860, %r4865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4871, %r654, %r758, %r4852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4876, %r4852, %r4875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4879, %r4871, %r4876;
	// end inline asm
	// begin inline asm
	mov.b32 %r4887, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4898, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4884, %r643, %r782, %r4887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4889, %r4887, %r4888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4892, %r4884, %r4889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4895, %r654, %r782, %r4898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4900, %r4898, %r4899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4903, %r4895, %r4900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4906, %r643, %r804, %r4887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4911, %r4887, %r4910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4914, %r4906, %r4911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4917, %r654, %r804, %r4898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4922, %r4898, %r4921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4925, %r4917, %r4922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4928, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4930, %r4928, %r4754, %r4680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4934, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4936, %r4934, %r4765, %r4684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4940, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4942, %r4940, %r4776, %r4688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4946, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4948, %r4946, %r4787, %r4692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4952, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4954, %r4952, %r4800, %r4696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4958, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4960, %r4958, %r4811, %r4700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4964, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4966, %r4964, %r4822, %r4704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4970, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4972, %r4970, %r4833, %r4708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4976, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4978, %r4976, %r4846, %r4712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4982, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4984, %r4982, %r4857, %r4716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4988, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4990, %r4988, %r4868, %r4720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4994, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4996, %r4994, %r4879, %r4724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5000, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5002, %r5000, %r4892, %r4728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5006, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5008, %r5006, %r4903, %r4732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5012, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5014, %r5012, %r4914, %r4736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5018, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5020, %r5018, %r4925, %r4740;
	// end inline asm
	// begin inline asm
	mov.b32 %r5029, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5040, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5026, %r643, %r2440, %r5029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5031, %r5029, %r5030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5034, %r5026, %r5031;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5037, %r654, %r2440, %r5040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5041, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5042, %r5040, %r5041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5045, %r5037, %r5042;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5048, %r643, %r2462, %r5029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5052, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5053, %r5029, %r5052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5056, %r5048, %r5053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5059, %r654, %r2462, %r5040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5064, %r5040, %r5063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5067, %r5059, %r5064;
	// end inline asm
	// begin inline asm
	mov.b32 %r5075, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5086, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5072, %r643, %r2486, %r5075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5077, %r5075, %r5076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5080, %r5072, %r5077;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5083, %r654, %r2486, %r5086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5087, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5088, %r5086, %r5087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5091, %r5083, %r5088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5094, %r643, %r2508, %r5075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5098, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5099, %r5075, %r5098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5102, %r5094, %r5099;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5105, %r654, %r2508, %r5086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5109, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5110, %r5086, %r5109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5113, %r5105, %r5110;
	// end inline asm
	// begin inline asm
	mov.b32 %r5121, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5132, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5118, %r643, %r2532, %r5121, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5123, %r5121, %r5122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5126, %r5118, %r5123;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5129, %r654, %r2532, %r5132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5134, %r5132, %r5133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5137, %r5129, %r5134;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5140, %r643, %r2554, %r5121, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5145, %r5121, %r5144;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5148, %r5140, %r5145;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5151, %r654, %r2554, %r5132, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5155, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5156, %r5132, %r5155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5159, %r5151, %r5156;
	// end inline asm
	// begin inline asm
	mov.b32 %r5167, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5178, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5164, %r643, %r2578, %r5167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5169, %r5167, %r5168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5172, %r5164, %r5169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5175, %r654, %r2578, %r5178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5180, %r5178, %r5179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5183, %r5175, %r5180;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5186, %r643, %r2600, %r5167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5190, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5191, %r5167, %r5190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5194, %r5186, %r5191;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5197, %r654, %r2600, %r5178, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5202, %r5178, %r5201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5205, %r5197, %r5202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5279, %r244, %r5034, %r4930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5276, %r244, %r5045, %r4936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5288, %r244, %r5056, %r4942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r244, %r5067, %r4948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r244, %r5080, %r4954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r244, %r5091, %r4960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r244, %r5102, %r4966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r244, %r5113, %r4972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r244, %r5126, %r4978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r244, %r5137, %r4984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r244, %r5148, %r4990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r244, %r5159, %r4996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r244, %r5172, %r5002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r244, %r5183, %r5008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r244, %r5194, %r5014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r244, %r5205, %r5020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5272, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5274, %r5272, %r5276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5277, %r265, %r5279, %r5274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5281, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5283, %r5281, %r5285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5286, %r265, %r5288, %r5283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5290, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5292, %r5290, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5295, %r265, %r5297, %r5292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5299, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5301, %r5299, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r265, %r5306, %r5301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5308, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5310, %r5308, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r265, %r5315, %r5310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5317, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5319, %r5317, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r265, %r5324, %r5319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r265, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r265, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5344, %r268, %r5279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5347, %r265, %r5276, %r5344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5351, %r268, %r5288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5354, %r265, %r5285, %r5351;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5358, %r268, %r5297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5361, %r265, %r5294, %r5358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5365, %r268, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5368, %r265, %r5303, %r5365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5372, %r268, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r265, %r5312, %r5372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5379, %r268, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5382, %r265, %r5321, %r5379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5386, %r268, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5389, %r265, %r5330, %r5386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5393, %r268, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5396, %r265, %r5339, %r5393;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5487, %r5484}, {%r324, %r330, %r327, %r333}, {%r5277, %r5347}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5496, %r5493}, {%r324, %r330, %r327, %r333}, {%r5286, %r5354}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5505, %r5502}, {%r324, %r330, %r327, %r333}, {%r5295, %r5361}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5514, %r5511}, {%r324, %r330, %r327, %r333}, {%r5304, %r5368}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5523, %r5520}, {%r324, %r330, %r327, %r333}, {%r5313, %r5375}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5532, %r5529}, {%r324, %r330, %r327, %r333}, {%r5322, %r5382}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r324, %r330, %r327, %r333}, {%r5331, %r5389}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r324, %r330, %r327, %r333}, {%r5340, %r5396}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5480, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5482, %r5480, %r5484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5485, %r368, %r5487, %r5482;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5489, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5491, %r5489, %r5493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5494, %r368, %r5496, %r5491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5498, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5500, %r5498, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5503, %r368, %r5505, %r5500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5507, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5509, %r5507, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5512, %r368, %r5514, %r5509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5516, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5518, %r5516, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5521, %r368, %r5523, %r5518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5525, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5527, %r5525, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5530, %r368, %r5532, %r5527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r368, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r368, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5552, %r371, %r5487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5555, %r368, %r5484, %r5552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5559, %r371, %r5496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5562, %r368, %r5493, %r5559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5566, %r371, %r5505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5569, %r368, %r5502, %r5566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5573, %r371, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5576, %r368, %r5511, %r5573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5580, %r371, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5583, %r368, %r5520, %r5580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5587, %r371, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5590, %r368, %r5529, %r5587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5594, %r371, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5597, %r368, %r5538, %r5594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5601, %r371, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5604, %r368, %r5547, %r5601;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5608, %r5609}, {%r402, %r408, %r405, %r411}, {%r5485, %r5555}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5618, %r5619}, {%r402, %r408, %r405, %r411}, {%r5494, %r5562}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5628, %r5629}, {%r402, %r408, %r405, %r411}, {%r5503, %r5569}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5638, %r5639}, {%r402, %r408, %r405, %r411}, {%r5512, %r5576}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5648, %r5649}, {%r402, %r408, %r405, %r411}, {%r5521, %r5583}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5658, %r5659}, {%r402, %r408, %r405, %r411}, {%r5530, %r5590}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5668, %r5669}, {%r402, %r408, %r405, %r411}, {%r5539, %r5597}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5678, %r5679}, {%r402, %r408, %r405, %r411}, {%r5548, %r5604}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5688, %r85, %r5608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5691, %r85, %r5609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5694, %r85, %r5618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5697, %r85, %r5619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5700, %r85, %r5628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r85, %r5629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r85, %r5638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r85, %r5639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r85, %r5648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r85, %r5649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r85, %r5658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r85, %r5659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r85, %r5668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r85, %r5669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r85, %r5678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r85, %r5679;
	// end inline asm
	// begin inline asm
	mov.b32 %r5736, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5737, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5738, %r5688, %r5736;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5741, %r5738, %r5737;
	// end inline asm
	// begin inline asm
	mov.b32 %r5744, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5745, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5746, %r5691, %r5744;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5749, %r5746, %r5745;
	// end inline asm
	// begin inline asm
	mov.b32 %r5752, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5753, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5754, %r5694, %r5752;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5757, %r5754, %r5753;
	// end inline asm
	// begin inline asm
	mov.b32 %r5760, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5761, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5762, %r5697, %r5760;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5765, %r5762, %r5761;
	// end inline asm
	// begin inline asm
	mov.b32 %r5768, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5769, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5770, %r5700, %r5768;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5773, %r5770, %r5769;
	// end inline asm
	// begin inline asm
	mov.b32 %r5776, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5777, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5778, %r5703, %r5776;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5781, %r5778, %r5777;
	// end inline asm
	// begin inline asm
	mov.b32 %r5784, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5785, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5786, %r5706, %r5784;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5789, %r5786, %r5785;
	// end inline asm
	// begin inline asm
	mov.b32 %r5792, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5793, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5794, %r5709, %r5792;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5797, %r5794, %r5793;
	// end inline asm
	// begin inline asm
	mov.b32 %r5800, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5801, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5802, %r5712, %r5800;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5805, %r5802, %r5801;
	// end inline asm
	// begin inline asm
	mov.b32 %r5808, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5809, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5810, %r5715, %r5808;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5813, %r5810, %r5809;
	// end inline asm
	// begin inline asm
	mov.b32 %r5816, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5817, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5818, %r5718, %r5816;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5821, %r5818, %r5817;
	// end inline asm
	// begin inline asm
	mov.b32 %r5824, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5825, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5826, %r5721, %r5824;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5829, %r5826, %r5825;
	// end inline asm
	// begin inline asm
	mov.b32 %r5832, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5833, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5834, %r5724, %r5832;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5837, %r5834, %r5833;
	// end inline asm
	// begin inline asm
	mov.b32 %r5840, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5841, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5842, %r5727, %r5840;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5845, %r5842, %r5841;
	// end inline asm
	// begin inline asm
	mov.b32 %r5848, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5849, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5850, %r5730, %r5848;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5853, %r5850, %r5849;
	// end inline asm
	// begin inline asm
	mov.b32 %r5856, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5857, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5858, %r5733, %r5856;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5861, %r5858, %r5857;
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5865, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5866, %r5867, %r5865;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5869, %r5741, %r5866;
	// end inline asm
	// begin inline asm
	mov.b32 %r5872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5873, %r5867, %r5872;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5876, %r5749, %r5873;
	// end inline asm
	// begin inline asm
	mov.b32 %r5879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5880, %r5867, %r5879;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5883, %r5757, %r5880;
	// end inline asm
	// begin inline asm
	mov.b32 %r5886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5887, %r5867, %r5886;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5890, %r5765, %r5887;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5893, %r5869, %r5883, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5897, %r5876, %r5890, %r2304;
	// end inline asm
	shl.b32 	%r5904, %r5897, 4;
	// begin inline asm
	lop3.b32 %r5901, %r2310, %r5893, %r5904, 202;
	// end inline asm
	xor.b32  	%r7857, %r5901, -2004318072;
	// begin inline asm
	mov.b32 %r5908, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5906, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5907, %r5908, %r5906;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5910, %r5773, %r5907;
	// end inline asm
	// begin inline asm
	mov.b32 %r5913, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5914, %r5908, %r5913;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5917, %r5781, %r5914;
	// end inline asm
	// begin inline asm
	mov.b32 %r5920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5921, %r5908, %r5920;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5924, %r5789, %r5921;
	// end inline asm
	// begin inline asm
	mov.b32 %r5927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5928, %r5908, %r5927;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5931, %r5797, %r5928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5934, %r5910, %r5924, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5938, %r5917, %r5931, %r2304;
	// end inline asm
	shl.b32 	%r5945, %r5938, 4;
	// begin inline asm
	lop3.b32 %r5942, %r2310, %r5934, %r5945, 202;
	// end inline asm
	xor.b32  	%r7858, %r5942, -2004318072;
	// begin inline asm
	mov.b32 %r5949, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5947, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5948, %r5949, %r5947;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5951, %r5805, %r5948;
	// end inline asm
	// begin inline asm
	mov.b32 %r5954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5955, %r5949, %r5954;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5958, %r5813, %r5955;
	// end inline asm
	// begin inline asm
	mov.b32 %r5961, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5962, %r5949, %r5961;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5965, %r5821, %r5962;
	// end inline asm
	// begin inline asm
	mov.b32 %r5968, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5969, %r5949, %r5968;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5972, %r5829, %r5969;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5975, %r5951, %r5965, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5979, %r5958, %r5972, %r2304;
	// end inline asm
	shl.b32 	%r5986, %r5979, 4;
	// begin inline asm
	lop3.b32 %r5983, %r2310, %r5975, %r5986, 202;
	// end inline asm
	xor.b32  	%r7859, %r5983, -2004318072;
	// begin inline asm
	mov.b32 %r5990, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5989, %r5990, %r5988;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5992, %r5837, %r5989;
	// end inline asm
	// begin inline asm
	mov.b32 %r5995, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5996, %r5990, %r5995;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5999, %r5845, %r5996;
	// end inline asm
	// begin inline asm
	mov.b32 %r6002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6003, %r5990, %r6002;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6006, %r5853, %r6003;
	// end inline asm
	// begin inline asm
	mov.b32 %r6009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6010, %r5990, %r6009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6013, %r5861, %r6010;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6016, %r5992, %r6006, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6020, %r5999, %r6013, %r2304;
	// end inline asm
	shl.b32 	%r6027, %r6020, 4;
	// begin inline asm
	lop3.b32 %r6024, %r2310, %r6016, %r6027, 202;
	// end inline asm
	xor.b32  	%r7860, %r6024, -2004318072;
	st.shared.u32 	[%rd150], %r7857;
	st.shared.u32 	[%rd151], %r7858;
	st.shared.u32 	[%rd152], %r7859;
	st.shared.u32 	[%rd153], %r7860;
	ld.shared.u32 	%r7995, [%rd91];
	ld.shared.u32 	%r7994, [%rd93];
	ld.shared.u32 	%r7993, [%rd95];
	ld.shared.u32 	%r7992, [%rd97];
	// begin inline asm
	mov.b32 %r6033, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6044, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6032, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r6030, %r643, %r6032, %r6033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6034, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6035, %r6033, %r6034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6038, %r6030, %r6035;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6041, %r654, %r6032, %r6044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6045, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6046, %r6044, %r6045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6049, %r6041, %r6046;
	// end inline asm
	shr.u32 	%r6054, %r6032, 8;
	// begin inline asm
	lop3.b32 %r6052, %r643, %r6054, %r6033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6057, %r6033, %r6056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6060, %r6052, %r6057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6063, %r654, %r6054, %r6044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6068, %r6044, %r6067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6071, %r6063, %r6068;
	// end inline asm
	// begin inline asm
	mov.b32 %r6079, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6090, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6078, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r6076, %r643, %r6078, %r6079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6081, %r6079, %r6080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6084, %r6076, %r6081;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6087, %r654, %r6078, %r6090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6092, %r6090, %r6091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6095, %r6087, %r6092;
	// end inline asm
	shr.u32 	%r6100, %r6078, 8;
	// begin inline asm
	lop3.b32 %r6098, %r643, %r6100, %r6079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6103, %r6079, %r6102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6106, %r6098, %r6103;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6109, %r654, %r6100, %r6090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6114, %r6090, %r6113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6117, %r6109, %r6114;
	// end inline asm
	// begin inline asm
	mov.b32 %r6125, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6136, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6124, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r6122, %r643, %r6124, %r6125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6127, %r6125, %r6126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6130, %r6122, %r6127;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6133, %r654, %r6124, %r6136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6138, %r6136, %r6137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6141, %r6133, %r6138;
	// end inline asm
	shr.u32 	%r6146, %r6124, 8;
	// begin inline asm
	lop3.b32 %r6144, %r643, %r6146, %r6125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6148, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6149, %r6125, %r6148;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6152, %r6144, %r6149;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6155, %r654, %r6146, %r6136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6160, %r6136, %r6159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6163, %r6155, %r6160;
	// end inline asm
	// begin inline asm
	mov.b32 %r6171, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6182, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6170, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r6168, %r643, %r6170, %r6171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6173, %r6171, %r6172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6176, %r6168, %r6173;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6179, %r654, %r6170, %r6182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6183, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6184, %r6182, %r6183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6187, %r6179, %r6184;
	// end inline asm
	shr.u32 	%r6192, %r6170, 8;
	// begin inline asm
	lop3.b32 %r6190, %r643, %r6192, %r6171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6195, %r6171, %r6194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6198, %r6190, %r6195;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6201, %r654, %r6192, %r6182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6206, %r6182, %r6205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6209, %r6201, %r6206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6212, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6214, %r6212, %r6038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6217, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6219, %r6217, %r6049;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6222, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6224, %r6222, %r6060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6227, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6229, %r6227, %r6071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6232, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6234, %r6232, %r6084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6237, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6239, %r6237, %r6095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6242, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6244, %r6242, %r6106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6247, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6249, %r6247, %r6117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6252, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6254, %r6252, %r6130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6257, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6259, %r6257, %r6141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6262, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6264, %r6262, %r6152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6267, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6269, %r6267, %r6163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6272, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6274, %r6272, %r6176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6277, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6279, %r6277, %r6187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6282, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6284, %r6282, %r6198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6287, %r262;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6289, %r6287, %r6209;
	// end inline asm
	// begin inline asm
	mov.b32 %r6297, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6308, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6294, %r643, %r644, %r6297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6298, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6299, %r6297, %r6298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6302, %r6294, %r6299;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6305, %r654, %r644, %r6308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6310, %r6308, %r6309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6313, %r6305, %r6310;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6316, %r643, %r666, %r6297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6320, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6321, %r6297, %r6320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6324, %r6316, %r6321;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6327, %r654, %r666, %r6308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6332, %r6308, %r6331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6335, %r6327, %r6332;
	// end inline asm
	// begin inline asm
	mov.b32 %r6343, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6354, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6340, %r643, %r690, %r6343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6345, %r6343, %r6344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6348, %r6340, %r6345;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6351, %r654, %r690, %r6354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6356, %r6354, %r6355;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6359, %r6351, %r6356;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6362, %r643, %r712, %r6343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6366, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6367, %r6343, %r6366;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6370, %r6362, %r6367;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6373, %r654, %r712, %r6354, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6378, %r6354, %r6377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6381, %r6373, %r6378;
	// end inline asm
	// begin inline asm
	mov.b32 %r6389, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6400, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6386, %r643, %r736, %r6389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6391, %r6389, %r6390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6394, %r6386, %r6391;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6397, %r654, %r736, %r6400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6401, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6402, %r6400, %r6401;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6405, %r6397, %r6402;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6408, %r643, %r758, %r6389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6413, %r6389, %r6412;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6416, %r6408, %r6413;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6419, %r654, %r758, %r6400, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6424, %r6400, %r6423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6427, %r6419, %r6424;
	// end inline asm
	// begin inline asm
	mov.b32 %r6435, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6446, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6432, %r643, %r782, %r6435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6437, %r6435, %r6436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6440, %r6432, %r6437;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6443, %r654, %r782, %r6446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6447, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6448, %r6446, %r6447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6451, %r6443, %r6448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6454, %r643, %r804, %r6435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6459, %r6435, %r6458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6462, %r6454, %r6459;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6465, %r654, %r804, %r6446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6470, %r6446, %r6469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6473, %r6465, %r6470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6476, %r208, %r6302, %r6214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6480, %r208, %r6313, %r6219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6484, %r208, %r6324, %r6224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6488, %r208, %r6335, %r6229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6492, %r208, %r6348, %r6234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6496, %r208, %r6359, %r6239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6500, %r208, %r6370, %r6244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6504, %r208, %r6381, %r6249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6508, %r208, %r6394, %r6254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6512, %r208, %r6405, %r6259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6516, %r208, %r6416, %r6264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6520, %r208, %r6427, %r6269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6524, %r208, %r6440, %r6274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6528, %r208, %r6451, %r6279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6532, %r208, %r6462, %r6284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6536, %r208, %r6473, %r6289;
	// end inline asm
	// begin inline asm
	mov.b32 %r6545, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6556, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6542, %r643, %r2440, %r6545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6546, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6547, %r6545, %r6546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6550, %r6542, %r6547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6553, %r654, %r2440, %r6556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6558, %r6556, %r6557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6561, %r6553, %r6558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6564, %r643, %r2462, %r6545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6569, %r6545, %r6568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6572, %r6564, %r6569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6575, %r654, %r2462, %r6556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6580, %r6556, %r6579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6583, %r6575, %r6580;
	// end inline asm
	// begin inline asm
	mov.b32 %r6591, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6602, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6588, %r643, %r2486, %r6591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6593, %r6591, %r6592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6596, %r6588, %r6593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6599, %r654, %r2486, %r6602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6604, %r6602, %r6603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6607, %r6599, %r6604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6610, %r643, %r2508, %r6591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6615, %r6591, %r6614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6618, %r6610, %r6615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6621, %r654, %r2508, %r6602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6626, %r6602, %r6625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6629, %r6621, %r6626;
	// end inline asm
	// begin inline asm
	mov.b32 %r6637, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6648, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6634, %r643, %r2532, %r6637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6639, %r6637, %r6638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6642, %r6634, %r6639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6645, %r654, %r2532, %r6648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6650, %r6648, %r6649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6653, %r6645, %r6650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6656, %r643, %r2554, %r6637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6661, %r6637, %r6660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6664, %r6656, %r6661;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6667, %r654, %r2554, %r6648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6672, %r6648, %r6671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6675, %r6667, %r6672;
	// end inline asm
	// begin inline asm
	mov.b32 %r6683, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6694, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6680, %r643, %r2578, %r6683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6685, %r6683, %r6684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6688, %r6680, %r6685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6691, %r654, %r2578, %r6694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6696, %r6694, %r6695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6699, %r6691, %r6696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6702, %r643, %r2600, %r6683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6707, %r6683, %r6706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6710, %r6702, %r6707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6713, %r654, %r2600, %r6694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6718, %r6694, %r6717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6721, %r6713, %r6718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6724, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6726, %r6724, %r6550, %r6476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6730, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6732, %r6730, %r6561, %r6480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6736, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6738, %r6736, %r6572, %r6484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6742, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6744, %r6742, %r6583, %r6488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6748, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6750, %r6748, %r6596, %r6492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6754, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6756, %r6754, %r6607, %r6496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6760, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6762, %r6760, %r6618, %r6500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6766, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6768, %r6766, %r6629, %r6504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6772, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6774, %r6772, %r6642, %r6508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6778, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6780, %r6778, %r6653, %r6512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6784, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6786, %r6784, %r6664, %r6516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6790, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6792, %r6790, %r6675, %r6520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6796, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6798, %r6796, %r6688, %r6524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6802, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6804, %r6802, %r6699, %r6528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6808, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6810, %r6808, %r6710, %r6532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6814, %r226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6816, %r6814, %r6721, %r6536;
	// end inline asm
	// begin inline asm
	mov.b32 %r6825, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6836, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6822, %r643, %r4236, %r6825, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6827, %r6825, %r6826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6830, %r6822, %r6827;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6833, %r654, %r4236, %r6836, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6837, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6838, %r6836, %r6837;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6841, %r6833, %r6838;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6844, %r643, %r4258, %r6825, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6848, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6849, %r6825, %r6848;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6852, %r6844, %r6849;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6855, %r654, %r4258, %r6836, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6860, %r6836, %r6859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6863, %r6855, %r6860;
	// end inline asm
	// begin inline asm
	mov.b32 %r6871, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6882, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6868, %r643, %r4282, %r6871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6873, %r6871, %r6872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6876, %r6868, %r6873;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6879, %r654, %r4282, %r6882, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6883, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6884, %r6882, %r6883;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6887, %r6879, %r6884;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6890, %r643, %r4304, %r6871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6894, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6895, %r6871, %r6894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6898, %r6890, %r6895;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6901, %r654, %r4304, %r6882, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6905, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6906, %r6882, %r6905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6909, %r6901, %r6906;
	// end inline asm
	// begin inline asm
	mov.b32 %r6917, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6928, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6914, %r643, %r4328, %r6917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6919, %r6917, %r6918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6922, %r6914, %r6919;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6925, %r654, %r4328, %r6928, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6930, %r6928, %r6929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6933, %r6925, %r6930;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6936, %r643, %r4350, %r6917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6941, %r6917, %r6940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6944, %r6936, %r6941;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6947, %r654, %r4350, %r6928, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6951, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6952, %r6928, %r6951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6955, %r6947, %r6952;
	// end inline asm
	// begin inline asm
	mov.b32 %r6963, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6974, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6960, %r643, %r4374, %r6963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6965, %r6963, %r6964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6968, %r6960, %r6965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6971, %r654, %r4374, %r6974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6976, %r6974, %r6975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6979, %r6971, %r6976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6982, %r643, %r4396, %r6963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6986, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6987, %r6963, %r6986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6990, %r6982, %r6987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6993, %r654, %r4396, %r6974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6998, %r6974, %r6997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7001, %r6993, %r6998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7075, %r244, %r6830, %r6726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7072, %r244, %r6841, %r6732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7084, %r244, %r6852, %r6738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r244, %r6863, %r6744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r244, %r6876, %r6750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r244, %r6887, %r6756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r244, %r6898, %r6762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r244, %r6909, %r6768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r244, %r6922, %r6774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r244, %r6933, %r6780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r244, %r6944, %r6786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r244, %r6955, %r6792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r244, %r6968, %r6798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r244, %r6979, %r6804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r244, %r6990, %r6810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r244, %r7001, %r6816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7068, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7070, %r7068, %r7072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7073, %r265, %r7075, %r7070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7077, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7079, %r7077, %r7081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7082, %r265, %r7084, %r7079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7086, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7088, %r7086, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7091, %r265, %r7093, %r7088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7095, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7097, %r7095, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r265, %r7102, %r7097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7104, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7106, %r7104, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r265, %r7111, %r7106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7113, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7115, %r7113, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r265, %r7120, %r7115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r265, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r265, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7140, %r268, %r7075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7143, %r265, %r7072, %r7140;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7147, %r268, %r7084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7150, %r265, %r7081, %r7147;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7154, %r268, %r7093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7157, %r265, %r7090, %r7154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7161, %r268, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7164, %r265, %r7099, %r7161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7168, %r268, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r265, %r7108, %r7168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7175, %r268, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7178, %r265, %r7117, %r7175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7182, %r268, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7185, %r265, %r7126, %r7182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7189, %r268, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7192, %r265, %r7135, %r7189;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7283, %r7280}, {%r324, %r330, %r327, %r333}, {%r7073, %r7143}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7292, %r7289}, {%r324, %r330, %r327, %r333}, {%r7082, %r7150}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7301, %r7298}, {%r324, %r330, %r327, %r333}, {%r7091, %r7157}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7310, %r7307}, {%r324, %r330, %r327, %r333}, {%r7100, %r7164}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7319, %r7316}, {%r324, %r330, %r327, %r333}, {%r7109, %r7171}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7328, %r7325}, {%r324, %r330, %r327, %r333}, {%r7118, %r7178}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r324, %r330, %r327, %r333}, {%r7127, %r7185}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r324, %r330, %r327, %r333}, {%r7136, %r7192}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7276, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7278, %r7276, %r7280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7281, %r368, %r7283, %r7278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7285, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7287, %r7285, %r7289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7290, %r368, %r7292, %r7287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7294, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7296, %r7294, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7299, %r368, %r7301, %r7296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7303, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7305, %r7303, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7308, %r368, %r7310, %r7305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7312, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7314, %r7312, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7317, %r368, %r7319, %r7314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7321, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7323, %r7321, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7326, %r368, %r7328, %r7323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r368, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r368, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7348, %r371, %r7283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7351, %r368, %r7280, %r7348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7355, %r371, %r7292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7358, %r368, %r7289, %r7355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7362, %r371, %r7301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7365, %r368, %r7298, %r7362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7369, %r371, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7372, %r368, %r7307, %r7369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7376, %r371, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7379, %r368, %r7316, %r7376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7383, %r371, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7386, %r368, %r7325, %r7383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7390, %r371, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7393, %r368, %r7334, %r7390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7397, %r371, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7400, %r368, %r7343, %r7397;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7404, %r7405}, {%r402, %r408, %r405, %r411}, {%r7281, %r7351}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7414, %r7415}, {%r402, %r408, %r405, %r411}, {%r7290, %r7358}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7424, %r7425}, {%r402, %r408, %r405, %r411}, {%r7299, %r7365}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7434, %r7435}, {%r402, %r408, %r405, %r411}, {%r7308, %r7372}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7444, %r7445}, {%r402, %r408, %r405, %r411}, {%r7317, %r7379}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7454, %r7455}, {%r402, %r408, %r405, %r411}, {%r7326, %r7386}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7464, %r7465}, {%r402, %r408, %r405, %r411}, {%r7335, %r7393}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7474, %r7475}, {%r402, %r408, %r405, %r411}, {%r7344, %r7400}, {%r7961, %r7961};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7484, %r85, %r7404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7487, %r85, %r7405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7490, %r85, %r7414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7493, %r85, %r7415;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7496, %r85, %r7424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r85, %r7425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r85, %r7434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r85, %r7435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r85, %r7444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r85, %r7445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r85, %r7454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r85, %r7455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r85, %r7464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r85, %r7465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r85, %r7474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r85, %r7475;
	// end inline asm
	// begin inline asm
	mov.b32 %r7532, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7533, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7534, %r7484, %r7532;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7537, %r7534, %r7533;
	// end inline asm
	// begin inline asm
	mov.b32 %r7540, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7541, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7542, %r7487, %r7540;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7545, %r7542, %r7541;
	// end inline asm
	// begin inline asm
	mov.b32 %r7548, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7549, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7550, %r7490, %r7548;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7553, %r7550, %r7549;
	// end inline asm
	// begin inline asm
	mov.b32 %r7556, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7557, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7558, %r7493, %r7556;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7561, %r7558, %r7557;
	// end inline asm
	// begin inline asm
	mov.b32 %r7564, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7565, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7566, %r7496, %r7564;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7569, %r7566, %r7565;
	// end inline asm
	// begin inline asm
	mov.b32 %r7572, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7573, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7574, %r7499, %r7572;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7577, %r7574, %r7573;
	// end inline asm
	// begin inline asm
	mov.b32 %r7580, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7581, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7582, %r7502, %r7580;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7585, %r7582, %r7581;
	// end inline asm
	// begin inline asm
	mov.b32 %r7588, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7589, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7590, %r7505, %r7588;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7593, %r7590, %r7589;
	// end inline asm
	// begin inline asm
	mov.b32 %r7596, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7597, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7598, %r7508, %r7596;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7601, %r7598, %r7597;
	// end inline asm
	// begin inline asm
	mov.b32 %r7604, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7605, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7606, %r7511, %r7604;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7609, %r7606, %r7605;
	// end inline asm
	// begin inline asm
	mov.b32 %r7612, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7613, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7614, %r7514, %r7612;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7617, %r7614, %r7613;
	// end inline asm
	// begin inline asm
	mov.b32 %r7620, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7621, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7622, %r7517, %r7620;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7625, %r7622, %r7621;
	// end inline asm
	// begin inline asm
	mov.b32 %r7628, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7629, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7630, %r7520, %r7628;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7633, %r7630, %r7629;
	// end inline asm
	// begin inline asm
	mov.b32 %r7636, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7637, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7638, %r7523, %r7636;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7641, %r7638, %r7637;
	// end inline asm
	// begin inline asm
	mov.b32 %r7644, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7645, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7646, %r7526, %r7644;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7649, %r7646, %r7645;
	// end inline asm
	// begin inline asm
	mov.b32 %r7652, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7653, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7654, %r7529, %r7652;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7657, %r7654, %r7653;
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7661, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7662, %r7663, %r7661;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7665, %r7537, %r7662;
	// end inline asm
	// begin inline asm
	mov.b32 %r7668, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7669, %r7663, %r7668;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7672, %r7545, %r7669;
	// end inline asm
	// begin inline asm
	mov.b32 %r7675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7676, %r7663, %r7675;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7679, %r7553, %r7676;
	// end inline asm
	// begin inline asm
	mov.b32 %r7682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7683, %r7663, %r7682;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7686, %r7561, %r7683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7689, %r7665, %r7679, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7693, %r7672, %r7686, %r2304;
	// end inline asm
	shl.b32 	%r7700, %r7693, 4;
	// begin inline asm
	lop3.b32 %r7697, %r2310, %r7689, %r7700, 202;
	// end inline asm
	xor.b32  	%r7861, %r7697, -2004318072;
	// begin inline asm
	mov.b32 %r7704, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7702, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7703, %r7704, %r7702;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7706, %r7569, %r7703;
	// end inline asm
	// begin inline asm
	mov.b32 %r7709, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7710, %r7704, %r7709;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7713, %r7577, %r7710;
	// end inline asm
	// begin inline asm
	mov.b32 %r7716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7717, %r7704, %r7716;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7720, %r7585, %r7717;
	// end inline asm
	// begin inline asm
	mov.b32 %r7723, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7724, %r7704, %r7723;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7727, %r7593, %r7724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7730, %r7706, %r7720, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7734, %r7713, %r7727, %r2304;
	// end inline asm
	shl.b32 	%r7741, %r7734, 4;
	// begin inline asm
	lop3.b32 %r7738, %r2310, %r7730, %r7741, 202;
	// end inline asm
	xor.b32  	%r7862, %r7738, -2004318072;
	// begin inline asm
	mov.b32 %r7745, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7743, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7744, %r7745, %r7743;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7747, %r7601, %r7744;
	// end inline asm
	// begin inline asm
	mov.b32 %r7750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7751, %r7745, %r7750;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7754, %r7609, %r7751;
	// end inline asm
	// begin inline asm
	mov.b32 %r7757, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7758, %r7745, %r7757;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7761, %r7617, %r7758;
	// end inline asm
	// begin inline asm
	mov.b32 %r7764, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7765, %r7745, %r7764;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7768, %r7625, %r7765;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7771, %r7747, %r7761, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7775, %r7754, %r7768, %r2304;
	// end inline asm
	shl.b32 	%r7782, %r7775, 4;
	// begin inline asm
	lop3.b32 %r7779, %r2310, %r7771, %r7782, 202;
	// end inline asm
	xor.b32  	%r7863, %r7779, -2004318072;
	// begin inline asm
	mov.b32 %r7786, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7785, %r7786, %r7784;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7788, %r7633, %r7785;
	// end inline asm
	// begin inline asm
	mov.b32 %r7791, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7792, %r7786, %r7791;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7795, %r7641, %r7792;
	// end inline asm
	// begin inline asm
	mov.b32 %r7798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7799, %r7786, %r7798;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7802, %r7649, %r7799;
	// end inline asm
	// begin inline asm
	mov.b32 %r7805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7806, %r7786, %r7805;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7809, %r7657, %r7806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7812, %r7788, %r7802, %r2304;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7816, %r7795, %r7809, %r2304;
	// end inline asm
	shl.b32 	%r7823, %r7816, 4;
	// begin inline asm
	lop3.b32 %r7820, %r2310, %r7812, %r7823, 202;
	// end inline asm
	xor.b32  	%r7864, %r7820, -2004318072;
	st.shared.u32 	[%rd150], %r7861;
	st.shared.u32 	[%rd151], %r7862;
	st.shared.u32 	[%rd152], %r7863;
	st.shared.u32 	[%rd153], %r7864;
	add.s32 	%r7991, %r7991, 64;
	add.s64 	%rd153, %rd153, 8324;
	add.s64 	%rd152, %rd152, 8324;
	add.s64 	%rd151, %rd151, 8324;
	add.s64 	%rd150, %rd150, 8324;
	add.s32 	%r7990, %r7990, 1;
	setp.eq.s32 	%p216, %r7991, 256;
	@%p216 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;
$L__BB0_85:                             // %guard_exit17352
                                        //   in Loop: Header=BB0_83 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7870, [%rd5];
	ld.shared.u32 	%r7871, [%rd6+128];
	ld.shared.u32 	%r7878, [%rd6+4];
	ld.shared.u32 	%r7879, [%rd6+132];
	ld.shared.u32 	%r7886, [%rd5+8324];
	ld.shared.u32 	%r7887, [%rd6+8452];
	ld.shared.u32 	%r7894, [%rd6+8328];
	ld.shared.u32 	%r7895, [%rd6+8456];
	ld.shared.u32 	%r7902, [%rd5+16648];
	ld.shared.u32 	%r7903, [%rd6+16776];
	ld.shared.u32 	%r7910, [%rd6+16652];
	ld.shared.u32 	%r7911, [%rd6+16780];
	ld.shared.u32 	%r7918, [%rd5+24972];
	ld.shared.u32 	%r7919, [%rd6+25100];
	ld.shared.u32 	%r7926, [%rd6+24976];
	ld.shared.u32 	%r7927, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7865, %r7870, %r7871, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7869, %r7870, %r7871, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7873, %r7878, %r7879, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7878, %r7879, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7886, %r7887, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7886, %r7887, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7894, %r7895, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7894, %r7895, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7902, %r7903, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7902, %r7903, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7910, %r7911, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7910, %r7911, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7913, %r7918, %r7919, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7917, %r7918, %r7919, %r558;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7921, %r7926, %r7927, %r554;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7925, %r7926, %r7927, %r558;
	// end inline asm
	selp.b32 	%r7929, %r7869, %r7865, %p203;
	shfl.sync.bfly.b32	%r150, %r7929, 8, 31, -1;
	selp.b32 	%r7930, %r7877, %r7873, %p203;
	shfl.sync.bfly.b32	%r151, %r7930, 8, 31, -1;
	selp.b32 	%r7931, %r7885, %r7881, %p203;
	shfl.sync.bfly.b32	%r7932, %r7931, 8, 31, -1;
	selp.b32 	%r7933, %r7893, %r7889, %p203;
	shfl.sync.bfly.b32	%r7934, %r7933, 8, 31, -1;
	selp.b32 	%r7935, %r7901, %r7897, %p203;
	shfl.sync.bfly.b32	%r7936, %r7935, 8, 31, -1;
	selp.b32 	%r7937, %r7909, %r7905, %p203;
	shfl.sync.bfly.b32	%r7938, %r7937, 8, 31, -1;
	selp.b32 	%r7939, %r7917, %r7913, %p203;
	shfl.sync.bfly.b32	%r7940, %r7939, 8, 31, -1;
	selp.b32 	%r7941, %r7925, %r7921, %p203;
	shfl.sync.bfly.b32	%r7942, %r7941, 8, 31, -1;
	setp.eq.s32 	%p218, %r7982, 0;
	shl.b32 	%r7983, %r7982, 13;
	@%p218 bra 	$L__BB0_86;
// %bb.122:                             // %pass16539
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r7943, %r151, %r7877, %p203;
	selp.b32 	%r7944, %r7873, %r151, %p203;
	selp.b32 	%r7945, %r150, %r7869, %p203;
	selp.b32 	%r7946, %r7865, %r150, %p203;
	or.b32  	%r7948, %r53, %r7983;
	cvt.u64.u32 	%rd98, %r7948;
	add.s64 	%rd99, %rd98, %rd7;
	shr.u64 	%rd100, %rd99, 36;
	add.s64 	%rd101, %rd99, %rd100;
	shr.s64 	%rd102, %rd101, 28;
	setp.lt.s64 	%p220, %rd99, 0;
	and.b64  	%rd103, %rd101, -268435456;
	setp.ne.s64 	%p221, %rd103, %rd99;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd104, 1, 0, %p222;
	sub.s64 	%rd105, %rd104, %rd102;
	shl.b64 	%rd106, %rd105, 28;
	add.s64 	%rd107, %rd106, %rd99;
	shl.b64 	%rd108, %rd107, 2;
	add.s64 	%rd109, %rd3, %rd108;
	st.global.v4.u32 	[%rd109], {%r7946, %r7944, %r7945, %r7943};
$L__BB0_86:                             // %L39860
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r7949, %r7982, 64;
	setp.gt.u32 	%p223, %r7949, 191;
	@%p223 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_87;
$L__BB0_120:                            // %pass16646
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r152, %r7881, %r7932, %p203;
	selp.b32 	%r153, %r7932, %r7885, %p203;
	selp.b32 	%r154, %r7889, %r7934, %p203;
	selp.b32 	%r155, %r7934, %r7893, %p203;
	or.b32  	%r7950, %r7983, %r53;
	or.b32  	%r7951, %r7950, 524288;
	cvt.u64.u32 	%rd110, %r7951;
	add.s64 	%rd111, %rd110, %rd7;
	shr.u64 	%rd112, %rd111, 36;
	add.s64 	%rd113, %rd111, %rd112;
	shr.s64 	%rd114, %rd113, 28;
	setp.lt.s64 	%p224, %rd111, 0;
	and.b64  	%rd115, %rd113, -268435456;
	setp.ne.s64 	%p225, %rd115, %rd111;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd116, 1, 0, %p226;
	sub.s64 	%rd117, %rd116, %rd114;
	shl.b64 	%rd118, %rd117, 28;
	add.s64 	%rd119, %rd118, %rd111;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd121, %rd3, %rd120;
	st.global.v4.u32 	[%rd121], {%r152, %r154, %r153, %r155};
$L__BB0_87:                             // %L40078
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r160, %r7913, %r7940, %p203;
	selp.b32 	%r161, %r7940, %r7917, %p203;
	selp.b32 	%r162, %r7921, %r7942, %p203;
	selp.b32 	%r163, %r7942, %r7925, %p203;
	or.b32  	%r7952, %r7982, 128;
	setp.gt.u32 	%p227, %r7952, 191;
	or.b32  	%r7963, %r7983, %r53;
	@%p227 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_88;
$L__BB0_121:                            // %pass16753
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r156, %r7897, %r7936, %p203;
	selp.b32 	%r157, %r7936, %r7901, %p203;
	selp.b32 	%r158, %r7905, %r7938, %p203;
	selp.b32 	%r159, %r7938, %r7909, %p203;
	or.b32  	%r7954, %r7963, 1048576;
	cvt.u64.u32 	%rd122, %r7954;
	add.s64 	%rd123, %rd122, %rd7;
	shr.u64 	%rd124, %rd123, 36;
	add.s64 	%rd125, %rd123, %rd124;
	shr.s64 	%rd126, %rd125, 28;
	setp.lt.s64 	%p228, %rd123, 0;
	and.b64  	%rd127, %rd125, -268435456;
	setp.ne.s64 	%p229, %rd127, %rd123;
	and.pred  	%p230, %p228, %p229;
	selp.u64 	%rd128, 1, 0, %p230;
	sub.s64 	%rd129, %rd128, %rd126;
	shl.b64 	%rd130, %rd129, 28;
	add.s64 	%rd131, %rd130, %rd123;
	shl.b64 	%rd132, %rd131, 2;
	add.s64 	%rd133, %rd3, %rd132;
	st.global.v4.u32 	[%rd133], {%r156, %r158, %r157, %r159};
	bra.uni 	$L__BB0_88;
$L__BB0_89:                             // %L40525
	st.global.u32 	[%rd4], %r7961;
	ret;
$L__BB0_7:                              // %L166
	mov.u32 	%r7960, 2;
	st.global.u32 	[%rd4], %r7960;
	mov.u64 	%rd148, exception3410;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_10:                             // %L275
	mov.u32 	%r7959, 3;
	st.global.u32 	[%rd4], %r7959;
	mov.u64 	%rd146, exception3410;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r164;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
