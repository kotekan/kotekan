// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<657>;
	.reg .b64 	%rd<70>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r65, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r66, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r67, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r68, %r1, 5;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r69, %r3, 7;
	or.b32  	%r70, %r68, %r2;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd24, %r71, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd6], %r72;
	shl.b32 	%r73, %r1, 2;
	shl.b32 	%r74, %r3, 1;
	and.b32  	%r4, %r74, 4064;
	shr.u32 	%r75, %r2, 3;
	or.b32  	%r5, %r73, %r75;
	or.b32  	%r76, %r5, %r4;
	mul.wide.u32 	%rd25, %r76, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r6, [%rd26];
	or.b32  	%r77, %r76, 16;
	mul.wide.u32 	%rd27, %r77, 4;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.u32 	%r7, [%rd28];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %pass133
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r144, %r7, -2;
	add.s32 	%r145, %r6, -2;
	shl.b32 	%r146, %r1, 8;
	and.b32  	%r147, %r146, 512;
	shl.b32 	%r148, %r3, 6;
	or.b32  	%r149, %r148, %r2;
	shl.b32 	%r150, %r2, 3;
	and.b32  	%r151, %r150, 24;
	or.b32  	%r152, %r146, %r150;
	and.b32  	%r153, %r152, 448;
	and.b32  	%r154, %r149, 130052;
	or.b32  	%r155, %r154, %r147;
	or.b32  	%r156, %r155, %r151;
	or.b32  	%r157, %r156, %r153;
	shl.b32 	%r158, %r157, 2;
	cvt.u64.u32 	%rd31, %r158;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd32];
	or.b32  	%r159, %r158, 128;
	cvt.u64.u32 	%rd33, %r159;
	add.s64 	%rd34, %rd33, %rd1;
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd34];
	mov.u32 	%r106, 21520;
	// begin inline asm
	prmt.b32 %r112, %r80, %r81, %r106;
	// end inline asm
	mov.u32 	%r110, 30258;
	// begin inline asm
	prmt.b32 %r113, %r80, %r81, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r110;
	// end inline asm
	mov.u32 	%r138, 25152;
	// begin inline asm
	prmt.b32 %r111, %r112, %r113, %r138;
	// end inline asm
	mov.u32 	%r142, 29521;
	// begin inline asm
	prmt.b32 %r115, %r112, %r113, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r142;
	// end inline asm
	cvt.u16.u32 	%rs4, %r2;
	and.b16  	%rs1, %rs4, 4;
	setp.eq.s16 	%p6, %rs1, 0;
	selp.b32 	%r160, %r127, %r111, %p6;
	shfl.sync.bfly.b32	%r161, %r160, 4, 31, -1;
	selp.b32 	%r42, %r111, %r161, %p6;
	selp.b32 	%r43, %r161, %r127, %p6;
	selp.b32 	%r162, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r163, %r162, 4, 31, -1;
	selp.b32 	%r44, %r115, %r163, %p6;
	selp.b32 	%r45, %r163, %r131, %p6;
	selp.b32 	%r164, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r165, %r164, 4, 31, -1;
	selp.b32 	%r46, %r119, %r165, %p6;
	selp.b32 	%r47, %r165, %r135, %p6;
	selp.b32 	%r166, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r48, %r123, %r167, %p6;
	selp.b32 	%r49, %r167, %r139, %p6;
	shr.u32 	%r50, %r2, 2;
	shl.b32 	%r168, %r3, 11;
	and.b32  	%r51, %r168, 30720;
	shl.b32 	%r169, %r1, 4;
	and.b32  	%r52, %r169, 16;
	shl.b32 	%r170, %r1, 3;
	and.b32  	%r53, %r170, 16;
	shl.b32 	%r171, %r2, 2;
	and.b32  	%r54, %r171, 12;
	shr.u32 	%r172, %r1, 1;
	mul.lo.s32 	%r173, %r172, 544;
	or.b32  	%r174, %r52, %r50;
	mul.lo.s32 	%r175, %r174, 17;
	or.b32  	%r55, %r54, %r173;
	add.s32 	%r176, %r55, %r175;
	mul.wide.u32 	%rd35, %r176, 4;
	mov.u64 	%rd36, shmem;
	add.s64 	%rd7, %rd36, %rd35;
	cvt.u64.u32 	%rd37, %r175;
	cvt.u64.u32 	%rd38, %r55;
	add.s64 	%rd39, %rd38, %rd37;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd8, %rd36, %rd40;
	or.b32  	%r177, %r174, 8;
	mul.lo.s32 	%r178, %r177, 17;
	add.s32 	%r179, %r55, %r178;
	mul.wide.u32 	%rd41, %r179, 4;
	add.s64 	%rd9, %rd36, %rd41;
	cvt.u64.u32 	%rd42, %r178;
	add.s64 	%rd43, %rd38, %rd42;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd10, %rd36, %rd44;
	mul.lo.s32 	%r180, %r172, 640;
	and.b32  	%r181, %r170, 8;
	or.b32  	%r182, %r181, %r50;
	shl.b32 	%r183, %r2, 1;
	and.b32  	%r56, %r183, 6;
	or.b32  	%r57, %r182, %r180;
	and.b32  	%r184, %r2, 7;
	mul.lo.s32 	%r185, %r184, 20;
	add.s32 	%r186, %r5, %r185;
	mul.wide.u32 	%rd45, %r186, 4;
	add.s64 	%rd46, %rd36, 4352;
	add.s64 	%rd11, %rd46, %rd45;
	or.b32  	%r187, %r5, 640;
	add.s32 	%r188, %r187, %r185;
	mul.wide.u32 	%rd47, %r188, 4;
	add.s64 	%rd12, %rd46, %rd47;
	add.s32 	%r189, %r185, 160;
	add.s32 	%r190, %r189, %r5;
	mul.wide.u32 	%rd48, %r190, 4;
	add.s64 	%rd13, %rd46, %rd48;
	add.s32 	%r191, %r187, %r189;
	mul.wide.u32 	%rd49, %r191, 4;
	add.s64 	%rd14, %rd46, %rd49;
	add.s32 	%r192, %r185, 320;
	add.s32 	%r193, %r192, %r5;
	mul.wide.u32 	%rd50, %r193, 4;
	add.s64 	%rd15, %rd46, %rd50;
	add.s32 	%r194, %r187, %r192;
	mul.wide.u32 	%rd51, %r194, 4;
	add.s64 	%rd16, %rd46, %rd51;
	or.b32  	%r195, %r2, 24;
	mul.lo.s32 	%r196, %r195, 20;
	add.s32 	%r197, %r5, %r196;
	mul.wide.u32 	%rd52, %r197, 4;
	add.s64 	%rd17, %rd46, %rd52;
	add.s32 	%r198, %r187, %r196;
	mul.wide.u32 	%rd53, %r198, 4;
	add.s64 	%rd18, %rd46, %rd53;
	shl.b32 	%r58, %r72, %r8;
	min.u32 	%r59, %r145, 31;
	shl.b32 	%r60, %r72, %r9;
	min.u32 	%r61, %r144, 31;
	and.b16  	%rs2, %rs4, 1;
	and.b16  	%rs3, %rs4, 2;
	shl.b32 	%r200, %r3, 10;
	and.b32  	%r62, %r200, 2080768;
	and.b32  	%r201, %r150, 32;
	shl.b32 	%r202, %r2, 5;
	and.b32  	%r203, %r202, 64;
	or.b32  	%r204, %r201, %r203;
	or.b32  	%r205, %r204, %r51;
	shl.b32 	%r206, %r2, 4;
	and.b32  	%r207, %r206, 16;
	or.b32  	%r63, %r205, %r207;
	shl.b32 	%r208, %r1, 23;
	shl.b32 	%r209, %r2, 18;
	and.b32  	%r210, %r209, 6291456;
	or.b32  	%r64, %r210, %r208;
	mov.u32 	%r143, 0;
	mov.u32 	%r642, %r143;
LBB0_7:                                 // %L839
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	mov.u32 	%r643, %r143;
	mov.u32 	%r644, %r143;
	mov.u32 	%r645, %r143;
	mov.u32 	%r646, %r143;
	mov.u32 	%r647, %r143;
	mov.u32 	%r648, %r143;
	mov.u32 	%r649, %r143;
	mov.u32 	%r650, %r143;
	mov.u32 	%r651, %r143;
	mov.u32 	%r652, %r143;
	mov.u32 	%r653, %r143;
	mov.u32 	%r654, %r143;
	mov.u32 	%r655, %r143;
LBB0_8:                                 // %L842
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r213, %r643, %r642;
	or.b32  	%r214, %r213, %r50;
	or.b32  	%r215, %r214, %r51;
	or.b32  	%r216, %r215, %r52;
	shl.b32 	%r217, %r216, 12;
	or.b32  	%r218, %r217, %r53;
	or.b32  	%r219, %r218, %r4;
	or.b32  	%r220, %r219, %r54;
	mul.wide.s32 	%rd54, %r220, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r221, %r222, %r223, %r224}, [%rd55];
	or.b32  	%r225, %r220, 32768;
	mul.wide.s32 	%rd56, %r225, 4;
	add.s64 	%rd57, %rd2, %rd56;
	ld.global.v4.u32 	{%r226, %r227, %r228, %r229}, [%rd57];
	st.shared.u32 	[%rd7], %r221;
	st.shared.u32 	[%rd8+4], %r222;
	st.shared.u32 	[%rd8+8], %r223;
	st.shared.u32 	[%rd8+12], %r224;
	st.shared.u32 	[%rd9], %r226;
	st.shared.u32 	[%rd10+4], %r227;
	st.shared.u32 	[%rd10+8], %r228;
	st.shared.u32 	[%rd10+12], %r229;
	bar.sync 	0;
	mov.u32 	%r656, %r143;
LBB0_9:                                 // %L2712
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r364, %r656, %r50;
	mad.lo.s32 	%r365, %r364, 17, %r55;
	mul.wide.u32 	%rd58, %r365, 4;
	add.s64 	%rd60, %rd36, %rd58;
	ld.shared.u32 	%r231, [%rd60];
	mov.u32 	%r232, 134744072;
	mov.u32 	%r398, 252645135;
	// begin inline asm
	lop3.b32 %r230, %r231, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r366, %r230, 2021161080;
	xor.b32  	%r241, %r366, -2139062144;
	shr.u32 	%r235, %r231, 4;
	// begin inline asm
	lop3.b32 %r234, %r235, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r367, %r234, 2021161080;
	xor.b32  	%r247, %r367, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r238, %r239}, {%r42}, {%r241}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r244, %r245}, {%r44}, {%r247}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r250, %r251}, {%r42}, {%r247}, {%r143, %r143};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r256, %r257}, {%r44}, {%r241}, {%r250, %r251};
	// end inline asm
	ld.shared.u32 	%r263, [%rd60+4];
	// begin inline asm
	lop3.b32 %r262, %r263, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r368, %r262, 2021161080;
	xor.b32  	%r273, %r368, -2139062144;
	shr.u32 	%r267, %r263, 4;
	// begin inline asm
	lop3.b32 %r266, %r267, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r369, %r266, 2021161080;
	xor.b32  	%r279, %r369, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r270, %r271}, {%r46}, {%r273}, {%r238, %r239};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r276, %r277}, {%r48}, {%r279}, {%r244, %r245};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r282, %r283}, {%r46}, {%r279}, {%r256, %r257};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r288, %r289}, {%r48}, {%r273}, {%r282, %r283};
	// end inline asm
	ld.shared.u32 	%r295, [%rd60+8];
	// begin inline asm
	lop3.b32 %r294, %r295, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r370, %r294, 2021161080;
	xor.b32  	%r305, %r370, -2139062144;
	shr.u32 	%r299, %r295, 4;
	// begin inline asm
	lop3.b32 %r298, %r299, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r371, %r298, 2021161080;
	xor.b32  	%r311, %r371, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r302, %r303}, {%r43}, {%r305}, {%r270, %r271};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r308, %r309}, {%r45}, {%r311}, {%r276, %r277};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r314, %r315}, {%r43}, {%r311}, {%r288, %r289};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r320, %r321}, {%r45}, {%r305}, {%r314, %r315};
	// end inline asm
	ld.shared.u32 	%r327, [%rd60+12];
	// begin inline asm
	lop3.b32 %r326, %r327, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r372, %r326, 2021161080;
	xor.b32  	%r337, %r372, -2139062144;
	shr.u32 	%r331, %r327, 4;
	// begin inline asm
	lop3.b32 %r330, %r331, %r232, %r398, 40;
	// end inline asm
	add.s32 	%r373, %r330, 2021161080;
	xor.b32  	%r343, %r373, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r334, %r335}, {%r47}, {%r337}, {%r302, %r303};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r340, %r341}, {%r49}, {%r343}, {%r308, %r309};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r346, %r347}, {%r47}, {%r343}, {%r320, %r321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r352, %r353}, {%r49}, {%r337}, {%r346, %r347};
	// end inline asm
	sub.s32 	%r374, %r334, %r340;
	add.s32 	%r375, %r374, 2;
	shr.s32 	%r360, %r375, 2;
	add.s32 	%r376, %r352, 2;
	shr.s32 	%r359, %r376, 2;
	sub.s32 	%r377, %r335, %r341;
	add.s32 	%r378, %r377, 2;
	shr.s32 	%r363, %r378, 2;
	add.s32 	%r379, %r353, 2;
	shr.s32 	%r362, %r379, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r358, %r359, %r360;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r361, %r362, %r363;
	// end inline asm
	or.b32  	%r380, %r656, %r56;
	mad.lo.s32 	%r381, %r380, 20, %r57;
	mul.wide.u32 	%rd61, %r381, 4;
	add.s64 	%rd63, %rd46, %rd61;
	st.shared.u32 	[%rd63], %r358;
	add.s32 	%r382, %r381, 20;
	mul.wide.u32 	%rd64, %r382, 4;
	add.s64 	%rd65, %rd46, %rd64;
	st.shared.u32 	[%rd65], %r361;
	add.s32 	%r656, %r656, 8;
	setp.ne.s32 	%p7, %r656, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L3974
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r419, [%rd11];
	ld.shared.u32 	%r420, [%rd12];
	ld.shared.u32 	%r421, [%rd13];
	ld.shared.u32 	%r422, [%rd14];
	ld.shared.u32 	%r423, [%rd15];
	ld.shared.u32 	%r424, [%rd16];
	ld.shared.u32 	%r425, [%rd17];
	ld.shared.u32 	%r426, [%rd18];
	cvt.s32.s16 	%r427, %r419;
	shr.s32 	%r428, %r419, 16;
	cvt.s32.s16 	%r429, %r420;
	shr.s32 	%r430, %r420, 16;
	cvt.s32.s16 	%r431, %r421;
	shr.s32 	%r432, %r421, 16;
	cvt.s32.s16 	%r433, %r422;
	shr.s32 	%r434, %r422, 16;
	cvt.s32.s16 	%r435, %r423;
	shr.s32 	%r436, %r423, 16;
	cvt.s32.s16 	%r437, %r424;
	shr.s32 	%r438, %r424, 16;
	cvt.s32.s16 	%r439, %r425;
	shr.s32 	%r440, %r425, 16;
	cvt.s32.s16 	%r441, %r426;
	shr.s32 	%r442, %r426, 16;
	add.s32 	%r443, %r427, %r58;
	shr.s32 	%r444, %r443, %r59;
	add.s32 	%r445, %r428, %r58;
	shr.s32 	%r446, %r445, %r59;
	add.s32 	%r447, %r429, %r60;
	shr.s32 	%r448, %r447, %r61;
	add.s32 	%r449, %r430, %r60;
	shr.s32 	%r450, %r449, %r61;
	add.s32 	%r451, %r431, %r58;
	shr.s32 	%r452, %r451, %r59;
	add.s32 	%r453, %r432, %r58;
	shr.s32 	%r454, %r453, %r59;
	add.s32 	%r455, %r433, %r60;
	shr.s32 	%r456, %r455, %r61;
	add.s32 	%r457, %r434, %r60;
	shr.s32 	%r458, %r457, %r61;
	add.s32 	%r459, %r435, %r58;
	shr.s32 	%r460, %r459, %r59;
	add.s32 	%r461, %r436, %r58;
	shr.s32 	%r462, %r461, %r59;
	add.s32 	%r463, %r437, %r60;
	shr.s32 	%r464, %r463, %r61;
	add.s32 	%r465, %r438, %r60;
	shr.s32 	%r466, %r465, %r61;
	add.s32 	%r467, %r439, %r58;
	shr.s32 	%r468, %r467, %r59;
	add.s32 	%r469, %r440, %r58;
	shr.s32 	%r470, %r469, %r59;
	add.s32 	%r471, %r441, %r60;
	shr.s32 	%r472, %r471, %r61;
	add.s32 	%r473, %r442, %r60;
	shr.s32 	%r474, %r473, %r61;
	max.s32 	%r475, %r444, -7;
	min.s32 	%r388, %r475, 7;
	max.s32 	%r476, %r446, -7;
	min.s32 	%r395, %r476, 7;
	max.s32 	%r477, %r448, -7;
	min.s32 	%r406, %r477, 7;
	max.s32 	%r478, %r450, -7;
	min.s32 	%r413, %r478, 7;
	max.s32 	%r479, %r452, -7;
	min.s32 	%r387, %r479, 7;
	max.s32 	%r480, %r454, -7;
	min.s32 	%r394, %r480, 7;
	max.s32 	%r481, %r456, -7;
	min.s32 	%r405, %r481, 7;
	max.s32 	%r482, %r458, -7;
	min.s32 	%r412, %r482, 7;
	max.s32 	%r483, %r460, -7;
	min.s32 	%r385, %r483, 7;
	max.s32 	%r484, %r462, -7;
	min.s32 	%r392, %r484, 7;
	max.s32 	%r485, %r464, -7;
	min.s32 	%r403, %r485, 7;
	max.s32 	%r486, %r466, -7;
	min.s32 	%r410, %r486, 7;
	max.s32 	%r487, %r468, -7;
	min.s32 	%r384, %r487, 7;
	max.s32 	%r488, %r470, -7;
	min.s32 	%r391, %r488, 7;
	max.s32 	%r489, %r472, -7;
	min.s32 	%r402, %r489, 7;
	max.s32 	%r490, %r474, -7;
	min.s32 	%r409, %r490, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r383, %r384, %r385, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r386, %r387, %r388, %r383;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r390, %r391, %r392, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r393, %r394, %r395, %r390;
	// end inline asm
	shl.b32 	%r400, %r393, 4;
	// begin inline asm
	lop3.b32 %r509, %r398, %r386, %r400, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r401, %r402, %r403, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r404, %r405, %r406, %r401;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r408, %r409, %r410, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r411, %r412, %r413, %r408;
	// end inline asm
	shl.b32 	%r418, %r411, 4;
	// begin inline asm
	lop3.b32 %r517, %r398, %r404, %r418, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r643, 0;
	selp.b32 	%r654, %r509, %r654, %p8;
	selp.b32 	%r655, %r509, %r655, %p8;
	setp.eq.s32 	%p9, %r643, 32;
	selp.b32 	%r646, %r509, %r646, %p9;
	selp.b32 	%r647, %r509, %r647, %p9;
	setp.eq.s32 	%p10, %r643, 64;
	selp.b32 	%r652, %r509, %r652, %p10;
	selp.b32 	%r653, %r509, %r653, %p10;
	selp.b32 	%r650, %r517, %r650, %p8;
	selp.b32 	%r651, %r517, %r651, %p8;
	selp.b32 	%r644, %r517, %r644, %p9;
	selp.b32 	%r645, %r517, %r645, %p9;
	selp.b32 	%r648, %r517, %r648, %p10;
	selp.b32 	%r649, %r517, %r649, %p10;
	add.s32 	%r40, %r643, 32;
	setp.ne.s32 	%p11, %r643, 96;
	mov.u32 	%r643, %r40;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L5528
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	setp.eq.s16 	%p13, %rs2, 0;
	// begin inline asm
	prmt.b32 %r491, %r654, %r646, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r495, %r655, %r647, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r499, %r650, %r644, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r503, %r651, %r645, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r652, %r509, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r653, %r509, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r648, %r517, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r649, %r517, %r142;
	// end inline asm
	selp.b32 	%r587, %r495, %r491, %p13;
	shfl.sync.bfly.b32	%r588, %r587, 1, 31, -1;
	selp.b32 	%r524, %r491, %r588, %p13;
	selp.b32 	%r525, %r588, %r495, %p13;
	selp.b32 	%r589, %r503, %r499, %p13;
	shfl.sync.bfly.b32	%r590, %r589, 1, 31, -1;
	selp.b32 	%r532, %r499, %r590, %p13;
	selp.b32 	%r533, %r590, %r503, %p13;
	selp.b32 	%r591, %r511, %r507, %p13;
	shfl.sync.bfly.b32	%r592, %r591, 1, 31, -1;
	selp.b32 	%r540, %r507, %r592, %p13;
	selp.b32 	%r541, %r592, %r511, %p13;
	selp.b32 	%r593, %r519, %r515, %p13;
	shfl.sync.bfly.b32	%r594, %r593, 1, 31, -1;
	selp.b32 	%r548, %r515, %r594, %p13;
	selp.b32 	%r549, %r594, %r519, %p13;
	// begin inline asm
	prmt.b32 %r523, %r524, %r525, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r524, %r525, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r532, %r533, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r532, %r533, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r540, %r541, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r540, %r541, %r142;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r548, %r549, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r548, %r549, %r142;
	// end inline asm
	selp.b32 	%r595, %r539, %r523, %p12;
	shfl.sync.bfly.b32	%r596, %r595, 2, 31, -1;
	selp.b32 	%r556, %r523, %r596, %p12;
	selp.b32 	%r557, %r596, %r539, %p12;
	selp.b32 	%r597, %r547, %r531, %p12;
	shfl.sync.bfly.b32	%r598, %r597, 2, 31, -1;
	selp.b32 	%r564, %r531, %r598, %p12;
	selp.b32 	%r565, %r598, %r547, %p12;
	selp.b32 	%r599, %r543, %r527, %p12;
	shfl.sync.bfly.b32	%r600, %r599, 2, 31, -1;
	selp.b32 	%r572, %r527, %r600, %p12;
	selp.b32 	%r573, %r600, %r543, %p12;
	selp.b32 	%r601, %r551, %r535, %p12;
	shfl.sync.bfly.b32	%r602, %r601, 2, 31, -1;
	selp.b32 	%r580, %r535, %r602, %p12;
	selp.b32 	%r581, %r602, %r551, %p12;
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r572, %r573, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r575, %r572, %r573, %r110;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r580, %r581, %r106;
	// end inline asm
	// begin inline asm
	prmt.b32 %r583, %r580, %r581, %r110;
	// end inline asm
	selp.b32 	%r603, %r571, %r555, %p6;
	shfl.sync.bfly.b32	%r604, %r603, 4, 31, -1;
	selp.b32 	%r605, %r555, %r604, %p6;
	selp.b32 	%r606, %r604, %r571, %p6;
	selp.b32 	%r607, %r579, %r563, %p6;
	shfl.sync.bfly.b32	%r608, %r607, 4, 31, -1;
	selp.b32 	%r609, %r563, %r608, %p6;
	selp.b32 	%r610, %r608, %r579, %p6;
	selp.b32 	%r611, %r575, %r559, %p6;
	shfl.sync.bfly.b32	%r612, %r611, 4, 31, -1;
	selp.b32 	%r613, %r559, %r612, %p6;
	selp.b32 	%r614, %r612, %r575, %p6;
	selp.b32 	%r615, %r583, %r567, %p6;
	shfl.sync.bfly.b32	%r616, %r615, 4, 31, -1;
	selp.b32 	%r617, %r567, %r616, %p6;
	selp.b32 	%r618, %r616, %r583, %p6;
	selp.b32 	%r619, %r613, %r605, %p13;
	shfl.sync.bfly.b32	%r620, %r619, 1, 31, -1;
	selp.b32 	%r621, %r605, %r620, %p13;
	selp.b32 	%r622, %r620, %r613, %p13;
	selp.b32 	%r623, %r617, %r609, %p13;
	shfl.sync.bfly.b32	%r624, %r623, 1, 31, -1;
	selp.b32 	%r625, %r609, %r624, %p13;
	selp.b32 	%r626, %r624, %r617, %p13;
	selp.b32 	%r627, %r614, %r606, %p13;
	shfl.sync.bfly.b32	%r628, %r627, 1, 31, -1;
	selp.b32 	%r629, %r606, %r628, %p13;
	selp.b32 	%r630, %r628, %r614, %p13;
	selp.b32 	%r631, %r618, %r610, %p13;
	shfl.sync.bfly.b32	%r632, %r631, 1, 31, -1;
	selp.b32 	%r633, %r610, %r632, %p13;
	selp.b32 	%r634, %r632, %r618, %p13;
	or.b32  	%r635, %r63, %r642;
	shr.u32 	%r636, %r635, 2;
	or.b32  	%r637, %r636, %r62;
	add.s32 	%r638, %r64, %r637;
	mul.wide.u32 	%rd66, %r638, 4;
	add.s64 	%rd67, %rd4, %rd66;
	st.global.v4.u32 	[%rd67], {%r621, %r629, %r622, %r630};
	or.b32  	%r639, %r637, 8192;
	add.s32 	%r640, %r64, %r639;
	mul.wide.u32 	%rd68, %r640, 4;
	add.s64 	%rd69, %rd4, %rd68;
	st.global.v4.u32 	[%rd69], {%r625, %r633, %r626, %r634};
	add.s32 	%r41, %r642, 128;
	setp.ne.s32 	%p15, %r642, 1920;
	mov.u32 	%r642, %r41;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6233
	mov.u32 	%r641, 0;
	st.global.u32 	[%rd6], %r641;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L348
	mov.u32 	%r78, 2;
	st.global.u32 	[%rd6], %r78;
	mov.u64 	%rd29, exception500;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
