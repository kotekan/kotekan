// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<661>;
	.reg .b64 	%rd<72>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r69, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r70, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r70, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	// begin inline asm
	mov.u32 %r71, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r71, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L31
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r72, %r1, 7;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r73, %r3, 5;
	or.b32  	%r74, %r2, %r72;
	or.b32  	%r75, %r74, %r73;
	mul.wide.u32 	%rd25, %r75, 4;
	add.s64 	%rd6, %rd5, %rd25;
	mov.u32 	%r76, 1;
	st.global.u32 	[%rd6], %r76;
	shl.b32 	%r77, %r3, 2;
	shr.u32 	%r78, %r2, 3;
	or.b32  	%r4, %r78, %r77;
	shl.b32 	%r79, %r1, 1;
	and.b32  	%r5, %r79, 4064;
	or.b32  	%r80, %r4, %r5;
	mul.wide.u32 	%rd26, %r80, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r6, [%rd27];
	or.b32  	%r81, %r80, 16;
	mul.wide.u32 	%rd28, %r81, 4;
	add.s64 	%rd29, %rd3, %rd28;
	ld.global.u32 	%r7, [%rd29];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L479
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r148, %r7, -2;
	add.s32 	%r149, %r6, -2;
	shl.b32 	%r150, %r3, 8;
	shl.b32 	%r151, %r2, 3;
	or.b32  	%r152, %r151, %r150;
	and.b32  	%r153, %r152, 448;
	and.b32  	%r154, %r150, 512;
	shl.b32 	%r155, %r1, 6;
	and.b32  	%r156, %r155, 130048;
	and.b32  	%r10, %r2, 4;
	and.b32  	%r157, %r151, 24;
	or.b32  	%r158, %r10, %r157;
	or.b32  	%r159, %r154, %r153;
	or.b32  	%r160, %r159, %r156;
	or.b32  	%r161, %r160, %r158;
	shl.b32 	%r162, %r161, 2;
	cvt.u64.u32 	%rd32, %r162;
	add.s64 	%rd33, %rd32, %rd1;
	ld.global.v4.u32 	{%r84, %r85, %r92, %r93}, [%rd33];
	ld.global.v4.u32 	{%r100, %r101, %r108, %r109}, [%rd33+128];
	mov.u32 	%r86, 21520;
	// begin inline asm
	prmt.b32 %r116, %r84, %r85, %r86;
	// end inline asm
	mov.u32 	%r90, 30258;
	// begin inline asm
	prmt.b32 %r117, %r84, %r85, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r124, %r92, %r93, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r125, %r92, %r93, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r132, %r100, %r101, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r133, %r100, %r101, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r140, %r108, %r109, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r141, %r108, %r109, %r90;
	// end inline asm
	mov.u32 	%r118, 25152;
	// begin inline asm
	prmt.b32 %r115, %r116, %r117, %r118;
	// end inline asm
	mov.u32 	%r122, 29521;
	// begin inline asm
	prmt.b32 %r119, %r116, %r117, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r124, %r125, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r124, %r125, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r132, %r133, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r132, %r133, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r140, %r141, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r143, %r140, %r141, %r122;
	// end inline asm
	shr.u32 	%r11, %r2, 2;
	setp.eq.s32 	%p6, %r10, 0;
	selp.b32 	%r163, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r164, %r163, 4, 31, -1;
	selp.b32 	%r241, %r115, %r164, %p6;
	selp.b32 	%r305, %r164, %r131, %p6;
	selp.b32 	%r165, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r166, %r165, 4, 31, -1;
	selp.b32 	%r247, %r119, %r166, %p6;
	selp.b32 	%r311, %r166, %r135, %p6;
	selp.b32 	%r167, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r168, %r167, 4, 31, -1;
	selp.b32 	%r273, %r123, %r168, %p6;
	selp.b32 	%r337, %r168, %r139, %p6;
	selp.b32 	%r169, %r143, %r127, %p6;
	shfl.sync.bfly.b32	%r170, %r169, 4, 31, -1;
	selp.b32 	%r279, %r127, %r170, %p6;
	selp.b32 	%r343, %r170, %r143, %p6;
	shl.b32 	%r171, %r3, 3;
	and.b32  	%r172, %r171, 16;
	shl.b32 	%r173, %r2, 2;
	and.b32  	%r174, %r173, 12;
	shl.b32 	%r175, %r1, 11;
	and.b32  	%r20, %r175, 30720;
	shl.b32 	%r176, %r3, 4;
	and.b32  	%r21, %r176, 16;
	or.b32  	%r22, %r172, %r174;
	or.b32  	%r23, %r22, %r5;
	shr.u32 	%r177, %r3, 1;
	mul.lo.s32 	%r178, %r177, 544;
	or.b32  	%r179, %r21, %r11;
	mul.lo.s32 	%r180, %r179, 17;
	or.b32  	%r181, %r178, %r174;
	add.s32 	%r182, %r181, %r180;
	mul.wide.u32 	%rd34, %r182, 4;
	mov.u64 	%rd35, shmem;
	add.s64 	%rd7, %rd35, %rd34;
	cvt.u64.u32 	%rd36, %r180;
	cvt.u64.u32 	%rd8, %r181;
	add.s64 	%rd37, %rd8, %rd36;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd9, %rd35, %rd38;
	or.b32  	%r183, %r179, 8;
	mul.lo.s32 	%r184, %r183, 17;
	add.s32 	%r185, %r181, %r184;
	mul.wide.u32 	%rd39, %r185, 4;
	add.s64 	%rd10, %rd35, %rd39;
	cvt.u64.u32 	%rd40, %r184;
	add.s64 	%rd41, %rd8, %rd40;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd11, %rd35, %rd42;
	and.b32  	%r186, %r171, 8;
	or.b32  	%r187, %r186, %r11;
	mul.lo.s32 	%r188, %r177, 640;
	shl.b32 	%r189, %r2, 1;
	and.b32  	%r24, %r189, 6;
	or.b32  	%r25, %r187, %r188;
	and.b32  	%r190, %r2, 7;
	mul.lo.s32 	%r191, %r190, 20;
	add.s32 	%r192, %r191, %r4;
	mul.wide.u32 	%rd43, %r192, 4;
	add.s64 	%rd44, %rd35, 4352;
	add.s64 	%rd12, %rd44, %rd43;
	or.b32  	%r193, %r4, 640;
	add.s32 	%r194, %r191, %r193;
	mul.wide.u32 	%rd45, %r194, 4;
	add.s64 	%rd13, %rd44, %rd45;
	add.s32 	%r195, %r191, 160;
	add.s32 	%r196, %r195, %r4;
	mul.wide.u32 	%rd46, %r196, 4;
	add.s64 	%rd14, %rd44, %rd46;
	add.s32 	%r197, %r195, %r193;
	mul.wide.u32 	%rd47, %r197, 4;
	add.s64 	%rd15, %rd44, %rd47;
	add.s32 	%r198, %r191, 320;
	add.s32 	%r199, %r198, %r4;
	mul.wide.u32 	%rd48, %r199, 4;
	add.s64 	%rd16, %rd44, %rd48;
	add.s32 	%r200, %r198, %r193;
	mul.wide.u32 	%rd49, %r200, 4;
	add.s64 	%rd17, %rd44, %rd49;
	or.b32  	%r201, %r2, 24;
	mul.lo.s32 	%r202, %r201, 20;
	add.s32 	%r203, %r202, %r4;
	mul.wide.u32 	%rd50, %r203, 4;
	add.s64 	%rd18, %rd44, %rd50;
	add.s32 	%r204, %r202, %r193;
	mul.wide.u32 	%rd51, %r204, 4;
	add.s64 	%rd19, %rd44, %rd51;
	shl.b32 	%r26, %r76, %r8;
	min.u32 	%r27, %r149, 31;
	shl.b32 	%r28, %r76, %r9;
	min.u32 	%r29, %r148, 31;
	and.b32  	%r30, %r2, 1;
	and.b32  	%r31, %r2, 2;
	shl.b32 	%r206, %r3, 25;
	shl.b32 	%r207, %r2, 20;
	and.b32  	%r208, %r207, 25165824;
	or.b32  	%r32, %r208, %r206;
	and.b32  	%r33, %r151, 32;
	shl.b32 	%r209, %r2, 4;
	and.b32  	%r34, %r209, 16;
	shl.b32 	%r210, %r2, 5;
	and.b32  	%r35, %r210, 64;
	shl.b32 	%r211, %r1, 12;
	and.b32  	%r36, %r211, 8323072;
	mov.u32 	%r243, 0;
	mov.u32 	%r646, %r243;
LBB0_7:                                 // %L951
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	mov.u32 	%r647, %r243;
	mov.u32 	%r648, %r243;
	mov.u32 	%r649, %r243;
	mov.u32 	%r650, %r243;
	mov.u32 	%r651, %r243;
	mov.u32 	%r652, %r243;
	mov.u32 	%r653, %r243;
	mov.u32 	%r654, %r243;
	mov.u32 	%r655, %r243;
	mov.u32 	%r656, %r243;
	mov.u32 	%r657, %r243;
	mov.u32 	%r658, %r243;
	mov.u32 	%r659, %r243;
LBB0_8:                                 // %L954
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r214, %r647, %r646;
	or.b32  	%r215, %r214, %r20;
	or.b32  	%r216, %r215, %r11;
	or.b32  	%r217, %r216, %r21;
	shl.b32 	%r218, %r217, 12;
	or.b32  	%r219, %r218, %r22;
	or.b32  	%r220, %r219, %r5;
	mul.wide.s32 	%rd52, %r220, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r221, %r222, %r223, %r224}, [%rd53];
	or.b32  	%r225, %r23, %r218;
	or.b32  	%r226, %r225, 32768;
	mul.wide.s32 	%rd54, %r226, 4;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.v4.u32 	{%r227, %r228, %r229, %r230}, [%rd55];
	st.shared.u32 	[%rd7], %r221;
	st.shared.u32 	[%rd9+4], %r222;
	st.shared.u32 	[%rd9+8], %r223;
	st.shared.u32 	[%rd9+12], %r224;
	st.shared.u32 	[%rd10], %r227;
	st.shared.u32 	[%rd11+4], %r228;
	st.shared.u32 	[%rd11+8], %r229;
	st.shared.u32 	[%rd11+12], %r230;
	bar.sync 	0;
	mov.u32 	%r660, %r243;
LBB0_9:                                 // %L3027
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	cvt.u32.u64 	%r365, %rd8;
	or.b32  	%r366, %r11, %r660;
	mul.lo.s32 	%r367, %r366, 17;
	add.s32 	%r368, %r365, %r367;
	mul.wide.u32 	%rd56, %r368, 4;
	add.s64 	%rd58, %rd35, %rd56;
	ld.shared.u32 	%r232, [%rd58];
	mov.u32 	%r233, 134744072;
	mov.u32 	%r401, 252645135;
	// begin inline asm
	lop3.b32 %r231, %r232, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r369, %r231, 2021161080;
	xor.b32  	%r242, %r369, -2139062144;
	shr.u32 	%r236, %r232, 4;
	// begin inline asm
	lop3.b32 %r235, %r236, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r370, %r235, 2021161080;
	xor.b32  	%r248, %r370, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r239, %r240}, {%r241}, {%r242}, {%r243, %r243};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r245, %r246}, {%r247}, {%r248}, {%r243, %r243};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r251, %r252}, {%r241}, {%r248}, {%r243, %r243};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r257, %r258}, {%r247}, {%r242}, {%r251, %r252};
	// end inline asm
	cvt.u64.u32 	%rd59, %r367;
	add.s64 	%rd60, %rd8, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd62, %rd35, %rd61;
	ld.shared.u32 	%r264, [%rd62+4];
	// begin inline asm
	lop3.b32 %r263, %r264, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r371, %r263, 2021161080;
	xor.b32  	%r274, %r371, -2139062144;
	shr.u32 	%r268, %r264, 4;
	// begin inline asm
	lop3.b32 %r267, %r268, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r372, %r267, 2021161080;
	xor.b32  	%r280, %r372, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r271, %r272}, {%r273}, {%r274}, {%r239, %r240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r277, %r278}, {%r279}, {%r280}, {%r245, %r246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r283, %r284}, {%r273}, {%r280}, {%r257, %r258};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r289, %r290}, {%r279}, {%r274}, {%r283, %r284};
	// end inline asm
	ld.shared.u32 	%r296, [%rd62+8];
	// begin inline asm
	lop3.b32 %r295, %r296, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r373, %r295, 2021161080;
	xor.b32  	%r306, %r373, -2139062144;
	shr.u32 	%r300, %r296, 4;
	// begin inline asm
	lop3.b32 %r299, %r300, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r374, %r299, 2021161080;
	xor.b32  	%r312, %r374, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r303, %r304}, {%r305}, {%r306}, {%r271, %r272};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r309, %r310}, {%r311}, {%r312}, {%r277, %r278};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r315, %r316}, {%r305}, {%r312}, {%r289, %r290};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r321, %r322}, {%r311}, {%r306}, {%r315, %r316};
	// end inline asm
	ld.shared.u32 	%r328, [%rd62+12];
	// begin inline asm
	lop3.b32 %r327, %r328, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r375, %r327, 2021161080;
	xor.b32  	%r338, %r375, -2139062144;
	shr.u32 	%r332, %r328, 4;
	// begin inline asm
	lop3.b32 %r331, %r332, %r233, %r401, 40;
	// end inline asm
	add.s32 	%r376, %r331, 2021161080;
	xor.b32  	%r344, %r376, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r335, %r336}, {%r337}, {%r338}, {%r303, %r304};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r341, %r342}, {%r343}, {%r344}, {%r309, %r310};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r347, %r348}, {%r337}, {%r344}, {%r321, %r322};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r353, %r354}, {%r343}, {%r338}, {%r347, %r348};
	// end inline asm
	sub.s32 	%r377, %r335, %r341;
	add.s32 	%r378, %r377, 2;
	shr.s32 	%r361, %r378, 2;
	add.s32 	%r379, %r353, 2;
	shr.s32 	%r360, %r379, 2;
	sub.s32 	%r380, %r336, %r342;
	add.s32 	%r381, %r380, 2;
	shr.s32 	%r364, %r381, 2;
	add.s32 	%r382, %r354, 2;
	shr.s32 	%r363, %r382, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r359, %r360, %r361;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r362, %r363, %r364;
	// end inline asm
	or.b32  	%r383, %r24, %r660;
	mad.lo.s32 	%r384, %r383, 20, %r25;
	mul.wide.u32 	%rd63, %r384, 4;
	add.s64 	%rd65, %rd44, %rd63;
	st.shared.u32 	[%rd65], %r359;
	add.s32 	%r385, %r384, 20;
	mul.wide.u32 	%rd66, %r385, 4;
	add.s64 	%rd67, %rd44, %rd66;
	st.shared.u32 	[%rd67], %r362;
	add.s32 	%r660, %r660, 8;
	setp.ne.s32 	%p7, %r660, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L4425
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r422, [%rd12];
	ld.shared.u32 	%r423, [%rd13];
	ld.shared.u32 	%r424, [%rd14];
	ld.shared.u32 	%r425, [%rd15];
	ld.shared.u32 	%r426, [%rd16];
	ld.shared.u32 	%r427, [%rd17];
	ld.shared.u32 	%r428, [%rd18];
	ld.shared.u32 	%r429, [%rd19];
	cvt.s32.s16 	%r430, %r422;
	shr.s32 	%r431, %r422, 16;
	cvt.s32.s16 	%r432, %r423;
	shr.s32 	%r433, %r423, 16;
	cvt.s32.s16 	%r434, %r424;
	shr.s32 	%r435, %r424, 16;
	cvt.s32.s16 	%r436, %r425;
	shr.s32 	%r437, %r425, 16;
	cvt.s32.s16 	%r438, %r426;
	shr.s32 	%r439, %r426, 16;
	cvt.s32.s16 	%r440, %r427;
	shr.s32 	%r441, %r427, 16;
	cvt.s32.s16 	%r442, %r428;
	shr.s32 	%r443, %r428, 16;
	cvt.s32.s16 	%r444, %r429;
	shr.s32 	%r445, %r429, 16;
	add.s32 	%r446, %r430, %r26;
	shr.s32 	%r447, %r446, %r27;
	add.s32 	%r448, %r431, %r26;
	shr.s32 	%r449, %r448, %r27;
	add.s32 	%r450, %r432, %r28;
	shr.s32 	%r451, %r450, %r29;
	add.s32 	%r452, %r433, %r28;
	shr.s32 	%r453, %r452, %r29;
	add.s32 	%r454, %r434, %r26;
	shr.s32 	%r455, %r454, %r27;
	add.s32 	%r456, %r435, %r26;
	shr.s32 	%r457, %r456, %r27;
	add.s32 	%r458, %r436, %r28;
	shr.s32 	%r459, %r458, %r29;
	add.s32 	%r460, %r437, %r28;
	shr.s32 	%r461, %r460, %r29;
	add.s32 	%r462, %r438, %r26;
	shr.s32 	%r463, %r462, %r27;
	add.s32 	%r464, %r439, %r26;
	shr.s32 	%r465, %r464, %r27;
	add.s32 	%r466, %r440, %r28;
	shr.s32 	%r467, %r466, %r29;
	add.s32 	%r468, %r441, %r28;
	shr.s32 	%r469, %r468, %r29;
	add.s32 	%r470, %r442, %r26;
	shr.s32 	%r471, %r470, %r27;
	add.s32 	%r472, %r443, %r26;
	shr.s32 	%r473, %r472, %r27;
	add.s32 	%r474, %r444, %r28;
	shr.s32 	%r475, %r474, %r29;
	add.s32 	%r476, %r445, %r28;
	shr.s32 	%r477, %r476, %r29;
	max.s32 	%r478, %r447, -7;
	min.s32 	%r391, %r478, 7;
	max.s32 	%r479, %r449, -7;
	min.s32 	%r398, %r479, 7;
	max.s32 	%r480, %r451, -7;
	min.s32 	%r409, %r480, 7;
	max.s32 	%r481, %r453, -7;
	min.s32 	%r416, %r481, 7;
	max.s32 	%r482, %r455, -7;
	min.s32 	%r390, %r482, 7;
	max.s32 	%r483, %r457, -7;
	min.s32 	%r397, %r483, 7;
	max.s32 	%r484, %r459, -7;
	min.s32 	%r408, %r484, 7;
	max.s32 	%r485, %r461, -7;
	min.s32 	%r415, %r485, 7;
	max.s32 	%r486, %r463, -7;
	min.s32 	%r388, %r486, 7;
	max.s32 	%r487, %r465, -7;
	min.s32 	%r395, %r487, 7;
	max.s32 	%r488, %r467, -7;
	min.s32 	%r406, %r488, 7;
	max.s32 	%r489, %r469, -7;
	min.s32 	%r413, %r489, 7;
	max.s32 	%r490, %r471, -7;
	min.s32 	%r387, %r490, 7;
	max.s32 	%r491, %r473, -7;
	min.s32 	%r394, %r491, 7;
	max.s32 	%r492, %r475, -7;
	min.s32 	%r405, %r492, 7;
	max.s32 	%r493, %r477, -7;
	min.s32 	%r412, %r493, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r386, %r387, %r388, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r389, %r390, %r391, %r386;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r393, %r394, %r395, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r396, %r397, %r398, %r393;
	// end inline asm
	shl.b32 	%r403, %r396, 4;
	// begin inline asm
	lop3.b32 %r512, %r401, %r389, %r403, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r404, %r405, %r406, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r407, %r408, %r409, %r404;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r411, %r412, %r413, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r414, %r415, %r416, %r411;
	// end inline asm
	shl.b32 	%r421, %r414, 4;
	// begin inline asm
	lop3.b32 %r520, %r401, %r407, %r421, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r647, 0;
	selp.b32 	%r658, %r512, %r658, %p8;
	selp.b32 	%r659, %r512, %r659, %p8;
	setp.eq.s32 	%p9, %r647, 32;
	selp.b32 	%r650, %r512, %r650, %p9;
	selp.b32 	%r651, %r512, %r651, %p9;
	setp.eq.s32 	%p10, %r647, 64;
	selp.b32 	%r656, %r512, %r656, %p10;
	selp.b32 	%r657, %r512, %r657, %p10;
	selp.b32 	%r654, %r520, %r654, %p8;
	selp.b32 	%r655, %r520, %r655, %p8;
	selp.b32 	%r648, %r520, %r648, %p9;
	selp.b32 	%r649, %r520, %r649, %p9;
	selp.b32 	%r652, %r520, %r652, %p10;
	selp.b32 	%r653, %r520, %r653, %p10;
	add.s32 	%r67, %r647, 32;
	setp.ne.s32 	%p11, %r647, 96;
	mov.u32 	%r647, %r67;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L6159
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s32 	%p12, %r31, 0;
	setp.eq.s32 	%p13, %r30, 0;
	// begin inline asm
	prmt.b32 %r494, %r658, %r650, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r659, %r651, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r654, %r648, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r655, %r649, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r656, %r512, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r657, %r512, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r652, %r520, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r653, %r520, %r122;
	// end inline asm
	selp.b32 	%r590, %r498, %r494, %p13;
	shfl.sync.bfly.b32	%r591, %r590, 1, 31, -1;
	selp.b32 	%r527, %r494, %r591, %p13;
	selp.b32 	%r528, %r591, %r498, %p13;
	selp.b32 	%r592, %r506, %r502, %p13;
	shfl.sync.bfly.b32	%r593, %r592, 1, 31, -1;
	selp.b32 	%r535, %r502, %r593, %p13;
	selp.b32 	%r536, %r593, %r506, %p13;
	selp.b32 	%r594, %r514, %r510, %p13;
	shfl.sync.bfly.b32	%r595, %r594, 1, 31, -1;
	selp.b32 	%r543, %r510, %r595, %p13;
	selp.b32 	%r544, %r595, %r514, %p13;
	selp.b32 	%r596, %r522, %r518, %p13;
	shfl.sync.bfly.b32	%r597, %r596, 1, 31, -1;
	selp.b32 	%r551, %r518, %r597, %p13;
	selp.b32 	%r552, %r597, %r522, %p13;
	// begin inline asm
	prmt.b32 %r526, %r527, %r528, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r527, %r528, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r535, %r536, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r535, %r536, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r543, %r544, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r543, %r544, %r122;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r551, %r552, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r551, %r552, %r122;
	// end inline asm
	selp.b32 	%r598, %r542, %r526, %p12;
	shfl.sync.bfly.b32	%r599, %r598, 2, 31, -1;
	selp.b32 	%r559, %r526, %r599, %p12;
	selp.b32 	%r560, %r599, %r542, %p12;
	selp.b32 	%r600, %r550, %r534, %p12;
	shfl.sync.bfly.b32	%r601, %r600, 2, 31, -1;
	selp.b32 	%r567, %r534, %r601, %p12;
	selp.b32 	%r568, %r601, %r550, %p12;
	selp.b32 	%r602, %r546, %r530, %p12;
	shfl.sync.bfly.b32	%r603, %r602, 2, 31, -1;
	selp.b32 	%r575, %r530, %r603, %p12;
	selp.b32 	%r576, %r603, %r546, %p12;
	selp.b32 	%r604, %r554, %r538, %p12;
	shfl.sync.bfly.b32	%r605, %r604, 2, 31, -1;
	selp.b32 	%r583, %r538, %r605, %p12;
	selp.b32 	%r584, %r605, %r554, %p12;
	// begin inline asm
	prmt.b32 %r558, %r559, %r560, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r559, %r560, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r567, %r568, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r567, %r568, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r575, %r576, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r575, %r576, %r90;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r583, %r584, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r583, %r584, %r90;
	// end inline asm
	selp.b32 	%r606, %r574, %r558, %p6;
	shfl.sync.bfly.b32	%r607, %r606, 4, 31, -1;
	selp.b32 	%r608, %r558, %r607, %p6;
	selp.b32 	%r609, %r607, %r574, %p6;
	selp.b32 	%r610, %r582, %r566, %p6;
	shfl.sync.bfly.b32	%r611, %r610, 4, 31, -1;
	selp.b32 	%r612, %r566, %r611, %p6;
	selp.b32 	%r613, %r611, %r582, %p6;
	selp.b32 	%r614, %r578, %r562, %p6;
	shfl.sync.bfly.b32	%r615, %r614, 4, 31, -1;
	selp.b32 	%r616, %r562, %r615, %p6;
	selp.b32 	%r617, %r615, %r578, %p6;
	selp.b32 	%r618, %r586, %r570, %p6;
	shfl.sync.bfly.b32	%r619, %r618, 4, 31, -1;
	selp.b32 	%r620, %r570, %r619, %p6;
	selp.b32 	%r621, %r619, %r586, %p6;
	selp.b32 	%r622, %r616, %r608, %p13;
	shfl.sync.bfly.b32	%r623, %r622, 1, 31, -1;
	selp.b32 	%r624, %r608, %r623, %p13;
	selp.b32 	%r625, %r623, %r616, %p13;
	selp.b32 	%r626, %r620, %r612, %p13;
	shfl.sync.bfly.b32	%r627, %r626, 1, 31, -1;
	selp.b32 	%r628, %r612, %r627, %p13;
	selp.b32 	%r629, %r627, %r620, %p13;
	selp.b32 	%r630, %r617, %r609, %p13;
	shfl.sync.bfly.b32	%r631, %r630, 1, 31, -1;
	selp.b32 	%r632, %r609, %r631, %p13;
	selp.b32 	%r633, %r631, %r617, %p13;
	selp.b32 	%r634, %r621, %r613, %p13;
	shfl.sync.bfly.b32	%r635, %r634, 1, 31, -1;
	selp.b32 	%r636, %r613, %r635, %p13;
	selp.b32 	%r637, %r635, %r621, %p13;
	or.b32  	%r638, %r32, %r646;
	or.b32  	%r639, %r638, %r20;
	or.b32  	%r640, %r639, %r33;
	or.b32  	%r641, %r640, %r34;
	or.b32  	%r642, %r641, %r35;
	or.b32  	%r643, %r642, %r36;
	cvt.u64.u32 	%rd68, %r643;
	add.s64 	%rd69, %rd4, %rd68;
	st.global.v4.u32 	[%rd69], {%r624, %r632, %r625, %r633};
	or.b32  	%r644, %r643, 32768;
	cvt.u64.u32 	%rd70, %r644;
	add.s64 	%rd71, %rd4, %rd70;
	st.global.v4.u32 	[%rd71], {%r628, %r636, %r629, %r637};
	add.s32 	%r68, %r646, 128;
	setp.ne.s32 	%p15, %r646, 1920;
	mov.u32 	%r646, %r68;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6948
	mov.u32 	%r645, 0;
	st.global.u32 	[%rd6], %r645;
	ret;
LBB0_1:                                 // %L9
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L29
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L374
	mov.u32 	%r82, 2;
	st.global.u32 	[%rd6], %r82;
	mov.u64 	%rd30, exception500;
	cvta.global.u64 	%rd31, %rd30;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd31;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r69;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
