// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception500[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<16>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<655>;
	.reg .b64 	%rd<73>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r65, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd19, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r66, 4351;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r67, 9471;
	@%p2 bra 	LBB0_4;
	bra.uni 	LBB0_3;
LBB0_4:                                 // %L27
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_3];
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r68, %r1, 7;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r69, %r2, 5;
	mov.u32 	%r3, %tid.x;
	or.b32  	%r70, %r69, %r3;
	or.b32  	%r71, %r70, %r68;
	mul.wide.u32 	%rd24, %r71, 4;
	add.s64 	%rd6, %rd5, %rd24;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd6], %r72;
	shr.u32 	%r73, %r3, 3;
	shl.b32 	%r74, %r2, 2;
	or.b32  	%r4, %r73, %r74;
	shl.b32 	%r75, %r1, 1;
	and.b32  	%r5, %r75, 4064;
	or.b32  	%r76, %r4, %r5;
	mul.wide.u32 	%rd25, %r76, 4;
	add.s64 	%rd26, %rd3, %rd25;
	ld.global.u32 	%r6, [%rd26];
	or.b32  	%r77, %r76, 16;
	mul.wide.u32 	%rd27, %r77, 4;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.u32 	%r7, [%rd28];
	add.s32 	%r8, %r6, -3;
	setp.lt.u32 	%p3, %r8, 31;
	add.s32 	%r9, %r7, -3;
	setp.lt.u32 	%p4, %r9, 31;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_6;
	bra.uni 	LBB0_5;
LBB0_6:                                 // %L426
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_1];
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_2];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_I5Int32Li1ELi1EES_IS1_Li1ELi1EES_IS2_Li1ELi1EE_param_4];
	add.s32 	%r144, %r7, -2;
	add.s32 	%r145, %r6, -2;
	and.b32  	%r146, %r3, 4;
	shl.b32 	%r147, %r3, 3;
	and.b32  	%r148, %r147, 24;
	shl.b32 	%r149, %r2, 8;
	or.b32  	%r150, %r149, %r147;
	and.b32  	%r151, %r150, 448;
	shl.b32 	%r152, %r1, 6;
	and.b32  	%r153, %r152, 130048;
	and.b32  	%r154, %r149, 512;
	or.b32  	%r155, %r148, %r146;
	or.b32  	%r156, %r155, %r153;
	or.b32  	%r157, %r156, %r154;
	or.b32  	%r158, %r157, %r151;
	shl.b32 	%r159, %r158, 2;
	cvt.u64.u32 	%rd31, %r159;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r80, %r81, %r88, %r89}, [%rd32];
	ld.global.v4.u32 	{%r96, %r97, %r104, %r105}, [%rd32+128];
	mov.u32 	%r82, 21520;
	// begin inline asm
	prmt.b32 %r112, %r80, %r81, %r82;
	// end inline asm
	mov.u32 	%r86, 30258;
	// begin inline asm
	prmt.b32 %r113, %r80, %r81, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r120, %r88, %r89, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r121, %r88, %r89, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r128, %r96, %r97, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r129, %r96, %r97, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r136, %r104, %r105, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r137, %r104, %r105, %r86;
	// end inline asm
	mov.u32 	%r114, 25152;
	// begin inline asm
	prmt.b32 %r111, %r112, %r113, %r114;
	// end inline asm
	mov.u32 	%r118, 29521;
	// begin inline asm
	prmt.b32 %r115, %r112, %r113, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r119, %r120, %r121, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r123, %r120, %r121, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r127, %r128, %r129, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r131, %r128, %r129, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r135, %r136, %r137, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r139, %r136, %r137, %r118;
	// end inline asm
	cvt.u16.u32 	%rs4, %r3;
	and.b16  	%rs1, %rs4, 4;
	setp.eq.s16 	%p6, %rs1, 0;
	selp.b32 	%r160, %r127, %r111, %p6;
	shfl.sync.bfly.b32	%r161, %r160, 4, 31, -1;
	selp.b32 	%r239, %r111, %r161, %p6;
	selp.b32 	%r303, %r161, %r127, %p6;
	selp.b32 	%r162, %r131, %r115, %p6;
	shfl.sync.bfly.b32	%r163, %r162, 4, 31, -1;
	selp.b32 	%r245, %r115, %r163, %p6;
	selp.b32 	%r309, %r163, %r131, %p6;
	selp.b32 	%r164, %r135, %r119, %p6;
	shfl.sync.bfly.b32	%r165, %r164, 4, 31, -1;
	selp.b32 	%r271, %r119, %r165, %p6;
	selp.b32 	%r335, %r165, %r135, %p6;
	selp.b32 	%r166, %r139, %r123, %p6;
	shfl.sync.bfly.b32	%r167, %r166, 4, 31, -1;
	selp.b32 	%r277, %r123, %r167, %p6;
	selp.b32 	%r341, %r167, %r139, %p6;
	shl.b32 	%r168, %r3, 2;
	and.b32  	%r169, %r168, 12;
	shl.b32 	%r170, %r2, 3;
	and.b32  	%r171, %r170, 16;
	shl.b32 	%r172, %r2, 4;
	and.b32  	%r18, %r172, 16;
	shl.b32 	%r173, %r1, 11;
	and.b32  	%r19, %r173, 30720;
	shr.u32 	%r20, %r3, 2;
	or.b32  	%r174, %r5, %r169;
	or.b32  	%r21, %r174, %r171;
	or.b32  	%r175, %r18, %r20;
	mul.lo.s32 	%r176, %r175, 17;
	shr.u32 	%r177, %r2, 1;
	mul.lo.s32 	%r178, %r177, 544;
	or.b32  	%r22, %r178, %r169;
	add.s32 	%r179, %r22, %r176;
	mul.wide.u32 	%rd33, %r179, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd7, %rd34, %rd33;
	cvt.u64.u32 	%rd35, %r176;
	cvt.u64.u32 	%rd36, %r22;
	add.s64 	%rd37, %rd36, %rd35;
	shl.b64 	%rd38, %rd37, 2;
	add.s64 	%rd8, %rd34, %rd38;
	or.b32  	%r180, %r175, 8;
	mul.lo.s32 	%r181, %r180, 17;
	add.s32 	%r182, %r22, %r181;
	mul.wide.u32 	%rd39, %r182, 4;
	add.s64 	%rd9, %rd34, %rd39;
	cvt.u64.u32 	%rd40, %r181;
	add.s64 	%rd41, %rd36, %rd40;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd10, %rd34, %rd42;
	and.b32  	%r183, %r170, 8;
	or.b32  	%r184, %r183, %r20;
	shl.b32 	%r185, %r3, 1;
	and.b32  	%r23, %r185, 6;
	mul.lo.s32 	%r186, %r177, 640;
	or.b32  	%r24, %r184, %r186;
	and.b32  	%r187, %r3, 7;
	mul.lo.s32 	%r188, %r187, 20;
	add.s32 	%r189, %r4, %r188;
	mul.wide.u32 	%rd43, %r189, 4;
	add.s64 	%rd44, %rd34, 4352;
	add.s64 	%rd11, %rd44, %rd43;
	cvt.u64.u32 	%rd45, %r4;
	cvt.u64.u32 	%rd46, %r188;
	add.s64 	%rd47, %rd46, %rd45;
	shl.b64 	%rd48, %rd47, 2;
	add.s64 	%rd12, %rd44, %rd48;
	add.s32 	%r190, %r188, 160;
	add.s32 	%r191, %r190, %r4;
	mul.wide.u32 	%rd49, %r191, 4;
	add.s64 	%rd13, %rd44, %rd49;
	or.b32  	%r192, %r4, 640;
	add.s32 	%r193, %r192, %r190;
	mul.wide.u32 	%rd50, %r193, 4;
	add.s64 	%rd14, %rd44, %rd50;
	add.s32 	%r194, %r188, 320;
	add.s32 	%r195, %r194, %r4;
	mul.wide.u32 	%rd51, %r195, 4;
	add.s64 	%rd15, %rd44, %rd51;
	add.s32 	%r196, %r192, %r194;
	mul.wide.u32 	%rd52, %r196, 4;
	add.s64 	%rd16, %rd44, %rd52;
	or.b32  	%r197, %r3, 24;
	mul.lo.s32 	%r198, %r197, 20;
	add.s32 	%r199, %r4, %r198;
	mul.wide.u32 	%rd53, %r199, 4;
	add.s64 	%rd17, %rd44, %rd53;
	cvt.u64.u32 	%rd54, %r198;
	add.s64 	%rd55, %rd54, %rd45;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd18, %rd44, %rd56;
	shl.b32 	%r25, %r72, %r8;
	min.u32 	%r26, %r145, 31;
	shl.b32 	%r27, %r72, %r9;
	min.u32 	%r28, %r144, 31;
	and.b16  	%rs2, %rs4, 1;
	and.b16  	%rs3, %rs4, 2;
	shl.b32 	%r201, %r3, 4;
	and.b32  	%r202, %r201, 16;
	shl.b32 	%r203, %r3, 5;
	and.b32  	%r204, %r203, 64;
	or.b32  	%r205, %r202, %r204;
	or.b32  	%r206, %r205, %r19;
	and.b32  	%r207, %r147, 32;
	or.b32  	%r29, %r206, %r207;
	shl.b32 	%r208, %r1, 10;
	and.b32  	%r30, %r208, 2080768;
	shl.b32 	%r209, %r2, 23;
	shl.b32 	%r210, %r3, 18;
	and.b32  	%r211, %r210, 6291456;
	or.b32  	%r31, %r211, %r209;
	or.b32  	%r32, %r31, 8192;
	mov.u32 	%r241, 0;
	mov.u32 	%r640, %r241;
LBB0_7:                                 // %L839
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	mov.u32 	%r641, %r241;
	mov.u32 	%r642, %r241;
	mov.u32 	%r643, %r241;
	mov.u32 	%r644, %r241;
	mov.u32 	%r645, %r241;
	mov.u32 	%r646, %r241;
	mov.u32 	%r647, %r241;
	mov.u32 	%r648, %r241;
	mov.u32 	%r649, %r241;
	mov.u32 	%r650, %r241;
	mov.u32 	%r651, %r241;
	mov.u32 	%r652, %r241;
	mov.u32 	%r653, %r241;
LBB0_8:                                 // %L842
                                        //   Parent Loop BB0_7 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	or.b32  	%r214, %r641, %r640;
	or.b32  	%r215, %r214, %r20;
	or.b32  	%r216, %r215, %r19;
	or.b32  	%r217, %r216, %r18;
	shl.b32 	%r218, %r217, 12;
	or.b32  	%r219, %r21, %r218;
	mul.wide.s32 	%rd57, %r219, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.v4.u32 	{%r220, %r221, %r222, %r223}, [%rd58];
	or.b32  	%r224, %r219, 32768;
	mul.wide.s32 	%rd59, %r224, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.v4.u32 	{%r225, %r226, %r227, %r228}, [%rd60];
	st.shared.u32 	[%rd7], %r220;
	st.shared.u32 	[%rd8+4], %r221;
	st.shared.u32 	[%rd8+8], %r222;
	st.shared.u32 	[%rd8+12], %r223;
	st.shared.u32 	[%rd9], %r225;
	st.shared.u32 	[%rd10+4], %r226;
	st.shared.u32 	[%rd10+8], %r227;
	st.shared.u32 	[%rd10+12], %r228;
	bar.sync 	0;
	mov.u32 	%r654, %r241;
LBB0_9:                                 // %L2712
                                        //   Parent Loop BB0_7 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r363, %r654, %r20;
	mad.lo.s32 	%r364, %r363, 17, %r22;
	mul.wide.u32 	%rd61, %r364, 4;
	add.s64 	%rd63, %rd34, %rd61;
	ld.shared.u32 	%r230, [%rd63];
	mov.u32 	%r231, 134744072;
	mov.u32 	%r397, 252645135;
	// begin inline asm
	lop3.b32 %r229, %r230, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r365, %r229, 2021161080;
	xor.b32  	%r240, %r365, -2139062144;
	shr.u32 	%r234, %r230, 4;
	// begin inline asm
	lop3.b32 %r233, %r234, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r366, %r233, 2021161080;
	xor.b32  	%r246, %r366, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r237, %r238}, {%r239}, {%r240}, {%r241, %r241};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r243, %r244}, {%r245}, {%r246}, {%r241, %r241};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r249, %r250}, {%r239}, {%r246}, {%r241, %r241};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r255, %r256}, {%r245}, {%r240}, {%r249, %r250};
	// end inline asm
	ld.shared.u32 	%r262, [%rd63+4];
	// begin inline asm
	lop3.b32 %r261, %r262, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r367, %r261, 2021161080;
	xor.b32  	%r272, %r367, -2139062144;
	shr.u32 	%r266, %r262, 4;
	// begin inline asm
	lop3.b32 %r265, %r266, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r368, %r265, 2021161080;
	xor.b32  	%r278, %r368, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r269, %r270}, {%r271}, {%r272}, {%r237, %r238};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r275, %r276}, {%r277}, {%r278}, {%r243, %r244};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r281, %r282}, {%r271}, {%r278}, {%r255, %r256};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r287, %r288}, {%r277}, {%r272}, {%r281, %r282};
	// end inline asm
	ld.shared.u32 	%r294, [%rd63+8];
	// begin inline asm
	lop3.b32 %r293, %r294, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r369, %r293, 2021161080;
	xor.b32  	%r304, %r369, -2139062144;
	shr.u32 	%r298, %r294, 4;
	// begin inline asm
	lop3.b32 %r297, %r298, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r370, %r297, 2021161080;
	xor.b32  	%r310, %r370, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r301, %r302}, {%r303}, {%r304}, {%r269, %r270};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r307, %r308}, {%r309}, {%r310}, {%r275, %r276};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r313, %r314}, {%r303}, {%r310}, {%r287, %r288};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r319, %r320}, {%r309}, {%r304}, {%r313, %r314};
	// end inline asm
	ld.shared.u32 	%r326, [%rd63+12];
	// begin inline asm
	lop3.b32 %r325, %r326, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r371, %r325, 2021161080;
	xor.b32  	%r336, %r371, -2139062144;
	shr.u32 	%r330, %r326, 4;
	// begin inline asm
	lop3.b32 %r329, %r330, %r231, %r397, 40;
	// end inline asm
	add.s32 	%r372, %r329, 2021161080;
	xor.b32  	%r342, %r372, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r333, %r334}, {%r335}, {%r336}, {%r301, %r302};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r339, %r340}, {%r341}, {%r342}, {%r307, %r308};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r345, %r346}, {%r335}, {%r342}, {%r319, %r320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r351, %r352}, {%r341}, {%r336}, {%r345, %r346};
	// end inline asm
	sub.s32 	%r373, %r333, %r339;
	add.s32 	%r374, %r373, 2;
	shr.s32 	%r359, %r374, 2;
	add.s32 	%r375, %r351, 2;
	shr.s32 	%r358, %r375, 2;
	sub.s32 	%r376, %r334, %r340;
	add.s32 	%r377, %r376, 2;
	shr.s32 	%r362, %r377, 2;
	add.s32 	%r378, %r352, 2;
	shr.s32 	%r361, %r378, 2;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r357, %r358, %r359;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r360, %r361, %r362;
	// end inline asm
	or.b32  	%r379, %r654, %r23;
	mad.lo.s32 	%r380, %r379, 20, %r24;
	mul.wide.u32 	%rd64, %r380, 4;
	add.s64 	%rd66, %rd44, %rd64;
	st.shared.u32 	[%rd66], %r357;
	add.s32 	%r381, %r380, 20;
	mul.wide.u32 	%rd67, %r381, 4;
	add.s64 	%rd68, %rd44, %rd67;
	st.shared.u32 	[%rd68], %r360;
	add.s32 	%r654, %r654, 8;
	setp.ne.s32 	%p7, %r654, 32;
	@%p7 bra 	LBB0_9;
// %bb.10:                              // %L3974
                                        //   in Loop: Header=BB0_8 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r418, [%rd11];
	ld.shared.u32 	%r419, [%rd12+2560];
	ld.shared.u32 	%r420, [%rd13];
	ld.shared.u32 	%r421, [%rd14];
	ld.shared.u32 	%r422, [%rd15];
	ld.shared.u32 	%r423, [%rd16];
	ld.shared.u32 	%r424, [%rd17];
	ld.shared.u32 	%r425, [%rd18+2560];
	cvt.s32.s16 	%r426, %r418;
	shr.s32 	%r427, %r418, 16;
	cvt.s32.s16 	%r428, %r419;
	shr.s32 	%r429, %r419, 16;
	cvt.s32.s16 	%r430, %r420;
	shr.s32 	%r431, %r420, 16;
	cvt.s32.s16 	%r432, %r421;
	shr.s32 	%r433, %r421, 16;
	cvt.s32.s16 	%r434, %r422;
	shr.s32 	%r435, %r422, 16;
	cvt.s32.s16 	%r436, %r423;
	shr.s32 	%r437, %r423, 16;
	cvt.s32.s16 	%r438, %r424;
	shr.s32 	%r439, %r424, 16;
	cvt.s32.s16 	%r440, %r425;
	shr.s32 	%r441, %r425, 16;
	add.s32 	%r442, %r426, %r25;
	shr.s32 	%r443, %r442, %r26;
	add.s32 	%r444, %r427, %r25;
	shr.s32 	%r445, %r444, %r26;
	add.s32 	%r446, %r428, %r27;
	shr.s32 	%r447, %r446, %r28;
	add.s32 	%r448, %r429, %r27;
	shr.s32 	%r449, %r448, %r28;
	add.s32 	%r450, %r430, %r25;
	shr.s32 	%r451, %r450, %r26;
	add.s32 	%r452, %r431, %r25;
	shr.s32 	%r453, %r452, %r26;
	add.s32 	%r454, %r432, %r27;
	shr.s32 	%r455, %r454, %r28;
	add.s32 	%r456, %r433, %r27;
	shr.s32 	%r457, %r456, %r28;
	add.s32 	%r458, %r434, %r25;
	shr.s32 	%r459, %r458, %r26;
	add.s32 	%r460, %r435, %r25;
	shr.s32 	%r461, %r460, %r26;
	add.s32 	%r462, %r436, %r27;
	shr.s32 	%r463, %r462, %r28;
	add.s32 	%r464, %r437, %r27;
	shr.s32 	%r465, %r464, %r28;
	add.s32 	%r466, %r438, %r25;
	shr.s32 	%r467, %r466, %r26;
	add.s32 	%r468, %r439, %r25;
	shr.s32 	%r469, %r468, %r26;
	add.s32 	%r470, %r440, %r27;
	shr.s32 	%r471, %r470, %r28;
	add.s32 	%r472, %r441, %r27;
	shr.s32 	%r473, %r472, %r28;
	max.s32 	%r474, %r443, -7;
	min.s32 	%r387, %r474, 7;
	max.s32 	%r475, %r445, -7;
	min.s32 	%r394, %r475, 7;
	max.s32 	%r476, %r447, -7;
	min.s32 	%r405, %r476, 7;
	max.s32 	%r477, %r449, -7;
	min.s32 	%r412, %r477, 7;
	max.s32 	%r478, %r451, -7;
	min.s32 	%r386, %r478, 7;
	max.s32 	%r479, %r453, -7;
	min.s32 	%r393, %r479, 7;
	max.s32 	%r480, %r455, -7;
	min.s32 	%r404, %r480, 7;
	max.s32 	%r481, %r457, -7;
	min.s32 	%r411, %r481, 7;
	max.s32 	%r482, %r459, -7;
	min.s32 	%r384, %r482, 7;
	max.s32 	%r483, %r461, -7;
	min.s32 	%r391, %r483, 7;
	max.s32 	%r484, %r463, -7;
	min.s32 	%r402, %r484, 7;
	max.s32 	%r485, %r465, -7;
	min.s32 	%r409, %r485, 7;
	max.s32 	%r486, %r467, -7;
	min.s32 	%r383, %r486, 7;
	max.s32 	%r487, %r469, -7;
	min.s32 	%r390, %r487, 7;
	max.s32 	%r488, %r471, -7;
	min.s32 	%r401, %r488, 7;
	max.s32 	%r489, %r473, -7;
	min.s32 	%r408, %r489, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r382, %r383, %r384, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r385, %r386, %r387, %r382;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r389, %r390, %r391, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r392, %r393, %r394, %r389;
	// end inline asm
	shl.b32 	%r399, %r392, 4;
	// begin inline asm
	lop3.b32 %r508, %r397, %r385, %r399, 202;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r400, %r401, %r402, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r403, %r404, %r405, %r400;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r407, %r408, %r409, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r410, %r411, %r412, %r407;
	// end inline asm
	shl.b32 	%r417, %r410, 4;
	// begin inline asm
	lop3.b32 %r516, %r397, %r403, %r417, 202;
	// end inline asm
	setp.eq.s32 	%p8, %r641, 0;
	selp.b32 	%r652, %r508, %r652, %p8;
	selp.b32 	%r653, %r508, %r653, %p8;
	setp.eq.s32 	%p9, %r641, 32;
	selp.b32 	%r644, %r508, %r644, %p9;
	selp.b32 	%r645, %r508, %r645, %p9;
	setp.eq.s32 	%p10, %r641, 64;
	selp.b32 	%r650, %r508, %r650, %p10;
	selp.b32 	%r651, %r508, %r651, %p10;
	selp.b32 	%r648, %r516, %r648, %p8;
	selp.b32 	%r649, %r516, %r649, %p8;
	selp.b32 	%r642, %r516, %r642, %p9;
	selp.b32 	%r643, %r516, %r643, %p9;
	selp.b32 	%r646, %r516, %r646, %p10;
	selp.b32 	%r647, %r516, %r647, %p10;
	add.s32 	%r63, %r641, 32;
	setp.ne.s32 	%p11, %r641, 96;
	mov.u32 	%r641, %r63;
	@%p11 bra 	LBB0_8;
// %bb.11:                              // %L5528
                                        //   in Loop: Header=BB0_7 Depth=1
	setp.eq.s16 	%p12, %rs3, 0;
	setp.eq.s16 	%p13, %rs2, 0;
	// begin inline asm
	prmt.b32 %r490, %r652, %r644, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r653, %r645, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r648, %r642, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r649, %r643, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r650, %r508, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r651, %r508, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r646, %r516, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r647, %r516, %r118;
	// end inline asm
	selp.b32 	%r586, %r494, %r490, %p13;
	shfl.sync.bfly.b32	%r587, %r586, 1, 31, -1;
	selp.b32 	%r523, %r490, %r587, %p13;
	selp.b32 	%r524, %r587, %r494, %p13;
	selp.b32 	%r588, %r502, %r498, %p13;
	shfl.sync.bfly.b32	%r589, %r588, 1, 31, -1;
	selp.b32 	%r531, %r498, %r589, %p13;
	selp.b32 	%r532, %r589, %r502, %p13;
	selp.b32 	%r590, %r510, %r506, %p13;
	shfl.sync.bfly.b32	%r591, %r590, 1, 31, -1;
	selp.b32 	%r539, %r506, %r591, %p13;
	selp.b32 	%r540, %r591, %r510, %p13;
	selp.b32 	%r592, %r518, %r514, %p13;
	shfl.sync.bfly.b32	%r593, %r592, 1, 31, -1;
	selp.b32 	%r547, %r514, %r593, %p13;
	selp.b32 	%r548, %r593, %r518, %p13;
	// begin inline asm
	prmt.b32 %r522, %r523, %r524, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r523, %r524, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r118;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r114;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r118;
	// end inline asm
	selp.b32 	%r594, %r538, %r522, %p12;
	shfl.sync.bfly.b32	%r595, %r594, 2, 31, -1;
	selp.b32 	%r555, %r522, %r595, %p12;
	selp.b32 	%r556, %r595, %r538, %p12;
	selp.b32 	%r596, %r546, %r530, %p12;
	shfl.sync.bfly.b32	%r597, %r596, 2, 31, -1;
	selp.b32 	%r563, %r530, %r597, %p12;
	selp.b32 	%r564, %r597, %r546, %p12;
	selp.b32 	%r598, %r542, %r526, %p12;
	shfl.sync.bfly.b32	%r599, %r598, 2, 31, -1;
	selp.b32 	%r571, %r526, %r599, %p12;
	selp.b32 	%r572, %r599, %r542, %p12;
	selp.b32 	%r600, %r550, %r534, %p12;
	shfl.sync.bfly.b32	%r601, %r600, 2, 31, -1;
	selp.b32 	%r579, %r534, %r601, %p12;
	selp.b32 	%r580, %r601, %r550, %p12;
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r86;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r82;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r86;
	// end inline asm
	selp.b32 	%r602, %r570, %r554, %p6;
	shfl.sync.bfly.b32	%r603, %r602, 4, 31, -1;
	selp.b32 	%r604, %r554, %r603, %p6;
	selp.b32 	%r605, %r603, %r570, %p6;
	selp.b32 	%r606, %r578, %r562, %p6;
	shfl.sync.bfly.b32	%r607, %r606, 4, 31, -1;
	selp.b32 	%r608, %r562, %r607, %p6;
	selp.b32 	%r609, %r607, %r578, %p6;
	selp.b32 	%r610, %r574, %r558, %p6;
	shfl.sync.bfly.b32	%r611, %r610, 4, 31, -1;
	selp.b32 	%r612, %r558, %r611, %p6;
	selp.b32 	%r613, %r611, %r574, %p6;
	selp.b32 	%r614, %r582, %r566, %p6;
	shfl.sync.bfly.b32	%r615, %r614, 4, 31, -1;
	selp.b32 	%r616, %r566, %r615, %p6;
	selp.b32 	%r617, %r615, %r582, %p6;
	selp.b32 	%r618, %r612, %r604, %p13;
	shfl.sync.bfly.b32	%r619, %r618, 1, 31, -1;
	selp.b32 	%r620, %r604, %r619, %p13;
	selp.b32 	%r621, %r619, %r612, %p13;
	selp.b32 	%r622, %r616, %r608, %p13;
	shfl.sync.bfly.b32	%r623, %r622, 1, 31, -1;
	selp.b32 	%r624, %r608, %r623, %p13;
	selp.b32 	%r625, %r623, %r616, %p13;
	selp.b32 	%r626, %r613, %r605, %p13;
	shfl.sync.bfly.b32	%r627, %r626, 1, 31, -1;
	selp.b32 	%r628, %r605, %r627, %p13;
	selp.b32 	%r629, %r627, %r613, %p13;
	selp.b32 	%r630, %r617, %r609, %p13;
	shfl.sync.bfly.b32	%r631, %r630, 1, 31, -1;
	selp.b32 	%r632, %r609, %r631, %p13;
	selp.b32 	%r633, %r631, %r617, %p13;
	or.b32  	%r634, %r29, %r640;
	shr.u32 	%r635, %r634, 2;
	or.b32  	%r636, %r635, %r30;
	add.s32 	%r637, %r31, %r636;
	mul.wide.u32 	%rd69, %r637, 4;
	add.s64 	%rd70, %rd4, %rd69;
	st.global.v4.u32 	[%rd70], {%r620, %r628, %r621, %r629};
	add.s32 	%r638, %r32, %r636;
	mul.wide.u32 	%rd71, %r638, 4;
	add.s64 	%rd72, %rd4, %rd71;
	st.global.v4.u32 	[%rd72], {%r624, %r632, %r625, %r633};
	add.s32 	%r64, %r640, 128;
	setp.ne.s32 	%p15, %r640, 1920;
	mov.u32 	%r640, %r64;
	@%p15 bra 	LBB0_7;
// %bb.12:                              // %L6233
	mov.u32 	%r639, 0;
	st.global.u32 	[%rd6], %r639;
	ret;
LBB0_1:                                 // %L8
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_3:                                 // %L25
	mov.u64 	%rd22, exception1;
	cvta.global.u64 	%rd23, %rd22;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
LBB0_5:                                 // %L333
	mov.u32 	%r78, 2;
	st.global.u32 	[%rd6], %r78;
	mov.u64 	%rd29, exception500;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd19;
	st.param.b32 	[param0+8], %r65;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
