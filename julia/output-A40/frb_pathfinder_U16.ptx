// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<305>;
	.reg .b16 	%rs<256>;
	.reg .b32 	%r<3100>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<364>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd45, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r309, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r309, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r310, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r311, %r3, %r310;
	add.s32 	%r312, %r311, %r5;
	mul.wide.u32 	%rd53, %r312, 4;
	add.s64 	%rd6, %rd46, %rd53;
	mov.u32 	%r313, 1;
	st.global.u32 	[%rd6], %r313;
	setp.gt.u32 	%p5, %r301, 2047;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r302, %r301;
	setp.gt.s32 	%p7, %r302, 4095;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r302, %r301;
	mad.lo.s32 	%r314, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r315, %r314, %r314, 4;
	setp.gt.u32 	%p9, %r315, 89478484;
	setp.gt.u32 	%p10, %r303, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r304, %r303;
	setp.lt.s32 	%p13, %r304, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r316, %r304, %r303;
	mul.hi.s32 	%r317, %r6, 715827883;
	shr.u32 	%r318, %r317, 31;
	shr.s32 	%r319, %r317, 1;
	add.s32 	%r320, %r319, %r318;
	setp.eq.s32 	%p15, %r316, %r320;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r305, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r306, %r305;
	setp.gt.s32 	%p18, %r306, 1024;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r306, %r305;
	and.b32  	%r321, %r7, 15;
	setp.ne.s32 	%p20, %r321, 0;
	setp.lt.s32 	%p21, %r307, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r308, %r307;
	setp.gt.s32 	%p24, %r308, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r322, %r308, %r307;
	and.b32  	%r323, %r322, 15;
	setp.eq.s32 	%p26, %r323, 0;
	setp.eq.s32 	%p27, %r322, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_13;
$L__BB0_172:                            // %pass162
	and.b32  	%r164, %r310, 3;
	shr.u32 	%r165, %r310, 2;
	mul.lo.s32 	%r324, %r164, %r165;
	and.b32  	%r325, %r324, 7;
	cvt.rn.f32.s32 	%f205, %r325;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p304, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_184;
// %bb.173:
	@%p304 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_174;
$L__BB0_180:
	mov.b32 	%r167, %f788;
	and.b32  	%r326, %r167, 8388607;
	or.b32  	%r3095, %r326, 1065353216;
	mov.b32 	%f783, %r3095;
	add.s32 	%r327, %r167, -1073741824;
	and.b32  	%r3096, %r327, -8388608;
	setp.eq.s32 	%p36, %r3096, 0;
	@%p36 bra 	$L__BB0_183;
// %bb.181:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_182:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r328, %r3096, 192937984;
	add.s32 	%r329, %r3095, %r328;
	mov.b32 	%f217, %r329;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3096, %r3096, %r328;
	mov.b32 	%r3095, %f783;
	setp.ne.s32 	%p37, %r3096, 0;
	setp.ne.s32 	%p38, %r3095, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_182;
$L__BB0_183:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r167, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_184;
$L__BB0_174:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r166, %f172;
	setp.lt.u32 	%p31, %r166, 1073741824;
	@%p31 bra 	$L__BB0_179;
// %bb.175:
	setp.lt.u32 	%p32, %r166, -2147483647;
	@%p32 bra 	$L__BB0_177;
// %bb.176:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_179;
$L__BB0_177:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_179:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_184:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r330, %f169;
	and.b32  	%r174, %r330, -2147483648;
	@%p41 bra 	$L__BB0_186;
// %bb.185:
	mov.b32 	%r331, %f784;
	or.b32  	%r332, %r174, %r331;
	mov.b32 	%f784, %r332;
$L__BB0_186:                            // %__nv_fmodf.exit
	shl.b32 	%r177, %r310, 1;
	and.b32  	%r178, %r177, 2;
	mul.lo.s32 	%r347, %r178, %r165;
	cvt.rn.f32.s32 	%f259, %r347;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r348, %r9, 8388607;
	or.b32  	%r3045, %r348, 1065353216;
	mov.b32 	%f733, %r3045;
	add.s32 	%r349, %r9, -1073741824;
	and.b32  	%r3046, %r349, -8388608;
	setp.eq.s32 	%p56, %r3046, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r3046, 192937984;
	add.s32 	%r351, %r3045, %r350;
	mov.b32 	%f271, %r351;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3046, %r3046, %r350;
	mov.b32 	%r3045, %f733;
	setp.ne.s32 	%p57, %r3046, 0;
	setp.ne.s32 	%p58, %r3045, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r179, %r178, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r352, %f186;
	and.b32  	%r353, %r352, -2147483648;
	mov.b32 	%r354, %f734;
	or.b32  	%r355, %r353, %r354;
	mov.b32 	%f734, %r355;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r179, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r364, %r179, %r165;
	mul.hi.u32 	%r365, %r364, -1431655765;
	shr.u32 	%r366, %r365, 4;
	mul.lo.s32 	%r367, %r366, 24;
	sub.s32 	%r368, %r364, %r367;
	cvt.rn.f32.s32 	%f311, %r368;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r369, %r17, 8388607;
	or.b32  	%r3047, %r369, 1065353216;
	mov.b32 	%f737, %r3047;
	add.s32 	%r370, %r17, -1073741824;
	and.b32  	%r3048, %r370, -8388608;
	setp.eq.s32 	%p77, %r3048, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r3048, 192937984;
	add.s32 	%r372, %r3047, %r371;
	mov.b32 	%f323, %r372;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3048, %r3048, %r371;
	mov.b32 	%r3047, %f737;
	setp.ne.s32 	%p78, %r3048, 0;
	setp.ne.s32 	%p79, %r3047, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r373, %f18;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f738;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f738, %r376;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r377, %f333;
	and.b32  	%r378, %r377, -2147483648;
	or.b32  	%r379, %r378, 1056964608;
	mov.b32 	%f334, %r379;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r380, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r381, %r380, 1;
	setp.eq.b32 	%p85, %r381, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r382, %r380, 2;
	setp.eq.s32 	%p86, %r382, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r383, %r380, 1;
	and.b32  	%r384, %r383, 2;
	setp.eq.s32 	%p87, %r384, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r165, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r391, %r178, %r26;
	cvt.u16.u32 	%rs11, %r391;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r392, %r28, 8388607;
	or.b32  	%r3049, %r392, 1065353216;
	mov.b32 	%f743, %r3049;
	add.s32 	%r393, %r28, -1073741824;
	and.b32  	%r3050, %r393, -8388608;
	setp.eq.s32 	%p98, %r3050, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r3050, 192937984;
	add.s32 	%r395, %r3049, %r394;
	mov.b32 	%f376, %r395;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3050, %r3050, %r394;
	mov.b32 	%r3049, %f743;
	setp.ne.s32 	%p99, %r3050, 0;
	setp.ne.s32 	%p100, %r3049, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r396, %f39;
	and.b32  	%r397, %r396, -2147483648;
	mov.b32 	%r398, %f744;
	or.b32  	%r399, %r397, %r398;
	mov.b32 	%f744, %r399;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r400, %f386;
	and.b32  	%r401, %r400, -2147483648;
	or.b32  	%r402, %r401, 1056964608;
	mov.b32 	%f387, %r402;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r403, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r404, %r403, 1;
	setp.eq.b32 	%p106, %r404, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r405, %r403, 2;
	setp.eq.s32 	%p107, %r405, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r406, %r403, 1;
	and.b32  	%r407, %r406, 2;
	setp.eq.s32 	%p108, %r407, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r408, %r179, %r26;
	mul.hi.u32 	%r409, %r408, -1431655765;
	shr.u32 	%r410, %r409, 1;
	mul.lo.s32 	%r411, %r410, 3;
	sub.s32 	%r412, %r408, %r411;
	cvt.rn.f32.s32 	%f417, %r412;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r413, %r36, 8388607;
	or.b32  	%r3051, %r413, 1065353216;
	mov.b32 	%f749, %r3051;
	add.s32 	%r414, %r36, -1073741824;
	and.b32  	%r3052, %r414, -8388608;
	setp.eq.s32 	%p121, %r3052, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r3052, 192937984;
	add.s32 	%r416, %r3051, %r415;
	mov.b32 	%f429, %r416;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3052, %r3052, %r415;
	mov.b32 	%r3051, %f749;
	setp.ne.s32 	%p122, %r3052, 0;
	setp.ne.s32 	%p123, %r3051, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r417, %f60;
	and.b32  	%r418, %r417, -2147483648;
	mov.b32 	%r419, %f750;
	or.b32  	%r420, %r418, %r419;
	mov.b32 	%f750, %r420;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r421, %f439;
	and.b32  	%r422, %r421, -2147483648;
	or.b32  	%r423, %r422, 1056964608;
	mov.b32 	%f440, %r423;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r424, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r425, %r424, 1;
	setp.eq.b32 	%p129, %r425, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r426, %r424, 2;
	setp.eq.s32 	%p130, %r426, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r427, %r424, 1;
	and.b32  	%r428, %r427, 2;
	setp.eq.s32 	%p131, %r428, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r310, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_194;
// %bb.78:
	@%p304 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_79;
$L__BB0_190:
	mov.b32 	%r181, %f788;
	and.b32  	%r435, %r181, 8388607;
	or.b32  	%r3097, %r435, 1065353216;
	mov.b32 	%f787, %r3097;
	add.s32 	%r436, %r181, -1073741824;
	and.b32  	%r3098, %r436, -8388608;
	setp.eq.s32 	%p142, %r3098, 0;
	@%p142 bra 	$L__BB0_193;
// %bb.191:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_192:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3098, 192937984;
	add.s32 	%r438, %r3097, %r437;
	mov.b32 	%f479, %r438;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3098, %r3098, %r437;
	mov.b32 	%r3097, %f787;
	setp.ne.s32 	%p143, %r3098, 0;
	setp.ne.s32 	%p144, %r3097, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_192;
$L__BB0_193:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r181, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_194;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r180, %f189;
	setp.lt.u32 	%p137, %r180, 1073741824;
	@%p137 bra 	$L__BB0_189;
// %bb.80:
	setp.lt.u32 	%p138, %r180, -2147483647;
	@%p138 bra 	$L__BB0_187;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_189;
$L__BB0_187:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_189;
// %bb.188:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_189:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_194:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_196;
// %bb.195:
	mov.b32 	%r439, %f788;
	or.b32  	%r440, %r174, %r439;
	mov.b32 	%f788, %r440;
$L__BB0_196:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r455, %r47, 8388607;
	or.b32  	%r3053, %r455, 1065353216;
	mov.b32 	%f759, %r3053;
	add.s32 	%r456, %r47, -1073741824;
	and.b32  	%r3054, %r456, -8388608;
	setp.eq.s32 	%p162, %r3054, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r457, %r3054, 192937984;
	add.s32 	%r458, %r3053, %r457;
	mov.b32 	%f532, %r458;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3054, %r3054, %r457;
	mov.b32 	%r3053, %f759;
	setp.ne.s32 	%p163, %r3054, 0;
	setp.ne.s32 	%p164, %r3053, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r459, %f203;
	and.b32  	%r460, %r459, -2147483648;
	mov.b32 	%r461, %f760;
	or.b32  	%r462, %r460, %r461;
	mov.b32 	%f760, %r462;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r165;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r471, %r55, 8388607;
	or.b32  	%r3055, %r471, 1065353216;
	mov.b32 	%f763, %r3055;
	add.s32 	%r472, %r55, -1073741824;
	and.b32  	%r3056, %r472, -8388608;
	setp.eq.s32 	%p182, %r3056, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3056, 192937984;
	add.s32 	%r474, %r3055, %r473;
	mov.b32 	%f584, %r474;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3056, %r3056, %r473;
	mov.b32 	%r3055, %f763;
	setp.ne.s32 	%p183, %r3056, 0;
	setp.ne.s32 	%p184, %r3055, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r475, %f104;
	and.b32  	%r476, %r475, -2147483648;
	mov.b32 	%r477, %f764;
	or.b32  	%r478, %r476, %r477;
	mov.b32 	%f764, %r478;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r310, 1;
	shr.u32 	%r66, %r310, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r493, %r68, 8388607;
	or.b32  	%r3057, %r493, 1065353216;
	mov.b32 	%f767, %r3057;
	add.s32 	%r494, %r68, -1073741824;
	and.b32  	%r3058, %r494, -8388608;
	setp.eq.s32 	%p203, %r3058, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r495, %r3058, 192937984;
	add.s32 	%r496, %r3057, %r495;
	mov.b32 	%f638, %r496;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3058, %r3058, %r495;
	mov.b32 	%r3057, %f767;
	setp.ne.s32 	%p204, %r3058, 0;
	setp.ne.s32 	%p205, %r3057, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r497, %f121;
	and.b32  	%r498, %r497, -2147483648;
	mov.b32 	%r499, %f768;
	or.b32  	%r500, %r498, %r499;
	mov.b32 	%f768, %r500;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r501, %f648;
	and.b32  	%r502, %r501, -2147483648;
	or.b32  	%r503, %r502, 1056964608;
	mov.b32 	%f649, %r503;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r504, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r505, %r504, 1;
	setp.eq.b32 	%p211, %r505, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r506, %r504, 2;
	setp.eq.s32 	%p212, %r506, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r507, %r504, 1;
	and.b32  	%r508, %r507, 2;
	setp.eq.s32 	%p213, %r508, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r165, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r509, %r76, 8388607;
	or.b32  	%r3059, %r509, 1065353216;
	mov.b32 	%f773, %r3059;
	add.s32 	%r510, %r76, -1073741824;
	and.b32  	%r3060, %r510, -8388608;
	setp.eq.s32 	%p224, %r3060, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r511, %r3060, 192937984;
	add.s32 	%r512, %r3059, %r511;
	mov.b32 	%f691, %r512;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3060, %r3060, %r511;
	mov.b32 	%r3059, %f773;
	setp.ne.s32 	%p225, %r3060, 0;
	setp.ne.s32 	%p226, %r3059, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r513, %f142;
	and.b32  	%r514, %r513, -2147483648;
	mov.b32 	%r515, %f774;
	or.b32  	%r516, %r514, %r515;
	mov.b32 	%f774, %r516;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r517, %f701;
	and.b32  	%r518, %r517, -2147483648;
	or.b32  	%r519, %r518, 1056964608;
	mov.b32 	%f702, %r519;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r520, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r521, %r520, 1;
	setp.eq.b32 	%p232, %r521, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r522, %r520, 2;
	setp.eq.s32 	%p233, %r522, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r523, %r520, 1;
	and.b32  	%r524, %r523, 2;
	setp.eq.s32 	%p234, %r524, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r310, 15;
	mov.u32 	%r190, 999999999;
	@%p238 bra 	$L__BB0_198;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r532, %r310, 6, %r4;
	cvt.u16.u32 	%rs17, %r532;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r533, %rs22;
	and.b32  	%r534, %r533, 255;
	mul.wide.u32 	%rd54, %r534, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.u32 	%r535, [%rd55];
	shl.b32 	%r536, %r535, 16;
	cvt.s32.s16 	%r85, %r535;
	shr.s32 	%r86, %r535, 16;
	or.b32  	%r537, %r536, 65535;
	setp.lt.u32 	%p239, %r537, 589823;
	setp.lt.u32 	%p240, %r535, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_145;
$L__BB0_197:                            // %L1246
	mul.lo.s32 	%r541, %r86, 290;
	mad.lo.s32 	%r190, %r85, 33, %r541;
$L__BB0_198:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r339, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r340, %r339, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r447, %f489;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%r356, %f282;
	and.b32  	%r448, %r447, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r341;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r449, %r448, 1056964608;
	mov.b32 	%r463, %f542;
	mov.b32 	%r485, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f490, %r449;
	and.b32  	%r464, %r463, -2147483648;
	and.b32  	%r486, %r485, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r358;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r465, %r464, 1056964608;
	or.b32  	%r487, %r486, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r465;
	mov.b32 	%f596, %r487;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r342, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r343, %r342, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r450, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r343, 1;
	cvt.rzi.s32.f32 	%r359, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r451, %r450, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r344, %r342, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r360, %r359, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r451, 1;
	cvt.rzi.s32.f32 	%r466, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r488, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r344, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r345, %r342, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r360, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r452, %r450, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r467, %r466, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r489, %r488, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r346, %r345, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p151, %r452, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r453, %r450, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r467, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r489, 1;
	setp.eq.s32 	%p46, %r346, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r361, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r362, %r359, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r454, %r453, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r468, %r466, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r490, %r488, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r363, %r362, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r454, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r468, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r469, %r466, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r490, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r491, %r488, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r363, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r470, %r469, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r492, %r491, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r335, %f258;
	mov.b32 	%r338, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r470, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r492, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r334, %r338, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r443, %f520;
	mov.b32 	%r446, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r335;
	// end inline asm
	mov.b32 	%r386, %f17;
	mov.b32 	%r387, %f37;
	mov.b32 	%r389, %f16;
	mov.b32 	%r390, %f38;
	mov.b32 	%r430, %f83;
	mov.b32 	%r431, %f85;
	mov.b32 	%r433, %f755;
	mov.b32 	%r434, %f757;
	xor.b32  	%r442, %r446, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r385, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r431, %r430;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r443;
	// end inline asm
	mov.b32 	%r481, %f625;
	mov.b32 	%r480, %f103;
	mov.b32 	%r484, %f622;
	mov.b32 	%r483, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	mov.b32 	%r526, %f165;
	mov.b32 	%r527, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r525, %r527, %r526;
	// end inline asm
	mov.b32 	%r529, %f779;
	mov.b32 	%r530, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r528, %r530, %r529;
	// end inline asm
	mul.lo.s32 	%r543, %r164, 24;
	shl.b32 	%r544, %r4, 1;
	and.b32  	%r545, %r544, 2;
	shr.u32 	%r546, %r310, 3;
	and.b32  	%r547, %r546, 2;
	or.b32  	%r191, %r64, %r547;
	cvt.u16.u32 	%rs25, %r191;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r548, %rs29;
	and.b32  	%r549, %r548, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r550, %rs30, 8;
	bfe.u32 	%r551, %r310, 3, 1;
	or.b32  	%r552, %r545, %r551;
	add.s32 	%r553, %r543, %r3;
	or.b32  	%r554, %r553, %r552;
	add.s32 	%r555, %r554, %r550;
	mul.wide.u32 	%rd61, %r555, 4;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.u32 	%r192, [%rd62];
	or.b32  	%r556, %r3, %r551;
	or.b32  	%r557, %r556, %r545;
	cvt.u64.u32 	%rd63, %r550;
	cvt.u64.u32 	%rd64, %r543;
	cvt.u64.u32 	%rd65, %r557;
	add.s64 	%rd66, %rd65, %rd64;
	add.s64 	%rd67, %rd66, %rd63;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.u32 	%r193, [%rd69+16];
	cvt.u64.u32 	%rd70, %r552;
	cvt.u64.u32 	%rd71, %r3;
	add.s64 	%rd72, %rd71, %rd64;
	add.s64 	%rd73, %rd72, %rd70;
	add.s64 	%rd74, %rd73, %rd63;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r194, [%rd76+384];
	cvt.u64.u32 	%rd77, %r545;
	cvt.u64.u32 	%rd78, %r551;
	add.s64 	%rd79, %rd72, %rd78;
	add.s64 	%rd80, %rd79, %rd77;
	add.s64 	%rd81, %rd80, %rd63;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.u32 	%r195, [%rd83+400];
	shl.b32 	%r558, %r301, 15;
	shl.b32 	%r559, %r305, 5;
	add.s32 	%r196, %r559, %r558;
	shl.b32 	%r560, %r310, 2;
	and.b32  	%r197, %r560, 12;
	shl.b32 	%r561, %r4, 2;
	or.b32  	%r198, %r561, %r546;
	and.b32  	%r199, %r560, 16;
	shl.b32 	%r200, %r2, 5;
	and.b32  	%r201, %r310, 4;
	bfe.s32 	%r562, %r310, 2, 1;
	and.b32  	%r563, %r177, 8;
	shl.b32 	%r564, %r310, 4;
	or.b32  	%r565, %r563, %r564;
	bfe.u32 	%r566, %r565, 3, 3;
	mul.lo.s32 	%r202, %r566, 260;
	cvt.u16.u32 	%rs31, %r310;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r567, %rs36;
	and.b32  	%r203, %r567, 255;
	add.s32 	%r568, %r4, 6;
	shr.u32 	%r569, %r568, 3;
	add.s32 	%r570, %r5, 192;
	and.b32  	%r571, %r570, 224;
	mad.lo.s32 	%r204, %r569, 260, %r571;
	add.s32 	%r572, %r4, 12;
	shr.u32 	%r573, %r572, 3;
	add.s32 	%r574, %r5, 128;
	and.b32  	%r575, %r574, 224;
	mad.lo.s32 	%r205, %r573, 260, %r575;
	add.s32 	%r576, %r4, 18;
	shr.u32 	%r577, %r576, 3;
	add.s32 	%r578, %r5, 64;
	and.b32  	%r579, %r578, 224;
	mad.lo.s32 	%r206, %r577, 260, %r579;
	or.b32  	%r207, %r5, 780;
	add.s32 	%r580, %r4, 30;
	shr.u32 	%r581, %r580, 3;
	mad.lo.s32 	%r208, %r581, 260, %r571;
	add.s32 	%r582, %r4, 36;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r209, %r583, 260, %r575;
	add.s32 	%r584, %r4, 42;
	shr.u32 	%r585, %r584, 3;
	mad.lo.s32 	%r210, %r585, 260, %r579;
	or.b32  	%r211, %r5, 1560;
	add.s32 	%r586, %r4, 54;
	shr.u32 	%r587, %r586, 3;
	mad.lo.s32 	%r212, %r587, 260, %r571;
	add.s32 	%r588, %r4, 60;
	bfe.u32 	%r589, %r588, 3, 3;
	mad.lo.s32 	%r213, %r589, 260, %r575;
	mul.lo.s32 	%r590, %r164, 870;
	shr.u32 	%r591, %r4, 1;
	cvt.u16.u32 	%rs37, %r591;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r592, %rs42;
	and.b32  	%r214, %r592, 255;
	mad.lo.s32 	%r593, %r552, 33, %r590;
	mad.lo.s32 	%r215, %r549, 290, %r593;
	add.s32 	%r216, %r215, 132;
	setp.lt.u32 	%p243, %r310, 4;
	setp.eq.s32 	%p244, %r165, 1;
	setp.eq.s32 	%p245, %r165, 4;
	setp.eq.s32 	%p246, %r165, 5;
	setp.eq.s32 	%p247, %r65, 0;
	selp.b32 	%r594, 0, 784, %p247;
	bfe.s32 	%r595, %r310, 3, 1;
	and.b32  	%r596, %r595, 98;
	or.b32  	%r217, %r545, %r66;
	selp.b32 	%r218, 0, 392, %p134;
	and.b32  	%r219, %r562, 196;
	or.b32  	%r220, %r596, %r594;
	add.s32 	%r597, %r220, %r217;
	add.s32 	%r598, %r597, %r218;
	add.s32 	%r221, %r598, %r219;
	add.s32 	%r599, %r220, 1576;
	add.s32 	%r600, %r599, %r217;
	add.s32 	%r601, %r600, %r218;
	add.s32 	%r222, %r601, %r219;
	or.b32  	%r602, %r217, 4;
	add.s32 	%r603, %r220, %r602;
	add.s32 	%r604, %r603, %r218;
	add.s32 	%r223, %r604, %r219;
	add.s32 	%r605, %r599, %r602;
	add.s32 	%r606, %r605, %r218;
	add.s32 	%r224, %r606, %r219;
	add.s32 	%r607, %r220, 1584;
	add.s32 	%r608, %r607, %r217;
	add.s32 	%r609, %r608, %r218;
	add.s32 	%r225, %r609, %r219;
	add.s32 	%r226, %r223, 8;
	add.s32 	%r610, %r607, %r602;
	add.s32 	%r611, %r610, %r218;
	add.s32 	%r227, %r611, %r219;
	mul.lo.s32 	%r612, %r66, 784;
	and.b32  	%r613, %r177, 6;
	shr.u32 	%r614, %r4, 2;
	and.b32  	%r615, %r4, 1;
	neg.s32 	%r616, %r615;
	and.b32  	%r617, %r616, 392;
	bfe.s32 	%r618, %r4, 1, 1;
	and.b32  	%r619, %r618, 196;
	and.b32  	%r620, %r595, 1576;
	or.b32  	%r621, %r613, %r612;
	mad.lo.s32 	%r622, %r614, 98, %r621;
	or.b32  	%r623, %r622, %r64;
	add.s32 	%r624, %r623, %r617;
	add.s32 	%r625, %r624, %r619;
	add.s32 	%r228, %r625, %r620;
	add.s32 	%r229, %r228, 8;
	mul.lo.s32 	%r626, %r303, 786432;
	mad.lo.s32 	%r627, %r307, 192, %r626;
	cvt.u16.u32 	%rs43, %r198;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r628, %rs49;
	and.b32  	%r629, %r628, 248;
	and.b32  	%r630, %r310, 7;
	or.b32  	%r631, %r630, %r3;
	add.s32 	%r230, %r631, %r629;
	cvt.s64.s32 	%rd23, %r627;
	add.s32 	%r632, %r215, %r214;
	mul.wide.u32 	%rd84, %r632, 4;
	mov.u64 	%rd85, shmem;
	add.s64 	%rd24, %rd85, %rd84;
	add.s32 	%r633, %r216, %r214;
	mul.wide.u32 	%rd86, %r633, 4;
	add.s64 	%rd25, %rd85, %rd86;
	cvt.u64.u32 	%rd87, %r215;
	cvt.u64.u16 	%rd88, %rs42;
	and.b64  	%rd89, %rd88, 255;
	add.s64 	%rd90, %rd87, %rd89;
	shl.b64 	%rd91, %rd90, 2;
	add.s64 	%rd26, %rd85, %rd91;
	cvt.u64.u32 	%rd92, %r216;
	add.s64 	%rd93, %rd92, %rd89;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd27, %rd85, %rd94;
	or.pred  	%p248, %p243, %p244;
	and.b32  	%r634, %r310, 24;
	setp.eq.s32 	%p249, %r634, 8;
	or.pred  	%p250, %p248, %p249;
	or.pred  	%p251, %p250, %p245;
	setp.eq.s32 	%p252, %r634, 24;
	or.pred  	%p253, %p246, %p252;
	selp.b32 	%r231, 1145324612, -286331154, %p250;
	or.pred  	%p1, %p251, %p253;
	selp.b32 	%r232, 1145324612, -286331154, %p248;
	add.s32 	%r635, %r165, -1;
	setp.lt.u32 	%p254, %r635, 3;
	or.pred  	%p2, %p243, %p254;
	setp.eq.s32 	%p255, %r634, 16;
	or.pred  	%p3, %p255, %p252;
	selp.b32 	%r233, 1145324612, -286331154, %p255;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r232, %r233, %p2;
	or.pred  	%p287, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_199;
$L__BB0_170:                            // %L40300
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r163, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p303, %r88, 1968;
	mov.u32 	%r88, %r163;
	@%p303 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_171;
$L__BB0_199:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r636, %r88, %r301;
	setp.lt.s32 	%p256, %r636, %r302;
	@%p256 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_171;
$L__BB0_200:                            // %oksrem892
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.eq.s32 	%p257, %r201, 0;
	mul.hi.u32 	%r733, %r88, -1431655765;
	shr.u32 	%r734, %r733, 5;
	mul.lo.s32 	%r234, %r734, 48;
	add.s32 	%r735, %r234, %r198;
	cvt.u16.u32 	%rs50, %r735;
	shr.s16 	%rs51, %rs50, 15;
	shr.u16 	%rs52, %rs51, 5;
	add.s16 	%rs53, %rs50, %rs52;
	and.b16  	%rs54, %rs53, -2048;
	sub.s16 	%rs55, %rs50, %rs54;
	cvt.s32.s16 	%r736, %rs55;
	shl.b32 	%r737, %r736, 15;
	or.b32  	%r738, %r737, %r197;
	or.b32  	%r739, %r738, %r199;
	or.b32  	%r740, %r739, %r200;
	add.s32 	%r741, %r196, %r740;
	shr.s32 	%r742, %r741, 31;
	shr.u32 	%r743, %r742, 6;
	add.s32 	%r744, %r741, %r743;
	shr.s32 	%r745, %r744, 26;
	setp.lt.s32 	%p258, %r741, 0;
	and.b32  	%r746, %r744, -67108864;
	setp.ne.s32 	%p259, %r746, %r741;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r747, 1, 0, %p260;
	sub.s32 	%r748, %r747, %r745;
	shl.b32 	%r749, %r748, 26;
	add.s32 	%r750, %r749, %r741;
	mul.wide.s32 	%rd95, %r750, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r751, %r752, %r753, %r754}, [%rd96];
	add.s16 	%rs56, %rs50, 24;
	shr.s16 	%rs57, %rs56, 15;
	shr.u16 	%rs58, %rs57, 5;
	add.s16 	%rs59, %rs56, %rs58;
	and.b16  	%rs60, %rs59, -2048;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.s32.s16 	%r755, %rs61;
	shl.b32 	%r756, %r755, 15;
	or.b32  	%r757, %r756, %r197;
	or.b32  	%r758, %r757, %r199;
	or.b32  	%r759, %r758, %r200;
	add.s32 	%r760, %r196, %r759;
	shr.s32 	%r761, %r760, 31;
	shr.u32 	%r762, %r761, 6;
	add.s32 	%r763, %r760, %r762;
	shr.s32 	%r764, %r763, 26;
	setp.lt.s32 	%p261, %r760, 0;
	and.b32  	%r765, %r763, -67108864;
	setp.ne.s32 	%p262, %r765, %r760;
	and.pred  	%p263, %p261, %p262;
	selp.u32 	%r766, 1, 0, %p263;
	sub.s32 	%r767, %r766, %r764;
	shl.b32 	%r768, %r767, 26;
	add.s32 	%r769, %r768, %r760;
	mul.wide.s32 	%rd97, %r769, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r770, %r771, %r772, %r773}, [%rd98];
	selp.b32 	%r774, %r753, %r751, %p257;
	shfl.sync.bfly.b32	%r775, %r774, 4, 31, -1;
	selp.b32 	%r639, %r751, %r775, %p257;
	selp.b32 	%r644, %r775, %r753, %p257;
	selp.b32 	%r776, %r754, %r752, %p257;
	shfl.sync.bfly.b32	%r777, %r776, 4, 31, -1;
	selp.b32 	%r647, %r752, %r777, %p257;
	selp.b32 	%r652, %r777, %r754, %p257;
	selp.b32 	%r778, %r772, %r770, %p257;
	shfl.sync.bfly.b32	%r779, %r778, 4, 31, -1;
	selp.b32 	%r655, %r770, %r779, %p257;
	selp.b32 	%r660, %r779, %r772, %p257;
	selp.b32 	%r780, %r773, %r771, %p257;
	shfl.sync.bfly.b32	%r781, %r780, 4, 31, -1;
	selp.b32 	%r663, %r771, %r781, %p257;
	selp.b32 	%r668, %r781, %r773, %p257;
	shl.b32 	%r640, %r644, 4;
	mov.u32 	%r638, 252645135;
	// begin inline asm
	lop3.b32 %r670, %r638, %r639, %r640, 202;
	// end inline asm
	shr.u32 	%r643, %r639, 4;
	// begin inline asm
	lop3.b32 %r686, %r638, %r643, %r644, 202;
	// end inline asm
	shl.b32 	%r648, %r652, 4;
	// begin inline asm
	lop3.b32 %r678, %r638, %r647, %r648, 202;
	// end inline asm
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r694, %r638, %r651, %r652, 202;
	// end inline asm
	shl.b32 	%r656, %r660, 4;
	// begin inline asm
	lop3.b32 %r671, %r638, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r687, %r638, %r659, %r660, 202;
	// end inline asm
	shl.b32 	%r664, %r668, 4;
	// begin inline asm
	lop3.b32 %r679, %r638, %r663, %r664, 202;
	// end inline asm
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r695, %r638, %r667, %r668, 202;
	// end inline asm
	mov.u32 	%r672, 25152;
	// begin inline asm
	prmt.b32 %r702, %r670, %r671, %r672;
	// end inline asm
	mov.u32 	%r676, 29521;
	// begin inline asm
	prmt.b32 %r718, %r670, %r671, %r676;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r678, %r679, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r678, %r679, %r676;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r686, %r687, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r686, %r687, %r676;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r694, %r695, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r727, %r694, %r695, %r676;
	// end inline asm
	mov.u32 	%r728, 21520;
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r728;
	// end inline asm
	mov.u32 	%r732, 30258;
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r726, %r727, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r729, %r726, %r727, %r732;
	// end inline asm
	mul.hi.s16 	%rs62, %rs50, 10923;
	shr.u16 	%rs63, %rs62, 15;
	shr.s16 	%rs64, %rs62, 2;
	add.s16 	%rs65, %rs64, %rs63;
	mul.lo.s16 	%rs66, %rs65, 24;
	sub.s16 	%rs67, %rs50, %rs66;
	cvt.s32.s16 	%r782, %rs67;
	add.s32 	%r783, %r202, %r782;
	mul.wide.s32 	%rd99, %r783, 4;
	add.s64 	%rd101, %rd85, %rd99;
	st.shared.u32 	[%rd101], %r701;
	add.s32 	%r784, %r783, 128;
	mul.wide.u32 	%rd102, %r784, 4;
	add.s64 	%rd103, %rd85, %rd102;
	st.shared.u32 	[%rd103], %r709;
	add.s32 	%r785, %r783, 64;
	mul.wide.u32 	%rd104, %r785, 4;
	add.s64 	%rd105, %rd85, %rd104;
	st.shared.u32 	[%rd105], %r705;
	add.s32 	%r786, %r783, 192;
	mul.wide.u32 	%rd106, %r786, 4;
	add.s64 	%rd107, %rd85, %rd106;
	st.shared.u32 	[%rd107], %r713;
	add.s32 	%r787, %r783, 32;
	mul.wide.u32 	%rd108, %r787, 4;
	add.s64 	%rd109, %rd85, %rd108;
	st.shared.u32 	[%rd109], %r717;
	add.s32 	%r788, %r783, 160;
	mul.wide.u32 	%rd110, %r788, 4;
	add.s64 	%rd111, %rd85, %rd110;
	st.shared.u32 	[%rd111], %r725;
	add.s32 	%r789, %r783, 96;
	mul.wide.u32 	%rd112, %r789, 4;
	add.s64 	%rd113, %rd85, %rd112;
	st.shared.u32 	[%rd113], %r721;
	add.s32 	%r790, %r783, 224;
	mul.wide.u32 	%rd114, %r790, 4;
	add.s64 	%rd115, %rd85, %rd114;
	st.shared.u32 	[%rd115], %r729;
	bar.sync 	0;
	add.s32 	%r791, %r234, %r203;
	cvt.u16.u32 	%rs68, %r791;
	mul.hi.s16 	%rs69, %rs68, 10923;
	shr.u16 	%rs70, %rs69, 15;
	shr.s16 	%rs71, %rs69, 2;
	add.s16 	%rs72, %rs71, %rs70;
	mul.lo.s16 	%rs73, %rs72, 24;
	sub.s16 	%rs74, %rs68, %rs73;
	cvt.s32.s16 	%r235, %rs74;
	add.s32 	%r792, %r5, %r235;
	mul.wide.s32 	%rd116, %r792, 4;
	add.s64 	%rd117, %rd85, %rd116;
	ld.shared.u32 	%r236, [%rd117];
	add.s32 	%r793, %r204, %r235;
	mul.wide.s32 	%rd118, %r793, 4;
	add.s64 	%rd119, %rd85, %rd118;
	ld.shared.u32 	%r237, [%rd119];
	add.s32 	%r794, %r205, %r235;
	mul.wide.u32 	%rd120, %r794, 4;
	add.s64 	%rd121, %rd85, %rd120;
	ld.shared.u32 	%r238, [%rd121];
	add.s32 	%r795, %r206, %r235;
	mul.wide.u32 	%rd122, %r795, 4;
	add.s64 	%rd123, %rd85, %rd122;
	ld.shared.u32 	%r239, [%rd123];
	add.s32 	%r796, %r207, %r235;
	mul.wide.u32 	%rd124, %r796, 4;
	add.s64 	%rd125, %rd85, %rd124;
	ld.shared.u32 	%r240, [%rd125];
	add.s32 	%r797, %r208, %r235;
	mul.wide.u32 	%rd126, %r797, 4;
	add.s64 	%rd127, %rd85, %rd126;
	ld.shared.u32 	%r241, [%rd127];
	add.s32 	%r798, %r209, %r235;
	mul.wide.u32 	%rd128, %r798, 4;
	add.s64 	%rd129, %rd85, %rd128;
	ld.shared.u32 	%r242, [%rd129];
	add.s32 	%r799, %r210, %r235;
	mul.wide.u32 	%rd130, %r799, 4;
	add.s64 	%rd131, %rd85, %rd130;
	ld.shared.u32 	%r243, [%rd131];
	add.s32 	%r800, %r211, %r235;
	mul.wide.u32 	%rd132, %r800, 4;
	add.s64 	%rd133, %rd85, %rd132;
	ld.shared.u32 	%r244, [%rd133];
	add.s32 	%r801, %r212, %r235;
	mul.wide.u32 	%rd134, %r801, 4;
	add.s64 	%rd135, %rd85, %rd134;
	ld.shared.u32 	%r245, [%rd135];
	add.s32 	%r802, %r213, %r235;
	mul.wide.s32 	%rd136, %r802, 4;
	add.s64 	%rd137, %rd85, %rd136;
	ld.shared.u32 	%r246, [%rd137];
	bar.sync 	0;
	shfl.sync.idx.b32	%r247, %r190, 0, 31, -1;
	shfl.sync.idx.b32	%r248, %r190, 1, 31, -1;
	shfl.sync.idx.b32	%r249, %r190, 2, 31, -1;
	shfl.sync.idx.b32	%r250, %r190, 3, 31, -1;
	shfl.sync.idx.b32	%r251, %r190, 4, 31, -1;
	shfl.sync.idx.b32	%r252, %r190, 5, 31, -1;
	shfl.sync.idx.b32	%r253, %r190, 6, 31, -1;
	shfl.sync.idx.b32	%r254, %r190, 7, 31, -1;
	shfl.sync.idx.b32	%r255, %r190, 8, 31, -1;
	shfl.sync.idx.b32	%r256, %r190, 9, 31, -1;
	shfl.sync.idx.b32	%r257, %r190, 10, 31, -1;
	shfl.sync.idx.b32	%r258, %r190, 11, 31, -1;
	shfl.sync.idx.b32	%r259, %r190, 12, 31, -1;
	shfl.sync.idx.b32	%r260, %r190, 13, 31, -1;
	shfl.sync.idx.b32	%r261, %r190, 14, 31, -1;
	shfl.sync.idx.b32	%r262, %r190, 15, 31, -1;
	setp.eq.s32 	%p264, %r247, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2306
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r803, %r247, %r235;
	mul.wide.s32 	%rd138, %r803, 4;
	add.s64 	%rd140, %rd85, %rd138;
	st.shared.u32 	[%rd140], %r236;
	setp.eq.s32 	%p265, %r248, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2374
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r804, %r248, %r235;
	mul.wide.s32 	%rd141, %r804, 4;
	add.s64 	%rd143, %rd85, %rd141;
	st.shared.u32 	[%rd143], %r237;
	setp.eq.s32 	%p266, %r249, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2442
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r805, %r249, %r235;
	mul.wide.s32 	%rd144, %r805, 4;
	add.s64 	%rd146, %rd85, %rd144;
	st.shared.u32 	[%rd146], %r238;
	setp.eq.s32 	%p267, %r250, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2510
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r806, %r250, %r235;
	mul.wide.s32 	%rd147, %r806, 4;
	add.s64 	%rd149, %rd85, %rd147;
	st.shared.u32 	[%rd149], %r239;
	setp.eq.s32 	%p268, %r251, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2578
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r807, %r251, %r235;
	mul.wide.s32 	%rd150, %r807, 4;
	add.s64 	%rd152, %rd85, %rd150;
	st.shared.u32 	[%rd152], %r240;
	setp.eq.s32 	%p269, %r252, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2646
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r808, %r252, %r235;
	mul.wide.s32 	%rd153, %r808, 4;
	add.s64 	%rd155, %rd85, %rd153;
	st.shared.u32 	[%rd155], %r241;
	setp.eq.s32 	%p270, %r253, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2714
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r809, %r253, %r235;
	mul.wide.s32 	%rd156, %r809, 4;
	add.s64 	%rd158, %rd85, %rd156;
	st.shared.u32 	[%rd158], %r242;
	setp.eq.s32 	%p271, %r254, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2782
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r810, %r254, %r235;
	mul.wide.s32 	%rd159, %r810, 4;
	add.s64 	%rd161, %rd85, %rd159;
	st.shared.u32 	[%rd161], %r243;
	setp.eq.s32 	%p272, %r255, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2850
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r811, %r255, %r235;
	mul.wide.s32 	%rd162, %r811, 4;
	add.s64 	%rd164, %rd85, %rd162;
	st.shared.u32 	[%rd164], %r244;
	setp.eq.s32 	%p273, %r256, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2918
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r812, %r256, %r235;
	mul.wide.s32 	%rd165, %r812, 4;
	add.s64 	%rd167, %rd85, %rd165;
	st.shared.u32 	[%rd167], %r245;
	setp.eq.s32 	%p274, %r257, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem2987
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.gt.u32 	%p275, %r4, 3;
	selp.b32 	%r813, 0, %r246, %p275;
	add.s32 	%r814, %r257, %r235;
	mul.wide.s32 	%rd168, %r814, 4;
	add.s64 	%rd170, %rd85, %rd168;
	st.shared.u32 	[%rd170], %r813;
	setp.eq.s32 	%p276, %r258, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3055
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r815, %r258, %r235;
	mul.wide.s32 	%rd171, %r815, 4;
	add.s64 	%rd173, %rd85, %rd171;
	mov.u32 	%r816, 0;
	st.shared.u32 	[%rd173], %r816;
	setp.eq.s32 	%p277, %r259, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3122
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r817, %r259, %r235;
	mul.wide.s32 	%rd174, %r817, 4;
	add.s64 	%rd176, %rd85, %rd174;
	st.shared.u32 	[%rd176], %r816;
	setp.eq.s32 	%p278, %r260, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3189
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r819, %r260, %r235;
	mul.wide.s32 	%rd177, %r819, 4;
	add.s64 	%rd179, %rd85, %rd177;
	st.shared.u32 	[%rd179], %r816;
	setp.eq.s32 	%p279, %r261, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3256
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r821, %r261, %r235;
	mul.wide.s32 	%rd180, %r821, 4;
	add.s64 	%rd182, %rd85, %rd180;
	st.shared.u32 	[%rd182], %r816;
	setp.eq.s32 	%p280, %r262, 999999999;
	@%p280 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3323
                                        //   in Loop: Header=BB0_199 Depth=1
	setp.eq.s32 	%p281, %r191, 3;
	add.s32 	%r824, %r262, %r235;
	mul.wide.s32 	%rd183, %r824, 4;
	add.s64 	%rd185, %rd85, %rd183;
	st.shared.u32 	[%rd185], %r816;
	bar.sync 	0;
	mov.u32 	%r92, %r816;
	mov.u32 	%r93, %r816;
	mov.u32 	%r94, %r816;
	mov.u32 	%r95, %r816;
	mov.u32 	%r96, %r816;
	mov.u32 	%r97, %r816;
	mov.u32 	%r98, %r816;
	mov.u32 	%r99, %r816;
	mov.u32 	%r100, %r816;
	mov.u32 	%r101, %r816;
	mov.u32 	%r102, %r816;
	mov.u32 	%r103, %r816;
	mov.u32 	%r104, %r816;
	mov.u32 	%r105, %r816;
	mov.u32 	%r106, %r816;
	mov.u32 	%r107, %r816;
	@%p281 bra 	$L__BB0_162;
// %bb.217:                             // %oksrem3378
                                        //   in Loop: Header=BB0_199 Depth=1
	add.s32 	%r263, %r234, %r214;
	ld.shared.u32 	%r92, [%rd24];
	ld.shared.u32 	%r93, [%rd25];
	ld.shared.u32 	%r94, [%rd26+12];
	ld.shared.u32 	%r95, [%rd27+12];
	ld.shared.u32 	%r96, [%rd26+24];
	ld.shared.u32 	%r97, [%rd27+24];
	ld.shared.u32 	%r98, [%rd26+36];
	ld.shared.u32 	%r99, [%rd27+36];
	add.s32 	%r825, %r263, 12;
	mul.hi.u32 	%r826, %r825, -1431655765;
	shr.u32 	%r827, %r826, 4;
	mul.lo.s32 	%r828, %r827, 24;
	sub.s32 	%r829, %r825, %r828;
	add.s32 	%r830, %r215, %r829;
	mul.wide.u32 	%rd186, %r830, 4;
	add.s64 	%rd188, %rd85, %rd186;
	ld.shared.u32 	%r100, [%rd188];
	add.s32 	%r831, %r216, %r829;
	mul.wide.u32 	%rd189, %r831, 4;
	add.s64 	%rd190, %rd85, %rd189;
	ld.shared.u32 	%r101, [%rd190];
	ld.shared.u32 	%r102, [%rd26+60];
	ld.shared.u32 	%r103, [%rd27+60];
	cvt.u16.u32 	%rs75, %r263;
	add.s16 	%rs76, %rs75, 18;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r832, %rs82;
	add.s32 	%r833, %r215, %r832;
	mul.wide.s32 	%rd191, %r833, 4;
	add.s64 	%rd192, %rd85, %rd191;
	ld.shared.u32 	%r104, [%rd192];
	add.s32 	%r834, %r216, %r832;
	mul.wide.u32 	%rd193, %r834, 4;
	add.s64 	%rd194, %rd85, %rd193;
	ld.shared.u32 	%r105, [%rd194];
	add.s16 	%rs83, %rs75, 21;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r835, %rs89;
	add.s32 	%r836, %r215, %r835;
	mul.wide.s32 	%rd195, %r836, 4;
	add.s64 	%rd196, %rd85, %rd195;
	ld.shared.u32 	%r106, [%rd196];
	add.s32 	%r837, %r216, %r835;
	mul.wide.u32 	%rd197, %r837, 4;
	add.s64 	%rd198, %rd85, %rd197;
	ld.shared.u32 	%r107, [%rd198];
$L__BB0_162:                            // %L10559
                                        //   in Loop: Header=BB0_199 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r816;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L25420
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p292, %r111, 24;
	@%p292 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10577
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p282, %r111, 0;
	selp.b32 	%r1231, %r92, 0, %p282;
	setp.eq.s32 	%p283, %r111, 6;
	selp.b32 	%r1232, %r96, %r1231, %p283;
	setp.eq.s32 	%p284, %r111, 12;
	selp.b32 	%r1233, %r100, %r1232, %p284;
	setp.eq.s32 	%p285, %r111, 18;
	selp.b32 	%r1234, %r104, %r1233, %p285;
	selp.b32 	%r1235, %r93, 0, %p282;
	selp.b32 	%r1236, %r97, %r1235, %p283;
	selp.b32 	%r1237, %r101, %r1236, %p284;
	selp.b32 	%r1238, %r105, %r1237, %p285;
	selp.b32 	%r1239, %r94, 0, %p282;
	selp.b32 	%r1240, %r98, %r1239, %p283;
	selp.b32 	%r1241, %r102, %r1240, %p284;
	selp.b32 	%r1242, %r106, %r1241, %p285;
	selp.b32 	%r1243, %r95, 0, %p282;
	selp.b32 	%r1244, %r99, %r1243, %p283;
	selp.b32 	%r1245, %r103, %r1244, %p284;
	selp.b32 	%r1246, %r107, %r1245, %p285;
	mov.u16 	%rs127, 25600;
	// begin inline asm
	mov.b32 %r844, {%rs127, %rs127};
	// end inline asm
	mov.u16 	%rs129, 21504;
	// begin inline asm
	mov.b32 %r855, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r843, %r1234, -2004318072;
	mov.u32 	%r980, 983055;
	// begin inline asm
	lop3.b32 %r841, %r980, %r843, %r844, 202;
	// end inline asm
	mov.u16 	%rs133, 18432;
	// begin inline asm
	mov.b32 %r845, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r846, %r844, %r845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r849, %r841, %r846;
	// end inline asm
	mov.u32 	%r991, 15728880;
	// begin inline asm
	lop3.b32 %r852, %r991, %r843, %r855, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r856, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r857, %r855, %r856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r860, %r852, %r857;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r889, %r1238, -2004318072;
	// begin inline asm
	lop3.b32 %r887, %r980, %r889, %r890, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r892, %r890, %r891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r895, %r887, %r892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r898, %r991, %r889, %r901, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r903, %r901, %r902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r906, %r898, %r903;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r935, %r1242, -2004318072;
	// begin inline asm
	lop3.b32 %r933, %r980, %r935, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r944, %r991, %r935, %r947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r947, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r993, {%rs129, %rs129};
	// end inline asm
	xor.b32  	%r981, %r1246, -2004318072;
	// begin inline asm
	lop3.b32 %r979, %r980, %r981, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r990, %r991, %r981, %r993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r993, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r849;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1023, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r895;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1026, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r860;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1029, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r906;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1032, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r941;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1035, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1038, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r952;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1041, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r998;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1044, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1047, %r1048}, {%r333, %r336}, {%r1023}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1054, %r1055}, {%r333, %r336}, {%r1026}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1061, %r1062}, {%r333, %r336}, {%r1029}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1068, %r1069}, {%r333, %r336}, {%r1032}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1075, %r1076}, {%r333, %r336}, {%r1035}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1082, %r1083}, {%r333, %r336}, {%r1038}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1089, %r1090}, {%r333, %r336}, {%r1041}, {%r816, %r816};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1096, %r1097}, {%r333, %r336}, {%r1044}, {%r816, %r816};
	// end inline asm
	@%p1 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_164;
$L__BB0_218:                            // %pass4747
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1103, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r385, %r1047, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r385, %r1054, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r385, %r1061, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r385, %r1068, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1139, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r1139, %r1076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r385, %r1075, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1148, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1150, %r1148, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r385, %r1082, %r1150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1157, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1159, %r1157, %r1090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1162, %r385, %r1089, %r1159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1166, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1168, %r1166, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r385, %r1096, %r1168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r388, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r385, %r1048, %r1175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1182, %r388, %r1054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1185, %r385, %r1055, %r1182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1189, %r388, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r385, %r1062, %r1189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1196, %r388, %r1068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r385, %r1069, %r1196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1203, %r388, %r1075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1206, %r385, %r1076, %r1203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r388, %r1082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r385, %r1083, %r1210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r388, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r385, %r1090, %r1217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r388, %r1096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r385, %r1097, %r1224;
	// end inline asm
	setp.gt.u32 	%p286, %r310, 11;
	mov.u32 	%r1317, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r429, %r432}, {%r1108, %r1178}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1328, %r1329}, {%r429, %r432}, {%r1117, %r1185}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1336, %r1337}, {%r429, %r432}, {%r1126, %r1192}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1344, %r1345}, {%r429, %r432}, {%r1135, %r1199}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1352, %r1353}, {%r429, %r432}, {%r1144, %r1206}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1360, %r1361}, {%r429, %r432}, {%r1153, %r1213}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1368, %r1369}, {%r429, %r432}, {%r1162, %r1220}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1376, %r1377}, {%r429, %r432}, {%r1171, %r1227}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r1320, %r1321, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r1320, %r1321, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1328, %r1329, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1328, %r1329, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1336, %r1337, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1336, %r1337, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1344, %r1345, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1344, %r1345, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1352, %r1353, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1352, %r1353, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1360, %r1361, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1360, %r1361, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1368, %r1369, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1368, %r1369, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1376, %r1377, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1376, %r1377, %r732;
	// end inline asm
	add.s16 	%rs138, %rs9, %rs3;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	add.s16 	%rs141, %rs139, %rs140;
	mul.lo.s16 	%rs142, %rs141, 6;
	sub.s16 	%rs143, %rs138, %rs142;
	mul.wide.s16 	%r1383, %rs143, 16;
	add.s32 	%r1384, %r221, %r1383;
	mul.wide.s32 	%rd201, %r1384, 4;
	add.s64 	%rd28, %rd85, %rd201;
	st.shared.u32 	[%rd28], %r280;
	add.s32 	%r1385, %r222, %r1383;
	mul.wide.u32 	%rd203, %r1385, 4;
	add.s64 	%rd29, %rd85, %rd203;
	st.shared.u32 	[%rd29], %r281;
	add.s32 	%r1386, %r223, %r1383;
	mul.wide.s32 	%rd204, %r1386, 4;
	add.s64 	%rd30, %rd85, %rd204;
	st.shared.u32 	[%rd30], %r282;
	add.s32 	%r1387, %r224, %r1383;
	mul.wide.u32 	%rd205, %r1387, 4;
	add.s64 	%rd31, %rd85, %rd205;
	st.shared.u32 	[%rd31], %r283;
	cvt.s64.s32 	%rd206, %r1383;
	cvt.u64.u32 	%rd207, %r219;
	cvt.u64.u32 	%rd208, %r218;
	cvt.u64.u32 	%rd209, %r217;
	cvt.u64.u32 	%rd210, %r220;
	add.s64 	%rd211, %rd210, %rd209;
	add.s64 	%rd212, %rd211, %rd208;
	add.s64 	%rd32, %rd212, %rd207;
	add.s64 	%rd213, %rd32, %rd206;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd33, %rd85, %rd214;
	st.shared.u32 	[%rd33+32], %r284;
	add.s32 	%r1388, %r225, %r1383;
	mul.wide.u32 	%rd215, %r1388, 4;
	add.s64 	%rd34, %rd85, %rd215;
	st.shared.u32 	[%rd34], %r285;
	add.s32 	%r1389, %r226, %r1383;
	mul.wide.s32 	%rd216, %r1389, 4;
	add.s64 	%rd35, %rd85, %rd216;
	st.shared.u32 	[%rd35], %r286;
	add.s32 	%r1390, %r227, %r1383;
	mul.wide.u32 	%rd217, %r1390, 4;
	add.s64 	%rd36, %rd85, %rd217;
	st.shared.u32 	[%rd36], %r287;
	add.s16 	%rs144, %rs138, 3;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	add.s16 	%rs147, %rs145, %rs146;
	mul.lo.s16 	%rs148, %rs147, 6;
	sub.s16 	%rs149, %rs144, %rs148;
	mul.wide.s16 	%r1391, %rs149, 16;
	add.s32 	%r1392, %r221, %r1391;
	mul.wide.s32 	%rd218, %r1392, 4;
	add.s64 	%rd37, %rd85, %rd218;
	st.shared.u32 	[%rd37], %r288;
	add.s32 	%r1393, %r222, %r1391;
	mul.wide.u32 	%rd219, %r1393, 4;
	add.s64 	%rd38, %rd85, %rd219;
	st.shared.u32 	[%rd38], %r289;
	add.s32 	%r1394, %r223, %r1391;
	mul.wide.s32 	%rd220, %r1394, 4;
	add.s64 	%rd39, %rd85, %rd220;
	st.shared.u32 	[%rd39], %r290;
	add.s32 	%r1395, %r224, %r1391;
	mul.wide.u32 	%rd221, %r1395, 4;
	add.s64 	%rd40, %rd85, %rd221;
	st.shared.u32 	[%rd40], %r291;
	cvt.s64.s32 	%rd222, %r1391;
	add.s64 	%rd223, %rd32, %rd222;
	shl.b64 	%rd224, %rd223, 2;
	add.s64 	%rd41, %rd85, %rd224;
	st.shared.u32 	[%rd41+32], %r292;
	add.s32 	%r1396, %r225, %r1391;
	mul.wide.u32 	%rd225, %r1396, 4;
	add.s64 	%rd42, %rd85, %rd225;
	st.shared.u32 	[%rd42], %r293;
	add.s32 	%r1397, %r226, %r1391;
	mul.wide.s32 	%rd226, %r1397, 4;
	add.s64 	%rd43, %rd85, %rd226;
	st.shared.u32 	[%rd43], %r294;
	add.s32 	%r1398, %r227, %r1391;
	mul.wide.u32 	%rd227, %r1398, 4;
	add.s64 	%rd44, %rd85, %rd227;
	st.shared.u32 	[%rd44], %r295;
	@%p286 bra 	$L__BB0_220;
// %bb.219:                             // %oksrem7040
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r280;
	st.shared.u32 	[%rd29], %r281;
	st.shared.u32 	[%rd30], %r282;
	st.shared.u32 	[%rd31], %r283;
	st.shared.u32 	[%rd33+32], %r284;
	st.shared.u32 	[%rd34], %r285;
	st.shared.u32 	[%rd35], %r286;
	st.shared.u32 	[%rd36], %r287;
	st.shared.u32 	[%rd37], %r288;
	st.shared.u32 	[%rd38], %r289;
	st.shared.u32 	[%rd39], %r290;
	st.shared.u32 	[%rd40], %r291;
	st.shared.u32 	[%rd41+32], %r292;
	st.shared.u32 	[%rd42], %r293;
	st.shared.u32 	[%rd43], %r294;
	st.shared.u32 	[%rd44], %r295;
$L__BB0_220:                            // %L19966
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs150, %rs3, 10923;
	shr.u16 	%rs151, %rs150, 15;
	add.s16 	%rs152, %rs150, %rs151;
	mul.lo.s16 	%rs153, %rs152, 6;
	sub.s16 	%rs154, %rs3, %rs153;
	mul.wide.s16 	%r1445, %rs154, 16;
	add.s32 	%r1446, %r228, %r1445;
	mul.wide.s32 	%rd228, %r1446, 4;
	add.s64 	%rd230, %rd85, %rd228;
	ld.shared.u32 	%r1403, [%rd230];
	add.s32 	%r1447, %r229, %r1445;
	mul.wide.s32 	%rd231, %r1447, 4;
	add.s64 	%rd232, %rd85, %rd231;
	ld.shared.u32 	%r1410, [%rd232];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r441, %r444}, {%r1403}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1406, %r1407}, {%r441, %r444}, {%r1410}, {%r1317, %r1317};
	// end inline asm
	@%p287 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_221;
$L__BB0_222:                            // %pass9516
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1413, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r479, %r1399, %r1415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r479, %r1406, %r1424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r482, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r479, %r1400, %r1431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r482, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r479, %r1407, %r1438;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1467, %r1470}, {%r525, %r528}, {%r1418, %r1434}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1474, %r1478}, {%r525, %r528}, {%r1427, %r1441}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r1467, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r1470, %r1470, %r1466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r1474, %r1474, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r1478, %r1478, %r1473;
	// end inline asm
	mov.u32 	%r1897, 559227221;
	// begin inline asm
	fma.rn.f16x2 %r1481, %r1897, %r1477, %r110;
	// end inline asm
	add.s32 	%r1900, %r88, %r111;
	add.s32 	%r1901, %r1900, 1;
	mul.hi.u32 	%r1902, %r1901, -1431655765;
	shr.u32 	%r1903, %r1902, 2;
	mul.lo.s32 	%r1904, %r1903, 6;
	sub.s32 	%r1905, %r1901, %r1904;
	shl.b32 	%r1906, %r1905, 4;
	add.s32 	%r1907, %r228, %r1906;
	mul.wide.u32 	%rd235, %r1907, 4;
	add.s64 	%rd237, %rd85, %rd235;
	ld.shared.u32 	%r1489, [%rd237];
	add.s32 	%r1908, %r229, %r1906;
	mul.wide.u32 	%rd238, %r1908, 4;
	add.s64 	%rd239, %rd85, %rd238;
	ld.shared.u32 	%r1496, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1506, %r1503}, {%r441, %r444}, {%r1489}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1515, %r1512}, {%r441, %r444}, {%r1496}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1499, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1501, %r1499, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r479, %r1506, %r1501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1508, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r1508, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r479, %r1515, %r1510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r482, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r479, %r1503, %r1517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r482, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r479, %r1512, %r1524;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1550, %r1553}, {%r525, %r528}, {%r1504, %r1520}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1557, %r1561}, {%r525, %r528}, {%r1513, %r1527}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1550, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r1553, %r1553, %r1549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r1557, %r1557, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1561, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1897, %r1560, %r1481;
	// end inline asm
	add.s32 	%r1909, %r1900, 2;
	mul.hi.u32 	%r1910, %r1909, -1431655765;
	shr.u32 	%r1911, %r1910, 2;
	mul.lo.s32 	%r1912, %r1911, 6;
	sub.s32 	%r1913, %r1909, %r1912;
	shl.b32 	%r1914, %r1913, 4;
	add.s32 	%r1915, %r228, %r1914;
	mul.wide.u32 	%rd240, %r1915, 4;
	add.s64 	%rd241, %rd85, %rd240;
	ld.shared.u32 	%r1572, [%rd241];
	add.s32 	%r1916, %r229, %r1914;
	mul.wide.u32 	%rd242, %r1916, 4;
	add.s64 	%rd243, %rd85, %rd242;
	ld.shared.u32 	%r1579, [%rd243];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1589, %r1586}, {%r441, %r444}, {%r1572}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1598, %r1595}, {%r441, %r444}, {%r1579}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1582, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r1582, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r479, %r1589, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1591, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1591, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r479, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r482, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r479, %r1586, %r1600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r482, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r479, %r1595, %r1607;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1633, %r1636}, {%r525, %r528}, {%r1587, %r1603}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1640, %r1644}, {%r525, %r528}, {%r1596, %r1610}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1633, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1636, %r1636, %r1632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1897, %r1643, %r1564;
	// end inline asm
	add.s32 	%r1917, %r1900, 3;
	mul.hi.u32 	%r1918, %r1917, -1431655765;
	shr.u32 	%r1919, %r1918, 2;
	mul.lo.s32 	%r1920, %r1919, 6;
	sub.s32 	%r1921, %r1917, %r1920;
	shl.b32 	%r1922, %r1921, 4;
	add.s32 	%r1923, %r228, %r1922;
	mul.wide.u32 	%rd244, %r1923, 4;
	add.s64 	%rd245, %rd85, %rd244;
	ld.shared.u32 	%r1655, [%rd245];
	add.s32 	%r1924, %r229, %r1922;
	mul.wide.u32 	%rd246, %r1924, 4;
	add.s64 	%rd247, %rd85, %rd246;
	ld.shared.u32 	%r1662, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1672, %r1669}, {%r441, %r444}, {%r1655}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1681, %r1678}, {%r441, %r444}, {%r1662}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1665, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1667, %r1665, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1670, %r479, %r1672, %r1667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r479, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r482, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r479, %r1669, %r1683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r482, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r479, %r1678, %r1690;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1716, %r1719}, {%r525, %r528}, {%r1670, %r1686}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1723, %r1727}, {%r525, %r528}, {%r1679, %r1693}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1716, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r1719, %r1719, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1727, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r1897, %r1726, %r1647;
	// end inline asm
	add.s32 	%r1925, %r1900, 4;
	mul.hi.u32 	%r1926, %r1925, -1431655765;
	shr.u32 	%r1927, %r1926, 2;
	mul.lo.s32 	%r1928, %r1927, 6;
	sub.s32 	%r1929, %r1925, %r1928;
	shl.b32 	%r1930, %r1929, 4;
	add.s32 	%r1931, %r228, %r1930;
	mul.wide.u32 	%rd248, %r1931, 4;
	add.s64 	%rd249, %rd85, %rd248;
	ld.shared.u32 	%r1738, [%rd249];
	add.s32 	%r1932, %r229, %r1930;
	mul.wide.u32 	%rd250, %r1932, 4;
	add.s64 	%rd251, %rd85, %rd250;
	ld.shared.u32 	%r1745, [%rd251];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1755, %r1752}, {%r441, %r444}, {%r1738}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1764, %r1761}, {%r441, %r444}, {%r1745}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r479, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r479, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r482, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r479, %r1752, %r1766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r482, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r479, %r1761, %r1773;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1802}, {%r525, %r528}, {%r1753, %r1769}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1810}, {%r525, %r528}, {%r1762, %r1776}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1799, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1897, %r1809, %r1730;
	// end inline asm
	add.s32 	%r1933, %r1900, 5;
	mul.hi.u32 	%r1934, %r1933, -1431655765;
	shr.u32 	%r1935, %r1934, 2;
	mul.lo.s32 	%r1936, %r1935, 6;
	sub.s32 	%r1937, %r1933, %r1936;
	shl.b32 	%r1938, %r1937, 4;
	add.s32 	%r1939, %r228, %r1938;
	mul.wide.u32 	%rd252, %r1939, 4;
	add.s64 	%rd253, %rd85, %rd252;
	ld.shared.u32 	%r1821, [%rd253];
	add.s32 	%r1940, %r229, %r1938;
	mul.wide.u32 	%rd254, %r1940, 4;
	add.s64 	%rd255, %rd85, %rd254;
	ld.shared.u32 	%r1828, [%rd255];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1835}, {%r441, %r444}, {%r1821}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1847, %r1844}, {%r441, %r444}, {%r1828}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1831, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1833, %r1831, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1836, %r479, %r1838, %r1833;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1840, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1842, %r1840, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1845, %r479, %r1847, %r1842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r482, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r479, %r1835, %r1849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r482, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r479, %r1844, %r1856;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1882, %r1885}, {%r525, %r528}, {%r1836, %r1852}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1889, %r1893}, {%r525, %r528}, {%r1845, %r1859}, {%r1317, %r1317}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r1882, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1885, %r1885, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1889, %r1889, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1893, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1897, %r1892, %r1813;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p288, %r108, 12;
	@%p288 bra 	$L__BB0_165;
// %bb.223:                             // %pass11500
                                        //   in Loop: Header=BB0_163 Depth=2
	mad.lo.s32 	%r1942, %r109, 786432, %r230;
	cvt.u64.u32 	%rd256, %r1942;
	add.s64 	%rd257, %rd256, %rd23;
	mul.hi.s64 	%rd258, %rd257, 3074457345618258603;
	shr.u64 	%rd259, %rd258, 63;
	shr.s64 	%rd260, %rd258, 27;
	add.s64 	%rd261, %rd260, %rd259;
	setp.lt.s64 	%p289, %rd257, 0;
	mul.lo.s64 	%rd262, %rd261, 805306368;
	setp.ne.s64 	%p290, %rd262, %rd257;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd263, -1, 0, %p291;
	add.s64 	%rd264, %rd261, %rd263;
	mul.lo.s64 	%rd265, %rd264, -805306368;
	add.s64 	%rd266, %rd265, %rd257;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd268, %rd4, %rd267;
	st.global.u32 	[%rd268], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L25441.preheader
                                        //   in Loop: Header=BB0_199 Depth=1
	mov.u16 	%rs255, %rs1;
	mov.u32 	%r3091, %r1317;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L34830
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs217, %rs255, -5;
	mul.hi.s16 	%rs218, %rs217, 10923;
	shr.u16 	%rs219, %rs218, 15;
	add.s16 	%rs220, %rs218, %rs219;
	mul.lo.s16 	%rs221, %rs220, 6;
	sub.s16 	%rs222, %rs217, %rs221;
	mul.wide.s16 	%r3006, %rs222, 16;
	add.s32 	%r3007, %r228, %r3006;
	mul.wide.s32 	%rd290, %r3007, 4;
	add.s64 	%rd292, %rd85, %rd290;
	ld.shared.u32 	%r2512, [%rd292];
	add.s32 	%r3008, %r229, %r3006;
	mul.wide.s32 	%rd293, %r3008, 4;
	add.s64 	%rd294, %rd85, %rd293;
	ld.shared.u32 	%r2519, [%rd294];
	mov.u32 	%r2985, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2529, %r2526}, {%r441, %r444}, {%r2512}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r441, %r444}, {%r2519}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2522, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r2522, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r479, %r2529, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r479, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2540, %r482, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r479, %r2526, %r2540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r482, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r479, %r2535, %r2547;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2573, %r2576}, {%r525, %r528}, {%r2527, %r2543}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2580, %r2584}, {%r525, %r528}, {%r2536, %r2550}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2572, %r2573, %r2573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2575, %r2576, %r2576, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r2580, %r2580, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2583, %r2584, %r2584, %r2579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r1897, %r2583, %r110;
	// end inline asm
	add.s16 	%rs223, %rs255, -4;
	mul.hi.s16 	%rs224, %rs223, 10923;
	shr.u16 	%rs225, %rs224, 15;
	add.s16 	%rs226, %rs224, %rs225;
	mul.lo.s16 	%rs227, %rs226, 6;
	sub.s16 	%rs228, %rs223, %rs227;
	mul.wide.s16 	%r3009, %rs228, 16;
	add.s32 	%r3010, %r228, %r3009;
	mul.wide.s32 	%rd295, %r3010, 4;
	add.s64 	%rd296, %rd85, %rd295;
	ld.shared.u32 	%r2595, [%rd296];
	add.s32 	%r3011, %r229, %r3009;
	mul.wide.s32 	%rd297, %r3011, 4;
	add.s64 	%rd298, %rd85, %rd297;
	ld.shared.u32 	%r2602, [%rd298];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2612, %r2609}, {%r441, %r444}, {%r2595}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2621, %r2618}, {%r441, %r444}, {%r2602}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2605, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2607, %r2605, %r2609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2610, %r479, %r2612, %r2607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2614, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2616, %r2614, %r2618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2619, %r479, %r2621, %r2616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2623, %r482, %r2612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2626, %r479, %r2609, %r2623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r482, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r479, %r2618, %r2630;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2656, %r2659}, {%r525, %r528}, {%r2610, %r2626}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2663, %r2667}, {%r525, %r528}, {%r2619, %r2633}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2656, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r2659, %r2659, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r2663, %r2663, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r2667, %r2667, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r1897, %r2666, %r2587;
	// end inline asm
	add.s16 	%rs229, %rs255, -3;
	mul.hi.s16 	%rs230, %rs229, 10923;
	shr.u16 	%rs231, %rs230, 15;
	add.s16 	%rs232, %rs230, %rs231;
	mul.lo.s16 	%rs233, %rs232, 6;
	sub.s16 	%rs234, %rs229, %rs233;
	mul.wide.s16 	%r3012, %rs234, 16;
	add.s32 	%r3013, %r228, %r3012;
	mul.wide.s32 	%rd299, %r3013, 4;
	add.s64 	%rd300, %rd85, %rd299;
	ld.shared.u32 	%r2678, [%rd300];
	add.s32 	%r3014, %r229, %r3012;
	mul.wide.s32 	%rd301, %r3014, 4;
	add.s64 	%rd302, %rd85, %rd301;
	ld.shared.u32 	%r2685, [%rd302];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2695, %r2692}, {%r441, %r444}, {%r2678}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2704, %r2701}, {%r441, %r444}, {%r2685}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2688, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r479, %r2695, %r2690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2697, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r2697, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r479, %r2704, %r2699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r482, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r479, %r2692, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r482, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r479, %r2701, %r2713;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2739, %r2742}, {%r525, %r528}, {%r2693, %r2709}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2746, %r2750}, {%r525, %r528}, {%r2702, %r2716}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2739, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r2742, %r2742, %r2738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r2746, %r2746, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r2750, %r2750, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r1897, %r2749, %r2670;
	// end inline asm
	add.s16 	%rs235, %rs255, -2;
	mul.hi.s16 	%rs236, %rs235, 10923;
	shr.u16 	%rs237, %rs236, 15;
	add.s16 	%rs238, %rs236, %rs237;
	mul.lo.s16 	%rs239, %rs238, 6;
	sub.s16 	%rs240, %rs235, %rs239;
	mul.wide.s16 	%r3015, %rs240, 16;
	add.s32 	%r3016, %r228, %r3015;
	mul.wide.s32 	%rd303, %r3016, 4;
	add.s64 	%rd304, %rd85, %rd303;
	ld.shared.u32 	%r2761, [%rd304];
	add.s32 	%r3017, %r229, %r3015;
	mul.wide.s32 	%rd305, %r3017, 4;
	add.s64 	%rd306, %rd85, %rd305;
	ld.shared.u32 	%r2768, [%rd306];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2778, %r2775}, {%r441, %r444}, {%r2761}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2787, %r2784}, {%r441, %r444}, {%r2768}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2771, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r2771, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r479, %r2778, %r2773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2780, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2782, %r2780, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r479, %r2787, %r2782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2789, %r482, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r479, %r2775, %r2789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r482, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r479, %r2784, %r2796;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2822, %r2825}, {%r525, %r528}, {%r2776, %r2792}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2829, %r2833}, {%r525, %r528}, {%r2785, %r2799}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2821, %r2822, %r2822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r2825, %r2825, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r2829, %r2829, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r2833, %r2833, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r1897, %r2832, %r2753;
	// end inline asm
	add.s16 	%rs241, %rs255, -1;
	mul.hi.s16 	%rs242, %rs241, 10923;
	shr.u16 	%rs243, %rs242, 15;
	add.s16 	%rs244, %rs242, %rs243;
	mul.lo.s16 	%rs245, %rs244, 6;
	sub.s16 	%rs246, %rs241, %rs245;
	mul.wide.s16 	%r3018, %rs246, 16;
	add.s32 	%r3019, %r228, %r3018;
	mul.wide.s32 	%rd307, %r3019, 4;
	add.s64 	%rd308, %rd85, %rd307;
	ld.shared.u32 	%r2844, [%rd308];
	add.s32 	%r3020, %r229, %r3018;
	mul.wide.s32 	%rd309, %r3020, 4;
	add.s64 	%rd310, %rd85, %rd309;
	ld.shared.u32 	%r2851, [%rd310];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2861, %r2858}, {%r441, %r444}, {%r2844}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2870, %r2867}, {%r441, %r444}, {%r2851}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2854, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r2854, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r479, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2863, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r2863, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r479, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r482, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r479, %r2858, %r2872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r482, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r479, %r2867, %r2879;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2905, %r2908}, {%r525, %r528}, {%r2859, %r2875}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2912, %r2916}, {%r525, %r528}, {%r2868, %r2882}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2904, %r2905, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r2912, %r2912, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r2916, %r2916, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r1897, %r2915, %r2836;
	// end inline asm
	mul.hi.s16 	%rs247, %rs255, 10923;
	shr.u16 	%rs248, %rs247, 15;
	add.s16 	%rs249, %rs247, %rs248;
	mul.lo.s16 	%rs250, %rs249, 6;
	sub.s16 	%rs251, %rs255, %rs250;
	mul.wide.s16 	%r3021, %rs251, 16;
	add.s32 	%r3022, %r228, %r3021;
	mul.wide.s32 	%rd311, %r3022, 4;
	add.s64 	%rd312, %rd85, %rd311;
	ld.shared.u32 	%r2927, [%rd312];
	add.s32 	%r3023, %r229, %r3021;
	mul.wide.s32 	%rd313, %r3023, 4;
	add.s64 	%rd314, %rd85, %rd313;
	ld.shared.u32 	%r2934, [%rd314];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r441, %r444}, {%r2927}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2953, %r2950}, {%r441, %r444}, {%r2934}, {%r2985, %r2985};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r479, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2946, %r482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2946, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r479, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2955, %r482, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r479, %r2941, %r2955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r482, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r479, %r2950, %r2962;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2988, %r2991}, {%r525, %r528}, {%r2942, %r2958}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2995, %r2999}, {%r525, %r528}, {%r2951, %r2965}, {%r2985, %r2985}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r2988, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r2991, %r2991, %r2987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2994, %r2995, %r2995, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r2999, %r2999, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1897, %r2998, %r2919;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p298, %r108, 12;
	@%p298 bra 	$L__BB0_225;
$L__BB0_169:                            // %L40284
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3091, %r3091, 6;
	add.s16 	%rs255, %rs255, 6;
	setp.ne.s32 	%p302, %r3091, 24;
	@%p302 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_170;
$L__BB0_167:                            // %L25441
                                        //   Parent Loop BB0_199 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p293, %r310, 12;
	setp.eq.s32 	%p294, %r3091, 0;
	selp.b32 	%r2472, %r92, 0, %p294;
	setp.eq.s32 	%p295, %r3091, 6;
	selp.b32 	%r2473, %r96, %r2472, %p295;
	setp.eq.s32 	%p296, %r3091, 12;
	selp.b32 	%r2474, %r100, %r2473, %p296;
	setp.eq.s32 	%p297, %r3091, 18;
	selp.b32 	%r2475, %r104, %r2474, %p297;
	selp.b32 	%r2476, %r93, 0, %p294;
	selp.b32 	%r2477, %r97, %r2476, %p295;
	selp.b32 	%r2478, %r101, %r2477, %p296;
	selp.b32 	%r2479, %r105, %r2478, %p297;
	selp.b32 	%r2480, %r94, 0, %p294;
	selp.b32 	%r2481, %r98, %r2480, %p295;
	selp.b32 	%r2482, %r102, %r2481, %p296;
	selp.b32 	%r2483, %r106, %r2482, %p297;
	selp.b32 	%r2484, %r95, 0, %p294;
	selp.b32 	%r2485, %r99, %r2484, %p295;
	selp.b32 	%r2486, %r103, %r2485, %p296;
	selp.b32 	%r2487, %r107, %r2486, %p297;
	// begin inline asm
	mov.b32 %r1971, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r1982, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2488, %r2475, 8;
	xor.b32  	%r1981, %r2488, 8947848;
	// begin inline asm
	lop3.b32 %r1968, %r980, %r1981, %r1971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1972, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1973, %r1971, %r1972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1976, %r1968, %r1973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1979, %r991, %r1981, %r1982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1983, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1984, %r1982, %r1983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1987, %r1979, %r1984;
	// end inline asm
	// begin inline asm
	mov.b32 %r2017, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2028, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2489, %r2479, 8;
	xor.b32  	%r2027, %r2489, 8947848;
	// begin inline asm
	lop3.b32 %r2014, %r980, %r2027, %r2017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2018, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2019, %r2017, %r2018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2022, %r2014, %r2019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2025, %r991, %r2027, %r2028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2029, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2030, %r2028, %r2029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2033, %r2025, %r2030;
	// end inline asm
	// begin inline asm
	mov.b32 %r2063, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2074, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2490, %r2483, 8;
	xor.b32  	%r2073, %r2490, 8947848;
	// begin inline asm
	lop3.b32 %r2060, %r980, %r2073, %r2063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2064, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2065, %r2063, %r2064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2068, %r2060, %r2065;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2071, %r991, %r2073, %r2074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2075, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2076, %r2074, %r2075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2079, %r2071, %r2076;
	// end inline asm
	// begin inline asm
	mov.b32 %r2109, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	mov.b32 %r2120, {%rs129, %rs129};
	// end inline asm
	shr.u32 	%r2491, %r2487, 8;
	xor.b32  	%r2119, %r2491, 8947848;
	// begin inline asm
	lop3.b32 %r2106, %r980, %r2119, %r2109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2110, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2111, %r2109, %r2110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2114, %r2106, %r2111;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2117, %r991, %r2119, %r2120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2121, {%rs133, %rs133};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2122, %r2120, %r2121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2125, %r2117, %r2122;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r1976;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2128, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r2022;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2131, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r1987;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2134, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2033;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2137, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r192;
    mov.b32 {%r2re, %r2im}, %r2068;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r2114;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2143, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r2079;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2125;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r333, %r336}, {%r2128}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r333, %r336}, {%r2131}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r333, %r336}, {%r2134}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r333, %r336}, {%r2137}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r333, %r336}, {%r2140}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2260, %r2257}, {%r333, %r336}, {%r2143}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2269, %r2266}, {%r333, %r336}, {%r2146}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2278, %r2275}, {%r333, %r336}, {%r2149}, {%r1317, %r1317};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r385, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r385, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r385, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r385, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r385, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2253, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r2253, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r385, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2262, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r2262, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r385, %r2269, %r2264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2271, %r388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r2271, %r2275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r385, %r2278, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r388, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r385, %r2212, %r2280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r388, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r385, %r2221, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r388, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2297, %r385, %r2230, %r2294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2301, %r388, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r385, %r2239, %r2301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2308, %r388, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2311, %r385, %r2248, %r2308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2315, %r388, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2318, %r385, %r2257, %r2315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2322, %r388, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2325, %r385, %r2266, %r2322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r388, %r2278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r385, %r2275, %r2329;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2409, %r2410}, {%r429, %r432}, {%r2213, %r2283}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2417, %r2418}, {%r429, %r432}, {%r2222, %r2290}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2425, %r2426}, {%r429, %r432}, {%r2231, %r2297}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2433, %r2434}, {%r429, %r432}, {%r2240, %r2304}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2441, %r2442}, {%r429, %r432}, {%r2249, %r2311}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2449, %r2450}, {%r429, %r432}, {%r2258, %r2318}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2457, %r2458}, {%r429, %r432}, {%r2267, %r2325}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2465, %r2466}, {%r429, %r432}, {%r2276, %r2332}, {%r1317, %r1317}, %r231, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2409, %r2410, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2417, %r2418, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2425, %r2426, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2433, %r2434, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2441, %r2442, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2441, %r2442, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2448, %r2449, %r2450, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2452, %r2449, %r2450, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2456, %r2457, %r2458, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2460, %r2457, %r2458, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2464, %r2465, %r2466, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2468, %r2465, %r2466, %r732;
	// end inline asm
	add.s16 	%rs203, %rs10, %rs255;
	add.s16 	%rs204, %rs203, -29;
	mul.hi.s16 	%rs205, %rs204, 10923;
	shr.u16 	%rs206, %rs205, 15;
	add.s16 	%rs207, %rs205, %rs206;
	mul.lo.s16 	%rs208, %rs207, 6;
	sub.s16 	%rs209, %rs204, %rs208;
	mul.wide.s16 	%r2492, %rs209, 16;
	add.s32 	%r2493, %r221, %r2492;
	mul.wide.s32 	%rd269, %r2493, 4;
	add.s64 	%rd7, %rd85, %rd269;
	st.shared.u32 	[%rd7], %r2408;
	add.s32 	%r2494, %r222, %r2492;
	mul.wide.u32 	%rd271, %r2494, 4;
	add.s64 	%rd8, %rd85, %rd271;
	st.shared.u32 	[%rd8], %r2412;
	add.s32 	%r2495, %r223, %r2492;
	mul.wide.s32 	%rd272, %r2495, 4;
	add.s64 	%rd9, %rd85, %rd272;
	st.shared.u32 	[%rd9], %r2416;
	add.s32 	%r2496, %r224, %r2492;
	mul.wide.u32 	%rd273, %r2496, 4;
	add.s64 	%rd10, %rd85, %rd273;
	st.shared.u32 	[%rd10], %r2420;
	cvt.s64.s32 	%rd274, %r2492;
	add.s64 	%rd275, %rd32, %rd274;
	shl.b64 	%rd276, %rd275, 2;
	add.s64 	%rd11, %rd85, %rd276;
	st.shared.u32 	[%rd11+32], %r2424;
	add.s32 	%r2497, %r225, %r2492;
	mul.wide.u32 	%rd277, %r2497, 4;
	add.s64 	%rd12, %rd85, %rd277;
	st.shared.u32 	[%rd12], %r2428;
	add.s32 	%r2498, %r226, %r2492;
	mul.wide.s32 	%rd278, %r2498, 4;
	add.s64 	%rd13, %rd85, %rd278;
	st.shared.u32 	[%rd13], %r2432;
	add.s32 	%r2499, %r227, %r2492;
	mul.wide.u32 	%rd279, %r2499, 4;
	add.s64 	%rd14, %rd85, %rd279;
	st.shared.u32 	[%rd14], %r2436;
	add.s16 	%rs210, %rs9, %rs255;
	add.s16 	%rs211, %rs210, -2;
	mul.hi.s16 	%rs212, %rs211, 10923;
	shr.u16 	%rs213, %rs212, 15;
	add.s16 	%rs214, %rs212, %rs213;
	mul.lo.s16 	%rs215, %rs214, 6;
	sub.s16 	%rs216, %rs211, %rs215;
	mul.wide.s16 	%r2500, %rs216, 16;
	add.s32 	%r2501, %r221, %r2500;
	mul.wide.s32 	%rd280, %r2501, 4;
	add.s64 	%rd15, %rd85, %rd280;
	st.shared.u32 	[%rd15], %r2440;
	add.s32 	%r2502, %r222, %r2500;
	mul.wide.u32 	%rd281, %r2502, 4;
	add.s64 	%rd16, %rd85, %rd281;
	st.shared.u32 	[%rd16], %r2444;
	add.s32 	%r2503, %r223, %r2500;
	mul.wide.s32 	%rd282, %r2503, 4;
	add.s64 	%rd17, %rd85, %rd282;
	st.shared.u32 	[%rd17], %r2448;
	add.s32 	%r2504, %r224, %r2500;
	mul.wide.u32 	%rd283, %r2504, 4;
	add.s64 	%rd18, %rd85, %rd283;
	st.shared.u32 	[%rd18], %r2452;
	cvt.s64.s32 	%rd284, %r2500;
	add.s64 	%rd285, %rd32, %rd284;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd19, %rd85, %rd286;
	st.shared.u32 	[%rd19+32], %r2456;
	add.s32 	%r2505, %r225, %r2500;
	mul.wide.u32 	%rd287, %r2505, 4;
	add.s64 	%rd20, %rd85, %rd287;
	st.shared.u32 	[%rd20], %r2460;
	add.s32 	%r2506, %r226, %r2500;
	mul.wide.s32 	%rd288, %r2506, 4;
	add.s64 	%rd21, %rd85, %rd288;
	st.shared.u32 	[%rd21], %r2464;
	add.s32 	%r2507, %r227, %r2500;
	mul.wide.u32 	%rd289, %r2507, 4;
	add.s64 	%rd22, %rd85, %rd289;
	st.shared.u32 	[%rd22], %r2468;
	@%p293 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_168;
$L__BB0_224:                            // %oksrem13930
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2408;
	st.shared.u32 	[%rd8], %r2412;
	st.shared.u32 	[%rd9], %r2416;
	st.shared.u32 	[%rd10], %r2420;
	st.shared.u32 	[%rd11+32], %r2424;
	st.shared.u32 	[%rd12], %r2428;
	st.shared.u32 	[%rd13], %r2432;
	st.shared.u32 	[%rd14], %r2436;
	st.shared.u32 	[%rd15], %r2440;
	st.shared.u32 	[%rd16], %r2444;
	st.shared.u32 	[%rd17], %r2448;
	st.shared.u32 	[%rd18], %r2452;
	st.shared.u32 	[%rd19+32], %r2456;
	st.shared.u32 	[%rd20], %r2460;
	st.shared.u32 	[%rd21], %r2464;
	st.shared.u32 	[%rd22], %r2468;
	bra.uni 	$L__BB0_168;
$L__BB0_225:                            // %pass18390
                                        //   in Loop: Header=BB0_167 Depth=2
	mad.lo.s32 	%r3025, %r109, 786432, %r230;
	cvt.u64.u32 	%rd315, %r3025;
	add.s64 	%rd316, %rd315, %rd23;
	mul.hi.s64 	%rd317, %rd316, 3074457345618258603;
	shr.u64 	%rd318, %rd317, 63;
	shr.s64 	%rd319, %rd317, 27;
	add.s64 	%rd320, %rd319, %rd318;
	setp.lt.s64 	%p299, %rd316, 0;
	mul.lo.s64 	%rd321, %rd320, 805306368;
	setp.ne.s64 	%p300, %rd321, %rd316;
	and.pred  	%p301, %p299, %p300;
	selp.s64 	%rd322, -1, 0, %p301;
	add.s64 	%rd323, %rd320, %rd322;
	mul.lo.s64 	%rd324, %rd323, -805306368;
	add.s64 	%rd325, %rd324, %rd316;
	shl.b64 	%rd326, %rd325, 2;
	add.s64 	%rd327, %rd4, %rd326;
	st.global.u32 	[%rd327], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2985;
	mov.u32 	%r110, %r2985;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L40315
	mov.u32 	%r3026, 0;
	st.global.u32 	[%rd6], %r3026;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd199, exception3604;
	cvta.global.u64 	%rd200, %rd199;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd200;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_221:                            // %post_box_union9511
	mov.u64 	%rd233, exception3604;
	cvta.global.u64 	%rd234, %rd233;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd234;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5128
	mov.u32 	%r3042, 5;
	st.global.u32 	[%rd6], %r3042;
	mov.u64 	%rd358, exception3564;
	cvta.global.u64 	%rd359, %rd358;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd359;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5284
	mov.u32 	%r3041, 5;
	st.global.u32 	[%rd6], %r3041;
	mov.u64 	%rd356, exception3564;
	cvta.global.u64 	%rd357, %rd356;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd357;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5440
	mov.u32 	%r3040, 5;
	st.global.u32 	[%rd6], %r3040;
	mov.u64 	%rd354, exception3564;
	cvta.global.u64 	%rd355, %rd354;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd355;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5596
	mov.u32 	%r3039, 5;
	st.global.u32 	[%rd6], %r3039;
	mov.u64 	%rd352, exception3564;
	cvta.global.u64 	%rd353, %rd352;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd353;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5752
	mov.u32 	%r3038, 5;
	st.global.u32 	[%rd6], %r3038;
	mov.u64 	%rd350, exception3564;
	cvta.global.u64 	%rd351, %rd350;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd351;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5908
	mov.u32 	%r3037, 5;
	st.global.u32 	[%rd6], %r3037;
	mov.u64 	%rd348, exception3564;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6064
	mov.u32 	%r3036, 5;
	st.global.u32 	[%rd6], %r3036;
	mov.u64 	%rd346, exception3564;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6220
	mov.u32 	%r3035, 5;
	st.global.u32 	[%rd6], %r3035;
	mov.u64 	%rd344, exception3564;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6376
	mov.u32 	%r3034, 5;
	st.global.u32 	[%rd6], %r3034;
	mov.u64 	%rd342, exception3564;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6532
	mov.u32 	%r3033, 5;
	st.global.u32 	[%rd6], %r3033;
	mov.u64 	%rd340, exception3564;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6714
	mov.u32 	%r3032, 5;
	st.global.u32 	[%rd6], %r3032;
	mov.u64 	%rd338, exception3564;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6870
	mov.u32 	%r3031, 5;
	st.global.u32 	[%rd6], %r3031;
	mov.u64 	%rd336, exception3564;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7026
	mov.u32 	%r3030, 5;
	st.global.u32 	[%rd6], %r3030;
	mov.u64 	%rd334, exception3564;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7182
	mov.u32 	%r3029, 5;
	st.global.u32 	[%rd6], %r3029;
	mov.u64 	%rd332, exception3564;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7338
	mov.u32 	%r3028, 5;
	st.global.u32 	[%rd6], %r3028;
	mov.u64 	%rd330, exception3564;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7494
	mov.u32 	%r3027, 5;
	st.global.u32 	[%rd6], %r3027;
	mov.u64 	%rd328, exception3564;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3044, 2;
	st.global.u32 	[%rd6], %r3044;
	mov.u64 	%rd362, exception3564;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3043, 3;
	st.global.u32 	[%rd6], %r3043;
	mov.u64 	%rd360, exception3564;
	cvta.global.u64 	%rd361, %rd360;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd361;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd51, exception1;
	cvta.global.u64 	%rd52, %rd51;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd52;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd50, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r310, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd56, __unnamed_1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd50;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r538, [retval0+0];
	} // callseq 49
	mov.u32 	%r540, 4;
	st.global.u32 	[%rd6], %r540;
	mov.u64 	%rd59, exception3564;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
