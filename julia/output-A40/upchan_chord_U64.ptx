// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3410[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<238>;
	.reg .b16 	%rs<1208>;
	.reg .b32 	%r<7986>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<146>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r157, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r164, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r164, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u32 	%r158, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r165, %r1, 9;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r166, %r3, %r4;
	or.b32  	%r167, %r166, %r165;
	mul.wide.u32 	%rd37, %r167, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r168, 1;
	st.global.u32 	[%rd4], %r168;
	setp.gt.u32 	%p2, %r158, 32767;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L119
	ld.param.u32 	%r159, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r159, %r158;
	setp.gt.s32 	%p4, %r159, 65535;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L126
	ld.param.u32 	%r160, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r169, %r159, %r158;
	and.b32  	%r170, %r169, 255;
	setp.ne.s32 	%p6, %r170, 0;
	setp.gt.u32 	%p7, %r160, 511;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L137
	ld.param.u32 	%r161, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r161, %r160;
	setp.gt.s32 	%p10, %r161, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L144
	not.b32 	%r171, %r160;
	add.s32 	%r172, %r171, %r161;
	and.b32  	%r173, %r172, 3;
	setp.eq.s32 	%p12, %r173, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L260
	ld.param.u32 	%r162, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p13, %r162, 0;
	@%p13 bra 	$L__BB0_10;
// %bb.9:                               // %L262
	ld.param.u32 	%r163, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p14, %r162, %r163;
	setp.lt.s32 	%p15, %r163, 49;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             // %pass180
	bfe.u32 	%r106, %r4, 2, 1;
	shr.u32 	%r107, %r4, 4;
	shl.b32 	%r182, %r107, 1;
	shl.b32 	%r183, %r106, 2;
	shl.b32 	%r184, %r4, 3;
	and.b32  	%r185, %r184, 24;
	or.b32  	%r186, %r183, %r185;
	or.b32  	%r187, %r182, %r186;
	bfe.u32 	%r188, %r4, 3, 1;
	or.b32  	%r109, %r188, %r187;
	or.b32  	%r110, %r109, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r109;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p22, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p22 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_13;
$L__BB0_12:                             // %L604
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_13:                             // %L607
	cvt.rn.f32.s32 	%f181, %r110;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p28, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p28 bra 	$L__BB0_15;
// %bb.14:                              // %L624
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_15:                             // %L627
	or.b32  	%r206, %r109, 64;
	or.b32  	%r6, %r109, 96;
	cvt.rn.f32.s32 	%f216, %r206;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p34, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L706
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_17:                             // %L709
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p40, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p40 bra 	$L__BB0_19;
// %bb.18:                              // %L726
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_19:                             // %L729
	or.b32  	%r224, %r109, 128;
	or.b32  	%r8, %r109, 160;
	cvt.rn.f32.s32 	%f285, %r224;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p46, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p46 bra 	$L__BB0_21;
// %bb.20:                              // %L808
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_21:                             // %L811
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p52, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p52 bra 	$L__BB0_23;
// %bb.22:                              // %L828
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_23:                             // %L831
	or.b32  	%r242, %r109, 192;
	or.b32  	%r10, %r109, 224;
	cvt.rn.f32.s32 	%f354, %r242;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p58, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p58 bra 	$L__BB0_25;
// %bb.24:                              // %L910
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_25:                             // %L913
	shr.u32 	%r105, %r4, 1;
	shr.u32 	%r108, %r4, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p64, %f32, 0f00000000;
	@%p64 bra 	$L__BB0_27;
// %bb.26:                              // %L930
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_27:                             // %L933
	and.b32  	%r286, %r4, 3;
	and.b32  	%r287, %r108, 2;
	and.b32  	%r288, %r105, 4;
	or.b32  	%r289, %r106, %r287;
	or.b32  	%r14, %r289, %r288;
	mul.lo.s32 	%r290, %r286, %r14;
	shl.b32 	%r291, %r290, 1;
	neg.s32 	%r292, %r291;
	cvt.rn.f32.s32 	%f35, %r292;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p79, %f830, 0f40000000;
	setp.gtu.f32 	%p236, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p79 bra 	$L__BB0_97;
// %bb.28:
	@%p236 bra 	$L__BB0_93;
	bra.uni 	$L__BB0_29;
$L__BB0_93:
	mov.b32 	%r112, %f830;
	and.b32  	%r293, %r112, 8388607;
	or.b32  	%r7980, %r293, 1065353216;
	mov.b32 	%f821, %r7980;
	add.s32 	%r294, %r112, -1073741824;
	and.b32  	%r7981, %r294, -8388608;
	setp.eq.s32 	%p86, %r7981, 0;
	@%p86 bra 	$L__BB0_96;
// %bb.94:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_95:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r295, %r7981, 192937984;
	add.s32 	%r296, %r7980, %r295;
	mov.b32 	%f501, %r296;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7981, %r7981, %r295;
	mov.b32 	%r7980, %f821;
	setp.ne.s32 	%p87, %r7981, 0;
	setp.ne.s32 	%p88, %r7980, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_95;
$L__BB0_96:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p90, %r112, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_97;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r111, %f89;
	setp.lt.u32 	%p81, %r111, 1073741824;
	@%p81 bra 	$L__BB0_92;
// %bb.30:
	setp.lt.u32 	%p82, %r111, -2147483647;
	@%p82 bra 	$L__BB0_90;
// %bb.31:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p85, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p85;
	bra.uni 	$L__BB0_92;
$L__BB0_90:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p83, %f89, 0f40800000;
	@%p83 bra 	$L__BB0_92;
// %bb.91:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p84, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p84;
$L__BB0_92:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_97:                             // %__internal_fmodf_kernel.exit.i928
	shl.b32 	%r98, %r4, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p91, %f510, 0f7F800000;
	mov.b32 	%r297, %f36;
	and.b32  	%r119, %r297, -2147483648;
	@%p91 bra 	$L__BB0_99;
// %bb.98:
	mov.b32 	%r298, %f822;
	or.b32  	%r299, %r119, %r298;
	mov.b32 	%f822, %r299;
$L__BB0_99:                             // %__nv_fmodf.exit929
	and.b32  	%r308, %r98, 6;
	mov.u32 	%r309, -8;
	sub.s32 	%r310, %r309, %r308;
	mul.lo.s32 	%r311, %r14, %r310;
	cvt.rn.f32.s32 	%f105, %r311;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p99, %f818, 0f40000000;
	setp.gtu.f32 	%p237, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p99 bra 	$L__BB0_43;
// %bb.32:
	@%p237 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_33;
$L__BB0_39:
	mov.b32 	%r16, %f818;
	and.b32  	%r312, %r16, 8388607;
	or.b32  	%r7948, %r312, 1065353216;
	mov.b32 	%f809, %r7948;
	add.s32 	%r313, %r16, -1073741824;
	and.b32  	%r7949, %r313, -8388608;
	setp.eq.s32 	%p106, %r7949, 0;
	@%p106 bra 	$L__BB0_42;
// %bb.40:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_41:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r314, %r7949, 192937984;
	add.s32 	%r315, %r7948, %r314;
	mov.b32 	%f552, %r315;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7949, %r7949, %r314;
	mov.b32 	%r7948, %f809;
	setp.ne.s32 	%p107, %r7949, 0;
	setp.ne.s32 	%p108, %r7948, 0;
	and.pred  	%p109, %p107, %p108;
	@%p109 bra 	$L__BB0_41;
$L__BB0_42:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p110, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p110;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_43;
$L__BB0_33:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p101, %r15, 1073741824;
	@%p101 bra 	$L__BB0_38;
// %bb.34:
	setp.lt.u32 	%p102, %r15, -2147483647;
	@%p102 bra 	$L__BB0_36;
// %bb.35:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p105, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p105;
	bra.uni 	$L__BB0_38;
$L__BB0_36:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p103, %f39, 0f40800000;
	@%p103 bra 	$L__BB0_38;
// %bb.37:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p104, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p104;
$L__BB0_38:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_43:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p111, %f561, 0f7F800000;
	mov.b32 	%r316, %f106;
	and.b32  	%r23, %r316, -2147483648;
	@%p111 bra 	$L__BB0_45;
// %bb.44:
	mov.b32 	%r317, %f810;
	or.b32  	%r318, %r23, %r317;
	mov.b32 	%f810, %r318;
$L__BB0_45:                             // %__nv_fmodf.exit
	div.approx.f32 	%f53, %f35, %f177;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p119, %f826, 0f40000000;
	@%p119 bra 	$L__BB0_107;
// %bb.46:
	setp.gtu.f32 	%p120, %f826, 0f4B800000;
	@%p120 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_47;
$L__BB0_103:
	mov.b32 	%r121, %f826;
	and.b32  	%r339, %r121, 8388607;
	or.b32  	%r7982, %r339, 1065353216;
	mov.b32 	%f825, %r7982;
	add.s32 	%r340, %r121, -1073741824;
	and.b32  	%r7983, %r340, -8388608;
	setp.eq.s32 	%p126, %r7983, 0;
	@%p126 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r7983, 192937984;
	add.s32 	%r342, %r7982, %r341;
	mov.b32 	%f605, %r342;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7983, %r7983, %r341;
	mov.b32 	%r7982, %f825;
	setp.ne.s32 	%p127, %r7983, 0;
	setp.ne.s32 	%p128, %r7982, 0;
	and.pred  	%p129, %p127, %p128;
	@%p129 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p130, %r121, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p130;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_107;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r120, %f109;
	setp.lt.u32 	%p121, %r120, 1073741824;
	@%p121 bra 	$L__BB0_102;
// %bb.48:
	setp.lt.u32 	%p122, %r120, -2147483647;
	@%p122 bra 	$L__BB0_100;
// %bb.49:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p125, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p125;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p123, %f109, 0f40800000;
	@%p123 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p124, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p124;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p131, %f614, 0f7F800000;
	@%p131 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r343, %f53;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f826;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f826, %r346;
$L__BB0_109:                            // %__nv_fmodf.exit960
	div.approx.f32 	%f125, %f105, %f177;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p139, %f814, 0f40000000;
	@%p139 bra 	$L__BB0_61;
// %bb.50:
	setp.gtu.f32 	%p140, %f814, 0f4B800000;
	@%p140 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_51;
$L__BB0_57:
	mov.b32 	%r29, %f814;
	and.b32  	%r355, %r29, 8388607;
	or.b32  	%r7950, %r355, 1065353216;
	mov.b32 	%f813, %r7950;
	add.s32 	%r356, %r29, -1073741824;
	and.b32  	%r7951, %r356, -8388608;
	setp.eq.s32 	%p146, %r7951, 0;
	@%p146 bra 	$L__BB0_60;
// %bb.58:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_59:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r7951, 192937984;
	add.s32 	%r358, %r7950, %r357;
	mov.b32 	%f656, %r358;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7951, %r7951, %r357;
	mov.b32 	%r7950, %f813;
	setp.ne.s32 	%p147, %r7951, 0;
	setp.ne.s32 	%p148, %r7950, 0;
	and.pred  	%p149, %p147, %p148;
	@%p149 bra 	$L__BB0_59;
$L__BB0_60:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p150, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p150;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_61;
$L__BB0_51:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p141, %r28, 1073741824;
	@%p141 bra 	$L__BB0_56;
// %bb.52:
	setp.lt.u32 	%p142, %r28, -2147483647;
	@%p142 bra 	$L__BB0_54;
// %bb.53:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p145, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p145;
	bra.uni 	$L__BB0_56;
$L__BB0_54:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p143, %f56, 0f40800000;
	@%p143 bra 	$L__BB0_56;
// %bb.55:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p144, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p144;
$L__BB0_56:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_61:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p151, %f665, 0f7F800000;
	@%p151 bra 	$L__BB0_63;
// %bb.62:
	mov.b32 	%r359, %f125;
	and.b32  	%r360, %r359, -2147483648;
	mov.b32 	%r361, %f814;
	or.b32  	%r362, %r360, %r361;
	mov.b32 	%f814, %r362;
$L__BB0_63:                             // %__nv_fmodf.exit867
	@%p79 bra 	$L__BB0_117;
// %bb.64:
	@%p236 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_65;
$L__BB0_113:
	mov.b32 	%r129, %f830;
	and.b32  	%r377, %r129, 8388607;
	or.b32  	%r7984, %r377, 1065353216;
	mov.b32 	%f829, %r7984;
	add.s32 	%r378, %r129, -1073741824;
	and.b32  	%r7985, %r378, -8388608;
	setp.eq.s32 	%p166, %r7985, 0;
	@%p166 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r379, %r7985, 192937984;
	add.s32 	%r380, %r7984, %r379;
	mov.b32 	%f708, %r380;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7985, %r7985, %r379;
	mov.b32 	%r7984, %f829;
	setp.ne.s32 	%p167, %r7985, 0;
	setp.ne.s32 	%p168, %r7984, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p170, %r129, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_117;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r128, %f128;
	setp.lt.u32 	%p161, %r128, 1073741824;
	@%p161 bra 	$L__BB0_112;
// %bb.66:
	setp.lt.u32 	%p162, %r128, -2147483647;
	@%p162 bra 	$L__BB0_110;
// %bb.67:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p165, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p165;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p163, %f128, 0f40800000;
	@%p163 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p164, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p164;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p171, %f717, 0f7F800000;
	@%p171 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r381, %f830;
	or.b32  	%r382, %r119, %r381;
	mov.b32 	%f830, %r382;
$L__BB0_119:                            // %__nv_fmodf.exit991
	@%p99 bra 	$L__BB0_79;
// %bb.68:
	@%p237 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_69;
$L__BB0_75:
	mov.b32 	%r39, %f818;
	and.b32  	%r391, %r39, 8388607;
	or.b32  	%r7952, %r391, 1065353216;
	mov.b32 	%f817, %r7952;
	add.s32 	%r392, %r39, -1073741824;
	and.b32  	%r7953, %r392, -8388608;
	setp.eq.s32 	%p186, %r7953, 0;
	@%p186 bra 	$L__BB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_77:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r7953, 192937984;
	add.s32 	%r394, %r7952, %r393;
	mov.b32 	%f758, %r394;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7953, %r7953, %r393;
	mov.b32 	%r7952, %f817;
	setp.ne.s32 	%p187, %r7953, 0;
	setp.ne.s32 	%p188, %r7952, 0;
	and.pred  	%p189, %p187, %p188;
	@%p189 bra 	$L__BB0_77;
$L__BB0_78:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p190, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p190;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_79;
$L__BB0_69:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p181, %r38, 1073741824;
	@%p181 bra 	$L__BB0_74;
// %bb.70:
	setp.lt.u32 	%p182, %r38, -2147483647;
	@%p182 bra 	$L__BB0_72;
// %bb.71:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p185, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p185;
	bra.uni 	$L__BB0_74;
$L__BB0_72:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p183, %f71, 0f40800000;
	@%p183 bra 	$L__BB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p184, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p184;
$L__BB0_74:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_79:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p191, %f767, 0f7F800000;
	@%p191 bra 	$L__BB0_81;
// %bb.80:
	mov.b32 	%r395, %f818;
	or.b32  	%r396, %r23, %r395;
	mov.b32 	%f818, %r396;
$L__BB0_81:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p199, %r159, %r158;
	mov.u32 	%r7947, 0;
	@%p199 bra 	$L__BB0_89;
// %bb.82:                              // %L1450.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r266, %r109, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r276, %r266, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r267, %r266, 127;
	and.b32  	%r277, %r276, 127;
	setp.gt.f32 	%p17, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p23, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p29, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p35, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p41, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p47, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p53, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p59, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r267;
	cvt.rn.f32.s32 	%f457, %r277;
	shr.u32 	%r175, %r1, 3;
	selp.f32 	%f153, %f152, %f150, %p17;
	selp.f32 	%f187, %f186, %f184, %p23;
	selp.f32 	%f222, %f221, %f219, %p29;
	selp.f32 	%f256, %f255, %f253, %p35;
	selp.f32 	%f291, %f290, %f288, %p41;
	selp.f32 	%f325, %f324, %f322, %p47;
	selp.f32 	%f360, %f359, %f357, %p53;
	selp.f32 	%f394, %f393, %f391, %p59;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	cvt.u16.u32 	%rs1, %r175;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	and.b16  	%rs2, %rs1, 255;
	mov.b32 	%r189, %f154;
	mov.b32 	%r196, %f188;
	mov.b32 	%r207, %f223;
	mov.b32 	%r214, %f257;
	mov.b32 	%r225, %f292;
	mov.b32 	%r232, %f326;
	mov.b32 	%r243, %f361;
	mov.b32 	%r250, %f395;
	mov.b32 	%r268, %f425;
	mov.b32 	%r278, %f459;
	mov.b32 	%r300, %f511;
	mov.b32 	%r331, %f562;
	mul.lo.s16 	%rs3, %rs2, 171;
	and.b32  	%r190, %r189, -2147483648;
	and.b32  	%r197, %r196, -2147483648;
	and.b32  	%r208, %r207, -2147483648;
	and.b32  	%r215, %r214, -2147483648;
	and.b32  	%r226, %r225, -2147483648;
	and.b32  	%r233, %r232, -2147483648;
	and.b32  	%r244, %r243, -2147483648;
	and.b32  	%r251, %r250, -2147483648;
	and.b32  	%r269, %r268, -2147483648;
	and.b32  	%r279, %r278, -2147483648;
	and.b32  	%r301, %r300, -2147483648;
	and.b32  	%r332, %r331, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	shr.u16 	%rs4, %rs3, 13;
	or.b32  	%r191, %r190, 1056964608;
	or.b32  	%r198, %r197, 1056964608;
	or.b32  	%r209, %r208, 1056964608;
	or.b32  	%r216, %r215, 1056964608;
	or.b32  	%r227, %r226, 1056964608;
	or.b32  	%r234, %r233, 1056964608;
	or.b32  	%r245, %r244, 1056964608;
	or.b32  	%r252, %r251, 1056964608;
	or.b32  	%r270, %r269, 1056964608;
	or.b32  	%r280, %r279, 1056964608;
	or.b32  	%r302, %r301, 1056964608;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%r347, %f615;
	mov.b32 	%r369, %f666;
	mul.lo.s16 	%rs5, %rs4, 48;
	mov.b32 	%f155, %r191;
	mov.b32 	%f189, %r198;
	mov.b32 	%f224, %r209;
	mov.b32 	%f258, %r216;
	mov.b32 	%f293, %r227;
	mov.b32 	%f327, %r234;
	mov.b32 	%f362, %r245;
	mov.b32 	%f396, %r252;
	mov.b32 	%f426, %r270;
	mov.b32 	%f460, %r280;
	mov.b32 	%f512, %r302;
	mov.b32 	%f563, %r333;
	and.b32  	%r348, %r347, -2147483648;
	and.b32  	%r370, %r369, -2147483648;
	add.f32 	%f718, %f830, %f830;
	shl.b32 	%r96, %r4, 2;
	sub.s16 	%rs6, %rs1, %rs5;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r349, %r348, 1056964608;
	or.b32  	%r371, %r370, 1056964608;
	mov.b32 	%r383, %f718;
	and.b32  	%r97, %r96, 32;
	and.b32  	%r99, %r98, 8;
	and.b16  	%rs7, %rs6, 255;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p18, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p24, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p30, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p36, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p42, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p48, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p54, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p60, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p65, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p72, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p92, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p112, %f566, 0f4B000000;
	mov.b32 	%f616, %r349;
	mov.b32 	%f667, %r371;
	and.b32  	%r384, %r383, -2147483648;
	or.b32  	%r174, %r97, %r99;
	mul.wide.u16 	%r100, %rs7, 64;
	selp.f32 	%f159, %f154, %f157, %p18;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p19, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p24;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p25, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p30;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p31, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p36;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p37, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p42;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p43, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p48;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p49, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p54;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p55, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p60;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p61, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p65;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p66, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p72;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p73, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p92;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p93, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p112;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p113, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r385, %r384, 1056964608;
	or.b32  	%r176, %r100, %r174;
	and.b32  	%r101, %r4, 16;
	selp.f32 	%f161, %f160, %f159, %p19;
	selp.f32 	%f195, %f194, %f193, %p25;
	selp.f32 	%f230, %f229, %f228, %p31;
	selp.f32 	%f264, %f263, %f262, %p37;
	selp.f32 	%f299, %f298, %f297, %p43;
	selp.f32 	%f333, %f332, %f331, %p49;
	selp.f32 	%f368, %f367, %f366, %p55;
	selp.f32 	%f402, %f401, %f400, %p61;
	selp.f32 	%f432, %f431, %f430, %p66;
	selp.f32 	%f466, %f465, %f464, %p73;
	selp.f32 	%f518, %f517, %f516, %p93;
	selp.f32 	%f569, %f568, %f567, %p113;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p132, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p153, %f670, 0f4B000000;
	mov.b32 	%f719, %r385;
	or.b32  	%r177, %r176, %r101;
	and.b32  	%r102, %r96, 4;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p132;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p133, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p153;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p154, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	or.b32  	%r178, %r177, %r102;
	and.b32  	%r103, %r4, 2;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p133;
	selp.f32 	%f673, %f672, %f671, %p154;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p173, %f722, 0f4B000000;
	or.b32  	%r179, %r178, %r103;
	cvt.rzi.s32.f32 	%r192, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r199, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r210, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r217, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r228, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r235, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r246, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r253, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p173;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p174, %f722, 0f3F000000;
	shr.u32 	%r180, %r179, 1;
	add.s32 	%r193, %r192, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r211, %r210, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r229, %r228, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r236, %r235, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r247, %r246, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r254, %r253, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r271, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r281, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r303, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r334, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p174;
	cvt.u16.u32 	%rs8, %r180;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r194, %r193, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r212, %r211, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r219, %r218, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r230, %r229, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r237, %r236, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r248, %r247, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r282, %r281, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r304, %r303, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r335, %r334, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	mul.hi.u16 	%rs9, %rs8, -21845;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p20, %r194, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p26, %r201, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p32, %r212, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p38, %r219, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p44, %r230, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p50, %r237, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p56, %r248, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p62, %r255, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p67, %r272, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p74, %r282, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p94, %r304, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p114, %r335, 1;
	cvt.rzi.s32.f32 	%r350, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r372, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	shr.u16 	%rs10, %rs9, 10;
	selp.f32 	%f173, %f171, %f172, %p20;
	and.b32  	%r195, %r193, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p26;
	and.b32  	%r202, %r200, 2;
	selp.f32 	%f242, %f240, %f241, %p32;
	and.b32  	%r213, %r211, 2;
	selp.f32 	%f276, %f274, %f275, %p38;
	and.b32  	%r220, %r218, 2;
	selp.f32 	%f311, %f309, %f310, %p44;
	and.b32  	%r231, %r229, 2;
	selp.f32 	%f345, %f343, %f344, %p50;
	and.b32  	%r238, %r236, 2;
	selp.f32 	%f380, %f378, %f379, %p56;
	and.b32  	%r249, %r247, 2;
	selp.f32 	%f414, %f412, %f413, %p62;
	and.b32  	%r256, %r254, 2;
	selp.f32 	%f444, %f442, %f443, %p67;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f478, %f476, %f477, %p74;
	and.b32  	%r283, %r281, 2;
	selp.f32 	%f530, %f528, %f529, %p94;
	and.b32  	%r305, %r303, 2;
	selp.f32 	%f581, %f579, %f580, %p114;
	and.b32  	%r336, %r334, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r351, %r350, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r373, %r372, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	mul.lo.s16 	%rs11, %rs10, 1536;
	setp.eq.s32 	%p21, %r195, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p27, %r202, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p33, %r213, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p39, %r220, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p45, %r231, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p51, %r238, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p57, %r249, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p63, %r256, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p68, %r273, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r274, %r271, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p75, %r283, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r284, %r281, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p95, %r305, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r306, %r303, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p115, %r336, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r337, %r334, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p134, %r351, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p155, %r373, 1;
	cvt.rzi.s32.f32 	%r386, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	sub.s16 	%rs12, %rs8, %rs11;
	selp.f32 	%f176, %f173, %f175, %p21;
	selp.f32 	%f210, %f207, %f209, %p27;
	selp.f32 	%f245, %f242, %f244, %p33;
	selp.f32 	%f279, %f276, %f278, %p39;
	selp.f32 	%f314, %f311, %f313, %p45;
	selp.f32 	%f348, %f345, %f347, %p51;
	selp.f32 	%f383, %f380, %f382, %p57;
	selp.f32 	%f417, %f414, %f416, %p63;
	selp.f32 	%f445, %f443, %f442, %p67;
	selp.f32 	%f447, %f444, %f446, %p68;
	and.b32  	%r275, %r274, 2;
	setp.eq.f32 	%p70, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p74;
	selp.f32 	%f481, %f478, %f480, %p75;
	and.b32  	%r285, %r284, 2;
	setp.eq.f32 	%p77, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p94;
	selp.f32 	%f533, %f530, %f532, %p95;
	and.b32  	%r307, %r306, 2;
	setp.eq.f32 	%p97, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p114;
	selp.f32 	%f584, %f581, %f583, %p115;
	and.b32  	%r338, %r337, 2;
	setp.eq.f32 	%p117, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p134;
	and.b32  	%r352, %r350, 2;
	selp.f32 	%f685, %f683, %f684, %p155;
	and.b32  	%r374, %r372, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r387, %r386, 1;
	cvt.u32.u16 	%r181, %rs12;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p69, %r275, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p70;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p76, %r285, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p77;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p96, %r307, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p97;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p116, %r338, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p117;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p135, %r352, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r353, %r350, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p156, %r374, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r375, %r372, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p175, %r387, 1;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd38, %r181, 4;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p69;
	setp.gt.f32 	%p71, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p76;
	setp.gt.f32 	%p78, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p96;
	setp.gt.f32 	%p98, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p116;
	setp.gt.f32 	%p118, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p134;
	selp.f32 	%f637, %f634, %f636, %p135;
	and.b32  	%r354, %r353, 2;
	setp.eq.f32 	%p137, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p155;
	selp.f32 	%f688, %f685, %f687, %p156;
	and.b32  	%r376, %r375, 2;
	setp.eq.f32 	%p158, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p175;
	and.b32  	%r388, %r386, 2;
	add.s64 	%rd39, %rd1, %rd38;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p71;
	selp.f32 	%f489, %f488, %f483, %p78;
	selp.f32 	%f104, %f540, %f536, %p98;
	selp.f32 	%f593, %f592, %f587, %p118;
	setp.eq.s32 	%p136, %r354, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p137;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p157, %r376, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p158;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p176, %r388, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r389, %r386, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.global.u32 	%r104, [%rd39];
	mov.b32 	%r205, %f215;
	mov.b32 	%r204, %f3;
	mov.b32 	%r223, %f284;
	mov.b32 	%r222, %f12;
	mov.b32 	%r241, %f353;
	mov.b32 	%r240, %f21;
	mov.b32 	%r259, %f421;
	mov.b32 	%r258, %f30;
	mov.b32 	%r261, %f456;
	mov.b32 	%r262, %f489;
	mov.b32 	%r264, %f453;
	mov.b32 	%r265, %f486;
	mov.b32 	%r321, %f593;
	mov.b32 	%r320, %f104;
	mov.b32 	%r327, %f590;
	mov.b32 	%r326, %f103;
	selp.f32 	%f640, %f635, %f639, %p136;
	setp.gt.f32 	%p138, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p157;
	setp.gt.f32 	%p159, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p175;
	selp.f32 	%f740, %f737, %f739, %p176;
	and.b32  	%r390, %r389, 2;
	setp.eq.f32 	%p178, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r203, %r205, %r204;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r221, %r223, %r222;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r239, %r241, %r240;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	xor.b32  	%r324, %r327, -2147483648;
	xor.b32  	%r323, %r326, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p138;
	selp.f32 	%f697, %f696, %f691, %p159;
	setp.eq.s32 	%p177, %r390, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p178;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r319, %r321, %r320;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r322, %r324, %r323;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r321, %r320;
	// end inline asm
	mov.b32 	%r365, %f697;
	mov.b32 	%r364, %f124;
	mov.b32 	%r368, %f694;
	mov.b32 	%r367, %f123;
	selp.f32 	%f743, %f738, %f742, %p177;
	setp.gt.f32 	%p179, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r365, %r364;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p179;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r409, %f768;
	and.b32  	%r410, %r409, -2147483648;
	or.b32  	%r411, %r410, 1056964608;
	mov.b32 	%f769, %r411;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p192, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p192;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p193, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p193;
	cvt.rzi.s32.f32 	%r412, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r413, %r412, 1;
	setp.eq.b32 	%p194, %r413, 1;
	selp.f32 	%f787, %f785, %f786, %p194;
	selp.f32 	%f788, %f786, %f785, %p194;
	and.b32  	%r414, %r412, 2;
	setp.eq.s32 	%p195, %r414, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p195;
	add.s32 	%r415, %r412, 1;
	and.b32  	%r416, %r415, 2;
	setp.eq.s32 	%p196, %r416, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p196;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p197, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p197;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p198, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p198;
	mov.b32 	%r399, %f799;
	mov.b32 	%r398, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	mov.b32 	%r405, %f796;
	xor.b32  	%r402, %r405, -2147483648;
	mov.b32 	%r404, %f142;
	xor.b32  	%r401, %r404, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r406, %r399, %r398;
	// end inline asm
	shl.b32 	%r418, %r162, 8;
	shl.b32 	%r419, %r1, 5;
	and.b32  	%r420, %r96, 28;
	cvt.u16.u32 	%rs13, %r100;
	mul.hi.u16 	%rs14, %rs13, -21845;
	shr.u16 	%rs15, %rs14, 5;
	mul.lo.s16 	%rs16, %rs15, 48;
	sub.s16 	%rs17, %rs13, %rs16;
	shl.b16 	%rs18, %rs17, 8;
	cvt.u32.u16 	%r421, %rs18;
	and.b32  	%r422, %r419, 224;
	or.b32  	%r50, %r422, %r420;
	or.b32  	%r423, %r418, %r50;
	add.s32 	%r51, %r423, %r421;
	bfe.s32 	%r424, %r4, 3, 1;
	and.b32  	%r52, %r4, 8;
	shl.b32 	%r425, %r4, 4;
	or.b32  	%r426, %r52, %r425;
	shr.u32 	%r427, %r426, 2;
	and.b32  	%r428, %r427, 30;
	shr.u32 	%r429, %r2, 1;
	and.b32  	%r430, %r3, 32;
	or.b32  	%r431, %r430, %r429;
	or.b32  	%r432, %r431, 8;
	or.b32  	%r433, %r431, 16;
	or.b32  	%r434, %r431, 24;
	and.b32  	%r435, %r4, 18;
	or.b32  	%r436, %r435, %r99;
	or.b32  	%r437, %r436, %r97;
	or.b32  	%r438, %r437, %r102;
	shr.u32 	%r439, %r438, 1;
	mul.lo.s32 	%r440, %r439, 65;
	add.s32 	%r441, %r431, %r440;
	add.s32 	%r442, %r432, %r440;
	add.s32 	%r443, %r433, %r440;
	add.s32 	%r444, %r434, %r440;
	shl.b32 	%r445, %r2, 1;
	or.b32  	%r446, %r107, %r445;
	mul.lo.s32 	%r447, %r446, 65;
	add.s32 	%r448, %r428, %r447;
	mul.wide.u32 	%rd40, %r448, 4;
	mov.u64 	%rd41, shmem;
	add.s64 	%rd5, %rd41, %rd40;
	cvt.u64.u32 	%rd42, %r428;
	cvt.u64.u32 	%rd43, %r447;
	add.s64 	%rd44, %rd43, %rd42;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd6, %rd41, %rd45;
	mad.lo.s32 	%r449, %r160, 786432, -2359296;
	shl.b32 	%r450, %r2, 2;
	or.b32  	%r451, %r108, %r450;
	or.b32  	%r452, %r451, %r100;
	cvt.u16.u32 	%rs19, %r452;
	mul.hi.u16 	%rs20, %rs19, -21845;
	shr.u16 	%rs21, %rs20, 11;
	mul.lo.s16 	%rs22, %rs21, 3072;
	sub.s16 	%rs23, %rs19, %rs22;
	mul.wide.u16 	%r53, %rs23, 256;
	cvt.s64.s32 	%rd7, %r449;
	or.b32  	%r54, %r53, %r50;
	shr.u32 	%r453, %r2, 3;
	mul.lo.s32 	%r454, %r453, 130;
	bfe.s32 	%r455, %r2, 1, 1;
	and.b32  	%r456, %r2, 2;
	setp.eq.s32 	%p200, %r456, 0;
	and.b32  	%r457, %r455, 520;
	shr.u32 	%r458, %r101, 4;
	mul.lo.s32 	%r459, %r458, 65;
	bfe.s32 	%r460, %r2, 2, 1;
	and.b32  	%r461, %r2, 4;
	setp.eq.s32 	%p201, %r461, 0;
	and.b32  	%r462, %r460, 260;
	and.b32  	%r463, %r2, 1;
	neg.s32 	%r464, %r463;
	setp.eq.b32 	%p202, %r463, 1;
	and.b32  	%r465, %r464, 1040;
	add.s32 	%r466, %r465, %r428;
	add.s32 	%r467, %r466, %r454;
	add.s32 	%r468, %r467, %r457;
	add.s32 	%r469, %r468, %r459;
	add.s32 	%r470, %r469, %r462;
	mul.wide.u32 	%rd46, %r470, 4;
	add.s64 	%rd8, %rd41, %rd46;
	selp.b64 	%rd47, 0, 260, %p201;
	cvt.u64.u32 	%rd48, %r459;
	selp.b64 	%rd49, 0, 520, %p200;
	cvt.u64.u32 	%rd50, %r454;
	selp.b64 	%rd51, 1040, 0, %p202;
	add.s64 	%rd52, %rd42, %rd51;
	add.s64 	%rd53, %rd52, %rd50;
	add.s64 	%rd54, %rd53, %rd49;
	add.s64 	%rd55, %rd54, %rd48;
	add.s64 	%rd56, %rd55, %rd47;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd9, %rd41, %rd57;
	cvt.u64.u32 	%rd58, %r467;
	add.s64 	%rd59, %rd58, %rd49;
	add.s64 	%rd60, %rd59, %rd48;
	add.s64 	%rd61, %rd60, %rd47;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd10, %rd41, %rd62;
	add.s32 	%r471, %r470, 2113;
	mul.wide.u32 	%rd63, %r471, 4;
	add.s64 	%rd11, %rd41, %rd63;
	add.s32 	%r472, %r470, 2082;
	mul.wide.u32 	%rd64, %r472, 4;
	add.s64 	%rd12, %rd41, %rd64;
	add.s32 	%r473, %r470, 2114;
	mul.wide.u32 	%rd65, %r473, 4;
	add.s64 	%rd13, %rd41, %rd65;
	add.s32 	%r474, %r470, 4194;
	mul.wide.u32 	%rd66, %r474, 4;
	add.s64 	%rd14, %rd41, %rd66;
	add.s32 	%r475, %r470, 4163;
	mul.wide.u32 	%rd67, %r475, 4;
	add.s64 	%rd15, %rd41, %rd67;
	add.s32 	%r476, %r470, 4195;
	mul.wide.u32 	%rd68, %r476, 4;
	add.s64 	%rd16, %rd41, %rd68;
	add.s32 	%r477, %r470, 6275;
	mul.wide.u32 	%rd69, %r477, 4;
	add.s64 	%rd17, %rd41, %rd69;
	add.s32 	%r478, %r470, 6244;
	mul.wide.u32 	%rd70, %r478, 4;
	add.s64 	%rd18, %rd41, %rd70;
	add.s32 	%r479, %r470, 6276;
	mul.wide.u32 	%rd71, %r479, 4;
	add.s64 	%rd19, %rd41, %rd71;
	and.b32  	%r480, %r4, 1;
	neg.s32 	%r481, %r480;
	and.b32  	%r482, %r481, 130;
	mul.lo.s32 	%r483, %r107, 520;
	setp.eq.s32 	%p203, %r103, 0;
	selp.b32 	%r484, 0, 65, %p203;
	bfe.s32 	%r485, %r4, 2, 1;
	and.b32  	%r486, %r485, 260;
	and.b32  	%r487, %r424, 1040;
	or.b32  	%r488, %r431, %r487;
	or.b32  	%r489, %r432, %r487;
	mul.wide.u32 	%rd20, %r444, 4;
	mul.wide.u32 	%rd21, %r443, 4;
	mul.wide.u32 	%rd22, %r442, 4;
	mul.wide.u32 	%rd23, %r441, 4;
	or.b32  	%r490, %r482, %r484;
	or.b32  	%r491, %r490, %r486;
	or.b32  	%r492, %r491, %r487;
	add.s32 	%r493, %r492, %r434;
	add.s32 	%r494, %r493, %r483;
	mul.wide.u32 	%rd24, %r494, 4;
	add.s32 	%r495, %r492, %r433;
	add.s32 	%r496, %r495, %r483;
	mul.wide.u32 	%rd25, %r496, 4;
	add.s32 	%r497, %r491, %r489;
	add.s32 	%r498, %r497, %r483;
	mul.wide.u32 	%rd26, %r498, 4;
	add.s32 	%r499, %r491, %r488;
	add.s32 	%r500, %r499, %r483;
	mul.wide.u32 	%rd27, %r500, 4;
	setp.eq.s32 	%p204, %r52, 0;
	mov.u16 	%rs1199, 25600;
	mov.u16 	%rs1095, 21504;
	mov.u32 	%r7968, %r7947;
	mov.u32 	%r7969, %r7947;
	mov.u32 	%r7970, %r7947;
	mov.u32 	%r7971, %r7947;
	mov.u32 	%r7972, %r7947;
	mov.u32 	%r7973, %r7947;
	mov.u32 	%r7974, %r7947;
	mov.u32 	%r7975, %r7947;
	mov.u32 	%r7976, %r7947;
	mov.u32 	%r7977, %r7947;
	mov.u32 	%r7978, %r7947;
	mov.u32 	%r7979, %r7947;
	mov.u32 	%r7966, %r7947;
	bra.uni 	$L__BB0_83;
$L__BB0_88:                             // %L40296
                                        //   in Loop: Header=BB0_83 Depth=1
	mad.lo.s32 	%r7942, %r138, 786432, %r54;
	cvt.u64.u32 	%rd128, %r7942;
	add.s64 	%rd129, %rd128, %rd7;
	mul.hi.s64 	%rd130, %rd129, 3074457345618258603;
	shr.u64 	%rd131, %rd130, 63;
	shr.s64 	%rd132, %rd130, 26;
	add.s64 	%rd133, %rd132, %rd131;
	setp.lt.s64 	%p232, %rd129, 0;
	mul.lo.s64 	%rd134, %rd133, 402653184;
	setp.ne.s64 	%p233, %rd134, %rd129;
	and.pred  	%p234, %p232, %p233;
	selp.s64 	%rd135, -1, 0, %p234;
	add.s64 	%rd136, %rd133, %rd135;
	mul.lo.s64 	%rd137, %rd136, 4611686018024734720;
	add.s64 	%rd138, %rd137, %rd129;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd140, %rd3, %rd139;
	st.global.v4.u32 	[%rd140], {%r153, %r155, %r154, %r156};
	add.s32 	%r7966, %r7966, 256;
	add.s32 	%r7943, %r7966, %r158;
	setp.lt.s32 	%p235, %r7943, %r159;
	@%p235 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_89;
$L__BB0_83:                             // %L1450
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_84 Depth 2
	shr.u32 	%r68, %r7966, 6;
	or.b32  	%r566, %r7966, %r4;
	and.b32  	%r567, %r566, 32528;
	or.b32  	%r568, %r567, %r97;
	or.b32  	%r569, %r568, %r2;
	add.s32 	%r570, %r569, %r158;
	mad.lo.s32 	%r571, %r570, 12288, %r51;
	mul.hi.s32 	%r572, %r571, 715827883;
	shr.u32 	%r573, %r572, 31;
	shr.s32 	%r574, %r572, 26;
	add.s32 	%r575, %r574, %r573;
	setp.lt.s32 	%p205, %r571, 0;
	mul.lo.s32 	%r576, %r575, 402653184;
	setp.ne.s32 	%p206, %r576, %r571;
	and.pred  	%p207, %p205, %p206;
	selp.s32 	%r577, -1, 0, %p207;
	add.s32 	%r578, %r575, %r577;
	or.b32  	%r579, %r571, 1;
	mad.lo.s32 	%r580, %r578, -402653184, %r579;
	mul.wide.s32 	%rd73, %r580, 4;
	add.s64 	%rd74, %rd2, %rd73;
	ld.global.v4.u32 	{%r581, %r582, %r583, %r584}, [%rd74+-4];
	or.b32  	%r585, %r569, 64;
	add.s32 	%r586, %r585, %r158;
	mad.lo.s32 	%r587, %r586, 12288, %r51;
	mul.hi.s32 	%r588, %r587, 715827883;
	shr.u32 	%r589, %r588, 31;
	shr.s32 	%r590, %r588, 26;
	add.s32 	%r591, %r590, %r589;
	setp.lt.s32 	%p208, %r587, 0;
	mul.lo.s32 	%r592, %r591, 402653184;
	setp.ne.s32 	%p209, %r592, %r587;
	and.pred  	%p210, %p208, %p209;
	selp.s32 	%r593, -1, 0, %p210;
	add.s32 	%r594, %r591, %r593;
	or.b32  	%r595, %r587, 1;
	mad.lo.s32 	%r596, %r594, -402653184, %r595;
	mul.wide.s32 	%rd75, %r596, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.v4.u32 	{%r597, %r598, %r599, %r600}, [%rd76+-4];
	or.b32  	%r601, %r569, 128;
	add.s32 	%r602, %r601, %r158;
	mad.lo.s32 	%r603, %r602, 12288, %r51;
	mul.hi.s32 	%r604, %r603, 715827883;
	shr.u32 	%r605, %r604, 31;
	shr.s32 	%r606, %r604, 26;
	add.s32 	%r607, %r606, %r605;
	setp.lt.s32 	%p211, %r603, 0;
	mul.lo.s32 	%r608, %r607, 402653184;
	setp.ne.s32 	%p212, %r608, %r603;
	and.pred  	%p213, %p211, %p212;
	selp.s32 	%r609, -1, 0, %p213;
	add.s32 	%r610, %r607, %r609;
	or.b32  	%r611, %r603, 1;
	mad.lo.s32 	%r612, %r610, -402653184, %r611;
	mul.wide.s32 	%rd77, %r612, 4;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.v4.u32 	{%r613, %r614, %r615, %r616}, [%rd78+-4];
	or.b32  	%r617, %r569, 192;
	add.s32 	%r618, %r617, %r158;
	mad.lo.s32 	%r619, %r618, 12288, %r51;
	mul.hi.s32 	%r620, %r619, 715827883;
	shr.u32 	%r621, %r620, 31;
	shr.s32 	%r622, %r620, 26;
	add.s32 	%r623, %r622, %r621;
	setp.lt.s32 	%p214, %r619, 0;
	mul.lo.s32 	%r624, %r623, 402653184;
	setp.ne.s32 	%p215, %r624, %r619;
	and.pred  	%p216, %p214, %p215;
	selp.s32 	%r625, -1, 0, %p216;
	add.s32 	%r626, %r623, %r625;
	or.b32  	%r627, %r619, 1;
	mad.lo.s32 	%r628, %r626, -402653184, %r627;
	mul.wide.s32 	%rd79, %r628, 4;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.v4.u32 	{%r629, %r630, %r631, %r632}, [%rd80+-4];
	selp.b32 	%r633, %r583, %r581, %p204;
	shfl.sync.bfly.b32	%r634, %r633, 8, 31, -1;
	selp.b32 	%r502, %r581, %r634, %p204;
	selp.b32 	%r503, %r634, %r583, %p204;
	selp.b32 	%r635, %r584, %r582, %p204;
	shfl.sync.bfly.b32	%r636, %r635, 8, 31, -1;
	selp.b32 	%r510, %r582, %r636, %p204;
	selp.b32 	%r511, %r636, %r584, %p204;
	selp.b32 	%r637, %r599, %r597, %p204;
	shfl.sync.bfly.b32	%r638, %r637, 8, 31, -1;
	selp.b32 	%r518, %r597, %r638, %p204;
	selp.b32 	%r519, %r638, %r599, %p204;
	selp.b32 	%r639, %r600, %r598, %p204;
	shfl.sync.bfly.b32	%r640, %r639, 8, 31, -1;
	selp.b32 	%r526, %r598, %r640, %p204;
	selp.b32 	%r527, %r640, %r600, %p204;
	selp.b32 	%r641, %r615, %r613, %p204;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r534, %r613, %r642, %p204;
	selp.b32 	%r535, %r642, %r615, %p204;
	selp.b32 	%r643, %r616, %r614, %p204;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r542, %r614, %r644, %p204;
	selp.b32 	%r543, %r644, %r616, %p204;
	selp.b32 	%r645, %r631, %r629, %p204;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r550, %r629, %r646, %p204;
	selp.b32 	%r551, %r646, %r631, %p204;
	selp.b32 	%r647, %r632, %r630, %p204;
	shfl.sync.bfly.b32	%r648, %r647, 8, 31, -1;
	selp.b32 	%r558, %r630, %r648, %p204;
	selp.b32 	%r559, %r648, %r632, %p204;
	mov.u32 	%r560, 21520;
	// begin inline asm
	prmt.b32 %r501, %r502, %r503, %r560;
	// end inline asm
	mov.u32 	%r564, 30258;
	// begin inline asm
	prmt.b32 %r505, %r502, %r503, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r510, %r511, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r513, %r510, %r511, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r518, %r519, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r518, %r519, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r526, %r527, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r526, %r527, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r534, %r535, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r534, %r535, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r542, %r543, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r542, %r543, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r550, %r551, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r550, %r551, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r558, %r559, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r561, %r558, %r559, %r564;
	// end inline asm
	st.shared.u32 	[%rd8], %r501;
	st.shared.u32 	[%rd9+128], %r505;
	st.shared.u32 	[%rd9+4], %r509;
	st.shared.u32 	[%rd9+132], %r513;
	st.shared.u32 	[%rd10+8324], %r517;
	st.shared.u32 	[%rd11], %r521;
	st.shared.u32 	[%rd12], %r525;
	st.shared.u32 	[%rd13], %r529;
	st.shared.u32 	[%rd10+16648], %r533;
	st.shared.u32 	[%rd14], %r537;
	st.shared.u32 	[%rd15], %r541;
	st.shared.u32 	[%rd16], %r545;
	st.shared.u32 	[%rd10+24972], %r549;
	st.shared.u32 	[%rd17], %r553;
	st.shared.u32 	[%rd18], %r557;
	st.shared.u32 	[%rd19], %r561;
	bar.sync 	0;
	mov.u32 	%r7967, 256;
	mov.u64 	%rd145, %rd41;
$L__BB0_84:                             // %L11734
                                        //   Parent Loop BB0_83 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd81, %rd145, %rd27;
	ld.shared.u32 	%r7833, [%rd81];
	add.s64 	%rd82, %rd145, %rd26;
	ld.shared.u32 	%r7834, [%rd82];
	add.s64 	%rd83, %rd145, %rd25;
	ld.shared.u32 	%r7835, [%rd83];
	add.s64 	%rd84, %rd145, %rd24;
	ld.shared.u32 	%r7836, [%rd84];
	// begin inline asm
	mov.b32 %r654, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r665, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r653, %r7833, -2004318072;
	mov.u32 	%r652, 983055;
	// begin inline asm
	lop3.b32 %r651, %r652, %r653, %r654, 202;
	// end inline asm
	mov.u16 	%rs28, 18432;
	// begin inline asm
	mov.b32 %r655, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r656, %r654, %r655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r659, %r651, %r656;
	// end inline asm
	mov.u32 	%r663, 15728880;
	// begin inline asm
	lop3.b32 %r662, %r663, %r653, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r666, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r667, %r665, %r666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r670, %r662, %r667;
	// end inline asm
	shr.u32 	%r675, %r653, 8;
	// begin inline asm
	lop3.b32 %r673, %r652, %r675, %r654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r677, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r678, %r654, %r677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r681, %r673, %r678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r684, %r663, %r675, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r689, %r665, %r688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r692, %r684, %r689;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r699, %r7834, -2004318072;
	// begin inline asm
	lop3.b32 %r697, %r652, %r699, %r700, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r702, %r700, %r701;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r705, %r697, %r702;
	// end inline asm
	// begin inline asm
	lop3.b32 %r708, %r663, %r699, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r711, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	shr.u32 	%r721, %r699, 8;
	// begin inline asm
	lop3.b32 %r719, %r652, %r721, %r700, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r724, %r700, %r723;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r727, %r719, %r724;
	// end inline asm
	// begin inline asm
	lop3.b32 %r730, %r663, %r721, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r735, %r711, %r734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r738, %r730, %r735;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r745, %r7835, -2004318072;
	// begin inline asm
	lop3.b32 %r743, %r652, %r745, %r746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r747, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r748, %r746, %r747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r751, %r743, %r748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r754, %r663, %r745, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	shr.u32 	%r767, %r745, 8;
	// begin inline asm
	lop3.b32 %r765, %r652, %r767, %r746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r746, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	// begin inline asm
	lop3.b32 %r776, %r663, %r767, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r791, %r7836, -2004318072;
	// begin inline asm
	lop3.b32 %r789, %r652, %r791, %r792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r792, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r800, %r663, %r791, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	shr.u32 	%r813, %r791, 8;
	// begin inline asm
	lop3.b32 %r811, %r652, %r813, %r792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r792, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	// begin inline asm
	lop3.b32 %r822, %r663, %r813, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r803, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r833, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r835, %r833, %r659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r840, %r838, %r670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r843, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r845, %r843, %r681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r848, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r850, %r848, %r692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r853, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r855, %r853, %r705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r858, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r860, %r858, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r863, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r865, %r863, %r727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r868, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r870, %r868, %r738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r873, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r875, %r873, %r751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r878, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r880, %r878, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r883, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r885, %r883, %r773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r888, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r890, %r888, %r784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r893, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r895, %r893, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r898, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r900, %r898, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r903, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r905, %r903, %r819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r908, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r910, %r908, %r830;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r917, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r652, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r663, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	shr.u32 	%r939, %r917, 8;
	// begin inline asm
	lop3.b32 %r937, %r652, %r939, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r918, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r948, %r663, %r939, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r929, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r963, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r652, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r663, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	shr.u32 	%r985, %r963, 8;
	// begin inline asm
	lop3.b32 %r983, %r652, %r985, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r964, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r994, %r663, %r985, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r975, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1009, %r7970, -2004318072;
	// begin inline asm
	lop3.b32 %r1007, %r652, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r663, %r1009, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	shr.u32 	%r1031, %r1009, 8;
	// begin inline asm
	lop3.b32 %r1029, %r652, %r1031, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1010, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1040, %r663, %r1031, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1055, %r7971, -2004318072;
	// begin inline asm
	lop3.b32 %r1053, %r652, %r1055, %r1056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1056, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1064, %r663, %r1055, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1067, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	shr.u32 	%r1077, %r1055, 8;
	// begin inline asm
	lop3.b32 %r1075, %r652, %r1077, %r1056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1056, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1086, %r663, %r1077, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1067, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r203, %r923, %r835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r203, %r934, %r840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r203, %r945, %r845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r203, %r956, %r850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r203, %r969, %r855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r203, %r980, %r860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r203, %r991, %r865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r203, %r1002, %r870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r203, %r1015, %r875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r203, %r1026, %r880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r203, %r1037, %r885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r203, %r1048, %r890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r203, %r1061, %r895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r203, %r1072, %r900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r203, %r1083, %r905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r203, %r1094, %r910;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1165, %r7972, -2004318072;
	// begin inline asm
	lop3.b32 %r1163, %r652, %r1165, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1166, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1174, %r663, %r1165, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1177, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	shr.u32 	%r1187, %r1165, 8;
	// begin inline asm
	lop3.b32 %r1185, %r652, %r1187, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1189, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1190, %r1166, %r1189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1193, %r1185, %r1190;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1196, %r663, %r1187, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1201, %r1177, %r1200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1204, %r1196, %r1201;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1211, %r7973, -2004318072;
	// begin inline asm
	lop3.b32 %r1209, %r652, %r1211, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r663, %r1211, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1223, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	shr.u32 	%r1233, %r1211, 8;
	// begin inline asm
	lop3.b32 %r1231, %r652, %r1233, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1235, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1236, %r1212, %r1235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1239, %r1231, %r1236;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1242, %r663, %r1233, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1247, %r1223, %r1246;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1250, %r1242, %r1247;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1257, %r7974, -2004318072;
	// begin inline asm
	lop3.b32 %r1255, %r652, %r1257, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r663, %r1257, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1269, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	shr.u32 	%r1279, %r1257, 8;
	// begin inline asm
	lop3.b32 %r1277, %r652, %r1279, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1281, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1282, %r1258, %r1281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1285, %r1277, %r1282;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1288, %r663, %r1279, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1292, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1293, %r1269, %r1292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1296, %r1288, %r1293;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1303, %r7975, -2004318072;
	// begin inline asm
	lop3.b32 %r1301, %r652, %r1303, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1304, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1312, %r663, %r1303, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1315, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	shr.u32 	%r1325, %r1303, 8;
	// begin inline asm
	lop3.b32 %r1323, %r652, %r1325, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1327, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1328, %r1304, %r1327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1331, %r1323, %r1328;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1334, %r663, %r1325, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1338, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1339, %r1315, %r1338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1342, %r1334, %r1339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1345, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1347, %r1345, %r1171, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1351, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r1351, %r1182, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r1357, %r1193, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1204, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1217, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1228, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1239, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1250, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1263, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1274, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1285, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1296, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1309, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1320, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1331, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1342, %r1157;
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1445, %r7976, -2004318072;
	// begin inline asm
	lop3.b32 %r1443, %r652, %r1445, %r1446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1446, %r1447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1451, %r1443, %r1448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1454, %r663, %r1445, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1459, %r1457, %r1458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1462, %r1454, %r1459;
	// end inline asm
	shr.u32 	%r1467, %r1445, 8;
	// begin inline asm
	lop3.b32 %r1465, %r652, %r1467, %r1446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1469, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1446, %r1469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1473, %r1465, %r1470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1476, %r663, %r1467, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1481, %r1457, %r1480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1484, %r1476, %r1481;
	// end inline asm
	// begin inline asm
	mov.b32 %r1492, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1491, %r7977, -2004318072;
	// begin inline asm
	lop3.b32 %r1489, %r652, %r1491, %r1492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1493, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1492, %r1493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1497, %r1489, %r1494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1500, %r663, %r1491, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1503, %r1504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1508, %r1500, %r1505;
	// end inline asm
	shr.u32 	%r1513, %r1491, 8;
	// begin inline asm
	lop3.b32 %r1511, %r652, %r1513, %r1492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1515, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1516, %r1492, %r1515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1519, %r1511, %r1516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1522, %r663, %r1513, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1526, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1527, %r1503, %r1526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1530, %r1522, %r1527;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1537, %r7978, -2004318072;
	// begin inline asm
	lop3.b32 %r1535, %r652, %r1537, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1538, %r1539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1543, %r1535, %r1540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1546, %r663, %r1537, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1549, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	shr.u32 	%r1559, %r1537, 8;
	// begin inline asm
	lop3.b32 %r1557, %r652, %r1559, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1538, %r1561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1565, %r1557, %r1562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1568, %r663, %r1559, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1549, %r1572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1576, %r1568, %r1573;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r1583, %r7979, -2004318072;
	// begin inline asm
	lop3.b32 %r1581, %r652, %r1583, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1584, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r663, %r1583, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1595, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	shr.u32 	%r1605, %r1583, 8;
	// begin inline asm
	lop3.b32 %r1603, %r652, %r1605, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1608, %r1584, %r1607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1611, %r1603, %r1608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1614, %r663, %r1605, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1618, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1619, %r1595, %r1618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1622, %r1614, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r239, %r1451, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r239, %r1462, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r239, %r1473, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r239, %r1484, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r239, %r1497, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r239, %r1508, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r239, %r1519, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r239, %r1530, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r239, %r1543, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r239, %r1554, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r239, %r1565, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r239, %r1576, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r239, %r1589, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r239, %r1600, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r239, %r1611, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r239, %r1622, %r1437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r260, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r260, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r260, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r260, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r260, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r260, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r260, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r260, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r263, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r260, %r1693, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r263, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r260, %r1702, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r263, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r260, %r1711, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r263, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r260, %r1720, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r263, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r260, %r1729, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r263, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r260, %r1738, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r263, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r260, %r1747, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r263, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r260, %r1756, %r1810;
	// end inline asm
	mov.u32 	%r1825, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r319, %r325, %r322, %r328}, {%r1694, %r1764}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r319, %r325, %r322, %r328}, {%r1703, %r1771}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r319, %r325, %r322, %r328}, {%r1712, %r1778}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1931, %r1928}, {%r319, %r325, %r322, %r328}, {%r1721, %r1785}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1937}, {%r319, %r325, %r322, %r328}, {%r1730, %r1792}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r319, %r325, %r322, %r328}, {%r1739, %r1799}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r319, %r325, %r322, %r328}, {%r1748, %r1806}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1964}, {%r319, %r325, %r322, %r328}, {%r1757, %r1813}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r363, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r363, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r363, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r1924, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r363, %r1931, %r1926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1933, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r363, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r363, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r363, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1960, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r1960, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r363, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r366, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r363, %r1901, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r366, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r363, %r1910, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r366, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r363, %r1919, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r366, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r363, %r1928, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r366, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r363, %r1937, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r366, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r363, %r1946, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r366, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r363, %r1955, %r2011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r366, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r363, %r1964, %r2018;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2025, %r2026}, {%r397, %r403, %r400, %r406}, {%r1902, %r1972}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2035, %r2036}, {%r397, %r403, %r400, %r406}, {%r1911, %r1979}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2045, %r2046}, {%r397, %r403, %r400, %r406}, {%r1920, %r1986}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2055, %r2056}, {%r397, %r403, %r400, %r406}, {%r1929, %r1993}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2065, %r2066}, {%r397, %r403, %r400, %r406}, {%r1938, %r2000}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2075, %r2076}, {%r397, %r403, %r400, %r406}, {%r1947, %r2007}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2085, %r2086}, {%r397, %r403, %r400, %r406}, {%r1956, %r2014}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2095, %r2096}, {%r397, %r403, %r400, %r406}, {%r1965, %r2021}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r104, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r104, %r2026;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r104, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r104, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r104, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r104, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r104, %r2055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r104, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r104, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r104, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r104, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r104, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r104, %r2085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r104, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r104, %r2095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r104, %r2096;
	// end inline asm
	mov.u16 	%rs216, -14592;
	// begin inline asm
	mov.b32 %r2153, {%rs216, %rs216};
	// end inline asm
	mov.u16 	%rs218, 18176;
	// begin inline asm
	mov.b32 %r2154, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2155, %r2105, %r2153;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2158, %r2155, %r2154;
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2163, %r2108, %r2161;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2166, %r2163, %r2162;
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2171, %r2111, %r2169;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2174, %r2171, %r2170;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2179, %r2114, %r2177;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2182, %r2179, %r2178;
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2187, %r2117, %r2185;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2190, %r2187, %r2186;
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2195, %r2120, %r2193;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2198, %r2195, %r2194;
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2203, %r2123, %r2201;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2206, %r2203, %r2202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2211, %r2126, %r2209;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2214, %r2211, %r2210;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2219, %r2129, %r2217;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2222, %r2219, %r2218;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2227, %r2132, %r2225;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2230, %r2227, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2235, %r2135, %r2233;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2238, %r2235, %r2234;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2243, %r2138, %r2241;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2246, %r2243, %r2242;
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2251, %r2141, %r2249;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2254, %r2251, %r2250;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2259, %r2144, %r2257;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2262, %r2259, %r2258;
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2267, %r2147, %r2265;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2270, %r2267, %r2266;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2275, %r2150, %r2273;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2278, %r2275, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2283, %r2284, %r2282;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2158, %r2283;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2284, %r2289;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2166, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2284, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2174, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2284, %r2303;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2182, %r2304;
	// end inline asm
	mov.u32 	%r2313, 25152;
	// begin inline asm
	prmt.b32 %r2310, %r2286, %r2300, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2314, %r2293, %r2307, %r2313;
	// end inline asm
	shl.b32 	%r2321, %r2314, 4;
	mov.u32 	%r2319, 252645135;
	// begin inline asm
	lop3.b32 %r2318, %r2319, %r2310, %r2321, 202;
	// end inline asm
	xor.b32  	%r7837, %r2318, -2004318072;
	// begin inline asm
	mov.b32 %r2325, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2325, %r2323;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2190, %r2324;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2325, %r2330;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2198, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2325, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2206, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2325, %r2344;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2214, %r2345;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2327, %r2341, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2355, %r2334, %r2348, %r2313;
	// end inline asm
	shl.b32 	%r2362, %r2355, 4;
	// begin inline asm
	lop3.b32 %r2359, %r2319, %r2351, %r2362, 202;
	// end inline asm
	xor.b32  	%r7838, %r2359, -2004318072;
	// begin inline asm
	mov.b32 %r2366, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2366, %r2364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2222, %r2365;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2366, %r2371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2230, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2366, %r2378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2238, %r2379;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2366, %r2385;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2246, %r2386;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2368, %r2382, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2375, %r2389, %r2313;
	// end inline asm
	shl.b32 	%r2403, %r2396, 4;
	// begin inline asm
	lop3.b32 %r2400, %r2319, %r2392, %r2403, 202;
	// end inline asm
	xor.b32  	%r7839, %r2400, -2004318072;
	// begin inline asm
	mov.b32 %r2407, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2407, %r2405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2254, %r2406;
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2407, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2262, %r2413;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2407, %r2419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2270, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2407, %r2426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2278, %r2427;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2409, %r2423, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2416, %r2430, %r2313;
	// end inline asm
	shl.b32 	%r2444, %r2437, 4;
	// begin inline asm
	lop3.b32 %r2441, %r2319, %r2433, %r2444, 202;
	// end inline asm
	xor.b32  	%r7840, %r2441, -2004318072;
	add.s64 	%rd85, %rd145, %rd23;
	st.shared.u32 	[%rd85], %r7837;
	add.s64 	%rd86, %rd145, %rd22;
	st.shared.u32 	[%rd86], %r7838;
	add.s64 	%rd87, %rd145, %rd21;
	st.shared.u32 	[%rd87], %r7839;
	add.s64 	%rd88, %rd145, %rd20;
	st.shared.u32 	[%rd88], %r7840;
	ld.shared.u32 	%r7968, [%rd81];
	ld.shared.u32 	%r7969, [%rd82];
	ld.shared.u32 	%r7970, [%rd83];
	ld.shared.u32 	%r7971, [%rd84];
	// begin inline asm
	mov.b32 %r2450, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2449, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r2447, %r652, %r2449, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2452, %r2450, %r2451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2455, %r2447, %r2452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2458, %r663, %r2449, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2461, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	shr.u32 	%r2471, %r2449, 8;
	// begin inline asm
	lop3.b32 %r2469, %r652, %r2471, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2474, %r2450, %r2473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2477, %r2469, %r2474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2480, %r663, %r2471, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2461, %r2484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2488, %r2480, %r2485;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2495, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r2493, %r652, %r2495, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2496, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r663, %r2495, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2507, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	shr.u32 	%r2517, %r2495, 8;
	// begin inline asm
	lop3.b32 %r2515, %r652, %r2517, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2520, %r2496, %r2519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2523, %r2515, %r2520;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2526, %r663, %r2517, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2531, %r2507, %r2530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2534, %r2526, %r2531;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2541, %r7970, -2004318072;
	// begin inline asm
	lop3.b32 %r2539, %r652, %r2541, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2542, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r663, %r2541, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2553, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	shr.u32 	%r2563, %r2541, 8;
	// begin inline asm
	lop3.b32 %r2561, %r652, %r2563, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2566, %r2542, %r2565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2569, %r2561, %r2566;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2572, %r663, %r2563, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2576, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2577, %r2553, %r2576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2580, %r2572, %r2577;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r2587, %r7971, -2004318072;
	// begin inline asm
	lop3.b32 %r2585, %r652, %r2587, %r2588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2589, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2590, %r2588, %r2589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2593, %r2585, %r2590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2596, %r663, %r2587, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2599, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	shr.u32 	%r2609, %r2587, 8;
	// begin inline asm
	lop3.b32 %r2607, %r652, %r2609, %r2588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2612, %r2588, %r2611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2615, %r2607, %r2612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2618, %r663, %r2609, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2622, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2623, %r2599, %r2622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2626, %r2618, %r2623;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2634, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r2634, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2639, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2641, %r2639, %r2477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2654, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r2654, %r2512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2669, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r2669, %r2547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2593;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2694, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r2694, %r2604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2699, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2699, %r2615;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2626;
	// end inline asm
	// begin inline asm
	mov.b32 %r2714, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2725, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2711, %r652, %r1165, %r2714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2715, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2716, %r2714, %r2715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2719, %r2711, %r2716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2722, %r663, %r1165, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2726, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2727, %r2725, %r2726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2730, %r2722, %r2727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2733, %r652, %r1187, %r2714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2737, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2738, %r2714, %r2737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2741, %r2733, %r2738;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2744, %r663, %r1187, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2748, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2749, %r2725, %r2748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2752, %r2744, %r2749;
	// end inline asm
	// begin inline asm
	mov.b32 %r2760, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2771, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2757, %r652, %r1211, %r2760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2761, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2762, %r2760, %r2761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2765, %r2757, %r2762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2768, %r663, %r1211, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2773, %r2771, %r2772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2776, %r2768, %r2773;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2779, %r652, %r1233, %r2760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2783, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2784, %r2760, %r2783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2787, %r2779, %r2784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2790, %r663, %r1233, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2794, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2795, %r2771, %r2794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2798, %r2790, %r2795;
	// end inline asm
	// begin inline asm
	mov.b32 %r2806, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2817, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2803, %r652, %r1257, %r2806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2807, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2808, %r2806, %r2807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2811, %r2803, %r2808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2814, %r663, %r1257, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2819, %r2817, %r2818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2822, %r2814, %r2819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2825, %r652, %r1279, %r2806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2829, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2830, %r2806, %r2829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2833, %r2825, %r2830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2836, %r663, %r1279, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2840, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2841, %r2817, %r2840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2844, %r2836, %r2841;
	// end inline asm
	// begin inline asm
	mov.b32 %r2852, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2863, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2849, %r652, %r1303, %r2852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2853, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2854, %r2852, %r2853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2857, %r2849, %r2854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2860, %r663, %r1303, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2865, %r2863, %r2864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2868, %r2860, %r2865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2871, %r652, %r1325, %r2852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2875, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2876, %r2852, %r2875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2879, %r2871, %r2876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2882, %r663, %r1325, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2886, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2887, %r2863, %r2886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2890, %r2882, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r203, %r2719, %r2631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r203, %r2730, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r203, %r2741, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r203, %r2752, %r2646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r203, %r2765, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r203, %r2776, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r203, %r2787, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r203, %r2798, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r203, %r2811, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r203, %r2822, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r203, %r2833, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r203, %r2844, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r203, %r2857, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r203, %r2868, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r203, %r2879, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r203, %r2890, %r2706;
	// end inline asm
	// begin inline asm
	mov.b32 %r2962, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r2973, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2959, %r652, %r1445, %r2962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2963, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2964, %r2962, %r2963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2967, %r2959, %r2964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2970, %r663, %r1445, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2974, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2975, %r2973, %r2974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2978, %r2970, %r2975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2981, %r652, %r1467, %r2962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2985, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2986, %r2962, %r2985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2989, %r2981, %r2986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2992, %r663, %r1467, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2996, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2997, %r2973, %r2996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3000, %r2992, %r2997;
	// end inline asm
	// begin inline asm
	mov.b32 %r3008, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3019, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3005, %r652, %r1491, %r3008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3009, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3010, %r3008, %r3009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3013, %r3005, %r3010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3016, %r663, %r1491, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3021, %r3019, %r3020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3024, %r3016, %r3021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3027, %r652, %r1513, %r3008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3031, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3032, %r3008, %r3031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3035, %r3027, %r3032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3038, %r663, %r1513, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3042, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3043, %r3019, %r3042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3046, %r3038, %r3043;
	// end inline asm
	// begin inline asm
	mov.b32 %r3054, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3065, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3051, %r652, %r1537, %r3054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3055, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3056, %r3054, %r3055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3059, %r3051, %r3056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3062, %r663, %r1537, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3067, %r3065, %r3066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3070, %r3062, %r3067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3073, %r652, %r1559, %r3054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3077, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3078, %r3054, %r3077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3081, %r3073, %r3078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3084, %r663, %r1559, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3088, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3089, %r3065, %r3088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3092, %r3084, %r3089;
	// end inline asm
	// begin inline asm
	mov.b32 %r3100, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3111, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3097, %r652, %r1583, %r3100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3101, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3102, %r3100, %r3101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3105, %r3097, %r3102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3108, %r663, %r1583, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3113, %r3111, %r3112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3116, %r3108, %r3113;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3119, %r652, %r1605, %r3100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3123, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3124, %r3100, %r3123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3127, %r3119, %r3124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3130, %r663, %r1605, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3134, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3135, %r3111, %r3134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3138, %r3130, %r3135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3141, %r2967, %r2893;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3147, %r2978, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3153, %r2989, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r3000, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r3013, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3024, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3035, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3046, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3059, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3070, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3081, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3092, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3105, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3116, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3127, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3138, %r2953;
	// end inline asm
	// begin inline asm
	mov.b32 %r3242, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3253, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3239, %r652, %r653, %r3242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3243, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3244, %r3242, %r3243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3247, %r3239, %r3244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3250, %r663, %r653, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3254, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3255, %r3253, %r3254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3258, %r3250, %r3255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3261, %r652, %r675, %r3242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3265, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3266, %r3242, %r3265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3269, %r3261, %r3266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3272, %r663, %r675, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3276, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3277, %r3253, %r3276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3280, %r3272, %r3277;
	// end inline asm
	// begin inline asm
	mov.b32 %r3288, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3299, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3285, %r652, %r699, %r3288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3289, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3290, %r3288, %r3289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3293, %r3285, %r3290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3296, %r663, %r699, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3301, %r3299, %r3300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3304, %r3296, %r3301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3307, %r652, %r721, %r3288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3311, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3312, %r3288, %r3311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3315, %r3307, %r3312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3318, %r663, %r721, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3322, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3323, %r3299, %r3322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3326, %r3318, %r3323;
	// end inline asm
	// begin inline asm
	mov.b32 %r3334, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3345, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3331, %r652, %r745, %r3334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3335, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3336, %r3334, %r3335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3339, %r3331, %r3336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3342, %r663, %r745, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3347, %r3345, %r3346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3350, %r3342, %r3347;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3353, %r652, %r767, %r3334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3357, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3358, %r3334, %r3357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3361, %r3353, %r3358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3364, %r663, %r767, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3368, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3369, %r3345, %r3368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3372, %r3364, %r3369;
	// end inline asm
	// begin inline asm
	mov.b32 %r3380, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r3391, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3377, %r652, %r791, %r3380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3381, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3382, %r3380, %r3381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3385, %r3377, %r3382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3388, %r663, %r791, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3393, %r3391, %r3392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3396, %r3388, %r3393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3399, %r652, %r813, %r3380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3403, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3404, %r3380, %r3403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3407, %r3399, %r3404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3410, %r663, %r813, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3414, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3415, %r3391, %r3414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3418, %r3410, %r3415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r239, %r3247, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r239, %r3258, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r239, %r3269, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r239, %r3280, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r239, %r3293, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r239, %r3304, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r239, %r3315, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r239, %r3326, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r239, %r3339, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r239, %r3350, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r239, %r3361, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r239, %r3372, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r239, %r3385, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r239, %r3396, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r239, %r3407, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r239, %r3418, %r3233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3485, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3487, %r3485, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r260, %r3492, %r3487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3494, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r3494, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r260, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3503, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3503, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r260, %r3510, %r3505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3512, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3512, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r260, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3521, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r3521, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r260, %r3528, %r3523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r260, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r260, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3548, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3548, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r260, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r263, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r260, %r3489, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r263, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r260, %r3498, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r263, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r260, %r3507, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r263, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r260, %r3516, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r263, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r260, %r3525, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r263, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r260, %r3534, %r3592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3599, %r263, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3602, %r260, %r3543, %r3599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3606, %r263, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3609, %r260, %r3552, %r3606;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3700, %r3697}, {%r319, %r325, %r322, %r328}, {%r3490, %r3560}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3709, %r3706}, {%r319, %r325, %r322, %r328}, {%r3499, %r3567}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3718, %r3715}, {%r319, %r325, %r322, %r328}, {%r3508, %r3574}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3727, %r3724}, {%r319, %r325, %r322, %r328}, {%r3517, %r3581}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3736, %r3733}, {%r319, %r325, %r322, %r328}, {%r3526, %r3588}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r319, %r325, %r322, %r328}, {%r3535, %r3595}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r319, %r325, %r322, %r328}, {%r3544, %r3602}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3763, %r3760}, {%r319, %r325, %r322, %r328}, {%r3553, %r3609}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3693, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3695, %r3693, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3698, %r363, %r3700, %r3695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3702, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3704, %r3702, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3707, %r363, %r3709, %r3704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3711, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3713, %r3711, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3716, %r363, %r3718, %r3713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3720, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3720, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r363, %r3727, %r3722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3729, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3731, %r3729, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3734, %r363, %r3736, %r3731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r363, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r363, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3756, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r3756, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r363, %r3763, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r366, %r3700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r363, %r3697, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r366, %r3709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r363, %r3706, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r366, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r363, %r3715, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r366, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r363, %r3724, %r3786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3793, %r366, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3796, %r363, %r3733, %r3793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3800, %r366, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3803, %r363, %r3742, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3807, %r366, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3810, %r363, %r3751, %r3807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3814, %r366, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3817, %r363, %r3760, %r3814;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3821, %r3822}, {%r397, %r403, %r400, %r406}, {%r3698, %r3768}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3831, %r3832}, {%r397, %r403, %r400, %r406}, {%r3707, %r3775}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3841, %r3842}, {%r397, %r403, %r400, %r406}, {%r3716, %r3782}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3851, %r3852}, {%r397, %r403, %r400, %r406}, {%r3725, %r3789}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3861, %r3862}, {%r397, %r403, %r400, %r406}, {%r3734, %r3796}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3871, %r3872}, {%r397, %r403, %r400, %r406}, {%r3743, %r3803}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3881, %r3882}, {%r397, %r403, %r400, %r406}, {%r3752, %r3810}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3891, %r3892}, {%r397, %r403, %r400, %r406}, {%r3761, %r3817}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3901, %r104, %r3821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3904, %r104, %r3822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r104, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r104, %r3832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r104, %r3841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r104, %r3842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r104, %r3851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r104, %r3852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r104, %r3861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r104, %r3862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r104, %r3871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r104, %r3872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r104, %r3881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r104, %r3882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r104, %r3891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r104, %r3892;
	// end inline asm
	// begin inline asm
	mov.b32 %r3949, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3950, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3951, %r3901, %r3949;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3954, %r3951, %r3950;
	// end inline asm
	// begin inline asm
	mov.b32 %r3957, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3958, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3959, %r3904, %r3957;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3962, %r3959, %r3958;
	// end inline asm
	// begin inline asm
	mov.b32 %r3965, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3966, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3967, %r3907, %r3965;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3970, %r3967, %r3966;
	// end inline asm
	// begin inline asm
	mov.b32 %r3973, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3974, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3975, %r3910, %r3973;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3978, %r3975, %r3974;
	// end inline asm
	// begin inline asm
	mov.b32 %r3981, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3982, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3983, %r3913, %r3981;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3986, %r3983, %r3982;
	// end inline asm
	// begin inline asm
	mov.b32 %r3989, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3990, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3991, %r3916, %r3989;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3994, %r3991, %r3990;
	// end inline asm
	// begin inline asm
	mov.b32 %r3997, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r3998, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3999, %r3919, %r3997;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4002, %r3999, %r3998;
	// end inline asm
	// begin inline asm
	mov.b32 %r4005, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4006, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4007, %r3922, %r4005;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4010, %r4007, %r4006;
	// end inline asm
	// begin inline asm
	mov.b32 %r4013, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4014, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4015, %r3925, %r4013;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4018, %r4015, %r4014;
	// end inline asm
	// begin inline asm
	mov.b32 %r4021, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4022, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4023, %r3928, %r4021;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4026, %r4023, %r4022;
	// end inline asm
	// begin inline asm
	mov.b32 %r4029, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4030, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4031, %r3931, %r4029;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4034, %r4031, %r4030;
	// end inline asm
	// begin inline asm
	mov.b32 %r4037, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4038, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4039, %r3934, %r4037;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4042, %r4039, %r4038;
	// end inline asm
	// begin inline asm
	mov.b32 %r4045, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4046, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4047, %r3937, %r4045;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4050, %r4047, %r4046;
	// end inline asm
	// begin inline asm
	mov.b32 %r4053, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4054, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4055, %r3940, %r4053;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4058, %r4055, %r4054;
	// end inline asm
	// begin inline asm
	mov.b32 %r4061, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4062, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4063, %r3943, %r4061;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4066, %r4063, %r4062;
	// end inline asm
	// begin inline asm
	mov.b32 %r4069, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r4070, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4071, %r3946, %r4069;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4074, %r4071, %r4070;
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4079, %r4080, %r4078;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4082, %r3954, %r4079;
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4086, %r4080, %r4085;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4089, %r3962, %r4086;
	// end inline asm
	// begin inline asm
	mov.b32 %r4092, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r4080, %r4092;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4096, %r3970, %r4093;
	// end inline asm
	// begin inline asm
	mov.b32 %r4099, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r4080, %r4099;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4103, %r3978, %r4100;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4106, %r4082, %r4096, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4110, %r4089, %r4103, %r2313;
	// end inline asm
	shl.b32 	%r4117, %r4110, 4;
	// begin inline asm
	lop3.b32 %r4114, %r2319, %r4106, %r4117, 202;
	// end inline asm
	xor.b32  	%r7841, %r4114, -2004318072;
	// begin inline asm
	mov.b32 %r4121, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4119, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4120, %r4121, %r4119;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4123, %r3986, %r4120;
	// end inline asm
	// begin inline asm
	mov.b32 %r4126, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r4121, %r4126;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4130, %r3994, %r4127;
	// end inline asm
	// begin inline asm
	mov.b32 %r4133, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r4121, %r4133;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4137, %r4002, %r4134;
	// end inline asm
	// begin inline asm
	mov.b32 %r4140, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4121, %r4140;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4144, %r4010, %r4141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4147, %r4123, %r4137, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4151, %r4130, %r4144, %r2313;
	// end inline asm
	shl.b32 	%r4158, %r4151, 4;
	// begin inline asm
	lop3.b32 %r4155, %r2319, %r4147, %r4158, 202;
	// end inline asm
	xor.b32  	%r7842, %r4155, -2004318072;
	// begin inline asm
	mov.b32 %r4162, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4160, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4161, %r4162, %r4160;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4164, %r4018, %r4161;
	// end inline asm
	// begin inline asm
	mov.b32 %r4167, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4162, %r4167;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4171, %r4026, %r4168;
	// end inline asm
	// begin inline asm
	mov.b32 %r4174, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4162, %r4174;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4178, %r4034, %r4175;
	// end inline asm
	// begin inline asm
	mov.b32 %r4181, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4162, %r4181;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4185, %r4042, %r4182;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4188, %r4164, %r4178, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4192, %r4171, %r4185, %r2313;
	// end inline asm
	shl.b32 	%r4199, %r4192, 4;
	// begin inline asm
	lop3.b32 %r4196, %r2319, %r4188, %r4199, 202;
	// end inline asm
	xor.b32  	%r7843, %r4196, -2004318072;
	// begin inline asm
	mov.b32 %r4203, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4201, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4202, %r4203, %r4201;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4205, %r4050, %r4202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4208, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4203, %r4208;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4212, %r4058, %r4209;
	// end inline asm
	// begin inline asm
	mov.b32 %r4215, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4203, %r4215;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4219, %r4066, %r4216;
	// end inline asm
	// begin inline asm
	mov.b32 %r4222, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4203, %r4222;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4226, %r4074, %r4223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4229, %r4205, %r4219, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4233, %r4212, %r4226, %r2313;
	// end inline asm
	shl.b32 	%r4240, %r4233, 4;
	// begin inline asm
	lop3.b32 %r4237, %r2319, %r4229, %r4240, 202;
	// end inline asm
	xor.b32  	%r7844, %r4237, -2004318072;
	st.shared.u32 	[%rd85], %r7841;
	st.shared.u32 	[%rd86], %r7842;
	st.shared.u32 	[%rd87], %r7843;
	st.shared.u32 	[%rd88], %r7844;
	ld.shared.u32 	%r7972, [%rd81];
	ld.shared.u32 	%r7973, [%rd82];
	ld.shared.u32 	%r7974, [%rd83];
	ld.shared.u32 	%r7975, [%rd84];
	// begin inline asm
	mov.b32 %r4246, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4257, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4245, %r7972, -2004318072;
	// begin inline asm
	lop3.b32 %r4243, %r652, %r4245, %r4246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4247, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4248, %r4246, %r4247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4251, %r4243, %r4248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4254, %r663, %r4245, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4258, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4259, %r4257, %r4258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4262, %r4254, %r4259;
	// end inline asm
	shr.u32 	%r4267, %r4245, 8;
	// begin inline asm
	lop3.b32 %r4265, %r652, %r4267, %r4246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4269, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4270, %r4246, %r4269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4273, %r4265, %r4270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4276, %r663, %r4267, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4280, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4281, %r4257, %r4280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4284, %r4276, %r4281;
	// end inline asm
	// begin inline asm
	mov.b32 %r4292, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4303, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4291, %r7973, -2004318072;
	// begin inline asm
	lop3.b32 %r4289, %r652, %r4291, %r4292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4293, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4294, %r4292, %r4293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4297, %r4289, %r4294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4300, %r663, %r4291, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4305, %r4303, %r4304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4308, %r4300, %r4305;
	// end inline asm
	shr.u32 	%r4313, %r4291, 8;
	// begin inline asm
	lop3.b32 %r4311, %r652, %r4313, %r4292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4315, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4316, %r4292, %r4315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4319, %r4311, %r4316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4322, %r663, %r4313, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4326, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4327, %r4303, %r4326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4330, %r4322, %r4327;
	// end inline asm
	// begin inline asm
	mov.b32 %r4338, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4349, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4337, %r7974, -2004318072;
	// begin inline asm
	lop3.b32 %r4335, %r652, %r4337, %r4338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4339, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4340, %r4338, %r4339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4343, %r4335, %r4340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4346, %r663, %r4337, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4351, %r4349, %r4350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4354, %r4346, %r4351;
	// end inline asm
	shr.u32 	%r4359, %r4337, 8;
	// begin inline asm
	lop3.b32 %r4357, %r652, %r4359, %r4338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4361, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4362, %r4338, %r4361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4365, %r4357, %r4362;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4368, %r663, %r4359, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4372, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4373, %r4349, %r4372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4376, %r4368, %r4373;
	// end inline asm
	// begin inline asm
	mov.b32 %r4384, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4395, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r4383, %r7975, -2004318072;
	// begin inline asm
	lop3.b32 %r4381, %r652, %r4383, %r4384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4385, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4386, %r4384, %r4385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4389, %r4381, %r4386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4392, %r663, %r4383, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4397, %r4395, %r4396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4400, %r4392, %r4397;
	// end inline asm
	shr.u32 	%r4405, %r4383, 8;
	// begin inline asm
	lop3.b32 %r4403, %r652, %r4405, %r4384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4407, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4408, %r4384, %r4407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4411, %r4403, %r4408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4414, %r663, %r4405, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4418, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4419, %r4395, %r4418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4422, %r4414, %r4419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4425, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4427, %r4425, %r4251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4430, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4432, %r4430, %r4262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4435, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4437, %r4435, %r4273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4440, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4442, %r4440, %r4284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4445, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4447, %r4445, %r4297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4450, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4452, %r4450, %r4308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4455, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4457, %r4455, %r4319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4460, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4462, %r4460, %r4330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4465, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4467, %r4465, %r4343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4470, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4472, %r4470, %r4354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4475, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4477, %r4475, %r4365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4480, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4482, %r4480, %r4376;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4485, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4487, %r4485, %r4389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4490, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4492, %r4490, %r4400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4495, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4497, %r4495, %r4411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4500, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4502, %r4500, %r4422;
	// end inline asm
	// begin inline asm
	mov.b32 %r4510, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4521, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4507, %r652, %r1445, %r4510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4511, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4512, %r4510, %r4511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4515, %r4507, %r4512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4518, %r663, %r1445, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4522, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4523, %r4521, %r4522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4526, %r4518, %r4523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4529, %r652, %r1467, %r4510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4533, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4534, %r4510, %r4533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4537, %r4529, %r4534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4540, %r663, %r1467, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4544, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4545, %r4521, %r4544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4548, %r4540, %r4545;
	// end inline asm
	// begin inline asm
	mov.b32 %r4556, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4567, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4553, %r652, %r1491, %r4556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4557, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4558, %r4556, %r4557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4561, %r4553, %r4558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4564, %r663, %r1491, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4569, %r4567, %r4568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4572, %r4564, %r4569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4575, %r652, %r1513, %r4556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4579, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4580, %r4556, %r4579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4583, %r4575, %r4580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4586, %r663, %r1513, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4590, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4591, %r4567, %r4590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4594, %r4586, %r4591;
	// end inline asm
	// begin inline asm
	mov.b32 %r4602, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4613, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4599, %r652, %r1537, %r4602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4603, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4604, %r4602, %r4603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4607, %r4599, %r4604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4610, %r663, %r1537, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4615, %r4613, %r4614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4618, %r4610, %r4615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4621, %r652, %r1559, %r4602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4625, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4626, %r4602, %r4625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4629, %r4621, %r4626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4632, %r663, %r1559, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4636, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4637, %r4613, %r4636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4640, %r4632, %r4637;
	// end inline asm
	// begin inline asm
	mov.b32 %r4648, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4659, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4645, %r652, %r1583, %r4648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4649, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4650, %r4648, %r4649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4653, %r4645, %r4650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4656, %r663, %r1583, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4661, %r4659, %r4660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4664, %r4656, %r4661;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4667, %r652, %r1605, %r4648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4671, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4672, %r4648, %r4671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4675, %r4667, %r4672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4678, %r663, %r1605, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4682, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4683, %r4659, %r4682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4686, %r4678, %r4683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4689, %r203, %r4515, %r4427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r203, %r4526, %r4432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r203, %r4537, %r4437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r203, %r4548, %r4442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r203, %r4561, %r4447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r203, %r4572, %r4452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r203, %r4583, %r4457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r203, %r4594, %r4462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r203, %r4607, %r4467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r203, %r4618, %r4472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r203, %r4629, %r4477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r203, %r4640, %r4482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r203, %r4653, %r4487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r203, %r4664, %r4492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r203, %r4675, %r4497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4749, %r203, %r4686, %r4502;
	// end inline asm
	// begin inline asm
	mov.b32 %r4758, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4769, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4755, %r652, %r653, %r4758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4759, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4760, %r4758, %r4759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4763, %r4755, %r4760;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4766, %r663, %r653, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4770, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4771, %r4769, %r4770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4774, %r4766, %r4771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4777, %r652, %r675, %r4758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4781, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4782, %r4758, %r4781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4785, %r4777, %r4782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4788, %r663, %r675, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4792, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4793, %r4769, %r4792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4796, %r4788, %r4793;
	// end inline asm
	// begin inline asm
	mov.b32 %r4804, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4815, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4801, %r652, %r699, %r4804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4805, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4806, %r4804, %r4805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4809, %r4801, %r4806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4812, %r663, %r699, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4817, %r4815, %r4816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4820, %r4812, %r4817;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4823, %r652, %r721, %r4804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4827, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4828, %r4804, %r4827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4831, %r4823, %r4828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4834, %r663, %r721, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4838, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4839, %r4815, %r4838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4842, %r4834, %r4839;
	// end inline asm
	// begin inline asm
	mov.b32 %r4850, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4861, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4847, %r652, %r745, %r4850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4851, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4852, %r4850, %r4851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4855, %r4847, %r4852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4858, %r663, %r745, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4863, %r4861, %r4862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4866, %r4858, %r4863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4869, %r652, %r767, %r4850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4873, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4874, %r4850, %r4873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4877, %r4869, %r4874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4880, %r663, %r767, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4884, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4885, %r4861, %r4884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4888, %r4880, %r4885;
	// end inline asm
	// begin inline asm
	mov.b32 %r4896, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r4907, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4893, %r652, %r791, %r4896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4897, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4898, %r4896, %r4897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4901, %r4893, %r4898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4904, %r663, %r791, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4909, %r4907, %r4908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4912, %r4904, %r4909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4915, %r652, %r813, %r4896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4919, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4920, %r4896, %r4919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4923, %r4915, %r4920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4926, %r663, %r813, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4930, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4931, %r4907, %r4930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4934, %r4926, %r4931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4937, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4939, %r4937, %r4763, %r4689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4943, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4945, %r4943, %r4774, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4949, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4951, %r4949, %r4785, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4796, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4809, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4820, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4831, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4842, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4855, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4866, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4877, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4888, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4901, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4912, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4923, %r4745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4934, %r4749;
	// end inline asm
	// begin inline asm
	mov.b32 %r5038, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5049, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5035, %r652, %r2449, %r5038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5039, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5040, %r5038, %r5039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5043, %r5035, %r5040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5046, %r663, %r2449, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5050, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5051, %r5049, %r5050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5054, %r5046, %r5051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5057, %r652, %r2471, %r5038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5061, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5062, %r5038, %r5061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5065, %r5057, %r5062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5068, %r663, %r2471, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5072, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5073, %r5049, %r5072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5076, %r5068, %r5073;
	// end inline asm
	// begin inline asm
	mov.b32 %r5084, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5095, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5081, %r652, %r2495, %r5084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5085, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5086, %r5084, %r5085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5089, %r5081, %r5086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5092, %r663, %r2495, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5097, %r5095, %r5096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5100, %r5092, %r5097;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5103, %r652, %r2517, %r5084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5107, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5108, %r5084, %r5107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5111, %r5103, %r5108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5114, %r663, %r2517, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5118, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5119, %r5095, %r5118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5122, %r5114, %r5119;
	// end inline asm
	// begin inline asm
	mov.b32 %r5130, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5141, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5127, %r652, %r2541, %r5130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5131, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5132, %r5130, %r5131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5135, %r5127, %r5132;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5138, %r663, %r2541, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5143, %r5141, %r5142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5146, %r5138, %r5143;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5149, %r652, %r2563, %r5130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5153, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5154, %r5130, %r5153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5157, %r5149, %r5154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5160, %r663, %r2563, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5164, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5165, %r5141, %r5164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5168, %r5160, %r5165;
	// end inline asm
	// begin inline asm
	mov.b32 %r5176, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5187, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5173, %r652, %r2587, %r5176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5177, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5178, %r5176, %r5177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5181, %r5173, %r5178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5184, %r663, %r2587, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5189, %r5187, %r5188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5192, %r5184, %r5189;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5195, %r652, %r2609, %r5176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5199, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5200, %r5176, %r5199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5203, %r5195, %r5200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5206, %r663, %r2609, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5210, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5211, %r5187, %r5210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5214, %r5206, %r5211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5288, %r239, %r5043, %r4939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r239, %r5054, %r4945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r239, %r5065, %r4951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r239, %r5076, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r239, %r5089, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r239, %r5100, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r239, %r5111, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r239, %r5122, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r239, %r5135, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r239, %r5146, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r239, %r5157, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r239, %r5168, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r239, %r5181, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r239, %r5192, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r239, %r5203, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r239, %r5214, %r5029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5281, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5283, %r5281, %r5285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5286, %r260, %r5288, %r5283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5290, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5292, %r5290, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5295, %r260, %r5297, %r5292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5299, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5301, %r5299, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r260, %r5306, %r5301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5308, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5310, %r5308, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r260, %r5315, %r5310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5317, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5319, %r5317, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r260, %r5324, %r5319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r260, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r260, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5344, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r5344, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r260, %r5351, %r5346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r263, %r5288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r260, %r5285, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r263, %r5297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r260, %r5294, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r263, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r260, %r5303, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r263, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r260, %r5312, %r5374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5381, %r263, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r260, %r5321, %r5381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5388, %r263, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5391, %r260, %r5330, %r5388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5395, %r263, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5398, %r260, %r5339, %r5395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5402, %r263, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5405, %r260, %r5348, %r5402;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5496, %r5493}, {%r319, %r325, %r322, %r328}, {%r5286, %r5356}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5505, %r5502}, {%r319, %r325, %r322, %r328}, {%r5295, %r5363}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5514, %r5511}, {%r319, %r325, %r322, %r328}, {%r5304, %r5370}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5523, %r5520}, {%r319, %r325, %r322, %r328}, {%r5313, %r5377}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5532, %r5529}, {%r319, %r325, %r322, %r328}, {%r5322, %r5384}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r319, %r325, %r322, %r328}, {%r5331, %r5391}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r319, %r325, %r322, %r328}, {%r5340, %r5398}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5559, %r5556}, {%r319, %r325, %r322, %r328}, {%r5349, %r5405}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5489, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5491, %r5489, %r5493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5494, %r363, %r5496, %r5491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5498, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5500, %r5498, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5503, %r363, %r5505, %r5500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5507, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5509, %r5507, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5512, %r363, %r5514, %r5509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5516, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5518, %r5516, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5521, %r363, %r5523, %r5518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5525, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5527, %r5525, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5530, %r363, %r5532, %r5527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r363, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r363, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5552, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r5552, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r363, %r5559, %r5554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r366, %r5496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r363, %r5493, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r366, %r5505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r363, %r5502, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r366, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r363, %r5511, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r366, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r363, %r5520, %r5582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5589, %r366, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5592, %r363, %r5529, %r5589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5596, %r366, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5599, %r363, %r5538, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5603, %r366, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5606, %r363, %r5547, %r5603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5610, %r366, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5613, %r363, %r5556, %r5610;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5617, %r5618}, {%r397, %r403, %r400, %r406}, {%r5494, %r5564}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5627, %r5628}, {%r397, %r403, %r400, %r406}, {%r5503, %r5571}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5637, %r5638}, {%r397, %r403, %r400, %r406}, {%r5512, %r5578}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5647, %r5648}, {%r397, %r403, %r400, %r406}, {%r5521, %r5585}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5657, %r5658}, {%r397, %r403, %r400, %r406}, {%r5530, %r5592}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5667, %r5668}, {%r397, %r403, %r400, %r406}, {%r5539, %r5599}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5677, %r5678}, {%r397, %r403, %r400, %r406}, {%r5548, %r5606}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5687, %r5688}, {%r397, %r403, %r400, %r406}, {%r5557, %r5613}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5697, %r104, %r5617;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5700, %r104, %r5618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r104, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r104, %r5628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r104, %r5637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r104, %r5638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r104, %r5647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r104, %r5648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r104, %r5657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r104, %r5658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r104, %r5667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r104, %r5668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r104, %r5677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r104, %r5678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r104, %r5687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r104, %r5688;
	// end inline asm
	// begin inline asm
	mov.b32 %r5745, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5746, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5747, %r5697, %r5745;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5750, %r5747, %r5746;
	// end inline asm
	// begin inline asm
	mov.b32 %r5753, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5754, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5755, %r5700, %r5753;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5758, %r5755, %r5754;
	// end inline asm
	// begin inline asm
	mov.b32 %r5761, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5762, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5763, %r5703, %r5761;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5766, %r5763, %r5762;
	// end inline asm
	// begin inline asm
	mov.b32 %r5769, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5770, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5771, %r5706, %r5769;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5774, %r5771, %r5770;
	// end inline asm
	// begin inline asm
	mov.b32 %r5777, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5778, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5779, %r5709, %r5777;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5782, %r5779, %r5778;
	// end inline asm
	// begin inline asm
	mov.b32 %r5785, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5786, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5787, %r5712, %r5785;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5790, %r5787, %r5786;
	// end inline asm
	// begin inline asm
	mov.b32 %r5793, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5794, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5795, %r5715, %r5793;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5798, %r5795, %r5794;
	// end inline asm
	// begin inline asm
	mov.b32 %r5801, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5802, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5803, %r5718, %r5801;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5806, %r5803, %r5802;
	// end inline asm
	// begin inline asm
	mov.b32 %r5809, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5810, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5811, %r5721, %r5809;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5814, %r5811, %r5810;
	// end inline asm
	// begin inline asm
	mov.b32 %r5817, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5818, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5819, %r5724, %r5817;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5822, %r5819, %r5818;
	// end inline asm
	// begin inline asm
	mov.b32 %r5825, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5826, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5827, %r5727, %r5825;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5830, %r5827, %r5826;
	// end inline asm
	// begin inline asm
	mov.b32 %r5833, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5834, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5835, %r5730, %r5833;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5838, %r5835, %r5834;
	// end inline asm
	// begin inline asm
	mov.b32 %r5841, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5842, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5843, %r5733, %r5841;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5846, %r5843, %r5842;
	// end inline asm
	// begin inline asm
	mov.b32 %r5849, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5850, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5851, %r5736, %r5849;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5854, %r5851, %r5850;
	// end inline asm
	// begin inline asm
	mov.b32 %r5857, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5858, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5859, %r5739, %r5857;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5862, %r5859, %r5858;
	// end inline asm
	// begin inline asm
	mov.b32 %r5865, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r5866, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5867, %r5742, %r5865;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5870, %r5867, %r5866;
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5875, %r5876, %r5874;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5878, %r5750, %r5875;
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5882, %r5876, %r5881;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5885, %r5758, %r5882;
	// end inline asm
	// begin inline asm
	mov.b32 %r5888, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5876, %r5888;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5892, %r5766, %r5889;
	// end inline asm
	// begin inline asm
	mov.b32 %r5895, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5876, %r5895;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5899, %r5774, %r5896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5902, %r5878, %r5892, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5906, %r5885, %r5899, %r2313;
	// end inline asm
	shl.b32 	%r5913, %r5906, 4;
	// begin inline asm
	lop3.b32 %r5910, %r2319, %r5902, %r5913, 202;
	// end inline asm
	xor.b32  	%r7845, %r5910, -2004318072;
	// begin inline asm
	mov.b32 %r5917, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5915, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5916, %r5917, %r5915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5919, %r5782, %r5916;
	// end inline asm
	// begin inline asm
	mov.b32 %r5922, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5917, %r5922;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5926, %r5790, %r5923;
	// end inline asm
	// begin inline asm
	mov.b32 %r5929, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5917, %r5929;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5933, %r5798, %r5930;
	// end inline asm
	// begin inline asm
	mov.b32 %r5936, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5917, %r5936;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5940, %r5806, %r5937;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5943, %r5919, %r5933, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5947, %r5926, %r5940, %r2313;
	// end inline asm
	shl.b32 	%r5954, %r5947, 4;
	// begin inline asm
	lop3.b32 %r5951, %r2319, %r5943, %r5954, 202;
	// end inline asm
	xor.b32  	%r7846, %r5951, -2004318072;
	// begin inline asm
	mov.b32 %r5958, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5956, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5957, %r5958, %r5956;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5960, %r5814, %r5957;
	// end inline asm
	// begin inline asm
	mov.b32 %r5963, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5958, %r5963;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5967, %r5822, %r5964;
	// end inline asm
	// begin inline asm
	mov.b32 %r5970, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5958, %r5970;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5974, %r5830, %r5971;
	// end inline asm
	// begin inline asm
	mov.b32 %r5977, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5958, %r5977;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5981, %r5838, %r5978;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5984, %r5960, %r5974, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5988, %r5967, %r5981, %r2313;
	// end inline asm
	shl.b32 	%r5995, %r5988, 4;
	// begin inline asm
	lop3.b32 %r5992, %r2319, %r5984, %r5995, 202;
	// end inline asm
	xor.b32  	%r7847, %r5992, -2004318072;
	// begin inline asm
	mov.b32 %r5999, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r5997, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5998, %r5999, %r5997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6001, %r5846, %r5998;
	// end inline asm
	// begin inline asm
	mov.b32 %r6004, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5999, %r6004;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6008, %r5854, %r6005;
	// end inline asm
	// begin inline asm
	mov.b32 %r6011, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5999, %r6011;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6015, %r5862, %r6012;
	// end inline asm
	// begin inline asm
	mov.b32 %r6018, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5999, %r6018;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6022, %r5870, %r6019;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6025, %r6001, %r6015, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6029, %r6008, %r6022, %r2313;
	// end inline asm
	shl.b32 	%r6036, %r6029, 4;
	// begin inline asm
	lop3.b32 %r6033, %r2319, %r6025, %r6036, 202;
	// end inline asm
	xor.b32  	%r7848, %r6033, -2004318072;
	st.shared.u32 	[%rd85], %r7845;
	st.shared.u32 	[%rd86], %r7846;
	st.shared.u32 	[%rd87], %r7847;
	st.shared.u32 	[%rd88], %r7848;
	ld.shared.u32 	%r7976, [%rd81];
	ld.shared.u32 	%r7977, [%rd82];
	ld.shared.u32 	%r7978, [%rd83];
	ld.shared.u32 	%r7979, [%rd84];
	// begin inline asm
	mov.b32 %r6042, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6053, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6041, %r7976, -2004318072;
	// begin inline asm
	lop3.b32 %r6039, %r652, %r6041, %r6042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6043, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6044, %r6042, %r6043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6047, %r6039, %r6044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6050, %r663, %r6041, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6054, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6055, %r6053, %r6054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6058, %r6050, %r6055;
	// end inline asm
	shr.u32 	%r6063, %r6041, 8;
	// begin inline asm
	lop3.b32 %r6061, %r652, %r6063, %r6042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6065, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6066, %r6042, %r6065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6069, %r6061, %r6066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6072, %r663, %r6063, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6076, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6077, %r6053, %r6076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6080, %r6072, %r6077;
	// end inline asm
	// begin inline asm
	mov.b32 %r6088, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6099, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6087, %r7977, -2004318072;
	// begin inline asm
	lop3.b32 %r6085, %r652, %r6087, %r6088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6089, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6090, %r6088, %r6089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6093, %r6085, %r6090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6096, %r663, %r6087, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6101, %r6099, %r6100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6104, %r6096, %r6101;
	// end inline asm
	shr.u32 	%r6109, %r6087, 8;
	// begin inline asm
	lop3.b32 %r6107, %r652, %r6109, %r6088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6111, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6112, %r6088, %r6111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6115, %r6107, %r6112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6118, %r663, %r6109, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6122, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6123, %r6099, %r6122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6126, %r6118, %r6123;
	// end inline asm
	// begin inline asm
	mov.b32 %r6134, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6145, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6133, %r7978, -2004318072;
	// begin inline asm
	lop3.b32 %r6131, %r652, %r6133, %r6134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6135, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6136, %r6134, %r6135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6139, %r6131, %r6136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6142, %r663, %r6133, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6147, %r6145, %r6146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6150, %r6142, %r6147;
	// end inline asm
	shr.u32 	%r6155, %r6133, 8;
	// begin inline asm
	lop3.b32 %r6153, %r652, %r6155, %r6134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6157, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6158, %r6134, %r6157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6161, %r6153, %r6158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6164, %r663, %r6155, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6168, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6169, %r6145, %r6168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6172, %r6164, %r6169;
	// end inline asm
	// begin inline asm
	mov.b32 %r6180, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6191, {%rs1095, %rs1095};
	// end inline asm
	xor.b32  	%r6179, %r7979, -2004318072;
	// begin inline asm
	lop3.b32 %r6177, %r652, %r6179, %r6180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6181, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6182, %r6180, %r6181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6185, %r6177, %r6182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6188, %r663, %r6179, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6193, %r6191, %r6192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6196, %r6188, %r6193;
	// end inline asm
	shr.u32 	%r6201, %r6179, 8;
	// begin inline asm
	lop3.b32 %r6199, %r652, %r6201, %r6180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6203, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6204, %r6180, %r6203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6207, %r6199, %r6204;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6210, %r663, %r6201, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6214, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6215, %r6191, %r6214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6218, %r6210, %r6215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6221, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6223, %r6221, %r6047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6226, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6228, %r6226, %r6058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6231, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6233, %r6231, %r6069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6236, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6238, %r6236, %r6080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6241, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6243, %r6241, %r6093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6246, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6248, %r6246, %r6104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6251, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6253, %r6251, %r6115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6256, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6258, %r6256, %r6126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6261, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6263, %r6261, %r6139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6266, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6268, %r6266, %r6150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6271, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6273, %r6271, %r6161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6276, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6278, %r6276, %r6172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6281, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6283, %r6281, %r6185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6286, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6288, %r6286, %r6196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6291, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6293, %r6291, %r6207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6296, %r257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6298, %r6296, %r6218;
	// end inline asm
	// begin inline asm
	mov.b32 %r6306, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6317, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6303, %r652, %r653, %r6306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6307, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6308, %r6306, %r6307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6311, %r6303, %r6308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6314, %r663, %r653, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6318, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6319, %r6317, %r6318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6322, %r6314, %r6319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6325, %r652, %r675, %r6306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6329, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6330, %r6306, %r6329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6333, %r6325, %r6330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6336, %r663, %r675, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6340, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6341, %r6317, %r6340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6344, %r6336, %r6341;
	// end inline asm
	// begin inline asm
	mov.b32 %r6352, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6363, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6349, %r652, %r699, %r6352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6353, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6354, %r6352, %r6353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6357, %r6349, %r6354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6360, %r663, %r699, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6365, %r6363, %r6364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6368, %r6360, %r6365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6371, %r652, %r721, %r6352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6375, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6376, %r6352, %r6375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6379, %r6371, %r6376;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6382, %r663, %r721, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6386, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6387, %r6363, %r6386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6390, %r6382, %r6387;
	// end inline asm
	// begin inline asm
	mov.b32 %r6398, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6409, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6395, %r652, %r745, %r6398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6399, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6400, %r6398, %r6399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6403, %r6395, %r6400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6406, %r663, %r745, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6411, %r6409, %r6410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6414, %r6406, %r6411;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6417, %r652, %r767, %r6398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6421, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6422, %r6398, %r6421;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6425, %r6417, %r6422;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6428, %r663, %r767, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6432, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6433, %r6409, %r6432;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6436, %r6428, %r6433;
	// end inline asm
	// begin inline asm
	mov.b32 %r6444, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6455, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6441, %r652, %r791, %r6444, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6445, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6446, %r6444, %r6445;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6449, %r6441, %r6446;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6452, %r663, %r791, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6457, %r6455, %r6456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6460, %r6452, %r6457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6463, %r652, %r813, %r6444, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6467, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6468, %r6444, %r6467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6471, %r6463, %r6468;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6474, %r663, %r813, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6478, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6479, %r6455, %r6478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6482, %r6474, %r6479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6485, %r203, %r6311, %r6223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r203, %r6322, %r6228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r203, %r6333, %r6233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r203, %r6344, %r6238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r203, %r6357, %r6243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r203, %r6368, %r6248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r203, %r6379, %r6253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r203, %r6390, %r6258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r203, %r6403, %r6263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r203, %r6414, %r6268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r203, %r6425, %r6273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r203, %r6436, %r6278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r203, %r6449, %r6283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r203, %r6460, %r6288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r203, %r6471, %r6293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6545, %r203, %r6482, %r6298;
	// end inline asm
	// begin inline asm
	mov.b32 %r6554, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6565, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6551, %r652, %r2449, %r6554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6555, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6556, %r6554, %r6555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6559, %r6551, %r6556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6562, %r663, %r2449, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6566, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6567, %r6565, %r6566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6570, %r6562, %r6567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6573, %r652, %r2471, %r6554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6577, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6578, %r6554, %r6577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6581, %r6573, %r6578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6584, %r663, %r2471, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6588, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6589, %r6565, %r6588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6592, %r6584, %r6589;
	// end inline asm
	// begin inline asm
	mov.b32 %r6600, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6611, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6597, %r652, %r2495, %r6600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6601, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6602, %r6600, %r6601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6605, %r6597, %r6602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6608, %r663, %r2495, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6613, %r6611, %r6612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6616, %r6608, %r6613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6619, %r652, %r2517, %r6600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6623, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6624, %r6600, %r6623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6627, %r6619, %r6624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6630, %r663, %r2517, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6634, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6635, %r6611, %r6634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6638, %r6630, %r6635;
	// end inline asm
	// begin inline asm
	mov.b32 %r6646, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6657, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6643, %r652, %r2541, %r6646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6647, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6648, %r6646, %r6647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6651, %r6643, %r6648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6654, %r663, %r2541, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6659, %r6657, %r6658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6662, %r6654, %r6659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6665, %r652, %r2563, %r6646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6669, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6670, %r6646, %r6669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6673, %r6665, %r6670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6676, %r663, %r2563, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6680, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6681, %r6657, %r6680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6684, %r6676, %r6681;
	// end inline asm
	// begin inline asm
	mov.b32 %r6692, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6703, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6689, %r652, %r2587, %r6692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6693, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6694, %r6692, %r6693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6697, %r6689, %r6694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6700, %r663, %r2587, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6705, %r6703, %r6704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6708, %r6700, %r6705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6711, %r652, %r2609, %r6692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6715, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6716, %r6692, %r6715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6719, %r6711, %r6716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6722, %r663, %r2609, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6726, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6727, %r6703, %r6726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6730, %r6722, %r6727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6733, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6735, %r6733, %r6559, %r6485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6739, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6741, %r6739, %r6570, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6745, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6747, %r6745, %r6581, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6592, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6605, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6616, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6627, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6638, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6651, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6662, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6673, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6684, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6697, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6708, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6719, %r6541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6730, %r6545;
	// end inline asm
	// begin inline asm
	mov.b32 %r6834, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6845, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6831, %r652, %r4245, %r6834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6835, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6836, %r6834, %r6835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6839, %r6831, %r6836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6842, %r663, %r4245, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6846, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6847, %r6845, %r6846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6850, %r6842, %r6847;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6853, %r652, %r4267, %r6834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6857, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6858, %r6834, %r6857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6861, %r6853, %r6858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6864, %r663, %r4267, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6868, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6869, %r6845, %r6868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6872, %r6864, %r6869;
	// end inline asm
	// begin inline asm
	mov.b32 %r6880, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6891, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6877, %r652, %r4291, %r6880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6881, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6882, %r6880, %r6881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6885, %r6877, %r6882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6888, %r663, %r4291, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6893, %r6891, %r6892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6896, %r6888, %r6893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6899, %r652, %r4313, %r6880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6903, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6904, %r6880, %r6903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6907, %r6899, %r6904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6910, %r663, %r4313, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6914, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6915, %r6891, %r6914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6918, %r6910, %r6915;
	// end inline asm
	// begin inline asm
	mov.b32 %r6926, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6937, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6923, %r652, %r4337, %r6926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6927, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6928, %r6926, %r6927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6931, %r6923, %r6928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6934, %r663, %r4337, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6939, %r6937, %r6938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6942, %r6934, %r6939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6945, %r652, %r4359, %r6926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6949, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6950, %r6926, %r6949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6953, %r6945, %r6950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6956, %r663, %r4359, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6960, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6961, %r6937, %r6960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6964, %r6956, %r6961;
	// end inline asm
	// begin inline asm
	mov.b32 %r6972, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r6983, {%rs1095, %rs1095};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6969, %r652, %r4383, %r6972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6973, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6974, %r6972, %r6973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6977, %r6969, %r6974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6980, %r663, %r4383, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6985, %r6983, %r6984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6988, %r6980, %r6985;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6991, %r652, %r4405, %r6972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6995, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6996, %r6972, %r6995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6999, %r6991, %r6996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7002, %r663, %r4405, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7006, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7007, %r6983, %r7006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7010, %r7002, %r7007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7084, %r239, %r6839, %r6735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r239, %r6850, %r6741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r239, %r6861, %r6747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r239, %r6872, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r239, %r6885, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r239, %r6896, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r239, %r6907, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r239, %r6918, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r239, %r6931, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r239, %r6942, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r239, %r6953, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r239, %r6964, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r239, %r6977, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r239, %r6988, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r239, %r6999, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r239, %r7010, %r6825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7077, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7079, %r7077, %r7081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7082, %r260, %r7084, %r7079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7086, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7088, %r7086, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7091, %r260, %r7093, %r7088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7095, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7097, %r7095, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r260, %r7102, %r7097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7104, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7106, %r7104, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r260, %r7111, %r7106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7113, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7115, %r7113, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r260, %r7120, %r7115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r260, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r260, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7140, %r263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r7140, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r260, %r7147, %r7142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r263, %r7084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r260, %r7081, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r263, %r7093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r260, %r7090, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r263, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r260, %r7099, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r263, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r260, %r7108, %r7170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7177, %r263, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r260, %r7117, %r7177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7184, %r263, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7187, %r260, %r7126, %r7184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7191, %r263, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7194, %r260, %r7135, %r7191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7198, %r263, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7201, %r260, %r7144, %r7198;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7292, %r7289}, {%r319, %r325, %r322, %r328}, {%r7082, %r7152}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7301, %r7298}, {%r319, %r325, %r322, %r328}, {%r7091, %r7159}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7310, %r7307}, {%r319, %r325, %r322, %r328}, {%r7100, %r7166}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7319, %r7316}, {%r319, %r325, %r322, %r328}, {%r7109, %r7173}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7328, %r7325}, {%r319, %r325, %r322, %r328}, {%r7118, %r7180}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r319, %r325, %r322, %r328}, {%r7127, %r7187}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r319, %r325, %r322, %r328}, {%r7136, %r7194}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7355, %r7352}, {%r319, %r325, %r322, %r328}, {%r7145, %r7201}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7285, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7287, %r7285, %r7289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7290, %r363, %r7292, %r7287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7294, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7296, %r7294, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7299, %r363, %r7301, %r7296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7303, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7305, %r7303, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7308, %r363, %r7310, %r7305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7312, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7314, %r7312, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7317, %r363, %r7319, %r7314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7321, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7323, %r7321, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7326, %r363, %r7328, %r7323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r363, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r363, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7348, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r7348, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r363, %r7355, %r7350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r366, %r7292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r363, %r7289, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r366, %r7301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r363, %r7298, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r366, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r363, %r7307, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r366, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r363, %r7316, %r7378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7385, %r366, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7388, %r363, %r7325, %r7385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7392, %r366, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7395, %r363, %r7334, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7399, %r366, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7402, %r363, %r7343, %r7399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7406, %r366, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7409, %r363, %r7352, %r7406;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7413, %r7414}, {%r397, %r403, %r400, %r406}, {%r7290, %r7360}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7423, %r7424}, {%r397, %r403, %r400, %r406}, {%r7299, %r7367}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7433, %r7434}, {%r397, %r403, %r400, %r406}, {%r7308, %r7374}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7443, %r7444}, {%r397, %r403, %r400, %r406}, {%r7317, %r7381}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7453, %r7454}, {%r397, %r403, %r400, %r406}, {%r7326, %r7388}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7463, %r7464}, {%r397, %r403, %r400, %r406}, {%r7335, %r7395}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7473, %r7474}, {%r397, %r403, %r400, %r406}, {%r7344, %r7402}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7483, %r7484}, {%r397, %r403, %r400, %r406}, {%r7353, %r7409}, {%r1825, %r1825};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7493, %r104, %r7413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7496, %r104, %r7414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r104, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r104, %r7424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r104, %r7433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r104, %r7434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r104, %r7443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r104, %r7444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r104, %r7453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r104, %r7454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r104, %r7463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r104, %r7464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r104, %r7473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r104, %r7474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r104, %r7483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r104, %r7484;
	// end inline asm
	// begin inline asm
	mov.b32 %r7541, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7542, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7543, %r7493, %r7541;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7546, %r7543, %r7542;
	// end inline asm
	// begin inline asm
	mov.b32 %r7549, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7550, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7551, %r7496, %r7549;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7554, %r7551, %r7550;
	// end inline asm
	// begin inline asm
	mov.b32 %r7557, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7558, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7559, %r7499, %r7557;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7562, %r7559, %r7558;
	// end inline asm
	// begin inline asm
	mov.b32 %r7565, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7566, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7567, %r7502, %r7565;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7570, %r7567, %r7566;
	// end inline asm
	// begin inline asm
	mov.b32 %r7573, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7574, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7575, %r7505, %r7573;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7578, %r7575, %r7574;
	// end inline asm
	// begin inline asm
	mov.b32 %r7581, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7582, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7583, %r7508, %r7581;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7586, %r7583, %r7582;
	// end inline asm
	// begin inline asm
	mov.b32 %r7589, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7590, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7591, %r7511, %r7589;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7594, %r7591, %r7590;
	// end inline asm
	// begin inline asm
	mov.b32 %r7597, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7598, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7599, %r7514, %r7597;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7602, %r7599, %r7598;
	// end inline asm
	// begin inline asm
	mov.b32 %r7605, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7606, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7607, %r7517, %r7605;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7610, %r7607, %r7606;
	// end inline asm
	// begin inline asm
	mov.b32 %r7613, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7614, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7615, %r7520, %r7613;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7618, %r7615, %r7614;
	// end inline asm
	// begin inline asm
	mov.b32 %r7621, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7622, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7623, %r7523, %r7621;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7626, %r7623, %r7622;
	// end inline asm
	// begin inline asm
	mov.b32 %r7629, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7630, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7631, %r7526, %r7629;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7634, %r7631, %r7630;
	// end inline asm
	// begin inline asm
	mov.b32 %r7637, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7638, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7639, %r7529, %r7637;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7642, %r7639, %r7638;
	// end inline asm
	// begin inline asm
	mov.b32 %r7645, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7646, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7647, %r7532, %r7645;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7650, %r7647, %r7646;
	// end inline asm
	// begin inline asm
	mov.b32 %r7653, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7654, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7655, %r7535, %r7653;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7658, %r7655, %r7654;
	// end inline asm
	// begin inline asm
	mov.b32 %r7661, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	mov.b32 %r7662, {%rs218, %rs218};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7663, %r7538, %r7661;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7666, %r7663, %r7662;
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7671, %r7672, %r7670;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7674, %r7546, %r7671;
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7678, %r7672, %r7677;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7681, %r7554, %r7678;
	// end inline asm
	// begin inline asm
	mov.b32 %r7684, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7672, %r7684;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7688, %r7562, %r7685;
	// end inline asm
	// begin inline asm
	mov.b32 %r7691, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7672, %r7691;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7695, %r7570, %r7692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7698, %r7674, %r7688, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7702, %r7681, %r7695, %r2313;
	// end inline asm
	shl.b32 	%r7709, %r7702, 4;
	// begin inline asm
	lop3.b32 %r7706, %r2319, %r7698, %r7709, 202;
	// end inline asm
	xor.b32  	%r7849, %r7706, -2004318072;
	// begin inline asm
	mov.b32 %r7713, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7711, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7712, %r7713, %r7711;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7715, %r7578, %r7712;
	// end inline asm
	// begin inline asm
	mov.b32 %r7718, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7713, %r7718;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7722, %r7586, %r7719;
	// end inline asm
	// begin inline asm
	mov.b32 %r7725, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7713, %r7725;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7729, %r7594, %r7726;
	// end inline asm
	// begin inline asm
	mov.b32 %r7732, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7713, %r7732;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7736, %r7602, %r7733;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7739, %r7715, %r7729, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7743, %r7722, %r7736, %r2313;
	// end inline asm
	shl.b32 	%r7750, %r7743, 4;
	// begin inline asm
	lop3.b32 %r7747, %r2319, %r7739, %r7750, 202;
	// end inline asm
	xor.b32  	%r7850, %r7747, -2004318072;
	// begin inline asm
	mov.b32 %r7754, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7752, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7753, %r7754, %r7752;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7756, %r7610, %r7753;
	// end inline asm
	// begin inline asm
	mov.b32 %r7759, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7754, %r7759;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7763, %r7618, %r7760;
	// end inline asm
	// begin inline asm
	mov.b32 %r7766, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7754, %r7766;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7770, %r7626, %r7767;
	// end inline asm
	// begin inline asm
	mov.b32 %r7773, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7754, %r7773;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7777, %r7634, %r7774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7780, %r7756, %r7770, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7784, %r7763, %r7777, %r2313;
	// end inline asm
	shl.b32 	%r7791, %r7784, 4;
	// begin inline asm
	lop3.b32 %r7788, %r2319, %r7780, %r7791, 202;
	// end inline asm
	xor.b32  	%r7851, %r7788, -2004318072;
	// begin inline asm
	mov.b32 %r7795, {%rs1199, %rs1199};
	// end inline asm
	// begin inline asm
	mov.b32 %r7793, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7794, %r7795, %r7793;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7797, %r7642, %r7794;
	// end inline asm
	// begin inline asm
	mov.b32 %r7800, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7795, %r7800;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7804, %r7650, %r7801;
	// end inline asm
	// begin inline asm
	mov.b32 %r7807, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7795, %r7807;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7811, %r7658, %r7808;
	// end inline asm
	// begin inline asm
	mov.b32 %r7814, {%rs28, %rs28};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7795, %r7814;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7818, %r7666, %r7815;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7821, %r7797, %r7811, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7825, %r7804, %r7818, %r2313;
	// end inline asm
	shl.b32 	%r7832, %r7825, 4;
	// begin inline asm
	lop3.b32 %r7829, %r2319, %r7821, %r7832, 202;
	// end inline asm
	xor.b32  	%r7852, %r7829, -2004318072;
	st.shared.u32 	[%rd85], %r7849;
	st.shared.u32 	[%rd86], %r7850;
	st.shared.u32 	[%rd87], %r7851;
	st.shared.u32 	[%rd88], %r7852;
	add.s32 	%r7967, %r7967, -64;
	add.s64 	%rd145, %rd145, 8324;
	setp.eq.s32 	%p217, %r7967, 0;
	@%p217 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;
$L__BB0_85:                             // %guard_exit17352
                                        //   in Loop: Header=BB0_83 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7858, [%rd5];
	ld.shared.u32 	%r7859, [%rd6+128];
	ld.shared.u32 	%r7866, [%rd6+4];
	ld.shared.u32 	%r7867, [%rd6+132];
	ld.shared.u32 	%r7874, [%rd5+8324];
	ld.shared.u32 	%r7875, [%rd6+8452];
	ld.shared.u32 	%r7882, [%rd6+8328];
	ld.shared.u32 	%r7883, [%rd6+8456];
	ld.shared.u32 	%r7890, [%rd5+16648];
	ld.shared.u32 	%r7891, [%rd6+16776];
	ld.shared.u32 	%r7898, [%rd6+16652];
	ld.shared.u32 	%r7899, [%rd6+16780];
	ld.shared.u32 	%r7906, [%rd5+24972];
	ld.shared.u32 	%r7907, [%rd6+25100];
	ld.shared.u32 	%r7914, [%rd6+24976];
	ld.shared.u32 	%r7915, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7853, %r7858, %r7859, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7857, %r7858, %r7859, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7861, %r7866, %r7867, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7865, %r7866, %r7867, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7869, %r7874, %r7875, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7873, %r7874, %r7875, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7882, %r7883, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7882, %r7883, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7890, %r7891, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7890, %r7891, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7898, %r7899, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7898, %r7899, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7906, %r7907, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7906, %r7907, %r564;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7914, %r7915, %r560;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7913, %r7914, %r7915, %r564;
	// end inline asm
	selp.b32 	%r7917, %r7857, %r7853, %p204;
	shfl.sync.bfly.b32	%r143, %r7917, 8, 31, -1;
	selp.b32 	%r7918, %r7865, %r7861, %p204;
	shfl.sync.bfly.b32	%r144, %r7918, 8, 31, -1;
	selp.b32 	%r7919, %r7873, %r7869, %p204;
	shfl.sync.bfly.b32	%r7920, %r7919, 8, 31, -1;
	selp.b32 	%r7921, %r7881, %r7877, %p204;
	shfl.sync.bfly.b32	%r7922, %r7921, 8, 31, -1;
	selp.b32 	%r7923, %r7889, %r7885, %p204;
	shfl.sync.bfly.b32	%r7924, %r7923, 8, 31, -1;
	selp.b32 	%r7925, %r7897, %r7893, %p204;
	shfl.sync.bfly.b32	%r7926, %r7925, 8, 31, -1;
	selp.b32 	%r7927, %r7905, %r7901, %p204;
	shfl.sync.bfly.b32	%r7928, %r7927, 8, 31, -1;
	selp.b32 	%r7929, %r7913, %r7909, %p204;
	shfl.sync.bfly.b32	%r7930, %r7929, 8, 31, -1;
	setp.eq.s32 	%p219, %r7966, 0;
	@%p219 bra 	$L__BB0_86;
// %bb.122:                             // %pass16502
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r7931, %r144, %r7865, %p204;
	selp.b32 	%r7932, %r7861, %r144, %p204;
	selp.b32 	%r7933, %r143, %r7857, %p204;
	selp.b32 	%r7934, %r7853, %r143, %p204;
	mul.lo.s32 	%r7935, %r68, 786432;
	or.b32  	%r7936, %r7935, %r50;
	or.b32  	%r7937, %r7936, %r53;
	cvt.u64.u32 	%rd89, %r7937;
	add.s64 	%rd90, %rd89, %rd7;
	mul.hi.s64 	%rd91, %rd90, 3074457345618258603;
	shr.u64 	%rd92, %rd91, 63;
	shr.s64 	%rd93, %rd91, 26;
	add.s64 	%rd94, %rd93, %rd92;
	setp.lt.s64 	%p221, %rd90, 0;
	mul.lo.s64 	%rd95, %rd94, 402653184;
	setp.ne.s64 	%p222, %rd95, %rd90;
	and.pred  	%p223, %p221, %p222;
	selp.s64 	%rd96, -1, 0, %p223;
	add.s64 	%rd97, %rd94, %rd96;
	mul.lo.s64 	%rd98, %rd97, 4611686018024734720;
	add.s64 	%rd99, %rd98, %rd90;
	shl.b64 	%rd100, %rd99, 2;
	add.s64 	%rd101, %rd3, %rd100;
	st.global.v4.u32 	[%rd101], {%r7934, %r7932, %r7933, %r7931};
$L__BB0_86:                             // %L39860
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r7938, %r7966, 64;
	setp.gt.u32 	%p224, %r7938, 191;
	@%p224 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_87;
$L__BB0_120:                            // %pass16609
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r136, %r68, 1;
	selp.b32 	%r145, %r7869, %r7920, %p204;
	selp.b32 	%r146, %r7920, %r7873, %p204;
	selp.b32 	%r147, %r7877, %r7922, %p204;
	selp.b32 	%r148, %r7922, %r7881, %p204;
	mad.lo.s32 	%r7939, %r136, 786432, %r54;
	cvt.u64.u32 	%rd102, %r7939;
	add.s64 	%rd103, %rd102, %rd7;
	mul.hi.s64 	%rd104, %rd103, 3074457345618258603;
	shr.u64 	%rd105, %rd104, 63;
	shr.s64 	%rd106, %rd104, 26;
	add.s64 	%rd107, %rd106, %rd105;
	setp.lt.s64 	%p225, %rd103, 0;
	mul.lo.s64 	%rd108, %rd107, 402653184;
	setp.ne.s64 	%p226, %rd108, %rd103;
	and.pred  	%p227, %p225, %p226;
	selp.s64 	%rd109, -1, 0, %p227;
	add.s64 	%rd110, %rd107, %rd109;
	mul.lo.s64 	%rd111, %rd110, 4611686018024734720;
	add.s64 	%rd112, %rd111, %rd103;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd114, %rd3, %rd113;
	st.global.v4.u32 	[%rd114], {%r145, %r147, %r146, %r148};
$L__BB0_87:                             // %L40078
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r138, %r68, 3;
	selp.b32 	%r153, %r7901, %r7928, %p204;
	selp.b32 	%r154, %r7928, %r7905, %p204;
	selp.b32 	%r155, %r7909, %r7930, %p204;
	selp.b32 	%r156, %r7930, %r7913, %p204;
	or.b32  	%r7940, %r7966, 128;
	setp.gt.u32 	%p228, %r7940, 191;
	@%p228 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_88;
$L__BB0_121:                            // %pass16716
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r137, %r68, 2;
	selp.b32 	%r149, %r7885, %r7924, %p204;
	selp.b32 	%r150, %r7924, %r7889, %p204;
	selp.b32 	%r151, %r7893, %r7926, %p204;
	selp.b32 	%r152, %r7926, %r7897, %p204;
	mad.lo.s32 	%r7941, %r137, 786432, %r54;
	cvt.u64.u32 	%rd115, %r7941;
	add.s64 	%rd116, %rd115, %rd7;
	mul.hi.s64 	%rd117, %rd116, 3074457345618258603;
	shr.u64 	%rd118, %rd117, 63;
	shr.s64 	%rd119, %rd117, 26;
	add.s64 	%rd120, %rd119, %rd118;
	setp.lt.s64 	%p229, %rd116, 0;
	mul.lo.s64 	%rd121, %rd120, 402653184;
	setp.ne.s64 	%p230, %rd121, %rd116;
	and.pred  	%p231, %p229, %p230;
	selp.s64 	%rd122, -1, 0, %p231;
	add.s64 	%rd123, %rd120, %rd122;
	mul.lo.s64 	%rd124, %rd123, 4611686018024734720;
	add.s64 	%rd125, %rd124, %rd116;
	shl.b64 	%rd126, %rd125, 2;
	add.s64 	%rd127, %rd3, %rd126;
	st.global.v4.u32 	[%rd127], {%r149, %r151, %r150, %r152};
	bra.uni 	$L__BB0_88;
$L__BB0_89:                             // %L40525
	st.global.u32 	[%rd4], %r7947;
	ret;
$L__BB0_7:                              // %L166
	mov.u32 	%r7946, 2;
	st.global.u32 	[%rd4], %r7946;
	mov.u64 	%rd143, exception3410;
	cvta.global.u64 	%rd144, %rd143;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd144;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_10:                             // %L275
	mov.u32 	%r7945, 3;
	st.global.u32 	[%rd4], %r7945;
	mov.u64 	%rd141, exception3410;
	cvta.global.u64 	%rd142, %rd141;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd142;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r157;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
